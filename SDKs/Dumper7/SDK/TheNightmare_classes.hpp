#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheNightmare

#include "Basic.hpp"

#include "DataTableUtilities_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "Engine_classes.hpp"
#include "DBDAnimation_classes.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class TheNightmare.BlackBox
// 0x0040 (0x02F8 - 0x02B8)
class UBlackBox final : public UItemAddon
{
public:
	struct FDBDTunableRowHandle                   _blockDuration;                                    // 0x02B8(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E0[0x18];                                     // 0x02E0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlackBox">();
	}
	static class UBlackBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlackBox>();
	}
};
static_assert(alignof(UBlackBox) == 0x000008, "Wrong alignment on UBlackBox");
static_assert(sizeof(UBlackBox) == 0x0002F8, "Wrong size on UBlackBox");
static_assert(offsetof(UBlackBox, _blockDuration) == 0x0002B8, "Member 'UBlackBox::_blockDuration' has a wrong offset!");

// Class TheNightmare.BloodWarden
// 0x0070 (0x0438 - 0x03C8)
class UBloodWarden final : public UPerk
{
public:
	uint8                                         Pad_3C8[0x50];                                     // 0x03C8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _bloodWardenBlockerStatusEffectClass;              // 0x0418(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _revealPlayerStatusEffectClass;                    // 0x0420(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _perkLevelSpikeDurations[0x3];                     // 0x0428(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BloodWarden">();
	}
	static class UBloodWarden* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBloodWarden>();
	}
};
static_assert(alignof(UBloodWarden) == 0x000008, "Wrong alignment on UBloodWarden");
static_assert(sizeof(UBloodWarden) == 0x000438, "Wrong size on UBloodWarden");
static_assert(offsetof(UBloodWarden, _bloodWardenBlockerStatusEffectClass) == 0x000418, "Member 'UBloodWarden::_bloodWardenBlockerStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UBloodWarden, _revealPlayerStatusEffectClass) == 0x000420, "Member 'UBloodWarden::_revealPlayerStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UBloodWarden, _perkLevelSpikeDurations) == 0x000428, "Member 'UBloodWarden::_perkLevelSpikeDurations' has a wrong offset!");

// Class TheNightmare.DreamInducerComponent
// 0x0008 (0x00C0 - 0x00B8)
class UDreamInducerComponent final : public UActorComponent
{
public:
	TSubclassOf<class UActorComponent>            _generatorDreamworldClass;                         // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Authority_OnLevelReadyToPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DreamInducerComponent">();
	}
	static class UDreamInducerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDreamInducerComponent>();
	}
};
static_assert(alignof(UDreamInducerComponent) == 0x000008, "Wrong alignment on UDreamInducerComponent");
static_assert(sizeof(UDreamInducerComponent) == 0x0000C0, "Wrong size on UDreamInducerComponent");
static_assert(offsetof(UDreamInducerComponent, _generatorDreamworldClass) == 0x0000B8, "Member 'UDreamInducerComponent::_generatorDreamworldClass' has a wrong offset!");

// Class TheNightmare.DreamSnare
// 0x0008 (0x0238 - 0x0230)
class ADreamSnare final : public AActor
{
public:
	bool                                          _isActive;                                         // 0x0230(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DreamSnare">();
	}
	static class ADreamSnare* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADreamSnare>();
	}
};
static_assert(alignof(ADreamSnare) == 0x000008, "Wrong alignment on ADreamSnare");
static_assert(sizeof(ADreamSnare) == 0x000238, "Wrong size on ADreamSnare");
static_assert(offsetof(ADreamSnare, _isActive) == 0x000230, "Member 'ADreamSnare::_isActive' has a wrong offset!");

// Class TheNightmare.DreamSnareEffect
// 0x0000 (0x0350 - 0x0350)
class UDreamSnareEffect final : public UStatusEffect
{
public:
	void OnActorBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnActorEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DreamSnareEffect">();
	}
	static class UDreamSnareEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDreamSnareEffect>();
	}
};
static_assert(alignof(UDreamSnareEffect) == 0x000008, "Wrong alignment on UDreamSnareEffect");
static_assert(sizeof(UDreamSnareEffect) == 0x000350, "Wrong size on UDreamSnareEffect");

// Class TheNightmare.GeneratorDreamworldComponent
// 0x0018 (0x00D0 - 0x00B8)
class UGeneratorDreamworldComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _beamSocketsForBloodEffect;                        // 0x00C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	void Cosmetic_OnPlayerFailSkillCheck(class ADBDPlayer* player);
	void OnRepairSkillCheckFailed(bool success, bool bonus, class ADBDPlayer* player, bool triggerLoudNoise, bool hadInput, ESkillCheckCustomType type, float chargeChange);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeneratorDreamworldComponent">();
	}
	static class UGeneratorDreamworldComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeneratorDreamworldComponent>();
	}
};
static_assert(alignof(UGeneratorDreamworldComponent) == 0x000008, "Wrong alignment on UGeneratorDreamworldComponent");
static_assert(sizeof(UGeneratorDreamworldComponent) == 0x0000D0, "Wrong size on UGeneratorDreamworldComponent");
static_assert(offsetof(UGeneratorDreamworldComponent, _beamSocketsForBloodEffect) == 0x0000C0, "Member 'UGeneratorDreamworldComponent::_beamSocketsForBloodEffect' has a wrong offset!");

// Class TheNightmare.GeneratorTeleportInteraction
// 0x00C0 (0x0800 - 0x0740)
class UGeneratorTeleportInteraction final : public UChargeableInteractionDefinition
{
public:
	float                                         OnBloodSpurtsAINoiseEventRange;                    // 0x0740(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_744[0x4];                                      // 0x0744(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimerObject*                           _teleportCooldownTimer;                            // 0x0748(0x0008)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_750[0x40];                                     // 0x0750(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class AGenerator*                             _selectedGenerator;                                // 0x0790(0x0008)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGenerator*                             _locallySelectedGenerator;                         // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTransform                             _selectedTeleportLocation;                         // 0x07A0(0x0030)(BlueprintVisible, Net, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          _isInteractionOngoing;                             // 0x07D0(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _teleportFailed;                                   // 0x07D1(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _noTeleportableGenerators;                         // 0x07D2(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7D3[0x1];                                      // 0x07D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _bloodSpurtInterval;                               // 0x07D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _collisionCheckCapsuleHalfHeight;                  // 0x07D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _collisionCheckCapsuleRadius;                      // 0x07DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                _collisionCheckLocationOffset;                     // 0x07E0(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _capsuleTraceAngleIncrement;                       // 0x07EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _generatorTeleportMaxAngle;                        // 0x07F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _downRaycastLength;                                // 0x07F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7F8[0x8];                                      // 0x07F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_StartTeleportCooldown(bool teleported);
	bool Authority_TeleportPlayerToGenerator(class ADBDPlayer* playerToTeleport, class AGenerator* generator);
	void InitializeTunableValues(class ASlasherPlayer* killer);
	void Multicast_OnTeleportLocationChosen(class AGenerator* generator, const struct FTransform& location);
	void Multicast_TeleportPlayer(const struct FVector& location, const struct FRotator& rotation);
	void OnBloodSpurts();
	void OnIntroCompleted();
	void OnLocallySelectedGeneratorSet(class AGenerator* selectedGenerator);
	void OnRep_SelectedGenerator();
	void OnRep_TeleportCooldownTimer();
	void OnSelectedGeneratorSet(class AGenerator* selectedGenerator);
	void OnTeleported(const struct FTransform& transformBeforeTeleport);
	void OnTeleportLocationChosen(class AGenerator* generator, const struct FTransform& location);
	void OnTeleportReady();
	void Server_SetSelectedGenerator(class AGenerator* generator);
	void ShowBloodSpurtsVFX();
	void StartBloodSpurts();
	void StopBloodSpurts();

	bool CanTeleportAtGenerator(class AGenerator* generator) const;
	class AGenerator* GetInlineGenerator(const class ADBDPlayer* player) const;
	class ADBDPlayer* GetOwningPlayer() const;
	bool HasTeleportFailed() const;
	bool IsTeleportAvailable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeneratorTeleportInteraction">();
	}
	static class UGeneratorTeleportInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeneratorTeleportInteraction>();
	}
};
static_assert(alignof(UGeneratorTeleportInteraction) == 0x000010, "Wrong alignment on UGeneratorTeleportInteraction");
static_assert(sizeof(UGeneratorTeleportInteraction) == 0x000800, "Wrong size on UGeneratorTeleportInteraction");
static_assert(offsetof(UGeneratorTeleportInteraction, OnBloodSpurtsAINoiseEventRange) == 0x000740, "Member 'UGeneratorTeleportInteraction::OnBloodSpurtsAINoiseEventRange' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _teleportCooldownTimer) == 0x000748, "Member 'UGeneratorTeleportInteraction::_teleportCooldownTimer' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _selectedGenerator) == 0x000790, "Member 'UGeneratorTeleportInteraction::_selectedGenerator' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _locallySelectedGenerator) == 0x000798, "Member 'UGeneratorTeleportInteraction::_locallySelectedGenerator' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _selectedTeleportLocation) == 0x0007A0, "Member 'UGeneratorTeleportInteraction::_selectedTeleportLocation' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _isInteractionOngoing) == 0x0007D0, "Member 'UGeneratorTeleportInteraction::_isInteractionOngoing' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _teleportFailed) == 0x0007D1, "Member 'UGeneratorTeleportInteraction::_teleportFailed' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _noTeleportableGenerators) == 0x0007D2, "Member 'UGeneratorTeleportInteraction::_noTeleportableGenerators' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _bloodSpurtInterval) == 0x0007D4, "Member 'UGeneratorTeleportInteraction::_bloodSpurtInterval' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _collisionCheckCapsuleHalfHeight) == 0x0007D8, "Member 'UGeneratorTeleportInteraction::_collisionCheckCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _collisionCheckCapsuleRadius) == 0x0007DC, "Member 'UGeneratorTeleportInteraction::_collisionCheckCapsuleRadius' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _collisionCheckLocationOffset) == 0x0007E0, "Member 'UGeneratorTeleportInteraction::_collisionCheckLocationOffset' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _capsuleTraceAngleIncrement) == 0x0007EC, "Member 'UGeneratorTeleportInteraction::_capsuleTraceAngleIncrement' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _generatorTeleportMaxAngle) == 0x0007F0, "Member 'UGeneratorTeleportInteraction::_generatorTeleportMaxAngle' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _downRaycastLength) == 0x0007F4, "Member 'UGeneratorTeleportInteraction::_downRaycastLength' has a wrong offset!");

// Class TheNightmare.InDreamSurvivorSubAnimInstance
// 0x0020 (0x0570 - 0x0550)
class UInDreamSurvivorSubAnimInstance final : public UBaseSurvivorAnimInstance
{
public:
	uint8                                         Pad_548[0x8];                                      // 0x0548(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _shouldLookSleepy;                                 // 0x0550(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCrawling;                                       // 0x0551(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBeingCarried;                                   // 0x0552(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isDead;                                           // 0x0553(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isHooked;                                         // 0x0554(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCrouched;                                       // 0x0555(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isIdle;                                           // 0x0556(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_557[0x1];                                      // 0x0557(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _walkAnimSpeed;                                    // 0x0558(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_55C[0x14];                                     // 0x055C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InDreamSurvivorSubAnimInstance">();
	}
	static class UInDreamSurvivorSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInDreamSurvivorSubAnimInstance>();
	}
};
static_assert(alignof(UInDreamSurvivorSubAnimInstance) == 0x000010, "Wrong alignment on UInDreamSurvivorSubAnimInstance");
static_assert(sizeof(UInDreamSurvivorSubAnimInstance) == 0x000570, "Wrong size on UInDreamSurvivorSubAnimInstance");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _shouldLookSleepy) == 0x000550, "Member 'UInDreamSurvivorSubAnimInstance::_shouldLookSleepy' has a wrong offset!");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _isCrawling) == 0x000551, "Member 'UInDreamSurvivorSubAnimInstance::_isCrawling' has a wrong offset!");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _isBeingCarried) == 0x000552, "Member 'UInDreamSurvivorSubAnimInstance::_isBeingCarried' has a wrong offset!");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _isDead) == 0x000553, "Member 'UInDreamSurvivorSubAnimInstance::_isDead' has a wrong offset!");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _isHooked) == 0x000554, "Member 'UInDreamSurvivorSubAnimInstance::_isHooked' has a wrong offset!");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _isCrouched) == 0x000555, "Member 'UInDreamSurvivorSubAnimInstance::_isCrouched' has a wrong offset!");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _isIdle) == 0x000556, "Member 'UInDreamSurvivorSubAnimInstance::_isIdle' has a wrong offset!");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _walkAnimSpeed) == 0x000558, "Member 'UInDreamSurvivorSubAnimInstance::_walkAnimSpeed' has a wrong offset!");

// Class TheNightmare.NightmareAnimInstance
// 0x0000 (0x0600 - 0x0600)
class UNightmareAnimInstance final : public UKillerAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NightmareAnimInstance">();
	}
	static class UNightmareAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNightmareAnimInstance>();
	}
};
static_assert(alignof(UNightmareAnimInstance) == 0x000010, "Wrong alignment on UNightmareAnimInstance");
static_assert(sizeof(UNightmareAnimInstance) == 0x000600, "Wrong size on UNightmareAnimInstance");

// Class TheNightmare.NightmareCheatComponent
// 0x0008 (0x00C0 - 0x00B8)
class UNightmareCheatComponent final : public UActorComponent
{
public:
	bool                                          _allowWakeUpAnyClock;                              // 0x00B8(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DBD_AllowWakeUpAtAnyClock(bool allow);
	void OnRep_AllowWakeUpAnyClock();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NightmareCheatComponent">();
	}
	static class UNightmareCheatComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNightmareCheatComponent>();
	}
};
static_assert(alignof(UNightmareCheatComponent) == 0x000008, "Wrong alignment on UNightmareCheatComponent");
static_assert(sizeof(UNightmareCheatComponent) == 0x0000C0, "Wrong size on UNightmareCheatComponent");
static_assert(offsetof(UNightmareCheatComponent, _allowWakeUpAnyClock) == 0x0000B8, "Member 'UNightmareCheatComponent::_allowWakeUpAnyClock' has a wrong offset!");

// Class TheNightmare.PlaceDreamPalletInteraction
// 0x0020 (0x0640 - 0x0620)
class UPlaceDreamPalletInteraction final : public UInteractionDefinition
{
public:
	TArray<class APalletTracker*>                 _palletTrackers;                                   // 0x0618(0x0010)(BlueprintVisible, Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_628[0x8];                                      // 0x0628(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class APalletTracker*                         _closestTracker;                                   // 0x0630(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_638[0x8];                                      // 0x0638(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeTunableValues(class ASlasherPlayer* killer);
	void SpawnDreamPallet(class APalletTracker* trackerAtLocation);

	bool CanSpawnDreamPalletAtTracker(class APalletTracker* tracker) const;
	class APalletTracker* GetTargetedPallet() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlaceDreamPalletInteraction">();
	}
	static class UPlaceDreamPalletInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlaceDreamPalletInteraction>();
	}
};
static_assert(alignof(UPlaceDreamPalletInteraction) == 0x000010, "Wrong alignment on UPlaceDreamPalletInteraction");
static_assert(sizeof(UPlaceDreamPalletInteraction) == 0x000640, "Wrong size on UPlaceDreamPalletInteraction");
static_assert(offsetof(UPlaceDreamPalletInteraction, _palletTrackers) == 0x000618, "Member 'UPlaceDreamPalletInteraction::_palletTrackers' has a wrong offset!");
static_assert(offsetof(UPlaceDreamPalletInteraction, _closestTracker) == 0x000630, "Member 'UPlaceDreamPalletInteraction::_closestTracker' has a wrong offset!");

// Class TheNightmare.PresentationGeneratorTeleportProgressComponent
// 0x0010 (0x00C8 - 0x00B8)
class UPresentationGeneratorTeleportProgressComponent final : public UPresentationItemProgressComponent
{
public:
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresentationGeneratorTeleportProgressComponent">();
	}
	static class UPresentationGeneratorTeleportProgressComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPresentationGeneratorTeleportProgressComponent>();
	}
};
static_assert(alignof(UPresentationGeneratorTeleportProgressComponent) == 0x000008, "Wrong alignment on UPresentationGeneratorTeleportProgressComponent");
static_assert(sizeof(UPresentationGeneratorTeleportProgressComponent) == 0x0000C8, "Wrong size on UPresentationGeneratorTeleportProgressComponent");

// Class TheNightmare.RememberMe
// 0x0000 (0x03C8 - 0x03C8)
class URememberMe final : public UPerk
{
public:
	bool DidLoseHealthState(const class AActor* damagedActor, int32 oldHealthStateCount) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RememberMe">();
	}
	static class URememberMe* GetDefaultObj()
	{
		return GetDefaultObjImpl<URememberMe>();
	}
};
static_assert(alignof(URememberMe) == 0x000008, "Wrong alignment on URememberMe");
static_assert(sizeof(URememberMe) == 0x0003C8, "Wrong size on URememberMe");

// Class TheNightmare.SetDreamSnareInteraction
// 0x0010 (0x0750 - 0x0740)
class USetDreamSnareInteraction final : public UChargeableInteractionDefinition
{
public:
	float                                         MinPitch;                                          // 0x0740(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinPlacementDistance;                              // 0x0744(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxPlacementDistance;                              // 0x0748(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_74C[0x4];                                      // 0x074C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetTrapDistanceFromControlRotation() const;
	bool HasCancelledDreamSnare() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SetDreamSnareInteraction">();
	}
	static class USetDreamSnareInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USetDreamSnareInteraction>();
	}
};
static_assert(alignof(USetDreamSnareInteraction) == 0x000010, "Wrong alignment on USetDreamSnareInteraction");
static_assert(sizeof(USetDreamSnareInteraction) == 0x000750, "Wrong size on USetDreamSnareInteraction");
static_assert(offsetof(USetDreamSnareInteraction, MinPitch) == 0x000740, "Member 'USetDreamSnareInteraction::MinPitch' has a wrong offset!");
static_assert(offsetof(USetDreamSnareInteraction, MinPlacementDistance) == 0x000744, "Member 'USetDreamSnareInteraction::MinPlacementDistance' has a wrong offset!");
static_assert(offsetof(USetDreamSnareInteraction, MaxPlacementDistance) == 0x000748, "Member 'USetDreamSnareInteraction::MaxPlacementDistance' has a wrong offset!");

}

