#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DBDGameInstance_0

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "S_ToggleActors_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_ExportLevelsListMethod_structs.hpp"
#include "S_UEToolsCommand_structs.hpp"
#include "BP_DBDGameInstance_classes.hpp"
#include "E_ActorClassType_structs.hpp"
#include "E_WorldSettings_structs.hpp"
#include "E_HorizontalTextAlignment_structs.hpp"
#include "E_VerticalTextAlignment_structs.hpp"
#include "E_AttachRule_structs.hpp"
#include "E_CustomLightType_structs.hpp"
#include "E_CharacterAction_structs.hpp"
#include "E_FlashLightType_structs.hpp"
#include "E_SkyLightType_structs.hpp"
#include "E_DBDGameState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DBDGameInstance.BP_DBDGameInstance_C
// 0x02E8 (0x0D00 - 0x0A18)
class BP_DBDGameInstance_0::UBP_DBDGameInstance_C final : public BP_DBDGameInstance::UBP_DBDGameInstance_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0A18(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FAssetData>                     CH_DataTables_AssetData;                           // 0x0A20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UDataTable*>                     CH_DataTables_CharacterDescriptionDB;              // 0x0A30(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UDataTable*>                     CH_DataTables_CustomizationItemDB;                 // 0x0A40(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UDataTable*>                     CH_DataTables_ItemAddonDB;                         // 0x0A50(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UDataTable*>                     CH_DataTables_ItemDB;                              // 0x0A60(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UDataTable*>                     CH_DataTables_OfferingDB;                          // 0x0A70(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UDataTable*>                     CH_DataTables_PerkDB;                              // 0x0A80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         CH_Blueprints_Class_StartScreen;                   // 0x0A90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         CH_Blueprints_Class_Lobby;                         // 0x0AA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TScriptInterface<class IAssetRegistry>        CH_AssetRegistry;                                  // 0x0AB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UClass*>                         CH_Blueprints_Class_Gameplay;                      // 0x0AC0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         CH_Blueprints_Soft_StartScreen;                    // 0x0AD0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         CH_Blueprints_Soft_Lobby;                          // 0x0AE0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         CH_Blueprints_Soft_Gameplay;                       // 0x0AF0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CH_Blueprints_Counter_StartScreen;                 // 0x0B00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CH_Blueprints_Counter_Lobby;                       // 0x0B04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CH_Blueprints_Counter_Gameplay;                    // 0x0B08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAutoEnableCheatFlyingControls;                    // 0x0B0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bCheatFlyingControls;                              // 0x0B0D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B0E[0x2];                                      // 0x0B0E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         UETools_Protected_Widgets;                         // 0x0B10(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class UUserWidget*, ESlateVisibility>    UETools_Toggled_Widgets;                           // 0x0B20(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UWBP_DebugStats_C*                      WBP_Debug_Stats_Reference;                         // 0x0B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_LevelsList_C*                      WBP_Levels_List_Reference;                         // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_LevelStreamingManager_C*            Level_Streaming_Manager_Reference;                 // 0x0B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_ToggleActors>                ToggleActors_Actors_Map;                           // 0x0B88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ABP_VolumeVisualizer_C*>         UETools_BlockingVolumesVisualizers;                // 0x0B98(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_VolumeVisualizer_C*>         UETools_TriggerVolumesVisualizers;                 // 0x0BA8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_VolumeVisualizer_C*>         UETools_ActorsBoundsVisualizers;                   // 0x0BB8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         Original_Aspect_Ratio;                             // 0x0BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWasOriginalAspectRatioStoren;                     // 0x0BCC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BCD[0x3];                                      // 0x0BCD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class APlayerCameraManager*, float>      CameraDefaultFOV;                                  // 0x0BD0(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         DEF_MWS_Speed;                                     // 0x0C20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C24[0x4];                                      // 0x0C24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            DEF_MWS_CharMoveComponent;                         // 0x0C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DEF_GRV_Scale;                                     // 0x0C30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C34[0x4];                                      // 0x0C34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            DEF_GRV_CharMoveComponent;                         // 0x0C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DEF_MAC_Value;                                     // 0x0C40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C44[0x4];                                      // 0x0C44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            DEF_MAC_CharMoveComponent;                         // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ViewActor_Original_Pawn_Reference;                 // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ActorController_C*                  ViewActor_Actor_Controller;                        // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlActor_Original_Pawn_Reference;              // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ActorController_C*                  ControlActor_Actor_Controller;                     // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Sound2D_CurrentlyPlaying;                          // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_UEToolsCommand>              UETools_Console_Commands;                          // 0x0C78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               UETools_World_Grid_Material;                       // 0x0C88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class APawn*, float>                     PlayersOnly_Paused_Pawns_Map;                      // 0x0C90(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_FreeCamera_C*                       FreeCamera_Reference;                              // 0x0CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  FreeCamera_Original_Pawn_Reference;                // 0x0CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PanoramaCamera_C*                   Panorama_Camera_Reference;                         // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Panorama_Camera_Original_Pawn_Reference;           // 0x0CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DBDGameInstance(int32 EntryPoint);
	void Event_F__PanoramaScreenshotCreated();
	void Event_C__PanoramaScreenshot(const struct FTransform& Panorama_Camera_Transform, float FOV, float Rotation_Step, int32 Quality_Level);
	void Event_C__SilentSoftLoadAsset(TSoftClassPtr<class UClass> Object_Soft_Class);
	void Event_C__ClearConsole();
	void Event_C__Help_Implemintation();
	void Event_C__SoftConstructWidget(TSoftClassPtr<class UClass> Soft_Widget_Class);
	void Event_C__SoftLoadAsset(TSoftClassPtr<class UClass> Object_Soft_Class);
	void Event_C__SoftSummonPosses(TSoftClassPtr<class UClass> Actor_Soft_Class);
	void DestroyGameplayModdingBlueprints();
	void DestroyStartScreenModdingBlueprints();
	void DestroyLobbyModdingBlueprints();
	void Event_T__Cheat_Flying_Controls();
	void Event_C__SoftSummon(TSoftClassPtr<class UClass> Actor_Soft_Class);
	void Event_ObtainGameAssets();
	void Event_LoadModdingBlueprints();
	void OnGameStateObtained(E_DBDGameState DBDGameState);
	void Event_Force_On_Level_Changed();
	void OnLevelChanged();
	void ReceiveInit();
	void OnLoaded_B8840FD4449AD6A97F069D9F15DE2734(TSubclassOf<class UObject> Loaded);
	void OnLoaded_7F68F5B64B2631B744F30BBC66822B66(TSubclassOf<class UObject> Loaded);
	void OnLoaded_757DC81E4290CEE866D6B58F895F56F8(TSubclassOf<class UObject> Loaded);
	void OnLoaded_85BF75A54ED7999AEC3B329CB21BBD90(TSubclassOf<class UObject> Loaded);
	void OnLoaded_FCBCE05946A17F6C0ABFB0968E584837(TSubclassOf<class UObject> Loaded);
	void OnLoaded_F6BE95784C77419348B622A227AD6132(TSubclassOf<class UObject> Loaded);
	void OnLoaded_1D0724A74B76FD1E1EEF599DD7F680DC(TSubclassOf<class UObject> Loaded);
	void CommandTest();
	void DebugMessage(const class FText& Message, bool Print_to_Screen, bool Print_to_Log);
	void GetWasActorsLoaded(bool* Was_Actors_Loaded);
	void Get_RunningPC(class APlayerController** Running_Player_Controller);
	bool Get_IsWidgetExists(class UClass* Widget_Class);
	void Get_IsProtectedWidget(class UUserWidget* User_Widget_Reference, bool* Is_Protected_Widget);
	void Get_CharacterIsFlying(class ACharacter* Character_Reference, bool* Is_Flying);
	void Get_ProperFullPath(TSoftClassPtr<class UClass> Input_Path, TSoftClassPtr<class UClass>* Soft_Object_Reference);
	void Get_FormattedTextRenderActorText(const class FText& Input, class FText* Formatted_Output);
	void Get_SoftClassToSoftObject(TSoftClassPtr<class UClass> Input_Path, class UObject** Output);
	void Get_CleanFoundActors(TArray<class AActor*>& Found_Actors_Array, TArray<class AActor*>* Clean_Found_Actors_Array);
	void Get_OptimalWaypointUpdateDelay(int32 Found_Actors_Amount, float* Optimal_Delay);
	void Get_AttachRuleToAttachementRule(E_AttachRule E_AttachRule, EAttachmentRule* E_AttachementRule);
	void Get_LevelStreamingManager(class ABP_LevelStreamingManager_C** Level_Streaming_Manager_Reference_0);
	void Set_EnableInput(bool Enable_Input, class AActor* Actor_Reference, class APlayerController* Player_Controller_Reference);
	void UETools_ChangeSize(float New_Size);
	void UETools_FOV(float New_FOV);
	void UETools_Ghost();
	void UETools_Fly();
	void UETools_Walk();
	void UETools_God();
	void UETools_Slomo(float New_Time_Dilation);
	void UETools_SetName(const class FString& New_Name);
	void UETools_PlayersOnly();
	void UETools_SetGamePaused(bool Paused);
	void UETools_Summon(class UClass* Actor_Class);
	void UETools_SoftSummon(TSoftClassPtr<class UClass> Actor_Soft_Class);
	void UETools_DestroyAll(class UClass* Actor_Class);
	void UETools_DestroyAllContains(class UClass* Actor_Class, const class FString& String_To_Search);
	void UETools_DestroyActor(const class FString& Actor_Name);
	void UETools_StreamLevelIn(class FName Level_Name);
	void UETools_StreamLevelPrepare(class FName Level_Name);
	void UETools_StreamLevelOut(class FName Level_Name);
	void UETools_LoadLevelInstance(const class FString& Level_Name, float Level_Location_X, float Level_Location_Y, float Level_Location_Z, float Level_Rotation_Roll, float Level_Rotation_Pitch, float Level_Rotation_Yaw);
	void UETools_ToggleFreeCamera();
	void UETools_SetFreeCameraSettings(const class FString& Setting_Name, float New_Value);
	void UETools_GetFreeCameraSettings(const class FString& Setting_Name, float New_Value);
	void UETools_ToggleSkylight(E_SkyLightType Sky_Light_Type, float Intensity);
	void UETools_ToggleFlashlight(E_FlashLightType Flash_Light_Type, float Intensity);
	void UETools_ToggleActors(class UClass* Actor_Class);
	void UETools_ToggleWidgets();
	void UETools_ToggleDebugStats();
	void UETools_ToggleLevelsList(bool Sort_Levels_by_Streamed_In);
	void UETools_ToggleSelfVisibility();
	void UETools_ToggleBlockingVolumesVis();
	void UETools_ToggleTriggerVolumesVis();
	void UETools_ToggleActorsBoundsVis(class UClass* Actor_Class, bool Only_Colliding_Components, bool Include_From_Child_Components);
	void UETools_ToggleCheatFlyingControls();
	void UETools_AddConsoleBinding(const struct FKey& Key);
	void UETools_RemoveConsoleBinding(const struct FKey& Key);
	void UETools_Bind(const struct FKey& Key, const class FString& Console_Command_Press, const class FString& Console_Command_Release);
	void UETools_BindToggle(const struct FKey& Key, const class FString& Console_Command_Press, const class FString& Console_Command_Release);
	void UETools_UnBind(const struct FKey& Key);
	void UETools_AspectRatio(float New_Aspect_Ratio);
	void UETools_CharacterAction(E_CharacterAction Character_Action, float Strength);
	void UETools_SetJumpSettings(const class FString& Setting_Name, float New_Value);
	void UETools_GetJumpSettings();
	void UETools_ReturnToSpawn();
	void UETools_SetMaxWalkSpeed(float New_Max_Walk_Speed);
	void UETools_ResetMaxWalkSpeed();
	void UETools_SetMaxAcceleration(float New_Max_Acceleration_Value);
	void UETools_ResetMaxAcceleration();
	void UETools_SetGravityScale(float New_Gravity_Scale);
	void UETools_ResetGravityScale();
	void UETools_SummonPossess(class UClass* Actor_Class);
	void UETools_SoftSummonPossess(TSoftClassPtr<class UClass> Actor_Soft_Class);
	void UETools_GetActorClass(const class FString& Actor_Name);
	void UETools_ViewActor(const class FString& Actor_Name);
	void UETools_ControlActor(const class FString& Actor_Name);
	void UETools_PossessActor(const class FString& Actor_Name);
	void UETools_ComeToMe(class UClass* Actor_Class);
	void UETools_ComeToMeActor(const class FString& Actor_Name);
	void UETools_SoftLoadAsset(TSoftClassPtr<class UClass> Asset_Soft_Class);
	void UETools_SoftConstructStaticMesh(TSoftClassPtr<class UClass> Soft_Object_Reference);
	void UETools_SoftConstructSkeletalMesh(TSoftClassPtr<class UClass> Soft_Object_Reference);
	void UETools_SoftConstructLevelSequence(TSoftClassPtr<class UClass> Soft_Object_Reference);
	void UETools_SoftConstructAnimSequence(const class FString& Actor_Name, int32 Skeletal_Mesh_Component_Index, TSoftClassPtr<class UClass> Soft_Object_Reference, bool Animation_Looping);
	void UETools_GetLevelSequenceActorMeta(const class FString& Actor_Name);
	void UETools_SoftConstructSound2D(TSoftClassPtr<class UClass> Soft_Object_Reference, float Volume);
	void UETools_SoftConstructSoundAtLocation(TSoftClassPtr<class UClass> Soft_Object_Reference, float X, float Y, float Z, float Volume);
	void UETools_ConstructObject(class UClass* Object_Class);
	void UETools_SoftConstructObject(TSoftClassPtr<class UClass> Soft_Object_Reference);
	void UETools_TeleportTo(float X, float Y, float Z);
	void UETools_TeleportToActor(const class FString& Actor_Name);
	void UETools_FindActors(class UClass* Actor_Class, const class FString& Tag);
	void UETools_FindActorsContains(class UClass* Actor_Class, const class FString& String_To_Search);
	void UETools_FindActorsInDistance(class UClass* Actor_Class, float Maximum_Distance);
	void UETools_FindActorsInDistanceContains(class UClass* Actor_Class, float Maximum_Distance, const class FString& String_To_Search);
	void UETools_FindHiddenActors(class UClass* Actor_Class, const class FString& Tag);
	void UETools_ListActors(class UClass* Actor_Class, const class FString& Tag);
	void UETools_ListActorsContains(class UClass* Actor_Class, const class FString& String_To_Search);
	void UETools_ListActorsInDistance(class UClass* Actor_Class, float Maximum_Distance);
	void UETools_ListActorsInDistanceContains(class UClass* Actor_Class, float Maximum_Distance, const class FString& String_To_Search);
	void UETools_ListHiddenActors(class UClass* Actor_Class, const class FString& Tag);
	void UETools_ListWidgets(class UClass* Widget_Class);
	void UETools_CustomLight(E_CustomLightType Custom_Light_Type, float Intensity, float Radius, bool Cast_Shadows);
	void UETools_WorldGridActors(class UClass* Actor_Class);
	void UETools_WorldGridActor(const class FString& Actor_Name);
	void UETools_ConstructWidget(class UClass* Widget_Class);
	void UETools_SoftConstructWidget(TSoftClassPtr<class UClass> Soft_Widget_Class);
	void UETools_SetWidgetVis(const class FString& Widget_Name, ESlateVisibility New_Visibility);
	void UETools_SetWidgetsVis(class UClass* Widget_Class, ESlateVisibility New_Visibility);
	void UETools_DestroyWidgets(class UClass* Widget_Class);
	void UETools_DestroyWidget(const class FString& Widget_Name);
	void UETools_Help();
	void UETools_GetEngineMeta();
	void UETools_ServerExec(const class FString& Message, class FName Type);
	void UETools_SetActorLocation(const class FString& Actor_Name, float X, float Y, float Z, bool Sweep, bool Teleport);
	void UETools_GetActorLocation(const class FString& Actor_Name);
	void UETools_SetActorRotation(const class FString& Actor_Name, float Roll, float Pitch, float Yaw, bool Teleport_Physics);
	void UETools_GetActorRotation(const class FString& Actor_Name);
	void UETools_SetActorScale(const class FString& Actor_Name, float X, float Y, float Z);
	void UETools_GetActorScale(const class FString& Actor_Name);
	void UETools_AttachActorToActor(const class FString& Actor_To_Attach_Name, const class FString& Parent_Actor_Name, E_AttachRule Location_Rule, E_AttachRule Rotation_Rule, E_AttachRule Scale_Rule, bool Weld_Simulated_Bodies);
	void UETools_AttachActorToActorSocket(const class FString& Actor_To_Attach_Name, const class FString& Parent_Actor_Name, class FName Parent_Actor_Socket_Name, E_AttachRule Location_Rule, E_AttachRule Rotation_Rule, E_AttachRule Scale_Rule, bool Weld_Simulated_Bodies);
	void UETools_SetActorLocationAndRotation(const class FString& Actor_Name, float X, float Y, float Z, float Roll, float Pitch, float Yaw, bool Sweep, bool Teleport);
	void UETools_GetActorLocationAndRotation(const class FString& Actor_Name);
	void UETools_SetTextRenderActorText(const class FString& Actor_Name, const class FText& New_Text);
	void UETools_SetTextRenderActorHorizontalAlignment(const class FString& Actor_Name, E_HorizontalTextAlignment New_Horizontal_Alignment);
	void UETools_SetTextRenderActorVerticalAlignment(const class FString& Actor_Name, E_VerticalTextAlignment New_Vertical_Alignment);
	void UETools_SetTextRenderActorSize(const class FString& Actor_Name, float New_Size);
	void UETools_SetTextRenderActorColor(const class FString& Actor_Name, uint8 R, uint8 G, uint8 B, uint8 A);
	void UETools_GetTextRenderActorMeta(const class FString& Actor_Name);
	void UETools_ExecuteActorFunction(const class FString& Actor_Name, const class FString& Function_Name);
	void UETools_ExecuteWidgetFunction(const class FString& Widget_Name, const class FString& Function_Name);
	void UETools_ForceActorsVisibility(class UClass* Actor_Class, bool New_Visibility);
	void UETools_ForceActorVisibility(const class FString& Actor_Name, bool New_Visibility);
	void UETools_ForceActorsCollision(class UClass* Actor_Class, bool New_Collision);
	void UETools_ForceActorCollision(const class FString& Actor_Name, bool New_Collision);
	void UETools_ForceActorsMobility(class UClass* Actor_Class, EComponentMobility New_Mobility);
	void UETools_ForceActorMobility(const class FString& Actor_Name, EComponentMobility New_Mobility);
	void UETools_ForceActorsCastShadows(class UClass* Actor_Class, bool New_Cast_Shadows);
	void UETools_ForceActorCastShadows(const class FString& Actor_Name, bool New_Cast_Shadows);
	void UETools_ForceActorsTimeDilation(class UClass* Actor_Class, float New_Time_Dilation);
	void UETools_ForceActorTimeDilation(const class FString& Actor_Name, float New_Time_Dilation);
	void UETools_ForceActorsDynamicMaterial(class UClass* Actor_Class, TSoftClassPtr<class UClass> Soft_Object_Reference);
	void UETools_ForceActorDynamicMaterial(const class FString& Actor_Name, TSoftClassPtr<class UClass> Soft_Object_Reference);
	void UETools_ForceActorsCanCharacterStepOn(class UClass* Actor_Class, bool New_Can_Character_Step_On);
	void UETools_ForceActorCanCharacterStepOn(const class FString& Actor_Name, bool New_Can_Character_Step_On);
	void UETools_SetEnableActorsAI(class UClass* Actor_Class, bool New_Enable_AI);
	void UETools_SetEnableActorAI(const class FString& Actor_Name, bool New_Enable_AI);
	void UETools_SetWorldSettings(E_WorldSettings E_WorldSettings, float New_Value);
	void UETools_GetWorldSettings();
	void UETools_GetWorldOriginLocation();
	void UETools_SetWorldOriginLocation(int32 X, int32 Y, int32 Z);
	void UETools_ForceThirdPerson();
	void UETools_PromoScreenshot(int32 QualityLevel);
	void UETools_PanoramaScreenshot(float FOV, float Rotation_Step, int32 Quality_Level);
	void UETools_ForceEpicQuality();
	void UETools_ForceLowQuality();
	void UETools_ForcePotatoQuality();
	void UETools_ForceUpscaling(float Screen_Percentage, float Sharpening_Level);
	void UETools_GetAllRunningClasses(E_ActorClassType Actor_Class_Type);
	void UETools_DestroyAllLighting();
	void UETools_ExportLevelsList(E_ExportLevelsListMethod Export_Levels_List_Method, TArray<class ULevelStreaming*>* Streaming_Levels);
	void cls();
	void clear();
	void help();
	void fps_max(float New_Value);
	void Get_FloatToBool(float Value, bool* Bool);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BlueprintGeneratedClass BP_DBDGameInstance.BP_DBDGameInstance_C", true, "BP_DBDGameInstance_C">();
	}
	static class BP_DBDGameInstance_0::UBP_DBDGameInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<BP_DBDGameInstance_0::UBP_DBDGameInstance_C>();
	}
};
static_assert(alignof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C) == 0x000008, "Wrong alignment on BP_DBDGameInstance_0::UBP_DBDGameInstance_C");
static_assert(sizeof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C) == 0x000D00, "Wrong size on BP_DBDGameInstance_0::UBP_DBDGameInstance_C");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, UberGraphFrame) == 0x000A18, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_DataTables_AssetData) == 0x000A20, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_DataTables_AssetData' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_DataTables_CharacterDescriptionDB) == 0x000A30, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_DataTables_CharacterDescriptionDB' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_DataTables_CustomizationItemDB) == 0x000A40, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_DataTables_CustomizationItemDB' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_DataTables_ItemAddonDB) == 0x000A50, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_DataTables_ItemAddonDB' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_DataTables_ItemDB) == 0x000A60, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_DataTables_ItemDB' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_DataTables_OfferingDB) == 0x000A70, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_DataTables_OfferingDB' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_DataTables_PerkDB) == 0x000A80, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_DataTables_PerkDB' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_Blueprints_Class_StartScreen) == 0x000A90, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_Blueprints_Class_StartScreen' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_Blueprints_Class_Lobby) == 0x000AA0, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_Blueprints_Class_Lobby' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_AssetRegistry) == 0x000AB0, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_AssetRegistry' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_Blueprints_Class_Gameplay) == 0x000AC0, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_Blueprints_Class_Gameplay' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_Blueprints_Soft_StartScreen) == 0x000AD0, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_Blueprints_Soft_StartScreen' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_Blueprints_Soft_Lobby) == 0x000AE0, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_Blueprints_Soft_Lobby' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_Blueprints_Soft_Gameplay) == 0x000AF0, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_Blueprints_Soft_Gameplay' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_Blueprints_Counter_StartScreen) == 0x000B00, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_Blueprints_Counter_StartScreen' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_Blueprints_Counter_Lobby) == 0x000B04, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_Blueprints_Counter_Lobby' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CH_Blueprints_Counter_Gameplay) == 0x000B08, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CH_Blueprints_Counter_Gameplay' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, bAutoEnableCheatFlyingControls) == 0x000B0C, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::bAutoEnableCheatFlyingControls' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, bCheatFlyingControls) == 0x000B0D, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::bCheatFlyingControls' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, UETools_Protected_Widgets) == 0x000B10, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::UETools_Protected_Widgets' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, UETools_Toggled_Widgets) == 0x000B20, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::UETools_Toggled_Widgets' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, WBP_Debug_Stats_Reference) == 0x000B70, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::WBP_Debug_Stats_Reference' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, WBP_Levels_List_Reference) == 0x000B78, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::WBP_Levels_List_Reference' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, Level_Streaming_Manager_Reference) == 0x000B80, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::Level_Streaming_Manager_Reference' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, ToggleActors_Actors_Map) == 0x000B88, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::ToggleActors_Actors_Map' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, UETools_BlockingVolumesVisualizers) == 0x000B98, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::UETools_BlockingVolumesVisualizers' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, UETools_TriggerVolumesVisualizers) == 0x000BA8, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::UETools_TriggerVolumesVisualizers' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, UETools_ActorsBoundsVisualizers) == 0x000BB8, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::UETools_ActorsBoundsVisualizers' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, Original_Aspect_Ratio) == 0x000BC8, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::Original_Aspect_Ratio' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, bWasOriginalAspectRatioStoren) == 0x000BCC, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::bWasOriginalAspectRatioStoren' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, CameraDefaultFOV) == 0x000BD0, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::CameraDefaultFOV' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, DEF_MWS_Speed) == 0x000C20, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::DEF_MWS_Speed' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, DEF_MWS_CharMoveComponent) == 0x000C28, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::DEF_MWS_CharMoveComponent' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, DEF_GRV_Scale) == 0x000C30, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::DEF_GRV_Scale' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, DEF_GRV_CharMoveComponent) == 0x000C38, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::DEF_GRV_CharMoveComponent' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, DEF_MAC_Value) == 0x000C40, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::DEF_MAC_Value' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, DEF_MAC_CharMoveComponent) == 0x000C48, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::DEF_MAC_CharMoveComponent' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, ViewActor_Original_Pawn_Reference) == 0x000C50, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::ViewActor_Original_Pawn_Reference' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, ViewActor_Actor_Controller) == 0x000C58, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::ViewActor_Actor_Controller' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, ControlActor_Original_Pawn_Reference) == 0x000C60, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::ControlActor_Original_Pawn_Reference' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, ControlActor_Actor_Controller) == 0x000C68, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::ControlActor_Actor_Controller' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, Sound2D_CurrentlyPlaying) == 0x000C70, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::Sound2D_CurrentlyPlaying' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, UETools_Console_Commands) == 0x000C78, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::UETools_Console_Commands' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, UETools_World_Grid_Material) == 0x000C88, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::UETools_World_Grid_Material' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, PlayersOnly_Paused_Pawns_Map) == 0x000C90, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::PlayersOnly_Paused_Pawns_Map' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, FreeCamera_Reference) == 0x000CE0, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::FreeCamera_Reference' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, FreeCamera_Original_Pawn_Reference) == 0x000CE8, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::FreeCamera_Original_Pawn_Reference' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, Panorama_Camera_Reference) == 0x000CF0, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::Panorama_Camera_Reference' has a wrong offset!");
static_assert(offsetof(BP_DBDGameInstance_0::UBP_DBDGameInstance_C, Panorama_Camera_Original_Pawn_Reference) == 0x000CF8, "Member 'BP_DBDGameInstance_0::UBP_DBDGameInstance_C::Panorama_Camera_Original_Pawn_Reference' has a wrong offset!");

}

