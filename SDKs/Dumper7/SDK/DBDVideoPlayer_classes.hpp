#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDVideoPlayer

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class DBDVideoPlayer.VideoBinkPlayer
// 0x0068 (0x0298 - 0x0230)
class AVideoBinkPlayer final : public AActor
{
public:
	uint8                                         Pad_230[0x48];                                     // 0x0230(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UBinkMediaPlayer*                       _binkMediaPlayer;                                  // 0x0278(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUserWidget*                            _videoPlayerWidget;                                // 0x0280(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                _imageWidget;                                      // 0x0288(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEndReached();
	void OnMediaClosed();
	void OnMediaOpened(const class FString& openedUrl);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VideoBinkPlayer">();
	}
	static class AVideoBinkPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVideoBinkPlayer>();
	}
};
static_assert(alignof(AVideoBinkPlayer) == 0x000008, "Wrong alignment on AVideoBinkPlayer");
static_assert(sizeof(AVideoBinkPlayer) == 0x000298, "Wrong size on AVideoBinkPlayer");
static_assert(offsetof(AVideoBinkPlayer, _binkMediaPlayer) == 0x000278, "Member 'AVideoBinkPlayer::_binkMediaPlayer' has a wrong offset!");
static_assert(offsetof(AVideoBinkPlayer, _videoPlayerWidget) == 0x000280, "Member 'AVideoBinkPlayer::_videoPlayerWidget' has a wrong offset!");
static_assert(offsetof(AVideoBinkPlayer, _imageWidget) == 0x000288, "Member 'AVideoBinkPlayer::_imageWidget' has a wrong offset!");

// Class DBDVideoPlayer.VideoNativePlayer
// 0x0048 (0x0278 - 0x0230)
class AVideoNativePlayer final : public AActor
{
public:
	uint8                                         Pad_230[0x48];                                     // 0x0230(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VideoNativePlayer">();
	}
	static class AVideoNativePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVideoNativePlayer>();
	}
};
static_assert(alignof(AVideoNativePlayer) == 0x000008, "Wrong alignment on AVideoNativePlayer");
static_assert(sizeof(AVideoNativePlayer) == 0x000278, "Wrong size on AVideoNativePlayer");

// Class DBDVideoPlayer.VideoPlayer
// 0x0000 (0x0000 - 0x0000)
class IVideoPlayer final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VideoPlayer">();
	}
	static class IVideoPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<IVideoPlayer>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IVideoPlayer) == 0x000001, "Wrong alignment on IVideoPlayer");
static_assert(sizeof(IVideoPlayer) == 0x000001, "Wrong size on IVideoPlayer");

// Class DBDVideoPlayer.VideoThumbnailPlayer
// 0x00B0 (0x02E0 - 0x0230)
class AVideoThumbnailPlayer final : public AActor
{
public:
	uint8                                         Pad_230[0x38];                                     // 0x0230(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UMediaPlayer*                           MediaPlayer;                                       // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMediaSoundComponent*                   SoundComponent;                                    // 0x0270(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            VideoPlayerWidget;                                 // 0x0278(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        _audioComponent;                                   // 0x0280(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_288[0x18];                                     // 0x0288(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMediaSource>            _source;                                           // 0x02A0(0x0030)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D0[0x10];                                     // 0x02D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEndReached();
	void OnMediaClosed();
	void OnMediaOpened(const class FString& openedUrl);
	void OnVideoAssetLoaded();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VideoThumbnailPlayer">();
	}
	static class AVideoThumbnailPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVideoThumbnailPlayer>();
	}
};
static_assert(alignof(AVideoThumbnailPlayer) == 0x000008, "Wrong alignment on AVideoThumbnailPlayer");
static_assert(sizeof(AVideoThumbnailPlayer) == 0x0002E0, "Wrong size on AVideoThumbnailPlayer");
static_assert(offsetof(AVideoThumbnailPlayer, MediaPlayer) == 0x000268, "Member 'AVideoThumbnailPlayer::MediaPlayer' has a wrong offset!");
static_assert(offsetof(AVideoThumbnailPlayer, SoundComponent) == 0x000270, "Member 'AVideoThumbnailPlayer::SoundComponent' has a wrong offset!");
static_assert(offsetof(AVideoThumbnailPlayer, VideoPlayerWidget) == 0x000278, "Member 'AVideoThumbnailPlayer::VideoPlayerWidget' has a wrong offset!");
static_assert(offsetof(AVideoThumbnailPlayer, _audioComponent) == 0x000280, "Member 'AVideoThumbnailPlayer::_audioComponent' has a wrong offset!");
static_assert(offsetof(AVideoThumbnailPlayer, _source) == 0x0002A0, "Member 'AVideoThumbnailPlayer::_source' has a wrong offset!");

}

