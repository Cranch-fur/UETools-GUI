#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIViewsCore

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"
#include "DBDInput_structs.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "DBDUIViewsCore_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetLoadoutPartIcon
// 0x0030 (0x0030 - 0x0000)
struct CoreBaseLoadoutPartWidget_SetLoadoutPartIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              icon;                                              // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseLoadoutPartWidget_SetLoadoutPartIcon) == 0x000008, "Wrong alignment on CoreBaseLoadoutPartWidget_SetLoadoutPartIcon");
static_assert(sizeof(CoreBaseLoadoutPartWidget_SetLoadoutPartIcon) == 0x000030, "Wrong size on CoreBaseLoadoutPartWidget_SetLoadoutPartIcon");
static_assert(offsetof(CoreBaseLoadoutPartWidget_SetLoadoutPartIcon, icon) == 0x000000, "Member 'CoreBaseLoadoutPartWidget_SetLoadoutPartIcon::icon' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetLoadoutPartRarity
// 0x0001 (0x0001 - 0x0000)
struct CoreBaseLoadoutPartWidget_SetLoadoutPartRarity final
{
public:
	EItemRarity                                   rarity;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseLoadoutPartWidget_SetLoadoutPartRarity) == 0x000001, "Wrong alignment on CoreBaseLoadoutPartWidget_SetLoadoutPartRarity");
static_assert(sizeof(CoreBaseLoadoutPartWidget_SetLoadoutPartRarity) == 0x000001, "Wrong size on CoreBaseLoadoutPartWidget_SetLoadoutPartRarity");
static_assert(offsetof(CoreBaseLoadoutPartWidget_SetLoadoutPartRarity, rarity) == 0x000000, "Member 'CoreBaseLoadoutPartWidget_SetLoadoutPartRarity::rarity' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetLoadoutStackCount
// 0x0004 (0x0004 - 0x0000)
struct CoreBaseLoadoutPartWidget_SetLoadoutStackCount final
{
public:
	int32                                         stackCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseLoadoutPartWidget_SetLoadoutStackCount) == 0x000004, "Wrong alignment on CoreBaseLoadoutPartWidget_SetLoadoutStackCount");
static_assert(sizeof(CoreBaseLoadoutPartWidget_SetLoadoutStackCount) == 0x000004, "Wrong size on CoreBaseLoadoutPartWidget_SetLoadoutStackCount");
static_assert(offsetof(CoreBaseLoadoutPartWidget_SetLoadoutStackCount, stackCount) == 0x000000, "Member 'CoreBaseLoadoutPartWidget_SetLoadoutStackCount::stackCount' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseUserWidget.OnControlModeChangedBP
// 0x0001 (0x0001 - 0x0000)
struct CoreBaseUserWidget_OnControlModeChangedBP final
{
public:
	EControlMode                                  controlMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseUserWidget_OnControlModeChangedBP) == 0x000001, "Wrong alignment on CoreBaseUserWidget_OnControlModeChangedBP");
static_assert(sizeof(CoreBaseUserWidget_OnControlModeChangedBP) == 0x000001, "Wrong size on CoreBaseUserWidget_OnControlModeChangedBP");
static_assert(offsetof(CoreBaseUserWidget_OnControlModeChangedBP, controlMode) == 0x000000, "Member 'CoreBaseUserWidget_OnControlModeChangedBP::controlMode' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseUserWidget.PlayAnimationByName
// 0x0020 (0x0020 - 0x0000)
struct CoreBaseUserWidget_PlayAnimationByName final
{
public:
	class FName                                   animName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         starttime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         loopcount;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          playMode;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         playbackspeed;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreBaseUserWidget_PlayAnimationByName) == 0x000004, "Wrong alignment on CoreBaseUserWidget_PlayAnimationByName");
static_assert(sizeof(CoreBaseUserWidget_PlayAnimationByName) == 0x000020, "Wrong size on CoreBaseUserWidget_PlayAnimationByName");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByName, animName) == 0x000000, "Member 'CoreBaseUserWidget_PlayAnimationByName::animName' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByName, starttime) == 0x00000C, "Member 'CoreBaseUserWidget_PlayAnimationByName::starttime' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByName, loopcount) == 0x000010, "Member 'CoreBaseUserWidget_PlayAnimationByName::loopcount' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByName, playMode) == 0x000014, "Member 'CoreBaseUserWidget_PlayAnimationByName::playMode' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByName, playbackspeed) == 0x000018, "Member 'CoreBaseUserWidget_PlayAnimationByName::playbackspeed' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_PlayAnimationByName, ReturnValue) == 0x00001C, "Member 'CoreBaseUserWidget_PlayAnimationByName::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseUserWidget.StopAnimationByName
// 0x0010 (0x0010 - 0x0000)
struct CoreBaseUserWidget_StopAnimationByName final
{
public:
	class FName                                   animName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreBaseUserWidget_StopAnimationByName) == 0x000004, "Wrong alignment on CoreBaseUserWidget_StopAnimationByName");
static_assert(sizeof(CoreBaseUserWidget_StopAnimationByName) == 0x000010, "Wrong size on CoreBaseUserWidget_StopAnimationByName");
static_assert(offsetof(CoreBaseUserWidget_StopAnimationByName, animName) == 0x000000, "Member 'CoreBaseUserWidget_StopAnimationByName::animName' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_StopAnimationByName, ReturnValue) == 0x00000C, "Member 'CoreBaseUserWidget_StopAnimationByName::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseUserWidget.UpdateScale
// 0x0004 (0x0004 - 0x0000)
struct CoreBaseUserWidget_UpdateScale final
{
public:
	float                                         scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseUserWidget_UpdateScale) == 0x000004, "Wrong alignment on CoreBaseUserWidget_UpdateScale");
static_assert(sizeof(CoreBaseUserWidget_UpdateScale) == 0x000004, "Wrong size on CoreBaseUserWidget_UpdateScale");
static_assert(offsetof(CoreBaseUserWidget_UpdateScale, scale) == 0x000000, "Member 'CoreBaseUserWidget_UpdateScale::scale' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseUserWidget.GetAnimationByName
// 0x0018 (0x0018 - 0x0000)
struct CoreBaseUserWidget_GetAnimationByName final
{
public:
	class FName                                   animName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseUserWidget_GetAnimationByName) == 0x000008, "Wrong alignment on CoreBaseUserWidget_GetAnimationByName");
static_assert(sizeof(CoreBaseUserWidget_GetAnimationByName) == 0x000018, "Wrong size on CoreBaseUserWidget_GetAnimationByName");
static_assert(offsetof(CoreBaseUserWidget_GetAnimationByName, animName) == 0x000000, "Member 'CoreBaseUserWidget_GetAnimationByName::animName' has a wrong offset!");
static_assert(offsetof(CoreBaseUserWidget_GetAnimationByName, ReturnValue) == 0x000010, "Member 'CoreBaseUserWidget_GetAnimationByName::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.OnAlignmentChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_OnAlignmentChanged final
{
public:
	ETextJustify                                  newAlignment;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_OnAlignmentChanged) == 0x000001, "Wrong alignment on CoreButtonWidget_OnAlignmentChanged");
static_assert(sizeof(CoreButtonWidget_OnAlignmentChanged) == 0x000001, "Wrong size on CoreButtonWidget_OnAlignmentChanged");
static_assert(offsetof(CoreButtonWidget_OnAlignmentChanged, newAlignment) == 0x000000, "Member 'CoreButtonWidget_OnAlignmentChanged::newAlignment' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.OnEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_OnEnabledChanged final
{
public:
	bool                                          isEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_OnEnabledChanged) == 0x000001, "Wrong alignment on CoreButtonWidget_OnEnabledChanged");
static_assert(sizeof(CoreButtonWidget_OnEnabledChanged) == 0x000001, "Wrong size on CoreButtonWidget_OnEnabledChanged");
static_assert(offsetof(CoreButtonWidget_OnEnabledChanged, isEnabled) == 0x000000, "Member 'CoreButtonWidget_OnEnabledChanged::isEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetAdditionalIcon
// 0x0030 (0x0030 - 0x0000)
struct CoreButtonWidget_SetAdditionalIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              iconTexture;                                       // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetAdditionalIcon) == 0x000008, "Wrong alignment on CoreButtonWidget_SetAdditionalIcon");
static_assert(sizeof(CoreButtonWidget_SetAdditionalIcon) == 0x000030, "Wrong size on CoreButtonWidget_SetAdditionalIcon");
static_assert(offsetof(CoreButtonWidget_SetAdditionalIcon, iconTexture) == 0x000000, "Member 'CoreButtonWidget_SetAdditionalIcon::iconTexture' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetAlignment
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_SetAlignment final
{
public:
	ETextJustify                                  newAlignment;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetAlignment) == 0x000001, "Wrong alignment on CoreButtonWidget_SetAlignment");
static_assert(sizeof(CoreButtonWidget_SetAlignment) == 0x000001, "Wrong size on CoreButtonWidget_SetAlignment");
static_assert(offsetof(CoreButtonWidget_SetAlignment, newAlignment) == 0x000000, "Member 'CoreButtonWidget_SetAlignment::newAlignment' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetBackground
// 0x0030 (0x0030 - 0x0000)
struct CoreButtonWidget_SetBackground final
{
public:
	TSoftObjectPtr<class UMaterialInstance>       backgroundMaterial;                                // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetBackground) == 0x000008, "Wrong alignment on CoreButtonWidget_SetBackground");
static_assert(sizeof(CoreButtonWidget_SetBackground) == 0x000030, "Wrong size on CoreButtonWidget_SetBackground");
static_assert(offsetof(CoreButtonWidget_SetBackground, backgroundMaterial) == 0x000000, "Member 'CoreButtonWidget_SetBackground::backgroundMaterial' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetChargeable
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_SetChargeable final
{
public:
	bool                                          isChargeable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetChargeable) == 0x000001, "Wrong alignment on CoreButtonWidget_SetChargeable");
static_assert(sizeof(CoreButtonWidget_SetChargeable) == 0x000001, "Wrong size on CoreButtonWidget_SetChargeable");
static_assert(offsetof(CoreButtonWidget_SetChargeable, isChargeable) == 0x000000, "Member 'CoreButtonWidget_SetChargeable::isChargeable' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetClickable
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_SetClickable final
{
public:
	bool                                          isClickable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetClickable) == 0x000001, "Wrong alignment on CoreButtonWidget_SetClickable");
static_assert(sizeof(CoreButtonWidget_SetClickable) == 0x000001, "Wrong size on CoreButtonWidget_SetClickable");
static_assert(offsetof(CoreButtonWidget_SetClickable, isClickable) == 0x000000, "Member 'CoreButtonWidget_SetClickable::isClickable' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_SetEnabled final
{
public:
	bool                                          isEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetEnabled) == 0x000001, "Wrong alignment on CoreButtonWidget_SetEnabled");
static_assert(sizeof(CoreButtonWidget_SetEnabled) == 0x000001, "Wrong size on CoreButtonWidget_SetEnabled");
static_assert(offsetof(CoreButtonWidget_SetEnabled, isEnabled) == 0x000000, "Member 'CoreButtonWidget_SetEnabled::isEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetHoldable
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_SetHoldable final
{
public:
	bool                                          isHoldable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetHoldable) == 0x000001, "Wrong alignment on CoreButtonWidget_SetHoldable");
static_assert(sizeof(CoreButtonWidget_SetHoldable) == 0x000001, "Wrong size on CoreButtonWidget_SetHoldable");
static_assert(offsetof(CoreButtonWidget_SetHoldable, isHoldable) == 0x000000, "Member 'CoreButtonWidget_SetHoldable::isHoldable' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetHoverable
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_SetHoverable final
{
public:
	bool                                          isHoverable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetHoverable) == 0x000001, "Wrong alignment on CoreButtonWidget_SetHoverable");
static_assert(sizeof(CoreButtonWidget_SetHoverable) == 0x000001, "Wrong size on CoreButtonWidget_SetHoverable");
static_assert(offsetof(CoreButtonWidget_SetHoverable, isHoverable) == 0x000000, "Member 'CoreButtonWidget_SetHoverable::isHoverable' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct CoreButtonWidget_SetLabel final
{
public:
	class FText                                   label;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetLabel) == 0x000008, "Wrong alignment on CoreButtonWidget_SetLabel");
static_assert(sizeof(CoreButtonWidget_SetLabel) == 0x000018, "Wrong size on CoreButtonWidget_SetLabel");
static_assert(offsetof(CoreButtonWidget_SetLabel, label) == 0x000000, "Member 'CoreButtonWidget_SetLabel::label' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetPressable
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_SetPressable final
{
public:
	bool                                          isPressable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetPressable) == 0x000001, "Wrong alignment on CoreButtonWidget_SetPressable");
static_assert(sizeof(CoreButtonWidget_SetPressable) == 0x000001, "Wrong size on CoreButtonWidget_SetPressable");
static_assert(offsetof(CoreButtonWidget_SetPressable, isPressable) == 0x000000, "Member 'CoreButtonWidget_SetPressable::isPressable' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetRepeatable
// 0x0010 (0x0010 - 0x0000)
struct CoreButtonWidget_SetRepeatable final
{
public:
	bool                                          isRepeatable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            repetitionDelayCurve;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetRepeatable) == 0x000008, "Wrong alignment on CoreButtonWidget_SetRepeatable");
static_assert(sizeof(CoreButtonWidget_SetRepeatable) == 0x000010, "Wrong size on CoreButtonWidget_SetRepeatable");
static_assert(offsetof(CoreButtonWidget_SetRepeatable, isRepeatable) == 0x000000, "Member 'CoreButtonWidget_SetRepeatable::isRepeatable' has a wrong offset!");
static_assert(offsetof(CoreButtonWidget_SetRepeatable, repetitionDelayCurve) == 0x000008, "Member 'CoreButtonWidget_SetRepeatable::repetitionDelayCurve' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_SetVisible final
{
public:
	EButtonWidgetVisibility                       visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_SetVisible) == 0x000001, "Wrong alignment on CoreButtonWidget_SetVisible");
static_assert(sizeof(CoreButtonWidget_SetVisible) == 0x000001, "Wrong size on CoreButtonWidget_SetVisible");
static_assert(offsetof(CoreButtonWidget_SetVisible, visible) == 0x000000, "Member 'CoreButtonWidget_SetVisible::visible' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.GetHitzonePaintSpaceGeometry
// 0x0038 (0x0038 - 0x0000)
struct CoreButtonWidget_GetHitzonePaintSpaceGeometry final
{
public:
	struct FGeometry                              ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_GetHitzonePaintSpaceGeometry) == 0x000004, "Wrong alignment on CoreButtonWidget_GetHitzonePaintSpaceGeometry");
static_assert(sizeof(CoreButtonWidget_GetHitzonePaintSpaceGeometry) == 0x000038, "Wrong size on CoreButtonWidget_GetHitzonePaintSpaceGeometry");
static_assert(offsetof(CoreButtonWidget_GetHitzonePaintSpaceGeometry, ReturnValue) == 0x000000, "Member 'CoreButtonWidget_GetHitzonePaintSpaceGeometry::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonWidget.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonWidget_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonWidget_IsEnabled) == 0x000001, "Wrong alignment on CoreButtonWidget_IsEnabled");
static_assert(sizeof(CoreButtonWidget_IsEnabled) == 0x000001, "Wrong size on CoreButtonWidget_IsEnabled");
static_assert(offsetof(CoreButtonWidget_IsEnabled, ReturnValue) == 0x000000, "Member 'CoreButtonWidget_IsEnabled::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreGameManualCategoryButton.SetText
// 0x0030 (0x0030 - 0x0000)
struct CoreGameManualCategoryButton_SetText final
{
public:
	class FText                                   title;                                             // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FText                                   description;                                       // 0x0018(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGameManualCategoryButton_SetText) == 0x000008, "Wrong alignment on CoreGameManualCategoryButton_SetText");
static_assert(sizeof(CoreGameManualCategoryButton_SetText) == 0x000030, "Wrong size on CoreGameManualCategoryButton_SetText");
static_assert(offsetof(CoreGameManualCategoryButton_SetText, title) == 0x000000, "Member 'CoreGameManualCategoryButton_SetText::title' has a wrong offset!");
static_assert(offsetof(CoreGameManualCategoryButton_SetText, description) == 0x000018, "Member 'CoreGameManualCategoryButton_SetText::description' has a wrong offset!");

// Function DBDUIViewsCore.ArchiveCompendiumTooltipWidget.SetTooltipData
// 0x0070 (0x0070 - 0x0000)
struct ArchiveCompendiumTooltipWidget_SetTooltipData final
{
public:
	struct FCompendiumButtonData                  tooltipViewData;                                   // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveCompendiumTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on ArchiveCompendiumTooltipWidget_SetTooltipData");
static_assert(sizeof(ArchiveCompendiumTooltipWidget_SetTooltipData) == 0x000070, "Wrong size on ArchiveCompendiumTooltipWidget_SetTooltipData");
static_assert(offsetof(ArchiveCompendiumTooltipWidget_SetTooltipData, tooltipViewData) == 0x000000, "Member 'ArchiveCompendiumTooltipWidget_SetTooltipData::tooltipViewData' has a wrong offset!");

// Function DBDUIViewsCore.ArchiveNodeTooltipWidget.SetNodeType
// 0x0001 (0x0001 - 0x0000)
struct ArchiveNodeTooltipWidget_SetNodeType final
{
public:
	EArchiveNodeType                              type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveNodeTooltipWidget_SetNodeType) == 0x000001, "Wrong alignment on ArchiveNodeTooltipWidget_SetNodeType");
static_assert(sizeof(ArchiveNodeTooltipWidget_SetNodeType) == 0x000001, "Wrong size on ArchiveNodeTooltipWidget_SetNodeType");
static_assert(offsetof(ArchiveNodeTooltipWidget_SetNodeType, type) == 0x000000, "Member 'ArchiveNodeTooltipWidget_SetNodeType::type' has a wrong offset!");

// Function DBDUIViewsCore.ArchiveNodeTooltipWidget.SetTooltipData
// 0x00B8 (0x00B8 - 0x0000)
struct ArchiveNodeTooltipWidget_SetTooltipData final
{
public:
	struct FArchiveNodeViewData                   nodeViewData;                                      // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveNodeTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on ArchiveNodeTooltipWidget_SetTooltipData");
static_assert(sizeof(ArchiveNodeTooltipWidget_SetTooltipData) == 0x0000B8, "Wrong size on ArchiveNodeTooltipWidget_SetTooltipData");
static_assert(offsetof(ArchiveNodeTooltipWidget_SetTooltipData, nodeViewData) == 0x000000, "Member 'ArchiveNodeTooltipWidget_SetTooltipData::nodeViewData' has a wrong offset!");

// Function DBDUIViewsCore.AspectRatioBox.SetAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct AspectRatioBox_SetAspectRatio final
{
public:
	float                                         inAspectRatio;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AspectRatioBox_SetAspectRatio) == 0x000004, "Wrong alignment on AspectRatioBox_SetAspectRatio");
static_assert(sizeof(AspectRatioBox_SetAspectRatio) == 0x000004, "Wrong size on AspectRatioBox_SetAspectRatio");
static_assert(offsetof(AspectRatioBox_SetAspectRatio, inAspectRatio) == 0x000000, "Member 'AspectRatioBox_SetAspectRatio::inAspectRatio' has a wrong offset!");

// Function DBDUIViewsCore.AspectRatioBoxSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct AspectRatioBoxSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          inHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AspectRatioBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on AspectRatioBoxSlot_SetHorizontalAlignment");
static_assert(sizeof(AspectRatioBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on AspectRatioBoxSlot_SetHorizontalAlignment");
static_assert(offsetof(AspectRatioBoxSlot_SetHorizontalAlignment, inHorizontalAlignment) == 0x000000, "Member 'AspectRatioBoxSlot_SetHorizontalAlignment::inHorizontalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.AspectRatioBoxSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct AspectRatioBoxSlot_SetPadding final
{
public:
	struct FMargin                                inPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AspectRatioBoxSlot_SetPadding) == 0x000004, "Wrong alignment on AspectRatioBoxSlot_SetPadding");
static_assert(sizeof(AspectRatioBoxSlot_SetPadding) == 0x000010, "Wrong size on AspectRatioBoxSlot_SetPadding");
static_assert(offsetof(AspectRatioBoxSlot_SetPadding, inPadding) == 0x000000, "Member 'AspectRatioBoxSlot_SetPadding::inPadding' has a wrong offset!");

// Function DBDUIViewsCore.AspectRatioBoxSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct AspectRatioBoxSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            inVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AspectRatioBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on AspectRatioBoxSlot_SetVerticalAlignment");
static_assert(sizeof(AspectRatioBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong size on AspectRatioBoxSlot_SetVerticalAlignment");
static_assert(offsetof(AspectRatioBoxSlot_SetVerticalAlignment, inVerticalAlignment) == 0x000000, "Member 'AspectRatioBoxSlot_SetVerticalAlignment::inVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.CharacterTooltipWidget.SetDifficulty
// 0x0001 (0x0001 - 0x0000)
struct CharacterTooltipWidget_SetDifficulty final
{
public:
	ECharacterDifficulty                          difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterTooltipWidget_SetDifficulty) == 0x000001, "Wrong alignment on CharacterTooltipWidget_SetDifficulty");
static_assert(sizeof(CharacterTooltipWidget_SetDifficulty) == 0x000001, "Wrong size on CharacterTooltipWidget_SetDifficulty");
static_assert(offsetof(CharacterTooltipWidget_SetDifficulty, difficulty) == 0x000000, "Member 'CharacterTooltipWidget_SetDifficulty::difficulty' has a wrong offset!");

// Function DBDUIViewsCore.CharacterTooltipWidget.SetLevel
// 0x0004 (0x0004 - 0x0000)
struct CharacterTooltipWidget_SetLevel final
{
public:
	int32                                         level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterTooltipWidget_SetLevel) == 0x000004, "Wrong alignment on CharacterTooltipWidget_SetLevel");
static_assert(sizeof(CharacterTooltipWidget_SetLevel) == 0x000004, "Wrong size on CharacterTooltipWidget_SetLevel");
static_assert(offsetof(CharacterTooltipWidget_SetLevel, level) == 0x000000, "Member 'CharacterTooltipWidget_SetLevel::level' has a wrong offset!");

// Function DBDUIViewsCore.CharacterTooltipWidget.SetTooltipData
// 0x0070 (0x0070 - 0x0000)
struct CharacterTooltipWidget_SetTooltipData final
{
public:
	struct FCharacterTooltipViewData              characterViewData;                                 // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on CharacterTooltipWidget_SetTooltipData");
static_assert(sizeof(CharacterTooltipWidget_SetTooltipData) == 0x000070, "Wrong size on CharacterTooltipWidget_SetTooltipData");
static_assert(offsetof(CharacterTooltipWidget_SetTooltipData, characterViewData) == 0x000000, "Member 'CharacterTooltipWidget_SetTooltipData::characterViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreSelectableButtonWidget.OnSelectedChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreSelectableButtonWidget_OnSelectedChanged final
{
public:
	bool                                          isSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSelectableButtonWidget_OnSelectedChanged) == 0x000001, "Wrong alignment on CoreSelectableButtonWidget_OnSelectedChanged");
static_assert(sizeof(CoreSelectableButtonWidget_OnSelectedChanged) == 0x000001, "Wrong size on CoreSelectableButtonWidget_OnSelectedChanged");
static_assert(offsetof(CoreSelectableButtonWidget_OnSelectedChanged, isSelected) == 0x000000, "Member 'CoreSelectableButtonWidget_OnSelectedChanged::isSelected' has a wrong offset!");

// Function DBDUIViewsCore.CoreSelectableButtonWidget.SetSelectable
// 0x0001 (0x0001 - 0x0000)
struct CoreSelectableButtonWidget_SetSelectable final
{
public:
	bool                                          isSelectable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSelectableButtonWidget_SetSelectable) == 0x000001, "Wrong alignment on CoreSelectableButtonWidget_SetSelectable");
static_assert(sizeof(CoreSelectableButtonWidget_SetSelectable) == 0x000001, "Wrong size on CoreSelectableButtonWidget_SetSelectable");
static_assert(offsetof(CoreSelectableButtonWidget_SetSelectable, isSelectable) == 0x000000, "Member 'CoreSelectableButtonWidget_SetSelectable::isSelectable' has a wrong offset!");

// Function DBDUIViewsCore.CoreSelectableButtonWidget.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct CoreSelectableButtonWidget_SetSelected final
{
public:
	bool                                          isSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSelectableButtonWidget_SetSelected) == 0x000001, "Wrong alignment on CoreSelectableButtonWidget_SetSelected");
static_assert(sizeof(CoreSelectableButtonWidget_SetSelected) == 0x000001, "Wrong size on CoreSelectableButtonWidget_SetSelected");
static_assert(offsetof(CoreSelectableButtonWidget_SetSelected, isSelected) == 0x000000, "Member 'CoreSelectableButtonWidget_SetSelected::isSelected' has a wrong offset!");

// Function DBDUIViewsCore.CoreSelectableButtonWidget.UpdateBackgroundSkin
// 0x0008 (0x0008 - 0x0000)
struct CoreSelectableButtonWidget_UpdateBackgroundSkin final
{
public:
	class UMaterialInterface*                     skinMaterial;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSelectableButtonWidget_UpdateBackgroundSkin) == 0x000008, "Wrong alignment on CoreSelectableButtonWidget_UpdateBackgroundSkin");
static_assert(sizeof(CoreSelectableButtonWidget_UpdateBackgroundSkin) == 0x000008, "Wrong size on CoreSelectableButtonWidget_UpdateBackgroundSkin");
static_assert(offsetof(CoreSelectableButtonWidget_UpdateBackgroundSkin, skinMaterial) == 0x000000, "Member 'CoreSelectableButtonWidget_UpdateBackgroundSkin::skinMaterial' has a wrong offset!");

// Function DBDUIViewsCore.CoreSelectableButtonWidget.IsSelectable
// 0x0001 (0x0001 - 0x0000)
struct CoreSelectableButtonWidget_IsSelectable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSelectableButtonWidget_IsSelectable) == 0x000001, "Wrong alignment on CoreSelectableButtonWidget_IsSelectable");
static_assert(sizeof(CoreSelectableButtonWidget_IsSelectable) == 0x000001, "Wrong size on CoreSelectableButtonWidget_IsSelectable");
static_assert(offsetof(CoreSelectableButtonWidget_IsSelectable, ReturnValue) == 0x000000, "Member 'CoreSelectableButtonWidget_IsSelectable::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreSelectableButtonWidget.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct CoreSelectableButtonWidget_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSelectableButtonWidget_IsSelected) == 0x000001, "Wrong alignment on CoreSelectableButtonWidget_IsSelected");
static_assert(sizeof(CoreSelectableButtonWidget_IsSelected) == 0x000001, "Wrong size on CoreSelectableButtonWidget_IsSelected");
static_assert(offsetof(CoreSelectableButtonWidget_IsSelected, ReturnValue) == 0x000000, "Member 'CoreSelectableButtonWidget_IsSelected::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.Init
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_Init final
{
public:
	EPlayerRole                                   role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_Init) == 0x000001, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_Init");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_Init) == 0x000001, "Wrong size on CoreArchiveChallengeReminderSlotWidget_Init");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_Init, role) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_Init::role' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SetData
// 0x00D0 (0x00D0 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_SetData final
{
public:
	struct FArchiveChallengeReminderViewData      data;                                              // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_SetData) == 0x000008, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_SetData");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_SetData) == 0x0000D0, "Wrong size on CoreArchiveChallengeReminderSlotWidget_SetData");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_SetData, data) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_SetData::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SetQuestNodeHoverEffect
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect final
{
public:
	bool                                          isHovered;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect) == 0x000001, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect) == 0x000001, "Wrong size on CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect, isHovered) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect::isHovered' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SetSlotSelectorState
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState final
{
public:
	bool                                          isSelectorOpen;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState) == 0x000001, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState) == 0x000001, "Wrong size on CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState, isSelectorOpen) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState::isSelectorOpen' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SwapChallenge
// 0x00D0 (0x00D0 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_SwapChallenge final
{
public:
	struct FArchiveChallengeReminderViewData      data;                                              // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_SwapChallenge) == 0x000008, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_SwapChallenge");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_SwapChallenge) == 0x0000D0, "Wrong size on CoreArchiveChallengeReminderSlotWidget_SwapChallenge");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_SwapChallenge, data) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_SwapChallenge::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.UpdateActiveState
// 0x0002 (0x0002 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_UpdateActiveState final
{
public:
	bool                                          isActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          playAnimation;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_UpdateActiveState) == 0x000001, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_UpdateActiveState");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_UpdateActiveState) == 0x000002, "Wrong size on CoreArchiveChallengeReminderSlotWidget_UpdateActiveState");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_UpdateActiveState, isActive) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_UpdateActiveState::isActive' has a wrong offset!");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_UpdateActiveState, playAnimation) == 0x000001, "Member 'CoreArchiveChallengeReminderSlotWidget_UpdateActiveState::playAnimation' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.UpdateProgressBar
// 0x0004 (0x0004 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar final
{
public:
	float                                         progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar) == 0x000004, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar) == 0x000004, "Wrong size on CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar, progress) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar::progress' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.UpdateVisualState
// 0x00D0 (0x00D0 - 0x0000)
struct CoreArchiveChallengeReminderSlotWidget_UpdateVisualState final
{
public:
	struct FArchiveChallengeReminderViewData      data;                                              // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveChallengeReminderSlotWidget_UpdateVisualState) == 0x000008, "Wrong alignment on CoreArchiveChallengeReminderSlotWidget_UpdateVisualState");
static_assert(sizeof(CoreArchiveChallengeReminderSlotWidget_UpdateVisualState) == 0x0000D0, "Wrong size on CoreArchiveChallengeReminderSlotWidget_UpdateVisualState");
static_assert(offsetof(CoreArchiveChallengeReminderSlotWidget_UpdateVisualState, data) == 0x000000, "Member 'CoreArchiveChallengeReminderSlotWidget_UpdateVisualState::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.GetTomeId
// 0x0010 (0x0010 - 0x0000)
struct CoreArchiveCompendiumButtonWidget_GetTomeId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveCompendiumButtonWidget_GetTomeId) == 0x000008, "Wrong alignment on CoreArchiveCompendiumButtonWidget_GetTomeId");
static_assert(sizeof(CoreArchiveCompendiumButtonWidget_GetTomeId) == 0x000010, "Wrong size on CoreArchiveCompendiumButtonWidget_GetTomeId");
static_assert(offsetof(CoreArchiveCompendiumButtonWidget_GetTomeId, ReturnValue) == 0x000000, "Member 'CoreArchiveCompendiumButtonWidget_GetTomeId::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetButtonData
// 0x0070 (0x0070 - 0x0000)
struct CoreArchiveCompendiumButtonWidget_SetButtonData final
{
public:
	struct FCompendiumButtonData                  buttonData;                                        // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveCompendiumButtonWidget_SetButtonData) == 0x000008, "Wrong alignment on CoreArchiveCompendiumButtonWidget_SetButtonData");
static_assert(sizeof(CoreArchiveCompendiumButtonWidget_SetButtonData) == 0x000070, "Wrong size on CoreArchiveCompendiumButtonWidget_SetButtonData");
static_assert(offsetof(CoreArchiveCompendiumButtonWidget_SetButtonData, buttonData) == 0x000000, "Member 'CoreArchiveCompendiumButtonWidget_SetButtonData::buttonData' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetButtonVisual
// 0x0070 (0x0070 - 0x0000)
struct CoreArchiveCompendiumButtonWidget_SetButtonVisual final
{
public:
	struct FCompendiumButtonData                  buttonData;                                        // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveCompendiumButtonWidget_SetButtonVisual) == 0x000008, "Wrong alignment on CoreArchiveCompendiumButtonWidget_SetButtonVisual");
static_assert(sizeof(CoreArchiveCompendiumButtonWidget_SetButtonVisual) == 0x000070, "Wrong size on CoreArchiveCompendiumButtonWidget_SetButtonVisual");
static_assert(offsetof(CoreArchiveCompendiumButtonWidget_SetButtonVisual, buttonData) == 0x000000, "Member 'CoreArchiveCompendiumButtonWidget_SetButtonVisual::buttonData' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetGhostStory
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveCompendiumButtonWidget_SetGhostStory final
{
public:
	bool                                          isGhostStory;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveCompendiumButtonWidget_SetGhostStory) == 0x000001, "Wrong alignment on CoreArchiveCompendiumButtonWidget_SetGhostStory");
static_assert(sizeof(CoreArchiveCompendiumButtonWidget_SetGhostStory) == 0x000001, "Wrong size on CoreArchiveCompendiumButtonWidget_SetGhostStory");
static_assert(offsetof(CoreArchiveCompendiumButtonWidget_SetGhostStory, isGhostStory) == 0x000000, "Member 'CoreArchiveCompendiumButtonWidget_SetGhostStory::isGhostStory' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetLevelProgressionVisual
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual final
{
public:
	int32                                         buttonLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArchivesStoryLevelStatus                     levelStatus;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual) == 0x000004, "Wrong alignment on CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual");
static_assert(sizeof(CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual) == 0x000008, "Wrong size on CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual");
static_assert(offsetof(CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual, buttonLevel) == 0x000000, "Member 'CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual::buttonLevel' has a wrong offset!");
static_assert(offsetof(CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual, levelStatus) == 0x000004, "Member 'CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual::levelStatus' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContentWidget.StopFadeInTweening
// 0x0004 (0x0004 - 0x0000)
struct CoreTabContentWidget_StopFadeInTweening final
{
public:
	float                                         opacityValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabContentWidget_StopFadeInTweening) == 0x000004, "Wrong alignment on CoreTabContentWidget_StopFadeInTweening");
static_assert(sizeof(CoreTabContentWidget_StopFadeInTweening) == 0x000004, "Wrong size on CoreTabContentWidget_StopFadeInTweening");
static_assert(offsetof(CoreTabContentWidget_StopFadeInTweening, opacityValue) == 0x000000, "Member 'CoreTabContentWidget_StopFadeInTweening::opacityValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.CreateAndAddButtonToGrid
// 0x0010 (0x0010 - 0x0000)
struct CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreArchiveCompendiumButtonWidget*     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid) == 0x000008, "Wrong alignment on CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid");
static_assert(sizeof(CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid) == 0x000010, "Wrong size on CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid");
static_assert(offsetof(CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid, index) == 0x000000, "Member 'CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid::index' has a wrong offset!");
static_assert(offsetof(CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid, ReturnValue) == 0x000008, "Member 'CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.CreateGhostStories
// 0x0004 (0x0004 - 0x0000)
struct CoreArchiveCompendiumWidget_CreateGhostStories final
{
public:
	int32                                         currentStoryNum;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveCompendiumWidget_CreateGhostStories) == 0x000004, "Wrong alignment on CoreArchiveCompendiumWidget_CreateGhostStories");
static_assert(sizeof(CoreArchiveCompendiumWidget_CreateGhostStories) == 0x000004, "Wrong size on CoreArchiveCompendiumWidget_CreateGhostStories");
static_assert(offsetof(CoreArchiveCompendiumWidget_CreateGhostStories, currentStoryNum) == 0x000000, "Member 'CoreArchiveCompendiumWidget_CreateGhostStories::currentStoryNum' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.OnPastStoryClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveCompendiumWidget_OnPastStoryClicked final
{
public:
	class UCoreButtonWidget*                      button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveCompendiumWidget_OnPastStoryClicked) == 0x000008, "Wrong alignment on CoreArchiveCompendiumWidget_OnPastStoryClicked");
static_assert(sizeof(CoreArchiveCompendiumWidget_OnPastStoryClicked) == 0x000008, "Wrong size on CoreArchiveCompendiumWidget_OnPastStoryClicked");
static_assert(offsetof(CoreArchiveCompendiumWidget_OnPastStoryClicked, button) == 0x000000, "Member 'CoreArchiveCompendiumWidget_OnPastStoryClicked::button' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.SetGridSlot
// 0x0010 (0x0010 - 0x0000)
struct CoreArchiveCompendiumWidget_SetGridSlot final
{
public:
	class UGridSlot*                              gridSlot;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         index;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveCompendiumWidget_SetGridSlot) == 0x000008, "Wrong alignment on CoreArchiveCompendiumWidget_SetGridSlot");
static_assert(sizeof(CoreArchiveCompendiumWidget_SetGridSlot) == 0x000010, "Wrong size on CoreArchiveCompendiumWidget_SetGridSlot");
static_assert(offsetof(CoreArchiveCompendiumWidget_SetGridSlot, gridSlot) == 0x000000, "Member 'CoreArchiveCompendiumWidget_SetGridSlot::gridSlot' has a wrong offset!");
static_assert(offsetof(CoreArchiveCompendiumWidget_SetGridSlot, index) == 0x000008, "Member 'CoreArchiveCompendiumWidget_SetGridSlot::index' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.OnVoiceOverAutoPlay
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay final
{
public:
	bool                                          autoplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay) == 0x000001, "Wrong alignment on CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay");
static_assert(sizeof(CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay) == 0x000001, "Wrong size on CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay, autoplay) == 0x000000, "Member 'CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay::autoplay' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetData
// 0x0078 (0x0078 - 0x0000)
struct CoreArchiveJournalImageViewerWidget_SetData final
{
public:
	struct FArchivesVignetteEntryViewData         data;                                              // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          hasTitle;                                          // 0x0070(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hasDescription;                                    // 0x0071(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveJournalImageViewerWidget_SetData) == 0x000008, "Wrong alignment on CoreArchiveJournalImageViewerWidget_SetData");
static_assert(sizeof(CoreArchiveJournalImageViewerWidget_SetData) == 0x000078, "Wrong size on CoreArchiveJournalImageViewerWidget_SetData");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetData, data) == 0x000000, "Member 'CoreArchiveJournalImageViewerWidget_SetData::data' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetData, hasTitle) == 0x000070, "Member 'CoreArchiveJournalImageViewerWidget_SetData::hasTitle' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetData, hasDescription) == 0x000071, "Member 'CoreArchiveJournalImageViewerWidget_SetData::hasDescription' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetScrollData
// 0x0018 (0x0018 - 0x0000)
struct CoreArchiveJournalImageViewerWidget_SetScrollData final
{
public:
	class FText                                   journalEntryScrollPromptText;                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalImageViewerWidget_SetScrollData) == 0x000008, "Wrong alignment on CoreArchiveJournalImageViewerWidget_SetScrollData");
static_assert(sizeof(CoreArchiveJournalImageViewerWidget_SetScrollData) == 0x000018, "Wrong size on CoreArchiveJournalImageViewerWidget_SetScrollData");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetScrollData, journalEntryScrollPromptText) == 0x000000, "Member 'CoreArchiveJournalImageViewerWidget_SetScrollData::journalEntryScrollPromptText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetTextVisibilityInputText
// 0x0030 (0x0030 - 0x0000)
struct CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText final
{
public:
	class FText                                   displayText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   hideText;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText) == 0x000008, "Wrong alignment on CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText");
static_assert(sizeof(CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText) == 0x000030, "Wrong size on CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText, displayText) == 0x000000, "Member 'CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText::displayText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText, hideText) == 0x000018, "Member 'CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText::hideText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetVoiceOverText
// 0x0048 (0x0048 - 0x0000)
struct CoreArchiveJournalImageViewerWidget_SetVoiceOverText final
{
public:
	class FText                                   playVoiceOverText;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   stopVoiceOverText;                                 // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   autoplayVoiceOverText;                             // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalImageViewerWidget_SetVoiceOverText) == 0x000008, "Wrong alignment on CoreArchiveJournalImageViewerWidget_SetVoiceOverText");
static_assert(sizeof(CoreArchiveJournalImageViewerWidget_SetVoiceOverText) == 0x000048, "Wrong size on CoreArchiveJournalImageViewerWidget_SetVoiceOverText");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetVoiceOverText, playVoiceOverText) == 0x000000, "Member 'CoreArchiveJournalImageViewerWidget_SetVoiceOverText::playVoiceOverText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetVoiceOverText, stopVoiceOverText) == 0x000018, "Member 'CoreArchiveJournalImageViewerWidget_SetVoiceOverText::stopVoiceOverText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalImageViewerWidget_SetVoiceOverText, autoplayVoiceOverText) == 0x000030, "Member 'CoreArchiveJournalImageViewerWidget_SetVoiceOverText::autoplayVoiceOverText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.InitializeArrow
// 0x0010 (0x0010 - 0x0000)
struct CoreArchiveJournalWidget_InitializeArrow final
{
public:
	class UCoreInputSwitcherWidget*               arrowWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          active;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveJournalWidget_InitializeArrow) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_InitializeArrow");
static_assert(sizeof(CoreArchiveJournalWidget_InitializeArrow) == 0x000010, "Wrong size on CoreArchiveJournalWidget_InitializeArrow");
static_assert(offsetof(CoreArchiveJournalWidget_InitializeArrow, arrowWidget) == 0x000000, "Member 'CoreArchiveJournalWidget_InitializeArrow::arrowWidget' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_InitializeArrow, active) == 0x000008, "Member 'CoreArchiveJournalWidget_InitializeArrow::active' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnRewardImageLoaded
// 0x0070 (0x0070 - 0x0000)
struct CoreArchiveJournalWidget_OnRewardImageLoaded final
{
public:
	TSoftObjectPtr<class UTexture2D>              loadedTexture;                                     // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   titleText;                                         // 0x0038(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   descriptionText;                                   // 0x0050(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         textureOffset;                                     // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveJournalWidget_OnRewardImageLoaded) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_OnRewardImageLoaded");
static_assert(sizeof(CoreArchiveJournalWidget_OnRewardImageLoaded) == 0x000070, "Wrong size on CoreArchiveJournalWidget_OnRewardImageLoaded");
static_assert(offsetof(CoreArchiveJournalWidget_OnRewardImageLoaded, loadedTexture) == 0x000000, "Member 'CoreArchiveJournalWidget_OnRewardImageLoaded::loadedTexture' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_OnRewardImageLoaded, success) == 0x000030, "Member 'CoreArchiveJournalWidget_OnRewardImageLoaded::success' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_OnRewardImageLoaded, titleText) == 0x000038, "Member 'CoreArchiveJournalWidget_OnRewardImageLoaded::titleText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_OnRewardImageLoaded, descriptionText) == 0x000050, "Member 'CoreArchiveJournalWidget_OnRewardImageLoaded::descriptionText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_OnRewardImageLoaded, textureOffset) == 0x000068, "Member 'CoreArchiveJournalWidget_OnRewardImageLoaded::textureOffset' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVignetteButtonSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveJournalWidget_OnVignetteButtonSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_OnVignetteButtonSelected) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_OnVignetteButtonSelected");
static_assert(sizeof(CoreArchiveJournalWidget_OnVignetteButtonSelected) == 0x000008, "Wrong size on CoreArchiveJournalWidget_OnVignetteButtonSelected");
static_assert(offsetof(CoreArchiveJournalWidget_OnVignetteButtonSelected, selectedButton) == 0x000000, "Member 'CoreArchiveJournalWidget_OnVignetteButtonSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVignetteCinematicSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveJournalWidget_OnVignetteCinematicSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_OnVignetteCinematicSelected) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_OnVignetteCinematicSelected");
static_assert(sizeof(CoreArchiveJournalWidget_OnVignetteCinematicSelected) == 0x000008, "Wrong size on CoreArchiveJournalWidget_OnVignetteCinematicSelected");
static_assert(offsetof(CoreArchiveJournalWidget_OnVignetteCinematicSelected, selectedButton) == 0x000000, "Member 'CoreArchiveJournalWidget_OnVignetteCinematicSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVignetteEntrySelected
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveJournalWidget_OnVignetteEntrySelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_OnVignetteEntrySelected) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_OnVignetteEntrySelected");
static_assert(sizeof(CoreArchiveJournalWidget_OnVignetteEntrySelected) == 0x000008, "Wrong size on CoreArchiveJournalWidget_OnVignetteEntrySelected");
static_assert(offsetof(CoreArchiveJournalWidget_OnVignetteEntrySelected, selectedButton) == 0x000000, "Member 'CoreArchiveJournalWidget_OnVignetteEntrySelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVoiceOverAutoPlay
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveJournalWidget_OnVoiceOverAutoPlay final
{
public:
	bool                                          autoplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_OnVoiceOverAutoPlay) == 0x000001, "Wrong alignment on CoreArchiveJournalWidget_OnVoiceOverAutoPlay");
static_assert(sizeof(CoreArchiveJournalWidget_OnVoiceOverAutoPlay) == 0x000001, "Wrong size on CoreArchiveJournalWidget_OnVoiceOverAutoPlay");
static_assert(offsetof(CoreArchiveJournalWidget_OnVoiceOverAutoPlay, autoplay) == 0x000000, "Member 'CoreArchiveJournalWidget_OnVoiceOverAutoPlay::autoplay' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetBottomFogOffset
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveJournalWidget_SetBottomFogOffset final
{
public:
	bool                                          hasAudio;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_SetBottomFogOffset) == 0x000001, "Wrong alignment on CoreArchiveJournalWidget_SetBottomFogOffset");
static_assert(sizeof(CoreArchiveJournalWidget_SetBottomFogOffset) == 0x000001, "Wrong size on CoreArchiveJournalWidget_SetBottomFogOffset");
static_assert(offsetof(CoreArchiveJournalWidget_SetBottomFogOffset, hasAudio) == 0x000000, "Member 'CoreArchiveJournalWidget_SetBottomFogOffset::hasAudio' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetEntryImage
// 0x0068 (0x0068 - 0x0000)
struct CoreArchiveJournalWidget_SetEntryImage final
{
public:
	class FText                                   titleText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   descriptionText;                                   // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              rewardImage;                                       // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         textureOffset;                                     // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveJournalWidget_SetEntryImage) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_SetEntryImage");
static_assert(sizeof(CoreArchiveJournalWidget_SetEntryImage) == 0x000068, "Wrong size on CoreArchiveJournalWidget_SetEntryImage");
static_assert(offsetof(CoreArchiveJournalWidget_SetEntryImage, titleText) == 0x000000, "Member 'CoreArchiveJournalWidget_SetEntryImage::titleText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetEntryImage, descriptionText) == 0x000018, "Member 'CoreArchiveJournalWidget_SetEntryImage::descriptionText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetEntryImage, rewardImage) == 0x000030, "Member 'CoreArchiveJournalWidget_SetEntryImage::rewardImage' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetEntryImage, textureOffset) == 0x000060, "Member 'CoreArchiveJournalWidget_SetEntryImage::textureOffset' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetEntryText
// 0x0030 (0x0030 - 0x0000)
struct CoreArchiveJournalWidget_SetEntryText final
{
public:
	class FText                                   titleText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   descriptionText;                                   // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_SetEntryText) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_SetEntryText");
static_assert(sizeof(CoreArchiveJournalWidget_SetEntryText) == 0x000030, "Wrong size on CoreArchiveJournalWidget_SetEntryText");
static_assert(offsetof(CoreArchiveJournalWidget_SetEntryText, titleText) == 0x000000, "Member 'CoreArchiveJournalWidget_SetEntryText::titleText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetEntryText, descriptionText) == 0x000018, "Member 'CoreArchiveJournalWidget_SetEntryText::descriptionText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetTopFogOffset
// 0x0002 (0x0002 - 0x0000)
struct CoreArchiveJournalWidget_SetTopFogOffset final
{
public:
	bool                                          hasTitle;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hasDescription;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_SetTopFogOffset) == 0x000001, "Wrong alignment on CoreArchiveJournalWidget_SetTopFogOffset");
static_assert(sizeof(CoreArchiveJournalWidget_SetTopFogOffset) == 0x000002, "Wrong size on CoreArchiveJournalWidget_SetTopFogOffset");
static_assert(offsetof(CoreArchiveJournalWidget_SetTopFogOffset, hasTitle) == 0x000000, "Member 'CoreArchiveJournalWidget_SetTopFogOffset::hasTitle' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetTopFogOffset, hasDescription) == 0x000001, "Member 'CoreArchiveJournalWidget_SetTopFogOffset::hasDescription' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetVignetteText
// 0x0030 (0x0030 - 0x0000)
struct CoreArchiveJournalWidget_SetVignetteText final
{
public:
	class FText                                   titleText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   subtitleText;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_SetVignetteText) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_SetVignetteText");
static_assert(sizeof(CoreArchiveJournalWidget_SetVignetteText) == 0x000030, "Wrong size on CoreArchiveJournalWidget_SetVignetteText");
static_assert(offsetof(CoreArchiveJournalWidget_SetVignetteText, titleText) == 0x000000, "Member 'CoreArchiveJournalWidget_SetVignetteText::titleText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetVignetteText, subtitleText) == 0x000018, "Member 'CoreArchiveJournalWidget_SetVignetteText::subtitleText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetVoiceOverButtonsVisibility
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility) == 0x000001, "Wrong alignment on CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility");
static_assert(sizeof(CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility) == 0x000001, "Wrong size on CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility");
static_assert(offsetof(CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility, isVisible) == 0x000000, "Member 'CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility::isVisible' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetVoiceOverText
// 0x0048 (0x0048 - 0x0000)
struct CoreArchiveJournalWidget_SetVoiceOverText final
{
public:
	class FText                                   playVoiceOverText;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   stopVoiceOverText;                                 // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   autoplayVoiceOverText;                             // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveJournalWidget_SetVoiceOverText) == 0x000008, "Wrong alignment on CoreArchiveJournalWidget_SetVoiceOverText");
static_assert(sizeof(CoreArchiveJournalWidget_SetVoiceOverText) == 0x000048, "Wrong size on CoreArchiveJournalWidget_SetVoiceOverText");
static_assert(offsetof(CoreArchiveJournalWidget_SetVoiceOverText, playVoiceOverText) == 0x000000, "Member 'CoreArchiveJournalWidget_SetVoiceOverText::playVoiceOverText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetVoiceOverText, stopVoiceOverText) == 0x000018, "Member 'CoreArchiveJournalWidget_SetVoiceOverText::stopVoiceOverText' has a wrong offset!");
static_assert(offsetof(CoreArchiveJournalWidget_SetVoiceOverText, autoplayVoiceOverText) == 0x000030, "Member 'CoreArchiveJournalWidget_SetVoiceOverText::autoplayVoiceOverText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveLevelProgressionWidget.OnStoryLevelSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveLevelProgressionWidget_OnStoryLevelSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveLevelProgressionWidget_OnStoryLevelSelected) == 0x000008, "Wrong alignment on CoreArchiveLevelProgressionWidget_OnStoryLevelSelected");
static_assert(sizeof(CoreArchiveLevelProgressionWidget_OnStoryLevelSelected) == 0x000008, "Wrong size on CoreArchiveLevelProgressionWidget_OnStoryLevelSelected");
static_assert(offsetof(CoreArchiveLevelProgressionWidget_OnStoryLevelSelected, selectedButton) == 0x000000, "Member 'CoreArchiveLevelProgressionWidget_OnStoryLevelSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveMenuWidget.GetTimeRemainingLabelFromMenuState
// 0x0020 (0x0020 - 0x0000)
struct CoreArchiveMenuWidget_GetTimeRemainingLabelFromMenuState final
{
public:
	EArchiveMenuState                             menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveMenuWidget_GetTimeRemainingLabelFromMenuState) == 0x000008, "Wrong alignment on CoreArchiveMenuWidget_GetTimeRemainingLabelFromMenuState");
static_assert(sizeof(CoreArchiveMenuWidget_GetTimeRemainingLabelFromMenuState) == 0x000020, "Wrong size on CoreArchiveMenuWidget_GetTimeRemainingLabelFromMenuState");
static_assert(offsetof(CoreArchiveMenuWidget_GetTimeRemainingLabelFromMenuState, menuState) == 0x000000, "Member 'CoreArchiveMenuWidget_GetTimeRemainingLabelFromMenuState::menuState' has a wrong offset!");
static_assert(offsetof(CoreArchiveMenuWidget_GetTimeRemainingLabelFromMenuState, ReturnValue) == 0x000008, "Member 'CoreArchiveMenuWidget_GetTimeRemainingLabelFromMenuState::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnChallengeReminderClick
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveMenuWidget_OnChallengeReminderClick final
{
public:
	class UCoreButtonWidget*                      button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveMenuWidget_OnChallengeReminderClick) == 0x000008, "Wrong alignment on CoreArchiveMenuWidget_OnChallengeReminderClick");
static_assert(sizeof(CoreArchiveMenuWidget_OnChallengeReminderClick) == 0x000008, "Wrong size on CoreArchiveMenuWidget_OnChallengeReminderClick");
static_assert(offsetof(CoreArchiveMenuWidget_OnChallengeReminderClick, button) == 0x000000, "Member 'CoreArchiveMenuWidget_OnChallengeReminderClick::button' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnInfoButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveMenuWidget_OnInfoButtonClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveMenuWidget_OnInfoButtonClicked) == 0x000008, "Wrong alignment on CoreArchiveMenuWidget_OnInfoButtonClicked");
static_assert(sizeof(CoreArchiveMenuWidget_OnInfoButtonClicked) == 0x000008, "Wrong size on CoreArchiveMenuWidget_OnInfoButtonClicked");
static_assert(offsetof(CoreArchiveMenuWidget_OnInfoButtonClicked, buttonTarget) == 0x000000, "Member 'CoreArchiveMenuWidget_OnInfoButtonClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnMenuTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveMenuWidget_OnMenuTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveMenuWidget_OnMenuTabSelected) == 0x000008, "Wrong alignment on CoreArchiveMenuWidget_OnMenuTabSelected");
static_assert(sizeof(CoreArchiveMenuWidget_OnMenuTabSelected) == 0x000008, "Wrong size on CoreArchiveMenuWidget_OnMenuTabSelected");
static_assert(offsetof(CoreArchiveMenuWidget_OnMenuTabSelected, selectedButton) == 0x000000, "Member 'CoreArchiveMenuWidget_OnMenuTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnMenuTabSelectedAgain
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveMenuWidget_OnMenuTabSelectedAgain final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveMenuWidget_OnMenuTabSelectedAgain) == 0x000008, "Wrong alignment on CoreArchiveMenuWidget_OnMenuTabSelectedAgain");
static_assert(sizeof(CoreArchiveMenuWidget_OnMenuTabSelectedAgain) == 0x000008, "Wrong size on CoreArchiveMenuWidget_OnMenuTabSelectedAgain");
static_assert(offsetof(CoreArchiveMenuWidget_OnMenuTabSelectedAgain, selectedButton) == 0x000000, "Member 'CoreArchiveMenuWidget_OnMenuTabSelectedAgain::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnSlotSelected
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveMenuWidget_OnSlotSelected final
{
public:
	EPlayerRole                                   role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveMenuWidget_OnSlotSelected) == 0x000001, "Wrong alignment on CoreArchiveMenuWidget_OnSlotSelected");
static_assert(sizeof(CoreArchiveMenuWidget_OnSlotSelected) == 0x000001, "Wrong size on CoreArchiveMenuWidget_OnSlotSelected");
static_assert(offsetof(CoreArchiveMenuWidget_OnSlotSelected, role) == 0x000000, "Member 'CoreArchiveMenuWidget_OnSlotSelected::role' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveMenuWidget.SetScrollData
// 0x0030 (0x0030 - 0x0000)
struct CoreArchiveMenuWidget_SetScrollData final
{
public:
	class FText                                   vignetteListScrollPromptText;                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   journalEntryScrollPromptText;                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveMenuWidget_SetScrollData) == 0x000008, "Wrong alignment on CoreArchiveMenuWidget_SetScrollData");
static_assert(sizeof(CoreArchiveMenuWidget_SetScrollData) == 0x000030, "Wrong size on CoreArchiveMenuWidget_SetScrollData");
static_assert(offsetof(CoreArchiveMenuWidget_SetScrollData, vignetteListScrollPromptText) == 0x000000, "Member 'CoreArchiveMenuWidget_SetScrollData::vignetteListScrollPromptText' has a wrong offset!");
static_assert(offsetof(CoreArchiveMenuWidget_SetScrollData, journalEntryScrollPromptText) == 0x000018, "Member 'CoreArchiveMenuWidget_SetScrollData::journalEntryScrollPromptText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveObjectiveWidget.SetData
// 0x0028 (0x0028 - 0x0000)
struct CoreArchiveObjectiveWidget_SetData final
{
public:
	struct FArchiveNodeObjectiveViewData          objectiveData;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveObjectiveWidget_SetData) == 0x000008, "Wrong alignment on CoreArchiveObjectiveWidget_SetData");
static_assert(sizeof(CoreArchiveObjectiveWidget_SetData) == 0x000028, "Wrong size on CoreArchiveObjectiveWidget_SetData");
static_assert(offsetof(CoreArchiveObjectiveWidget_SetData, objectiveData) == 0x000000, "Member 'CoreArchiveObjectiveWidget_SetData::objectiveData' has a wrong offset!");

// Function DBDUIViewsCore.CoreBasePopupWidget.Show
// 0x0008 (0x0008 - 0x0000)
struct CoreBasePopupWidget_Show final
{
public:
	class UBasePopupViewData*                     data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBasePopupWidget_Show) == 0x000008, "Wrong alignment on CoreBasePopupWidget_Show");
static_assert(sizeof(CoreBasePopupWidget_Show) == 0x000008, "Wrong size on CoreBasePopupWidget_Show");
static_assert(offsetof(CoreBasePopupWidget_Show, data) == 0x000000, "Member 'CoreBasePopupWidget_Show::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchivePassPurchasePopupWidget.GetTranslatedAvailabilityTitleText
// 0x0018 (0x0018 - 0x0000)
struct CoreArchivePassPurchasePopupWidget_GetTranslatedAvailabilityTitleText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchivePassPurchasePopupWidget_GetTranslatedAvailabilityTitleText) == 0x000008, "Wrong alignment on CoreArchivePassPurchasePopupWidget_GetTranslatedAvailabilityTitleText");
static_assert(sizeof(CoreArchivePassPurchasePopupWidget_GetTranslatedAvailabilityTitleText) == 0x000018, "Wrong size on CoreArchivePassPurchasePopupWidget_GetTranslatedAvailabilityTitleText");
static_assert(offsetof(CoreArchivePassPurchasePopupWidget_GetTranslatedAvailabilityTitleText, ReturnValue) == 0x000000, "Member 'CoreArchivePassPurchasePopupWidget_GetTranslatedAvailabilityTitleText::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.BindToNode
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestMapWidget_BindToNode final
{
public:
	class UCoreArchiveQuestNodeWidget*            node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_BindToNode) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_BindToNode");
static_assert(sizeof(CoreArchiveQuestMapWidget_BindToNode) == 0x000008, "Wrong size on CoreArchiveQuestMapWidget_BindToNode");
static_assert(offsetof(CoreArchiveQuestMapWidget_BindToNode, node) == 0x000000, "Member 'CoreArchiveQuestMapWidget_BindToNode::node' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.BindToPath
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestMapWidget_BindToPath final
{
public:
	class UCoreArchiveQuestPathWidget*            path;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_BindToPath) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_BindToPath");
static_assert(sizeof(CoreArchiveQuestMapWidget_BindToPath) == 0x000008, "Wrong size on CoreArchiveQuestMapWidget_BindToPath");
static_assert(offsetof(CoreArchiveQuestMapWidget_BindToPath, path) == 0x000000, "Member 'CoreArchiveQuestMapWidget_BindToPath::path' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodeClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestMapWidget_OnNodeClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_OnNodeClicked) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_OnNodeClicked");
static_assert(sizeof(CoreArchiveQuestMapWidget_OnNodeClicked) == 0x000008, "Wrong size on CoreArchiveQuestMapWidget_OnNodeClicked");
static_assert(offsetof(CoreArchiveQuestMapWidget_OnNodeClicked, buttonTarget) == 0x000000, "Member 'CoreArchiveQuestMapWidget_OnNodeClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodeHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestMapWidget_OnNodeHovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_OnNodeHovered) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_OnNodeHovered");
static_assert(sizeof(CoreArchiveQuestMapWidget_OnNodeHovered) == 0x000008, "Wrong size on CoreArchiveQuestMapWidget_OnNodeHovered");
static_assert(offsetof(CoreArchiveQuestMapWidget_OnNodeHovered, buttonTarget) == 0x000000, "Member 'CoreArchiveQuestMapWidget_OnNodeHovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodeUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestMapWidget_OnNodeUnhovered final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_OnNodeUnhovered) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_OnNodeUnhovered");
static_assert(sizeof(CoreArchiveQuestMapWidget_OnNodeUnhovered) == 0x000008, "Wrong size on CoreArchiveQuestMapWidget_OnNodeUnhovered");
static_assert(offsetof(CoreArchiveQuestMapWidget_OnNodeUnhovered, buttonTarget) == 0x000000, "Member 'CoreArchiveQuestMapWidget_OnNodeUnhovered::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.SetupNode
// 0x00F0 (0x00F0 - 0x0000)
struct CoreArchiveQuestMapWidget_SetupNode final
{
public:
	struct FArchiveNodeGraphViewData              nodeData;                                          // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_SetupNode) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_SetupNode");
static_assert(sizeof(CoreArchiveQuestMapWidget_SetupNode) == 0x0000F0, "Wrong size on CoreArchiveQuestMapWidget_SetupNode");
static_assert(offsetof(CoreArchiveQuestMapWidget_SetupNode, nodeData) == 0x000000, "Member 'CoreArchiveQuestMapWidget_SetupNode::nodeData' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.SetupPath
// 0x002C (0x002C - 0x0000)
struct CoreArchiveQuestMapWidget_SetupPath final
{
public:
	struct FArchiveMapPathViewData                pathData;                                          // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_SetupPath) == 0x000004, "Wrong alignment on CoreArchiveQuestMapWidget_SetupPath");
static_assert(sizeof(CoreArchiveQuestMapWidget_SetupPath) == 0x00002C, "Wrong size on CoreArchiveQuestMapWidget_SetupPath");
static_assert(offsetof(CoreArchiveQuestMapWidget_SetupPath, pathData) == 0x000000, "Member 'CoreArchiveQuestMapWidget_SetupPath::pathData' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.UnbindFromNode
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestMapWidget_UnbindFromNode final
{
public:
	class UCoreArchiveQuestNodeWidget*            node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_UnbindFromNode) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_UnbindFromNode");
static_assert(sizeof(CoreArchiveQuestMapWidget_UnbindFromNode) == 0x000008, "Wrong size on CoreArchiveQuestMapWidget_UnbindFromNode");
static_assert(offsetof(CoreArchiveQuestMapWidget_UnbindFromNode, node) == 0x000000, "Member 'CoreArchiveQuestMapWidget_UnbindFromNode::node' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.UnbindFromPath
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestMapWidget_UnbindFromPath final
{
public:
	class UCoreArchiveQuestPathWidget*            path;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestMapWidget_UnbindFromPath) == 0x000008, "Wrong alignment on CoreArchiveQuestMapWidget_UnbindFromPath");
static_assert(sizeof(CoreArchiveQuestMapWidget_UnbindFromPath) == 0x000008, "Wrong size on CoreArchiveQuestMapWidget_UnbindFromPath");
static_assert(offsetof(CoreArchiveQuestMapWidget_UnbindFromPath, path) == 0x000000, "Member 'CoreArchiveQuestMapWidget_UnbindFromPath::path' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.IntermediatePathMove
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestEditorWidget_IntermediatePathMove final
{
public:
	struct FVector2D                              position;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_IntermediatePathMove) == 0x000004, "Wrong alignment on CoreArchiveQuestEditorWidget_IntermediatePathMove");
static_assert(sizeof(CoreArchiveQuestEditorWidget_IntermediatePathMove) == 0x000008, "Wrong size on CoreArchiveQuestEditorWidget_IntermediatePathMove");
static_assert(offsetof(CoreArchiveQuestEditorWidget_IntermediatePathMove, position) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_IntermediatePathMove::position' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.NodeDragged
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestEditorWidget_NodeDragged final
{
public:
	struct FVector2D                              position;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_NodeDragged) == 0x000004, "Wrong alignment on CoreArchiveQuestEditorWidget_NodeDragged");
static_assert(sizeof(CoreArchiveQuestEditorWidget_NodeDragged) == 0x000008, "Wrong size on CoreArchiveQuestEditorWidget_NodeDragged");
static_assert(offsetof(CoreArchiveQuestEditorWidget_NodeDragged, position) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_NodeDragged::position' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnGridTileHeightPercentChanged
// 0x0018 (0x0018 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnGridTileHeightPercentChanged final
{
public:
	class FText                                   text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnGridTileHeightPercentChanged) == 0x000008, "Wrong alignment on CoreArchiveQuestEditorWidget_OnGridTileHeightPercentChanged");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnGridTileHeightPercentChanged) == 0x000018, "Wrong size on CoreArchiveQuestEditorWidget_OnGridTileHeightPercentChanged");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnGridTileHeightPercentChanged, text) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnGridTileHeightPercentChanged::text' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnGridTileHeightPixelChanged
// 0x0018 (0x0018 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnGridTileHeightPixelChanged final
{
public:
	class FText                                   text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnGridTileHeightPixelChanged) == 0x000008, "Wrong alignment on CoreArchiveQuestEditorWidget_OnGridTileHeightPixelChanged");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnGridTileHeightPixelChanged) == 0x000018, "Wrong size on CoreArchiveQuestEditorWidget_OnGridTileHeightPixelChanged");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnGridTileHeightPixelChanged, text) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnGridTileHeightPixelChanged::text' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnGridTileWidthPercentChanged
// 0x0018 (0x0018 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnGridTileWidthPercentChanged final
{
public:
	class FText                                   text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnGridTileWidthPercentChanged) == 0x000008, "Wrong alignment on CoreArchiveQuestEditorWidget_OnGridTileWidthPercentChanged");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnGridTileWidthPercentChanged) == 0x000018, "Wrong size on CoreArchiveQuestEditorWidget_OnGridTileWidthPercentChanged");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnGridTileWidthPercentChanged, text) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnGridTileWidthPercentChanged::text' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnGridTileWidthPixelChanged
// 0x0018 (0x0018 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnGridTileWidthPixelChanged final
{
public:
	class FText                                   text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnGridTileWidthPixelChanged) == 0x000008, "Wrong alignment on CoreArchiveQuestEditorWidget_OnGridTileWidthPixelChanged");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnGridTileWidthPixelChanged) == 0x000018, "Wrong size on CoreArchiveQuestEditorWidget_OnGridTileWidthPixelChanged");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnGridTileWidthPixelChanged, text) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnGridTileWidthPixelChanged::text' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnGridVisbilityChecked
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnGridVisbilityChecked final
{
public:
	bool                                          checked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnGridVisbilityChecked) == 0x000001, "Wrong alignment on CoreArchiveQuestEditorWidget_OnGridVisbilityChecked");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnGridVisbilityChecked) == 0x000001, "Wrong size on CoreArchiveQuestEditorWidget_OnGridVisbilityChecked");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnGridVisbilityChecked, checked) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnGridVisbilityChecked::checked' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnLinkNodesModeChecked
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnLinkNodesModeChecked final
{
public:
	bool                                          checked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnLinkNodesModeChecked) == 0x000001, "Wrong alignment on CoreArchiveQuestEditorWidget_OnLinkNodesModeChecked");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnLinkNodesModeChecked) == 0x000001, "Wrong size on CoreArchiveQuestEditorWidget_OnLinkNodesModeChecked");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnLinkNodesModeChecked, checked) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnLinkNodesModeChecked::checked' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnMoveNodesModeChecked
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnMoveNodesModeChecked final
{
public:
	bool                                          checked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnMoveNodesModeChecked) == 0x000001, "Wrong alignment on CoreArchiveQuestEditorWidget_OnMoveNodesModeChecked");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnMoveNodesModeChecked) == 0x000001, "Wrong size on CoreArchiveQuestEditorWidget_OnMoveNodesModeChecked");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnMoveNodesModeChecked, checked) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnMoveNodesModeChecked::checked' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeBeginDrag
// 0x000C (0x000C - 0x0000)
struct CoreArchiveQuestEditorWidget_OnNodeBeginDrag final
{
public:
	class FName                                   id;                                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnNodeBeginDrag) == 0x000004, "Wrong alignment on CoreArchiveQuestEditorWidget_OnNodeBeginDrag");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnNodeBeginDrag) == 0x00000C, "Wrong size on CoreArchiveQuestEditorWidget_OnNodeBeginDrag");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnNodeBeginDrag, id) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnNodeBeginDrag::id' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeSubmitClick
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnNodeSubmitClick final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnNodeSubmitClick) == 0x000008, "Wrong alignment on CoreArchiveQuestEditorWidget_OnNodeSubmitClick");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnNodeSubmitClick) == 0x000008, "Wrong size on CoreArchiveQuestEditorWidget_OnNodeSubmitClick");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnNodeSubmitClick, buttonTarget) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnNodeSubmitClick::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeXPercentChanged
// 0x0018 (0x0018 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnNodeXPercentChanged final
{
public:
	class FText                                   text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnNodeXPercentChanged) == 0x000008, "Wrong alignment on CoreArchiveQuestEditorWidget_OnNodeXPercentChanged");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnNodeXPercentChanged) == 0x000018, "Wrong size on CoreArchiveQuestEditorWidget_OnNodeXPercentChanged");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnNodeXPercentChanged, text) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnNodeXPercentChanged::text' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeXPixelChanged
// 0x0018 (0x0018 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnNodeXPixelChanged final
{
public:
	class FText                                   text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnNodeXPixelChanged) == 0x000008, "Wrong alignment on CoreArchiveQuestEditorWidget_OnNodeXPixelChanged");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnNodeXPixelChanged) == 0x000018, "Wrong size on CoreArchiveQuestEditorWidget_OnNodeXPixelChanged");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnNodeXPixelChanged, text) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnNodeXPixelChanged::text' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeYPercentChanged
// 0x0018 (0x0018 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnNodeYPercentChanged final
{
public:
	class FText                                   text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnNodeYPercentChanged) == 0x000008, "Wrong alignment on CoreArchiveQuestEditorWidget_OnNodeYPercentChanged");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnNodeYPercentChanged) == 0x000018, "Wrong size on CoreArchiveQuestEditorWidget_OnNodeYPercentChanged");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnNodeYPercentChanged, text) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnNodeYPercentChanged::text' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeYPixelChanged
// 0x0018 (0x0018 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnNodeYPixelChanged final
{
public:
	class FText                                   text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnNodeYPixelChanged) == 0x000008, "Wrong alignment on CoreArchiveQuestEditorWidget_OnNodeYPixelChanged");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnNodeYPixelChanged) == 0x000018, "Wrong size on CoreArchiveQuestEditorWidget_OnNodeYPixelChanged");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnNodeYPixelChanged, text) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnNodeYPixelChanged::text' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnPathClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnPathClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnPathClicked) == 0x000008, "Wrong alignment on CoreArchiveQuestEditorWidget_OnPathClicked");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnPathClicked) == 0x000008, "Wrong size on CoreArchiveQuestEditorWidget_OnPathClicked");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnPathClicked, buttonTarget) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnPathClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnRefreshGridClick
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnRefreshGridClick final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnRefreshGridClick) == 0x000008, "Wrong alignment on CoreArchiveQuestEditorWidget_OnRefreshGridClick");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnRefreshGridClick) == 0x000008, "Wrong size on CoreArchiveQuestEditorWidget_OnRefreshGridClick");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnRefreshGridClick, buttonTarget) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnRefreshGridClick::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnSaveGraphClick
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnSaveGraphClick final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnSaveGraphClick) == 0x000008, "Wrong alignment on CoreArchiveQuestEditorWidget_OnSaveGraphClick");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnSaveGraphClick) == 0x000008, "Wrong size on CoreArchiveQuestEditorWidget_OnSaveGraphClick");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnSaveGraphClick, buttonTarget) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnSaveGraphClick::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnSnapGridChecked
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestEditorWidget_OnSnapGridChecked final
{
public:
	bool                                          checked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_OnSnapGridChecked) == 0x000001, "Wrong alignment on CoreArchiveQuestEditorWidget_OnSnapGridChecked");
static_assert(sizeof(CoreArchiveQuestEditorWidget_OnSnapGridChecked) == 0x000001, "Wrong size on CoreArchiveQuestEditorWidget_OnSnapGridChecked");
static_assert(offsetof(CoreArchiveQuestEditorWidget_OnSnapGridChecked, checked) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_OnSnapGridChecked::checked' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.SetGridLinesArray
// 0x0020 (0x0020 - 0x0000)
struct CoreArchiveQuestEditorWidget_SetGridLinesArray final
{
public:
	TArray<struct FLinePair>                      gridArrayVertical;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FLinePair>                      gridArrayHorizontal;                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_SetGridLinesArray) == 0x000008, "Wrong alignment on CoreArchiveQuestEditorWidget_SetGridLinesArray");
static_assert(sizeof(CoreArchiveQuestEditorWidget_SetGridLinesArray) == 0x000020, "Wrong size on CoreArchiveQuestEditorWidget_SetGridLinesArray");
static_assert(offsetof(CoreArchiveQuestEditorWidget_SetGridLinesArray, gridArrayVertical) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_SetGridLinesArray::gridArrayVertical' has a wrong offset!");
static_assert(offsetof(CoreArchiveQuestEditorWidget_SetGridLinesArray, gridArrayHorizontal) == 0x000010, "Member 'CoreArchiveQuestEditorWidget_SetGridLinesArray::gridArrayHorizontal' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.SetHighlightedGridLines
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveQuestEditorWidget_SetHighlightedGridLines final
{
public:
	int32                                         verticalIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         horizontalIndex;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestEditorWidget_SetHighlightedGridLines) == 0x000004, "Wrong alignment on CoreArchiveQuestEditorWidget_SetHighlightedGridLines");
static_assert(sizeof(CoreArchiveQuestEditorWidget_SetHighlightedGridLines) == 0x000008, "Wrong size on CoreArchiveQuestEditorWidget_SetHighlightedGridLines");
static_assert(offsetof(CoreArchiveQuestEditorWidget_SetHighlightedGridLines, verticalIndex) == 0x000000, "Member 'CoreArchiveQuestEditorWidget_SetHighlightedGridLines::verticalIndex' has a wrong offset!");
static_assert(offsetof(CoreArchiveQuestEditorWidget_SetHighlightedGridLines, horizontalIndex) == 0x000004, "Member 'CoreArchiveQuestEditorWidget_SetHighlightedGridLines::horizontalIndex' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.HandleStatusChange
// 0x0002 (0x0002 - 0x0000)
struct CoreArchiveQuestNodeWidget_HandleStatusChange final
{
public:
	EStoryNodeState                               prevStatus;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStoryNodeState                               currentStatus;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_HandleStatusChange) == 0x000001, "Wrong alignment on CoreArchiveQuestNodeWidget_HandleStatusChange");
static_assert(sizeof(CoreArchiveQuestNodeWidget_HandleStatusChange) == 0x000002, "Wrong size on CoreArchiveQuestNodeWidget_HandleStatusChange");
static_assert(offsetof(CoreArchiveQuestNodeWidget_HandleStatusChange, prevStatus) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_HandleStatusChange::prevStatus' has a wrong offset!");
static_assert(offsetof(CoreArchiveQuestNodeWidget_HandleStatusChange, currentStatus) == 0x000001, "Member 'CoreArchiveQuestNodeWidget_HandleStatusChange::currentStatus' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.InitNode
// 0x00D0 (0x00D0 - 0x0000)
struct CoreArchiveQuestNodeWidget_InitNode final
{
public:
	class FName                                   nodeId;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArchiveNodeViewData                   data;                                              // 0x0010(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          isChallengeReminderNode;                           // 0x00C8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveQuestNodeWidget_InitNode) == 0x000008, "Wrong alignment on CoreArchiveQuestNodeWidget_InitNode");
static_assert(sizeof(CoreArchiveQuestNodeWidget_InitNode) == 0x0000D0, "Wrong size on CoreArchiveQuestNodeWidget_InitNode");
static_assert(offsetof(CoreArchiveQuestNodeWidget_InitNode, nodeId) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_InitNode::nodeId' has a wrong offset!");
static_assert(offsetof(CoreArchiveQuestNodeWidget_InitNode, data) == 0x000010, "Member 'CoreArchiveQuestNodeWidget_InitNode::data' has a wrong offset!");
static_assert(offsetof(CoreArchiveQuestNodeWidget_InitNode, isChallengeReminderNode) == 0x0000C8, "Member 'CoreArchiveQuestNodeWidget_InitNode::isChallengeReminderNode' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.OnStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestNodeWidget_OnStatusChanged final
{
public:
	ENodeStatusChange                             nodeStatusChange;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_OnStatusChanged) == 0x000001, "Wrong alignment on CoreArchiveQuestNodeWidget_OnStatusChanged");
static_assert(sizeof(CoreArchiveQuestNodeWidget_OnStatusChanged) == 0x000001, "Wrong size on CoreArchiveQuestNodeWidget_OnStatusChanged");
static_assert(offsetof(CoreArchiveQuestNodeWidget_OnStatusChanged, nodeStatusChange) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_OnStatusChanged::nodeStatusChange' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.SetRewardRarity
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestNodeWidget_SetRewardRarity final
{
public:
	EItemRarity                                   rarity;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_SetRewardRarity) == 0x000001, "Wrong alignment on CoreArchiveQuestNodeWidget_SetRewardRarity");
static_assert(sizeof(CoreArchiveQuestNodeWidget_SetRewardRarity) == 0x000001, "Wrong size on CoreArchiveQuestNodeWidget_SetRewardRarity");
static_assert(offsetof(CoreArchiveQuestNodeWidget_SetRewardRarity, rarity) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_SetRewardRarity::rarity' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.UpdateNode
// 0x00B8 (0x00B8 - 0x0000)
struct CoreArchiveQuestNodeWidget_UpdateNode final
{
public:
	struct FArchiveNodeViewData                   data;                                              // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_UpdateNode) == 0x000008, "Wrong alignment on CoreArchiveQuestNodeWidget_UpdateNode");
static_assert(sizeof(CoreArchiveQuestNodeWidget_UpdateNode) == 0x0000B8, "Wrong size on CoreArchiveQuestNodeWidget_UpdateNode");
static_assert(offsetof(CoreArchiveQuestNodeWidget_UpdateNode, data) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_UpdateNode::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.UpdateStoryIndicatorOpacity
// 0x0002 (0x0002 - 0x0000)
struct CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity final
{
public:
	bool                                          isImageReward;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isCompleted;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity) == 0x000001, "Wrong alignment on CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity");
static_assert(sizeof(CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity) == 0x000002, "Wrong size on CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity");
static_assert(offsetof(CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity, isImageReward) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity::isImageReward' has a wrong offset!");
static_assert(offsetof(CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity, isCompleted) == 0x000001, "Member 'CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity::isCompleted' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.IsSelectableNode
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestNodeWidget_IsSelectableNode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_IsSelectableNode) == 0x000001, "Wrong alignment on CoreArchiveQuestNodeWidget_IsSelectableNode");
static_assert(sizeof(CoreArchiveQuestNodeWidget_IsSelectableNode) == 0x000001, "Wrong size on CoreArchiveQuestNodeWidget_IsSelectableNode");
static_assert(offsetof(CoreArchiveQuestNodeWidget_IsSelectableNode, ReturnValue) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_IsSelectableNode::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.IsValidNode
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestNodeWidget_IsValidNode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_IsValidNode) == 0x000001, "Wrong alignment on CoreArchiveQuestNodeWidget_IsValidNode");
static_assert(sizeof(CoreArchiveQuestNodeWidget_IsValidNode) == 0x000001, "Wrong size on CoreArchiveQuestNodeWidget_IsValidNode");
static_assert(offsetof(CoreArchiveQuestNodeWidget_IsValidNode, ReturnValue) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_IsValidNode::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.NeedsChallengeReminderHoverAnimation
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation) == 0x000001, "Wrong alignment on CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation");
static_assert(sizeof(CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation) == 0x000001, "Wrong size on CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation");
static_assert(offsetof(CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation, ReturnValue) == 0x000000, "Member 'CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.InitPath
// 0x002C (0x002C - 0x0000)
struct CoreArchiveQuestPathWidget_InitPath final
{
public:
	struct FArchiveMapPathViewData                data;                                              // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestPathWidget_InitPath) == 0x000004, "Wrong alignment on CoreArchiveQuestPathWidget_InitPath");
static_assert(sizeof(CoreArchiveQuestPathWidget_InitPath) == 0x00002C, "Wrong size on CoreArchiveQuestPathWidget_InitPath");
static_assert(offsetof(CoreArchiveQuestPathWidget_InitPath, data) == 0x000000, "Member 'CoreArchiveQuestPathWidget_InitPath::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.SetVisualState
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveQuestPathWidget_SetVisualState final
{
public:
	EArchivePathStatus                            pathStatus;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestPathWidget_SetVisualState) == 0x000001, "Wrong alignment on CoreArchiveQuestPathWidget_SetVisualState");
static_assert(sizeof(CoreArchiveQuestPathWidget_SetVisualState) == 0x000001, "Wrong size on CoreArchiveQuestPathWidget_SetVisualState");
static_assert(offsetof(CoreArchiveQuestPathWidget_SetVisualState, pathStatus) == 0x000000, "Member 'CoreArchiveQuestPathWidget_SetVisualState::pathStatus' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.UpdatePath
// 0x002C (0x002C - 0x0000)
struct CoreArchiveQuestPathWidget_UpdatePath final
{
public:
	struct FArchiveMapPathViewData                data;                                              // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveQuestPathWidget_UpdatePath) == 0x000004, "Wrong alignment on CoreArchiveQuestPathWidget_UpdatePath");
static_assert(sizeof(CoreArchiveQuestPathWidget_UpdatePath) == 0x00002C, "Wrong size on CoreArchiveQuestPathWidget_UpdatePath");
static_assert(offsetof(CoreArchiveQuestPathWidget_UpdatePath, data) == 0x000000, "Member 'CoreArchiveQuestPathWidget_UpdatePath::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftTierItem.OnRewardClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveRiftTierItem_OnRewardClicked final
{
public:
	class UCoreButtonWidget*                      button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftTierItem_OnRewardClicked) == 0x000008, "Wrong alignment on CoreArchiveRiftTierItem_OnRewardClicked");
static_assert(sizeof(CoreArchiveRiftTierItem_OnRewardClicked) == 0x000008, "Wrong size on CoreArchiveRiftTierItem_OnRewardClicked");
static_assert(offsetof(CoreArchiveRiftTierItem_OnRewardClicked, button) == 0x000000, "Member 'CoreArchiveRiftTierItem_OnRewardClicked::button' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftTierItem.PlayUnlockanimation
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveRiftTierItem_PlayUnlockanimation final
{
public:
	bool                                          isPremiumUnlocked;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         delay;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftTierItem_PlayUnlockanimation) == 0x000004, "Wrong alignment on CoreArchiveRiftTierItem_PlayUnlockanimation");
static_assert(sizeof(CoreArchiveRiftTierItem_PlayUnlockanimation) == 0x000008, "Wrong size on CoreArchiveRiftTierItem_PlayUnlockanimation");
static_assert(offsetof(CoreArchiveRiftTierItem_PlayUnlockanimation, isPremiumUnlocked) == 0x000000, "Member 'CoreArchiveRiftTierItem_PlayUnlockanimation::isPremiumUnlocked' has a wrong offset!");
static_assert(offsetof(CoreArchiveRiftTierItem_PlayUnlockanimation, delay) == 0x000004, "Member 'CoreArchiveRiftTierItem_PlayUnlockanimation::delay' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftTierItem.SetGenericData
// 0x0030 (0x0030 - 0x0000)
struct CoreArchiveRiftTierItem_SetGenericData final
{
public:
	struct FArchiveRiftTierRewardsViewData        data;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftTierItem_SetGenericData) == 0x000008, "Wrong alignment on CoreArchiveRiftTierItem_SetGenericData");
static_assert(sizeof(CoreArchiveRiftTierItem_SetGenericData) == 0x000030, "Wrong size on CoreArchiveRiftTierItem_SetGenericData");
static_assert(offsetof(CoreArchiveRiftTierItem_SetGenericData, data) == 0x000000, "Member 'CoreArchiveRiftTierItem_SetGenericData::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftTierItem.SetLockedState
// 0x0002 (0x0002 - 0x0000)
struct CoreArchiveRiftTierItem_SetLockedState final
{
public:
	bool                                          isLocked;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hasPremium;                                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftTierItem_SetLockedState) == 0x000001, "Wrong alignment on CoreArchiveRiftTierItem_SetLockedState");
static_assert(sizeof(CoreArchiveRiftTierItem_SetLockedState) == 0x000002, "Wrong size on CoreArchiveRiftTierItem_SetLockedState");
static_assert(offsetof(CoreArchiveRiftTierItem_SetLockedState, isLocked) == 0x000000, "Member 'CoreArchiveRiftTierItem_SetLockedState::isLocked' has a wrong offset!");
static_assert(offsetof(CoreArchiveRiftTierItem_SetLockedState, hasPremium) == 0x000001, "Member 'CoreArchiveRiftTierItem_SetLockedState::hasPremium' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftWidget.DisplayPage
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveRiftWidget_DisplayPage final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftWidget_DisplayPage) == 0x000008, "Wrong alignment on CoreArchiveRiftWidget_DisplayPage");
static_assert(sizeof(CoreArchiveRiftWidget_DisplayPage) == 0x000008, "Wrong size on CoreArchiveRiftWidget_DisplayPage");
static_assert(offsetof(CoreArchiveRiftWidget_DisplayPage, tween) == 0x000000, "Member 'CoreArchiveRiftWidget_DisplayPage::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnOutfitButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveRiftWidget_OnOutfitButtonClicked final
{
public:
	class UCoreButtonWidget*                      button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftWidget_OnOutfitButtonClicked) == 0x000008, "Wrong alignment on CoreArchiveRiftWidget_OnOutfitButtonClicked");
static_assert(sizeof(CoreArchiveRiftWidget_OnOutfitButtonClicked) == 0x000008, "Wrong size on CoreArchiveRiftWidget_OnOutfitButtonClicked");
static_assert(offsetof(CoreArchiveRiftWidget_OnOutfitButtonClicked, button) == 0x000000, "Member 'CoreArchiveRiftWidget_OnOutfitButtonClicked::button' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnOutfitButtonHovered
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveRiftWidget_OnOutfitButtonHovered final
{
public:
	class UCoreButtonWidget*                      button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftWidget_OnOutfitButtonHovered) == 0x000008, "Wrong alignment on CoreArchiveRiftWidget_OnOutfitButtonHovered");
static_assert(sizeof(CoreArchiveRiftWidget_OnOutfitButtonHovered) == 0x000008, "Wrong size on CoreArchiveRiftWidget_OnOutfitButtonHovered");
static_assert(offsetof(CoreArchiveRiftWidget_OnOutfitButtonHovered, button) == 0x000000, "Member 'CoreArchiveRiftWidget_OnOutfitButtonHovered::button' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnOutfitButtonUnhovered
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveRiftWidget_OnOutfitButtonUnhovered final
{
public:
	class UCoreButtonWidget*                      button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftWidget_OnOutfitButtonUnhovered) == 0x000008, "Wrong alignment on CoreArchiveRiftWidget_OnOutfitButtonUnhovered");
static_assert(sizeof(CoreArchiveRiftWidget_OnOutfitButtonUnhovered) == 0x000008, "Wrong size on CoreArchiveRiftWidget_OnOutfitButtonUnhovered");
static_assert(offsetof(CoreArchiveRiftWidget_OnOutfitButtonUnhovered, button) == 0x000000, "Member 'CoreArchiveRiftWidget_OnOutfitButtonUnhovered::button' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnRewardItemClicked
// 0x0018 (0x0018 - 0x0000)
struct CoreArchiveRiftWidget_OnRewardItemClicked final
{
public:
	int32                                         tier;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreButtonWidget*                      button;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isPremium;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         index;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftWidget_OnRewardItemClicked) == 0x000008, "Wrong alignment on CoreArchiveRiftWidget_OnRewardItemClicked");
static_assert(sizeof(CoreArchiveRiftWidget_OnRewardItemClicked) == 0x000018, "Wrong size on CoreArchiveRiftWidget_OnRewardItemClicked");
static_assert(offsetof(CoreArchiveRiftWidget_OnRewardItemClicked, tier) == 0x000000, "Member 'CoreArchiveRiftWidget_OnRewardItemClicked::tier' has a wrong offset!");
static_assert(offsetof(CoreArchiveRiftWidget_OnRewardItemClicked, button) == 0x000008, "Member 'CoreArchiveRiftWidget_OnRewardItemClicked::button' has a wrong offset!");
static_assert(offsetof(CoreArchiveRiftWidget_OnRewardItemClicked, isPremium) == 0x000010, "Member 'CoreArchiveRiftWidget_OnRewardItemClicked::isPremium' has a wrong offset!");
static_assert(offsetof(CoreArchiveRiftWidget_OnRewardItemClicked, index) == 0x000014, "Member 'CoreArchiveRiftWidget_OnRewardItemClicked::index' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftWidget.SetPaginationVisuals
// 0x0020 (0x0020 - 0x0000)
struct CoreArchiveRiftWidget_SetPaginationVisuals final
{
public:
	bool                                          showBonusTierHighlight;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   bonusTierTooltipText;                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftWidget_SetPaginationVisuals) == 0x000008, "Wrong alignment on CoreArchiveRiftWidget_SetPaginationVisuals");
static_assert(sizeof(CoreArchiveRiftWidget_SetPaginationVisuals) == 0x000020, "Wrong size on CoreArchiveRiftWidget_SetPaginationVisuals");
static_assert(offsetof(CoreArchiveRiftWidget_SetPaginationVisuals, showBonusTierHighlight) == 0x000000, "Member 'CoreArchiveRiftWidget_SetPaginationVisuals::showBonusTierHighlight' has a wrong offset!");
static_assert(offsetof(CoreArchiveRiftWidget_SetPaginationVisuals, bonusTierTooltipText) == 0x000008, "Member 'CoreArchiveRiftWidget_SetPaginationVisuals::bonusTierTooltipText' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftWidget.SetTierVisuals
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveRiftWidget_SetTierVisuals final
{
public:
	ETierType                                     tierType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftWidget_SetTierVisuals) == 0x000001, "Wrong alignment on CoreArchiveRiftWidget_SetTierVisuals");
static_assert(sizeof(CoreArchiveRiftWidget_SetTierVisuals) == 0x000001, "Wrong size on CoreArchiveRiftWidget_SetTierVisuals");
static_assert(offsetof(CoreArchiveRiftWidget_SetTierVisuals, tierType) == 0x000000, "Member 'CoreArchiveRiftWidget_SetTierVisuals::tierType' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveRiftWidget.SetVisualData
// 0x0020 (0x0020 - 0x0000)
struct CoreArchiveRiftWidget_SetVisualData final
{
public:
	struct FArchivesRiftGenericViewData           data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveRiftWidget_SetVisualData) == 0x000008, "Wrong alignment on CoreArchiveRiftWidget_SetVisualData");
static_assert(sizeof(CoreArchiveRiftWidget_SetVisualData) == 0x000020, "Wrong size on CoreArchiveRiftWidget_SetVisualData");
static_assert(offsetof(CoreArchiveRiftWidget_SetVisualData, data) == 0x000000, "Member 'CoreArchiveRiftWidget_SetVisualData::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget.SetVisualData
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveTierPurchasePopupWidget_SetVisualData final
{
public:
	const class UArchiveTierPurchasePopupViewData* viewData;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveTierPurchasePopupWidget_SetVisualData) == 0x000008, "Wrong alignment on CoreArchiveTierPurchasePopupWidget_SetVisualData");
static_assert(sizeof(CoreArchiveTierPurchasePopupWidget_SetVisualData) == 0x000008, "Wrong size on CoreArchiveTierPurchasePopupWidget_SetVisualData");
static_assert(offsetof(CoreArchiveTierPurchasePopupWidget_SetVisualData, viewData) == 0x000000, "Member 'CoreArchiveTierPurchasePopupWidget_SetVisualData::viewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveTomeWidget.OnMenuTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveTomeWidget_OnMenuTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveTomeWidget_OnMenuTabSelected) == 0x000008, "Wrong alignment on CoreArchiveTomeWidget_OnMenuTabSelected");
static_assert(sizeof(CoreArchiveTomeWidget_OnMenuTabSelected) == 0x000008, "Wrong size on CoreArchiveTomeWidget_OnMenuTabSelected");
static_assert(offsetof(CoreArchiveTomeWidget_OnMenuTabSelected, selectedButton) == 0x000000, "Member 'CoreArchiveTomeWidget_OnMenuTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.OnButtonSelectedAgain
// 0x0008 (0x0008 - 0x0000)
struct CoreButtonSelector_OnButtonSelectedAgain final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonSelector_OnButtonSelectedAgain) == 0x000008, "Wrong alignment on CoreButtonSelector_OnButtonSelectedAgain");
static_assert(sizeof(CoreButtonSelector_OnButtonSelectedAgain) == 0x000008, "Wrong size on CoreButtonSelector_OnButtonSelectedAgain");
static_assert(offsetof(CoreButtonSelector_OnButtonSelectedAgain, selectedButton) == 0x000000, "Member 'CoreButtonSelector_OnButtonSelectedAgain::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.OnButtonSelectedChanged
// 0x0010 (0x0010 - 0x0000)
struct CoreButtonSelector_OnButtonSelectedChanged final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSelected;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreButtonSelector_OnButtonSelectedChanged) == 0x000008, "Wrong alignment on CoreButtonSelector_OnButtonSelectedChanged");
static_assert(sizeof(CoreButtonSelector_OnButtonSelectedChanged) == 0x000010, "Wrong size on CoreButtonSelector_OnButtonSelectedChanged");
static_assert(offsetof(CoreButtonSelector_OnButtonSelectedChanged, selectedButton) == 0x000000, "Member 'CoreButtonSelector_OnButtonSelectedChanged::selectedButton' has a wrong offset!");
static_assert(offsetof(CoreButtonSelector_OnButtonSelectedChanged, isSelected) == 0x000008, "Member 'CoreButtonSelector_OnButtonSelectedChanged::isSelected' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.Select
// 0x0010 (0x0010 - 0x0000)
struct CoreButtonSelector_Select final
{
public:
	class UCoreSelectableButtonWidget*            buttonToSelect;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          performAction;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreButtonSelector_Select) == 0x000008, "Wrong alignment on CoreButtonSelector_Select");
static_assert(sizeof(CoreButtonSelector_Select) == 0x000010, "Wrong size on CoreButtonSelector_Select");
static_assert(offsetof(CoreButtonSelector_Select, buttonToSelect) == 0x000000, "Member 'CoreButtonSelector_Select::buttonToSelect' has a wrong offset!");
static_assert(offsetof(CoreButtonSelector_Select, performAction) == 0x000008, "Member 'CoreButtonSelector_Select::performAction' has a wrong offset!");
static_assert(offsetof(CoreButtonSelector_Select, ReturnValue) == 0x000009, "Member 'CoreButtonSelector_Select::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.SelectNext
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonSelector_SelectNext final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonSelector_SelectNext) == 0x000001, "Wrong alignment on CoreButtonSelector_SelectNext");
static_assert(sizeof(CoreButtonSelector_SelectNext) == 0x000001, "Wrong size on CoreButtonSelector_SelectNext");
static_assert(offsetof(CoreButtonSelector_SelectNext, ReturnValue) == 0x000000, "Member 'CoreButtonSelector_SelectNext::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.SelectPrevious
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonSelector_SelectPrevious final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonSelector_SelectPrevious) == 0x000001, "Wrong alignment on CoreButtonSelector_SelectPrevious");
static_assert(sizeof(CoreButtonSelector_SelectPrevious) == 0x000001, "Wrong size on CoreButtonSelector_SelectPrevious");
static_assert(offsetof(CoreButtonSelector_SelectPrevious, ReturnValue) == 0x000000, "Member 'CoreButtonSelector_SelectPrevious::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.SetAllEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonSelector_SetAllEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonSelector_SetAllEnabled) == 0x000001, "Wrong alignment on CoreButtonSelector_SetAllEnabled");
static_assert(sizeof(CoreButtonSelector_SetAllEnabled) == 0x000001, "Wrong size on CoreButtonSelector_SetAllEnabled");
static_assert(offsetof(CoreButtonSelector_SetAllEnabled, enabled) == 0x000000, "Member 'CoreButtonSelector_SetAllEnabled::enabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.SetInputsEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonSelector_SetInputsEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonSelector_SetInputsEnabled) == 0x000001, "Wrong alignment on CoreButtonSelector_SetInputsEnabled");
static_assert(sizeof(CoreButtonSelector_SetInputsEnabled) == 0x000001, "Wrong size on CoreButtonSelector_SetInputsEnabled");
static_assert(offsetof(CoreButtonSelector_SetInputsEnabled, enabled) == 0x000000, "Member 'CoreButtonSelector_SetInputsEnabled::enabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreButtonSelector.HasSelection
// 0x0001 (0x0001 - 0x0000)
struct CoreButtonSelector_HasSelection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreButtonSelector_HasSelection) == 0x000001, "Wrong alignment on CoreButtonSelector_HasSelection");
static_assert(sizeof(CoreButtonSelector_HasSelection) == 0x000001, "Wrong size on CoreButtonSelector_HasSelection");
static_assert(offsetof(CoreButtonSelector_HasSelection, ReturnValue) == 0x000000, "Member 'CoreButtonSelector_HasSelection::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.Init
// 0x0010 (0x0010 - 0x0000)
struct CoreTabContainerWidget_Init final
{
public:
	TArray<struct FTabWidgetData>                 tabsData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabContainerWidget_Init) == 0x000008, "Wrong alignment on CoreTabContainerWidget_Init");
static_assert(sizeof(CoreTabContainerWidget_Init) == 0x000010, "Wrong size on CoreTabContainerWidget_Init");
static_assert(offsetof(CoreTabContainerWidget_Init, tabsData) == 0x000000, "Member 'CoreTabContainerWidget_Init::tabsData' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.OnTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreTabContainerWidget_OnTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabContainerWidget_OnTabSelected) == 0x000008, "Wrong alignment on CoreTabContainerWidget_OnTabSelected");
static_assert(sizeof(CoreTabContainerWidget_OnTabSelected) == 0x000008, "Wrong size on CoreTabContainerWidget_OnTabSelected");
static_assert(offsetof(CoreTabContainerWidget_OnTabSelected, selectedButton) == 0x000000, "Member 'CoreTabContainerWidget_OnTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.SetNotificationVisibility
// 0x0008 (0x0008 - 0x0000)
struct CoreTabContainerWidget_SetNotificationVisibility final
{
public:
	int32                                         key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hasNotification;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTabContainerWidget_SetNotificationVisibility) == 0x000004, "Wrong alignment on CoreTabContainerWidget_SetNotificationVisibility");
static_assert(sizeof(CoreTabContainerWidget_SetNotificationVisibility) == 0x000008, "Wrong size on CoreTabContainerWidget_SetNotificationVisibility");
static_assert(offsetof(CoreTabContainerWidget_SetNotificationVisibility, key) == 0x000000, "Member 'CoreTabContainerWidget_SetNotificationVisibility::key' has a wrong offset!");
static_assert(offsetof(CoreTabContainerWidget_SetNotificationVisibility, hasNotification) == 0x000004, "Member 'CoreTabContainerWidget_SetNotificationVisibility::hasNotification' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.SetTabEnabled
// 0x0008 (0x0008 - 0x0000)
struct CoreTabContainerWidget_SetTabEnabled final
{
public:
	int32                                         key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          enabled;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTabContainerWidget_SetTabEnabled) == 0x000004, "Wrong alignment on CoreTabContainerWidget_SetTabEnabled");
static_assert(sizeof(CoreTabContainerWidget_SetTabEnabled) == 0x000008, "Wrong size on CoreTabContainerWidget_SetTabEnabled");
static_assert(offsetof(CoreTabContainerWidget_SetTabEnabled, key) == 0x000000, "Member 'CoreTabContainerWidget_SetTabEnabled::key' has a wrong offset!");
static_assert(offsetof(CoreTabContainerWidget_SetTabEnabled, enabled) == 0x000004, "Member 'CoreTabContainerWidget_SetTabEnabled::enabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.SetTabVisible
// 0x0008 (0x0008 - 0x0000)
struct CoreTabContainerWidget_SetTabVisible final
{
public:
	int32                                         key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          visible;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreTabContainerWidget_SetTabVisible) == 0x000004, "Wrong alignment on CoreTabContainerWidget_SetTabVisible");
static_assert(sizeof(CoreTabContainerWidget_SetTabVisible) == 0x000008, "Wrong size on CoreTabContainerWidget_SetTabVisible");
static_assert(offsetof(CoreTabContainerWidget_SetTabVisible, key) == 0x000000, "Member 'CoreTabContainerWidget_SetTabVisible::key' has a wrong offset!");
static_assert(offsetof(CoreTabContainerWidget_SetTabVisible, visible) == 0x000004, "Member 'CoreTabContainerWidget_SetTabVisible::visible' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.SetUseControllerTabSwitching
// 0x0001 (0x0001 - 0x0000)
struct CoreTabContainerWidget_SetUseControllerTabSwitching final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabContainerWidget_SetUseControllerTabSwitching) == 0x000001, "Wrong alignment on CoreTabContainerWidget_SetUseControllerTabSwitching");
static_assert(sizeof(CoreTabContainerWidget_SetUseControllerTabSwitching) == 0x000001, "Wrong size on CoreTabContainerWidget_SetUseControllerTabSwitching");
static_assert(offsetof(CoreTabContainerWidget_SetUseControllerTabSwitching, enabled) == 0x000000, "Member 'CoreTabContainerWidget_SetUseControllerTabSwitching::enabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.UpdateBackgroundSkin
// 0x0010 (0x0010 - 0x0000)
struct CoreTabContainerWidget_UpdateBackgroundSkin final
{
public:
	int32                                         key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     skinMaterial;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabContainerWidget_UpdateBackgroundSkin) == 0x000008, "Wrong alignment on CoreTabContainerWidget_UpdateBackgroundSkin");
static_assert(sizeof(CoreTabContainerWidget_UpdateBackgroundSkin) == 0x000010, "Wrong size on CoreTabContainerWidget_UpdateBackgroundSkin");
static_assert(offsetof(CoreTabContainerWidget_UpdateBackgroundSkin, key) == 0x000000, "Member 'CoreTabContainerWidget_UpdateBackgroundSkin::key' has a wrong offset!");
static_assert(offsetof(CoreTabContainerWidget_UpdateBackgroundSkin, skinMaterial) == 0x000008, "Member 'CoreTabContainerWidget_UpdateBackgroundSkin::skinMaterial' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabContainerWidget.GetTab
// 0x0010 (0x0010 - 0x0000)
struct CoreTabContainerWidget_GetTab final
{
public:
	int32                                         key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreTabWidget*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabContainerWidget_GetTab) == 0x000008, "Wrong alignment on CoreTabContainerWidget_GetTab");
static_assert(sizeof(CoreTabContainerWidget_GetTab) == 0x000010, "Wrong size on CoreTabContainerWidget_GetTab");
static_assert(offsetof(CoreTabContainerWidget_GetTab, key) == 0x000000, "Member 'CoreTabContainerWidget_GetTab::key' has a wrong offset!");
static_assert(offsetof(CoreTabContainerWidget_GetTab, ReturnValue) == 0x000008, "Member 'CoreTabContainerWidget_GetTab::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabWidget.HasLabelTooltip
// 0x0001 (0x0001 - 0x0000)
struct CoreTabWidget_HasLabelTooltip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabWidget_HasLabelTooltip) == 0x000001, "Wrong alignment on CoreTabWidget_HasLabelTooltip");
static_assert(sizeof(CoreTabWidget_HasLabelTooltip) == 0x000001, "Wrong size on CoreTabWidget_HasLabelTooltip");
static_assert(offsetof(CoreTabWidget_HasLabelTooltip, ReturnValue) == 0x000000, "Member 'CoreTabWidget_HasLabelTooltip::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabWidget.SetIconSoftTexture
// 0x0038 (0x0038 - 0x0000)
struct CoreTabWidget_SetIconSoftTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              iconTexture;                                       // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              forcedIconSize;                                    // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabWidget_SetIconSoftTexture) == 0x000008, "Wrong alignment on CoreTabWidget_SetIconSoftTexture");
static_assert(sizeof(CoreTabWidget_SetIconSoftTexture) == 0x000038, "Wrong size on CoreTabWidget_SetIconSoftTexture");
static_assert(offsetof(CoreTabWidget_SetIconSoftTexture, iconTexture) == 0x000000, "Member 'CoreTabWidget_SetIconSoftTexture::iconTexture' has a wrong offset!");
static_assert(offsetof(CoreTabWidget_SetIconSoftTexture, forcedIconSize) == 0x000030, "Member 'CoreTabWidget_SetIconSoftTexture::forcedIconSize' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabWidget.SetIconTexture
// 0x0010 (0x0010 - 0x0000)
struct CoreTabWidget_SetIconTexture final
{
public:
	class UTexture2D*                             iconTexture;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              forcedIconSize;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabWidget_SetIconTexture) == 0x000008, "Wrong alignment on CoreTabWidget_SetIconTexture");
static_assert(sizeof(CoreTabWidget_SetIconTexture) == 0x000010, "Wrong size on CoreTabWidget_SetIconTexture");
static_assert(offsetof(CoreTabWidget_SetIconTexture, iconTexture) == 0x000000, "Member 'CoreTabWidget_SetIconTexture::iconTexture' has a wrong offset!");
static_assert(offsetof(CoreTabWidget_SetIconTexture, forcedIconSize) == 0x000008, "Member 'CoreTabWidget_SetIconTexture::forcedIconSize' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabWidget.SetNotificationVisibility
// 0x0001 (0x0001 - 0x0000)
struct CoreTabWidget_SetNotificationVisibility final
{
public:
	bool                                          hasNotification;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabWidget_SetNotificationVisibility) == 0x000001, "Wrong alignment on CoreTabWidget_SetNotificationVisibility");
static_assert(sizeof(CoreTabWidget_SetNotificationVisibility) == 0x000001, "Wrong size on CoreTabWidget_SetNotificationVisibility");
static_assert(offsetof(CoreTabWidget_SetNotificationVisibility, hasNotification) == 0x000000, "Member 'CoreTabWidget_SetNotificationVisibility::hasNotification' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabWidget.GetKey
// 0x0004 (0x0004 - 0x0000)
struct CoreTabWidget_GetKey final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabWidget_GetKey) == 0x000004, "Wrong alignment on CoreTabWidget_GetKey");
static_assert(sizeof(CoreTabWidget_GetKey) == 0x000004, "Wrong size on CoreTabWidget_GetKey");
static_assert(offsetof(CoreTabWidget_GetKey, ReturnValue) == 0x000000, "Member 'CoreTabWidget_GetKey::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreTabWidget.GetTabText
// 0x0018 (0x0018 - 0x0000)
struct CoreTabWidget_GetTabText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTabWidget_GetTabText) == 0x000008, "Wrong alignment on CoreTabWidget_GetTabText");
static_assert(sizeof(CoreTabWidget_GetTabText) == 0x000018, "Wrong size on CoreTabWidget_GetTabText");
static_assert(offsetof(CoreTabWidget_GetTabText, ReturnValue) == 0x000000, "Member 'CoreTabWidget_GetTabText::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteButtonWidget.SetData
// 0x0060 (0x0060 - 0x0000)
struct CoreArchiveVignetteButtonWidget_SetData final
{
public:
	struct FArchivesVignetteViewData              vignetteDataList;                                  // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveVignetteButtonWidget_SetData) == 0x000008, "Wrong alignment on CoreArchiveVignetteButtonWidget_SetData");
static_assert(sizeof(CoreArchiveVignetteButtonWidget_SetData) == 0x000060, "Wrong size on CoreArchiveVignetteButtonWidget_SetData");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetData, vignetteDataList) == 0x000000, "Member 'CoreArchiveVignetteButtonWidget_SetData::vignetteDataList' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteButtonWidget.SetVignetteRead
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveVignetteButtonWidget_SetVignetteRead final
{
public:
	bool                                          isRead;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveVignetteButtonWidget_SetVignetteRead) == 0x000001, "Wrong alignment on CoreArchiveVignetteButtonWidget_SetVignetteRead");
static_assert(sizeof(CoreArchiveVignetteButtonWidget_SetVignetteRead) == 0x000001, "Wrong size on CoreArchiveVignetteButtonWidget_SetVignetteRead");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVignetteRead, isRead) == 0x000000, "Member 'CoreArchiveVignetteButtonWidget_SetVignetteRead::isRead' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteButtonWidget.SetVisualData
// 0x0078 (0x0078 - 0x0000)
struct CoreArchiveVignetteButtonWidget_SetVisualData final
{
public:
	class FText                                   vignetteTitle;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   vignetteSubtitle;                                  // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   vignetteProgressText;                              // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          displayProgress;                                   // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         vignetteProgress;                                  // 0x004C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isUnread;                                          // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   unreadIndicatorText;                               // 0x0058(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          showCinematics;                                    // 0x0070(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          lockCinematics;                                    // 0x0071(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveVignetteButtonWidget_SetVisualData) == 0x000008, "Wrong alignment on CoreArchiveVignetteButtonWidget_SetVisualData");
static_assert(sizeof(CoreArchiveVignetteButtonWidget_SetVisualData) == 0x000078, "Wrong size on CoreArchiveVignetteButtonWidget_SetVisualData");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, vignetteTitle) == 0x000000, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::vignetteTitle' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, vignetteSubtitle) == 0x000018, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::vignetteSubtitle' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, vignetteProgressText) == 0x000030, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::vignetteProgressText' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, displayProgress) == 0x000048, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::displayProgress' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, vignetteProgress) == 0x00004C, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::vignetteProgress' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, isUnread) == 0x000050, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::isUnread' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, unreadIndicatorText) == 0x000058, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::unreadIndicatorText' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, showCinematics) == 0x000070, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::showCinematics' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteButtonWidget_SetVisualData, lockCinematics) == 0x000071, "Member 'CoreArchiveVignetteButtonWidget_SetVisualData::lockCinematics' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteCinematicButton.SetIsForceDisabled
// 0x0001 (0x0001 - 0x0000)
struct CoreArchiveVignetteCinematicButton_SetIsForceDisabled final
{
public:
	bool                                          isForceDisabled;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveVignetteCinematicButton_SetIsForceDisabled) == 0x000001, "Wrong alignment on CoreArchiveVignetteCinematicButton_SetIsForceDisabled");
static_assert(sizeof(CoreArchiveVignetteCinematicButton_SetIsForceDisabled) == 0x000001, "Wrong size on CoreArchiveVignetteCinematicButton_SetIsForceDisabled");
static_assert(offsetof(CoreArchiveVignetteCinematicButton_SetIsForceDisabled, isForceDisabled) == 0x000000, "Member 'CoreArchiveVignetteCinematicButton_SetIsForceDisabled::isForceDisabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.SetData
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveVignetteEntryButtonWidget_SetData final
{
public:
	int32                                         entryNumber;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isRead;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isImage;                                           // 0x0005(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveVignetteEntryButtonWidget_SetData) == 0x000004, "Wrong alignment on CoreArchiveVignetteEntryButtonWidget_SetData");
static_assert(sizeof(CoreArchiveVignetteEntryButtonWidget_SetData) == 0x000008, "Wrong size on CoreArchiveVignetteEntryButtonWidget_SetData");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_SetData, entryNumber) == 0x000000, "Member 'CoreArchiveVignetteEntryButtonWidget_SetData::entryNumber' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_SetData, isRead) == 0x000004, "Member 'CoreArchiveVignetteEntryButtonWidget_SetData::isRead' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_SetData, isImage) == 0x000005, "Member 'CoreArchiveVignetteEntryButtonWidget_SetData::isImage' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.SetVisualData
// 0x0028 (0x0028 - 0x0000)
struct CoreArchiveVignetteEntryButtonWidget_SetVisualData final
{
public:
	int32                                         entryNumber;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isRead;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   unreadIndicatorText;                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          isImage;                                           // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreArchiveVignetteEntryButtonWidget_SetVisualData) == 0x000008, "Wrong alignment on CoreArchiveVignetteEntryButtonWidget_SetVisualData");
static_assert(sizeof(CoreArchiveVignetteEntryButtonWidget_SetVisualData) == 0x000028, "Wrong size on CoreArchiveVignetteEntryButtonWidget_SetVisualData");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_SetVisualData, entryNumber) == 0x000000, "Member 'CoreArchiveVignetteEntryButtonWidget_SetVisualData::entryNumber' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_SetVisualData, isRead) == 0x000004, "Member 'CoreArchiveVignetteEntryButtonWidget_SetVisualData::isRead' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_SetVisualData, unreadIndicatorText) == 0x000008, "Member 'CoreArchiveVignetteEntryButtonWidget_SetVisualData::unreadIndicatorText' has a wrong offset!");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_SetVisualData, isImage) == 0x000020, "Member 'CoreArchiveVignetteEntryButtonWidget_SetVisualData::isImage' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.GetEntryNumber
// 0x0004 (0x0004 - 0x0000)
struct CoreArchiveVignetteEntryButtonWidget_GetEntryNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveVignetteEntryButtonWidget_GetEntryNumber) == 0x000004, "Wrong alignment on CoreArchiveVignetteEntryButtonWidget_GetEntryNumber");
static_assert(sizeof(CoreArchiveVignetteEntryButtonWidget_GetEntryNumber) == 0x000004, "Wrong size on CoreArchiveVignetteEntryButtonWidget_GetEntryNumber");
static_assert(offsetof(CoreArchiveVignetteEntryButtonWidget_GetEntryNumber, ReturnValue) == 0x000000, "Member 'CoreArchiveVignetteEntryButtonWidget_GetEntryNumber::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteEntryContainerWidget.OnUnlockComplete
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete) == 0x000008, "Wrong alignment on CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete");
static_assert(sizeof(CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete) == 0x000008, "Wrong size on CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete");
static_assert(offsetof(CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete, tween) == 0x000000, "Member 'CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreArchiveVignetteEntryContainerWidget.OnUnlockProgress
// 0x0008 (0x0008 - 0x0000)
struct CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress) == 0x000008, "Wrong alignment on CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress");
static_assert(sizeof(CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress) == 0x000008, "Wrong size on CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress");
static_assert(offsetof(CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress, tween) == 0x000000, "Member 'CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreBaseHudWidget.ShouldPlayFocusAnimation
// 0x0001 (0x0001 - 0x0000)
struct CoreBaseHudWidget_ShouldPlayFocusAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseHudWidget_ShouldPlayFocusAnimation) == 0x000001, "Wrong alignment on CoreBaseHudWidget_ShouldPlayFocusAnimation");
static_assert(sizeof(CoreBaseHudWidget_ShouldPlayFocusAnimation) == 0x000001, "Wrong size on CoreBaseHudWidget_ShouldPlayFocusAnimation");
static_assert(offsetof(CoreBaseHudWidget_ShouldPlayFocusAnimation, ReturnValue) == 0x000000, "Member 'CoreBaseHudWidget_ShouldPlayFocusAnimation::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.SetSize
// 0x0008 (0x0008 - 0x0000)
struct CoreBinkVideoPlayerWidget_SetSize final
{
public:
	struct FVector2D                              size;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBinkVideoPlayerWidget_SetSize) == 0x000004, "Wrong alignment on CoreBinkVideoPlayerWidget_SetSize");
static_assert(sizeof(CoreBinkVideoPlayerWidget_SetSize) == 0x000008, "Wrong size on CoreBinkVideoPlayerWidget_SetSize");
static_assert(offsetof(CoreBinkVideoPlayerWidget_SetSize, size) == 0x000000, "Member 'CoreBinkVideoPlayerWidget_SetSize::size' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWidget.GetLockedOverlay
// 0x0008 (0x0008 - 0x0000)
struct CoreRewardWidget_GetLockedOverlay final
{
public:
	class UCoreLockedOverlayWidget*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWidget_GetLockedOverlay) == 0x000008, "Wrong alignment on CoreRewardWidget_GetLockedOverlay");
static_assert(sizeof(CoreRewardWidget_GetLockedOverlay) == 0x000008, "Wrong size on CoreRewardWidget_GetLockedOverlay");
static_assert(offsetof(CoreRewardWidget_GetLockedOverlay, ReturnValue) == 0x000000, "Member 'CoreRewardWidget_GetLockedOverlay::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWidget.SetIsLocked
// 0x0002 (0x0002 - 0x0000)
struct CoreRewardWidget_SetIsLocked final
{
public:
	bool                                          isLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useAnimation;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWidget_SetIsLocked) == 0x000001, "Wrong alignment on CoreRewardWidget_SetIsLocked");
static_assert(sizeof(CoreRewardWidget_SetIsLocked) == 0x000002, "Wrong size on CoreRewardWidget_SetIsLocked");
static_assert(offsetof(CoreRewardWidget_SetIsLocked, isLocked) == 0x000000, "Member 'CoreRewardWidget_SetIsLocked::isLocked' has a wrong offset!");
static_assert(offsetof(CoreRewardWidget_SetIsLocked, useAnimation) == 0x000001, "Member 'CoreRewardWidget_SetIsLocked::useAnimation' has a wrong offset!");

// Function DBDUIViewsCore.CoreCharacterRewardWidget.SetData
// 0x00C8 (0x00C8 - 0x0000)
struct CoreCharacterRewardWidget_SetData final
{
public:
	struct FCharacterRewardViewData               characterRewardViewData;                           // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCharacterRewardWidget_SetData) == 0x000008, "Wrong alignment on CoreCharacterRewardWidget_SetData");
static_assert(sizeof(CoreCharacterRewardWidget_SetData) == 0x0000C8, "Wrong size on CoreCharacterRewardWidget_SetData");
static_assert(offsetof(CoreCharacterRewardWidget_SetData, characterRewardViewData) == 0x000000, "Member 'CoreCharacterRewardWidget_SetData::characterRewardViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreCreditsWidget.OnScrollEnd
// 0x0008 (0x0008 - 0x0000)
struct CoreCreditsWidget_OnScrollEnd final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCreditsWidget_OnScrollEnd) == 0x000008, "Wrong alignment on CoreCreditsWidget_OnScrollEnd");
static_assert(sizeof(CoreCreditsWidget_OnScrollEnd) == 0x000008, "Wrong size on CoreCreditsWidget_OnScrollEnd");
static_assert(offsetof(CoreCreditsWidget_OnScrollEnd, tween) == 0x000000, "Member 'CoreCreditsWidget_OnScrollEnd::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyExpirationLabelWidget.SetData
// 0x0020 (0x0020 - 0x0000)
struct CoreCurrencyExpirationLabelWidget_SetData final
{
public:
	struct FCurrencyExpirationLabelViewData       viewData;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyExpirationLabelWidget_SetData) == 0x000008, "Wrong alignment on CoreCurrencyExpirationLabelWidget_SetData");
static_assert(sizeof(CoreCurrencyExpirationLabelWidget_SetData) == 0x000020, "Wrong size on CoreCurrencyExpirationLabelWidget_SetData");
static_assert(offsetof(CoreCurrencyExpirationLabelWidget_SetData, viewData) == 0x000000, "Member 'CoreCurrencyExpirationLabelWidget_SetData::viewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyForTooltipsWidget.SetData
// 0x0128 (0x0128 - 0x0000)
struct CoreCurrencyForTooltipsWidget_SetData final
{
public:
	struct FCurrencyProgressionRewardViewData     currencyRewardViewData;                            // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyForTooltipsWidget_SetData) == 0x000008, "Wrong alignment on CoreCurrencyForTooltipsWidget_SetData");
static_assert(sizeof(CoreCurrencyForTooltipsWidget_SetData) == 0x000128, "Wrong size on CoreCurrencyForTooltipsWidget_SetData");
static_assert(offsetof(CoreCurrencyForTooltipsWidget_SetData, currencyRewardViewData) == 0x000000, "Member 'CoreCurrencyForTooltipsWidget_SetData::currencyRewardViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyLabelWidget.SetData
// 0x0100 (0x0100 - 0x0000)
struct CoreCurrencyLabelWidget_SetData final
{
public:
	struct FCurrencyLabelViewData                 viewData;                                          // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyLabelWidget_SetData) == 0x000008, "Wrong alignment on CoreCurrencyLabelWidget_SetData");
static_assert(sizeof(CoreCurrencyLabelWidget_SetData) == 0x000100, "Wrong size on CoreCurrencyLabelWidget_SetData");
static_assert(offsetof(CoreCurrencyLabelWidget_SetData, viewData) == 0x000000, "Member 'CoreCurrencyLabelWidget_SetData::viewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyLabelWidget.UpdateCurrency
// 0x0008 (0x0008 - 0x0000)
struct CoreCurrencyLabelWidget_UpdateCurrency final
{
public:
	int32                                         newBalance;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         previousBalance;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyLabelWidget_UpdateCurrency) == 0x000004, "Wrong alignment on CoreCurrencyLabelWidget_UpdateCurrency");
static_assert(sizeof(CoreCurrencyLabelWidget_UpdateCurrency) == 0x000008, "Wrong size on CoreCurrencyLabelWidget_UpdateCurrency");
static_assert(offsetof(CoreCurrencyLabelWidget_UpdateCurrency, newBalance) == 0x000000, "Member 'CoreCurrencyLabelWidget_UpdateCurrency::newBalance' has a wrong offset!");
static_assert(offsetof(CoreCurrencyLabelWidget_UpdateCurrency, previousBalance) == 0x000004, "Member 'CoreCurrencyLabelWidget_UpdateCurrency::previousBalance' has a wrong offset!");

// Function DBDUIViewsCore.CoreCurrencyProgressionRewardWidget.SetData
// 0x0128 (0x0128 - 0x0000)
struct CoreCurrencyProgressionRewardWidget_SetData final
{
public:
	struct FCurrencyProgressionRewardViewData     currencyProgressionRewardViewData;                 // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCurrencyProgressionRewardWidget_SetData) == 0x000008, "Wrong alignment on CoreCurrencyProgressionRewardWidget_SetData");
static_assert(sizeof(CoreCurrencyProgressionRewardWidget_SetData) == 0x000128, "Wrong size on CoreCurrencyProgressionRewardWidget_SetData");
static_assert(offsetof(CoreCurrencyProgressionRewardWidget_SetData, currencyProgressionRewardViewData) == 0x000000, "Member 'CoreCurrencyProgressionRewardWidget_SetData::currencyProgressionRewardViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreCustomizationRewardWidget.SetData
// 0x0148 (0x0148 - 0x0000)
struct CoreCustomizationRewardWidget_SetData final
{
public:
	struct FCustomizationRewardViewData           customizationRewardViewData;                       // 0x0000(0x0148)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCustomizationRewardWidget_SetData) == 0x000008, "Wrong alignment on CoreCustomizationRewardWidget_SetData");
static_assert(sizeof(CoreCustomizationRewardWidget_SetData) == 0x000148, "Wrong size on CoreCustomizationRewardWidget_SetData");
static_assert(offsetof(CoreCustomizationRewardWidget_SetData, customizationRewardViewData) == 0x000000, "Member 'CoreCustomizationRewardWidget_SetData::customizationRewardViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreCustomizationRewardWidget.SetOwnedText
// 0x0018 (0x0018 - 0x0000)
struct CoreCustomizationRewardWidget_SetOwnedText final
{
public:
	class FText                                   ownedText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCustomizationRewardWidget_SetOwnedText) == 0x000008, "Wrong alignment on CoreCustomizationRewardWidget_SetOwnedText");
static_assert(sizeof(CoreCustomizationRewardWidget_SetOwnedText) == 0x000018, "Wrong size on CoreCustomizationRewardWidget_SetOwnedText");
static_assert(offsetof(CoreCustomizationRewardWidget_SetOwnedText, ownedText) == 0x000000, "Member 'CoreCustomizationRewardWidget_SetOwnedText::ownedText' has a wrong offset!");

// Function DBDUIViewsCore.CoreCustomizationRewardWidget.SetRarity
// 0x0001 (0x0001 - 0x0000)
struct CoreCustomizationRewardWidget_SetRarity final
{
public:
	EItemRarity                                   rarity;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreCustomizationRewardWidget_SetRarity) == 0x000001, "Wrong alignment on CoreCustomizationRewardWidget_SetRarity");
static_assert(sizeof(CoreCustomizationRewardWidget_SetRarity) == 0x000001, "Wrong size on CoreCustomizationRewardWidget_SetRarity");
static_assert(offsetof(CoreCustomizationRewardWidget_SetRarity, rarity) == 0x000000, "Member 'CoreCustomizationRewardWidget_SetRarity::rarity' has a wrong offset!");

// Function DBDUIViewsCore.CoreDisplayStandWidget.OnDrag
// 0x0008 (0x0008 - 0x0000)
struct CoreDisplayStandWidget_OnDrag final
{
public:
	struct FVector2D                              cursorDelta;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreDisplayStandWidget_OnDrag) == 0x000004, "Wrong alignment on CoreDisplayStandWidget_OnDrag");
static_assert(sizeof(CoreDisplayStandWidget_OnDrag) == 0x000008, "Wrong size on CoreDisplayStandWidget_OnDrag");
static_assert(offsetof(CoreDisplayStandWidget_OnDrag, cursorDelta) == 0x000000, "Member 'CoreDisplayStandWidget_OnDrag::cursorDelta' has a wrong offset!");

// Function DBDUIViewsCore.CoreEndGameCollapseBarWidget.UpdateBarProgression
// 0x0004 (0x0004 - 0x0000)
struct CoreEndGameCollapseBarWidget_UpdateBarProgression final
{
public:
	float                                         progress;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreEndGameCollapseBarWidget_UpdateBarProgression) == 0x000004, "Wrong alignment on CoreEndGameCollapseBarWidget_UpdateBarProgression");
static_assert(sizeof(CoreEndGameCollapseBarWidget_UpdateBarProgression) == 0x000004, "Wrong size on CoreEndGameCollapseBarWidget_UpdateBarProgression");
static_assert(offsetof(CoreEndGameCollapseBarWidget_UpdateBarProgression, progress) == 0x000000, "Member 'CoreEndGameCollapseBarWidget_UpdateBarProgression::progress' has a wrong offset!");

// Function DBDUIViewsCore.CoreExternalEffectsWidget.HideExternalAddon_Implementation
// 0x000C (0x000C - 0x0000)
struct CoreExternalEffectsWidget_HideExternalAddon_Implementation final
{
public:
	class FName                                   itemId;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreExternalEffectsWidget_HideExternalAddon_Implementation) == 0x000004, "Wrong alignment on CoreExternalEffectsWidget_HideExternalAddon_Implementation");
static_assert(sizeof(CoreExternalEffectsWidget_HideExternalAddon_Implementation) == 0x00000C, "Wrong size on CoreExternalEffectsWidget_HideExternalAddon_Implementation");
static_assert(offsetof(CoreExternalEffectsWidget_HideExternalAddon_Implementation, itemId) == 0x000000, "Member 'CoreExternalEffectsWidget_HideExternalAddon_Implementation::itemId' has a wrong offset!");

// Function DBDUIViewsCore.CoreExternalEffectsWidget.HideExternalPerk_Implementation
// 0x000C (0x000C - 0x0000)
struct CoreExternalEffectsWidget_HideExternalPerk_Implementation final
{
public:
	class FName                                   itemId;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreExternalEffectsWidget_HideExternalPerk_Implementation) == 0x000004, "Wrong alignment on CoreExternalEffectsWidget_HideExternalPerk_Implementation");
static_assert(sizeof(CoreExternalEffectsWidget_HideExternalPerk_Implementation) == 0x00000C, "Wrong size on CoreExternalEffectsWidget_HideExternalPerk_Implementation");
static_assert(offsetof(CoreExternalEffectsWidget_HideExternalPerk_Implementation, itemId) == 0x000000, "Member 'CoreExternalEffectsWidget_HideExternalPerk_Implementation::itemId' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.OnAlignmentChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreInputSwitcherWidget_OnAlignmentChanged final
{
public:
	ETextJustify                                  newAlignment;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_OnAlignmentChanged) == 0x000001, "Wrong alignment on CoreInputSwitcherWidget_OnAlignmentChanged");
static_assert(sizeof(CoreInputSwitcherWidget_OnAlignmentChanged) == 0x000001, "Wrong size on CoreInputSwitcherWidget_OnAlignmentChanged");
static_assert(offsetof(CoreInputSwitcherWidget_OnAlignmentChanged, newAlignment) == 0x000000, "Member 'CoreInputSwitcherWidget_OnAlignmentChanged::newAlignment' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.OnButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreInputSwitcherWidget_OnButtonClicked final
{
public:
	class UCoreButtonWidget*                      target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_OnButtonClicked) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_OnButtonClicked");
static_assert(sizeof(CoreInputSwitcherWidget_OnButtonClicked) == 0x000008, "Wrong size on CoreInputSwitcherWidget_OnButtonClicked");
static_assert(offsetof(CoreInputSwitcherWidget_OnButtonClicked, target) == 0x000000, "Member 'CoreInputSwitcherWidget_OnButtonClicked::target' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetAdditionalIcon
// 0x0030 (0x0030 - 0x0000)
struct CoreInputSwitcherWidget_SetAdditionalIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              iconTexture;                                       // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetAdditionalIcon) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_SetAdditionalIcon");
static_assert(sizeof(CoreInputSwitcherWidget_SetAdditionalIcon) == 0x000030, "Wrong size on CoreInputSwitcherWidget_SetAdditionalIcon");
static_assert(offsetof(CoreInputSwitcherWidget_SetAdditionalIcon, iconTexture) == 0x000000, "Member 'CoreInputSwitcherWidget_SetAdditionalIcon::iconTexture' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetAlignment
// 0x0001 (0x0001 - 0x0000)
struct CoreInputSwitcherWidget_SetAlignment final
{
public:
	ETextJustify                                  newAlignment;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetAlignment) == 0x000001, "Wrong alignment on CoreInputSwitcherWidget_SetAlignment");
static_assert(sizeof(CoreInputSwitcherWidget_SetAlignment) == 0x000001, "Wrong size on CoreInputSwitcherWidget_SetAlignment");
static_assert(offsetof(CoreInputSwitcherWidget_SetAlignment, newAlignment) == 0x000000, "Member 'CoreInputSwitcherWidget_SetAlignment::newAlignment' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetBackground
// 0x0030 (0x0030 - 0x0000)
struct CoreInputSwitcherWidget_SetBackground final
{
public:
	TSoftObjectPtr<class UMaterialInstance>       backgroundMaterial;                                // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetBackground) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_SetBackground");
static_assert(sizeof(CoreInputSwitcherWidget_SetBackground) == 0x000030, "Wrong size on CoreInputSwitcherWidget_SetBackground");
static_assert(offsetof(CoreInputSwitcherWidget_SetBackground, backgroundMaterial) == 0x000000, "Member 'CoreInputSwitcherWidget_SetBackground::backgroundMaterial' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreInputSwitcherWidget_SetEnabled final
{
public:
	bool                                          isEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetEnabled) == 0x000001, "Wrong alignment on CoreInputSwitcherWidget_SetEnabled");
static_assert(sizeof(CoreInputSwitcherWidget_SetEnabled) == 0x000001, "Wrong size on CoreInputSwitcherWidget_SetEnabled");
static_assert(offsetof(CoreInputSwitcherWidget_SetEnabled, isEnabled) == 0x000000, "Member 'CoreInputSwitcherWidget_SetEnabled::isEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetKeyOverride
// 0x0020 (0x0020 - 0x0000)
struct CoreInputSwitcherWidget_SetKeyOverride final
{
public:
	struct FKey                                   keyOverride;                                       // 0x0000(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetKeyOverride) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_SetKeyOverride");
static_assert(sizeof(CoreInputSwitcherWidget_SetKeyOverride) == 0x000020, "Wrong size on CoreInputSwitcherWidget_SetKeyOverride");
static_assert(offsetof(CoreInputSwitcherWidget_SetKeyOverride, keyOverride) == 0x000000, "Member 'CoreInputSwitcherWidget_SetKeyOverride::keyOverride' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct CoreInputSwitcherWidget_SetLabel final
{
public:
	class FText                                   label;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetLabel) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_SetLabel");
static_assert(sizeof(CoreInputSwitcherWidget_SetLabel) == 0x000018, "Wrong size on CoreInputSwitcherWidget_SetLabel");
static_assert(offsetof(CoreInputSwitcherWidget_SetLabel, label) == 0x000000, "Member 'CoreInputSwitcherWidget_SetLabel::label' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetRepeatable
// 0x0010 (0x0010 - 0x0000)
struct CoreInputSwitcherWidget_SetRepeatable final
{
public:
	bool                                          isRepeatable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            repetitionDelayCurve;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetRepeatable) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_SetRepeatable");
static_assert(sizeof(CoreInputSwitcherWidget_SetRepeatable) == 0x000010, "Wrong size on CoreInputSwitcherWidget_SetRepeatable");
static_assert(offsetof(CoreInputSwitcherWidget_SetRepeatable, isRepeatable) == 0x000000, "Member 'CoreInputSwitcherWidget_SetRepeatable::isRepeatable' has a wrong offset!");
static_assert(offsetof(CoreInputSwitcherWidget_SetRepeatable, repetitionDelayCurve) == 0x000008, "Member 'CoreInputSwitcherWidget_SetRepeatable::repetitionDelayCurve' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetUIAction
// 0x0001 (0x0001 - 0x0000)
struct CoreInputSwitcherWidget_SetUIAction final
{
public:
	EUIActionType                                 actionType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_SetUIAction) == 0x000001, "Wrong alignment on CoreInputSwitcherWidget_SetUIAction");
static_assert(sizeof(CoreInputSwitcherWidget_SetUIAction) == 0x000001, "Wrong size on CoreInputSwitcherWidget_SetUIAction");
static_assert(offsetof(CoreInputSwitcherWidget_SetUIAction, actionType) == 0x000000, "Member 'CoreInputSwitcherWidget_SetUIAction::actionType' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.GetButton
// 0x0008 (0x0008 - 0x0000)
struct CoreInputSwitcherWidget_GetButton final
{
public:
	class UCoreButtonWidget*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_GetButton) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_GetButton");
static_assert(sizeof(CoreInputSwitcherWidget_GetButton) == 0x000008, "Wrong size on CoreInputSwitcherWidget_GetButton");
static_assert(offsetof(CoreInputSwitcherWidget_GetButton, ReturnValue) == 0x000000, "Member 'CoreInputSwitcherWidget_GetButton::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputSwitcherWidget.GetInputPrompt
// 0x0008 (0x0008 - 0x0000)
struct CoreInputSwitcherWidget_GetInputPrompt final
{
public:
	class UCoreKeyListenerInputPromptWidget*      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputSwitcherWidget_GetInputPrompt) == 0x000008, "Wrong alignment on CoreInputSwitcherWidget_GetInputPrompt");
static_assert(sizeof(CoreInputSwitcherWidget_GetInputPrompt) == 0x000008, "Wrong size on CoreInputSwitcherWidget_GetInputPrompt");
static_assert(offsetof(CoreInputSwitcherWidget_GetInputPrompt, ReturnValue) == 0x000000, "Member 'CoreInputSwitcherWidget_GetInputPrompt::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreGameManualPanelWidget.OnTopicsTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreGameManualPanelWidget_OnTopicsTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGameManualPanelWidget_OnTopicsTabSelected) == 0x000008, "Wrong alignment on CoreGameManualPanelWidget_OnTopicsTabSelected");
static_assert(sizeof(CoreGameManualPanelWidget_OnTopicsTabSelected) == 0x000008, "Wrong size on CoreGameManualPanelWidget_OnTopicsTabSelected");
static_assert(offsetof(CoreGameManualPanelWidget_OnTopicsTabSelected, selectedButton) == 0x000000, "Member 'CoreGameManualPanelWidget_OnTopicsTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreGameManualPanelWidget.ResetScrolls
// 0x0001 (0x0001 - 0x0000)
struct CoreGameManualPanelWidget_ResetScrolls final
{
public:
	bool                                          resetTopicsScroll;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGameManualPanelWidget_ResetScrolls) == 0x000001, "Wrong alignment on CoreGameManualPanelWidget_ResetScrolls");
static_assert(sizeof(CoreGameManualPanelWidget_ResetScrolls) == 0x000001, "Wrong size on CoreGameManualPanelWidget_ResetScrolls");
static_assert(offsetof(CoreGameManualPanelWidget_ResetScrolls, resetTopicsScroll) == 0x000000, "Member 'CoreGameManualPanelWidget_ResetScrolls::resetTopicsScroll' has a wrong offset!");

// Function DBDUIViewsCore.CoreGameManualPanelWidget.SetGameManualMenuState
// 0x0001 (0x0001 - 0x0000)
struct CoreGameManualPanelWidget_SetGameManualMenuState final
{
public:
	EGameManualMenuState                          menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGameManualPanelWidget_SetGameManualMenuState) == 0x000001, "Wrong alignment on CoreGameManualPanelWidget_SetGameManualMenuState");
static_assert(sizeof(CoreGameManualPanelWidget_SetGameManualMenuState) == 0x000001, "Wrong size on CoreGameManualPanelWidget_SetGameManualMenuState");
static_assert(offsetof(CoreGameManualPanelWidget_SetGameManualMenuState, menuState) == 0x000000, "Member 'CoreGameManualPanelWidget_SetGameManualMenuState::menuState' has a wrong offset!");

// Function DBDUIViewsCore.CoreGameManualPanelWidget.ShowHelpTopics
// 0x0001 (0x0001 - 0x0000)
struct CoreGameManualPanelWidget_ShowHelpTopics final
{
public:
	EHelpType                                     categoryType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGameManualPanelWidget_ShowHelpTopics) == 0x000001, "Wrong alignment on CoreGameManualPanelWidget_ShowHelpTopics");
static_assert(sizeof(CoreGameManualPanelWidget_ShowHelpTopics) == 0x000001, "Wrong size on CoreGameManualPanelWidget_ShowHelpTopics");
static_assert(offsetof(CoreGameManualPanelWidget_ShowHelpTopics, categoryType) == 0x000000, "Member 'CoreGameManualPanelWidget_ShowHelpTopics::categoryType' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudAlertWidget.OnClearAlertsComplete
// 0x0008 (0x0008 - 0x0000)
struct CoreHudAlertWidget_OnClearAlertsComplete final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudAlertWidget_OnClearAlertsComplete) == 0x000008, "Wrong alignment on CoreHudAlertWidget_OnClearAlertsComplete");
static_assert(sizeof(CoreHudAlertWidget_OnClearAlertsComplete) == 0x000008, "Wrong size on CoreHudAlertWidget_OnClearAlertsComplete");
static_assert(offsetof(CoreHudAlertWidget_OnClearAlertsComplete, tween) == 0x000000, "Member 'CoreHudAlertWidget_OnClearAlertsComplete::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudAlertWidget.OnPopAlertComplete
// 0x0008 (0x0008 - 0x0000)
struct CoreHudAlertWidget_OnPopAlertComplete final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudAlertWidget_OnPopAlertComplete) == 0x000008, "Wrong alignment on CoreHudAlertWidget_OnPopAlertComplete");
static_assert(sizeof(CoreHudAlertWidget_OnPopAlertComplete) == 0x000008, "Wrong size on CoreHudAlertWidget_OnPopAlertComplete");
static_assert(offsetof(CoreHudAlertWidget_OnPopAlertComplete, tween) == 0x000000, "Member 'CoreHudAlertWidget_OnPopAlertComplete::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudAlertWidget.GetAlerts
// 0x0010 (0x0010 - 0x0000)
struct CoreHudAlertWidget_GetAlerts final
{
public:
	TArray<class UCoreBaseUserWidget*>            ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudAlertWidget_GetAlerts) == 0x000008, "Wrong alignment on CoreHudAlertWidget_GetAlerts");
static_assert(sizeof(CoreHudAlertWidget_GetAlerts) == 0x000010, "Wrong size on CoreHudAlertWidget_GetAlerts");
static_assert(offsetof(CoreHudAlertWidget_GetAlerts, ReturnValue) == 0x000000, "Member 'CoreHudAlertWidget_GetAlerts::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudAlertWidget.GetPendingAlerts
// 0x0010 (0x0010 - 0x0000)
struct CoreHudAlertWidget_GetPendingAlerts final
{
public:
	TArray<class UCoreBaseUserWidget*>            ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudAlertWidget_GetPendingAlerts) == 0x000008, "Wrong alignment on CoreHudAlertWidget_GetPendingAlerts");
static_assert(sizeof(CoreHudAlertWidget_GetPendingAlerts) == 0x000010, "Wrong size on CoreHudAlertWidget_GetPendingAlerts");
static_assert(offsetof(CoreHudAlertWidget_GetPendingAlerts, ReturnValue) == 0x000000, "Member 'CoreHudAlertWidget_GetPendingAlerts::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudAlertWidget.GetRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct CoreHudAlertWidget_GetRemainingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudAlertWidget_GetRemainingTime) == 0x000004, "Wrong alignment on CoreHudAlertWidget_GetRemainingTime");
static_assert(sizeof(CoreHudAlertWidget_GetRemainingTime) == 0x000004, "Wrong size on CoreHudAlertWidget_GetRemainingTime");
static_assert(offsetof(CoreHudAlertWidget_GetRemainingTime, ReturnValue) == 0x000000, "Member 'CoreHudAlertWidget_GetRemainingTime::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.Init
// 0x0001 (0x0001 - 0x0000)
struct CoreHudDirectionalMiniGameItemWidget_Init final
{
public:
	EDirectionalInputKey                          direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudDirectionalMiniGameItemWidget_Init) == 0x000001, "Wrong alignment on CoreHudDirectionalMiniGameItemWidget_Init");
static_assert(sizeof(CoreHudDirectionalMiniGameItemWidget_Init) == 0x000001, "Wrong size on CoreHudDirectionalMiniGameItemWidget_Init");
static_assert(offsetof(CoreHudDirectionalMiniGameItemWidget_Init, direction) == 0x000000, "Member 'CoreHudDirectionalMiniGameItemWidget_Init::direction' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.RevealDirection
// 0x0001 (0x0001 - 0x0000)
struct CoreHudDirectionalMiniGameItemWidget_RevealDirection final
{
public:
	bool                                          withAnimation;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudDirectionalMiniGameItemWidget_RevealDirection) == 0x000001, "Wrong alignment on CoreHudDirectionalMiniGameItemWidget_RevealDirection");
static_assert(sizeof(CoreHudDirectionalMiniGameItemWidget_RevealDirection) == 0x000001, "Wrong size on CoreHudDirectionalMiniGameItemWidget_RevealDirection");
static_assert(offsetof(CoreHudDirectionalMiniGameItemWidget_RevealDirection, withAnimation) == 0x000000, "Member 'CoreHudDirectionalMiniGameItemWidget_RevealDirection::withAnimation' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.UpdateResult
// 0x0001 (0x0001 - 0x0000)
struct CoreHudDirectionalMiniGameItemWidget_UpdateResult final
{
public:
	bool                                          isSuccessful;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudDirectionalMiniGameItemWidget_UpdateResult) == 0x000001, "Wrong alignment on CoreHudDirectionalMiniGameItemWidget_UpdateResult");
static_assert(sizeof(CoreHudDirectionalMiniGameItemWidget_UpdateResult) == 0x000001, "Wrong size on CoreHudDirectionalMiniGameItemWidget_UpdateResult");
static_assert(offsetof(CoreHudDirectionalMiniGameItemWidget_UpdateResult, isSuccessful) == 0x000000, "Member 'CoreHudDirectionalMiniGameItemWidget_UpdateResult::isSuccessful' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudDirectionalMiniGameWidget.GetWidgets
// 0x0010 (0x0010 - 0x0000)
struct CoreHudDirectionalMiniGameWidget_GetWidgets final
{
public:
	TArray<class UCoreHudDirectionalMiniGameItemWidget*> ReturnValue;                                // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudDirectionalMiniGameWidget_GetWidgets) == 0x000008, "Wrong alignment on CoreHudDirectionalMiniGameWidget_GetWidgets");
static_assert(sizeof(CoreHudDirectionalMiniGameWidget_GetWidgets) == 0x000010, "Wrong size on CoreHudDirectionalMiniGameWidget_GetWidgets");
static_assert(offsetof(CoreHudDirectionalMiniGameWidget_GetWidgets, ReturnValue) == 0x000000, "Member 'CoreHudDirectionalMiniGameWidget_GetWidgets::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudScoreAlertItem.SetData
// 0x0020 (0x0020 - 0x0000)
struct CoreHudScoreAlertItem_SetData final
{
public:
	struct FScoreAlertViewData                    data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudScoreAlertItem_SetData) == 0x000008, "Wrong alignment on CoreHudScoreAlertItem_SetData");
static_assert(sizeof(CoreHudScoreAlertItem_SetData) == 0x000020, "Wrong size on CoreHudScoreAlertItem_SetData");
static_assert(offsetof(CoreHudScoreAlertItem_SetData, data) == 0x000000, "Member 'CoreHudScoreAlertItem_SetData::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreHudStatusEffectAlertItem.SetData
// 0x01B0 (0x01B0 - 0x0000)
struct CoreHudStatusEffectAlertItem_SetData final
{
public:
	struct FStatusEffectAlertViewData             data;                                              // 0x0000(0x01B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudStatusEffectAlertItem_SetData) == 0x000008, "Wrong alignment on CoreHudStatusEffectAlertItem_SetData");
static_assert(sizeof(CoreHudStatusEffectAlertItem_SetData) == 0x0001B0, "Wrong size on CoreHudStatusEffectAlertItem_SetData");
static_assert(offsetof(CoreHudStatusEffectAlertItem_SetData, data) == 0x000000, "Member 'CoreHudStatusEffectAlertItem_SetData::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputPromptWidget.GetInputKey
// 0x0020 (0x0020 - 0x0000)
struct CoreInputPromptWidget_GetInputKey final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputPromptWidget_GetInputKey) == 0x000008, "Wrong alignment on CoreInputPromptWidget_GetInputKey");
static_assert(sizeof(CoreInputPromptWidget_GetInputKey) == 0x000020, "Wrong size on CoreInputPromptWidget_GetInputKey");
static_assert(offsetof(CoreInputPromptWidget_GetInputKey, ReturnValue) == 0x000000, "Member 'CoreInputPromptWidget_GetInputKey::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputPromptWidget.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreInputPromptWidget_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputPromptWidget_IsEnabled) == 0x000001, "Wrong alignment on CoreInputPromptWidget_IsEnabled");
static_assert(sizeof(CoreInputPromptWidget_IsEnabled) == 0x000001, "Wrong size on CoreInputPromptWidget_IsEnabled");
static_assert(offsetof(CoreInputPromptWidget_IsEnabled, ReturnValue) == 0x000000, "Member 'CoreInputPromptWidget_IsEnabled::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputPromptWidget.OnEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreInputPromptWidget_OnEnabledChanged final
{
public:
	bool                                          isEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputPromptWidget_OnEnabledChanged) == 0x000001, "Wrong alignment on CoreInputPromptWidget_OnEnabledChanged");
static_assert(sizeof(CoreInputPromptWidget_OnEnabledChanged) == 0x000001, "Wrong size on CoreInputPromptWidget_OnEnabledChanged");
static_assert(offsetof(CoreInputPromptWidget_OnEnabledChanged, isEnabled) == 0x000000, "Member 'CoreInputPromptWidget_OnEnabledChanged::isEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputPromptWidget.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreInputPromptWidget_SetEnabled final
{
public:
	bool                                          isEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputPromptWidget_SetEnabled) == 0x000001, "Wrong alignment on CoreInputPromptWidget_SetEnabled");
static_assert(sizeof(CoreInputPromptWidget_SetEnabled) == 0x000001, "Wrong size on CoreInputPromptWidget_SetEnabled");
static_assert(offsetof(CoreInputPromptWidget_SetEnabled, isEnabled) == 0x000000, "Member 'CoreInputPromptWidget_SetEnabled::isEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputPromptWidget.SetInputKey
// 0x0020 (0x0020 - 0x0000)
struct CoreInputPromptWidget_SetInputKey final
{
public:
	struct FKey                                   inputKey;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputPromptWidget_SetInputKey) == 0x000008, "Wrong alignment on CoreInputPromptWidget_SetInputKey");
static_assert(sizeof(CoreInputPromptWidget_SetInputKey) == 0x000020, "Wrong size on CoreInputPromptWidget_SetInputKey");
static_assert(offsetof(CoreInputPromptWidget_SetInputKey, inputKey) == 0x000000, "Member 'CoreInputPromptWidget_SetInputKey::inputKey' has a wrong offset!");

// Function DBDUIViewsCore.CoreInputPromptWidget.GetInputShortDisplayName
// 0x0018 (0x0018 - 0x0000)
struct CoreInputPromptWidget_GetInputShortDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInputPromptWidget_GetInputShortDisplayName) == 0x000008, "Wrong alignment on CoreInputPromptWidget_GetInputShortDisplayName");
static_assert(sizeof(CoreInputPromptWidget_GetInputShortDisplayName) == 0x000018, "Wrong size on CoreInputPromptWidget_GetInputShortDisplayName");
static_assert(offsetof(CoreInputPromptWidget_GetInputShortDisplayName, ReturnValue) == 0x000000, "Member 'CoreInputPromptWidget_GetInputShortDisplayName::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionProgressWidget.SetProficiencies
// 0x0010 (0x0010 - 0x0000)
struct CoreInteractionProgressWidget_SetProficiencies final
{
public:
	TArray<struct FStatusEffectViewData>          proficiencyDatas;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionProgressWidget_SetProficiencies) == 0x000008, "Wrong alignment on CoreInteractionProgressWidget_SetProficiencies");
static_assert(sizeof(CoreInteractionProgressWidget_SetProficiencies) == 0x000010, "Wrong size on CoreInteractionProgressWidget_SetProficiencies");
static_assert(offsetof(CoreInteractionProgressWidget_SetProficiencies, proficiencyDatas) == 0x000000, "Member 'CoreInteractionProgressWidget_SetProficiencies::proficiencyDatas' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey
// 0x0020 (0x0020 - 0x0000)
struct CoreInteractionPromptActionWidget_SetInputKey final
{
public:
	struct FKey                                   inputKey;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptActionWidget_SetInputKey) == 0x000008, "Wrong alignment on CoreInteractionPromptActionWidget_SetInputKey");
static_assert(sizeof(CoreInteractionPromptActionWidget_SetInputKey) == 0x000020, "Wrong size on CoreInteractionPromptActionWidget_SetInputKey");
static_assert(offsetof(CoreInteractionPromptActionWidget_SetInputKey, inputKey) == 0x000000, "Member 'CoreInteractionPromptActionWidget_SetInputKey::inputKey' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey2
// 0x0020 (0x0020 - 0x0000)
struct CoreInteractionPromptActionWidget_SetInputKey2 final
{
public:
	struct FKey                                   inputKey2;                                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptActionWidget_SetInputKey2) == 0x000008, "Wrong alignment on CoreInteractionPromptActionWidget_SetInputKey2");
static_assert(sizeof(CoreInteractionPromptActionWidget_SetInputKey2) == 0x000020, "Wrong size on CoreInteractionPromptActionWidget_SetInputKey2");
static_assert(offsetof(CoreInteractionPromptActionWidget_SetInputKey2, inputKey2) == 0x000000, "Member 'CoreInteractionPromptActionWidget_SetInputKey2::inputKey2' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey3
// 0x0020 (0x0020 - 0x0000)
struct CoreInteractionPromptActionWidget_SetInputKey3 final
{
public:
	struct FKey                                   inputKey3;                                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptActionWidget_SetInputKey3) == 0x000008, "Wrong alignment on CoreInteractionPromptActionWidget_SetInputKey3");
static_assert(sizeof(CoreInteractionPromptActionWidget_SetInputKey3) == 0x000020, "Wrong size on CoreInteractionPromptActionWidget_SetInputKey3");
static_assert(offsetof(CoreInteractionPromptActionWidget_SetInputKey3, inputKey3) == 0x000000, "Member 'CoreInteractionPromptActionWidget_SetInputKey3::inputKey3' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey4
// 0x0020 (0x0020 - 0x0000)
struct CoreInteractionPromptActionWidget_SetInputKey4 final
{
public:
	struct FKey                                   inputKey4;                                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptActionWidget_SetInputKey4) == 0x000008, "Wrong alignment on CoreInteractionPromptActionWidget_SetInputKey4");
static_assert(sizeof(CoreInteractionPromptActionWidget_SetInputKey4) == 0x000020, "Wrong size on CoreInteractionPromptActionWidget_SetInputKey4");
static_assert(offsetof(CoreInteractionPromptActionWidget_SetInputKey4, inputKey4) == 0x000000, "Member 'CoreInteractionPromptActionWidget_SetInputKey4::inputKey4' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.HasFourthPrompt
// 0x0001 (0x0001 - 0x0000)
struct CoreInteractionPromptActionWidget_HasFourthPrompt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptActionWidget_HasFourthPrompt) == 0x000001, "Wrong alignment on CoreInteractionPromptActionWidget_HasFourthPrompt");
static_assert(sizeof(CoreInteractionPromptActionWidget_HasFourthPrompt) == 0x000001, "Wrong size on CoreInteractionPromptActionWidget_HasFourthPrompt");
static_assert(offsetof(CoreInteractionPromptActionWidget_HasFourthPrompt, ReturnValue) == 0x000000, "Member 'CoreInteractionPromptActionWidget_HasFourthPrompt::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.HasSecondPrompt
// 0x0001 (0x0001 - 0x0000)
struct CoreInteractionPromptActionWidget_HasSecondPrompt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptActionWidget_HasSecondPrompt) == 0x000001, "Wrong alignment on CoreInteractionPromptActionWidget_HasSecondPrompt");
static_assert(sizeof(CoreInteractionPromptActionWidget_HasSecondPrompt) == 0x000001, "Wrong size on CoreInteractionPromptActionWidget_HasSecondPrompt");
static_assert(offsetof(CoreInteractionPromptActionWidget_HasSecondPrompt, ReturnValue) == 0x000000, "Member 'CoreInteractionPromptActionWidget_HasSecondPrompt::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.HasThirdPrompt
// 0x0001 (0x0001 - 0x0000)
struct CoreInteractionPromptActionWidget_HasThirdPrompt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptActionWidget_HasThirdPrompt) == 0x000001, "Wrong alignment on CoreInteractionPromptActionWidget_HasThirdPrompt");
static_assert(sizeof(CoreInteractionPromptActionWidget_HasThirdPrompt) == 0x000001, "Wrong size on CoreInteractionPromptActionWidget_HasThirdPrompt");
static_assert(offsetof(CoreInteractionPromptActionWidget_HasThirdPrompt, ReturnValue) == 0x000000, "Member 'CoreInteractionPromptActionWidget_HasThirdPrompt::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptWidget.OnLargeTextSettingsChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreInteractionPromptWidget_OnLargeTextSettingsChanged final
{
public:
	bool                                          isLargeTextEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptWidget_OnLargeTextSettingsChanged) == 0x000001, "Wrong alignment on CoreInteractionPromptWidget_OnLargeTextSettingsChanged");
static_assert(sizeof(CoreInteractionPromptWidget_OnLargeTextSettingsChanged) == 0x000001, "Wrong size on CoreInteractionPromptWidget_OnLargeTextSettingsChanged");
static_assert(offsetof(CoreInteractionPromptWidget_OnLargeTextSettingsChanged, isLargeTextEnabled) == 0x000000, "Member 'CoreInteractionPromptWidget_OnLargeTextSettingsChanged::isLargeTextEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreInteractionPromptWidget.SetData
// 0x00B0 (0x00B0 - 0x0000)
struct CoreInteractionPromptWidget_SetData final
{
public:
	struct FInteractionPromptViewData             data;                                              // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInteractionPromptWidget_SetData) == 0x000008, "Wrong alignment on CoreInteractionPromptWidget_SetData");
static_assert(sizeof(CoreInteractionPromptWidget_SetData) == 0x0000B0, "Wrong size on CoreInteractionPromptWidget_SetData");
static_assert(offsetof(CoreInteractionPromptWidget_SetData, data) == 0x000000, "Member 'CoreInteractionPromptWidget_SetData::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerButtonWidget.SetKeyOverride
// 0x0020 (0x0020 - 0x0000)
struct CoreKeyListenerButtonWidget_SetKeyOverride final
{
public:
	struct FKey                                   keyOverride;                                       // 0x0000(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerButtonWidget_SetKeyOverride) == 0x000008, "Wrong alignment on CoreKeyListenerButtonWidget_SetKeyOverride");
static_assert(sizeof(CoreKeyListenerButtonWidget_SetKeyOverride) == 0x000020, "Wrong size on CoreKeyListenerButtonWidget_SetKeyOverride");
static_assert(offsetof(CoreKeyListenerButtonWidget_SetKeyOverride, keyOverride) == 0x000000, "Member 'CoreKeyListenerButtonWidget_SetKeyOverride::keyOverride' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerButtonWidget.SetUIAction
// 0x0001 (0x0001 - 0x0000)
struct CoreKeyListenerButtonWidget_SetUIAction final
{
public:
	EUIActionType                                 actionType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerButtonWidget_SetUIAction) == 0x000001, "Wrong alignment on CoreKeyListenerButtonWidget_SetUIAction");
static_assert(sizeof(CoreKeyListenerButtonWidget_SetUIAction) == 0x000001, "Wrong size on CoreKeyListenerButtonWidget_SetUIAction");
static_assert(offsetof(CoreKeyListenerButtonWidget_SetUIAction, actionType) == 0x000000, "Member 'CoreKeyListenerButtonWidget_SetUIAction::actionType' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.OnEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreKeyListenerInputPromptWidget_OnEnabledChanged final
{
public:
	bool                                          isEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_OnEnabledChanged) == 0x000001, "Wrong alignment on CoreKeyListenerInputPromptWidget_OnEnabledChanged");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_OnEnabledChanged) == 0x000001, "Wrong size on CoreKeyListenerInputPromptWidget_OnEnabledChanged");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_OnEnabledChanged, isEnabled) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_OnEnabledChanged::isEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetAdditionalIcon
// 0x0030 (0x0030 - 0x0000)
struct CoreKeyListenerInputPromptWidget_SetAdditionalIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              iconTexture;                                       // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_SetAdditionalIcon) == 0x000008, "Wrong alignment on CoreKeyListenerInputPromptWidget_SetAdditionalIcon");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_SetAdditionalIcon) == 0x000030, "Wrong size on CoreKeyListenerInputPromptWidget_SetAdditionalIcon");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetAdditionalIcon, iconTexture) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_SetAdditionalIcon::iconTexture' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreKeyListenerInputPromptWidget_SetEnabled final
{
public:
	bool                                          isEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_SetEnabled) == 0x000001, "Wrong alignment on CoreKeyListenerInputPromptWidget_SetEnabled");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_SetEnabled) == 0x000001, "Wrong size on CoreKeyListenerInputPromptWidget_SetEnabled");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetEnabled, isEnabled) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_SetEnabled::isEnabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetKeyOverride
// 0x0020 (0x0020 - 0x0000)
struct CoreKeyListenerInputPromptWidget_SetKeyOverride final
{
public:
	struct FKey                                   keyOverride;                                       // 0x0000(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_SetKeyOverride) == 0x000008, "Wrong alignment on CoreKeyListenerInputPromptWidget_SetKeyOverride");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_SetKeyOverride) == 0x000020, "Wrong size on CoreKeyListenerInputPromptWidget_SetKeyOverride");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetKeyOverride, keyOverride) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_SetKeyOverride::keyOverride' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct CoreKeyListenerInputPromptWidget_SetLabel final
{
public:
	class FText                                   label;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_SetLabel) == 0x000008, "Wrong alignment on CoreKeyListenerInputPromptWidget_SetLabel");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_SetLabel) == 0x000018, "Wrong size on CoreKeyListenerInputPromptWidget_SetLabel");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetLabel, label) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_SetLabel::label' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetRepeatable
// 0x0010 (0x0010 - 0x0000)
struct CoreKeyListenerInputPromptWidget_SetRepeatable final
{
public:
	bool                                          isRepeatable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            repetitionDelayCurve;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_SetRepeatable) == 0x000008, "Wrong alignment on CoreKeyListenerInputPromptWidget_SetRepeatable");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_SetRepeatable) == 0x000010, "Wrong size on CoreKeyListenerInputPromptWidget_SetRepeatable");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetRepeatable, isRepeatable) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_SetRepeatable::isRepeatable' has a wrong offset!");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetRepeatable, repetitionDelayCurve) == 0x000008, "Member 'CoreKeyListenerInputPromptWidget_SetRepeatable::repetitionDelayCurve' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetUIAction
// 0x0001 (0x0001 - 0x0000)
struct CoreKeyListenerInputPromptWidget_SetUIAction final
{
public:
	EUIActionType                                 actionType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_SetUIAction) == 0x000001, "Wrong alignment on CoreKeyListenerInputPromptWidget_SetUIAction");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_SetUIAction) == 0x000001, "Wrong size on CoreKeyListenerInputPromptWidget_SetUIAction");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_SetUIAction, actionType) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_SetUIAction::actionType' has a wrong offset!");

// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreKeyListenerInputPromptWidget_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreKeyListenerInputPromptWidget_IsEnabled) == 0x000001, "Wrong alignment on CoreKeyListenerInputPromptWidget_IsEnabled");
static_assert(sizeof(CoreKeyListenerInputPromptWidget_IsEnabled) == 0x000001, "Wrong size on CoreKeyListenerInputPromptWidget_IsEnabled");
static_assert(offsetof(CoreKeyListenerInputPromptWidget_IsEnabled, ReturnValue) == 0x000000, "Member 'CoreKeyListenerInputPromptWidget_IsEnabled::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreLockedOverlayWidget.SetIsLocked
// 0x0002 (0x0002 - 0x0000)
struct CoreLockedOverlayWidget_SetIsLocked final
{
public:
	bool                                          isLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useAnimation;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreLockedOverlayWidget_SetIsLocked) == 0x000001, "Wrong alignment on CoreLockedOverlayWidget_SetIsLocked");
static_assert(sizeof(CoreLockedOverlayWidget_SetIsLocked) == 0x000002, "Wrong size on CoreLockedOverlayWidget_SetIsLocked");
static_assert(offsetof(CoreLockedOverlayWidget_SetIsLocked, isLocked) == 0x000000, "Member 'CoreLockedOverlayWidget_SetIsLocked::isLocked' has a wrong offset!");
static_assert(offsetof(CoreLockedOverlayWidget_SetIsLocked, useAnimation) == 0x000001, "Member 'CoreLockedOverlayWidget_SetIsLocked::useAnimation' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetTooltipData
// 0x0090 (0x0090 - 0x0000)
struct CoreMenuLoadoutPartWidget_GetTooltipData final
{
public:
	struct FLoadoutTooltipData                    ReturnValue;                                       // 0x0000(0x0090)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_GetTooltipData) == 0x000008, "Wrong alignment on CoreMenuLoadoutPartWidget_GetTooltipData");
static_assert(sizeof(CoreMenuLoadoutPartWidget_GetTooltipData) == 0x000090, "Wrong size on CoreMenuLoadoutPartWidget_GetTooltipData");
static_assert(offsetof(CoreMenuLoadoutPartWidget_GetTooltipData, ReturnValue) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_GetTooltipData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetWidgetItemId
// 0x000C (0x000C - 0x0000)
struct CoreMenuLoadoutPartWidget_GetWidgetItemId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_GetWidgetItemId) == 0x000004, "Wrong alignment on CoreMenuLoadoutPartWidget_GetWidgetItemId");
static_assert(sizeof(CoreMenuLoadoutPartWidget_GetWidgetItemId) == 0x00000C, "Wrong size on CoreMenuLoadoutPartWidget_GetWidgetItemId");
static_assert(offsetof(CoreMenuLoadoutPartWidget_GetWidgetItemId, ReturnValue) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_GetWidgetItemId::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetWidgetLockedState
// 0x0001 (0x0001 - 0x0000)
struct CoreMenuLoadoutPartWidget_GetWidgetLockedState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_GetWidgetLockedState) == 0x000001, "Wrong alignment on CoreMenuLoadoutPartWidget_GetWidgetLockedState");
static_assert(sizeof(CoreMenuLoadoutPartWidget_GetWidgetLockedState) == 0x000001, "Wrong size on CoreMenuLoadoutPartWidget_GetWidgetLockedState");
static_assert(offsetof(CoreMenuLoadoutPartWidget_GetWidgetLockedState, ReturnValue) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_GetWidgetLockedState::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetLoadoutPartData
// 0x0008 (0x0008 - 0x0000)
struct CoreMenuLoadoutPartWidget_SetLoadoutPartData final
{
public:
	const class UMenuLoadoutPartViewData*         data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_SetLoadoutPartData) == 0x000008, "Wrong alignment on CoreMenuLoadoutPartWidget_SetLoadoutPartData");
static_assert(sizeof(CoreMenuLoadoutPartWidget_SetLoadoutPartData) == 0x000008, "Wrong size on CoreMenuLoadoutPartWidget_SetLoadoutPartData");
static_assert(offsetof(CoreMenuLoadoutPartWidget_SetLoadoutPartData, data) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_SetLoadoutPartData::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetLoadoutPartScale
// 0x0004 (0x0004 - 0x0000)
struct CoreMenuLoadoutPartWidget_SetLoadoutPartScale final
{
public:
	float                                         scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_SetLoadoutPartScale) == 0x000004, "Wrong alignment on CoreMenuLoadoutPartWidget_SetLoadoutPartScale");
static_assert(sizeof(CoreMenuLoadoutPartWidget_SetLoadoutPartScale) == 0x000004, "Wrong size on CoreMenuLoadoutPartWidget_SetLoadoutPartScale");
static_assert(offsetof(CoreMenuLoadoutPartWidget_SetLoadoutPartScale, scale) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_SetLoadoutPartScale::scale' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetLoadoutPartTooltipData
// 0x0090 (0x0090 - 0x0000)
struct CoreMenuLoadoutPartWidget_SetLoadoutPartTooltipData final
{
public:
	struct FLoadoutTooltipData                    tooltipData;                                       // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_SetLoadoutPartTooltipData) == 0x000008, "Wrong alignment on CoreMenuLoadoutPartWidget_SetLoadoutPartTooltipData");
static_assert(sizeof(CoreMenuLoadoutPartWidget_SetLoadoutPartTooltipData) == 0x000090, "Wrong size on CoreMenuLoadoutPartWidget_SetLoadoutPartTooltipData");
static_assert(offsetof(CoreMenuLoadoutPartWidget_SetLoadoutPartTooltipData, tooltipData) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_SetLoadoutPartTooltipData::tooltipData' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetSelectedState
// 0x0001 (0x0001 - 0x0000)
struct CoreMenuLoadoutPartWidget_SetSelectedState final
{
public:
	bool                                          selectedState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuLoadoutPartWidget_SetSelectedState) == 0x000001, "Wrong alignment on CoreMenuLoadoutPartWidget_SetSelectedState");
static_assert(sizeof(CoreMenuLoadoutPartWidget_SetSelectedState) == 0x000001, "Wrong size on CoreMenuLoadoutPartWidget_SetSelectedState");
static_assert(offsetof(CoreMenuLoadoutPartWidget_SetSelectedState, selectedState) == 0x000000, "Member 'CoreMenuLoadoutPartWidget_SetSelectedState::selectedState' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuAddonWidget.GetWidgetParentDisplayName
// 0x0018 (0x0018 - 0x0000)
struct CoreMenuAddonWidget_GetWidgetParentDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuAddonWidget_GetWidgetParentDisplayName) == 0x000008, "Wrong alignment on CoreMenuAddonWidget_GetWidgetParentDisplayName");
static_assert(sizeof(CoreMenuAddonWidget_GetWidgetParentDisplayName) == 0x000018, "Wrong size on CoreMenuAddonWidget_GetWidgetParentDisplayName");
static_assert(offsetof(CoreMenuAddonWidget_GetWidgetParentDisplayName, ReturnValue) == 0x000000, "Member 'CoreMenuAddonWidget_GetWidgetParentDisplayName::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuAddonWidget.SetAddonDisabled
// 0x0001 (0x0001 - 0x0000)
struct CoreMenuAddonWidget_SetAddonDisabled final
{
public:
	bool                                          isParentAvailable;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuAddonWidget_SetAddonDisabled) == 0x000001, "Wrong alignment on CoreMenuAddonWidget_SetAddonDisabled");
static_assert(sizeof(CoreMenuAddonWidget_SetAddonDisabled) == 0x000001, "Wrong size on CoreMenuAddonWidget_SetAddonDisabled");
static_assert(offsetof(CoreMenuAddonWidget_SetAddonDisabled, isParentAvailable) == 0x000000, "Member 'CoreMenuAddonWidget_SetAddonDisabled::isParentAvailable' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuAddonWidget.SetMenuAddonData
// 0x0008 (0x0008 - 0x0000)
struct CoreMenuAddonWidget_SetMenuAddonData final
{
public:
	const class UMenuAddonViewData*               data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuAddonWidget_SetMenuAddonData) == 0x000008, "Wrong alignment on CoreMenuAddonWidget_SetMenuAddonData");
static_assert(sizeof(CoreMenuAddonWidget_SetMenuAddonData) == 0x000008, "Wrong size on CoreMenuAddonWidget_SetMenuAddonData");
static_assert(offsetof(CoreMenuAddonWidget_SetMenuAddonData, data) == 0x000000, "Member 'CoreMenuAddonWidget_SetMenuAddonData::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuAddonWidget.SetMenuAddonTooltipData
// 0x0090 (0x0090 - 0x0000)
struct CoreMenuAddonWidget_SetMenuAddonTooltipData final
{
public:
	struct FLoadoutTooltipData                    tooltipData;                                       // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuAddonWidget_SetMenuAddonTooltipData) == 0x000008, "Wrong alignment on CoreMenuAddonWidget_SetMenuAddonTooltipData");
static_assert(sizeof(CoreMenuAddonWidget_SetMenuAddonTooltipData) == 0x000090, "Wrong size on CoreMenuAddonWidget_SetMenuAddonTooltipData");
static_assert(offsetof(CoreMenuAddonWidget_SetMenuAddonTooltipData, tooltipData) == 0x000000, "Member 'CoreMenuAddonWidget_SetMenuAddonTooltipData::tooltipData' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuItemWidget.SetMenuItemData
// 0x0008 (0x0008 - 0x0000)
struct CoreMenuItemWidget_SetMenuItemData final
{
public:
	const class UMenuItemViewData*                data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuItemWidget_SetMenuItemData) == 0x000008, "Wrong alignment on CoreMenuItemWidget_SetMenuItemData");
static_assert(sizeof(CoreMenuItemWidget_SetMenuItemData) == 0x000008, "Wrong size on CoreMenuItemWidget_SetMenuItemData");
static_assert(offsetof(CoreMenuItemWidget_SetMenuItemData, data) == 0x000000, "Member 'CoreMenuItemWidget_SetMenuItemData::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuItemWidget.SetMenuItemTooltipData
// 0x0090 (0x0090 - 0x0000)
struct CoreMenuItemWidget_SetMenuItemTooltipData final
{
public:
	struct FLoadoutTooltipData                    tooltipData;                                       // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuItemWidget_SetMenuItemTooltipData) == 0x000008, "Wrong alignment on CoreMenuItemWidget_SetMenuItemTooltipData");
static_assert(sizeof(CoreMenuItemWidget_SetMenuItemTooltipData) == 0x000090, "Wrong size on CoreMenuItemWidget_SetMenuItemTooltipData");
static_assert(offsetof(CoreMenuItemWidget_SetMenuItemTooltipData, tooltipData) == 0x000000, "Member 'CoreMenuItemWidget_SetMenuItemTooltipData::tooltipData' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuOfferingWidget.SetMenuOfferingData
// 0x0008 (0x0008 - 0x0000)
struct CoreMenuOfferingWidget_SetMenuOfferingData final
{
public:
	const class UMenuOfferingViewData*            data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuOfferingWidget_SetMenuOfferingData) == 0x000008, "Wrong alignment on CoreMenuOfferingWidget_SetMenuOfferingData");
static_assert(sizeof(CoreMenuOfferingWidget_SetMenuOfferingData) == 0x000008, "Wrong size on CoreMenuOfferingWidget_SetMenuOfferingData");
static_assert(offsetof(CoreMenuOfferingWidget_SetMenuOfferingData, data) == 0x000000, "Member 'CoreMenuOfferingWidget_SetMenuOfferingData::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuOfferingWidget.SetMenuOfferingTooltipData
// 0x0090 (0x0090 - 0x0000)
struct CoreMenuOfferingWidget_SetMenuOfferingTooltipData final
{
public:
	struct FLoadoutTooltipData                    tooltipData;                                       // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuOfferingWidget_SetMenuOfferingTooltipData) == 0x000008, "Wrong alignment on CoreMenuOfferingWidget_SetMenuOfferingTooltipData");
static_assert(sizeof(CoreMenuOfferingWidget_SetMenuOfferingTooltipData) == 0x000090, "Wrong size on CoreMenuOfferingWidget_SetMenuOfferingTooltipData");
static_assert(offsetof(CoreMenuOfferingWidget_SetMenuOfferingTooltipData, tooltipData) == 0x000000, "Member 'CoreMenuOfferingWidget_SetMenuOfferingTooltipData::tooltipData' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuPerkWidget.SetMenuPerkData
// 0x0008 (0x0008 - 0x0000)
struct CoreMenuPerkWidget_SetMenuPerkData final
{
public:
	const class UMenuPerkViewData*                data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuPerkWidget_SetMenuPerkData) == 0x000008, "Wrong alignment on CoreMenuPerkWidget_SetMenuPerkData");
static_assert(sizeof(CoreMenuPerkWidget_SetMenuPerkData) == 0x000008, "Wrong size on CoreMenuPerkWidget_SetMenuPerkData");
static_assert(offsetof(CoreMenuPerkWidget_SetMenuPerkData, data) == 0x000000, "Member 'CoreMenuPerkWidget_SetMenuPerkData::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuPerkWidget.SetMenuPerkLevel
// 0x0004 (0x0004 - 0x0000)
struct CoreMenuPerkWidget_SetMenuPerkLevel final
{
public:
	int32                                         level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuPerkWidget_SetMenuPerkLevel) == 0x000004, "Wrong alignment on CoreMenuPerkWidget_SetMenuPerkLevel");
static_assert(sizeof(CoreMenuPerkWidget_SetMenuPerkLevel) == 0x000004, "Wrong size on CoreMenuPerkWidget_SetMenuPerkLevel");
static_assert(offsetof(CoreMenuPerkWidget_SetMenuPerkLevel, level) == 0x000000, "Member 'CoreMenuPerkWidget_SetMenuPerkLevel::level' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuPerkWidget.SetMenuPerkTooltipData
// 0x0090 (0x0090 - 0x0000)
struct CoreMenuPerkWidget_SetMenuPerkTooltipData final
{
public:
	struct FLoadoutTooltipData                    tooltipData;                                       // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuPerkWidget_SetMenuPerkTooltipData) == 0x000008, "Wrong alignment on CoreMenuPerkWidget_SetMenuPerkTooltipData");
static_assert(sizeof(CoreMenuPerkWidget_SetMenuPerkTooltipData) == 0x000090, "Wrong size on CoreMenuPerkWidget_SetMenuPerkTooltipData");
static_assert(offsetof(CoreMenuPerkWidget_SetMenuPerkTooltipData, tooltipData) == 0x000000, "Member 'CoreMenuPerkWidget_SetMenuPerkTooltipData::tooltipData' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuPowerWidget.SetMenuPowerData
// 0x0008 (0x0008 - 0x0000)
struct CoreMenuPowerWidget_SetMenuPowerData final
{
public:
	const class UMenuPowerViewData*               data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuPowerWidget_SetMenuPowerData) == 0x000008, "Wrong alignment on CoreMenuPowerWidget_SetMenuPowerData");
static_assert(sizeof(CoreMenuPowerWidget_SetMenuPowerData) == 0x000008, "Wrong size on CoreMenuPowerWidget_SetMenuPowerData");
static_assert(offsetof(CoreMenuPowerWidget_SetMenuPowerData, data) == 0x000000, "Member 'CoreMenuPowerWidget_SetMenuPowerData::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreMenuPowerWidget.SetMenuPowerTooltipData
// 0x0090 (0x0090 - 0x0000)
struct CoreMenuPowerWidget_SetMenuPowerTooltipData final
{
public:
	struct FLoadoutTooltipData                    tooltipData;                                       // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMenuPowerWidget_SetMenuPowerTooltipData) == 0x000008, "Wrong alignment on CoreMenuPowerWidget_SetMenuPowerTooltipData");
static_assert(sizeof(CoreMenuPowerWidget_SetMenuPowerTooltipData) == 0x000090, "Wrong size on CoreMenuPowerWidget_SetMenuPowerTooltipData");
static_assert(offsetof(CoreMenuPowerWidget_SetMenuPowerTooltipData, tooltipData) == 0x000000, "Member 'CoreMenuPowerWidget_SetMenuPowerTooltipData::tooltipData' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingButtonHolderWidget.GetStepId
// 0x0010 (0x0010 - 0x0000)
struct CoreOnboardingButtonHolderWidget_GetStepId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingButtonHolderWidget_GetStepId) == 0x000008, "Wrong alignment on CoreOnboardingButtonHolderWidget_GetStepId");
static_assert(sizeof(CoreOnboardingButtonHolderWidget_GetStepId) == 0x000010, "Wrong size on CoreOnboardingButtonHolderWidget_GetStepId");
static_assert(offsetof(CoreOnboardingButtonHolderWidget_GetStepId, ReturnValue) == 0x000000, "Member 'CoreOnboardingButtonHolderWidget_GetStepId::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingButtonHolderWidget.OnClickedTutorialButton
// 0x0008 (0x0008 - 0x0000)
struct CoreOnboardingButtonHolderWidget_OnClickedTutorialButton final
{
public:
	class UCoreButtonWidget*                      ClickedTutorialButton;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingButtonHolderWidget_OnClickedTutorialButton) == 0x000008, "Wrong alignment on CoreOnboardingButtonHolderWidget_OnClickedTutorialButton");
static_assert(sizeof(CoreOnboardingButtonHolderWidget_OnClickedTutorialButton) == 0x000008, "Wrong size on CoreOnboardingButtonHolderWidget_OnClickedTutorialButton");
static_assert(offsetof(CoreOnboardingButtonHolderWidget_OnClickedTutorialButton, ClickedTutorialButton) == 0x000000, "Member 'CoreOnboardingButtonHolderWidget_OnClickedTutorialButton::ClickedTutorialButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.SetOnboardingMenuDoubleTitle
// 0x0030 (0x0030 - 0x0000)
struct CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle final
{
public:
	class FText                                   menuTitle;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   menuSubTitle;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle) == 0x000008, "Wrong alignment on CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle");
static_assert(sizeof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle) == 0x000030, "Wrong size on CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle");
static_assert(offsetof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle, menuTitle) == 0x000000, "Member 'CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle::menuTitle' has a wrong offset!");
static_assert(offsetof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle, menuSubTitle) == 0x000018, "Member 'CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle::menuSubTitle' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.SetOnboardingMenuSubtitle
// 0x0018 (0x0018 - 0x0000)
struct CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle final
{
public:
	class FText                                   menuTitle;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle) == 0x000008, "Wrong alignment on CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle");
static_assert(sizeof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle) == 0x000018, "Wrong size on CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle");
static_assert(offsetof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle, menuTitle) == 0x000000, "Member 'CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle::menuTitle' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.SetOnboardingMenuTitle
// 0x0018 (0x0018 - 0x0000)
struct CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle final
{
public:
	class FText                                   menuTitle;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle) == 0x000008, "Wrong alignment on CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle");
static_assert(sizeof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle) == 0x000018, "Wrong size on CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle");
static_assert(offsetof(CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle, menuTitle) == 0x000000, "Member 'CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle::menuTitle' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingMenuWidget.OnMenuTabSelected
// 0x0008 (0x0008 - 0x0000)
struct CoreOnboardingMenuWidget_OnMenuTabSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingMenuWidget_OnMenuTabSelected) == 0x000008, "Wrong alignment on CoreOnboardingMenuWidget_OnMenuTabSelected");
static_assert(sizeof(CoreOnboardingMenuWidget_OnMenuTabSelected) == 0x000008, "Wrong size on CoreOnboardingMenuWidget_OnMenuTabSelected");
static_assert(offsetof(CoreOnboardingMenuWidget_OnMenuTabSelected, selectedButton) == 0x000000, "Member 'CoreOnboardingMenuWidget_OnMenuTabSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingMenuWidget.OnMenuTabSelectedAgain
// 0x0008 (0x0008 - 0x0000)
struct CoreOnboardingMenuWidget_OnMenuTabSelectedAgain final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingMenuWidget_OnMenuTabSelectedAgain) == 0x000008, "Wrong alignment on CoreOnboardingMenuWidget_OnMenuTabSelectedAgain");
static_assert(sizeof(CoreOnboardingMenuWidget_OnMenuTabSelectedAgain) == 0x000008, "Wrong size on CoreOnboardingMenuWidget_OnMenuTabSelectedAgain");
static_assert(offsetof(CoreOnboardingMenuWidget_OnMenuTabSelectedAgain, selectedButton) == 0x000000, "Member 'CoreOnboardingMenuWidget_OnMenuTabSelectedAgain::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingMenuWidget.SetBackButton
// 0x0001 (0x0001 - 0x0000)
struct CoreOnboardingMenuWidget_SetBackButton final
{
public:
	bool                                          isFTUE;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingMenuWidget_SetBackButton) == 0x000001, "Wrong alignment on CoreOnboardingMenuWidget_SetBackButton");
static_assert(sizeof(CoreOnboardingMenuWidget_SetBackButton) == 0x000001, "Wrong size on CoreOnboardingMenuWidget_SetBackButton");
static_assert(offsetof(CoreOnboardingMenuWidget_SetBackButton, isFTUE) == 0x000000, "Member 'CoreOnboardingMenuWidget_SetBackButton::isFTUE' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingMenuWidget.SetTitleText
// 0x0001 (0x0001 - 0x0000)
struct CoreOnboardingMenuWidget_SetTitleText final
{
public:
	bool                                          isInTutorial;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingMenuWidget_SetTitleText) == 0x000001, "Wrong alignment on CoreOnboardingMenuWidget_SetTitleText");
static_assert(sizeof(CoreOnboardingMenuWidget_SetTitleText) == 0x000001, "Wrong size on CoreOnboardingMenuWidget_SetTitleText");
static_assert(offsetof(CoreOnboardingMenuWidget_SetTitleText, isInTutorial) == 0x000000, "Member 'CoreOnboardingMenuWidget_SetTitleText::isInTutorial' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.OnRewardClicked
// 0x0008 (0x0008 - 0x0000)
struct CoreOnboardingTutorialButtonWidget_OnRewardClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialButtonWidget_OnRewardClicked) == 0x000008, "Wrong alignment on CoreOnboardingTutorialButtonWidget_OnRewardClicked");
static_assert(sizeof(CoreOnboardingTutorialButtonWidget_OnRewardClicked) == 0x000008, "Wrong size on CoreOnboardingTutorialButtonWidget_OnRewardClicked");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_OnRewardClicked, buttonTarget) == 0x000000, "Member 'CoreOnboardingTutorialButtonWidget_OnRewardClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.OnRewardPressed
// 0x0008 (0x0008 - 0x0000)
struct CoreOnboardingTutorialButtonWidget_OnRewardPressed final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialButtonWidget_OnRewardPressed) == 0x000008, "Wrong alignment on CoreOnboardingTutorialButtonWidget_OnRewardPressed");
static_assert(sizeof(CoreOnboardingTutorialButtonWidget_OnRewardPressed) == 0x000008, "Wrong size on CoreOnboardingTutorialButtonWidget_OnRewardPressed");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_OnRewardPressed, buttonTarget) == 0x000000, "Member 'CoreOnboardingTutorialButtonWidget_OnRewardPressed::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.OnRewardReleased
// 0x0008 (0x0008 - 0x0000)
struct CoreOnboardingTutorialButtonWidget_OnRewardReleased final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialButtonWidget_OnRewardReleased) == 0x000008, "Wrong alignment on CoreOnboardingTutorialButtonWidget_OnRewardReleased");
static_assert(sizeof(CoreOnboardingTutorialButtonWidget_OnRewardReleased) == 0x000008, "Wrong size on CoreOnboardingTutorialButtonWidget_OnRewardReleased");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_OnRewardReleased, buttonTarget) == 0x000000, "Member 'CoreOnboardingTutorialButtonWidget_OnRewardReleased::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetData
// 0x0080 (0x0080 - 0x0000)
struct CoreOnboardingTutorialButtonWidget_SetData final
{
public:
	struct FOnboardingTutorialButtonViewData      viewData;                                          // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          isRefreshingWithAnimation;                         // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreOnboardingTutorialButtonWidget_SetData) == 0x000008, "Wrong alignment on CoreOnboardingTutorialButtonWidget_SetData");
static_assert(sizeof(CoreOnboardingTutorialButtonWidget_SetData) == 0x000080, "Wrong size on CoreOnboardingTutorialButtonWidget_SetData");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_SetData, viewData) == 0x000000, "Member 'CoreOnboardingTutorialButtonWidget_SetData::viewData' has a wrong offset!");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_SetData, isRefreshingWithAnimation) == 0x000078, "Member 'CoreOnboardingTutorialButtonWidget_SetData::isRefreshingWithAnimation' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetIsKillSwitch
// 0x0001 (0x0001 - 0x0000)
struct CoreOnboardingTutorialButtonWidget_SetIsKillSwitch final
{
public:
	bool                                          isKillSwitch;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialButtonWidget_SetIsKillSwitch) == 0x000001, "Wrong alignment on CoreOnboardingTutorialButtonWidget_SetIsKillSwitch");
static_assert(sizeof(CoreOnboardingTutorialButtonWidget_SetIsKillSwitch) == 0x000001, "Wrong size on CoreOnboardingTutorialButtonWidget_SetIsKillSwitch");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_SetIsKillSwitch, isKillSwitch) == 0x000000, "Member 'CoreOnboardingTutorialButtonWidget_SetIsKillSwitch::isKillSwitch' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetUIEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreOnboardingTutorialButtonWidget_SetUIEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialButtonWidget_SetUIEnabled) == 0x000001, "Wrong alignment on CoreOnboardingTutorialButtonWidget_SetUIEnabled");
static_assert(sizeof(CoreOnboardingTutorialButtonWidget_SetUIEnabled) == 0x000001, "Wrong size on CoreOnboardingTutorialButtonWidget_SetUIEnabled");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_SetUIEnabled, enabled) == 0x000000, "Member 'CoreOnboardingTutorialButtonWidget_SetUIEnabled::enabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.IsInUnavailableStep
// 0x0001 (0x0001 - 0x0000)
struct CoreOnboardingTutorialButtonWidget_IsInUnavailableStep final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialButtonWidget_IsInUnavailableStep) == 0x000001, "Wrong alignment on CoreOnboardingTutorialButtonWidget_IsInUnavailableStep");
static_assert(sizeof(CoreOnboardingTutorialButtonWidget_IsInUnavailableStep) == 0x000001, "Wrong size on CoreOnboardingTutorialButtonWidget_IsInUnavailableStep");
static_assert(offsetof(CoreOnboardingTutorialButtonWidget_IsInUnavailableStep, ReturnValue) == 0x000000, "Member 'CoreOnboardingTutorialButtonWidget_IsInUnavailableStep::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.SetTutorialDescription
// 0x0020 (0x0020 - 0x0000)
struct CoreOnboardingTutorialPanelWidget_SetTutorialDescription final
{
public:
	class FText                                   description;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          isWarning;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreOnboardingTutorialPanelWidget_SetTutorialDescription) == 0x000008, "Wrong alignment on CoreOnboardingTutorialPanelWidget_SetTutorialDescription");
static_assert(sizeof(CoreOnboardingTutorialPanelWidget_SetTutorialDescription) == 0x000020, "Wrong size on CoreOnboardingTutorialPanelWidget_SetTutorialDescription");
static_assert(offsetof(CoreOnboardingTutorialPanelWidget_SetTutorialDescription, description) == 0x000000, "Member 'CoreOnboardingTutorialPanelWidget_SetTutorialDescription::description' has a wrong offset!");
static_assert(offsetof(CoreOnboardingTutorialPanelWidget_SetTutorialDescription, isWarning) == 0x000018, "Member 'CoreOnboardingTutorialPanelWidget_SetTutorialDescription::isWarning' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.SetTutorialSeparators
// 0x0010 (0x0010 - 0x0000)
struct CoreOnboardingTutorialPanelWidget_SetTutorialSeparators final
{
public:
	class FString                                 completedStepId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialPanelWidget_SetTutorialSeparators) == 0x000008, "Wrong alignment on CoreOnboardingTutorialPanelWidget_SetTutorialSeparators");
static_assert(sizeof(CoreOnboardingTutorialPanelWidget_SetTutorialSeparators) == 0x000010, "Wrong size on CoreOnboardingTutorialPanelWidget_SetTutorialSeparators");
static_assert(offsetof(CoreOnboardingTutorialPanelWidget_SetTutorialSeparators, completedStepId) == 0x000000, "Member 'CoreOnboardingTutorialPanelWidget_SetTutorialSeparators::completedStepId' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.TryBroadcastSelectedTutorial
// 0x0008 (0x0008 - 0x0000)
struct CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial) == 0x000008, "Wrong alignment on CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial");
static_assert(sizeof(CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial) == 0x000008, "Wrong size on CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial");
static_assert(offsetof(CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial, buttonTarget) == 0x000000, "Member 'CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnHoverBorderWidget.BindToButton
// 0x0008 (0x0008 - 0x0000)
struct CoreOnHoverBorderWidget_BindToButton final
{
public:
	class UCoreButtonWidget*                      buttonToBindOn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnHoverBorderWidget_BindToButton) == 0x000008, "Wrong alignment on CoreOnHoverBorderWidget_BindToButton");
static_assert(sizeof(CoreOnHoverBorderWidget_BindToButton) == 0x000008, "Wrong size on CoreOnHoverBorderWidget_BindToButton");
static_assert(offsetof(CoreOnHoverBorderWidget_BindToButton, buttonToBindOn) == 0x000000, "Member 'CoreOnHoverBorderWidget_BindToButton::buttonToBindOn' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnHoverBorderWidget.PlayHoveredAnimation
// 0x0001 (0x0001 - 0x0000)
struct CoreOnHoverBorderWidget_PlayHoveredAnimation final
{
public:
	bool                                          playForward;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnHoverBorderWidget_PlayHoveredAnimation) == 0x000001, "Wrong alignment on CoreOnHoverBorderWidget_PlayHoveredAnimation");
static_assert(sizeof(CoreOnHoverBorderWidget_PlayHoveredAnimation) == 0x000001, "Wrong size on CoreOnHoverBorderWidget_PlayHoveredAnimation");
static_assert(offsetof(CoreOnHoverBorderWidget_PlayHoveredAnimation, playForward) == 0x000000, "Member 'CoreOnHoverBorderWidget_PlayHoveredAnimation::playForward' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnHoverBorderWidget.PlayPressedAnimation
// 0x0001 (0x0001 - 0x0000)
struct CoreOnHoverBorderWidget_PlayPressedAnimation final
{
public:
	bool                                          playForward;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnHoverBorderWidget_PlayPressedAnimation) == 0x000001, "Wrong alignment on CoreOnHoverBorderWidget_PlayPressedAnimation");
static_assert(sizeof(CoreOnHoverBorderWidget_PlayPressedAnimation) == 0x000001, "Wrong size on CoreOnHoverBorderWidget_PlayPressedAnimation");
static_assert(offsetof(CoreOnHoverBorderWidget_PlayPressedAnimation, playForward) == 0x000000, "Member 'CoreOnHoverBorderWidget_PlayPressedAnimation::playForward' has a wrong offset!");

// Function DBDUIViewsCore.CoreOnHoverBorderWidget.UpdateColors
// 0x0020 (0x0020 - 0x0000)
struct CoreOnHoverBorderWidget_UpdateColors final
{
public:
	struct FLinearColor                           progressBarColor;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           backgroundColor;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreOnHoverBorderWidget_UpdateColors) == 0x000004, "Wrong alignment on CoreOnHoverBorderWidget_UpdateColors");
static_assert(sizeof(CoreOnHoverBorderWidget_UpdateColors) == 0x000020, "Wrong size on CoreOnHoverBorderWidget_UpdateColors");
static_assert(offsetof(CoreOnHoverBorderWidget_UpdateColors, progressBarColor) == 0x000000, "Member 'CoreOnHoverBorderWidget_UpdateColors::progressBarColor' has a wrong offset!");
static_assert(offsetof(CoreOnHoverBorderWidget_UpdateColors, backgroundColor) == 0x000010, "Member 'CoreOnHoverBorderWidget_UpdateColors::backgroundColor' has a wrong offset!");

// Function DBDUIViewsCore.CorePaginationContainerWidget.GetCurrentPage
// 0x0004 (0x0004 - 0x0000)
struct CorePaginationContainerWidget_GetCurrentPage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePaginationContainerWidget_GetCurrentPage) == 0x000004, "Wrong alignment on CorePaginationContainerWidget_GetCurrentPage");
static_assert(sizeof(CorePaginationContainerWidget_GetCurrentPage) == 0x000004, "Wrong size on CorePaginationContainerWidget_GetCurrentPage");
static_assert(offsetof(CorePaginationContainerWidget_GetCurrentPage, ReturnValue) == 0x000000, "Member 'CorePaginationContainerWidget_GetCurrentPage::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePaginationContainerWidget.OnPaginationSelected
// 0x0008 (0x0008 - 0x0000)
struct CorePaginationContainerWidget_OnPaginationSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePaginationContainerWidget_OnPaginationSelected) == 0x000008, "Wrong alignment on CorePaginationContainerWidget_OnPaginationSelected");
static_assert(sizeof(CorePaginationContainerWidget_OnPaginationSelected) == 0x000008, "Wrong size on CorePaginationContainerWidget_OnPaginationSelected");
static_assert(offsetof(CorePaginationContainerWidget_OnPaginationSelected, selectedButton) == 0x000000, "Member 'CorePaginationContainerWidget_OnPaginationSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CorePaginationContainerWidget.UpdateSelectedWidget
// 0x0008 (0x0008 - 0x0000)
struct CorePaginationContainerWidget_UpdateSelectedWidget final
{
public:
	int32                                         currentIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         numberOfPages;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePaginationContainerWidget_UpdateSelectedWidget) == 0x000004, "Wrong alignment on CorePaginationContainerWidget_UpdateSelectedWidget");
static_assert(sizeof(CorePaginationContainerWidget_UpdateSelectedWidget) == 0x000008, "Wrong size on CorePaginationContainerWidget_UpdateSelectedWidget");
static_assert(offsetof(CorePaginationContainerWidget_UpdateSelectedWidget, currentIndex) == 0x000000, "Member 'CorePaginationContainerWidget_UpdateSelectedWidget::currentIndex' has a wrong offset!");
static_assert(offsetof(CorePaginationContainerWidget_UpdateSelectedWidget, numberOfPages) == 0x000004, "Member 'CorePaginationContainerWidget_UpdateSelectedWidget::numberOfPages' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerNameWidget.SetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct CorePlayerNameWidget_SetPlayerName final
{
public:
	class FText                                   playerName;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerNameWidget_SetPlayerName) == 0x000008, "Wrong alignment on CorePlayerNameWidget_SetPlayerName");
static_assert(sizeof(CorePlayerNameWidget_SetPlayerName) == 0x000018, "Wrong size on CorePlayerNameWidget_SetPlayerName");
static_assert(offsetof(CorePlayerNameWidget_SetPlayerName, playerName) == 0x000000, "Member 'CorePlayerNameWidget_SetPlayerName::playerName' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusKillerEffectWidget.SetKillerData
// 0x0048 (0x0048 - 0x0000)
struct CorePlayerStatusKillerEffectWidget_SetKillerData final
{
public:
	struct FPlayerStatusViewData                  data;                                              // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerStatusKillerEffectWidget_SetKillerData) == 0x000008, "Wrong alignment on CorePlayerStatusKillerEffectWidget_SetKillerData");
static_assert(sizeof(CorePlayerStatusKillerEffectWidget_SetKillerData) == 0x000048, "Wrong size on CorePlayerStatusKillerEffectWidget_SetKillerData");
static_assert(offsetof(CorePlayerStatusKillerEffectWidget_SetKillerData, data) == 0x000000, "Member 'CorePlayerStatusKillerEffectWidget_SetKillerData::data' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.CacheViewData
// 0x0090 (0x0090 - 0x0000)
struct CorePlayerStatusWidget_CacheViewData final
{
public:
	struct FPlayerStatusViewData                  data;                                              // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FPlayerStatusViewData                  ReturnValue;                                       // 0x0048(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerStatusWidget_CacheViewData) == 0x000008, "Wrong alignment on CorePlayerStatusWidget_CacheViewData");
static_assert(sizeof(CorePlayerStatusWidget_CacheViewData) == 0x000090, "Wrong size on CorePlayerStatusWidget_CacheViewData");
static_assert(offsetof(CorePlayerStatusWidget_CacheViewData, data) == 0x000000, "Member 'CorePlayerStatusWidget_CacheViewData::data' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_CacheViewData, ReturnValue) == 0x000048, "Member 'CorePlayerStatusWidget_CacheViewData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.GetKillerStatusDataMappingDB
// 0x0008 (0x0008 - 0x0000)
struct CorePlayerStatusWidget_GetKillerStatusDataMappingDB final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerStatusWidget_GetKillerStatusDataMappingDB) == 0x000008, "Wrong alignment on CorePlayerStatusWidget_GetKillerStatusDataMappingDB");
static_assert(sizeof(CorePlayerStatusWidget_GetKillerStatusDataMappingDB) == 0x000008, "Wrong size on CorePlayerStatusWidget_GetKillerStatusDataMappingDB");
static_assert(offsetof(CorePlayerStatusWidget_GetKillerStatusDataMappingDB, ReturnValue) == 0x000000, "Member 'CorePlayerStatusWidget_GetKillerStatusDataMappingDB::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.GetKillerStatusEffectWidget
// 0x0008 (0x0008 - 0x0000)
struct CorePlayerStatusWidget_GetKillerStatusEffectWidget final
{
public:
	class UCorePlayerStatusKillerEffectWidget*    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerStatusWidget_GetKillerStatusEffectWidget) == 0x000008, "Wrong alignment on CorePlayerStatusWidget_GetKillerStatusEffectWidget");
static_assert(sizeof(CorePlayerStatusWidget_GetKillerStatusEffectWidget) == 0x000008, "Wrong size on CorePlayerStatusWidget_GetKillerStatusEffectWidget");
static_assert(offsetof(CorePlayerStatusWidget_GetKillerStatusEffectWidget, ReturnValue) == 0x000000, "Member 'CorePlayerStatusWidget_GetKillerStatusEffectWidget::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.GetPlayerStateChangeType
// 0x0050 (0x0050 - 0x0000)
struct CorePlayerStatusWidget_GetPlayerStateChangeType final
{
public:
	struct FPlayerStatusViewData                  newViewData;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EPlayerStateChangeType                        ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerStatusWidget_GetPlayerStateChangeType) == 0x000008, "Wrong alignment on CorePlayerStatusWidget_GetPlayerStateChangeType");
static_assert(sizeof(CorePlayerStatusWidget_GetPlayerStateChangeType) == 0x000050, "Wrong size on CorePlayerStatusWidget_GetPlayerStateChangeType");
static_assert(offsetof(CorePlayerStatusWidget_GetPlayerStateChangeType, newViewData) == 0x000000, "Member 'CorePlayerStatusWidget_GetPlayerStateChangeType::newViewData' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_GetPlayerStateChangeType, ReturnValue) == 0x000048, "Member 'CorePlayerStatusWidget_GetPlayerStateChangeType::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.HasKillerStatusDataChanged
// 0x0050 (0x0050 - 0x0000)
struct CorePlayerStatusWidget_HasKillerStatusDataChanged final
{
public:
	struct FPlayerStatusViewData                  newViewData;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerStatusWidget_HasKillerStatusDataChanged) == 0x000008, "Wrong alignment on CorePlayerStatusWidget_HasKillerStatusDataChanged");
static_assert(sizeof(CorePlayerStatusWidget_HasKillerStatusDataChanged) == 0x000050, "Wrong size on CorePlayerStatusWidget_HasKillerStatusDataChanged");
static_assert(offsetof(CorePlayerStatusWidget_HasKillerStatusDataChanged, newViewData) == 0x000000, "Member 'CorePlayerStatusWidget_HasKillerStatusDataChanged::newViewData' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_HasKillerStatusDataChanged, ReturnValue) == 0x000048, "Member 'CorePlayerStatusWidget_HasKillerStatusDataChanged::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.HasObsessionStateChanged
// 0x0002 (0x0002 - 0x0000)
struct CorePlayerStatusWidget_HasObsessionStateChanged final
{
public:
	EObsessionUIState                             newObsessionState;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerStatusWidget_HasObsessionStateChanged) == 0x000001, "Wrong alignment on CorePlayerStatusWidget_HasObsessionStateChanged");
static_assert(sizeof(CorePlayerStatusWidget_HasObsessionStateChanged) == 0x000002, "Wrong size on CorePlayerStatusWidget_HasObsessionStateChanged");
static_assert(offsetof(CorePlayerStatusWidget_HasObsessionStateChanged, newObsessionState) == 0x000000, "Member 'CorePlayerStatusWidget_HasObsessionStateChanged::newObsessionState' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_HasObsessionStateChanged, ReturnValue) == 0x000001, "Member 'CorePlayerStatusWidget_HasObsessionStateChanged::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.HasPlayerStateChanged
// 0x0002 (0x0002 - 0x0000)
struct CorePlayerStatusWidget_HasPlayerStateChanged final
{
public:
	EPlayerStatus                                 newPlayerState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerStatusWidget_HasPlayerStateChanged) == 0x000001, "Wrong alignment on CorePlayerStatusWidget_HasPlayerStateChanged");
static_assert(sizeof(CorePlayerStatusWidget_HasPlayerStateChanged) == 0x000002, "Wrong size on CorePlayerStatusWidget_HasPlayerStateChanged");
static_assert(offsetof(CorePlayerStatusWidget_HasPlayerStateChanged, newPlayerState) == 0x000000, "Member 'CorePlayerStatusWidget_HasPlayerStateChanged::newPlayerState' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_HasPlayerStateChanged, ReturnValue) == 0x000001, "Member 'CorePlayerStatusWidget_HasPlayerStateChanged::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.HasPlayerStatusDataChanged
// 0x0050 (0x0050 - 0x0000)
struct CorePlayerStatusWidget_HasPlayerStatusDataChanged final
{
public:
	struct FPlayerStatusViewData                  newViewData;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerStatusWidget_HasPlayerStatusDataChanged) == 0x000008, "Wrong alignment on CorePlayerStatusWidget_HasPlayerStatusDataChanged");
static_assert(sizeof(CorePlayerStatusWidget_HasPlayerStatusDataChanged) == 0x000050, "Wrong size on CorePlayerStatusWidget_HasPlayerStatusDataChanged");
static_assert(offsetof(CorePlayerStatusWidget_HasPlayerStatusDataChanged, newViewData) == 0x000000, "Member 'CorePlayerStatusWidget_HasPlayerStatusDataChanged::newViewData' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_HasPlayerStatusDataChanged, ReturnValue) == 0x000048, "Member 'CorePlayerStatusWidget_HasPlayerStatusDataChanged::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.HasTimerProgressChanged
// 0x0008 (0x0008 - 0x0000)
struct CorePlayerStatusWidget_HasTimerProgressChanged final
{
public:
	float                                         newTimerProgress;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePlayerStatusWidget_HasTimerProgressChanged) == 0x000004, "Wrong alignment on CorePlayerStatusWidget_HasTimerProgressChanged");
static_assert(sizeof(CorePlayerStatusWidget_HasTimerProgressChanged) == 0x000008, "Wrong size on CorePlayerStatusWidget_HasTimerProgressChanged");
static_assert(offsetof(CorePlayerStatusWidget_HasTimerProgressChanged, newTimerProgress) == 0x000000, "Member 'CorePlayerStatusWidget_HasTimerProgressChanged::newTimerProgress' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_HasTimerProgressChanged, ReturnValue) == 0x000004, "Member 'CorePlayerStatusWidget_HasTimerProgressChanged::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePlayerStatusWidget.ShouldPlaySleepAnimation
// 0x0002 (0x0002 - 0x0000)
struct CorePlayerStatusWidget_ShouldPlaySleepAnimation final
{
public:
	ESleepingUIState                              newSleepState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePlayerStatusWidget_ShouldPlaySleepAnimation) == 0x000001, "Wrong alignment on CorePlayerStatusWidget_ShouldPlaySleepAnimation");
static_assert(sizeof(CorePlayerStatusWidget_ShouldPlaySleepAnimation) == 0x000002, "Wrong size on CorePlayerStatusWidget_ShouldPlaySleepAnimation");
static_assert(offsetof(CorePlayerStatusWidget_ShouldPlaySleepAnimation, newSleepState) == 0x000000, "Member 'CorePlayerStatusWidget_ShouldPlaySleepAnimation::newSleepState' has a wrong offset!");
static_assert(offsetof(CorePlayerStatusWidget_ShouldPlaySleepAnimation, ReturnValue) == 0x000001, "Member 'CorePlayerStatusWidget_ShouldPlaySleepAnimation::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CorePresetWidgetContainer.SetPreset
// 0x0018 (0x0018 - 0x0000)
struct CorePresetWidgetContainer_SetPreset final
{
public:
	TArray<int32>                                 presetData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         selectedPreset;                                    // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CorePresetWidgetContainer_SetPreset) == 0x000008, "Wrong alignment on CorePresetWidgetContainer_SetPreset");
static_assert(sizeof(CorePresetWidgetContainer_SetPreset) == 0x000018, "Wrong size on CorePresetWidgetContainer_SetPreset");
static_assert(offsetof(CorePresetWidgetContainer_SetPreset, presetData) == 0x000000, "Member 'CorePresetWidgetContainer_SetPreset::presetData' has a wrong offset!");
static_assert(offsetof(CorePresetWidgetContainer_SetPreset, selectedPreset) == 0x000010, "Member 'CorePresetWidgetContainer_SetPreset::selectedPreset' has a wrong offset!");

// Function DBDUIViewsCore.CorePresetWidgetContainer.SetSelectedPreset
// 0x0008 (0x0008 - 0x0000)
struct CorePresetWidgetContainer_SetSelectedPreset final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorePresetWidgetContainer_SetSelectedPreset) == 0x000008, "Wrong alignment on CorePresetWidgetContainer_SetSelectedPreset");
static_assert(sizeof(CorePresetWidgetContainer_SetSelectedPreset) == 0x000008, "Wrong size on CorePresetWidgetContainer_SetSelectedPreset");
static_assert(offsetof(CorePresetWidgetContainer_SetSelectedPreset, selectedButton) == 0x000000, "Member 'CorePresetWidgetContainer_SetSelectedPreset::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWrapperWidget.GetRewardWidget
// 0x0008 (0x0008 - 0x0000)
struct CoreRewardWrapperWidget_GetRewardWidget final
{
public:
	class UCoreRewardWidget*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWrapperWidget_GetRewardWidget) == 0x000008, "Wrong alignment on CoreRewardWrapperWidget_GetRewardWidget");
static_assert(sizeof(CoreRewardWrapperWidget_GetRewardWidget) == 0x000008, "Wrong size on CoreRewardWrapperWidget_GetRewardWidget");
static_assert(offsetof(CoreRewardWrapperWidget_GetRewardWidget, ReturnValue) == 0x000000, "Member 'CoreRewardWrapperWidget_GetRewardWidget::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetData
// 0x0340 (0x0340 - 0x0000)
struct CoreRewardWrapperWidget_SetData final
{
public:
	struct FRewardWrapperViewData                 viewData;                                          // 0x0000(0x0340)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWrapperWidget_SetData) == 0x000008, "Wrong alignment on CoreRewardWrapperWidget_SetData");
static_assert(sizeof(CoreRewardWrapperWidget_SetData) == 0x000340, "Wrong size on CoreRewardWrapperWidget_SetData");
static_assert(offsetof(CoreRewardWrapperWidget_SetData, viewData) == 0x000000, "Member 'CoreRewardWrapperWidget_SetData::viewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetIsClickable
// 0x0001 (0x0001 - 0x0000)
struct CoreRewardWrapperWidget_SetIsClickable final
{
public:
	bool                                          isClickable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWrapperWidget_SetIsClickable) == 0x000001, "Wrong alignment on CoreRewardWrapperWidget_SetIsClickable");
static_assert(sizeof(CoreRewardWrapperWidget_SetIsClickable) == 0x000001, "Wrong size on CoreRewardWrapperWidget_SetIsClickable");
static_assert(offsetof(CoreRewardWrapperWidget_SetIsClickable, isClickable) == 0x000000, "Member 'CoreRewardWrapperWidget_SetIsClickable::isClickable' has a wrong offset!");

// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetIsLocked
// 0x0002 (0x0002 - 0x0000)
struct CoreRewardWrapperWidget_SetIsLocked final
{
public:
	bool                                          isLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          playAnimation;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreRewardWrapperWidget_SetIsLocked) == 0x000001, "Wrong alignment on CoreRewardWrapperWidget_SetIsLocked");
static_assert(sizeof(CoreRewardWrapperWidget_SetIsLocked) == 0x000002, "Wrong size on CoreRewardWrapperWidget_SetIsLocked");
static_assert(offsetof(CoreRewardWrapperWidget_SetIsLocked, isLocked) == 0x000000, "Member 'CoreRewardWrapperWidget_SetIsLocked::isLocked' has a wrong offset!");
static_assert(offsetof(CoreRewardWrapperWidget_SetIsLocked, playAnimation) == 0x000001, "Member 'CoreRewardWrapperWidget_SetIsLocked::playAnimation' has a wrong offset!");

// Function DBDUIViewsCore.CoreScreenIndicatorsContainerWidget.GetScreenIndicatorsMap
// 0x0050 (0x0050 - 0x0000)
struct CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap final
{
public:
	TMap<class FString, class UCoreScreenIndicatorWidget*> ReturnValue;                              // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap) == 0x000008, "Wrong alignment on CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap");
static_assert(sizeof(CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap) == 0x000050, "Wrong size on CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap");
static_assert(offsetof(CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap, ReturnValue) == 0x000000, "Member 'CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreScreenIndicatorsContainerWidget.FindScreenIndicatorKey
// 0x0018 (0x0018 - 0x0000)
struct CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey final
{
public:
	class UCoreScreenIndicatorWidget*             value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey) == 0x000008, "Wrong alignment on CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey");
static_assert(sizeof(CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey) == 0x000018, "Wrong size on CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey");
static_assert(offsetof(CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey, value) == 0x000000, "Member 'CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey::value' has a wrong offset!");
static_assert(offsetof(CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey, ReturnValue) == 0x000008, "Member 'CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreScreenIndicatorWidget.SetData
// 0x0038 (0x0038 - 0x0000)
struct CoreScreenIndicatorWidget_SetData final
{
public:
	struct FScreenIndicatorViewData               data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreScreenIndicatorWidget_SetData) == 0x000008, "Wrong alignment on CoreScreenIndicatorWidget_SetData");
static_assert(sizeof(CoreScreenIndicatorWidget_SetData) == 0x000038, "Wrong size on CoreScreenIndicatorWidget_SetData");
static_assert(offsetof(CoreScreenIndicatorWidget_SetData, data) == 0x000000, "Member 'CoreScreenIndicatorWidget_SetData::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreStartSequenceWidget.OnHideStartSequenceComplete
// 0x0008 (0x0008 - 0x0000)
struct CoreStartSequenceWidget_OnHideStartSequenceComplete final
{
public:
	class UUITweenInstance*                       tween;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStartSequenceWidget_OnHideStartSequenceComplete) == 0x000008, "Wrong alignment on CoreStartSequenceWidget_OnHideStartSequenceComplete");
static_assert(sizeof(CoreStartSequenceWidget_OnHideStartSequenceComplete) == 0x000008, "Wrong size on CoreStartSequenceWidget_OnHideStartSequenceComplete");
static_assert(offsetof(CoreStartSequenceWidget_OnHideStartSequenceComplete, tween) == 0x000000, "Member 'CoreStartSequenceWidget_OnHideStartSequenceComplete::tween' has a wrong offset!");

// Function DBDUIViewsCore.CoreStatusEffectIcon.GetStatusEffectData
// 0x0050 (0x0050 - 0x0000)
struct CoreStatusEffectIcon_GetStatusEffectData final
{
public:
	struct FStatusEffectViewData                  ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStatusEffectIcon_GetStatusEffectData) == 0x000008, "Wrong alignment on CoreStatusEffectIcon_GetStatusEffectData");
static_assert(sizeof(CoreStatusEffectIcon_GetStatusEffectData) == 0x000050, "Wrong size on CoreStatusEffectIcon_GetStatusEffectData");
static_assert(offsetof(CoreStatusEffectIcon_GetStatusEffectData, ReturnValue) == 0x000000, "Member 'CoreStatusEffectIcon_GetStatusEffectData::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStatusEffectIcon.SetInactiveTicks
// 0x0004 (0x0004 - 0x0000)
struct CoreStatusEffectIcon_SetInactiveTicks final
{
public:
	int32                                         inactiveTicks;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStatusEffectIcon_SetInactiveTicks) == 0x000004, "Wrong alignment on CoreStatusEffectIcon_SetInactiveTicks");
static_assert(sizeof(CoreStatusEffectIcon_SetInactiveTicks) == 0x000004, "Wrong size on CoreStatusEffectIcon_SetInactiveTicks");
static_assert(offsetof(CoreStatusEffectIcon_SetInactiveTicks, inactiveTicks) == 0x000000, "Member 'CoreStatusEffectIcon_SetInactiveTicks::inactiveTicks' has a wrong offset!");

// Function DBDUIViewsCore.CoreStatusEffectIcon.SetStatusEffectData
// 0x0050 (0x0050 - 0x0000)
struct CoreStatusEffectIcon_SetStatusEffectData final
{
public:
	struct FStatusEffectViewData                  data;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStatusEffectIcon_SetStatusEffectData) == 0x000008, "Wrong alignment on CoreStatusEffectIcon_SetStatusEffectData");
static_assert(sizeof(CoreStatusEffectIcon_SetStatusEffectData) == 0x000050, "Wrong size on CoreStatusEffectIcon_SetStatusEffectData");
static_assert(offsetof(CoreStatusEffectIcon_SetStatusEffectData, data) == 0x000000, "Member 'CoreStatusEffectIcon_SetStatusEffectData::data' has a wrong offset!");

// Function DBDUIViewsCore.CoreStatusEffectIcon.UpdatePercentageFill
// 0x0004 (0x0004 - 0x0000)
struct CoreStatusEffectIcon_UpdatePercentageFill final
{
public:
	float                                         percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStatusEffectIcon_UpdatePercentageFill) == 0x000004, "Wrong alignment on CoreStatusEffectIcon_UpdatePercentageFill");
static_assert(sizeof(CoreStatusEffectIcon_UpdatePercentageFill) == 0x000004, "Wrong size on CoreStatusEffectIcon_UpdatePercentageFill");
static_assert(offsetof(CoreStatusEffectIcon_UpdatePercentageFill, percentage) == 0x000000, "Member 'CoreStatusEffectIcon_UpdatePercentageFill::percentage' has a wrong offset!");

// Function DBDUIViewsCore.CoreStatusEffectIcon.GetInactiveTicks
// 0x0004 (0x0004 - 0x0000)
struct CoreStatusEffectIcon_GetInactiveTicks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStatusEffectIcon_GetInactiveTicks) == 0x000004, "Wrong alignment on CoreStatusEffectIcon_GetInactiveTicks");
static_assert(sizeof(CoreStatusEffectIcon_GetInactiveTicks) == 0x000004, "Wrong size on CoreStatusEffectIcon_GetInactiveTicks");
static_assert(offsetof(CoreStatusEffectIcon_GetInactiveTicks, ReturnValue) == 0x000000, "Member 'CoreStatusEffectIcon_GetInactiveTicks::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStatusEffectWidget.GetStatusEffectMap
// 0x0050 (0x0050 - 0x0000)
struct CoreStatusEffectWidget_GetStatusEffectMap final
{
public:
	TMap<class FName, class UCoreStatusEffectIcon*> ReturnValue;                                     // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStatusEffectWidget_GetStatusEffectMap) == 0x000008, "Wrong alignment on CoreStatusEffectWidget_GetStatusEffectMap");
static_assert(sizeof(CoreStatusEffectWidget_GetStatusEffectMap) == 0x000050, "Wrong size on CoreStatusEffectWidget_GetStatusEffectMap");
static_assert(offsetof(CoreStatusEffectWidget_GetStatusEffectMap, ReturnValue) == 0x000000, "Member 'CoreStatusEffectWidget_GetStatusEffectMap::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.SetData
// 0x0010 (0x0010 - 0x0000)
struct CoreStoryLevelButtonWidget_SetData final
{
public:
	const class UArchiveStoryLevelViewData*       viewData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSelectorReadOnly;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoryLevelButtonWidget_SetData) == 0x000008, "Wrong alignment on CoreStoryLevelButtonWidget_SetData");
static_assert(sizeof(CoreStoryLevelButtonWidget_SetData) == 0x000010, "Wrong size on CoreStoryLevelButtonWidget_SetData");
static_assert(offsetof(CoreStoryLevelButtonWidget_SetData, viewData) == 0x000000, "Member 'CoreStoryLevelButtonWidget_SetData::viewData' has a wrong offset!");
static_assert(offsetof(CoreStoryLevelButtonWidget_SetData, isSelectorReadOnly) == 0x000008, "Member 'CoreStoryLevelButtonWidget_SetData::isSelectorReadOnly' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.UpdateStatusData
// 0x0002 (0x0002 - 0x0000)
struct CoreStoryLevelButtonWidget_UpdateStatusData final
{
public:
	EArchivesStoryLevelStatus                     newStatus;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSelectorReadOnly;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelButtonWidget_UpdateStatusData) == 0x000001, "Wrong alignment on CoreStoryLevelButtonWidget_UpdateStatusData");
static_assert(sizeof(CoreStoryLevelButtonWidget_UpdateStatusData) == 0x000002, "Wrong size on CoreStoryLevelButtonWidget_UpdateStatusData");
static_assert(offsetof(CoreStoryLevelButtonWidget_UpdateStatusData, newStatus) == 0x000000, "Member 'CoreStoryLevelButtonWidget_UpdateStatusData::newStatus' has a wrong offset!");
static_assert(offsetof(CoreStoryLevelButtonWidget_UpdateStatusData, isSelectorReadOnly) == 0x000001, "Member 'CoreStoryLevelButtonWidget_UpdateStatusData::isSelectorReadOnly' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.UpdateVisual
// 0x0010 (0x0010 - 0x0000)
struct CoreStoryLevelButtonWidget_UpdateVisual final
{
public:
	const class UArchiveStoryLevelViewData*       viewData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          newlyUnlocked;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoryLevelButtonWidget_UpdateVisual) == 0x000008, "Wrong alignment on CoreStoryLevelButtonWidget_UpdateVisual");
static_assert(sizeof(CoreStoryLevelButtonWidget_UpdateVisual) == 0x000010, "Wrong size on CoreStoryLevelButtonWidget_UpdateVisual");
static_assert(offsetof(CoreStoryLevelButtonWidget_UpdateVisual, viewData) == 0x000000, "Member 'CoreStoryLevelButtonWidget_UpdateVisual::viewData' has a wrong offset!");
static_assert(offsetof(CoreStoryLevelButtonWidget_UpdateVisual, newlyUnlocked) == 0x000008, "Member 'CoreStoryLevelButtonWidget_UpdateVisual::newlyUnlocked' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.UpdateVisualStatus
// 0x0002 (0x0002 - 0x0000)
struct CoreStoryLevelButtonWidget_UpdateVisualStatus final
{
public:
	EArchivesStoryLevelStatus                     newStatus;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          newlyUnlocked;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelButtonWidget_UpdateVisualStatus) == 0x000001, "Wrong alignment on CoreStoryLevelButtonWidget_UpdateVisualStatus");
static_assert(sizeof(CoreStoryLevelButtonWidget_UpdateVisualStatus) == 0x000002, "Wrong size on CoreStoryLevelButtonWidget_UpdateVisualStatus");
static_assert(offsetof(CoreStoryLevelButtonWidget_UpdateVisualStatus, newStatus) == 0x000000, "Member 'CoreStoryLevelButtonWidget_UpdateVisualStatus::newStatus' has a wrong offset!");
static_assert(offsetof(CoreStoryLevelButtonWidget_UpdateVisualStatus, newlyUnlocked) == 0x000001, "Member 'CoreStoryLevelButtonWidget_UpdateVisualStatus::newlyUnlocked' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct CoreStoryLevelButtonWidget_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelButtonWidget_GetLevel) == 0x000004, "Wrong alignment on CoreStoryLevelButtonWidget_GetLevel");
static_assert(sizeof(CoreStoryLevelButtonWidget_GetLevel) == 0x000004, "Wrong size on CoreStoryLevelButtonWidget_GetLevel");
static_assert(offsetof(CoreStoryLevelButtonWidget_GetLevel, ReturnValue) == 0x000000, "Member 'CoreStoryLevelButtonWidget_GetLevel::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.AdaptButtonsPoolToData
// 0x0004 (0x0004 - 0x0000)
struct CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData final
{
public:
	int32                                         dataNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData) == 0x000004, "Wrong alignment on CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData");
static_assert(sizeof(CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData) == 0x000004, "Wrong size on CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData, dataNumber) == 0x000000, "Member 'CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData::dataNumber' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.SetData
// 0x0010 (0x0010 - 0x0000)
struct CoreStoryLevelsSelectorWidget_SetData final
{
public:
	TArray<class UArchiveStoryLevelViewData*>     levelbuttonsData;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelsSelectorWidget_SetData) == 0x000008, "Wrong alignment on CoreStoryLevelsSelectorWidget_SetData");
static_assert(sizeof(CoreStoryLevelsSelectorWidget_SetData) == 0x000010, "Wrong size on CoreStoryLevelsSelectorWidget_SetData");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_SetData, levelbuttonsData) == 0x000000, "Member 'CoreStoryLevelsSelectorWidget_SetData::levelbuttonsData' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct CoreStoryLevelsSelectorWidget_SetEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelsSelectorWidget_SetEnabled) == 0x000001, "Wrong alignment on CoreStoryLevelsSelectorWidget_SetEnabled");
static_assert(sizeof(CoreStoryLevelsSelectorWidget_SetEnabled) == 0x000001, "Wrong size on CoreStoryLevelsSelectorWidget_SetEnabled");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_SetEnabled, enabled) == 0x000000, "Member 'CoreStoryLevelsSelectorWidget_SetEnabled::enabled' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.UpdateLevelStatus
// 0x0008 (0x0008 - 0x0000)
struct CoreStoryLevelsSelectorWidget_UpdateLevelStatus final
{
public:
	int32                                         level;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArchivesStoryLevelStatus                     status;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreStoryLevelsSelectorWidget_UpdateLevelStatus) == 0x000004, "Wrong alignment on CoreStoryLevelsSelectorWidget_UpdateLevelStatus");
static_assert(sizeof(CoreStoryLevelsSelectorWidget_UpdateLevelStatus) == 0x000008, "Wrong size on CoreStoryLevelsSelectorWidget_UpdateLevelStatus");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_UpdateLevelStatus, level) == 0x000000, "Member 'CoreStoryLevelsSelectorWidget_UpdateLevelStatus::level' has a wrong offset!");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_UpdateLevelStatus, status) == 0x000004, "Member 'CoreStoryLevelsSelectorWidget_UpdateLevelStatus::status' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.UpdateVisual
// 0x0002 (0x0002 - 0x0000)
struct CoreStoryLevelsSelectorWidget_UpdateVisual final
{
public:
	EArchivesStoryLevelStatus                     globalStatus;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          playAnimation;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelsSelectorWidget_UpdateVisual) == 0x000001, "Wrong alignment on CoreStoryLevelsSelectorWidget_UpdateVisual");
static_assert(sizeof(CoreStoryLevelsSelectorWidget_UpdateVisual) == 0x000002, "Wrong size on CoreStoryLevelsSelectorWidget_UpdateVisual");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_UpdateVisual, globalStatus) == 0x000000, "Member 'CoreStoryLevelsSelectorWidget_UpdateVisual::globalStatus' has a wrong offset!");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_UpdateVisual, playAnimation) == 0x000001, "Member 'CoreStoryLevelsSelectorWidget_UpdateVisual::playAnimation' has a wrong offset!");

// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.GetStoryLevelButton
// 0x0010 (0x0010 - 0x0000)
struct CoreStoryLevelsSelectorWidget_GetStoryLevelButton final
{
public:
	int32                                         level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreStoryLevelButtonWidget*            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreStoryLevelsSelectorWidget_GetStoryLevelButton) == 0x000008, "Wrong alignment on CoreStoryLevelsSelectorWidget_GetStoryLevelButton");
static_assert(sizeof(CoreStoryLevelsSelectorWidget_GetStoryLevelButton) == 0x000010, "Wrong size on CoreStoryLevelsSelectorWidget_GetStoryLevelButton");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_GetStoryLevelButton, level) == 0x000000, "Member 'CoreStoryLevelsSelectorWidget_GetStoryLevelButton::level' has a wrong offset!");
static_assert(offsetof(CoreStoryLevelsSelectorWidget_GetStoryLevelButton, ReturnValue) == 0x000008, "Member 'CoreStoryLevelsSelectorWidget_GetStoryLevelButton::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreToggleButtonWidget.SetActiveVisualState
// 0x0001 (0x0001 - 0x0000)
struct CoreToggleButtonWidget_SetActiveVisualState final
{
public:
	bool                                          isActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreToggleButtonWidget_SetActiveVisualState) == 0x000001, "Wrong alignment on CoreToggleButtonWidget_SetActiveVisualState");
static_assert(sizeof(CoreToggleButtonWidget_SetActiveVisualState) == 0x000001, "Wrong size on CoreToggleButtonWidget_SetActiveVisualState");
static_assert(offsetof(CoreToggleButtonWidget_SetActiveVisualState, isActive) == 0x000000, "Member 'CoreToggleButtonWidget_SetActiveVisualState::isActive' has a wrong offset!");

// Function DBDUIViewsCore.CoreToggleButtonWidget.IsToggled
// 0x0001 (0x0001 - 0x0000)
struct CoreToggleButtonWidget_IsToggled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreToggleButtonWidget_IsToggled) == 0x000001, "Wrong alignment on CoreToggleButtonWidget_IsToggled");
static_assert(sizeof(CoreToggleButtonWidget_IsToggled) == 0x000001, "Wrong size on CoreToggleButtonWidget_IsToggled");
static_assert(offsetof(CoreToggleButtonWidget_IsToggled, ReturnValue) == 0x000000, "Member 'CoreToggleButtonWidget_IsToggled::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.CoreTutorialObjectiveItem.InitObjective
// 0x0170 (0x0170 - 0x0000)
struct CoreTutorialObjectiveItem_InitObjective final
{
public:
	struct FTutorialObjectivesViewData            interactionsViewData;                              // 0x0000(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTutorialObjectiveItem_InitObjective) == 0x000008, "Wrong alignment on CoreTutorialObjectiveItem_InitObjective");
static_assert(sizeof(CoreTutorialObjectiveItem_InitObjective) == 0x000170, "Wrong size on CoreTutorialObjectiveItem_InitObjective");
static_assert(offsetof(CoreTutorialObjectiveItem_InitObjective, interactionsViewData) == 0x000000, "Member 'CoreTutorialObjectiveItem_InitObjective::interactionsViewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreTutorialObjectiveItem.SetObjectiveCompleted
// 0x0001 (0x0001 - 0x0000)
struct CoreTutorialObjectiveItem_SetObjectiveCompleted final
{
public:
	bool                                          removeAfterCompletion;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTutorialObjectiveItem_SetObjectiveCompleted) == 0x000001, "Wrong alignment on CoreTutorialObjectiveItem_SetObjectiveCompleted");
static_assert(sizeof(CoreTutorialObjectiveItem_SetObjectiveCompleted) == 0x000001, "Wrong size on CoreTutorialObjectiveItem_SetObjectiveCompleted");
static_assert(offsetof(CoreTutorialObjectiveItem_SetObjectiveCompleted, removeAfterCompletion) == 0x000000, "Member 'CoreTutorialObjectiveItem_SetObjectiveCompleted::removeAfterCompletion' has a wrong offset!");

// Function DBDUIViewsCore.CoreTutorialObjectivesContainer.OnTutorialObjectiveCompleted
// 0x0008 (0x0008 - 0x0000)
struct CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted final
{
public:
	class UCoreTutorialObjectiveItem*             item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted) == 0x000008, "Wrong alignment on CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted");
static_assert(sizeof(CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted) == 0x000008, "Wrong size on CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted");
static_assert(offsetof(CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted, item) == 0x000000, "Member 'CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted::item' has a wrong offset!");

// Function DBDUIViewsCore.CoreUnlockPersonalPerksPopupWidget.HideMenuPerkTooltip
// 0x0008 (0x0008 - 0x0000)
struct CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip final
{
public:
	class UCoreButtonWidget*                      unhoveredSlotWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip) == 0x000008, "Wrong alignment on CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip");
static_assert(sizeof(CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip) == 0x000008, "Wrong size on CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip");
static_assert(offsetof(CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip, unhoveredSlotWidget) == 0x000000, "Member 'CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip::unhoveredSlotWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreUnlockPersonalPerksPopupWidget.ShowMenuPerkTooltip
// 0x0008 (0x0008 - 0x0000)
struct CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip final
{
public:
	class UCoreButtonWidget*                      hoveredSlotWidget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip) == 0x000008, "Wrong alignment on CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip");
static_assert(sizeof(CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip) == 0x000008, "Wrong size on CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip");
static_assert(offsetof(CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip, hoveredSlotWidget) == 0x000000, "Member 'CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip::hoveredSlotWidget' has a wrong offset!");

// Function DBDUIViewsCore.CoreWalletWidget.FullUpdateCurrency
// 0x0100 (0x0100 - 0x0000)
struct CoreWalletWidget_FullUpdateCurrency final
{
public:
	struct FCurrencyLabelViewData                 viewData;                                          // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWalletWidget_FullUpdateCurrency) == 0x000008, "Wrong alignment on CoreWalletWidget_FullUpdateCurrency");
static_assert(sizeof(CoreWalletWidget_FullUpdateCurrency) == 0x000100, "Wrong size on CoreWalletWidget_FullUpdateCurrency");
static_assert(offsetof(CoreWalletWidget_FullUpdateCurrency, viewData) == 0x000000, "Member 'CoreWalletWidget_FullUpdateCurrency::viewData' has a wrong offset!");

// Function DBDUIViewsCore.CoreWalletWidget.InitWallet
// 0x0010 (0x0010 - 0x0000)
struct CoreWalletWidget_InitWallet final
{
public:
	TArray<struct FCurrencyLabelViewData>         walletData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWalletWidget_InitWallet) == 0x000008, "Wrong alignment on CoreWalletWidget_InitWallet");
static_assert(sizeof(CoreWalletWidget_InitWallet) == 0x000010, "Wrong size on CoreWalletWidget_InitWallet");
static_assert(offsetof(CoreWalletWidget_InitWallet, walletData) == 0x000000, "Member 'CoreWalletWidget_InitWallet::walletData' has a wrong offset!");

// Function DBDUIViewsCore.CoreWalletWidget.PlayNotEnoughCurrency
// 0x0001 (0x0001 - 0x0000)
struct CoreWalletWidget_PlayNotEnoughCurrency final
{
public:
	ECurrencyType                                 type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWalletWidget_PlayNotEnoughCurrency) == 0x000001, "Wrong alignment on CoreWalletWidget_PlayNotEnoughCurrency");
static_assert(sizeof(CoreWalletWidget_PlayNotEnoughCurrency) == 0x000001, "Wrong size on CoreWalletWidget_PlayNotEnoughCurrency");
static_assert(offsetof(CoreWalletWidget_PlayNotEnoughCurrency, type) == 0x000000, "Member 'CoreWalletWidget_PlayNotEnoughCurrency::type' has a wrong offset!");

// Function DBDUIViewsCore.CoreWalletWidget.UpdateCurrency
// 0x000C (0x000C - 0x0000)
struct CoreWalletWidget_UpdateCurrency final
{
public:
	ECurrencyType                                 type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         newBalance;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         previousBalance;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreWalletWidget_UpdateCurrency) == 0x000004, "Wrong alignment on CoreWalletWidget_UpdateCurrency");
static_assert(sizeof(CoreWalletWidget_UpdateCurrency) == 0x00000C, "Wrong size on CoreWalletWidget_UpdateCurrency");
static_assert(offsetof(CoreWalletWidget_UpdateCurrency, type) == 0x000000, "Member 'CoreWalletWidget_UpdateCurrency::type' has a wrong offset!");
static_assert(offsetof(CoreWalletWidget_UpdateCurrency, newBalance) == 0x000004, "Member 'CoreWalletWidget_UpdateCurrency::newBalance' has a wrong offset!");
static_assert(offsetof(CoreWalletWidget_UpdateCurrency, previousBalance) == 0x000008, "Member 'CoreWalletWidget_UpdateCurrency::previousBalance' has a wrong offset!");

// Function DBDUIViewsCore.CurrencyProgressionTooltipWidget.SetTooltipData
// 0x00C0 (0x00C0 - 0x0000)
struct CurrencyProgressionTooltipWidget_SetTooltipData final
{
public:
	struct FCurrencyProgressionTooltipViewData    currencyViewData;                                  // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurrencyProgressionTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on CurrencyProgressionTooltipWidget_SetTooltipData");
static_assert(sizeof(CurrencyProgressionTooltipWidget_SetTooltipData) == 0x0000C0, "Wrong size on CurrencyProgressionTooltipWidget_SetTooltipData");
static_assert(offsetof(CurrencyProgressionTooltipWidget_SetTooltipData, currencyViewData) == 0x000000, "Member 'CurrencyProgressionTooltipWidget_SetTooltipData::currencyViewData' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationTooltipWidget.AppendToDescriptionText
// 0x0018 (0x0018 - 0x0000)
struct CustomizationTooltipWidget_AppendToDescriptionText final
{
public:
	class FText                                   appendedText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationTooltipWidget_AppendToDescriptionText) == 0x000008, "Wrong alignment on CustomizationTooltipWidget_AppendToDescriptionText");
static_assert(sizeof(CustomizationTooltipWidget_AppendToDescriptionText) == 0x000018, "Wrong size on CustomizationTooltipWidget_AppendToDescriptionText");
static_assert(offsetof(CustomizationTooltipWidget_AppendToDescriptionText, appendedText) == 0x000000, "Member 'CustomizationTooltipWidget_AppendToDescriptionText::appendedText' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationTooltipWidget.SetStatusText
// 0x0003 (0x0003 - 0x0000)
struct CustomizationTooltipWidget_SetStatusText final
{
public:
	bool                                          isEquipped;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isOwned;                                           // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isLocked;                                          // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationTooltipWidget_SetStatusText) == 0x000001, "Wrong alignment on CustomizationTooltipWidget_SetStatusText");
static_assert(sizeof(CustomizationTooltipWidget_SetStatusText) == 0x000003, "Wrong size on CustomizationTooltipWidget_SetStatusText");
static_assert(offsetof(CustomizationTooltipWidget_SetStatusText, isEquipped) == 0x000000, "Member 'CustomizationTooltipWidget_SetStatusText::isEquipped' has a wrong offset!");
static_assert(offsetof(CustomizationTooltipWidget_SetStatusText, isOwned) == 0x000001, "Member 'CustomizationTooltipWidget_SetStatusText::isOwned' has a wrong offset!");
static_assert(offsetof(CustomizationTooltipWidget_SetStatusText, isLocked) == 0x000002, "Member 'CustomizationTooltipWidget_SetStatusText::isLocked' has a wrong offset!");

// Function DBDUIViewsCore.CustomizationTooltipWidget.SetTooltipData
// 0x00E8 (0x00E8 - 0x0000)
struct CustomizationTooltipWidget_SetTooltipData final
{
public:
	struct FCustomizationTooltipViewData          customizationViewData;                             // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on CustomizationTooltipWidget_SetTooltipData");
static_assert(sizeof(CustomizationTooltipWidget_SetTooltipData) == 0x0000E8, "Wrong size on CustomizationTooltipWidget_SetTooltipData");
static_assert(offsetof(CustomizationTooltipWidget_SetTooltipData, customizationViewData) == 0x000000, "Member 'CustomizationTooltipWidget_SetTooltipData::customizationViewData' has a wrong offset!");

// Function DBDUIViewsCore.DailyRitualsContainerWidget.OnDailyRitualClaimButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct DailyRitualsContainerWidget_OnDailyRitualClaimButtonClicked final
{
public:
	class FString                                 dailyRitualKey;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsContainerWidget_OnDailyRitualClaimButtonClicked) == 0x000008, "Wrong alignment on DailyRitualsContainerWidget_OnDailyRitualClaimButtonClicked");
static_assert(sizeof(DailyRitualsContainerWidget_OnDailyRitualClaimButtonClicked) == 0x000010, "Wrong size on DailyRitualsContainerWidget_OnDailyRitualClaimButtonClicked");
static_assert(offsetof(DailyRitualsContainerWidget_OnDailyRitualClaimButtonClicked, dailyRitualKey) == 0x000000, "Member 'DailyRitualsContainerWidget_OnDailyRitualClaimButtonClicked::dailyRitualKey' has a wrong offset!");

// Function DBDUIViewsCore.DailyRitualsContainerWidget.OnDailyRitualRemoveButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct DailyRitualsContainerWidget_OnDailyRitualRemoveButtonClicked final
{
public:
	class FString                                 dailyRitualKey;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsContainerWidget_OnDailyRitualRemoveButtonClicked) == 0x000008, "Wrong alignment on DailyRitualsContainerWidget_OnDailyRitualRemoveButtonClicked");
static_assert(sizeof(DailyRitualsContainerWidget_OnDailyRitualRemoveButtonClicked) == 0x000010, "Wrong size on DailyRitualsContainerWidget_OnDailyRitualRemoveButtonClicked");
static_assert(offsetof(DailyRitualsContainerWidget_OnDailyRitualRemoveButtonClicked, dailyRitualKey) == 0x000000, "Member 'DailyRitualsContainerWidget_OnDailyRitualRemoveButtonClicked::dailyRitualKey' has a wrong offset!");

// Function DBDUIViewsCore.DailyRitualsContainerWidget.OnDailyRitualTileFadeOutComplete
// 0x0008 (0x0008 - 0x0000)
struct DailyRitualsContainerWidget_OnDailyRitualTileFadeOutComplete final
{
public:
	class UDailyRitualTileWidget*                 dailyRitualTile;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsContainerWidget_OnDailyRitualTileFadeOutComplete) == 0x000008, "Wrong alignment on DailyRitualsContainerWidget_OnDailyRitualTileFadeOutComplete");
static_assert(sizeof(DailyRitualsContainerWidget_OnDailyRitualTileFadeOutComplete) == 0x000008, "Wrong size on DailyRitualsContainerWidget_OnDailyRitualTileFadeOutComplete");
static_assert(offsetof(DailyRitualsContainerWidget_OnDailyRitualTileFadeOutComplete, dailyRitualTile) == 0x000000, "Member 'DailyRitualsContainerWidget_OnDailyRitualTileFadeOutComplete::dailyRitualTile' has a wrong offset!");

// Function DBDUIViewsCore.DailyRitualsContainerWidget.OnDelayUntilFadeInSequenceComplete
// 0x0008 (0x0008 - 0x0000)
struct DailyRitualsContainerWidget_OnDelayUntilFadeInSequenceComplete final
{
public:
	class UUITweenInstance*                       delayUntilFadeInSequenceTween;                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsContainerWidget_OnDelayUntilFadeInSequenceComplete) == 0x000008, "Wrong alignment on DailyRitualsContainerWidget_OnDelayUntilFadeInSequenceComplete");
static_assert(sizeof(DailyRitualsContainerWidget_OnDelayUntilFadeInSequenceComplete) == 0x000008, "Wrong size on DailyRitualsContainerWidget_OnDelayUntilFadeInSequenceComplete");
static_assert(offsetof(DailyRitualsContainerWidget_OnDelayUntilFadeInSequenceComplete, delayUntilFadeInSequenceTween) == 0x000000, "Member 'DailyRitualsContainerWidget_OnDelayUntilFadeInSequenceComplete::delayUntilFadeInSequenceTween' has a wrong offset!");

// Function DBDUIViewsCore.DailyRitualsContainerWidget.OnRecentlyAssignedDailyRitualFadeInComplete
// 0x0008 (0x0008 - 0x0000)
struct DailyRitualsContainerWidget_OnRecentlyAssignedDailyRitualFadeInComplete final
{
public:
	class UDailyRitualTileWidget*                 dailyRitualTile;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsContainerWidget_OnRecentlyAssignedDailyRitualFadeInComplete) == 0x000008, "Wrong alignment on DailyRitualsContainerWidget_OnRecentlyAssignedDailyRitualFadeInComplete");
static_assert(sizeof(DailyRitualsContainerWidget_OnRecentlyAssignedDailyRitualFadeInComplete) == 0x000008, "Wrong size on DailyRitualsContainerWidget_OnRecentlyAssignedDailyRitualFadeInComplete");
static_assert(offsetof(DailyRitualsContainerWidget_OnRecentlyAssignedDailyRitualFadeInComplete, dailyRitualTile) == 0x000000, "Member 'DailyRitualsContainerWidget_OnRecentlyAssignedDailyRitualFadeInComplete::dailyRitualTile' has a wrong offset!");

// Function DBDUIViewsCore.DailyRitualsContainerWidget.SetData
// 0x0018 (0x0018 - 0x0000)
struct DailyRitualsContainerWidget_SetData final
{
public:
	TArray<struct FDailyRitualViewData>           dailyRitualsData;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          isAfterTrial;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DailyRitualsContainerWidget_SetData) == 0x000008, "Wrong alignment on DailyRitualsContainerWidget_SetData");
static_assert(sizeof(DailyRitualsContainerWidget_SetData) == 0x000018, "Wrong size on DailyRitualsContainerWidget_SetData");
static_assert(offsetof(DailyRitualsContainerWidget_SetData, dailyRitualsData) == 0x000000, "Member 'DailyRitualsContainerWidget_SetData::dailyRitualsData' has a wrong offset!");
static_assert(offsetof(DailyRitualsContainerWidget_SetData, isAfterTrial) == 0x000010, "Member 'DailyRitualsContainerWidget_SetData::isAfterTrial' has a wrong offset!");

// Function DBDUIViewsCore.DailyRitualsPopupWidget.OnDailyRitualClaimButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct DailyRitualsPopupWidget_OnDailyRitualClaimButtonClicked final
{
public:
	class FString                                 dailyRitualKey;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsPopupWidget_OnDailyRitualClaimButtonClicked) == 0x000008, "Wrong alignment on DailyRitualsPopupWidget_OnDailyRitualClaimButtonClicked");
static_assert(sizeof(DailyRitualsPopupWidget_OnDailyRitualClaimButtonClicked) == 0x000010, "Wrong size on DailyRitualsPopupWidget_OnDailyRitualClaimButtonClicked");
static_assert(offsetof(DailyRitualsPopupWidget_OnDailyRitualClaimButtonClicked, dailyRitualKey) == 0x000000, "Member 'DailyRitualsPopupWidget_OnDailyRitualClaimButtonClicked::dailyRitualKey' has a wrong offset!");

// Function DBDUIViewsCore.DailyRitualsPopupWidget.OnDailyRitualRemoveButtonClicked
// 0x0010 (0x0010 - 0x0000)
struct DailyRitualsPopupWidget_OnDailyRitualRemoveButtonClicked final
{
public:
	class FString                                 dailyRitualKey;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsPopupWidget_OnDailyRitualRemoveButtonClicked) == 0x000008, "Wrong alignment on DailyRitualsPopupWidget_OnDailyRitualRemoveButtonClicked");
static_assert(sizeof(DailyRitualsPopupWidget_OnDailyRitualRemoveButtonClicked) == 0x000010, "Wrong size on DailyRitualsPopupWidget_OnDailyRitualRemoveButtonClicked");
static_assert(offsetof(DailyRitualsPopupWidget_OnDailyRitualRemoveButtonClicked, dailyRitualKey) == 0x000000, "Member 'DailyRitualsPopupWidget_OnDailyRitualRemoveButtonClicked::dailyRitualKey' has a wrong offset!");

// Function DBDUIViewsCore.DailyRitualsPopupWidget.SetVisuals
// 0x0001 (0x0001 - 0x0000)
struct DailyRitualsPopupWidget_SetVisuals final
{
public:
	bool                                          isAfterTrial;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsPopupWidget_SetVisuals) == 0x000001, "Wrong alignment on DailyRitualsPopupWidget_SetVisuals");
static_assert(sizeof(DailyRitualsPopupWidget_SetVisuals) == 0x000001, "Wrong size on DailyRitualsPopupWidget_SetVisuals");
static_assert(offsetof(DailyRitualsPopupWidget_SetVisuals, isAfterTrial) == 0x000000, "Member 'DailyRitualsPopupWidget_SetVisuals::isAfterTrial' has a wrong offset!");

// Function DBDUIViewsCore.DailyRitualTileWidget.OnClaimButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct DailyRitualTileWidget_OnClaimButtonClicked final
{
public:
	class UCoreButtonWidget*                      button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualTileWidget_OnClaimButtonClicked) == 0x000008, "Wrong alignment on DailyRitualTileWidget_OnClaimButtonClicked");
static_assert(sizeof(DailyRitualTileWidget_OnClaimButtonClicked) == 0x000008, "Wrong size on DailyRitualTileWidget_OnClaimButtonClicked");
static_assert(offsetof(DailyRitualTileWidget_OnClaimButtonClicked, button) == 0x000000, "Member 'DailyRitualTileWidget_OnClaimButtonClicked::button' has a wrong offset!");

// Function DBDUIViewsCore.DailyRitualTileWidget.OnRemoveButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct DailyRitualTileWidget_OnRemoveButtonClicked final
{
public:
	class UCoreButtonWidget*                      button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualTileWidget_OnRemoveButtonClicked) == 0x000008, "Wrong alignment on DailyRitualTileWidget_OnRemoveButtonClicked");
static_assert(sizeof(DailyRitualTileWidget_OnRemoveButtonClicked) == 0x000008, "Wrong size on DailyRitualTileWidget_OnRemoveButtonClicked");
static_assert(offsetof(DailyRitualTileWidget_OnRemoveButtonClicked, button) == 0x000000, "Member 'DailyRitualTileWidget_OnRemoveButtonClicked::button' has a wrong offset!");

// Function DBDUIViewsCore.DBDComboBoxString.SetData
// 0x0020 (0x0020 - 0x0000)
struct DBDComboBoxString_SetData final
{
public:
	TArray<class FString>                         OptionsList;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 DefaultOption;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDComboBoxString_SetData) == 0x000008, "Wrong alignment on DBDComboBoxString_SetData");
static_assert(sizeof(DBDComboBoxString_SetData) == 0x000020, "Wrong size on DBDComboBoxString_SetData");
static_assert(offsetof(DBDComboBoxString_SetData, OptionsList) == 0x000000, "Member 'DBDComboBoxString_SetData::OptionsList' has a wrong offset!");
static_assert(offsetof(DBDComboBoxString_SetData, DefaultOption) == 0x000010, "Member 'DBDComboBoxString_SetData::DefaultOption' has a wrong offset!");

// Function DBDUIViewsCore.DBDDropDownListButton.ToggleDropDownArrow
// 0x0001 (0x0001 - 0x0000)
struct DBDDropDownListButton_ToggleDropDownArrow final
{
public:
	bool                                          showArrow;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDropDownListButton_ToggleDropDownArrow) == 0x000001, "Wrong alignment on DBDDropDownListButton_ToggleDropDownArrow");
static_assert(sizeof(DBDDropDownListButton_ToggleDropDownArrow) == 0x000001, "Wrong size on DBDDropDownListButton_ToggleDropDownArrow");
static_assert(offsetof(DBDDropDownListButton_ToggleDropDownArrow, showArrow) == 0x000000, "Member 'DBDDropDownListButton_ToggleDropDownArrow::showArrow' has a wrong offset!");

// Function DBDUIViewsCore.DBDDropDownListWidget.BindToTrigger
// 0x0008 (0x0008 - 0x0000)
struct DBDDropDownListWidget_BindToTrigger final
{
public:
	class UCoreButtonWidget*                      triggerButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDropDownListWidget_BindToTrigger) == 0x000008, "Wrong alignment on DBDDropDownListWidget_BindToTrigger");
static_assert(sizeof(DBDDropDownListWidget_BindToTrigger) == 0x000008, "Wrong size on DBDDropDownListWidget_BindToTrigger");
static_assert(offsetof(DBDDropDownListWidget_BindToTrigger, triggerButton) == 0x000000, "Member 'DBDDropDownListWidget_BindToTrigger::triggerButton' has a wrong offset!");

// Function DBDUIViewsCore.DBDDropDownListWidget.OnOptionSelected
// 0x0008 (0x0008 - 0x0000)
struct DBDDropDownListWidget_OnOptionSelected final
{
public:
	class UCoreSelectableButtonWidget*            selectedButton;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDropDownListWidget_OnOptionSelected) == 0x000008, "Wrong alignment on DBDDropDownListWidget_OnOptionSelected");
static_assert(sizeof(DBDDropDownListWidget_OnOptionSelected) == 0x000008, "Wrong size on DBDDropDownListWidget_OnOptionSelected");
static_assert(offsetof(DBDDropDownListWidget_OnOptionSelected, selectedButton) == 0x000000, "Member 'DBDDropDownListWidget_OnOptionSelected::selectedButton' has a wrong offset!");

// Function DBDUIViewsCore.DBDDropDownListWidget.OnTriggerClicked
// 0x0008 (0x0008 - 0x0000)
struct DBDDropDownListWidget_OnTriggerClicked final
{
public:
	class UCoreButtonWidget*                      buttonTarget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDropDownListWidget_OnTriggerClicked) == 0x000008, "Wrong alignment on DBDDropDownListWidget_OnTriggerClicked");
static_assert(sizeof(DBDDropDownListWidget_OnTriggerClicked) == 0x000008, "Wrong size on DBDDropDownListWidget_OnTriggerClicked");
static_assert(offsetof(DBDDropDownListWidget_OnTriggerClicked, buttonTarget) == 0x000000, "Member 'DBDDropDownListWidget_OnTriggerClicked::buttonTarget' has a wrong offset!");

// Function DBDUIViewsCore.DBDDropDownListWidget.OnUserClicked
// 0x0078 (0x0078 - 0x0000)
struct DBDDropDownListWidget_OnUserClicked final
{
public:
	struct FPointerEvent                          mouseEvent;                                        // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDropDownListWidget_OnUserClicked) == 0x000008, "Wrong alignment on DBDDropDownListWidget_OnUserClicked");
static_assert(sizeof(DBDDropDownListWidget_OnUserClicked) == 0x000078, "Wrong size on DBDDropDownListWidget_OnUserClicked");
static_assert(offsetof(DBDDropDownListWidget_OnUserClicked, mouseEvent) == 0x000000, "Member 'DBDDropDownListWidget_OnUserClicked::mouseEvent' has a wrong offset!");

// Function DBDUIViewsCore.DBDImage.SetBrushFromSoftTextureWithDefault
// 0x0038 (0x0038 - 0x0000)
struct DBDImage_SetBrushFromSoftTextureWithDefault final
{
public:
	TSoftObjectPtr<class UTexture2D>              softTexture;                                       // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          matchSize;                                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDImage_SetBrushFromSoftTextureWithDefault) == 0x000008, "Wrong alignment on DBDImage_SetBrushFromSoftTextureWithDefault");
static_assert(sizeof(DBDImage_SetBrushFromSoftTextureWithDefault) == 0x000038, "Wrong size on DBDImage_SetBrushFromSoftTextureWithDefault");
static_assert(offsetof(DBDImage_SetBrushFromSoftTextureWithDefault, softTexture) == 0x000000, "Member 'DBDImage_SetBrushFromSoftTextureWithDefault::softTexture' has a wrong offset!");
static_assert(offsetof(DBDImage_SetBrushFromSoftTextureWithDefault, matchSize) == 0x000030, "Member 'DBDImage_SetBrushFromSoftTextureWithDefault::matchSize' has a wrong offset!");

// Function DBDUIViewsCore.DBDImage.SetBrushFromTextureWithDefault
// 0x0010 (0x0010 - 0x0000)
struct DBDImage_SetBrushFromTextureWithDefault final
{
public:
	class UTexture2D*                             texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          matchSize;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDImage_SetBrushFromTextureWithDefault) == 0x000008, "Wrong alignment on DBDImage_SetBrushFromTextureWithDefault");
static_assert(sizeof(DBDImage_SetBrushFromTextureWithDefault) == 0x000010, "Wrong size on DBDImage_SetBrushFromTextureWithDefault");
static_assert(offsetof(DBDImage_SetBrushFromTextureWithDefault, texture) == 0x000000, "Member 'DBDImage_SetBrushFromTextureWithDefault::texture' has a wrong offset!");
static_assert(offsetof(DBDImage_SetBrushFromTextureWithDefault, matchSize) == 0x000008, "Member 'DBDImage_SetBrushFromTextureWithDefault::matchSize' has a wrong offset!");

// Function DBDUIViewsCore.DBDRichTextBlock.OnLargeTextSettingsChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDRichTextBlock_OnLargeTextSettingsChanged final
{
public:
	bool                                          isLargeText;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDRichTextBlock_OnLargeTextSettingsChanged) == 0x000001, "Wrong alignment on DBDRichTextBlock_OnLargeTextSettingsChanged");
static_assert(sizeof(DBDRichTextBlock_OnLargeTextSettingsChanged) == 0x000001, "Wrong size on DBDRichTextBlock_OnLargeTextSettingsChanged");
static_assert(offsetof(DBDRichTextBlock_OnLargeTextSettingsChanged, isLargeText) == 0x000000, "Member 'DBDRichTextBlock_OnLargeTextSettingsChanged::isLargeText' has a wrong offset!");

// Function DBDUIViewsCore.DBDRichTextBlock.OnSwitchDockStateChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDRichTextBlock_OnSwitchDockStateChanged final
{
public:
	bool                                          isDocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDRichTextBlock_OnSwitchDockStateChanged) == 0x000001, "Wrong alignment on DBDRichTextBlock_OnSwitchDockStateChanged");
static_assert(sizeof(DBDRichTextBlock_OnSwitchDockStateChanged) == 0x000001, "Wrong size on DBDRichTextBlock_OnSwitchDockStateChanged");
static_assert(offsetof(DBDRichTextBlock_OnSwitchDockStateChanged, isDocked) == 0x000000, "Member 'DBDRichTextBlock_OnSwitchDockStateChanged::isDocked' has a wrong offset!");

// Function DBDUIViewsCore.DBDRichTextBlock.SetHTMLText
// 0x0018 (0x0018 - 0x0000)
struct DBDRichTextBlock_SetHTMLText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDRichTextBlock_SetHTMLText) == 0x000008, "Wrong alignment on DBDRichTextBlock_SetHTMLText");
static_assert(sizeof(DBDRichTextBlock_SetHTMLText) == 0x000018, "Wrong size on DBDRichTextBlock_SetHTMLText");
static_assert(offsetof(DBDRichTextBlock_SetHTMLText, InText) == 0x000000, "Member 'DBDRichTextBlock_SetHTMLText::InText' has a wrong offset!");

// Function DBDUIViewsCore.DBDRichTextBlock.SetIsUpperCase
// 0x0001 (0x0001 - 0x0000)
struct DBDRichTextBlock_SetIsUpperCase final
{
public:
	bool                                          isUpperCase;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDRichTextBlock_SetIsUpperCase) == 0x000001, "Wrong alignment on DBDRichTextBlock_SetIsUpperCase");
static_assert(sizeof(DBDRichTextBlock_SetIsUpperCase) == 0x000001, "Wrong size on DBDRichTextBlock_SetIsUpperCase");
static_assert(offsetof(DBDRichTextBlock_SetIsUpperCase, isUpperCase) == 0x000000, "Member 'DBDRichTextBlock_SetIsUpperCase::isUpperCase' has a wrong offset!");

// Function DBDUIViewsCore.DBDRichTextBlock.GetIsUpperCase
// 0x0001 (0x0001 - 0x0000)
struct DBDRichTextBlock_GetIsUpperCase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDRichTextBlock_GetIsUpperCase) == 0x000001, "Wrong alignment on DBDRichTextBlock_GetIsUpperCase");
static_assert(sizeof(DBDRichTextBlock_GetIsUpperCase) == 0x000001, "Wrong size on DBDRichTextBlock_GetIsUpperCase");
static_assert(offsetof(DBDRichTextBlock_GetIsUpperCase, ReturnValue) == 0x000000, "Member 'DBDRichTextBlock_GetIsUpperCase::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDScrollBox.HandleControllerInput
// 0x0004 (0x0004 - 0x0000)
struct DBDScrollBox_HandleControllerInput final
{
public:
	float                                         analogValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDScrollBox_HandleControllerInput) == 0x000004, "Wrong alignment on DBDScrollBox_HandleControllerInput");
static_assert(sizeof(DBDScrollBox_HandleControllerInput) == 0x000004, "Wrong size on DBDScrollBox_HandleControllerInput");
static_assert(offsetof(DBDScrollBox_HandleControllerInput, analogValue) == 0x000000, "Member 'DBDScrollBox_HandleControllerInput::analogValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDScrollBox.IsMouseOver
// 0x0001 (0x0001 - 0x0000)
struct DBDScrollBox_IsMouseOver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDScrollBox_IsMouseOver) == 0x000001, "Wrong alignment on DBDScrollBox_IsMouseOver");
static_assert(sizeof(DBDScrollBox_IsMouseOver) == 0x000001, "Wrong size on DBDScrollBox_IsMouseOver");
static_assert(offsetof(DBDScrollBox_IsMouseOver, ReturnValue) == 0x000000, "Member 'DBDScrollBox_IsMouseOver::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDScrollBox.OnControlModeChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDScrollBox_OnControlModeChanged final
{
public:
	EControlMode                                  controlMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDScrollBox_OnControlModeChanged) == 0x000001, "Wrong alignment on DBDScrollBox_OnControlModeChanged");
static_assert(sizeof(DBDScrollBox_OnControlModeChanged) == 0x000001, "Wrong size on DBDScrollBox_OnControlModeChanged");
static_assert(offsetof(DBDScrollBox_OnControlModeChanged, controlMode) == 0x000000, "Member 'DBDScrollBox_OnControlModeChanged::controlMode' has a wrong offset!");

// Function DBDUIViewsCore.DBDScrollBox.SetDisplayPrompt
// 0x0008 (0x0008 - 0x0000)
struct DBDScrollBox_SetDisplayPrompt final
{
public:
	class UCoreKeyListenerInputPromptWidget*      displayPrompt;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDScrollBox_SetDisplayPrompt) == 0x000008, "Wrong alignment on DBDScrollBox_SetDisplayPrompt");
static_assert(sizeof(DBDScrollBox_SetDisplayPrompt) == 0x000008, "Wrong size on DBDScrollBox_SetDisplayPrompt");
static_assert(offsetof(DBDScrollBox_SetDisplayPrompt, displayPrompt) == 0x000000, "Member 'DBDScrollBox_SetDisplayPrompt::displayPrompt' has a wrong offset!");

// Function DBDUIViewsCore.DBDScrollBox.UpdateSmoothMask
// 0x0004 (0x0004 - 0x0000)
struct DBDScrollBox_UpdateSmoothMask final
{
public:
	float                                         currentOffset;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDScrollBox_UpdateSmoothMask) == 0x000004, "Wrong alignment on DBDScrollBox_UpdateSmoothMask");
static_assert(sizeof(DBDScrollBox_UpdateSmoothMask) == 0x000004, "Wrong size on DBDScrollBox_UpdateSmoothMask");
static_assert(offsetof(DBDScrollBox_UpdateSmoothMask, currentOffset) == 0x000000, "Member 'DBDScrollBox_UpdateSmoothMask::currentOffset' has a wrong offset!");

// Function DBDUIViewsCore.DBDTextBlock.OnLargeTextSettingsChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDTextBlock_OnLargeTextSettingsChanged final
{
public:
	bool                                          isLargeText;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTextBlock_OnLargeTextSettingsChanged) == 0x000001, "Wrong alignment on DBDTextBlock_OnLargeTextSettingsChanged");
static_assert(sizeof(DBDTextBlock_OnLargeTextSettingsChanged) == 0x000001, "Wrong size on DBDTextBlock_OnLargeTextSettingsChanged");
static_assert(offsetof(DBDTextBlock_OnLargeTextSettingsChanged, isLargeText) == 0x000000, "Member 'DBDTextBlock_OnLargeTextSettingsChanged::isLargeText' has a wrong offset!");

// Function DBDUIViewsCore.DBDTextBlock.OnSwitchDockStateChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDTextBlock_OnSwitchDockStateChanged final
{
public:
	bool                                          isDocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTextBlock_OnSwitchDockStateChanged) == 0x000001, "Wrong alignment on DBDTextBlock_OnSwitchDockStateChanged");
static_assert(sizeof(DBDTextBlock_OnSwitchDockStateChanged) == 0x000001, "Wrong size on DBDTextBlock_OnSwitchDockStateChanged");
static_assert(offsetof(DBDTextBlock_OnSwitchDockStateChanged, isDocked) == 0x000000, "Member 'DBDTextBlock_OnSwitchDockStateChanged::isDocked' has a wrong offset!");

// Function DBDUIViewsCore.DBDTextBlock.SetIsUpperCase
// 0x0001 (0x0001 - 0x0000)
struct DBDTextBlock_SetIsUpperCase final
{
public:
	bool                                          isUpperCase;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTextBlock_SetIsUpperCase) == 0x000001, "Wrong alignment on DBDTextBlock_SetIsUpperCase");
static_assert(sizeof(DBDTextBlock_SetIsUpperCase) == 0x000001, "Wrong size on DBDTextBlock_SetIsUpperCase");
static_assert(offsetof(DBDTextBlock_SetIsUpperCase, isUpperCase) == 0x000000, "Member 'DBDTextBlock_SetIsUpperCase::isUpperCase' has a wrong offset!");

// Function DBDUIViewsCore.DBDTextBlock.GetIsUpperCase
// 0x0001 (0x0001 - 0x0000)
struct DBDTextBlock_GetIsUpperCase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTextBlock_GetIsUpperCase) == 0x000001, "Wrong alignment on DBDTextBlock_GetIsUpperCase");
static_assert(sizeof(DBDTextBlock_GetIsUpperCase) == 0x000001, "Wrong size on DBDTextBlock_GetIsUpperCase");
static_assert(offsetof(DBDTextBlock_GetIsUpperCase, ReturnValue) == 0x000000, "Member 'DBDTextBlock_GetIsUpperCase::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowArchiveCompendiumTooltip
// 0x00B0 (0x00B0 - 0x0000)
struct DBDTooltipManager_ShowArchiveCompendiumTooltip final
{
public:
	struct FCompendiumButtonData                  tooltipViewData;                                   // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0070(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x00A8(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x00A9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowArchiveCompendiumTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowArchiveCompendiumTooltip");
static_assert(sizeof(DBDTooltipManager_ShowArchiveCompendiumTooltip) == 0x0000B0, "Wrong size on DBDTooltipManager_ShowArchiveCompendiumTooltip");
static_assert(offsetof(DBDTooltipManager_ShowArchiveCompendiumTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowArchiveCompendiumTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveCompendiumTooltip, triggerGeometry) == 0x000070, "Member 'DBDTooltipManager_ShowArchiveCompendiumTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveCompendiumTooltip, tooltipHorizontalAlignment) == 0x0000A8, "Member 'DBDTooltipManager_ShowArchiveCompendiumTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveCompendiumTooltip, tooltipVerticalAlignment) == 0x0000A9, "Member 'DBDTooltipManager_ShowArchiveCompendiumTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowArchiveNodeTooltip
// 0x00F8 (0x00F8 - 0x0000)
struct DBDTooltipManager_ShowArchiveNodeTooltip final
{
public:
	struct FArchiveNodeViewData                   tooltipViewData;                                   // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x00B8(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x00F0(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x00F1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowArchiveNodeTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowArchiveNodeTooltip");
static_assert(sizeof(DBDTooltipManager_ShowArchiveNodeTooltip) == 0x0000F8, "Wrong size on DBDTooltipManager_ShowArchiveNodeTooltip");
static_assert(offsetof(DBDTooltipManager_ShowArchiveNodeTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowArchiveNodeTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveNodeTooltip, triggerGeometry) == 0x0000B8, "Member 'DBDTooltipManager_ShowArchiveNodeTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveNodeTooltip, tooltipHorizontalAlignment) == 0x0000F0, "Member 'DBDTooltipManager_ShowArchiveNodeTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveNodeTooltip, tooltipVerticalAlignment) == 0x0000F1, "Member 'DBDTooltipManager_ShowArchiveNodeTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowArchiveRewardNodeTooltip
// 0x0138 (0x0138 - 0x0000)
struct DBDTooltipManager_ShowArchiveRewardNodeTooltip final
{
public:
	struct FArchiveRewardNodeTooltipViewData      tooltipViewData;                                   // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x00F8(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0130(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0131(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowArchiveRewardNodeTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowArchiveRewardNodeTooltip");
static_assert(sizeof(DBDTooltipManager_ShowArchiveRewardNodeTooltip) == 0x000138, "Wrong size on DBDTooltipManager_ShowArchiveRewardNodeTooltip");
static_assert(offsetof(DBDTooltipManager_ShowArchiveRewardNodeTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowArchiveRewardNodeTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveRewardNodeTooltip, triggerGeometry) == 0x0000F8, "Member 'DBDTooltipManager_ShowArchiveRewardNodeTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveRewardNodeTooltip, tooltipHorizontalAlignment) == 0x000130, "Member 'DBDTooltipManager_ShowArchiveRewardNodeTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowArchiveRewardNodeTooltip, tooltipVerticalAlignment) == 0x000131, "Member 'DBDTooltipManager_ShowArchiveRewardNodeTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowCharacterTooltip
// 0x00B0 (0x00B0 - 0x0000)
struct DBDTooltipManager_ShowCharacterTooltip final
{
public:
	struct FCharacterTooltipViewData              tooltipViewData;                                   // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0070(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x00A8(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x00A9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowCharacterTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowCharacterTooltip");
static_assert(sizeof(DBDTooltipManager_ShowCharacterTooltip) == 0x0000B0, "Wrong size on DBDTooltipManager_ShowCharacterTooltip");
static_assert(offsetof(DBDTooltipManager_ShowCharacterTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowCharacterTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCharacterTooltip, triggerGeometry) == 0x000070, "Member 'DBDTooltipManager_ShowCharacterTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCharacterTooltip, tooltipHorizontalAlignment) == 0x0000A8, "Member 'DBDTooltipManager_ShowCharacterTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCharacterTooltip, tooltipVerticalAlignment) == 0x0000A9, "Member 'DBDTooltipManager_ShowCharacterTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowCurrencyTooltip
// 0x0100 (0x0100 - 0x0000)
struct DBDTooltipManager_ShowCurrencyTooltip final
{
public:
	struct FCurrencyProgressionTooltipViewData    tooltipViewData;                                   // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x00C0(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x00F8(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x00F9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowCurrencyTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowCurrencyTooltip");
static_assert(sizeof(DBDTooltipManager_ShowCurrencyTooltip) == 0x000100, "Wrong size on DBDTooltipManager_ShowCurrencyTooltip");
static_assert(offsetof(DBDTooltipManager_ShowCurrencyTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowCurrencyTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCurrencyTooltip, triggerGeometry) == 0x0000C0, "Member 'DBDTooltipManager_ShowCurrencyTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCurrencyTooltip, tooltipHorizontalAlignment) == 0x0000F8, "Member 'DBDTooltipManager_ShowCurrencyTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCurrencyTooltip, tooltipVerticalAlignment) == 0x0000F9, "Member 'DBDTooltipManager_ShowCurrencyTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowCustomizationTooltip
// 0x0128 (0x0128 - 0x0000)
struct DBDTooltipManager_ShowCustomizationTooltip final
{
public:
	struct FCustomizationTooltipViewData          tooltipViewData;                                   // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x00E8(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0120(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0121(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowCustomizationTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowCustomizationTooltip");
static_assert(sizeof(DBDTooltipManager_ShowCustomizationTooltip) == 0x000128, "Wrong size on DBDTooltipManager_ShowCustomizationTooltip");
static_assert(offsetof(DBDTooltipManager_ShowCustomizationTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowCustomizationTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCustomizationTooltip, triggerGeometry) == 0x0000E8, "Member 'DBDTooltipManager_ShowCustomizationTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCustomizationTooltip, tooltipHorizontalAlignment) == 0x000120, "Member 'DBDTooltipManager_ShowCustomizationTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowCustomizationTooltip, tooltipVerticalAlignment) == 0x000121, "Member 'DBDTooltipManager_ShowCustomizationTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowLabelTooltip
// 0x0058 (0x0058 - 0x0000)
struct DBDTooltipManager_ShowLabelTooltip final
{
public:
	class FText                                   tooltipViewData;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0018(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowLabelTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowLabelTooltip");
static_assert(sizeof(DBDTooltipManager_ShowLabelTooltip) == 0x000058, "Wrong size on DBDTooltipManager_ShowLabelTooltip");
static_assert(offsetof(DBDTooltipManager_ShowLabelTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowLabelTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowLabelTooltip, triggerGeometry) == 0x000018, "Member 'DBDTooltipManager_ShowLabelTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowLabelTooltip, tooltipHorizontalAlignment) == 0x000050, "Member 'DBDTooltipManager_ShowLabelTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowLabelTooltip, tooltipVerticalAlignment) == 0x000051, "Member 'DBDTooltipManager_ShowLabelTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDTooltipManager.ShowLoadoutTooltip
// 0x00D0 (0x00D0 - 0x0000)
struct DBDTooltipManager_ShowLoadoutTooltip final
{
public:
	struct FLoadoutTooltipData                    tooltipViewData;                                   // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGeometry                              triggerGeometry;                                   // 0x0090(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   tooltipHorizontalAlignment;                        // 0x00C8(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     tooltipVerticalAlignment;                          // 0x00C9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTooltipManager_ShowLoadoutTooltip) == 0x000008, "Wrong alignment on DBDTooltipManager_ShowLoadoutTooltip");
static_assert(sizeof(DBDTooltipManager_ShowLoadoutTooltip) == 0x0000D0, "Wrong size on DBDTooltipManager_ShowLoadoutTooltip");
static_assert(offsetof(DBDTooltipManager_ShowLoadoutTooltip, tooltipViewData) == 0x000000, "Member 'DBDTooltipManager_ShowLoadoutTooltip::tooltipViewData' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowLoadoutTooltip, triggerGeometry) == 0x000090, "Member 'DBDTooltipManager_ShowLoadoutTooltip::triggerGeometry' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowLoadoutTooltip, tooltipHorizontalAlignment) == 0x0000C8, "Member 'DBDTooltipManager_ShowLoadoutTooltip::tooltipHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(DBDTooltipManager_ShowLoadoutTooltip, tooltipVerticalAlignment) == 0x0000C9, "Member 'DBDTooltipManager_ShowLoadoutTooltip::tooltipVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBox.AddChildToWrapBox
// 0x0010 (0x0010 - 0x0000)
struct DBDWrapBox_AddChildToWrapBox final
{
public:
	class UWidget*                                Content;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDWrapBoxSlot*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBox_AddChildToWrapBox) == 0x000008, "Wrong alignment on DBDWrapBox_AddChildToWrapBox");
static_assert(sizeof(DBDWrapBox_AddChildToWrapBox) == 0x000010, "Wrong size on DBDWrapBox_AddChildToWrapBox");
static_assert(offsetof(DBDWrapBox_AddChildToWrapBox, Content) == 0x000000, "Member 'DBDWrapBox_AddChildToWrapBox::Content' has a wrong offset!");
static_assert(offsetof(DBDWrapBox_AddChildToWrapBox, ReturnValue) == 0x000008, "Member 'DBDWrapBox_AddChildToWrapBox::ReturnValue' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBox.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct DBDWrapBox_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBox_SetHorizontalAlignment) == 0x000001, "Wrong alignment on DBDWrapBox_SetHorizontalAlignment");
static_assert(sizeof(DBDWrapBox_SetHorizontalAlignment) == 0x000001, "Wrong size on DBDWrapBox_SetHorizontalAlignment");
static_assert(offsetof(DBDWrapBox_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'DBDWrapBox_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBox.SetInnerSlotPadding
// 0x0008 (0x0008 - 0x0000)
struct DBDWrapBox_SetInnerSlotPadding final
{
public:
	struct FVector2D                              InPadding;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBox_SetInnerSlotPadding) == 0x000004, "Wrong alignment on DBDWrapBox_SetInnerSlotPadding");
static_assert(sizeof(DBDWrapBox_SetInnerSlotPadding) == 0x000008, "Wrong size on DBDWrapBox_SetInnerSlotPadding");
static_assert(offsetof(DBDWrapBox_SetInnerSlotPadding, InPadding) == 0x000000, "Member 'DBDWrapBox_SetInnerSlotPadding::InPadding' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBoxSlot.SetFillEmptySpace
// 0x0001 (0x0001 - 0x0000)
struct DBDWrapBoxSlot_SetFillEmptySpace final
{
public:
	bool                                          InbFillEmptySpace;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBoxSlot_SetFillEmptySpace) == 0x000001, "Wrong alignment on DBDWrapBoxSlot_SetFillEmptySpace");
static_assert(sizeof(DBDWrapBoxSlot_SetFillEmptySpace) == 0x000001, "Wrong size on DBDWrapBoxSlot_SetFillEmptySpace");
static_assert(offsetof(DBDWrapBoxSlot_SetFillEmptySpace, InbFillEmptySpace) == 0x000000, "Member 'DBDWrapBoxSlot_SetFillEmptySpace::InbFillEmptySpace' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBoxSlot.SetFillSpanWhenLessThan
// 0x0004 (0x0004 - 0x0000)
struct DBDWrapBoxSlot_SetFillSpanWhenLessThan final
{
public:
	float                                         InFillSpanWhenLessThan;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBoxSlot_SetFillSpanWhenLessThan) == 0x000004, "Wrong alignment on DBDWrapBoxSlot_SetFillSpanWhenLessThan");
static_assert(sizeof(DBDWrapBoxSlot_SetFillSpanWhenLessThan) == 0x000004, "Wrong size on DBDWrapBoxSlot_SetFillSpanWhenLessThan");
static_assert(offsetof(DBDWrapBoxSlot_SetFillSpanWhenLessThan, InFillSpanWhenLessThan) == 0x000000, "Member 'DBDWrapBoxSlot_SetFillSpanWhenLessThan::InFillSpanWhenLessThan' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBoxSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct DBDWrapBoxSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on DBDWrapBoxSlot_SetHorizontalAlignment");
static_assert(sizeof(DBDWrapBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on DBDWrapBoxSlot_SetHorizontalAlignment");
static_assert(offsetof(DBDWrapBoxSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'DBDWrapBoxSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBoxSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct DBDWrapBoxSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBoxSlot_SetPadding) == 0x000004, "Wrong alignment on DBDWrapBoxSlot_SetPadding");
static_assert(sizeof(DBDWrapBoxSlot_SetPadding) == 0x000010, "Wrong size on DBDWrapBoxSlot_SetPadding");
static_assert(offsetof(DBDWrapBoxSlot_SetPadding, InPadding) == 0x000000, "Member 'DBDWrapBoxSlot_SetPadding::InPadding' has a wrong offset!");

// Function DBDUIViewsCore.DBDWrapBoxSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct DBDWrapBoxSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDWrapBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on DBDWrapBoxSlot_SetVerticalAlignment");
static_assert(sizeof(DBDWrapBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong size on DBDWrapBoxSlot_SetVerticalAlignment");
static_assert(offsetof(DBDWrapBoxSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'DBDWrapBoxSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function DBDUIViewsCore.DragZone.OnAnalogInput
// 0x0048 (0x0048 - 0x0000)
struct DragZone_OnAnalogInput final
{
public:
	struct FAnalogInputEvent                      analogEvent;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragZone_OnAnalogInput) == 0x000008, "Wrong alignment on DragZone_OnAnalogInput");
static_assert(sizeof(DragZone_OnAnalogInput) == 0x000048, "Wrong size on DragZone_OnAnalogInput");
static_assert(offsetof(DragZone_OnAnalogInput, analogEvent) == 0x000000, "Member 'DragZone_OnAnalogInput::analogEvent' has a wrong offset!");

// Function DBDUIViewsCore.DragZone.OnMouseMoveGlobal
// 0x0078 (0x0078 - 0x0000)
struct DragZone_OnMouseMoveGlobal final
{
public:
	struct FPointerEvent                          mouseEvent;                                        // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragZone_OnMouseMoveGlobal) == 0x000008, "Wrong alignment on DragZone_OnMouseMoveGlobal");
static_assert(sizeof(DragZone_OnMouseMoveGlobal) == 0x000078, "Wrong size on DragZone_OnMouseMoveGlobal");
static_assert(offsetof(DragZone_OnMouseMoveGlobal, mouseEvent) == 0x000000, "Member 'DragZone_OnMouseMoveGlobal::mouseEvent' has a wrong offset!");

// Function DBDUIViewsCore.DragZone.OnMousePressGlobal
// 0x0078 (0x0078 - 0x0000)
struct DragZone_OnMousePressGlobal final
{
public:
	struct FPointerEvent                          mouseEvent;                                        // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragZone_OnMousePressGlobal) == 0x000008, "Wrong alignment on DragZone_OnMousePressGlobal");
static_assert(sizeof(DragZone_OnMousePressGlobal) == 0x000078, "Wrong size on DragZone_OnMousePressGlobal");
static_assert(offsetof(DragZone_OnMousePressGlobal, mouseEvent) == 0x000000, "Member 'DragZone_OnMousePressGlobal::mouseEvent' has a wrong offset!");

// Function DBDUIViewsCore.DragZone.OnMouseReleaseGlobal
// 0x0078 (0x0078 - 0x0000)
struct DragZone_OnMouseReleaseGlobal final
{
public:
	struct FPointerEvent                          mouseEvent;                                        // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DragZone_OnMouseReleaseGlobal) == 0x000008, "Wrong alignment on DragZone_OnMouseReleaseGlobal");
static_assert(sizeof(DragZone_OnMouseReleaseGlobal) == 0x000078, "Wrong size on DragZone_OnMouseReleaseGlobal");
static_assert(offsetof(DragZone_OnMouseReleaseGlobal, mouseEvent) == 0x000000, "Member 'DragZone_OnMouseReleaseGlobal::mouseEvent' has a wrong offset!");

// Function DBDUIViewsCore.EventEntryPopupWidget.setWidgetSkinFromEventLabel
// 0x0018 (0x0018 - 0x0000)
struct EventEntryPopupWidget_setWidgetSkinFromEventLabel final
{
public:
	class FText                                   eventLabel;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryPopupWidget_setWidgetSkinFromEventLabel) == 0x000008, "Wrong alignment on EventEntryPopupWidget_setWidgetSkinFromEventLabel");
static_assert(sizeof(EventEntryPopupWidget_setWidgetSkinFromEventLabel) == 0x000018, "Wrong size on EventEntryPopupWidget_setWidgetSkinFromEventLabel");
static_assert(offsetof(EventEntryPopupWidget_setWidgetSkinFromEventLabel, eventLabel) == 0x000000, "Member 'EventEntryPopupWidget_setWidgetSkinFromEventLabel::eventLabel' has a wrong offset!");

// Function DBDUIViewsCore.LabelTooltipWidget.SetTooltipData
// 0x0018 (0x0018 - 0x0000)
struct LabelTooltipWidget_SetTooltipData final
{
public:
	class FText                                   labelText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LabelTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on LabelTooltipWidget_SetTooltipData");
static_assert(sizeof(LabelTooltipWidget_SetTooltipData) == 0x000018, "Wrong size on LabelTooltipWidget_SetTooltipData");
static_assert(offsetof(LabelTooltipWidget_SetTooltipData, labelText) == 0x000000, "Member 'LabelTooltipWidget_SetTooltipData::labelText' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutMenuPopupWidget.HideMenuLoadoutPartsTooltip
// 0x0008 (0x0008 - 0x0000)
struct LoadoutMenuPopupWidget_HideMenuLoadoutPartsTooltip final
{
public:
	class UCoreButtonWidget*                      unhoveredSlotWidget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupWidget_HideMenuLoadoutPartsTooltip) == 0x000008, "Wrong alignment on LoadoutMenuPopupWidget_HideMenuLoadoutPartsTooltip");
static_assert(sizeof(LoadoutMenuPopupWidget_HideMenuLoadoutPartsTooltip) == 0x000008, "Wrong size on LoadoutMenuPopupWidget_HideMenuLoadoutPartsTooltip");
static_assert(offsetof(LoadoutMenuPopupWidget_HideMenuLoadoutPartsTooltip, unhoveredSlotWidget) == 0x000000, "Member 'LoadoutMenuPopupWidget_HideMenuLoadoutPartsTooltip::unhoveredSlotWidget' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnDropDownListSelectedOptionChanged
// 0x0080 (0x0080 - 0x0000)
struct LoadoutMenuPopupWidget_OnDropDownListSelectedOptionChanged final
{
public:
	struct FTabWidgetData                         buttonData;                                        // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupWidget_OnDropDownListSelectedOptionChanged) == 0x000008, "Wrong alignment on LoadoutMenuPopupWidget_OnDropDownListSelectedOptionChanged");
static_assert(sizeof(LoadoutMenuPopupWidget_OnDropDownListSelectedOptionChanged) == 0x000080, "Wrong size on LoadoutMenuPopupWidget_OnDropDownListSelectedOptionChanged");
static_assert(offsetof(LoadoutMenuPopupWidget_OnDropDownListSelectedOptionChanged, buttonData) == 0x000000, "Member 'LoadoutMenuPopupWidget_OnDropDownListSelectedOptionChanged::buttonData' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnDropdownSelected
// 0x0001 (0x0001 - 0x0000)
struct LoadoutMenuPopupWidget_OnDropdownSelected final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupWidget_OnDropdownSelected) == 0x000001, "Wrong alignment on LoadoutMenuPopupWidget_OnDropdownSelected");
static_assert(sizeof(LoadoutMenuPopupWidget_OnDropdownSelected) == 0x000001, "Wrong size on LoadoutMenuPopupWidget_OnDropdownSelected");
static_assert(offsetof(LoadoutMenuPopupWidget_OnDropdownSelected, InVisibility) == 0x000000, "Member 'LoadoutMenuPopupWidget_OnDropdownSelected::InVisibility' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuAddonSlotClicked
// 0x0008 (0x0008 - 0x0000)
struct LoadoutMenuPopupWidget_OnLoadoutMenuAddonSlotClicked final
{
public:
	class UCoreButtonWidget*                      menuAddonWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupWidget_OnLoadoutMenuAddonSlotClicked) == 0x000008, "Wrong alignment on LoadoutMenuPopupWidget_OnLoadoutMenuAddonSlotClicked");
static_assert(sizeof(LoadoutMenuPopupWidget_OnLoadoutMenuAddonSlotClicked) == 0x000008, "Wrong size on LoadoutMenuPopupWidget_OnLoadoutMenuAddonSlotClicked");
static_assert(offsetof(LoadoutMenuPopupWidget_OnLoadoutMenuAddonSlotClicked, menuAddonWidget) == 0x000000, "Member 'LoadoutMenuPopupWidget_OnLoadoutMenuAddonSlotClicked::menuAddonWidget' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuInventorySlotClicked
// 0x0008 (0x0008 - 0x0000)
struct LoadoutMenuPopupWidget_OnLoadoutMenuInventorySlotClicked final
{
public:
	class UCoreButtonWidget*                      menuPerkWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupWidget_OnLoadoutMenuInventorySlotClicked) == 0x000008, "Wrong alignment on LoadoutMenuPopupWidget_OnLoadoutMenuInventorySlotClicked");
static_assert(sizeof(LoadoutMenuPopupWidget_OnLoadoutMenuInventorySlotClicked) == 0x000008, "Wrong size on LoadoutMenuPopupWidget_OnLoadoutMenuInventorySlotClicked");
static_assert(offsetof(LoadoutMenuPopupWidget_OnLoadoutMenuInventorySlotClicked, menuPerkWidget) == 0x000000, "Member 'LoadoutMenuPopupWidget_OnLoadoutMenuInventorySlotClicked::menuPerkWidget' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuItemSlotClicked
// 0x0008 (0x0008 - 0x0000)
struct LoadoutMenuPopupWidget_OnLoadoutMenuItemSlotClicked final
{
public:
	class UCoreButtonWidget*                      menuItemWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupWidget_OnLoadoutMenuItemSlotClicked) == 0x000008, "Wrong alignment on LoadoutMenuPopupWidget_OnLoadoutMenuItemSlotClicked");
static_assert(sizeof(LoadoutMenuPopupWidget_OnLoadoutMenuItemSlotClicked) == 0x000008, "Wrong size on LoadoutMenuPopupWidget_OnLoadoutMenuItemSlotClicked");
static_assert(offsetof(LoadoutMenuPopupWidget_OnLoadoutMenuItemSlotClicked, menuItemWidget) == 0x000000, "Member 'LoadoutMenuPopupWidget_OnLoadoutMenuItemSlotClicked::menuItemWidget' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuOfferingSlotClicked
// 0x0008 (0x0008 - 0x0000)
struct LoadoutMenuPopupWidget_OnLoadoutMenuOfferingSlotClicked final
{
public:
	class UCoreButtonWidget*                      menuOfferingWidget;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupWidget_OnLoadoutMenuOfferingSlotClicked) == 0x000008, "Wrong alignment on LoadoutMenuPopupWidget_OnLoadoutMenuOfferingSlotClicked");
static_assert(sizeof(LoadoutMenuPopupWidget_OnLoadoutMenuOfferingSlotClicked) == 0x000008, "Wrong size on LoadoutMenuPopupWidget_OnLoadoutMenuOfferingSlotClicked");
static_assert(offsetof(LoadoutMenuPopupWidget_OnLoadoutMenuOfferingSlotClicked, menuOfferingWidget) == 0x000000, "Member 'LoadoutMenuPopupWidget_OnLoadoutMenuOfferingSlotClicked::menuOfferingWidget' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuPerkSlotClicked
// 0x0008 (0x0008 - 0x0000)
struct LoadoutMenuPopupWidget_OnLoadoutMenuPerkSlotClicked final
{
public:
	class UCoreButtonWidget*                      menuPerkWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupWidget_OnLoadoutMenuPerkSlotClicked) == 0x000008, "Wrong alignment on LoadoutMenuPopupWidget_OnLoadoutMenuPerkSlotClicked");
static_assert(sizeof(LoadoutMenuPopupWidget_OnLoadoutMenuPerkSlotClicked) == 0x000008, "Wrong size on LoadoutMenuPopupWidget_OnLoadoutMenuPerkSlotClicked");
static_assert(offsetof(LoadoutMenuPopupWidget_OnLoadoutMenuPerkSlotClicked, menuPerkWidget) == 0x000000, "Member 'LoadoutMenuPopupWidget_OnLoadoutMenuPerkSlotClicked::menuPerkWidget' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuPowerSlotClicked
// 0x0008 (0x0008 - 0x0000)
struct LoadoutMenuPopupWidget_OnLoadoutMenuPowerSlotClicked final
{
public:
	class UCoreButtonWidget*                      menuPowerWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupWidget_OnLoadoutMenuPowerSlotClicked) == 0x000008, "Wrong alignment on LoadoutMenuPopupWidget_OnLoadoutMenuPowerSlotClicked");
static_assert(sizeof(LoadoutMenuPopupWidget_OnLoadoutMenuPowerSlotClicked) == 0x000008, "Wrong size on LoadoutMenuPopupWidget_OnLoadoutMenuPowerSlotClicked");
static_assert(offsetof(LoadoutMenuPopupWidget_OnLoadoutMenuPowerSlotClicked, menuPowerWidget) == 0x000000, "Member 'LoadoutMenuPopupWidget_OnLoadoutMenuPowerSlotClicked::menuPowerWidget' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuPresetClicked
// 0x0004 (0x0004 - 0x0000)
struct LoadoutMenuPopupWidget_OnLoadoutMenuPresetClicked final
{
public:
	int32                                         selectedPresetId;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupWidget_OnLoadoutMenuPresetClicked) == 0x000004, "Wrong alignment on LoadoutMenuPopupWidget_OnLoadoutMenuPresetClicked");
static_assert(sizeof(LoadoutMenuPopupWidget_OnLoadoutMenuPresetClicked) == 0x000004, "Wrong size on LoadoutMenuPopupWidget_OnLoadoutMenuPresetClicked");
static_assert(offsetof(LoadoutMenuPopupWidget_OnLoadoutMenuPresetClicked, selectedPresetId) == 0x000000, "Member 'LoadoutMenuPopupWidget_OnLoadoutMenuPresetClicked::selectedPresetId' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnPaginationSelected
// 0x0008 (0x0008 - 0x0000)
struct LoadoutMenuPopupWidget_OnPaginationSelected final
{
public:
	int32                                         currentPage;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isUpdate;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoadoutMenuPopupWidget_OnPaginationSelected) == 0x000004, "Wrong alignment on LoadoutMenuPopupWidget_OnPaginationSelected");
static_assert(sizeof(LoadoutMenuPopupWidget_OnPaginationSelected) == 0x000008, "Wrong size on LoadoutMenuPopupWidget_OnPaginationSelected");
static_assert(offsetof(LoadoutMenuPopupWidget_OnPaginationSelected, currentPage) == 0x000000, "Member 'LoadoutMenuPopupWidget_OnPaginationSelected::currentPage' has a wrong offset!");
static_assert(offsetof(LoadoutMenuPopupWidget_OnPaginationSelected, isUpdate) == 0x000004, "Member 'LoadoutMenuPopupWidget_OnPaginationSelected::isUpdate' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutMenuPopupWidget.PlayPaginationOutAnimation
// 0x0001 (0x0001 - 0x0000)
struct LoadoutMenuPopupWidget_PlayPaginationOutAnimation final
{
public:
	bool                                          isNextPage;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupWidget_PlayPaginationOutAnimation) == 0x000001, "Wrong alignment on LoadoutMenuPopupWidget_PlayPaginationOutAnimation");
static_assert(sizeof(LoadoutMenuPopupWidget_PlayPaginationOutAnimation) == 0x000001, "Wrong size on LoadoutMenuPopupWidget_PlayPaginationOutAnimation");
static_assert(offsetof(LoadoutMenuPopupWidget_PlayPaginationOutAnimation, isNextPage) == 0x000000, "Member 'LoadoutMenuPopupWidget_PlayPaginationOutAnimation::isNextPage' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutMenuPopupWidget.SetInventoryItemEnabled
// 0x0010 (0x0010 - 0x0000)
struct LoadoutMenuPopupWidget_SetInventoryItemEnabled final
{
public:
	class UCoreMenuLoadoutPartWidget*             widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemAvailability                             availability;                                      // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoadoutMenuPopupWidget_SetInventoryItemEnabled) == 0x000008, "Wrong alignment on LoadoutMenuPopupWidget_SetInventoryItemEnabled");
static_assert(sizeof(LoadoutMenuPopupWidget_SetInventoryItemEnabled) == 0x000010, "Wrong size on LoadoutMenuPopupWidget_SetInventoryItemEnabled");
static_assert(offsetof(LoadoutMenuPopupWidget_SetInventoryItemEnabled, widget) == 0x000000, "Member 'LoadoutMenuPopupWidget_SetInventoryItemEnabled::widget' has a wrong offset!");
static_assert(offsetof(LoadoutMenuPopupWidget_SetInventoryItemEnabled, availability) == 0x000008, "Member 'LoadoutMenuPopupWidget_SetInventoryItemEnabled::availability' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutMenuPopupWidget.ShowMenuLoadoutPartsTooltip
// 0x0008 (0x0008 - 0x0000)
struct LoadoutMenuPopupWidget_ShowMenuLoadoutPartsTooltip final
{
public:
	class UCoreButtonWidget*                      hoveredSlotWidget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupWidget_ShowMenuLoadoutPartsTooltip) == 0x000008, "Wrong alignment on LoadoutMenuPopupWidget_ShowMenuLoadoutPartsTooltip");
static_assert(sizeof(LoadoutMenuPopupWidget_ShowMenuLoadoutPartsTooltip) == 0x000008, "Wrong size on LoadoutMenuPopupWidget_ShowMenuLoadoutPartsTooltip");
static_assert(offsetof(LoadoutMenuPopupWidget_ShowMenuLoadoutPartsTooltip, hoveredSlotWidget) == 0x000000, "Member 'LoadoutMenuPopupWidget_ShowMenuLoadoutPartsTooltip::hoveredSlotWidget' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutTooltipWidget.SetLoadoutTooltipPerkLevel
// 0x0004 (0x0004 - 0x0000)
struct LoadoutTooltipWidget_SetLoadoutTooltipPerkLevel final
{
public:
	int32                                         level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutTooltipWidget_SetLoadoutTooltipPerkLevel) == 0x000004, "Wrong alignment on LoadoutTooltipWidget_SetLoadoutTooltipPerkLevel");
static_assert(sizeof(LoadoutTooltipWidget_SetLoadoutTooltipPerkLevel) == 0x000004, "Wrong size on LoadoutTooltipWidget_SetLoadoutTooltipPerkLevel");
static_assert(offsetof(LoadoutTooltipWidget_SetLoadoutTooltipPerkLevel, level) == 0x000000, "Member 'LoadoutTooltipWidget_SetLoadoutTooltipPerkLevel::level' has a wrong offset!");

// Function DBDUIViewsCore.LoadoutTooltipWidget.SetTooltipData
// 0x0090 (0x0090 - 0x0000)
struct LoadoutTooltipWidget_SetTooltipData final
{
public:
	struct FLoadoutTooltipData                    tooltipViewData;                                   // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutTooltipWidget_SetTooltipData) == 0x000008, "Wrong alignment on LoadoutTooltipWidget_SetTooltipData");
static_assert(sizeof(LoadoutTooltipWidget_SetTooltipData) == 0x000090, "Wrong size on LoadoutTooltipWidget_SetTooltipData");
static_assert(offsetof(LoadoutTooltipWidget_SetTooltipData, tooltipViewData) == 0x000000, "Member 'LoadoutTooltipWidget_SetTooltipData::tooltipViewData' has a wrong offset!");

// Function DBDUIViewsCore.TestWidget.SetShowWorkbench
// 0x0001 (0x0001 - 0x0000)
struct TestWidget_SetShowWorkbench final
{
public:
	bool                                          showWorkbench;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestWidget_SetShowWorkbench) == 0x000001, "Wrong alignment on TestWidget_SetShowWorkbench");
static_assert(sizeof(TestWidget_SetShowWorkbench) == 0x000001, "Wrong size on TestWidget_SetShowWorkbench");
static_assert(offsetof(TestWidget_SetShowWorkbench, showWorkbench) == 0x000000, "Member 'TestWidget_SetShowWorkbench::showWorkbench' has a wrong offset!");

}

