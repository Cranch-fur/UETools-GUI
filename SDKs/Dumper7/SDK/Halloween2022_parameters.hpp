#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Halloween2022

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Halloween2022_structs.hpp"


namespace SDK::Params
{

// Function Halloween2022.DepositVoidEnergyTierQEEvaluator.OnVoidEnergyDeposited
// 0x0038 (0x0038 - 0x0000)
struct DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited) == 0x000008, "Wrong alignment on DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited");
static_assert(sizeof(DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited) == 0x000038, "Wrong size on DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited");
static_assert(offsetof(DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited, gameEventType) == 0x000000, "Member 'DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited::gameEventType' has a wrong offset!");
static_assert(offsetof(DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited, gameEventData) == 0x000010, "Member 'DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited::gameEventData' has a wrong offset!");

// Function Halloween2022.HalloweenCentrifugeAnimInstance.OnBlendValueChanged
// 0x0004 (0x0004 - 0x0000)
struct HalloweenCentrifugeAnimInstance_OnBlendValueChanged final
{
public:
	float                                         blendValue;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenCentrifugeAnimInstance_OnBlendValueChanged) == 0x000004, "Wrong alignment on HalloweenCentrifugeAnimInstance_OnBlendValueChanged");
static_assert(sizeof(HalloweenCentrifugeAnimInstance_OnBlendValueChanged) == 0x000004, "Wrong size on HalloweenCentrifugeAnimInstance_OnBlendValueChanged");
static_assert(offsetof(HalloweenCentrifugeAnimInstance_OnBlendValueChanged, blendValue) == 0x000000, "Member 'HalloweenCentrifugeAnimInstance_OnBlendValueChanged::blendValue' has a wrong offset!");

// Function Halloween2022.HalloweenCentrifugeAnimInstance.OnEnergySpawned
// 0x0008 (0x0008 - 0x0000)
struct HalloweenCentrifugeAnimInstance_OnEnergySpawned final
{
public:
	int32                                         previousEnergy;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         currentEnergy;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenCentrifugeAnimInstance_OnEnergySpawned) == 0x000004, "Wrong alignment on HalloweenCentrifugeAnimInstance_OnEnergySpawned");
static_assert(sizeof(HalloweenCentrifugeAnimInstance_OnEnergySpawned) == 0x000008, "Wrong size on HalloweenCentrifugeAnimInstance_OnEnergySpawned");
static_assert(offsetof(HalloweenCentrifugeAnimInstance_OnEnergySpawned, previousEnergy) == 0x000000, "Member 'HalloweenCentrifugeAnimInstance_OnEnergySpawned::previousEnergy' has a wrong offset!");
static_assert(offsetof(HalloweenCentrifugeAnimInstance_OnEnergySpawned, currentEnergy) == 0x000004, "Member 'HalloweenCentrifugeAnimInstance_OnEnergySpawned::currentEnergy' has a wrong offset!");

// Function Halloween2022.HalloweenCentrifugeAnimInstance.SetDesiredBlendValue
// 0x0004 (0x0004 - 0x0000)
struct HalloweenCentrifugeAnimInstance_SetDesiredBlendValue final
{
public:
	float                                         blendValue;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenCentrifugeAnimInstance_SetDesiredBlendValue) == 0x000004, "Wrong alignment on HalloweenCentrifugeAnimInstance_SetDesiredBlendValue");
static_assert(sizeof(HalloweenCentrifugeAnimInstance_SetDesiredBlendValue) == 0x000004, "Wrong size on HalloweenCentrifugeAnimInstance_SetDesiredBlendValue");
static_assert(offsetof(HalloweenCentrifugeAnimInstance_SetDesiredBlendValue, blendValue) == 0x000000, "Member 'HalloweenCentrifugeAnimInstance_SetDesiredBlendValue::blendValue' has a wrong offset!");

// Function Halloween2022.GeneratorCentrifugeAnimInstance.OnStartRepair
// 0x0008 (0x0008 - 0x0000)
struct GeneratorCentrifugeAnimInstance_OnStartRepair final
{
public:
	class AGenerator*                             generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorCentrifugeAnimInstance_OnStartRepair) == 0x000008, "Wrong alignment on GeneratorCentrifugeAnimInstance_OnStartRepair");
static_assert(sizeof(GeneratorCentrifugeAnimInstance_OnStartRepair) == 0x000008, "Wrong size on GeneratorCentrifugeAnimInstance_OnStartRepair");
static_assert(offsetof(GeneratorCentrifugeAnimInstance_OnStartRepair, generator) == 0x000000, "Member 'GeneratorCentrifugeAnimInstance_OnStartRepair::generator' has a wrong offset!");

// Function Halloween2022.GeneratorCentrifugeAnimInstance.OnStopRepair
// 0x0008 (0x0008 - 0x0000)
struct GeneratorCentrifugeAnimInstance_OnStopRepair final
{
public:
	class AGenerator*                             generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorCentrifugeAnimInstance_OnStopRepair) == 0x000008, "Wrong alignment on GeneratorCentrifugeAnimInstance_OnStopRepair");
static_assert(sizeof(GeneratorCentrifugeAnimInstance_OnStopRepair) == 0x000008, "Wrong size on GeneratorCentrifugeAnimInstance_OnStopRepair");
static_assert(offsetof(GeneratorCentrifugeAnimInstance_OnStopRepair, generator) == 0x000000, "Member 'GeneratorCentrifugeAnimInstance_OnStopRepair::generator' has a wrong offset!");

// Function Halloween2022.GeneratorCentrifugeAnimInstance.StartRepairing
// 0x0038 (0x0038 - 0x0000)
struct GeneratorCentrifugeAnimInstance_StartRepairing final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorCentrifugeAnimInstance_StartRepairing) == 0x000008, "Wrong alignment on GeneratorCentrifugeAnimInstance_StartRepairing");
static_assert(sizeof(GeneratorCentrifugeAnimInstance_StartRepairing) == 0x000038, "Wrong size on GeneratorCentrifugeAnimInstance_StartRepairing");
static_assert(offsetof(GeneratorCentrifugeAnimInstance_StartRepairing, gameEventType) == 0x000000, "Member 'GeneratorCentrifugeAnimInstance_StartRepairing::gameEventType' has a wrong offset!");
static_assert(offsetof(GeneratorCentrifugeAnimInstance_StartRepairing, gameEventData) == 0x000010, "Member 'GeneratorCentrifugeAnimInstance_StartRepairing::gameEventData' has a wrong offset!");

// Function Halloween2022.GeneratorCentrifugeAnimInstance.StopRepairing
// 0x0038 (0x0038 - 0x0000)
struct GeneratorCentrifugeAnimInstance_StopRepairing final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorCentrifugeAnimInstance_StopRepairing) == 0x000008, "Wrong alignment on GeneratorCentrifugeAnimInstance_StopRepairing");
static_assert(sizeof(GeneratorCentrifugeAnimInstance_StopRepairing) == 0x000038, "Wrong size on GeneratorCentrifugeAnimInstance_StopRepairing");
static_assert(offsetof(GeneratorCentrifugeAnimInstance_StopRepairing, gameEventType) == 0x000000, "Member 'GeneratorCentrifugeAnimInstance_StopRepairing::gameEventType' has a wrong offset!");
static_assert(offsetof(GeneratorCentrifugeAnimInstance_StopRepairing, gameEventData) == 0x000010, "Member 'GeneratorCentrifugeAnimInstance_StopRepairing::gameEventData' has a wrong offset!");

// Function Halloween2022.MeatHookCentrifugeAnimInstance.OnPlayerHooked
// 0x0008 (0x0008 - 0x0000)
struct MeatHookCentrifugeAnimInstance_OnPlayerHooked final
{
public:
	class AMeatHook*                              meatHook;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHookCentrifugeAnimInstance_OnPlayerHooked) == 0x000008, "Wrong alignment on MeatHookCentrifugeAnimInstance_OnPlayerHooked");
static_assert(sizeof(MeatHookCentrifugeAnimInstance_OnPlayerHooked) == 0x000008, "Wrong size on MeatHookCentrifugeAnimInstance_OnPlayerHooked");
static_assert(offsetof(MeatHookCentrifugeAnimInstance_OnPlayerHooked, meatHook) == 0x000000, "Member 'MeatHookCentrifugeAnimInstance_OnPlayerHooked::meatHook' has a wrong offset!");

// Function Halloween2022.MeatHookCentrifugeAnimInstance.OnPlayerNoLongerOnHook
// 0x0008 (0x0008 - 0x0000)
struct MeatHookCentrifugeAnimInstance_OnPlayerNoLongerOnHook final
{
public:
	class AMeatHook*                              meatHook;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHookCentrifugeAnimInstance_OnPlayerNoLongerOnHook) == 0x000008, "Wrong alignment on MeatHookCentrifugeAnimInstance_OnPlayerNoLongerOnHook");
static_assert(sizeof(MeatHookCentrifugeAnimInstance_OnPlayerNoLongerOnHook) == 0x000008, "Wrong size on MeatHookCentrifugeAnimInstance_OnPlayerNoLongerOnHook");
static_assert(offsetof(MeatHookCentrifugeAnimInstance_OnPlayerNoLongerOnHook, meatHook) == 0x000000, "Member 'MeatHookCentrifugeAnimInstance_OnPlayerNoLongerOnHook::meatHook' has a wrong offset!");

// Function Halloween2022.MeatHookCentrifugeAnimInstance.PlayerHooked
// 0x0038 (0x0038 - 0x0000)
struct MeatHookCentrifugeAnimInstance_PlayerHooked final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHookCentrifugeAnimInstance_PlayerHooked) == 0x000008, "Wrong alignment on MeatHookCentrifugeAnimInstance_PlayerHooked");
static_assert(sizeof(MeatHookCentrifugeAnimInstance_PlayerHooked) == 0x000038, "Wrong size on MeatHookCentrifugeAnimInstance_PlayerHooked");
static_assert(offsetof(MeatHookCentrifugeAnimInstance_PlayerHooked, gameEventType) == 0x000000, "Member 'MeatHookCentrifugeAnimInstance_PlayerHooked::gameEventType' has a wrong offset!");
static_assert(offsetof(MeatHookCentrifugeAnimInstance_PlayerHooked, gameEventData) == 0x000010, "Member 'MeatHookCentrifugeAnimInstance_PlayerHooked::gameEventData' has a wrong offset!");

// Function Halloween2022.MeatHookCentrifugeAnimInstance.PlayerNoLongerOnHook
// 0x0038 (0x0038 - 0x0000)
struct MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook) == 0x000008, "Wrong alignment on MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook");
static_assert(sizeof(MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook) == 0x000038, "Wrong size on MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook");
static_assert(offsetof(MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook, gameEventType) == 0x000000, "Member 'MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook::gameEventType' has a wrong offset!");
static_assert(offsetof(MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook, gameEventData) == 0x000010, "Member 'MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook::gameEventData' has a wrong offset!");

// Function Halloween2022.PlayerVoidEnergy.OnLocallyObservedChanged
// 0x0008 (0x0008 - 0x0000)
struct PlayerVoidEnergy_OnLocallyObservedChanged final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_OnLocallyObservedChanged) == 0x000008, "Wrong alignment on PlayerVoidEnergy_OnLocallyObservedChanged");
static_assert(sizeof(PlayerVoidEnergy_OnLocallyObservedChanged) == 0x000008, "Wrong size on PlayerVoidEnergy_OnLocallyObservedChanged");
static_assert(offsetof(PlayerVoidEnergy_OnLocallyObservedChanged, player) == 0x000000, "Member 'PlayerVoidEnergy_OnLocallyObservedChanged::player' has a wrong offset!");

// Function Halloween2022.PlayerVoidEnergy.OnRep_CurrentVoidEnergy
// 0x0004 (0x0004 - 0x0000)
struct PlayerVoidEnergy_OnRep_CurrentVoidEnergy final
{
public:
	int32                                         previousEnergyCount;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_OnRep_CurrentVoidEnergy) == 0x000004, "Wrong alignment on PlayerVoidEnergy_OnRep_CurrentVoidEnergy");
static_assert(sizeof(PlayerVoidEnergy_OnRep_CurrentVoidEnergy) == 0x000004, "Wrong size on PlayerVoidEnergy_OnRep_CurrentVoidEnergy");
static_assert(offsetof(PlayerVoidEnergy_OnRep_CurrentVoidEnergy, previousEnergyCount) == 0x000000, "Member 'PlayerVoidEnergy_OnRep_CurrentVoidEnergy::previousEnergyCount' has a wrong offset!");

// Function Halloween2022.PlayerVoidEnergy.GetCurrentBloodPointMultiplier
// 0x0004 (0x0004 - 0x0000)
struct PlayerVoidEnergy_GetCurrentBloodPointMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_GetCurrentBloodPointMultiplier) == 0x000004, "Wrong alignment on PlayerVoidEnergy_GetCurrentBloodPointMultiplier");
static_assert(sizeof(PlayerVoidEnergy_GetCurrentBloodPointMultiplier) == 0x000004, "Wrong size on PlayerVoidEnergy_GetCurrentBloodPointMultiplier");
static_assert(offsetof(PlayerVoidEnergy_GetCurrentBloodPointMultiplier, ReturnValue) == 0x000000, "Member 'PlayerVoidEnergy_GetCurrentBloodPointMultiplier::ReturnValue' has a wrong offset!");

// Function Halloween2022.PlayerVoidEnergy.GetCurrentVoidEnergyCount
// 0x0004 (0x0004 - 0x0000)
struct PlayerVoidEnergy_GetCurrentVoidEnergyCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_GetCurrentVoidEnergyCount) == 0x000004, "Wrong alignment on PlayerVoidEnergy_GetCurrentVoidEnergyCount");
static_assert(sizeof(PlayerVoidEnergy_GetCurrentVoidEnergyCount) == 0x000004, "Wrong size on PlayerVoidEnergy_GetCurrentVoidEnergyCount");
static_assert(offsetof(PlayerVoidEnergy_GetCurrentVoidEnergyCount, ReturnValue) == 0x000000, "Member 'PlayerVoidEnergy_GetCurrentVoidEnergyCount::ReturnValue' has a wrong offset!");

// Function Halloween2022.PlayerVoidEnergy.GetCurrentVoidEnergyRewardTier
// 0x0004 (0x0004 - 0x0000)
struct PlayerVoidEnergy_GetCurrentVoidEnergyRewardTier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_GetCurrentVoidEnergyRewardTier) == 0x000004, "Wrong alignment on PlayerVoidEnergy_GetCurrentVoidEnergyRewardTier");
static_assert(sizeof(PlayerVoidEnergy_GetCurrentVoidEnergyRewardTier) == 0x000004, "Wrong size on PlayerVoidEnergy_GetCurrentVoidEnergyRewardTier");
static_assert(offsetof(PlayerVoidEnergy_GetCurrentVoidEnergyRewardTier, ReturnValue) == 0x000000, "Member 'PlayerVoidEnergy_GetCurrentVoidEnergyRewardTier::ReturnValue' has a wrong offset!");

// Function Halloween2022.PlayerVoidEnergy.GetMaxAmountOfVoidEnergyCanReceive
// 0x0004 (0x0004 - 0x0000)
struct PlayerVoidEnergy_GetMaxAmountOfVoidEnergyCanReceive final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_GetMaxAmountOfVoidEnergyCanReceive) == 0x000004, "Wrong alignment on PlayerVoidEnergy_GetMaxAmountOfVoidEnergyCanReceive");
static_assert(sizeof(PlayerVoidEnergy_GetMaxAmountOfVoidEnergyCanReceive) == 0x000004, "Wrong size on PlayerVoidEnergy_GetMaxAmountOfVoidEnergyCanReceive");
static_assert(offsetof(PlayerVoidEnergy_GetMaxAmountOfVoidEnergyCanReceive, ReturnValue) == 0x000000, "Member 'PlayerVoidEnergy_GetMaxAmountOfVoidEnergyCanReceive::ReturnValue' has a wrong offset!");

// Function Halloween2022.PlayerVoidEnergy.GetTotalVoidEnergyDeposited
// 0x0004 (0x0004 - 0x0000)
struct PlayerVoidEnergy_GetTotalVoidEnergyDeposited final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_GetTotalVoidEnergyDeposited) == 0x000004, "Wrong alignment on PlayerVoidEnergy_GetTotalVoidEnergyDeposited");
static_assert(sizeof(PlayerVoidEnergy_GetTotalVoidEnergyDeposited) == 0x000004, "Wrong size on PlayerVoidEnergy_GetTotalVoidEnergyDeposited");
static_assert(offsetof(PlayerVoidEnergy_GetTotalVoidEnergyDeposited, ReturnValue) == 0x000000, "Member 'PlayerVoidEnergy_GetTotalVoidEnergyDeposited::ReturnValue' has a wrong offset!");

// Function Halloween2022.UnstableRift.Cosmetic_ChangeUnstableVisibility
// 0x0001 (0x0001 - 0x0000)
struct UnstableRift_Cosmetic_ChangeUnstableVisibility final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnstableRift_Cosmetic_ChangeUnstableVisibility) == 0x000001, "Wrong alignment on UnstableRift_Cosmetic_ChangeUnstableVisibility");
static_assert(sizeof(UnstableRift_Cosmetic_ChangeUnstableVisibility) == 0x000001, "Wrong size on UnstableRift_Cosmetic_ChangeUnstableVisibility");
static_assert(offsetof(UnstableRift_Cosmetic_ChangeUnstableVisibility, isVisible) == 0x000000, "Member 'UnstableRift_Cosmetic_ChangeUnstableVisibility::isVisible' has a wrong offset!");

// Function Halloween2022.UnstableRift.Cosmetic_OnInteractionCompleted
// 0x0008 (0x0008 - 0x0000)
struct UnstableRift_Cosmetic_OnInteractionCompleted final
{
public:
	class ADBDPlayer*                             interactingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnstableRift_Cosmetic_OnInteractionCompleted) == 0x000008, "Wrong alignment on UnstableRift_Cosmetic_OnInteractionCompleted");
static_assert(sizeof(UnstableRift_Cosmetic_OnInteractionCompleted) == 0x000008, "Wrong size on UnstableRift_Cosmetic_OnInteractionCompleted");
static_assert(offsetof(UnstableRift_Cosmetic_OnInteractionCompleted, interactingPlayer) == 0x000000, "Member 'UnstableRift_Cosmetic_OnInteractionCompleted::interactingPlayer' has a wrong offset!");

// Function Halloween2022.UnstableRift.Cosmetic_OnStartedInteracting
// 0x0010 (0x0010 - 0x0000)
struct UnstableRift_Cosmetic_OnStartedInteracting final
{
public:
	class ADBDPlayer*                             interactingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         interactionDuration;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnstableRift_Cosmetic_OnStartedInteracting) == 0x000008, "Wrong alignment on UnstableRift_Cosmetic_OnStartedInteracting");
static_assert(sizeof(UnstableRift_Cosmetic_OnStartedInteracting) == 0x000010, "Wrong size on UnstableRift_Cosmetic_OnStartedInteracting");
static_assert(offsetof(UnstableRift_Cosmetic_OnStartedInteracting, interactingPlayer) == 0x000000, "Member 'UnstableRift_Cosmetic_OnStartedInteracting::interactingPlayer' has a wrong offset!");
static_assert(offsetof(UnstableRift_Cosmetic_OnStartedInteracting, interactionDuration) == 0x000008, "Member 'UnstableRift_Cosmetic_OnStartedInteracting::interactionDuration' has a wrong offset!");

// Function Halloween2022.UnstableRift.Cosmetic_OnTeleportStart
// 0x0001 (0x0001 - 0x0000)
struct UnstableRift_Cosmetic_OnTeleportStart final
{
public:
	bool                                          hadPlayerInteraction;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnstableRift_Cosmetic_OnTeleportStart) == 0x000001, "Wrong alignment on UnstableRift_Cosmetic_OnTeleportStart");
static_assert(sizeof(UnstableRift_Cosmetic_OnTeleportStart) == 0x000001, "Wrong size on UnstableRift_Cosmetic_OnTeleportStart");
static_assert(offsetof(UnstableRift_Cosmetic_OnTeleportStart, hadPlayerInteraction) == 0x000000, "Member 'UnstableRift_Cosmetic_OnTeleportStart::hadPlayerInteraction' has a wrong offset!");

// Function Halloween2022.UnstableRiftTeleportationComponent.Multicast_PreTeleportation
// 0x0010 (0x0010 - 0x0000)
struct UnstableRiftTeleportationComponent_Multicast_PreTeleportation final
{
public:
	struct FVector                                teleportLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hadPlayerInteraction;                              // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnstableRiftTeleportationComponent_Multicast_PreTeleportation) == 0x000004, "Wrong alignment on UnstableRiftTeleportationComponent_Multicast_PreTeleportation");
static_assert(sizeof(UnstableRiftTeleportationComponent_Multicast_PreTeleportation) == 0x000010, "Wrong size on UnstableRiftTeleportationComponent_Multicast_PreTeleportation");
static_assert(offsetof(UnstableRiftTeleportationComponent_Multicast_PreTeleportation, teleportLocation) == 0x000000, "Member 'UnstableRiftTeleportationComponent_Multicast_PreTeleportation::teleportLocation' has a wrong offset!");
static_assert(offsetof(UnstableRiftTeleportationComponent_Multicast_PreTeleportation, hadPlayerInteraction) == 0x00000C, "Member 'UnstableRiftTeleportationComponent_Multicast_PreTeleportation::hadPlayerInteraction' has a wrong offset!");

// Function Halloween2022.UnstableRiftTeleportationComponent.Multicast_TeleportUnstableRift
// 0x000C (0x000C - 0x0000)
struct UnstableRiftTeleportationComponent_Multicast_TeleportUnstableRift final
{
public:
	struct FVector                                location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnstableRiftTeleportationComponent_Multicast_TeleportUnstableRift) == 0x000004, "Wrong alignment on UnstableRiftTeleportationComponent_Multicast_TeleportUnstableRift");
static_assert(sizeof(UnstableRiftTeleportationComponent_Multicast_TeleportUnstableRift) == 0x00000C, "Wrong size on UnstableRiftTeleportationComponent_Multicast_TeleportUnstableRift");
static_assert(offsetof(UnstableRiftTeleportationComponent_Multicast_TeleportUnstableRift, location) == 0x000000, "Member 'UnstableRiftTeleportationComponent_Multicast_TeleportUnstableRift::location' has a wrong offset!");

// Function Halloween2022.VoidEnergyProducer.Cosmetic_OnVoidOrbsSpawned
// 0x0004 (0x0004 - 0x0000)
struct VoidEnergyProducer_Cosmetic_OnVoidOrbsSpawned final
{
public:
	int32                                         orbsSpawned;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyProducer_Cosmetic_OnVoidOrbsSpawned) == 0x000004, "Wrong alignment on VoidEnergyProducer_Cosmetic_OnVoidOrbsSpawned");
static_assert(sizeof(VoidEnergyProducer_Cosmetic_OnVoidOrbsSpawned) == 0x000004, "Wrong size on VoidEnergyProducer_Cosmetic_OnVoidOrbsSpawned");
static_assert(offsetof(VoidEnergyProducer_Cosmetic_OnVoidOrbsSpawned, orbsSpawned) == 0x000000, "Member 'VoidEnergyProducer_Cosmetic_OnVoidOrbsSpawned::orbsSpawned' has a wrong offset!");

// Function Halloween2022.VoidEnergyProducer.OnRep_TotalEnergyGiven
// 0x0004 (0x0004 - 0x0000)
struct VoidEnergyProducer_OnRep_TotalEnergyGiven final
{
public:
	int32                                         lastTotalEnergyGivenValue;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyProducer_OnRep_TotalEnergyGiven) == 0x000004, "Wrong alignment on VoidEnergyProducer_OnRep_TotalEnergyGiven");
static_assert(sizeof(VoidEnergyProducer_OnRep_TotalEnergyGiven) == 0x000004, "Wrong size on VoidEnergyProducer_OnRep_TotalEnergyGiven");
static_assert(offsetof(VoidEnergyProducer_OnRep_TotalEnergyGiven, lastTotalEnergyGivenValue) == 0x000000, "Member 'VoidEnergyProducer_OnRep_TotalEnergyGiven::lastTotalEnergyGivenValue' has a wrong offset!");

// Function Halloween2022.VoidEnergyProducer.GetRemainingEnergy
// 0x0004 (0x0004 - 0x0000)
struct VoidEnergyProducer_GetRemainingEnergy final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyProducer_GetRemainingEnergy) == 0x000004, "Wrong alignment on VoidEnergyProducer_GetRemainingEnergy");
static_assert(sizeof(VoidEnergyProducer_GetRemainingEnergy) == 0x000004, "Wrong size on VoidEnergyProducer_GetRemainingEnergy");
static_assert(offsetof(VoidEnergyProducer_GetRemainingEnergy, ReturnValue) == 0x000000, "Member 'VoidEnergyProducer_GetRemainingEnergy::ReturnValue' has a wrong offset!");

// Function Halloween2022.VoidEnergyProducer.HasEnergyLeftToGive
// 0x0001 (0x0001 - 0x0000)
struct VoidEnergyProducer_HasEnergyLeftToGive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyProducer_HasEnergyLeftToGive) == 0x000001, "Wrong alignment on VoidEnergyProducer_HasEnergyLeftToGive");
static_assert(sizeof(VoidEnergyProducer_HasEnergyLeftToGive) == 0x000001, "Wrong size on VoidEnergyProducer_HasEnergyLeftToGive");
static_assert(offsetof(VoidEnergyProducer_HasEnergyLeftToGive, ReturnValue) == 0x000000, "Member 'VoidEnergyProducer_HasEnergyLeftToGive::ReturnValue' has a wrong offset!");

// Function Halloween2022.VoidEnergyGeneratorComponent.GetCurrentTimeDoneOnGenerator
// 0x0010 (0x0010 - 0x0000)
struct VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator) == 0x000008, "Wrong alignment on VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator");
static_assert(sizeof(VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator) == 0x000010, "Wrong size on VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator");
static_assert(offsetof(VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator, player) == 0x000000, "Member 'VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator::player' has a wrong offset!");
static_assert(offsetof(VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator, ReturnValue) == 0x000008, "Member 'VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator::ReturnValue' has a wrong offset!");

// Function Halloween2022.VoidEnergyOrb.Cosmetic_DelayBeforeCollection
// 0x0008 (0x0008 - 0x0000)
struct VoidEnergyOrb_Cosmetic_DelayBeforeCollection final
{
public:
	class ADBDPlayer*                             playerGivingOrbTo;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrb_Cosmetic_DelayBeforeCollection) == 0x000008, "Wrong alignment on VoidEnergyOrb_Cosmetic_DelayBeforeCollection");
static_assert(sizeof(VoidEnergyOrb_Cosmetic_DelayBeforeCollection) == 0x000008, "Wrong size on VoidEnergyOrb_Cosmetic_DelayBeforeCollection");
static_assert(offsetof(VoidEnergyOrb_Cosmetic_DelayBeforeCollection, playerGivingOrbTo) == 0x000000, "Member 'VoidEnergyOrb_Cosmetic_DelayBeforeCollection::playerGivingOrbTo' has a wrong offset!");

// Function Halloween2022.VoidEnergyOrb.Cosmetic_OnOrbDisappearWithCollection
// 0x0008 (0x0008 - 0x0000)
struct VoidEnergyOrb_Cosmetic_OnOrbDisappearWithCollection final
{
public:
	class ADBDPlayer*                             playerGivingOrbTo;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrb_Cosmetic_OnOrbDisappearWithCollection) == 0x000008, "Wrong alignment on VoidEnergyOrb_Cosmetic_OnOrbDisappearWithCollection");
static_assert(sizeof(VoidEnergyOrb_Cosmetic_OnOrbDisappearWithCollection) == 0x000008, "Wrong size on VoidEnergyOrb_Cosmetic_OnOrbDisappearWithCollection");
static_assert(offsetof(VoidEnergyOrb_Cosmetic_OnOrbDisappearWithCollection, playerGivingOrbTo) == 0x000000, "Member 'VoidEnergyOrb_Cosmetic_OnOrbDisappearWithCollection::playerGivingOrbTo' has a wrong offset!");

// Function Halloween2022.VoidEnergyOrb.Cosmetic_OnOrbDisappearWithoutCollection
// 0x0001 (0x0001 - 0x0000)
struct VoidEnergyOrb_Cosmetic_OnOrbDisappearWithoutCollection final
{
public:
	bool                                          isLargeOrb;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrb_Cosmetic_OnOrbDisappearWithoutCollection) == 0x000001, "Wrong alignment on VoidEnergyOrb_Cosmetic_OnOrbDisappearWithoutCollection");
static_assert(sizeof(VoidEnergyOrb_Cosmetic_OnOrbDisappearWithoutCollection) == 0x000001, "Wrong size on VoidEnergyOrb_Cosmetic_OnOrbDisappearWithoutCollection");
static_assert(offsetof(VoidEnergyOrb_Cosmetic_OnOrbDisappearWithoutCollection, isLargeOrb) == 0x000000, "Member 'VoidEnergyOrb_Cosmetic_OnOrbDisappearWithoutCollection::isLargeOrb' has a wrong offset!");

// Function Halloween2022.VoidEnergyOrb.Cosmetic_OnOrbSpawned
// 0x0010 (0x0010 - 0x0000)
struct VoidEnergyOrb_Cosmetic_OnOrbSpawned final
{
public:
	class ADBDPlayer*                             playerGivingOrbTo;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isLargeOrb;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoidEnergyOrb_Cosmetic_OnOrbSpawned) == 0x000008, "Wrong alignment on VoidEnergyOrb_Cosmetic_OnOrbSpawned");
static_assert(sizeof(VoidEnergyOrb_Cosmetic_OnOrbSpawned) == 0x000010, "Wrong size on VoidEnergyOrb_Cosmetic_OnOrbSpawned");
static_assert(offsetof(VoidEnergyOrb_Cosmetic_OnOrbSpawned, playerGivingOrbTo) == 0x000000, "Member 'VoidEnergyOrb_Cosmetic_OnOrbSpawned::playerGivingOrbTo' has a wrong offset!");
static_assert(offsetof(VoidEnergyOrb_Cosmetic_OnOrbSpawned, isLargeOrb) == 0x000008, "Member 'VoidEnergyOrb_Cosmetic_OnOrbSpawned::isLargeOrb' has a wrong offset!");

// Function Halloween2022.VoidEnergyOrbSpawner.Authority_GiveVoidEnergyToPlayer
// 0x0008 (0x0008 - 0x0000)
struct VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer final
{
public:
	EVoidEnergyType                               voidEnergyType;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         voidEnergyToAdd;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer) == 0x000004, "Wrong alignment on VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer");
static_assert(sizeof(VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer) == 0x000008, "Wrong size on VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer, voidEnergyType) == 0x000000, "Member 'VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer::voidEnergyType' has a wrong offset!");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer, voidEnergyToAdd) == 0x000004, "Member 'VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer::voidEnergyToAdd' has a wrong offset!");

// Function Halloween2022.VoidEnergyOrbSpawner.Authority_KillerDownSurvivor
// 0x0038 (0x0038 - 0x0000)
struct VoidEnergyOrbSpawner_Authority_KillerDownSurvivor final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrbSpawner_Authority_KillerDownSurvivor) == 0x000008, "Wrong alignment on VoidEnergyOrbSpawner_Authority_KillerDownSurvivor");
static_assert(sizeof(VoidEnergyOrbSpawner_Authority_KillerDownSurvivor) == 0x000038, "Wrong size on VoidEnergyOrbSpawner_Authority_KillerDownSurvivor");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_KillerDownSurvivor, gameEventType) == 0x000000, "Member 'VoidEnergyOrbSpawner_Authority_KillerDownSurvivor::gameEventType' has a wrong offset!");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_KillerDownSurvivor, gameEventData) == 0x000010, "Member 'VoidEnergyOrbSpawner_Authority_KillerDownSurvivor::gameEventData' has a wrong offset!");

// Function Halloween2022.VoidEnergyOrbSpawner.Authority_SpawnVoidEnergyOrbs
// 0x0038 (0x0038 - 0x0000)
struct VoidEnergyOrbSpawner_Authority_SpawnVoidEnergyOrbs final
{
public:
	struct FOrbProperties                         orbProperties;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         numberOfOrbsToSpawn;                               // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         numberOfOrbsThatCanBeAbsorbed;                     // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrbSpawner_Authority_SpawnVoidEnergyOrbs) == 0x000004, "Wrong alignment on VoidEnergyOrbSpawner_Authority_SpawnVoidEnergyOrbs");
static_assert(sizeof(VoidEnergyOrbSpawner_Authority_SpawnVoidEnergyOrbs) == 0x000038, "Wrong size on VoidEnergyOrbSpawner_Authority_SpawnVoidEnergyOrbs");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_SpawnVoidEnergyOrbs, orbProperties) == 0x000000, "Member 'VoidEnergyOrbSpawner_Authority_SpawnVoidEnergyOrbs::orbProperties' has a wrong offset!");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_SpawnVoidEnergyOrbs, numberOfOrbsToSpawn) == 0x000030, "Member 'VoidEnergyOrbSpawner_Authority_SpawnVoidEnergyOrbs::numberOfOrbsToSpawn' has a wrong offset!");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_SpawnVoidEnergyOrbs, numberOfOrbsThatCanBeAbsorbed) == 0x000034, "Member 'VoidEnergyOrbSpawner_Authority_SpawnVoidEnergyOrbs::numberOfOrbsThatCanBeAbsorbed' has a wrong offset!");

// Function Halloween2022.VoidEnergyOrbSpawner.Authority_SurvivorStunKillerWithFlashLight
// 0x0038 (0x0038 - 0x0000)
struct VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithFlashLight final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithFlashLight) == 0x000008, "Wrong alignment on VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithFlashLight");
static_assert(sizeof(VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithFlashLight) == 0x000038, "Wrong size on VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithFlashLight");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithFlashLight, gameEventType) == 0x000000, "Member 'VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithFlashLight::gameEventType' has a wrong offset!");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithFlashLight, gameEventData) == 0x000010, "Member 'VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithFlashLight::gameEventData' has a wrong offset!");

// Function Halloween2022.VoidEnergyOrbSpawner.Authority_SurvivorStunKillerWithHeadOn
// 0x0038 (0x0038 - 0x0000)
struct VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithHeadOn final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithHeadOn) == 0x000008, "Wrong alignment on VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithHeadOn");
static_assert(sizeof(VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithHeadOn) == 0x000038, "Wrong size on VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithHeadOn");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithHeadOn, gameEventType) == 0x000000, "Member 'VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithHeadOn::gameEventType' has a wrong offset!");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithHeadOn, gameEventData) == 0x000010, "Member 'VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithHeadOn::gameEventData' has a wrong offset!");

// Function Halloween2022.VoidEnergyOrbSpawner.Authority_SurvivorStunKillerWithPallet
// 0x0038 (0x0038 - 0x0000)
struct VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithPallet final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithPallet) == 0x000008, "Wrong alignment on VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithPallet");
static_assert(sizeof(VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithPallet) == 0x000038, "Wrong size on VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithPallet");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithPallet, gameEventType) == 0x000000, "Member 'VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithPallet::gameEventType' has a wrong offset!");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithPallet, gameEventData) == 0x000010, "Member 'VoidEnergyOrbSpawner_Authority_SurvivorStunKillerWithPallet::gameEventData' has a wrong offset!");

// Function Halloween2022.VoidEnergyOrbSpawner.Authority_SurvivorStunOnKiller
// 0x0038 (0x0038 - 0x0000)
struct VoidEnergyOrbSpawner_Authority_SurvivorStunOnKiller final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrbSpawner_Authority_SurvivorStunOnKiller) == 0x000008, "Wrong alignment on VoidEnergyOrbSpawner_Authority_SurvivorStunOnKiller");
static_assert(sizeof(VoidEnergyOrbSpawner_Authority_SurvivorStunOnKiller) == 0x000038, "Wrong size on VoidEnergyOrbSpawner_Authority_SurvivorStunOnKiller");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_SurvivorStunOnKiller, gameEventType) == 0x000000, "Member 'VoidEnergyOrbSpawner_Authority_SurvivorStunOnKiller::gameEventType' has a wrong offset!");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_SurvivorStunOnKiller, gameEventData) == 0x000010, "Member 'VoidEnergyOrbSpawner_Authority_SurvivorStunOnKiller::gameEventData' has a wrong offset!");

// Function Halloween2022.VoidEnergyOrbSpawner.Authority_TimerSpawnVoidEnergyOrb
// 0x0034 (0x0034 - 0x0000)
struct VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb final
{
public:
	struct FOrbProperties                         orbProperties;                                     // 0x0000(0x0030)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          isLargeOrb;                                        // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb) == 0x000004, "Wrong alignment on VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb");
static_assert(sizeof(VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb) == 0x000034, "Wrong size on VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb, orbProperties) == 0x000000, "Member 'VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb::orbProperties' has a wrong offset!");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb, isLargeOrb) == 0x000030, "Member 'VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb::isLargeOrb' has a wrong offset!");

// Function Halloween2022.VoidEnergyOrbSpawner.Multicast_SpawnVoidEnergyOrb
// 0x0034 (0x0034 - 0x0000)
struct VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb final
{
public:
	struct FOrbProperties                         orbProperties;                                     // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          isLargeOrb;                                        // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb) == 0x000004, "Wrong alignment on VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb");
static_assert(sizeof(VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb) == 0x000034, "Wrong size on VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb");
static_assert(offsetof(VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb, orbProperties) == 0x000000, "Member 'VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb::orbProperties' has a wrong offset!");
static_assert(offsetof(VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb, isLargeOrb) == 0x000030, "Member 'VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb::isLargeOrb' has a wrong offset!");

}

