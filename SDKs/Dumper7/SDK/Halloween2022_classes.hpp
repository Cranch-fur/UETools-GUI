#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Halloween2022

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "Engine_classes.hpp"
#include "Halloween2022_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class Halloween2022.VoidEnergyChangeQEEvaluator
// 0x0010 (0x00C8 - 0x00B8)
class UVoidEnergyChangeQEEvaluator : public UQuestEventEvaluatorBase
{
public:
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ListenToOnComponentAddedEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyChangeQEEvaluator">();
	}
	static class UVoidEnergyChangeQEEvaluator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidEnergyChangeQEEvaluator>();
	}
};
static_assert(alignof(UVoidEnergyChangeQEEvaluator) == 0x000008, "Wrong alignment on UVoidEnergyChangeQEEvaluator");
static_assert(sizeof(UVoidEnergyChangeQEEvaluator) == 0x0000C8, "Wrong size on UVoidEnergyChangeQEEvaluator");

// Class Halloween2022.DepositEnergyInMatchQEEvaluator
// 0x0000 (0x00C8 - 0x00C8)
class UDepositEnergyInMatchQEEvaluator final : public UVoidEnergyChangeQEEvaluator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DepositEnergyInMatchQEEvaluator">();
	}
	static class UDepositEnergyInMatchQEEvaluator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDepositEnergyInMatchQEEvaluator>();
	}
};
static_assert(alignof(UDepositEnergyInMatchQEEvaluator) == 0x000008, "Wrong alignment on UDepositEnergyInMatchQEEvaluator");
static_assert(sizeof(UDepositEnergyInMatchQEEvaluator) == 0x0000C8, "Wrong size on UDepositEnergyInMatchQEEvaluator");

// Class Halloween2022.DepositVoidEnergyTierQEEvaluator
// 0x0008 (0x00C0 - 0x00B8)
class UDepositVoidEnergyTierQEEvaluator final : public UQuestEventEvaluatorBase
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnVoidEnergyDeposited(const struct FGameplayTag& gameEventType, const struct FGameEventData& gameEventData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DepositVoidEnergyTierQEEvaluator">();
	}
	static class UDepositVoidEnergyTierQEEvaluator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDepositVoidEnergyTierQEEvaluator>();
	}
};
static_assert(alignof(UDepositVoidEnergyTierQEEvaluator) == 0x000008, "Wrong alignment on UDepositVoidEnergyTierQEEvaluator");
static_assert(sizeof(UDepositVoidEnergyTierQEEvaluator) == 0x0000C0, "Wrong size on UDepositVoidEnergyTierQEEvaluator");

// Class Halloween2022.HalloweenCentrifugeAnimInstance
// 0x0040 (0x0300 - 0x02C0)
class UHalloweenCentrifugeAnimInstance : public UAnimInstance
{
public:
	bool                                          _isActive;                                         // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _blendSpaceValue;                                  // 0x02C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _timeToChangeBlendValue;                           // 0x02C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2CC[0x34];                                     // 0x02CC(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBlendValueChanged(const float blendValue);
	void OnEnergySpawned(int32 previousEnergy, int32 currentEnergy);
	void SetDesiredBlendValue(const float blendValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HalloweenCentrifugeAnimInstance">();
	}
	static class UHalloweenCentrifugeAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHalloweenCentrifugeAnimInstance>();
	}
};
static_assert(alignof(UHalloweenCentrifugeAnimInstance) == 0x000010, "Wrong alignment on UHalloweenCentrifugeAnimInstance");
static_assert(sizeof(UHalloweenCentrifugeAnimInstance) == 0x000300, "Wrong size on UHalloweenCentrifugeAnimInstance");
static_assert(offsetof(UHalloweenCentrifugeAnimInstance, _isActive) == 0x0002C0, "Member 'UHalloweenCentrifugeAnimInstance::_isActive' has a wrong offset!");
static_assert(offsetof(UHalloweenCentrifugeAnimInstance, _blendSpaceValue) == 0x0002C4, "Member 'UHalloweenCentrifugeAnimInstance::_blendSpaceValue' has a wrong offset!");
static_assert(offsetof(UHalloweenCentrifugeAnimInstance, _timeToChangeBlendValue) == 0x0002C8, "Member 'UHalloweenCentrifugeAnimInstance::_timeToChangeBlendValue' has a wrong offset!");

// Class Halloween2022.GeneratorCentrifugeAnimInstance
// 0x0010 (0x0310 - 0x0300)
class UGeneratorCentrifugeAnimInstance final : public UHalloweenCentrifugeAnimInstance
{
public:
	uint8                                         Pad_300[0x10];                                     // 0x0300(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnStartRepair(class AGenerator* generator);
	void OnStopRepair(class AGenerator* generator);
	void StartRepairing(const struct FGameplayTag& gameEventType, const struct FGameEventData& gameEventData);
	void StopRepairing(const struct FGameplayTag& gameEventType, const struct FGameEventData& gameEventData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeneratorCentrifugeAnimInstance">();
	}
	static class UGeneratorCentrifugeAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeneratorCentrifugeAnimInstance>();
	}
};
static_assert(alignof(UGeneratorCentrifugeAnimInstance) == 0x000010, "Wrong alignment on UGeneratorCentrifugeAnimInstance");
static_assert(sizeof(UGeneratorCentrifugeAnimInstance) == 0x000310, "Wrong size on UGeneratorCentrifugeAnimInstance");

// Class Halloween2022.MeatHookCentrifugeAnimInstance
// 0x0040 (0x0340 - 0x0300)
class UMeatHookCentrifugeAnimInstance final : public UHalloweenCentrifugeAnimInstance
{
public:
	uint8                                         Pad_300[0x30];                                     // 0x0300(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _animationLength;                                  // 0x0330(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_334[0xC];                                      // 0x0334(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerHooked(class AMeatHook* meatHook);
	void OnPlayerNoLongerOnHook(class AMeatHook* meatHook);
	void PlayerHooked(const struct FGameplayTag& gameEventType, const struct FGameEventData& gameEventData);
	void PlayerNoLongerOnHook(const struct FGameplayTag& gameEventType, const struct FGameEventData& gameEventData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeatHookCentrifugeAnimInstance">();
	}
	static class UMeatHookCentrifugeAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeatHookCentrifugeAnimInstance>();
	}
};
static_assert(alignof(UMeatHookCentrifugeAnimInstance) == 0x000010, "Wrong alignment on UMeatHookCentrifugeAnimInstance");
static_assert(sizeof(UMeatHookCentrifugeAnimInstance) == 0x000340, "Wrong size on UMeatHookCentrifugeAnimInstance");
static_assert(offsetof(UMeatHookCentrifugeAnimInstance, _animationLength) == 0x000330, "Member 'UMeatHookCentrifugeAnimInstance::_animationLength' has a wrong offset!");

// Class Halloween2022.PlayerVoidEnergy
// 0x0250 (0x0308 - 0x00B8)
class UPlayerVoidEnergy final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x60];                                      // 0x00B8(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	EVoidEnergyChangeReason                       _reasonLastVoidEnergyChangeOccurred;               // 0x0118(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_119[0xB];                                      // 0x0119(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _currentVoidEnergy;                                // 0x0124(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FDBDTunableRowHandle>           _bloodPointMultiplierTiers;                        // 0x0128(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	int32                                         _totalVoidEnergySpent;                             // 0x0138(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _currentBloodpointsMultiplier;                     // 0x013C(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_140[0x28];                                     // 0x0140(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDBDTunableRowHandle>           _voidEnergyLevelsToStartNextTier;                  // 0x0168(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _maxEnergyOnPlayerAllowed;                         // 0x0178(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _maxEnergyPlayerCanBank;                           // 0x01A0(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _amountLostOnDownAsSurvivor;                       // 0x01C8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _amountGainedOnDownAsKiller;                       // 0x01F0(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _amountGainedOnStunAsSurvivor;                     // 0x0218(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _amountLostOnStunAsKiller;                         // 0x0240(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FDBDTunableRowHandle>           _hasteValueTiers;                                  // 0x0268(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeHasteEffectLasts;                             // 0x0278(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _hasteStatusEffect;                                // 0x02A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UVoidEnergyOrbSpawner>      _voidEnergyOrbSpawnerClass;                        // 0x02A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B0[0x8];                                      // 0x02B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   _scoreEventTiers;                                  // 0x02B8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FGameplayTag>                   _scoreEventTiersWithoutOffering;                   // 0x02C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D8[0x30];                                     // 0x02D8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLocallyControlledChanged();
	void OnLocallyObservedChanged(class ADBDPlayer* player);
	void OnRep_CurrentVoidEnergy(int32 previousEnergyCount);
	void OnRep_TotalVoidEnergySpent();
	void OnVoidEnergyGained();
	void OnVoidEnergyLost();
	void OnVoidEnergySpent();

	float GetCurrentBloodPointMultiplier() const;
	int32 GetCurrentVoidEnergyCount() const;
	int32 GetCurrentVoidEnergyRewardTier() const;
	int32 GetMaxAmountOfVoidEnergyCanReceive() const;
	int32 GetTotalVoidEnergyDeposited() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerVoidEnergy">();
	}
	static class UPlayerVoidEnergy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerVoidEnergy>();
	}
};
static_assert(alignof(UPlayerVoidEnergy) == 0x000008, "Wrong alignment on UPlayerVoidEnergy");
static_assert(sizeof(UPlayerVoidEnergy) == 0x000308, "Wrong size on UPlayerVoidEnergy");
static_assert(offsetof(UPlayerVoidEnergy, _reasonLastVoidEnergyChangeOccurred) == 0x000118, "Member 'UPlayerVoidEnergy::_reasonLastVoidEnergyChangeOccurred' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _currentVoidEnergy) == 0x000124, "Member 'UPlayerVoidEnergy::_currentVoidEnergy' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _bloodPointMultiplierTiers) == 0x000128, "Member 'UPlayerVoidEnergy::_bloodPointMultiplierTiers' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _totalVoidEnergySpent) == 0x000138, "Member 'UPlayerVoidEnergy::_totalVoidEnergySpent' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _currentBloodpointsMultiplier) == 0x00013C, "Member 'UPlayerVoidEnergy::_currentBloodpointsMultiplier' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _voidEnergyLevelsToStartNextTier) == 0x000168, "Member 'UPlayerVoidEnergy::_voidEnergyLevelsToStartNextTier' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _maxEnergyOnPlayerAllowed) == 0x000178, "Member 'UPlayerVoidEnergy::_maxEnergyOnPlayerAllowed' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _maxEnergyPlayerCanBank) == 0x0001A0, "Member 'UPlayerVoidEnergy::_maxEnergyPlayerCanBank' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _amountLostOnDownAsSurvivor) == 0x0001C8, "Member 'UPlayerVoidEnergy::_amountLostOnDownAsSurvivor' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _amountGainedOnDownAsKiller) == 0x0001F0, "Member 'UPlayerVoidEnergy::_amountGainedOnDownAsKiller' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _amountGainedOnStunAsSurvivor) == 0x000218, "Member 'UPlayerVoidEnergy::_amountGainedOnStunAsSurvivor' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _amountLostOnStunAsKiller) == 0x000240, "Member 'UPlayerVoidEnergy::_amountLostOnStunAsKiller' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _hasteValueTiers) == 0x000268, "Member 'UPlayerVoidEnergy::_hasteValueTiers' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _timeHasteEffectLasts) == 0x000278, "Member 'UPlayerVoidEnergy::_timeHasteEffectLasts' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _hasteStatusEffect) == 0x0002A0, "Member 'UPlayerVoidEnergy::_hasteStatusEffect' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _voidEnergyOrbSpawnerClass) == 0x0002A8, "Member 'UPlayerVoidEnergy::_voidEnergyOrbSpawnerClass' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _scoreEventTiers) == 0x0002B8, "Member 'UPlayerVoidEnergy::_scoreEventTiers' has a wrong offset!");
static_assert(offsetof(UPlayerVoidEnergy, _scoreEventTiersWithoutOffering) == 0x0002C8, "Member 'UPlayerVoidEnergy::_scoreEventTiersWithoutOffering' has a wrong offset!");

// Class Halloween2022.UnstableRift
// 0x0108 (0x0470 - 0x0368)
class AUnstableRift final : public ASpecialBehaviourInteractable
{
public:
	bool                                          _isInitialized;                                    // 0x0368(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUnstableRiftInteraction*               _unstableRiftInteractionSurvivor;                  // 0x0370(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnstableRiftInteraction*               _unstableRiftInteractionKiller;                    // 0x0378(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChargeableComponent*                   _unstableRiftInteractionChargeableSurvivor;        // 0x0380(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChargeableComponent*                   _unstableRiftInteractionChargeableKiller;          // 0x0388(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInteractor*                            _unstableRiftInteractor;                           // 0x0390(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    _unstableRiftInteractionZone;                      // 0x0398(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDBDOutlineComponent*                   _outlineComponent;                                 // 0x03A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnstableRiftOutlineStrategy*           _outlineStrategy;                                  // 0x03A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                   _unstableRiftMesh;                                 // 0x03B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUnstableRiftTeleportationComponent*    _unstableRiftTeleportationComponent;               // 0x03B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNearTrackedActorComponent*             _nearTrackedActorComponent;                        // 0x03C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _unstableRiftInteractionSecondsToChargeSurvivor;   // 0x03C8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _unstableRiftInteractionSecondsToChargeKiller;     // 0x03F0(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _unstableRiftSecondsBeforeTeleport;                // 0x0418(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _offeringDirectionalAudioCueDistance;              // 0x0440(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAkAudioEvent*                          _offeringAudioEvent;                               // 0x0468(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Cosmetic_ChangeUnstableVisibility(bool isVisible);
	void Cosmetic_OnInteractionCompleted(class ADBDPlayer* interactingPlayer);
	void Cosmetic_OnStartedInteracting(class ADBDPlayer* interactingPlayer, float interactionDuration);
	void Cosmetic_OnStoppedInteracting();
	void Cosmetic_OnTeleportDelayStarted();
	void Cosmetic_OnTeleportFinished();
	void Cosmetic_OnTeleportStart(const bool hadPlayerInteraction);
	void OnIntroCompleted();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnstableRift">();
	}
	static class AUnstableRift* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUnstableRift>();
	}
};
static_assert(alignof(AUnstableRift) == 0x000008, "Wrong alignment on AUnstableRift");
static_assert(sizeof(AUnstableRift) == 0x000470, "Wrong size on AUnstableRift");
static_assert(offsetof(AUnstableRift, _isInitialized) == 0x000368, "Member 'AUnstableRift::_isInitialized' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftInteractionSurvivor) == 0x000370, "Member 'AUnstableRift::_unstableRiftInteractionSurvivor' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftInteractionKiller) == 0x000378, "Member 'AUnstableRift::_unstableRiftInteractionKiller' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftInteractionChargeableSurvivor) == 0x000380, "Member 'AUnstableRift::_unstableRiftInteractionChargeableSurvivor' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftInteractionChargeableKiller) == 0x000388, "Member 'AUnstableRift::_unstableRiftInteractionChargeableKiller' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftInteractor) == 0x000390, "Member 'AUnstableRift::_unstableRiftInteractor' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftInteractionZone) == 0x000398, "Member 'AUnstableRift::_unstableRiftInteractionZone' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _outlineComponent) == 0x0003A0, "Member 'AUnstableRift::_outlineComponent' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _outlineStrategy) == 0x0003A8, "Member 'AUnstableRift::_outlineStrategy' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftMesh) == 0x0003B0, "Member 'AUnstableRift::_unstableRiftMesh' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftTeleportationComponent) == 0x0003B8, "Member 'AUnstableRift::_unstableRiftTeleportationComponent' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _nearTrackedActorComponent) == 0x0003C0, "Member 'AUnstableRift::_nearTrackedActorComponent' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftInteractionSecondsToChargeSurvivor) == 0x0003C8, "Member 'AUnstableRift::_unstableRiftInteractionSecondsToChargeSurvivor' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftInteractionSecondsToChargeKiller) == 0x0003F0, "Member 'AUnstableRift::_unstableRiftInteractionSecondsToChargeKiller' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _unstableRiftSecondsBeforeTeleport) == 0x000418, "Member 'AUnstableRift::_unstableRiftSecondsBeforeTeleport' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _offeringDirectionalAudioCueDistance) == 0x000440, "Member 'AUnstableRift::_offeringDirectionalAudioCueDistance' has a wrong offset!");
static_assert(offsetof(AUnstableRift, _offeringAudioEvent) == 0x000468, "Member 'AUnstableRift::_offeringAudioEvent' has a wrong offset!");

// Class Halloween2022.UnstableRiftInteraction
// 0x0040 (0x0780 - 0x0740)
class UUnstableRiftInteraction final : public UChargeableInteractionDefinition
{
public:
	uint8                                         Pad_740[0x34];                                     // 0x0740(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _heightOffsetForOrbs;                              // 0x0774(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_778[0x8];                                      // 0x0778(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnstableRiftInteraction">();
	}
	static class UUnstableRiftInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnstableRiftInteraction>();
	}
};
static_assert(alignof(UUnstableRiftInteraction) == 0x000010, "Wrong alignment on UUnstableRiftInteraction");
static_assert(sizeof(UUnstableRiftInteraction) == 0x000780, "Wrong size on UUnstableRiftInteraction");
static_assert(offsetof(UUnstableRiftInteraction, _heightOffsetForOrbs) == 0x000774, "Member 'UUnstableRiftInteraction::_heightOffsetForOrbs' has a wrong offset!");

// Class Halloween2022.UnstableRiftOutlineStrategy
// 0x0018 (0x0150 - 0x0138)
class UUnstableRiftOutlineStrategy final : public USourceBasedOutlineUpdateStrategy
{
public:
	struct FLinearColor                           _displayColor;                                     // 0x0138(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnstableRiftOutlineStrategy">();
	}
	static class UUnstableRiftOutlineStrategy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnstableRiftOutlineStrategy>();
	}
};
static_assert(alignof(UUnstableRiftOutlineStrategy) == 0x000008, "Wrong alignment on UUnstableRiftOutlineStrategy");
static_assert(sizeof(UUnstableRiftOutlineStrategy) == 0x000150, "Wrong size on UUnstableRiftOutlineStrategy");
static_assert(offsetof(UUnstableRiftOutlineStrategy, _displayColor) == 0x000138, "Member 'UUnstableRiftOutlineStrategy::_displayColor' has a wrong offset!");

// Class Halloween2022.UnstableRiftTeleportationComponent
// 0x0148 (0x0200 - 0x00B8)
class UUnstableRiftTeleportationComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x18];                                      // 0x00B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _unstableRiftTeleportDelay;                        // 0x00D0(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _teleportationVisualsDelay;                        // 0x00F8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _minDistanceFromOtherUnstableRifts;                // 0x0120(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_148[0x90];                                     // 0x0148(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	EGameplayElementType                          _spawnType;                                        // 0x01D8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AUnstableRift*>                  _allUnstableRifts;                                 // 0x01E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F0[0x10];                                     // 0x01F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnLevelReadyToPlay();
	void Multicast_PreTeleportation(const struct FVector& teleportLocation, const bool hadPlayerInteraction);
	void Multicast_TeleportUnstableRift(const struct FVector& location);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnstableRiftTeleportationComponent">();
	}
	static class UUnstableRiftTeleportationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnstableRiftTeleportationComponent>();
	}
};
static_assert(alignof(UUnstableRiftTeleportationComponent) == 0x000008, "Wrong alignment on UUnstableRiftTeleportationComponent");
static_assert(sizeof(UUnstableRiftTeleportationComponent) == 0x000200, "Wrong size on UUnstableRiftTeleportationComponent");
static_assert(offsetof(UUnstableRiftTeleportationComponent, _unstableRiftTeleportDelay) == 0x0000D0, "Member 'UUnstableRiftTeleportationComponent::_unstableRiftTeleportDelay' has a wrong offset!");
static_assert(offsetof(UUnstableRiftTeleportationComponent, _teleportationVisualsDelay) == 0x0000F8, "Member 'UUnstableRiftTeleportationComponent::_teleportationVisualsDelay' has a wrong offset!");
static_assert(offsetof(UUnstableRiftTeleportationComponent, _minDistanceFromOtherUnstableRifts) == 0x000120, "Member 'UUnstableRiftTeleportationComponent::_minDistanceFromOtherUnstableRifts' has a wrong offset!");
static_assert(offsetof(UUnstableRiftTeleportationComponent, _spawnType) == 0x0001D8, "Member 'UUnstableRiftTeleportationComponent::_spawnType' has a wrong offset!");
static_assert(offsetof(UUnstableRiftTeleportationComponent, _allUnstableRifts) == 0x0001E0, "Member 'UUnstableRiftTeleportationComponent::_allUnstableRifts' has a wrong offset!");

// Class Halloween2022.VoidEnergyAmountInMatchQEEvaluator
// 0x0008 (0x00D0 - 0x00C8)
class UVoidEnergyAmountInMatchQEEvaluator final : public UVoidEnergyChangeQEEvaluator
{
public:
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyAmountInMatchQEEvaluator">();
	}
	static class UVoidEnergyAmountInMatchQEEvaluator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidEnergyAmountInMatchQEEvaluator>();
	}
};
static_assert(alignof(UVoidEnergyAmountInMatchQEEvaluator) == 0x000008, "Wrong alignment on UVoidEnergyAmountInMatchQEEvaluator");
static_assert(sizeof(UVoidEnergyAmountInMatchQEEvaluator) == 0x0000D0, "Wrong size on UVoidEnergyAmountInMatchQEEvaluator");

// Class Halloween2022.VoidEnergyProducer
// 0x00D8 (0x0190 - 0x00B8)
class UVoidEnergyProducer : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x18];                                      // 0x00B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _maxEnergyCanAward;                                // 0x00D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _energyToGiveOnEvent;                              // 0x00F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  _gameEventToRewardEnergy;                          // 0x0120(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                         _totalEnergyGiven;                                 // 0x0140(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_144[0x1C];                                     // 0x0144(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _voidEnergySpawnObjectName;                        // 0x0160(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   _voidEnergyHoverObjectName;                        // 0x016C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_178[0x18];                                     // 0x0178(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnVoidOrbsSpawned(const int32 orbsSpawned);
	void OnRep_TotalEnergyGiven(int32 lastTotalEnergyGivenValue);

	int32 GetRemainingEnergy() const;
	bool HasEnergyLeftToGive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyProducer">();
	}
	static class UVoidEnergyProducer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidEnergyProducer>();
	}
};
static_assert(alignof(UVoidEnergyProducer) == 0x000008, "Wrong alignment on UVoidEnergyProducer");
static_assert(sizeof(UVoidEnergyProducer) == 0x000190, "Wrong size on UVoidEnergyProducer");
static_assert(offsetof(UVoidEnergyProducer, _maxEnergyCanAward) == 0x0000D0, "Member 'UVoidEnergyProducer::_maxEnergyCanAward' has a wrong offset!");
static_assert(offsetof(UVoidEnergyProducer, _energyToGiveOnEvent) == 0x0000F8, "Member 'UVoidEnergyProducer::_energyToGiveOnEvent' has a wrong offset!");
static_assert(offsetof(UVoidEnergyProducer, _gameEventToRewardEnergy) == 0x000120, "Member 'UVoidEnergyProducer::_gameEventToRewardEnergy' has a wrong offset!");
static_assert(offsetof(UVoidEnergyProducer, _totalEnergyGiven) == 0x000140, "Member 'UVoidEnergyProducer::_totalEnergyGiven' has a wrong offset!");
static_assert(offsetof(UVoidEnergyProducer, _voidEnergySpawnObjectName) == 0x000160, "Member 'UVoidEnergyProducer::_voidEnergySpawnObjectName' has a wrong offset!");
static_assert(offsetof(UVoidEnergyProducer, _voidEnergyHoverObjectName) == 0x00016C, "Member 'UVoidEnergyProducer::_voidEnergyHoverObjectName' has a wrong offset!");

// Class Halloween2022.VoidEnergyGeneratorComponent
// 0x0080 (0x0210 - 0x0190)
class UVoidEnergyGeneratorComponent final : public UVoidEnergyProducer
{
public:
	struct FDBDTunableRowHandle                   _timeWorkingOnGeneratorNeededToAwardEnergy;        // 0x0190(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x58];                                     // 0x01B8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetCurrentTimeDoneOnGenerator(class ADBDPlayer* player) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyGeneratorComponent">();
	}
	static class UVoidEnergyGeneratorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidEnergyGeneratorComponent>();
	}
};
static_assert(alignof(UVoidEnergyGeneratorComponent) == 0x000008, "Wrong alignment on UVoidEnergyGeneratorComponent");
static_assert(sizeof(UVoidEnergyGeneratorComponent) == 0x000210, "Wrong size on UVoidEnergyGeneratorComponent");
static_assert(offsetof(UVoidEnergyGeneratorComponent, _timeWorkingOnGeneratorNeededToAwardEnergy) == 0x000190, "Member 'UVoidEnergyGeneratorComponent::_timeWorkingOnGeneratorNeededToAwardEnergy' has a wrong offset!");

// Class Halloween2022.VoidEnergyMeatHookComponent
// 0x0000 (0x0190 - 0x0190)
class UVoidEnergyMeatHookComponent final : public UVoidEnergyProducer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyMeatHookComponent">();
	}
	static class UVoidEnergyMeatHookComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidEnergyMeatHookComponent>();
	}
};
static_assert(alignof(UVoidEnergyMeatHookComponent) == 0x000008, "Wrong alignment on UVoidEnergyMeatHookComponent");
static_assert(sizeof(UVoidEnergyMeatHookComponent) == 0x000190, "Wrong size on UVoidEnergyMeatHookComponent");

// Class Halloween2022.VoidEnergyOrb
// 0x00C8 (0x02F8 - 0x0230)
class AVoidEnergyOrb final : public AActor
{
public:
	uint8                                         Pad_230[0x10];                                     // 0x0230(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _characterBoneName;                                // 0x0240(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _timeHoverDuration;                                // 0x0250(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeToMoveToTarget;                               // 0x0278(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _timeBeforeCollectionToPlaySound;                  // 0x02A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _minAmplitudeAllowed;                              // 0x02A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _maxAmplitudeAllowed;                              // 0x02AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B0[0x48];                                     // 0x02B0(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_DelayBeforeCollection(class ADBDPlayer* playerGivingOrbTo);
	void Cosmetic_OnOrbDisappearWithCollection(class ADBDPlayer* playerGivingOrbTo);
	void Cosmetic_OnOrbDisappearWithoutCollection(const bool isLargeOrb);
	void Cosmetic_OnOrbSpawned(class ADBDPlayer* playerGivingOrbTo, const bool isLargeOrb);
	void PlaceOrbInQueue();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyOrb">();
	}
	static class AVoidEnergyOrb* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVoidEnergyOrb>();
	}
};
static_assert(alignof(AVoidEnergyOrb) == 0x000008, "Wrong alignment on AVoidEnergyOrb");
static_assert(sizeof(AVoidEnergyOrb) == 0x0002F8, "Wrong size on AVoidEnergyOrb");
static_assert(offsetof(AVoidEnergyOrb, _characterBoneName) == 0x000240, "Member 'AVoidEnergyOrb::_characterBoneName' has a wrong offset!");
static_assert(offsetof(AVoidEnergyOrb, _timeHoverDuration) == 0x000250, "Member 'AVoidEnergyOrb::_timeHoverDuration' has a wrong offset!");
static_assert(offsetof(AVoidEnergyOrb, _timeToMoveToTarget) == 0x000278, "Member 'AVoidEnergyOrb::_timeToMoveToTarget' has a wrong offset!");
static_assert(offsetof(AVoidEnergyOrb, _timeBeforeCollectionToPlaySound) == 0x0002A0, "Member 'AVoidEnergyOrb::_timeBeforeCollectionToPlaySound' has a wrong offset!");
static_assert(offsetof(AVoidEnergyOrb, _minAmplitudeAllowed) == 0x0002A8, "Member 'AVoidEnergyOrb::_minAmplitudeAllowed' has a wrong offset!");
static_assert(offsetof(AVoidEnergyOrb, _maxAmplitudeAllowed) == 0x0002AC, "Member 'AVoidEnergyOrb::_maxAmplitudeAllowed' has a wrong offset!");

// Class Halloween2022.VoidEnergyOrbSpawner
// 0x0168 (0x0220 - 0x00B8)
class alignas(0x10) UVoidEnergyOrbSpawner final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _timeBetweenEachSpawn;                             // 0x00C8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _totalDistanceForOrbs;                             // 0x00F0(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _maxDistanceDown;                                  // 0x0118(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeOrbMoves;                                     // 0x0140(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeOrbHovers;                                    // 0x0168(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _downedSurviorSpawnOffsetHeight;                   // 0x0190(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _palletSpawnHeightOfOrbs;                          // 0x0194(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _lockerSpawnForwardOffset;                         // 0x0198(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _lockerSpawnUpwardOffset;                          // 0x019C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _slasherSpawnOffset;                               // 0x01A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _slasherSpawnOffsetFarDown;                        // 0x01A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A8[0x10];                                     // 0x01A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     _voidEnergyOrbClass;                               // 0x01B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C0[0x60];                                     // 0x01C0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_GiveVoidEnergyToPlayer(const EVoidEnergyType voidEnergyType, const int32 voidEnergyToAdd);
	void Authority_KillerDownSurvivor(const struct FGameplayTag& gameEventType, const struct FGameEventData& gameEventData);
	void Authority_SpawnVoidEnergyOrbs(const struct FOrbProperties& orbProperties, const int32 numberOfOrbsToSpawn, const int32 numberOfOrbsThatCanBeAbsorbed);
	void Authority_SurvivorStunKillerWithFlashLight(const struct FGameplayTag& gameEventType, const struct FGameEventData& gameEventData);
	void Authority_SurvivorStunKillerWithHeadOn(const struct FGameplayTag& gameEventType, const struct FGameEventData& gameEventData);
	void Authority_SurvivorStunKillerWithPallet(const struct FGameplayTag& gameEventType, const struct FGameEventData& gameEventData);
	void Authority_SurvivorStunOnKiller(const struct FGameplayTag& gameEventType, const struct FGameEventData& gameEventData);
	void Authority_TimerSpawnVoidEnergyOrb(const struct FOrbProperties& orbProperties, const bool isLargeOrb);
	void Multicast_SpawnVoidEnergyOrb(const struct FOrbProperties& orbProperties, const bool isLargeOrb);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyOrbSpawner">();
	}
	static class UVoidEnergyOrbSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidEnergyOrbSpawner>();
	}
};
static_assert(alignof(UVoidEnergyOrbSpawner) == 0x000010, "Wrong alignment on UVoidEnergyOrbSpawner");
static_assert(sizeof(UVoidEnergyOrbSpawner) == 0x000220, "Wrong size on UVoidEnergyOrbSpawner");
static_assert(offsetof(UVoidEnergyOrbSpawner, _timeBetweenEachSpawn) == 0x0000C8, "Member 'UVoidEnergyOrbSpawner::_timeBetweenEachSpawn' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _totalDistanceForOrbs) == 0x0000F0, "Member 'UVoidEnergyOrbSpawner::_totalDistanceForOrbs' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _maxDistanceDown) == 0x000118, "Member 'UVoidEnergyOrbSpawner::_maxDistanceDown' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _timeOrbMoves) == 0x000140, "Member 'UVoidEnergyOrbSpawner::_timeOrbMoves' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _timeOrbHovers) == 0x000168, "Member 'UVoidEnergyOrbSpawner::_timeOrbHovers' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _downedSurviorSpawnOffsetHeight) == 0x000190, "Member 'UVoidEnergyOrbSpawner::_downedSurviorSpawnOffsetHeight' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _palletSpawnHeightOfOrbs) == 0x000194, "Member 'UVoidEnergyOrbSpawner::_palletSpawnHeightOfOrbs' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _lockerSpawnForwardOffset) == 0x000198, "Member 'UVoidEnergyOrbSpawner::_lockerSpawnForwardOffset' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _lockerSpawnUpwardOffset) == 0x00019C, "Member 'UVoidEnergyOrbSpawner::_lockerSpawnUpwardOffset' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _slasherSpawnOffset) == 0x0001A0, "Member 'UVoidEnergyOrbSpawner::_slasherSpawnOffset' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _slasherSpawnOffsetFarDown) == 0x0001A4, "Member 'UVoidEnergyOrbSpawner::_slasherSpawnOffsetFarDown' has a wrong offset!");
static_assert(offsetof(UVoidEnergyOrbSpawner, _voidEnergyOrbClass) == 0x0001B8, "Member 'UVoidEnergyOrbSpawner::_voidEnergyOrbClass' has a wrong offset!");

// Class Halloween2022.VoidEnergyPumpkinComponent
// 0x0078 (0x0208 - 0x0190)
class UVoidEnergyPumpkinComponent final : public UVoidEnergyProducer
{
public:
	struct FDBDTunableRowHandle                   _treatVoidEnergyAmount;                            // 0x0190(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _trickVoidEnergyAmount;                            // 0x01B8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _neutralVoidEnergyAmount;                          // 0x01E0(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoidEnergyPumpkinComponent">();
	}
	static class UVoidEnergyPumpkinComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoidEnergyPumpkinComponent>();
	}
};
static_assert(alignof(UVoidEnergyPumpkinComponent) == 0x000008, "Wrong alignment on UVoidEnergyPumpkinComponent");
static_assert(sizeof(UVoidEnergyPumpkinComponent) == 0x000208, "Wrong size on UVoidEnergyPumpkinComponent");
static_assert(offsetof(UVoidEnergyPumpkinComponent, _treatVoidEnergyAmount) == 0x000190, "Member 'UVoidEnergyPumpkinComponent::_treatVoidEnergyAmount' has a wrong offset!");
static_assert(offsetof(UVoidEnergyPumpkinComponent, _trickVoidEnergyAmount) == 0x0001B8, "Member 'UVoidEnergyPumpkinComponent::_trickVoidEnergyAmount' has a wrong offset!");
static_assert(offsetof(UVoidEnergyPumpkinComponent, _neutralVoidEnergyAmount) == 0x0001E0, "Member 'UVoidEnergyPumpkinComponent::_neutralVoidEnergyAmount' has a wrong offset!");

}

