#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK30

#include "Basic.hpp"

#include "TheK30_structs.hpp"
#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK::Params
{

// Function TheK30.DrawPatrolPathInteraction.Server_SendOrder
// 0x0008 (0x0008 - 0x0000)
struct DrawPatrolPathInteraction_Server_SendOrder final
{
public:
	class AInteractable*                          target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DrawPatrolPathInteraction_Server_SendOrder) == 0x000008, "Wrong alignment on DrawPatrolPathInteraction_Server_SendOrder");
static_assert(sizeof(DrawPatrolPathInteraction_Server_SendOrder) == 0x000008, "Wrong size on DrawPatrolPathInteraction_Server_SendOrder");
static_assert(offsetof(DrawPatrolPathInteraction_Server_SendOrder, target) == 0x000000, "Member 'DrawPatrolPathInteraction_Server_SendOrder::target' has a wrong offset!");

// Function TheK30.DrawPatrolPathInteraction.SetIsCharging
// 0x0001 (0x0001 - 0x0000)
struct DrawPatrolPathInteraction_SetIsCharging final
{
public:
	bool                                          isCharging;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DrawPatrolPathInteraction_SetIsCharging) == 0x000001, "Wrong alignment on DrawPatrolPathInteraction_SetIsCharging");
static_assert(sizeof(DrawPatrolPathInteraction_SetIsCharging) == 0x000001, "Wrong size on DrawPatrolPathInteraction_SetIsCharging");
static_assert(offsetof(DrawPatrolPathInteraction_SetIsCharging, isCharging) == 0x000000, "Member 'DrawPatrolPathInteraction_SetIsCharging::isCharging' has a wrong offset!");

// Function TheK30.DrawPatrolPathInteraction.IsChargeCompleted
// 0x0001 (0x0001 - 0x0000)
struct DrawPatrolPathInteraction_IsChargeCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DrawPatrolPathInteraction_IsChargeCompleted) == 0x000001, "Wrong alignment on DrawPatrolPathInteraction_IsChargeCompleted");
static_assert(sizeof(DrawPatrolPathInteraction_IsChargeCompleted) == 0x000001, "Wrong size on DrawPatrolPathInteraction_IsChargeCompleted");
static_assert(offsetof(DrawPatrolPathInteraction_IsChargeCompleted, ReturnValue) == 0x000000, "Member 'DrawPatrolPathInteraction_IsChargeCompleted::ReturnValue' has a wrong offset!");

// Function TheK30.DrawPatrolPathInteraction.IsCharging
// 0x0001 (0x0001 - 0x0000)
struct DrawPatrolPathInteraction_IsCharging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DrawPatrolPathInteraction_IsCharging) == 0x000001, "Wrong alignment on DrawPatrolPathInteraction_IsCharging");
static_assert(sizeof(DrawPatrolPathInteraction_IsCharging) == 0x000001, "Wrong size on DrawPatrolPathInteraction_IsCharging");
static_assert(offsetof(DrawPatrolPathInteraction_IsCharging, ReturnValue) == 0x000000, "Member 'DrawPatrolPathInteraction_IsCharging::ReturnValue' has a wrong offset!");

// Function TheK30.FloatingCameraNavigationComponent.Multicast_EnableWalkOffLegdes
// 0x0001 (0x0001 - 0x0000)
struct FloatingCameraNavigationComponent_Multicast_EnableWalkOffLegdes final
{
public:
	bool                                          isEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatingCameraNavigationComponent_Multicast_EnableWalkOffLegdes) == 0x000001, "Wrong alignment on FloatingCameraNavigationComponent_Multicast_EnableWalkOffLegdes");
static_assert(sizeof(FloatingCameraNavigationComponent_Multicast_EnableWalkOffLegdes) == 0x000001, "Wrong size on FloatingCameraNavigationComponent_Multicast_EnableWalkOffLegdes");
static_assert(offsetof(FloatingCameraNavigationComponent_Multicast_EnableWalkOffLegdes, isEnabled) == 0x000000, "Member 'FloatingCameraNavigationComponent_Multicast_EnableWalkOffLegdes::isEnabled' has a wrong offset!");

// Function TheK30.FloatingCameraNavigationComponent.Server_EnableWalkOffLegdes
// 0x0001 (0x0001 - 0x0000)
struct FloatingCameraNavigationComponent_Server_EnableWalkOffLegdes final
{
public:
	bool                                          isEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatingCameraNavigationComponent_Server_EnableWalkOffLegdes) == 0x000001, "Wrong alignment on FloatingCameraNavigationComponent_Server_EnableWalkOffLegdes");
static_assert(sizeof(FloatingCameraNavigationComponent_Server_EnableWalkOffLegdes) == 0x000001, "Wrong size on FloatingCameraNavigationComponent_Server_EnableWalkOffLegdes");
static_assert(offsetof(FloatingCameraNavigationComponent_Server_EnableWalkOffLegdes, isEnabled) == 0x000000, "Member 'FloatingCameraNavigationComponent_Server_EnableWalkOffLegdes::isEnabled' has a wrong offset!");

// Function TheK30.GuardController.OnLoudNoiseTriggered
// 0x0028 (0x0028 - 0x0000)
struct GuardController_OnLoudNoiseTriggered final
{
public:
	class AActor*                                 originator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 instigatingActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          shouldTrack;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         audibleRange;                                      // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isQuickAction;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isDeceivingNoise;                                  // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuardController_OnLoudNoiseTriggered) == 0x000008, "Wrong alignment on GuardController_OnLoudNoiseTriggered");
static_assert(sizeof(GuardController_OnLoudNoiseTriggered) == 0x000028, "Wrong size on GuardController_OnLoudNoiseTriggered");
static_assert(offsetof(GuardController_OnLoudNoiseTriggered, originator) == 0x000000, "Member 'GuardController_OnLoudNoiseTriggered::originator' has a wrong offset!");
static_assert(offsetof(GuardController_OnLoudNoiseTriggered, instigatingActor) == 0x000008, "Member 'GuardController_OnLoudNoiseTriggered::instigatingActor' has a wrong offset!");
static_assert(offsetof(GuardController_OnLoudNoiseTriggered, location) == 0x000010, "Member 'GuardController_OnLoudNoiseTriggered::location' has a wrong offset!");
static_assert(offsetof(GuardController_OnLoudNoiseTriggered, shouldTrack) == 0x00001C, "Member 'GuardController_OnLoudNoiseTriggered::shouldTrack' has a wrong offset!");
static_assert(offsetof(GuardController_OnLoudNoiseTriggered, audibleRange) == 0x000020, "Member 'GuardController_OnLoudNoiseTriggered::audibleRange' has a wrong offset!");
static_assert(offsetof(GuardController_OnLoudNoiseTriggered, isQuickAction) == 0x000024, "Member 'GuardController_OnLoudNoiseTriggered::isQuickAction' has a wrong offset!");
static_assert(offsetof(GuardController_OnLoudNoiseTriggered, isDeceivingNoise) == 0x000025, "Member 'GuardController_OnLoudNoiseTriggered::isDeceivingNoise' has a wrong offset!");

// Function TheK30.GuardController.OnTargetPerceptionUpdated
// 0x0050 (0x0050 - 0x0000)
struct GuardController_OnTargetPerceptionUpdated final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            stimulus;                                          // 0x0008(0x0044)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GuardController_OnTargetPerceptionUpdated) == 0x000008, "Wrong alignment on GuardController_OnTargetPerceptionUpdated");
static_assert(sizeof(GuardController_OnTargetPerceptionUpdated) == 0x000050, "Wrong size on GuardController_OnTargetPerceptionUpdated");
static_assert(offsetof(GuardController_OnTargetPerceptionUpdated, actor) == 0x000000, "Member 'GuardController_OnTargetPerceptionUpdated::actor' has a wrong offset!");
static_assert(offsetof(GuardController_OnTargetPerceptionUpdated, stimulus) == 0x000008, "Member 'GuardController_OnTargetPerceptionUpdated::stimulus' has a wrong offset!");

// Function TheK30.GuardFlag.Authority_OnBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct GuardFlag_Authority_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    overlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             hitResult;                                         // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuardFlag_Authority_OnBeginOverlap) == 0x000008, "Wrong alignment on GuardFlag_Authority_OnBeginOverlap");
static_assert(sizeof(GuardFlag_Authority_OnBeginOverlap) == 0x0000B0, "Wrong size on GuardFlag_Authority_OnBeginOverlap");
static_assert(offsetof(GuardFlag_Authority_OnBeginOverlap, overlappedComponent) == 0x000000, "Member 'GuardFlag_Authority_OnBeginOverlap::overlappedComponent' has a wrong offset!");
static_assert(offsetof(GuardFlag_Authority_OnBeginOverlap, other) == 0x000008, "Member 'GuardFlag_Authority_OnBeginOverlap::other' has a wrong offset!");
static_assert(offsetof(GuardFlag_Authority_OnBeginOverlap, otherComp) == 0x000010, "Member 'GuardFlag_Authority_OnBeginOverlap::otherComp' has a wrong offset!");
static_assert(offsetof(GuardFlag_Authority_OnBeginOverlap, otherBodyIndex) == 0x000018, "Member 'GuardFlag_Authority_OnBeginOverlap::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(GuardFlag_Authority_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'GuardFlag_Authority_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(GuardFlag_Authority_OnBeginOverlap, hitResult) == 0x000020, "Member 'GuardFlag_Authority_OnBeginOverlap::hitResult' has a wrong offset!");

// Function TheK30.GuardFlag.Cosmetic_OnFlagDisappearDueToHuntEnding
// 0x0008 (0x0008 - 0x0000)
struct GuardFlag_Cosmetic_OnFlagDisappearDueToHuntEnding final
{
public:
	class ADBDPlayer*                             previouslyHuntedSurvivor;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuardFlag_Cosmetic_OnFlagDisappearDueToHuntEnding) == 0x000008, "Wrong alignment on GuardFlag_Cosmetic_OnFlagDisappearDueToHuntEnding");
static_assert(sizeof(GuardFlag_Cosmetic_OnFlagDisappearDueToHuntEnding) == 0x000008, "Wrong size on GuardFlag_Cosmetic_OnFlagDisappearDueToHuntEnding");
static_assert(offsetof(GuardFlag_Cosmetic_OnFlagDisappearDueToHuntEnding, previouslyHuntedSurvivor) == 0x000000, "Member 'GuardFlag_Cosmetic_OnFlagDisappearDueToHuntEnding::previouslyHuntedSurvivor' has a wrong offset!");

// Function TheK30.GuardFlag.Cosmetic_OnFlagSpawned
// 0x0004 (0x0004 - 0x0000)
struct GuardFlag_Cosmetic_OnFlagSpawned final
{
public:
	float                                         activationTimerDuration;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuardFlag_Cosmetic_OnFlagSpawned) == 0x000004, "Wrong alignment on GuardFlag_Cosmetic_OnFlagSpawned");
static_assert(sizeof(GuardFlag_Cosmetic_OnFlagSpawned) == 0x000004, "Wrong size on GuardFlag_Cosmetic_OnFlagSpawned");
static_assert(offsetof(GuardFlag_Cosmetic_OnFlagSpawned, activationTimerDuration) == 0x000000, "Member 'GuardFlag_Cosmetic_OnFlagSpawned::activationTimerDuration' has a wrong offset!");

// Function TheK30.GuardFlag.Cosmetic_OnSurvivorCapturedFlag
// 0x0008 (0x0008 - 0x0000)
struct GuardFlag_Cosmetic_OnSurvivorCapturedFlag final
{
public:
	class ADBDPlayer*                             previouslyHuntedSurvivor;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuardFlag_Cosmetic_OnSurvivorCapturedFlag) == 0x000008, "Wrong alignment on GuardFlag_Cosmetic_OnSurvivorCapturedFlag");
static_assert(sizeof(GuardFlag_Cosmetic_OnSurvivorCapturedFlag) == 0x000008, "Wrong size on GuardFlag_Cosmetic_OnSurvivorCapturedFlag");
static_assert(offsetof(GuardFlag_Cosmetic_OnSurvivorCapturedFlag, previouslyHuntedSurvivor) == 0x000000, "Member 'GuardFlag_Cosmetic_OnSurvivorCapturedFlag::previouslyHuntedSurvivor' has a wrong offset!");

// Function TheK30.GuardFlag.Multicast_OnCamperCapturedFlag
// 0x0008 (0x0008 - 0x0000)
struct GuardFlag_Multicast_OnCamperCapturedFlag final
{
public:
	class ADBDPlayer*                             huntedSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuardFlag_Multicast_OnCamperCapturedFlag) == 0x000008, "Wrong alignment on GuardFlag_Multicast_OnCamperCapturedFlag");
static_assert(sizeof(GuardFlag_Multicast_OnCamperCapturedFlag) == 0x000008, "Wrong size on GuardFlag_Multicast_OnCamperCapturedFlag");
static_assert(offsetof(GuardFlag_Multicast_OnCamperCapturedFlag, huntedSurvivor) == 0x000000, "Member 'GuardFlag_Multicast_OnCamperCapturedFlag::huntedSurvivor' has a wrong offset!");

// Function TheK30.GuardFlag.GetActivationTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct GuardFlag_GetActivationTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuardFlag_GetActivationTimeLeft) == 0x000004, "Wrong alignment on GuardFlag_GetActivationTimeLeft");
static_assert(sizeof(GuardFlag_GetActivationTimeLeft) == 0x000004, "Wrong size on GuardFlag_GetActivationTimeLeft");
static_assert(offsetof(GuardFlag_GetActivationTimeLeft, ReturnValue) == 0x000000, "Member 'GuardFlag_GetActivationTimeLeft::ReturnValue' has a wrong offset!");

// Function TheK30.GuardFlag.GetHuntedSurvivor
// 0x0008 (0x0008 - 0x0000)
struct GuardFlag_GetHuntedSurvivor final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuardFlag_GetHuntedSurvivor) == 0x000008, "Wrong alignment on GuardFlag_GetHuntedSurvivor");
static_assert(sizeof(GuardFlag_GetHuntedSurvivor) == 0x000008, "Wrong size on GuardFlag_GetHuntedSurvivor");
static_assert(offsetof(GuardFlag_GetHuntedSurvivor, ReturnValue) == 0x000000, "Member 'GuardFlag_GetHuntedSurvivor::ReturnValue' has a wrong offset!");

// Function TheK30.GuardHuntComponent.Authority_OnCamperInjuredOrDowned
// 0x0038 (0x0038 - 0x0000)
struct GuardHuntComponent_Authority_OnCamperInjuredOrDowned final
{
public:
	struct FGameplayTag                           gameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuardHuntComponent_Authority_OnCamperInjuredOrDowned) == 0x000008, "Wrong alignment on GuardHuntComponent_Authority_OnCamperInjuredOrDowned");
static_assert(sizeof(GuardHuntComponent_Authority_OnCamperInjuredOrDowned) == 0x000038, "Wrong size on GuardHuntComponent_Authority_OnCamperInjuredOrDowned");
static_assert(offsetof(GuardHuntComponent_Authority_OnCamperInjuredOrDowned, gameplayTag) == 0x000000, "Member 'GuardHuntComponent_Authority_OnCamperInjuredOrDowned::gameplayTag' has a wrong offset!");
static_assert(offsetof(GuardHuntComponent_Authority_OnCamperInjuredOrDowned, gameEventData) == 0x000010, "Member 'GuardHuntComponent_Authority_OnCamperInjuredOrDowned::gameEventData' has a wrong offset!");

// Function TheK30.GuardHuntComponent.Authority_OnCamperUnhooked
// 0x0038 (0x0038 - 0x0000)
struct GuardHuntComponent_Authority_OnCamperUnhooked final
{
public:
	struct FGameplayTag                           gameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuardHuntComponent_Authority_OnCamperUnhooked) == 0x000008, "Wrong alignment on GuardHuntComponent_Authority_OnCamperUnhooked");
static_assert(sizeof(GuardHuntComponent_Authority_OnCamperUnhooked) == 0x000038, "Wrong size on GuardHuntComponent_Authority_OnCamperUnhooked");
static_assert(offsetof(GuardHuntComponent_Authority_OnCamperUnhooked, gameplayTag) == 0x000000, "Member 'GuardHuntComponent_Authority_OnCamperUnhooked::gameplayTag' has a wrong offset!");
static_assert(offsetof(GuardHuntComponent_Authority_OnCamperUnhooked, gameEventData) == 0x000010, "Member 'GuardHuntComponent_Authority_OnCamperUnhooked::gameEventData' has a wrong offset!");

// Function TheK30.GuardHuntComponent.OnRep_HuntedSurvivor
// 0x0008 (0x0008 - 0x0000)
struct GuardHuntComponent_OnRep_HuntedSurvivor final
{
public:
	class ACamperPlayer*                          previousChasedSurvivor;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuardHuntComponent_OnRep_HuntedSurvivor) == 0x000008, "Wrong alignment on GuardHuntComponent_OnRep_HuntedSurvivor");
static_assert(sizeof(GuardHuntComponent_OnRep_HuntedSurvivor) == 0x000008, "Wrong size on GuardHuntComponent_OnRep_HuntedSurvivor");
static_assert(offsetof(GuardHuntComponent_OnRep_HuntedSurvivor, previousChasedSurvivor) == 0x000000, "Member 'GuardHuntComponent_OnRep_HuntedSurvivor::previousChasedSurvivor' has a wrong offset!");

// Function TheK30.GuardHuntComponent.GetHuntedSurvivor
// 0x0008 (0x0008 - 0x0000)
struct GuardHuntComponent_GetHuntedSurvivor final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuardHuntComponent_GetHuntedSurvivor) == 0x000008, "Wrong alignment on GuardHuntComponent_GetHuntedSurvivor");
static_assert(sizeof(GuardHuntComponent_GetHuntedSurvivor) == 0x000008, "Wrong size on GuardHuntComponent_GetHuntedSurvivor");
static_assert(offsetof(GuardHuntComponent_GetHuntedSurvivor, ReturnValue) == 0x000000, "Member 'GuardHuntComponent_GetHuntedSurvivor::ReturnValue' has a wrong offset!");

// Function TheK30.GuardSlowingZone.OnZoneBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct GuardSlowingZone_OnZoneBeginOverlap final
{
public:
	class AActor*                                 overlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuardSlowingZone_OnZoneBeginOverlap) == 0x000008, "Wrong alignment on GuardSlowingZone_OnZoneBeginOverlap");
static_assert(sizeof(GuardSlowingZone_OnZoneBeginOverlap) == 0x000010, "Wrong size on GuardSlowingZone_OnZoneBeginOverlap");
static_assert(offsetof(GuardSlowingZone_OnZoneBeginOverlap, overlappedActor) == 0x000000, "Member 'GuardSlowingZone_OnZoneBeginOverlap::overlappedActor' has a wrong offset!");
static_assert(offsetof(GuardSlowingZone_OnZoneBeginOverlap, otherActor) == 0x000008, "Member 'GuardSlowingZone_OnZoneBeginOverlap::otherActor' has a wrong offset!");

// Function TheK30.GuardSlowingZone.OnZoneEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct GuardSlowingZone_OnZoneEndOverlap final
{
public:
	class AActor*                                 overlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GuardSlowingZone_OnZoneEndOverlap) == 0x000008, "Wrong alignment on GuardSlowingZone_OnZoneEndOverlap");
static_assert(sizeof(GuardSlowingZone_OnZoneEndOverlap) == 0x000010, "Wrong size on GuardSlowingZone_OnZoneEndOverlap");
static_assert(offsetof(GuardSlowingZone_OnZoneEndOverlap, overlappedActor) == 0x000000, "Member 'GuardSlowingZone_OnZoneEndOverlap::overlappedActor' has a wrong offset!");
static_assert(offsetof(GuardSlowingZone_OnZoneEndOverlap, otherActor) == 0x000008, "Member 'GuardSlowingZone_OnZoneEndOverlap::otherActor' has a wrong offset!");

// Function TheK30.K30InflictStatusOnEndHuntAddon.Authority_OnEndHunt
// 0x0010 (0x0010 - 0x0000)
struct K30InflictStatusOnEndHuntAddon_Authority_OnEndHunt final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuardHuntEndReason                           huntEndReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K30InflictStatusOnEndHuntAddon_Authority_OnEndHunt) == 0x000008, "Wrong alignment on K30InflictStatusOnEndHuntAddon_Authority_OnEndHunt");
static_assert(sizeof(K30InflictStatusOnEndHuntAddon_Authority_OnEndHunt) == 0x000010, "Wrong size on K30InflictStatusOnEndHuntAddon_Authority_OnEndHunt");
static_assert(offsetof(K30InflictStatusOnEndHuntAddon_Authority_OnEndHunt, player) == 0x000000, "Member 'K30InflictStatusOnEndHuntAddon_Authority_OnEndHunt::player' has a wrong offset!");
static_assert(offsetof(K30InflictStatusOnEndHuntAddon_Authority_OnEndHunt, huntEndReason) == 0x000008, "Member 'K30InflictStatusOnEndHuntAddon_Authority_OnEndHunt::huntEndReason' has a wrong offset!");

// Function TheK30.K30ApplyStatusOnWakeUpAddon.Authority_OnWakeUp
// 0x0008 (0x0008 - 0x0000)
struct K30ApplyStatusOnWakeUpAddon_Authority_OnWakeUp final
{
public:
	class AKnightGuard*                           currentGuard;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30ApplyStatusOnWakeUpAddon_Authority_OnWakeUp) == 0x000008, "Wrong alignment on K30ApplyStatusOnWakeUpAddon_Authority_OnWakeUp");
static_assert(sizeof(K30ApplyStatusOnWakeUpAddon_Authority_OnWakeUp) == 0x000008, "Wrong size on K30ApplyStatusOnWakeUpAddon_Authority_OnWakeUp");
static_assert(offsetof(K30ApplyStatusOnWakeUpAddon_Authority_OnWakeUp, currentGuard) == 0x000000, "Member 'K30ApplyStatusOnWakeUpAddon_Authority_OnWakeUp::currentGuard' has a wrong offset!");

// Function TheK30.K30Addon17.BP_RevealAndMakeSurvivorScream
// 0x0010 (0x0010 - 0x0000)
struct K30Addon17_BP_RevealAndMakeSurvivorScream final
{
public:
	class ADBDPlayer*                             survivorPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         screamRevealDuration;                              // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K30Addon17_BP_RevealAndMakeSurvivorScream) == 0x000008, "Wrong alignment on K30Addon17_BP_RevealAndMakeSurvivorScream");
static_assert(sizeof(K30Addon17_BP_RevealAndMakeSurvivorScream) == 0x000010, "Wrong size on K30Addon17_BP_RevealAndMakeSurvivorScream");
static_assert(offsetof(K30Addon17_BP_RevealAndMakeSurvivorScream, survivorPlayer) == 0x000000, "Member 'K30Addon17_BP_RevealAndMakeSurvivorScream::survivorPlayer' has a wrong offset!");
static_assert(offsetof(K30Addon17_BP_RevealAndMakeSurvivorScream, screamRevealDuration) == 0x000008, "Member 'K30Addon17_BP_RevealAndMakeSurvivorScream::screamRevealDuration' has a wrong offset!");

// Function TheK30.K30Addon17.Multicast_OnMakeSurvivorScream
// 0x0010 (0x0010 - 0x0000)
struct K30Addon17_Multicast_OnMakeSurvivorScream final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         lifetime;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K30Addon17_Multicast_OnMakeSurvivorScream) == 0x000008, "Wrong alignment on K30Addon17_Multicast_OnMakeSurvivorScream");
static_assert(sizeof(K30Addon17_Multicast_OnMakeSurvivorScream) == 0x000010, "Wrong size on K30Addon17_Multicast_OnMakeSurvivorScream");
static_assert(offsetof(K30Addon17_Multicast_OnMakeSurvivorScream, player) == 0x000000, "Member 'K30Addon17_Multicast_OnMakeSurvivorScream::player' has a wrong offset!");
static_assert(offsetof(K30Addon17_Multicast_OnMakeSurvivorScream, lifetime) == 0x000008, "Member 'K30Addon17_Multicast_OnMakeSurvivorScream::lifetime' has a wrong offset!");

// Function TheK30.K30Addon20.Authority_OnEndHunt
// 0x0010 (0x0010 - 0x0000)
struct K30Addon20_Authority_OnEndHunt final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuardHuntEndReason                           huntEndReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K30Addon20_Authority_OnEndHunt) == 0x000008, "Wrong alignment on K30Addon20_Authority_OnEndHunt");
static_assert(sizeof(K30Addon20_Authority_OnEndHunt) == 0x000010, "Wrong size on K30Addon20_Authority_OnEndHunt");
static_assert(offsetof(K30Addon20_Authority_OnEndHunt, player) == 0x000000, "Member 'K30Addon20_Authority_OnEndHunt::player' has a wrong offset!");
static_assert(offsetof(K30Addon20_Authority_OnEndHunt, huntEndReason) == 0x000008, "Member 'K30Addon20_Authority_OnEndHunt::huntEndReason' has a wrong offset!");

// Function TheK30.K30Addon20.Authority_OnHuntedSurvivorVault
// 0x0038 (0x0038 - 0x0000)
struct K30Addon20_Authority_OnHuntedSurvivorVault final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30Addon20_Authority_OnHuntedSurvivorVault) == 0x000008, "Wrong alignment on K30Addon20_Authority_OnHuntedSurvivorVault");
static_assert(sizeof(K30Addon20_Authority_OnHuntedSurvivorVault) == 0x000038, "Wrong size on K30Addon20_Authority_OnHuntedSurvivorVault");
static_assert(offsetof(K30Addon20_Authority_OnHuntedSurvivorVault, gameEventType) == 0x000000, "Member 'K30Addon20_Authority_OnHuntedSurvivorVault::gameEventType' has a wrong offset!");
static_assert(offsetof(K30Addon20_Authority_OnHuntedSurvivorVault, gameEventData) == 0x000010, "Member 'K30Addon20_Authority_OnHuntedSurvivorVault::gameEventData' has a wrong offset!");

// Function TheK30.K30Addon20.Authority_OnStartHunt
// 0x0008 (0x0008 - 0x0000)
struct K30Addon20_Authority_OnStartHunt final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30Addon20_Authority_OnStartHunt) == 0x000008, "Wrong alignment on K30Addon20_Authority_OnStartHunt");
static_assert(sizeof(K30Addon20_Authority_OnStartHunt) == 0x000008, "Wrong size on K30Addon20_Authority_OnStartHunt");
static_assert(offsetof(K30Addon20_Authority_OnStartHunt, player) == 0x000000, "Member 'K30Addon20_Authority_OnStartHunt::player' has a wrong offset!");

// Function TheK30.K30Addon20.Authority_OnTrailCameraGoThroughWindow
// 0x0008 (0x0008 - 0x0000)
struct K30Addon20_Authority_OnTrailCameraGoThroughWindow final
{
public:
	class AWindow*                                window;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30Addon20_Authority_OnTrailCameraGoThroughWindow) == 0x000008, "Wrong alignment on K30Addon20_Authority_OnTrailCameraGoThroughWindow");
static_assert(sizeof(K30Addon20_Authority_OnTrailCameraGoThroughWindow) == 0x000008, "Wrong size on K30Addon20_Authority_OnTrailCameraGoThroughWindow");
static_assert(offsetof(K30Addon20_Authority_OnTrailCameraGoThroughWindow, window) == 0x000000, "Member 'K30Addon20_Authority_OnTrailCameraGoThroughWindow::window' has a wrong offset!");

// Function TheK30.K30CheatComponent.DBD_K30SetNextGuardIndex
// 0x0004 (0x0004 - 0x0000)
struct K30CheatComponent_DBD_K30SetNextGuardIndex final
{
public:
	int32                                         nextGuardIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30CheatComponent_DBD_K30SetNextGuardIndex) == 0x000004, "Wrong alignment on K30CheatComponent_DBD_K30SetNextGuardIndex");
static_assert(sizeof(K30CheatComponent_DBD_K30SetNextGuardIndex) == 0x000004, "Wrong size on K30CheatComponent_DBD_K30SetNextGuardIndex");
static_assert(offsetof(K30CheatComponent_DBD_K30SetNextGuardIndex, nextGuardIndex) == 0x000000, "Member 'K30CheatComponent_DBD_K30SetNextGuardIndex::nextGuardIndex' has a wrong offset!");

// Function TheK30.K30CheatComponent.DBD_K30SetPatrolAndHuntDuration
// 0x0004 (0x0004 - 0x0000)
struct K30CheatComponent_DBD_K30SetPatrolAndHuntDuration final
{
public:
	float                                         secondsToPatrol;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30CheatComponent_DBD_K30SetPatrolAndHuntDuration) == 0x000004, "Wrong alignment on K30CheatComponent_DBD_K30SetPatrolAndHuntDuration");
static_assert(sizeof(K30CheatComponent_DBD_K30SetPatrolAndHuntDuration) == 0x000004, "Wrong size on K30CheatComponent_DBD_K30SetPatrolAndHuntDuration");
static_assert(offsetof(K30CheatComponent_DBD_K30SetPatrolAndHuntDuration, secondsToPatrol) == 0x000000, "Member 'K30CheatComponent_DBD_K30SetPatrolAndHuntDuration::secondsToPatrol' has a wrong offset!");

// Function TheK30.K30CheatComponent.DBD_K30ToggleGuardAttackDespawn
// 0x0004 (0x0004 - 0x0000)
struct K30CheatComponent_DBD_K30ToggleGuardAttackDespawn final
{
public:
	int32                                         despawnOnAttack;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30CheatComponent_DBD_K30ToggleGuardAttackDespawn) == 0x000004, "Wrong alignment on K30CheatComponent_DBD_K30ToggleGuardAttackDespawn");
static_assert(sizeof(K30CheatComponent_DBD_K30ToggleGuardAttackDespawn) == 0x000004, "Wrong size on K30CheatComponent_DBD_K30ToggleGuardAttackDespawn");
static_assert(offsetof(K30CheatComponent_DBD_K30ToggleGuardAttackDespawn, despawnOnAttack) == 0x000000, "Member 'K30CheatComponent_DBD_K30ToggleGuardAttackDespawn::despawnOnAttack' has a wrong offset!");

// Function TheK30.K30InflictStatusOnDetectedAddon.Authority_OnDetected
// 0x0008 (0x0008 - 0x0000)
struct K30InflictStatusOnDetectedAddon_Authority_OnDetected final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30InflictStatusOnDetectedAddon_Authority_OnDetected) == 0x000008, "Wrong alignment on K30InflictStatusOnDetectedAddon_Authority_OnDetected");
static_assert(sizeof(K30InflictStatusOnDetectedAddon_Authority_OnDetected) == 0x000008, "Wrong size on K30InflictStatusOnDetectedAddon_Authority_OnDetected");
static_assert(offsetof(K30InflictStatusOnDetectedAddon_Authority_OnDetected, player) == 0x000000, "Member 'K30InflictStatusOnDetectedAddon_Authority_OnDetected::player' has a wrong offset!");

// Function TheK30.K30InflictStatusOnGuardHitAddon.Authority_OnGuardHit
// 0x0008 (0x0008 - 0x0000)
struct K30InflictStatusOnGuardHitAddon_Authority_OnGuardHit final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30InflictStatusOnGuardHitAddon_Authority_OnGuardHit) == 0x000008, "Wrong alignment on K30InflictStatusOnGuardHitAddon_Authority_OnGuardHit");
static_assert(sizeof(K30InflictStatusOnGuardHitAddon_Authority_OnGuardHit) == 0x000008, "Wrong size on K30InflictStatusOnGuardHitAddon_Authority_OnGuardHit");
static_assert(offsetof(K30InflictStatusOnGuardHitAddon_Authority_OnGuardHit, player) == 0x000000, "Member 'K30InflictStatusOnGuardHitAddon_Authority_OnGuardHit::player' has a wrong offset!");

// Function TheK30.K30P02.Authority_OnSurvivorFirstScream
// 0x0008 (0x0008 - 0x0000)
struct K30P02_Authority_OnSurvivorFirstScream final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30P02_Authority_OnSurvivorFirstScream) == 0x000008, "Wrong alignment on K30P02_Authority_OnSurvivorFirstScream");
static_assert(sizeof(K30P02_Authority_OnSurvivorFirstScream) == 0x000008, "Wrong size on K30P02_Authority_OnSurvivorFirstScream");
static_assert(offsetof(K30P02_Authority_OnSurvivorFirstScream, player) == 0x000000, "Member 'K30P02_Authority_OnSurvivorFirstScream::player' has a wrong offset!");

// Function TheK30.K30P02.Authority_OnTotemStateChanged
// 0x0002 (0x0002 - 0x0000)
struct K30P02_Authority_OnTotemStateChanged final
{
public:
	ETotemState                                   oldState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETotemState                                   newState;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30P02_Authority_OnTotemStateChanged) == 0x000001, "Wrong alignment on K30P02_Authority_OnTotemStateChanged");
static_assert(sizeof(K30P02_Authority_OnTotemStateChanged) == 0x000002, "Wrong size on K30P02_Authority_OnTotemStateChanged");
static_assert(offsetof(K30P02_Authority_OnTotemStateChanged, oldState) == 0x000000, "Member 'K30P02_Authority_OnTotemStateChanged::oldState' has a wrong offset!");
static_assert(offsetof(K30P02_Authority_OnTotemStateChanged, newState) == 0x000001, "Member 'K30P02_Authority_OnTotemStateChanged::newState' has a wrong offset!");

// Function TheK30.K30P02.GetScreamInterval
// 0x0004 (0x0004 - 0x0000)
struct K30P02_GetScreamInterval final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30P02_GetScreamInterval) == 0x000004, "Wrong alignment on K30P02_GetScreamInterval");
static_assert(sizeof(K30P02_GetScreamInterval) == 0x000004, "Wrong size on K30P02_GetScreamInterval");
static_assert(offsetof(K30P02_GetScreamInterval, ReturnValue) == 0x000000, "Member 'K30P02_GetScreamInterval::ReturnValue' has a wrong offset!");

// Function TheK30.K30P02ScreamStatusEffect.BP_MakeSurvivorScream
// 0x0010 (0x0010 - 0x0000)
struct K30P02ScreamStatusEffect_BP_MakeSurvivorScream final
{
public:
	class ADBDPlayer*                             survivorPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         screamRevealDuration;                              // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K30P02ScreamStatusEffect_BP_MakeSurvivorScream) == 0x000008, "Wrong alignment on K30P02ScreamStatusEffect_BP_MakeSurvivorScream");
static_assert(sizeof(K30P02ScreamStatusEffect_BP_MakeSurvivorScream) == 0x000010, "Wrong size on K30P02ScreamStatusEffect_BP_MakeSurvivorScream");
static_assert(offsetof(K30P02ScreamStatusEffect_BP_MakeSurvivorScream, survivorPlayer) == 0x000000, "Member 'K30P02ScreamStatusEffect_BP_MakeSurvivorScream::survivorPlayer' has a wrong offset!");
static_assert(offsetof(K30P02ScreamStatusEffect_BP_MakeSurvivorScream, screamRevealDuration) == 0x000008, "Member 'K30P02ScreamStatusEffect_BP_MakeSurvivorScream::screamRevealDuration' has a wrong offset!");

// Function TheK30.K30P02ScreamStatusEffect.Multicast_MakePlayerScream
// 0x0004 (0x0004 - 0x0000)
struct K30P02ScreamStatusEffect_Multicast_MakePlayerScream final
{
public:
	float                                         screamRevealDuration;                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30P02ScreamStatusEffect_Multicast_MakePlayerScream) == 0x000004, "Wrong alignment on K30P02ScreamStatusEffect_Multicast_MakePlayerScream");
static_assert(sizeof(K30P02ScreamStatusEffect_Multicast_MakePlayerScream) == 0x000004, "Wrong size on K30P02ScreamStatusEffect_Multicast_MakePlayerScream");
static_assert(offsetof(K30P02ScreamStatusEffect_Multicast_MakePlayerScream, screamRevealDuration) == 0x000000, "Member 'K30P02ScreamStatusEffect_Multicast_MakePlayerScream::screamRevealDuration' has a wrong offset!");

// Function TheK30.K30P02ScreamStatusEffect.GetTimerDuration
// 0x0004 (0x0004 - 0x0000)
struct K30P02ScreamStatusEffect_GetTimerDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30P02ScreamStatusEffect_GetTimerDuration) == 0x000004, "Wrong alignment on K30P02ScreamStatusEffect_GetTimerDuration");
static_assert(sizeof(K30P02ScreamStatusEffect_GetTimerDuration) == 0x000004, "Wrong size on K30P02ScreamStatusEffect_GetTimerDuration");
static_assert(offsetof(K30P02ScreamStatusEffect_GetTimerDuration, ReturnValue) == 0x000000, "Member 'K30P02ScreamStatusEffect_GetTimerDuration::ReturnValue' has a wrong offset!");

// Function TheK30.K30P02ScreamStatusEffect.GetTimerElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct K30P02ScreamStatusEffect_GetTimerElapsedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30P02ScreamStatusEffect_GetTimerElapsedTime) == 0x000004, "Wrong alignment on K30P02ScreamStatusEffect_GetTimerElapsedTime");
static_assert(sizeof(K30P02ScreamStatusEffect_GetTimerElapsedTime) == 0x000004, "Wrong size on K30P02ScreamStatusEffect_GetTimerElapsedTime");
static_assert(offsetof(K30P02ScreamStatusEffect_GetTimerElapsedTime, ReturnValue) == 0x000000, "Member 'K30P02ScreamStatusEffect_GetTimerElapsedTime::ReturnValue' has a wrong offset!");

// Function TheK30.K30P02ScreamStatusEffect.GetTimerRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct K30P02ScreamStatusEffect_GetTimerRemainingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30P02ScreamStatusEffect_GetTimerRemainingTime) == 0x000004, "Wrong alignment on K30P02ScreamStatusEffect_GetTimerRemainingTime");
static_assert(sizeof(K30P02ScreamStatusEffect_GetTimerRemainingTime) == 0x000004, "Wrong size on K30P02ScreamStatusEffect_GetTimerRemainingTime");
static_assert(offsetof(K30P02ScreamStatusEffect_GetTimerRemainingTime, ReturnValue) == 0x000000, "Member 'K30P02ScreamStatusEffect_GetTimerRemainingTime::ReturnValue' has a wrong offset!");

// Function TheK30.K30P02ScreamStatusEffect.IsTimerActive
// 0x0001 (0x0001 - 0x0000)
struct K30P02ScreamStatusEffect_IsTimerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30P02ScreamStatusEffect_IsTimerActive) == 0x000001, "Wrong alignment on K30P02ScreamStatusEffect_IsTimerActive");
static_assert(sizeof(K30P02ScreamStatusEffect_IsTimerActive) == 0x000001, "Wrong size on K30P02ScreamStatusEffect_IsTimerActive");
static_assert(offsetof(K30P02ScreamStatusEffect_IsTimerActive, ReturnValue) == 0x000000, "Member 'K30P02ScreamStatusEffect_IsTimerActive::ReturnValue' has a wrong offset!");

// Function TheK30.K30P02ScreamStatusEffect.IsTimerPaused
// 0x0001 (0x0001 - 0x0000)
struct K30P02ScreamStatusEffect_IsTimerPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30P02ScreamStatusEffect_IsTimerPaused) == 0x000001, "Wrong alignment on K30P02ScreamStatusEffect_IsTimerPaused");
static_assert(sizeof(K30P02ScreamStatusEffect_IsTimerPaused) == 0x000001, "Wrong size on K30P02ScreamStatusEffect_IsTimerPaused");
static_assert(offsetof(K30P02ScreamStatusEffect_IsTimerPaused, ReturnValue) == 0x000000, "Member 'K30P02ScreamStatusEffect_IsTimerPaused::ReturnValue' has a wrong offset!");

// Function TheK30.K30Power.Cosmetic_UpdateRemainingPathLength
// 0x0004 (0x0004 - 0x0000)
struct K30Power_Cosmetic_UpdateRemainingPathLength final
{
public:
	float                                         remainingPathLengthPercent;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30Power_Cosmetic_UpdateRemainingPathLength) == 0x000004, "Wrong alignment on K30Power_Cosmetic_UpdateRemainingPathLength");
static_assert(sizeof(K30Power_Cosmetic_UpdateRemainingPathLength) == 0x000004, "Wrong size on K30Power_Cosmetic_UpdateRemainingPathLength");
static_assert(offsetof(K30Power_Cosmetic_UpdateRemainingPathLength, remainingPathLengthPercent) == 0x000000, "Member 'K30Power_Cosmetic_UpdateRemainingPathLength::remainingPathLengthPercent' has a wrong offset!");

// Function TheK30.K30Power.Multicast_OnSnappingStateChanged
// 0x0001 (0x0001 - 0x0000)
struct K30Power_Multicast_OnSnappingStateChanged final
{
public:
	bool                                          isSnapping;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30Power_Multicast_OnSnappingStateChanged) == 0x000001, "Wrong alignment on K30Power_Multicast_OnSnappingStateChanged");
static_assert(sizeof(K30Power_Multicast_OnSnappingStateChanged) == 0x000001, "Wrong size on K30Power_Multicast_OnSnappingStateChanged");
static_assert(offsetof(K30Power_Multicast_OnSnappingStateChanged, isSnapping) == 0x000000, "Member 'K30Power_Multicast_OnSnappingStateChanged::isSnapping' has a wrong offset!");

// Function TheK30.K30Power.OnEndOverlapWindow
// 0x0020 (0x0020 - 0x0000)
struct K30Power_OnEndOverlapWindow final
{
public:
	class UPrimitiveComponent*                    overlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K30Power_OnEndOverlapWindow) == 0x000008, "Wrong alignment on K30Power_OnEndOverlapWindow");
static_assert(sizeof(K30Power_OnEndOverlapWindow) == 0x000020, "Wrong size on K30Power_OnEndOverlapWindow");
static_assert(offsetof(K30Power_OnEndOverlapWindow, overlappedComponent) == 0x000000, "Member 'K30Power_OnEndOverlapWindow::overlappedComponent' has a wrong offset!");
static_assert(offsetof(K30Power_OnEndOverlapWindow, otherActor) == 0x000008, "Member 'K30Power_OnEndOverlapWindow::otherActor' has a wrong offset!");
static_assert(offsetof(K30Power_OnEndOverlapWindow, otherComp) == 0x000010, "Member 'K30Power_OnEndOverlapWindow::otherComp' has a wrong offset!");
static_assert(offsetof(K30Power_OnEndOverlapWindow, otherBodyIndex) == 0x000018, "Member 'K30Power_OnEndOverlapWindow::otherBodyIndex' has a wrong offset!");

// Function TheK30.K30Power.OnInteractionStateChanged
// 0x0002 (0x0002 - 0x0000)
struct K30Power_OnInteractionStateChanged final
{
public:
	bool                                          isCharging;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isChargeCompleted;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30Power_OnInteractionStateChanged) == 0x000001, "Wrong alignment on K30Power_OnInteractionStateChanged");
static_assert(sizeof(K30Power_OnInteractionStateChanged) == 0x000002, "Wrong size on K30Power_OnInteractionStateChanged");
static_assert(offsetof(K30Power_OnInteractionStateChanged, isCharging) == 0x000000, "Member 'K30Power_OnInteractionStateChanged::isCharging' has a wrong offset!");
static_assert(offsetof(K30Power_OnInteractionStateChanged, isChargeCompleted) == 0x000001, "Member 'K30Power_OnInteractionStateChanged::isChargeCompleted' has a wrong offset!");

// Function TheK30.K30Power.Server_OnSnappingStateChanged
// 0x0001 (0x0001 - 0x0000)
struct K30Power_Server_OnSnappingStateChanged final
{
public:
	bool                                          isSnapping;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30Power_Server_OnSnappingStateChanged) == 0x000001, "Wrong alignment on K30Power_Server_OnSnappingStateChanged");
static_assert(sizeof(K30Power_Server_OnSnappingStateChanged) == 0x000001, "Wrong size on K30Power_Server_OnSnappingStateChanged");
static_assert(offsetof(K30Power_Server_OnSnappingStateChanged, isSnapping) == 0x000000, "Member 'K30Power_Server_OnSnappingStateChanged::isSnapping' has a wrong offset!");

// Function TheK30.K30Power.IsChargingPower
// 0x0001 (0x0001 - 0x0000)
struct K30Power_IsChargingPower final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30Power_IsChargingPower) == 0x000001, "Wrong alignment on K30Power_IsChargingPower");
static_assert(sizeof(K30Power_IsChargingPower) == 0x000001, "Wrong size on K30Power_IsChargingPower");
static_assert(offsetof(K30Power_IsChargingPower, ReturnValue) == 0x000000, "Member 'K30Power_IsChargingPower::ReturnValue' has a wrong offset!");

// Function TheK30.K30Power.IsDrawingPath
// 0x0001 (0x0001 - 0x0000)
struct K30Power_IsDrawingPath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30Power_IsDrawingPath) == 0x000001, "Wrong alignment on K30Power_IsDrawingPath");
static_assert(sizeof(K30Power_IsDrawingPath) == 0x000001, "Wrong size on K30Power_IsDrawingPath");
static_assert(offsetof(K30Power_IsDrawingPath, ReturnValue) == 0x000000, "Member 'K30Power_IsDrawingPath::ReturnValue' has a wrong offset!");

// Function TheK30.K30Power.IsSnapping
// 0x0001 (0x0001 - 0x0000)
struct K30Power_IsSnapping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30Power_IsSnapping) == 0x000001, "Wrong alignment on K30Power_IsSnapping");
static_assert(sizeof(K30Power_IsSnapping) == 0x000001, "Wrong size on K30Power_IsSnapping");
static_assert(offsetof(K30Power_IsSnapping, ReturnValue) == 0x000000, "Member 'K30Power_IsSnapping::ReturnValue' has a wrong offset!");

// Function TheK30.K30SurvivorCosmeticHelperActor.Cosmetic_OnSurvivorCaptureFlagBuffActivationStateChanged
// 0x0001 (0x0001 - 0x0000)
struct K30SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorCaptureFlagBuffActivationStateChanged final
{
public:
	bool                                          isFlagCaptureBuffActive;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorCaptureFlagBuffActivationStateChanged) == 0x000001, "Wrong alignment on K30SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorCaptureFlagBuffActivationStateChanged");
static_assert(sizeof(K30SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorCaptureFlagBuffActivationStateChanged) == 0x000001, "Wrong size on K30SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorCaptureFlagBuffActivationStateChanged");
static_assert(offsetof(K30SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorCaptureFlagBuffActivationStateChanged, isFlagCaptureBuffActive) == 0x000000, "Member 'K30SurvivorCosmeticHelperActor_Cosmetic_OnSurvivorCaptureFlagBuffActivationStateChanged::isFlagCaptureBuffActive' has a wrong offset!");

// Function TheK30.K30Utilities.GetCurrentGuard
// 0x0010 (0x0010 - 0x0000)
struct K30Utilities_GetCurrentGuard final
{
public:
	const class AActor*                           theK30;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AKnightGuard*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30Utilities_GetCurrentGuard) == 0x000008, "Wrong alignment on K30Utilities_GetCurrentGuard");
static_assert(sizeof(K30Utilities_GetCurrentGuard) == 0x000010, "Wrong size on K30Utilities_GetCurrentGuard");
static_assert(offsetof(K30Utilities_GetCurrentGuard, theK30) == 0x000000, "Member 'K30Utilities_GetCurrentGuard::theK30' has a wrong offset!");
static_assert(offsetof(K30Utilities_GetCurrentGuard, ReturnValue) == 0x000008, "Member 'K30Utilities_GetCurrentGuard::ReturnValue' has a wrong offset!");

// Function TheK30.K30Utilities.GetCurrentGuardIndex
// 0x0010 (0x0010 - 0x0000)
struct K30Utilities_GetCurrentGuardIndex final
{
public:
	const class AActor*                           theK30;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K30Utilities_GetCurrentGuardIndex) == 0x000008, "Wrong alignment on K30Utilities_GetCurrentGuardIndex");
static_assert(sizeof(K30Utilities_GetCurrentGuardIndex) == 0x000010, "Wrong size on K30Utilities_GetCurrentGuardIndex");
static_assert(offsetof(K30Utilities_GetCurrentGuardIndex, theK30) == 0x000000, "Member 'K30Utilities_GetCurrentGuardIndex::theK30' has a wrong offset!");
static_assert(offsetof(K30Utilities_GetCurrentGuardIndex, ReturnValue) == 0x000008, "Member 'K30Utilities_GetCurrentGuardIndex::ReturnValue' has a wrong offset!");

// Function TheK30.K30Utilities.GetK30Power
// 0x0010 (0x0010 - 0x0000)
struct K30Utilities_GetK30Power final
{
public:
	const class AActor*                           theK30;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK30Power*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30Utilities_GetK30Power) == 0x000008, "Wrong alignment on K30Utilities_GetK30Power");
static_assert(sizeof(K30Utilities_GetK30Power) == 0x000010, "Wrong size on K30Utilities_GetK30Power");
static_assert(offsetof(K30Utilities_GetK30Power, theK30) == 0x000000, "Member 'K30Utilities_GetK30Power::theK30' has a wrong offset!");
static_assert(offsetof(K30Utilities_GetK30Power, ReturnValue) == 0x000008, "Member 'K30Utilities_GetK30Power::ReturnValue' has a wrong offset!");

// Function TheK30.K30Utilities.GetNextGuard
// 0x0010 (0x0010 - 0x0000)
struct K30Utilities_GetNextGuard final
{
public:
	const class AActor*                           theK30;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AKnightGuard*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K30Utilities_GetNextGuard) == 0x000008, "Wrong alignment on K30Utilities_GetNextGuard");
static_assert(sizeof(K30Utilities_GetNextGuard) == 0x000010, "Wrong size on K30Utilities_GetNextGuard");
static_assert(offsetof(K30Utilities_GetNextGuard, theK30) == 0x000000, "Member 'K30Utilities_GetNextGuard::theK30' has a wrong offset!");
static_assert(offsetof(K30Utilities_GetNextGuard, ReturnValue) == 0x000008, "Member 'K30Utilities_GetNextGuard::ReturnValue' has a wrong offset!");

// Function TheK30.K30Utilities.GetNextGuardIndex
// 0x0010 (0x0010 - 0x0000)
struct K30Utilities_GetNextGuardIndex final
{
public:
	const class AActor*                           theK30;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K30Utilities_GetNextGuardIndex) == 0x000008, "Wrong alignment on K30Utilities_GetNextGuardIndex");
static_assert(sizeof(K30Utilities_GetNextGuardIndex) == 0x000010, "Wrong size on K30Utilities_GetNextGuardIndex");
static_assert(offsetof(K30Utilities_GetNextGuardIndex, theK30) == 0x000000, "Member 'K30Utilities_GetNextGuardIndex::theK30' has a wrong offset!");
static_assert(offsetof(K30Utilities_GetNextGuardIndex, ReturnValue) == 0x000008, "Member 'K30Utilities_GetNextGuardIndex::ReturnValue' has a wrong offset!");

// Function TheK30.KnightGuard.Cosmetic_OnGuardVisionRadiusChanged
// 0x000C (0x000C - 0x0000)
struct KnightGuard_Cosmetic_OnGuardVisionRadiusChanged final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         radius;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnightGuard_Cosmetic_OnGuardVisionRadiusChanged) == 0x000004, "Wrong alignment on KnightGuard_Cosmetic_OnGuardVisionRadiusChanged");
static_assert(sizeof(KnightGuard_Cosmetic_OnGuardVisionRadiusChanged) == 0x00000C, "Wrong size on KnightGuard_Cosmetic_OnGuardVisionRadiusChanged");
static_assert(offsetof(KnightGuard_Cosmetic_OnGuardVisionRadiusChanged, isVisible) == 0x000000, "Member 'KnightGuard_Cosmetic_OnGuardVisionRadiusChanged::isVisible' has a wrong offset!");
static_assert(offsetof(KnightGuard_Cosmetic_OnGuardVisionRadiusChanged, radius) == 0x000004, "Member 'KnightGuard_Cosmetic_OnGuardVisionRadiusChanged::radius' has a wrong offset!");
static_assert(offsetof(KnightGuard_Cosmetic_OnGuardVisionRadiusChanged, angle) == 0x000008, "Member 'KnightGuard_Cosmetic_OnGuardVisionRadiusChanged::angle' has a wrong offset!");

// Function TheK30.KnightGuard.Cosmetic_OnHuntEnded
// 0x0001 (0x0001 - 0x0000)
struct KnightGuard_Cosmetic_OnHuntEnded final
{
public:
	EGuardHuntEndReason                           reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnightGuard_Cosmetic_OnHuntEnded) == 0x000001, "Wrong alignment on KnightGuard_Cosmetic_OnHuntEnded");
static_assert(sizeof(KnightGuard_Cosmetic_OnHuntEnded) == 0x000001, "Wrong size on KnightGuard_Cosmetic_OnHuntEnded");
static_assert(offsetof(KnightGuard_Cosmetic_OnHuntEnded, reason) == 0x000000, "Member 'KnightGuard_Cosmetic_OnHuntEnded::reason' has a wrong offset!");

// Function TheK30.KnightGuard.Cosmetic_OnHuntTeleportStarted
// 0x0004 (0x0004 - 0x0000)
struct KnightGuard_Cosmetic_OnHuntTeleportStarted final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnightGuard_Cosmetic_OnHuntTeleportStarted) == 0x000004, "Wrong alignment on KnightGuard_Cosmetic_OnHuntTeleportStarted");
static_assert(sizeof(KnightGuard_Cosmetic_OnHuntTeleportStarted) == 0x000004, "Wrong size on KnightGuard_Cosmetic_OnHuntTeleportStarted");
static_assert(offsetof(KnightGuard_Cosmetic_OnHuntTeleportStarted, duration) == 0x000000, "Member 'KnightGuard_Cosmetic_OnHuntTeleportStarted::duration' has a wrong offset!");

// Function TheK30.KnightGuard.Cosmetic_OnPatrolEnded
// 0x0008 (0x0008 - 0x0000)
struct KnightGuard_Cosmetic_OnPatrolEnded final
{
public:
	class ADBDPlayer*                             foundSurvivor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnightGuard_Cosmetic_OnPatrolEnded) == 0x000008, "Wrong alignment on KnightGuard_Cosmetic_OnPatrolEnded");
static_assert(sizeof(KnightGuard_Cosmetic_OnPatrolEnded) == 0x000008, "Wrong size on KnightGuard_Cosmetic_OnPatrolEnded");
static_assert(offsetof(KnightGuard_Cosmetic_OnPatrolEnded, foundSurvivor) == 0x000000, "Member 'KnightGuard_Cosmetic_OnPatrolEnded::foundSurvivor' has a wrong offset!");

// Function TheK30.KnightGuard.Multicast_CosmeticHuntEnded
// 0x0001 (0x0001 - 0x0000)
struct KnightGuard_Multicast_CosmeticHuntEnded final
{
public:
	EGuardHuntEndReason                           reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnightGuard_Multicast_CosmeticHuntEnded) == 0x000001, "Wrong alignment on KnightGuard_Multicast_CosmeticHuntEnded");
static_assert(sizeof(KnightGuard_Multicast_CosmeticHuntEnded) == 0x000001, "Wrong size on KnightGuard_Multicast_CosmeticHuntEnded");
static_assert(offsetof(KnightGuard_Multicast_CosmeticHuntEnded, reason) == 0x000000, "Member 'KnightGuard_Multicast_CosmeticHuntEnded::reason' has a wrong offset!");

// Function TheK30.KnightGuard.Multicast_OnPatrolEnded
// 0x0008 (0x0008 - 0x0000)
struct KnightGuard_Multicast_OnPatrolEnded final
{
public:
	class ADBDPlayer*                             foundSurvivor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnightGuard_Multicast_OnPatrolEnded) == 0x000008, "Wrong alignment on KnightGuard_Multicast_OnPatrolEnded");
static_assert(sizeof(KnightGuard_Multicast_OnPatrolEnded) == 0x000008, "Wrong size on KnightGuard_Multicast_OnPatrolEnded");
static_assert(offsetof(KnightGuard_Multicast_OnPatrolEnded, foundSurvivor) == 0x000000, "Member 'KnightGuard_Multicast_OnPatrolEnded::foundSurvivor' has a wrong offset!");

// Function TheK30.KnightGuard.OnRep_IsActive
// 0x0001 (0x0001 - 0x0000)
struct KnightGuard_OnRep_IsActive final
{
public:
	bool                                          previousIsActive;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnightGuard_OnRep_IsActive) == 0x000001, "Wrong alignment on KnightGuard_OnRep_IsActive");
static_assert(sizeof(KnightGuard_OnRep_IsActive) == 0x000001, "Wrong size on KnightGuard_OnRep_IsActive");
static_assert(offsetof(KnightGuard_OnRep_IsActive, previousIsActive) == 0x000000, "Member 'KnightGuard_OnRep_IsActive::previousIsActive' has a wrong offset!");

// Function TheK30.KnightGuard.GetOwningKiller
// 0x0008 (0x0008 - 0x0000)
struct KnightGuard_GetOwningKiller final
{
public:
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnightGuard_GetOwningKiller) == 0x000008, "Wrong alignment on KnightGuard_GetOwningKiller");
static_assert(sizeof(KnightGuard_GetOwningKiller) == 0x000008, "Wrong size on KnightGuard_GetOwningKiller");
static_assert(offsetof(KnightGuard_GetOwningKiller, ReturnValue) == 0x000000, "Member 'KnightGuard_GetOwningKiller::ReturnValue' has a wrong offset!");

// Function TheK30.KnightGuard.GetPatrolComponent
// 0x0008 (0x0008 - 0x0000)
struct KnightGuard_GetPatrolComponent final
{
public:
	class UGuardPatrolComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnightGuard_GetPatrolComponent) == 0x000008, "Wrong alignment on KnightGuard_GetPatrolComponent");
static_assert(sizeof(KnightGuard_GetPatrolComponent) == 0x000008, "Wrong size on KnightGuard_GetPatrolComponent");
static_assert(offsetof(KnightGuard_GetPatrolComponent, ReturnValue) == 0x000000, "Member 'KnightGuard_GetPatrolComponent::ReturnValue' has a wrong offset!");

// Function TheK30.KnightOrderComponent.Cosmetic_OnNewTargetSelected
// 0x0010 (0x0010 - 0x0000)
struct KnightOrderComponent_Cosmetic_OnNewTargetSelected final
{
public:
	class AInteractable*                          newTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AInteractable*                          oldTarget;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnightOrderComponent_Cosmetic_OnNewTargetSelected) == 0x000008, "Wrong alignment on KnightOrderComponent_Cosmetic_OnNewTargetSelected");
static_assert(sizeof(KnightOrderComponent_Cosmetic_OnNewTargetSelected) == 0x000010, "Wrong size on KnightOrderComponent_Cosmetic_OnNewTargetSelected");
static_assert(offsetof(KnightOrderComponent_Cosmetic_OnNewTargetSelected, newTarget) == 0x000000, "Member 'KnightOrderComponent_Cosmetic_OnNewTargetSelected::newTarget' has a wrong offset!");
static_assert(offsetof(KnightOrderComponent_Cosmetic_OnNewTargetSelected, oldTarget) == 0x000008, "Member 'KnightOrderComponent_Cosmetic_OnNewTargetSelected::oldTarget' has a wrong offset!");

// Function TheK30.KnightOrderComponent.Cosmetic_OnTargetableObjectsChanged
// 0x0010 (0x0010 - 0x0000)
struct KnightOrderComponent_Cosmetic_OnTargetableObjectsChanged final
{
public:
	class AInteractable*                          object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isTargetable;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KnightOrderComponent_Cosmetic_OnTargetableObjectsChanged) == 0x000008, "Wrong alignment on KnightOrderComponent_Cosmetic_OnTargetableObjectsChanged");
static_assert(sizeof(KnightOrderComponent_Cosmetic_OnTargetableObjectsChanged) == 0x000010, "Wrong size on KnightOrderComponent_Cosmetic_OnTargetableObjectsChanged");
static_assert(offsetof(KnightOrderComponent_Cosmetic_OnTargetableObjectsChanged, object) == 0x000000, "Member 'KnightOrderComponent_Cosmetic_OnTargetableObjectsChanged::object' has a wrong offset!");
static_assert(offsetof(KnightOrderComponent_Cosmetic_OnTargetableObjectsChanged, isTargetable) == 0x000008, "Member 'KnightOrderComponent_Cosmetic_OnTargetableObjectsChanged::isTargetable' has a wrong offset!");

// Function TheK30.KnightOrderComponent.OnGameEventDispatched
// 0x0038 (0x0038 - 0x0000)
struct KnightOrderComponent_OnGameEventDispatched final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KnightOrderComponent_OnGameEventDispatched) == 0x000008, "Wrong alignment on KnightOrderComponent_OnGameEventDispatched");
static_assert(sizeof(KnightOrderComponent_OnGameEventDispatched) == 0x000038, "Wrong size on KnightOrderComponent_OnGameEventDispatched");
static_assert(offsetof(KnightOrderComponent_OnGameEventDispatched, gameEventType) == 0x000000, "Member 'KnightOrderComponent_OnGameEventDispatched::gameEventType' has a wrong offset!");
static_assert(offsetof(KnightOrderComponent_OnGameEventDispatched, gameEventData) == 0x000010, "Member 'KnightOrderComponent_OnGameEventDispatched::gameEventData' has a wrong offset!");

// Function TheK30.PatrolTrailComponent.DoesTrailExist
// 0x0001 (0x0001 - 0x0000)
struct PatrolTrailComponent_DoesTrailExist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PatrolTrailComponent_DoesTrailExist) == 0x000001, "Wrong alignment on PatrolTrailComponent_DoesTrailExist");
static_assert(sizeof(PatrolTrailComponent_DoesTrailExist) == 0x000001, "Wrong size on PatrolTrailComponent_DoesTrailExist");
static_assert(offsetof(PatrolTrailComponent_DoesTrailExist, ReturnValue) == 0x000000, "Member 'PatrolTrailComponent_DoesTrailExist::ReturnValue' has a wrong offset!");

// Function TheK30.PatrolTrailComponent.GetCurrentTrailLength
// 0x0004 (0x0004 - 0x0000)
struct PatrolTrailComponent_GetCurrentTrailLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PatrolTrailComponent_GetCurrentTrailLength) == 0x000004, "Wrong alignment on PatrolTrailComponent_GetCurrentTrailLength");
static_assert(sizeof(PatrolTrailComponent_GetCurrentTrailLength) == 0x000004, "Wrong size on PatrolTrailComponent_GetCurrentTrailLength");
static_assert(offsetof(PatrolTrailComponent_GetCurrentTrailLength, ReturnValue) == 0x000000, "Member 'PatrolTrailComponent_GetCurrentTrailLength::ReturnValue' has a wrong offset!");

// Function TheK30.PatrolTrailComponent.GetFirstNode
// 0x0008 (0x0008 - 0x0000)
struct PatrolTrailComponent_GetFirstNode final
{
public:
	class ATrailNode*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PatrolTrailComponent_GetFirstNode) == 0x000008, "Wrong alignment on PatrolTrailComponent_GetFirstNode");
static_assert(sizeof(PatrolTrailComponent_GetFirstNode) == 0x000008, "Wrong size on PatrolTrailComponent_GetFirstNode");
static_assert(offsetof(PatrolTrailComponent_GetFirstNode, ReturnValue) == 0x000000, "Member 'PatrolTrailComponent_GetFirstNode::ReturnValue' has a wrong offset!");

// Function TheK30.PatrolTrailComponent.GetLastNode
// 0x0008 (0x0008 - 0x0000)
struct PatrolTrailComponent_GetLastNode final
{
public:
	class ATrailNode*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PatrolTrailComponent_GetLastNode) == 0x000008, "Wrong alignment on PatrolTrailComponent_GetLastNode");
static_assert(sizeof(PatrolTrailComponent_GetLastNode) == 0x000008, "Wrong size on PatrolTrailComponent_GetLastNode");
static_assert(offsetof(PatrolTrailComponent_GetLastNode, ReturnValue) == 0x000000, "Member 'PatrolTrailComponent_GetLastNode::ReturnValue' has a wrong offset!");

// Function TheK30.PatrolTrailComponent.GetLastPosition
// 0x000C (0x000C - 0x0000)
struct PatrolTrailComponent_GetLastPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PatrolTrailComponent_GetLastPosition) == 0x000004, "Wrong alignment on PatrolTrailComponent_GetLastPosition");
static_assert(sizeof(PatrolTrailComponent_GetLastPosition) == 0x00000C, "Wrong size on PatrolTrailComponent_GetLastPosition");
static_assert(offsetof(PatrolTrailComponent_GetLastPosition, ReturnValue) == 0x000000, "Member 'PatrolTrailComponent_GetLastPosition::ReturnValue' has a wrong offset!");

// Function TheK30.PatrolTrailComponent.GetNextNode
// 0x0010 (0x0010 - 0x0000)
struct PatrolTrailComponent_GetNextNode final
{
public:
	class ATrailNode*                             currentNode;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATrailNode*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PatrolTrailComponent_GetNextNode) == 0x000008, "Wrong alignment on PatrolTrailComponent_GetNextNode");
static_assert(sizeof(PatrolTrailComponent_GetNextNode) == 0x000010, "Wrong size on PatrolTrailComponent_GetNextNode");
static_assert(offsetof(PatrolTrailComponent_GetNextNode, currentNode) == 0x000000, "Member 'PatrolTrailComponent_GetNextNode::currentNode' has a wrong offset!");
static_assert(offsetof(PatrolTrailComponent_GetNextNode, ReturnValue) == 0x000008, "Member 'PatrolTrailComponent_GetNextNode::ReturnValue' has a wrong offset!");

// Function TheK30.PatrolTrailComponent.GetPreviousNode
// 0x0010 (0x0010 - 0x0000)
struct PatrolTrailComponent_GetPreviousNode final
{
public:
	class ATrailNode*                             currentNode;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATrailNode*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PatrolTrailComponent_GetPreviousNode) == 0x000008, "Wrong alignment on PatrolTrailComponent_GetPreviousNode");
static_assert(sizeof(PatrolTrailComponent_GetPreviousNode) == 0x000010, "Wrong size on PatrolTrailComponent_GetPreviousNode");
static_assert(offsetof(PatrolTrailComponent_GetPreviousNode, currentNode) == 0x000000, "Member 'PatrolTrailComponent_GetPreviousNode::currentNode' has a wrong offset!");
static_assert(offsetof(PatrolTrailComponent_GetPreviousNode, ReturnValue) == 0x000008, "Member 'PatrolTrailComponent_GetPreviousNode::ReturnValue' has a wrong offset!");

// Function TheK30.PatrolTrailComponent.IsTrailCompleted
// 0x0001 (0x0001 - 0x0000)
struct PatrolTrailComponent_IsTrailCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PatrolTrailComponent_IsTrailCompleted) == 0x000001, "Wrong alignment on PatrolTrailComponent_IsTrailCompleted");
static_assert(sizeof(PatrolTrailComponent_IsTrailCompleted) == 0x000001, "Wrong size on PatrolTrailComponent_IsTrailCompleted");
static_assert(offsetof(PatrolTrailComponent_IsTrailCompleted, ReturnValue) == 0x000000, "Member 'PatrolTrailComponent_IsTrailCompleted::ReturnValue' has a wrong offset!");

// Function TheK30.S34P01.Authority_OnAccumulateRedirectedCharge
// 0x0008 (0x0008 - 0x0000)
struct S34P01_Authority_OnAccumulateRedirectedCharge final
{
public:
	float                                         chargeAmount;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         maxCharge;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S34P01_Authority_OnAccumulateRedirectedCharge) == 0x000004, "Wrong alignment on S34P01_Authority_OnAccumulateRedirectedCharge");
static_assert(sizeof(S34P01_Authority_OnAccumulateRedirectedCharge) == 0x000008, "Wrong size on S34P01_Authority_OnAccumulateRedirectedCharge");
static_assert(offsetof(S34P01_Authority_OnAccumulateRedirectedCharge, chargeAmount) == 0x000000, "Member 'S34P01_Authority_OnAccumulateRedirectedCharge::chargeAmount' has a wrong offset!");
static_assert(offsetof(S34P01_Authority_OnAccumulateRedirectedCharge, maxCharge) == 0x000004, "Member 'S34P01_Authority_OnAccumulateRedirectedCharge::maxCharge' has a wrong offset!");

// Function TheK30.S34P01.Authority_OnSkillCheckResponse
// 0x0018 (0x0018 - 0x0000)
struct S34P01_Authority_OnSkillCheckResponse final
{
public:
	bool                                          success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bonus;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          triggerLoudNoise;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hadInput;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         type;                                              // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         chargeChange;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S34P01_Authority_OnSkillCheckResponse) == 0x000008, "Wrong alignment on S34P01_Authority_OnSkillCheckResponse");
static_assert(sizeof(S34P01_Authority_OnSkillCheckResponse) == 0x000018, "Wrong size on S34P01_Authority_OnSkillCheckResponse");
static_assert(offsetof(S34P01_Authority_OnSkillCheckResponse, success) == 0x000000, "Member 'S34P01_Authority_OnSkillCheckResponse::success' has a wrong offset!");
static_assert(offsetof(S34P01_Authority_OnSkillCheckResponse, bonus) == 0x000001, "Member 'S34P01_Authority_OnSkillCheckResponse::bonus' has a wrong offset!");
static_assert(offsetof(S34P01_Authority_OnSkillCheckResponse, player) == 0x000008, "Member 'S34P01_Authority_OnSkillCheckResponse::player' has a wrong offset!");
static_assert(offsetof(S34P01_Authority_OnSkillCheckResponse, triggerLoudNoise) == 0x000010, "Member 'S34P01_Authority_OnSkillCheckResponse::triggerLoudNoise' has a wrong offset!");
static_assert(offsetof(S34P01_Authority_OnSkillCheckResponse, hadInput) == 0x000011, "Member 'S34P01_Authority_OnSkillCheckResponse::hadInput' has a wrong offset!");
static_assert(offsetof(S34P01_Authority_OnSkillCheckResponse, type) == 0x000012, "Member 'S34P01_Authority_OnSkillCheckResponse::type' has a wrong offset!");
static_assert(offsetof(S34P01_Authority_OnSkillCheckResponse, chargeChange) == 0x000014, "Member 'S34P01_Authority_OnSkillCheckResponse::chargeChange' has a wrong offset!");

// Function TheK30.S34P01.Cosmetic_OnFullCharge
// 0x0008 (0x0008 - 0x0000)
struct S34P01_Cosmetic_OnFullCharge final
{
public:
	class ADBDPlayer*                             owningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S34P01_Cosmetic_OnFullCharge) == 0x000008, "Wrong alignment on S34P01_Cosmetic_OnFullCharge");
static_assert(sizeof(S34P01_Cosmetic_OnFullCharge) == 0x000008, "Wrong size on S34P01_Cosmetic_OnFullCharge");
static_assert(offsetof(S34P01_Cosmetic_OnFullCharge, owningPlayer) == 0x000000, "Member 'S34P01_Cosmetic_OnFullCharge::owningPlayer' has a wrong offset!");

// Function TheK30.S34P01.Cosmetic_OnStartChargingPerk
// 0x0008 (0x0008 - 0x0000)
struct S34P01_Cosmetic_OnStartChargingPerk final
{
public:
	class ADBDPlayer*                             owningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S34P01_Cosmetic_OnStartChargingPerk) == 0x000008, "Wrong alignment on S34P01_Cosmetic_OnStartChargingPerk");
static_assert(sizeof(S34P01_Cosmetic_OnStartChargingPerk) == 0x000008, "Wrong size on S34P01_Cosmetic_OnStartChargingPerk");
static_assert(offsetof(S34P01_Cosmetic_OnStartChargingPerk, owningPlayer) == 0x000000, "Member 'S34P01_Cosmetic_OnStartChargingPerk::owningPlayer' has a wrong offset!");

// Function TheK30.S34P01.Cosmetic_OnStopChargingPerk
// 0x0008 (0x0008 - 0x0000)
struct S34P01_Cosmetic_OnStopChargingPerk final
{
public:
	class ADBDPlayer*                             owningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S34P01_Cosmetic_OnStopChargingPerk) == 0x000008, "Wrong alignment on S34P01_Cosmetic_OnStopChargingPerk");
static_assert(sizeof(S34P01_Cosmetic_OnStopChargingPerk) == 0x000008, "Wrong size on S34P01_Cosmetic_OnStopChargingPerk");
static_assert(offsetof(S34P01_Cosmetic_OnStopChargingPerk, owningPlayer) == 0x000000, "Member 'S34P01_Cosmetic_OnStopChargingPerk::owningPlayer' has a wrong offset!");

// Function TheK30.S34P01.Cosmetic_OnUseCharge
// 0x0008 (0x0008 - 0x0000)
struct S34P01_Cosmetic_OnUseCharge final
{
public:
	class ADBDPlayer*                             owningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S34P01_Cosmetic_OnUseCharge) == 0x000008, "Wrong alignment on S34P01_Cosmetic_OnUseCharge");
static_assert(sizeof(S34P01_Cosmetic_OnUseCharge) == 0x000008, "Wrong size on S34P01_Cosmetic_OnUseCharge");
static_assert(offsetof(S34P01_Cosmetic_OnUseCharge, owningPlayer) == 0x000000, "Member 'S34P01_Cosmetic_OnUseCharge::owningPlayer' has a wrong offset!");

// Function TheK30.S34P01.OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct S34P01_OnDamageStateChanged final
{
public:
	ECamperDamageState                            oldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            currentDamageState;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S34P01_OnDamageStateChanged) == 0x000001, "Wrong alignment on S34P01_OnDamageStateChanged");
static_assert(sizeof(S34P01_OnDamageStateChanged) == 0x000002, "Wrong size on S34P01_OnDamageStateChanged");
static_assert(offsetof(S34P01_OnDamageStateChanged, oldDamageState) == 0x000000, "Member 'S34P01_OnDamageStateChanged::oldDamageState' has a wrong offset!");
static_assert(offsetof(S34P01_OnDamageStateChanged, currentDamageState) == 0x000001, "Member 'S34P01_OnDamageStateChanged::currentDamageState' has a wrong offset!");

// Function TheK30.S34P01.Server_AbilityTwoPressed
// 0x0001 (0x0001 - 0x0000)
struct S34P01_Server_AbilityTwoPressed final
{
public:
	bool                                          isPressed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S34P01_Server_AbilityTwoPressed) == 0x000001, "Wrong alignment on S34P01_Server_AbilityTwoPressed");
static_assert(sizeof(S34P01_Server_AbilityTwoPressed) == 0x000001, "Wrong size on S34P01_Server_AbilityTwoPressed");
static_assert(offsetof(S34P01_Server_AbilityTwoPressed, isPressed) == 0x000000, "Member 'S34P01_Server_AbilityTwoPressed::isPressed' has a wrong offset!");

// Function TheK30.S34P01.GetInitialCountdownAtLevel
// 0x0004 (0x0004 - 0x0000)
struct S34P01_GetInitialCountdownAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S34P01_GetInitialCountdownAtLevel) == 0x000004, "Wrong alignment on S34P01_GetInitialCountdownAtLevel");
static_assert(sizeof(S34P01_GetInitialCountdownAtLevel) == 0x000004, "Wrong size on S34P01_GetInitialCountdownAtLevel");
static_assert(offsetof(S34P01_GetInitialCountdownAtLevel, ReturnValue) == 0x000000, "Member 'S34P01_GetInitialCountdownAtLevel::ReturnValue' has a wrong offset!");

// Function TheK30.S34P01.IsPerkActive
// 0x0001 (0x0001 - 0x0000)
struct S34P01_IsPerkActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S34P01_IsPerkActive) == 0x000001, "Wrong alignment on S34P01_IsPerkActive");
static_assert(sizeof(S34P01_IsPerkActive) == 0x000001, "Wrong size on S34P01_IsPerkActive");
static_assert(offsetof(S34P01_IsPerkActive, ReturnValue) == 0x000000, "Member 'S34P01_IsPerkActive::ReturnValue' has a wrong offset!");

// Function TheK30.S34P03.GetGeneratorRangeFromPlayer
// 0x0004 (0x0004 - 0x0000)
struct S34P03_GetGeneratorRangeFromPlayer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S34P03_GetGeneratorRangeFromPlayer) == 0x000004, "Wrong alignment on S34P03_GetGeneratorRangeFromPlayer");
static_assert(sizeof(S34P03_GetGeneratorRangeFromPlayer) == 0x000004, "Wrong size on S34P03_GetGeneratorRangeFromPlayer");
static_assert(offsetof(S34P03_GetGeneratorRangeFromPlayer, ReturnValue) == 0x000000, "Member 'S34P03_GetGeneratorRangeFromPlayer::ReturnValue' has a wrong offset!");

// Function TheK30.S34P03.GetRepairSpeedAtLevel
// 0x0004 (0x0004 - 0x0000)
struct S34P03_GetRepairSpeedAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S34P03_GetRepairSpeedAtLevel) == 0x000004, "Wrong alignment on S34P03_GetRepairSpeedAtLevel");
static_assert(sizeof(S34P03_GetRepairSpeedAtLevel) == 0x000004, "Wrong size on S34P03_GetRepairSpeedAtLevel");
static_assert(offsetof(S34P03_GetRepairSpeedAtLevel, ReturnValue) == 0x000000, "Member 'S34P03_GetRepairSpeedAtLevel::ReturnValue' has a wrong offset!");

// Function TheK30.TrailNode.IsFirstNode
// 0x0001 (0x0001 - 0x0000)
struct TrailNode_IsFirstNode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrailNode_IsFirstNode) == 0x000001, "Wrong alignment on TrailNode_IsFirstNode");
static_assert(sizeof(TrailNode_IsFirstNode) == 0x000001, "Wrong size on TrailNode_IsFirstNode");
static_assert(offsetof(TrailNode_IsFirstNode, ReturnValue) == 0x000000, "Member 'TrailNode_IsFirstNode::ReturnValue' has a wrong offset!");

// Function TheK30.TrailNode.IsOwnerLocallyObserved
// 0x0001 (0x0001 - 0x0000)
struct TrailNode_IsOwnerLocallyObserved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrailNode_IsOwnerLocallyObserved) == 0x000001, "Wrong alignment on TrailNode_IsOwnerLocallyObserved");
static_assert(sizeof(TrailNode_IsOwnerLocallyObserved) == 0x000001, "Wrong size on TrailNode_IsOwnerLocallyObserved");
static_assert(offsetof(TrailNode_IsOwnerLocallyObserved, ReturnValue) == 0x000000, "Member 'TrailNode_IsOwnerLocallyObserved::ReturnValue' has a wrong offset!");

}

