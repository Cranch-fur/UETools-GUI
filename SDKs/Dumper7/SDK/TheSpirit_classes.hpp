#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheSpirit

#include "Basic.hpp"

#include "TheSpirit_structs.hpp"
#include "StatSystem_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "DBDGameplay_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "Engine_classes.hpp"
#include "DBDCompetence_classes.hpp"
#include "GameplayTagUtilities_structs.hpp"


namespace SDK
{

// Class TheSpirit.ActivePhaseWalkInteraction
// 0x0190 (0x08D0 - 0x0740)
class UActivePhaseWalkInteraction final : public UChargeableInteractionDefinition
{
public:
	struct FTunableStat                           _fullyChargedSpeed;                                // 0x0740(0x0080)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _accelerationMultiplier;                           // 0x07C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7C4[0x4];                                      // 0x07C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _chargingSpeedCurve;                               // 0x07C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _phaseWalkPenaltyThreshold;                        // 0x07D0(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _phaseWalkPenaltyValue;                            // 0x07F8(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_820[0x8];                                      // 0x0820(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTunableStat                           _activePhaseWalkChargeDuration;                    // 0x0828(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                           _activePhaseWalkChargingMontage;                   // 0x08A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8B0[0x20];                                     // 0x08B0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_ResetChargeVFX(class ADBDPlayer* player);
	void OnPlayerLocallyObservedChanged(class ADBDPlayer* player);
	void OnPowerCollected(class ADBDPlayer* collector);

	float GetChargeTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActivePhaseWalkInteraction">();
	}
	static class UActivePhaseWalkInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivePhaseWalkInteraction>();
	}
};
static_assert(alignof(UActivePhaseWalkInteraction) == 0x000010, "Wrong alignment on UActivePhaseWalkInteraction");
static_assert(sizeof(UActivePhaseWalkInteraction) == 0x0008D0, "Wrong size on UActivePhaseWalkInteraction");
static_assert(offsetof(UActivePhaseWalkInteraction, _fullyChargedSpeed) == 0x000740, "Member 'UActivePhaseWalkInteraction::_fullyChargedSpeed' has a wrong offset!");
static_assert(offsetof(UActivePhaseWalkInteraction, _accelerationMultiplier) == 0x0007C0, "Member 'UActivePhaseWalkInteraction::_accelerationMultiplier' has a wrong offset!");
static_assert(offsetof(UActivePhaseWalkInteraction, _chargingSpeedCurve) == 0x0007C8, "Member 'UActivePhaseWalkInteraction::_chargingSpeedCurve' has a wrong offset!");
static_assert(offsetof(UActivePhaseWalkInteraction, _phaseWalkPenaltyThreshold) == 0x0007D0, "Member 'UActivePhaseWalkInteraction::_phaseWalkPenaltyThreshold' has a wrong offset!");
static_assert(offsetof(UActivePhaseWalkInteraction, _phaseWalkPenaltyValue) == 0x0007F8, "Member 'UActivePhaseWalkInteraction::_phaseWalkPenaltyValue' has a wrong offset!");
static_assert(offsetof(UActivePhaseWalkInteraction, _activePhaseWalkChargeDuration) == 0x000828, "Member 'UActivePhaseWalkInteraction::_activePhaseWalkChargeDuration' has a wrong offset!");
static_assert(offsetof(UActivePhaseWalkInteraction, _activePhaseWalkChargingMontage) == 0x0008A8, "Member 'UActivePhaseWalkInteraction::_activePhaseWalkChargingMontage' has a wrong offset!");

// Class TheSpirit.Autodidact
// 0x0020 (0x03E8 - 0x03C8)
class UAutodidact final : public UPerk
{
public:
	int32                                         _maxTokenCountPerLevel[0x3];                       // 0x03C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _progressionBonusPerToken;                         // 0x03D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _initialSkillCheckProgressionPenalty;              // 0x03D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3DC[0xC];                                      // 0x03DC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Autodidact">();
	}
	static class UAutodidact* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutodidact>();
	}
};
static_assert(alignof(UAutodidact) == 0x000008, "Wrong alignment on UAutodidact");
static_assert(sizeof(UAutodidact) == 0x0003E8, "Wrong size on UAutodidact");
static_assert(offsetof(UAutodidact, _maxTokenCountPerLevel) == 0x0003C8, "Member 'UAutodidact::_maxTokenCountPerLevel' has a wrong offset!");
static_assert(offsetof(UAutodidact, _progressionBonusPerToken) == 0x0003D4, "Member 'UAutodidact::_progressionBonusPerToken' has a wrong offset!");
static_assert(offsetof(UAutodidact, _initialSkillCheckProgressionPenalty) == 0x0003D8, "Member 'UAutodidact::_initialSkillCheckProgressionPenalty' has a wrong offset!");

// Class TheSpirit.Deliverance
// 0x0020 (0x03E8 - 0x03C8)
class UDeliverance final : public UPerk
{
public:
	float                                         _brokenEffectDurationPerLevel[0x3];                // 0x03C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _selfUnhookAlwaysSucceedEffectClass;               // 0x03D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStatusEffect*                          _selfUnhookAlwaysSucceedEffect;                    // 0x03E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Deliverance">();
	}
	static class UDeliverance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDeliverance>();
	}
};
static_assert(alignof(UDeliverance) == 0x000008, "Wrong alignment on UDeliverance");
static_assert(sizeof(UDeliverance) == 0x0003E8, "Wrong size on UDeliverance");
static_assert(offsetof(UDeliverance, _brokenEffectDurationPerLevel) == 0x0003C8, "Member 'UDeliverance::_brokenEffectDurationPerLevel' has a wrong offset!");
static_assert(offsetof(UDeliverance, _selfUnhookAlwaysSucceedEffectClass) == 0x0003D8, "Member 'UDeliverance::_selfUnhookAlwaysSucceedEffectClass' has a wrong offset!");
static_assert(offsetof(UDeliverance, _selfUnhookAlwaysSucceedEffect) == 0x0003E0, "Member 'UDeliverance::_selfUnhookAlwaysSucceedEffect' has a wrong offset!");

// Class TheSpirit.Diversion
// 0x0068 (0x0430 - 0x03C8)
class UDiversion final : public UPerk
{
public:
	uint8                                         Pad_3C8[0x58];                                     // 0x03C8(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _diversionActivationTimePerLevel[0x3];             // 0x0420(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _throwPebbleDistance;                              // 0x042C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Authority_OnOwningSurvivorDamageStateChanged(ECamperDamageState oldDamageState, ECamperDamageState currentDamageState);
	void Authority_OnOwningSurvivorImmobilizedStateChanged(const ECamperImmobilizeState oldImmobilizeState, const ECamperImmobilizeState newImmobilizeState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Diversion">();
	}
	static class UDiversion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDiversion>();
	}
};
static_assert(alignof(UDiversion) == 0x000008, "Wrong alignment on UDiversion");
static_assert(sizeof(UDiversion) == 0x000430, "Wrong size on UDiversion");
static_assert(offsetof(UDiversion, _diversionActivationTimePerLevel) == 0x000420, "Member 'UDiversion::_diversionActivationTimePerLevel' has a wrong offset!");
static_assert(offsetof(UDiversion, _throwPebbleDistance) == 0x00042C, "Member 'UDiversion::_throwPebbleDistance' has a wrong offset!");

// Class TheSpirit.DriedCherryBlossom
// 0x0008 (0x02E0 - 0x02D8)
class UDriedCherryBlossom final : public USimpleSpawnEffectsOnAllSurvivorsAddon
{
public:
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DriedCherryBlossom">();
	}
	static class UDriedCherryBlossom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDriedCherryBlossom>();
	}
};
static_assert(alignof(UDriedCherryBlossom) == 0x000008, "Wrong alignment on UDriedCherryBlossom");
static_assert(sizeof(UDriedCherryBlossom) == 0x0002E0, "Wrong size on UDriedCherryBlossom");

// Class TheSpirit.KatsumoriTalisman
// 0x0020 (0x02D8 - 0x02B8)
class UKatsumoriTalisman final : public UItemAddon
{
public:
	TArray<class AActor*>                         _blockableWindows;                                 // 0x02B8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	float                                         _explosionRadius;                                  // 0x02C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _blockDuration;                                    // 0x02CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D0[0x8];                                      // 0x02D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KatsumoriTalisman">();
	}
	static class UKatsumoriTalisman* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKatsumoriTalisman>();
	}
};
static_assert(alignof(UKatsumoriTalisman) == 0x000008, "Wrong alignment on UKatsumoriTalisman");
static_assert(sizeof(UKatsumoriTalisman) == 0x0002D8, "Wrong size on UKatsumoriTalisman");
static_assert(offsetof(UKatsumoriTalisman, _blockableWindows) == 0x0002B8, "Member 'UKatsumoriTalisman::_blockableWindows' has a wrong offset!");
static_assert(offsetof(UKatsumoriTalisman, _explosionRadius) == 0x0002C8, "Member 'UKatsumoriTalisman::_explosionRadius' has a wrong offset!");
static_assert(offsetof(UKatsumoriTalisman, _blockDuration) == 0x0002CC, "Member 'UKatsumoriTalisman::_blockDuration' has a wrong offset!");

// Class TheSpirit.MotherDaughterRing
// 0x0008 (0x02C0 - 0x02B8)
class UMotherDaughterRing final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _hideFootstepsEffect;                              // 0x02B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MotherDaughterRing">();
	}
	static class UMotherDaughterRing* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMotherDaughterRing>();
	}
};
static_assert(alignof(UMotherDaughterRing) == 0x000008, "Wrong alignment on UMotherDaughterRing");
static_assert(sizeof(UMotherDaughterRing) == 0x0002C0, "Wrong size on UMotherDaughterRing");
static_assert(offsetof(UMotherDaughterRing, _hideFootstepsEffect) == 0x0002B8, "Member 'UMotherDaughterRing::_hideFootstepsEffect' has a wrong offset!");

// Class TheSpirit.OwningPlayerInSpiritHuskRange
// 0x0010 (0x0110 - 0x0100)
class UOwningPlayerInSpiritHuskRange final : public UAnyActorPairQueryRangeIsTrue
{
public:
	uint8                                         Pad_100[0x10];                                     // 0x0100(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnKillerSet(class ASlasherPlayer* killer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OwningPlayerInSpiritHuskRange">();
	}
	static class UOwningPlayerInSpiritHuskRange* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOwningPlayerInSpiritHuskRange>();
	}
};
static_assert(alignof(UOwningPlayerInSpiritHuskRange) == 0x000008, "Wrong alignment on UOwningPlayerInSpiritHuskRange");
static_assert(sizeof(UOwningPlayerInSpiritHuskRange) == 0x000110, "Wrong size on UOwningPlayerInSpiritHuskRange");

// Class TheSpirit.PhaseWalkingComponent
// 0x0500 (0x05B8 - 0x00B8)
class UPhaseWalkingComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FPhaseWalkInfo& phaseWalkInfo)> OnPhaseWalkInfoReceived; // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnGameEndedVFX;                                    // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool visible)>  TriggerSurvivorVisibilityVFX;                      // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool wasPassivePhaseWalking, bool wasActivePhaseWalking, const struct FPhaseWalkInfo& phaseWalkInfo)> TriggerKillerVisibilityVFX; // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMaxActivePhaseWalkCharges;                       // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     _huskClass;                                        // 0x0110(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTagStateBool                          _isActivePhaseWalking;                             // 0x0118(0x0030)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTagStateBool                          _isPassivePhaseWalking;                            // 0x0148(0x0030)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTagStateBool                          _isInPostActivePhaseWalk;                          // 0x0178(0x0030)(Net, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isInteractionPhaseWalking;                        // 0x01A8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _husk;                                             // 0x01B0(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDBidirectionalTimer                 _activePhaseWalkCharges;                           // 0x01B8(0x0028)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E0[0x28];                                     // 0x01E0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _survivorsAreVisible;                              // 0x0208(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_209[0x37];                                     // 0x0209(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _passivePhaseWalkHusksCount;                       // 0x0240(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   _isVisibleDuringPhaseWalkTags;                     // 0x0248(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _activePhaseWalkChargeGainRate;                    // 0x0258(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _passivePhaseWalkDuration;                         // 0x02D8(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _passivePhaseWalkFirstCooldownDuration;            // 0x0358(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _passivePhaseWalkCooldownDurationMin;              // 0x0380(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _passivePhaseWalkCooldownDurationMax;              // 0x0400(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _activePhaseWalkMaxCharge;                         // 0x0480(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _activePhaseWalkMaxAcceleration;                   // 0x0500(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _defaultMaxAcceleration;                           // 0x0528(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_550[0x68];                                     // 0x0550(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_SetIsInPostActivePhaseWalk(bool value);
	void DBD_RefillActivePhaseWalkCharges();
	void Local_EndPhaseWalks();
	void Local_PhaseWalk(const struct FPhaseWalkInfo& phaseWalkInfo);
	void MakePassivePhaseWalkHusksVisible(const struct FTransform& huskTransform, float opacityValue, float speedValue);
	void ModifyActivePhaseWalkCharges(float delta);
	void Multicast_Broadcast_PhaseWalk(const struct FPhaseWalkInfo& phaseWalkInfo);
	void OnLevelReadyToPlay();
	void RefillActivePhaseWalkCharges();
	void Server_Broadcast_PhaseWalk(const struct FPhaseWalkInfo& phaseWalkInfo);
	void SpawnPassivePhaseWalkHusks();
	void UpdateKillerVisibility();
	void UpdateSurvivorVisibility(bool visible);

	bool CanStartActivePhaseWalk() const;
	float GetActivePhaseWalkChargePercentage() const;
	float GetActivePhaseWalkCharges() const;
	class UDecoySlasherComponent* GetDecoySlasherComponent() const;
	class AActor* GetHusk() const;
	const struct FDBDTimer GetPassivePhaseWalkTimer() const;
	int32 GetSpiritPassivePhaseWalkHusksCountToSpawn() const;
	bool IsActivePhaseWalking() const;
	bool IsDecoyActive() const;
	bool IsPassivePhaseWalking() const;
	bool IsPhaseWalking() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhaseWalkingComponent">();
	}
	static class UPhaseWalkingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhaseWalkingComponent>();
	}
};
static_assert(alignof(UPhaseWalkingComponent) == 0x000008, "Wrong alignment on UPhaseWalkingComponent");
static_assert(sizeof(UPhaseWalkingComponent) == 0x0005B8, "Wrong size on UPhaseWalkingComponent");
static_assert(offsetof(UPhaseWalkingComponent, OnPhaseWalkInfoReceived) == 0x0000C0, "Member 'UPhaseWalkingComponent::OnPhaseWalkInfoReceived' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, OnGameEndedVFX) == 0x0000D0, "Member 'UPhaseWalkingComponent::OnGameEndedVFX' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, TriggerSurvivorVisibilityVFX) == 0x0000E0, "Member 'UPhaseWalkingComponent::TriggerSurvivorVisibilityVFX' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, TriggerKillerVisibilityVFX) == 0x0000F0, "Member 'UPhaseWalkingComponent::TriggerKillerVisibilityVFX' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, OnMaxActivePhaseWalkCharges) == 0x000100, "Member 'UPhaseWalkingComponent::OnMaxActivePhaseWalkCharges' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _huskClass) == 0x000110, "Member 'UPhaseWalkingComponent::_huskClass' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _isActivePhaseWalking) == 0x000118, "Member 'UPhaseWalkingComponent::_isActivePhaseWalking' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _isPassivePhaseWalking) == 0x000148, "Member 'UPhaseWalkingComponent::_isPassivePhaseWalking' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _isInPostActivePhaseWalk) == 0x000178, "Member 'UPhaseWalkingComponent::_isInPostActivePhaseWalk' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _isInteractionPhaseWalking) == 0x0001A8, "Member 'UPhaseWalkingComponent::_isInteractionPhaseWalking' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _husk) == 0x0001B0, "Member 'UPhaseWalkingComponent::_husk' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _activePhaseWalkCharges) == 0x0001B8, "Member 'UPhaseWalkingComponent::_activePhaseWalkCharges' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _survivorsAreVisible) == 0x000208, "Member 'UPhaseWalkingComponent::_survivorsAreVisible' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _passivePhaseWalkHusksCount) == 0x000240, "Member 'UPhaseWalkingComponent::_passivePhaseWalkHusksCount' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _isVisibleDuringPhaseWalkTags) == 0x000248, "Member 'UPhaseWalkingComponent::_isVisibleDuringPhaseWalkTags' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _activePhaseWalkChargeGainRate) == 0x000258, "Member 'UPhaseWalkingComponent::_activePhaseWalkChargeGainRate' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _passivePhaseWalkDuration) == 0x0002D8, "Member 'UPhaseWalkingComponent::_passivePhaseWalkDuration' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _passivePhaseWalkFirstCooldownDuration) == 0x000358, "Member 'UPhaseWalkingComponent::_passivePhaseWalkFirstCooldownDuration' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _passivePhaseWalkCooldownDurationMin) == 0x000380, "Member 'UPhaseWalkingComponent::_passivePhaseWalkCooldownDurationMin' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _passivePhaseWalkCooldownDurationMax) == 0x000400, "Member 'UPhaseWalkingComponent::_passivePhaseWalkCooldownDurationMax' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _activePhaseWalkMaxCharge) == 0x000480, "Member 'UPhaseWalkingComponent::_activePhaseWalkMaxCharge' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _activePhaseWalkMaxAcceleration) == 0x000500, "Member 'UPhaseWalkingComponent::_activePhaseWalkMaxAcceleration' has a wrong offset!");
static_assert(offsetof(UPhaseWalkingComponent, _defaultMaxAcceleration) == 0x000528, "Member 'UPhaseWalkingComponent::_defaultMaxAcceleration' has a wrong offset!");

// Class TheSpirit.Rancor
// 0x0018 (0x03E0 - 0x03C8)
class URancor final : public UPerk
{
public:
	float                                         _survivorRevealDuration;                           // 0x03C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _killerRevealToObsessionDuration[0x3];             // 0x03CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D8[0x8];                                      // 0x03D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SpawnBubbleAtSurvivorsLocation();

	float GetSurvivorRevealDuration() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Rancor">();
	}
	static class URancor* GetDefaultObj()
	{
		return GetDefaultObjImpl<URancor>();
	}
};
static_assert(alignof(URancor) == 0x000008, "Wrong alignment on URancor");
static_assert(sizeof(URancor) == 0x0003E0, "Wrong size on URancor");
static_assert(offsetof(URancor, _survivorRevealDuration) == 0x0003C8, "Member 'URancor::_survivorRevealDuration' has a wrong offset!");
static_assert(offsetof(URancor, _killerRevealToObsessionDuration) == 0x0003CC, "Member 'URancor::_killerRevealToObsessionDuration' has a wrong offset!");

// Class TheSpirit.SpiritFury
// 0x0010 (0x03D8 - 0x03C8)
class USpiritFury final : public UPerk
{
public:
	uint8                                         Pad_3C8[0x4];                                      // 0x03C8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _palletToBreakCountPerLevel[0x3];                  // 0x03CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	int32 GetPalletToBreakCountAtLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiritFury">();
	}
	static class USpiritFury* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpiritFury>();
	}
};
static_assert(alignof(USpiritFury) == 0x000008, "Wrong alignment on USpiritFury");
static_assert(sizeof(USpiritFury) == 0x0003D8, "Wrong size on USpiritFury");
static_assert(offsetof(USpiritFury, _palletToBreakCountPerLevel) == 0x0003CC, "Member 'USpiritFury::_palletToBreakCountPerLevel' has a wrong offset!");

// Class TheSpirit.SpiritHuskAnimInstance
// 0x0010 (0x02D0 - 0x02C0)
class USpiritHuskAnimInstance : public UAnimInstance
{
public:
	class USkeletalMeshComponent*                 _killerMesh;                                       // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C8[0x8];                                      // 0x02C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiritHuskAnimInstance">();
	}
	static class USpiritHuskAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpiritHuskAnimInstance>();
	}
};
static_assert(alignof(USpiritHuskAnimInstance) == 0x000010, "Wrong alignment on USpiritHuskAnimInstance");
static_assert(sizeof(USpiritHuskAnimInstance) == 0x0002D0, "Wrong size on USpiritHuskAnimInstance");
static_assert(offsetof(USpiritHuskAnimInstance, _killerMesh) == 0x0002C0, "Member 'USpiritHuskAnimInstance::_killerMesh' has a wrong offset!");

// Class TheSpirit.SpiritHuskActivePhaseWalkAnimInstance
// 0x0030 (0x0300 - 0x02D0)
class USpiritHuskActivePhaseWalkAnimInstance final : public USpiritHuskAnimInstance
{
public:
	float                                         _elapsedTimeSinceFakingRealKillerPose;             // 0x02D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _idleAnimationExplicitTime;                        // 0x02D4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          _idleAnimationSequence;                            // 0x02E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E8[0x18];                                     // 0x02E8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiritHuskActivePhaseWalkAnimInstance">();
	}
	static class USpiritHuskActivePhaseWalkAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpiritHuskActivePhaseWalkAnimInstance>();
	}
};
static_assert(alignof(USpiritHuskActivePhaseWalkAnimInstance) == 0x000010, "Wrong alignment on USpiritHuskActivePhaseWalkAnimInstance");
static_assert(sizeof(USpiritHuskActivePhaseWalkAnimInstance) == 0x000300, "Wrong size on USpiritHuskActivePhaseWalkAnimInstance");
static_assert(offsetof(USpiritHuskActivePhaseWalkAnimInstance, _elapsedTimeSinceFakingRealKillerPose) == 0x0002D0, "Member 'USpiritHuskActivePhaseWalkAnimInstance::_elapsedTimeSinceFakingRealKillerPose' has a wrong offset!");
static_assert(offsetof(USpiritHuskActivePhaseWalkAnimInstance, _idleAnimationExplicitTime) == 0x0002D4, "Member 'USpiritHuskActivePhaseWalkAnimInstance::_idleAnimationExplicitTime' has a wrong offset!");
static_assert(offsetof(USpiritHuskActivePhaseWalkAnimInstance, _idleAnimationSequence) == 0x0002E0, "Member 'USpiritHuskActivePhaseWalkAnimInstance::_idleAnimationSequence' has a wrong offset!");

// Class TheSpirit.SpiritHuskOutlineUpdateStrategy
// 0x0028 (0x00E8 - 0x00C0)
class USpiritHuskOutlineUpdateStrategy final : public UOutlineUpdateStrategy
{
public:
	uint8                                         Pad_C0[0x28];                                      // 0x00C0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSlasherSet(class ASlasherPlayer* slasher);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiritHuskOutlineUpdateStrategy">();
	}
	static class USpiritHuskOutlineUpdateStrategy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpiritHuskOutlineUpdateStrategy>();
	}
};
static_assert(alignof(USpiritHuskOutlineUpdateStrategy) == 0x000008, "Wrong alignment on USpiritHuskOutlineUpdateStrategy");
static_assert(sizeof(USpiritHuskOutlineUpdateStrategy) == 0x0000E8, "Wrong size on USpiritHuskOutlineUpdateStrategy");

// Class TheSpirit.ThrowRockInteraction
// 0x0060 (0x0680 - 0x0620)
class UThrowRockInteraction final : public UInteractionDefinition
{
public:
	struct FDBDTunableRowHandle                   _loudNoiseAudioRange;                              // 0x0618(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _scratchMarksApplicationDelay;                     // 0x0640(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _scratchMarksCountToSpawn;                         // 0x0644(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_648[0x4];                                      // 0x0648(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _diversionHeightOffset;                            // 0x064C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_650[0x30];                                     // 0x0650(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ThrowRockInteraction">();
	}
	static class UThrowRockInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UThrowRockInteraction>();
	}
};
static_assert(alignof(UThrowRockInteraction) == 0x000010, "Wrong alignment on UThrowRockInteraction");
static_assert(sizeof(UThrowRockInteraction) == 0x000680, "Wrong size on UThrowRockInteraction");
static_assert(offsetof(UThrowRockInteraction, _loudNoiseAudioRange) == 0x000618, "Member 'UThrowRockInteraction::_loudNoiseAudioRange' has a wrong offset!");
static_assert(offsetof(UThrowRockInteraction, _scratchMarksApplicationDelay) == 0x000640, "Member 'UThrowRockInteraction::_scratchMarksApplicationDelay' has a wrong offset!");
static_assert(offsetof(UThrowRockInteraction, _scratchMarksCountToSpawn) == 0x000644, "Member 'UThrowRockInteraction::_scratchMarksCountToSpawn' has a wrong offset!");
static_assert(offsetof(UThrowRockInteraction, _diversionHeightOffset) == 0x00064C, "Member 'UThrowRockInteraction::_diversionHeightOffset' has a wrong offset!");

}

