#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Projectile

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Projectile_structs.hpp"


namespace SDK::Params
{

// Function Projectile.DBDProjectileMovementComponent.AddComponentToSweep
// 0x0008 (0x0008 - 0x0000)
struct DBDProjectileMovementComponent_AddComponentToSweep final
{
public:
	class UPrimitiveComponent*                    component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDProjectileMovementComponent_AddComponentToSweep) == 0x000008, "Wrong alignment on DBDProjectileMovementComponent_AddComponentToSweep");
static_assert(sizeof(DBDProjectileMovementComponent_AddComponentToSweep) == 0x000008, "Wrong size on DBDProjectileMovementComponent_AddComponentToSweep");
static_assert(offsetof(DBDProjectileMovementComponent_AddComponentToSweep, component) == 0x000000, "Member 'DBDProjectileMovementComponent_AddComponentToSweep::component' has a wrong offset!");

// Function Projectile.DBDProjectileMovementComponent.GetPreviousLocation
// 0x000C (0x000C - 0x0000)
struct DBDProjectileMovementComponent_GetPreviousLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDProjectileMovementComponent_GetPreviousLocation) == 0x000004, "Wrong alignment on DBDProjectileMovementComponent_GetPreviousLocation");
static_assert(sizeof(DBDProjectileMovementComponent_GetPreviousLocation) == 0x00000C, "Wrong size on DBDProjectileMovementComponent_GetPreviousLocation");
static_assert(offsetof(DBDProjectileMovementComponent_GetPreviousLocation, ReturnValue) == 0x000000, "Member 'DBDProjectileMovementComponent_GetPreviousLocation::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.Authority_TryDetectCollision
// 0x0038 (0x0038 - 0x0000)
struct BaseProjectile_Authority_TryDetectCollision final
{
public:
	struct FImpactInfo                            impactInfo;                                        // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          force;                                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_Authority_TryDetectCollision) == 0x000008, "Wrong alignment on BaseProjectile_Authority_TryDetectCollision");
static_assert(sizeof(BaseProjectile_Authority_TryDetectCollision) == 0x000038, "Wrong size on BaseProjectile_Authority_TryDetectCollision");
static_assert(offsetof(BaseProjectile_Authority_TryDetectCollision, impactInfo) == 0x000000, "Member 'BaseProjectile_Authority_TryDetectCollision::impactInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Authority_TryDetectCollision, force) == 0x000030, "Member 'BaseProjectile_Authority_TryDetectCollision::force' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Authority_TryDetectCollision, ReturnValue) == 0x000031, "Member 'BaseProjectile_Authority_TryDetectCollision::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.IsValidImpactDetection
// 0x0038 (0x0038 - 0x0000)
struct BaseProjectile_IsValidImpactDetection final
{
public:
	struct FImpactInfo                            impactInfo;                                        // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_IsValidImpactDetection) == 0x000008, "Wrong alignment on BaseProjectile_IsValidImpactDetection");
static_assert(sizeof(BaseProjectile_IsValidImpactDetection) == 0x000038, "Wrong size on BaseProjectile_IsValidImpactDetection");
static_assert(offsetof(BaseProjectile_IsValidImpactDetection, impactInfo) == 0x000000, "Member 'BaseProjectile_IsValidImpactDetection::impactInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectile_IsValidImpactDetection, ReturnValue) == 0x000030, "Member 'BaseProjectile_IsValidImpactDetection::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.IsValidPlayerDetection
// 0x0038 (0x0038 - 0x0000)
struct BaseProjectile_IsValidPlayerDetection final
{
public:
	struct FImpactInfo                            impactInfo;                                        // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_IsValidPlayerDetection) == 0x000008, "Wrong alignment on BaseProjectile_IsValidPlayerDetection");
static_assert(sizeof(BaseProjectile_IsValidPlayerDetection) == 0x000038, "Wrong size on BaseProjectile_IsValidPlayerDetection");
static_assert(offsetof(BaseProjectile_IsValidPlayerDetection, impactInfo) == 0x000000, "Member 'BaseProjectile_IsValidPlayerDetection::impactInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectile_IsValidPlayerDetection, ReturnValue) == 0x000030, "Member 'BaseProjectile_IsValidPlayerDetection::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.Local_OnPlayerDetected
// 0x0040 (0x0040 - 0x0000)
struct BaseProjectile_Local_OnPlayerDetected final
{
public:
	struct FImpactInfo                            impactInfo;                                        // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                projectileLocation;                                // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_Local_OnPlayerDetected) == 0x000008, "Wrong alignment on BaseProjectile_Local_OnPlayerDetected");
static_assert(sizeof(BaseProjectile_Local_OnPlayerDetected) == 0x000040, "Wrong size on BaseProjectile_Local_OnPlayerDetected");
static_assert(offsetof(BaseProjectile_Local_OnPlayerDetected, impactInfo) == 0x000000, "Member 'BaseProjectile_Local_OnPlayerDetected::impactInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_OnPlayerDetected, projectileLocation) == 0x000030, "Member 'BaseProjectile_Local_OnPlayerDetected::projectileLocation' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_OnPlayerDetected, ReturnValue) == 0x00003C, "Member 'BaseProjectile_Local_OnPlayerDetected::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.Local_SweepImpactCollision
// 0x00B8 (0x00B8 - 0x0000)
struct BaseProjectile_Local_SweepImpactCollision final
{
public:
	struct FVector                                start;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                end;                                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               colliderRotation;                                  // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             outHit;                                            // 0x0024(0x0090)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_Local_SweepImpactCollision) == 0x000004, "Wrong alignment on BaseProjectile_Local_SweepImpactCollision");
static_assert(sizeof(BaseProjectile_Local_SweepImpactCollision) == 0x0000B8, "Wrong size on BaseProjectile_Local_SweepImpactCollision");
static_assert(offsetof(BaseProjectile_Local_SweepImpactCollision, start) == 0x000000, "Member 'BaseProjectile_Local_SweepImpactCollision::start' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_SweepImpactCollision, end) == 0x00000C, "Member 'BaseProjectile_Local_SweepImpactCollision::end' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_SweepImpactCollision, colliderRotation) == 0x000018, "Member 'BaseProjectile_Local_SweepImpactCollision::colliderRotation' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_SweepImpactCollision, outHit) == 0x000024, "Member 'BaseProjectile_Local_SweepImpactCollision::outHit' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_SweepImpactCollision, ReturnValue) == 0x0000B4, "Member 'BaseProjectile_Local_SweepImpactCollision::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.Local_TryDetectCollision
// 0x0038 (0x0038 - 0x0000)
struct BaseProjectile_Local_TryDetectCollision final
{
public:
	struct FImpactInfo                            impactInfo;                                        // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          force;                                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_Local_TryDetectCollision) == 0x000008, "Wrong alignment on BaseProjectile_Local_TryDetectCollision");
static_assert(sizeof(BaseProjectile_Local_TryDetectCollision) == 0x000038, "Wrong size on BaseProjectile_Local_TryDetectCollision");
static_assert(offsetof(BaseProjectile_Local_TryDetectCollision, impactInfo) == 0x000000, "Member 'BaseProjectile_Local_TryDetectCollision::impactInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_TryDetectCollision, force) == 0x000030, "Member 'BaseProjectile_Local_TryDetectCollision::force' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_TryDetectCollision, ReturnValue) == 0x000031, "Member 'BaseProjectile_Local_TryDetectCollision::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.OnDetectCollision
// 0x0030 (0x0030 - 0x0000)
struct BaseProjectile_OnDetectCollision final
{
public:
	struct FImpactInfo                            impactInfo;                                        // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_OnDetectCollision) == 0x000008, "Wrong alignment on BaseProjectile_OnDetectCollision");
static_assert(sizeof(BaseProjectile_OnDetectCollision) == 0x000030, "Wrong size on BaseProjectile_OnDetectCollision");
static_assert(offsetof(BaseProjectile_OnDetectCollision, impactInfo) == 0x000000, "Member 'BaseProjectile_OnDetectCollision::impactInfo' has a wrong offset!");

// Function Projectile.BaseProjectile.OnDetectPlayer
// 0x0030 (0x0030 - 0x0000)
struct BaseProjectile_OnDetectPlayer final
{
public:
	struct FImpactInfo                            impactInfo;                                        // 0x0000(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_OnDetectPlayer) == 0x000008, "Wrong alignment on BaseProjectile_OnDetectPlayer");
static_assert(sizeof(BaseProjectile_OnDetectPlayer) == 0x000030, "Wrong size on BaseProjectile_OnDetectPlayer");
static_assert(offsetof(BaseProjectile_OnDetectPlayer, impactInfo) == 0x000000, "Member 'BaseProjectile_OnDetectPlayer::impactInfo' has a wrong offset!");

// Function Projectile.BaseProjectile.OnLaunch
// 0x0020 (0x0020 - 0x0000)
struct BaseProjectile_OnLaunch final
{
public:
	struct FLaunchInfo                            launchInfo;                                        // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          hasImpactOnLaunch;                                 // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_OnLaunch) == 0x000004, "Wrong alignment on BaseProjectile_OnLaunch");
static_assert(sizeof(BaseProjectile_OnLaunch) == 0x000020, "Wrong size on BaseProjectile_OnLaunch");
static_assert(offsetof(BaseProjectile_OnLaunch, launchInfo) == 0x000000, "Member 'BaseProjectile_OnLaunch::launchInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectile_OnLaunch, hasImpactOnLaunch) == 0x00001C, "Member 'BaseProjectile_OnLaunch::hasImpactOnLaunch' has a wrong offset!");

// Function Projectile.BaseProjectile.OnSetActive
// 0x0001 (0x0001 - 0x0000)
struct BaseProjectile_OnSetActive final
{
public:
	bool                                          active;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_OnSetActive) == 0x000001, "Wrong alignment on BaseProjectile_OnSetActive");
static_assert(sizeof(BaseProjectile_OnSetActive) == 0x000001, "Wrong size on BaseProjectile_OnSetActive");
static_assert(offsetof(BaseProjectile_OnSetActive, active) == 0x000000, "Member 'BaseProjectile_OnSetActive::active' has a wrong offset!");

// Function Projectile.BaseProjectile.GetAddLauncherVeloctyFactor
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectile_GetAddLauncherVeloctyFactor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_GetAddLauncherVeloctyFactor) == 0x000004, "Wrong alignment on BaseProjectile_GetAddLauncherVeloctyFactor");
static_assert(sizeof(BaseProjectile_GetAddLauncherVeloctyFactor) == 0x000004, "Wrong size on BaseProjectile_GetAddLauncherVeloctyFactor");
static_assert(offsetof(BaseProjectile_GetAddLauncherVeloctyFactor, ReturnValue) == 0x000000, "Member 'BaseProjectile_GetAddLauncherVeloctyFactor::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.GetImpactPrimitiveComponent
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectile_GetImpactPrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_GetImpactPrimitiveComponent) == 0x000008, "Wrong alignment on BaseProjectile_GetImpactPrimitiveComponent");
static_assert(sizeof(BaseProjectile_GetImpactPrimitiveComponent) == 0x000008, "Wrong size on BaseProjectile_GetImpactPrimitiveComponent");
static_assert(offsetof(BaseProjectile_GetImpactPrimitiveComponent, ReturnValue) == 0x000000, "Member 'BaseProjectile_GetImpactPrimitiveComponent::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.GetLauncher
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectile_GetLauncher final
{
public:
	class UBaseProjectileLauncher*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_GetLauncher) == 0x000008, "Wrong alignment on BaseProjectile_GetLauncher");
static_assert(sizeof(BaseProjectile_GetLauncher) == 0x000008, "Wrong size on BaseProjectile_GetLauncher");
static_assert(offsetof(BaseProjectile_GetLauncher, ReturnValue) == 0x000000, "Member 'BaseProjectile_GetLauncher::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.IsOwningPawnLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct BaseProjectile_IsOwningPawnLocallyControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_IsOwningPawnLocallyControlled) == 0x000001, "Wrong alignment on BaseProjectile_IsOwningPawnLocallyControlled");
static_assert(sizeof(BaseProjectile_IsOwningPawnLocallyControlled) == 0x000001, "Wrong size on BaseProjectile_IsOwningPawnLocallyControlled");
static_assert(offsetof(BaseProjectile_IsOwningPawnLocallyControlled, ReturnValue) == 0x000000, "Member 'BaseProjectile_IsOwningPawnLocallyControlled::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.SphereTraceSingle
// 0x00B8 (0x00B8 - 0x0000)
struct BaseProjectile_SphereTraceSingle final
{
public:
	struct FVector                                start;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                end;                                               // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       sphere;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             outHitResult;                                      // 0x0020(0x0090)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_SphereTraceSingle) == 0x000008, "Wrong alignment on BaseProjectile_SphereTraceSingle");
static_assert(sizeof(BaseProjectile_SphereTraceSingle) == 0x0000B8, "Wrong size on BaseProjectile_SphereTraceSingle");
static_assert(offsetof(BaseProjectile_SphereTraceSingle, start) == 0x000000, "Member 'BaseProjectile_SphereTraceSingle::start' has a wrong offset!");
static_assert(offsetof(BaseProjectile_SphereTraceSingle, end) == 0x00000C, "Member 'BaseProjectile_SphereTraceSingle::end' has a wrong offset!");
static_assert(offsetof(BaseProjectile_SphereTraceSingle, sphere) == 0x000018, "Member 'BaseProjectile_SphereTraceSingle::sphere' has a wrong offset!");
static_assert(offsetof(BaseProjectile_SphereTraceSingle, outHitResult) == 0x000020, "Member 'BaseProjectile_SphereTraceSingle::outHitResult' has a wrong offset!");
static_assert(offsetof(BaseProjectile_SphereTraceSingle, ReturnValue) == 0x0000B0, "Member 'BaseProjectile_SphereTraceSingle::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Client_LaunchRefusedByServer
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectileReplicationComponent_Client_LaunchRefusedByServer final
{
public:
	class ABaseProjectile*                        projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileReplicationComponent_Client_LaunchRefusedByServer) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Client_LaunchRefusedByServer");
static_assert(sizeof(BaseProjectileReplicationComponent_Client_LaunchRefusedByServer) == 0x000008, "Wrong size on BaseProjectileReplicationComponent_Client_LaunchRefusedByServer");
static_assert(offsetof(BaseProjectileReplicationComponent_Client_LaunchRefusedByServer, projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Client_LaunchRefusedByServer::projectile' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Client_ReceiveDetectPlayerValidation
// 0x0010 (0x0010 - 0x0000)
struct BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation final
{
public:
	class ABaseProjectile*                        projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation");
static_assert(sizeof(BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation) == 0x000010, "Wrong size on BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation");
static_assert(offsetof(BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation, projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation::projectile' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation, success) == 0x000008, "Member 'BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation::success' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Multicast_DetectImpact
// 0x0038 (0x0038 - 0x0000)
struct BaseProjectileReplicationComponent_Multicast_DetectImpact final
{
public:
	class ABaseProjectile*                        projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FImpactInfo                            impactInfo;                                        // 0x0008(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileReplicationComponent_Multicast_DetectImpact) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Multicast_DetectImpact");
static_assert(sizeof(BaseProjectileReplicationComponent_Multicast_DetectImpact) == 0x000038, "Wrong size on BaseProjectileReplicationComponent_Multicast_DetectImpact");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_DetectImpact, projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Multicast_DetectImpact::projectile' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_DetectImpact, impactInfo) == 0x000008, "Member 'BaseProjectileReplicationComponent_Multicast_DetectImpact::impactInfo' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Multicast_DetectPlayer
// 0x0038 (0x0038 - 0x0000)
struct BaseProjectileReplicationComponent_Multicast_DetectPlayer final
{
public:
	class ABaseProjectile*                        projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FImpactInfo                            impactInfo;                                        // 0x0008(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileReplicationComponent_Multicast_DetectPlayer) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Multicast_DetectPlayer");
static_assert(sizeof(BaseProjectileReplicationComponent_Multicast_DetectPlayer) == 0x000038, "Wrong size on BaseProjectileReplicationComponent_Multicast_DetectPlayer");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_DetectPlayer, projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Multicast_DetectPlayer::projectile' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_DetectPlayer, impactInfo) == 0x000008, "Member 'BaseProjectileReplicationComponent_Multicast_DetectPlayer::impactInfo' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Multicast_OnLaunch
// 0x0028 (0x0028 - 0x0000)
struct BaseProjectileReplicationComponent_Multicast_OnLaunch final
{
public:
	class ABaseProjectile*                        projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLaunchInfo                            launchInfo;                                        // 0x0008(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectileReplicationComponent_Multicast_OnLaunch) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Multicast_OnLaunch");
static_assert(sizeof(BaseProjectileReplicationComponent_Multicast_OnLaunch) == 0x000028, "Wrong size on BaseProjectileReplicationComponent_Multicast_OnLaunch");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_OnLaunch, projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Multicast_OnLaunch::projectile' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_OnLaunch, launchInfo) == 0x000008, "Member 'BaseProjectileReplicationComponent_Multicast_OnLaunch::launchInfo' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Multicast_OnLaunchWithImpact
// 0x0058 (0x0058 - 0x0000)
struct BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact final
{
public:
	class ABaseProjectile*                        projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLaunchInfo                            launchInfo;                                        // 0x0008(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FImpactInfo                            impactInfo;                                        // 0x0028(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact");
static_assert(sizeof(BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact) == 0x000058, "Wrong size on BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact, projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact::projectile' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact, launchInfo) == 0x000008, "Member 'BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact::launchInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact, impactInfo) == 0x000028, "Member 'BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact::impactInfo' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Multicast_SendAuthorityDetectPlayer
// 0x0038 (0x0038 - 0x0000)
struct BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer final
{
public:
	class ABaseProjectile*                        projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FImpactInfo                            impactInfo;                                        // 0x0008(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer");
static_assert(sizeof(BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer) == 0x000038, "Wrong size on BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer, projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer::projectile' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer, impactInfo) == 0x000008, "Member 'BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer::impactInfo' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Server_TryDetectPlayer
// 0x0058 (0x0058 - 0x0000)
struct BaseProjectileReplicationComponent_Server_TryDetectPlayer final
{
public:
	class ABaseProjectile*                        projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FImpactInfo                            impactInfo;                                        // 0x0008(0x0030)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 projectileLocation;                                // 0x0038(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  projectileRotation;                                // 0x0044(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         targetLocationTimestamp;                           // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectileReplicationComponent_Server_TryDetectPlayer) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Server_TryDetectPlayer");
static_assert(sizeof(BaseProjectileReplicationComponent_Server_TryDetectPlayer) == 0x000058, "Wrong size on BaseProjectileReplicationComponent_Server_TryDetectPlayer");
static_assert(offsetof(BaseProjectileReplicationComponent_Server_TryDetectPlayer, projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Server_TryDetectPlayer::projectile' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Server_TryDetectPlayer, impactInfo) == 0x000008, "Member 'BaseProjectileReplicationComponent_Server_TryDetectPlayer::impactInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Server_TryDetectPlayer, projectileLocation) == 0x000038, "Member 'BaseProjectileReplicationComponent_Server_TryDetectPlayer::projectileLocation' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Server_TryDetectPlayer, projectileRotation) == 0x000044, "Member 'BaseProjectileReplicationComponent_Server_TryDetectPlayer::projectileRotation' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Server_TryDetectPlayer, targetLocationTimestamp) == 0x000050, "Member 'BaseProjectileReplicationComponent_Server_TryDetectPlayer::targetLocationTimestamp' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.Authority_AddMaxAmmo
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectileLauncher_Authority_AddMaxAmmo final
{
public:
	int32                                         ammoToAdd;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_Authority_AddMaxAmmo) == 0x000004, "Wrong alignment on BaseProjectileLauncher_Authority_AddMaxAmmo");
static_assert(sizeof(BaseProjectileLauncher_Authority_AddMaxAmmo) == 0x000004, "Wrong size on BaseProjectileLauncher_Authority_AddMaxAmmo");
static_assert(offsetof(BaseProjectileLauncher_Authority_AddMaxAmmo, ammoToAdd) == 0x000000, "Member 'BaseProjectileLauncher_Authority_AddMaxAmmo::ammoToAdd' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.Authority_ReturnAmmoUnits
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectileLauncher_Authority_ReturnAmmoUnits final
{
public:
	int32                                         amountOfAmmoUnitsReturned;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_Authority_ReturnAmmoUnits) == 0x000004, "Wrong alignment on BaseProjectileLauncher_Authority_ReturnAmmoUnits");
static_assert(sizeof(BaseProjectileLauncher_Authority_ReturnAmmoUnits) == 0x000004, "Wrong size on BaseProjectileLauncher_Authority_ReturnAmmoUnits");
static_assert(offsetof(BaseProjectileLauncher_Authority_ReturnAmmoUnits, amountOfAmmoUnitsReturned) == 0x000000, "Member 'BaseProjectileLauncher_Authority_ReturnAmmoUnits::amountOfAmmoUnitsReturned' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.Authority_SetMaxAmmo
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectileLauncher_Authority_SetMaxAmmo final
{
public:
	int32                                         newMaxAmmo;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isMaxAmmoImmutable;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectileLauncher_Authority_SetMaxAmmo) == 0x000004, "Wrong alignment on BaseProjectileLauncher_Authority_SetMaxAmmo");
static_assert(sizeof(BaseProjectileLauncher_Authority_SetMaxAmmo) == 0x000008, "Wrong size on BaseProjectileLauncher_Authority_SetMaxAmmo");
static_assert(offsetof(BaseProjectileLauncher_Authority_SetMaxAmmo, newMaxAmmo) == 0x000000, "Member 'BaseProjectileLauncher_Authority_SetMaxAmmo::newMaxAmmo' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_Authority_SetMaxAmmo, isMaxAmmoImmutable) == 0x000004, "Member 'BaseProjectileLauncher_Authority_SetMaxAmmo::isMaxAmmoImmutable' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.OnLaunch
// 0x0028 (0x0028 - 0x0000)
struct BaseProjectileLauncher_OnLaunch final
{
public:
	struct FLaunchInfo                            launchInfo;                                        // 0x0000(0x001C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseProjectile*                        projectile;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_OnLaunch) == 0x000008, "Wrong alignment on BaseProjectileLauncher_OnLaunch");
static_assert(sizeof(BaseProjectileLauncher_OnLaunch) == 0x000028, "Wrong size on BaseProjectileLauncher_OnLaunch");
static_assert(offsetof(BaseProjectileLauncher_OnLaunch, launchInfo) == 0x000000, "Member 'BaseProjectileLauncher_OnLaunch::launchInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_OnLaunch, projectile) == 0x000020, "Member 'BaseProjectileLauncher_OnLaunch::projectile' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.OnRep_Ammo
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectileLauncher_OnRep_Ammo final
{
public:
	int32                                         oldAmmo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_OnRep_Ammo) == 0x000004, "Wrong alignment on BaseProjectileLauncher_OnRep_Ammo");
static_assert(sizeof(BaseProjectileLauncher_OnRep_Ammo) == 0x000004, "Wrong size on BaseProjectileLauncher_OnRep_Ammo");
static_assert(offsetof(BaseProjectileLauncher_OnRep_Ammo, oldAmmo) == 0x000000, "Member 'BaseProjectileLauncher_OnRep_Ammo::oldAmmo' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.OnRep_MaxAmmo
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectileLauncher_OnRep_MaxAmmo final
{
public:
	int32                                         oldMaxAmmo;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_OnRep_MaxAmmo) == 0x000004, "Wrong alignment on BaseProjectileLauncher_OnRep_MaxAmmo");
static_assert(sizeof(BaseProjectileLauncher_OnRep_MaxAmmo) == 0x000004, "Wrong size on BaseProjectileLauncher_OnRep_MaxAmmo");
static_assert(offsetof(BaseProjectileLauncher_OnRep_MaxAmmo, oldMaxAmmo) == 0x000000, "Member 'BaseProjectileLauncher_OnRep_MaxAmmo::oldMaxAmmo' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.Server_Launch
// 0x0028 (0x0028 - 0x0000)
struct BaseProjectileLauncher_Server_Launch final
{
public:
	struct FLaunchInfo                            launchInfo;                                        // 0x0000(0x001C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABaseProjectile*                        projectile;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_Server_Launch) == 0x000008, "Wrong alignment on BaseProjectileLauncher_Server_Launch");
static_assert(sizeof(BaseProjectileLauncher_Server_Launch) == 0x000028, "Wrong size on BaseProjectileLauncher_Server_Launch");
static_assert(offsetof(BaseProjectileLauncher_Server_Launch, launchInfo) == 0x000000, "Member 'BaseProjectileLauncher_Server_Launch::launchInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_Server_Launch, projectile) == 0x000020, "Member 'BaseProjectileLauncher_Server_Launch::projectile' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.Server_LaunchWithImpact
// 0x0058 (0x0058 - 0x0000)
struct BaseProjectileLauncher_Server_LaunchWithImpact final
{
public:
	struct FLaunchInfo                            launchInfo;                                        // 0x0000(0x001C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FImpactInfo                            impactInfo;                                        // 0x0020(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ABaseProjectile*                        projectile;                                        // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_Server_LaunchWithImpact) == 0x000008, "Wrong alignment on BaseProjectileLauncher_Server_LaunchWithImpact");
static_assert(sizeof(BaseProjectileLauncher_Server_LaunchWithImpact) == 0x000058, "Wrong size on BaseProjectileLauncher_Server_LaunchWithImpact");
static_assert(offsetof(BaseProjectileLauncher_Server_LaunchWithImpact, launchInfo) == 0x000000, "Member 'BaseProjectileLauncher_Server_LaunchWithImpact::launchInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_Server_LaunchWithImpact, impactInfo) == 0x000020, "Member 'BaseProjectileLauncher_Server_LaunchWithImpact::impactInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_Server_LaunchWithImpact, projectile) == 0x000050, "Member 'BaseProjectileLauncher_Server_LaunchWithImpact::projectile' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.SetProjectileProvider
// 0x0010 (0x0010 - 0x0000)
struct BaseProjectileLauncher_SetProjectileProvider final
{
public:
	TScriptInterface<class IProjectileProvider>   projectileProvider;                                // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_SetProjectileProvider) == 0x000008, "Wrong alignment on BaseProjectileLauncher_SetProjectileProvider");
static_assert(sizeof(BaseProjectileLauncher_SetProjectileProvider) == 0x000010, "Wrong size on BaseProjectileLauncher_SetProjectileProvider");
static_assert(offsetof(BaseProjectileLauncher_SetProjectileProvider, projectileProvider) == 0x000000, "Member 'BaseProjectileLauncher_SetProjectileProvider::projectileProvider' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.SetProjectileVar
// 0x0010 (0x0010 - 0x0000)
struct BaseProjectileLauncher_SetProjectileVar final
{
public:
	class FName                                   varName;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_SetProjectileVar) == 0x000004, "Wrong alignment on BaseProjectileLauncher_SetProjectileVar");
static_assert(sizeof(BaseProjectileLauncher_SetProjectileVar) == 0x000010, "Wrong size on BaseProjectileLauncher_SetProjectileVar");
static_assert(offsetof(BaseProjectileLauncher_SetProjectileVar, varName) == 0x000000, "Member 'BaseProjectileLauncher_SetProjectileVar::varName' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_SetProjectileVar, value) == 0x00000C, "Member 'BaseProjectileLauncher_SetProjectileVar::value' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetAmmo
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectileLauncher_GetAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetAmmo) == 0x000004, "Wrong alignment on BaseProjectileLauncher_GetAmmo");
static_assert(sizeof(BaseProjectileLauncher_GetAmmo) == 0x000004, "Wrong size on BaseProjectileLauncher_GetAmmo");
static_assert(offsetof(BaseProjectileLauncher_GetAmmo, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_GetAmmo::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetLaunchDirection
// 0x000C (0x000C - 0x0000)
struct BaseProjectileLauncher_GetLaunchDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetLaunchDirection) == 0x000004, "Wrong alignment on BaseProjectileLauncher_GetLaunchDirection");
static_assert(sizeof(BaseProjectileLauncher_GetLaunchDirection) == 0x00000C, "Wrong size on BaseProjectileLauncher_GetLaunchDirection");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchDirection, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_GetLaunchDirection::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetLaunchDirectionAtViewAndThrowPowerRatio
// 0x001C (0x001C - 0x0000)
struct BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio final
{
public:
	struct FRotator                               viewRotation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         throwPowerRatio;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio) == 0x000004, "Wrong alignment on BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio");
static_assert(sizeof(BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio) == 0x00001C, "Wrong size on BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio, viewRotation) == 0x000000, "Member 'BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio::viewRotation' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio, throwPowerRatio) == 0x00000C, "Member 'BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio::throwPowerRatio' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio, ReturnValue) == 0x000010, "Member 'BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetLaunchPosition
// 0x000C (0x000C - 0x0000)
struct BaseProjectileLauncher_GetLaunchPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetLaunchPosition) == 0x000004, "Wrong alignment on BaseProjectileLauncher_GetLaunchPosition");
static_assert(sizeof(BaseProjectileLauncher_GetLaunchPosition) == 0x00000C, "Wrong size on BaseProjectileLauncher_GetLaunchPosition");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchPosition, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_GetLaunchPosition::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetLaunchSpeed
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectileLauncher_GetLaunchSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetLaunchSpeed) == 0x000004, "Wrong alignment on BaseProjectileLauncher_GetLaunchSpeed");
static_assert(sizeof(BaseProjectileLauncher_GetLaunchSpeed) == 0x000004, "Wrong size on BaseProjectileLauncher_GetLaunchSpeed");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchSpeed, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_GetLaunchSpeed::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetLaunchSpeedAtThrowPowerRatio
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio final
{
public:
	float                                         throwPowerRatio;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio) == 0x000004, "Wrong alignment on BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio");
static_assert(sizeof(BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio) == 0x000008, "Wrong size on BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio, throwPowerRatio) == 0x000000, "Member 'BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio::throwPowerRatio' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio, ReturnValue) == 0x000004, "Member 'BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetOwningPawn
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectileLauncher_GetOwningPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetOwningPawn) == 0x000008, "Wrong alignment on BaseProjectileLauncher_GetOwningPawn");
static_assert(sizeof(BaseProjectileLauncher_GetOwningPawn) == 0x000008, "Wrong size on BaseProjectileLauncher_GetOwningPawn");
static_assert(offsetof(BaseProjectileLauncher_GetOwningPawn, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_GetOwningPawn::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetProjectileToLaunch
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectileLauncher_GetProjectileToLaunch final
{
public:
	class ABaseProjectile*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetProjectileToLaunch) == 0x000008, "Wrong alignment on BaseProjectileLauncher_GetProjectileToLaunch");
static_assert(sizeof(BaseProjectileLauncher_GetProjectileToLaunch) == 0x000008, "Wrong size on BaseProjectileLauncher_GetProjectileToLaunch");
static_assert(offsetof(BaseProjectileLauncher_GetProjectileToLaunch, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_GetProjectileToLaunch::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.HasAuthority
// 0x0001 (0x0001 - 0x0000)
struct BaseProjectileLauncher_HasAuthority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_HasAuthority) == 0x000001, "Wrong alignment on BaseProjectileLauncher_HasAuthority");
static_assert(sizeof(BaseProjectileLauncher_HasAuthority) == 0x000001, "Wrong size on BaseProjectileLauncher_HasAuthority");
static_assert(offsetof(BaseProjectileLauncher_HasAuthority, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_HasAuthority::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.HasProjectile
// 0x0001 (0x0001 - 0x0000)
struct BaseProjectileLauncher_HasProjectile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_HasProjectile) == 0x000001, "Wrong alignment on BaseProjectileLauncher_HasProjectile");
static_assert(sizeof(BaseProjectileLauncher_HasProjectile) == 0x000001, "Wrong size on BaseProjectileLauncher_HasProjectile");
static_assert(offsetof(BaseProjectileLauncher_HasProjectile, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_HasProjectile::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.IsAmmoFull
// 0x0001 (0x0001 - 0x0000)
struct BaseProjectileLauncher_IsAmmoFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_IsAmmoFull) == 0x000001, "Wrong alignment on BaseProjectileLauncher_IsAmmoFull");
static_assert(sizeof(BaseProjectileLauncher_IsAmmoFull) == 0x000001, "Wrong size on BaseProjectileLauncher_IsAmmoFull");
static_assert(offsetof(BaseProjectileLauncher_IsAmmoFull, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_IsAmmoFull::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.IsLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct BaseProjectileLauncher_IsLocallyControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_IsLocallyControlled) == 0x000001, "Wrong alignment on BaseProjectileLauncher_IsLocallyControlled");
static_assert(sizeof(BaseProjectileLauncher_IsLocallyControlled) == 0x000001, "Wrong size on BaseProjectileLauncher_IsLocallyControlled");
static_assert(offsetof(BaseProjectileLauncher_IsLocallyControlled, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_IsLocallyControlled::ReturnValue' has a wrong offset!");

// Function Projectile.AuthoritativePoolProjectileProviderAdapter.Init
// 0x0008 (0x0008 - 0x0000)
struct AuthoritativePoolProjectileProviderAdapter_Init final
{
public:
	class UAuthoritativeActorPoolComponent*       pool;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AuthoritativePoolProjectileProviderAdapter_Init) == 0x000008, "Wrong alignment on AuthoritativePoolProjectileProviderAdapter_Init");
static_assert(sizeof(AuthoritativePoolProjectileProviderAdapter_Init) == 0x000008, "Wrong size on AuthoritativePoolProjectileProviderAdapter_Init");
static_assert(offsetof(AuthoritativePoolProjectileProviderAdapter_Init, pool) == 0x000000, "Member 'AuthoritativePoolProjectileProviderAdapter_Init::pool' has a wrong offset!");

}

