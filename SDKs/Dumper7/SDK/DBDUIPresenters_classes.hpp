#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIPresenters

#include "Basic.hpp"

#include "DBDUIViewInterfaces_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Halloween2022_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DBDUIPresenters_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class DBDUIPresenters.SubPresenter
// 0x0008 (0x0038 - 0x0030)
class USubPresenter : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubPresenter">();
	}
	static class USubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubPresenter>();
	}
};
static_assert(alignof(USubPresenter) == 0x000008, "Wrong alignment on USubPresenter");
static_assert(sizeof(USubPresenter) == 0x000038, "Wrong size on USubPresenter");

// Class DBDUIPresenters.ArchiveCompendiumSubPresenter
// 0x0080 (0x00B8 - 0x0038)
class UArchiveCompendiumSubPresenter final : public USubPresenter
{
public:
	TScriptInterface<class IArchiveCompendiumViewInterface> _archiveCompendiumWidget;                // 0x0038(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x70];                                      // 0x0048(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTomeSelected(const class FString& tomeId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveCompendiumSubPresenter">();
	}
	static class UArchiveCompendiumSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveCompendiumSubPresenter>();
	}
};
static_assert(alignof(UArchiveCompendiumSubPresenter) == 0x000008, "Wrong alignment on UArchiveCompendiumSubPresenter");
static_assert(sizeof(UArchiveCompendiumSubPresenter) == 0x0000B8, "Wrong size on UArchiveCompendiumSubPresenter");
static_assert(offsetof(UArchiveCompendiumSubPresenter, _archiveCompendiumWidget) == 0x000038, "Member 'UArchiveCompendiumSubPresenter::_archiveCompendiumWidget' has a wrong offset!");

// Class DBDUIPresenters.ArchiveQuestMapSubPresenter
// 0x01F8 (0x0230 - 0x0038)
class UArchiveQuestMapSubPresenter : public USubPresenter
{
public:
	uint8                                         Pad_38[0x150];                                     // 0x0038(0x0150)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IArchiveQuestMapViewInterface> _archiveQuestMapWidget;                    // 0x0188(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TScriptInterface<class IArchiveLevelProgressionViewInterface> _archiveLevelProgressionWidget;    // 0x0198(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A8[0x58];                                     // 0x01A8(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EArchivesStoryLevelStatus>             _storyLevelStatusCache;                            // 0x0200(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_210[0x20];                                     // 0x0210(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetCurrentLevel();
	void NavigateToNextLevelAfterUnlock();
	void OnLevelSelected(const int32 levelIndex);
	void OnNodeSelected(const class FName& nodeId, EPlayerRole role, const struct FVector2D& position);
	void OnQuestNodeHovered(EPlayerRole role);
	void OnQuestNodeUnhovered(EPlayerRole role);
	void OnTomeLevelRewardAnimationDone();
	void OnTomeMapCreated();
	void UpdateTomeLevels();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveQuestMapSubPresenter">();
	}
	static class UArchiveQuestMapSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveQuestMapSubPresenter>();
	}
};
static_assert(alignof(UArchiveQuestMapSubPresenter) == 0x000008, "Wrong alignment on UArchiveQuestMapSubPresenter");
static_assert(sizeof(UArchiveQuestMapSubPresenter) == 0x000230, "Wrong size on UArchiveQuestMapSubPresenter");
static_assert(offsetof(UArchiveQuestMapSubPresenter, _archiveQuestMapWidget) == 0x000188, "Member 'UArchiveQuestMapSubPresenter::_archiveQuestMapWidget' has a wrong offset!");
static_assert(offsetof(UArchiveQuestMapSubPresenter, _archiveLevelProgressionWidget) == 0x000198, "Member 'UArchiveQuestMapSubPresenter::_archiveLevelProgressionWidget' has a wrong offset!");
static_assert(offsetof(UArchiveQuestMapSubPresenter, _storyLevelStatusCache) == 0x000200, "Member 'UArchiveQuestMapSubPresenter::_storyLevelStatusCache' has a wrong offset!");

// Class DBDUIPresenters.ArchiveEditorSubPresenter
// 0x0028 (0x0258 - 0x0230)
class UArchiveEditorSubPresenter final : public UArchiveQuestMapSubPresenter
{
public:
	uint8                                         Pad_230[0x18];                                     // 0x0230(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IArchiveEditorViewInterface> _archiveEditorWidget;                        // 0x0248(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void OnSaveTomeGraph(const TArray<struct FArchiveNodeGraphViewData>& nodeList);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveEditorSubPresenter">();
	}
	static class UArchiveEditorSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveEditorSubPresenter>();
	}
};
static_assert(alignof(UArchiveEditorSubPresenter) == 0x000008, "Wrong alignment on UArchiveEditorSubPresenter");
static_assert(sizeof(UArchiveEditorSubPresenter) == 0x000258, "Wrong size on UArchiveEditorSubPresenter");
static_assert(offsetof(UArchiveEditorSubPresenter, _archiveEditorWidget) == 0x000248, "Member 'UArchiveEditorSubPresenter::_archiveEditorWidget' has a wrong offset!");

// Class DBDUIPresenters.UIComponent
// 0x0000 (0x0030 - 0x0030)
class UUIComponent : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIComponent">();
	}
	static class UUIComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIComponent>();
	}
};
static_assert(alignof(UUIComponent) == 0x000008, "Wrong alignment on UUIComponent");
static_assert(sizeof(UUIComponent) == 0x000030, "Wrong size on UUIComponent");

// Class DBDUIPresenters.Presenter
// 0x00C0 (0x00F0 - 0x0030)
class UPresenter : public UUIComponent
{
public:
	bool                                          _overrideWidgetInstantiationPhase;                 // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPresenterPhase                               _widgetInstantiationPhase;                         // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          RequestPresentationAtBeginPlay;                    // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              InitialVisibility;                                 // 0x0033(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _widgetZOrder;                                     // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            _widget;                                           // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPresenterContainerInfo                _parentContainerInfo;                              // 0x0040(0x0028)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_68[0x10];                                      // 0x0068(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FString>                           _ignoredPresentationRequirementFunctions;          // 0x0078(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<class UPresenterRequirementFunction*>  _presentationRequirementFunctions;                 // 0x00C8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_D8[0x18];                                      // 0x00D8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnContextSectionChanged(EContext context);

	bool IsContextReady() const;
	bool IsGameStateReady() const;
	bool IsPlayerStateReady() const;
	bool ShouldPresent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Presenter">();
	}
	static class UPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPresenter>();
	}
};
static_assert(alignof(UPresenter) == 0x000008, "Wrong alignment on UPresenter");
static_assert(sizeof(UPresenter) == 0x0000F0, "Wrong size on UPresenter");
static_assert(offsetof(UPresenter, _overrideWidgetInstantiationPhase) == 0x000030, "Member 'UPresenter::_overrideWidgetInstantiationPhase' has a wrong offset!");
static_assert(offsetof(UPresenter, _widgetInstantiationPhase) == 0x000031, "Member 'UPresenter::_widgetInstantiationPhase' has a wrong offset!");
static_assert(offsetof(UPresenter, RequestPresentationAtBeginPlay) == 0x000032, "Member 'UPresenter::RequestPresentationAtBeginPlay' has a wrong offset!");
static_assert(offsetof(UPresenter, InitialVisibility) == 0x000033, "Member 'UPresenter::InitialVisibility' has a wrong offset!");
static_assert(offsetof(UPresenter, _widgetZOrder) == 0x000034, "Member 'UPresenter::_widgetZOrder' has a wrong offset!");
static_assert(offsetof(UPresenter, _widget) == 0x000038, "Member 'UPresenter::_widget' has a wrong offset!");
static_assert(offsetof(UPresenter, _parentContainerInfo) == 0x000040, "Member 'UPresenter::_parentContainerInfo' has a wrong offset!");
static_assert(offsetof(UPresenter, _ignoredPresentationRequirementFunctions) == 0x000078, "Member 'UPresenter::_ignoredPresentationRequirementFunctions' has a wrong offset!");
static_assert(offsetof(UPresenter, _presentationRequirementFunctions) == 0x0000C8, "Member 'UPresenter::_presentationRequirementFunctions' has a wrong offset!");

// Class DBDUIPresenters.ArchiveImageViewerPresenter
// 0x0090 (0x0180 - 0x00F0)
class UArchiveImageViewerPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                ArchiveImageViewerWidgetClass;                     // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x88];                                      // 0x00F8(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnArchivesVoiceOverAutoplay(bool autoplay);
	void OnArchivesVoiceOverPlayed(bool playing);
	void OnBackAction();
	void OnImageViewerVoiceOverAutoplay(bool autoplay);
	void OnImageViewerVoiceOverPlayed();
	void OnTextVisibilityChanged();

	bool CanShowFullScreenMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveImageViewerPresenter">();
	}
	static class UArchiveImageViewerPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveImageViewerPresenter>();
	}
};
static_assert(alignof(UArchiveImageViewerPresenter) == 0x000008, "Wrong alignment on UArchiveImageViewerPresenter");
static_assert(sizeof(UArchiveImageViewerPresenter) == 0x000180, "Wrong size on UArchiveImageViewerPresenter");
static_assert(offsetof(UArchiveImageViewerPresenter, ArchiveImageViewerWidgetClass) == 0x0000F0, "Member 'UArchiveImageViewerPresenter::ArchiveImageViewerWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.ArchiveJournalSubPresenter
// 0x00D8 (0x0110 - 0x0038)
class UArchiveJournalSubPresenter final : public USubPresenter
{
public:
	uint8                                         Pad_38[0x38];                                      // 0x0038(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IArchiveJournalViewInterface> _archiveJournalWidget;                      // 0x0070(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x90];                                      // 0x0080(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAutoplayChanged(bool autoplayActive, int32 entryIndex);
	void OnClickPlayButton(int32 entryIndex);
	void OnEntrySelected(int32 entryIndex);
	void OnImageViewerVoiceOverAutoplay(bool autoplay);
	void OnImageViewerVoiceOverPlayed();
	void OnPlayCinematic(const int32 index);
	void OnShowImageViewer();
	void OnVignetteSelected(const class FString& vignetteId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveJournalSubPresenter">();
	}
	static class UArchiveJournalSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveJournalSubPresenter>();
	}
};
static_assert(alignof(UArchiveJournalSubPresenter) == 0x000008, "Wrong alignment on UArchiveJournalSubPresenter");
static_assert(sizeof(UArchiveJournalSubPresenter) == 0x000110, "Wrong size on UArchiveJournalSubPresenter");
static_assert(offsetof(UArchiveJournalSubPresenter, _archiveJournalWidget) == 0x000070, "Member 'UArchiveJournalSubPresenter::_archiveJournalWidget' has a wrong offset!");

// Class DBDUIPresenters.ArchiveMenuPresenter
// 0x00C8 (0x01B8 - 0x00F0)
class UArchiveMenuPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                ArchiveMenuWidgetClass;                            // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArchiveTomeSubPresenter*               _archiveTomeSubPresenter;                          // 0x00F8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UArchiveRiftSubPresenter*               _archiveRiftSubPresenter;                          // 0x0100(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UArchiveCompendiumSubPresenter*         _archiveCompendiumSubPresenter;                    // 0x0108(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USubPresenter*                          _activeSubPresenter;                               // 0x0110(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0xA0];                                     // 0x0118(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackAction();
	void OnChallengeReminderClicked(EPlayerRole role);
	void OnChallengeReminderSlotSelected(EPlayerRole role);
	void OnHideImageViewer();
	void OnInfoClicked();
	void OnMenuTabSelected(EArchiveMenuState menuState, bool alreadySelected);
	void OnShowImageViewer(bool voiceOverIsPlaying);
	void OnSlotSelectorClosed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveMenuPresenter">();
	}
	static class UArchiveMenuPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveMenuPresenter>();
	}
};
static_assert(alignof(UArchiveMenuPresenter) == 0x000008, "Wrong alignment on UArchiveMenuPresenter");
static_assert(sizeof(UArchiveMenuPresenter) == 0x0001B8, "Wrong size on UArchiveMenuPresenter");
static_assert(offsetof(UArchiveMenuPresenter, ArchiveMenuWidgetClass) == 0x0000F0, "Member 'UArchiveMenuPresenter::ArchiveMenuWidgetClass' has a wrong offset!");
static_assert(offsetof(UArchiveMenuPresenter, _archiveTomeSubPresenter) == 0x0000F8, "Member 'UArchiveMenuPresenter::_archiveTomeSubPresenter' has a wrong offset!");
static_assert(offsetof(UArchiveMenuPresenter, _archiveRiftSubPresenter) == 0x000100, "Member 'UArchiveMenuPresenter::_archiveRiftSubPresenter' has a wrong offset!");
static_assert(offsetof(UArchiveMenuPresenter, _archiveCompendiumSubPresenter) == 0x000108, "Member 'UArchiveMenuPresenter::_archiveCompendiumSubPresenter' has a wrong offset!");
static_assert(offsetof(UArchiveMenuPresenter, _activeSubPresenter) == 0x000110, "Member 'UArchiveMenuPresenter::_activeSubPresenter' has a wrong offset!");

// Class DBDUIPresenters.BasePopupPresenter
// 0x0040 (0x0130 - 0x00F0)
class UBasePopupPresenter : public UPresenter
{
public:
	EContext                                      ObservedContext;                                   // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                PopupWidgetClass;                                  // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x8];                                      // 0x0100(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UBasePopupViewData*                     _viewData;                                         // 0x0108(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x20];                                     // 0x0110(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnContextEnter(EContext context);
	void OnContextLeave(EContext context);

	bool IsContextEntered() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BasePopupPresenter">();
	}
	static class UBasePopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBasePopupPresenter>();
	}
};
static_assert(alignof(UBasePopupPresenter) == 0x000008, "Wrong alignment on UBasePopupPresenter");
static_assert(sizeof(UBasePopupPresenter) == 0x000130, "Wrong size on UBasePopupPresenter");
static_assert(offsetof(UBasePopupPresenter, ObservedContext) == 0x0000F0, "Member 'UBasePopupPresenter::ObservedContext' has a wrong offset!");
static_assert(offsetof(UBasePopupPresenter, PopupWidgetClass) == 0x0000F8, "Member 'UBasePopupPresenter::PopupWidgetClass' has a wrong offset!");
static_assert(offsetof(UBasePopupPresenter, _viewData) == 0x000108, "Member 'UBasePopupPresenter::_viewData' has a wrong offset!");

// Class DBDUIPresenters.GenericPopupPresenter
// 0x0050 (0x0180 - 0x0130)
class UGenericPopupPresenter : public UBasePopupPresenter
{
public:
	uint8                                         Pad_130[0x50];                                     // 0x0130(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAction(EPopupButtonType popupAction);
	void OnAppResumed(bool isAppResumed);
	void OnBack();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GenericPopupPresenter">();
	}
	static class UGenericPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGenericPopupPresenter>();
	}
};
static_assert(alignof(UGenericPopupPresenter) == 0x000008, "Wrong alignment on UGenericPopupPresenter");
static_assert(sizeof(UGenericPopupPresenter) == 0x000180, "Wrong size on UGenericPopupPresenter");

// Class DBDUIPresenters.ArchivePassPurchasePopupPresenter
// 0x0000 (0x0180 - 0x0180)
class UArchivePassPurchasePopupPresenter final : public UGenericPopupPresenter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchivePassPurchasePopupPresenter">();
	}
	static class UArchivePassPurchasePopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchivePassPurchasePopupPresenter>();
	}
};
static_assert(alignof(UArchivePassPurchasePopupPresenter) == 0x000008, "Wrong alignment on UArchivePassPurchasePopupPresenter");
static_assert(sizeof(UArchivePassPurchasePopupPresenter) == 0x000180, "Wrong size on UArchivePassPurchasePopupPresenter");

// Class DBDUIPresenters.ArchivePresenterHelper
// 0x0000 (0x0030 - 0x0030)
class UArchivePresenterHelper final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchivePresenterHelper">();
	}
	static class UArchivePresenterHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchivePresenterHelper>();
	}
};
static_assert(alignof(UArchivePresenterHelper) == 0x000008, "Wrong alignment on UArchivePresenterHelper");
static_assert(sizeof(UArchivePresenterHelper) == 0x000030, "Wrong size on UArchivePresenterHelper");

// Class DBDUIPresenters.ArchiveRiftSubPresenter
// 0x0120 (0x0158 - 0x0038)
class UArchiveRiftSubPresenter final : public USubPresenter
{
public:
	uint8                                         Pad_38[0x60];                                      // 0x0038(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IArchiveRiftViewInterface> _archiveRiftWidget;                            // 0x0098(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A8[0xB0];                                      // 0x00A8(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBonusTierTooltipShown();
	void OnClickPurchasePremiumPass();
	void OnClickPurchaseTiers();
	void OnRewardCurrencyClicked(const ECurrencyType currencyType);
	void OnRewardItemClicked(const class FName itemId);
	void OnToggleOutfitDisplay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveRiftSubPresenter">();
	}
	static class UArchiveRiftSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveRiftSubPresenter>();
	}
};
static_assert(alignof(UArchiveRiftSubPresenter) == 0x000008, "Wrong alignment on UArchiveRiftSubPresenter");
static_assert(sizeof(UArchiveRiftSubPresenter) == 0x000158, "Wrong size on UArchiveRiftSubPresenter");
static_assert(offsetof(UArchiveRiftSubPresenter, _archiveRiftWidget) == 0x000098, "Member 'UArchiveRiftSubPresenter::_archiveRiftWidget' has a wrong offset!");

// Class DBDUIPresenters.ArchiveTierPurchasePopupPresenter
// 0x0060 (0x01E0 - 0x0180)
class UArchiveTierPurchasePopupPresenter final : public UGenericPopupPresenter
{
public:
	uint8                                         Pad_180[0x60];                                     // 0x0180(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnConfirmPurchase(int32 tiersToPurchaseNumber);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveTierPurchasePopupPresenter">();
	}
	static class UArchiveTierPurchasePopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveTierPurchasePopupPresenter>();
	}
};
static_assert(alignof(UArchiveTierPurchasePopupPresenter) == 0x000008, "Wrong alignment on UArchiveTierPurchasePopupPresenter");
static_assert(sizeof(UArchiveTierPurchasePopupPresenter) == 0x0001E0, "Wrong size on UArchiveTierPurchasePopupPresenter");

// Class DBDUIPresenters.ArchiveTomeSubPresenter
// 0x0090 (0x00C8 - 0x0038)
class UArchiveTomeSubPresenter final : public USubPresenter
{
public:
	uint8                                         Pad_38[0x30];                                      // 0x0038(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UArchiveQuestMapSubPresenter*           _archiveQuestMapSubPresenter;                      // 0x0068(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UArchiveEditorSubPresenter*             _archiveEditorSubPresenter;                        // 0x0070(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UArchiveJournalSubPresenter*            _archiveJournalSubPresenter;                       // 0x0078(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USubPresenter*                          _activeSubPresenter;                               // 0x0080(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TScriptInterface<class IArchiveTomeViewInterface> _archiveTomeWidget;                            // 0x0088(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     _archiveSideNavSkinMaterial;                       // 0x0098(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A0[0x28];                                      // 0x00A0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEditorWidgetSwitchComplete();
	void OnMenuTabSelected(EArchiveTomeMenuState menuState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveTomeSubPresenter">();
	}
	static class UArchiveTomeSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveTomeSubPresenter>();
	}
};
static_assert(alignof(UArchiveTomeSubPresenter) == 0x000008, "Wrong alignment on UArchiveTomeSubPresenter");
static_assert(sizeof(UArchiveTomeSubPresenter) == 0x0000C8, "Wrong size on UArchiveTomeSubPresenter");
static_assert(offsetof(UArchiveTomeSubPresenter, _archiveQuestMapSubPresenter) == 0x000068, "Member 'UArchiveTomeSubPresenter::_archiveQuestMapSubPresenter' has a wrong offset!");
static_assert(offsetof(UArchiveTomeSubPresenter, _archiveEditorSubPresenter) == 0x000070, "Member 'UArchiveTomeSubPresenter::_archiveEditorSubPresenter' has a wrong offset!");
static_assert(offsetof(UArchiveTomeSubPresenter, _archiveJournalSubPresenter) == 0x000078, "Member 'UArchiveTomeSubPresenter::_archiveJournalSubPresenter' has a wrong offset!");
static_assert(offsetof(UArchiveTomeSubPresenter, _activeSubPresenter) == 0x000080, "Member 'UArchiveTomeSubPresenter::_activeSubPresenter' has a wrong offset!");
static_assert(offsetof(UArchiveTomeSubPresenter, _archiveTomeWidget) == 0x000088, "Member 'UArchiveTomeSubPresenter::_archiveTomeWidget' has a wrong offset!");
static_assert(offsetof(UArchiveTomeSubPresenter, _archiveSideNavSkinMaterial) == 0x000098, "Member 'UArchiveTomeSubPresenter::_archiveSideNavSkinMaterial' has a wrong offset!");

// Class DBDUIPresenters.HudPresenter
// 0x0038 (0x0128 - 0x00F0)
class UHudPresenter : public UPresenter
{
public:
	EHudParentContainerType                       HudParentContainer;                                // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             _pendingCharacter;                                 // 0x00F8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ADBDPlayer*                             _presentedCharacter;                               // 0x0100(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ADBDSpectator*                          _spectatorPawn;                                    // 0x0108(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHudScreen*                             _hudScreen;                                        // 0x0118(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreHudRootWidget*                     _rootWidget;                                       // 0x0120(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool IsHudReady();
	void OnLocallyObservedChanged();
	void OnPawnPossessed(class APawn* pawn);
	void OnPawnUnpossessed(class APawn* pawn);

	bool IsPendingPawnReady() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudPresenter">();
	}
	static class UHudPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudPresenter>();
	}
};
static_assert(alignof(UHudPresenter) == 0x000008, "Wrong alignment on UHudPresenter");
static_assert(sizeof(UHudPresenter) == 0x000128, "Wrong size on UHudPresenter");
static_assert(offsetof(UHudPresenter, HudParentContainer) == 0x0000F0, "Member 'UHudPresenter::HudParentContainer' has a wrong offset!");
static_assert(offsetof(UHudPresenter, _pendingCharacter) == 0x0000F8, "Member 'UHudPresenter::_pendingCharacter' has a wrong offset!");
static_assert(offsetof(UHudPresenter, _presentedCharacter) == 0x000100, "Member 'UHudPresenter::_presentedCharacter' has a wrong offset!");
static_assert(offsetof(UHudPresenter, _spectatorPawn) == 0x000108, "Member 'UHudPresenter::_spectatorPawn' has a wrong offset!");
static_assert(offsetof(UHudPresenter, _hudScreen) == 0x000118, "Member 'UHudPresenter::_hudScreen' has a wrong offset!");
static_assert(offsetof(UHudPresenter, _rootWidget) == 0x000120, "Member 'UHudPresenter::_rootWidget' has a wrong offset!");

// Class DBDUIPresenters.ChallengeTrackerPresenter
// 0x00A0 (0x01C8 - 0x0128)
class UChallengeTrackerPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                ChallengeTrackerWidgetClass;                       // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReadingTimeDelaySec;                               // 0x0130(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_134[0x94];                                     // 0x0134(0x0094)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindToQuestRepetitionEvents();
	void OnQuestEventRepetitionValueChanged(int32 value, const class FString& questEventIdTracked);
	void OnReadingTimeDelayDone();
	void OnWidgetClosingDone();
	void OnWidgetOpeningDone();
	void OnWidgetProgressingDone();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeTrackerPresenter">();
	}
	static class UChallengeTrackerPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeTrackerPresenter>();
	}
};
static_assert(alignof(UChallengeTrackerPresenter) == 0x000008, "Wrong alignment on UChallengeTrackerPresenter");
static_assert(sizeof(UChallengeTrackerPresenter) == 0x0001C8, "Wrong size on UChallengeTrackerPresenter");
static_assert(offsetof(UChallengeTrackerPresenter, ChallengeTrackerWidgetClass) == 0x000128, "Member 'UChallengeTrackerPresenter::ChallengeTrackerWidgetClass' has a wrong offset!");
static_assert(offsetof(UChallengeTrackerPresenter, ReadingTimeDelaySec) == 0x000130, "Member 'UChallengeTrackerPresenter::ReadingTimeDelaySec' has a wrong offset!");

// Class DBDUIPresenters.ContextObserver
// 0x0070 (0x00A0 - 0x0030)
class UContextObserver final : public UUIComponent
{
public:
	EContextSection                               ObservedContextSection;                            // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x6F];                                      // 0x0031(0x006F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ContextObserver">();
	}
	static class UContextObserver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContextObserver>();
	}
};
static_assert(alignof(UContextObserver) == 0x000008, "Wrong alignment on UContextObserver");
static_assert(sizeof(UContextObserver) == 0x0000A0, "Wrong size on UContextObserver");
static_assert(offsetof(UContextObserver, ObservedContextSection) == 0x000030, "Member 'UContextObserver::ObservedContextSection' has a wrong offset!");

// Class DBDUIPresenters.CreditsPresenter
// 0x0018 (0x0108 - 0x00F0)
class UCreditsPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                CreditsScreenWidgetClass;                          // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Credits_ScrollToEnd();
	void Credits_ScrollToName(const class FString& name, float delay);
	void OnBackAction();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreditsPresenter">();
	}
	static class UCreditsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreditsPresenter>();
	}
};
static_assert(alignof(UCreditsPresenter) == 0x000008, "Wrong alignment on UCreditsPresenter");
static_assert(sizeof(UCreditsPresenter) == 0x000108, "Wrong size on UCreditsPresenter");
static_assert(offsetof(UCreditsPresenter, CreditsScreenWidgetClass) == 0x0000F0, "Member 'UCreditsPresenter::CreditsScreenWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.DailyRitualsPopupPresenter
// 0x0020 (0x01A0 - 0x0180)
class UDailyRitualsPopupPresenter final : public UGenericPopupPresenter
{
public:
	uint8                                         Pad_180[0x20];                                     // 0x0180(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClaimAllRituals();
	void OnClaimRitual(const class FString& id);
	void OnRemoveRitual(const class FString& id);

	void OnRitualsFetchedEvent() const;
	void OnRitualsSyncErrorEvent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DailyRitualsPopupPresenter">();
	}
	static class UDailyRitualsPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDailyRitualsPopupPresenter>();
	}
};
static_assert(alignof(UDailyRitualsPopupPresenter) == 0x000008, "Wrong alignment on UDailyRitualsPopupPresenter");
static_assert(sizeof(UDailyRitualsPopupPresenter) == 0x0001A0, "Wrong size on UDailyRitualsPopupPresenter");

// Class DBDUIPresenters.DirectionalMinigamePresenter
// 0x0030 (0x0158 - 0x0128)
class UDirectionalMinigamePresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                DirectionalMinigameWidgetClass;                    // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberItemMax;                                     // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x24];                                     // 0x0134(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMinigameEnd(EDirectionalMinigameResult result);
	void OnMinigameEnterKey(EDirectionalInputKey enteredKey, int32 enteredIndex, bool isCorrect, int32 currentIndex);
	void OnMinigameStart(const TArray<EDirectionalInputKey>& sequence, int32 currentIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DirectionalMinigamePresenter">();
	}
	static class UDirectionalMinigamePresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDirectionalMinigamePresenter>();
	}
};
static_assert(alignof(UDirectionalMinigamePresenter) == 0x000008, "Wrong alignment on UDirectionalMinigamePresenter");
static_assert(sizeof(UDirectionalMinigamePresenter) == 0x000158, "Wrong size on UDirectionalMinigamePresenter");
static_assert(offsetof(UDirectionalMinigamePresenter, DirectionalMinigameWidgetClass) == 0x000128, "Member 'UDirectionalMinigamePresenter::DirectionalMinigameWidgetClass' has a wrong offset!");
static_assert(offsetof(UDirectionalMinigamePresenter, NumberItemMax) == 0x000130, "Member 'UDirectionalMinigamePresenter::NumberItemMax' has a wrong offset!");

// Class DBDUIPresenters.DisplayStandPresenter
// 0x0068 (0x0158 - 0x00F0)
class UDisplayStandPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                CoreDisplayStandWidgetClass;                       // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContext                                      ObservedContext;                                   // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DisplayStandName;                                  // 0x00FC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnchorData                            DragZoneLayoutData;                                // 0x0108(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DragZonePositionX;                                 // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragZonePositionY;                                 // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragZoneSizeX;                                     // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragZoneSizeY;                                     // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140[0x18];                                     // 0x0140(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDisplayStandRotation(float distance);

	bool IsContextEntered() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DisplayStandPresenter">();
	}
	static class UDisplayStandPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDisplayStandPresenter>();
	}
};
static_assert(alignof(UDisplayStandPresenter) == 0x000008, "Wrong alignment on UDisplayStandPresenter");
static_assert(sizeof(UDisplayStandPresenter) == 0x000158, "Wrong size on UDisplayStandPresenter");
static_assert(offsetof(UDisplayStandPresenter, CoreDisplayStandWidgetClass) == 0x0000F0, "Member 'UDisplayStandPresenter::CoreDisplayStandWidgetClass' has a wrong offset!");
static_assert(offsetof(UDisplayStandPresenter, ObservedContext) == 0x0000F8, "Member 'UDisplayStandPresenter::ObservedContext' has a wrong offset!");
static_assert(offsetof(UDisplayStandPresenter, DisplayStandName) == 0x0000FC, "Member 'UDisplayStandPresenter::DisplayStandName' has a wrong offset!");
static_assert(offsetof(UDisplayStandPresenter, DragZoneLayoutData) == 0x000108, "Member 'UDisplayStandPresenter::DragZoneLayoutData' has a wrong offset!");
static_assert(offsetof(UDisplayStandPresenter, DragZonePositionX) == 0x000130, "Member 'UDisplayStandPresenter::DragZonePositionX' has a wrong offset!");
static_assert(offsetof(UDisplayStandPresenter, DragZonePositionY) == 0x000134, "Member 'UDisplayStandPresenter::DragZonePositionY' has a wrong offset!");
static_assert(offsetof(UDisplayStandPresenter, DragZoneSizeX) == 0x000138, "Member 'UDisplayStandPresenter::DragZoneSizeX' has a wrong offset!");
static_assert(offsetof(UDisplayStandPresenter, DragZoneSizeY) == 0x00013C, "Member 'UDisplayStandPresenter::DragZoneSizeY' has a wrong offset!");

// Class DBDUIPresenters.EventEntryPopupPresenter
// 0x0000 (0x0180 - 0x0180)
class UEventEntryPopupPresenter final : public UGenericPopupPresenter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryPopupPresenter">();
	}
	static class UEventEntryPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryPopupPresenter>();
	}
};
static_assert(alignof(UEventEntryPopupPresenter) == 0x000008, "Wrong alignment on UEventEntryPopupPresenter");
static_assert(sizeof(UEventEntryPopupPresenter) == 0x000180, "Wrong size on UEventEntryPopupPresenter");

// Class DBDUIPresenters.ExamplePresenter
// 0x0040 (0x0168 - 0x0128)
class UExamplePresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                ExampleWidgetClass;                                // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x38];                                     // 0x0130(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnButtonClick();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExamplePresenter">();
	}
	static class UExamplePresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExamplePresenter>();
	}
};
static_assert(alignof(UExamplePresenter) == 0x000008, "Wrong alignment on UExamplePresenter");
static_assert(sizeof(UExamplePresenter) == 0x000168, "Wrong size on UExamplePresenter");
static_assert(offsetof(UExamplePresenter, ExampleWidgetClass) == 0x000128, "Member 'UExamplePresenter::ExampleWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.ExternalEffectsPresenter
// 0x0018 (0x0140 - 0x0128)
class UExternalEffectsPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                CoreExternalEffectsWidgetClass;                    // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHideExternalEffect(const class FName itemId, const EExternalEffectSource externalEffectSource);
	void OnShowExternalEffect(const struct FExternalEffectData& data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExternalEffectsPresenter">();
	}
	static class UExternalEffectsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExternalEffectsPresenter>();
	}
};
static_assert(alignof(UExternalEffectsPresenter) == 0x000008, "Wrong alignment on UExternalEffectsPresenter");
static_assert(sizeof(UExternalEffectsPresenter) == 0x000140, "Wrong size on UExternalEffectsPresenter");
static_assert(offsetof(UExternalEffectsPresenter, CoreExternalEffectsWidgetClass) == 0x000128, "Member 'UExternalEffectsPresenter::CoreExternalEffectsWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.FearMarketPopupPresenter
// 0x0000 (0x0180 - 0x0180)
class UFearMarketPopupPresenter final : public UGenericPopupPresenter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FearMarketPopupPresenter">();
	}
	static class UFearMarketPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFearMarketPopupPresenter>();
	}
};
static_assert(alignof(UFearMarketPopupPresenter) == 0x000008, "Wrong alignment on UFearMarketPopupPresenter");
static_assert(sizeof(UFearMarketPopupPresenter) == 0x000180, "Wrong size on UFearMarketPopupPresenter");

// Class DBDUIPresenters.FocusHandler
// 0x0018 (0x0048 - 0x0030)
class UFocusHandler final : public UUIComponent
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FocusHandler">();
	}
	static class UFocusHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFocusHandler>();
	}
};
static_assert(alignof(UFocusHandler) == 0x000008, "Wrong alignment on UFocusHandler");
static_assert(sizeof(UFocusHandler) == 0x000048, "Wrong size on UFocusHandler");

// Class DBDUIPresenters.GameManualSubPresenter
// 0x0010 (0x0048 - 0x0038)
class UGameManualSubPresenter final : public USubPresenter
{
public:
	TScriptInterface<class IGameManualViewInterface> _gameManualWidget;                              // 0x0038(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void OnCategoryCategoryEntered(EHelpType categoryType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameManualSubPresenter">();
	}
	static class UGameManualSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameManualSubPresenter>();
	}
};
static_assert(alignof(UGameManualSubPresenter) == 0x000008, "Wrong alignment on UGameManualSubPresenter");
static_assert(sizeof(UGameManualSubPresenter) == 0x000048, "Wrong size on UGameManualSubPresenter");
static_assert(offsetof(UGameManualSubPresenter, _gameManualWidget) == 0x000038, "Member 'UGameManualSubPresenter::_gameManualWidget' has a wrong offset!");

// Class DBDUIPresenters.GenericTextInputPopupPresenter
// 0x0060 (0x01E0 - 0x0180)
class UGenericTextInputPopupPresenter final : public UGenericPopupPresenter
{
public:
	uint8                                         Pad_180[0x60];                                     // 0x0180(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GenericTextInputPopupPresenter">();
	}
	static class UGenericTextInputPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGenericTextInputPopupPresenter>();
	}
};
static_assert(alignof(UGenericTextInputPopupPresenter) == 0x000008, "Wrong alignment on UGenericTextInputPopupPresenter");
static_assert(sizeof(UGenericTextInputPopupPresenter) == 0x0001E0, "Wrong size on UGenericTextInputPopupPresenter");

// Class DBDUIPresenters.HudEndGameScenarioPresenter
// 0x0040 (0x0168 - 0x0128)
class UHudEndGameScenarioPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                EndGameCollapseBarWidgetClass;                     // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x38];                                     // 0x0130(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudEndGameScenarioPresenter">();
	}
	static class UHudEndGameScenarioPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudEndGameScenarioPresenter>();
	}
};
static_assert(alignof(UHudEndGameScenarioPresenter) == 0x000008, "Wrong alignment on UHudEndGameScenarioPresenter");
static_assert(sizeof(UHudEndGameScenarioPresenter) == 0x000168, "Wrong size on UHudEndGameScenarioPresenter");
static_assert(offsetof(UHudEndGameScenarioPresenter, EndGameCollapseBarWidgetClass) == 0x000128, "Member 'UHudEndGameScenarioPresenter::EndGameCollapseBarWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.HudObjectivesPresenter
// 0x0070 (0x0198 - 0x0128)
class UHudObjectivesPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                CoreHudObjectivesWidgetClass;                      // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x68];                                     // 0x0130(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEventProgressBankedChanged(const int32 value);
	void OnEventProgressionDataInitialized(const struct FEventProgressionData& hudEventProgressionViewData);
	void OnEventProgressPendingChanged(const int32 value, const EVoidEnergyChangeReason reasonEnergyChanged);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudObjectivesPresenter">();
	}
	static class UHudObjectivesPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudObjectivesPresenter>();
	}
};
static_assert(alignof(UHudObjectivesPresenter) == 0x000008, "Wrong alignment on UHudObjectivesPresenter");
static_assert(sizeof(UHudObjectivesPresenter) == 0x000198, "Wrong size on UHudObjectivesPresenter");
static_assert(offsetof(UHudObjectivesPresenter, CoreHudObjectivesWidgetClass) == 0x000128, "Member 'UHudObjectivesPresenter::CoreHudObjectivesWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.HudPeekingPromptsPresenter
// 0x0030 (0x0158 - 0x0128)
class UHudPeekingPromptsPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                LeaningArrowsWidgetClass;                          // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x28];                                     // 0x0130(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleBestPlayerInteractionsChanged();
	void UpdatePeekingState(ELeanState potentialLeanState);

	bool CanPlayerLean() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudPeekingPromptsPresenter">();
	}
	static class UHudPeekingPromptsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudPeekingPromptsPresenter>();
	}
};
static_assert(alignof(UHudPeekingPromptsPresenter) == 0x000008, "Wrong alignment on UHudPeekingPromptsPresenter");
static_assert(sizeof(UHudPeekingPromptsPresenter) == 0x000158, "Wrong size on UHudPeekingPromptsPresenter");
static_assert(offsetof(UHudPeekingPromptsPresenter, LeaningArrowsWidgetClass) == 0x000128, "Member 'UHudPeekingPromptsPresenter::LeaningArrowsWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.HudSpectatePresenter
// 0x0028 (0x0150 - 0x0128)
class UHudSpectatePresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                CoreSpectateBarWidget;                             // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x20];                                     // 0x0130(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLeaveTriggered();
	void OnNextPlayerTriggered();
	void OnPlayerGameStateChanged(class ADBDPlayerState* dbdPlayerState, EGameState newGameState);
	void OnPreviousPlayerTriggered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudSpectatePresenter">();
	}
	static class UHudSpectatePresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudSpectatePresenter>();
	}
};
static_assert(alignof(UHudSpectatePresenter) == 0x000008, "Wrong alignment on UHudSpectatePresenter");
static_assert(sizeof(UHudSpectatePresenter) == 0x000150, "Wrong size on UHudSpectatePresenter");
static_assert(offsetof(UHudSpectatePresenter, CoreSpectateBarWidget) == 0x000128, "Member 'UHudSpectatePresenter::CoreSpectateBarWidget' has a wrong offset!");

// Class DBDUIPresenters.HudTutorialObjectivesPresenter
// 0x0070 (0x0198 - 0x0128)
class UHudTutorialObjectivesPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                TutorialObjectivesWidgetClass;                     // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x68];                                     // 0x0130(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsInTutorial() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudTutorialObjectivesPresenter">();
	}
	static class UHudTutorialObjectivesPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudTutorialObjectivesPresenter>();
	}
};
static_assert(alignof(UHudTutorialObjectivesPresenter) == 0x000008, "Wrong alignment on UHudTutorialObjectivesPresenter");
static_assert(sizeof(UHudTutorialObjectivesPresenter) == 0x000198, "Wrong size on UHudTutorialObjectivesPresenter");
static_assert(offsetof(UHudTutorialObjectivesPresenter, TutorialObjectivesWidgetClass) == 0x000128, "Member 'UHudTutorialObjectivesPresenter::TutorialObjectivesWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.LightSensitivityPresenter
// 0x0028 (0x0118 - 0x00F0)
class ULightSensitivityPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                LightSensitivityScreenWidgetClass;                 // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCompleteTime;                                  // 0x00F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FC[0x1C];                                      // 0x00FC(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCompletedFadeOut();
	void OnContinue();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LightSensitivityPresenter">();
	}
	static class ULightSensitivityPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightSensitivityPresenter>();
	}
};
static_assert(alignof(ULightSensitivityPresenter) == 0x000008, "Wrong alignment on ULightSensitivityPresenter");
static_assert(sizeof(ULightSensitivityPresenter) == 0x000118, "Wrong size on ULightSensitivityPresenter");
static_assert(offsetof(ULightSensitivityPresenter, LightSensitivityScreenWidgetClass) == 0x0000F0, "Member 'ULightSensitivityPresenter::LightSensitivityScreenWidgetClass' has a wrong offset!");
static_assert(offsetof(ULightSensitivityPresenter, AutoCompleteTime) == 0x0000F8, "Member 'ULightSensitivityPresenter::AutoCompleteTime' has a wrong offset!");

// Class DBDUIPresenters.LoadoutMenuPopupPresenter
// 0x0040 (0x01C0 - 0x0180)
class alignas(0x10) ULoadoutMenuPopupPresenter final : public UGenericPopupPresenter
{
public:
	uint8                                         Pad_180[0x10];                                     // 0x0180(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULoadoutMenuPopupViewData*>      _loadoutPopupSlotData;                             // 0x0190(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class ULoadoutMenuPopupViewData*>      _loadoutPopupInventoryData;                        // 0x01A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B0[0x10];                                     // 0x01B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLoadoutMenuInventorySlotClick(const ELoadoutSlot itemIndex, const class FName itemId);
	void OnLoadoutMenuPresetClicked(const int32 presetId, const ELoadoutSlot slotSelected);
	void OnLoadoutMenuPresetSelected(const int32 presetId, const ELoadoutSlot slotSelected);
	void OnLoadoutMenuSlotIsSelected(ELoadoutSlot slotSelected);
	void OnSelectedCharacterChanged(int32 selectedCharacterIndex);
	class ULoadoutMenuPopupViewData* SetLoadoutPopupViewData(const struct FInventorySlotData& slotData, const EPlayerRole playerRole);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadoutMenuPopupPresenter">();
	}
	static class ULoadoutMenuPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadoutMenuPopupPresenter>();
	}
};
static_assert(alignof(ULoadoutMenuPopupPresenter) == 0x000010, "Wrong alignment on ULoadoutMenuPopupPresenter");
static_assert(sizeof(ULoadoutMenuPopupPresenter) == 0x0001C0, "Wrong size on ULoadoutMenuPopupPresenter");
static_assert(offsetof(ULoadoutMenuPopupPresenter, _loadoutPopupSlotData) == 0x000190, "Member 'ULoadoutMenuPopupPresenter::_loadoutPopupSlotData' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupPresenter, _loadoutPopupInventoryData) == 0x0001A0, "Member 'ULoadoutMenuPopupPresenter::_loadoutPopupInventoryData' has a wrong offset!");

// Class DBDUIPresenters.OnboardingMenuPresenter
// 0x0038 (0x0128 - 0x00F0)
class UOnboardingMenuPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                OnboardingMenuWidgetClass;                         // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOnboardingTutorialSubPresenter*        _onboardingTutorialSubPresenter;                   // 0x00F8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGameManualSubPresenter*                _gameManualSubPresenter;                           // 0x0100(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USubPresenter*                          _activeSubPresenter;                               // 0x0108(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x18];                                     // 0x0110(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackAction();
	void OnChangeAccountAction();
	void OnFirstOnboardingStepsDone(bool isFirstStepsDone);
	void OnMenuTabSelected(EOnboardingMenuState menuState);
	void OnMenuTabSelectedAgain(EOnboardingMenuState menuState);
	void OnQuitGameAction();
	void OnSettingsAction();
	void OnSetUIEnabled(bool enabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnboardingMenuPresenter">();
	}
	static class UOnboardingMenuPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnboardingMenuPresenter>();
	}
};
static_assert(alignof(UOnboardingMenuPresenter) == 0x000008, "Wrong alignment on UOnboardingMenuPresenter");
static_assert(sizeof(UOnboardingMenuPresenter) == 0x000128, "Wrong size on UOnboardingMenuPresenter");
static_assert(offsetof(UOnboardingMenuPresenter, OnboardingMenuWidgetClass) == 0x0000F0, "Member 'UOnboardingMenuPresenter::OnboardingMenuWidgetClass' has a wrong offset!");
static_assert(offsetof(UOnboardingMenuPresenter, _onboardingTutorialSubPresenter) == 0x0000F8, "Member 'UOnboardingMenuPresenter::_onboardingTutorialSubPresenter' has a wrong offset!");
static_assert(offsetof(UOnboardingMenuPresenter, _gameManualSubPresenter) == 0x000100, "Member 'UOnboardingMenuPresenter::_gameManualSubPresenter' has a wrong offset!");
static_assert(offsetof(UOnboardingMenuPresenter, _activeSubPresenter) == 0x000108, "Member 'UOnboardingMenuPresenter::_activeSubPresenter' has a wrong offset!");

// Class DBDUIPresenters.OnboardingTutorialSubPresenter
// 0x0060 (0x0098 - 0x0038)
class UOnboardingTutorialSubPresenter final : public USubPresenter
{
public:
	TScriptInterface<class IOnboardingTutorialViewInterface> _onboardingTutorialWidget;              // 0x0038(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x50];                                      // 0x0048(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSelectTutorial(const class FString& stepId, const class FString& tutorialId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnboardingTutorialSubPresenter">();
	}
	static class UOnboardingTutorialSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnboardingTutorialSubPresenter>();
	}
};
static_assert(alignof(UOnboardingTutorialSubPresenter) == 0x000008, "Wrong alignment on UOnboardingTutorialSubPresenter");
static_assert(sizeof(UOnboardingTutorialSubPresenter) == 0x000098, "Wrong size on UOnboardingTutorialSubPresenter");
static_assert(offsetof(UOnboardingTutorialSubPresenter, _onboardingTutorialWidget) == 0x000038, "Member 'UOnboardingTutorialSubPresenter::_onboardingTutorialWidget' has a wrong offset!");

// Class DBDUIPresenters.PawnObserver
// 0x0040 (0x0070 - 0x0030)
class UPawnObserver final : public UUIComponent
{
public:
	uint8                                         Pad_30[0x40];                                      // 0x0030(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLocallyObservedChanged();
	void OnPawnControllerSet(class APawn* pawn, class AController* oldController, class AController* newController);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PawnObserver">();
	}
	static class UPawnObserver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPawnObserver>();
	}
};
static_assert(alignof(UPawnObserver) == 0x000008, "Wrong alignment on UPawnObserver");
static_assert(sizeof(UPawnObserver) == 0x000070, "Wrong size on UPawnObserver");

// Class DBDUIPresenters.PingStatusPresenter
// 0x0038 (0x0160 - 0x0128)
class UPingStatusPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                PingStatusWidgetClass;                             // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x30];                                     // 0x0130(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PingStatusPresenter">();
	}
	static class UPingStatusPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPingStatusPresenter>();
	}
};
static_assert(alignof(UPingStatusPresenter) == 0x000008, "Wrong alignment on UPingStatusPresenter");
static_assert(sizeof(UPingStatusPresenter) == 0x000160, "Wrong size on UPingStatusPresenter");
static_assert(offsetof(UPingStatusPresenter, PingStatusWidgetClass) == 0x000128, "Member 'UPingStatusPresenter::PingStatusWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.PlayerProfilePresenter
// 0x0020 (0x0110 - 0x00F0)
class UPlayerProfilePresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                CorePlayerProfileWidgetClass;                      // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Filter;                                            // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FC[0x14];                                      // 0x00FC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FText GetPlayerName();
	void OnCurrentSpecialEventChanged(const struct FCombinedSpecialEventData& previousSpecialEvent, ESpecialEventStatus previousSpecialEventStatus, const struct FCombinedSpecialEventData& currentSpecialEvent, ESpecialEventStatus currentSpecialEventStatus);
	void OnHideImageViewer();
	void OnShowImageViewer(bool voiceOverIsPlaying);
	void OnWalletUpdated(const TArray<struct FShopWalletUpdate>& walletUpdates);
	void RefreshWallet();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerProfilePresenter">();
	}
	static class UPlayerProfilePresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerProfilePresenter>();
	}
};
static_assert(alignof(UPlayerProfilePresenter) == 0x000008, "Wrong alignment on UPlayerProfilePresenter");
static_assert(sizeof(UPlayerProfilePresenter) == 0x000110, "Wrong size on UPlayerProfilePresenter");
static_assert(offsetof(UPlayerProfilePresenter, CorePlayerProfileWidgetClass) == 0x0000F0, "Member 'UPlayerProfilePresenter::CorePlayerProfileWidgetClass' has a wrong offset!");
static_assert(offsetof(UPlayerProfilePresenter, Filter) == 0x0000F8, "Member 'UPlayerProfilePresenter::Filter' has a wrong offset!");

// Class DBDUIPresenters.PresenterContainer
// 0x0008 (0x02A0 - 0x0298)
class UPresenterContainer final : public UUserWidget
{
public:
	class UGridPanel*                             Container;                                         // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresenterContainer">();
	}
	static class UPresenterContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPresenterContainer>();
	}
};
static_assert(alignof(UPresenterContainer) == 0x000008, "Wrong alignment on UPresenterContainer");
static_assert(sizeof(UPresenterContainer) == 0x0002A0, "Wrong size on UPresenterContainer");
static_assert(offsetof(UPresenterContainer, Container) == 0x000298, "Member 'UPresenterContainer::Container' has a wrong offset!");

// Class DBDUIPresenters.PresenterGroup
// 0x0028 (0x0058 - 0x0030)
class UPresenterGroup final : public UUIComponent
{
public:
	EPresenterPhase                               WidgetInstantiationPhase;                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUIComponent*>                   _components;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UPresenter*>                     _presenters;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresenterGroup">();
	}
	static class UPresenterGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPresenterGroup>();
	}
};
static_assert(alignof(UPresenterGroup) == 0x000008, "Wrong alignment on UPresenterGroup");
static_assert(sizeof(UPresenterGroup) == 0x000058, "Wrong size on UPresenterGroup");
static_assert(offsetof(UPresenterGroup, WidgetInstantiationPhase) == 0x000030, "Member 'UPresenterGroup::WidgetInstantiationPhase' has a wrong offset!");
static_assert(offsetof(UPresenterGroup, _components) == 0x000038, "Member 'UPresenterGroup::_components' has a wrong offset!");
static_assert(offsetof(UPresenterGroup, _presenters) == 0x000048, "Member 'UPresenterGroup::_presenters' has a wrong offset!");

// Class DBDUIPresenters.PresenterManager
// 0x0030 (0x0068 - 0x0038)
class UPresenterManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPresenterGroup*>                _persistentPresenterGroups;                        // 0x0040(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UPresenterGroup*>                _transientPresenterGroups;                         // 0x0050(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLoadingTransition(const ELoadingTransitionType transitionType);
	void OnViewportCreated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresenterManager">();
	}
	static class UPresenterManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPresenterManager>();
	}
};
static_assert(alignof(UPresenterManager) == 0x000008, "Wrong alignment on UPresenterManager");
static_assert(sizeof(UPresenterManager) == 0x000068, "Wrong size on UPresenterManager");
static_assert(offsetof(UPresenterManager, _persistentPresenterGroups) == 0x000040, "Member 'UPresenterManager::_persistentPresenterGroups' has a wrong offset!");
static_assert(offsetof(UPresenterManager, _transientPresenterGroups) == 0x000050, "Member 'UPresenterManager::_transientPresenterGroups' has a wrong offset!");

// Class DBDUIPresenters.PresenterRequirementFunction
// 0x0020 (0x0050 - 0x0030)
class UPresenterRequirementFunction final : public UObject
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresenterRequirementFunction">();
	}
	static class UPresenterRequirementFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPresenterRequirementFunction>();
	}
};
static_assert(alignof(UPresenterRequirementFunction) == 0x000008, "Wrong alignment on UPresenterRequirementFunction");
static_assert(sizeof(UPresenterRequirementFunction) == 0x000050, "Wrong size on UPresenterRequirementFunction");

// Class DBDUIPresenters.RootContainer
// 0x0070 (0x00A0 - 0x0030)
class URootContainer final : public UUIComponent
{
public:
	EGameLayer                                    GameLayer;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnfocusedOpacity;                                  // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TSubclassOf<class UPresenterContainer>, class UPresenterContainer*> _presenterContainers;   // 0x0048(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UUserWidget*                            _rootWidget;                                       // 0x0098(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RootContainer">();
	}
	static class URootContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<URootContainer>();
	}
};
static_assert(alignof(URootContainer) == 0x000008, "Wrong alignment on URootContainer");
static_assert(sizeof(URootContainer) == 0x0000A0, "Wrong size on URootContainer");
static_assert(offsetof(URootContainer, GameLayer) == 0x000030, "Member 'URootContainer::GameLayer' has a wrong offset!");
static_assert(offsetof(URootContainer, UnfocusedOpacity) == 0x000034, "Member 'URootContainer::UnfocusedOpacity' has a wrong offset!");
static_assert(offsetof(URootContainer, _presenterContainers) == 0x000048, "Member 'URootContainer::_presenterContainers' has a wrong offset!");
static_assert(offsetof(URootContainer, _rootWidget) == 0x000098, "Member 'URootContainer::_rootWidget' has a wrong offset!");

// Class DBDUIPresenters.RootWidget
// 0x0008 (0x02A0 - 0x0298)
class URootWidget final : public UUserWidget
{
public:
	class UCanvasPanel*                           _canvasPanel;                                      // 0x0298(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RootWidget">();
	}
	static class URootWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URootWidget>();
	}
};
static_assert(alignof(URootWidget) == 0x000008, "Wrong alignment on URootWidget");
static_assert(sizeof(URootWidget) == 0x0002A0, "Wrong size on URootWidget");
static_assert(offsetof(URootWidget, _canvasPanel) == 0x000298, "Member 'URootWidget::_canvasPanel' has a wrong offset!");

// Class DBDUIPresenters.SkillCheckPresenter
// 0x0030 (0x0158 - 0x0128)
class USkillCheckPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                SkillCheckWidgetClass;                             // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x28];                                     // 0x0130(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkillCheckPresenter">();
	}
	static class USkillCheckPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillCheckPresenter>();
	}
};
static_assert(alignof(USkillCheckPresenter) == 0x000008, "Wrong alignment on USkillCheckPresenter");
static_assert(sizeof(USkillCheckPresenter) == 0x000158, "Wrong size on USkillCheckPresenter");
static_assert(offsetof(USkillCheckPresenter, SkillCheckWidgetClass) == 0x000128, "Member 'USkillCheckPresenter::SkillCheckWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.SubtitlesPresenter
// 0x0058 (0x0148 - 0x00F0)
class USubtitlesPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                SubtitlesWidgetClass;                              // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfCharactersPerLine;                         // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationPerLine;                                   // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepSingleCharacter;                               // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSubtitlesEntry>                _entryQueue;                                       // 0x0108(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           _timerHandle;                                      // 0x0118(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UNavigationScreen>       _navigationScreen;                                 // 0x0120(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_128[0x20];                                     // 0x0128(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEntryTimedOut();

	bool IsSubtitlesEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubtitlesPresenter">();
	}
	static class USubtitlesPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubtitlesPresenter>();
	}
};
static_assert(alignof(USubtitlesPresenter) == 0x000008, "Wrong alignment on USubtitlesPresenter");
static_assert(sizeof(USubtitlesPresenter) == 0x000148, "Wrong size on USubtitlesPresenter");
static_assert(offsetof(USubtitlesPresenter, SubtitlesWidgetClass) == 0x0000F0, "Member 'USubtitlesPresenter::SubtitlesWidgetClass' has a wrong offset!");
static_assert(offsetof(USubtitlesPresenter, NumberOfCharactersPerLine) == 0x0000F8, "Member 'USubtitlesPresenter::NumberOfCharactersPerLine' has a wrong offset!");
static_assert(offsetof(USubtitlesPresenter, DurationPerLine) == 0x0000FC, "Member 'USubtitlesPresenter::DurationPerLine' has a wrong offset!");
static_assert(offsetof(USubtitlesPresenter, KeepSingleCharacter) == 0x000100, "Member 'USubtitlesPresenter::KeepSingleCharacter' has a wrong offset!");
static_assert(offsetof(USubtitlesPresenter, _entryQueue) == 0x000108, "Member 'USubtitlesPresenter::_entryQueue' has a wrong offset!");
static_assert(offsetof(USubtitlesPresenter, _timerHandle) == 0x000118, "Member 'USubtitlesPresenter::_timerHandle' has a wrong offset!");
static_assert(offsetof(USubtitlesPresenter, _navigationScreen) == 0x000120, "Member 'USubtitlesPresenter::_navigationScreen' has a wrong offset!");

// Class DBDUIPresenters.TemplatePresenter
// 0x0020 (0x0148 - 0x0128)
class UTemplatePresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                TemplateWidgetClass;                               // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x18];                                     // 0x0130(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TemplatePresenter">();
	}
	static class UTemplatePresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTemplatePresenter>();
	}
};
static_assert(alignof(UTemplatePresenter) == 0x000008, "Wrong alignment on UTemplatePresenter");
static_assert(sizeof(UTemplatePresenter) == 0x000148, "Wrong size on UTemplatePresenter");
static_assert(offsetof(UTemplatePresenter, TemplateWidgetClass) == 0x000128, "Member 'UTemplatePresenter::TemplateWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.TestBuildFlagPresenter
// 0x0020 (0x0110 - 0x00F0)
class UTestBuildFlagPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                TestBuildFlagWidgetClass;                          // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETestBuildFlagPosition                        testBuildFlagPosition;                             // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F9[0x17];                                      // 0x00F9(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestBuildFlagPresenter">();
	}
	static class UTestBuildFlagPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestBuildFlagPresenter>();
	}
};
static_assert(alignof(UTestBuildFlagPresenter) == 0x000008, "Wrong alignment on UTestBuildFlagPresenter");
static_assert(sizeof(UTestBuildFlagPresenter) == 0x000110, "Wrong size on UTestBuildFlagPresenter");
static_assert(offsetof(UTestBuildFlagPresenter, TestBuildFlagWidgetClass) == 0x0000F0, "Member 'UTestBuildFlagPresenter::TestBuildFlagWidgetClass' has a wrong offset!");
static_assert(offsetof(UTestBuildFlagPresenter, testBuildFlagPosition) == 0x0000F8, "Member 'UTestBuildFlagPresenter::testBuildFlagPosition' has a wrong offset!");

// Class DBDUIPresenters.TestPresenter
// 0x0010 (0x0100 - 0x00F0)
class UTestPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                TestWidgetClass;                                   // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestPresenter">();
	}
	static class UTestPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestPresenter>();
	}
};
static_assert(alignof(UTestPresenter) == 0x000008, "Wrong alignment on UTestPresenter");
static_assert(sizeof(UTestPresenter) == 0x000100, "Wrong size on UTestPresenter");
static_assert(offsetof(UTestPresenter, TestWidgetClass) == 0x0000F0, "Member 'UTestPresenter::TestWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.HudTutorialBlockingNotificationsPresenter
// 0x00E8 (0x0210 - 0x0128)
class UHudTutorialBlockingNotificationsPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                CoreTutorialBlockingNotificationsWidget;           // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x8];                                      // 0x0130(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ATutorialsUtilities*                    _tutorialsUtilities;                               // 0x0138(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_140[0xD0];                                     // 0x0140(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTutorialHudFadeInTriggered();
	void OnTutorialHudFadeOutTriggered();
	void OnTutorialNotificationClosedByUserInput();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudTutorialBlockingNotificationsPresenter">();
	}
	static class UHudTutorialBlockingNotificationsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudTutorialBlockingNotificationsPresenter>();
	}
};
static_assert(alignof(UHudTutorialBlockingNotificationsPresenter) == 0x000008, "Wrong alignment on UHudTutorialBlockingNotificationsPresenter");
static_assert(sizeof(UHudTutorialBlockingNotificationsPresenter) == 0x000210, "Wrong size on UHudTutorialBlockingNotificationsPresenter");
static_assert(offsetof(UHudTutorialBlockingNotificationsPresenter, CoreTutorialBlockingNotificationsWidget) == 0x000128, "Member 'UHudTutorialBlockingNotificationsPresenter::CoreTutorialBlockingNotificationsWidget' has a wrong offset!");
static_assert(offsetof(UHudTutorialBlockingNotificationsPresenter, _tutorialsUtilities) == 0x000138, "Member 'UHudTutorialBlockingNotificationsPresenter::_tutorialsUtilities' has a wrong offset!");

// Class DBDUIPresenters.HudTutorialMysteryNotesPresenter
// 0x0018 (0x0140 - 0x0128)
class UHudTutorialMysteryNotesPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                CoreTutorialMysteryNoteWidget;                     // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudTutorialMysteryNotesPresenter">();
	}
	static class UHudTutorialMysteryNotesPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudTutorialMysteryNotesPresenter>();
	}
};
static_assert(alignof(UHudTutorialMysteryNotesPresenter) == 0x000008, "Wrong alignment on UHudTutorialMysteryNotesPresenter");
static_assert(sizeof(UHudTutorialMysteryNotesPresenter) == 0x000140, "Wrong size on UHudTutorialMysteryNotesPresenter");
static_assert(offsetof(UHudTutorialMysteryNotesPresenter, CoreTutorialMysteryNoteWidget) == 0x000128, "Member 'UHudTutorialMysteryNotesPresenter::CoreTutorialMysteryNoteWidget' has a wrong offset!");

// Class DBDUIPresenters.UIConsoleCommands
// 0x0020 (0x0050 - 0x0030)
class UUIConsoleCommands final : public UObject
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DBD_ResetPresenters();
	void DBD_SetAllHUDWidgetsVisible(bool isVisible);
	void DBD_SetApplicationScale(float applicationScale);
	void DBD_SetHudScaleFactor(float scaleFactor);
	void DBD_SetHudVisible(bool isVisible);
	void DBD_SetHUDWidgetVisible(int32 index, bool isVisible);
	void DBD_SetMenuScaleFactor(float scaleFactor);
	void DBD_SetUMGVisible(bool isVisible);
	void DBD_ShowHUDWidgetsInfo(bool show);
	void DBD_ShowPresenterDebugInfo(int32 presenterDebugMode);
	void DBD_ToggleDPICurve();
	void DBD_ToggleTestWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIConsoleCommands">();
	}
	static class UUIConsoleCommands* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIConsoleCommands>();
	}
};
static_assert(alignof(UUIConsoleCommands) == 0x000008, "Wrong alignment on UUIConsoleCommands");
static_assert(sizeof(UUIConsoleCommands) == 0x000050, "Wrong size on UUIConsoleCommands");

// Class DBDUIPresenters.UnlockPersonalPerksPopupPresenter
// 0x0010 (0x0190 - 0x0180)
class alignas(0x10) UUnlockPersonalPerksPopupPresenter final : public UGenericPopupPresenter
{
public:
	TArray<class UMenuPerkViewData*>              _perksData;                                        // 0x0180(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnlockPersonalPerksPopupPresenter">();
	}
	static class UUnlockPersonalPerksPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnlockPersonalPerksPopupPresenter>();
	}
};
static_assert(alignof(UUnlockPersonalPerksPopupPresenter) == 0x000010, "Wrong alignment on UUnlockPersonalPerksPopupPresenter");
static_assert(sizeof(UUnlockPersonalPerksPopupPresenter) == 0x000190, "Wrong size on UUnlockPersonalPerksPopupPresenter");
static_assert(offsetof(UUnlockPersonalPerksPopupPresenter, _perksData) == 0x000180, "Member 'UUnlockPersonalPerksPopupPresenter::_perksData' has a wrong offset!");

// Class DBDUIPresenters.WatermarkPresenter
// 0x0018 (0x0108 - 0x00F0)
class UWatermarkPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                WatermarkWidgetClass;                              // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsNonShippingBuild();
	bool IsSteamBuild();
	bool IsUsingCommandLineArgument();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WatermarkPresenter">();
	}
	static class UWatermarkPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWatermarkPresenter>();
	}
};
static_assert(alignof(UWatermarkPresenter) == 0x000008, "Wrong alignment on UWatermarkPresenter");
static_assert(sizeof(UWatermarkPresenter) == 0x000108, "Wrong size on UWatermarkPresenter");
static_assert(offsetof(UWatermarkPresenter, WatermarkWidgetClass) == 0x0000F0, "Member 'UWatermarkPresenter::WatermarkWidgetClass' has a wrong offset!");

}

