#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_UETools

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPFL_UETools.BPFL_UETools_C
// 0x0000 (0x0030 - 0x0030)
class UBPFL_UETools_C final : public UBlueprintFunctionLibrary
{
public:
	static void Create_CheatManager(class UClass* Cheat_Manager_Class, class UObject* __WorldContext, class FText* Client_Message, class UCheatManager** Cheat_Manager_Reference);
	static void Create_Console(class UClass* Console_Class, class UObject* __WorldContext, class FText* Client_Message, class UObject** Console_Reference);
	static class UObject* Spawn_Object(TSubclassOf<class UObject> Object_Class, class UObject* Outer_0, class UObject* __WorldContext);
	static void Get_Console(class UObject* __WorldContext, class UObject** Console_Reference);
	static void Get_CheatManager(class APlayerController* Player_Controller, class UObject* __WorldContext, class UCheatManager** Cheat_Manager_Reference);
	static void Get_CheatManagerClass(class APlayerController* Player_Controller, class UObject* __WorldContext, class UClass** Cheat_Manager_Class);
	static void Set_CheatManager(class APlayerController* Player_Controller, class UCheatManager* Cheat_Manager_Reference, class UObject* __WorldContext, class FText* Client_Message);
	static void Get_CheatFlying(class UCharacterMovementComponent* Character_Movement_Component, class UObject* __WorldContext, bool* Boolean);
	static void Get_GravityScale(class UObject* __WorldContext, float* Gravity_Scale);
	static void Set_CheatFlying(class UCharacterMovementComponent* Character_Movement_Component, bool Boolean, class UObject* __WorldContext, class FText* Client_Message);
	static void ChangeSize(float New_Size, bool Don_t_Modify_Capsule_Size, class UObject* __WorldContext, class FText* Client_Message);
	static void Walk(class UObject* __WorldContext, class FText* Client_Message);
	static void Fly(class UObject* __WorldContext, class FText* Client_Message);
	static void Ghost(class UObject* __WorldContext, class FText* Client_Message);
	static void God(class UObject* __WorldContext, class FText* Client_Message);
	static void Slomo(float New_Time_Dilation, class UObject* __WorldContext, class FText* Client_Message);
	static void Set_CheatManagerClass(class APlayerController* Player_Controller, class UClass* Cheat_Manager_Class, class UObject* __WorldContext, class FText* Client_Message);
	static void Get_HiddenActors(class APlayerController* Player_Controller, class UObject* __WorldContext, TArray<class AActor*>* Hidden_Actors);
	static void Set_HiddenActors(class APlayerController* Player_Controller, TArray<class AActor*>& New_Hidden_Actors, class UObject* __WorldContext);
	static void Set_Console(class UObject* Console_Reference, class UObject* __WorldContext, class FText* Client_Message);
	static void Add_UniqueConsoleMapping(const struct FKey& Key, class UObject* __WorldContext);
	static void Add_ConsoleMapping(const struct FKey& Key, class UObject* __WorldContext);
	static void Set_GravityScale(float New_Gravity_Scale, class UObject* __WorldContext, class FText* Client_Message);
	static void Add_HiddenActor(class APlayerController* Player_Controller, class AActor* Actor_Reference, class UObject* __WorldContext, int32* New_Entry_Index);
	static void Rem_HiddenActor(class APlayerController* Player_Controller, class AActor* Actor_Reference, class UObject* __WorldContext, bool* Was_Removed_);
	static void ClientMessage(class APlayerController* Player_Controller_Reference, const class FText& Client_Message, class FName Message_Type, float Message_LifeTime, class UObject* __WorldContext);
	static void SwitchController(class UPlayer* Player_Reference, class APlayerController* New_Player_Controller_Reference, class UObject* __WorldContext);
	static void Get_LocalPlayer(class APlayerController* Player_Controller_Reference, class UObject* __WorldContext, class ULocalPlayer** Local_Player_Reference);
	static void Get_Engine(class UObject* __WorldContext, class UEngine** Engine_Reference);
	static void Get_World(class UObject* __WorldContext, class UWorld** World_Reference);
	static void Get_SystemObjectPath(const class UObject* Object, class UObject* __WorldContext, class FString* Path);
	static void Remove_ConsoleMapping(const struct FKey& Key, class UObject* __WorldContext);

	void Get_DateTime(class UObject* __WorldContext, class FString* Year, class FString* Month, class FString* Day, class FString* Hour, class FString* Minute, class FString* Second, class FString* Millisecond);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPFL_UETools_C">();
	}
	static class UBPFL_UETools_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPFL_UETools_C>();
	}
};
static_assert(alignof(UBPFL_UETools_C) == 0x000008, "Wrong alignment on UBPFL_UETools_C");
static_assert(sizeof(UBPFL_UETools_C) == 0x000030, "Wrong size on UBPFL_UETools_C");

}

