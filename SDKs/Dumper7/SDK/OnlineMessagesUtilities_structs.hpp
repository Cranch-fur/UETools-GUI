#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OnlineMessagesUtilities

#include "Basic.hpp"


namespace SDK
{

// Enum OnlineMessagesUtilities.EClaimableInboxMessageState
// NumValues: 0x0003
enum class EClaimableInboxMessageState : uint8
{
	NONE                                     = 0,
	CLAIMED                                  = 1,
	EClaimableInboxMessageState_MAX          = 2,
};

// Enum OnlineMessagesUtilities.EClaimableInboxMessageType
// NumValues: 0x0004
enum class EClaimableInboxMessageType : uint8
{
	None                                     = 0,
	Currency                                 = 1,
	Inventory                                = 2,
	EClaimableInboxMessageType_MAX           = 3,
};

// Enum OnlineMessagesUtilities.EOnlineMessageFlag
// NumValues: 0x0004
enum class EOnlineMessageFlag : uint8
{
	New                                      = 0,
	Read                                     = 1,
	Archived                                 = 2,
	EOnlineMessageFlag_MAX                   = 3,
};

// ScriptStruct OnlineMessagesUtilities.ClaimableInboxMessageData
// 0x0018 (0x0018 - 0x0000)
struct FClaimableInboxMessageData final
{
public:
	EClaimableInboxMessageType                    Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Id;                                                // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClaimableInboxMessageData) == 0x000008, "Wrong alignment on FClaimableInboxMessageData");
static_assert(sizeof(FClaimableInboxMessageData) == 0x000018, "Wrong size on FClaimableInboxMessageData");
static_assert(offsetof(FClaimableInboxMessageData, Type) == 0x000000, "Member 'FClaimableInboxMessageData::Type' has a wrong offset!");
static_assert(offsetof(FClaimableInboxMessageData, Amount) == 0x000004, "Member 'FClaimableInboxMessageData::Amount' has a wrong offset!");
static_assert(offsetof(FClaimableInboxMessageData, Id) == 0x000008, "Member 'FClaimableInboxMessageData::Id' has a wrong offset!");

// ScriptStruct OnlineMessagesUtilities.ClaimableInboxMessage
// 0x0018 (0x0018 - 0x0000)
struct FClaimableInboxMessage final
{
public:
	TArray<struct FClaimableInboxMessageData>     Data;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EClaimableInboxMessageState                   State;                                             // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClaimableInboxMessage) == 0x000008, "Wrong alignment on FClaimableInboxMessage");
static_assert(sizeof(FClaimableInboxMessage) == 0x000018, "Wrong size on FClaimableInboxMessage");
static_assert(offsetof(FClaimableInboxMessage, Data) == 0x000000, "Member 'FClaimableInboxMessage::Data' has a wrong offset!");
static_assert(offsetof(FClaimableInboxMessage, State) == 0x000010, "Member 'FClaimableInboxMessage::State' has a wrong offset!");

// ScriptStruct OnlineMessagesUtilities.InboxMessageData
// 0x0070 (0x0070 - 0x0000)
struct FInboxMessageData final
{
public:
	int64                                         Id;                                                // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Origin;                                            // 0x0008(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecipientId;                                       // 0x0018(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReceivedTimestamp;                                 // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Subject;                                           // 0x0030(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Body;                                              // 0x0040(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FClaimableInboxMessageData>     Claimable;                                         // 0x0050(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          AreRewardsClaimed;                                 // 0x0060(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRead;                                            // 0x0061(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ExpireTimestamp;                                   // 0x0068(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInboxMessageData) == 0x000008, "Wrong alignment on FInboxMessageData");
static_assert(sizeof(FInboxMessageData) == 0x000070, "Wrong size on FInboxMessageData");
static_assert(offsetof(FInboxMessageData, Id) == 0x000000, "Member 'FInboxMessageData::Id' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, Origin) == 0x000008, "Member 'FInboxMessageData::Origin' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, RecipientId) == 0x000018, "Member 'FInboxMessageData::RecipientId' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, ReceivedTimestamp) == 0x000028, "Member 'FInboxMessageData::ReceivedTimestamp' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, Subject) == 0x000030, "Member 'FInboxMessageData::Subject' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, Body) == 0x000040, "Member 'FInboxMessageData::Body' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, Claimable) == 0x000050, "Member 'FInboxMessageData::Claimable' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, AreRewardsClaimed) == 0x000060, "Member 'FInboxMessageData::AreRewardsClaimed' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, IsRead) == 0x000061, "Member 'FInboxMessageData::IsRead' has a wrong offset!");
static_assert(offsetof(FInboxMessageData, ExpireTimestamp) == 0x000068, "Member 'FInboxMessageData::ExpireTimestamp' has a wrong offset!");

}

