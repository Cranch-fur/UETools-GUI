#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK26

#include "Basic.hpp"

#include "TheK26_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function TheK26.HinderOnCrowAttachStatusEffect.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct HinderOnCrowAttachStatusEffect_OnKillerSet final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HinderOnCrowAttachStatusEffect_OnKillerSet) == 0x000008, "Wrong alignment on HinderOnCrowAttachStatusEffect_OnKillerSet");
static_assert(sizeof(HinderOnCrowAttachStatusEffect_OnKillerSet) == 0x000008, "Wrong size on HinderOnCrowAttachStatusEffect_OnKillerSet");
static_assert(offsetof(HinderOnCrowAttachStatusEffect_OnKillerSet, killer) == 0x000000, "Member 'HinderOnCrowAttachStatusEffect_OnKillerSet::killer' has a wrong offset!");

// Function TheK26.K26AbilitySubAnimInstance.OnHasProjectileBeenSummoned
// 0x0008 (0x0008 - 0x0000)
struct K26AbilitySubAnimInstance_OnHasProjectileBeenSummoned final
{
public:
	int32                                         remainingAmmo;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxAmmo;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AbilitySubAnimInstance_OnHasProjectileBeenSummoned) == 0x000004, "Wrong alignment on K26AbilitySubAnimInstance_OnHasProjectileBeenSummoned");
static_assert(sizeof(K26AbilitySubAnimInstance_OnHasProjectileBeenSummoned) == 0x000008, "Wrong size on K26AbilitySubAnimInstance_OnHasProjectileBeenSummoned");
static_assert(offsetof(K26AbilitySubAnimInstance_OnHasProjectileBeenSummoned, remainingAmmo) == 0x000000, "Member 'K26AbilitySubAnimInstance_OnHasProjectileBeenSummoned::remainingAmmo' has a wrong offset!");
static_assert(offsetof(K26AbilitySubAnimInstance_OnHasProjectileBeenSummoned, maxAmmo) == 0x000004, "Member 'K26AbilitySubAnimInstance_OnHasProjectileBeenSummoned::maxAmmo' has a wrong offset!");

// Function TheK26.K26AmmoHandlerComponent.Authority_InitializePoolComponent
// 0x0004 (0x0004 - 0x0000)
struct K26AmmoHandlerComponent_Authority_InitializePoolComponent final
{
public:
	int32                                         maxAmmo;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AmmoHandlerComponent_Authority_InitializePoolComponent) == 0x000004, "Wrong alignment on K26AmmoHandlerComponent_Authority_InitializePoolComponent");
static_assert(sizeof(K26AmmoHandlerComponent_Authority_InitializePoolComponent) == 0x000004, "Wrong size on K26AmmoHandlerComponent_Authority_InitializePoolComponent");
static_assert(offsetof(K26AmmoHandlerComponent_Authority_InitializePoolComponent, maxAmmo) == 0x000000, "Member 'K26AmmoHandlerComponent_Authority_InitializePoolComponent::maxAmmo' has a wrong offset!");

// Function TheK26.K26AmmoHandlerComponent.Authority_OnAmmoInit
// 0x0008 (0x0008 - 0x0000)
struct K26AmmoHandlerComponent_Authority_OnAmmoInit final
{
public:
	class AActor*                                 initAmmo;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AmmoHandlerComponent_Authority_OnAmmoInit) == 0x000008, "Wrong alignment on K26AmmoHandlerComponent_Authority_OnAmmoInit");
static_assert(sizeof(K26AmmoHandlerComponent_Authority_OnAmmoInit) == 0x000008, "Wrong size on K26AmmoHandlerComponent_Authority_OnAmmoInit");
static_assert(offsetof(K26AmmoHandlerComponent_Authority_OnAmmoInit, initAmmo) == 0x000000, "Member 'K26AmmoHandlerComponent_Authority_OnAmmoInit::initAmmo' has a wrong offset!");

// Function TheK26.K26AmmoHandlerComponent.CallOnMaxAmmoSet
// 0x0014 (0x0014 - 0x0000)
struct K26AmmoHandlerComponent_CallOnMaxAmmoSet final
{
public:
	TDelegate<void(const int32 maxAmmo)>          callback;                                          // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AmmoHandlerComponent_CallOnMaxAmmoSet) == 0x000004, "Wrong alignment on K26AmmoHandlerComponent_CallOnMaxAmmoSet");
static_assert(sizeof(K26AmmoHandlerComponent_CallOnMaxAmmoSet) == 0x000014, "Wrong size on K26AmmoHandlerComponent_CallOnMaxAmmoSet");
static_assert(offsetof(K26AmmoHandlerComponent_CallOnMaxAmmoSet, callback) == 0x000000, "Member 'K26AmmoHandlerComponent_CallOnMaxAmmoSet::callback' has a wrong offset!");

// Function TheK26.K26AmmoHandlerComponent.Multicast_OnCurrentAmmoStateChanged
// 0x000C (0x000C - 0x0000)
struct K26AmmoHandlerComponent_Multicast_OnCurrentAmmoStateChanged final
{
public:
	EK26AmmoState                                 newState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         currentAmmo;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxAmmo;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AmmoHandlerComponent_Multicast_OnCurrentAmmoStateChanged) == 0x000004, "Wrong alignment on K26AmmoHandlerComponent_Multicast_OnCurrentAmmoStateChanged");
static_assert(sizeof(K26AmmoHandlerComponent_Multicast_OnCurrentAmmoStateChanged) == 0x00000C, "Wrong size on K26AmmoHandlerComponent_Multicast_OnCurrentAmmoStateChanged");
static_assert(offsetof(K26AmmoHandlerComponent_Multicast_OnCurrentAmmoStateChanged, newState) == 0x000000, "Member 'K26AmmoHandlerComponent_Multicast_OnCurrentAmmoStateChanged::newState' has a wrong offset!");
static_assert(offsetof(K26AmmoHandlerComponent_Multicast_OnCurrentAmmoStateChanged, currentAmmo) == 0x000004, "Member 'K26AmmoHandlerComponent_Multicast_OnCurrentAmmoStateChanged::currentAmmo' has a wrong offset!");
static_assert(offsetof(K26AmmoHandlerComponent_Multicast_OnCurrentAmmoStateChanged, maxAmmo) == 0x000008, "Member 'K26AmmoHandlerComponent_Multicast_OnCurrentAmmoStateChanged::maxAmmo' has a wrong offset!");

// Function TheK26.K26AmmoHandlerComponent.Multicast_StartRecharging
// 0x0001 (0x0001 - 0x0000)
struct K26AmmoHandlerComponent_Multicast_StartRecharging final
{
public:
	EK26AmmoCooldownReason                        lastCooldownReason;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AmmoHandlerComponent_Multicast_StartRecharging) == 0x000001, "Wrong alignment on K26AmmoHandlerComponent_Multicast_StartRecharging");
static_assert(sizeof(K26AmmoHandlerComponent_Multicast_StartRecharging) == 0x000001, "Wrong size on K26AmmoHandlerComponent_Multicast_StartRecharging");
static_assert(offsetof(K26AmmoHandlerComponent_Multicast_StartRecharging, lastCooldownReason) == 0x000000, "Member 'K26AmmoHandlerComponent_Multicast_StartRecharging::lastCooldownReason' has a wrong offset!");

// Function TheK26.K26AmmoHandlerComponent.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct K26AmmoHandlerComponent_OnKillerSet final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AmmoHandlerComponent_OnKillerSet) == 0x000008, "Wrong alignment on K26AmmoHandlerComponent_OnKillerSet");
static_assert(sizeof(K26AmmoHandlerComponent_OnKillerSet) == 0x000008, "Wrong size on K26AmmoHandlerComponent_OnKillerSet");
static_assert(offsetof(K26AmmoHandlerComponent_OnKillerSet, killer) == 0x000000, "Member 'K26AmmoHandlerComponent_OnKillerSet::killer' has a wrong offset!");

// Function TheK26.K26AmmoHandlerComponent.SetDependencies
// 0x0018 (0x0018 - 0x0000)
struct K26AmmoHandlerComponent_SetDependencies final
{
public:
	class UK26PathHandlerComponent*               pathHandler;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UK26PowerStatusHandlerComponent*        statusHandler;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAuthoritativeActorPoolComponent*       authoritativeActorPoolComponent;                   // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AmmoHandlerComponent_SetDependencies) == 0x000008, "Wrong alignment on K26AmmoHandlerComponent_SetDependencies");
static_assert(sizeof(K26AmmoHandlerComponent_SetDependencies) == 0x000018, "Wrong size on K26AmmoHandlerComponent_SetDependencies");
static_assert(offsetof(K26AmmoHandlerComponent_SetDependencies, pathHandler) == 0x000000, "Member 'K26AmmoHandlerComponent_SetDependencies::pathHandler' has a wrong offset!");
static_assert(offsetof(K26AmmoHandlerComponent_SetDependencies, statusHandler) == 0x000008, "Member 'K26AmmoHandlerComponent_SetDependencies::statusHandler' has a wrong offset!");
static_assert(offsetof(K26AmmoHandlerComponent_SetDependencies, authoritativeActorPoolComponent) == 0x000010, "Member 'K26AmmoHandlerComponent_SetDependencies::authoritativeActorPoolComponent' has a wrong offset!");

// Function TheK26.K26AmmoHandlerComponent.GetCurrentAmmo
// 0x0004 (0x0004 - 0x0000)
struct K26AmmoHandlerComponent_GetCurrentAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AmmoHandlerComponent_GetCurrentAmmo) == 0x000004, "Wrong alignment on K26AmmoHandlerComponent_GetCurrentAmmo");
static_assert(sizeof(K26AmmoHandlerComponent_GetCurrentAmmo) == 0x000004, "Wrong size on K26AmmoHandlerComponent_GetCurrentAmmo");
static_assert(offsetof(K26AmmoHandlerComponent_GetCurrentAmmo, ReturnValue) == 0x000000, "Member 'K26AmmoHandlerComponent_GetCurrentAmmo::ReturnValue' has a wrong offset!");

// Function TheK26.K26AmmoHandlerComponent.GetCurrentAmmoState
// 0x0001 (0x0001 - 0x0000)
struct K26AmmoHandlerComponent_GetCurrentAmmoState final
{
public:
	EK26AmmoState                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AmmoHandlerComponent_GetCurrentAmmoState) == 0x000001, "Wrong alignment on K26AmmoHandlerComponent_GetCurrentAmmoState");
static_assert(sizeof(K26AmmoHandlerComponent_GetCurrentAmmoState) == 0x000001, "Wrong size on K26AmmoHandlerComponent_GetCurrentAmmoState");
static_assert(offsetof(K26AmmoHandlerComponent_GetCurrentAmmoState, ReturnValue) == 0x000000, "Member 'K26AmmoHandlerComponent_GetCurrentAmmoState::ReturnValue' has a wrong offset!");

// Function TheK26.K26AmmoHandlerComponent.GetCurrentCooldownReason
// 0x0001 (0x0001 - 0x0000)
struct K26AmmoHandlerComponent_GetCurrentCooldownReason final
{
public:
	EK26AmmoCooldownReason                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AmmoHandlerComponent_GetCurrentCooldownReason) == 0x000001, "Wrong alignment on K26AmmoHandlerComponent_GetCurrentCooldownReason");
static_assert(sizeof(K26AmmoHandlerComponent_GetCurrentCooldownReason) == 0x000001, "Wrong size on K26AmmoHandlerComponent_GetCurrentCooldownReason");
static_assert(offsetof(K26AmmoHandlerComponent_GetCurrentCooldownReason, ReturnValue) == 0x000000, "Member 'K26AmmoHandlerComponent_GetCurrentCooldownReason::ReturnValue' has a wrong offset!");

// Function TheK26.K26AmmoHandlerComponent.GetMaxAmmo
// 0x0004 (0x0004 - 0x0000)
struct K26AmmoHandlerComponent_GetMaxAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AmmoHandlerComponent_GetMaxAmmo) == 0x000004, "Wrong alignment on K26AmmoHandlerComponent_GetMaxAmmo");
static_assert(sizeof(K26AmmoHandlerComponent_GetMaxAmmo) == 0x000004, "Wrong size on K26AmmoHandlerComponent_GetMaxAmmo");
static_assert(offsetof(K26AmmoHandlerComponent_GetMaxAmmo, ReturnValue) == 0x000000, "Member 'K26AmmoHandlerComponent_GetMaxAmmo::ReturnValue' has a wrong offset!");

// Function TheK26.K26AttachedCrow.Authority_OnIsWithinOtherSurvivorRangeChanged
// 0x0010 (0x0010 - 0x0000)
struct K26AttachedCrow_Authority_OnIsWithinOtherSurvivorRangeChanged final
{
public:
	class AActor*                                 survivorActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isInRange;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K26AttachedCrow_Authority_OnIsWithinOtherSurvivorRangeChanged) == 0x000008, "Wrong alignment on K26AttachedCrow_Authority_OnIsWithinOtherSurvivorRangeChanged");
static_assert(sizeof(K26AttachedCrow_Authority_OnIsWithinOtherSurvivorRangeChanged) == 0x000010, "Wrong size on K26AttachedCrow_Authority_OnIsWithinOtherSurvivorRangeChanged");
static_assert(offsetof(K26AttachedCrow_Authority_OnIsWithinOtherSurvivorRangeChanged, survivorActor) == 0x000000, "Member 'K26AttachedCrow_Authority_OnIsWithinOtherSurvivorRangeChanged::survivorActor' has a wrong offset!");
static_assert(offsetof(K26AttachedCrow_Authority_OnIsWithinOtherSurvivorRangeChanged, isInRange) == 0x000008, "Member 'K26AttachedCrow_Authority_OnIsWithinOtherSurvivorRangeChanged::isInRange' has a wrong offset!");

// Function TheK26.K26AttachedCrow.Authority_OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct K26AttachedCrow_Authority_OnKillerSet final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AttachedCrow_Authority_OnKillerSet) == 0x000008, "Wrong alignment on K26AttachedCrow_Authority_OnKillerSet");
static_assert(sizeof(K26AttachedCrow_Authority_OnKillerSet) == 0x000008, "Wrong size on K26AttachedCrow_Authority_OnKillerSet");
static_assert(offsetof(K26AttachedCrow_Authority_OnKillerSet, killer) == 0x000000, "Member 'K26AttachedCrow_Authority_OnKillerSet::killer' has a wrong offset!");

// Function TheK26.K26AttachedCrow.Authority_OnOtherSurvivorDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct K26AttachedCrow_Authority_OnOtherSurvivorDamageStateChanged final
{
public:
	ECamperDamageState                            before;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            after;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AttachedCrow_Authority_OnOtherSurvivorDamageStateChanged) == 0x000001, "Wrong alignment on K26AttachedCrow_Authority_OnOtherSurvivorDamageStateChanged");
static_assert(sizeof(K26AttachedCrow_Authority_OnOtherSurvivorDamageStateChanged) == 0x000002, "Wrong size on K26AttachedCrow_Authority_OnOtherSurvivorDamageStateChanged");
static_assert(offsetof(K26AttachedCrow_Authority_OnOtherSurvivorDamageStateChanged, before) == 0x000000, "Member 'K26AttachedCrow_Authority_OnOtherSurvivorDamageStateChanged::before' has a wrong offset!");
static_assert(offsetof(K26AttachedCrow_Authority_OnOtherSurvivorDamageStateChanged, after) == 0x000001, "Member 'K26AttachedCrow_Authority_OnOtherSurvivorDamageStateChanged::after' has a wrong offset!");

// Function TheK26.K26AttachedCrow.Authority_OnOtherSurvivorPerkFlagsChanged
// 0x0010 (0x0010 - 0x0000)
struct K26AttachedCrow_Authority_OnOtherSurvivorPerkFlagsChanged final
{
public:
	struct FGameplayTag                           gameplayTag;                                       // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAdded;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K26AttachedCrow_Authority_OnOtherSurvivorPerkFlagsChanged) == 0x000004, "Wrong alignment on K26AttachedCrow_Authority_OnOtherSurvivorPerkFlagsChanged");
static_assert(sizeof(K26AttachedCrow_Authority_OnOtherSurvivorPerkFlagsChanged) == 0x000010, "Wrong size on K26AttachedCrow_Authority_OnOtherSurvivorPerkFlagsChanged");
static_assert(offsetof(K26AttachedCrow_Authority_OnOtherSurvivorPerkFlagsChanged, gameplayTag) == 0x000000, "Member 'K26AttachedCrow_Authority_OnOtherSurvivorPerkFlagsChanged::gameplayTag' has a wrong offset!");
static_assert(offsetof(K26AttachedCrow_Authority_OnOtherSurvivorPerkFlagsChanged, isAdded) == 0x00000C, "Member 'K26AttachedCrow_Authority_OnOtherSurvivorPerkFlagsChanged::isAdded' has a wrong offset!");

// Function TheK26.K26AttachedCrow.Authority_OnPlayerLeftGame
// 0x0038 (0x0038 - 0x0000)
struct K26AttachedCrow_Authority_OnPlayerLeftGame final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AttachedCrow_Authority_OnPlayerLeftGame) == 0x000008, "Wrong alignment on K26AttachedCrow_Authority_OnPlayerLeftGame");
static_assert(sizeof(K26AttachedCrow_Authority_OnPlayerLeftGame) == 0x000038, "Wrong size on K26AttachedCrow_Authority_OnPlayerLeftGame");
static_assert(offsetof(K26AttachedCrow_Authority_OnPlayerLeftGame, gameEventType) == 0x000000, "Member 'K26AttachedCrow_Authority_OnPlayerLeftGame::gameEventType' has a wrong offset!");
static_assert(offsetof(K26AttachedCrow_Authority_OnPlayerLeftGame, gameEventData) == 0x000010, "Member 'K26AttachedCrow_Authority_OnPlayerLeftGame::gameEventData' has a wrong offset!");

// Function TheK26.K26AttachedCrow.Authority_OnSurvivorAdded
// 0x0008 (0x0008 - 0x0000)
struct K26AttachedCrow_Authority_OnSurvivorAdded final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AttachedCrow_Authority_OnSurvivorAdded) == 0x000008, "Wrong alignment on K26AttachedCrow_Authority_OnSurvivorAdded");
static_assert(sizeof(K26AttachedCrow_Authority_OnSurvivorAdded) == 0x000008, "Wrong size on K26AttachedCrow_Authority_OnSurvivorAdded");
static_assert(offsetof(K26AttachedCrow_Authority_OnSurvivorAdded, survivor) == 0x000000, "Member 'K26AttachedCrow_Authority_OnSurvivorAdded::survivor' has a wrong offset!");

// Function TheK26.K26AttachedCrow.Authority_OnSurvivorExitLocker
// 0x0038 (0x0038 - 0x0000)
struct K26AttachedCrow_Authority_OnSurvivorExitLocker final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AttachedCrow_Authority_OnSurvivorExitLocker) == 0x000008, "Wrong alignment on K26AttachedCrow_Authority_OnSurvivorExitLocker");
static_assert(sizeof(K26AttachedCrow_Authority_OnSurvivorExitLocker) == 0x000038, "Wrong size on K26AttachedCrow_Authority_OnSurvivorExitLocker");
static_assert(offsetof(K26AttachedCrow_Authority_OnSurvivorExitLocker, gameEventType) == 0x000000, "Member 'K26AttachedCrow_Authority_OnSurvivorExitLocker::gameEventType' has a wrong offset!");
static_assert(offsetof(K26AttachedCrow_Authority_OnSurvivorExitLocker, gameEventData) == 0x000010, "Member 'K26AttachedCrow_Authority_OnSurvivorExitLocker::gameEventData' has a wrong offset!");

// Function TheK26.K26AttachedCrow.Authority_OnSurvivorStatusIndicatorSet
// 0x0010 (0x0010 - 0x0000)
struct K26AttachedCrow_Authority_OnSurvivorStatusIndicatorSet final
{
public:
	const class ACamperPlayer*                    survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK26AttachedCrow*                       attachedCrow;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AttachedCrow_Authority_OnSurvivorStatusIndicatorSet) == 0x000008, "Wrong alignment on K26AttachedCrow_Authority_OnSurvivorStatusIndicatorSet");
static_assert(sizeof(K26AttachedCrow_Authority_OnSurvivorStatusIndicatorSet) == 0x000010, "Wrong size on K26AttachedCrow_Authority_OnSurvivorStatusIndicatorSet");
static_assert(offsetof(K26AttachedCrow_Authority_OnSurvivorStatusIndicatorSet, survivor) == 0x000000, "Member 'K26AttachedCrow_Authority_OnSurvivorStatusIndicatorSet::survivor' has a wrong offset!");
static_assert(offsetof(K26AttachedCrow_Authority_OnSurvivorStatusIndicatorSet, attachedCrow) == 0x000008, "Member 'K26AttachedCrow_Authority_OnSurvivorStatusIndicatorSet::attachedCrow' has a wrong offset!");

// Function TheK26.K26AttachedCrow.Authority_OnSurvivorWasUnhooked
// 0x0038 (0x0038 - 0x0000)
struct K26AttachedCrow_Authority_OnSurvivorWasUnhooked final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AttachedCrow_Authority_OnSurvivorWasUnhooked) == 0x000008, "Wrong alignment on K26AttachedCrow_Authority_OnSurvivorWasUnhooked");
static_assert(sizeof(K26AttachedCrow_Authority_OnSurvivorWasUnhooked) == 0x000038, "Wrong size on K26AttachedCrow_Authority_OnSurvivorWasUnhooked");
static_assert(offsetof(K26AttachedCrow_Authority_OnSurvivorWasUnhooked, gameEventType) == 0x000000, "Member 'K26AttachedCrow_Authority_OnSurvivorWasUnhooked::gameEventType' has a wrong offset!");
static_assert(offsetof(K26AttachedCrow_Authority_OnSurvivorWasUnhooked, gameEventData) == 0x000010, "Member 'K26AttachedCrow_Authority_OnSurvivorWasUnhooked::gameEventData' has a wrong offset!");

// Function TheK26.K26AttachedCrow.Cosmetic_OnAttachedCrowRemoved
// 0x0001 (0x0001 - 0x0000)
struct K26AttachedCrow_Cosmetic_OnAttachedCrowRemoved final
{
public:
	EFK26AttachedCrowRemovalReason                removalReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26AttachedCrow_Cosmetic_OnAttachedCrowRemoved) == 0x000001, "Wrong alignment on K26AttachedCrow_Cosmetic_OnAttachedCrowRemoved");
static_assert(sizeof(K26AttachedCrow_Cosmetic_OnAttachedCrowRemoved) == 0x000001, "Wrong size on K26AttachedCrow_Cosmetic_OnAttachedCrowRemoved");
static_assert(offsetof(K26AttachedCrow_Cosmetic_OnAttachedCrowRemoved, removalReason) == 0x000000, "Member 'K26AttachedCrow_Cosmetic_OnAttachedCrowRemoved::removalReason' has a wrong offset!");

// Function TheK26.K26CooldownInteractionDefinition.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct K26CooldownInteractionDefinition_OnKillerSet final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26CooldownInteractionDefinition_OnKillerSet) == 0x000008, "Wrong alignment on K26CooldownInteractionDefinition_OnKillerSet");
static_assert(sizeof(K26CooldownInteractionDefinition_OnKillerSet) == 0x000008, "Wrong size on K26CooldownInteractionDefinition_OnKillerSet");
static_assert(offsetof(K26CooldownInteractionDefinition_OnKillerSet, killer) == 0x000000, "Member 'K26CooldownInteractionDefinition_OnKillerSet::killer' has a wrong offset!");

// Function TheK26.K26CrowProjectile.Authority_OnCollisionOverlapBegin
// 0x00B0 (0x00B0 - 0x0000)
struct K26CrowProjectile_Authority_OnCollisionOverlapBegin final
{
public:
	class UPrimitiveComponent*                    overlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26CrowProjectile_Authority_OnCollisionOverlapBegin) == 0x000008, "Wrong alignment on K26CrowProjectile_Authority_OnCollisionOverlapBegin");
static_assert(sizeof(K26CrowProjectile_Authority_OnCollisionOverlapBegin) == 0x0000B0, "Wrong size on K26CrowProjectile_Authority_OnCollisionOverlapBegin");
static_assert(offsetof(K26CrowProjectile_Authority_OnCollisionOverlapBegin, overlappedComp) == 0x000000, "Member 'K26CrowProjectile_Authority_OnCollisionOverlapBegin::overlappedComp' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Authority_OnCollisionOverlapBegin, otherActor) == 0x000008, "Member 'K26CrowProjectile_Authority_OnCollisionOverlapBegin::otherActor' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Authority_OnCollisionOverlapBegin, otherComp) == 0x000010, "Member 'K26CrowProjectile_Authority_OnCollisionOverlapBegin::otherComp' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Authority_OnCollisionOverlapBegin, otherBodyIndex) == 0x000018, "Member 'K26CrowProjectile_Authority_OnCollisionOverlapBegin::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Authority_OnCollisionOverlapBegin, fromSweep) == 0x00001C, "Member 'K26CrowProjectile_Authority_OnCollisionOverlapBegin::fromSweep' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Authority_OnCollisionOverlapBegin, sweepResult) == 0x000020, "Member 'K26CrowProjectile_Authority_OnCollisionOverlapBegin::sweepResult' has a wrong offset!");

// Function TheK26.K26CrowProjectile.Authority_OnCollisionOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct K26CrowProjectile_Authority_OnCollisionOverlapEnd final
{
public:
	class UPrimitiveComponent*                    overlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K26CrowProjectile_Authority_OnCollisionOverlapEnd) == 0x000008, "Wrong alignment on K26CrowProjectile_Authority_OnCollisionOverlapEnd");
static_assert(sizeof(K26CrowProjectile_Authority_OnCollisionOverlapEnd) == 0x000020, "Wrong size on K26CrowProjectile_Authority_OnCollisionOverlapEnd");
static_assert(offsetof(K26CrowProjectile_Authority_OnCollisionOverlapEnd, overlappedComp) == 0x000000, "Member 'K26CrowProjectile_Authority_OnCollisionOverlapEnd::overlappedComp' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Authority_OnCollisionOverlapEnd, otherActor) == 0x000008, "Member 'K26CrowProjectile_Authority_OnCollisionOverlapEnd::otherActor' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Authority_OnCollisionOverlapEnd, otherComp) == 0x000010, "Member 'K26CrowProjectile_Authority_OnCollisionOverlapEnd::otherComp' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Authority_OnCollisionOverlapEnd, otherBodyIndex) == 0x000018, "Member 'K26CrowProjectile_Authority_OnCollisionOverlapEnd::otherBodyIndex' has a wrong offset!");

// Function TheK26.K26CrowProjectile.Authority_OnDestroyAttempt
// 0x0010 (0x0010 - 0x0000)
struct K26CrowProjectile_Authority_OnDestroyAttempt final
{
public:
	TArray<class AActor*>                         instigatorsForCompletion;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26CrowProjectile_Authority_OnDestroyAttempt) == 0x000008, "Wrong alignment on K26CrowProjectile_Authority_OnDestroyAttempt");
static_assert(sizeof(K26CrowProjectile_Authority_OnDestroyAttempt) == 0x000010, "Wrong size on K26CrowProjectile_Authority_OnDestroyAttempt");
static_assert(offsetof(K26CrowProjectile_Authority_OnDestroyAttempt, instigatorsForCompletion) == 0x000000, "Member 'K26CrowProjectile_Authority_OnDestroyAttempt::instigatorsForCompletion' has a wrong offset!");

// Function TheK26.K26CrowProjectile.Authority_OnScoutingOverlapBegin
// 0x00B0 (0x00B0 - 0x0000)
struct K26CrowProjectile_Authority_OnScoutingOverlapBegin final
{
public:
	class UPrimitiveComponent*                    overlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26CrowProjectile_Authority_OnScoutingOverlapBegin) == 0x000008, "Wrong alignment on K26CrowProjectile_Authority_OnScoutingOverlapBegin");
static_assert(sizeof(K26CrowProjectile_Authority_OnScoutingOverlapBegin) == 0x0000B0, "Wrong size on K26CrowProjectile_Authority_OnScoutingOverlapBegin");
static_assert(offsetof(K26CrowProjectile_Authority_OnScoutingOverlapBegin, overlappedComp) == 0x000000, "Member 'K26CrowProjectile_Authority_OnScoutingOverlapBegin::overlappedComp' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Authority_OnScoutingOverlapBegin, otherActor) == 0x000008, "Member 'K26CrowProjectile_Authority_OnScoutingOverlapBegin::otherActor' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Authority_OnScoutingOverlapBegin, otherComp) == 0x000010, "Member 'K26CrowProjectile_Authority_OnScoutingOverlapBegin::otherComp' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Authority_OnScoutingOverlapBegin, otherBodyIndex) == 0x000018, "Member 'K26CrowProjectile_Authority_OnScoutingOverlapBegin::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Authority_OnScoutingOverlapBegin, fromSweep) == 0x00001C, "Member 'K26CrowProjectile_Authority_OnScoutingOverlapBegin::fromSweep' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Authority_OnScoutingOverlapBegin, sweepResult) == 0x000020, "Member 'K26CrowProjectile_Authority_OnScoutingOverlapBegin::sweepResult' has a wrong offset!");

// Function TheK26.K26CrowProjectile.Client_LocalKillerStartSummonTimer
// 0x0004 (0x0004 - 0x0000)
struct K26CrowProjectile_Client_LocalKillerStartSummonTimer final
{
public:
	float                                         killerLocalSummonTime;                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26CrowProjectile_Client_LocalKillerStartSummonTimer) == 0x000004, "Wrong alignment on K26CrowProjectile_Client_LocalKillerStartSummonTimer");
static_assert(sizeof(K26CrowProjectile_Client_LocalKillerStartSummonTimer) == 0x000004, "Wrong size on K26CrowProjectile_Client_LocalKillerStartSummonTimer");
static_assert(offsetof(K26CrowProjectile_Client_LocalKillerStartSummonTimer, killerLocalSummonTime) == 0x000000, "Member 'K26CrowProjectile_Client_LocalKillerStartSummonTimer::killerLocalSummonTime' has a wrong offset!");

// Function TheK26.K26CrowProjectile.Cosmetic_OnEnteredNearAudioRangeOfSurvivor
// 0x0008 (0x0008 - 0x0000)
struct K26CrowProjectile_Cosmetic_OnEnteredNearAudioRangeOfSurvivor final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26CrowProjectile_Cosmetic_OnEnteredNearAudioRangeOfSurvivor) == 0x000008, "Wrong alignment on K26CrowProjectile_Cosmetic_OnEnteredNearAudioRangeOfSurvivor");
static_assert(sizeof(K26CrowProjectile_Cosmetic_OnEnteredNearAudioRangeOfSurvivor) == 0x000008, "Wrong size on K26CrowProjectile_Cosmetic_OnEnteredNearAudioRangeOfSurvivor");
static_assert(offsetof(K26CrowProjectile_Cosmetic_OnEnteredNearAudioRangeOfSurvivor, survivor) == 0x000000, "Member 'K26CrowProjectile_Cosmetic_OnEnteredNearAudioRangeOfSurvivor::survivor' has a wrong offset!");

// Function TheK26.K26CrowProjectile.Local_OnCollisionOverlapBegin
// 0x00B0 (0x00B0 - 0x0000)
struct K26CrowProjectile_Local_OnCollisionOverlapBegin final
{
public:
	class UPrimitiveComponent*                    overlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26CrowProjectile_Local_OnCollisionOverlapBegin) == 0x000008, "Wrong alignment on K26CrowProjectile_Local_OnCollisionOverlapBegin");
static_assert(sizeof(K26CrowProjectile_Local_OnCollisionOverlapBegin) == 0x0000B0, "Wrong size on K26CrowProjectile_Local_OnCollisionOverlapBegin");
static_assert(offsetof(K26CrowProjectile_Local_OnCollisionOverlapBegin, overlappedComp) == 0x000000, "Member 'K26CrowProjectile_Local_OnCollisionOverlapBegin::overlappedComp' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Local_OnCollisionOverlapBegin, otherActor) == 0x000008, "Member 'K26CrowProjectile_Local_OnCollisionOverlapBegin::otherActor' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Local_OnCollisionOverlapBegin, otherComp) == 0x000010, "Member 'K26CrowProjectile_Local_OnCollisionOverlapBegin::otherComp' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Local_OnCollisionOverlapBegin, otherBodyIndex) == 0x000018, "Member 'K26CrowProjectile_Local_OnCollisionOverlapBegin::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Local_OnCollisionOverlapBegin, fromSweep) == 0x00001C, "Member 'K26CrowProjectile_Local_OnCollisionOverlapBegin::fromSweep' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Local_OnCollisionOverlapBegin, sweepResult) == 0x000020, "Member 'K26CrowProjectile_Local_OnCollisionOverlapBegin::sweepResult' has a wrong offset!");

// Function TheK26.K26CrowProjectile.Multicast_SetStartingPosition
// 0x0018 (0x0018 - 0x0000)
struct K26CrowProjectile_Multicast_SetStartingPosition final
{
public:
	struct FVector                                position;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               angle;                                             // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26CrowProjectile_Multicast_SetStartingPosition) == 0x000004, "Wrong alignment on K26CrowProjectile_Multicast_SetStartingPosition");
static_assert(sizeof(K26CrowProjectile_Multicast_SetStartingPosition) == 0x000018, "Wrong size on K26CrowProjectile_Multicast_SetStartingPosition");
static_assert(offsetof(K26CrowProjectile_Multicast_SetStartingPosition, position) == 0x000000, "Member 'K26CrowProjectile_Multicast_SetStartingPosition::position' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Multicast_SetStartingPosition, angle) == 0x00000C, "Member 'K26CrowProjectile_Multicast_SetStartingPosition::angle' has a wrong offset!");

// Function TheK26.K26CrowProjectile.Multicast_SetState
// 0x0008 (0x0008 - 0x0000)
struct K26CrowProjectile_Multicast_SetState final
{
public:
	EK26ProjectileState                           newState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         pooledPathIndex;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26CrowProjectile_Multicast_SetState) == 0x000004, "Wrong alignment on K26CrowProjectile_Multicast_SetState");
static_assert(sizeof(K26CrowProjectile_Multicast_SetState) == 0x000008, "Wrong size on K26CrowProjectile_Multicast_SetState");
static_assert(offsetof(K26CrowProjectile_Multicast_SetState, newState) == 0x000000, "Member 'K26CrowProjectile_Multicast_SetState::newState' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Multicast_SetState, pooledPathIndex) == 0x000004, "Member 'K26CrowProjectile_Multicast_SetState::pooledPathIndex' has a wrong offset!");

// Function TheK26.K26CrowProjectile.OnIsWithinSurvivorRangeChanged
// 0x0010 (0x0010 - 0x0000)
struct K26CrowProjectile_OnIsWithinSurvivorRangeChanged final
{
public:
	class AActor*                                 survivorActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isInRange;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K26CrowProjectile_OnIsWithinSurvivorRangeChanged) == 0x000008, "Wrong alignment on K26CrowProjectile_OnIsWithinSurvivorRangeChanged");
static_assert(sizeof(K26CrowProjectile_OnIsWithinSurvivorRangeChanged) == 0x000010, "Wrong size on K26CrowProjectile_OnIsWithinSurvivorRangeChanged");
static_assert(offsetof(K26CrowProjectile_OnIsWithinSurvivorRangeChanged, survivorActor) == 0x000000, "Member 'K26CrowProjectile_OnIsWithinSurvivorRangeChanged::survivorActor' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_OnIsWithinSurvivorRangeChanged, isInRange) == 0x000008, "Member 'K26CrowProjectile_OnIsWithinSurvivorRangeChanged::isInRange' has a wrong offset!");

// Function TheK26.K26CrowProjectile.OnSurvivorAdded
// 0x0008 (0x0008 - 0x0000)
struct K26CrowProjectile_OnSurvivorAdded final
{
public:
	class ACamperPlayer*                          survivorAdded;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26CrowProjectile_OnSurvivorAdded) == 0x000008, "Wrong alignment on K26CrowProjectile_OnSurvivorAdded");
static_assert(sizeof(K26CrowProjectile_OnSurvivorAdded) == 0x000008, "Wrong size on K26CrowProjectile_OnSurvivorAdded");
static_assert(offsetof(K26CrowProjectile_OnSurvivorAdded, survivorAdded) == 0x000000, "Member 'K26CrowProjectile_OnSurvivorAdded::survivorAdded' has a wrong offset!");

// Function TheK26.K26CrowProjectile.Server_OnSurvivorHit
// 0x0010 (0x0010 - 0x0000)
struct K26CrowProjectile_Server_OnSurvivorHit final
{
public:
	EK26ProjectileState                           stateOnHit;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACamperPlayer*                          hitSurvivor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26CrowProjectile_Server_OnSurvivorHit) == 0x000008, "Wrong alignment on K26CrowProjectile_Server_OnSurvivorHit");
static_assert(sizeof(K26CrowProjectile_Server_OnSurvivorHit) == 0x000010, "Wrong size on K26CrowProjectile_Server_OnSurvivorHit");
static_assert(offsetof(K26CrowProjectile_Server_OnSurvivorHit, stateOnHit) == 0x000000, "Member 'K26CrowProjectile_Server_OnSurvivorHit::stateOnHit' has a wrong offset!");
static_assert(offsetof(K26CrowProjectile_Server_OnSurvivorHit, hitSurvivor) == 0x000008, "Member 'K26CrowProjectile_Server_OnSurvivorHit::hitSurvivor' has a wrong offset!");

// Function TheK26.K26CrowProjectile.GetDistanceFromFirePosition
// 0x0004 (0x0004 - 0x0000)
struct K26CrowProjectile_GetDistanceFromFirePosition final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26CrowProjectile_GetDistanceFromFirePosition) == 0x000004, "Wrong alignment on K26CrowProjectile_GetDistanceFromFirePosition");
static_assert(sizeof(K26CrowProjectile_GetDistanceFromFirePosition) == 0x000004, "Wrong size on K26CrowProjectile_GetDistanceFromFirePosition");
static_assert(offsetof(K26CrowProjectile_GetDistanceFromFirePosition, ReturnValue) == 0x000000, "Member 'K26CrowProjectile_GetDistanceFromFirePosition::ReturnValue' has a wrong offset!");

// Function TheK26.K26CrowProjectile.IsHitboxBeingShown
// 0x0001 (0x0001 - 0x0000)
struct K26CrowProjectile_IsHitboxBeingShown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26CrowProjectile_IsHitboxBeingShown) == 0x000001, "Wrong alignment on K26CrowProjectile_IsHitboxBeingShown");
static_assert(sizeof(K26CrowProjectile_IsHitboxBeingShown) == 0x000001, "Wrong size on K26CrowProjectile_IsHitboxBeingShown");
static_assert(offsetof(K26CrowProjectile_IsHitboxBeingShown, ReturnValue) == 0x000000, "Member 'K26CrowProjectile_IsHitboxBeingShown::ReturnValue' has a wrong offset!");

// Function TheK26.K26DismissCrowChargeableInteractionDefinition.OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct K26DismissCrowChargeableInteractionDefinition_OnDamageStateChanged final
{
public:
	ECamperDamageState                            oldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            currentDamageState;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26DismissCrowChargeableInteractionDefinition_OnDamageStateChanged) == 0x000001, "Wrong alignment on K26DismissCrowChargeableInteractionDefinition_OnDamageStateChanged");
static_assert(sizeof(K26DismissCrowChargeableInteractionDefinition_OnDamageStateChanged) == 0x000002, "Wrong size on K26DismissCrowChargeableInteractionDefinition_OnDamageStateChanged");
static_assert(offsetof(K26DismissCrowChargeableInteractionDefinition_OnDamageStateChanged, oldDamageState) == 0x000000, "Member 'K26DismissCrowChargeableInteractionDefinition_OnDamageStateChanged::oldDamageState' has a wrong offset!");
static_assert(offsetof(K26DismissCrowChargeableInteractionDefinition_OnDamageStateChanged, currentDamageState) == 0x000001, "Member 'K26DismissCrowChargeableInteractionDefinition_OnDamageStateChanged::currentDamageState' has a wrong offset!");

// Function TheK26.K26DismissCrowChargeableInteractionDefinition.OnKillerSet
// 0x0010 (0x0010 - 0x0000)
struct K26DismissCrowChargeableInteractionDefinition_OnKillerSet final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChargeableComponent*                   chargeableComponent;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26DismissCrowChargeableInteractionDefinition_OnKillerSet) == 0x000008, "Wrong alignment on K26DismissCrowChargeableInteractionDefinition_OnKillerSet");
static_assert(sizeof(K26DismissCrowChargeableInteractionDefinition_OnKillerSet) == 0x000010, "Wrong size on K26DismissCrowChargeableInteractionDefinition_OnKillerSet");
static_assert(offsetof(K26DismissCrowChargeableInteractionDefinition_OnKillerSet, killer) == 0x000000, "Member 'K26DismissCrowChargeableInteractionDefinition_OnKillerSet::killer' has a wrong offset!");
static_assert(offsetof(K26DismissCrowChargeableInteractionDefinition_OnKillerSet, chargeableComponent) == 0x000008, "Member 'K26DismissCrowChargeableInteractionDefinition_OnKillerSet::chargeableComponent' has a wrong offset!");

// Function TheK26.K26FireCrowProjectileInteractionDefinition.Multicast_OnProjectileFired
// 0x0008 (0x0008 - 0x0000)
struct K26FireCrowProjectileInteractionDefinition_Multicast_OnProjectileFired final
{
public:
	const class ASlasherPlayer*                   killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26FireCrowProjectileInteractionDefinition_Multicast_OnProjectileFired) == 0x000008, "Wrong alignment on K26FireCrowProjectileInteractionDefinition_Multicast_OnProjectileFired");
static_assert(sizeof(K26FireCrowProjectileInteractionDefinition_Multicast_OnProjectileFired) == 0x000008, "Wrong size on K26FireCrowProjectileInteractionDefinition_Multicast_OnProjectileFired");
static_assert(offsetof(K26FireCrowProjectileInteractionDefinition_Multicast_OnProjectileFired, killer) == 0x000000, "Member 'K26FireCrowProjectileInteractionDefinition_Multicast_OnProjectileFired::killer' has a wrong offset!");

// Function TheK26.K26FireCrowProjectileInteractionDefinition.Server_RequestFireOnAmmo
// 0x0008 (0x0008 - 0x0000)
struct K26FireCrowProjectileInteractionDefinition_Server_RequestFireOnAmmo final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26FireCrowProjectileInteractionDefinition_Server_RequestFireOnAmmo) == 0x000008, "Wrong alignment on K26FireCrowProjectileInteractionDefinition_Server_RequestFireOnAmmo");
static_assert(sizeof(K26FireCrowProjectileInteractionDefinition_Server_RequestFireOnAmmo) == 0x000008, "Wrong size on K26FireCrowProjectileInteractionDefinition_Server_RequestFireOnAmmo");
static_assert(offsetof(K26FireCrowProjectileInteractionDefinition_Server_RequestFireOnAmmo, killer) == 0x000000, "Member 'K26FireCrowProjectileInteractionDefinition_Server_RequestFireOnAmmo::killer' has a wrong offset!");

// Function TheK26.K26FireCrowProjectileInteractionDefinition.SetDependencies
// 0x0018 (0x0018 - 0x0000)
struct K26FireCrowProjectileInteractionDefinition_SetDependencies final
{
public:
	class UK26AmmoHandlerComponent*               ammoHandler;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UK26PathHandlerComponent*               pathHandler;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UK26CooldownInteractionDefinition*      cooldownInteraction;                               // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26FireCrowProjectileInteractionDefinition_SetDependencies) == 0x000008, "Wrong alignment on K26FireCrowProjectileInteractionDefinition_SetDependencies");
static_assert(sizeof(K26FireCrowProjectileInteractionDefinition_SetDependencies) == 0x000018, "Wrong size on K26FireCrowProjectileInteractionDefinition_SetDependencies");
static_assert(offsetof(K26FireCrowProjectileInteractionDefinition_SetDependencies, ammoHandler) == 0x000000, "Member 'K26FireCrowProjectileInteractionDefinition_SetDependencies::ammoHandler' has a wrong offset!");
static_assert(offsetof(K26FireCrowProjectileInteractionDefinition_SetDependencies, pathHandler) == 0x000008, "Member 'K26FireCrowProjectileInteractionDefinition_SetDependencies::pathHandler' has a wrong offset!");
static_assert(offsetof(K26FireCrowProjectileInteractionDefinition_SetDependencies, cooldownInteraction) == 0x000010, "Member 'K26FireCrowProjectileInteractionDefinition_SetDependencies::cooldownInteraction' has a wrong offset!");

// Function TheK26.K26IsLastCrowRemovalReasonDueToInteraction.Authority_OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnKillerSet final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnKillerSet) == 0x000008, "Wrong alignment on K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnKillerSet");
static_assert(sizeof(K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnKillerSet) == 0x000008, "Wrong size on K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnKillerSet");
static_assert(offsetof(K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnKillerSet, killer) == 0x000000, "Member 'K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnKillerSet::killer' has a wrong offset!");

// Function TheK26.K26IsLastCrowRemovalReasonDueToInteraction.Authority_OnSurvivorStatusIndicatorSet
// 0x0010 (0x0010 - 0x0000)
struct K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnSurvivorStatusIndicatorSet final
{
public:
	const class ACamperPlayer*                    survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK26AttachedCrow*                       attachedCrow;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnSurvivorStatusIndicatorSet) == 0x000008, "Wrong alignment on K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnSurvivorStatusIndicatorSet");
static_assert(sizeof(K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnSurvivorStatusIndicatorSet) == 0x000010, "Wrong size on K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnSurvivorStatusIndicatorSet");
static_assert(offsetof(K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnSurvivorStatusIndicatorSet, survivor) == 0x000000, "Member 'K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnSurvivorStatusIndicatorSet::survivor' has a wrong offset!");
static_assert(offsetof(K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnSurvivorStatusIndicatorSet, attachedCrow) == 0x000008, "Member 'K26IsLastCrowRemovalReasonDueToInteraction_Authority_OnSurvivorStatusIndicatorSet::attachedCrow' has a wrong offset!");

// Function TheK26.K26IsLastCrowRemovalReasonDueToInteraction.OnLastRemovalReasonSet
// 0x0001 (0x0001 - 0x0000)
struct K26IsLastCrowRemovalReasonDueToInteraction_OnLastRemovalReasonSet final
{
public:
	EFK26AttachedCrowRemovalReason                lastCrowRemovalReason;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26IsLastCrowRemovalReasonDueToInteraction_OnLastRemovalReasonSet) == 0x000001, "Wrong alignment on K26IsLastCrowRemovalReasonDueToInteraction_OnLastRemovalReasonSet");
static_assert(sizeof(K26IsLastCrowRemovalReasonDueToInteraction_OnLastRemovalReasonSet) == 0x000001, "Wrong size on K26IsLastCrowRemovalReasonDueToInteraction_OnLastRemovalReasonSet");
static_assert(offsetof(K26IsLastCrowRemovalReasonDueToInteraction_OnLastRemovalReasonSet, lastCrowRemovalReason) == 0x000000, "Member 'K26IsLastCrowRemovalReasonDueToInteraction_OnLastRemovalReasonSet::lastCrowRemovalReason' has a wrong offset!");

// Function TheK26.K26IsLastCrowRemovalReasonDueToInteraction.OnSurvivorStatusIndicatorSet
// 0x0008 (0x0008 - 0x0000)
struct K26IsLastCrowRemovalReasonDueToInteraction_OnSurvivorStatusIndicatorSet final
{
public:
	class AK26AttachedCrow*                       attachedCrow;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26IsLastCrowRemovalReasonDueToInteraction_OnSurvivorStatusIndicatorSet) == 0x000008, "Wrong alignment on K26IsLastCrowRemovalReasonDueToInteraction_OnSurvivorStatusIndicatorSet");
static_assert(sizeof(K26IsLastCrowRemovalReasonDueToInteraction_OnSurvivorStatusIndicatorSet) == 0x000008, "Wrong size on K26IsLastCrowRemovalReasonDueToInteraction_OnSurvivorStatusIndicatorSet");
static_assert(offsetof(K26IsLastCrowRemovalReasonDueToInteraction_OnSurvivorStatusIndicatorSet, attachedCrow) == 0x000000, "Member 'K26IsLastCrowRemovalReasonDueToInteraction_OnSurvivorStatusIndicatorSet::attachedCrow' has a wrong offset!");

// Function TheK26.K26IsSurvivorInRangeOfAnyIdleCrow.Authority_OnCrowAddedToPool
// 0x0008 (0x0008 - 0x0000)
struct K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnCrowAddedToPool final
{
public:
	class AActor*                                 crowProjectileActor;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnCrowAddedToPool) == 0x000008, "Wrong alignment on K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnCrowAddedToPool");
static_assert(sizeof(K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnCrowAddedToPool) == 0x000008, "Wrong size on K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnCrowAddedToPool");
static_assert(offsetof(K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnCrowAddedToPool, crowProjectileActor) == 0x000000, "Member 'K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnCrowAddedToPool::crowProjectileActor' has a wrong offset!");

// Function TheK26.K26IsSurvivorInRangeOfAnyIdleCrow.Authority_OnCrowProjectileStateChanged
// 0x0008 (0x0008 - 0x0000)
struct K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnCrowProjectileStateChanged final
{
public:
	class AK26CrowProjectile*                     crowProjectile;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnCrowProjectileStateChanged) == 0x000008, "Wrong alignment on K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnCrowProjectileStateChanged");
static_assert(sizeof(K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnCrowProjectileStateChanged) == 0x000008, "Wrong size on K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnCrowProjectileStateChanged");
static_assert(offsetof(K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnCrowProjectileStateChanged, crowProjectile) == 0x000000, "Member 'K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnCrowProjectileStateChanged::crowProjectile' has a wrong offset!");

// Function TheK26.K26IsSurvivorInRangeOfAnyIdleCrow.Authority_OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnInRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnInRangeChanged) == 0x000001, "Wrong alignment on K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnInRangeChanged");
static_assert(sizeof(K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnInRangeChanged) == 0x000001, "Wrong size on K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnInRangeChanged");
static_assert(offsetof(K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnInRangeChanged, inRange) == 0x000000, "Member 'K26IsSurvivorInRangeOfAnyIdleCrow_Authority_OnInRangeChanged::inRange' has a wrong offset!");

// Function TheK26.K26IsSurvivorInRangeOfAnyIdleCrow.Authority_SetVariables
// 0x0018 (0x0018 - 0x0000)
struct K26IsSurvivorInRangeOfAnyIdleCrow_Authority_SetVariables final
{
public:
	class ACamperPlayer*                          trackedSurvivor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAuthoritativeActorPoolComponent*       authoritativeActorPoolComponent;                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         range;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K26IsSurvivorInRangeOfAnyIdleCrow_Authority_SetVariables) == 0x000008, "Wrong alignment on K26IsSurvivorInRangeOfAnyIdleCrow_Authority_SetVariables");
static_assert(sizeof(K26IsSurvivorInRangeOfAnyIdleCrow_Authority_SetVariables) == 0x000018, "Wrong size on K26IsSurvivorInRangeOfAnyIdleCrow_Authority_SetVariables");
static_assert(offsetof(K26IsSurvivorInRangeOfAnyIdleCrow_Authority_SetVariables, trackedSurvivor) == 0x000000, "Member 'K26IsSurvivorInRangeOfAnyIdleCrow_Authority_SetVariables::trackedSurvivor' has a wrong offset!");
static_assert(offsetof(K26IsSurvivorInRangeOfAnyIdleCrow_Authority_SetVariables, authoritativeActorPoolComponent) == 0x000008, "Member 'K26IsSurvivorInRangeOfAnyIdleCrow_Authority_SetVariables::authoritativeActorPoolComponent' has a wrong offset!");
static_assert(offsetof(K26IsSurvivorInRangeOfAnyIdleCrow_Authority_SetVariables, range) == 0x000010, "Member 'K26IsSurvivorInRangeOfAnyIdleCrow_Authority_SetVariables::range' has a wrong offset!");

// Function TheK26.K26IsSurvivorInRangeOfAnyIdleCrow.Multicast_SetIsTrue
// 0x0001 (0x0001 - 0x0000)
struct K26IsSurvivorInRangeOfAnyIdleCrow_Multicast_SetIsTrue final
{
public:
	bool                                          isTrue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26IsSurvivorInRangeOfAnyIdleCrow_Multicast_SetIsTrue) == 0x000001, "Wrong alignment on K26IsSurvivorInRangeOfAnyIdleCrow_Multicast_SetIsTrue");
static_assert(sizeof(K26IsSurvivorInRangeOfAnyIdleCrow_Multicast_SetIsTrue) == 0x000001, "Wrong size on K26IsSurvivorInRangeOfAnyIdleCrow_Multicast_SetIsTrue");
static_assert(offsetof(K26IsSurvivorInRangeOfAnyIdleCrow_Multicast_SetIsTrue, isTrue) == 0x000000, "Member 'K26IsSurvivorInRangeOfAnyIdleCrow_Multicast_SetIsTrue::isTrue' has a wrong offset!");

// Function TheK26.K26OnCrowAttachLingeringStatusEffectBase.GetLingerTime
// 0x0004 (0x0004 - 0x0000)
struct K26OnCrowAttachLingeringStatusEffectBase_GetLingerTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26OnCrowAttachLingeringStatusEffectBase_GetLingerTime) == 0x000004, "Wrong alignment on K26OnCrowAttachLingeringStatusEffectBase_GetLingerTime");
static_assert(sizeof(K26OnCrowAttachLingeringStatusEffectBase_GetLingerTime) == 0x000004, "Wrong size on K26OnCrowAttachLingeringStatusEffectBase_GetLingerTime");
static_assert(offsetof(K26OnCrowAttachLingeringStatusEffectBase_GetLingerTime, ReturnValue) == 0x000000, "Member 'K26OnCrowAttachLingeringStatusEffectBase_GetLingerTime::ReturnValue' has a wrong offset!");

// Function TheK26.K26P01.Authority_OnBlockTimerDone
// 0x0008 (0x0008 - 0x0000)
struct K26P01_Authority_OnBlockTimerDone final
{
public:
	class AGenerator*                             generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26P01_Authority_OnBlockTimerDone) == 0x000008, "Wrong alignment on K26P01_Authority_OnBlockTimerDone");
static_assert(sizeof(K26P01_Authority_OnBlockTimerDone) == 0x000008, "Wrong size on K26P01_Authority_OnBlockTimerDone");
static_assert(offsetof(K26P01_Authority_OnBlockTimerDone, generator) == 0x000000, "Member 'K26P01_Authority_OnBlockTimerDone::generator' has a wrong offset!");

// Function TheK26.K26P02.Authority_OnSurvivorHookedOnScourgeHook
// 0x0028 (0x0028 - 0x0000)
struct K26P02_Authority_OnSurvivorHookedOnScourgeHook final
{
public:
	struct FGameEventData                         gameEventData;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26P02_Authority_OnSurvivorHookedOnScourgeHook) == 0x000008, "Wrong alignment on K26P02_Authority_OnSurvivorHookedOnScourgeHook");
static_assert(sizeof(K26P02_Authority_OnSurvivorHookedOnScourgeHook) == 0x000028, "Wrong size on K26P02_Authority_OnSurvivorHookedOnScourgeHook");
static_assert(offsetof(K26P02_Authority_OnSurvivorHookedOnScourgeHook, gameEventData) == 0x000000, "Member 'K26P02_Authority_OnSurvivorHookedOnScourgeHook::gameEventData' has a wrong offset!");

// Function TheK26.K26P02.Cosmetic_MakeSurvivorScream
// 0x0008 (0x0008 - 0x0000)
struct K26P02_Cosmetic_MakeSurvivorScream final
{
public:
	const class ADBDPlayer*                       screamingSurvivor;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26P02_Cosmetic_MakeSurvivorScream) == 0x000008, "Wrong alignment on K26P02_Cosmetic_MakeSurvivorScream");
static_assert(sizeof(K26P02_Cosmetic_MakeSurvivorScream) == 0x000008, "Wrong size on K26P02_Cosmetic_MakeSurvivorScream");
static_assert(offsetof(K26P02_Cosmetic_MakeSurvivorScream, screamingSurvivor) == 0x000000, "Member 'K26P02_Cosmetic_MakeSurvivorScream::screamingSurvivor' has a wrong offset!");

// Function TheK26.K26P02.Multicast_TriggerPerk
// 0x0008 (0x0008 - 0x0000)
struct K26P02_Multicast_TriggerPerk final
{
public:
	class AGenerator*                             explodingGenerator;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26P02_Multicast_TriggerPerk) == 0x000008, "Wrong alignment on K26P02_Multicast_TriggerPerk");
static_assert(sizeof(K26P02_Multicast_TriggerPerk) == 0x000008, "Wrong size on K26P02_Multicast_TriggerPerk");
static_assert(offsetof(K26P02_Multicast_TriggerPerk, explodingGenerator) == 0x000000, "Member 'K26P02_Multicast_TriggerPerk::explodingGenerator' has a wrong offset!");

// Function TheK26.K26P02.GetGeneratorRegressPercentageAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K26P02_GetGeneratorRegressPercentageAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26P02_GetGeneratorRegressPercentageAtLevel) == 0x000004, "Wrong alignment on K26P02_GetGeneratorRegressPercentageAtLevel");
static_assert(sizeof(K26P02_GetGeneratorRegressPercentageAtLevel) == 0x000004, "Wrong size on K26P02_GetGeneratorRegressPercentageAtLevel");
static_assert(offsetof(K26P02_GetGeneratorRegressPercentageAtLevel, ReturnValue) == 0x000000, "Member 'K26P02_GetGeneratorRegressPercentageAtLevel::ReturnValue' has a wrong offset!");

// Function TheK26.K26PathHandlerComponent.Authority_OnMaxAmmoSet
// 0x0004 (0x0004 - 0x0000)
struct K26PathHandlerComponent_Authority_OnMaxAmmoSet final
{
public:
	int32                                         maxAmmo;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PathHandlerComponent_Authority_OnMaxAmmoSet) == 0x000004, "Wrong alignment on K26PathHandlerComponent_Authority_OnMaxAmmoSet");
static_assert(sizeof(K26PathHandlerComponent_Authority_OnMaxAmmoSet) == 0x000004, "Wrong size on K26PathHandlerComponent_Authority_OnMaxAmmoSet");
static_assert(offsetof(K26PathHandlerComponent_Authority_OnMaxAmmoSet, maxAmmo) == 0x000000, "Member 'K26PathHandlerComponent_Authority_OnMaxAmmoSet::maxAmmo' has a wrong offset!");

// Function TheK26.K26PathHandlerComponent.Multicast_FillAvailablePathArray
// 0x0004 (0x0004 - 0x0000)
struct K26PathHandlerComponent_Multicast_FillAvailablePathArray final
{
public:
	int32                                         maxAmmo;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PathHandlerComponent_Multicast_FillAvailablePathArray) == 0x000004, "Wrong alignment on K26PathHandlerComponent_Multicast_FillAvailablePathArray");
static_assert(sizeof(K26PathHandlerComponent_Multicast_FillAvailablePathArray) == 0x000004, "Wrong size on K26PathHandlerComponent_Multicast_FillAvailablePathArray");
static_assert(offsetof(K26PathHandlerComponent_Multicast_FillAvailablePathArray, maxAmmo) == 0x000000, "Member 'K26PathHandlerComponent_Multicast_FillAvailablePathArray::maxAmmo' has a wrong offset!");

// Function TheK26.K26PathHandlerComponent.SetDependencies
// 0x0010 (0x0010 - 0x0000)
struct K26PathHandlerComponent_SetDependencies final
{
public:
	class UK26AmmoHandlerComponent*               ammoHandler;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UK26CrowPlacementValidatorComponent*    placementValidator;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PathHandlerComponent_SetDependencies) == 0x000008, "Wrong alignment on K26PathHandlerComponent_SetDependencies");
static_assert(sizeof(K26PathHandlerComponent_SetDependencies) == 0x000010, "Wrong size on K26PathHandlerComponent_SetDependencies");
static_assert(offsetof(K26PathHandlerComponent_SetDependencies, ammoHandler) == 0x000000, "Member 'K26PathHandlerComponent_SetDependencies::ammoHandler' has a wrong offset!");
static_assert(offsetof(K26PathHandlerComponent_SetDependencies, placementValidator) == 0x000008, "Member 'K26PathHandlerComponent_SetDependencies::placementValidator' has a wrong offset!");

// Function TheK26.K26PowerChargePresentationItemProgressComponent.SetDependencies
// 0x0008 (0x0008 - 0x0000)
struct K26PowerChargePresentationItemProgressComponent_SetDependencies final
{
public:
	class UK26AmmoHandlerComponent*               ammoHandler;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PowerChargePresentationItemProgressComponent_SetDependencies) == 0x000008, "Wrong alignment on K26PowerChargePresentationItemProgressComponent_SetDependencies");
static_assert(sizeof(K26PowerChargePresentationItemProgressComponent_SetDependencies) == 0x000008, "Wrong size on K26PowerChargePresentationItemProgressComponent_SetDependencies");
static_assert(offsetof(K26PowerChargePresentationItemProgressComponent_SetDependencies, ammoHandler) == 0x000000, "Member 'K26PowerChargePresentationItemProgressComponent_SetDependencies::ammoHandler' has a wrong offset!");

// Function TheK26.K26PowerChargePresentationPowerFadeComponent.SetDependencies
// 0x0008 (0x0008 - 0x0000)
struct K26PowerChargePresentationPowerFadeComponent_SetDependencies final
{
public:
	class UK26AmmoHandlerComponent*               ammoHandler;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PowerChargePresentationPowerFadeComponent_SetDependencies) == 0x000008, "Wrong alignment on K26PowerChargePresentationPowerFadeComponent_SetDependencies");
static_assert(sizeof(K26PowerChargePresentationPowerFadeComponent_SetDependencies) == 0x000008, "Wrong size on K26PowerChargePresentationPowerFadeComponent_SetDependencies");
static_assert(offsetof(K26PowerChargePresentationPowerFadeComponent_SetDependencies, ammoHandler) == 0x000000, "Member 'K26PowerChargePresentationPowerFadeComponent_SetDependencies::ammoHandler' has a wrong offset!");

// Function TheK26.K26PowerOutlineUpdateStrategy.SetOutlineVisibility
// 0x0001 (0x0001 - 0x0000)
struct K26PowerOutlineUpdateStrategy_SetOutlineVisibility final
{
public:
	bool                                          isActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PowerOutlineUpdateStrategy_SetOutlineVisibility) == 0x000001, "Wrong alignment on K26PowerOutlineUpdateStrategy_SetOutlineVisibility");
static_assert(sizeof(K26PowerOutlineUpdateStrategy_SetOutlineVisibility) == 0x000001, "Wrong size on K26PowerOutlineUpdateStrategy_SetOutlineVisibility");
static_assert(offsetof(K26PowerOutlineUpdateStrategy_SetOutlineVisibility, isActive) == 0x000000, "Member 'K26PowerOutlineUpdateStrategy_SetOutlineVisibility::isActive' has a wrong offset!");

// Function TheK26.K26PowerOutlineUpdateStrategy.IsOutlineVisible
// 0x0001 (0x0001 - 0x0000)
struct K26PowerOutlineUpdateStrategy_IsOutlineVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PowerOutlineUpdateStrategy_IsOutlineVisible) == 0x000001, "Wrong alignment on K26PowerOutlineUpdateStrategy_IsOutlineVisible");
static_assert(sizeof(K26PowerOutlineUpdateStrategy_IsOutlineVisible) == 0x000001, "Wrong size on K26PowerOutlineUpdateStrategy_IsOutlineVisible");
static_assert(offsetof(K26PowerOutlineUpdateStrategy_IsOutlineVisible, ReturnValue) == 0x000000, "Member 'K26PowerOutlineUpdateStrategy_IsOutlineVisible::ReturnValue' has a wrong offset!");

// Function TheK26.K26PowerStatusHandlerComponent.Authority_OnKillerInstinctTimePassed
// 0x0008 (0x0008 - 0x0000)
struct K26PowerStatusHandlerComponent_Authority_OnKillerInstinctTimePassed final
{
public:
	const class ACamperPlayer*                    survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PowerStatusHandlerComponent_Authority_OnKillerInstinctTimePassed) == 0x000008, "Wrong alignment on K26PowerStatusHandlerComponent_Authority_OnKillerInstinctTimePassed");
static_assert(sizeof(K26PowerStatusHandlerComponent_Authority_OnKillerInstinctTimePassed) == 0x000008, "Wrong size on K26PowerStatusHandlerComponent_Authority_OnKillerInstinctTimePassed");
static_assert(offsetof(K26PowerStatusHandlerComponent_Authority_OnKillerInstinctTimePassed, survivor) == 0x000000, "Member 'K26PowerStatusHandlerComponent_Authority_OnKillerInstinctTimePassed::survivor' has a wrong offset!");

// Function TheK26.K26PowerStatusHandlerComponent.Authority_OnSurvivorAdded
// 0x0008 (0x0008 - 0x0000)
struct K26PowerStatusHandlerComponent_Authority_OnSurvivorAdded final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PowerStatusHandlerComponent_Authority_OnSurvivorAdded) == 0x000008, "Wrong alignment on K26PowerStatusHandlerComponent_Authority_OnSurvivorAdded");
static_assert(sizeof(K26PowerStatusHandlerComponent_Authority_OnSurvivorAdded) == 0x000008, "Wrong size on K26PowerStatusHandlerComponent_Authority_OnSurvivorAdded");
static_assert(offsetof(K26PowerStatusHandlerComponent_Authority_OnSurvivorAdded, survivor) == 0x000000, "Member 'K26PowerStatusHandlerComponent_Authority_OnSurvivorAdded::survivor' has a wrong offset!");

// Function TheK26.K26PowerStatusHandlerComponent.Cosmetic_OnCrowDamagedSurvivor
// 0x0010 (0x0010 - 0x0000)
struct K26PowerStatusHandlerComponent_Cosmetic_OnCrowDamagedSurvivor final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          survivor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PowerStatusHandlerComponent_Cosmetic_OnCrowDamagedSurvivor) == 0x000008, "Wrong alignment on K26PowerStatusHandlerComponent_Cosmetic_OnCrowDamagedSurvivor");
static_assert(sizeof(K26PowerStatusHandlerComponent_Cosmetic_OnCrowDamagedSurvivor) == 0x000010, "Wrong size on K26PowerStatusHandlerComponent_Cosmetic_OnCrowDamagedSurvivor");
static_assert(offsetof(K26PowerStatusHandlerComponent_Cosmetic_OnCrowDamagedSurvivor, killer) == 0x000000, "Member 'K26PowerStatusHandlerComponent_Cosmetic_OnCrowDamagedSurvivor::killer' has a wrong offset!");
static_assert(offsetof(K26PowerStatusHandlerComponent_Cosmetic_OnCrowDamagedSurvivor, survivor) == 0x000008, "Member 'K26PowerStatusHandlerComponent_Cosmetic_OnCrowDamagedSurvivor::survivor' has a wrong offset!");

// Function TheK26.K26PowerStatusHandlerComponent.Cosmetic_OnCrowIdleInterrupt
// 0x0008 (0x0008 - 0x0000)
struct K26PowerStatusHandlerComponent_Cosmetic_OnCrowIdleInterrupt final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PowerStatusHandlerComponent_Cosmetic_OnCrowIdleInterrupt) == 0x000008, "Wrong alignment on K26PowerStatusHandlerComponent_Cosmetic_OnCrowIdleInterrupt");
static_assert(sizeof(K26PowerStatusHandlerComponent_Cosmetic_OnCrowIdleInterrupt) == 0x000008, "Wrong size on K26PowerStatusHandlerComponent_Cosmetic_OnCrowIdleInterrupt");
static_assert(offsetof(K26PowerStatusHandlerComponent_Cosmetic_OnCrowIdleInterrupt, survivor) == 0x000000, "Member 'K26PowerStatusHandlerComponent_Cosmetic_OnCrowIdleInterrupt::survivor' has a wrong offset!");

// Function TheK26.K26PowerStatusHandlerComponent.Multicast_OnCrowAttached
// 0x0008 (0x0008 - 0x0000)
struct K26PowerStatusHandlerComponent_Multicast_OnCrowAttached final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PowerStatusHandlerComponent_Multicast_OnCrowAttached) == 0x000008, "Wrong alignment on K26PowerStatusHandlerComponent_Multicast_OnCrowAttached");
static_assert(sizeof(K26PowerStatusHandlerComponent_Multicast_OnCrowAttached) == 0x000008, "Wrong size on K26PowerStatusHandlerComponent_Multicast_OnCrowAttached");
static_assert(offsetof(K26PowerStatusHandlerComponent_Multicast_OnCrowAttached, survivor) == 0x000000, "Member 'K26PowerStatusHandlerComponent_Multicast_OnCrowAttached::survivor' has a wrong offset!");

// Function TheK26.K26PowerStatusHandlerComponent.Multicast_OnCrowDamagedSurvivor
// 0x0010 (0x0010 - 0x0000)
struct K26PowerStatusHandlerComponent_Multicast_OnCrowDamagedSurvivor final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          survivor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PowerStatusHandlerComponent_Multicast_OnCrowDamagedSurvivor) == 0x000008, "Wrong alignment on K26PowerStatusHandlerComponent_Multicast_OnCrowDamagedSurvivor");
static_assert(sizeof(K26PowerStatusHandlerComponent_Multicast_OnCrowDamagedSurvivor) == 0x000010, "Wrong size on K26PowerStatusHandlerComponent_Multicast_OnCrowDamagedSurvivor");
static_assert(offsetof(K26PowerStatusHandlerComponent_Multicast_OnCrowDamagedSurvivor, killer) == 0x000000, "Member 'K26PowerStatusHandlerComponent_Multicast_OnCrowDamagedSurvivor::killer' has a wrong offset!");
static_assert(offsetof(K26PowerStatusHandlerComponent_Multicast_OnCrowDamagedSurvivor, survivor) == 0x000008, "Member 'K26PowerStatusHandlerComponent_Multicast_OnCrowDamagedSurvivor::survivor' has a wrong offset!");

// Function TheK26.K26PowerStatusHandlerComponent.Multicast_OnCrowDetached
// 0x0008 (0x0008 - 0x0000)
struct K26PowerStatusHandlerComponent_Multicast_OnCrowDetached final
{
public:
	const class ACamperPlayer*                    survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PowerStatusHandlerComponent_Multicast_OnCrowDetached) == 0x000008, "Wrong alignment on K26PowerStatusHandlerComponent_Multicast_OnCrowDetached");
static_assert(sizeof(K26PowerStatusHandlerComponent_Multicast_OnCrowDetached) == 0x000008, "Wrong size on K26PowerStatusHandlerComponent_Multicast_OnCrowDetached");
static_assert(offsetof(K26PowerStatusHandlerComponent_Multicast_OnCrowDetached, survivor) == 0x000000, "Member 'K26PowerStatusHandlerComponent_Multicast_OnCrowDetached::survivor' has a wrong offset!");

// Function TheK26.K26PowerStatusHandlerComponent.Multicast_OnIdleCrowInterrupt
// 0x0008 (0x0008 - 0x0000)
struct K26PowerStatusHandlerComponent_Multicast_OnIdleCrowInterrupt final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PowerStatusHandlerComponent_Multicast_OnIdleCrowInterrupt) == 0x000008, "Wrong alignment on K26PowerStatusHandlerComponent_Multicast_OnIdleCrowInterrupt");
static_assert(sizeof(K26PowerStatusHandlerComponent_Multicast_OnIdleCrowInterrupt) == 0x000008, "Wrong size on K26PowerStatusHandlerComponent_Multicast_OnIdleCrowInterrupt");
static_assert(offsetof(K26PowerStatusHandlerComponent_Multicast_OnIdleCrowInterrupt, survivor) == 0x000000, "Member 'K26PowerStatusHandlerComponent_Multicast_OnIdleCrowInterrupt::survivor' has a wrong offset!");

// Function TheK26.K26PowerStatusHandlerComponent.Multicast_OnStartRemovingCrow
// 0x0008 (0x0008 - 0x0000)
struct K26PowerStatusHandlerComponent_Multicast_OnStartRemovingCrow final
{
public:
	const class ACamperPlayer*                    survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PowerStatusHandlerComponent_Multicast_OnStartRemovingCrow) == 0x000008, "Wrong alignment on K26PowerStatusHandlerComponent_Multicast_OnStartRemovingCrow");
static_assert(sizeof(K26PowerStatusHandlerComponent_Multicast_OnStartRemovingCrow) == 0x000008, "Wrong size on K26PowerStatusHandlerComponent_Multicast_OnStartRemovingCrow");
static_assert(offsetof(K26PowerStatusHandlerComponent_Multicast_OnStartRemovingCrow, survivor) == 0x000000, "Member 'K26PowerStatusHandlerComponent_Multicast_OnStartRemovingCrow::survivor' has a wrong offset!");

// Function TheK26.K26PowerStatusHandlerComponent.Multicast_OnStopRemovingCrow
// 0x0008 (0x0008 - 0x0000)
struct K26PowerStatusHandlerComponent_Multicast_OnStopRemovingCrow final
{
public:
	const class ACamperPlayer*                    survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26PowerStatusHandlerComponent_Multicast_OnStopRemovingCrow) == 0x000008, "Wrong alignment on K26PowerStatusHandlerComponent_Multicast_OnStopRemovingCrow");
static_assert(sizeof(K26PowerStatusHandlerComponent_Multicast_OnStopRemovingCrow) == 0x000008, "Wrong size on K26PowerStatusHandlerComponent_Multicast_OnStopRemovingCrow");
static_assert(offsetof(K26PowerStatusHandlerComponent_Multicast_OnStopRemovingCrow, survivor) == 0x000000, "Member 'K26PowerStatusHandlerComponent_Multicast_OnStopRemovingCrow::survivor' has a wrong offset!");

// Function TheK26.K26SpawnCrowProjectileChargeableInteractionDefinition.CanSummonCrow
// 0x0001 (0x0001 - 0x0000)
struct K26SpawnCrowProjectileChargeableInteractionDefinition_CanSummonCrow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26SpawnCrowProjectileChargeableInteractionDefinition_CanSummonCrow) == 0x000001, "Wrong alignment on K26SpawnCrowProjectileChargeableInteractionDefinition_CanSummonCrow");
static_assert(sizeof(K26SpawnCrowProjectileChargeableInteractionDefinition_CanSummonCrow) == 0x000001, "Wrong size on K26SpawnCrowProjectileChargeableInteractionDefinition_CanSummonCrow");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_CanSummonCrow, ReturnValue) == 0x000000, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_CanSummonCrow::ReturnValue' has a wrong offset!");

// Function TheK26.K26SpawnCrowProjectileChargeableInteractionDefinition.CanSummonCrowOnceFullyCharged
// 0x0001 (0x0001 - 0x0000)
struct K26SpawnCrowProjectileChargeableInteractionDefinition_CanSummonCrowOnceFullyCharged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26SpawnCrowProjectileChargeableInteractionDefinition_CanSummonCrowOnceFullyCharged) == 0x000001, "Wrong alignment on K26SpawnCrowProjectileChargeableInteractionDefinition_CanSummonCrowOnceFullyCharged");
static_assert(sizeof(K26SpawnCrowProjectileChargeableInteractionDefinition_CanSummonCrowOnceFullyCharged) == 0x000001, "Wrong size on K26SpawnCrowProjectileChargeableInteractionDefinition_CanSummonCrowOnceFullyCharged");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_CanSummonCrowOnceFullyCharged, ReturnValue) == 0x000000, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_CanSummonCrowOnceFullyCharged::ReturnValue' has a wrong offset!");

// Function TheK26.K26SpawnCrowProjectileChargeableInteractionDefinition.Cosmetic_LocalOnSummonCooldownComplete
// 0x0008 (0x0008 - 0x0000)
struct K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_LocalOnSummonCooldownComplete final
{
public:
	int32                                         amountOfAmmoLeft;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isInteractionActive;                               // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_LocalOnSummonCooldownComplete) == 0x000004, "Wrong alignment on K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_LocalOnSummonCooldownComplete");
static_assert(sizeof(K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_LocalOnSummonCooldownComplete) == 0x000008, "Wrong size on K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_LocalOnSummonCooldownComplete");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_LocalOnSummonCooldownComplete, amountOfAmmoLeft) == 0x000000, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_LocalOnSummonCooldownComplete::amountOfAmmoLeft' has a wrong offset!");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_LocalOnSummonCooldownComplete, isInteractionActive) == 0x000004, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_LocalOnSummonCooldownComplete::isInteractionActive' has a wrong offset!");

// Function TheK26.K26SpawnCrowProjectileChargeableInteractionDefinition.Cosmetic_OnFullyCharged
// 0x0008 (0x0008 - 0x0000)
struct K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_OnFullyCharged final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_OnFullyCharged) == 0x000008, "Wrong alignment on K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_OnFullyCharged");
static_assert(sizeof(K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_OnFullyCharged) == 0x000008, "Wrong size on K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_OnFullyCharged");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_OnFullyCharged, player) == 0x000000, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_Cosmetic_OnFullyCharged::player' has a wrong offset!");

// Function TheK26.K26SpawnCrowProjectileChargeableInteractionDefinition.Local_OnGlobalCooldownDone
// 0x0008 (0x0008 - 0x0000)
struct K26SpawnCrowProjectileChargeableInteractionDefinition_Local_OnGlobalCooldownDone final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26SpawnCrowProjectileChargeableInteractionDefinition_Local_OnGlobalCooldownDone) == 0x000008, "Wrong alignment on K26SpawnCrowProjectileChargeableInteractionDefinition_Local_OnGlobalCooldownDone");
static_assert(sizeof(K26SpawnCrowProjectileChargeableInteractionDefinition_Local_OnGlobalCooldownDone) == 0x000008, "Wrong size on K26SpawnCrowProjectileChargeableInteractionDefinition_Local_OnGlobalCooldownDone");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_Local_OnGlobalCooldownDone, player) == 0x000000, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_Local_OnGlobalCooldownDone::player' has a wrong offset!");

// Function TheK26.K26SpawnCrowProjectileChargeableInteractionDefinition.Multicast_OnK26CrowSummoned
// 0x0010 (0x0010 - 0x0000)
struct K26SpawnCrowProjectileChargeableInteractionDefinition_Multicast_OnK26CrowSummoned final
{
public:
	const class ASlasherPlayer*                   killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         remainingAmmo;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxAmmo;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26SpawnCrowProjectileChargeableInteractionDefinition_Multicast_OnK26CrowSummoned) == 0x000008, "Wrong alignment on K26SpawnCrowProjectileChargeableInteractionDefinition_Multicast_OnK26CrowSummoned");
static_assert(sizeof(K26SpawnCrowProjectileChargeableInteractionDefinition_Multicast_OnK26CrowSummoned) == 0x000010, "Wrong size on K26SpawnCrowProjectileChargeableInteractionDefinition_Multicast_OnK26CrowSummoned");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_Multicast_OnK26CrowSummoned, killer) == 0x000000, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_Multicast_OnK26CrowSummoned::killer' has a wrong offset!");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_Multicast_OnK26CrowSummoned, remainingAmmo) == 0x000008, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_Multicast_OnK26CrowSummoned::remainingAmmo' has a wrong offset!");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_Multicast_OnK26CrowSummoned, maxAmmo) == 0x00000C, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_Multicast_OnK26CrowSummoned::maxAmmo' has a wrong offset!");

// Function TheK26.K26SpawnCrowProjectileChargeableInteractionDefinition.OnConfirmButtonPressed
// 0x0008 (0x0008 - 0x0000)
struct K26SpawnCrowProjectileChargeableInteractionDefinition_OnConfirmButtonPressed final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26SpawnCrowProjectileChargeableInteractionDefinition_OnConfirmButtonPressed) == 0x000008, "Wrong alignment on K26SpawnCrowProjectileChargeableInteractionDefinition_OnConfirmButtonPressed");
static_assert(sizeof(K26SpawnCrowProjectileChargeableInteractionDefinition_OnConfirmButtonPressed) == 0x000008, "Wrong size on K26SpawnCrowProjectileChargeableInteractionDefinition_OnConfirmButtonPressed");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_OnConfirmButtonPressed, killer) == 0x000000, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_OnConfirmButtonPressed::killer' has a wrong offset!");

// Function TheK26.K26SpawnCrowProjectileChargeableInteractionDefinition.Server_PlaceProjectileWithPath
// 0x0018 (0x0018 - 0x0000)
struct K26SpawnCrowProjectileChargeableInteractionDefinition_Server_PlaceProjectileWithPath final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                projectileSpawnPoint;                              // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         killerLocalTime;                                   // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26SpawnCrowProjectileChargeableInteractionDefinition_Server_PlaceProjectileWithPath) == 0x000008, "Wrong alignment on K26SpawnCrowProjectileChargeableInteractionDefinition_Server_PlaceProjectileWithPath");
static_assert(sizeof(K26SpawnCrowProjectileChargeableInteractionDefinition_Server_PlaceProjectileWithPath) == 0x000018, "Wrong size on K26SpawnCrowProjectileChargeableInteractionDefinition_Server_PlaceProjectileWithPath");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_Server_PlaceProjectileWithPath, killer) == 0x000000, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_Server_PlaceProjectileWithPath::killer' has a wrong offset!");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_Server_PlaceProjectileWithPath, projectileSpawnPoint) == 0x000008, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_Server_PlaceProjectileWithPath::projectileSpawnPoint' has a wrong offset!");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_Server_PlaceProjectileWithPath, killerLocalTime) == 0x000014, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_Server_PlaceProjectileWithPath::killerLocalTime' has a wrong offset!");

// Function TheK26.K26SpawnCrowProjectileChargeableInteractionDefinition.SetDependencies
// 0x0018 (0x0018 - 0x0000)
struct K26SpawnCrowProjectileChargeableInteractionDefinition_SetDependencies final
{
public:
	class UK26AmmoHandlerComponent*               ammoHandler;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UK26PathHandlerComponent*               pathHandler;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UK26PowerStatusHandlerComponent*        statusHandler;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26SpawnCrowProjectileChargeableInteractionDefinition_SetDependencies) == 0x000008, "Wrong alignment on K26SpawnCrowProjectileChargeableInteractionDefinition_SetDependencies");
static_assert(sizeof(K26SpawnCrowProjectileChargeableInteractionDefinition_SetDependencies) == 0x000018, "Wrong size on K26SpawnCrowProjectileChargeableInteractionDefinition_SetDependencies");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_SetDependencies, ammoHandler) == 0x000000, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_SetDependencies::ammoHandler' has a wrong offset!");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_SetDependencies, pathHandler) == 0x000008, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_SetDependencies::pathHandler' has a wrong offset!");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_SetDependencies, statusHandler) == 0x000010, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_SetDependencies::statusHandler' has a wrong offset!");

// Function TheK26.K26SpawnCrowProjectileChargeableInteractionDefinition.IsSummonOnCooldown
// 0x0001 (0x0001 - 0x0000)
struct K26SpawnCrowProjectileChargeableInteractionDefinition_IsSummonOnCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K26SpawnCrowProjectileChargeableInteractionDefinition_IsSummonOnCooldown) == 0x000001, "Wrong alignment on K26SpawnCrowProjectileChargeableInteractionDefinition_IsSummonOnCooldown");
static_assert(sizeof(K26SpawnCrowProjectileChargeableInteractionDefinition_IsSummonOnCooldown) == 0x000001, "Wrong size on K26SpawnCrowProjectileChargeableInteractionDefinition_IsSummonOnCooldown");
static_assert(offsetof(K26SpawnCrowProjectileChargeableInteractionDefinition_IsSummonOnCooldown, ReturnValue) == 0x000000, "Member 'K26SpawnCrowProjectileChargeableInteractionDefinition_IsSummonOnCooldown::ReturnValue' has a wrong offset!");

// Function TheK26.RekindledTotem.CleanseTotem
// 0x0010 (0x0010 - 0x0000)
struct RekindledTotem_CleanseTotem final
{
public:
	class ATotem*                                 totem;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETotemState                                   oldTotemState;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RekindledTotem_CleanseTotem) == 0x000008, "Wrong alignment on RekindledTotem_CleanseTotem");
static_assert(sizeof(RekindledTotem_CleanseTotem) == 0x000010, "Wrong size on RekindledTotem_CleanseTotem");
static_assert(offsetof(RekindledTotem_CleanseTotem, totem) == 0x000000, "Member 'RekindledTotem_CleanseTotem::totem' has a wrong offset!");
static_assert(offsetof(RekindledTotem_CleanseTotem, oldTotemState) == 0x000008, "Member 'RekindledTotem_CleanseTotem::oldTotemState' has a wrong offset!");

// Function TheK26.RekindledTotem.Cosmetic_HideShadowTotem
// 0x0001 (0x0001 - 0x0000)
struct RekindledTotem_Cosmetic_HideShadowTotem final
{
public:
	bool                                          instant;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RekindledTotem_Cosmetic_HideShadowTotem) == 0x000001, "Wrong alignment on RekindledTotem_Cosmetic_HideShadowTotem");
static_assert(sizeof(RekindledTotem_Cosmetic_HideShadowTotem) == 0x000001, "Wrong size on RekindledTotem_Cosmetic_HideShadowTotem");
static_assert(offsetof(RekindledTotem_Cosmetic_HideShadowTotem, instant) == 0x000000, "Member 'RekindledTotem_Cosmetic_HideShadowTotem::instant' has a wrong offset!");

// Function TheK26.RekindledTotem.Cosmetic_ShowShadowTotem
// 0x0001 (0x0001 - 0x0000)
struct RekindledTotem_Cosmetic_ShowShadowTotem final
{
public:
	bool                                          instant;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RekindledTotem_Cosmetic_ShowShadowTotem) == 0x000001, "Wrong alignment on RekindledTotem_Cosmetic_ShowShadowTotem");
static_assert(sizeof(RekindledTotem_Cosmetic_ShowShadowTotem) == 0x000001, "Wrong size on RekindledTotem_Cosmetic_ShowShadowTotem");
static_assert(offsetof(RekindledTotem_Cosmetic_ShowShadowTotem, instant) == 0x000000, "Member 'RekindledTotem_Cosmetic_ShowShadowTotem::instant' has a wrong offset!");

// Function TheK26.RekindledTotem.OnParentTotemEndPlay
// 0x0010 (0x0010 - 0x0000)
struct RekindledTotem_OnParentTotemEndPlay final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                endPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RekindledTotem_OnParentTotemEndPlay) == 0x000008, "Wrong alignment on RekindledTotem_OnParentTotemEndPlay");
static_assert(sizeof(RekindledTotem_OnParentTotemEndPlay) == 0x000010, "Wrong size on RekindledTotem_OnParentTotemEndPlay");
static_assert(offsetof(RekindledTotem_OnParentTotemEndPlay, actor) == 0x000000, "Member 'RekindledTotem_OnParentTotemEndPlay::actor' has a wrong offset!");
static_assert(offsetof(RekindledTotem_OnParentTotemEndPlay, endPlayReason) == 0x000008, "Member 'RekindledTotem_OnParentTotemEndPlay::endPlayReason' has a wrong offset!");

// Function TheK26.RekindledTotem.RebuildTotem
// 0x0008 (0x0008 - 0x0000)
struct RekindledTotem_RebuildTotem final
{
public:
	class ATotem*                                 totem;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RekindledTotem_RebuildTotem) == 0x000008, "Wrong alignment on RekindledTotem_RebuildTotem");
static_assert(sizeof(RekindledTotem_RebuildTotem) == 0x000008, "Wrong size on RekindledTotem_RebuildTotem");
static_assert(offsetof(RekindledTotem_RebuildTotem, totem) == 0x000000, "Member 'RekindledTotem_RebuildTotem::totem' has a wrong offset!");

}

