#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheLegion

#include "Basic.hpp"

#include "DBDAnalytics_structs.hpp"


namespace SDK
{

// Enum TheLegion.EFrenzyEndReason
// NumValues: 0x0008
enum class EFrenzyEndReason : uint8
{
	OutOfTime                                = 0,
	Manual                                   = 1,
	PickUpCamper                             = 2,
	Stunned                                  = 3,
	Mori                                     = 4,
	Blinded                                  = 5,
	ChainComplete                            = 6,
	EFrenzyEndReason_MAX                     = 7,
};

// ScriptStruct TheLegion.LegionSurvivorAnalytics
// 0x0020 (0x00C8 - 0x00A8)
struct FLegionSurvivorAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchId;                                           // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeepWoundCount;                                    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrenzyEffectivements;                              // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeepWoundDying;                                    // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeepWoundEscape;                                   // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLegionSurvivorAnalytics) == 0x000008, "Wrong alignment on FLegionSurvivorAnalytics");
static_assert(sizeof(FLegionSurvivorAnalytics) == 0x0000C8, "Wrong size on FLegionSurvivorAnalytics");
static_assert(offsetof(FLegionSurvivorAnalytics, MatchId) == 0x0000A8, "Member 'FLegionSurvivorAnalytics::MatchId' has a wrong offset!");
static_assert(offsetof(FLegionSurvivorAnalytics, DeepWoundCount) == 0x0000B8, "Member 'FLegionSurvivorAnalytics::DeepWoundCount' has a wrong offset!");
static_assert(offsetof(FLegionSurvivorAnalytics, FrenzyEffectivements) == 0x0000BC, "Member 'FLegionSurvivorAnalytics::FrenzyEffectivements' has a wrong offset!");
static_assert(offsetof(FLegionSurvivorAnalytics, DeepWoundDying) == 0x0000C0, "Member 'FLegionSurvivorAnalytics::DeepWoundDying' has a wrong offset!");
static_assert(offsetof(FLegionSurvivorAnalytics, DeepWoundEscape) == 0x0000C4, "Member 'FLegionSurvivorAnalytics::DeepWoundEscape' has a wrong offset!");

// ScriptStruct TheLegion.LegionKillerAnalytics
// 0x0018 (0x00C0 - 0x00A8)
struct FLegionKillerAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchId;                                           // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Pallet;                                            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLegionKillerAnalytics) == 0x000008, "Wrong alignment on FLegionKillerAnalytics");
static_assert(sizeof(FLegionKillerAnalytics) == 0x0000C0, "Wrong size on FLegionKillerAnalytics");
static_assert(offsetof(FLegionKillerAnalytics, MatchId) == 0x0000A8, "Member 'FLegionKillerAnalytics::MatchId' has a wrong offset!");
static_assert(offsetof(FLegionKillerAnalytics, Pallet) == 0x0000B8, "Member 'FLegionKillerAnalytics::Pallet' has a wrong offset!");

}

