#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDCompetence

#include "Basic.hpp"

#include "DBDCompetence_classes.hpp"
#include "DBDCompetence_parameters.hpp"


namespace SDK
{

// Function DBDCompetence.HasPlayerReachedWiggleFillPercentCondition.Authority_OnOwnerWiggleChargePercentChanged
// (Final, Native, Private)
// Parameters:
// class UChargeableComponent*             chargeableComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   percentCompletionChange                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   totalPercentComplete                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHasPlayerReachedWiggleFillPercentCondition::Authority_OnOwnerWiggleChargePercentChanged(class UChargeableComponent* chargeableComponent, float percentCompletionChange, float totalPercentComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HasPlayerReachedWiggleFillPercentCondition", "Authority_OnOwnerWiggleChargePercentChanged");

	Params::HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged Parms{};

	Parms.chargeableComponent = chargeableComponent;
	Parms.percentCompletionChange = percentCompletionChange;
	Parms.totalPercentComplete = totalPercentComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HasPlayerReachedWiggleFillPercentCondition.OnRep_IsWigglePercentReached
// (Final, Native, Private)

void UHasPlayerReachedWiggleFillPercentCondition::OnRep_IsWigglePercentReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HasPlayerReachedWiggleFillPercentCondition", "OnRep_IsWigglePercentReached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.NoOneLeftBehind.Authority_OnExitGatePoweredApplicableChanged
// (Final, Native, Private)
// Parameters:
// class UGameplayModifierContainer*       container                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    active                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNoOneLeftBehind::Authority_OnExitGatePoweredApplicableChanged(class UGameplayModifierContainer* container, bool active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NoOneLeftBehind", "Authority_OnExitGatePoweredApplicableChanged");

	Params::NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged Parms{};

	Parms.container = container;
	Parms.active = active;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HeadOn.Authority_ActivatePerk
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UHeadOn::Authority_ActivatePerk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HeadOn", "Authority_ActivatePerk");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HeadOn.Multicast_TriggerStunOnActor
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class UObject*                          stunnableInterfaceUObject                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       stunner                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHeadOn::Multicast_TriggerStunOnActor(class UObject* stunnableInterfaceUObject, class ADBDPlayer* stunner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HeadOn", "Multicast_TriggerStunOnActor");

	Params::HeadOn_Multicast_TriggerStunOnActor Parms{};

	Parms.stunnableInterfaceUObject = stunnableInterfaceUObject;
	Parms.stunner = stunner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HeadOn.OnHeadOnAnimationComplete
// (Final, Native, Public, BlueprintCallable)

void UHeadOn::OnHeadOnAnimationComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HeadOn", "OnHeadOnAnimationComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HeadOn.OnPawnOverlapEnter
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              hitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           otherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              otherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   otherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                sweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UHeadOn::OnPawnOverlapEnter(class UPrimitiveComponent* hitComponent, class AActor* otherActor, class UPrimitiveComponent* otherComp, int32 otherBodyIndex, bool bFromSweep, const struct FHitResult& sweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HeadOn", "OnPawnOverlapEnter");

	Params::HeadOn_OnPawnOverlapEnter Parms{};

	Parms.hitComponent = hitComponent;
	Parms.otherActor = otherActor;
	Parms.otherComp = otherComp;
	Parms.otherBodyIndex = otherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.sweepResult = std::move(sweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HeadOn.OnPawnOverlapExit
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              hitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           otherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              otherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   otherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHeadOn::OnPawnOverlapExit(class UPrimitiveComponent* hitComponent, class AActor* otherActor, class UPrimitiveComponent* otherComp, int32 otherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HeadOn", "OnPawnOverlapExit");

	Params::HeadOn_OnPawnOverlapExit Parms{};

	Parms.hitComponent = hitComponent;
	Parms.otherActor = otherActor;
	Parms.otherComp = otherComp;
	Parms.otherBodyIndex = otherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HeadOn.CanApplyHeadOnInteraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHeadOn::CanApplyHeadOnInteraction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HeadOn", "CanApplyHeadOnInteraction");

	Params::HeadOn_CanApplyHeadOnInteraction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.HeadOn.GetHideDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHeadOn::GetHideDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HeadOn", "GetHideDuration");

	Params::HeadOn_GetHideDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.ActivatableEnduranceEffect.Authority_Start
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             duration                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActivatableEnduranceEffect::Authority_Start(const float duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActivatableEnduranceEffect", "Authority_Start");

	Params::ActivatableEnduranceEffect_Authority_Start Parms{};

	Parms.duration = duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HemorrhageStatusEffect.Authority_OnSurvivorHealed
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FCamperHealResult&         healResult                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHemorrhageStatusEffect::Authority_OnSurvivorHealed(const struct FCamperHealResult& healResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HemorrhageStatusEffect", "Authority_OnSurvivorHealed");

	Params::HemorrhageStatusEffect_Authority_OnSurvivorHealed Parms{};

	Parms.healResult = std::move(healResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HemorrhageStatusEffect.OnStoppedHealing
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// const class ADBDPlayer*                 instigator                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ADBDPlayer*                 target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHemorrhageStatusEffect::OnStoppedHealing(const class ADBDPlayer* instigator, const class ADBDPlayer* target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HemorrhageStatusEffect", "OnStoppedHealing");

	Params::HemorrhageStatusEffect_OnStoppedHealing Parms{};

	Parms.instigator = instigator;
	Parms.target = target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.BaseLingeringStatusEffect.Authority_ActivateEffect
// (Final, Native, Protected, BlueprintCallable)

void UBaseLingeringStatusEffect::Authority_ActivateEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseLingeringStatusEffect", "Authority_ActivateEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.BaseLingeringStatusEffect.Authority_DeactivateEffect
// (Final, Native, Protected, BlueprintCallable)

void UBaseLingeringStatusEffect::Authority_DeactivateEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseLingeringStatusEffect", "Authority_DeactivateEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.BaseLingeringStatusEffect.SetLingerDuration
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   lingerDuration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseLingeringStatusEffect::SetLingerDuration(float lingerDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseLingeringStatusEffect", "SetLingerDuration");

	Params::BaseLingeringStatusEffect_SetLingerDuration Parms{};

	Parms.lingerDuration = lingerDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HexPerk.Authority_RevealCurseToAllSurvivors
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    revealed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHexPerk::Authority_RevealCurseToAllSurvivors(bool revealed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexPerk", "Authority_RevealCurseToAllSurvivors");

	Params::HexPerk_Authority_RevealCurseToAllSurvivors Parms{};

	Parms.revealed = revealed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HexPerk.Authority_SetCurseRevealedToPlayer
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// class ADBDPlayer*                       player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              revealed                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHexPerk::Authority_SetCurseRevealedToPlayer(class ADBDPlayer* player, const bool revealed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexPerk", "Authority_SetCurseRevealedToPlayer");

	Params::HexPerk_Authority_SetCurseRevealedToPlayer Parms{};

	Parms.player = player;
	Parms.revealed = revealed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HexPerk.OnRep_PlayersWhoKnowCurse
// (Final, Native, Private)

void UHexPerk::OnRep_PlayersWhoKnowCurse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexPerk", "OnRep_PlayersWhoKnowCurse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HexPerk.UpdateCursedStatusViewOnLocalPlayer
// (Final, Native, Protected, BlueprintCallable)

void UHexPerk::UpdateCursedStatusViewOnLocalPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexPerk", "UpdateCursedStatusViewOnLocalPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HexPerk.IsCurseRevealedToPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class ADBDPlayer*                 player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHexPerk::IsCurseRevealedToPlayer(const class ADBDPlayer* player) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexPerk", "IsCurseRevealedToPlayer");

	Params::HexPerk_IsCurseRevealedToPlayer Parms{};

	Parms.player = player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Whispers.Multicast_FireAudioEvent
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// const int32                             survivorsInRange                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWhispers::Multicast_FireAudioEvent(const int32 survivorsInRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Whispers", "Multicast_FireAudioEvent");

	Params::Whispers_Multicast_FireAudioEvent Parms{};

	Parms.survivorsInRange = survivorsInRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Whispers.OnRep_SurvivorsInRange
// (Final, Native, Private)

void UWhispers::OnRep_SurvivorsInRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Whispers", "OnRep_SurvivorsInRange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Whispers.OnWhispersAudio
// (Event, Protected, BlueprintEvent)

void UWhispers::OnWhispersAudio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Whispers", "OnWhispersAudio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDCompetence.HexDevourHope.GetMoveSpeedIncrement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   perkLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHexDevourHope::GetMoveSpeedIncrement(int32 perkLevel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexDevourHope", "GetMoveSpeedIncrement");

	Params::HexDevourHope_GetMoveSpeedIncrement Parms{};

	Parms.perkLevel = perkLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.HexDevourHope.GetRangeFromUnhookedSurvivorNeeded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   perkLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHexDevourHope::GetRangeFromUnhookedSurvivorNeeded(int32 perkLevel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexDevourHope", "GetRangeFromUnhookedSurvivorNeeded");

	Params::HexDevourHope_GetRangeFromUnhookedSurvivorNeeded Parms{};

	Parms.perkLevel = perkLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.KillerSubjectProvider.RegisterWhenKillerSet
// (Final, Native, Private)
// Parameters:
// class ASlasherPlayer*                   killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKillerSubjectProvider::RegisterWhenKillerSet(class ASlasherPlayer* killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillerSubjectProvider", "RegisterWhenKillerSet");

	Params::KillerSubjectProvider_RegisterWhenKillerSet Parms{};

	Parms.killer = killer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.ActivatableExhaustedEffect.Authority_OnHookCamper
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FGameplayTag&              gameEvent                                              (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameEventData&            gameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UActivatableExhaustedEffect::Authority_OnHookCamper(const struct FGameplayTag& gameEvent, const struct FGameEventData& gameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActivatableExhaustedEffect", "Authority_OnHookCamper");

	Params::ActivatableExhaustedEffect_Authority_OnHookCamper Parms{};

	Parms.gameEvent = std::move(gameEvent);
	Parms.gameEventData = std::move(gameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.ActivatableExhaustedEffect.Authority_Start
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             duration                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActivatableExhaustedEffect::Authority_Start(const float duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActivatableExhaustedEffect", "Authority_Start");

	Params::ActivatableExhaustedEffect_Authority_Start Parms{};

	Parms.duration = duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Adrenaline.Authority_AttemptApplyPerk
// (Final, Native, Private)

void UAdrenaline::Authority_AttemptApplyPerk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Adrenaline", "Authority_AttemptApplyPerk");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Adrenaline.Multicast_DispatchAdrenalineEvents
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// const bool                              isHealthy                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             healAmount                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdrenaline::Multicast_DispatchAdrenalineEvents(const bool isHealthy, const float healAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Adrenaline", "Multicast_DispatchAdrenalineEvents");

	Params::Adrenaline_Multicast_DispatchAdrenalineEvents Parms{};

	Parms.isHealthy = isHealthy;
	Parms.healAmount = healAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.AnyActorPairQueryRangeIsTrue.OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// const bool                              inRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnyActorPairQueryRangeIsTrue::OnInRangeChanged(const bool inRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnyActorPairQueryRangeIsTrue", "OnInRangeChanged");

	Params::AnyActorPairQueryRangeIsTrue_OnInRangeChanged Parms{};

	Parms.inRange = inRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.PlayerIsInExitArea.PlayerEnterExitArea
// (Final, Native, Private)

void UPlayerIsInExitArea::PlayerEnterExitArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerIsInExitArea", "PlayerEnterExitArea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.PlayerIsInExitArea.PlayerExitExitArea
// (Final, Native, Private)

void UPlayerIsInExitArea::PlayerExitExitArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerIsInExitArea", "PlayerExitExitArea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.AnyMeansNecessary.Authority_OnPalletPulledUp
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// const struct FGameplayTag&              gameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameEventData&            gameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAnyMeansNecessary::Authority_OnPalletPulledUp(const struct FGameplayTag& gameplayTag, const struct FGameEventData& gameEventData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnyMeansNecessary", "Authority_OnPalletPulledUp");

	Params::AnyMeansNecessary_Authority_OnPalletPulledUp Parms{};

	Parms.gameplayTag = std::move(gameplayTag);
	Parms.gameEventData = std::move(gameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.AnySurvivorHasObjectState.OnSurvivorAdded
// (Final, Native, Protected)
// Parameters:
// class ACamperPlayer*                    survivor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnySurvivorHasObjectState::OnSurvivorAdded(class ACamperPlayer* survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnySurvivorHasObjectState", "OnSurvivorAdded");

	Params::AnySurvivorHasObjectState_OnSurvivorAdded Parms{};

	Parms.survivor = survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.AnySurvivorHasObjectState.OnSurvivorRemoved
// (Final, Native, Protected)
// Parameters:
// class ACamperPlayer*                    survivor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnySurvivorHasObjectState::OnSurvivorRemoved(class ACamperPlayer* survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnySurvivorHasObjectState", "OnSurvivorRemoved");

	Params::AnySurvivorHasObjectState_OnSurvivorRemoved Parms{};

	Parms.survivor = survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.RemoveOnOriginatingSurvivorGoneStatusEffect.Authority_OnSurvivorRemoved
// (Final, Native, Protected)
// Parameters:
// class ACamperPlayer*                    survivor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URemoveOnOriginatingSurvivorGoneStatusEffect::Authority_OnSurvivorRemoved(class ACamperPlayer* survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RemoveOnOriginatingSurvivorGoneStatusEffect", "Authority_OnSurvivorRemoved");

	Params::RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved Parms{};

	Parms.survivor = survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.ProveThyselfEffect.OnInRangeOfOriginatorChanged
// (Native, Protected)
// Parameters:
// const bool                              inRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACamperPlayer*                    survivor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProveThyselfEffect::OnInRangeOfOriginatorChanged(const bool inRange, class ACamperPlayer* survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProveThyselfEffect", "OnInRangeOfOriginatorChanged");

	Params::ProveThyselfEffect_OnInRangeOfOriginatorChanged Parms{};

	Parms.inRange = inRange;
	Parms.survivor = survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.BaseIsPlayerPerformingInteraction.SetInteractionSemantics
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     interactionSemantics                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBaseIsPlayerPerformingInteraction::SetInteractionSemantics(const struct FGameplayTagContainer& interactionSemantics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseIsPlayerPerformingInteraction", "SetInteractionSemantics");

	Params::BaseIsPlayerPerformingInteraction_SetInteractionSemantics Parms{};

	Parms.interactionSemantics = std::move(interactionSemantics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.BaseIsPlayerPerformingInteraction.UpdateIsTrue
// (Final, Native, Protected)
// Parameters:
// class UInteractionDefinition*           interactionDefinition                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseIsPlayerPerformingInteraction::UpdateIsTrue(class UInteractionDefinition* interactionDefinition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseIsPlayerPerformingInteraction", "UpdateIsTrue");

	Params::BaseIsPlayerPerformingInteraction_UpdateIsTrue Parms{};

	Parms.interactionDefinition = interactionDefinition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SmallGame.Authority_SetTotemDetected
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USmallGame::Authority_SetTotemDetected(bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmallGame", "Authority_SetTotemDetected");

	Params::SmallGame_Authority_SetTotemDetected Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SmallGame.Multicast_TotemFound
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void USmallGame::Multicast_TotemFound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmallGame", "Multicast_TotemFound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SmallGame.SearchForTotems
// (Event, Protected, BlueprintEvent)

void USmallGame::SearchForTotems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmallGame", "SearchForTotems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDCompetence.SmallGame.VFXTotemFound
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void USmallGame::VFXTotemFound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmallGame", "VFXTotemFound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDCompetence.SmallGame.GetDetectionConeAngle
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USmallGame::GetDetectionConeAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmallGame", "GetDetectionConeAngle");

	Params::SmallGame_GetDetectionConeAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.BetterTogether.GetRevealDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBetterTogether::GetRevealDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BetterTogether", "GetRevealDistance");

	Params::BetterTogether_GetRevealDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.BetterTogether.OnStartedGeneratorRepair
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FGameplayTag&              gameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameEventData&            gameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBetterTogether::OnStartedGeneratorRepair(const struct FGameplayTag& gameplayTag, const struct FGameEventData& gameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BetterTogether", "OnStartedGeneratorRepair");

	Params::BetterTogether_OnStartedGeneratorRepair Parms{};

	Parms.gameplayTag = std::move(gameplayTag);
	Parms.gameEventData = std::move(gameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.BlessedStatusEffect.Authority_OnSurvivorRemovedFromGame
// (Final, Native, Private)
// Parameters:
// class ACamperPlayer*                    survivor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlessedStatusEffect::Authority_OnSurvivorRemovedFromGame(class ACamperPlayer* survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlessedStatusEffect", "Authority_OnSurvivorRemovedFromGame");

	Params::BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame Parms{};

	Parms.survivor = survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.BlessedStatusEffect.OnEnterBoonRange
// (BlueprintCosmetic, Event, Protected, BlueprintCallable, BlueprintEvent)

void UBlessedStatusEffect::OnEnterBoonRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlessedStatusEffect", "OnEnterBoonRange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDCompetence.BlessedStatusEffect.OnExitBoonRange
// (BlueprintCosmetic, Event, Protected, BlueprintCallable, BlueprintEvent)

void UBlessedStatusEffect::OnExitBoonRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlessedStatusEffect", "OnExitBoonRange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDCompetence.BlessedStatusEffect.GetBoonTotemBlessingRange
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBlessedStatusEffect::GetBoonTotemBlessingRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlessedStatusEffect", "GetBoonTotemBlessingRange");

	Params::BlessedStatusEffect_GetBoonTotemBlessingRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.BlessedStatusEffect.GetBoundTotem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATotem*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATotem* UBlessedStatusEffect::GetBoundTotem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlessedStatusEffect", "GetBoundTotem");

	Params::BlessedStatusEffect_GetBoundTotem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.BloodEcho.GetCooldownDurationAtLevel
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBloodEcho::GetCooldownDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BloodEcho", "GetCooldownDurationAtLevel");

	Params::BloodEcho_GetCooldownDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.ProveThyself.OnSurvivorInOwnerRangeChanged
// (Final, Native, Private)
// Parameters:
// const bool                              inRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProveThyself::OnSurvivorInOwnerRangeChanged(const bool inRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProveThyself", "OnSurvivorInOwnerRangeChanged");

	Params::ProveThyself_OnSurvivorInOwnerRangeChanged Parms{};

	Parms.inRange = inRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.BoonPerk.Authority_OnSurvivorRemoved
// (Final, Native, Private)
// Parameters:
// class ACamperPlayer*                    survivor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoonPerk::Authority_OnSurvivorRemoved(class ACamperPlayer* survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoonPerk", "Authority_OnSurvivorRemoved");

	Params::BoonPerk_Authority_OnSurvivorRemoved Parms{};

	Parms.survivor = survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.StatsSystemUtilities.GetStatValueBP
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTunableStat&              theStat                                                (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UStatsSystemUtilities::GetStatValueBP(const struct FTunableStat& theStat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StatsSystemUtilities", "GetStatValueBP");

	Params::StatsSystemUtilities_GetStatValueBP Parms{};

	Parms.theStat = std::move(theStat);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.StatsSystemUtilities.InitStatBP
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTunableStat&                    theStat                                                (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IModifierProvider>modifierProvider                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

void UStatsSystemUtilities::InitStatBP(struct FTunableStat& theStat, TScriptInterface<class IModifierProvider> modifierProvider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StatsSystemUtilities", "InitStatBP");

	Params::StatsSystemUtilities_InitStatBP Parms{};

	Parms.theStat = std::move(theStat);
	Parms.modifierProvider = modifierProvider;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	theStat = std::move(Parms.theStat);
}


// Function DBDCompetence.Breakout.Authority_ImposeWiggleStatusEffect
// (Final, Native, Private)
// Parameters:
// class ACamperPlayer*                    survivor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBreakout::Authority_ImposeWiggleStatusEffect(class ACamperPlayer* survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Breakout", "Authority_ImposeWiggleStatusEffect");

	Params::Breakout_Authority_ImposeWiggleStatusEffect Parms{};

	Parms.survivor = survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Breakout.Authority_OnRangeChanged
// (Final, Native, Private)
// Parameters:
// const bool                              inRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBreakout::Authority_OnRangeChanged(const bool inRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Breakout", "Authority_OnRangeChanged");

	Params::Breakout_Authority_OnRangeChanged Parms{};

	Parms.inRange = inRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Breakout.OnRep_IsPerkActive
// (Final, Native, Private)

void UBreakout::OnRep_IsPerkActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Breakout", "OnRep_IsPerkActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Breakout.OnSlasherSet
// (Final, Native, Private)
// Parameters:
// class ASlasherPlayer*                   slasher                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBreakout::OnSlasherSet(class ASlasherPlayer* slasher)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Breakout", "OnSlasherSet");

	Params::Breakout_OnSlasherSet Parms{};

	Parms.slasher = slasher;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Solidarity.Authority_OnHealthChargeApplied
// (Final, Native, Private)
// Parameters:
// float                                   individualChargeAmount                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   totalChargeAmount                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           chargeInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    wasCoop                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   deltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolidarity::Authority_OnHealthChargeApplied(float individualChargeAmount, float totalChargeAmount, class AActor* chargeInstigator, bool wasCoop, float deltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Solidarity", "Authority_OnHealthChargeApplied");

	Params::Solidarity_Authority_OnHealthChargeApplied Parms{};

	Parms.individualChargeAmount = individualChargeAmount;
	Parms.totalChargeAmount = totalChargeAmount;
	Parms.chargeInstigator = chargeInstigator;
	Parms.wasCoop = wasCoop;
	Parms.deltaTime = deltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Solidarity.Authority_OnSkillCheckResponse
// (Final, Native, Private)
// Parameters:
// bool                                    success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bonus                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    triggerLoudNoise                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    hadInput                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESkillCheckCustomType                   type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   chargeChange                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolidarity::Authority_OnSkillCheckResponse(bool success, bool bonus, class ADBDPlayer* player, bool triggerLoudNoise, bool hadInput, ESkillCheckCustomType type, float chargeChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Solidarity", "Authority_OnSkillCheckResponse");

	Params::Solidarity_Authority_OnSkillCheckResponse Parms{};

	Parms.success = success;
	Parms.bonus = bonus;
	Parms.player = player;
	Parms.triggerLoudNoise = triggerLoudNoise;
	Parms.hadInput = hadInput;
	Parms.type = type;
	Parms.chargeChange = chargeChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.CorruptIntervention.Authority_OnLevelReadyToPlay
// (Final, Native, Private)

void UCorruptIntervention::Authority_OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorruptIntervention", "Authority_OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.CorruptIntervention.Authority_TryActivatePerk
// (Final, Native, Private)

void UCorruptIntervention::Authority_TryActivatePerk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorruptIntervention", "Authority_TryActivatePerk");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.CorruptIntervention.LevelReadyToBlockedGenerators
// (Final, Native, Private)

void UCorruptIntervention::LevelReadyToBlockedGenerators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorruptIntervention", "LevelReadyToBlockedGenerators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.CorruptIntervention.OnRep_BlockedGenerators
// (Final, Native, Private)

void UCorruptIntervention::OnRep_BlockedGenerators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorruptIntervention", "OnRep_BlockedGenerators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.CorruptIntervention.GetGeneratorBlockDuration
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCorruptIntervention::GetGeneratorBlockDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorruptIntervention", "GetGeneratorBlockDuration");

	Params::CorruptIntervention_GetGeneratorBlockDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.CruelConfinement.GetBlockDurationAtLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCruelConfinement::GetBlockDurationAtLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CruelConfinement", "GetBlockDurationAtLevel");

	Params::CruelConfinement_GetBlockDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.CruelConfinement.GetEffectiveRadiusAtLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCruelConfinement::GetEffectiveRadiusAtLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CruelConfinement", "GetEffectiveRadiusAtLevel");

	Params::CruelConfinement_GetEffectiveRadiusAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DarkSense.Authority_OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// const bool                              inRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDarkSense::Authority_OnInRangeChanged(const bool inRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DarkSense", "Authority_OnInRangeChanged");

	Params::DarkSense_Authority_OnInRangeChanged Parms{};

	Parms.inRange = inRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DBDConditionFactory.DoesPerkHaveToken
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IConditionReceiver>conditionReceiver                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class UPerk*                            perk                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDoesPerkHaveToken*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDoesPerkHaveToken* UDBDConditionFactory::DoesPerkHaveToken(TScriptInterface<class IConditionReceiver> conditionReceiver, class UPerk* perk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DBDConditionFactory", "DoesPerkHaveToken");

	Params::DBDConditionFactory_DoesPerkHaveToken Parms{};

	Parms.conditionReceiver = conditionReceiver;
	Parms.perk = perk;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DBDConditionFactory.IsPlayerPerformingInteraction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class IConditionReceiver>conditionReceiver                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     interactionSemantics                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UIsPlayerPerformingInteraction*   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UIsPlayerPerformingInteraction* UDBDConditionFactory::IsPlayerPerformingInteraction(TScriptInterface<class IConditionReceiver> conditionReceiver, const struct FGameplayTagContainer& interactionSemantics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DBDConditionFactory", "IsPlayerPerformingInteraction");

	Params::DBDConditionFactory_IsPlayerPerformingInteraction Parms{};

	Parms.conditionReceiver = conditionReceiver;
	Parms.interactionSemantics = std::move(interactionSemantics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DecisiveStrike.OnOwnerPickedUp
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       picker                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDecisiveStrike::OnOwnerPickedUp(class ADBDPlayer* picker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DecisiveStrike", "OnOwnerPickedUp");

	Params::DecisiveStrike_OnOwnerPickedUp Parms{};

	Parms.picker = picker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DecisiveStrike.OnPickUpEnded
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       picker                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDecisiveStrike::OnPickUpEnded(class ADBDPlayer* picker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DecisiveStrike", "OnPickUpEnded");

	Params::DecisiveStrike_OnPickUpEnded Parms{};

	Parms.picker = picker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DecisiveStrike.OnRep_HasBeenAttempted
// (Final, Native, Private)

void UDecisiveStrike::OnRep_HasBeenAttempted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DecisiveStrike", "OnRep_HasBeenAttempted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DecisiveStrike.OnSkillCheck
// (Final, Native, Private)
// Parameters:
// bool                                    hadInput                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bonus                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESkillCheckCustomType                   type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDecisiveStrike::OnSkillCheck(bool hadInput, bool success, bool bonus, ESkillCheckCustomType type, class ADBDPlayer* player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DecisiveStrike", "OnSkillCheck");

	Params::DecisiveStrike_OnSkillCheck Parms{};

	Parms.hadInput = hadInput;
	Parms.success = success;
	Parms.bonus = bonus;
	Parms.type = type;
	Parms.player = player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DecisiveStrike.OnUnhookedTimerEnded
// (Final, Native, Private)

void UDecisiveStrike::OnUnhookedTimerEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DecisiveStrike", "OnUnhookedTimerEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DecisiveStrike.GetDurationAfterUnhook
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDecisiveStrike::GetDurationAfterUnhook() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DecisiveStrike", "GetDurationAfterUnhook");

	Params::DecisiveStrike_GetDurationAfterUnhook Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DejaVu.Authority_OnGeneratorRepaired
// (Final, Native, Private)
// Parameters:
// int32                                   activatedGeneratorCount                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDejaVu::Authority_OnGeneratorRepaired(int32 activatedGeneratorCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DejaVu", "Authority_OnGeneratorRepaired");

	Params::DejaVu_Authority_OnGeneratorRepaired Parms{};

	Parms.activatedGeneratorCount = activatedGeneratorCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DejaVu.Authority_TryActivatePerk
// (Final, Native, Public, BlueprintCallable)

void UDejaVu::Authority_TryActivatePerk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DejaVu", "Authority_TryActivatePerk");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DejaVu.LevelReadyToRevealOutlineGenerators
// (Final, Native, Private)

void UDejaVu::LevelReadyToRevealOutlineGenerators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DejaVu", "LevelReadyToRevealOutlineGenerators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DejaVu.OnRep_RevealedGenerators
// (Final, Native, Private)

void UDejaVu::OnRep_RevealedGenerators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DejaVu", "OnRep_RevealedGenerators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DejaVu.GetActionSpeedsAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDejaVu::GetActionSpeedsAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DejaVu", "GetActionSpeedsAtLevel");

	Params::DejaVu_GetActionSpeedsAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DejaVu.GetPerkDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDejaVu::GetPerkDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DejaVu", "GetPerkDurationAtLevel");

	Params::DejaVu_GetPerkDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DelayedHealEffect.Authority_OnActivationTimerComplete
// (Final, Native, Private)

void UDelayedHealEffect::Authority_OnActivationTimerComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelayedHealEffect", "Authority_OnActivationTimerComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DelayedHealEffect.Authority_OnOwningCamperHealthChanged
// (Final, Native, Private)
// Parameters:
// ECamperDamageState                      before                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECamperDamageState                      after                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelayedHealEffect::Authority_OnOwningCamperHealthChanged(ECamperDamageState before, ECamperDamageState after)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelayedHealEffect", "Authority_OnOwningCamperHealthChanged");

	Params::DelayedHealEffect_Authority_OnOwningCamperHealthChanged Parms{};

	Parms.before = before;
	Parms.after = after;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DelayedHealEffect.Authority_OnOwningCamperPickedUp
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       picker                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelayedHealEffect::Authority_OnOwningCamperPickedUp(class ADBDPlayer* picker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelayedHealEffect", "Authority_OnOwningCamperPickedUp");

	Params::DelayedHealEffect_Authority_OnOwningCamperPickedUp Parms{};

	Parms.picker = picker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Distortion.OnAuraBlockedCosmetic
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void UDistortion::OnAuraBlockedCosmetic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Distortion", "OnAuraBlockedCosmetic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDCompetence.Distortion.OnRep_AuraBlockIsActive
// (Final, Native, Private)

void UDistortion::OnRep_AuraBlockIsActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Distortion", "OnRep_AuraBlockIsActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Distortion.AuraBlockCanBeActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDistortion::AuraBlockCanBeActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Distortion", "AuraBlockCanBeActive");

	Params::Distortion_AuraBlockCanBeActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DoesPerkHaveToken.OnRep_Perk
// (Final, Native, Private)

void UDoesPerkHaveToken::OnRep_Perk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoesPerkHaveToken", "OnRep_Perk");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DoesPerkHaveToken.SetPerk
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPerk*                            perk                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDoesPerkHaveToken::SetPerk(class UPerk* perk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoesPerkHaveToken", "SetPerk");

	Params::DoesPerkHaveToken_SetPerk Parms{};

	Parms.perk = perk;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DownedByBasicAttack.OnRep_ReplicatedIsTrue
// (Final, Native, Private)

void UDownedByBasicAttack::OnRep_ReplicatedIsTrue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DownedByBasicAttack", "OnRep_ReplicatedIsTrue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DyingLight.OnObsessionChanged
// (Final, Native, Private)
// Parameters:
// class ACamperPlayer*                    newObsession                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACamperPlayer*                    previousObsession                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDyingLight::OnObsessionChanged(class ACamperPlayer* newObsession, class ACamperPlayer* previousObsession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DyingLight", "OnObsessionChanged");

	Params::DyingLight_OnObsessionChanged Parms{};

	Parms.newObsession = newObsession;
	Parms.previousObsession = previousObsession;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.FlipFlop.Authority_OnPickedUp
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       picker                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFlipFlop::Authority_OnPickedUp(class ADBDPlayer* picker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipFlop", "Authority_OnPickedUp");

	Params::FlipFlop_Authority_OnPickedUp Parms{};

	Parms.picker = picker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.GateBlockerEffect.RemoveCantEscapeFlag
// (Final, Native, Protected)

void UGateBlockerEffect::RemoveCantEscapeFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GateBlockerEffect", "RemoveCantEscapeFlag");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.ThrillingTremors.OnRep_BlockedGenerators
// (Final, Native, Private)

void UThrillingTremors::OnRep_BlockedGenerators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrillingTremors", "OnRep_BlockedGenerators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.ThrillingTremors.GetCooldownAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UThrillingTremors::GetCooldownAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrillingTremors", "GetCooldownAtLevel");

	Params::ThrillingTremors_GetCooldownAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.ThrillingTremors.GetDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UThrillingTremors::GetDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrillingTremors", "GetDurationAtLevel");

	Params::ThrillingTremors_GetDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.MonstrousShrine.Authority_OnSurvivorHookedOnScourgeHook
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FGameEventData&            gameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMonstrousShrine::Authority_OnSurvivorHookedOnScourgeHook(const struct FGameEventData& gameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MonstrousShrine", "Authority_OnSurvivorHookedOnScourgeHook");

	Params::MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook Parms{};

	Parms.gameEventData = std::move(gameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.MonstrousShrine.Authority_OnSurvivorUnhookedOnScourgeHook
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FGameEventData&            gameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMonstrousShrine::Authority_OnSurvivorUnhookedOnScourgeHook(const struct FGameEventData& gameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MonstrousShrine", "Authority_OnSurvivorUnhookedOnScourgeHook");

	Params::MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook Parms{};

	Parms.gameEventData = std::move(gameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HexNoOneEscapesDeath.GetHasteAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UHexNoOneEscapesDeath::GetHasteAtLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexNoOneEscapesDeath", "GetHasteAtLevel");

	Params::HexNoOneEscapesDeath_GetHasteAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.HexNoOneEscapesDeath.OnRep_SetShouldActivateTotemOutline
// (Final, Native, Private)

void UHexNoOneEscapesDeath::OnRep_SetShouldActivateTotemOutline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexNoOneEscapesDeath", "OnRep_SetShouldActivateTotemOutline");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HexRuin.Authority_SetupCurseOnAllGenerators
// (Final, Native, Private)

void UHexRuin::Authority_SetupCurseOnAllGenerators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexRuin", "Authority_SetupCurseOnAllGenerators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HexRuin.GetRegressionModifierByLevel
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   perkLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UHexRuin::GetRegressionModifierByLevel(int32 perkLevel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexRuin", "GetRegressionModifierByLevel");

	Params::HexRuin_GetRegressionModifierByLevel Parms{};

	Parms.perkLevel = perkLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.HexThirdSeal.OnRep_NumOfHitPlayers
// (Final, Native, Private)

void UHexThirdSeal::OnRep_NumOfHitPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexThirdSeal", "OnRep_NumOfHitPlayers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HideSurvivorVFXForKillerEffect.HideVFX
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    hide                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHideSurvivorVFXForKillerEffect::HideVFX(bool hide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HideSurvivorVFXForKillerEffect", "HideVFX");

	Params::HideSurvivorVFXForKillerEffect_HideVFX Parms{};

	Parms.hide = hide;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HighestLevelAndClosestEffectCondition.InitEffectArrays
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             effectIDLevel1                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             effectIDLevel2                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             effectIDLevel3                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHighestLevelAndClosestEffectCondition::InitEffectArrays(class FName effectIDLevel1, class FName effectIDLevel2, class FName effectIDLevel3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HighestLevelAndClosestEffectCondition", "InitEffectArrays");

	Params::HighestLevelAndClosestEffectCondition_InitEffectArrays Parms{};

	Parms.effectIDLevel1 = effectIDLevel1;
	Parms.effectIDLevel2 = effectIDLevel2;
	Parms.effectIDLevel3 = effectIDLevel3;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HighestLevelAndClosestEffectCondition.SetCurrentEffectLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHighestLevelAndClosestEffectCondition::SetCurrentEffectLevel(int32 level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HighestLevelAndClosestEffectCondition", "SetCurrentEffectLevel");

	Params::HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel Parms{};

	Parms.level = level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.ImAllEars.GetCooldownAtLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UImAllEars::GetCooldownAtLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImAllEars", "GetCooldownAtLevel");

	Params::ImAllEars_GetCooldownAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.ImAllEars.GetDurationAtLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UImAllEars::GetDurationAtLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImAllEars", "GetDurationAtLevel");

	Params::ImAllEars_GetDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.ImAllEars.Server_OnCamperLoudNoise
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// const struct FGameplayTag&              gameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameEventData&            gameEventData                                          (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UImAllEars::Server_OnCamperLoudNoise(const struct FGameplayTag& gameplayTag, const struct FGameEventData& gameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImAllEars", "Server_OnCamperLoudNoise");

	Params::ImAllEars_Server_OnCamperLoudNoise Parms{};

	Parms.gameplayTag = std::move(gameplayTag);
	Parms.gameEventData = std::move(gameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.OnEventBaseAddon.OnEventFired
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameEventData&            gameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UOnEventBaseAddon::OnEventFired(const struct FGameEventData& gameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnEventBaseAddon", "OnEventFired");

	Params::OnEventBaseAddon_OnEventFired Parms{};

	Parms.gameEventData = std::move(gameEventData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDCompetence.InfectiousFright.OnRep_PerkActivationCount
// (Final, Native, Private)

void UInfectiousFright::OnRep_PerkActivationCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InfectiousFright", "OnRep_PerkActivationCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.InfectiousFright.RevealSurvivorLocation
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ACamperPlayer*                    target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInfectiousFright::RevealSurvivorLocation(class ACamperPlayer* target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InfectiousFright", "RevealSurvivorLocation");

	Params::InfectiousFright_RevealSurvivorLocation Parms{};

	Parms.target = target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDCompetence.InnerStrength.Authority_OnPlayerImmobilizeStateChanged
// (Final, Native, Private)
// Parameters:
// const ECamperImmobilizeState            oldImmobilizeState                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ECamperImmobilizeState            newImmobilizeState                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInnerStrength::Authority_OnPlayerImmobilizeStateChanged(const ECamperImmobilizeState oldImmobilizeState, const ECamperImmobilizeState newImmobilizeState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InnerStrength", "Authority_OnPlayerImmobilizeStateChanged");

	Params::InnerStrength_Authority_OnPlayerImmobilizeStateChanged Parms{};

	Parms.oldImmobilizeState = oldImmobilizeState;
	Parms.newImmobilizeState = newImmobilizeState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.InnerStrength.GetHideDuration
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInnerStrength::GetHideDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InnerStrength", "GetHideDuration");

	Params::InnerStrength_GetHideDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.IsBestProveThyselfEffectInRange.OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// const bool                              inRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UProveThyselfEffect*              proveThyselfEffect                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsBestProveThyselfEffectInRange::OnInRangeChanged(const bool inRange, class UProveThyselfEffect* proveThyselfEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsBestProveThyselfEffectInRange", "OnInRangeChanged");

	Params::IsBestProveThyselfEffectInRange_OnInRangeChanged Parms{};

	Parms.inRange = inRange;
	Parms.proveThyselfEffect = proveThyselfEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsHighestLevelAndClosestOriginatingEffect.OnStatusEffectAddedOrRemoved
// (Final, Native, Private)
// Parameters:
// class UStatusEffect*                    effect                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    valid                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsHighestLevelAndClosestOriginatingEffect::OnStatusEffectAddedOrRemoved(class UStatusEffect* effect, bool valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsHighestLevelAndClosestOriginatingEffect", "OnStatusEffectAddedOrRemoved");

	Params::IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved Parms{};

	Parms.effect = effect;
	Parms.valid = valid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsHighestTierOriginatingPerk.OnStatusEffectAddedOrRemoved
// (Final, Native, Private)
// Parameters:
// class UStatusEffect*                    effect                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    valid                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsHighestTierOriginatingPerk::OnStatusEffectAddedOrRemoved(class UStatusEffect* effect, bool valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsHighestTierOriginatingPerk", "OnStatusEffectAddedOrRemoved");

	Params::IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved Parms{};

	Parms.effect = effect;
	Parms.valid = valid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsHighestTierOriginatingPerk.OnStatusEffectApplicableChanged
// (Final, Native, Private)
// Parameters:
// class UGameplayModifierContainer*       gameplayModifierContainer                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isApplicable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsHighestTierOriginatingPerk::OnStatusEffectApplicableChanged(class UGameplayModifierContainer* gameplayModifierContainer, bool isApplicable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsHighestTierOriginatingPerk", "OnStatusEffectApplicableChanged");

	Params::IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged Parms{};

	Parms.gameplayModifierContainer = gameplayModifierContainer;
	Parms.isApplicable = isApplicable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsInRangeOfOriginatingPlayer.OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// const bool                              inRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsInRangeOfOriginatingPlayer::OnInRangeChanged(const bool inRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsInRangeOfOriginatingPlayer", "OnInRangeChanged");

	Params::IsInRangeOfOriginatingPlayer_OnInRangeChanged Parms{};

	Parms.inRange = inRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsOriginatingPerkBoundToTotems.Init
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EComparisonOperation                    comparisonOperator                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   totemCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsOriginatingPerkBoundToTotems::Init(EComparisonOperation comparisonOperator, int32 totemCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsOriginatingPerkBoundToTotems", "Init");

	Params::IsOriginatingPerkBoundToTotems_Init Parms{};

	Parms.comparisonOperator = comparisonOperator;
	Parms.totemCount = totemCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsOriginatingPerkBoundToTotems.OnRep_TotemCount
// (Final, Native, Private)

void UIsOriginatingPerkBoundToTotems::OnRep_TotemCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsOriginatingPerkBoundToTotems", "OnRep_TotemCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsOwningPlayerInRangeFromHook.OnLevelReadyToPlay
// (Final, Native, Protected)

void UIsOwningPlayerInRangeFromHook::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsOwningPlayerInRangeFromHook", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerLookingAtKillerCondition.OnPawnControllerChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsPlayerLookingAtKillerCondition::OnPawnControllerChanged(class APawn* pawn, class AController* controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerLookingAtKillerCondition", "OnPawnControllerChanged");

	Params::IsPlayerLookingAtKillerCondition_OnPawnControllerChanged Parms{};

	Parms.pawn = pawn;
	Parms.controller = controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerLookingAtKillerCondition.OnRep_IsLookingTowards
// (Final, Native, Private)
// Parameters:
// const bool                              isLookingTowards                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsPlayerLookingAtKillerCondition::OnRep_IsLookingTowards(const bool isLookingTowards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerLookingAtKillerCondition", "OnRep_IsLookingTowards");

	Params::IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards Parms{};

	Parms.isLookingTowards = isLookingTowards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerPerfInteractionWithNoItem.OnCollectableChargeStateChange
// (Final, Native, Private)
// Parameters:
// bool                                    empty                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsPlayerPerfInteractionWithNoItem::OnCollectableChargeStateChange(bool empty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerPerfInteractionWithNoItem", "OnCollectableChargeStateChange");

	Params::IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange Parms{};

	Parms.empty = empty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerPerformingItemInteraction.OnCollectableChargeStateChange
// (Final, Native, Private)
// Parameters:
// bool                                    empty                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsPlayerPerformingItemInteraction::OnCollectableChargeStateChange(bool empty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerPerformingItemInteraction", "OnCollectableChargeStateChange");

	Params::IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange Parms{};

	Parms.empty = empty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerPerformingItemInteraction.OnCollectableDropped
// (Final, Native, Private)

void UIsPlayerPerformingItemInteraction::OnCollectableDropped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerPerformingItemInteraction", "OnCollectableDropped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerPerformingItemInteraction.OnCollectablePickedUp
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsPlayerPerformingItemInteraction::OnCollectablePickedUp(class ADBDPlayer* player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerPerformingItemInteraction", "OnCollectablePickedUp");

	Params::IsPlayerPerformingItemInteraction_OnCollectablePickedUp Parms{};

	Parms.player = player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerPerformingInteraction.SetInteractionSemantics
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     interactionSemantics                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UIsPlayerPerformingInteraction::SetInteractionSemantics(const struct FGameplayTagContainer& interactionSemantics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerPerformingInteraction", "SetInteractionSemantics");

	Params::IsPlayerPerformingInteraction_SetInteractionSemantics Parms{};

	Parms.interactionSemantics = std::move(interactionSemantics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerPerformingInteraction.UpdateIsTrue
// (Final, Native, Private)
// Parameters:
// class UInteractionDefinition*           interactionDefinition                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsPlayerPerformingInteraction::UpdateIsTrue(class UInteractionDefinition* interactionDefinition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerPerformingInteraction", "UpdateIsTrue");

	Params::IsPlayerPerformingInteraction_UpdateIsTrue Parms{};

	Parms.interactionDefinition = interactionDefinition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.LingeringBlessedStatusEffect.Authority_OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// const bool                              inRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULingeringBlessedStatusEffect::Authority_OnInRangeChanged(const bool inRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LingeringBlessedStatusEffect", "Authority_OnInRangeChanged");

	Params::LingeringBlessedStatusEffect_Authority_OnInRangeChanged Parms{};

	Parms.inRange = inRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.LingeringBlessedStatusEffect.SetLingerDuration
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const float                             lingerDuration                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULingeringBlessedStatusEffect::SetLingerDuration(const float lingerDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LingeringBlessedStatusEffect", "SetLingerDuration");

	Params::LingeringBlessedStatusEffect_SetLingerDuration Parms{};

	Parms.lingerDuration = lingerDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.LuckyBreak.ActivationTimerEnded
// (Final, Native, Private)

void ULuckyBreak::ActivationTimerEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LuckyBreak", "ActivationTimerEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.LuckyBreak.Authority_OnDamageStateChanged
// (Final, Native, Private)
// Parameters:
// ECamperDamageState                      oldDamageState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECamperDamageState                      currentDamageState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULuckyBreak::Authority_OnDamageStateChanged(ECamperDamageState oldDamageState, ECamperDamageState currentDamageState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LuckyBreak", "Authority_OnDamageStateChanged");

	Params::LuckyBreak_Authority_OnDamageStateChanged Parms{};

	Parms.oldDamageState = oldDamageState;
	Parms.currentDamageState = currentDamageState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.LuckyBreak.Authority_TryActivatePerk
// (Final, Native, Private)

void ULuckyBreak::Authority_TryActivatePerk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LuckyBreak", "Authority_TryActivatePerk");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.MakeYourChoice.CanApplyExposedEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AActor*                     unhooker                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMakeYourChoice::CanApplyExposedEffect(const class AActor* unhooker) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MakeYourChoice", "CanApplyExposedEffect");

	Params::MakeYourChoice_CanApplyExposedEffect Parms{};

	Parms.unhooker = unhooker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.OwningPlayerInTotemRange.OnLevelReadyToPlay
// (Final, Native, Protected)

void UOwningPlayerInTotemRange::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OwningPlayerInTotemRange", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Poised.GetActivationTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPoised::GetActivationTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Poised", "GetActivationTime");

	Params::Poised_GetActivationTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Saboteur.GetCooldownDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USaboteur::GetCooldownDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Saboteur", "GetCooldownDurationAtLevel");

	Params::Saboteur_GetCooldownDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SecondWind.Authority_OnHealProgress
// (Final, Native, Private)
// Parameters:
// float                                   individualChargeAmount                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   totalChargeAmount                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           chargeInstigator                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    wasCoop                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   deltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USecondWind::Authority_OnHealProgress(float individualChargeAmount, float totalChargeAmount, class AActor* chargeInstigator, bool wasCoop, float deltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SecondWind", "Authority_OnHealProgress");

	Params::SecondWind_Authority_OnHealProgress Parms{};

	Parms.individualChargeAmount = individualChargeAmount;
	Parms.totalChargeAmount = totalChargeAmount;
	Parms.chargeInstigator = chargeInstigator;
	Parms.wasCoop = wasCoop;
	Parms.deltaTime = deltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SoleSurvivor.Authority_OnSurvivorAdded
// (Final, Native, Private)
// Parameters:
// const class ACamperPlayer*              survivor                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoleSurvivor::Authority_OnSurvivorAdded(const class ACamperPlayer* survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoleSurvivor", "Authority_OnSurvivorAdded");

	Params::SoleSurvivor_Authority_OnSurvivorAdded Parms{};

	Parms.survivor = survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SpineChillPerk.AreTriggersMet
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool USpineChillPerk::AreTriggersMet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "AreTriggersMet");

	Params::SpineChillPerk_AreTriggersMet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SpineChillPerk.Authority_OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// const bool                              inRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineChillPerk::Authority_OnInRangeChanged(const bool inRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "Authority_OnInRangeChanged");

	Params::SpineChillPerk_Authority_OnInRangeChanged Parms{};

	Parms.inRange = inRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SpineChillPerk.Authority_OnIsInLineOfSightChanged
// (Final, Native, Private)
// Parameters:
// const bool                              isInLineOfSight                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineChillPerk::Authority_OnIsInLineOfSightChanged(const bool isInLineOfSight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "Authority_OnIsInLineOfSightChanged");

	Params::SpineChillPerk_Authority_OnIsInLineOfSightChanged Parms{};

	Parms.isInLineOfSight = isInLineOfSight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SpineChillPerk.Authority_OnIsLookingTowardsChanged
// (Final, Native, Private)
// Parameters:
// const bool                              isLookingTowards                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineChillPerk::Authority_OnIsLookingTowardsChanged(const bool isLookingTowards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "Authority_OnIsLookingTowardsChanged");

	Params::SpineChillPerk_Authority_OnIsLookingTowardsChanged Parms{};

	Parms.isLookingTowards = isLookingTowards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SpineChillPerk.GetActionSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   perkLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float USpineChillPerk::GetActionSpeed(int32 perkLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "GetActionSpeed");

	Params::SpineChillPerk_GetActionSpeed Parms{};

	Parms.perkLevel = perkLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SpineChillPerk.GetLingerDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float USpineChillPerk::GetLingerDuration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "GetLingerDuration");

	Params::SpineChillPerk_GetLingerDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SpineChillPerk.GetRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float USpineChillPerk::GetRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "GetRange");

	Params::SpineChillPerk_GetRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SpineChillPerk.HasLineOfSight
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool USpineChillPerk::HasLineOfSight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "HasLineOfSight");

	Params::SpineChillPerk_HasLineOfSight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SpineChillPerk.IsInRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool USpineChillPerk::IsInRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "IsInRange");

	Params::SpineChillPerk_IsInRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SpineChillPerk.IsLookingTowards
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool USpineChillPerk::IsLookingTowards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "IsLookingTowards");

	Params::SpineChillPerk_IsLookingTowards Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SpineChillPerk.OnRep_IsInRange
// (Final, Native, Private)

void USpineChillPerk::OnRep_IsInRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "OnRep_IsInRange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SprintBurst.Authority_OnIsRunningAndMovingChanged
// (Final, Native, Private)
// Parameters:
// const bool                              isRunningAndMoving                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USprintBurst::Authority_OnIsRunningAndMovingChanged(const bool isRunningAndMoving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SprintBurst", "Authority_OnIsRunningAndMovingChanged");

	Params::SprintBurst_Authority_OnIsRunningAndMovingChanged Parms{};

	Parms.isRunningAndMoving = isRunningAndMoving;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SprintBurst.Authority_OnPerkFlagsChanged
// (Final, Native, Private)
// Parameters:
// const struct FGameplayTag&              gameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isAdded                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USprintBurst::Authority_OnPerkFlagsChanged(const struct FGameplayTag& gameplayTag, bool isAdded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SprintBurst", "Authority_OnPerkFlagsChanged");

	Params::SprintBurst_Authority_OnPerkFlagsChanged Parms{};

	Parms.gameplayTag = std::move(gameplayTag);
	Parms.isAdded = isAdded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SprintBurst.GetExhaustedDuration
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USprintBurst::GetExhaustedDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SprintBurst", "GetExhaustedDuration");

	Params::SprintBurst_GetExhaustedDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SprintBurst.GetSprintDuration
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USprintBurst::GetSprintDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SprintBurst", "GetSprintDuration");

	Params::SprintBurst_GetSprintDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.StakeOutPerk.Local_BroadcastConsumeToken
// (Final, Native, Public, BlueprintCallable)

void UStakeOutPerk::Local_BroadcastConsumeToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StakeOutPerk", "Local_BroadcastConsumeToken");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.StakeOutPerk.Server_ConsumeToken
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void UStakeOutPerk::Server_ConsumeToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StakeOutPerk", "Server_ConsumeToken");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Surge.Client_TriggerEffects
// (Final, Net, Native, Event, Private, NetClient)
// Parameters:
// const TArray<class AGenerator*>&        generators                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USurge::Client_TriggerEffects(const TArray<class AGenerator*>& generators)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Surge", "Client_TriggerEffects");

	Params::Surge_Client_TriggerEffects Parms{};

	Parms.generators = std::move(generators);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Surge.GetCooldownDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float USurge::GetCooldownDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Surge", "GetCooldownDurationAtLevel");

	Params::Surge_GetCooldownDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Surge.GetHasCooldown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool USurge::GetHasCooldown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Surge", "GetHasCooldown");

	Params::Surge_GetHasCooldown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Surge.GetInstantRegressionAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float USurge::GetInstantRegressionAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Surge", "GetInstantRegressionAtLevel");

	Params::Surge_GetInstantRegressionAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Surge.GetZoneRadius
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USurge::GetZoneRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Surge", "GetZoneRadius");

	Params::Surge_GetZoneRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.TheMettleOfMan.OnRep_CurrentPhase
// (Final, Native, Private)

void UTheMettleOfMan::OnRep_CurrentPhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheMettleOfMan", "OnRep_CurrentPhase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.TheMettleOfMan.OnRep_NumTokenSoFar
// (Final, Native, Private)

void UTheMettleOfMan::OnRep_NumTokenSoFar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheMettleOfMan", "OnRep_NumTokenSoFar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Tinkerer.Authority_OnGeneratorChargePercentChanged
// (Final, Native, Private)
// Parameters:
// class UChargeableComponent*             chargeableComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   percentCompletionChange                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   totalPercentComplete                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTinkerer::Authority_OnGeneratorChargePercentChanged(class UChargeableComponent* chargeableComponent, float percentCompletionChange, float totalPercentComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Tinkerer", "Authority_OnGeneratorChargePercentChanged");

	Params::Tinkerer_Authority_OnGeneratorChargePercentChanged Parms{};

	Parms.chargeableComponent = chargeableComponent;
	Parms.percentCompletionChange = percentCompletionChange;
	Parms.totalPercentComplete = totalPercentComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Tinkerer.Authority_OnGeneratorReachedThreshold
// (Event, Public, BlueprintEvent)
// Parameters:
// class AGenerator*                       generator                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTinkerer::Authority_OnGeneratorReachedThreshold(class AGenerator* generator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Tinkerer", "Authority_OnGeneratorReachedThreshold");

	Params::Tinkerer_Authority_OnGeneratorReachedThreshold Parms{};

	Parms.generator = generator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDCompetence.Tinkerer.Authority_OnLevelReadyToPlay
// (Final, Native, Private)

void UTinkerer::Authority_OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Tinkerer", "Authority_OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Tinkerer.Authority_OnUndetectableAttackSuccessNearActiveGenerator
// (Event, Public, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTinkerer::Authority_OnUndetectableAttackSuccessNearActiveGenerator(class ADBDPlayer* instigator, class ADBDPlayer* target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Tinkerer", "Authority_OnUndetectableAttackSuccessNearActiveGenerator");

	Params::Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator Parms{};

	Parms.instigator = instigator;
	Parms.target = target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDCompetence.Tinkerer.Authority_OnUndetectableGeneratorInterrupt
// (Event, Public, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTinkerer::Authority_OnUndetectableGeneratorInterrupt(class ADBDPlayer* instigator, class ADBDPlayer* target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Tinkerer", "Authority_OnUndetectableGeneratorInterrupt");

	Params::Tinkerer_Authority_OnUndetectableGeneratorInterrupt Parms{};

	Parms.instigator = instigator;
	Parms.target = target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDCompetence.Tinkerer.GetActivationTimeAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTinkerer::GetActivationTimeAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Tinkerer", "GetActivationTimeAtLevel");

	Params::Tinkerer_GetActivationTimeAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Tinkerer.GetTriggerThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTinkerer::GetTriggerThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Tinkerer", "GetTriggerThreshold");

	Params::Tinkerer_GetTriggerThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.WereGonnaLiveForever.OnRep_PerkEnabled
// (Final, Native, Private)

void UWereGonnaLiveForever::OnRep_PerkEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WereGonnaLiveForever", "OnRep_PerkEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.YamaokaFamilyCrest.OnRep_AddonActivationCount
// (Final, Native, Private)

void UYamaokaFamilyCrest::OnRep_AddonActivationCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YamaokaFamilyCrest", "OnRep_AddonActivationCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.YamaokaFamilyCrest.RevealSurvivor
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ACamperPlayer*                    survivorToReveal                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYamaokaFamilyCrest::RevealSurvivor(class ACamperPlayer* survivorToReveal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YamaokaFamilyCrest", "RevealSurvivor");

	Params::YamaokaFamilyCrest_RevealSurvivor Parms{};

	Parms.survivorToReveal = survivorToReveal;

	UObject::ProcessEvent(Func, &Parms);
}

}

