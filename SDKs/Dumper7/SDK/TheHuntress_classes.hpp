#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheHuntress

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "DBDCompetence_structs.hpp"
#include "DBDCompetence_classes.hpp"
#include "DeadByDaylight_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DBDInteraction_classes.hpp"


namespace SDK
{

// Class TheHuntress.DeadHard
// 0x00B0 (0x0478 - 0x03C8)
class UDeadHard final : public UPerk
{
public:
	float                                         _deadHardCooldownDuration;                         // 0x03C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStatusEffectSpawnData>         _effectsToSpawn;                                   // 0x03D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FPlayerStatusEffectSpawnerHelper       _spawnerHelper;                                    // 0x03E0(0x0088)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	float                                         _exhaustedCooldownPerLevel[0x3];                   // 0x0468(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetExhaustedDuration() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DeadHard">();
	}
	static class UDeadHard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDeadHard>();
	}
};
static_assert(alignof(UDeadHard) == 0x000008, "Wrong alignment on UDeadHard");
static_assert(sizeof(UDeadHard) == 0x000478, "Wrong size on UDeadHard");
static_assert(offsetof(UDeadHard, _deadHardCooldownDuration) == 0x0003C8, "Member 'UDeadHard::_deadHardCooldownDuration' has a wrong offset!");
static_assert(offsetof(UDeadHard, _effectsToSpawn) == 0x0003D0, "Member 'UDeadHard::_effectsToSpawn' has a wrong offset!");
static_assert(offsetof(UDeadHard, _spawnerHelper) == 0x0003E0, "Member 'UDeadHard::_spawnerHelper' has a wrong offset!");
static_assert(offsetof(UDeadHard, _exhaustedCooldownPerLevel) == 0x000468, "Member 'UDeadHard::_exhaustedCooldownPerLevel' has a wrong offset!");

// Class TheHuntress.DeadHardEffect
// 0x0000 (0x0350 - 0x0350)
class UDeadHardEffect final : public UStatusEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DeadHardEffect">();
	}
	static class UDeadHardEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDeadHardEffect>();
	}
};
static_assert(alignof(UDeadHardEffect) == 0x000008, "Wrong alignment on UDeadHardEffect");
static_assert(sizeof(UDeadHardEffect) == 0x000350, "Wrong size on UDeadHardEffect");

// Class TheHuntress.DeadHardInteraction
// 0x0010 (0x0630 - 0x0620)
class UDeadHardInteraction final : public UInteractionDefinition
{
public:
	uint8                                         Pad_618[0x18];                                     // 0x0618(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DeadHardInteraction">();
	}
	static class UDeadHardInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDeadHardInteraction>();
	}
};
static_assert(alignof(UDeadHardInteraction) == 0x000010, "Wrong alignment on UDeadHardInteraction");
static_assert(sizeof(UDeadHardInteraction) == 0x000630, "Wrong size on UDeadHardInteraction");

// Class TheHuntress.HatchetCooldown
// 0x0000 (0x0620 - 0x0620)
class UHatchetCooldown final : public UInteractionDefinition
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HatchetCooldown">();
	}
	static class UHatchetCooldown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHatchetCooldown>();
	}
};
static_assert(alignof(UHatchetCooldown) == 0x000010, "Wrong alignment on UHatchetCooldown");
static_assert(sizeof(UHatchetCooldown) == 0x000620, "Wrong size on UHatchetCooldown");

// Class TheHuntress.HatchetLauncher
// 0x0120 (0x02A0 - 0x0180)
class UHatchetLauncher final : public UKillerProjectileLauncher
{
public:
	struct FRotator                               _angleOffset;                                      // 0x0180(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _angleOffsetCurve;                                 // 0x0190(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _speedCurve;                                       // 0x0198(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _hatchetSpeedWhenThrowFullyCharged;                // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _hatchetPitchCurve;                                // 0x01A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _hatchetMinAngleOffset;                            // 0x01B0(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _hatchetMaxAngleOffset;                            // 0x01D8(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _hatchetMinSpeed;                                  // 0x0200(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _hatchetMaxSpeed;                                  // 0x0228(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _hatchetLaunchPitchMin;                            // 0x0250(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _hatchetLaunchPitchMax;                            // 0x0278(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool IsLaunchedHatchetFullyCharged() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HatchetLauncher">();
	}
	static class UHatchetLauncher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHatchetLauncher>();
	}
};
static_assert(alignof(UHatchetLauncher) == 0x000008, "Wrong alignment on UHatchetLauncher");
static_assert(sizeof(UHatchetLauncher) == 0x0002A0, "Wrong size on UHatchetLauncher");
static_assert(offsetof(UHatchetLauncher, _angleOffset) == 0x000180, "Member 'UHatchetLauncher::_angleOffset' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _angleOffsetCurve) == 0x000190, "Member 'UHatchetLauncher::_angleOffsetCurve' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _speedCurve) == 0x000198, "Member 'UHatchetLauncher::_speedCurve' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetSpeedWhenThrowFullyCharged) == 0x0001A0, "Member 'UHatchetLauncher::_hatchetSpeedWhenThrowFullyCharged' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetPitchCurve) == 0x0001A8, "Member 'UHatchetLauncher::_hatchetPitchCurve' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetMinAngleOffset) == 0x0001B0, "Member 'UHatchetLauncher::_hatchetMinAngleOffset' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetMaxAngleOffset) == 0x0001D8, "Member 'UHatchetLauncher::_hatchetMaxAngleOffset' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetMinSpeed) == 0x000200, "Member 'UHatchetLauncher::_hatchetMinSpeed' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetMaxSpeed) == 0x000228, "Member 'UHatchetLauncher::_hatchetMaxSpeed' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetLaunchPitchMin) == 0x000250, "Member 'UHatchetLauncher::_hatchetLaunchPitchMin' has a wrong offset!");
static_assert(offsetof(UHatchetLauncher, _hatchetLaunchPitchMax) == 0x000278, "Member 'UHatchetLauncher::_hatchetLaunchPitchMax' has a wrong offset!");

// Class TheHuntress.HatchetProjectile
// 0x0000 (0x0338 - 0x0338)
class AHatchetProjectile final : public AKillerProjectile
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HatchetProjectile">();
	}
	static class AHatchetProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHatchetProjectile>();
	}
};
static_assert(alignof(AHatchetProjectile) == 0x000008, "Wrong alignment on AHatchetProjectile");
static_assert(sizeof(AHatchetProjectile) == 0x000338, "Wrong size on AHatchetProjectile");

// Class TheHuntress.HatchetRack
// 0x0000 (0x0248 - 0x0248)
class AHatchetRack final : public ABaseLockerItem
{
public:
	void SetMovableHatchetVisibility(bool visible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HatchetRack">();
	}
	static class AHatchetRack* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHatchetRack>();
	}
};
static_assert(alignof(AHatchetRack) == 0x000008, "Wrong alignment on AHatchetRack");
static_assert(sizeof(AHatchetRack) == 0x000248, "Wrong size on AHatchetRack");

// Class TheHuntress.HatchetThrow
// 0x0030 (0x0780 - 0x0750)
class UHatchetThrow final : public UThrowInteraction
{
public:
	struct FDBDTunableRowHandle                   _hatchetThrowCancellationCooldown;                 // 0x0750(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_778[0x8];                                      // 0x0778(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class ATheHuntressPower* GetOwningHatchetSpawner() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HatchetThrow">();
	}
	static class UHatchetThrow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHatchetThrow>();
	}
};
static_assert(alignof(UHatchetThrow) == 0x000010, "Wrong alignment on UHatchetThrow");
static_assert(sizeof(UHatchetThrow) == 0x000780, "Wrong size on UHatchetThrow");
static_assert(offsetof(UHatchetThrow, _hatchetThrowCancellationCooldown) == 0x000750, "Member 'UHatchetThrow::_hatchetThrowCancellationCooldown' has a wrong offset!");

// Class TheHuntress.HexHuntressLullabyEffect
// 0x0008 (0x0358 - 0x0350)
class UHexHuntressLullabyEffect final : public UStatusEffect
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HexHuntressLullabyEffect">();
	}
	static class UHexHuntressLullabyEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHexHuntressLullabyEffect>();
	}
};
static_assert(alignof(UHexHuntressLullabyEffect) == 0x000008, "Wrong alignment on UHexHuntressLullabyEffect");
static_assert(sizeof(UHexHuntressLullabyEffect) == 0x000358, "Wrong size on UHexHuntressLullabyEffect");

// Class TheHuntress.HexHuntressLullabyPerk
// 0x0050 (0x0498 - 0x0448)
class UHexHuntressLullabyPerk final : public UHexPerk
{
public:
	uint8                                         Pad_448[0x18];                                     // 0x0448(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _huntressLullabyEffectID;                          // 0x0460(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _huntressLullabyStatusEffect;                      // 0x0470(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _possiblePlayerStateTagsInProgress;                // 0x0478(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HexHuntressLullabyPerk">();
	}
	static class UHexHuntressLullabyPerk* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHexHuntressLullabyPerk>();
	}
};
static_assert(alignof(UHexHuntressLullabyPerk) == 0x000008, "Wrong alignment on UHexHuntressLullabyPerk");
static_assert(sizeof(UHexHuntressLullabyPerk) == 0x000498, "Wrong size on UHexHuntressLullabyPerk");
static_assert(offsetof(UHexHuntressLullabyPerk, _huntressLullabyEffectID) == 0x000460, "Member 'UHexHuntressLullabyPerk::_huntressLullabyEffectID' has a wrong offset!");
static_assert(offsetof(UHexHuntressLullabyPerk, _huntressLullabyStatusEffect) == 0x000470, "Member 'UHexHuntressLullabyPerk::_huntressLullabyStatusEffect' has a wrong offset!");
static_assert(offsetof(UHexHuntressLullabyPerk, _possiblePlayerStateTagsInProgress) == 0x000478, "Member 'UHexHuntressLullabyPerk::_possiblePlayerStateTagsInProgress' has a wrong offset!");

// Class TheHuntress.HuntressPowerSubAnimInstance
// 0x0040 (0x0300 - 0x02C0)
class UHuntressPowerSubAnimInstance final : public UAnimInstance
{
public:
	bool                                          _powerIsActive;                                    // 0x02C0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _powerIsReleased;                                  // 0x02C1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _powerIsCancelled;                                 // 0x02C2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _powerIsInCooldown;                                // 0x02C3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _aimingPlayRate;                                   // 0x02C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _launchPlayRate;                                   // 0x02C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _cancelPlayRate;                                   // 0x02CC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _cooldownPlayRate;                                 // 0x02D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          _aimingAnimationSequence;                          // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          _launchAnimationSequence;                          // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          _cancelAnimationSequence;                          // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          _cooldownAnimationSequence;                        // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HuntressPowerSubAnimInstance">();
	}
	static class UHuntressPowerSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHuntressPowerSubAnimInstance>();
	}
};
static_assert(alignof(UHuntressPowerSubAnimInstance) == 0x000010, "Wrong alignment on UHuntressPowerSubAnimInstance");
static_assert(sizeof(UHuntressPowerSubAnimInstance) == 0x000300, "Wrong size on UHuntressPowerSubAnimInstance");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _powerIsActive) == 0x0002C0, "Member 'UHuntressPowerSubAnimInstance::_powerIsActive' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _powerIsReleased) == 0x0002C1, "Member 'UHuntressPowerSubAnimInstance::_powerIsReleased' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _powerIsCancelled) == 0x0002C2, "Member 'UHuntressPowerSubAnimInstance::_powerIsCancelled' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _powerIsInCooldown) == 0x0002C3, "Member 'UHuntressPowerSubAnimInstance::_powerIsInCooldown' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _aimingPlayRate) == 0x0002C4, "Member 'UHuntressPowerSubAnimInstance::_aimingPlayRate' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _launchPlayRate) == 0x0002C8, "Member 'UHuntressPowerSubAnimInstance::_launchPlayRate' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _cancelPlayRate) == 0x0002CC, "Member 'UHuntressPowerSubAnimInstance::_cancelPlayRate' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _cooldownPlayRate) == 0x0002D0, "Member 'UHuntressPowerSubAnimInstance::_cooldownPlayRate' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _aimingAnimationSequence) == 0x0002D8, "Member 'UHuntressPowerSubAnimInstance::_aimingAnimationSequence' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _launchAnimationSequence) == 0x0002E0, "Member 'UHuntressPowerSubAnimInstance::_launchAnimationSequence' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _cancelAnimationSequence) == 0x0002E8, "Member 'UHuntressPowerSubAnimInstance::_cancelAnimationSequence' has a wrong offset!");
static_assert(offsetof(UHuntressPowerSubAnimInstance, _cooldownAnimationSequence) == 0x0002F0, "Member 'UHuntressPowerSubAnimInstance::_cooldownAnimationSequence' has a wrong offset!");

// Class TheHuntress.ReloadHatchet
// 0x0000 (0x0650 - 0x0650)
class UReloadHatchet final : public UBaseLockerInteraction
{
public:
	bool IsInteractionPossible_Shared(const class ADBDPlayer* player) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReloadHatchet">();
	}
	static class UReloadHatchet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReloadHatchet>();
	}
};
static_assert(alignof(UReloadHatchet) == 0x000010, "Wrong alignment on UReloadHatchet");
static_assert(sizeof(UReloadHatchet) == 0x000650, "Wrong size on UReloadHatchet");

// Class TheHuntress.TheHuntressPower
// 0x0010 (0x04C0 - 0x04B0)
class ATheHuntressPower final : public ACollectable
{
public:
	TSubclassOf<class UReloadHatchet>             _reloadHatchetClass;                               // 0x04B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnThrowInteractionCancelled();
	void Cosmetic_OnThrowInteractionStart();
	void PrintDebugThrowInfo();
	void SetHatchetVisible(const bool visible);
	void SetPercentThrowStrength(const float percentStrength);
	void StartHatchetShineCosmetic();

	class UAkComponent* GetAkAudioHatchetSpawner() const;
	class UHatchetCooldown* GetHatchetCooldown() const;
	class UBaseProjectileLauncher* GetHatchetProjectileLauncher() const;
	class ASlasherPlayer* GetOwningKiller() const;
	bool HasHatchet() const;
	bool IsHatchetThrowFullyCharged() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TheHuntressPower">();
	}
	static class ATheHuntressPower* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATheHuntressPower>();
	}
};
static_assert(alignof(ATheHuntressPower) == 0x000008, "Wrong alignment on ATheHuntressPower");
static_assert(sizeof(ATheHuntressPower) == 0x0004C0, "Wrong size on ATheHuntressPower");
static_assert(offsetof(ATheHuntressPower, _reloadHatchetClass) == 0x0004B0, "Member 'ATheHuntressPower::_reloadHatchetClass' has a wrong offset!");

}

