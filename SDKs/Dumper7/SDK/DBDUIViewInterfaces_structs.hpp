#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIViewInterfaces

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "UMG_structs.hpp"
#include "Slate_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum DBDUIViewInterfaces.EArchiveTomeMenuState
// NumValues: 0x0003
enum class EArchiveTomeMenuState : uint8
{
	QuestMap                                 = 0,
	Journal                                  = 1,
	EArchiveTomeMenuState_MAX                = 2,
};

// Enum DBDUIViewInterfaces.EOnboardingMenuState
// NumValues: 0x0003
enum class EOnboardingMenuState : uint8
{
	Tutorial                                 = 0,
	GameManual                               = 1,
	EOnboardingMenuState_MAX                 = 2,
};

// Enum DBDUIViewInterfaces.EArchivePathStatus
// NumValues: 0x0004
enum class EArchivePathStatus : uint8
{
	Closed                                   = 0,
	Available                                = 1,
	Completed                                = 2,
	EArchivePathStatus_MAX                   = 3,
};

// Enum DBDUIViewInterfaces.ETierType
// NumValues: 0x0003
enum class ETierType : uint8
{
	None                                     = 0,
	Bonus                                    = 1,
	ETierType_MAX                            = 2,
};

// Enum DBDUIViewInterfaces.EArchiveTomeType
// NumValues: 0x0004
enum class EArchiveTomeType : uint8
{
	CurrentTome                              = 0,
	PastTome                                 = 1,
	EventTome                                = 2,
	EArchiveTomeType_MAX                     = 3,
};

// Enum DBDUIViewInterfaces.EGameManualMenuState
// NumValues: 0x0003
enum class EGameManualMenuState : uint8
{
	Categories                               = 0,
	Topics                                   = 1,
	EGameManualMenuState_MAX                 = 2,
};

// Enum DBDUIViewInterfaces.ESingleHookState
// NumValues: 0x0005
enum class ESingleHookState : uint8
{
	EMPTY                                    = 0,
	UNHOOKED                                 = 1,
	HOOKED                                   = 2,
	DISCONNECTED                             = 3,
	ESingleHookState_MAX                     = 4,
};

// Enum DBDUIViewInterfaces.EHudStatusEffectAlertViewType
// NumValues: 0x0005
enum class EHudStatusEffectAlertViewType : uint8
{
	Unhandled                                = 0,
	Perk                                     = 1,
	Item                                     = 2,
	Addon                                    = 3,
	EHudStatusEffectAlertViewType_MAX        = 4,
};

// Enum DBDUIViewInterfaces.EInteractionPromptType
// NumValues: 0x0008
enum class EInteractionPromptType : uint8
{
	PressButton                              = 0,
	MashButton                               = 1,
	HoldButton                               = 2,
	AlternateTwoButtons                      = 3,
	WiggleThumbstick                         = 4,
	MovementAxes                             = 5,
	MovementKeys                             = 6,
	EInteractionPromptType_MAX               = 7,
};

// Enum DBDUIViewInterfaces.ETestBuildFlagPosition
// NumValues: 0x0002
enum class ETestBuildFlagPosition : uint8
{
	Hud                                      = 0,
	ETestBuildFlagPosition_MAX               = 1,
};

// ScriptStruct DBDUIViewInterfaces.ArchiveNodeObjectiveViewData
// 0x0028 (0x0028 - 0x0000)
struct FArchiveNodeObjectiveViewData final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	int32                                         CurrentProgress;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProgress;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestProgressionType                         ProgressionType;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCommunityObjective;                              // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArchiveNodeObjectiveViewData) == 0x000008, "Wrong alignment on FArchiveNodeObjectiveViewData");
static_assert(sizeof(FArchiveNodeObjectiveViewData) == 0x000028, "Wrong size on FArchiveNodeObjectiveViewData");
static_assert(offsetof(FArchiveNodeObjectiveViewData, Description) == 0x000000, "Member 'FArchiveNodeObjectiveViewData::Description' has a wrong offset!");
static_assert(offsetof(FArchiveNodeObjectiveViewData, CurrentProgress) == 0x000018, "Member 'FArchiveNodeObjectiveViewData::CurrentProgress' has a wrong offset!");
static_assert(offsetof(FArchiveNodeObjectiveViewData, MaxProgress) == 0x00001C, "Member 'FArchiveNodeObjectiveViewData::MaxProgress' has a wrong offset!");
static_assert(offsetof(FArchiveNodeObjectiveViewData, ProgressionType) == 0x000020, "Member 'FArchiveNodeObjectiveViewData::ProgressionType' has a wrong offset!");
static_assert(offsetof(FArchiveNodeObjectiveViewData, IsCommunityObjective) == 0x000021, "Member 'FArchiveNodeObjectiveViewData::IsCommunityObjective' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CharacterTooltipViewData
// 0x0070 (0x0070 - 0x0000)
struct FCharacterTooltipViewData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Biography;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   DLCTitle;                                          // 0x0030(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Prestige;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnlocked;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNewInStore;                                      // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOwned;                                           // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAvailableInStore;                                // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDLCPurchasable;                                  // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterDifficulty                          Difficulty;                                        // 0x0055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0056(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CharacterDisabledMessage;                          // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterTooltipViewData) == 0x000008, "Wrong alignment on FCharacterTooltipViewData");
static_assert(sizeof(FCharacterTooltipViewData) == 0x000070, "Wrong size on FCharacterTooltipViewData");
static_assert(offsetof(FCharacterTooltipViewData, DisplayName) == 0x000000, "Member 'FCharacterTooltipViewData::DisplayName' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, Biography) == 0x000018, "Member 'FCharacterTooltipViewData::Biography' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, DLCTitle) == 0x000030, "Member 'FCharacterTooltipViewData::DLCTitle' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, Level) == 0x000048, "Member 'FCharacterTooltipViewData::Level' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, Prestige) == 0x00004C, "Member 'FCharacterTooltipViewData::Prestige' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, IsUnlocked) == 0x000050, "Member 'FCharacterTooltipViewData::IsUnlocked' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, IsNewInStore) == 0x000051, "Member 'FCharacterTooltipViewData::IsNewInStore' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, IsOwned) == 0x000052, "Member 'FCharacterTooltipViewData::IsOwned' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, IsAvailableInStore) == 0x000053, "Member 'FCharacterTooltipViewData::IsAvailableInStore' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, IsDLCPurchasable) == 0x000054, "Member 'FCharacterTooltipViewData::IsDLCPurchasable' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, Difficulty) == 0x000055, "Member 'FCharacterTooltipViewData::Difficulty' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, IsEnabled) == 0x000056, "Member 'FCharacterTooltipViewData::IsEnabled' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, CharacterDisabledMessage) == 0x000058, "Member 'FCharacterTooltipViewData::CharacterDisabledMessage' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.RewardViewData
// 0x0001 (0x0001 - 0x0000)
struct FRewardViewData
{
public:
	bool                                          IsHighlighted;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardViewData) == 0x000001, "Wrong alignment on FRewardViewData");
static_assert(sizeof(FRewardViewData) == 0x000001, "Wrong size on FRewardViewData");
static_assert(offsetof(FRewardViewData, IsHighlighted) == 0x000000, "Member 'FRewardViewData::IsHighlighted' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CharacterRewardViewData
// 0x00C7 (0x00C8 - 0x0001)
struct FCharacterRewardViewData final : public FRewardViewData
{
public:
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemId;                                            // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0010(0x0030)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOwned;                                           // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Prestige;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterTooltipViewData              TooltipData;                                       // 0x0050(0x0070)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x00C0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterRewardViewData) == 0x000008, "Wrong alignment on FCharacterRewardViewData");
static_assert(sizeof(FCharacterRewardViewData) == 0x0000C8, "Wrong size on FCharacterRewardViewData");
static_assert(offsetof(FCharacterRewardViewData, ItemId) == 0x000004, "Member 'FCharacterRewardViewData::ItemId' has a wrong offset!");
static_assert(offsetof(FCharacterRewardViewData, IconTexture) == 0x000010, "Member 'FCharacterRewardViewData::IconTexture' has a wrong offset!");
static_assert(offsetof(FCharacterRewardViewData, IsOwned) == 0x000040, "Member 'FCharacterRewardViewData::IsOwned' has a wrong offset!");
static_assert(offsetof(FCharacterRewardViewData, Level) == 0x000044, "Member 'FCharacterRewardViewData::Level' has a wrong offset!");
static_assert(offsetof(FCharacterRewardViewData, Prestige) == 0x000048, "Member 'FCharacterRewardViewData::Prestige' has a wrong offset!");
static_assert(offsetof(FCharacterRewardViewData, TooltipData) == 0x000050, "Member 'FCharacterRewardViewData::TooltipData' has a wrong offset!");
static_assert(offsetof(FCharacterRewardViewData, IsEnabled) == 0x0000C0, "Member 'FCharacterRewardViewData::IsEnabled' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CurrencyExpirationLabelViewData
// 0x0020 (0x0020 - 0x0000)
struct FCurrencyExpirationLabelViewData final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ExpirationDate;                                    // 0x0008(0x0018)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyExpirationLabelViewData) == 0x000008, "Wrong alignment on FCurrencyExpirationLabelViewData");
static_assert(sizeof(FCurrencyExpirationLabelViewData) == 0x000020, "Wrong size on FCurrencyExpirationLabelViewData");
static_assert(offsetof(FCurrencyExpirationLabelViewData, Amount) == 0x000000, "Member 'FCurrencyExpirationLabelViewData::Amount' has a wrong offset!");
static_assert(offsetof(FCurrencyExpirationLabelViewData, ExpirationDate) == 0x000008, "Member 'FCurrencyExpirationLabelViewData::ExpirationDate' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CurrencyProgressionTooltipViewData
// 0x00C0 (0x00C0 - 0x0000)
struct FCurrencyProgressionTooltipViewData final
{
public:
	bool                                          IsCurrency;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      TooltipHeaderMaterial;                             // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   EventName;                                         // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   EventDescription;                                  // 0x0080(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   EventTimer;                                        // 0x0098(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TArray<struct FCurrencyExpirationLabelViewData> ExpirationData;                                  // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyProgressionTooltipViewData) == 0x000008, "Wrong alignment on FCurrencyProgressionTooltipViewData");
static_assert(sizeof(FCurrencyProgressionTooltipViewData) == 0x0000C0, "Wrong size on FCurrencyProgressionTooltipViewData");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, IsCurrency) == 0x000000, "Member 'FCurrencyProgressionTooltipViewData::IsCurrency' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, Title) == 0x000008, "Member 'FCurrencyProgressionTooltipViewData::Title' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, Description) == 0x000020, "Member 'FCurrencyProgressionTooltipViewData::Description' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, TooltipHeaderMaterial) == 0x000038, "Member 'FCurrencyProgressionTooltipViewData::TooltipHeaderMaterial' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, EventName) == 0x000068, "Member 'FCurrencyProgressionTooltipViewData::EventName' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, EventDescription) == 0x000080, "Member 'FCurrencyProgressionTooltipViewData::EventDescription' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, EventTimer) == 0x000098, "Member 'FCurrencyProgressionTooltipViewData::EventTimer' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, ExpirationData) == 0x0000B0, "Member 'FCurrencyProgressionTooltipViewData::ExpirationData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CurrencyProgressionRewardViewData
// 0x0127 (0x0128 - 0x0001)
struct FCurrencyProgressionRewardViewData final : public FRewardViewData
{
public:
	ECurrencyType                                 CurrencyType;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProgressionType                              ProgressionType;                                   // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      RewardBackgroundMaterial;                          // 0x0008(0x0030)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RewardIcon;                                        // 0x0038(0x0030)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurrencyProgressionTooltipViewData    TooltipData;                                       // 0x0068(0x00C0)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyProgressionRewardViewData) == 0x000008, "Wrong alignment on FCurrencyProgressionRewardViewData");
static_assert(sizeof(FCurrencyProgressionRewardViewData) == 0x000128, "Wrong size on FCurrencyProgressionRewardViewData");
static_assert(offsetof(FCurrencyProgressionRewardViewData, CurrencyType) == 0x000001, "Member 'FCurrencyProgressionRewardViewData::CurrencyType' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionRewardViewData, ProgressionType) == 0x000002, "Member 'FCurrencyProgressionRewardViewData::ProgressionType' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionRewardViewData, Amount) == 0x000004, "Member 'FCurrencyProgressionRewardViewData::Amount' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionRewardViewData, RewardBackgroundMaterial) == 0x000008, "Member 'FCurrencyProgressionRewardViewData::RewardBackgroundMaterial' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionRewardViewData, RewardIcon) == 0x000038, "Member 'FCurrencyProgressionRewardViewData::RewardIcon' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionRewardViewData, TooltipData) == 0x000068, "Member 'FCurrencyProgressionRewardViewData::TooltipData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PriceViewData
// 0x0010 (0x0010 - 0x0000)
struct FPriceViewData final
{
public:
	ECurrencyType                                 CurrencyType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Price;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Discount;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAffordable;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPriceViewData) == 0x000004, "Wrong alignment on FPriceViewData");
static_assert(sizeof(FPriceViewData) == 0x000010, "Wrong size on FPriceViewData");
static_assert(offsetof(FPriceViewData, CurrencyType) == 0x000000, "Member 'FPriceViewData::CurrencyType' has a wrong offset!");
static_assert(offsetof(FPriceViewData, Price) == 0x000004, "Member 'FPriceViewData::Price' has a wrong offset!");
static_assert(offsetof(FPriceViewData, Discount) == 0x000008, "Member 'FPriceViewData::Discount' has a wrong offset!");
static_assert(offsetof(FPriceViewData, IsAffordable) == 0x00000C, "Member 'FPriceViewData::IsAffordable' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CustomizationTooltipViewData
// 0x00E8 (0x00E8 - 0x0000)
struct FCustomizationTooltipViewData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   ParentName;                                        // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   RarityPartInfo;                                    // 0x0030(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   CollectionDisplayName;                             // 0x0048(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0060(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   RoleCategoryInfo;                                  // 0x0078(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          IsLocked;                                          // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnbreakable;                                     // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEquipped;                                        // 0x0092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOwned;                                           // 0x0093(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOutfitPart;                                      // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutfitInfoText;                                    // 0x0098(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	EPlayerRole                                   AssociatedRole;                                    // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   Rarity;                                            // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPriceViewData>                 Prices;                                            // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x00C8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CustomizationDisabledMessage;                      // 0x00D0(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationTooltipViewData) == 0x000008, "Wrong alignment on FCustomizationTooltipViewData");
static_assert(sizeof(FCustomizationTooltipViewData) == 0x0000E8, "Wrong size on FCustomizationTooltipViewData");
static_assert(offsetof(FCustomizationTooltipViewData, DisplayName) == 0x000000, "Member 'FCustomizationTooltipViewData::DisplayName' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, ParentName) == 0x000018, "Member 'FCustomizationTooltipViewData::ParentName' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, RarityPartInfo) == 0x000030, "Member 'FCustomizationTooltipViewData::RarityPartInfo' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, CollectionDisplayName) == 0x000048, "Member 'FCustomizationTooltipViewData::CollectionDisplayName' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, Description) == 0x000060, "Member 'FCustomizationTooltipViewData::Description' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, RoleCategoryInfo) == 0x000078, "Member 'FCustomizationTooltipViewData::RoleCategoryInfo' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, IsLocked) == 0x000090, "Member 'FCustomizationTooltipViewData::IsLocked' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, IsUnbreakable) == 0x000091, "Member 'FCustomizationTooltipViewData::IsUnbreakable' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, IsEquipped) == 0x000092, "Member 'FCustomizationTooltipViewData::IsEquipped' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, IsOwned) == 0x000093, "Member 'FCustomizationTooltipViewData::IsOwned' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, IsOutfitPart) == 0x000094, "Member 'FCustomizationTooltipViewData::IsOutfitPart' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, OutfitInfoText) == 0x000098, "Member 'FCustomizationTooltipViewData::OutfitInfoText' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, AssociatedRole) == 0x0000B0, "Member 'FCustomizationTooltipViewData::AssociatedRole' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, Rarity) == 0x0000B1, "Member 'FCustomizationTooltipViewData::Rarity' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, Prices) == 0x0000B8, "Member 'FCustomizationTooltipViewData::Prices' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, IsEnabled) == 0x0000C8, "Member 'FCustomizationTooltipViewData::IsEnabled' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, CustomizationDisabledMessage) == 0x0000D0, "Member 'FCustomizationTooltipViewData::CustomizationDisabledMessage' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CustomizationRewardViewData
// 0x0147 (0x0148 - 0x0001)
struct FCustomizationRewardViewData final : public FRewardViewData
{
public:
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CustomizationId;                                   // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutfitId;                                          // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0020(0x0030)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   Rarity;                                            // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOwned;                                           // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEquipped;                                        // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnbreakable;                                     // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomizationTooltipViewData          TooltipData;                                       // 0x0058(0x00E8)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0140(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizationRewardViewData) == 0x000008, "Wrong alignment on FCustomizationRewardViewData");
static_assert(sizeof(FCustomizationRewardViewData) == 0x000148, "Wrong size on FCustomizationRewardViewData");
static_assert(offsetof(FCustomizationRewardViewData, CustomizationId) == 0x000004, "Member 'FCustomizationRewardViewData::CustomizationId' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, OutfitId) == 0x000010, "Member 'FCustomizationRewardViewData::OutfitId' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, IconTexture) == 0x000020, "Member 'FCustomizationRewardViewData::IconTexture' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, Rarity) == 0x000050, "Member 'FCustomizationRewardViewData::Rarity' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, IsOwned) == 0x000051, "Member 'FCustomizationRewardViewData::IsOwned' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, IsEquipped) == 0x000052, "Member 'FCustomizationRewardViewData::IsEquipped' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, IsUnbreakable) == 0x000053, "Member 'FCustomizationRewardViewData::IsUnbreakable' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, TooltipData) == 0x000058, "Member 'FCustomizationRewardViewData::TooltipData' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, IsEnabled) == 0x000140, "Member 'FCustomizationRewardViewData::IsEnabled' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.RewardWrapperViewData
// 0x0340 (0x0340 - 0x0000)
struct FRewardWrapperViewData final
{
public:
	ERewardType                                   RewardType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterRewardViewData               CharacterRewardViewData;                           // 0x0008(0x00C8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCurrencyProgressionRewardViewData     CurrencyProgressionRewardViewData;                 // 0x00D0(0x0128)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCustomizationRewardViewData           CustomizationRewardViewData;                       // 0x01F8(0x0148)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardWrapperViewData) == 0x000008, "Wrong alignment on FRewardWrapperViewData");
static_assert(sizeof(FRewardWrapperViewData) == 0x000340, "Wrong size on FRewardWrapperViewData");
static_assert(offsetof(FRewardWrapperViewData, RewardType) == 0x000000, "Member 'FRewardWrapperViewData::RewardType' has a wrong offset!");
static_assert(offsetof(FRewardWrapperViewData, CharacterRewardViewData) == 0x000008, "Member 'FRewardWrapperViewData::CharacterRewardViewData' has a wrong offset!");
static_assert(offsetof(FRewardWrapperViewData, CurrencyProgressionRewardViewData) == 0x0000D0, "Member 'FRewardWrapperViewData::CurrencyProgressionRewardViewData' has a wrong offset!");
static_assert(offsetof(FRewardWrapperViewData, CustomizationRewardViewData) == 0x0001F8, "Member 'FRewardWrapperViewData::CustomizationRewardViewData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchiveNodeViewData
// 0x00B8 (0x00B8 - 0x0000)
struct FArchiveNodeViewData final
{
public:
	EArchiveNodeType                              Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStoryNodeState                               Status;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Subtitle;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FString                                 DebugInfo;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IconPath;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FArchiveNodeObjectiveViewData>  Objectives;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FRewardWrapperViewData>         Rewards;                                           // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class FText>                           VignetteTitles;                                    // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsImageReward;                                     // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VignetteId;                                        // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchiveNodeViewData) == 0x000008, "Wrong alignment on FArchiveNodeViewData");
static_assert(sizeof(FArchiveNodeViewData) == 0x0000B8, "Wrong size on FArchiveNodeViewData");
static_assert(offsetof(FArchiveNodeViewData, Type) == 0x000000, "Member 'FArchiveNodeViewData::Type' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, Status) == 0x000001, "Member 'FArchiveNodeViewData::Status' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, Title) == 0x000008, "Member 'FArchiveNodeViewData::Title' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, Subtitle) == 0x000020, "Member 'FArchiveNodeViewData::Subtitle' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, Description) == 0x000038, "Member 'FArchiveNodeViewData::Description' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, DebugInfo) == 0x000050, "Member 'FArchiveNodeViewData::DebugInfo' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, IconPath) == 0x000060, "Member 'FArchiveNodeViewData::IconPath' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, Objectives) == 0x000070, "Member 'FArchiveNodeViewData::Objectives' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, Rewards) == 0x000080, "Member 'FArchiveNodeViewData::Rewards' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, VignetteTitles) == 0x000090, "Member 'FArchiveNodeViewData::VignetteTitles' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, Role) == 0x0000A0, "Member 'FArchiveNodeViewData::Role' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, IsImageReward) == 0x0000A1, "Member 'FArchiveNodeViewData::IsImageReward' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, VignetteId) == 0x0000A8, "Member 'FArchiveNodeViewData::VignetteId' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchiveNodeGraphViewData
// 0x00F0 (0x00F0 - 0x0000)
struct FArchiveNodeGraphViewData final
{
public:
	class FName                                   Id;                                                // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArchiveNodeViewData                   ViewData;                                          // 0x0010(0x00B8)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Neighbors;                                         // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<int32>                                 PathIndices;                                       // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchiveNodeGraphViewData) == 0x000008, "Wrong alignment on FArchiveNodeGraphViewData");
static_assert(sizeof(FArchiveNodeGraphViewData) == 0x0000F0, "Wrong size on FArchiveNodeGraphViewData");
static_assert(offsetof(FArchiveNodeGraphViewData, Id) == 0x000000, "Member 'FArchiveNodeGraphViewData::Id' has a wrong offset!");
static_assert(offsetof(FArchiveNodeGraphViewData, ViewData) == 0x000010, "Member 'FArchiveNodeGraphViewData::ViewData' has a wrong offset!");
static_assert(offsetof(FArchiveNodeGraphViewData, Position) == 0x0000C8, "Member 'FArchiveNodeGraphViewData::Position' has a wrong offset!");
static_assert(offsetof(FArchiveNodeGraphViewData, Neighbors) == 0x0000D0, "Member 'FArchiveNodeGraphViewData::Neighbors' has a wrong offset!");
static_assert(offsetof(FArchiveNodeGraphViewData, PathIndices) == 0x0000E0, "Member 'FArchiveNodeGraphViewData::PathIndices' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.BaseLoadoutPartViewData
// 0x0058 (0x0058 - 0x0000)
struct FBaseLoadoutPartViewData
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0010(0x0030)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   Rarity;                                            // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBaseLoadoutPartViewData) == 0x000008, "Wrong alignment on FBaseLoadoutPartViewData");
static_assert(sizeof(FBaseLoadoutPartViewData) == 0x000058, "Wrong size on FBaseLoadoutPartViewData");
static_assert(offsetof(FBaseLoadoutPartViewData, ItemId) == 0x000000, "Member 'FBaseLoadoutPartViewData::ItemId' has a wrong offset!");
static_assert(offsetof(FBaseLoadoutPartViewData, IconTexture) == 0x000010, "Member 'FBaseLoadoutPartViewData::IconTexture' has a wrong offset!");
static_assert(offsetof(FBaseLoadoutPartViewData, DisplayName) == 0x000040, "Member 'FBaseLoadoutPartViewData::DisplayName' has a wrong offset!");
static_assert(offsetof(FBaseLoadoutPartViewData, Rarity) == 0x000050, "Member 'FBaseLoadoutPartViewData::Rarity' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.OfferingViewData
// 0x0008 (0x0060 - 0x0058)
struct FOfferingViewData final : public FBaseLoadoutPartViewData
{
public:
	int32                                         StackCount;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemAvailability                             Availability;                                      // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOfferingViewData) == 0x000008, "Wrong alignment on FOfferingViewData");
static_assert(sizeof(FOfferingViewData) == 0x000060, "Wrong size on FOfferingViewData");
static_assert(offsetof(FOfferingViewData, StackCount) == 0x000058, "Member 'FOfferingViewData::StackCount' has a wrong offset!");
static_assert(offsetof(FOfferingViewData, Availability) == 0x00005C, "Member 'FOfferingViewData::Availability' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ScoreAlertViewData
// 0x0020 (0x0020 - 0x0000)
struct FScoreAlertViewData final
{
public:
	EDBDScoreCategory                             ScoreType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreValue;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScoreAlertViewData) == 0x000008, "Wrong alignment on FScoreAlertViewData");
static_assert(sizeof(FScoreAlertViewData) == 0x000020, "Wrong size on FScoreAlertViewData");
static_assert(offsetof(FScoreAlertViewData, ScoreType) == 0x000000, "Member 'FScoreAlertViewData::ScoreType' has a wrong offset!");
static_assert(offsetof(FScoreAlertViewData, Title) == 0x000008, "Member 'FScoreAlertViewData::Title' has a wrong offset!");
static_assert(offsetof(FScoreAlertViewData, ScoreValue) == 0x000018, "Member 'FScoreAlertViewData::ScoreValue' has a wrong offset!");
static_assert(offsetof(FScoreAlertViewData, Progress) == 0x00001C, "Member 'FScoreAlertViewData::Progress' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PopupButtonViewData
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FPopupButtonViewData final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0018(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x48];                                      // 0x0038(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPopupButtonViewData) == 0x000010, "Wrong alignment on FPopupButtonViewData");
static_assert(sizeof(FPopupButtonViewData) == 0x000080, "Wrong size on FPopupButtonViewData");
static_assert(offsetof(FPopupButtonViewData, Label) == 0x000000, "Member 'FPopupButtonViewData::Label' has a wrong offset!");
static_assert(offsetof(FPopupButtonViewData, Key) == 0x000018, "Member 'FPopupButtonViewData::Key' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.TabWidgetData
// 0x0080 (0x0080 - 0x0000)
struct FTabWidgetData final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	bool                                          HasNotification;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0028(0x0030)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForcesIconSize;                                    // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              IconSize;                                          // 0x005C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnalyticsName;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKillSwitchEnabled;                               // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTabWidgetData) == 0x000008, "Wrong alignment on FTabWidgetData");
static_assert(sizeof(FTabWidgetData) == 0x000080, "Wrong size on FTabWidgetData");
static_assert(offsetof(FTabWidgetData, Key) == 0x000000, "Member 'FTabWidgetData::Key' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, Title) == 0x000008, "Member 'FTabWidgetData::Title' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, HasNotification) == 0x000020, "Member 'FTabWidgetData::HasNotification' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, Icon) == 0x000028, "Member 'FTabWidgetData::Icon' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, ForcesIconSize) == 0x000058, "Member 'FTabWidgetData::ForcesIconSize' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, IconSize) == 0x00005C, "Member 'FTabWidgetData::IconSize' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, AnalyticsName) == 0x000068, "Member 'FTabWidgetData::AnalyticsName' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, IsKillSwitchEnabled) == 0x000078, "Member 'FTabWidgetData::IsKillSwitchEnabled' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchiveMapPathViewData
// 0x002C (0x002C - 0x0000)
struct FArchiveMapPathViewData final
{
public:
	struct FVector2D                              StartPositon;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndPositon;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartNodeId;                                       // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndNodeId;                                         // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArchivePathStatus                            Status;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArchiveMapPathViewData) == 0x000004, "Wrong alignment on FArchiveMapPathViewData");
static_assert(sizeof(FArchiveMapPathViewData) == 0x00002C, "Wrong size on FArchiveMapPathViewData");
static_assert(offsetof(FArchiveMapPathViewData, StartPositon) == 0x000000, "Member 'FArchiveMapPathViewData::StartPositon' has a wrong offset!");
static_assert(offsetof(FArchiveMapPathViewData, EndPositon) == 0x000008, "Member 'FArchiveMapPathViewData::EndPositon' has a wrong offset!");
static_assert(offsetof(FArchiveMapPathViewData, StartNodeId) == 0x000010, "Member 'FArchiveMapPathViewData::StartNodeId' has a wrong offset!");
static_assert(offsetof(FArchiveMapPathViewData, EndNodeId) == 0x00001C, "Member 'FArchiveMapPathViewData::EndNodeId' has a wrong offset!");
static_assert(offsetof(FArchiveMapPathViewData, Status) == 0x000028, "Member 'FArchiveMapPathViewData::Status' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.AddonViewData
// 0x0010 (0x0068 - 0x0058)
struct FAddonViewData final : public FBaseLoadoutPartViewData
{
public:
	float                                         Cooldown;                                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusEffectType                             StatusEffectType;                                  // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StackCount;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoadoutPartState                             LoadoutPartState;                                  // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAddonViewData) == 0x000008, "Wrong alignment on FAddonViewData");
static_assert(sizeof(FAddonViewData) == 0x000068, "Wrong size on FAddonViewData");
static_assert(offsetof(FAddonViewData, Cooldown) == 0x000058, "Member 'FAddonViewData::Cooldown' has a wrong offset!");
static_assert(offsetof(FAddonViewData, StatusEffectType) == 0x00005C, "Member 'FAddonViewData::StatusEffectType' has a wrong offset!");
static_assert(offsetof(FAddonViewData, StackCount) == 0x000060, "Member 'FAddonViewData::StackCount' has a wrong offset!");
static_assert(offsetof(FAddonViewData, LoadoutPartState) == 0x000064, "Member 'FAddonViewData::LoadoutPartState' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchiveChallengeReminderViewData
// 0x00D0 (0x00D0 - 0x0000)
struct FArchiveChallengeReminderViewData final
{
public:
	struct FArchiveNodeViewData                   NodeViewData;                                      // 0x0000(0x00B8)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   TomeSourceSubtitle;                                // 0x00B8(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchiveChallengeReminderViewData) == 0x000008, "Wrong alignment on FArchiveChallengeReminderViewData");
static_assert(sizeof(FArchiveChallengeReminderViewData) == 0x0000D0, "Wrong size on FArchiveChallengeReminderViewData");
static_assert(offsetof(FArchiveChallengeReminderViewData, NodeViewData) == 0x000000, "Member 'FArchiveChallengeReminderViewData::NodeViewData' has a wrong offset!");
static_assert(offsetof(FArchiveChallengeReminderViewData, TomeSourceSubtitle) == 0x0000B8, "Member 'FArchiveChallengeReminderViewData::TomeSourceSubtitle' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CompendiumButtonData
// 0x0070 (0x0070 - 0x0000)
struct FCompendiumButtonData final
{
public:
	class FString                                 TomeId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TomeTitle;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          IsMastered;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VolumeIndex;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UArchiveStoryLevelViewData*>     TomeLevels;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              StoryBookMarkTexture;                              // 0x0040(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompendiumButtonData) == 0x000008, "Wrong alignment on FCompendiumButtonData");
static_assert(sizeof(FCompendiumButtonData) == 0x000070, "Wrong size on FCompendiumButtonData");
static_assert(offsetof(FCompendiumButtonData, TomeId) == 0x000000, "Member 'FCompendiumButtonData::TomeId' has a wrong offset!");
static_assert(offsetof(FCompendiumButtonData, TomeTitle) == 0x000010, "Member 'FCompendiumButtonData::TomeTitle' has a wrong offset!");
static_assert(offsetof(FCompendiumButtonData, IsMastered) == 0x000028, "Member 'FCompendiumButtonData::IsMastered' has a wrong offset!");
static_assert(offsetof(FCompendiumButtonData, IsActive) == 0x000029, "Member 'FCompendiumButtonData::IsActive' has a wrong offset!");
static_assert(offsetof(FCompendiumButtonData, VolumeIndex) == 0x00002C, "Member 'FCompendiumButtonData::VolumeIndex' has a wrong offset!");
static_assert(offsetof(FCompendiumButtonData, TomeLevels) == 0x000030, "Member 'FCompendiumButtonData::TomeLevels' has a wrong offset!");
static_assert(offsetof(FCompendiumButtonData, StoryBookMarkTexture) == 0x000040, "Member 'FCompendiumButtonData::StoryBookMarkTexture' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchiveRewardNodeTooltipViewData
// 0x00F8 (0x00F8 - 0x0000)
struct FArchiveRewardNodeTooltipViewData final
{
public:
	class FString                                 NodeDebugInfo;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomizationTooltipViewData          CustomizationTooltipViewData;                      // 0x0010(0x00E8)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchiveRewardNodeTooltipViewData) == 0x000008, "Wrong alignment on FArchiveRewardNodeTooltipViewData");
static_assert(sizeof(FArchiveRewardNodeTooltipViewData) == 0x0000F8, "Wrong size on FArchiveRewardNodeTooltipViewData");
static_assert(offsetof(FArchiveRewardNodeTooltipViewData, NodeDebugInfo) == 0x000000, "Member 'FArchiveRewardNodeTooltipViewData::NodeDebugInfo' has a wrong offset!");
static_assert(offsetof(FArchiveRewardNodeTooltipViewData, CustomizationTooltipViewData) == 0x000010, "Member 'FArchiveRewardNodeTooltipViewData::CustomizationTooltipViewData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchivesVignetteEntryViewData
// 0x0070 (0x0070 - 0x0000)
struct FArchivesVignetteEntryViewData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          IsRead;                                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasAudio;                                          // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              RewardImage;                                       // 0x0038(0x0030)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviewTextureOffset;                              // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArchivesVignetteEntryViewData) == 0x000008, "Wrong alignment on FArchivesVignetteEntryViewData");
static_assert(sizeof(FArchivesVignetteEntryViewData) == 0x000070, "Wrong size on FArchivesVignetteEntryViewData");
static_assert(offsetof(FArchivesVignetteEntryViewData, Title) == 0x000000, "Member 'FArchivesVignetteEntryViewData::Title' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteEntryViewData, Description) == 0x000018, "Member 'FArchivesVignetteEntryViewData::Description' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteEntryViewData, IsRead) == 0x000030, "Member 'FArchivesVignetteEntryViewData::IsRead' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteEntryViewData, HasAudio) == 0x000031, "Member 'FArchivesVignetteEntryViewData::HasAudio' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteEntryViewData, RewardImage) == 0x000038, "Member 'FArchivesVignetteEntryViewData::RewardImage' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteEntryViewData, PreviewTextureOffset) == 0x000068, "Member 'FArchivesVignetteEntryViewData::PreviewTextureOffset' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchivesVignetteViewData
// 0x0060 (0x0060 - 0x0000)
struct FArchivesVignetteViewData final
{
public:
	class FString                                 VignetteId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Subtitle;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	int32                                         LastShownProgressValue;                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentProgress;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProgress;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CinematicsNumber;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FArchivesVignetteEntryViewData> Entries;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchivesVignetteViewData) == 0x000008, "Wrong alignment on FArchivesVignetteViewData");
static_assert(sizeof(FArchivesVignetteViewData) == 0x000060, "Wrong size on FArchivesVignetteViewData");
static_assert(offsetof(FArchivesVignetteViewData, VignetteId) == 0x000000, "Member 'FArchivesVignetteViewData::VignetteId' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteViewData, Title) == 0x000010, "Member 'FArchivesVignetteViewData::Title' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteViewData, Subtitle) == 0x000028, "Member 'FArchivesVignetteViewData::Subtitle' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteViewData, LastShownProgressValue) == 0x000040, "Member 'FArchivesVignetteViewData::LastShownProgressValue' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteViewData, CurrentProgress) == 0x000044, "Member 'FArchivesVignetteViewData::CurrentProgress' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteViewData, MaxProgress) == 0x000048, "Member 'FArchivesVignetteViewData::MaxProgress' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteViewData, CinematicsNumber) == 0x00004C, "Member 'FArchivesVignetteViewData::CinematicsNumber' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteViewData, Entries) == 0x000050, "Member 'FArchivesVignetteViewData::Entries' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchivesPastTomeViewData
// 0x0070 (0x0070 - 0x0000)
struct FArchivesPastTomeViewData final
{
public:
	class FString                                 TomeId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TomeTitle;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          HasActiveNode;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VolumeIndex;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UArchiveStoryLevelViewData*>     TomeLevels;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              StoryBookMarkTexture;                              // 0x0040(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchivesPastTomeViewData) == 0x000008, "Wrong alignment on FArchivesPastTomeViewData");
static_assert(sizeof(FArchivesPastTomeViewData) == 0x000070, "Wrong size on FArchivesPastTomeViewData");
static_assert(offsetof(FArchivesPastTomeViewData, TomeId) == 0x000000, "Member 'FArchivesPastTomeViewData::TomeId' has a wrong offset!");
static_assert(offsetof(FArchivesPastTomeViewData, TomeTitle) == 0x000010, "Member 'FArchivesPastTomeViewData::TomeTitle' has a wrong offset!");
static_assert(offsetof(FArchivesPastTomeViewData, HasActiveNode) == 0x000028, "Member 'FArchivesPastTomeViewData::HasActiveNode' has a wrong offset!");
static_assert(offsetof(FArchivesPastTomeViewData, VolumeIndex) == 0x00002C, "Member 'FArchivesPastTomeViewData::VolumeIndex' has a wrong offset!");
static_assert(offsetof(FArchivesPastTomeViewData, TomeLevels) == 0x000030, "Member 'FArchivesPastTomeViewData::TomeLevels' has a wrong offset!");
static_assert(offsetof(FArchivesPastTomeViewData, StoryBookMarkTexture) == 0x000040, "Member 'FArchivesPastTomeViewData::StoryBookMarkTexture' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchivesRiftGenericViewData
// 0x0020 (0x0020 - 0x0000)
struct FArchivesRiftGenericViewData final
{
public:
	struct FDateTime                              EndDate;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentTier;                                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTier;                                           // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentStars;                                      // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StarsPerTiers;                                     // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwnPass;                                           // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowBonusTierTooltip;                              // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArchivesRiftGenericViewData) == 0x000008, "Wrong alignment on FArchivesRiftGenericViewData");
static_assert(sizeof(FArchivesRiftGenericViewData) == 0x000020, "Wrong size on FArchivesRiftGenericViewData");
static_assert(offsetof(FArchivesRiftGenericViewData, EndDate) == 0x000000, "Member 'FArchivesRiftGenericViewData::EndDate' has a wrong offset!");
static_assert(offsetof(FArchivesRiftGenericViewData, CurrentTier) == 0x000008, "Member 'FArchivesRiftGenericViewData::CurrentTier' has a wrong offset!");
static_assert(offsetof(FArchivesRiftGenericViewData, MaxTier) == 0x00000C, "Member 'FArchivesRiftGenericViewData::MaxTier' has a wrong offset!");
static_assert(offsetof(FArchivesRiftGenericViewData, CurrentStars) == 0x000010, "Member 'FArchivesRiftGenericViewData::CurrentStars' has a wrong offset!");
static_assert(offsetof(FArchivesRiftGenericViewData, StarsPerTiers) == 0x000014, "Member 'FArchivesRiftGenericViewData::StarsPerTiers' has a wrong offset!");
static_assert(offsetof(FArchivesRiftGenericViewData, OwnPass) == 0x000018, "Member 'FArchivesRiftGenericViewData::OwnPass' has a wrong offset!");
static_assert(offsetof(FArchivesRiftGenericViewData, ShowBonusTierTooltip) == 0x000019, "Member 'FArchivesRiftGenericViewData::ShowBonusTierTooltip' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchiveRiftTierRewardsViewData
// 0x0030 (0x0030 - 0x0000)
struct FArchiveRiftTierRewardsViewData final
{
public:
	int32                                         Tier;                                              // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETierType                                     TierType;                                          // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TierProgress;                                      // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPremiumUnlocked;                                 // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCurrentTier;                                     // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRewardWrapperViewData>         FreeRewards;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRewardWrapperViewData>         PremiumRewards;                                    // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchiveRiftTierRewardsViewData) == 0x000008, "Wrong alignment on FArchiveRiftTierRewardsViewData");
static_assert(sizeof(FArchiveRiftTierRewardsViewData) == 0x000030, "Wrong size on FArchiveRiftTierRewardsViewData");
static_assert(offsetof(FArchiveRiftTierRewardsViewData, Tier) == 0x000000, "Member 'FArchiveRiftTierRewardsViewData::Tier' has a wrong offset!");
static_assert(offsetof(FArchiveRiftTierRewardsViewData, TierType) == 0x000004, "Member 'FArchiveRiftTierRewardsViewData::TierType' has a wrong offset!");
static_assert(offsetof(FArchiveRiftTierRewardsViewData, TierProgress) == 0x000008, "Member 'FArchiveRiftTierRewardsViewData::TierProgress' has a wrong offset!");
static_assert(offsetof(FArchiveRiftTierRewardsViewData, IsPremiumUnlocked) == 0x00000C, "Member 'FArchiveRiftTierRewardsViewData::IsPremiumUnlocked' has a wrong offset!");
static_assert(offsetof(FArchiveRiftTierRewardsViewData, IsCurrentTier) == 0x00000D, "Member 'FArchiveRiftTierRewardsViewData::IsCurrentTier' has a wrong offset!");
static_assert(offsetof(FArchiveRiftTierRewardsViewData, FreeRewards) == 0x000010, "Member 'FArchiveRiftTierRewardsViewData::FreeRewards' has a wrong offset!");
static_assert(offsetof(FArchiveRiftTierRewardsViewData, PremiumRewards) == 0x000020, "Member 'FArchiveRiftTierRewardsViewData::PremiumRewards' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchivesRiftUnlockSequenceData
// 0x000C (0x000C - 0x0000)
struct FArchivesRiftUnlockSequenceData final
{
public:
	int32                                         CurrentTier;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousTier;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPremiumUnlocked;                                 // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArchivesRiftUnlockSequenceData) == 0x000004, "Wrong alignment on FArchivesRiftUnlockSequenceData");
static_assert(sizeof(FArchivesRiftUnlockSequenceData) == 0x00000C, "Wrong size on FArchivesRiftUnlockSequenceData");
static_assert(offsetof(FArchivesRiftUnlockSequenceData, CurrentTier) == 0x000000, "Member 'FArchivesRiftUnlockSequenceData::CurrentTier' has a wrong offset!");
static_assert(offsetof(FArchivesRiftUnlockSequenceData, PreviousTier) == 0x000004, "Member 'FArchivesRiftUnlockSequenceData::PreviousTier' has a wrong offset!");
static_assert(offsetof(FArchivesRiftUnlockSequenceData, IsPremiumUnlocked) == 0x000008, "Member 'FArchivesRiftUnlockSequenceData::IsPremiumUnlocked' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.EditorInterfaces
// 0x0030 (0x0030 - 0x0000)
struct FEditorInterfaces final
{
public:
	TScriptInterface<class IArchiveQuestMapViewInterface> QuestMapInterface;                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TScriptInterface<class IArchiveLevelProgressionViewInterface> LevelProgressionInterface;         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TScriptInterface<class IArchiveEditorViewInterface> EditorInterface;                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEditorInterfaces) == 0x000008, "Wrong alignment on FEditorInterfaces");
static_assert(sizeof(FEditorInterfaces) == 0x000030, "Wrong size on FEditorInterfaces");
static_assert(offsetof(FEditorInterfaces, QuestMapInterface) == 0x000000, "Member 'FEditorInterfaces::QuestMapInterface' has a wrong offset!");
static_assert(offsetof(FEditorInterfaces, LevelProgressionInterface) == 0x000010, "Member 'FEditorInterfaces::LevelProgressionInterface' has a wrong offset!");
static_assert(offsetof(FEditorInterfaces, EditorInterface) == 0x000020, "Member 'FEditorInterfaces::EditorInterface' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ChallengeTrackerViewData
// 0x0040 (0x0040 - 0x0000)
struct FChallengeTrackerViewData final
{
public:
	class FText                                   ChallengeTitle;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	struct FArchiveNodeObjectiveViewData          ProgressionData;                                   // 0x0018(0x0028)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeTrackerViewData) == 0x000008, "Wrong alignment on FChallengeTrackerViewData");
static_assert(sizeof(FChallengeTrackerViewData) == 0x000040, "Wrong size on FChallengeTrackerViewData");
static_assert(offsetof(FChallengeTrackerViewData, ChallengeTitle) == 0x000000, "Member 'FChallengeTrackerViewData::ChallengeTitle' has a wrong offset!");
static_assert(offsetof(FChallengeTrackerViewData, ProgressionData) == 0x000018, "Member 'FChallengeTrackerViewData::ProgressionData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CurrencyLabelViewData
// 0x0100 (0x0100 - 0x0000)
struct FCurrencyLabelViewData final
{
public:
	ECurrencyType                                 Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0008(0x0030)(BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayBonusAnimation;                                // 0x003C(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurrencyProgressionTooltipViewData    TooltipData;                                       // 0x0040(0x00C0)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyLabelViewData) == 0x000008, "Wrong alignment on FCurrencyLabelViewData");
static_assert(sizeof(FCurrencyLabelViewData) == 0x000100, "Wrong size on FCurrencyLabelViewData");
static_assert(offsetof(FCurrencyLabelViewData, Type) == 0x000000, "Member 'FCurrencyLabelViewData::Type' has a wrong offset!");
static_assert(offsetof(FCurrencyLabelViewData, Icon) == 0x000008, "Member 'FCurrencyLabelViewData::Icon' has a wrong offset!");
static_assert(offsetof(FCurrencyLabelViewData, Amount) == 0x000038, "Member 'FCurrencyLabelViewData::Amount' has a wrong offset!");
static_assert(offsetof(FCurrencyLabelViewData, PlayBonusAnimation) == 0x00003C, "Member 'FCurrencyLabelViewData::PlayBonusAnimation' has a wrong offset!");
static_assert(offsetof(FCurrencyLabelViewData, TooltipData) == 0x000040, "Member 'FCurrencyLabelViewData::TooltipData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.DailyRitualViewData
// 0x0078 (0x0078 - 0x0000)
struct FDailyRitualViewData final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0030(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDailyRitualState                             RitualState;                                       // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TextProgress;                                      // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextThreshold;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarProgress;                                       // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarThreshold;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BloodpointsReward;                                 // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDailyRitualViewData) == 0x000008, "Wrong alignment on FDailyRitualViewData");
static_assert(sizeof(FDailyRitualViewData) == 0x000078, "Wrong size on FDailyRitualViewData");
static_assert(offsetof(FDailyRitualViewData, Key) == 0x000000, "Member 'FDailyRitualViewData::Key' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, Title) == 0x000010, "Member 'FDailyRitualViewData::Title' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, Description) == 0x000020, "Member 'FDailyRitualViewData::Description' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, IconTexture) == 0x000030, "Member 'FDailyRitualViewData::IconTexture' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, RitualState) == 0x000060, "Member 'FDailyRitualViewData::RitualState' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, IsNew) == 0x000061, "Member 'FDailyRitualViewData::IsNew' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, TextProgress) == 0x000064, "Member 'FDailyRitualViewData::TextProgress' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, TextThreshold) == 0x000068, "Member 'FDailyRitualViewData::TextThreshold' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, BarProgress) == 0x00006C, "Member 'FDailyRitualViewData::BarProgress' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, BarThreshold) == 0x000070, "Member 'FDailyRitualViewData::BarThreshold' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, BloodpointsReward) == 0x000074, "Member 'FDailyRitualViewData::BloodpointsReward' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.DisplayStandViewData
// 0x0038 (0x0038 - 0x0000)
struct FDisplayStandViewData final
{
public:
	struct FAnchorData                            Anchors;                                           // 0x0000(0x0028)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PositionX;                                         // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionY;                                         // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeX;                                             // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeY;                                             // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDisplayStandViewData) == 0x000004, "Wrong alignment on FDisplayStandViewData");
static_assert(sizeof(FDisplayStandViewData) == 0x000038, "Wrong size on FDisplayStandViewData");
static_assert(offsetof(FDisplayStandViewData, Anchors) == 0x000000, "Member 'FDisplayStandViewData::Anchors' has a wrong offset!");
static_assert(offsetof(FDisplayStandViewData, PositionX) == 0x000028, "Member 'FDisplayStandViewData::PositionX' has a wrong offset!");
static_assert(offsetof(FDisplayStandViewData, PositionY) == 0x00002C, "Member 'FDisplayStandViewData::PositionY' has a wrong offset!");
static_assert(offsetof(FDisplayStandViewData, SizeX) == 0x000030, "Member 'FDisplayStandViewData::SizeX' has a wrong offset!");
static_assert(offsetof(FDisplayStandViewData, SizeY) == 0x000034, "Member 'FDisplayStandViewData::SizeY' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.EventEntryPopupSkinUIData
// 0x0160 (0x0168 - 0x0008)
struct FEventEntryPopupSkinUIData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UMaterialInstance>       AlternativeButtonMaterial;                         // 0x0008(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BackgroundTexture;                                 // 0x0038(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TitleBannerTexture;                                // 0x0068(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TitleIcon;                                         // 0x0098(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EventImage;                                        // 0x00C8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              AlternativeButtonIcon;                             // 0x00F8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HeaderColor;                                       // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseColor;                                         // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ScrollBarColor;                                    // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AlternativeButtonPositionOffset;                   // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  AlternativeButtonAlignment;                        // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUsingBackgroundTexture;                          // 0x0161(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlternativeButtonUsedHoverAnimation;               // 0x0162(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_163[0x5];                                      // 0x0163(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEventEntryPopupSkinUIData) == 0x000008, "Wrong alignment on FEventEntryPopupSkinUIData");
static_assert(sizeof(FEventEntryPopupSkinUIData) == 0x000168, "Wrong size on FEventEntryPopupSkinUIData");
static_assert(offsetof(FEventEntryPopupSkinUIData, AlternativeButtonMaterial) == 0x000008, "Member 'FEventEntryPopupSkinUIData::AlternativeButtonMaterial' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, BackgroundTexture) == 0x000038, "Member 'FEventEntryPopupSkinUIData::BackgroundTexture' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, TitleBannerTexture) == 0x000068, "Member 'FEventEntryPopupSkinUIData::TitleBannerTexture' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, TitleIcon) == 0x000098, "Member 'FEventEntryPopupSkinUIData::TitleIcon' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, EventImage) == 0x0000C8, "Member 'FEventEntryPopupSkinUIData::EventImage' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, AlternativeButtonIcon) == 0x0000F8, "Member 'FEventEntryPopupSkinUIData::AlternativeButtonIcon' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, HeaderColor) == 0x000128, "Member 'FEventEntryPopupSkinUIData::HeaderColor' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, BaseColor) == 0x000138, "Member 'FEventEntryPopupSkinUIData::BaseColor' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, ScrollBarColor) == 0x000148, "Member 'FEventEntryPopupSkinUIData::ScrollBarColor' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, AlternativeButtonPositionOffset) == 0x000158, "Member 'FEventEntryPopupSkinUIData::AlternativeButtonPositionOffset' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, AlternativeButtonAlignment) == 0x000160, "Member 'FEventEntryPopupSkinUIData::AlternativeButtonAlignment' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, IsUsingBackgroundTexture) == 0x000161, "Member 'FEventEntryPopupSkinUIData::IsUsingBackgroundTexture' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, AlternativeButtonUsedHoverAnimation) == 0x000162, "Member 'FEventEntryPopupSkinUIData::AlternativeButtonUsedHoverAnimation' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PerkViewData
// 0x0018 (0x0070 - 0x0058)
struct FPerkViewData final : public FBaseLoadoutPartViewData
{
public:
	int32                                         Level;                                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusEffectType                             StatusEffectType;                                  // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StackCount;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRechargeable;                                    // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRechargeableActive;                              // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerkViewData) == 0x000008, "Wrong alignment on FPerkViewData");
static_assert(sizeof(FPerkViewData) == 0x000070, "Wrong size on FPerkViewData");
static_assert(offsetof(FPerkViewData, Level) == 0x000058, "Member 'FPerkViewData::Level' has a wrong offset!");
static_assert(offsetof(FPerkViewData, Cooldown) == 0x00005C, "Member 'FPerkViewData::Cooldown' has a wrong offset!");
static_assert(offsetof(FPerkViewData, StatusEffectType) == 0x000060, "Member 'FPerkViewData::StatusEffectType' has a wrong offset!");
static_assert(offsetof(FPerkViewData, StackCount) == 0x000064, "Member 'FPerkViewData::StackCount' has a wrong offset!");
static_assert(offsetof(FPerkViewData, IsRechargeable) == 0x000068, "Member 'FPerkViewData::IsRechargeable' has a wrong offset!");
static_assert(offsetof(FPerkViewData, IsRechargeableActive) == 0x000069, "Member 'FPerkViewData::IsRechargeableActive' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ItemViewData
// 0x0038 (0x0090 - 0x0058)
struct FItemViewData final : public FBaseLoadoutPartViewData
{
public:
	bool                                          IsEnergyTypeValid;                                 // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnergyLevel;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   InputKey;                                          // 0x0068(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowKeyPrompt;                                     // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLimitedItem;                                     // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAvailable;                                       // 0x008A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemViewData) == 0x000008, "Wrong alignment on FItemViewData");
static_assert(sizeof(FItemViewData) == 0x000090, "Wrong size on FItemViewData");
static_assert(offsetof(FItemViewData, IsEnergyTypeValid) == 0x000058, "Member 'FItemViewData::IsEnergyTypeValid' has a wrong offset!");
static_assert(offsetof(FItemViewData, EnergyLevel) == 0x00005C, "Member 'FItemViewData::EnergyLevel' has a wrong offset!");
static_assert(offsetof(FItemViewData, Count) == 0x000060, "Member 'FItemViewData::Count' has a wrong offset!");
static_assert(offsetof(FItemViewData, InputKey) == 0x000068, "Member 'FItemViewData::InputKey' has a wrong offset!");
static_assert(offsetof(FItemViewData, ShowKeyPrompt) == 0x000088, "Member 'FItemViewData::ShowKeyPrompt' has a wrong offset!");
static_assert(offsetof(FItemViewData, IsLimitedItem) == 0x000089, "Member 'FItemViewData::IsLimitedItem' has a wrong offset!");
static_assert(offsetof(FItemViewData, IsAvailable) == 0x00008A, "Member 'FItemViewData::IsAvailable' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StatusEffectAlertViewData
// 0x01B0 (0x01B0 - 0x0000)
struct FStatusEffectAlertViewData final
{
public:
	class FString                                 StatusEffectName;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              StatusEffectIcon;                                  // 0x0010(0x0030)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusEffectType                             StatusEffectType;                                  // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHudStatusEffectAlertViewType                 SourceViewType;                                    // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPerkViewData                          PerkViewData;                                      // 0x0048(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FItemViewData                          ItemViewData;                                      // 0x00B8(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAddonViewData                         AddonViewData;                                     // 0x0148(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatusEffectAlertViewData) == 0x000008, "Wrong alignment on FStatusEffectAlertViewData");
static_assert(sizeof(FStatusEffectAlertViewData) == 0x0001B0, "Wrong size on FStatusEffectAlertViewData");
static_assert(offsetof(FStatusEffectAlertViewData, StatusEffectName) == 0x000000, "Member 'FStatusEffectAlertViewData::StatusEffectName' has a wrong offset!");
static_assert(offsetof(FStatusEffectAlertViewData, StatusEffectIcon) == 0x000010, "Member 'FStatusEffectAlertViewData::StatusEffectIcon' has a wrong offset!");
static_assert(offsetof(FStatusEffectAlertViewData, StatusEffectType) == 0x000040, "Member 'FStatusEffectAlertViewData::StatusEffectType' has a wrong offset!");
static_assert(offsetof(FStatusEffectAlertViewData, SourceViewType) == 0x000041, "Member 'FStatusEffectAlertViewData::SourceViewType' has a wrong offset!");
static_assert(offsetof(FStatusEffectAlertViewData, PerkViewData) == 0x000048, "Member 'FStatusEffectAlertViewData::PerkViewData' has a wrong offset!");
static_assert(offsetof(FStatusEffectAlertViewData, ItemViewData) == 0x0000B8, "Member 'FStatusEffectAlertViewData::ItemViewData' has a wrong offset!");
static_assert(offsetof(FStatusEffectAlertViewData, AddonViewData) == 0x000148, "Member 'FStatusEffectAlertViewData::AddonViewData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.HudEventProgressionViewData
// 0x0010 (0x0010 - 0x0000)
struct FHudEventProgressionViewData final
{
public:
	int32                                         ProgressBanked;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProgressPending;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProgressCapacity;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProgressMax;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHudEventProgressionViewData) == 0x000004, "Wrong alignment on FHudEventProgressionViewData");
static_assert(sizeof(FHudEventProgressionViewData) == 0x000010, "Wrong size on FHudEventProgressionViewData");
static_assert(offsetof(FHudEventProgressionViewData, ProgressBanked) == 0x000000, "Member 'FHudEventProgressionViewData::ProgressBanked' has a wrong offset!");
static_assert(offsetof(FHudEventProgressionViewData, ProgressPending) == 0x000004, "Member 'FHudEventProgressionViewData::ProgressPending' has a wrong offset!");
static_assert(offsetof(FHudEventProgressionViewData, ProgressCapacity) == 0x000008, "Member 'FHudEventProgressionViewData::ProgressCapacity' has a wrong offset!");
static_assert(offsetof(FHudEventProgressionViewData, ProgressMax) == 0x00000C, "Member 'FHudEventProgressionViewData::ProgressMax' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.HudObjectivesViewData
// 0x0008 (0x0008 - 0x0000)
struct FHudObjectivesViewData final
{
public:
	EPlayerTeam                                   playerTeam;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isHatchOpen;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         nbGeneratorsLeft;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHudObjectivesViewData) == 0x000004, "Wrong alignment on FHudObjectivesViewData");
static_assert(sizeof(FHudObjectivesViewData) == 0x000008, "Wrong size on FHudObjectivesViewData");
static_assert(offsetof(FHudObjectivesViewData, playerTeam) == 0x000000, "Member 'FHudObjectivesViewData::playerTeam' has a wrong offset!");
static_assert(offsetof(FHudObjectivesViewData, isHatchOpen) == 0x000001, "Member 'FHudObjectivesViewData::isHatchOpen' has a wrong offset!");
static_assert(offsetof(FHudObjectivesViewData, nbGeneratorsLeft) == 0x000004, "Member 'FHudObjectivesViewData::nbGeneratorsLeft' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StatusEffectViewData
// 0x0050 (0x0050 - 0x0000)
struct FStatusEffectViewData final
{
public:
	class FName                                   Id;                                                // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0010(0x0030)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusEffectType                             StatusEffectType;                                  // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percentage;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayIntroAnimation;                                // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatusEffectViewData) == 0x000008, "Wrong alignment on FStatusEffectViewData");
static_assert(sizeof(FStatusEffectViewData) == 0x000050, "Wrong size on FStatusEffectViewData");
static_assert(offsetof(FStatusEffectViewData, Id) == 0x000000, "Member 'FStatusEffectViewData::Id' has a wrong offset!");
static_assert(offsetof(FStatusEffectViewData, IconTexture) == 0x000010, "Member 'FStatusEffectViewData::IconTexture' has a wrong offset!");
static_assert(offsetof(FStatusEffectViewData, StatusEffectType) == 0x000040, "Member 'FStatusEffectViewData::StatusEffectType' has a wrong offset!");
static_assert(offsetof(FStatusEffectViewData, Level) == 0x000044, "Member 'FStatusEffectViewData::Level' has a wrong offset!");
static_assert(offsetof(FStatusEffectViewData, Percentage) == 0x000048, "Member 'FStatusEffectViewData::Percentage' has a wrong offset!");
static_assert(offsetof(FStatusEffectViewData, PlayIntroAnimation) == 0x00004C, "Member 'FStatusEffectViewData::PlayIntroAnimation' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.InteractionProgressViewData
// 0x0068 (0x0068 - 0x0000)
struct FInteractionProgressViewData final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SecondaryMessage;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBarColor                                     BarColor;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBarColor                                     ChargeBarColor;                                    // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowIcon;                                          // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowIconCharge;                                    // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ItemIcon;                                          // 0x0028(0x0030)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStatusEffectViewData>          Proficiencies;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionProgressViewData) == 0x000008, "Wrong alignment on FInteractionProgressViewData");
static_assert(sizeof(FInteractionProgressViewData) == 0x000068, "Wrong size on FInteractionProgressViewData");
static_assert(offsetof(FInteractionProgressViewData, Message) == 0x000000, "Member 'FInteractionProgressViewData::Message' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, SecondaryMessage) == 0x000010, "Member 'FInteractionProgressViewData::SecondaryMessage' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, BarColor) == 0x000020, "Member 'FInteractionProgressViewData::BarColor' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, ChargeBarColor) == 0x000021, "Member 'FInteractionProgressViewData::ChargeBarColor' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, ShowIcon) == 0x000022, "Member 'FInteractionProgressViewData::ShowIcon' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, ShowIconCharge) == 0x000023, "Member 'FInteractionProgressViewData::ShowIconCharge' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, ItemIcon) == 0x000028, "Member 'FInteractionProgressViewData::ItemIcon' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, Proficiencies) == 0x000058, "Member 'FInteractionProgressViewData::Proficiencies' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.InteractionPromptViewData
// 0x00B0 (0x00B0 - 0x0000)
struct FInteractionPromptViewData final
{
public:
	class FName                                   Id;                                                // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionPromptType                        Type;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   InputKey1;                                         // 0x0028(0x0020)(Edit, BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   InputKey2;                                         // 0x0048(0x0020)(Edit, BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   InputKey3;                                         // 0x0068(0x0020)(Edit, BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   InputKey4;                                         // 0x0088(0x0020)(Edit, BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlaceInCenter;                                     // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAvailable;                                       // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteractionPromptViewData) == 0x000008, "Wrong alignment on FInteractionPromptViewData");
static_assert(sizeof(FInteractionPromptViewData) == 0x0000B0, "Wrong size on FInteractionPromptViewData");
static_assert(offsetof(FInteractionPromptViewData, Id) == 0x000000, "Member 'FInteractionPromptViewData::Id' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, Message) == 0x000010, "Member 'FInteractionPromptViewData::Message' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, Type) == 0x000020, "Member 'FInteractionPromptViewData::Type' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, InputKey1) == 0x000028, "Member 'FInteractionPromptViewData::InputKey1' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, InputKey2) == 0x000048, "Member 'FInteractionPromptViewData::InputKey2' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, InputKey3) == 0x000068, "Member 'FInteractionPromptViewData::InputKey3' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, InputKey4) == 0x000088, "Member 'FInteractionPromptViewData::InputKey4' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, PlaceInCenter) == 0x0000A8, "Member 'FInteractionPromptViewData::PlaceInCenter' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, IsAvailable) == 0x0000A9, "Member 'FInteractionPromptViewData::IsAvailable' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ItemBundleViewData
// 0x0160 (0x0160 - 0x0000)
struct FItemBundleViewData final
{
public:
	struct FItemViewData                          Item;                                              // 0x0000(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAddonViewData                         Addon1;                                            // 0x0090(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAddonViewData                         Addon2;                                            // 0x00F8(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemBundleViewData) == 0x000008, "Wrong alignment on FItemBundleViewData");
static_assert(sizeof(FItemBundleViewData) == 0x000160, "Wrong size on FItemBundleViewData");
static_assert(offsetof(FItemBundleViewData, Item) == 0x000000, "Member 'FItemBundleViewData::Item' has a wrong offset!");
static_assert(offsetof(FItemBundleViewData, Addon1) == 0x000090, "Member 'FItemBundleViewData::Addon1' has a wrong offset!");
static_assert(offsetof(FItemBundleViewData, Addon2) == 0x0000F8, "Member 'FItemBundleViewData::Addon2' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.KillerStatusDataMapping
// 0x0020 (0x0028 - 0x0008)
struct FKillerStatusDataMapping final : public FDBDTableRowBase
{
public:
	struct FGameplayTag                           Killer;                                            // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UKillerStatusData>          ViewDataClass;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    WidgetClass;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKillerStatusDataMapping) == 0x000008, "Wrong alignment on FKillerStatusDataMapping");
static_assert(sizeof(FKillerStatusDataMapping) == 0x000028, "Wrong size on FKillerStatusDataMapping");
static_assert(offsetof(FKillerStatusDataMapping, Killer) == 0x000008, "Member 'FKillerStatusDataMapping::Killer' has a wrong offset!");
static_assert(offsetof(FKillerStatusDataMapping, ViewDataClass) == 0x000018, "Member 'FKillerStatusDataMapping::ViewDataClass' has a wrong offset!");
static_assert(offsetof(FKillerStatusDataMapping, WidgetClass) == 0x000020, "Member 'FKillerStatusDataMapping::WidgetClass' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.LoadoutTooltipData
// 0x0090 (0x0090 - 0x0000)
struct FLoadoutTooltipData final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ParentDisplayName;                                 // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   Rarity;                                            // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocked;                                          // 0x005D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   EventName;                                         // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FString                                 EventId;                                           // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPastEvent;                                       // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryItemType                            ItemType;                                          // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemAvailability                             Availability;                                      // 0x008A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoadoutTooltipData) == 0x000008, "Wrong alignment on FLoadoutTooltipData");
static_assert(sizeof(FLoadoutTooltipData) == 0x000090, "Wrong size on FLoadoutTooltipData");
static_assert(offsetof(FLoadoutTooltipData, ItemId) == 0x000000, "Member 'FLoadoutTooltipData::ItemId' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, DisplayName) == 0x000010, "Member 'FLoadoutTooltipData::DisplayName' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, ParentDisplayName) == 0x000028, "Member 'FLoadoutTooltipData::ParentDisplayName' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, Description) == 0x000040, "Member 'FLoadoutTooltipData::Description' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, Level) == 0x000058, "Member 'FLoadoutTooltipData::Level' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, Rarity) == 0x00005C, "Member 'FLoadoutTooltipData::Rarity' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, IsLocked) == 0x00005D, "Member 'FLoadoutTooltipData::IsLocked' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, EventName) == 0x000060, "Member 'FLoadoutTooltipData::EventName' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, EventId) == 0x000078, "Member 'FLoadoutTooltipData::EventId' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, IsPastEvent) == 0x000088, "Member 'FLoadoutTooltipData::IsPastEvent' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, ItemType) == 0x000089, "Member 'FLoadoutTooltipData::ItemType' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, Availability) == 0x00008A, "Member 'FLoadoutTooltipData::Availability' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.MatchResultViewData
// 0x0008 (0x0008 - 0x0000)
struct FMatchResultViewData final
{
public:
	bool                                          IsSlasher;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameState                                    SurvivorResult;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKillerMatchResult                            KillerResult;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchResultViewData) == 0x000004, "Wrong alignment on FMatchResultViewData");
static_assert(sizeof(FMatchResultViewData) == 0x000008, "Wrong size on FMatchResultViewData");
static_assert(offsetof(FMatchResultViewData, IsSlasher) == 0x000000, "Member 'FMatchResultViewData::IsSlasher' has a wrong offset!");
static_assert(offsetof(FMatchResultViewData, SurvivorResult) == 0x000001, "Member 'FMatchResultViewData::SurvivorResult' has a wrong offset!");
static_assert(offsetof(FMatchResultViewData, KillerResult) == 0x000002, "Member 'FMatchResultViewData::KillerResult' has a wrong offset!");
static_assert(offsetof(FMatchResultViewData, Duration) == 0x000004, "Member 'FMatchResultViewData::Duration' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.NotifTutorialPopupViewData
// 0x0080 (0x0080 - 0x0000)
struct FNotifTutorialPopupViewData final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0020(0x0030)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0050(0x0030)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNotifTutorialPopupViewData) == 0x000008, "Wrong alignment on FNotifTutorialPopupViewData");
static_assert(sizeof(FNotifTutorialPopupViewData) == 0x000080, "Wrong size on FNotifTutorialPopupViewData");
static_assert(offsetof(FNotifTutorialPopupViewData, Title) == 0x000000, "Member 'FNotifTutorialPopupViewData::Title' has a wrong offset!");
static_assert(offsetof(FNotifTutorialPopupViewData, Description) == 0x000010, "Member 'FNotifTutorialPopupViewData::Description' has a wrong offset!");
static_assert(offsetof(FNotifTutorialPopupViewData, Icon) == 0x000020, "Member 'FNotifTutorialPopupViewData::Icon' has a wrong offset!");
static_assert(offsetof(FNotifTutorialPopupViewData, Image) == 0x000050, "Member 'FNotifTutorialPopupViewData::Image' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.OnboardingTutorialViewData
// 0x0078 (0x0078 - 0x0000)
struct FOnboardingTutorialViewData final
{
public:
	class FString                                 TutorialId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Completed;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MainRewardClaimed;                                 // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRewardWrapperViewData>         MainRewards;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FRewardWrapperViewData>         AlternativeRewards;                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	EOnboardingTutorialType                       TutorialType;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOnboardingTutorialButtonStyle                ButtonStyle;                                       // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0058(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnboardingTutorialViewData) == 0x000008, "Wrong alignment on FOnboardingTutorialViewData");
static_assert(sizeof(FOnboardingTutorialViewData) == 0x000078, "Wrong size on FOnboardingTutorialViewData");
static_assert(offsetof(FOnboardingTutorialViewData, TutorialId) == 0x000000, "Member 'FOnboardingTutorialViewData::TutorialId' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, Completed) == 0x000010, "Member 'FOnboardingTutorialViewData::Completed' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, MainRewardClaimed) == 0x000011, "Member 'FOnboardingTutorialViewData::MainRewardClaimed' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, MainRewards) == 0x000018, "Member 'FOnboardingTutorialViewData::MainRewards' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, AlternativeRewards) == 0x000028, "Member 'FOnboardingTutorialViewData::AlternativeRewards' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, TutorialType) == 0x000038, "Member 'FOnboardingTutorialViewData::TutorialType' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, ButtonStyle) == 0x000039, "Member 'FOnboardingTutorialViewData::ButtonStyle' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, DisplayName) == 0x000040, "Member 'FOnboardingTutorialViewData::DisplayName' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, Description) == 0x000058, "Member 'FOnboardingTutorialViewData::Description' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, Icon) == 0x000070, "Member 'FOnboardingTutorialViewData::Icon' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.OnboardingStepViewData
// 0x0028 (0x0028 - 0x0000)
struct FOnboardingStepViewData final
{
public:
	class FString                                 StepId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOnboardingStepStatus                         Status;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOnboardingTutorialViewData>    Tutorials;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnboardingStepViewData) == 0x000008, "Wrong alignment on FOnboardingStepViewData");
static_assert(sizeof(FOnboardingStepViewData) == 0x000028, "Wrong size on FOnboardingStepViewData");
static_assert(offsetof(FOnboardingStepViewData, StepId) == 0x000000, "Member 'FOnboardingStepViewData::StepId' has a wrong offset!");
static_assert(offsetof(FOnboardingStepViewData, Status) == 0x000010, "Member 'FOnboardingStepViewData::Status' has a wrong offset!");
static_assert(offsetof(FOnboardingStepViewData, Tutorials) == 0x000018, "Member 'FOnboardingStepViewData::Tutorials' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PlayerStatusViewData
// 0x0048 (0x0048 - 0x0000)
struct FPlayerStatusViewData final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PlayerPortraitIcon;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PlayerPortraitIconOverride;                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerStatus                                 PlayerStatusState;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimerProgress;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDeepWound;                                       // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBroken;                                          // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocalPlayerAKiller;                              // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObsessionUIState                             ObsessionState;                                    // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrainStage;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConnectionQuality                            ConnectionQualityStatus;                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UKillerStatusData*                      KillerStatusData;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CampProgress;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerStatusViewData) == 0x000008, "Wrong alignment on FPlayerStatusViewData");
static_assert(sizeof(FPlayerStatusViewData) == 0x000048, "Wrong size on FPlayerStatusViewData");
static_assert(offsetof(FPlayerStatusViewData, PlayerName) == 0x000000, "Member 'FPlayerStatusViewData::PlayerName' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, PlayerPortraitIcon) == 0x000010, "Member 'FPlayerStatusViewData::PlayerPortraitIcon' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, PlayerPortraitIconOverride) == 0x000018, "Member 'FPlayerStatusViewData::PlayerPortraitIconOverride' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, PlayerStatusState) == 0x000020, "Member 'FPlayerStatusViewData::PlayerStatusState' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, TimerProgress) == 0x000024, "Member 'FPlayerStatusViewData::TimerProgress' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, IsDeepWound) == 0x000028, "Member 'FPlayerStatusViewData::IsDeepWound' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, IsBroken) == 0x000029, "Member 'FPlayerStatusViewData::IsBroken' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, IsLocalPlayerAKiller) == 0x00002A, "Member 'FPlayerStatusViewData::IsLocalPlayerAKiller' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, ObsessionState) == 0x00002B, "Member 'FPlayerStatusViewData::ObsessionState' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, DrainStage) == 0x00002C, "Member 'FPlayerStatusViewData::DrainStage' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, ConnectionQualityStatus) == 0x000030, "Member 'FPlayerStatusViewData::ConnectionQualityStatus' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, KillerStatusData) == 0x000038, "Member 'FPlayerStatusViewData::KillerStatusData' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, CampProgress) == 0x000040, "Member 'FPlayerStatusViewData::CampProgress' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PowerViewData
// 0x0030 (0x0088 - 0x0058)
struct FPowerViewData final : public FBaseLoadoutPartViewData
{
public:
	struct FKey                                   InputKey;                                          // 0x0058(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRechargeable;                                    // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActivated;                                       // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressValue;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowKeyPrompt;                                     // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCountDisplayForced;                              // 0x0085(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAvailable;                                       // 0x0086(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_87[0x1];                                       // 0x0087(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPowerViewData) == 0x000008, "Wrong alignment on FPowerViewData");
static_assert(sizeof(FPowerViewData) == 0x000088, "Wrong size on FPowerViewData");
static_assert(offsetof(FPowerViewData, InputKey) == 0x000058, "Member 'FPowerViewData::InputKey' has a wrong offset!");
static_assert(offsetof(FPowerViewData, IsRechargeable) == 0x000078, "Member 'FPowerViewData::IsRechargeable' has a wrong offset!");
static_assert(offsetof(FPowerViewData, IsActivated) == 0x000079, "Member 'FPowerViewData::IsActivated' has a wrong offset!");
static_assert(offsetof(FPowerViewData, Count) == 0x00007C, "Member 'FPowerViewData::Count' has a wrong offset!");
static_assert(offsetof(FPowerViewData, ProgressValue) == 0x000080, "Member 'FPowerViewData::ProgressValue' has a wrong offset!");
static_assert(offsetof(FPowerViewData, ShowKeyPrompt) == 0x000084, "Member 'FPowerViewData::ShowKeyPrompt' has a wrong offset!");
static_assert(offsetof(FPowerViewData, IsCountDisplayForced) == 0x000085, "Member 'FPowerViewData::IsCountDisplayForced' has a wrong offset!");
static_assert(offsetof(FPowerViewData, IsAvailable) == 0x000086, "Member 'FPowerViewData::IsAvailable' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PowerBundleViewData
// 0x0158 (0x0158 - 0x0000)
struct FPowerBundleViewData final
{
public:
	struct FPowerViewData                         Power;                                             // 0x0000(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAddonViewData                         Addon1;                                            // 0x0088(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAddonViewData                         Addon2;                                            // 0x00F0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPowerBundleViewData) == 0x000008, "Wrong alignment on FPowerBundleViewData");
static_assert(sizeof(FPowerBundleViewData) == 0x000158, "Wrong size on FPowerBundleViewData");
static_assert(offsetof(FPowerBundleViewData, Power) == 0x000000, "Member 'FPowerBundleViewData::Power' has a wrong offset!");
static_assert(offsetof(FPowerBundleViewData, Addon1) == 0x000088, "Member 'FPowerBundleViewData::Addon1' has a wrong offset!");
static_assert(offsetof(FPowerBundleViewData, Addon2) == 0x0000F0, "Member 'FPowerBundleViewData::Addon2' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.SkillCheckViewData
// 0x0058 (0x0058 - 0x0000)
struct FSkillCheckViewData final
{
public:
	struct FKey                                   InputKey;                                          // 0x0000(0x0020)(Edit, BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   InputKey2;                                         // 0x0020(0x0020)(Edit, BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitAreaStart;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitAreaLength;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BonusAreaStart;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BonusAreaLength;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHexed;                                           // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSpectating;                                      // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReversed;                                        // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMirrored;                                        // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInsane;                                          // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillCheckViewData) == 0x000008, "Wrong alignment on FSkillCheckViewData");
static_assert(sizeof(FSkillCheckViewData) == 0x000058, "Wrong size on FSkillCheckViewData");
static_assert(offsetof(FSkillCheckViewData, InputKey) == 0x000000, "Member 'FSkillCheckViewData::InputKey' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, InputKey2) == 0x000020, "Member 'FSkillCheckViewData::InputKey2' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, HitAreaStart) == 0x000040, "Member 'FSkillCheckViewData::HitAreaStart' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, HitAreaLength) == 0x000044, "Member 'FSkillCheckViewData::HitAreaLength' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, BonusAreaStart) == 0x000048, "Member 'FSkillCheckViewData::BonusAreaStart' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, BonusAreaLength) == 0x00004C, "Member 'FSkillCheckViewData::BonusAreaLength' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, IsHexed) == 0x000050, "Member 'FSkillCheckViewData::IsHexed' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, IsSpectating) == 0x000051, "Member 'FSkillCheckViewData::IsSpectating' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, IsReversed) == 0x000052, "Member 'FSkillCheckViewData::IsReversed' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, IsMirrored) == 0x000053, "Member 'FSkillCheckViewData::IsMirrored' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, IsInsane) == 0x000054, "Member 'FSkillCheckViewData::IsInsane' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StartSequenceViewData
// 0x0028 (0x0028 - 0x0000)
struct FStartSequenceViewData final
{
public:
	class FString                                 ThemeName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EThemeColorId                                 ThemeColorId;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStartSequenceViewData) == 0x000008, "Wrong alignment on FStartSequenceViewData");
static_assert(sizeof(FStartSequenceViewData) == 0x000028, "Wrong size on FStartSequenceViewData");
static_assert(offsetof(FStartSequenceViewData, ThemeName) == 0x000000, "Member 'FStartSequenceViewData::ThemeName' has a wrong offset!");
static_assert(offsetof(FStartSequenceViewData, MapName) == 0x000010, "Member 'FStartSequenceViewData::MapName' has a wrong offset!");
static_assert(offsetof(FStartSequenceViewData, ThemeColorId) == 0x000020, "Member 'FStartSequenceViewData::ThemeColorId' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.TemplateViewData
// 0x0001 (0x0001 - 0x0000)
struct FTemplateViewData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTemplateViewData) == 0x000001, "Wrong alignment on FTemplateViewData");
static_assert(sizeof(FTemplateViewData) == 0x000001, "Wrong size on FTemplateViewData");

// ScriptStruct DBDUIViewInterfaces.TutorialObjectivesViewData
// 0x0170 (0x0170 - 0x0000)
struct FTutorialObjectivesViewData final
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInteractionPromptViewData             PrimaryInteractionPromptViewData;                  // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FInteractionPromptViewData             SecondaryInteractionPromptViewData;                // 0x00C0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialObjectivesViewData) == 0x000008, "Wrong alignment on FTutorialObjectivesViewData");
static_assert(sizeof(FTutorialObjectivesViewData) == 0x000170, "Wrong size on FTutorialObjectivesViewData");
static_assert(offsetof(FTutorialObjectivesViewData, Description) == 0x000000, "Member 'FTutorialObjectivesViewData::Description' has a wrong offset!");
static_assert(offsetof(FTutorialObjectivesViewData, PrimaryInteractionPromptViewData) == 0x000010, "Member 'FTutorialObjectivesViewData::PrimaryInteractionPromptViewData' has a wrong offset!");
static_assert(offsetof(FTutorialObjectivesViewData, SecondaryInteractionPromptViewData) == 0x0000C0, "Member 'FTutorialObjectivesViewData::SecondaryInteractionPromptViewData' has a wrong offset!");

}

