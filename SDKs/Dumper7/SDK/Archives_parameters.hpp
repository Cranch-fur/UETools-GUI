#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Archives

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK::Params
{

// Function Archives.NearKillerQEEvaluator.OnRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct NearKillerQEEvaluator_OnRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearKillerQEEvaluator_OnRangeChanged) == 0x000001, "Wrong alignment on NearKillerQEEvaluator_OnRangeChanged");
static_assert(sizeof(NearKillerQEEvaluator_OnRangeChanged) == 0x000001, "Wrong size on NearKillerQEEvaluator_OnRangeChanged");
static_assert(offsetof(NearKillerQEEvaluator_OnRangeChanged, inRange) == 0x000000, "Member 'NearKillerQEEvaluator_OnRangeChanged::inRange' has a wrong offset!");

// Function Archives.HideNearKillerQEEvaluator.OnCamperBreakFreeFromHarpoon
// 0x0038 (0x0038 - 0x0000)
struct HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon) == 0x000008, "Wrong alignment on HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon");
static_assert(sizeof(HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon) == 0x000038, "Wrong size on HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon");
static_assert(offsetof(HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon, gameEventType) == 0x000000, "Member 'HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon::gameEventType' has a wrong offset!");
static_assert(offsetof(HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon, gameEventData) == 0x000010, "Member 'HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon::gameEventData' has a wrong offset!");

// Function Archives.HideNearKillerQEEvaluator.OnChaseEnd
// 0x0010 (0x0010 - 0x0000)
struct HideNearKillerQEEvaluator_OnChaseEnd final
{
public:
	class ADBDPlayer*                             chasedSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         chaseTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HideNearKillerQEEvaluator_OnChaseEnd) == 0x000008, "Wrong alignment on HideNearKillerQEEvaluator_OnChaseEnd");
static_assert(sizeof(HideNearKillerQEEvaluator_OnChaseEnd) == 0x000010, "Wrong size on HideNearKillerQEEvaluator_OnChaseEnd");
static_assert(offsetof(HideNearKillerQEEvaluator_OnChaseEnd, chasedSurvivor) == 0x000000, "Member 'HideNearKillerQEEvaluator_OnChaseEnd::chasedSurvivor' has a wrong offset!");
static_assert(offsetof(HideNearKillerQEEvaluator_OnChaseEnd, chaseTime) == 0x000008, "Member 'HideNearKillerQEEvaluator_OnChaseEnd::chaseTime' has a wrong offset!");

// Function Archives.HideNearKillerQEEvaluator.OnChaseStart
// 0x0008 (0x0008 - 0x0000)
struct HideNearKillerQEEvaluator_OnChaseStart final
{
public:
	class ADBDPlayer*                             chasedSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HideNearKillerQEEvaluator_OnChaseStart) == 0x000008, "Wrong alignment on HideNearKillerQEEvaluator_OnChaseStart");
static_assert(sizeof(HideNearKillerQEEvaluator_OnChaseStart) == 0x000008, "Wrong size on HideNearKillerQEEvaluator_OnChaseStart");
static_assert(offsetof(HideNearKillerQEEvaluator_OnChaseStart, chasedSurvivor) == 0x000000, "Member 'HideNearKillerQEEvaluator_OnChaseStart::chasedSurvivor' has a wrong offset!");

// Function Archives.HideNearKillerQEEvaluator.OnFinishedPlaying
// 0x0038 (0x0038 - 0x0000)
struct HideNearKillerQEEvaluator_OnFinishedPlaying final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HideNearKillerQEEvaluator_OnFinishedPlaying) == 0x000008, "Wrong alignment on HideNearKillerQEEvaluator_OnFinishedPlaying");
static_assert(sizeof(HideNearKillerQEEvaluator_OnFinishedPlaying) == 0x000038, "Wrong size on HideNearKillerQEEvaluator_OnFinishedPlaying");
static_assert(offsetof(HideNearKillerQEEvaluator_OnFinishedPlaying, gameEventType) == 0x000000, "Member 'HideNearKillerQEEvaluator_OnFinishedPlaying::gameEventType' has a wrong offset!");
static_assert(offsetof(HideNearKillerQEEvaluator_OnFinishedPlaying, gameEventData) == 0x000010, "Member 'HideNearKillerQEEvaluator_OnFinishedPlaying::gameEventData' has a wrong offset!");

// Function Archives.HideNearKillerQEEvaluator.OnHarpoonHit
// 0x0038 (0x0038 - 0x0000)
struct HideNearKillerQEEvaluator_OnHarpoonHit final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HideNearKillerQEEvaluator_OnHarpoonHit) == 0x000008, "Wrong alignment on HideNearKillerQEEvaluator_OnHarpoonHit");
static_assert(sizeof(HideNearKillerQEEvaluator_OnHarpoonHit) == 0x000038, "Wrong size on HideNearKillerQEEvaluator_OnHarpoonHit");
static_assert(offsetof(HideNearKillerQEEvaluator_OnHarpoonHit, gameEventType) == 0x000000, "Member 'HideNearKillerQEEvaluator_OnHarpoonHit::gameEventType' has a wrong offset!");
static_assert(offsetof(HideNearKillerQEEvaluator_OnHarpoonHit, gameEventData) == 0x000010, "Member 'HideNearKillerQEEvaluator_OnHarpoonHit::gameEventData' has a wrong offset!");

// Function Archives.HideNearKillerQEEvaluator.OnSlashHarpoonedCamper
// 0x0038 (0x0038 - 0x0000)
struct HideNearKillerQEEvaluator_OnSlashHarpoonedCamper final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HideNearKillerQEEvaluator_OnSlashHarpoonedCamper) == 0x000008, "Wrong alignment on HideNearKillerQEEvaluator_OnSlashHarpoonedCamper");
static_assert(sizeof(HideNearKillerQEEvaluator_OnSlashHarpoonedCamper) == 0x000038, "Wrong size on HideNearKillerQEEvaluator_OnSlashHarpoonedCamper");
static_assert(offsetof(HideNearKillerQEEvaluator_OnSlashHarpoonedCamper, gameEventType) == 0x000000, "Member 'HideNearKillerQEEvaluator_OnSlashHarpoonedCamper::gameEventType' has a wrong offset!");
static_assert(offsetof(HideNearKillerQEEvaluator_OnSlashHarpoonedCamper, gameEventData) == 0x000010, "Member 'HideNearKillerQEEvaluator_OnSlashHarpoonedCamper::gameEventData' has a wrong offset!");

// Function Archives.MaxEventCountQEEvaluator.OnDecrementEventCount
// 0x0038 (0x0038 - 0x0000)
struct MaxEventCountQEEvaluator_OnDecrementEventCount final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaxEventCountQEEvaluator_OnDecrementEventCount) == 0x000008, "Wrong alignment on MaxEventCountQEEvaluator_OnDecrementEventCount");
static_assert(sizeof(MaxEventCountQEEvaluator_OnDecrementEventCount) == 0x000038, "Wrong size on MaxEventCountQEEvaluator_OnDecrementEventCount");
static_assert(offsetof(MaxEventCountQEEvaluator_OnDecrementEventCount, gameEventType) == 0x000000, "Member 'MaxEventCountQEEvaluator_OnDecrementEventCount::gameEventType' has a wrong offset!");
static_assert(offsetof(MaxEventCountQEEvaluator_OnDecrementEventCount, gameEventData) == 0x000010, "Member 'MaxEventCountQEEvaluator_OnDecrementEventCount::gameEventData' has a wrong offset!");

// Function Archives.MaxEventCountQEEvaluator.OnIncrementEventCount
// 0x0038 (0x0038 - 0x0000)
struct MaxEventCountQEEvaluator_OnIncrementEventCount final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaxEventCountQEEvaluator_OnIncrementEventCount) == 0x000008, "Wrong alignment on MaxEventCountQEEvaluator_OnIncrementEventCount");
static_assert(sizeof(MaxEventCountQEEvaluator_OnIncrementEventCount) == 0x000038, "Wrong size on MaxEventCountQEEvaluator_OnIncrementEventCount");
static_assert(offsetof(MaxEventCountQEEvaluator_OnIncrementEventCount, gameEventType) == 0x000000, "Member 'MaxEventCountQEEvaluator_OnIncrementEventCount::gameEventType' has a wrong offset!");
static_assert(offsetof(MaxEventCountQEEvaluator_OnIncrementEventCount, gameEventData) == 0x000010, "Member 'MaxEventCountQEEvaluator_OnIncrementEventCount::gameEventData' has a wrong offset!");

// Function Archives.MaxEventCountQEEvaluator.OnStopEventCount
// 0x0038 (0x0038 - 0x0000)
struct MaxEventCountQEEvaluator_OnStopEventCount final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaxEventCountQEEvaluator_OnStopEventCount) == 0x000008, "Wrong alignment on MaxEventCountQEEvaluator_OnStopEventCount");
static_assert(sizeof(MaxEventCountQEEvaluator_OnStopEventCount) == 0x000038, "Wrong size on MaxEventCountQEEvaluator_OnStopEventCount");
static_assert(offsetof(MaxEventCountQEEvaluator_OnStopEventCount, gameEventType) == 0x000000, "Member 'MaxEventCountQEEvaluator_OnStopEventCount::gameEventType' has a wrong offset!");
static_assert(offsetof(MaxEventCountQEEvaluator_OnStopEventCount, gameEventData) == 0x000010, "Member 'MaxEventCountQEEvaluator_OnStopEventCount::gameEventData' has a wrong offset!");

// Function Archives.AfterExitOpenQEEvaluator.OnExitGateOpened
// 0x0038 (0x0038 - 0x0000)
struct AfterExitOpenQEEvaluator_OnExitGateOpened final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AfterExitOpenQEEvaluator_OnExitGateOpened) == 0x000008, "Wrong alignment on AfterExitOpenQEEvaluator_OnExitGateOpened");
static_assert(sizeof(AfterExitOpenQEEvaluator_OnExitGateOpened) == 0x000038, "Wrong size on AfterExitOpenQEEvaluator_OnExitGateOpened");
static_assert(offsetof(AfterExitOpenQEEvaluator_OnExitGateOpened, gameEventType) == 0x000000, "Member 'AfterExitOpenQEEvaluator_OnExitGateOpened::gameEventType' has a wrong offset!");
static_assert(offsetof(AfterExitOpenQEEvaluator_OnExitGateOpened, gameEventData) == 0x000010, "Member 'AfterExitOpenQEEvaluator_OnExitGateOpened::gameEventData' has a wrong offset!");

// Function Archives.WhiteGlyphSpawnerComponent.GetOwningGlyph
// 0x0008 (0x0008 - 0x0000)
struct WhiteGlyphSpawnerComponent_GetOwningGlyph final
{
public:
	class AGlyph*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WhiteGlyphSpawnerComponent_GetOwningGlyph) == 0x000008, "Wrong alignment on WhiteGlyphSpawnerComponent_GetOwningGlyph");
static_assert(sizeof(WhiteGlyphSpawnerComponent_GetOwningGlyph) == 0x000008, "Wrong size on WhiteGlyphSpawnerComponent_GetOwningGlyph");
static_assert(offsetof(WhiteGlyphSpawnerComponent_GetOwningGlyph, ReturnValue) == 0x000000, "Member 'WhiteGlyphSpawnerComponent_GetOwningGlyph::ReturnValue' has a wrong offset!");

// Function Archives.BloodPointsQEEvaluator.OnFinishedPlaying
// 0x0038 (0x0038 - 0x0000)
struct BloodPointsQEEvaluator_OnFinishedPlaying final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodPointsQEEvaluator_OnFinishedPlaying) == 0x000008, "Wrong alignment on BloodPointsQEEvaluator_OnFinishedPlaying");
static_assert(sizeof(BloodPointsQEEvaluator_OnFinishedPlaying) == 0x000038, "Wrong size on BloodPointsQEEvaluator_OnFinishedPlaying");
static_assert(offsetof(BloodPointsQEEvaluator_OnFinishedPlaying, gameEventType) == 0x000000, "Member 'BloodPointsQEEvaluator_OnFinishedPlaying::gameEventType' has a wrong offset!");
static_assert(offsetof(BloodPointsQEEvaluator_OnFinishedPlaying, gameEventData) == 0x000010, "Member 'BloodPointsQEEvaluator_OnFinishedPlaying::gameEventData' has a wrong offset!");

// Function Archives.ChaseInBasementQEEvaluator.OnChaseEnd
// 0x0038 (0x0038 - 0x0000)
struct ChaseInBasementQEEvaluator_OnChaseEnd final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaseInBasementQEEvaluator_OnChaseEnd) == 0x000008, "Wrong alignment on ChaseInBasementQEEvaluator_OnChaseEnd");
static_assert(sizeof(ChaseInBasementQEEvaluator_OnChaseEnd) == 0x000038, "Wrong size on ChaseInBasementQEEvaluator_OnChaseEnd");
static_assert(offsetof(ChaseInBasementQEEvaluator_OnChaseEnd, gameEventType) == 0x000000, "Member 'ChaseInBasementQEEvaluator_OnChaseEnd::gameEventType' has a wrong offset!");
static_assert(offsetof(ChaseInBasementQEEvaluator_OnChaseEnd, gameEventData) == 0x000010, "Member 'ChaseInBasementQEEvaluator_OnChaseEnd::gameEventData' has a wrong offset!");

// Function Archives.ChaseInBasementQEEvaluator.OnChaseStart
// 0x0038 (0x0038 - 0x0000)
struct ChaseInBasementQEEvaluator_OnChaseStart final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaseInBasementQEEvaluator_OnChaseStart) == 0x000008, "Wrong alignment on ChaseInBasementQEEvaluator_OnChaseStart");
static_assert(sizeof(ChaseInBasementQEEvaluator_OnChaseStart) == 0x000038, "Wrong size on ChaseInBasementQEEvaluator_OnChaseStart");
static_assert(offsetof(ChaseInBasementQEEvaluator_OnChaseStart, gameEventType) == 0x000000, "Member 'ChaseInBasementQEEvaluator_OnChaseStart::gameEventType' has a wrong offset!");
static_assert(offsetof(ChaseInBasementQEEvaluator_OnChaseStart, gameEventData) == 0x000010, "Member 'ChaseInBasementQEEvaluator_OnChaseStart::gameEventData' has a wrong offset!");

// Function Archives.ChaseInBasementQEEvaluator.OnEscapeChase
// 0x0038 (0x0038 - 0x0000)
struct ChaseInBasementQEEvaluator_OnEscapeChase final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaseInBasementQEEvaluator_OnEscapeChase) == 0x000008, "Wrong alignment on ChaseInBasementQEEvaluator_OnEscapeChase");
static_assert(sizeof(ChaseInBasementQEEvaluator_OnEscapeChase) == 0x000038, "Wrong size on ChaseInBasementQEEvaluator_OnEscapeChase");
static_assert(offsetof(ChaseInBasementQEEvaluator_OnEscapeChase, gameEventType) == 0x000000, "Member 'ChaseInBasementQEEvaluator_OnEscapeChase::gameEventType' has a wrong offset!");
static_assert(offsetof(ChaseInBasementQEEvaluator_OnEscapeChase, gameEventData) == 0x000010, "Member 'ChaseInBasementQEEvaluator_OnEscapeChase::gameEventData' has a wrong offset!");

// Function Archives.ContextualQuestUtilities.PlayerHasAssociatedQuest
// 0x0018 (0x0018 - 0x0000)
struct ContextualQuestUtilities_PlayerHasAssociatedQuest final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   specialBehaviourId;                                // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualQuestUtilities_PlayerHasAssociatedQuest) == 0x000008, "Wrong alignment on ContextualQuestUtilities_PlayerHasAssociatedQuest");
static_assert(sizeof(ContextualQuestUtilities_PlayerHasAssociatedQuest) == 0x000018, "Wrong size on ContextualQuestUtilities_PlayerHasAssociatedQuest");
static_assert(offsetof(ContextualQuestUtilities_PlayerHasAssociatedQuest, player) == 0x000000, "Member 'ContextualQuestUtilities_PlayerHasAssociatedQuest::player' has a wrong offset!");
static_assert(offsetof(ContextualQuestUtilities_PlayerHasAssociatedQuest, specialBehaviourId) == 0x000008, "Member 'ContextualQuestUtilities_PlayerHasAssociatedQuest::specialBehaviourId' has a wrong offset!");
static_assert(offsetof(ContextualQuestUtilities_PlayerHasAssociatedQuest, ReturnValue) == 0x000014, "Member 'ContextualQuestUtilities_PlayerHasAssociatedQuest::ReturnValue' has a wrong offset!");

// Function Archives.ContextualQuestUtilities.PlayerHasToCompleteAssociatedQuest
// 0x0018 (0x0018 - 0x0000)
struct ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   specialBehaviourId;                                // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest) == 0x000008, "Wrong alignment on ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest");
static_assert(sizeof(ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest) == 0x000018, "Wrong size on ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest");
static_assert(offsetof(ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest, player) == 0x000000, "Member 'ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest::player' has a wrong offset!");
static_assert(offsetof(ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest, specialBehaviourId) == 0x000008, "Member 'ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest::specialBehaviourId' has a wrong offset!");
static_assert(offsetof(ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest, ReturnValue) == 0x000014, "Member 'ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest::ReturnValue' has a wrong offset!");

// Function Archives.DoBeforeEscapeQEEvaluator.OnEscaped
// 0x0038 (0x0038 - 0x0000)
struct DoBeforeEscapeQEEvaluator_OnEscaped final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoBeforeEscapeQEEvaluator_OnEscaped) == 0x000008, "Wrong alignment on DoBeforeEscapeQEEvaluator_OnEscaped");
static_assert(sizeof(DoBeforeEscapeQEEvaluator_OnEscaped) == 0x000038, "Wrong size on DoBeforeEscapeQEEvaluator_OnEscaped");
static_assert(offsetof(DoBeforeEscapeQEEvaluator_OnEscaped, gameEventType) == 0x000000, "Member 'DoBeforeEscapeQEEvaluator_OnEscaped::gameEventType' has a wrong offset!");
static_assert(offsetof(DoBeforeEscapeQEEvaluator_OnEscaped, gameEventData) == 0x000010, "Member 'DoBeforeEscapeQEEvaluator_OnEscaped::gameEventData' has a wrong offset!");

// Function Archives.DoBeforeHookQEEvaluator.OnHooked
// 0x0038 (0x0038 - 0x0000)
struct DoBeforeHookQEEvaluator_OnHooked final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoBeforeHookQEEvaluator_OnHooked) == 0x000008, "Wrong alignment on DoBeforeHookQEEvaluator_OnHooked");
static_assert(sizeof(DoBeforeHookQEEvaluator_OnHooked) == 0x000038, "Wrong size on DoBeforeHookQEEvaluator_OnHooked");
static_assert(offsetof(DoBeforeHookQEEvaluator_OnHooked, gameEventType) == 0x000000, "Member 'DoBeforeHookQEEvaluator_OnHooked::gameEventType' has a wrong offset!");
static_assert(offsetof(DoBeforeHookQEEvaluator_OnHooked, gameEventData) == 0x000010, "Member 'DoBeforeHookQEEvaluator_OnHooked::gameEventData' has a wrong offset!");

// Function Archives.DuringEndGameCollapseQEEvaluator.OnEndGameCollapseStart
// 0x0038 (0x0038 - 0x0000)
struct DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart) == 0x000008, "Wrong alignment on DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart");
static_assert(sizeof(DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart) == 0x000038, "Wrong size on DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart");
static_assert(offsetof(DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart, gameEventType) == 0x000000, "Member 'DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart::gameEventType' has a wrong offset!");
static_assert(offsetof(DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart, gameEventData) == 0x000010, "Member 'DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart::gameEventData' has a wrong offset!");

// Function Archives.EarnEmblemQualityQEEvaluator.OnFinishedPlaying
// 0x0038 (0x0038 - 0x0000)
struct EarnEmblemQualityQEEvaluator_OnFinishedPlaying final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EarnEmblemQualityQEEvaluator_OnFinishedPlaying) == 0x000008, "Wrong alignment on EarnEmblemQualityQEEvaluator_OnFinishedPlaying");
static_assert(sizeof(EarnEmblemQualityQEEvaluator_OnFinishedPlaying) == 0x000038, "Wrong size on EarnEmblemQualityQEEvaluator_OnFinishedPlaying");
static_assert(offsetof(EarnEmblemQualityQEEvaluator_OnFinishedPlaying, gameEventType) == 0x000000, "Member 'EarnEmblemQualityQEEvaluator_OnFinishedPlaying::gameEventType' has a wrong offset!");
static_assert(offsetof(EarnEmblemQualityQEEvaluator_OnFinishedPlaying, gameEventData) == 0x000010, "Member 'EarnEmblemQualityQEEvaluator_OnFinishedPlaying::gameEventData' has a wrong offset!");

// Function Archives.EndOfGameQEEvaluator.OnFinishedPlaying
// 0x0038 (0x0038 - 0x0000)
struct EndOfGameQEEvaluator_OnFinishedPlaying final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndOfGameQEEvaluator_OnFinishedPlaying) == 0x000008, "Wrong alignment on EndOfGameQEEvaluator_OnFinishedPlaying");
static_assert(sizeof(EndOfGameQEEvaluator_OnFinishedPlaying) == 0x000038, "Wrong size on EndOfGameQEEvaluator_OnFinishedPlaying");
static_assert(offsetof(EndOfGameQEEvaluator_OnFinishedPlaying, gameEventType) == 0x000000, "Member 'EndOfGameQEEvaluator_OnFinishedPlaying::gameEventType' has a wrong offset!");
static_assert(offsetof(EndOfGameQEEvaluator_OnFinishedPlaying, gameEventData) == 0x000010, "Member 'EndOfGameQEEvaluator_OnFinishedPlaying::gameEventData' has a wrong offset!");

// Function Archives.EscapeBasementItemQEEvaluator.OnItemCollectedFromChest
// 0x0038 (0x0038 - 0x0000)
struct EscapeBasementItemQEEvaluator_OnItemCollectedFromChest final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeBasementItemQEEvaluator_OnItemCollectedFromChest) == 0x000008, "Wrong alignment on EscapeBasementItemQEEvaluator_OnItemCollectedFromChest");
static_assert(sizeof(EscapeBasementItemQEEvaluator_OnItemCollectedFromChest) == 0x000038, "Wrong size on EscapeBasementItemQEEvaluator_OnItemCollectedFromChest");
static_assert(offsetof(EscapeBasementItemQEEvaluator_OnItemCollectedFromChest, gameEventType) == 0x000000, "Member 'EscapeBasementItemQEEvaluator_OnItemCollectedFromChest::gameEventType' has a wrong offset!");
static_assert(offsetof(EscapeBasementItemQEEvaluator_OnItemCollectedFromChest, gameEventData) == 0x000010, "Member 'EscapeBasementItemQEEvaluator_OnItemCollectedFromChest::gameEventData' has a wrong offset!");

// Function Archives.EscapeBasementItemQEEvaluator.OnTargetEscapeFromTrial
// 0x0038 (0x0038 - 0x0000)
struct EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial) == 0x000008, "Wrong alignment on EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial");
static_assert(sizeof(EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial) == 0x000038, "Wrong size on EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial");
static_assert(offsetof(EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial, gameEventType) == 0x000000, "Member 'EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial::gameEventType' has a wrong offset!");
static_assert(offsetof(EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial, gameEventData) == 0x000010, "Member 'EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial::gameEventData' has a wrong offset!");

// Function Archives.FragileObjectComponent.GetPreviousCollector
// 0x0008 (0x0008 - 0x0000)
struct FragileObjectComponent_GetPreviousCollector final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FragileObjectComponent_GetPreviousCollector) == 0x000008, "Wrong alignment on FragileObjectComponent_GetPreviousCollector");
static_assert(sizeof(FragileObjectComponent_GetPreviousCollector) == 0x000008, "Wrong size on FragileObjectComponent_GetPreviousCollector");
static_assert(offsetof(FragileObjectComponent_GetPreviousCollector, ReturnValue) == 0x000000, "Member 'FragileObjectComponent_GetPreviousCollector::ReturnValue' has a wrong offset!");

// Function Archives.FragileObjectComponent.IsRepaired
// 0x0001 (0x0001 - 0x0000)
struct FragileObjectComponent_IsRepaired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FragileObjectComponent_IsRepaired) == 0x000001, "Wrong alignment on FragileObjectComponent_IsRepaired");
static_assert(sizeof(FragileObjectComponent_IsRepaired) == 0x000001, "Wrong size on FragileObjectComponent_IsRepaired");
static_assert(offsetof(FragileObjectComponent_IsRepaired, ReturnValue) == 0x000000, "Member 'FragileObjectComponent_IsRepaired::ReturnValue' has a wrong offset!");

// Function Archives.Glyph.Authority_OnInteractionCompleted
// 0x0008 (0x0008 - 0x0000)
struct Glyph_Authority_OnInteractionCompleted final
{
public:
	class ADBDPlayer*                             interactingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Glyph_Authority_OnInteractionCompleted) == 0x000008, "Wrong alignment on Glyph_Authority_OnInteractionCompleted");
static_assert(sizeof(Glyph_Authority_OnInteractionCompleted) == 0x000008, "Wrong size on Glyph_Authority_OnInteractionCompleted");
static_assert(offsetof(Glyph_Authority_OnInteractionCompleted, interactingPlayer) == 0x000000, "Member 'Glyph_Authority_OnInteractionCompleted::interactingPlayer' has a wrong offset!");

// Function Archives.Glyph.Authority_OnPlayerBreachedRangeThreshold
// 0x0010 (0x0010 - 0x0000)
struct Glyph_Authority_OnPlayerBreachedRangeThreshold final
{
public:
	bool                                          isWithinRange;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           trackedActor;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Glyph_Authority_OnPlayerBreachedRangeThreshold) == 0x000008, "Wrong alignment on Glyph_Authority_OnPlayerBreachedRangeThreshold");
static_assert(sizeof(Glyph_Authority_OnPlayerBreachedRangeThreshold) == 0x000010, "Wrong size on Glyph_Authority_OnPlayerBreachedRangeThreshold");
static_assert(offsetof(Glyph_Authority_OnPlayerBreachedRangeThreshold, isWithinRange) == 0x000000, "Member 'Glyph_Authority_OnPlayerBreachedRangeThreshold::isWithinRange' has a wrong offset!");
static_assert(offsetof(Glyph_Authority_OnPlayerBreachedRangeThreshold, trackedActor) == 0x000008, "Member 'Glyph_Authority_OnPlayerBreachedRangeThreshold::trackedActor' has a wrong offset!");

// Function Archives.Glyph.Authority_TrackPlayerWithBehaviourID
// 0x0008 (0x0008 - 0x0000)
struct Glyph_Authority_TrackPlayerWithBehaviourID final
{
public:
	class ADBDPlayer*                             dbdPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Glyph_Authority_TrackPlayerWithBehaviourID) == 0x000008, "Wrong alignment on Glyph_Authority_TrackPlayerWithBehaviourID");
static_assert(sizeof(Glyph_Authority_TrackPlayerWithBehaviourID) == 0x000008, "Wrong size on Glyph_Authority_TrackPlayerWithBehaviourID");
static_assert(offsetof(Glyph_Authority_TrackPlayerWithBehaviourID, dbdPlayer) == 0x000000, "Member 'Glyph_Authority_TrackPlayerWithBehaviourID::dbdPlayer' has a wrong offset!");

// Function Archives.Glyph.Cosmetic_OnGlyphVisibilityChanged
// 0x0010 (0x0010 - 0x0000)
struct Glyph_Cosmetic_OnGlyphVisibilityChanged final
{
public:
	class ADBDPlayer*                             interactingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isVisible;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Glyph_Cosmetic_OnGlyphVisibilityChanged) == 0x000008, "Wrong alignment on Glyph_Cosmetic_OnGlyphVisibilityChanged");
static_assert(sizeof(Glyph_Cosmetic_OnGlyphVisibilityChanged) == 0x000010, "Wrong size on Glyph_Cosmetic_OnGlyphVisibilityChanged");
static_assert(offsetof(Glyph_Cosmetic_OnGlyphVisibilityChanged, interactingPlayer) == 0x000000, "Member 'Glyph_Cosmetic_OnGlyphVisibilityChanged::interactingPlayer' has a wrong offset!");
static_assert(offsetof(Glyph_Cosmetic_OnGlyphVisibilityChanged, isVisible) == 0x000008, "Member 'Glyph_Cosmetic_OnGlyphVisibilityChanged::isVisible' has a wrong offset!");

// Function Archives.Glyph.Cosmetic_OnInteractionCompleted
// 0x0008 (0x0008 - 0x0000)
struct Glyph_Cosmetic_OnInteractionCompleted final
{
public:
	class ADBDPlayer*                             interactingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Glyph_Cosmetic_OnInteractionCompleted) == 0x000008, "Wrong alignment on Glyph_Cosmetic_OnInteractionCompleted");
static_assert(sizeof(Glyph_Cosmetic_OnInteractionCompleted) == 0x000008, "Wrong size on Glyph_Cosmetic_OnInteractionCompleted");
static_assert(offsetof(Glyph_Cosmetic_OnInteractionCompleted, interactingPlayer) == 0x000000, "Member 'Glyph_Cosmetic_OnInteractionCompleted::interactingPlayer' has a wrong offset!");

// Function Archives.Glyph.Cosmetic_OnStartedInteracting
// 0x0010 (0x0010 - 0x0000)
struct Glyph_Cosmetic_OnStartedInteracting final
{
public:
	class ADBDPlayer*                             interactingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         interactionDuration;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Glyph_Cosmetic_OnStartedInteracting) == 0x000008, "Wrong alignment on Glyph_Cosmetic_OnStartedInteracting");
static_assert(sizeof(Glyph_Cosmetic_OnStartedInteracting) == 0x000010, "Wrong size on Glyph_Cosmetic_OnStartedInteracting");
static_assert(offsetof(Glyph_Cosmetic_OnStartedInteracting, interactingPlayer) == 0x000000, "Member 'Glyph_Cosmetic_OnStartedInteracting::interactingPlayer' has a wrong offset!");
static_assert(offsetof(Glyph_Cosmetic_OnStartedInteracting, interactionDuration) == 0x000008, "Member 'Glyph_Cosmetic_OnStartedInteracting::interactionDuration' has a wrong offset!");

// Function Archives.Glyph.DoesLocalPlayerHaveVisibility
// 0x0001 (0x0001 - 0x0000)
struct Glyph_DoesLocalPlayerHaveVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Glyph_DoesLocalPlayerHaveVisibility) == 0x000001, "Wrong alignment on Glyph_DoesLocalPlayerHaveVisibility");
static_assert(sizeof(Glyph_DoesLocalPlayerHaveVisibility) == 0x000001, "Wrong size on Glyph_DoesLocalPlayerHaveVisibility");
static_assert(offsetof(Glyph_DoesLocalPlayerHaveVisibility, ReturnValue) == 0x000000, "Member 'Glyph_DoesLocalPlayerHaveVisibility::ReturnValue' has a wrong offset!");

// Function Archives.Glyph.IsPlayerOwner
// 0x0010 (0x0010 - 0x0000)
struct Glyph_IsPlayerOwner final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Glyph_IsPlayerOwner) == 0x000008, "Wrong alignment on Glyph_IsPlayerOwner");
static_assert(sizeof(Glyph_IsPlayerOwner) == 0x000010, "Wrong size on Glyph_IsPlayerOwner");
static_assert(offsetof(Glyph_IsPlayerOwner, player) == 0x000000, "Member 'Glyph_IsPlayerOwner::player' has a wrong offset!");
static_assert(offsetof(Glyph_IsPlayerOwner, ReturnValue) == 0x000008, "Member 'Glyph_IsPlayerOwner::ReturnValue' has a wrong offset!");

// Function Archives.GreenGlyphActivatorComponent.Authority_EndGameScenarioBegins
// 0x0038 (0x0038 - 0x0000)
struct GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins final
{
public:
	struct FGameplayTag                           gameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins) == 0x000008, "Wrong alignment on GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins");
static_assert(sizeof(GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins) == 0x000038, "Wrong size on GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins");
static_assert(offsetof(GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins, gameplayTag) == 0x000000, "Member 'GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins::gameplayTag' has a wrong offset!");
static_assert(offsetof(GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins, gameEventData) == 0x000010, "Member 'GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins::gameEventData' has a wrong offset!");

// Function Archives.GreenGlyphActivatorComponent.Authority_OnActivateGlyphEvents
// 0x0038 (0x0038 - 0x0000)
struct GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents final
{
public:
	struct FGameplayTag                           gameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents) == 0x000008, "Wrong alignment on GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents");
static_assert(sizeof(GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents) == 0x000038, "Wrong size on GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents");
static_assert(offsetof(GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents, gameplayTag) == 0x000000, "Member 'GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents::gameplayTag' has a wrong offset!");
static_assert(offsetof(GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents, gameEventData) == 0x000010, "Member 'GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents::gameEventData' has a wrong offset!");

// Function Archives.GreenGlyphActivatorComponent.DBD_ShowAuraGreenGlyphsActive
// 0x0001 (0x0001 - 0x0000)
struct GreenGlyphActivatorComponent_DBD_ShowAuraGreenGlyphsActive final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GreenGlyphActivatorComponent_DBD_ShowAuraGreenGlyphsActive) == 0x000001, "Wrong alignment on GreenGlyphActivatorComponent_DBD_ShowAuraGreenGlyphsActive");
static_assert(sizeof(GreenGlyphActivatorComponent_DBD_ShowAuraGreenGlyphsActive) == 0x000001, "Wrong size on GreenGlyphActivatorComponent_DBD_ShowAuraGreenGlyphsActive");
static_assert(offsetof(GreenGlyphActivatorComponent_DBD_ShowAuraGreenGlyphsActive, enabled) == 0x000000, "Member 'GreenGlyphActivatorComponent_DBD_ShowAuraGreenGlyphsActive::enabled' has a wrong offset!");

// Function Archives.GreenGlyphComponent.Multicast_Cheat_ShowAuraGreenGlyphActive
// 0x0002 (0x0002 - 0x0000)
struct GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceShowAura;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive) == 0x000001, "Wrong alignment on GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive");
static_assert(sizeof(GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive) == 0x000002, "Wrong size on GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive");
static_assert(offsetof(GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive, enabled) == 0x000000, "Member 'GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive::enabled' has a wrong offset!");
static_assert(offsetof(GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive, bForceShowAura) == 0x000001, "Member 'GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive::bForceShowAura' has a wrong offset!");

// Function Archives.HasInteractedMapTrackedInteractorQEEvaluator.OnActorTrackedByMap
// 0x0008 (0x0008 - 0x0000)
struct HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap final
{
public:
	class AActor*                                 newActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap) == 0x000008, "Wrong alignment on HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap");
static_assert(sizeof(HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap) == 0x000008, "Wrong size on HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap");
static_assert(offsetof(HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap, newActor) == 0x000000, "Member 'HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap::newActor' has a wrong offset!");

// Function Archives.SurvivorHookSameTimeQEEvaluator.OnSurvivorHooked
// 0x0038 (0x0038 - 0x0000)
struct SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked) == 0x000008, "Wrong alignment on SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked");
static_assert(sizeof(SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked) == 0x000038, "Wrong size on SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked");
static_assert(offsetof(SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked, gameEventType) == 0x000000, "Member 'SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked::gameEventType' has a wrong offset!");
static_assert(offsetof(SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked, gameEventData) == 0x000010, "Member 'SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked::gameEventData' has a wrong offset!");

// Function Archives.SurvivorHookSameTimeQEEvaluator.OnSurvivorUnhooked
// 0x0038 (0x0038 - 0x0000)
struct SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked) == 0x000008, "Wrong alignment on SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked");
static_assert(sizeof(SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked) == 0x000038, "Wrong size on SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked");
static_assert(offsetof(SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked, gameEventType) == 0x000000, "Member 'SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked::gameEventType' has a wrong offset!");
static_assert(offsetof(SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked, gameEventData) == 0x000010, "Member 'SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked::gameEventData' has a wrong offset!");

// Function Archives.InLockerNearKillerQEEvaluator.OnClosetHideEnter
// 0x0038 (0x0038 - 0x0000)
struct InLockerNearKillerQEEvaluator_OnClosetHideEnter final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InLockerNearKillerQEEvaluator_OnClosetHideEnter) == 0x000008, "Wrong alignment on InLockerNearKillerQEEvaluator_OnClosetHideEnter");
static_assert(sizeof(InLockerNearKillerQEEvaluator_OnClosetHideEnter) == 0x000038, "Wrong size on InLockerNearKillerQEEvaluator_OnClosetHideEnter");
static_assert(offsetof(InLockerNearKillerQEEvaluator_OnClosetHideEnter, gameEventType) == 0x000000, "Member 'InLockerNearKillerQEEvaluator_OnClosetHideEnter::gameEventType' has a wrong offset!");
static_assert(offsetof(InLockerNearKillerQEEvaluator_OnClosetHideEnter, gameEventData) == 0x000010, "Member 'InLockerNearKillerQEEvaluator_OnClosetHideEnter::gameEventData' has a wrong offset!");

// Function Archives.InLockerNearKillerQEEvaluator.OnClosetHideExit
// 0x0038 (0x0038 - 0x0000)
struct InLockerNearKillerQEEvaluator_OnClosetHideExit final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InLockerNearKillerQEEvaluator_OnClosetHideExit) == 0x000008, "Wrong alignment on InLockerNearKillerQEEvaluator_OnClosetHideExit");
static_assert(sizeof(InLockerNearKillerQEEvaluator_OnClosetHideExit) == 0x000038, "Wrong size on InLockerNearKillerQEEvaluator_OnClosetHideExit");
static_assert(offsetof(InLockerNearKillerQEEvaluator_OnClosetHideExit, gameEventType) == 0x000000, "Member 'InLockerNearKillerQEEvaluator_OnClosetHideExit::gameEventType' has a wrong offset!");
static_assert(offsetof(InLockerNearKillerQEEvaluator_OnClosetHideExit, gameEventData) == 0x000010, "Member 'InLockerNearKillerQEEvaluator_OnClosetHideExit::gameEventData' has a wrong offset!");

// Function Archives.ItemConsumedQEEvaluator.OnItemConsumed
// 0x0038 (0x0038 - 0x0000)
struct ItemConsumedQEEvaluator_OnItemConsumed final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemConsumedQEEvaluator_OnItemConsumed) == 0x000008, "Wrong alignment on ItemConsumedQEEvaluator_OnItemConsumed");
static_assert(sizeof(ItemConsumedQEEvaluator_OnItemConsumed) == 0x000038, "Wrong size on ItemConsumedQEEvaluator_OnItemConsumed");
static_assert(offsetof(ItemConsumedQEEvaluator_OnItemConsumed, gameEventType) == 0x000000, "Member 'ItemConsumedQEEvaluator_OnItemConsumed::gameEventType' has a wrong offset!");
static_assert(offsetof(ItemConsumedQEEvaluator_OnItemConsumed, gameEventData) == 0x000010, "Member 'ItemConsumedQEEvaluator_OnItemConsumed::gameEventData' has a wrong offset!");

// Function Archives.ItemUsedQEEvaluator.OnItemUsed
// 0x0038 (0x0038 - 0x0000)
struct ItemUsedQEEvaluator_OnItemUsed final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemUsedQEEvaluator_OnItemUsed) == 0x000008, "Wrong alignment on ItemUsedQEEvaluator_OnItemUsed");
static_assert(sizeof(ItemUsedQEEvaluator_OnItemUsed) == 0x000038, "Wrong size on ItemUsedQEEvaluator_OnItemUsed");
static_assert(offsetof(ItemUsedQEEvaluator_OnItemUsed, gameEventType) == 0x000000, "Member 'ItemUsedQEEvaluator_OnItemUsed::gameEventType' has a wrong offset!");
static_assert(offsetof(ItemUsedQEEvaluator_OnItemUsed, gameEventData) == 0x000010, "Member 'ItemUsedQEEvaluator_OnItemUsed::gameEventData' has a wrong offset!");

// Function Archives.LivingSurvivorsCountQEEvaluator.OnSurvivorAdded
// 0x0008 (0x0008 - 0x0000)
struct LivingSurvivorsCountQEEvaluator_OnSurvivorAdded final
{
public:
	class ACamperPlayer*                          survivorAdded;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LivingSurvivorsCountQEEvaluator_OnSurvivorAdded) == 0x000008, "Wrong alignment on LivingSurvivorsCountQEEvaluator_OnSurvivorAdded");
static_assert(sizeof(LivingSurvivorsCountQEEvaluator_OnSurvivorAdded) == 0x000008, "Wrong size on LivingSurvivorsCountQEEvaluator_OnSurvivorAdded");
static_assert(offsetof(LivingSurvivorsCountQEEvaluator_OnSurvivorAdded, survivorAdded) == 0x000000, "Member 'LivingSurvivorsCountQEEvaluator_OnSurvivorAdded::survivorAdded' has a wrong offset!");

// Function Archives.LivingSurvivorsCountQEEvaluator.OnSurvivorRemoved
// 0x0008 (0x0008 - 0x0000)
struct LivingSurvivorsCountQEEvaluator_OnSurvivorRemoved final
{
public:
	class ACamperPlayer*                          survivorRemoved;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LivingSurvivorsCountQEEvaluator_OnSurvivorRemoved) == 0x000008, "Wrong alignment on LivingSurvivorsCountQEEvaluator_OnSurvivorRemoved");
static_assert(sizeof(LivingSurvivorsCountQEEvaluator_OnSurvivorRemoved) == 0x000008, "Wrong size on LivingSurvivorsCountQEEvaluator_OnSurvivorRemoved");
static_assert(offsetof(LivingSurvivorsCountQEEvaluator_OnSurvivorRemoved, survivorRemoved) == 0x000000, "Member 'LivingSurvivorsCountQEEvaluator_OnSurvivorRemoved::survivorRemoved' has a wrong offset!");

// Function Archives.NearTrackedActorComponent.SetDistanceThreshold
// 0x0004 (0x0004 - 0x0000)
struct NearTrackedActorComponent_SetDistanceThreshold final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearTrackedActorComponent_SetDistanceThreshold) == 0x000004, "Wrong alignment on NearTrackedActorComponent_SetDistanceThreshold");
static_assert(sizeof(NearTrackedActorComponent_SetDistanceThreshold) == 0x000004, "Wrong size on NearTrackedActorComponent_SetDistanceThreshold");
static_assert(offsetof(NearTrackedActorComponent_SetDistanceThreshold, value) == 0x000000, "Member 'NearTrackedActorComponent_SetDistanceThreshold::value' has a wrong offset!");

// Function Archives.NearTrackedActorComponent.StartTrackingActor
// 0x0008 (0x0008 - 0x0000)
struct NearTrackedActorComponent_StartTrackingActor final
{
public:
	const class AActor*                           actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearTrackedActorComponent_StartTrackingActor) == 0x000008, "Wrong alignment on NearTrackedActorComponent_StartTrackingActor");
static_assert(sizeof(NearTrackedActorComponent_StartTrackingActor) == 0x000008, "Wrong size on NearTrackedActorComponent_StartTrackingActor");
static_assert(offsetof(NearTrackedActorComponent_StartTrackingActor, actor) == 0x000000, "Member 'NearTrackedActorComponent_StartTrackingActor::actor' has a wrong offset!");

// Function Archives.NearTrackedActorComponent.StopTrackingActor
// 0x0008 (0x0008 - 0x0000)
struct NearTrackedActorComponent_StopTrackingActor final
{
public:
	const class AActor*                           actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearTrackedActorComponent_StopTrackingActor) == 0x000008, "Wrong alignment on NearTrackedActorComponent_StopTrackingActor");
static_assert(sizeof(NearTrackedActorComponent_StopTrackingActor) == 0x000008, "Wrong size on NearTrackedActorComponent_StopTrackingActor");
static_assert(offsetof(NearTrackedActorComponent_StopTrackingActor, actor) == 0x000000, "Member 'NearTrackedActorComponent_StopTrackingActor::actor' has a wrong offset!");

// Function Archives.NearTrackedActorComponent.IsActorWithinRange
// 0x0010 (0x0010 - 0x0000)
struct NearTrackedActorComponent_IsActorWithinRange final
{
public:
	const class AActor*                           actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NearTrackedActorComponent_IsActorWithinRange) == 0x000008, "Wrong alignment on NearTrackedActorComponent_IsActorWithinRange");
static_assert(sizeof(NearTrackedActorComponent_IsActorWithinRange) == 0x000010, "Wrong size on NearTrackedActorComponent_IsActorWithinRange");
static_assert(offsetof(NearTrackedActorComponent_IsActorWithinRange, actor) == 0x000000, "Member 'NearTrackedActorComponent_IsActorWithinRange::actor' has a wrong offset!");
static_assert(offsetof(NearTrackedActorComponent_IsActorWithinRange, ReturnValue) == 0x000008, "Member 'NearTrackedActorComponent_IsActorWithinRange::ReturnValue' has a wrong offset!");

// Function Archives.OrangeGlyphComponent.Cosmetic_ApplyNegativeEffects
// 0x0008 (0x0008 - 0x0000)
struct OrangeGlyphComponent_Cosmetic_ApplyNegativeEffects final
{
public:
	class ADBDPlayer*                             affectedPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrangeGlyphComponent_Cosmetic_ApplyNegativeEffects) == 0x000008, "Wrong alignment on OrangeGlyphComponent_Cosmetic_ApplyNegativeEffects");
static_assert(sizeof(OrangeGlyphComponent_Cosmetic_ApplyNegativeEffects) == 0x000008, "Wrong size on OrangeGlyphComponent_Cosmetic_ApplyNegativeEffects");
static_assert(offsetof(OrangeGlyphComponent_Cosmetic_ApplyNegativeEffects, affectedPlayer) == 0x000000, "Member 'OrangeGlyphComponent_Cosmetic_ApplyNegativeEffects::affectedPlayer' has a wrong offset!");

// Function Archives.PinkGlyphComponent.Authority_OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct PinkGlyphComponent_Authority_OnDamageStateChanged final
{
public:
	ECamperDamageState                            oldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            newDamageState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PinkGlyphComponent_Authority_OnDamageStateChanged) == 0x000001, "Wrong alignment on PinkGlyphComponent_Authority_OnDamageStateChanged");
static_assert(sizeof(PinkGlyphComponent_Authority_OnDamageStateChanged) == 0x000002, "Wrong size on PinkGlyphComponent_Authority_OnDamageStateChanged");
static_assert(offsetof(PinkGlyphComponent_Authority_OnDamageStateChanged, oldDamageState) == 0x000000, "Member 'PinkGlyphComponent_Authority_OnDamageStateChanged::oldDamageState' has a wrong offset!");
static_assert(offsetof(PinkGlyphComponent_Authority_OnDamageStateChanged, newDamageState) == 0x000001, "Member 'PinkGlyphComponent_Authority_OnDamageStateChanged::newDamageState' has a wrong offset!");

// Function Archives.PinkGlyphComponent.Authority_OnPlayerBreachedRangeThreshold
// 0x0010 (0x0010 - 0x0000)
struct PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold final
{
public:
	bool                                          isWithinRange;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           trackedActor;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold) == 0x000008, "Wrong alignment on PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold");
static_assert(sizeof(PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold) == 0x000010, "Wrong size on PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold");
static_assert(offsetof(PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold, isWithinRange) == 0x000000, "Member 'PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold::isWithinRange' has a wrong offset!");
static_assert(offsetof(PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold, trackedActor) == 0x000008, "Member 'PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold::trackedActor' has a wrong offset!");

// Function Archives.PinkGlyphComponent.Authority_OnSurvivorInMovementRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct PinkGlyphComponent_Authority_OnSurvivorInMovementRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PinkGlyphComponent_Authority_OnSurvivorInMovementRangeChanged) == 0x000001, "Wrong alignment on PinkGlyphComponent_Authority_OnSurvivorInMovementRangeChanged");
static_assert(sizeof(PinkGlyphComponent_Authority_OnSurvivorInMovementRangeChanged) == 0x000001, "Wrong size on PinkGlyphComponent_Authority_OnSurvivorInMovementRangeChanged");
static_assert(offsetof(PinkGlyphComponent_Authority_OnSurvivorInMovementRangeChanged, inRange) == 0x000000, "Member 'PinkGlyphComponent_Authority_OnSurvivorInMovementRangeChanged::inRange' has a wrong offset!");

// Function Archives.PinkGlyphComponent.Multicast_TeleportGlyph
// 0x000C (0x000C - 0x0000)
struct PinkGlyphComponent_Multicast_TeleportGlyph final
{
public:
	struct FVector                                location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PinkGlyphComponent_Multicast_TeleportGlyph) == 0x000004, "Wrong alignment on PinkGlyphComponent_Multicast_TeleportGlyph");
static_assert(sizeof(PinkGlyphComponent_Multicast_TeleportGlyph) == 0x00000C, "Wrong size on PinkGlyphComponent_Multicast_TeleportGlyph");
static_assert(offsetof(PinkGlyphComponent_Multicast_TeleportGlyph, location) == 0x000000, "Member 'PinkGlyphComponent_Multicast_TeleportGlyph::location' has a wrong offset!");

// Function Archives.PinkGlyphComponent.IsMarking
// 0x0001 (0x0001 - 0x0000)
struct PinkGlyphComponent_IsMarking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PinkGlyphComponent_IsMarking) == 0x000001, "Wrong alignment on PinkGlyphComponent_IsMarking");
static_assert(sizeof(PinkGlyphComponent_IsMarking) == 0x000001, "Wrong size on PinkGlyphComponent_IsMarking");
static_assert(offsetof(PinkGlyphComponent_IsMarking, ReturnValue) == 0x000000, "Member 'PinkGlyphComponent_IsMarking::ReturnValue' has a wrong offset!");

// Function Archives.PreventExitGateOpenQEEvaluator.OnExitGateOpened
// 0x0038 (0x0038 - 0x0000)
struct PreventExitGateOpenQEEvaluator_OnExitGateOpened final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreventExitGateOpenQEEvaluator_OnExitGateOpened) == 0x000008, "Wrong alignment on PreventExitGateOpenQEEvaluator_OnExitGateOpened");
static_assert(sizeof(PreventExitGateOpenQEEvaluator_OnExitGateOpened) == 0x000038, "Wrong size on PreventExitGateOpenQEEvaluator_OnExitGateOpened");
static_assert(offsetof(PreventExitGateOpenQEEvaluator_OnExitGateOpened, gameEventType) == 0x000000, "Member 'PreventExitGateOpenQEEvaluator_OnExitGateOpened::gameEventType' has a wrong offset!");
static_assert(offsetof(PreventExitGateOpenQEEvaluator_OnExitGateOpened, gameEventData) == 0x000010, "Member 'PreventExitGateOpenQEEvaluator_OnExitGateOpened::gameEventData' has a wrong offset!");

// Function Archives.PreventExitGateOpenQEEvaluator.OnSurvivorAdded
// 0x0008 (0x0008 - 0x0000)
struct PreventExitGateOpenQEEvaluator_OnSurvivorAdded final
{
public:
	class ACamperPlayer*                          survivorAdded;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreventExitGateOpenQEEvaluator_OnSurvivorAdded) == 0x000008, "Wrong alignment on PreventExitGateOpenQEEvaluator_OnSurvivorAdded");
static_assert(sizeof(PreventExitGateOpenQEEvaluator_OnSurvivorAdded) == 0x000008, "Wrong size on PreventExitGateOpenQEEvaluator_OnSurvivorAdded");
static_assert(offsetof(PreventExitGateOpenQEEvaluator_OnSurvivorAdded, survivorAdded) == 0x000000, "Member 'PreventExitGateOpenQEEvaluator_OnSurvivorAdded::survivorAdded' has a wrong offset!");

// Function Archives.PreventExitGateOpenQEEvaluator.OnSurvivorLeftMatch
// 0x0038 (0x0038 - 0x0000)
struct PreventExitGateOpenQEEvaluator_OnSurvivorLeftMatch final
{
public:
	struct FGameplayTag                           gameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreventExitGateOpenQEEvaluator_OnSurvivorLeftMatch) == 0x000008, "Wrong alignment on PreventExitGateOpenQEEvaluator_OnSurvivorLeftMatch");
static_assert(sizeof(PreventExitGateOpenQEEvaluator_OnSurvivorLeftMatch) == 0x000038, "Wrong size on PreventExitGateOpenQEEvaluator_OnSurvivorLeftMatch");
static_assert(offsetof(PreventExitGateOpenQEEvaluator_OnSurvivorLeftMatch, gameplayTag) == 0x000000, "Member 'PreventExitGateOpenQEEvaluator_OnSurvivorLeftMatch::gameplayTag' has a wrong offset!");
static_assert(offsetof(PreventExitGateOpenQEEvaluator_OnSurvivorLeftMatch, gameEventData) == 0x000010, "Member 'PreventExitGateOpenQEEvaluator_OnSurvivorLeftMatch::gameEventData' has a wrong offset!");

// Function Archives.PurpleGlyphComponent.Authority_GetNextLocation
// 0x000C (0x000C - 0x0000)
struct PurpleGlyphComponent_Authority_GetNextLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PurpleGlyphComponent_Authority_GetNextLocation) == 0x000004, "Wrong alignment on PurpleGlyphComponent_Authority_GetNextLocation");
static_assert(sizeof(PurpleGlyphComponent_Authority_GetNextLocation) == 0x00000C, "Wrong size on PurpleGlyphComponent_Authority_GetNextLocation");
static_assert(offsetof(PurpleGlyphComponent_Authority_GetNextLocation, ReturnValue) == 0x000000, "Member 'PurpleGlyphComponent_Authority_GetNextLocation::ReturnValue' has a wrong offset!");

// Function Archives.PurpleGlyphComponent.Authority_MoveTo
// 0x000C (0x000C - 0x0000)
struct PurpleGlyphComponent_Authority_MoveTo final
{
public:
	struct FVector                                location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PurpleGlyphComponent_Authority_MoveTo) == 0x000004, "Wrong alignment on PurpleGlyphComponent_Authority_MoveTo");
static_assert(sizeof(PurpleGlyphComponent_Authority_MoveTo) == 0x00000C, "Wrong size on PurpleGlyphComponent_Authority_MoveTo");
static_assert(offsetof(PurpleGlyphComponent_Authority_MoveTo, location) == 0x000000, "Member 'PurpleGlyphComponent_Authority_MoveTo::location' has a wrong offset!");

// Function Archives.PurpleGlyphComponent.Authority_StartMoveWithAcceleration
// 0x000C (0x000C - 0x0000)
struct PurpleGlyphComponent_Authority_StartMoveWithAcceleration final
{
public:
	struct FVector                                goalLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PurpleGlyphComponent_Authority_StartMoveWithAcceleration) == 0x000004, "Wrong alignment on PurpleGlyphComponent_Authority_StartMoveWithAcceleration");
static_assert(sizeof(PurpleGlyphComponent_Authority_StartMoveWithAcceleration) == 0x00000C, "Wrong size on PurpleGlyphComponent_Authority_StartMoveWithAcceleration");
static_assert(offsetof(PurpleGlyphComponent_Authority_StartMoveWithAcceleration, goalLocation) == 0x000000, "Member 'PurpleGlyphComponent_Authority_StartMoveWithAcceleration::goalLocation' has a wrong offset!");

// Function Archives.PurpleGlyphComponent.GetTrackedPlayer
// 0x0008 (0x0008 - 0x0000)
struct PurpleGlyphComponent_GetTrackedPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PurpleGlyphComponent_GetTrackedPlayer) == 0x000008, "Wrong alignment on PurpleGlyphComponent_GetTrackedPlayer");
static_assert(sizeof(PurpleGlyphComponent_GetTrackedPlayer) == 0x000008, "Wrong size on PurpleGlyphComponent_GetTrackedPlayer");
static_assert(offsetof(PurpleGlyphComponent_GetTrackedPlayer, ReturnValue) == 0x000000, "Member 'PurpleGlyphComponent_GetTrackedPlayer::ReturnValue' has a wrong offset!");

// Function Archives.PurpleGlyphComponent.ResumeGlyphMovement
// 0x0001 (0x0001 - 0x0000)
struct PurpleGlyphComponent_ResumeGlyphMovement final
{
public:
	bool                                          useAcceleration;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PurpleGlyphComponent_ResumeGlyphMovement) == 0x000001, "Wrong alignment on PurpleGlyphComponent_ResumeGlyphMovement");
static_assert(sizeof(PurpleGlyphComponent_ResumeGlyphMovement) == 0x000001, "Wrong size on PurpleGlyphComponent_ResumeGlyphMovement");
static_assert(offsetof(PurpleGlyphComponent_ResumeGlyphMovement, useAcceleration) == 0x000000, "Member 'PurpleGlyphComponent_ResumeGlyphMovement::useAcceleration' has a wrong offset!");

// Function Archives.PurpleGlyphComponent.StopGlyphMovement
// 0x0001 (0x0001 - 0x0000)
struct PurpleGlyphComponent_StopGlyphMovement final
{
public:
	bool                                          useDeceleration;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PurpleGlyphComponent_StopGlyphMovement) == 0x000001, "Wrong alignment on PurpleGlyphComponent_StopGlyphMovement");
static_assert(sizeof(PurpleGlyphComponent_StopGlyphMovement) == 0x000001, "Wrong size on PurpleGlyphComponent_StopGlyphMovement");
static_assert(offsetof(PurpleGlyphComponent_StopGlyphMovement, useDeceleration) == 0x000000, "Member 'PurpleGlyphComponent_StopGlyphMovement::useDeceleration' has a wrong offset!");

// Function Archives.PurpleGlyphComponent.GetOwningGlyph
// 0x0008 (0x0008 - 0x0000)
struct PurpleGlyphComponent_GetOwningGlyph final
{
public:
	class AGlyph*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PurpleGlyphComponent_GetOwningGlyph) == 0x000008, "Wrong alignment on PurpleGlyphComponent_GetOwningGlyph");
static_assert(sizeof(PurpleGlyphComponent_GetOwningGlyph) == 0x000008, "Wrong size on PurpleGlyphComponent_GetOwningGlyph");
static_assert(offsetof(PurpleGlyphComponent_GetOwningGlyph, ReturnValue) == 0x000000, "Member 'PurpleGlyphComponent_GetOwningGlyph::ReturnValue' has a wrong offset!");

// Function Archives.QuestEventsHandler.DBD_InGameAddProgressionToCurrentQuest
// 0x0004 (0x0004 - 0x0000)
struct QuestEventsHandler_DBD_InGameAddProgressionToCurrentQuest final
{
public:
	int32                                         amount;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestEventsHandler_DBD_InGameAddProgressionToCurrentQuest) == 0x000004, "Wrong alignment on QuestEventsHandler_DBD_InGameAddProgressionToCurrentQuest");
static_assert(sizeof(QuestEventsHandler_DBD_InGameAddProgressionToCurrentQuest) == 0x000004, "Wrong size on QuestEventsHandler_DBD_InGameAddProgressionToCurrentQuest");
static_assert(offsetof(QuestEventsHandler_DBD_InGameAddProgressionToCurrentQuest, amount) == 0x000000, "Member 'QuestEventsHandler_DBD_InGameAddProgressionToCurrentQuest::amount' has a wrong offset!");

// Function Archives.QuestEventsHandler.OnFinishedPlaying
// 0x0038 (0x0038 - 0x0000)
struct QuestEventsHandler_OnFinishedPlaying final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestEventsHandler_OnFinishedPlaying) == 0x000008, "Wrong alignment on QuestEventsHandler_OnFinishedPlaying");
static_assert(sizeof(QuestEventsHandler_OnFinishedPlaying) == 0x000038, "Wrong size on QuestEventsHandler_OnFinishedPlaying");
static_assert(offsetof(QuestEventsHandler_OnFinishedPlaying, gameEventType) == 0x000000, "Member 'QuestEventsHandler_OnFinishedPlaying::gameEventType' has a wrong offset!");
static_assert(offsetof(QuestEventsHandler_OnFinishedPlaying, gameEventData) == 0x000010, "Member 'QuestEventsHandler_OnFinishedPlaying::gameEventData' has a wrong offset!");

// Function Archives.QuestEventsHandler.OnGameEnded
// 0x0001 (0x0001 - 0x0000)
struct QuestEventsHandler_OnGameEnded final
{
public:
	EEndGameReason                                reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestEventsHandler_OnGameEnded) == 0x000001, "Wrong alignment on QuestEventsHandler_OnGameEnded");
static_assert(sizeof(QuestEventsHandler_OnGameEnded) == 0x000001, "Wrong size on QuestEventsHandler_OnGameEnded");
static_assert(offsetof(QuestEventsHandler_OnGameEnded, reason) == 0x000000, "Member 'QuestEventsHandler_OnGameEnded::reason' has a wrong offset!");

// Function Archives.QuestEventsHandler.OnPlayergameStateChanged
// 0x0010 (0x0010 - 0x0000)
struct QuestEventsHandler_OnPlayergameStateChanged final
{
public:
	class ADBDPlayerState*                        playerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameState                                    gameState;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestEventsHandler_OnPlayergameStateChanged) == 0x000008, "Wrong alignment on QuestEventsHandler_OnPlayergameStateChanged");
static_assert(sizeof(QuestEventsHandler_OnPlayergameStateChanged) == 0x000010, "Wrong size on QuestEventsHandler_OnPlayergameStateChanged");
static_assert(offsetof(QuestEventsHandler_OnPlayergameStateChanged, playerState) == 0x000000, "Member 'QuestEventsHandler_OnPlayergameStateChanged::playerState' has a wrong offset!");
static_assert(offsetof(QuestEventsHandler_OnPlayergameStateChanged, gameState) == 0x000008, "Member 'QuestEventsHandler_OnPlayergameStateChanged::gameState' has a wrong offset!");

// Function Archives.QuestEventsHandlerUtilities.InitializeQuestEventHandler
// 0x0008 (0x0008 - 0x0000)
struct QuestEventsHandlerUtilities_InitializeQuestEventHandler final
{
public:
	class UQuestEventsHandler*                    questEventsHandler;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestEventsHandlerUtilities_InitializeQuestEventHandler) == 0x000008, "Wrong alignment on QuestEventsHandlerUtilities_InitializeQuestEventHandler");
static_assert(sizeof(QuestEventsHandlerUtilities_InitializeQuestEventHandler) == 0x000008, "Wrong size on QuestEventsHandlerUtilities_InitializeQuestEventHandler");
static_assert(offsetof(QuestEventsHandlerUtilities_InitializeQuestEventHandler, questEventsHandler) == 0x000000, "Member 'QuestEventsHandlerUtilities_InitializeQuestEventHandler::questEventsHandler' has a wrong offset!");

// Function Archives.SearchItemRarityQEEvaluator.OnItemSpawnedFromChest
// 0x0038 (0x0038 - 0x0000)
struct SearchItemRarityQEEvaluator_OnItemSpawnedFromChest final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SearchItemRarityQEEvaluator_OnItemSpawnedFromChest) == 0x000008, "Wrong alignment on SearchItemRarityQEEvaluator_OnItemSpawnedFromChest");
static_assert(sizeof(SearchItemRarityQEEvaluator_OnItemSpawnedFromChest) == 0x000038, "Wrong size on SearchItemRarityQEEvaluator_OnItemSpawnedFromChest");
static_assert(offsetof(SearchItemRarityQEEvaluator_OnItemSpawnedFromChest, gameEventType) == 0x000000, "Member 'SearchItemRarityQEEvaluator_OnItemSpawnedFromChest::gameEventType' has a wrong offset!");
static_assert(offsetof(SearchItemRarityQEEvaluator_OnItemSpawnedFromChest, gameEventData) == 0x000010, "Member 'SearchItemRarityQEEvaluator_OnItemSpawnedFromChest::gameEventData' has a wrong offset!");

// Function Archives.SkillCheckConsecutiveQEEvaluator.OnSkillCheckFail
// 0x0038 (0x0038 - 0x0000)
struct SkillCheckConsecutiveQEEvaluator_OnSkillCheckFail final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheckConsecutiveQEEvaluator_OnSkillCheckFail) == 0x000008, "Wrong alignment on SkillCheckConsecutiveQEEvaluator_OnSkillCheckFail");
static_assert(sizeof(SkillCheckConsecutiveQEEvaluator_OnSkillCheckFail) == 0x000038, "Wrong size on SkillCheckConsecutiveQEEvaluator_OnSkillCheckFail");
static_assert(offsetof(SkillCheckConsecutiveQEEvaluator_OnSkillCheckFail, gameEventType) == 0x000000, "Member 'SkillCheckConsecutiveQEEvaluator_OnSkillCheckFail::gameEventType' has a wrong offset!");
static_assert(offsetof(SkillCheckConsecutiveQEEvaluator_OnSkillCheckFail, gameEventData) == 0x000010, "Member 'SkillCheckConsecutiveQEEvaluator_OnSkillCheckFail::gameEventData' has a wrong offset!");

// Function Archives.SkillCheckConsecutiveQEEvaluator.OnSkillCheckSuccess
// 0x0038 (0x0038 - 0x0000)
struct SkillCheckConsecutiveQEEvaluator_OnSkillCheckSuccess final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheckConsecutiveQEEvaluator_OnSkillCheckSuccess) == 0x000008, "Wrong alignment on SkillCheckConsecutiveQEEvaluator_OnSkillCheckSuccess");
static_assert(sizeof(SkillCheckConsecutiveQEEvaluator_OnSkillCheckSuccess) == 0x000038, "Wrong size on SkillCheckConsecutiveQEEvaluator_OnSkillCheckSuccess");
static_assert(offsetof(SkillCheckConsecutiveQEEvaluator_OnSkillCheckSuccess, gameEventType) == 0x000000, "Member 'SkillCheckConsecutiveQEEvaluator_OnSkillCheckSuccess::gameEventType' has a wrong offset!");
static_assert(offsetof(SkillCheckConsecutiveQEEvaluator_OnSkillCheckSuccess, gameEventData) == 0x000010, "Member 'SkillCheckConsecutiveQEEvaluator_OnSkillCheckSuccess::gameEventData' has a wrong offset!");

// Function Archives.WhiteGlyphBasementComponent.GetOwningGlyph
// 0x0008 (0x0008 - 0x0000)
struct WhiteGlyphBasementComponent_GetOwningGlyph final
{
public:
	class AGlyph*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WhiteGlyphBasementComponent_GetOwningGlyph) == 0x000008, "Wrong alignment on WhiteGlyphBasementComponent_GetOwningGlyph");
static_assert(sizeof(WhiteGlyphBasementComponent_GetOwningGlyph) == 0x000008, "Wrong size on WhiteGlyphBasementComponent_GetOwningGlyph");
static_assert(offsetof(WhiteGlyphBasementComponent_GetOwningGlyph, ReturnValue) == 0x000000, "Member 'WhiteGlyphBasementComponent_GetOwningGlyph::ReturnValue' has a wrong offset!");

// Function Archives.WhiteGlyphSurfaceComponent.Multicast_TeleportGlyph
// 0x000C (0x000C - 0x0000)
struct WhiteGlyphSurfaceComponent_Multicast_TeleportGlyph final
{
public:
	struct FVector                                location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WhiteGlyphSurfaceComponent_Multicast_TeleportGlyph) == 0x000004, "Wrong alignment on WhiteGlyphSurfaceComponent_Multicast_TeleportGlyph");
static_assert(sizeof(WhiteGlyphSurfaceComponent_Multicast_TeleportGlyph) == 0x00000C, "Wrong size on WhiteGlyphSurfaceComponent_Multicast_TeleportGlyph");
static_assert(offsetof(WhiteGlyphSurfaceComponent_Multicast_TeleportGlyph, location) == 0x000000, "Member 'WhiteGlyphSurfaceComponent_Multicast_TeleportGlyph::location' has a wrong offset!");

// Function Archives.WhiteGlyphSurfaceComponent.GetOwningGlyph
// 0x0008 (0x0008 - 0x0000)
struct WhiteGlyphSurfaceComponent_GetOwningGlyph final
{
public:
	class AGlyph*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WhiteGlyphSurfaceComponent_GetOwningGlyph) == 0x000008, "Wrong alignment on WhiteGlyphSurfaceComponent_GetOwningGlyph");
static_assert(sizeof(WhiteGlyphSurfaceComponent_GetOwningGlyph) == 0x000008, "Wrong size on WhiteGlyphSurfaceComponent_GetOwningGlyph");
static_assert(offsetof(WhiteGlyphSurfaceComponent_GetOwningGlyph, ReturnValue) == 0x000000, "Member 'WhiteGlyphSurfaceComponent_GetOwningGlyph::ReturnValue' has a wrong offset!");

// Function Archives.YellowGlyphComponent.Authority_TeleportGlyph
// 0x0008 (0x0008 - 0x0000)
struct YellowGlyphComponent_Authority_TeleportGlyph final
{
public:
	int32                                         maxNumberOfTries;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(YellowGlyphComponent_Authority_TeleportGlyph) == 0x000004, "Wrong alignment on YellowGlyphComponent_Authority_TeleportGlyph");
static_assert(sizeof(YellowGlyphComponent_Authority_TeleportGlyph) == 0x000008, "Wrong size on YellowGlyphComponent_Authority_TeleportGlyph");
static_assert(offsetof(YellowGlyphComponent_Authority_TeleportGlyph, maxNumberOfTries) == 0x000000, "Member 'YellowGlyphComponent_Authority_TeleportGlyph::maxNumberOfTries' has a wrong offset!");
static_assert(offsetof(YellowGlyphComponent_Authority_TeleportGlyph, ReturnValue) == 0x000004, "Member 'YellowGlyphComponent_Authority_TeleportGlyph::ReturnValue' has a wrong offset!");

// Function Archives.YellowGlyphComponent.Multicast_TeleportGlyph
// 0x000C (0x000C - 0x0000)
struct YellowGlyphComponent_Multicast_TeleportGlyph final
{
public:
	struct FVector                                location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(YellowGlyphComponent_Multicast_TeleportGlyph) == 0x000004, "Wrong alignment on YellowGlyphComponent_Multicast_TeleportGlyph");
static_assert(sizeof(YellowGlyphComponent_Multicast_TeleportGlyph) == 0x00000C, "Wrong size on YellowGlyphComponent_Multicast_TeleportGlyph");
static_assert(offsetof(YellowGlyphComponent_Multicast_TeleportGlyph, location) == 0x000000, "Member 'YellowGlyphComponent_Multicast_TeleportGlyph::location' has a wrong offset!");

// Function Archives.YellowGlyphComponent.GetOwningGlyph
// 0x0008 (0x0008 - 0x0000)
struct YellowGlyphComponent_GetOwningGlyph final
{
public:
	class AGlyph*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(YellowGlyphComponent_GetOwningGlyph) == 0x000008, "Wrong alignment on YellowGlyphComponent_GetOwningGlyph");
static_assert(sizeof(YellowGlyphComponent_GetOwningGlyph) == 0x000008, "Wrong size on YellowGlyphComponent_GetOwningGlyph");
static_assert(offsetof(YellowGlyphComponent_GetOwningGlyph, ReturnValue) == 0x000000, "Member 'YellowGlyphComponent_GetOwningGlyph::ReturnValue' has a wrong offset!");

}

