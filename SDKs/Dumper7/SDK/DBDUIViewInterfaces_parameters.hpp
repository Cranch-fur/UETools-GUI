#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIViewInterfaces

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function DBDUIViewInterfaces.AddonViewInterface.SetData
// 0x0068 (0x0068 - 0x0000)
struct AddonViewInterface_SetData final
{
public:
	struct FAddonViewData                         baseLoadoutPartViewData;                           // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AddonViewInterface_SetData) == 0x000008, "Wrong alignment on AddonViewInterface_SetData");
static_assert(sizeof(AddonViewInterface_SetData) == 0x000068, "Wrong size on AddonViewInterface_SetData");
static_assert(offsetof(AddonViewInterface_SetData, baseLoadoutPartViewData) == 0x000000, "Member 'AddonViewInterface_SetData::baseLoadoutPartViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveCompendiumViewInterface.SetPastTomesViewData
// 0x0010 (0x0010 - 0x0000)
struct ArchiveCompendiumViewInterface_SetPastTomesViewData final
{
public:
	TArray<struct FCompendiumButtonData>          pastStoryButtonData;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveCompendiumViewInterface_SetPastTomesViewData) == 0x000008, "Wrong alignment on ArchiveCompendiumViewInterface_SetPastTomesViewData");
static_assert(sizeof(ArchiveCompendiumViewInterface_SetPastTomesViewData) == 0x000010, "Wrong size on ArchiveCompendiumViewInterface_SetPastTomesViewData");
static_assert(offsetof(ArchiveCompendiumViewInterface_SetPastTomesViewData, pastStoryButtonData) == 0x000000, "Member 'ArchiveCompendiumViewInterface_SetPastTomesViewData::pastStoryButtonData' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveEditorViewInterface.DisplayEditorSaving
// 0x0010 (0x0010 - 0x0000)
struct ArchiveEditorViewInterface_DisplayEditorSaving final
{
public:
	class FString                                 path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveEditorViewInterface_DisplayEditorSaving) == 0x000008, "Wrong alignment on ArchiveEditorViewInterface_DisplayEditorSaving");
static_assert(sizeof(ArchiveEditorViewInterface_DisplayEditorSaving) == 0x000010, "Wrong size on ArchiveEditorViewInterface_DisplayEditorSaving");
static_assert(offsetof(ArchiveEditorViewInterface_DisplayEditorSaving, path) == 0x000000, "Member 'ArchiveEditorViewInterface_DisplayEditorSaving::path' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.SetTextVisibility
// 0x0001 (0x0001 - 0x0000)
struct ArchiveImageViewerViewInterface_SetTextVisibility final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerViewInterface_SetTextVisibility) == 0x000001, "Wrong alignment on ArchiveImageViewerViewInterface_SetTextVisibility");
static_assert(sizeof(ArchiveImageViewerViewInterface_SetTextVisibility) == 0x000001, "Wrong size on ArchiveImageViewerViewInterface_SetTextVisibility");
static_assert(offsetof(ArchiveImageViewerViewInterface_SetTextVisibility, visible) == 0x000000, "Member 'ArchiveImageViewerViewInterface_SetTextVisibility::visible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.SetVoiceOverAutoplay
// 0x0001 (0x0001 - 0x0000)
struct ArchiveImageViewerViewInterface_SetVoiceOverAutoplay final
{
public:
	bool                                          voiceOverAutoplay;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerViewInterface_SetVoiceOverAutoplay) == 0x000001, "Wrong alignment on ArchiveImageViewerViewInterface_SetVoiceOverAutoplay");
static_assert(sizeof(ArchiveImageViewerViewInterface_SetVoiceOverAutoplay) == 0x000001, "Wrong size on ArchiveImageViewerViewInterface_SetVoiceOverAutoplay");
static_assert(offsetof(ArchiveImageViewerViewInterface_SetVoiceOverAutoplay, voiceOverAutoplay) == 0x000000, "Member 'ArchiveImageViewerViewInterface_SetVoiceOverAutoplay::voiceOverAutoplay' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.SetVoiceOverPlaying
// 0x0001 (0x0001 - 0x0000)
struct ArchiveImageViewerViewInterface_SetVoiceOverPlaying final
{
public:
	bool                                          voiceOverPlaying;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerViewInterface_SetVoiceOverPlaying) == 0x000001, "Wrong alignment on ArchiveImageViewerViewInterface_SetVoiceOverPlaying");
static_assert(sizeof(ArchiveImageViewerViewInterface_SetVoiceOverPlaying) == 0x000001, "Wrong size on ArchiveImageViewerViewInterface_SetVoiceOverPlaying");
static_assert(offsetof(ArchiveImageViewerViewInterface_SetVoiceOverPlaying, voiceOverPlaying) == 0x000000, "Member 'ArchiveImageViewerViewInterface_SetVoiceOverPlaying::voiceOverPlaying' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.UpdateContent
// 0x0070 (0x0070 - 0x0000)
struct ArchiveImageViewerViewInterface_UpdateContent final
{
public:
	struct FArchivesVignetteEntryViewData         data;                                              // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerViewInterface_UpdateContent) == 0x000008, "Wrong alignment on ArchiveImageViewerViewInterface_UpdateContent");
static_assert(sizeof(ArchiveImageViewerViewInterface_UpdateContent) == 0x000070, "Wrong size on ArchiveImageViewerViewInterface_UpdateContent");
static_assert(offsetof(ArchiveImageViewerViewInterface_UpdateContent, data) == 0x000000, "Member 'ArchiveImageViewerViewInterface_UpdateContent::data' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.OnImageViewerVoiceOverAutoplay
// 0x0001 (0x0001 - 0x0000)
struct ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay final
{
public:
	bool                                          autoplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay) == 0x000001, "Wrong alignment on ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay");
static_assert(sizeof(ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay) == 0x000001, "Wrong size on ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay");
static_assert(offsetof(ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay, autoplay) == 0x000000, "Member 'ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay::autoplay' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetCinematicButtonsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveJournalViewInterface_SetCinematicButtonsEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_SetCinematicButtonsEnabled) == 0x000001, "Wrong alignment on ArchiveJournalViewInterface_SetCinematicButtonsEnabled");
static_assert(sizeof(ArchiveJournalViewInterface_SetCinematicButtonsEnabled) == 0x000001, "Wrong size on ArchiveJournalViewInterface_SetCinematicButtonsEnabled");
static_assert(offsetof(ArchiveJournalViewInterface_SetCinematicButtonsEnabled, enabled) == 0x000000, "Member 'ArchiveJournalViewInterface_SetCinematicButtonsEnabled::enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetEntryData
// 0x0070 (0x0070 - 0x0000)
struct ArchiveJournalViewInterface_SetEntryData final
{
public:
	struct FArchivesVignetteEntryViewData         entryViewData;                                     // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_SetEntryData) == 0x000008, "Wrong alignment on ArchiveJournalViewInterface_SetEntryData");
static_assert(sizeof(ArchiveJournalViewInterface_SetEntryData) == 0x000070, "Wrong size on ArchiveJournalViewInterface_SetEntryData");
static_assert(offsetof(ArchiveJournalViewInterface_SetEntryData, entryViewData) == 0x000000, "Member 'ArchiveJournalViewInterface_SetEntryData::entryViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVignetteData
// 0x0060 (0x0060 - 0x0000)
struct ArchiveJournalViewInterface_SetVignetteData final
{
public:
	struct FArchivesVignetteViewData              vignetteViewData;                                  // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_SetVignetteData) == 0x000008, "Wrong alignment on ArchiveJournalViewInterface_SetVignetteData");
static_assert(sizeof(ArchiveJournalViewInterface_SetVignetteData) == 0x000060, "Wrong size on ArchiveJournalViewInterface_SetVignetteData");
static_assert(offsetof(ArchiveJournalViewInterface_SetVignetteData, vignetteViewData) == 0x000000, "Member 'ArchiveJournalViewInterface_SetVignetteData::vignetteViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVignetteInputsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveJournalViewInterface_SetVignetteInputsEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_SetVignetteInputsEnabled) == 0x000001, "Wrong alignment on ArchiveJournalViewInterface_SetVignetteInputsEnabled");
static_assert(sizeof(ArchiveJournalViewInterface_SetVignetteInputsEnabled) == 0x000001, "Wrong size on ArchiveJournalViewInterface_SetVignetteInputsEnabled");
static_assert(offsetof(ArchiveJournalViewInterface_SetVignetteInputsEnabled, enabled) == 0x000000, "Member 'ArchiveJournalViewInterface_SetVignetteInputsEnabled::enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVignetteList
// 0x0010 (0x0010 - 0x0000)
struct ArchiveJournalViewInterface_SetVignetteList final
{
public:
	TArray<struct FArchivesVignetteViewData>      vignetteDataList;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_SetVignetteList) == 0x000008, "Wrong alignment on ArchiveJournalViewInterface_SetVignetteList");
static_assert(sizeof(ArchiveJournalViewInterface_SetVignetteList) == 0x000010, "Wrong size on ArchiveJournalViewInterface_SetVignetteList");
static_assert(offsetof(ArchiveJournalViewInterface_SetVignetteList, vignetteDataList) == 0x000000, "Member 'ArchiveJournalViewInterface_SetVignetteList::vignetteDataList' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVoiceOverAutoplay
// 0x0001 (0x0001 - 0x0000)
struct ArchiveJournalViewInterface_SetVoiceOverAutoplay final
{
public:
	bool                                          voiceOverAutoplay;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_SetVoiceOverAutoplay) == 0x000001, "Wrong alignment on ArchiveJournalViewInterface_SetVoiceOverAutoplay");
static_assert(sizeof(ArchiveJournalViewInterface_SetVoiceOverAutoplay) == 0x000001, "Wrong size on ArchiveJournalViewInterface_SetVoiceOverAutoplay");
static_assert(offsetof(ArchiveJournalViewInterface_SetVoiceOverAutoplay, voiceOverAutoplay) == 0x000000, "Member 'ArchiveJournalViewInterface_SetVoiceOverAutoplay::voiceOverAutoplay' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVoiceOverPlaying
// 0x0001 (0x0001 - 0x0000)
struct ArchiveJournalViewInterface_SetVoiceOverPlaying final
{
public:
	bool                                          voiceOverPlaying;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_SetVoiceOverPlaying) == 0x000001, "Wrong alignment on ArchiveJournalViewInterface_SetVoiceOverPlaying");
static_assert(sizeof(ArchiveJournalViewInterface_SetVoiceOverPlaying) == 0x000001, "Wrong size on ArchiveJournalViewInterface_SetVoiceOverPlaying");
static_assert(offsetof(ArchiveJournalViewInterface_SetVoiceOverPlaying, voiceOverPlaying) == 0x000000, "Member 'ArchiveJournalViewInterface_SetVoiceOverPlaying::voiceOverPlaying' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.GoToNextLevel
// 0x0004 (0x0004 - 0x0000)
struct ArchiveLevelProgressionViewInterface_GoToNextLevel final
{
public:
	int32                                         levelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_GoToNextLevel) == 0x000004, "Wrong alignment on ArchiveLevelProgressionViewInterface_GoToNextLevel");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_GoToNextLevel) == 0x000004, "Wrong size on ArchiveLevelProgressionViewInterface_GoToNextLevel");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_GoToNextLevel, levelIndex) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_GoToNextLevel::levelIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetActiveLevel
// 0x0008 (0x0008 - 0x0000)
struct ArchiveLevelProgressionViewInterface_SetActiveLevel final
{
public:
	int32                                         levelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          performAction;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_SetActiveLevel) == 0x000004, "Wrong alignment on ArchiveLevelProgressionViewInterface_SetActiveLevel");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_SetActiveLevel) == 0x000008, "Wrong size on ArchiveLevelProgressionViewInterface_SetActiveLevel");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetActiveLevel, levelIndex) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_SetActiveLevel::levelIndex' has a wrong offset!");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetActiveLevel, performAction) == 0x000004, "Member 'ArchiveLevelProgressionViewInterface_SetActiveLevel::performAction' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetLevelSelectorEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled) == 0x000001, "Wrong alignment on ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled) == 0x000001, "Wrong size on ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled, enabled) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled::enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetLevelSelectorVisibility
// 0x0001 (0x0001 - 0x0000)
struct ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility) == 0x000001, "Wrong alignment on ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility) == 0x000001, "Wrong size on ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility, isVisible) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility::isVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetRewardsContainerVisibility
// 0x0001 (0x0001 - 0x0000)
struct ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility) == 0x000001, "Wrong alignment on ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility) == 0x000001, "Wrong size on ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility, isVisible) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility::isVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetTomeLevelsData
// 0x0018 (0x0018 - 0x0000)
struct ArchiveLevelProgressionViewInterface_SetTomeLevelsData final
{
public:
	TArray<class UArchiveStoryLevelViewData*>     levelsData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         selectedLevel;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_SetTomeLevelsData) == 0x000008, "Wrong alignment on ArchiveLevelProgressionViewInterface_SetTomeLevelsData");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_SetTomeLevelsData) == 0x000018, "Wrong size on ArchiveLevelProgressionViewInterface_SetTomeLevelsData");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetTomeLevelsData, levelsData) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_SetTomeLevelsData::levelsData' has a wrong offset!");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetTomeLevelsData, selectedLevel) == 0x000010, "Member 'ArchiveLevelProgressionViewInterface_SetTomeLevelsData::selectedLevel' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetTomeRewardsData
// 0x0018 (0x0018 - 0x0000)
struct ArchiveLevelProgressionViewInterface_SetTomeRewardsData final
{
public:
	TArray<struct FRewardWrapperViewData>         rewardsData;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          areLocked;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_SetTomeRewardsData) == 0x000008, "Wrong alignment on ArchiveLevelProgressionViewInterface_SetTomeRewardsData");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_SetTomeRewardsData) == 0x000018, "Wrong size on ArchiveLevelProgressionViewInterface_SetTomeRewardsData");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetTomeRewardsData, rewardsData) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_SetTomeRewardsData::rewardsData' has a wrong offset!");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetTomeRewardsData, areLocked) == 0x000010, "Member 'ArchiveLevelProgressionViewInterface_SetTomeRewardsData::areLocked' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.UpdateLevelStatus
// 0x0008 (0x0008 - 0x0000)
struct ArchiveLevelProgressionViewInterface_UpdateLevelStatus final
{
public:
	int32                                         level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArchivesStoryLevelStatus                     status;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_UpdateLevelStatus) == 0x000004, "Wrong alignment on ArchiveLevelProgressionViewInterface_UpdateLevelStatus");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_UpdateLevelStatus) == 0x000008, "Wrong size on ArchiveLevelProgressionViewInterface_UpdateLevelStatus");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_UpdateLevelStatus, level) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_UpdateLevelStatus::level' has a wrong offset!");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_UpdateLevelStatus, status) == 0x000004, "Member 'ArchiveLevelProgressionViewInterface_UpdateLevelStatus::status' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.ClearChallengeReminderData
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_ClearChallengeReminderData final
{
public:
	EPlayerRole                                   role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_ClearChallengeReminderData) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_ClearChallengeReminderData");
static_assert(sizeof(ArchiveMenuViewInterface_ClearChallengeReminderData) == 0x000001, "Wrong size on ArchiveMenuViewInterface_ClearChallengeReminderData");
static_assert(offsetof(ArchiveMenuViewInterface_ClearChallengeReminderData, role) == 0x000000, "Member 'ArchiveMenuViewInterface_ClearChallengeReminderData::role' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetChallengeReminderData
// 0x00E0 (0x00E0 - 0x0000)
struct ArchiveMenuViewInterface_SetChallengeReminderData final
{
public:
	struct FArchiveChallengeReminderViewData      data;                                              // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EPlayerRole                                   role;                                              // 0x00D0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          needsAnimation;                                    // 0x00D1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              animationOriginalPosition;                         // 0x00D4(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveMenuViewInterface_SetChallengeReminderData) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_SetChallengeReminderData");
static_assert(sizeof(ArchiveMenuViewInterface_SetChallengeReminderData) == 0x0000E0, "Wrong size on ArchiveMenuViewInterface_SetChallengeReminderData");
static_assert(offsetof(ArchiveMenuViewInterface_SetChallengeReminderData, data) == 0x000000, "Member 'ArchiveMenuViewInterface_SetChallengeReminderData::data' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetChallengeReminderData, role) == 0x0000D0, "Member 'ArchiveMenuViewInterface_SetChallengeReminderData::role' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetChallengeReminderData, needsAnimation) == 0x0000D1, "Member 'ArchiveMenuViewInterface_SetChallengeReminderData::needsAnimation' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetChallengeReminderData, animationOriginalPosition) == 0x0000D4, "Member 'ArchiveMenuViewInterface_SetChallengeReminderData::animationOriginalPosition' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetChallengeReminderVisibility
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetChallengeReminderVisibility final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetChallengeReminderVisibility) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetChallengeReminderVisibility");
static_assert(sizeof(ArchiveMenuViewInterface_SetChallengeReminderVisibility) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetChallengeReminderVisibility");
static_assert(offsetof(ArchiveMenuViewInterface_SetChallengeReminderVisibility, isVisible) == 0x000000, "Member 'ArchiveMenuViewInterface_SetChallengeReminderVisibility::isVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetControllerElementsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetControllerElementsEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetControllerElementsEnabled) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetControllerElementsEnabled");
static_assert(sizeof(ArchiveMenuViewInterface_SetControllerElementsEnabled) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetControllerElementsEnabled");
static_assert(offsetof(ArchiveMenuViewInterface_SetControllerElementsEnabled, enabled) == 0x000000, "Member 'ArchiveMenuViewInterface_SetControllerElementsEnabled::enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetEventLabel
// 0x0010 (0x0010 - 0x0000)
struct ArchiveMenuViewInterface_SetEventLabel final
{
public:
	class FString                                 eventLabel;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetEventLabel) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_SetEventLabel");
static_assert(sizeof(ArchiveMenuViewInterface_SetEventLabel) == 0x000010, "Wrong size on ArchiveMenuViewInterface_SetEventLabel");
static_assert(offsetof(ArchiveMenuViewInterface_SetEventLabel, eventLabel) == 0x000000, "Member 'ArchiveMenuViewInterface_SetEventLabel::eventLabel' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetInfoButtonEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetInfoButtonEnabled final
{
public:
	bool                                          isEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetInfoButtonEnabled) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetInfoButtonEnabled");
static_assert(sizeof(ArchiveMenuViewInterface_SetInfoButtonEnabled) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetInfoButtonEnabled");
static_assert(offsetof(ArchiveMenuViewInterface_SetInfoButtonEnabled, isEnabled) == 0x000000, "Member 'ArchiveMenuViewInterface_SetInfoButtonEnabled::isEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetInfoButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetInfoButtonVisible final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetInfoButtonVisible) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetInfoButtonVisible");
static_assert(sizeof(ArchiveMenuViewInterface_SetInfoButtonVisible) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetInfoButtonVisible");
static_assert(offsetof(ArchiveMenuViewInterface_SetInfoButtonVisible, isVisible) == 0x000000, "Member 'ArchiveMenuViewInterface_SetInfoButtonVisible::isVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetMenuState
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetMenuState final
{
public:
	EArchiveMenuState                             menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetMenuState) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetMenuState");
static_assert(sizeof(ArchiveMenuViewInterface_SetMenuState) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetMenuState");
static_assert(offsetof(ArchiveMenuViewInterface_SetMenuState, menuState) == 0x000000, "Member 'ArchiveMenuViewInterface_SetMenuState::menuState' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetQuestNodeHoverEffect
// 0x0002 (0x0002 - 0x0000)
struct ArchiveMenuViewInterface_SetQuestNodeHoverEffect final
{
public:
	EPlayerRole                                   role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isHovered;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetQuestNodeHoverEffect) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetQuestNodeHoverEffect");
static_assert(sizeof(ArchiveMenuViewInterface_SetQuestNodeHoverEffect) == 0x000002, "Wrong size on ArchiveMenuViewInterface_SetQuestNodeHoverEffect");
static_assert(offsetof(ArchiveMenuViewInterface_SetQuestNodeHoverEffect, role) == 0x000000, "Member 'ArchiveMenuViewInterface_SetQuestNodeHoverEffect::role' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetQuestNodeHoverEffect, isHovered) == 0x000001, "Member 'ArchiveMenuViewInterface_SetQuestNodeHoverEffect::isHovered' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetRemainingTime
// 0x0018 (0x0018 - 0x0000)
struct ArchiveMenuViewInterface_SetRemainingTime final
{
public:
	class FString                                 remainingTime;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isMoreThanWarningThreshold;                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArchiveMenuState                             menuState;                                         // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveMenuViewInterface_SetRemainingTime) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_SetRemainingTime");
static_assert(sizeof(ArchiveMenuViewInterface_SetRemainingTime) == 0x000018, "Wrong size on ArchiveMenuViewInterface_SetRemainingTime");
static_assert(offsetof(ArchiveMenuViewInterface_SetRemainingTime, remainingTime) == 0x000000, "Member 'ArchiveMenuViewInterface_SetRemainingTime::remainingTime' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetRemainingTime, isMoreThanWarningThreshold) == 0x000010, "Member 'ArchiveMenuViewInterface_SetRemainingTime::isMoreThanWarningThreshold' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetRemainingTime, menuState) == 0x000011, "Member 'ArchiveMenuViewInterface_SetRemainingTime::menuState' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetRemainingTimeVisible
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetRemainingTimeVisible final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetRemainingTimeVisible) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetRemainingTimeVisible");
static_assert(sizeof(ArchiveMenuViewInterface_SetRemainingTimeVisible) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetRemainingTimeVisible");
static_assert(offsetof(ArchiveMenuViewInterface_SetRemainingTimeVisible, isVisible) == 0x000000, "Member 'ArchiveMenuViewInterface_SetRemainingTimeVisible::isVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetReminderSlotsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetReminderSlotsEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetReminderSlotsEnabled) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetReminderSlotsEnabled");
static_assert(sizeof(ArchiveMenuViewInterface_SetReminderSlotsEnabled) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetReminderSlotsEnabled");
static_assert(offsetof(ArchiveMenuViewInterface_SetReminderSlotsEnabled, enabled) == 0x000000, "Member 'ArchiveMenuViewInterface_SetReminderSlotsEnabled::enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetSubtitle
// 0x0018 (0x0018 - 0x0000)
struct ArchiveMenuViewInterface_SetSubtitle final
{
public:
	class FText                                   subtitle;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetSubtitle) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_SetSubtitle");
static_assert(sizeof(ArchiveMenuViewInterface_SetSubtitle) == 0x000018, "Wrong size on ArchiveMenuViewInterface_SetSubtitle");
static_assert(offsetof(ArchiveMenuViewInterface_SetSubtitle, subtitle) == 0x000000, "Member 'ArchiveMenuViewInterface_SetSubtitle::subtitle' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetSubtitleVisible
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetSubtitleVisible final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetSubtitleVisible) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetSubtitleVisible");
static_assert(sizeof(ArchiveMenuViewInterface_SetSubtitleVisible) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetSubtitleVisible");
static_assert(offsetof(ArchiveMenuViewInterface_SetSubtitleVisible, isVisible) == 0x000000, "Member 'ArchiveMenuViewInterface_SetSubtitleVisible::isVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabEnabled
// 0x0008 (0x0008 - 0x0000)
struct ArchiveMenuViewInterface_SetTabEnabled final
{
public:
	int32                                         key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          enabled;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveMenuViewInterface_SetTabEnabled) == 0x000004, "Wrong alignment on ArchiveMenuViewInterface_SetTabEnabled");
static_assert(sizeof(ArchiveMenuViewInterface_SetTabEnabled) == 0x000008, "Wrong size on ArchiveMenuViewInterface_SetTabEnabled");
static_assert(offsetof(ArchiveMenuViewInterface_SetTabEnabled, key) == 0x000000, "Member 'ArchiveMenuViewInterface_SetTabEnabled::key' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetTabEnabled, enabled) == 0x000004, "Member 'ArchiveMenuViewInterface_SetTabEnabled::enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabsData
// 0x0018 (0x0018 - 0x0000)
struct ArchiveMenuViewInterface_SetTabsData final
{
public:
	TArray<struct FTabWidgetData>                 tabsData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         selectedKey;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveMenuViewInterface_SetTabsData) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_SetTabsData");
static_assert(sizeof(ArchiveMenuViewInterface_SetTabsData) == 0x000018, "Wrong size on ArchiveMenuViewInterface_SetTabsData");
static_assert(offsetof(ArchiveMenuViewInterface_SetTabsData, tabsData) == 0x000000, "Member 'ArchiveMenuViewInterface_SetTabsData::tabsData' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetTabsData, selectedKey) == 0x000010, "Member 'ArchiveMenuViewInterface_SetTabsData::selectedKey' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabSelected
// 0x0004 (0x0004 - 0x0000)
struct ArchiveMenuViewInterface_SetTabSelected final
{
public:
	int32                                         key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetTabSelected) == 0x000004, "Wrong alignment on ArchiveMenuViewInterface_SetTabSelected");
static_assert(sizeof(ArchiveMenuViewInterface_SetTabSelected) == 0x000004, "Wrong size on ArchiveMenuViewInterface_SetTabSelected");
static_assert(offsetof(ArchiveMenuViewInterface_SetTabSelected, key) == 0x000000, "Member 'ArchiveMenuViewInterface_SetTabSelected::key' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabsInputsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetTabsInputsEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetTabsInputsEnabled) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetTabsInputsEnabled");
static_assert(sizeof(ArchiveMenuViewInterface_SetTabsInputsEnabled) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetTabsInputsEnabled");
static_assert(offsetof(ArchiveMenuViewInterface_SetTabsInputsEnabled, enabled) == 0x000000, "Member 'ArchiveMenuViewInterface_SetTabsInputsEnabled::enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct ArchiveMenuViewInterface_SetTitle final
{
public:
	class FText                                   title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetTitle) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_SetTitle");
static_assert(sizeof(ArchiveMenuViewInterface_SetTitle) == 0x000018, "Wrong size on ArchiveMenuViewInterface_SetTitle");
static_assert(offsetof(ArchiveMenuViewInterface_SetTitle, title) == 0x000000, "Member 'ArchiveMenuViewInterface_SetTitle::title' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.ShowSlotSelector
// 0x00B8 (0x00B8 - 0x0000)
struct ArchiveMenuViewInterface_ShowSlotSelector final
{
public:
	struct FArchiveNodeViewData                   data;                                              // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_ShowSlotSelector) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_ShowSlotSelector");
static_assert(sizeof(ArchiveMenuViewInterface_ShowSlotSelector) == 0x0000B8, "Wrong size on ArchiveMenuViewInterface_ShowSlotSelector");
static_assert(offsetof(ArchiveMenuViewInterface_ShowSlotSelector, data) == 0x000000, "Member 'ArchiveMenuViewInterface_ShowSlotSelector::data' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.UpdateBackgroundSkin
// 0x0040 (0x0040 - 0x0000)
struct ArchiveMenuViewInterface_UpdateBackgroundSkin final
{
public:
	int32                                         key;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArchiveTomeSkinData                   data;                                              // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_UpdateBackgroundSkin) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_UpdateBackgroundSkin");
static_assert(sizeof(ArchiveMenuViewInterface_UpdateBackgroundSkin) == 0x000040, "Wrong size on ArchiveMenuViewInterface_UpdateBackgroundSkin");
static_assert(offsetof(ArchiveMenuViewInterface_UpdateBackgroundSkin, key) == 0x000000, "Member 'ArchiveMenuViewInterface_UpdateBackgroundSkin::key' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_UpdateBackgroundSkin, data) == 0x000008, "Member 'ArchiveMenuViewInterface_UpdateBackgroundSkin::data' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.GetArchiveCompendiumInterface
// 0x0010 (0x0010 - 0x0000)
struct ArchiveMenuViewInterface_GetArchiveCompendiumInterface final
{
public:
	TScriptInterface<class IArchiveCompendiumViewInterface> ReturnValue;                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_GetArchiveCompendiumInterface) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_GetArchiveCompendiumInterface");
static_assert(sizeof(ArchiveMenuViewInterface_GetArchiveCompendiumInterface) == 0x000010, "Wrong size on ArchiveMenuViewInterface_GetArchiveCompendiumInterface");
static_assert(offsetof(ArchiveMenuViewInterface_GetArchiveCompendiumInterface, ReturnValue) == 0x000000, "Member 'ArchiveMenuViewInterface_GetArchiveCompendiumInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.GetArchiveRiftInterface
// 0x0010 (0x0010 - 0x0000)
struct ArchiveMenuViewInterface_GetArchiveRiftInterface final
{
public:
	TScriptInterface<class IArchiveRiftViewInterface> ReturnValue;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_GetArchiveRiftInterface) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_GetArchiveRiftInterface");
static_assert(sizeof(ArchiveMenuViewInterface_GetArchiveRiftInterface) == 0x000010, "Wrong size on ArchiveMenuViewInterface_GetArchiveRiftInterface");
static_assert(offsetof(ArchiveMenuViewInterface_GetArchiveRiftInterface, ReturnValue) == 0x000000, "Member 'ArchiveMenuViewInterface_GetArchiveRiftInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.GetArchiveTomeInterface
// 0x0010 (0x0010 - 0x0000)
struct ArchiveMenuViewInterface_GetArchiveTomeInterface final
{
public:
	TScriptInterface<class IArchiveTomeViewInterface> ReturnValue;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_GetArchiveTomeInterface) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_GetArchiveTomeInterface");
static_assert(sizeof(ArchiveMenuViewInterface_GetArchiveTomeInterface) == 0x000010, "Wrong size on ArchiveMenuViewInterface_GetArchiveTomeInterface");
static_assert(offsetof(ArchiveMenuViewInterface_GetArchiveTomeInterface, ReturnValue) == 0x000000, "Member 'ArchiveMenuViewInterface_GetArchiveTomeInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveQuestMapViewInterface.SetLoadingSpinner
// 0x0001 (0x0001 - 0x0000)
struct ArchiveQuestMapViewInterface_SetLoadingSpinner final
{
public:
	bool                                          isLoading;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveQuestMapViewInterface_SetLoadingSpinner) == 0x000001, "Wrong alignment on ArchiveQuestMapViewInterface_SetLoadingSpinner");
static_assert(sizeof(ArchiveQuestMapViewInterface_SetLoadingSpinner) == 0x000001, "Wrong size on ArchiveQuestMapViewInterface_SetLoadingSpinner");
static_assert(offsetof(ArchiveQuestMapViewInterface_SetLoadingSpinner, isLoading) == 0x000000, "Member 'ArchiveQuestMapViewInterface_SetLoadingSpinner::isLoading' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveQuestMapViewInterface.SetQuestMapData
// 0x0028 (0x0028 - 0x0000)
struct ArchiveQuestMapViewInterface_SetQuestMapData final
{
public:
	TArray<struct FArchiveNodeGraphViewData>      nodeDataList;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FArchiveMapPathViewData>        pathDataList;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          needsCascadeAppear;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveQuestMapViewInterface_SetQuestMapData) == 0x000008, "Wrong alignment on ArchiveQuestMapViewInterface_SetQuestMapData");
static_assert(sizeof(ArchiveQuestMapViewInterface_SetQuestMapData) == 0x000028, "Wrong size on ArchiveQuestMapViewInterface_SetQuestMapData");
static_assert(offsetof(ArchiveQuestMapViewInterface_SetQuestMapData, nodeDataList) == 0x000000, "Member 'ArchiveQuestMapViewInterface_SetQuestMapData::nodeDataList' has a wrong offset!");
static_assert(offsetof(ArchiveQuestMapViewInterface_SetQuestMapData, pathDataList) == 0x000010, "Member 'ArchiveQuestMapViewInterface_SetQuestMapData::pathDataList' has a wrong offset!");
static_assert(offsetof(ArchiveQuestMapViewInterface_SetQuestMapData, needsCascadeAppear) == 0x000020, "Member 'ArchiveQuestMapViewInterface_SetQuestMapData::needsCascadeAppear' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveQuestMapViewInterface.UpdateQuestMapData
// 0x0020 (0x0020 - 0x0000)
struct ArchiveQuestMapViewInterface_UpdateQuestMapData final
{
public:
	TArray<struct FArchiveNodeGraphViewData>      nodeDataList;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FArchiveMapPathViewData>        pathDataList;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveQuestMapViewInterface_UpdateQuestMapData) == 0x000008, "Wrong alignment on ArchiveQuestMapViewInterface_UpdateQuestMapData");
static_assert(sizeof(ArchiveQuestMapViewInterface_UpdateQuestMapData) == 0x000020, "Wrong size on ArchiveQuestMapViewInterface_UpdateQuestMapData");
static_assert(offsetof(ArchiveQuestMapViewInterface_UpdateQuestMapData, nodeDataList) == 0x000000, "Member 'ArchiveQuestMapViewInterface_UpdateQuestMapData::nodeDataList' has a wrong offset!");
static_assert(offsetof(ArchiveQuestMapViewInterface_UpdateQuestMapData, pathDataList) == 0x000010, "Member 'ArchiveQuestMapViewInterface_UpdateQuestMapData::pathDataList' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.PlayUnlockingAnimation
// 0x000C (0x000C - 0x0000)
struct ArchiveRiftViewInterface_PlayUnlockingAnimation final
{
public:
	struct FArchivesRiftUnlockSequenceData        data;                                              // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveRiftViewInterface_PlayUnlockingAnimation) == 0x000004, "Wrong alignment on ArchiveRiftViewInterface_PlayUnlockingAnimation");
static_assert(sizeof(ArchiveRiftViewInterface_PlayUnlockingAnimation) == 0x00000C, "Wrong size on ArchiveRiftViewInterface_PlayUnlockingAnimation");
static_assert(offsetof(ArchiveRiftViewInterface_PlayUnlockingAnimation, data) == 0x000000, "Member 'ArchiveRiftViewInterface_PlayUnlockingAnimation::data' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetData
// 0x0020 (0x0020 - 0x0000)
struct ArchiveRiftViewInterface_SetData final
{
public:
	struct FArchivesRiftGenericViewData           data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveRiftViewInterface_SetData) == 0x000008, "Wrong alignment on ArchiveRiftViewInterface_SetData");
static_assert(sizeof(ArchiveRiftViewInterface_SetData) == 0x000020, "Wrong size on ArchiveRiftViewInterface_SetData");
static_assert(offsetof(ArchiveRiftViewInterface_SetData, data) == 0x000000, "Member 'ArchiveRiftViewInterface_SetData::data' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetLoadingSpinner
// 0x0001 (0x0001 - 0x0000)
struct ArchiveRiftViewInterface_SetLoadingSpinner final
{
public:
	bool                                          isLoading;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveRiftViewInterface_SetLoadingSpinner) == 0x000001, "Wrong alignment on ArchiveRiftViewInterface_SetLoadingSpinner");
static_assert(sizeof(ArchiveRiftViewInterface_SetLoadingSpinner) == 0x000001, "Wrong size on ArchiveRiftViewInterface_SetLoadingSpinner");
static_assert(offsetof(ArchiveRiftViewInterface_SetLoadingSpinner, isLoading) == 0x000000, "Member 'ArchiveRiftViewInterface_SetLoadingSpinner::isLoading' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetMatchmakingSoftlockState
// 0x0001 (0x0001 - 0x0000)
struct ArchiveRiftViewInterface_SetMatchmakingSoftlockState final
{
public:
	bool                                          isInMatchmakingSoftlock;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveRiftViewInterface_SetMatchmakingSoftlockState) == 0x000001, "Wrong alignment on ArchiveRiftViewInterface_SetMatchmakingSoftlockState");
static_assert(sizeof(ArchiveRiftViewInterface_SetMatchmakingSoftlockState) == 0x000001, "Wrong size on ArchiveRiftViewInterface_SetMatchmakingSoftlockState");
static_assert(offsetof(ArchiveRiftViewInterface_SetMatchmakingSoftlockState, isInMatchmakingSoftlock) == 0x000000, "Member 'ArchiveRiftViewInterface_SetMatchmakingSoftlockState::isInMatchmakingSoftlock' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetRewardTiersData
// 0x0010 (0x0010 - 0x0000)
struct ArchiveRiftViewInterface_SetRewardTiersData final
{
public:
	TArray<struct FArchiveRiftTierRewardsViewData> riftTiersData;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveRiftViewInterface_SetRewardTiersData) == 0x000008, "Wrong alignment on ArchiveRiftViewInterface_SetRewardTiersData");
static_assert(sizeof(ArchiveRiftViewInterface_SetRewardTiersData) == 0x000010, "Wrong size on ArchiveRiftViewInterface_SetRewardTiersData");
static_assert(offsetof(ArchiveRiftViewInterface_SetRewardTiersData, riftTiersData) == 0x000000, "Member 'ArchiveRiftViewInterface_SetRewardTiersData::riftTiersData' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetRiftFragmentTooltipViewData
// 0x00C0 (0x00C0 - 0x0000)
struct ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData final
{
public:
	struct FCurrencyProgressionTooltipViewData    RiftFragmentTooltipViewData;                       // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData) == 0x000008, "Wrong alignment on ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData");
static_assert(sizeof(ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData) == 0x0000C0, "Wrong size on ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData");
static_assert(offsetof(ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData, RiftFragmentTooltipViewData) == 0x000000, "Member 'ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData::RiftFragmentTooltipViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetMenuState
// 0x0001 (0x0001 - 0x0000)
struct ArchiveTomeViewInterface_SetMenuState final
{
public:
	EArchiveTomeMenuState                         menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_SetMenuState) == 0x000001, "Wrong alignment on ArchiveTomeViewInterface_SetMenuState");
static_assert(sizeof(ArchiveTomeViewInterface_SetMenuState) == 0x000001, "Wrong size on ArchiveTomeViewInterface_SetMenuState");
static_assert(offsetof(ArchiveTomeViewInterface_SetMenuState, menuState) == 0x000000, "Member 'ArchiveTomeViewInterface_SetMenuState::menuState' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetNotificationVisibility
// 0x0008 (0x0008 - 0x0000)
struct ArchiveTomeViewInterface_SetNotificationVisibility final
{
public:
	int32                                         key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hasNotification;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveTomeViewInterface_SetNotificationVisibility) == 0x000004, "Wrong alignment on ArchiveTomeViewInterface_SetNotificationVisibility");
static_assert(sizeof(ArchiveTomeViewInterface_SetNotificationVisibility) == 0x000008, "Wrong size on ArchiveTomeViewInterface_SetNotificationVisibility");
static_assert(offsetof(ArchiveTomeViewInterface_SetNotificationVisibility, key) == 0x000000, "Member 'ArchiveTomeViewInterface_SetNotificationVisibility::key' has a wrong offset!");
static_assert(offsetof(ArchiveTomeViewInterface_SetNotificationVisibility, hasNotification) == 0x000004, "Member 'ArchiveTomeViewInterface_SetNotificationVisibility::hasNotification' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetSideNavTabsData
// 0x0018 (0x0018 - 0x0000)
struct ArchiveTomeViewInterface_SetSideNavTabsData final
{
public:
	TArray<struct FTabWidgetData>                 tabsData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         selectedKey;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveTomeViewInterface_SetSideNavTabsData) == 0x000008, "Wrong alignment on ArchiveTomeViewInterface_SetSideNavTabsData");
static_assert(sizeof(ArchiveTomeViewInterface_SetSideNavTabsData) == 0x000018, "Wrong size on ArchiveTomeViewInterface_SetSideNavTabsData");
static_assert(offsetof(ArchiveTomeViewInterface_SetSideNavTabsData, tabsData) == 0x000000, "Member 'ArchiveTomeViewInterface_SetSideNavTabsData::tabsData' has a wrong offset!");
static_assert(offsetof(ArchiveTomeViewInterface_SetSideNavTabsData, selectedKey) == 0x000010, "Member 'ArchiveTomeViewInterface_SetSideNavTabsData::selectedKey' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetSideNavTabsEnabled
// 0x0008 (0x0008 - 0x0000)
struct ArchiveTomeViewInterface_SetSideNavTabsEnabled final
{
public:
	int32                                         key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isEnabled;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveTomeViewInterface_SetSideNavTabsEnabled) == 0x000004, "Wrong alignment on ArchiveTomeViewInterface_SetSideNavTabsEnabled");
static_assert(sizeof(ArchiveTomeViewInterface_SetSideNavTabsEnabled) == 0x000008, "Wrong size on ArchiveTomeViewInterface_SetSideNavTabsEnabled");
static_assert(offsetof(ArchiveTomeViewInterface_SetSideNavTabsEnabled, key) == 0x000000, "Member 'ArchiveTomeViewInterface_SetSideNavTabsEnabled::key' has a wrong offset!");
static_assert(offsetof(ArchiveTomeViewInterface_SetSideNavTabsEnabled, isEnabled) == 0x000004, "Member 'ArchiveTomeViewInterface_SetSideNavTabsEnabled::isEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetSideNavTabsVisibility
// 0x0008 (0x0008 - 0x0000)
struct ArchiveTomeViewInterface_SetSideNavTabsVisibility final
{
public:
	int32                                         key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isVisible;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveTomeViewInterface_SetSideNavTabsVisibility) == 0x000004, "Wrong alignment on ArchiveTomeViewInterface_SetSideNavTabsVisibility");
static_assert(sizeof(ArchiveTomeViewInterface_SetSideNavTabsVisibility) == 0x000008, "Wrong size on ArchiveTomeViewInterface_SetSideNavTabsVisibility");
static_assert(offsetof(ArchiveTomeViewInterface_SetSideNavTabsVisibility, key) == 0x000000, "Member 'ArchiveTomeViewInterface_SetSideNavTabsVisibility::key' has a wrong offset!");
static_assert(offsetof(ArchiveTomeViewInterface_SetSideNavTabsVisibility, isVisible) == 0x000004, "Member 'ArchiveTomeViewInterface_SetSideNavTabsVisibility::isVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.ToggleEditor
// 0x0001 (0x0001 - 0x0000)
struct ArchiveTomeViewInterface_ToggleEditor final
{
public:
	bool                                          isEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_ToggleEditor) == 0x000001, "Wrong alignment on ArchiveTomeViewInterface_ToggleEditor");
static_assert(sizeof(ArchiveTomeViewInterface_ToggleEditor) == 0x000001, "Wrong size on ArchiveTomeViewInterface_ToggleEditor");
static_assert(offsetof(ArchiveTomeViewInterface_ToggleEditor, isEnabled) == 0x000000, "Member 'ArchiveTomeViewInterface_ToggleEditor::isEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.UpdateBackgroundSkin
// 0x0010 (0x0010 - 0x0000)
struct ArchiveTomeViewInterface_UpdateBackgroundSkin final
{
public:
	int32                                         key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     skinMaterail;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_UpdateBackgroundSkin) == 0x000008, "Wrong alignment on ArchiveTomeViewInterface_UpdateBackgroundSkin");
static_assert(sizeof(ArchiveTomeViewInterface_UpdateBackgroundSkin) == 0x000010, "Wrong size on ArchiveTomeViewInterface_UpdateBackgroundSkin");
static_assert(offsetof(ArchiveTomeViewInterface_UpdateBackgroundSkin, key) == 0x000000, "Member 'ArchiveTomeViewInterface_UpdateBackgroundSkin::key' has a wrong offset!");
static_assert(offsetof(ArchiveTomeViewInterface_UpdateBackgroundSkin, skinMaterail) == 0x000008, "Member 'ArchiveTomeViewInterface_UpdateBackgroundSkin::skinMaterail' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveEditorInterface
// 0x0030 (0x0030 - 0x0000)
struct ArchiveTomeViewInterface_GetArchiveEditorInterface final
{
public:
	struct FEditorInterfaces                      ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_GetArchiveEditorInterface) == 0x000008, "Wrong alignment on ArchiveTomeViewInterface_GetArchiveEditorInterface");
static_assert(sizeof(ArchiveTomeViewInterface_GetArchiveEditorInterface) == 0x000030, "Wrong size on ArchiveTomeViewInterface_GetArchiveEditorInterface");
static_assert(offsetof(ArchiveTomeViewInterface_GetArchiveEditorInterface, ReturnValue) == 0x000000, "Member 'ArchiveTomeViewInterface_GetArchiveEditorInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveJournalInterface
// 0x0010 (0x0010 - 0x0000)
struct ArchiveTomeViewInterface_GetArchiveJournalInterface final
{
public:
	TScriptInterface<class IArchiveJournalViewInterface> ReturnValue;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_GetArchiveJournalInterface) == 0x000008, "Wrong alignment on ArchiveTomeViewInterface_GetArchiveJournalInterface");
static_assert(sizeof(ArchiveTomeViewInterface_GetArchiveJournalInterface) == 0x000010, "Wrong size on ArchiveTomeViewInterface_GetArchiveJournalInterface");
static_assert(offsetof(ArchiveTomeViewInterface_GetArchiveJournalInterface, ReturnValue) == 0x000000, "Member 'ArchiveTomeViewInterface_GetArchiveJournalInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveLevelProgressionInterface
// 0x0010 (0x0010 - 0x0000)
struct ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface final
{
public:
	TScriptInterface<class IArchiveLevelProgressionViewInterface> ReturnValue;                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface) == 0x000008, "Wrong alignment on ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface");
static_assert(sizeof(ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface) == 0x000010, "Wrong size on ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface");
static_assert(offsetof(ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface, ReturnValue) == 0x000000, "Member 'ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveQuestMapInterface
// 0x0010 (0x0010 - 0x0000)
struct ArchiveTomeViewInterface_GetArchiveQuestMapInterface final
{
public:
	TScriptInterface<class IArchiveQuestMapViewInterface> ReturnValue;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_GetArchiveQuestMapInterface) == 0x000008, "Wrong alignment on ArchiveTomeViewInterface_GetArchiveQuestMapInterface");
static_assert(sizeof(ArchiveTomeViewInterface_GetArchiveQuestMapInterface) == 0x000010, "Wrong size on ArchiveTomeViewInterface_GetArchiveQuestMapInterface");
static_assert(offsetof(ArchiveTomeViewInterface_GetArchiveQuestMapInterface, ReturnValue) == 0x000000, "Member 'ArchiveTomeViewInterface_GetArchiveQuestMapInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetMenuState
// 0x0001 (0x0001 - 0x0000)
struct ArchiveTomeViewInterface_GetMenuState final
{
public:
	EArchiveTomeMenuState                         ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_GetMenuState) == 0x000001, "Wrong alignment on ArchiveTomeViewInterface_GetMenuState");
static_assert(sizeof(ArchiveTomeViewInterface_GetMenuState) == 0x000001, "Wrong size on ArchiveTomeViewInterface_GetMenuState");
static_assert(offsetof(ArchiveTomeViewInterface_GetMenuState, ReturnValue) == 0x000000, "Member 'ArchiveTomeViewInterface_GetMenuState::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.BasePopupViewInterface.Enter
// 0x0008 (0x0008 - 0x0000)
struct BasePopupViewInterface_Enter final
{
public:
	class UBasePopupViewData*                     data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePopupViewInterface_Enter) == 0x000008, "Wrong alignment on BasePopupViewInterface_Enter");
static_assert(sizeof(BasePopupViewInterface_Enter) == 0x000008, "Wrong size on BasePopupViewInterface_Enter");
static_assert(offsetof(BasePopupViewInterface_Enter, data) == 0x000000, "Member 'BasePopupViewInterface_Enter::data' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.InitWidgetData
// 0x0040 (0x0040 - 0x0000)
struct ChallengeTrackerViewInterface_InitWidgetData final
{
public:
	struct FChallengeTrackerViewData              viewData;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengeTrackerViewInterface_InitWidgetData) == 0x000008, "Wrong alignment on ChallengeTrackerViewInterface_InitWidgetData");
static_assert(sizeof(ChallengeTrackerViewInterface_InitWidgetData) == 0x000040, "Wrong size on ChallengeTrackerViewInterface_InitWidgetData");
static_assert(offsetof(ChallengeTrackerViewInterface_InitWidgetData, viewData) == 0x000000, "Member 'ChallengeTrackerViewInterface_InitWidgetData::viewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.UpdateWidgetProgression
// 0x0028 (0x0028 - 0x0000)
struct ChallengeTrackerViewInterface_UpdateWidgetProgression final
{
public:
	struct FArchiveNodeObjectiveViewData          progressionData;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengeTrackerViewInterface_UpdateWidgetProgression) == 0x000008, "Wrong alignment on ChallengeTrackerViewInterface_UpdateWidgetProgression");
static_assert(sizeof(ChallengeTrackerViewInterface_UpdateWidgetProgression) == 0x000028, "Wrong size on ChallengeTrackerViewInterface_UpdateWidgetProgression");
static_assert(offsetof(ChallengeTrackerViewInterface_UpdateWidgetProgression, progressionData) == 0x000000, "Member 'ChallengeTrackerViewInterface_UpdateWidgetProgression::progressionData' has a wrong offset!");

// Function DBDUIViewInterfaces.CreditsViewInterface.ScrollToName
// 0x0018 (0x0018 - 0x0000)
struct CreditsViewInterface_ScrollToName final
{
public:
	class FString                                 name;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CreditsViewInterface_ScrollToName) == 0x000008, "Wrong alignment on CreditsViewInterface_ScrollToName");
static_assert(sizeof(CreditsViewInterface_ScrollToName) == 0x000018, "Wrong size on CreditsViewInterface_ScrollToName");
static_assert(offsetof(CreditsViewInterface_ScrollToName, name) == 0x000000, "Member 'CreditsViewInterface_ScrollToName::name' has a wrong offset!");
static_assert(offsetof(CreditsViewInterface_ScrollToName, delay) == 0x000010, "Member 'CreditsViewInterface_ScrollToName::delay' has a wrong offset!");

// Function DBDUIViewInterfaces.CreditsViewInterface.SetText
// 0x0018 (0x0018 - 0x0000)
struct CreditsViewInterface_SetText final
{
public:
	class FText                                   text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreditsViewInterface_SetText) == 0x000008, "Wrong alignment on CreditsViewInterface_SetText");
static_assert(sizeof(CreditsViewInterface_SetText) == 0x000018, "Wrong size on CreditsViewInterface_SetText");
static_assert(offsetof(CreditsViewInterface_SetText, text) == 0x000000, "Member 'CreditsViewInterface_SetText::text' has a wrong offset!");

// Function DBDUIViewInterfaces.DailyRitualsPopupViewInterface.SetCanRemoveDailyRitual
// 0x0001 (0x0001 - 0x0000)
struct DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual final
{
public:
	bool                                          canRemoveDailyRitual;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual) == 0x000001, "Wrong alignment on DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual");
static_assert(sizeof(DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual) == 0x000001, "Wrong size on DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual");
static_assert(offsetof(DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual, canRemoveDailyRitual) == 0x000000, "Member 'DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual::canRemoveDailyRitual' has a wrong offset!");

// Function DBDUIViewInterfaces.DailyRitualsPopupViewInterface.SetDailyRitualsData
// 0x0018 (0x0018 - 0x0000)
struct DailyRitualsPopupViewInterface_SetDailyRitualsData final
{
public:
	TArray<struct FDailyRitualViewData>           dailyRitualsData;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          isAfterTrial;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DailyRitualsPopupViewInterface_SetDailyRitualsData) == 0x000008, "Wrong alignment on DailyRitualsPopupViewInterface_SetDailyRitualsData");
static_assert(sizeof(DailyRitualsPopupViewInterface_SetDailyRitualsData) == 0x000018, "Wrong size on DailyRitualsPopupViewInterface_SetDailyRitualsData");
static_assert(offsetof(DailyRitualsPopupViewInterface_SetDailyRitualsData, dailyRitualsData) == 0x000000, "Member 'DailyRitualsPopupViewInterface_SetDailyRitualsData::dailyRitualsData' has a wrong offset!");
static_assert(offsetof(DailyRitualsPopupViewInterface_SetDailyRitualsData, isAfterTrial) == 0x000010, "Member 'DailyRitualsPopupViewInterface_SetDailyRitualsData::isAfterTrial' has a wrong offset!");

// Function DBDUIViewInterfaces.DisplayStandViewInterface.SetDragZone
// 0x0038 (0x0038 - 0x0000)
struct DisplayStandViewInterface_SetDragZone final
{
public:
	struct FDisplayStandViewData                  layoutData;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisplayStandViewInterface_SetDragZone) == 0x000004, "Wrong alignment on DisplayStandViewInterface_SetDragZone");
static_assert(sizeof(DisplayStandViewInterface_SetDragZone) == 0x000038, "Wrong size on DisplayStandViewInterface_SetDragZone");
static_assert(offsetof(DisplayStandViewInterface_SetDragZone, layoutData) == 0x000000, "Member 'DisplayStandViewInterface_SetDragZone::layoutData' has a wrong offset!");

// Function DBDUIViewInterfaces.EndGameCollapseBarViewInterface.SetEndGameScenarioProgressionMode
// 0x0001 (0x0001 - 0x0000)
struct EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode final
{
public:
	bool                                          isSlowMode;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode) == 0x000001, "Wrong alignment on EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode");
static_assert(sizeof(EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode) == 0x000001, "Wrong size on EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode");
static_assert(offsetof(EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode, isSlowMode) == 0x000000, "Member 'EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode::isSlowMode' has a wrong offset!");

// Function DBDUIViewInterfaces.EndGameCollapseBarViewInterface.SetEndGameScenarioProgressionValue
// 0x0004 (0x0004 - 0x0000)
struct EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue final
{
public:
	float                                         amount;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue) == 0x000004, "Wrong alignment on EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue");
static_assert(sizeof(EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue) == 0x000004, "Wrong size on EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue");
static_assert(offsetof(EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue, amount) == 0x000000, "Member 'EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue::amount' has a wrong offset!");

// Function DBDUIViewInterfaces.EquippedItemViewInterface.ClearData
// 0x0001 (0x0001 - 0x0000)
struct EquippedItemViewInterface_ClearData final
{
public:
	bool                                          fullClear;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquippedItemViewInterface_ClearData) == 0x000001, "Wrong alignment on EquippedItemViewInterface_ClearData");
static_assert(sizeof(EquippedItemViewInterface_ClearData) == 0x000001, "Wrong size on EquippedItemViewInterface_ClearData");
static_assert(offsetof(EquippedItemViewInterface_ClearData, fullClear) == 0x000000, "Member 'EquippedItemViewInterface_ClearData::fullClear' has a wrong offset!");

// Function DBDUIViewInterfaces.EquippedItemViewInterface.SetActiveState
// 0x0001 (0x0001 - 0x0000)
struct EquippedItemViewInterface_SetActiveState final
{
public:
	bool                                          isActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquippedItemViewInterface_SetActiveState) == 0x000001, "Wrong alignment on EquippedItemViewInterface_SetActiveState");
static_assert(sizeof(EquippedItemViewInterface_SetActiveState) == 0x000001, "Wrong size on EquippedItemViewInterface_SetActiveState");
static_assert(offsetof(EquippedItemViewInterface_SetActiveState, isActive) == 0x000000, "Member 'EquippedItemViewInterface_SetActiveState::isActive' has a wrong offset!");

// Function DBDUIViewInterfaces.EquippedItemViewInterface.SetData
// 0x0160 (0x0160 - 0x0000)
struct EquippedItemViewInterface_SetData final
{
public:
	struct FItemBundleViewData                    itemBundleData;                                    // 0x0000(0x0160)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquippedItemViewInterface_SetData) == 0x000008, "Wrong alignment on EquippedItemViewInterface_SetData");
static_assert(sizeof(EquippedItemViewInterface_SetData) == 0x000160, "Wrong size on EquippedItemViewInterface_SetData");
static_assert(offsetof(EquippedItemViewInterface_SetData, itemBundleData) == 0x000000, "Member 'EquippedItemViewInterface_SetData::itemBundleData' has a wrong offset!");

// Function DBDUIViewInterfaces.EquippedItemViewInterface.SetFakeItem
// 0x0038 (0x0038 - 0x0000)
struct EquippedItemViewInterface_SetFakeItem final
{
public:
	bool                                          isHoldingFakeItem;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              fakeItemIcon;                                      // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquippedItemViewInterface_SetFakeItem) == 0x000008, "Wrong alignment on EquippedItemViewInterface_SetFakeItem");
static_assert(sizeof(EquippedItemViewInterface_SetFakeItem) == 0x000038, "Wrong size on EquippedItemViewInterface_SetFakeItem");
static_assert(offsetof(EquippedItemViewInterface_SetFakeItem, isHoldingFakeItem) == 0x000000, "Member 'EquippedItemViewInterface_SetFakeItem::isHoldingFakeItem' has a wrong offset!");
static_assert(offsetof(EquippedItemViewInterface_SetFakeItem, fakeItemIcon) == 0x000008, "Member 'EquippedItemViewInterface_SetFakeItem::fakeItemIcon' has a wrong offset!");

// Function DBDUIViewInterfaces.EquippedPowerViewInterface.SetActiveState
// 0x0001 (0x0001 - 0x0000)
struct EquippedPowerViewInterface_SetActiveState final
{
public:
	bool                                          isActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquippedPowerViewInterface_SetActiveState) == 0x000001, "Wrong alignment on EquippedPowerViewInterface_SetActiveState");
static_assert(sizeof(EquippedPowerViewInterface_SetActiveState) == 0x000001, "Wrong size on EquippedPowerViewInterface_SetActiveState");
static_assert(offsetof(EquippedPowerViewInterface_SetActiveState, isActive) == 0x000000, "Member 'EquippedPowerViewInterface_SetActiveState::isActive' has a wrong offset!");

// Function DBDUIViewInterfaces.EquippedPowerViewInterface.SetCarryingMode
// 0x0001 (0x0001 - 0x0000)
struct EquippedPowerViewInterface_SetCarryingMode final
{
public:
	bool                                          isCarrying;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquippedPowerViewInterface_SetCarryingMode) == 0x000001, "Wrong alignment on EquippedPowerViewInterface_SetCarryingMode");
static_assert(sizeof(EquippedPowerViewInterface_SetCarryingMode) == 0x000001, "Wrong size on EquippedPowerViewInterface_SetCarryingMode");
static_assert(offsetof(EquippedPowerViewInterface_SetCarryingMode, isCarrying) == 0x000000, "Member 'EquippedPowerViewInterface_SetCarryingMode::isCarrying' has a wrong offset!");

// Function DBDUIViewInterfaces.EquippedPowerViewInterface.SetData
// 0x0158 (0x0158 - 0x0000)
struct EquippedPowerViewInterface_SetData final
{
public:
	struct FPowerBundleViewData                   powerBundleData;                                   // 0x0000(0x0158)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquippedPowerViewInterface_SetData) == 0x000008, "Wrong alignment on EquippedPowerViewInterface_SetData");
static_assert(sizeof(EquippedPowerViewInterface_SetData) == 0x000158, "Wrong size on EquippedPowerViewInterface_SetData");
static_assert(offsetof(EquippedPowerViewInterface_SetData, powerBundleData) == 0x000000, "Member 'EquippedPowerViewInterface_SetData::powerBundleData' has a wrong offset!");

// Function DBDUIViewInterfaces.ExampleViewInterface.SetExampleProgressRatio
// 0x0004 (0x0004 - 0x0000)
struct ExampleViewInterface_SetExampleProgressRatio final
{
public:
	float                                         ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExampleViewInterface_SetExampleProgressRatio) == 0x000004, "Wrong alignment on ExampleViewInterface_SetExampleProgressRatio");
static_assert(sizeof(ExampleViewInterface_SetExampleProgressRatio) == 0x000004, "Wrong size on ExampleViewInterface_SetExampleProgressRatio");
static_assert(offsetof(ExampleViewInterface_SetExampleProgressRatio, ratio) == 0x000000, "Member 'ExampleViewInterface_SetExampleProgressRatio::ratio' has a wrong offset!");

// Function DBDUIViewInterfaces.ExampleViewInterface.SetExampleText
// 0x0010 (0x0010 - 0x0000)
struct ExampleViewInterface_SetExampleText final
{
public:
	class FString                                 text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExampleViewInterface_SetExampleText) == 0x000008, "Wrong alignment on ExampleViewInterface_SetExampleText");
static_assert(sizeof(ExampleViewInterface_SetExampleText) == 0x000010, "Wrong size on ExampleViewInterface_SetExampleText");
static_assert(offsetof(ExampleViewInterface_SetExampleText, text) == 0x000000, "Member 'ExampleViewInterface_SetExampleText::text' has a wrong offset!");

// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.HideExternalAddon
// 0x000C (0x000C - 0x0000)
struct ExternalEffectsViewInterface_HideExternalAddon final
{
public:
	class FName                                   itemId;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExternalEffectsViewInterface_HideExternalAddon) == 0x000004, "Wrong alignment on ExternalEffectsViewInterface_HideExternalAddon");
static_assert(sizeof(ExternalEffectsViewInterface_HideExternalAddon) == 0x00000C, "Wrong size on ExternalEffectsViewInterface_HideExternalAddon");
static_assert(offsetof(ExternalEffectsViewInterface_HideExternalAddon, itemId) == 0x000000, "Member 'ExternalEffectsViewInterface_HideExternalAddon::itemId' has a wrong offset!");

// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.HideExternalPerk
// 0x000C (0x000C - 0x0000)
struct ExternalEffectsViewInterface_HideExternalPerk final
{
public:
	class FName                                   itemId;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExternalEffectsViewInterface_HideExternalPerk) == 0x000004, "Wrong alignment on ExternalEffectsViewInterface_HideExternalPerk");
static_assert(sizeof(ExternalEffectsViewInterface_HideExternalPerk) == 0x00000C, "Wrong size on ExternalEffectsViewInterface_HideExternalPerk");
static_assert(offsetof(ExternalEffectsViewInterface_HideExternalPerk, itemId) == 0x000000, "Member 'ExternalEffectsViewInterface_HideExternalPerk::itemId' has a wrong offset!");

// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.ShowExternalAddon
// 0x0068 (0x0068 - 0x0000)
struct ExternalEffectsViewInterface_ShowExternalAddon final
{
public:
	struct FAddonViewData                         addonViewData;                                     // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExternalEffectsViewInterface_ShowExternalAddon) == 0x000008, "Wrong alignment on ExternalEffectsViewInterface_ShowExternalAddon");
static_assert(sizeof(ExternalEffectsViewInterface_ShowExternalAddon) == 0x000068, "Wrong size on ExternalEffectsViewInterface_ShowExternalAddon");
static_assert(offsetof(ExternalEffectsViewInterface_ShowExternalAddon, addonViewData) == 0x000000, "Member 'ExternalEffectsViewInterface_ShowExternalAddon::addonViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.ShowExternalPerk
// 0x0070 (0x0070 - 0x0000)
struct ExternalEffectsViewInterface_ShowExternalPerk final
{
public:
	struct FPerkViewData                          perkViewData;                                      // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExternalEffectsViewInterface_ShowExternalPerk) == 0x000008, "Wrong alignment on ExternalEffectsViewInterface_ShowExternalPerk");
static_assert(sizeof(ExternalEffectsViewInterface_ShowExternalPerk) == 0x000070, "Wrong size on ExternalEffectsViewInterface_ShowExternalPerk");
static_assert(offsetof(ExternalEffectsViewInterface_ShowExternalPerk, perkViewData) == 0x000000, "Member 'ExternalEffectsViewInterface_ShowExternalPerk::perkViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.GameManualViewInterface.SetCategoryData
// 0x0060 (0x0060 - 0x0000)
struct GameManualViewInterface_SetCategoryData final
{
public:
	struct FHelpCategoryData                      categoryData;                                      // 0x0000(0x0050)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TArray<struct FHelpTopicData>                 topicsData;                                        // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameManualViewInterface_SetCategoryData) == 0x000008, "Wrong alignment on GameManualViewInterface_SetCategoryData");
static_assert(sizeof(GameManualViewInterface_SetCategoryData) == 0x000060, "Wrong size on GameManualViewInterface_SetCategoryData");
static_assert(offsetof(GameManualViewInterface_SetCategoryData, categoryData) == 0x000000, "Member 'GameManualViewInterface_SetCategoryData::categoryData' has a wrong offset!");
static_assert(offsetof(GameManualViewInterface_SetCategoryData, topicsData) == 0x000050, "Member 'GameManualViewInterface_SetCategoryData::topicsData' has a wrong offset!");

// Function DBDUIViewInterfaces.GameManualViewInterface.SetCurrentManualMenuState
// 0x0001 (0x0001 - 0x0000)
struct GameManualViewInterface_SetCurrentManualMenuState final
{
public:
	EGameManualMenuState                          menuState;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameManualViewInterface_SetCurrentManualMenuState) == 0x000001, "Wrong alignment on GameManualViewInterface_SetCurrentManualMenuState");
static_assert(sizeof(GameManualViewInterface_SetCurrentManualMenuState) == 0x000001, "Wrong size on GameManualViewInterface_SetCurrentManualMenuState");
static_assert(offsetof(GameManualViewInterface_SetCurrentManualMenuState, menuState) == 0x000000, "Member 'GameManualViewInterface_SetCurrentManualMenuState::menuState' has a wrong offset!");

// Function DBDUIViewInterfaces.GameManualViewInterface.GetCurrentManualMenuState
// 0x0001 (0x0001 - 0x0000)
struct GameManualViewInterface_GetCurrentManualMenuState final
{
public:
	EGameManualMenuState                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameManualViewInterface_GetCurrentManualMenuState) == 0x000001, "Wrong alignment on GameManualViewInterface_GetCurrentManualMenuState");
static_assert(sizeof(GameManualViewInterface_GetCurrentManualMenuState) == 0x000001, "Wrong size on GameManualViewInterface_GetCurrentManualMenuState");
static_assert(offsetof(GameManualViewInterface_GetCurrentManualMenuState, ReturnValue) == 0x000000, "Member 'GameManualViewInterface_GetCurrentManualMenuState::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.HookCountViewInterface.SetData
// 0x000C (0x000C - 0x0000)
struct HookCountViewInterface_SetData final
{
public:
	int32                                         currentHookCount;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxHookCount;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         initialMaxHookCount;                               // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookCountViewInterface_SetData) == 0x000004, "Wrong alignment on HookCountViewInterface_SetData");
static_assert(sizeof(HookCountViewInterface_SetData) == 0x00000C, "Wrong size on HookCountViewInterface_SetData");
static_assert(offsetof(HookCountViewInterface_SetData, currentHookCount) == 0x000000, "Member 'HookCountViewInterface_SetData::currentHookCount' has a wrong offset!");
static_assert(offsetof(HookCountViewInterface_SetData, maxHookCount) == 0x000004, "Member 'HookCountViewInterface_SetData::maxHookCount' has a wrong offset!");
static_assert(offsetof(HookCountViewInterface_SetData, initialMaxHookCount) == 0x000008, "Member 'HookCountViewInterface_SetData::initialMaxHookCount' has a wrong offset!");

// Function DBDUIViewInterfaces.HookCountViewInterface.SetHookCountVisibility
// 0x0001 (0x0001 - 0x0000)
struct HookCountViewInterface_SetHookCountVisibility final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookCountViewInterface_SetHookCountVisibility) == 0x000001, "Wrong alignment on HookCountViewInterface_SetHookCountVisibility");
static_assert(sizeof(HookCountViewInterface_SetHookCountVisibility) == 0x000001, "Wrong size on HookCountViewInterface_SetHookCountVisibility");
static_assert(offsetof(HookCountViewInterface_SetHookCountVisibility, visible) == 0x000000, "Member 'HookCountViewInterface_SetHookCountVisibility::visible' has a wrong offset!");

// Function DBDUIViewInterfaces.HudAlertViewInterface.FadeOut
// 0x0004 (0x0004 - 0x0000)
struct HudAlertViewInterface_FadeOut final
{
public:
	float                                         delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudAlertViewInterface_FadeOut) == 0x000004, "Wrong alignment on HudAlertViewInterface_FadeOut");
static_assert(sizeof(HudAlertViewInterface_FadeOut) == 0x000004, "Wrong size on HudAlertViewInterface_FadeOut");
static_assert(offsetof(HudAlertViewInterface_FadeOut, delay) == 0x000000, "Member 'HudAlertViewInterface_FadeOut::delay' has a wrong offset!");

// Function DBDUIViewInterfaces.HudAlertViewInterface.SetScoreEventsVisibility
// 0x0001 (0x0001 - 0x0000)
struct HudAlertViewInterface_SetScoreEventsVisibility final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudAlertViewInterface_SetScoreEventsVisibility) == 0x000001, "Wrong alignment on HudAlertViewInterface_SetScoreEventsVisibility");
static_assert(sizeof(HudAlertViewInterface_SetScoreEventsVisibility) == 0x000001, "Wrong size on HudAlertViewInterface_SetScoreEventsVisibility");
static_assert(offsetof(HudAlertViewInterface_SetScoreEventsVisibility, visible) == 0x000000, "Member 'HudAlertViewInterface_SetScoreEventsVisibility::visible' has a wrong offset!");

// Function DBDUIViewInterfaces.HudAlertViewInterface.ShowScoreAlert
// 0x0020 (0x0020 - 0x0000)
struct HudAlertViewInterface_ShowScoreAlert final
{
public:
	struct FScoreAlertViewData                    data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudAlertViewInterface_ShowScoreAlert) == 0x000008, "Wrong alignment on HudAlertViewInterface_ShowScoreAlert");
static_assert(sizeof(HudAlertViewInterface_ShowScoreAlert) == 0x000020, "Wrong size on HudAlertViewInterface_ShowScoreAlert");
static_assert(offsetof(HudAlertViewInterface_ShowScoreAlert, data) == 0x000000, "Member 'HudAlertViewInterface_ShowScoreAlert::data' has a wrong offset!");

// Function DBDUIViewInterfaces.HudAlertViewInterface.ShowStatusEffectAlert
// 0x01B0 (0x01B0 - 0x0000)
struct HudAlertViewInterface_ShowStatusEffectAlert final
{
public:
	struct FStatusEffectAlertViewData             data;                                              // 0x0000(0x01B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudAlertViewInterface_ShowStatusEffectAlert) == 0x000008, "Wrong alignment on HudAlertViewInterface_ShowStatusEffectAlert");
static_assert(sizeof(HudAlertViewInterface_ShowStatusEffectAlert) == 0x0001B0, "Wrong size on HudAlertViewInterface_ShowStatusEffectAlert");
static_assert(offsetof(HudAlertViewInterface_ShowStatusEffectAlert, data) == 0x000000, "Member 'HudAlertViewInterface_ShowStatusEffectAlert::data' has a wrong offset!");

// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.Init
// 0x0004 (0x0004 - 0x0000)
struct HudDirectionalMiniGameViewInterface_Init final
{
public:
	int32                                         maxItems;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudDirectionalMiniGameViewInterface_Init) == 0x000004, "Wrong alignment on HudDirectionalMiniGameViewInterface_Init");
static_assert(sizeof(HudDirectionalMiniGameViewInterface_Init) == 0x000004, "Wrong size on HudDirectionalMiniGameViewInterface_Init");
static_assert(offsetof(HudDirectionalMiniGameViewInterface_Init, maxItems) == 0x000000, "Member 'HudDirectionalMiniGameViewInterface_Init::maxItems' has a wrong offset!");

// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.Show
// 0x0010 (0x0010 - 0x0000)
struct HudDirectionalMiniGameViewInterface_Show final
{
public:
	TArray<EDirectionalInputKey>                  directions;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudDirectionalMiniGameViewInterface_Show) == 0x000008, "Wrong alignment on HudDirectionalMiniGameViewInterface_Show");
static_assert(sizeof(HudDirectionalMiniGameViewInterface_Show) == 0x000010, "Wrong size on HudDirectionalMiniGameViewInterface_Show");
static_assert(offsetof(HudDirectionalMiniGameViewInterface_Show, directions) == 0x000000, "Member 'HudDirectionalMiniGameViewInterface_Show::directions' has a wrong offset!");

// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.UpdateFinalResult
// 0x0001 (0x0001 - 0x0000)
struct HudDirectionalMiniGameViewInterface_UpdateFinalResult final
{
public:
	EDirectionalMinigameResult                    finalResult;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudDirectionalMiniGameViewInterface_UpdateFinalResult) == 0x000001, "Wrong alignment on HudDirectionalMiniGameViewInterface_UpdateFinalResult");
static_assert(sizeof(HudDirectionalMiniGameViewInterface_UpdateFinalResult) == 0x000001, "Wrong size on HudDirectionalMiniGameViewInterface_UpdateFinalResult");
static_assert(offsetof(HudDirectionalMiniGameViewInterface_UpdateFinalResult, finalResult) == 0x000000, "Member 'HudDirectionalMiniGameViewInterface_UpdateFinalResult::finalResult' has a wrong offset!");

// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.UpdateResult
// 0x0008 (0x0008 - 0x0000)
struct HudDirectionalMiniGameViewInterface_UpdateResult final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSuccessful;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HudDirectionalMiniGameViewInterface_UpdateResult) == 0x000004, "Wrong alignment on HudDirectionalMiniGameViewInterface_UpdateResult");
static_assert(sizeof(HudDirectionalMiniGameViewInterface_UpdateResult) == 0x000008, "Wrong size on HudDirectionalMiniGameViewInterface_UpdateResult");
static_assert(offsetof(HudDirectionalMiniGameViewInterface_UpdateResult, index) == 0x000000, "Member 'HudDirectionalMiniGameViewInterface_UpdateResult::index' has a wrong offset!");
static_assert(offsetof(HudDirectionalMiniGameViewInterface_UpdateResult, isSuccessful) == 0x000004, "Member 'HudDirectionalMiniGameViewInterface_UpdateResult::isSuccessful' has a wrong offset!");

// Function DBDUIViewInterfaces.HudObjectivesViewInterface.EnableEventProgression
// 0x0001 (0x0001 - 0x0000)
struct HudObjectivesViewInterface_EnableEventProgression final
{
public:
	bool                                          isEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudObjectivesViewInterface_EnableEventProgression) == 0x000001, "Wrong alignment on HudObjectivesViewInterface_EnableEventProgression");
static_assert(sizeof(HudObjectivesViewInterface_EnableEventProgression) == 0x000001, "Wrong size on HudObjectivesViewInterface_EnableEventProgression");
static_assert(offsetof(HudObjectivesViewInterface_EnableEventProgression, isEnabled) == 0x000000, "Member 'HudObjectivesViewInterface_EnableEventProgression::isEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.HudObjectivesViewInterface.InitEventProgression
// 0x0010 (0x0010 - 0x0000)
struct HudObjectivesViewInterface_InitEventProgression final
{
public:
	struct FHudEventProgressionViewData           hudEventProgressionViewData;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudObjectivesViewInterface_InitEventProgression) == 0x000004, "Wrong alignment on HudObjectivesViewInterface_InitEventProgression");
static_assert(sizeof(HudObjectivesViewInterface_InitEventProgression) == 0x000010, "Wrong size on HudObjectivesViewInterface_InitEventProgression");
static_assert(offsetof(HudObjectivesViewInterface_InitEventProgression, hudEventProgressionViewData) == 0x000000, "Member 'HudObjectivesViewInterface_InitEventProgression::hudEventProgressionViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.HudObjectivesViewInterface.SetHookCountData
// 0x000C (0x000C - 0x0000)
struct HudObjectivesViewInterface_SetHookCountData final
{
public:
	int32                                         currentHookCount;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxHookCount;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         initialMaxHookCount;                               // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudObjectivesViewInterface_SetHookCountData) == 0x000004, "Wrong alignment on HudObjectivesViewInterface_SetHookCountData");
static_assert(sizeof(HudObjectivesViewInterface_SetHookCountData) == 0x00000C, "Wrong size on HudObjectivesViewInterface_SetHookCountData");
static_assert(offsetof(HudObjectivesViewInterface_SetHookCountData, currentHookCount) == 0x000000, "Member 'HudObjectivesViewInterface_SetHookCountData::currentHookCount' has a wrong offset!");
static_assert(offsetof(HudObjectivesViewInterface_SetHookCountData, maxHookCount) == 0x000004, "Member 'HudObjectivesViewInterface_SetHookCountData::maxHookCount' has a wrong offset!");
static_assert(offsetof(HudObjectivesViewInterface_SetHookCountData, initialMaxHookCount) == 0x000008, "Member 'HudObjectivesViewInterface_SetHookCountData::initialMaxHookCount' has a wrong offset!");

// Function DBDUIViewInterfaces.HudObjectivesViewInterface.SetHookCountVisibility
// 0x0001 (0x0001 - 0x0000)
struct HudObjectivesViewInterface_SetHookCountVisibility final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudObjectivesViewInterface_SetHookCountVisibility) == 0x000001, "Wrong alignment on HudObjectivesViewInterface_SetHookCountVisibility");
static_assert(sizeof(HudObjectivesViewInterface_SetHookCountVisibility) == 0x000001, "Wrong size on HudObjectivesViewInterface_SetHookCountVisibility");
static_assert(offsetof(HudObjectivesViewInterface_SetHookCountVisibility, visible) == 0x000000, "Member 'HudObjectivesViewInterface_SetHookCountVisibility::visible' has a wrong offset!");

// Function DBDUIViewInterfaces.HudObjectivesViewInterface.SetHudObjectiveData
// 0x0008 (0x0008 - 0x0000)
struct HudObjectivesViewInterface_SetHudObjectiveData final
{
public:
	struct FHudObjectivesViewData                 hudObjectiveViewData;                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudObjectivesViewInterface_SetHudObjectiveData) == 0x000004, "Wrong alignment on HudObjectivesViewInterface_SetHudObjectiveData");
static_assert(sizeof(HudObjectivesViewInterface_SetHudObjectiveData) == 0x000008, "Wrong size on HudObjectivesViewInterface_SetHudObjectiveData");
static_assert(offsetof(HudObjectivesViewInterface_SetHudObjectiveData, hudObjectiveViewData) == 0x000000, "Member 'HudObjectivesViewInterface_SetHudObjectiveData::hudObjectiveViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.HudObjectivesViewInterface.UpdateEventBankedProgress
// 0x0010 (0x0010 - 0x0000)
struct HudObjectivesViewInterface_UpdateEventBankedProgress final
{
public:
	struct FHudEventProgressionViewData           hudEventProgressionViewData;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudObjectivesViewInterface_UpdateEventBankedProgress) == 0x000004, "Wrong alignment on HudObjectivesViewInterface_UpdateEventBankedProgress");
static_assert(sizeof(HudObjectivesViewInterface_UpdateEventBankedProgress) == 0x000010, "Wrong size on HudObjectivesViewInterface_UpdateEventBankedProgress");
static_assert(offsetof(HudObjectivesViewInterface_UpdateEventBankedProgress, hudEventProgressionViewData) == 0x000000, "Member 'HudObjectivesViewInterface_UpdateEventBankedProgress::hudEventProgressionViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.HudObjectivesViewInterface.UpdateEventPendingProgress
// 0x0010 (0x0010 - 0x0000)
struct HudObjectivesViewInterface_UpdateEventPendingProgress final
{
public:
	struct FHudEventProgressionViewData           hudEventProgressionViewData;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudObjectivesViewInterface_UpdateEventPendingProgress) == 0x000004, "Wrong alignment on HudObjectivesViewInterface_UpdateEventPendingProgress");
static_assert(sizeof(HudObjectivesViewInterface_UpdateEventPendingProgress) == 0x000010, "Wrong size on HudObjectivesViewInterface_UpdateEventPendingProgress");
static_assert(offsetof(HudObjectivesViewInterface_UpdateEventPendingProgress, hudEventProgressionViewData) == 0x000000, "Member 'HudObjectivesViewInterface_UpdateEventPendingProgress::hudEventProgressionViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.InteractionProgressViewInterface.SetInputProgressPrompt
// 0x0068 (0x0068 - 0x0000)
struct InteractionProgressViewInterface_SetInputProgressPrompt final
{
public:
	struct FInteractionProgressViewData           data;                                              // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionProgressViewInterface_SetInputProgressPrompt) == 0x000008, "Wrong alignment on InteractionProgressViewInterface_SetInputProgressPrompt");
static_assert(sizeof(InteractionProgressViewInterface_SetInputProgressPrompt) == 0x000068, "Wrong size on InteractionProgressViewInterface_SetInputProgressPrompt");
static_assert(offsetof(InteractionProgressViewInterface_SetInputProgressPrompt, data) == 0x000000, "Member 'InteractionProgressViewInterface_SetInputProgressPrompt::data' has a wrong offset!");

// Function DBDUIViewInterfaces.InteractionProgressViewInterface.UpdateInputProgress
// 0x0008 (0x0008 - 0x0000)
struct InteractionProgressViewInterface_UpdateInputProgress final
{
public:
	float                                         progress;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         itemCharge;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionProgressViewInterface_UpdateInputProgress) == 0x000004, "Wrong alignment on InteractionProgressViewInterface_UpdateInputProgress");
static_assert(sizeof(InteractionProgressViewInterface_UpdateInputProgress) == 0x000008, "Wrong size on InteractionProgressViewInterface_UpdateInputProgress");
static_assert(offsetof(InteractionProgressViewInterface_UpdateInputProgress, progress) == 0x000000, "Member 'InteractionProgressViewInterface_UpdateInputProgress::progress' has a wrong offset!");
static_assert(offsetof(InteractionProgressViewInterface_UpdateInputProgress, itemCharge) == 0x000004, "Member 'InteractionProgressViewInterface_UpdateInputProgress::itemCharge' has a wrong offset!");

// Function DBDUIViewInterfaces.InteractionPromptsContainerViewInterface.AddPrompt
// 0x00B0 (0x00B0 - 0x0000)
struct InteractionPromptsContainerViewInterface_AddPrompt final
{
public:
	struct FInteractionPromptViewData             data;                                              // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionPromptsContainerViewInterface_AddPrompt) == 0x000008, "Wrong alignment on InteractionPromptsContainerViewInterface_AddPrompt");
static_assert(sizeof(InteractionPromptsContainerViewInterface_AddPrompt) == 0x0000B0, "Wrong size on InteractionPromptsContainerViewInterface_AddPrompt");
static_assert(offsetof(InteractionPromptsContainerViewInterface_AddPrompt, data) == 0x000000, "Member 'InteractionPromptsContainerViewInterface_AddPrompt::data' has a wrong offset!");

// Function DBDUIViewInterfaces.InteractionPromptsContainerViewInterface.RemovePrompt
// 0x000C (0x000C - 0x0000)
struct InteractionPromptsContainerViewInterface_RemovePrompt final
{
public:
	class FName                                   id;                                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionPromptsContainerViewInterface_RemovePrompt) == 0x000004, "Wrong alignment on InteractionPromptsContainerViewInterface_RemovePrompt");
static_assert(sizeof(InteractionPromptsContainerViewInterface_RemovePrompt) == 0x00000C, "Wrong size on InteractionPromptsContainerViewInterface_RemovePrompt");
static_assert(offsetof(InteractionPromptsContainerViewInterface_RemovePrompt, id) == 0x000000, "Member 'InteractionPromptsContainerViewInterface_RemovePrompt::id' has a wrong offset!");

// Function DBDUIViewInterfaces.ItemBundleViewInterface.SetData
// 0x0160 (0x0160 - 0x0000)
struct ItemBundleViewInterface_SetData final
{
public:
	struct FItemBundleViewData                    itemBundleViewData;                                // 0x0000(0x0160)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBundleViewInterface_SetData) == 0x000008, "Wrong alignment on ItemBundleViewInterface_SetData");
static_assert(sizeof(ItemBundleViewInterface_SetData) == 0x000160, "Wrong size on ItemBundleViewInterface_SetData");
static_assert(offsetof(ItemBundleViewInterface_SetData, itemBundleViewData) == 0x000000, "Member 'ItemBundleViewInterface_SetData::itemBundleViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ItemInteractionViewInterface.SetData
// 0x0160 (0x0160 - 0x0000)
struct ItemInteractionViewInterface_SetData final
{
public:
	struct FItemBundleViewData                    itemBundleData;                                    // 0x0000(0x0160)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInteractionViewInterface_SetData) == 0x000008, "Wrong alignment on ItemInteractionViewInterface_SetData");
static_assert(sizeof(ItemInteractionViewInterface_SetData) == 0x000160, "Wrong size on ItemInteractionViewInterface_SetData");
static_assert(offsetof(ItemInteractionViewInterface_SetData, itemBundleData) == 0x000000, "Member 'ItemInteractionViewInterface_SetData::itemBundleData' has a wrong offset!");

// Function DBDUIViewInterfaces.ItemViewInterface.SetData
// 0x0090 (0x0090 - 0x0000)
struct ItemViewInterface_SetData final
{
public:
	struct FItemViewData                          itemViewData;                                      // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemViewInterface_SetData) == 0x000008, "Wrong alignment on ItemViewInterface_SetData");
static_assert(sizeof(ItemViewInterface_SetData) == 0x000090, "Wrong size on ItemViewInterface_SetData");
static_assert(offsetof(ItemViewInterface_SetData, itemViewData) == 0x000000, "Member 'ItemViewInterface_SetData::itemViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.LeaningArrowsViewInterface.SetData
// 0x0001 (0x0001 - 0x0000)
struct LeaningArrowsViewInterface_SetData final
{
public:
	ELeanState                                    leanState;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaningArrowsViewInterface_SetData) == 0x000001, "Wrong alignment on LeaningArrowsViewInterface_SetData");
static_assert(sizeof(LeaningArrowsViewInterface_SetData) == 0x000001, "Wrong size on LeaningArrowsViewInterface_SetData");
static_assert(offsetof(LeaningArrowsViewInterface_SetData, leanState) == 0x000000, "Member 'LeaningArrowsViewInterface_SetData::leanState' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadoutMenuPopupViewInterface.SetLoadoutMenuInventoryData
// 0x0018 (0x0018 - 0x0000)
struct LoadoutMenuPopupViewInterface_SetLoadoutMenuInventoryData final
{
public:
	TArray<class ULoadoutMenuPopupViewData*>      loadoutMenuSlotButtonData;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ELoadoutSlot                                  slotSelected;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isNextSlot;                                        // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoadoutMenuPopupViewInterface_SetLoadoutMenuInventoryData) == 0x000008, "Wrong alignment on LoadoutMenuPopupViewInterface_SetLoadoutMenuInventoryData");
static_assert(sizeof(LoadoutMenuPopupViewInterface_SetLoadoutMenuInventoryData) == 0x000018, "Wrong size on LoadoutMenuPopupViewInterface_SetLoadoutMenuInventoryData");
static_assert(offsetof(LoadoutMenuPopupViewInterface_SetLoadoutMenuInventoryData, loadoutMenuSlotButtonData) == 0x000000, "Member 'LoadoutMenuPopupViewInterface_SetLoadoutMenuInventoryData::loadoutMenuSlotButtonData' has a wrong offset!");
static_assert(offsetof(LoadoutMenuPopupViewInterface_SetLoadoutMenuInventoryData, slotSelected) == 0x000010, "Member 'LoadoutMenuPopupViewInterface_SetLoadoutMenuInventoryData::slotSelected' has a wrong offset!");
static_assert(offsetof(LoadoutMenuPopupViewInterface_SetLoadoutMenuInventoryData, isNextSlot) == 0x000011, "Member 'LoadoutMenuPopupViewInterface_SetLoadoutMenuInventoryData::isNextSlot' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadoutMenuPopupViewInterface.SetLoadoutMenuSlotData
// 0x0010 (0x0010 - 0x0000)
struct LoadoutMenuPopupViewInterface_SetLoadoutMenuSlotData final
{
public:
	TArray<class ULoadoutMenuPopupViewData*>      loadoutMenuSlotButtonData;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupViewInterface_SetLoadoutMenuSlotData) == 0x000008, "Wrong alignment on LoadoutMenuPopupViewInterface_SetLoadoutMenuSlotData");
static_assert(sizeof(LoadoutMenuPopupViewInterface_SetLoadoutMenuSlotData) == 0x000010, "Wrong size on LoadoutMenuPopupViewInterface_SetLoadoutMenuSlotData");
static_assert(offsetof(LoadoutMenuPopupViewInterface_SetLoadoutMenuSlotData, loadoutMenuSlotButtonData) == 0x000000, "Member 'LoadoutMenuPopupViewInterface_SetLoadoutMenuSlotData::loadoutMenuSlotButtonData' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadoutMenuPopupViewInterface.SetSelectableCharacters
// 0x0098 (0x0098 - 0x0000)
struct LoadoutMenuPopupViewInterface_SetSelectableCharacters final
{
public:
	TArray<struct FTabWidgetData>                 selectableCharacters;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTabWidgetData                         selectedCharacterData;                             // 0x0010(0x0080)(ConstParm, Parm, NativeAccessSpecifierPublic)
	int32                                         botIndex;                                          // 0x0090(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoadoutMenuPopupViewInterface_SetSelectableCharacters) == 0x000008, "Wrong alignment on LoadoutMenuPopupViewInterface_SetSelectableCharacters");
static_assert(sizeof(LoadoutMenuPopupViewInterface_SetSelectableCharacters) == 0x000098, "Wrong size on LoadoutMenuPopupViewInterface_SetSelectableCharacters");
static_assert(offsetof(LoadoutMenuPopupViewInterface_SetSelectableCharacters, selectableCharacters) == 0x000000, "Member 'LoadoutMenuPopupViewInterface_SetSelectableCharacters::selectableCharacters' has a wrong offset!");
static_assert(offsetof(LoadoutMenuPopupViewInterface_SetSelectableCharacters, selectedCharacterData) == 0x000010, "Member 'LoadoutMenuPopupViewInterface_SetSelectableCharacters::selectedCharacterData' has a wrong offset!");
static_assert(offsetof(LoadoutMenuPopupViewInterface_SetSelectableCharacters, botIndex) == 0x000090, "Member 'LoadoutMenuPopupViewInterface_SetSelectableCharacters::botIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadoutMenuPopupViewInterface.SetSelectedInventoryItem
// 0x0018 (0x0018 - 0x0000)
struct LoadoutMenuPopupViewInterface_SetSelectedInventoryItem final
{
public:
	TArray<int32>                                 selectedIndex;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          isUnequip;                                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoadoutMenuPopupViewInterface_SetSelectedInventoryItem) == 0x000008, "Wrong alignment on LoadoutMenuPopupViewInterface_SetSelectedInventoryItem");
static_assert(sizeof(LoadoutMenuPopupViewInterface_SetSelectedInventoryItem) == 0x000018, "Wrong size on LoadoutMenuPopupViewInterface_SetSelectedInventoryItem");
static_assert(offsetof(LoadoutMenuPopupViewInterface_SetSelectedInventoryItem, selectedIndex) == 0x000000, "Member 'LoadoutMenuPopupViewInterface_SetSelectedInventoryItem::selectedIndex' has a wrong offset!");
static_assert(offsetof(LoadoutMenuPopupViewInterface_SetSelectedInventoryItem, isUnequip) == 0x000010, "Member 'LoadoutMenuPopupViewInterface_SetSelectedInventoryItem::isUnequip' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadoutMenuPopupViewInterface.UpdatePresetData
// 0x0018 (0x0018 - 0x0000)
struct LoadoutMenuPopupViewInterface_UpdatePresetData final
{
public:
	TArray<int32>                                 presetData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         selectedPreset;                                    // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoadoutMenuPopupViewInterface_UpdatePresetData) == 0x000008, "Wrong alignment on LoadoutMenuPopupViewInterface_UpdatePresetData");
static_assert(sizeof(LoadoutMenuPopupViewInterface_UpdatePresetData) == 0x000018, "Wrong size on LoadoutMenuPopupViewInterface_UpdatePresetData");
static_assert(offsetof(LoadoutMenuPopupViewInterface_UpdatePresetData, presetData) == 0x000000, "Member 'LoadoutMenuPopupViewInterface_UpdatePresetData::presetData' has a wrong offset!");
static_assert(offsetof(LoadoutMenuPopupViewInterface_UpdatePresetData, selectedPreset) == 0x000010, "Member 'LoadoutMenuPopupViewInterface_UpdatePresetData::selectedPreset' has a wrong offset!");

// Function DBDUIViewInterfaces.MatchResultViewInterface.UpdateWidget
// 0x0008 (0x0008 - 0x0000)
struct MatchResultViewInterface_UpdateWidget final
{
public:
	struct FMatchResultViewData                   data;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchResultViewInterface_UpdateWidget) == 0x000004, "Wrong alignment on MatchResultViewInterface_UpdateWidget");
static_assert(sizeof(MatchResultViewInterface_UpdateWidget) == 0x000008, "Wrong size on MatchResultViewInterface_UpdateWidget");
static_assert(offsetof(MatchResultViewInterface_UpdateWidget, data) == 0x000000, "Member 'MatchResultViewInterface_UpdateWidget::data' has a wrong offset!");

// Function DBDUIViewInterfaces.OfferingInteractionViewInterface.SetData
// 0x0060 (0x0060 - 0x0000)
struct OfferingInteractionViewInterface_SetData final
{
public:
	struct FOfferingViewData                      OfferingData;                                      // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingInteractionViewInterface_SetData) == 0x000008, "Wrong alignment on OfferingInteractionViewInterface_SetData");
static_assert(sizeof(OfferingInteractionViewInterface_SetData) == 0x000060, "Wrong size on OfferingInteractionViewInterface_SetData");
static_assert(offsetof(OfferingInteractionViewInterface_SetData, OfferingData) == 0x000000, "Member 'OfferingInteractionViewInterface_SetData::OfferingData' has a wrong offset!");

// Function DBDUIViewInterfaces.OfferingViewInterface.SetData
// 0x0060 (0x0060 - 0x0000)
struct OfferingViewInterface_SetData final
{
public:
	struct FOfferingViewData                      offeringViewData;                                  // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingViewInterface_SetData) == 0x000008, "Wrong alignment on OfferingViewInterface_SetData");
static_assert(sizeof(OfferingViewInterface_SetData) == 0x000060, "Wrong size on OfferingViewInterface_SetData");
static_assert(offsetof(OfferingViewInterface_SetData, offeringViewData) == 0x000000, "Member 'OfferingViewInterface_SetData::offeringViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetBackButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuViewInterface_SetBackButtonVisible final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_SetBackButtonVisible) == 0x000001, "Wrong alignment on OnboardingMenuViewInterface_SetBackButtonVisible");
static_assert(sizeof(OnboardingMenuViewInterface_SetBackButtonVisible) == 0x000001, "Wrong size on OnboardingMenuViewInterface_SetBackButtonVisible");
static_assert(offsetof(OnboardingMenuViewInterface_SetBackButtonVisible, visible) == 0x000000, "Member 'OnboardingMenuViewInterface_SetBackButtonVisible::visible' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetChangeAccountInputSwitcherPlayerNickname
// 0x0010 (0x0010 - 0x0000)
struct OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname final
{
public:
	class FString                                 playerNickname;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname) == 0x000008, "Wrong alignment on OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname");
static_assert(sizeof(OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname) == 0x000010, "Wrong size on OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname");
static_assert(offsetof(OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname, playerNickname) == 0x000000, "Member 'OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname::playerNickname' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetChangeAccountInputSwitcherVisible
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible) == 0x000001, "Wrong alignment on OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible");
static_assert(sizeof(OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible) == 0x000001, "Wrong size on OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible");
static_assert(offsetof(OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible, visible) == 0x000000, "Member 'OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible::visible' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetFirstTimeUserExperience
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuViewInterface_SetFirstTimeUserExperience final
{
public:
	bool                                          ftue;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_SetFirstTimeUserExperience) == 0x000001, "Wrong alignment on OnboardingMenuViewInterface_SetFirstTimeUserExperience");
static_assert(sizeof(OnboardingMenuViewInterface_SetFirstTimeUserExperience) == 0x000001, "Wrong size on OnboardingMenuViewInterface_SetFirstTimeUserExperience");
static_assert(offsetof(OnboardingMenuViewInterface_SetFirstTimeUserExperience, ftue) == 0x000000, "Member 'OnboardingMenuViewInterface_SetFirstTimeUserExperience::ftue' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetOnboardingMenuState
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuViewInterface_SetOnboardingMenuState final
{
public:
	EOnboardingMenuState                          menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_SetOnboardingMenuState) == 0x000001, "Wrong alignment on OnboardingMenuViewInterface_SetOnboardingMenuState");
static_assert(sizeof(OnboardingMenuViewInterface_SetOnboardingMenuState) == 0x000001, "Wrong size on OnboardingMenuViewInterface_SetOnboardingMenuState");
static_assert(offsetof(OnboardingMenuViewInterface_SetOnboardingMenuState, menuState) == 0x000000, "Member 'OnboardingMenuViewInterface_SetOnboardingMenuState::menuState' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetQuitGameButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuViewInterface_SetQuitGameButtonVisible final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_SetQuitGameButtonVisible) == 0x000001, "Wrong alignment on OnboardingMenuViewInterface_SetQuitGameButtonVisible");
static_assert(sizeof(OnboardingMenuViewInterface_SetQuitGameButtonVisible) == 0x000001, "Wrong size on OnboardingMenuViewInterface_SetQuitGameButtonVisible");
static_assert(offsetof(OnboardingMenuViewInterface_SetQuitGameButtonVisible, visible) == 0x000000, "Member 'OnboardingMenuViewInterface_SetQuitGameButtonVisible::visible' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetUIEnabled
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuViewInterface_SetUIEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_SetUIEnabled) == 0x000001, "Wrong alignment on OnboardingMenuViewInterface_SetUIEnabled");
static_assert(sizeof(OnboardingMenuViewInterface_SetUIEnabled) == 0x000001, "Wrong size on OnboardingMenuViewInterface_SetUIEnabled");
static_assert(offsetof(OnboardingMenuViewInterface_SetUIEnabled, enabled) == 0x000000, "Member 'OnboardingMenuViewInterface_SetUIEnabled::enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.GetGameManualInterface
// 0x0010 (0x0010 - 0x0000)
struct OnboardingMenuViewInterface_GetGameManualInterface final
{
public:
	TScriptInterface<class IGameManualViewInterface> ReturnValue;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_GetGameManualInterface) == 0x000008, "Wrong alignment on OnboardingMenuViewInterface_GetGameManualInterface");
static_assert(sizeof(OnboardingMenuViewInterface_GetGameManualInterface) == 0x000010, "Wrong size on OnboardingMenuViewInterface_GetGameManualInterface");
static_assert(offsetof(OnboardingMenuViewInterface_GetGameManualInterface, ReturnValue) == 0x000000, "Member 'OnboardingMenuViewInterface_GetGameManualInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.GetOnboardingTutorialInterface
// 0x0010 (0x0010 - 0x0000)
struct OnboardingMenuViewInterface_GetOnboardingTutorialInterface final
{
public:
	TScriptInterface<class IOnboardingTutorialViewInterface> ReturnValue;                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_GetOnboardingTutorialInterface) == 0x000008, "Wrong alignment on OnboardingMenuViewInterface_GetOnboardingTutorialInterface");
static_assert(sizeof(OnboardingMenuViewInterface_GetOnboardingTutorialInterface) == 0x000010, "Wrong size on OnboardingMenuViewInterface_GetOnboardingTutorialInterface");
static_assert(offsetof(OnboardingMenuViewInterface_GetOnboardingTutorialInterface, ReturnValue) == 0x000000, "Member 'OnboardingMenuViewInterface_GetOnboardingTutorialInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetCanShowGoToMainMenuTutorialButton
// 0x0001 (0x0001 - 0x0000)
struct OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton final
{
public:
	bool                                          canShowGoToMainMenuTutorialButton;                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton) == 0x000001, "Wrong alignment on OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton");
static_assert(sizeof(OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton) == 0x000001, "Wrong size on OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton");
static_assert(offsetof(OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton, canShowGoToMainMenuTutorialButton) == 0x000000, "Member 'OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton::canShowGoToMainMenuTutorialButton' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetIsKillSwitch
// 0x0001 (0x0001 - 0x0000)
struct OnboardingTutorialViewInterface_SetIsKillSwitch final
{
public:
	bool                                          isKillSwitch;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingTutorialViewInterface_SetIsKillSwitch) == 0x000001, "Wrong alignment on OnboardingTutorialViewInterface_SetIsKillSwitch");
static_assert(sizeof(OnboardingTutorialViewInterface_SetIsKillSwitch) == 0x000001, "Wrong size on OnboardingTutorialViewInterface_SetIsKillSwitch");
static_assert(offsetof(OnboardingTutorialViewInterface_SetIsKillSwitch, isKillSwitch) == 0x000000, "Member 'OnboardingTutorialViewInterface_SetIsKillSwitch::isKillSwitch' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetProgress
// 0x0010 (0x0010 - 0x0000)
struct OnboardingTutorialViewInterface_SetProgress final
{
public:
	TArray<struct FOnboardingStepViewData>        progress;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingTutorialViewInterface_SetProgress) == 0x000008, "Wrong alignment on OnboardingTutorialViewInterface_SetProgress");
static_assert(sizeof(OnboardingTutorialViewInterface_SetProgress) == 0x000010, "Wrong size on OnboardingTutorialViewInterface_SetProgress");
static_assert(offsetof(OnboardingTutorialViewInterface_SetProgress, progress) == 0x000000, "Member 'OnboardingTutorialViewInterface_SetProgress::progress' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetTutorialProgressionFeedbacks
// 0x0018 (0x0018 - 0x0000)
struct OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks final
{
public:
	class FString                                 completedStepId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isOnboardingEnabled;                               // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks) == 0x000008, "Wrong alignment on OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks");
static_assert(sizeof(OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks) == 0x000018, "Wrong size on OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks");
static_assert(offsetof(OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks, completedStepId) == 0x000000, "Member 'OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks::completedStepId' has a wrong offset!");
static_assert(offsetof(OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks, isOnboardingEnabled) == 0x000010, "Member 'OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks::isOnboardingEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetUIEnabled
// 0x0001 (0x0001 - 0x0000)
struct OnboardingTutorialViewInterface_SetUIEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingTutorialViewInterface_SetUIEnabled) == 0x000001, "Wrong alignment on OnboardingTutorialViewInterface_SetUIEnabled");
static_assert(sizeof(OnboardingTutorialViewInterface_SetUIEnabled) == 0x000001, "Wrong size on OnboardingTutorialViewInterface_SetUIEnabled");
static_assert(offsetof(OnboardingTutorialViewInterface_SetUIEnabled, enabled) == 0x000000, "Member 'OnboardingTutorialViewInterface_SetUIEnabled::enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.UpdateProgress
// 0x0030 (0x0030 - 0x0000)
struct OnboardingTutorialViewInterface_UpdateProgress final
{
public:
	TArray<struct FOnboardingStepViewData>        before;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FOnboardingStepViewData>        after;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRewardWrapperViewData>         rewards;                                           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingTutorialViewInterface_UpdateProgress) == 0x000008, "Wrong alignment on OnboardingTutorialViewInterface_UpdateProgress");
static_assert(sizeof(OnboardingTutorialViewInterface_UpdateProgress) == 0x000030, "Wrong size on OnboardingTutorialViewInterface_UpdateProgress");
static_assert(offsetof(OnboardingTutorialViewInterface_UpdateProgress, before) == 0x000000, "Member 'OnboardingTutorialViewInterface_UpdateProgress::before' has a wrong offset!");
static_assert(offsetof(OnboardingTutorialViewInterface_UpdateProgress, after) == 0x000010, "Member 'OnboardingTutorialViewInterface_UpdateProgress::after' has a wrong offset!");
static_assert(offsetof(OnboardingTutorialViewInterface_UpdateProgress, rewards) == 0x000020, "Member 'OnboardingTutorialViewInterface_UpdateProgress::rewards' has a wrong offset!");

// Function DBDUIViewInterfaces.PerksContainerViewInterface.GetPerkInterface
// 0x0018 (0x0018 - 0x0000)
struct PerksContainerViewInterface_GetPerkInterface final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPerkViewInterface>    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerksContainerViewInterface_GetPerkInterface) == 0x000008, "Wrong alignment on PerksContainerViewInterface_GetPerkInterface");
static_assert(sizeof(PerksContainerViewInterface_GetPerkInterface) == 0x000018, "Wrong size on PerksContainerViewInterface_GetPerkInterface");
static_assert(offsetof(PerksContainerViewInterface_GetPerkInterface, index) == 0x000000, "Member 'PerksContainerViewInterface_GetPerkInterface::index' has a wrong offset!");
static_assert(offsetof(PerksContainerViewInterface_GetPerkInterface, ReturnValue) == 0x000008, "Member 'PerksContainerViewInterface_GetPerkInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.PerkViewInterface.SetData
// 0x0070 (0x0070 - 0x0000)
struct PerkViewInterface_SetData final
{
public:
	struct FPerkViewData                          perkViewData;                                      // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkViewInterface_SetData) == 0x000008, "Wrong alignment on PerkViewInterface_SetData");
static_assert(sizeof(PerkViewInterface_SetData) == 0x000070, "Wrong size on PerkViewInterface_SetData");
static_assert(offsetof(PerkViewInterface_SetData, perkViewData) == 0x000000, "Member 'PerkViewInterface_SetData::perkViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.PerkViewInterface.UpdatePerkCooldown
// 0x0008 (0x0008 - 0x0000)
struct PerkViewInterface_UpdatePerkCooldown final
{
public:
	float                                         cooldownValue;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRechargeable;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRechargeableActive;                              // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkViewInterface_UpdatePerkCooldown) == 0x000004, "Wrong alignment on PerkViewInterface_UpdatePerkCooldown");
static_assert(sizeof(PerkViewInterface_UpdatePerkCooldown) == 0x000008, "Wrong size on PerkViewInterface_UpdatePerkCooldown");
static_assert(offsetof(PerkViewInterface_UpdatePerkCooldown, cooldownValue) == 0x000000, "Member 'PerkViewInterface_UpdatePerkCooldown::cooldownValue' has a wrong offset!");
static_assert(offsetof(PerkViewInterface_UpdatePerkCooldown, IsRechargeable) == 0x000004, "Member 'PerkViewInterface_UpdatePerkCooldown::IsRechargeable' has a wrong offset!");
static_assert(offsetof(PerkViewInterface_UpdatePerkCooldown, IsRechargeableActive) == 0x000005, "Member 'PerkViewInterface_UpdatePerkCooldown::IsRechargeableActive' has a wrong offset!");

// Function DBDUIViewInterfaces.PingStatusViewInterface.SetKillerConnectionQualityStatus
// 0x0001 (0x0001 - 0x0000)
struct PingStatusViewInterface_SetKillerConnectionQualityStatus final
{
public:
	EConnectionQuality                            killerConnectionQuality;                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingStatusViewInterface_SetKillerConnectionQualityStatus) == 0x000001, "Wrong alignment on PingStatusViewInterface_SetKillerConnectionQualityStatus");
static_assert(sizeof(PingStatusViewInterface_SetKillerConnectionQualityStatus) == 0x000001, "Wrong size on PingStatusViewInterface_SetKillerConnectionQualityStatus");
static_assert(offsetof(PingStatusViewInterface_SetKillerConnectionQualityStatus, killerConnectionQuality) == 0x000000, "Member 'PingStatusViewInterface_SetKillerConnectionQualityStatus::killerConnectionQuality' has a wrong offset!");

// Function DBDUIViewInterfaces.PingStatusViewInterface.SetLocalPacketLossStatus
// 0x0001 (0x0001 - 0x0000)
struct PingStatusViewInterface_SetLocalPacketLossStatus final
{
public:
	EConnectionQuality                            localPacketLoss;                                   // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingStatusViewInterface_SetLocalPacketLossStatus) == 0x000001, "Wrong alignment on PingStatusViewInterface_SetLocalPacketLossStatus");
static_assert(sizeof(PingStatusViewInterface_SetLocalPacketLossStatus) == 0x000001, "Wrong size on PingStatusViewInterface_SetLocalPacketLossStatus");
static_assert(offsetof(PingStatusViewInterface_SetLocalPacketLossStatus, localPacketLoss) == 0x000000, "Member 'PingStatusViewInterface_SetLocalPacketLossStatus::localPacketLoss' has a wrong offset!");

// Function DBDUIViewInterfaces.PingStatusViewInterface.SetLocalPingStatus
// 0x0001 (0x0001 - 0x0000)
struct PingStatusViewInterface_SetLocalPingStatus final
{
public:
	EConnectionQuality                            localPing;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingStatusViewInterface_SetLocalPingStatus) == 0x000001, "Wrong alignment on PingStatusViewInterface_SetLocalPingStatus");
static_assert(sizeof(PingStatusViewInterface_SetLocalPingStatus) == 0x000001, "Wrong size on PingStatusViewInterface_SetLocalPingStatus");
static_assert(offsetof(PingStatusViewInterface_SetLocalPingStatus, localPing) == 0x000000, "Member 'PingStatusViewInterface_SetLocalPingStatus::localPing' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerProfileViewInterface.FullUpdateCurrency
// 0x0100 (0x0100 - 0x0000)
struct PlayerProfileViewInterface_FullUpdateCurrency final
{
public:
	struct FCurrencyLabelViewData                 viewData;                                          // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileViewInterface_FullUpdateCurrency) == 0x000008, "Wrong alignment on PlayerProfileViewInterface_FullUpdateCurrency");
static_assert(sizeof(PlayerProfileViewInterface_FullUpdateCurrency) == 0x000100, "Wrong size on PlayerProfileViewInterface_FullUpdateCurrency");
static_assert(offsetof(PlayerProfileViewInterface_FullUpdateCurrency, viewData) == 0x000000, "Member 'PlayerProfileViewInterface_FullUpdateCurrency::viewData' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct PlayerProfileViewInterface_SetPlayerName final
{
public:
	class FText                                   playerNameText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileViewInterface_SetPlayerName) == 0x000008, "Wrong alignment on PlayerProfileViewInterface_SetPlayerName");
static_assert(sizeof(PlayerProfileViewInterface_SetPlayerName) == 0x000018, "Wrong size on PlayerProfileViewInterface_SetPlayerName");
static_assert(offsetof(PlayerProfileViewInterface_SetPlayerName, playerNameText) == 0x000000, "Member 'PlayerProfileViewInterface_SetPlayerName::playerNameText' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetWallet
// 0x0010 (0x0010 - 0x0000)
struct PlayerProfileViewInterface_SetWallet final
{
public:
	TArray<struct FCurrencyLabelViewData>         walletData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileViewInterface_SetWallet) == 0x000008, "Wrong alignment on PlayerProfileViewInterface_SetWallet");
static_assert(sizeof(PlayerProfileViewInterface_SetWallet) == 0x000010, "Wrong size on PlayerProfileViewInterface_SetWallet");
static_assert(offsetof(PlayerProfileViewInterface_SetWallet, walletData) == 0x000000, "Member 'PlayerProfileViewInterface_SetWallet::walletData' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerProfileViewInterface.UpdateWallet
// 0x000C (0x000C - 0x0000)
struct PlayerProfileViewInterface_UpdateWallet final
{
public:
	ECurrencyType                                 type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         newBalance;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         previousBalance;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileViewInterface_UpdateWallet) == 0x000004, "Wrong alignment on PlayerProfileViewInterface_UpdateWallet");
static_assert(sizeof(PlayerProfileViewInterface_UpdateWallet) == 0x00000C, "Wrong size on PlayerProfileViewInterface_UpdateWallet");
static_assert(offsetof(PlayerProfileViewInterface_UpdateWallet, type) == 0x000000, "Member 'PlayerProfileViewInterface_UpdateWallet::type' has a wrong offset!");
static_assert(offsetof(PlayerProfileViewInterface_UpdateWallet, newBalance) == 0x000004, "Member 'PlayerProfileViewInterface_UpdateWallet::newBalance' has a wrong offset!");
static_assert(offsetof(PlayerProfileViewInterface_UpdateWallet, previousBalance) == 0x000008, "Member 'PlayerProfileViewInterface_UpdateWallet::previousBalance' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusesContainerViewInterface.GetPlayerStatusInterface
// 0x0018 (0x0018 - 0x0000)
struct PlayerStatusesContainerViewInterface_GetPlayerStatusInterface final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerStatusViewInterface> ReturnValue;                                  // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusesContainerViewInterface_GetPlayerStatusInterface) == 0x000008, "Wrong alignment on PlayerStatusesContainerViewInterface_GetPlayerStatusInterface");
static_assert(sizeof(PlayerStatusesContainerViewInterface_GetPlayerStatusInterface) == 0x000018, "Wrong size on PlayerStatusesContainerViewInterface_GetPlayerStatusInterface");
static_assert(offsetof(PlayerStatusesContainerViewInterface_GetPlayerStatusInterface, index) == 0x000000, "Member 'PlayerStatusesContainerViewInterface_GetPlayerStatusInterface::index' has a wrong offset!");
static_assert(offsetof(PlayerStatusesContainerViewInterface_GetPlayerStatusInterface, ReturnValue) == 0x000008, "Member 'PlayerStatusesContainerViewInterface_GetPlayerStatusInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.KillerStatusData.IsEqual
// 0x0010 (0x0010 - 0x0000)
struct KillerStatusData_IsEqual final
{
public:
	const class UKillerStatusData*                other;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KillerStatusData_IsEqual) == 0x000008, "Wrong alignment on KillerStatusData_IsEqual");
static_assert(sizeof(KillerStatusData_IsEqual) == 0x000010, "Wrong size on KillerStatusData_IsEqual");
static_assert(offsetof(KillerStatusData_IsEqual, other) == 0x000000, "Member 'KillerStatusData_IsEqual::other' has a wrong offset!");
static_assert(offsetof(KillerStatusData_IsEqual, ReturnValue) == 0x000008, "Member 'KillerStatusData_IsEqual::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.EnableChasesMode
// 0x0001 (0x0001 - 0x0000)
struct PlayerStatusViewInterface_EnableChasesMode final
{
public:
	bool                                          isChased;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusViewInterface_EnableChasesMode) == 0x000001, "Wrong alignment on PlayerStatusViewInterface_EnableChasesMode");
static_assert(sizeof(PlayerStatusViewInterface_EnableChasesMode) == 0x000001, "Wrong size on PlayerStatusViewInterface_EnableChasesMode");
static_assert(offsetof(PlayerStatusViewInterface_EnableChasesMode, isChased) == 0x000000, "Member 'PlayerStatusViewInterface_EnableChasesMode::isChased' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetCampProgress
// 0x0008 (0x0008 - 0x0000)
struct PlayerStatusViewInterface_SetCampProgress final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isLocalPlayerAKiller;                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerStatusViewInterface_SetCampProgress) == 0x000004, "Wrong alignment on PlayerStatusViewInterface_SetCampProgress");
static_assert(sizeof(PlayerStatusViewInterface_SetCampProgress) == 0x000008, "Wrong size on PlayerStatusViewInterface_SetCampProgress");
static_assert(offsetof(PlayerStatusViewInterface_SetCampProgress, value) == 0x000000, "Member 'PlayerStatusViewInterface_SetCampProgress::value' has a wrong offset!");
static_assert(offsetof(PlayerStatusViewInterface_SetCampProgress, isLocalPlayerAKiller) == 0x000004, "Member 'PlayerStatusViewInterface_SetCampProgress::isLocalPlayerAKiller' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetData
// 0x0048 (0x0048 - 0x0000)
struct PlayerStatusViewInterface_SetData final
{
public:
	struct FPlayerStatusViewData                  data;                                              // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusViewInterface_SetData) == 0x000008, "Wrong alignment on PlayerStatusViewInterface_SetData");
static_assert(sizeof(PlayerStatusViewInterface_SetData) == 0x000048, "Wrong size on PlayerStatusViewInterface_SetData");
static_assert(offsetof(PlayerStatusViewInterface_SetData, data) == 0x000000, "Member 'PlayerStatusViewInterface_SetData::data' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetKiller
// 0x000C (0x000C - 0x0000)
struct PlayerStatusViewInterface_SetKiller final
{
public:
	struct FGameplayTag                           killerTag;                                         // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusViewInterface_SetKiller) == 0x000004, "Wrong alignment on PlayerStatusViewInterface_SetKiller");
static_assert(sizeof(PlayerStatusViewInterface_SetKiller) == 0x00000C, "Wrong size on PlayerStatusViewInterface_SetKiller");
static_assert(offsetof(PlayerStatusViewInterface_SetKiller, killerTag) == 0x000000, "Member 'PlayerStatusViewInterface_SetKiller::killerTag' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetPlayerNameVisibility
// 0x0001 (0x0001 - 0x0000)
struct PlayerStatusViewInterface_SetPlayerNameVisibility final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusViewInterface_SetPlayerNameVisibility) == 0x000001, "Wrong alignment on PlayerStatusViewInterface_SetPlayerNameVisibility");
static_assert(sizeof(PlayerStatusViewInterface_SetPlayerNameVisibility) == 0x000001, "Wrong size on PlayerStatusViewInterface_SetPlayerNameVisibility");
static_assert(offsetof(PlayerStatusViewInterface_SetPlayerNameVisibility, visible) == 0x000000, "Member 'PlayerStatusViewInterface_SetPlayerNameVisibility::visible' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetTimerProgress
// 0x0008 (0x0008 - 0x0000)
struct PlayerStatusViewInterface_SetTimerProgress final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isDeepWound;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerStatusViewInterface_SetTimerProgress) == 0x000004, "Wrong alignment on PlayerStatusViewInterface_SetTimerProgress");
static_assert(sizeof(PlayerStatusViewInterface_SetTimerProgress) == 0x000008, "Wrong size on PlayerStatusViewInterface_SetTimerProgress");
static_assert(offsetof(PlayerStatusViewInterface_SetTimerProgress, value) == 0x000000, "Member 'PlayerStatusViewInterface_SetTimerProgress::value' has a wrong offset!");
static_assert(offsetof(PlayerStatusViewInterface_SetTimerProgress, isDeepWound) == 0x000004, "Member 'PlayerStatusViewInterface_SetTimerProgress::isDeepWound' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.ShowSurvivorActivity
// 0x0038 (0x0038 - 0x0000)
struct PlayerStatusViewInterface_ShowSurvivorActivity final
{
public:
	TSoftObjectPtr<class UTexture2D>              activityIcon;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          shouldDisplayProgress;                             // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerStatusViewInterface_ShowSurvivorActivity) == 0x000008, "Wrong alignment on PlayerStatusViewInterface_ShowSurvivorActivity");
static_assert(sizeof(PlayerStatusViewInterface_ShowSurvivorActivity) == 0x000038, "Wrong size on PlayerStatusViewInterface_ShowSurvivorActivity");
static_assert(offsetof(PlayerStatusViewInterface_ShowSurvivorActivity, activityIcon) == 0x000000, "Member 'PlayerStatusViewInterface_ShowSurvivorActivity::activityIcon' has a wrong offset!");
static_assert(offsetof(PlayerStatusViewInterface_ShowSurvivorActivity, shouldDisplayProgress) == 0x000030, "Member 'PlayerStatusViewInterface_ShowSurvivorActivity::shouldDisplayProgress' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.UpdateSurvivorActivityProgress
// 0x0004 (0x0004 - 0x0000)
struct PlayerStatusViewInterface_UpdateSurvivorActivityProgress final
{
public:
	float                                         progress;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusViewInterface_UpdateSurvivorActivityProgress) == 0x000004, "Wrong alignment on PlayerStatusViewInterface_UpdateSurvivorActivityProgress");
static_assert(sizeof(PlayerStatusViewInterface_UpdateSurvivorActivityProgress) == 0x000004, "Wrong size on PlayerStatusViewInterface_UpdateSurvivorActivityProgress");
static_assert(offsetof(PlayerStatusViewInterface_UpdateSurvivorActivityProgress, progress) == 0x000000, "Member 'PlayerStatusViewInterface_UpdateSurvivorActivityProgress::progress' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.UpdateSurvivorSpecificPingIcon
// 0x0001 (0x0001 - 0x0000)
struct PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon final
{
public:
	EConnectionQuality                            connectionQuality;                                 // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon) == 0x000001, "Wrong alignment on PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon");
static_assert(sizeof(PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon) == 0x000001, "Wrong size on PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon");
static_assert(offsetof(PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon, connectionQuality) == 0x000000, "Member 'PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon::connectionQuality' has a wrong offset!");

// Function DBDUIViewInterfaces.PowerBundleViewInterface.SetData
// 0x0158 (0x0158 - 0x0000)
struct PowerBundleViewInterface_SetData final
{
public:
	struct FPowerBundleViewData                   powerBundleViewData;                               // 0x0000(0x0158)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PowerBundleViewInterface_SetData) == 0x000008, "Wrong alignment on PowerBundleViewInterface_SetData");
static_assert(sizeof(PowerBundleViewInterface_SetData) == 0x000158, "Wrong size on PowerBundleViewInterface_SetData");
static_assert(offsetof(PowerBundleViewInterface_SetData, powerBundleViewData) == 0x000000, "Member 'PowerBundleViewInterface_SetData::powerBundleViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.PowerViewInterface.SetData
// 0x0088 (0x0088 - 0x0000)
struct PowerViewInterface_SetData final
{
public:
	struct FPowerViewData                         powerViewData;                                     // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PowerViewInterface_SetData) == 0x000008, "Wrong alignment on PowerViewInterface_SetData");
static_assert(sizeof(PowerViewInterface_SetData) == 0x000088, "Wrong size on PowerViewInterface_SetData");
static_assert(offsetof(PowerViewInterface_SetData, powerViewData) == 0x000000, "Member 'PowerViewInterface_SetData::powerViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ScreenIndicatorsContainerViewInterface.RemoveDirectionIndicator
// 0x0010 (0x0010 - 0x0000)
struct ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator final
{
public:
	class FString                                 id;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator) == 0x000008, "Wrong alignment on ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator");
static_assert(sizeof(ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator) == 0x000010, "Wrong size on ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator");
static_assert(offsetof(ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator, id) == 0x000000, "Member 'ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator::id' has a wrong offset!");

// Function DBDUIViewInterfaces.ScreenIndicatorsContainerViewInterface.ShowDirectionIndicator
// 0x0038 (0x0038 - 0x0000)
struct ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator final
{
public:
	struct FScreenIndicatorViewData               data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator) == 0x000008, "Wrong alignment on ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator");
static_assert(sizeof(ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator) == 0x000038, "Wrong size on ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator");
static_assert(offsetof(ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator, data) == 0x000000, "Member 'ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator::data' has a wrong offset!");

// Function DBDUIViewInterfaces.SkillCheckViewInterface.ApplyScaleFactor
// 0x0004 (0x0004 - 0x0000)
struct SkillCheckViewInterface_ApplyScaleFactor final
{
public:
	float                                         scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheckViewInterface_ApplyScaleFactor) == 0x000004, "Wrong alignment on SkillCheckViewInterface_ApplyScaleFactor");
static_assert(sizeof(SkillCheckViewInterface_ApplyScaleFactor) == 0x000004, "Wrong size on SkillCheckViewInterface_ApplyScaleFactor");
static_assert(offsetof(SkillCheckViewInterface_ApplyScaleFactor, scale) == 0x000000, "Member 'SkillCheckViewInterface_ApplyScaleFactor::scale' has a wrong offset!");

// Function DBDUIViewInterfaces.SkillCheckViewInterface.ShowSkillCheck
// 0x0058 (0x0058 - 0x0000)
struct SkillCheckViewInterface_ShowSkillCheck final
{
public:
	struct FSkillCheckViewData                    skillCheckData;                                    // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheckViewInterface_ShowSkillCheck) == 0x000008, "Wrong alignment on SkillCheckViewInterface_ShowSkillCheck");
static_assert(sizeof(SkillCheckViewInterface_ShowSkillCheck) == 0x000058, "Wrong size on SkillCheckViewInterface_ShowSkillCheck");
static_assert(offsetof(SkillCheckViewInterface_ShowSkillCheck, skillCheckData) == 0x000000, "Member 'SkillCheckViewInterface_ShowSkillCheck::skillCheckData' has a wrong offset!");

// Function DBDUIViewInterfaces.SkillCheckViewInterface.ShowSkillCheckSuccess
// 0x0001 (0x0001 - 0x0000)
struct SkillCheckViewInterface_ShowSkillCheckSuccess final
{
public:
	bool                                          isBonus;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheckViewInterface_ShowSkillCheckSuccess) == 0x000001, "Wrong alignment on SkillCheckViewInterface_ShowSkillCheckSuccess");
static_assert(sizeof(SkillCheckViewInterface_ShowSkillCheckSuccess) == 0x000001, "Wrong size on SkillCheckViewInterface_ShowSkillCheckSuccess");
static_assert(offsetof(SkillCheckViewInterface_ShowSkillCheckSuccess, isBonus) == 0x000000, "Member 'SkillCheckViewInterface_ShowSkillCheckSuccess::isBonus' has a wrong offset!");

// Function DBDUIViewInterfaces.SkillCheckViewInterface.UpdatePositionOffset
// 0x0008 (0x0008 - 0x0000)
struct SkillCheckViewInterface_UpdatePositionOffset final
{
public:
	int32                                         x;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheckViewInterface_UpdatePositionOffset) == 0x000004, "Wrong alignment on SkillCheckViewInterface_UpdatePositionOffset");
static_assert(sizeof(SkillCheckViewInterface_UpdatePositionOffset) == 0x000008, "Wrong size on SkillCheckViewInterface_UpdatePositionOffset");
static_assert(offsetof(SkillCheckViewInterface_UpdatePositionOffset, x) == 0x000000, "Member 'SkillCheckViewInterface_UpdatePositionOffset::x' has a wrong offset!");
static_assert(offsetof(SkillCheckViewInterface_UpdatePositionOffset, y) == 0x000004, "Member 'SkillCheckViewInterface_UpdatePositionOffset::y' has a wrong offset!");

// Function DBDUIViewInterfaces.SkillCheckViewInterface.UpdateProgress
// 0x0004 (0x0004 - 0x0000)
struct SkillCheckViewInterface_UpdateProgress final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheckViewInterface_UpdateProgress) == 0x000004, "Wrong alignment on SkillCheckViewInterface_UpdateProgress");
static_assert(sizeof(SkillCheckViewInterface_UpdateProgress) == 0x000004, "Wrong size on SkillCheckViewInterface_UpdateProgress");
static_assert(offsetof(SkillCheckViewInterface_UpdateProgress, value) == 0x000000, "Member 'SkillCheckViewInterface_UpdateProgress::value' has a wrong offset!");

// Function DBDUIViewInterfaces.SpectateBarViewInterface.SetArrowsVisibility
// 0x0001 (0x0001 - 0x0000)
struct SpectateBarViewInterface_SetArrowsVisibility final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectateBarViewInterface_SetArrowsVisibility) == 0x000001, "Wrong alignment on SpectateBarViewInterface_SetArrowsVisibility");
static_assert(sizeof(SpectateBarViewInterface_SetArrowsVisibility) == 0x000001, "Wrong size on SpectateBarViewInterface_SetArrowsVisibility");
static_assert(offsetof(SpectateBarViewInterface_SetArrowsVisibility, isVisible) == 0x000000, "Member 'SpectateBarViewInterface_SetArrowsVisibility::isVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.SpectateBarViewInterface.SetSpectateBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct SpectateBarViewInterface_SetSpectateBarVisibility final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectateBarViewInterface_SetSpectateBarVisibility) == 0x000001, "Wrong alignment on SpectateBarViewInterface_SetSpectateBarVisibility");
static_assert(sizeof(SpectateBarViewInterface_SetSpectateBarVisibility) == 0x000001, "Wrong size on SpectateBarViewInterface_SetSpectateBarVisibility");
static_assert(offsetof(SpectateBarViewInterface_SetSpectateBarVisibility, isVisible) == 0x000000, "Member 'SpectateBarViewInterface_SetSpectateBarVisibility::isVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.SpectateBarViewInterface.SetSpectatedName
// 0x0010 (0x0010 - 0x0000)
struct SpectateBarViewInterface_SetSpectatedName final
{
public:
	class FString                                 playerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectateBarViewInterface_SetSpectatedName) == 0x000008, "Wrong alignment on SpectateBarViewInterface_SetSpectatedName");
static_assert(sizeof(SpectateBarViewInterface_SetSpectatedName) == 0x000010, "Wrong size on SpectateBarViewInterface_SetSpectatedName");
static_assert(offsetof(SpectateBarViewInterface_SetSpectatedName, playerName) == 0x000000, "Member 'SpectateBarViewInterface_SetSpectatedName::playerName' has a wrong offset!");

// Function DBDUIViewInterfaces.StartSequenceViewInterface.ShowStartSequence
// 0x0028 (0x0028 - 0x0000)
struct StartSequenceViewInterface_ShowStartSequence final
{
public:
	struct FStartSequenceViewData                 data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartSequenceViewInterface_ShowStartSequence) == 0x000008, "Wrong alignment on StartSequenceViewInterface_ShowStartSequence");
static_assert(sizeof(StartSequenceViewInterface_ShowStartSequence) == 0x000028, "Wrong size on StartSequenceViewInterface_ShowStartSequence");
static_assert(offsetof(StartSequenceViewInterface_ShowStartSequence, data) == 0x000000, "Member 'StartSequenceViewInterface_ShowStartSequence::data' has a wrong offset!");

// Function DBDUIViewInterfaces.StartSequenceViewInterface.GetIsStartSequenceVisible
// 0x0001 (0x0001 - 0x0000)
struct StartSequenceViewInterface_GetIsStartSequenceVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartSequenceViewInterface_GetIsStartSequenceVisible) == 0x000001, "Wrong alignment on StartSequenceViewInterface_GetIsStartSequenceVisible");
static_assert(sizeof(StartSequenceViewInterface_GetIsStartSequenceVisible) == 0x000001, "Wrong size on StartSequenceViewInterface_GetIsStartSequenceVisible");
static_assert(offsetof(StartSequenceViewInterface_GetIsStartSequenceVisible, ReturnValue) == 0x000000, "Member 'StartSequenceViewInterface_GetIsStartSequenceVisible::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StatusEffectViewInterface.RemoveExistingStatusEffect
// 0x000C (0x000C - 0x0000)
struct StatusEffectViewInterface_RemoveExistingStatusEffect final
{
public:
	class FName                                   statusEffectId;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectViewInterface_RemoveExistingStatusEffect) == 0x000004, "Wrong alignment on StatusEffectViewInterface_RemoveExistingStatusEffect");
static_assert(sizeof(StatusEffectViewInterface_RemoveExistingStatusEffect) == 0x00000C, "Wrong size on StatusEffectViewInterface_RemoveExistingStatusEffect");
static_assert(offsetof(StatusEffectViewInterface_RemoveExistingStatusEffect, statusEffectId) == 0x000000, "Member 'StatusEffectViewInterface_RemoveExistingStatusEffect::statusEffectId' has a wrong offset!");

// Function DBDUIViewInterfaces.StatusEffectViewInterface.ShowActiveStatusEffect
// 0x0050 (0x0050 - 0x0000)
struct StatusEffectViewInterface_ShowActiveStatusEffect final
{
public:
	struct FStatusEffectViewData                  statusEffectData;                                  // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectViewInterface_ShowActiveStatusEffect) == 0x000008, "Wrong alignment on StatusEffectViewInterface_ShowActiveStatusEffect");
static_assert(sizeof(StatusEffectViewInterface_ShowActiveStatusEffect) == 0x000050, "Wrong size on StatusEffectViewInterface_ShowActiveStatusEffect");
static_assert(offsetof(StatusEffectViewInterface_ShowActiveStatusEffect, statusEffectData) == 0x000000, "Member 'StatusEffectViewInterface_ShowActiveStatusEffect::statusEffectData' has a wrong offset!");

// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetConstrainAspectRatioChanged
// 0x0008 (0x0008 - 0x0000)
struct SubtitlesViewInterface_SetConstrainAspectRatioChanged final
{
public:
	bool                                          isConstrained;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         aspectRatio;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesViewInterface_SetConstrainAspectRatioChanged) == 0x000004, "Wrong alignment on SubtitlesViewInterface_SetConstrainAspectRatioChanged");
static_assert(sizeof(SubtitlesViewInterface_SetConstrainAspectRatioChanged) == 0x000008, "Wrong size on SubtitlesViewInterface_SetConstrainAspectRatioChanged");
static_assert(offsetof(SubtitlesViewInterface_SetConstrainAspectRatioChanged, isConstrained) == 0x000000, "Member 'SubtitlesViewInterface_SetConstrainAspectRatioChanged::isConstrained' has a wrong offset!");
static_assert(offsetof(SubtitlesViewInterface_SetConstrainAspectRatioChanged, aspectRatio) == 0x000004, "Member 'SubtitlesViewInterface_SetConstrainAspectRatioChanged::aspectRatio' has a wrong offset!");

// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetSubtitlesBackgroundOpacity
// 0x0001 (0x0001 - 0x0000)
struct SubtitlesViewInterface_SetSubtitlesBackgroundOpacity final
{
public:
	ESubtitlesBackgroundOpacity                   opacity;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesViewInterface_SetSubtitlesBackgroundOpacity) == 0x000001, "Wrong alignment on SubtitlesViewInterface_SetSubtitlesBackgroundOpacity");
static_assert(sizeof(SubtitlesViewInterface_SetSubtitlesBackgroundOpacity) == 0x000001, "Wrong size on SubtitlesViewInterface_SetSubtitlesBackgroundOpacity");
static_assert(offsetof(SubtitlesViewInterface_SetSubtitlesBackgroundOpacity, opacity) == 0x000000, "Member 'SubtitlesViewInterface_SetSubtitlesBackgroundOpacity::opacity' has a wrong offset!");

// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetSubtitlesPosition
// 0x0001 (0x0001 - 0x0000)
struct SubtitlesViewInterface_SetSubtitlesPosition final
{
public:
	ESubtitlesPosition                            position;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesViewInterface_SetSubtitlesPosition) == 0x000001, "Wrong alignment on SubtitlesViewInterface_SetSubtitlesPosition");
static_assert(sizeof(SubtitlesViewInterface_SetSubtitlesPosition) == 0x000001, "Wrong size on SubtitlesViewInterface_SetSubtitlesPosition");
static_assert(offsetof(SubtitlesViewInterface_SetSubtitlesPosition, position) == 0x000000, "Member 'SubtitlesViewInterface_SetSubtitlesPosition::position' has a wrong offset!");

// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetSubtitlesSize
// 0x0001 (0x0001 - 0x0000)
struct SubtitlesViewInterface_SetSubtitlesSize final
{
public:
	ESubtitlesSize                                size;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesViewInterface_SetSubtitlesSize) == 0x000001, "Wrong alignment on SubtitlesViewInterface_SetSubtitlesSize");
static_assert(sizeof(SubtitlesViewInterface_SetSubtitlesSize) == 0x000001, "Wrong size on SubtitlesViewInterface_SetSubtitlesSize");
static_assert(offsetof(SubtitlesViewInterface_SetSubtitlesSize, size) == 0x000000, "Member 'SubtitlesViewInterface_SetSubtitlesSize::size' has a wrong offset!");

// Function DBDUIViewInterfaces.SubtitlesViewInterface.ShowSubtitle
// 0x0018 (0x0018 - 0x0000)
struct SubtitlesViewInterface_ShowSubtitle final
{
public:
	class FText                                   subtitleText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesViewInterface_ShowSubtitle) == 0x000008, "Wrong alignment on SubtitlesViewInterface_ShowSubtitle");
static_assert(sizeof(SubtitlesViewInterface_ShowSubtitle) == 0x000018, "Wrong size on SubtitlesViewInterface_ShowSubtitle");
static_assert(offsetof(SubtitlesViewInterface_ShowSubtitle, subtitleText) == 0x000000, "Member 'SubtitlesViewInterface_ShowSubtitle::subtitleText' has a wrong offset!");

// Function DBDUIViewInterfaces.TemplateViewInterface.TemplateExampleFunction
// 0x0001 (0x0001 - 0x0000)
struct TemplateViewInterface_TemplateExampleFunction final
{
public:
	struct FTemplateViewData                      templateData;                                      // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemplateViewInterface_TemplateExampleFunction) == 0x000001, "Wrong alignment on TemplateViewInterface_TemplateExampleFunction");
static_assert(sizeof(TemplateViewInterface_TemplateExampleFunction) == 0x000001, "Wrong size on TemplateViewInterface_TemplateExampleFunction");
static_assert(offsetof(TemplateViewInterface_TemplateExampleFunction, templateData) == 0x000000, "Member 'TemplateViewInterface_TemplateExampleFunction::templateData' has a wrong offset!");

// Function DBDUIViewInterfaces.TestBuildFlagViewInterface.UpdateWidget
// 0x0002 (0x0002 - 0x0000)
struct TestBuildFlagViewInterface_UpdateWidget final
{
public:
	ETestBuildType                                testBuildType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETestBuildFlagPosition                        testBuildFlagPosition;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestBuildFlagViewInterface_UpdateWidget) == 0x000001, "Wrong alignment on TestBuildFlagViewInterface_UpdateWidget");
static_assert(sizeof(TestBuildFlagViewInterface_UpdateWidget) == 0x000002, "Wrong size on TestBuildFlagViewInterface_UpdateWidget");
static_assert(offsetof(TestBuildFlagViewInterface_UpdateWidget, testBuildType) == 0x000000, "Member 'TestBuildFlagViewInterface_UpdateWidget::testBuildType' has a wrong offset!");
static_assert(offsetof(TestBuildFlagViewInterface_UpdateWidget, testBuildFlagPosition) == 0x000001, "Member 'TestBuildFlagViewInterface_UpdateWidget::testBuildFlagPosition' has a wrong offset!");

// Function DBDUIViewInterfaces.TutorialHighlightViewInterface.SetTutorialHighlight
// 0x0002 (0x0002 - 0x0000)
struct TutorialHighlightViewInterface_SetTutorialHighlight final
{
public:
	bool                                          show;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHudComponent                                 componentId;                                       // 0x0001(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialHighlightViewInterface_SetTutorialHighlight) == 0x000001, "Wrong alignment on TutorialHighlightViewInterface_SetTutorialHighlight");
static_assert(sizeof(TutorialHighlightViewInterface_SetTutorialHighlight) == 0x000002, "Wrong size on TutorialHighlightViewInterface_SetTutorialHighlight");
static_assert(offsetof(TutorialHighlightViewInterface_SetTutorialHighlight, show) == 0x000000, "Member 'TutorialHighlightViewInterface_SetTutorialHighlight::show' has a wrong offset!");
static_assert(offsetof(TutorialHighlightViewInterface_SetTutorialHighlight, componentId) == 0x000001, "Member 'TutorialHighlightViewInterface_SetTutorialHighlight::componentId' has a wrong offset!");

// Function DBDUIViewInterfaces.TutorialMysteryNoteViewInterface.ShowMysteryNote
// 0x0080 (0x0080 - 0x0000)
struct TutorialMysteryNoteViewInterface_ShowMysteryNote final
{
public:
	struct FNotifTutorialPopupViewData            notifData;                                         // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialMysteryNoteViewInterface_ShowMysteryNote) == 0x000008, "Wrong alignment on TutorialMysteryNoteViewInterface_ShowMysteryNote");
static_assert(sizeof(TutorialMysteryNoteViewInterface_ShowMysteryNote) == 0x000080, "Wrong size on TutorialMysteryNoteViewInterface_ShowMysteryNote");
static_assert(offsetof(TutorialMysteryNoteViewInterface_ShowMysteryNote, notifData) == 0x000000, "Member 'TutorialMysteryNoteViewInterface_ShowMysteryNote::notifData' has a wrong offset!");

// Function DBDUIViewInterfaces.TutorialObjectivesViewInterface.AddTutorialObjective
// 0x0180 (0x0180 - 0x0000)
struct TutorialObjectivesViewInterface_AddTutorialObjective final
{
public:
	class FName                                   id;                                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTutorialObjectivesViewData            interactionPromptViewData;                         // 0x0010(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialObjectivesViewInterface_AddTutorialObjective) == 0x000008, "Wrong alignment on TutorialObjectivesViewInterface_AddTutorialObjective");
static_assert(sizeof(TutorialObjectivesViewInterface_AddTutorialObjective) == 0x000180, "Wrong size on TutorialObjectivesViewInterface_AddTutorialObjective");
static_assert(offsetof(TutorialObjectivesViewInterface_AddTutorialObjective, id) == 0x000000, "Member 'TutorialObjectivesViewInterface_AddTutorialObjective::id' has a wrong offset!");
static_assert(offsetof(TutorialObjectivesViewInterface_AddTutorialObjective, interactionPromptViewData) == 0x000010, "Member 'TutorialObjectivesViewInterface_AddTutorialObjective::interactionPromptViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.TutorialObjectivesViewInterface.CompleteTutorialObjective
// 0x0010 (0x0010 - 0x0000)
struct TutorialObjectivesViewInterface_CompleteTutorialObjective final
{
public:
	class FName                                   id;                                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          removeAfterCompletion;                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialObjectivesViewInterface_CompleteTutorialObjective) == 0x000004, "Wrong alignment on TutorialObjectivesViewInterface_CompleteTutorialObjective");
static_assert(sizeof(TutorialObjectivesViewInterface_CompleteTutorialObjective) == 0x000010, "Wrong size on TutorialObjectivesViewInterface_CompleteTutorialObjective");
static_assert(offsetof(TutorialObjectivesViewInterface_CompleteTutorialObjective, id) == 0x000000, "Member 'TutorialObjectivesViewInterface_CompleteTutorialObjective::id' has a wrong offset!");
static_assert(offsetof(TutorialObjectivesViewInterface_CompleteTutorialObjective, removeAfterCompletion) == 0x00000C, "Member 'TutorialObjectivesViewInterface_CompleteTutorialObjective::removeAfterCompletion' has a wrong offset!");

// Function DBDUIViewInterfaces.TutorialObjectivesViewInterface.RemoveTutorialObjective
// 0x000C (0x000C - 0x0000)
struct TutorialObjectivesViewInterface_RemoveTutorialObjective final
{
public:
	class FName                                   id;                                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialObjectivesViewInterface_RemoveTutorialObjective) == 0x000004, "Wrong alignment on TutorialObjectivesViewInterface_RemoveTutorialObjective");
static_assert(sizeof(TutorialObjectivesViewInterface_RemoveTutorialObjective) == 0x00000C, "Wrong size on TutorialObjectivesViewInterface_RemoveTutorialObjective");
static_assert(offsetof(TutorialObjectivesViewInterface_RemoveTutorialObjective, id) == 0x000000, "Member 'TutorialObjectivesViewInterface_RemoveTutorialObjective::id' has a wrong offset!");

// Function DBDUIViewInterfaces.TutorialPopupViewInterface.HideTutorialPopup
// 0x0001 (0x0001 - 0x0000)
struct TutorialPopupViewInterface_HideTutorialPopup final
{
public:
	bool                                          playSoundEffect;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialPopupViewInterface_HideTutorialPopup) == 0x000001, "Wrong alignment on TutorialPopupViewInterface_HideTutorialPopup");
static_assert(sizeof(TutorialPopupViewInterface_HideTutorialPopup) == 0x000001, "Wrong size on TutorialPopupViewInterface_HideTutorialPopup");
static_assert(offsetof(TutorialPopupViewInterface_HideTutorialPopup, playSoundEffect) == 0x000000, "Member 'TutorialPopupViewInterface_HideTutorialPopup::playSoundEffect' has a wrong offset!");

// Function DBDUIViewInterfaces.TutorialPopupViewInterface.ShowNotifTutorialPopup
// 0x0080 (0x0080 - 0x0000)
struct TutorialPopupViewInterface_ShowNotifTutorialPopup final
{
public:
	struct FNotifTutorialPopupViewData            notifTutoData;                                     // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialPopupViewInterface_ShowNotifTutorialPopup) == 0x000008, "Wrong alignment on TutorialPopupViewInterface_ShowNotifTutorialPopup");
static_assert(sizeof(TutorialPopupViewInterface_ShowNotifTutorialPopup) == 0x000080, "Wrong size on TutorialPopupViewInterface_ShowNotifTutorialPopup");
static_assert(offsetof(TutorialPopupViewInterface_ShowNotifTutorialPopup, notifTutoData) == 0x000000, "Member 'TutorialPopupViewInterface_ShowNotifTutorialPopup::notifTutoData' has a wrong offset!");

// Function DBDUIViewInterfaces.UIUtilities.ConvertArchiveCurrentAndMaxProgressionInPercentage
// 0x0008 (0x0008 - 0x0000)
struct UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage final
{
public:
	int32                                         outCurrentProgression;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         outMaxProgression;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage) == 0x000004, "Wrong alignment on UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage");
static_assert(sizeof(UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage) == 0x000008, "Wrong size on UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage");
static_assert(offsetof(UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage, outCurrentProgression) == 0x000000, "Member 'UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage::outCurrentProgression' has a wrong offset!");
static_assert(offsetof(UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage, outMaxProgression) == 0x000004, "Member 'UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage::outMaxProgression' has a wrong offset!");

// Function DBDUIViewInterfaces.WatermarkViewInterface.SetSteamValuesText
// 0x0020 (0x0020 - 0x0000)
struct WatermarkViewInterface_SetSteamValuesText final
{
public:
	class FString                                 SteamName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WatermarkViewInterface_SetSteamValuesText) == 0x000008, "Wrong alignment on WatermarkViewInterface_SetSteamValuesText");
static_assert(sizeof(WatermarkViewInterface_SetSteamValuesText) == 0x000020, "Wrong size on WatermarkViewInterface_SetSteamValuesText");
static_assert(offsetof(WatermarkViewInterface_SetSteamValuesText, SteamName) == 0x000000, "Member 'WatermarkViewInterface_SetSteamValuesText::SteamName' has a wrong offset!");
static_assert(offsetof(WatermarkViewInterface_SetSteamValuesText, SteamId) == 0x000010, "Member 'WatermarkViewInterface_SetSteamValuesText::SteamId' has a wrong offset!");

}

