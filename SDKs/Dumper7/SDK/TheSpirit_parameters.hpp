#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheSpirit

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "TheSpirit_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function TheSpirit.ActivePhaseWalkInteraction.Cosmetic_ResetChargeVFX
// 0x0008 (0x0008 - 0x0000)
struct ActivePhaseWalkInteraction_Cosmetic_ResetChargeVFX final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActivePhaseWalkInteraction_Cosmetic_ResetChargeVFX) == 0x000008, "Wrong alignment on ActivePhaseWalkInteraction_Cosmetic_ResetChargeVFX");
static_assert(sizeof(ActivePhaseWalkInteraction_Cosmetic_ResetChargeVFX) == 0x000008, "Wrong size on ActivePhaseWalkInteraction_Cosmetic_ResetChargeVFX");
static_assert(offsetof(ActivePhaseWalkInteraction_Cosmetic_ResetChargeVFX, player) == 0x000000, "Member 'ActivePhaseWalkInteraction_Cosmetic_ResetChargeVFX::player' has a wrong offset!");

// Function TheSpirit.ActivePhaseWalkInteraction.OnPlayerLocallyObservedChanged
// 0x0008 (0x0008 - 0x0000)
struct ActivePhaseWalkInteraction_OnPlayerLocallyObservedChanged final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActivePhaseWalkInteraction_OnPlayerLocallyObservedChanged) == 0x000008, "Wrong alignment on ActivePhaseWalkInteraction_OnPlayerLocallyObservedChanged");
static_assert(sizeof(ActivePhaseWalkInteraction_OnPlayerLocallyObservedChanged) == 0x000008, "Wrong size on ActivePhaseWalkInteraction_OnPlayerLocallyObservedChanged");
static_assert(offsetof(ActivePhaseWalkInteraction_OnPlayerLocallyObservedChanged, player) == 0x000000, "Member 'ActivePhaseWalkInteraction_OnPlayerLocallyObservedChanged::player' has a wrong offset!");

// Function TheSpirit.ActivePhaseWalkInteraction.OnPowerCollected
// 0x0008 (0x0008 - 0x0000)
struct ActivePhaseWalkInteraction_OnPowerCollected final
{
public:
	class ADBDPlayer*                             collector;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActivePhaseWalkInteraction_OnPowerCollected) == 0x000008, "Wrong alignment on ActivePhaseWalkInteraction_OnPowerCollected");
static_assert(sizeof(ActivePhaseWalkInteraction_OnPowerCollected) == 0x000008, "Wrong size on ActivePhaseWalkInteraction_OnPowerCollected");
static_assert(offsetof(ActivePhaseWalkInteraction_OnPowerCollected, collector) == 0x000000, "Member 'ActivePhaseWalkInteraction_OnPowerCollected::collector' has a wrong offset!");

// Function TheSpirit.ActivePhaseWalkInteraction.GetChargeTime
// 0x0004 (0x0004 - 0x0000)
struct ActivePhaseWalkInteraction_GetChargeTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActivePhaseWalkInteraction_GetChargeTime) == 0x000004, "Wrong alignment on ActivePhaseWalkInteraction_GetChargeTime");
static_assert(sizeof(ActivePhaseWalkInteraction_GetChargeTime) == 0x000004, "Wrong size on ActivePhaseWalkInteraction_GetChargeTime");
static_assert(offsetof(ActivePhaseWalkInteraction_GetChargeTime, ReturnValue) == 0x000000, "Member 'ActivePhaseWalkInteraction_GetChargeTime::ReturnValue' has a wrong offset!");

// Function TheSpirit.Diversion.Authority_OnOwningSurvivorDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct Diversion_Authority_OnOwningSurvivorDamageStateChanged final
{
public:
	ECamperDamageState                            oldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            currentDamageState;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Diversion_Authority_OnOwningSurvivorDamageStateChanged) == 0x000001, "Wrong alignment on Diversion_Authority_OnOwningSurvivorDamageStateChanged");
static_assert(sizeof(Diversion_Authority_OnOwningSurvivorDamageStateChanged) == 0x000002, "Wrong size on Diversion_Authority_OnOwningSurvivorDamageStateChanged");
static_assert(offsetof(Diversion_Authority_OnOwningSurvivorDamageStateChanged, oldDamageState) == 0x000000, "Member 'Diversion_Authority_OnOwningSurvivorDamageStateChanged::oldDamageState' has a wrong offset!");
static_assert(offsetof(Diversion_Authority_OnOwningSurvivorDamageStateChanged, currentDamageState) == 0x000001, "Member 'Diversion_Authority_OnOwningSurvivorDamageStateChanged::currentDamageState' has a wrong offset!");

// Function TheSpirit.Diversion.Authority_OnOwningSurvivorImmobilizedStateChanged
// 0x0002 (0x0002 - 0x0000)
struct Diversion_Authority_OnOwningSurvivorImmobilizedStateChanged final
{
public:
	ECamperImmobilizeState                        oldImmobilizeState;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperImmobilizeState                        newImmobilizeState;                                // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Diversion_Authority_OnOwningSurvivorImmobilizedStateChanged) == 0x000001, "Wrong alignment on Diversion_Authority_OnOwningSurvivorImmobilizedStateChanged");
static_assert(sizeof(Diversion_Authority_OnOwningSurvivorImmobilizedStateChanged) == 0x000002, "Wrong size on Diversion_Authority_OnOwningSurvivorImmobilizedStateChanged");
static_assert(offsetof(Diversion_Authority_OnOwningSurvivorImmobilizedStateChanged, oldImmobilizeState) == 0x000000, "Member 'Diversion_Authority_OnOwningSurvivorImmobilizedStateChanged::oldImmobilizeState' has a wrong offset!");
static_assert(offsetof(Diversion_Authority_OnOwningSurvivorImmobilizedStateChanged, newImmobilizeState) == 0x000001, "Member 'Diversion_Authority_OnOwningSurvivorImmobilizedStateChanged::newImmobilizeState' has a wrong offset!");

// Function TheSpirit.OwningPlayerInSpiritHuskRange.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct OwningPlayerInSpiritHuskRange_OnKillerSet final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OwningPlayerInSpiritHuskRange_OnKillerSet) == 0x000008, "Wrong alignment on OwningPlayerInSpiritHuskRange_OnKillerSet");
static_assert(sizeof(OwningPlayerInSpiritHuskRange_OnKillerSet) == 0x000008, "Wrong size on OwningPlayerInSpiritHuskRange_OnKillerSet");
static_assert(offsetof(OwningPlayerInSpiritHuskRange_OnKillerSet, killer) == 0x000000, "Member 'OwningPlayerInSpiritHuskRange_OnKillerSet::killer' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.Authority_SetIsInPostActivePhaseWalk
// 0x0001 (0x0001 - 0x0000)
struct PhaseWalkingComponent_Authority_SetIsInPostActivePhaseWalk final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_Authority_SetIsInPostActivePhaseWalk) == 0x000001, "Wrong alignment on PhaseWalkingComponent_Authority_SetIsInPostActivePhaseWalk");
static_assert(sizeof(PhaseWalkingComponent_Authority_SetIsInPostActivePhaseWalk) == 0x000001, "Wrong size on PhaseWalkingComponent_Authority_SetIsInPostActivePhaseWalk");
static_assert(offsetof(PhaseWalkingComponent_Authority_SetIsInPostActivePhaseWalk, value) == 0x000000, "Member 'PhaseWalkingComponent_Authority_SetIsInPostActivePhaseWalk::value' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.Local_PhaseWalk
// 0x0020 (0x0020 - 0x0000)
struct PhaseWalkingComponent_Local_PhaseWalk final
{
public:
	struct FPhaseWalkInfo                         phaseWalkInfo;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_Local_PhaseWalk) == 0x000004, "Wrong alignment on PhaseWalkingComponent_Local_PhaseWalk");
static_assert(sizeof(PhaseWalkingComponent_Local_PhaseWalk) == 0x000020, "Wrong size on PhaseWalkingComponent_Local_PhaseWalk");
static_assert(offsetof(PhaseWalkingComponent_Local_PhaseWalk, phaseWalkInfo) == 0x000000, "Member 'PhaseWalkingComponent_Local_PhaseWalk::phaseWalkInfo' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.MakePassivePhaseWalkHusksVisible
// 0x0040 (0x0040 - 0x0000)
struct PhaseWalkingComponent_MakePassivePhaseWalkHusksVisible final
{
public:
	struct FTransform                             huskTransform;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         opacityValue;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         speedValue;                                        // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhaseWalkingComponent_MakePassivePhaseWalkHusksVisible) == 0x000010, "Wrong alignment on PhaseWalkingComponent_MakePassivePhaseWalkHusksVisible");
static_assert(sizeof(PhaseWalkingComponent_MakePassivePhaseWalkHusksVisible) == 0x000040, "Wrong size on PhaseWalkingComponent_MakePassivePhaseWalkHusksVisible");
static_assert(offsetof(PhaseWalkingComponent_MakePassivePhaseWalkHusksVisible, huskTransform) == 0x000000, "Member 'PhaseWalkingComponent_MakePassivePhaseWalkHusksVisible::huskTransform' has a wrong offset!");
static_assert(offsetof(PhaseWalkingComponent_MakePassivePhaseWalkHusksVisible, opacityValue) == 0x000030, "Member 'PhaseWalkingComponent_MakePassivePhaseWalkHusksVisible::opacityValue' has a wrong offset!");
static_assert(offsetof(PhaseWalkingComponent_MakePassivePhaseWalkHusksVisible, speedValue) == 0x000034, "Member 'PhaseWalkingComponent_MakePassivePhaseWalkHusksVisible::speedValue' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.ModifyActivePhaseWalkCharges
// 0x0004 (0x0004 - 0x0000)
struct PhaseWalkingComponent_ModifyActivePhaseWalkCharges final
{
public:
	float                                         delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_ModifyActivePhaseWalkCharges) == 0x000004, "Wrong alignment on PhaseWalkingComponent_ModifyActivePhaseWalkCharges");
static_assert(sizeof(PhaseWalkingComponent_ModifyActivePhaseWalkCharges) == 0x000004, "Wrong size on PhaseWalkingComponent_ModifyActivePhaseWalkCharges");
static_assert(offsetof(PhaseWalkingComponent_ModifyActivePhaseWalkCharges, delta) == 0x000000, "Member 'PhaseWalkingComponent_ModifyActivePhaseWalkCharges::delta' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.Multicast_Broadcast_PhaseWalk
// 0x0020 (0x0020 - 0x0000)
struct PhaseWalkingComponent_Multicast_Broadcast_PhaseWalk final
{
public:
	struct FPhaseWalkInfo                         phaseWalkInfo;                                     // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_Multicast_Broadcast_PhaseWalk) == 0x000004, "Wrong alignment on PhaseWalkingComponent_Multicast_Broadcast_PhaseWalk");
static_assert(sizeof(PhaseWalkingComponent_Multicast_Broadcast_PhaseWalk) == 0x000020, "Wrong size on PhaseWalkingComponent_Multicast_Broadcast_PhaseWalk");
static_assert(offsetof(PhaseWalkingComponent_Multicast_Broadcast_PhaseWalk, phaseWalkInfo) == 0x000000, "Member 'PhaseWalkingComponent_Multicast_Broadcast_PhaseWalk::phaseWalkInfo' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.Server_Broadcast_PhaseWalk
// 0x0020 (0x0020 - 0x0000)
struct PhaseWalkingComponent_Server_Broadcast_PhaseWalk final
{
public:
	struct FPhaseWalkInfo                         phaseWalkInfo;                                     // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_Server_Broadcast_PhaseWalk) == 0x000004, "Wrong alignment on PhaseWalkingComponent_Server_Broadcast_PhaseWalk");
static_assert(sizeof(PhaseWalkingComponent_Server_Broadcast_PhaseWalk) == 0x000020, "Wrong size on PhaseWalkingComponent_Server_Broadcast_PhaseWalk");
static_assert(offsetof(PhaseWalkingComponent_Server_Broadcast_PhaseWalk, phaseWalkInfo) == 0x000000, "Member 'PhaseWalkingComponent_Server_Broadcast_PhaseWalk::phaseWalkInfo' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.UpdateSurvivorVisibility
// 0x0001 (0x0001 - 0x0000)
struct PhaseWalkingComponent_UpdateSurvivorVisibility final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_UpdateSurvivorVisibility) == 0x000001, "Wrong alignment on PhaseWalkingComponent_UpdateSurvivorVisibility");
static_assert(sizeof(PhaseWalkingComponent_UpdateSurvivorVisibility) == 0x000001, "Wrong size on PhaseWalkingComponent_UpdateSurvivorVisibility");
static_assert(offsetof(PhaseWalkingComponent_UpdateSurvivorVisibility, visible) == 0x000000, "Member 'PhaseWalkingComponent_UpdateSurvivorVisibility::visible' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.CanStartActivePhaseWalk
// 0x0001 (0x0001 - 0x0000)
struct PhaseWalkingComponent_CanStartActivePhaseWalk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_CanStartActivePhaseWalk) == 0x000001, "Wrong alignment on PhaseWalkingComponent_CanStartActivePhaseWalk");
static_assert(sizeof(PhaseWalkingComponent_CanStartActivePhaseWalk) == 0x000001, "Wrong size on PhaseWalkingComponent_CanStartActivePhaseWalk");
static_assert(offsetof(PhaseWalkingComponent_CanStartActivePhaseWalk, ReturnValue) == 0x000000, "Member 'PhaseWalkingComponent_CanStartActivePhaseWalk::ReturnValue' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.GetActivePhaseWalkChargePercentage
// 0x0004 (0x0004 - 0x0000)
struct PhaseWalkingComponent_GetActivePhaseWalkChargePercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_GetActivePhaseWalkChargePercentage) == 0x000004, "Wrong alignment on PhaseWalkingComponent_GetActivePhaseWalkChargePercentage");
static_assert(sizeof(PhaseWalkingComponent_GetActivePhaseWalkChargePercentage) == 0x000004, "Wrong size on PhaseWalkingComponent_GetActivePhaseWalkChargePercentage");
static_assert(offsetof(PhaseWalkingComponent_GetActivePhaseWalkChargePercentage, ReturnValue) == 0x000000, "Member 'PhaseWalkingComponent_GetActivePhaseWalkChargePercentage::ReturnValue' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.GetActivePhaseWalkCharges
// 0x0004 (0x0004 - 0x0000)
struct PhaseWalkingComponent_GetActivePhaseWalkCharges final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_GetActivePhaseWalkCharges) == 0x000004, "Wrong alignment on PhaseWalkingComponent_GetActivePhaseWalkCharges");
static_assert(sizeof(PhaseWalkingComponent_GetActivePhaseWalkCharges) == 0x000004, "Wrong size on PhaseWalkingComponent_GetActivePhaseWalkCharges");
static_assert(offsetof(PhaseWalkingComponent_GetActivePhaseWalkCharges, ReturnValue) == 0x000000, "Member 'PhaseWalkingComponent_GetActivePhaseWalkCharges::ReturnValue' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.GetDecoySlasherComponent
// 0x0008 (0x0008 - 0x0000)
struct PhaseWalkingComponent_GetDecoySlasherComponent final
{
public:
	class UDecoySlasherComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_GetDecoySlasherComponent) == 0x000008, "Wrong alignment on PhaseWalkingComponent_GetDecoySlasherComponent");
static_assert(sizeof(PhaseWalkingComponent_GetDecoySlasherComponent) == 0x000008, "Wrong size on PhaseWalkingComponent_GetDecoySlasherComponent");
static_assert(offsetof(PhaseWalkingComponent_GetDecoySlasherComponent, ReturnValue) == 0x000000, "Member 'PhaseWalkingComponent_GetDecoySlasherComponent::ReturnValue' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.GetHusk
// 0x0008 (0x0008 - 0x0000)
struct PhaseWalkingComponent_GetHusk final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_GetHusk) == 0x000008, "Wrong alignment on PhaseWalkingComponent_GetHusk");
static_assert(sizeof(PhaseWalkingComponent_GetHusk) == 0x000008, "Wrong size on PhaseWalkingComponent_GetHusk");
static_assert(offsetof(PhaseWalkingComponent_GetHusk, ReturnValue) == 0x000000, "Member 'PhaseWalkingComponent_GetHusk::ReturnValue' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.GetPassivePhaseWalkTimer
// 0x0028 (0x0028 - 0x0000)
struct PhaseWalkingComponent_GetPassivePhaseWalkTimer final
{
public:
	struct FDBDTimer                              ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_GetPassivePhaseWalkTimer) == 0x000008, "Wrong alignment on PhaseWalkingComponent_GetPassivePhaseWalkTimer");
static_assert(sizeof(PhaseWalkingComponent_GetPassivePhaseWalkTimer) == 0x000028, "Wrong size on PhaseWalkingComponent_GetPassivePhaseWalkTimer");
static_assert(offsetof(PhaseWalkingComponent_GetPassivePhaseWalkTimer, ReturnValue) == 0x000000, "Member 'PhaseWalkingComponent_GetPassivePhaseWalkTimer::ReturnValue' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.GetSpiritPassivePhaseWalkHusksCountToSpawn
// 0x0004 (0x0004 - 0x0000)
struct PhaseWalkingComponent_GetSpiritPassivePhaseWalkHusksCountToSpawn final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_GetSpiritPassivePhaseWalkHusksCountToSpawn) == 0x000004, "Wrong alignment on PhaseWalkingComponent_GetSpiritPassivePhaseWalkHusksCountToSpawn");
static_assert(sizeof(PhaseWalkingComponent_GetSpiritPassivePhaseWalkHusksCountToSpawn) == 0x000004, "Wrong size on PhaseWalkingComponent_GetSpiritPassivePhaseWalkHusksCountToSpawn");
static_assert(offsetof(PhaseWalkingComponent_GetSpiritPassivePhaseWalkHusksCountToSpawn, ReturnValue) == 0x000000, "Member 'PhaseWalkingComponent_GetSpiritPassivePhaseWalkHusksCountToSpawn::ReturnValue' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.IsActivePhaseWalking
// 0x0001 (0x0001 - 0x0000)
struct PhaseWalkingComponent_IsActivePhaseWalking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_IsActivePhaseWalking) == 0x000001, "Wrong alignment on PhaseWalkingComponent_IsActivePhaseWalking");
static_assert(sizeof(PhaseWalkingComponent_IsActivePhaseWalking) == 0x000001, "Wrong size on PhaseWalkingComponent_IsActivePhaseWalking");
static_assert(offsetof(PhaseWalkingComponent_IsActivePhaseWalking, ReturnValue) == 0x000000, "Member 'PhaseWalkingComponent_IsActivePhaseWalking::ReturnValue' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.IsDecoyActive
// 0x0001 (0x0001 - 0x0000)
struct PhaseWalkingComponent_IsDecoyActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_IsDecoyActive) == 0x000001, "Wrong alignment on PhaseWalkingComponent_IsDecoyActive");
static_assert(sizeof(PhaseWalkingComponent_IsDecoyActive) == 0x000001, "Wrong size on PhaseWalkingComponent_IsDecoyActive");
static_assert(offsetof(PhaseWalkingComponent_IsDecoyActive, ReturnValue) == 0x000000, "Member 'PhaseWalkingComponent_IsDecoyActive::ReturnValue' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.IsPassivePhaseWalking
// 0x0001 (0x0001 - 0x0000)
struct PhaseWalkingComponent_IsPassivePhaseWalking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_IsPassivePhaseWalking) == 0x000001, "Wrong alignment on PhaseWalkingComponent_IsPassivePhaseWalking");
static_assert(sizeof(PhaseWalkingComponent_IsPassivePhaseWalking) == 0x000001, "Wrong size on PhaseWalkingComponent_IsPassivePhaseWalking");
static_assert(offsetof(PhaseWalkingComponent_IsPassivePhaseWalking, ReturnValue) == 0x000000, "Member 'PhaseWalkingComponent_IsPassivePhaseWalking::ReturnValue' has a wrong offset!");

// Function TheSpirit.PhaseWalkingComponent.IsPhaseWalking
// 0x0001 (0x0001 - 0x0000)
struct PhaseWalkingComponent_IsPhaseWalking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhaseWalkingComponent_IsPhaseWalking) == 0x000001, "Wrong alignment on PhaseWalkingComponent_IsPhaseWalking");
static_assert(sizeof(PhaseWalkingComponent_IsPhaseWalking) == 0x000001, "Wrong size on PhaseWalkingComponent_IsPhaseWalking");
static_assert(offsetof(PhaseWalkingComponent_IsPhaseWalking, ReturnValue) == 0x000000, "Member 'PhaseWalkingComponent_IsPhaseWalking::ReturnValue' has a wrong offset!");

// Function TheSpirit.Rancor.GetSurvivorRevealDuration
// 0x0004 (0x0004 - 0x0000)
struct Rancor_GetSurvivorRevealDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Rancor_GetSurvivorRevealDuration) == 0x000004, "Wrong alignment on Rancor_GetSurvivorRevealDuration");
static_assert(sizeof(Rancor_GetSurvivorRevealDuration) == 0x000004, "Wrong size on Rancor_GetSurvivorRevealDuration");
static_assert(offsetof(Rancor_GetSurvivorRevealDuration, ReturnValue) == 0x000000, "Member 'Rancor_GetSurvivorRevealDuration::ReturnValue' has a wrong offset!");

// Function TheSpirit.SpiritFury.GetPalletToBreakCountAtLevel
// 0x0004 (0x0004 - 0x0000)
struct SpiritFury_GetPalletToBreakCountAtLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpiritFury_GetPalletToBreakCountAtLevel) == 0x000004, "Wrong alignment on SpiritFury_GetPalletToBreakCountAtLevel");
static_assert(sizeof(SpiritFury_GetPalletToBreakCountAtLevel) == 0x000004, "Wrong size on SpiritFury_GetPalletToBreakCountAtLevel");
static_assert(offsetof(SpiritFury_GetPalletToBreakCountAtLevel, ReturnValue) == 0x000000, "Member 'SpiritFury_GetPalletToBreakCountAtLevel::ReturnValue' has a wrong offset!");

// Function TheSpirit.SpiritHuskOutlineUpdateStrategy.OnSlasherSet
// 0x0008 (0x0008 - 0x0000)
struct SpiritHuskOutlineUpdateStrategy_OnSlasherSet final
{
public:
	class ASlasherPlayer*                         slasher;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpiritHuskOutlineUpdateStrategy_OnSlasherSet) == 0x000008, "Wrong alignment on SpiritHuskOutlineUpdateStrategy_OnSlasherSet");
static_assert(sizeof(SpiritHuskOutlineUpdateStrategy_OnSlasherSet) == 0x000008, "Wrong size on SpiritHuskOutlineUpdateStrategy_OnSlasherSet");
static_assert(offsetof(SpiritHuskOutlineUpdateStrategy_OnSlasherSet, slasher) == 0x000000, "Member 'SpiritHuskOutlineUpdateStrategy_OnSlasherSet::slasher' has a wrong offset!");

}

