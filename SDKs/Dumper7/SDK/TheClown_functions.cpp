#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheClown

#include "Basic.hpp"

#include "TheClown_classes.hpp"
#include "TheClown_parameters.hpp"


namespace SDK
{

// Function TheClown.AISkill_InteractionTarget_ThrowAntidote.OnPathUpdated
// (Final, Native, Protected)

void UAISkill_InteractionTarget_ThrowAntidote::OnPathUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AISkill_InteractionTarget_ThrowAntidote", "OnPathUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BaseGasCloudProjectile.ActivateCosmetic_BP
// (Event, Protected, BlueprintEvent)

void ABaseGasCloudProjectile::ActivateCosmetic_BP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGasCloudProjectile", "ActivateCosmetic_BP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheClown.BaseGasCloudProjectile.Authority_SetCumulativeLifetime
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// const float                             value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABaseGasCloudProjectile::Authority_SetCumulativeLifetime(const float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGasCloudProjectile", "Authority_SetCumulativeLifetime");

	Params::BaseGasCloudProjectile_Authority_SetCumulativeLifetime Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BaseGasCloudProjectile.DissipateGasCloud
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABaseGasCloudProjectile::DissipateGasCloud()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGasCloudProjectile", "DissipateGasCloud");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BaseGasCloudProjectile.GetGasType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBombType                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBombType ABaseGasCloudProjectile::GetGasType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGasCloudProjectile", "GetGasType");

	Params::BaseGasCloudProjectile_GetGasType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.BaseGasCloudProjectile.IsDissipating
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABaseGasCloudProjectile::IsDissipating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGasCloudProjectile", "IsDissipating");

	Params::BaseGasCloudProjectile_IsDissipating Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.BaseGasCloudProjectile.IsSurvivorDetectionEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABaseGasCloudProjectile::IsSurvivorDetectionEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGasCloudProjectile", "IsSurvivorDetectionEnabled");

	Params::BaseGasCloudProjectile_IsSurvivorDetectionEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.BaseGasCloudProjectile.Multicast_DissipateGasCloud
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void ABaseGasCloudProjectile::Multicast_DissipateGasCloud()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGasCloudProjectile", "Multicast_DissipateGasCloud");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BaseGasCloudProjectile.OnAcquiredChanged
// (Final, Native, Private)
// Parameters:
// bool                                    acquired                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABaseGasCloudProjectile::OnAcquiredChanged(bool acquired)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGasCloudProjectile", "OnAcquiredChanged");

	Params::BaseGasCloudProjectile_OnAcquiredChanged Parms{};

	Parms.acquired = acquired;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BaseGasCloudProjectile.OnDelayedActivationStart
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABaseGasCloudProjectile::OnDelayedActivationStart(float delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGasCloudProjectile", "OnDelayedActivationStart");

	Params::BaseGasCloudProjectile_OnDelayedActivationStart Parms{};

	Parms.delay = delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheClown.BaseGasCloudProjectile.OnOverlapBegin
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              hitComp                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           otherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              otherComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   otherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                sweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ABaseGasCloudProjectile::OnOverlapBegin(class UPrimitiveComponent* hitComp, class AActor* otherActor, class UPrimitiveComponent* otherComponent, int32 otherBodyIndex, bool bFromSweep, const struct FHitResult& sweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGasCloudProjectile", "OnOverlapBegin");

	Params::BaseGasCloudProjectile_OnOverlapBegin Parms{};

	Parms.hitComp = hitComp;
	Parms.otherActor = otherActor;
	Parms.otherComponent = otherComponent;
	Parms.otherBodyIndex = otherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.sweepResult = std::move(sweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BaseGasCloudProjectile.OnOverlapEnd
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              hitComp                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           otherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              otherComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   otherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABaseGasCloudProjectile::OnOverlapEnd(class UPrimitiveComponent* hitComp, class AActor* otherActor, class UPrimitiveComponent* otherComponent, int32 otherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGasCloudProjectile", "OnOverlapEnd");

	Params::BaseGasCloudProjectile_OnOverlapEnd Parms{};

	Parms.hitComp = hitComp;
	Parms.otherActor = otherActor;
	Parms.otherComponent = otherComponent;
	Parms.otherBodyIndex = otherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BaseGasCloudProjectile.SetGasAudioActive
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    activated                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABaseGasCloudProjectile::SetGasAudioActive(bool activated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGasCloudProjectile", "SetGasAudioActive");

	Params::BaseGasCloudProjectile_SetGasAudioActive Parms{};

	Parms.activated = activated;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheClown.BaseGasCloudProjectile.SetIgnoredActors
// (Final, Native, Private)

void ABaseGasCloudProjectile::SetIgnoredActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGasCloudProjectile", "SetIgnoredActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BaseGasCloudProjectile.SetIsDissipating
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isDissipating                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABaseGasCloudProjectile::SetIsDissipating(bool isDissipating)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGasCloudProjectile", "SetIsDissipating");

	Params::BaseGasCloudProjectile_SetIsDissipating Parms{};

	Parms.isDissipating = isDissipating;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BaseGasCloudProjectile.Authority_GetCumulativeLifetime
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABaseGasCloudProjectile::Authority_GetCumulativeLifetime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseGasCloudProjectile", "Authority_GetCumulativeLifetime");

	Params::BaseGasCloudProjectile_Authority_GetCumulativeLifetime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.BoilOverPerk.Authority_OnPlayerPickedUpEnd
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       picker                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoilOverPerk::Authority_OnPlayerPickedUpEnd(class ADBDPlayer* picker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoilOverPerk", "Authority_OnPlayerPickedUpEnd");

	Params::BoilOverPerk_Authority_OnPlayerPickedUpEnd Parms{};

	Parms.picker = picker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BoilOverPerk.Authority_OnWiggleEnd
// (Final, Native, Private)

void UBoilOverPerk::Authority_OnWiggleEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoilOverPerk", "Authority_OnWiggleEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BoilOverPerk.GetAdditionnalWigglingProgressAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBoilOverPerk::GetAdditionnalWigglingProgressAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoilOverPerk", "GetAdditionnalWigglingProgressAtLevel");

	Params::BoilOverPerk_GetAdditionnalWigglingProgressAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.BoilOverPerk.GetGreatHeightsValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBoilOverPerk::GetGreatHeightsValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoilOverPerk", "GetGreatHeightsValue");

	Params::BoilOverPerk_GetGreatHeightsValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.BombLauncher.Local_SwitchBombType
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBombLauncher::Local_SwitchBombType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BombLauncher", "Local_SwitchBombType");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheClown.BombLauncher.LocalLaunch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   percentThrowStrength                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBombLauncher::LocalLaunch(float percentThrowStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BombLauncher", "LocalLaunch");

	Params::BombLauncher_LocalLaunch Parms{};

	Parms.percentThrowStrength = percentThrowStrength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BombLauncher.Server_SwitchBombType
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)

void UBombLauncher::Server_SwitchBombType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BombLauncher", "Server_SwitchBombType");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BombLauncher.SetPercentThrowStrength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   throwStrength                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBombLauncher::SetPercentThrowStrength(float throwStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BombLauncher", "SetPercentThrowStrength");

	Params::BombLauncher_SetPercentThrowStrength Parms{};

	Parms.throwStrength = throwStrength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BombLauncher.SetProjectilePitchCurve
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCurveFloat*                      newProjectilePitchCurve                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBombLauncher::SetProjectilePitchCurve(class UCurveFloat* newProjectilePitchCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BombLauncher", "SetProjectilePitchCurve");

	Params::BombLauncher_SetProjectilePitchCurve Parms{};

	Parms.newProjectilePitchCurve = newProjectilePitchCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BombLauncher.SetProjectileSpeedCurve
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCurveFloat*                      newProjectileSpeedCurve                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBombLauncher::SetProjectileSpeedCurve(class UCurveFloat* newProjectileSpeedCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BombLauncher", "SetProjectileSpeedCurve");

	Params::BombLauncher_SetProjectileSpeedCurve Parms{};

	Parms.newProjectileSpeedCurve = newProjectileSpeedCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.BombLauncher.GetCurrentBombType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBombType                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBombType UBombLauncher::GetCurrentBombType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BombLauncher", "GetCurrentBombType");

	Params::BombLauncher_GetCurrentBombType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.BombLauncher.GetPercentThrowStrenght
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBombLauncher::GetPercentThrowStrenght() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BombLauncher", "GetPercentThrowStrenght");

	Params::BombLauncher_GetPercentThrowStrenght Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.BombLauncher.IsBombFullyCharged
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBombLauncher::IsBombFullyCharged() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BombLauncher", "IsBombFullyCharged");

	Params::BombLauncher_IsBombFullyCharged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.DanceWithMePerk.Authority_OnPerkActivate
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FGameplayTag&              gameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameEventData&            gameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDanceWithMePerk::Authority_OnPerkActivate(const struct FGameplayTag& gameplayTag, const struct FGameEventData& gameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DanceWithMePerk", "Authority_OnPerkActivate");

	Params::DanceWithMePerk_Authority_OnPerkActivate Parms{};

	Parms.gameplayTag = std::move(gameplayTag);
	Parms.gameEventData = std::move(gameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.GasDizzyCosmeticEffect.Cosmetic_SetDizzyEffectActive
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    isActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGasDizzyCosmeticEffect::Cosmetic_SetDizzyEffectActive(bool isActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GasDizzyCosmeticEffect", "Cosmetic_SetDizzyEffectActive");

	Params::GasDizzyCosmeticEffect_Cosmetic_SetDizzyEffectActive Parms{};

	Parms.isActive = isActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheClown.GasDizzyCosmeticEffect.SetWantsDizzyEffectActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGasDizzyCosmeticEffect::SetWantsDizzyEffectActive(bool isActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GasDizzyCosmeticEffect", "SetWantsDizzyEffectActive");

	Params::GasDizzyCosmeticEffect_SetWantsDizzyEffectActive Parms{};

	Parms.isActive = isActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.GassedStatusEffect.Authority_AddOverlappingCloud
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ABaseGasCloudProjectile*          cloud                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGassedStatusEffect::Authority_AddOverlappingCloud(class ABaseGasCloudProjectile* cloud)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "Authority_AddOverlappingCloud");

	Params::GassedStatusEffect_Authority_AddOverlappingCloud Parms{};

	Parms.cloud = cloud;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.GassedStatusEffect.Authority_RemoveOverlappingCloud
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ABaseGasCloudProjectile*          cloud                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGassedStatusEffect::Authority_RemoveOverlappingCloud(class ABaseGasCloudProjectile* cloud)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "Authority_RemoveOverlappingCloud");

	Params::GassedStatusEffect_Authority_RemoveOverlappingCloud Parms{};

	Parms.cloud = cloud;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.GassedStatusEffect.Authority_SetIsInAntidoteCloud
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGassedStatusEffect::Authority_SetIsInAntidoteCloud(const bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "Authority_SetIsInAntidoteCloud");

	Params::GassedStatusEffect_Authority_SetIsInAntidoteCloud Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.GassedStatusEffect.Authority_SetIsInCloud
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGassedStatusEffect::Authority_SetIsInCloud(const bool value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "Authority_SetIsInCloud");

	Params::GassedStatusEffect_Authority_SetIsInCloud Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.GassedStatusEffect.OnAntidoteEffectBegin
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   effectDuration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGassedStatusEffect::OnAntidoteEffectBegin(float effectDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "OnAntidoteEffectBegin");

	Params::GassedStatusEffect_OnAntidoteEffectBegin Parms{};

	Parms.effectDuration = effectDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheClown.GassedStatusEffect.OnAntidoteEffectEnd
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   durationSkipped                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGassedStatusEffect::OnAntidoteEffectEnd(float durationSkipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "OnAntidoteEffectEnd");

	Params::GassedStatusEffect_OnAntidoteEffectEnd Parms{};

	Parms.durationSkipped = durationSkipped;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheClown.GassedStatusEffect.OnDirectBottleHit
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBombType                               bottleType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGassedStatusEffect::OnDirectBottleHit(EBombType bottleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "OnDirectBottleHit");

	Params::GassedStatusEffect_OnDirectBottleHit Parms{};

	Parms.bottleType = bottleType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheClown.GassedStatusEffect.OnRep_IsInAntidoteCloud
// (Final, Native, Private)

void UGassedStatusEffect::OnRep_IsInAntidoteCloud()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "OnRep_IsInAntidoteCloud");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.GassedStatusEffect.OnRep_TotalTimesEnteringToxicClouds
// (Final, Native, Private)

void UGassedStatusEffect::OnRep_TotalTimesEnteringToxicClouds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "OnRep_TotalTimesEnteringToxicClouds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.GassedStatusEffect.OnToxinCured
// (Event, Protected, BlueprintEvent)

void UGassedStatusEffect::OnToxinCured()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "OnToxinCured");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheClown.GassedStatusEffect.OnToxinEffectBegin
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   effectDuration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGassedStatusEffect::OnToxinEffectBegin(float effectDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "OnToxinEffectBegin");

	Params::GassedStatusEffect_OnToxinEffectBegin Parms{};

	Parms.effectDuration = effectDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheClown.GassedStatusEffect.OnToxinEffectEnd
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   durationSkipped                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGassedStatusEffect::OnToxinEffectEnd(float durationSkipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "OnToxinEffectEnd");

	Params::GassedStatusEffect_OnToxinEffectEnd Parms{};

	Parms.durationSkipped = durationSkipped;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheClown.GassedStatusEffect.SetRemainingAntidoteDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGassedStatusEffect::SetRemainingAntidoteDuration(const float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "SetRemainingAntidoteDuration");

	Params::GassedStatusEffect_SetRemainingAntidoteDuration Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.GassedStatusEffect.SetRemainingDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGassedStatusEffect::SetRemainingDuration(const float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "SetRemainingDuration");

	Params::GassedStatusEffect_SetRemainingDuration Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheClown.GassedStatusEffect.UpdateAntidoteEffectVFX
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   durationRemaining                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGassedStatusEffect::UpdateAntidoteEffectVFX(float durationRemaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "UpdateAntidoteEffectVFX");

	Params::GassedStatusEffect_UpdateAntidoteEffectVFX Parms{};

	Parms.durationRemaining = durationRemaining;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheClown.GassedStatusEffect.GetAntidoteCloudEffectDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGassedStatusEffect::GetAntidoteCloudEffectDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "GetAntidoteCloudEffectDuration");

	Params::GassedStatusEffect_GetAntidoteCloudEffectDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.GassedStatusEffect.GetCloudEffectDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGassedStatusEffect::GetCloudEffectDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "GetCloudEffectDuration");

	Params::GassedStatusEffect_GetCloudEffectDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.GassedStatusEffect.GetRemainingAntidoteDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGassedStatusEffect::GetRemainingAntidoteDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "GetRemainingAntidoteDuration");

	Params::GassedStatusEffect_GetRemainingAntidoteDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.GassedStatusEffect.GetRemainingDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGassedStatusEffect::GetRemainingDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "GetRemainingDuration");

	Params::GassedStatusEffect_GetRemainingDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.GassedStatusEffect.IsInAntidoteCloud
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGassedStatusEffect::IsInAntidoteCloud() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "IsInAntidoteCloud");

	Params::GassedStatusEffect_IsInAntidoteCloud Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.GassedStatusEffect.IsInCloud
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGassedStatusEffect::IsInCloud() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GassedStatusEffect", "IsInCloud");

	Params::GassedStatusEffect_IsInCloud Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.TheClownUtilities.CanBeGassed
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class ADBDPlayer*                 player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTheClownUtilities::CanBeGassed(const class ADBDPlayer* player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TheClownUtilities", "CanBeGassed");

	Params::TheClownUtilities_CanBeGassed Parms{};

	Parms.player = player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.TheClownUtilities.GetActiveGasCloudTrackerComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    worldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActiveGasCloudTrackerComponent*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActiveGasCloudTrackerComponent* UTheClownUtilities::GetActiveGasCloudTrackerComponent(const class UObject* worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TheClownUtilities", "GetActiveGasCloudTrackerComponent");

	Params::TheClownUtilities_GetActiveGasCloudTrackerComponent Parms{};

	Parms.worldContextObject = worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.TheClownUtilities.GetGassedStatusEffect
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class ADBDPlayer*                 player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGassedStatusEffect*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGassedStatusEffect* UTheClownUtilities::GetGassedStatusEffect(const class ADBDPlayer* player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TheClownUtilities", "GetGassedStatusEffect");

	Params::TheClownUtilities_GetGassedStatusEffect Parms{};

	Parms.player = player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.TheClownUtilities.IsAffectedByAntidote
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class ADBDPlayer*                 player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTheClownUtilities::IsAffectedByAntidote(const class ADBDPlayer* player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TheClownUtilities", "IsAffectedByAntidote");

	Params::TheClownUtilities_IsAffectedByAntidote Parms{};

	Parms.player = player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheClown.TheClownUtilities.IsGassed
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class ADBDPlayer*                 player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTheClownUtilities::IsGassed(const class ADBDPlayer* player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TheClownUtilities", "IsGassed");

	Params::TheClownUtilities_IsGassed Parms{};

	Parms.player = player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

