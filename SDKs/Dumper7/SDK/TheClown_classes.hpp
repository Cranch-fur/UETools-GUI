#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheClown

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "DBDCompetence_structs.hpp"
#include "DBDBots_classes.hpp"
#include "DataTableUtilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "TheClown_structs.hpp"
#include "Projectile_classes.hpp"
#include "DeadByDaylight_classes.hpp"
#include "DBDAnimation_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class TheClown.ActiveGasCloudTrackerComponent
// 0x0020 (0x00D8 - 0x00B8)
class UActiveGasCloudTrackerComponent final : public UActorComponent
{
public:
	TArray<class ABaseGasCloudProjectile*>        _activeToxinClouds;                                // 0x00B8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class ABaseGasCloudProjectile*>        _activeAntidoteClouds;                             // 0x00C8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActiveGasCloudTrackerComponent">();
	}
	static class UActiveGasCloudTrackerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActiveGasCloudTrackerComponent>();
	}
};
static_assert(alignof(UActiveGasCloudTrackerComponent) == 0x000008, "Wrong alignment on UActiveGasCloudTrackerComponent");
static_assert(sizeof(UActiveGasCloudTrackerComponent) == 0x0000D8, "Wrong size on UActiveGasCloudTrackerComponent");
static_assert(offsetof(UActiveGasCloudTrackerComponent, _activeToxinClouds) == 0x0000B8, "Member 'UActiveGasCloudTrackerComponent::_activeToxinClouds' has a wrong offset!");
static_assert(offsetof(UActiveGasCloudTrackerComponent, _activeAntidoteClouds) == 0x0000C8, "Member 'UActiveGasCloudTrackerComponent::_activeAntidoteClouds' has a wrong offset!");

// Class TheClown.AISkill_InteractionTarget_ThrowAntidote
// 0x0010 (0x02B8 - 0x02A8)
class UAISkill_InteractionTarget_ThrowAntidote final : public UAISkill_InteractionTarget_Throw
{
public:
	float                                         _minPathLengthForThrow;                            // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _minThrowDistance;                                 // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _cooldownTime;                                     // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPathUpdated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_InteractionTarget_ThrowAntidote">();
	}
	static class UAISkill_InteractionTarget_ThrowAntidote* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_InteractionTarget_ThrowAntidote>();
	}
};
static_assert(alignof(UAISkill_InteractionTarget_ThrowAntidote) == 0x000008, "Wrong alignment on UAISkill_InteractionTarget_ThrowAntidote");
static_assert(sizeof(UAISkill_InteractionTarget_ThrowAntidote) == 0x0002B8, "Wrong size on UAISkill_InteractionTarget_ThrowAntidote");
static_assert(offsetof(UAISkill_InteractionTarget_ThrowAntidote, _minPathLengthForThrow) == 0x0002A8, "Member 'UAISkill_InteractionTarget_ThrowAntidote::_minPathLengthForThrow' has a wrong offset!");
static_assert(offsetof(UAISkill_InteractionTarget_ThrowAntidote, _minThrowDistance) == 0x0002AC, "Member 'UAISkill_InteractionTarget_ThrowAntidote::_minThrowDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_InteractionTarget_ThrowAntidote, _cooldownTime) == 0x0002B0, "Member 'UAISkill_InteractionTarget_ThrowAntidote::_cooldownTime' has a wrong offset!");

// Class TheClown.AISkill_InteractionTarget_ThrowToxin
// 0x0000 (0x02A8 - 0x02A8)
class UAISkill_InteractionTarget_ThrowToxin final : public UAISkill_InteractionTarget_Throw
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_InteractionTarget_ThrowToxin">();
	}
	static class UAISkill_InteractionTarget_ThrowToxin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_InteractionTarget_ThrowToxin>();
	}
};
static_assert(alignof(UAISkill_InteractionTarget_ThrowToxin) == 0x000008, "Wrong alignment on UAISkill_InteractionTarget_ThrowToxin");
static_assert(sizeof(UAISkill_InteractionTarget_ThrowToxin) == 0x0002A8, "Wrong size on UAISkill_InteractionTarget_ThrowToxin");

// Class TheClown.AISkill_Interaction_ReloadClown
// 0x0000 (0x0180 - 0x0180)
class UAISkill_Interaction_ReloadClown final : public UAISkill_Interaction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_Interaction_ReloadClown">();
	}
	static class UAISkill_Interaction_ReloadClown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_Interaction_ReloadClown>();
	}
};
static_assert(alignof(UAISkill_Interaction_ReloadClown) == 0x000008, "Wrong alignment on UAISkill_Interaction_ReloadClown");
static_assert(sizeof(UAISkill_Interaction_ReloadClown) == 0x000180, "Wrong size on UAISkill_Interaction_ReloadClown");

// Class TheClown.AISkill_Interaction_SwapToAntidote
// 0x0000 (0x0180 - 0x0180)
class UAISkill_Interaction_SwapToAntidote final : public UAISkill_Interaction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_Interaction_SwapToAntidote">();
	}
	static class UAISkill_Interaction_SwapToAntidote* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_Interaction_SwapToAntidote>();
	}
};
static_assert(alignof(UAISkill_Interaction_SwapToAntidote) == 0x000008, "Wrong alignment on UAISkill_Interaction_SwapToAntidote");
static_assert(sizeof(UAISkill_Interaction_SwapToAntidote) == 0x000180, "Wrong size on UAISkill_Interaction_SwapToAntidote");

// Class TheClown.AISkill_Interaction_SwapToToxin
// 0x0000 (0x0180 - 0x0180)
class UAISkill_Interaction_SwapToToxin final : public UAISkill_Interaction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_Interaction_SwapToToxin">();
	}
	static class UAISkill_Interaction_SwapToToxin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_Interaction_SwapToToxin>();
	}
};
static_assert(alignof(UAISkill_Interaction_SwapToToxin) == 0x000008, "Wrong alignment on UAISkill_Interaction_SwapToToxin");
static_assert(sizeof(UAISkill_Interaction_SwapToToxin) == 0x000180, "Wrong size on UAISkill_Interaction_SwapToToxin");

// Class TheClown.BaseGasCloudProjectile
// 0x0228 (0x04E0 - 0x02B8)
class ABaseGasCloudProjectile : public APhysicsBasedProjectile
{
public:
	EBombType                                     _gasType;                                          // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPoolableProjectileComponent*           _poolableProjectile;                               // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _gasCloudDuration;                                 // 0x02C8(0x0028)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _gasCloudGravityScale;                             // 0x02F0(0x0028)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _gasCloudBounciness;                               // 0x0318(0x0028)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _gasCloudFriction;                                 // 0x0340(0x0028)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _dissipateGasCloudTime;                            // 0x0368(0x0028)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _gasCloudMinimumLifetime;                          // 0x0390(0x0028)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _gasCloudSimpleCollisionRadius;                    // 0x03B8(0x0028)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _gasCloudComplexCollisionRadius;                   // 0x03E0(0x0028)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _gasCloudSurvivorDetectionRadius;                  // 0x0408(0x0028)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _gasCloudDetectionDelay;                           // 0x0430(0x0028)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _gasCloudCosmeticFadeDuration;                     // 0x0458(0x0028)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _overlappingTime;                                  // 0x0480(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _dissipating;                                      // 0x0484(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_485[0x3];                                      // 0x0485(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACamperPlayer*>                  _overlappingSurvivors;                             // 0x0488(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*               _gasParticleSystem;                                // 0x0498(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                       _simpleCollider;                                   // 0x04A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                       _complexCollider;                                  // 0x04A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpherePlayerOverlapComponent*          _survivorDetector;                                 // 0x04B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UActiveGasCloudTrackerComponent*        _activeGasCloudTracker;                            // 0x04B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           _cloudSizeModifierTag;                             // 0x04C0(0x000C)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _cumulativeLifetime;                               // 0x04D0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D4[0xC];                                      // 0x04D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateCosmetic_BP();
	void Authority_SetCumulativeLifetime(const float value);
	void DissipateGasCloud();
	EBombType GetGasType();
	bool IsDissipating();
	bool IsSurvivorDetectionEnabled();
	void Multicast_DissipateGasCloud();
	void OnAcquiredChanged(bool acquired);
	void OnDelayedActivationStart(float delay);
	void OnOverlapBegin(class UPrimitiveComponent* hitComp, class AActor* otherActor, class UPrimitiveComponent* otherComponent, int32 otherBodyIndex, bool bFromSweep, const struct FHitResult& sweepResult);
	void OnOverlapEnd(class UPrimitiveComponent* hitComp, class AActor* otherActor, class UPrimitiveComponent* otherComponent, int32 otherBodyIndex);
	void SetGasAudioActive(bool activated);
	void SetIgnoredActors();
	void SetIsDissipating(bool isDissipating);

	float Authority_GetCumulativeLifetime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseGasCloudProjectile">();
	}
	static class ABaseGasCloudProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABaseGasCloudProjectile>();
	}
};
static_assert(alignof(ABaseGasCloudProjectile) == 0x000008, "Wrong alignment on ABaseGasCloudProjectile");
static_assert(sizeof(ABaseGasCloudProjectile) == 0x0004E0, "Wrong size on ABaseGasCloudProjectile");
static_assert(offsetof(ABaseGasCloudProjectile, _gasType) == 0x0002B8, "Member 'ABaseGasCloudProjectile::_gasType' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _poolableProjectile) == 0x0002C0, "Member 'ABaseGasCloudProjectile::_poolableProjectile' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _gasCloudDuration) == 0x0002C8, "Member 'ABaseGasCloudProjectile::_gasCloudDuration' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _gasCloudGravityScale) == 0x0002F0, "Member 'ABaseGasCloudProjectile::_gasCloudGravityScale' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _gasCloudBounciness) == 0x000318, "Member 'ABaseGasCloudProjectile::_gasCloudBounciness' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _gasCloudFriction) == 0x000340, "Member 'ABaseGasCloudProjectile::_gasCloudFriction' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _dissipateGasCloudTime) == 0x000368, "Member 'ABaseGasCloudProjectile::_dissipateGasCloudTime' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _gasCloudMinimumLifetime) == 0x000390, "Member 'ABaseGasCloudProjectile::_gasCloudMinimumLifetime' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _gasCloudSimpleCollisionRadius) == 0x0003B8, "Member 'ABaseGasCloudProjectile::_gasCloudSimpleCollisionRadius' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _gasCloudComplexCollisionRadius) == 0x0003E0, "Member 'ABaseGasCloudProjectile::_gasCloudComplexCollisionRadius' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _gasCloudSurvivorDetectionRadius) == 0x000408, "Member 'ABaseGasCloudProjectile::_gasCloudSurvivorDetectionRadius' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _gasCloudDetectionDelay) == 0x000430, "Member 'ABaseGasCloudProjectile::_gasCloudDetectionDelay' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _gasCloudCosmeticFadeDuration) == 0x000458, "Member 'ABaseGasCloudProjectile::_gasCloudCosmeticFadeDuration' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _overlappingTime) == 0x000480, "Member 'ABaseGasCloudProjectile::_overlappingTime' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _dissipating) == 0x000484, "Member 'ABaseGasCloudProjectile::_dissipating' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _overlappingSurvivors) == 0x000488, "Member 'ABaseGasCloudProjectile::_overlappingSurvivors' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _gasParticleSystem) == 0x000498, "Member 'ABaseGasCloudProjectile::_gasParticleSystem' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _simpleCollider) == 0x0004A0, "Member 'ABaseGasCloudProjectile::_simpleCollider' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _complexCollider) == 0x0004A8, "Member 'ABaseGasCloudProjectile::_complexCollider' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _survivorDetector) == 0x0004B0, "Member 'ABaseGasCloudProjectile::_survivorDetector' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _activeGasCloudTracker) == 0x0004B8, "Member 'ABaseGasCloudProjectile::_activeGasCloudTracker' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _cloudSizeModifierTag) == 0x0004C0, "Member 'ABaseGasCloudProjectile::_cloudSizeModifierTag' has a wrong offset!");
static_assert(offsetof(ABaseGasCloudProjectile, _cumulativeLifetime) == 0x0004D0, "Member 'ABaseGasCloudProjectile::_cumulativeLifetime' has a wrong offset!");

// Class TheClown.AntidoteCloudProjectile
// 0x0000 (0x04E0 - 0x04E0)
class AAntidoteCloudProjectile final : public ABaseGasCloudProjectile
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AntidoteCloudProjectile">();
	}
	static class AAntidoteCloudProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAntidoteCloudProjectile>();
	}
};
static_assert(alignof(AAntidoteCloudProjectile) == 0x000008, "Wrong alignment on AAntidoteCloudProjectile");
static_assert(sizeof(AAntidoteCloudProjectile) == 0x0004E0, "Wrong size on AAntidoteCloudProjectile");

// Class TheClown.BoilOverPerk
// 0x00B8 (0x0480 - 0x03C8)
class UBoilOverPerk final : public UPerk
{
public:
	TArray<struct FStatusEffectSpawnData>         _effectsToSpawn;                                   // 0x03C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FPlayerStatusEffectSpawnerHelper       _spawnerHelper;                                    // 0x03D8(0x0088)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	float                                         _additionnalWigglingProgressWhenFalling[0x3];      // 0x0460(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _greatHeightsValue;                                // 0x046C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_470[0x10];                                     // 0x0470(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnPlayerPickedUpEnd(class ADBDPlayer* picker);
	void Authority_OnWiggleEnd();

	float GetAdditionnalWigglingProgressAtLevel() const;
	float GetGreatHeightsValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BoilOverPerk">();
	}
	static class UBoilOverPerk* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBoilOverPerk>();
	}
};
static_assert(alignof(UBoilOverPerk) == 0x000008, "Wrong alignment on UBoilOverPerk");
static_assert(sizeof(UBoilOverPerk) == 0x000480, "Wrong size on UBoilOverPerk");
static_assert(offsetof(UBoilOverPerk, _effectsToSpawn) == 0x0003C8, "Member 'UBoilOverPerk::_effectsToSpawn' has a wrong offset!");
static_assert(offsetof(UBoilOverPerk, _spawnerHelper) == 0x0003D8, "Member 'UBoilOverPerk::_spawnerHelper' has a wrong offset!");
static_assert(offsetof(UBoilOverPerk, _additionnalWigglingProgressWhenFalling) == 0x000460, "Member 'UBoilOverPerk::_additionnalWigglingProgressWhenFalling' has a wrong offset!");
static_assert(offsetof(UBoilOverPerk, _greatHeightsValue) == 0x00046C, "Member 'UBoilOverPerk::_greatHeightsValue' has a wrong offset!");

// Class TheClown.BombLauncher
// 0x0018 (0x0198 - 0x0180)
class UBombLauncher final : public UKillerProjectileLauncher
{
public:
	class UCurveFloat*                            _speedCurve;                                       // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _pitchCurve;                                       // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBombType                                     _currentBombType;                                  // 0x0190(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Local_SwitchBombType();
	void LocalLaunch(float percentThrowStrength);
	void Server_SwitchBombType();
	void SetPercentThrowStrength(float throwStrength);
	void SetProjectilePitchCurve(class UCurveFloat* newProjectilePitchCurve);
	void SetProjectileSpeedCurve(class UCurveFloat* newProjectileSpeedCurve);

	EBombType GetCurrentBombType() const;
	float GetPercentThrowStrenght() const;
	bool IsBombFullyCharged() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BombLauncher">();
	}
	static class UBombLauncher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBombLauncher>();
	}
};
static_assert(alignof(UBombLauncher) == 0x000008, "Wrong alignment on UBombLauncher");
static_assert(sizeof(UBombLauncher) == 0x000198, "Wrong size on UBombLauncher");
static_assert(offsetof(UBombLauncher, _speedCurve) == 0x000180, "Member 'UBombLauncher::_speedCurve' has a wrong offset!");
static_assert(offsetof(UBombLauncher, _pitchCurve) == 0x000188, "Member 'UBombLauncher::_pitchCurve' has a wrong offset!");
static_assert(offsetof(UBombLauncher, _currentBombType) == 0x000190, "Member 'UBombLauncher::_currentBombType' has a wrong offset!");

// Class TheClown.ClownFingersAnimInstance
// 0x0010 (0x02D0 - 0x02C0)
class UClownFingersAnimInstance final : public UAnimInstance
{
public:
	bool                                          _isObservedCharacterSlasher;                       // 0x02C0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C1[0xF];                                      // 0x02C1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ClownFingersAnimInstance">();
	}
	static class UClownFingersAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClownFingersAnimInstance>();
	}
};
static_assert(alignof(UClownFingersAnimInstance) == 0x000010, "Wrong alignment on UClownFingersAnimInstance");
static_assert(sizeof(UClownFingersAnimInstance) == 0x0002D0, "Wrong size on UClownFingersAnimInstance");
static_assert(offsetof(UClownFingersAnimInstance, _isObservedCharacterSlasher) == 0x0002C0, "Member 'UClownFingersAnimInstance::_isObservedCharacterSlasher' has a wrong offset!");

// Class TheClown.DanceWithMePerk
// 0x0010 (0x03D8 - 0x03C8)
class UDanceWithMePerk final : public UPerk
{
public:
	uint8                                         Pad_3C8[0x10];                                     // 0x03C8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnPerkActivate(const struct FGameplayTag& gameplayTag, const struct FGameEventData& gameEventData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DanceWithMePerk">();
	}
	static class UDanceWithMePerk* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDanceWithMePerk>();
	}
};
static_assert(alignof(UDanceWithMePerk) == 0x000008, "Wrong alignment on UDanceWithMePerk");
static_assert(sizeof(UDanceWithMePerk) == 0x0003D8, "Wrong size on UDanceWithMePerk");

// Class TheClown.GasDizzyCosmeticEffect
// 0x0020 (0x0250 - 0x0230)
class AGasDizzyCosmeticEffect final : public AActor
{
public:
	class UPostProcessComponent*                  _dizzyPostProcess;                                 // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_238[0x18];                                     // 0x0238(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_SetDizzyEffectActive(bool isActive);
	void SetWantsDizzyEffectActive(bool isActive);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GasDizzyCosmeticEffect">();
	}
	static class AGasDizzyCosmeticEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGasDizzyCosmeticEffect>();
	}
};
static_assert(alignof(AGasDizzyCosmeticEffect) == 0x000008, "Wrong alignment on AGasDizzyCosmeticEffect");
static_assert(sizeof(AGasDizzyCosmeticEffect) == 0x000250, "Wrong size on AGasDizzyCosmeticEffect");
static_assert(offsetof(AGasDizzyCosmeticEffect, _dizzyPostProcess) == 0x000230, "Member 'AGasDizzyCosmeticEffect::_dizzyPostProcess' has a wrong offset!");

// Class TheClown.GassedStatusEffect
// 0x00B8 (0x0408 - 0x0350)
class UGassedStatusEffect : public UStatusEffect
{
public:
	bool                                          _isInCloud;                                        // 0x0350(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isInAntidoteCloud;                                // 0x0351(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_352[0x6];                                      // 0x0352(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class ABaseGasCloudProjectile*>          _overlappingClouds;                                // 0x0358(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TSet<class ABaseGasCloudProjectile*>          _overlappingAntidoteClouds;                        // 0x03A8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F8[0x8];                                      // 0x03F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        _totalTimesEnteringToxicClouds;                    // 0x0400(0x0002)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_402[0x6];                                      // 0x0402(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_AddOverlappingCloud(class ABaseGasCloudProjectile* cloud);
	void Authority_RemoveOverlappingCloud(class ABaseGasCloudProjectile* cloud);
	void Authority_SetIsInAntidoteCloud(const bool value);
	void Authority_SetIsInCloud(const bool value);
	void OnAntidoteEffectBegin(float effectDuration);
	void OnAntidoteEffectEnd(float durationSkipped);
	void OnDirectBottleHit(EBombType bottleType);
	void OnRep_IsInAntidoteCloud();
	void OnRep_TotalTimesEnteringToxicClouds();
	void OnToxinCured();
	void OnToxinEffectBegin(float effectDuration);
	void OnToxinEffectEnd(float durationSkipped);
	void SetRemainingAntidoteDuration(const float value);
	void SetRemainingDuration(const float value);
	void UpdateAntidoteEffectVFX(float durationRemaining);

	float GetAntidoteCloudEffectDuration() const;
	float GetCloudEffectDuration() const;
	float GetRemainingAntidoteDuration() const;
	float GetRemainingDuration() const;
	bool IsInAntidoteCloud() const;
	bool IsInCloud() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GassedStatusEffect">();
	}
	static class UGassedStatusEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGassedStatusEffect>();
	}
};
static_assert(alignof(UGassedStatusEffect) == 0x000008, "Wrong alignment on UGassedStatusEffect");
static_assert(sizeof(UGassedStatusEffect) == 0x000408, "Wrong size on UGassedStatusEffect");
static_assert(offsetof(UGassedStatusEffect, _isInCloud) == 0x000350, "Member 'UGassedStatusEffect::_isInCloud' has a wrong offset!");
static_assert(offsetof(UGassedStatusEffect, _isInAntidoteCloud) == 0x000351, "Member 'UGassedStatusEffect::_isInAntidoteCloud' has a wrong offset!");
static_assert(offsetof(UGassedStatusEffect, _overlappingClouds) == 0x000358, "Member 'UGassedStatusEffect::_overlappingClouds' has a wrong offset!");
static_assert(offsetof(UGassedStatusEffect, _overlappingAntidoteClouds) == 0x0003A8, "Member 'UGassedStatusEffect::_overlappingAntidoteClouds' has a wrong offset!");
static_assert(offsetof(UGassedStatusEffect, _totalTimesEnteringToxicClouds) == 0x000400, "Member 'UGassedStatusEffect::_totalTimesEnteringToxicClouds' has a wrong offset!");

// Class TheClown.GassedSurvivorSubAnimInstance
// 0x0010 (0x0560 - 0x0550)
class UGassedSurvivorSubAnimInstance final : public UBaseSurvivorAnimInstance
{
public:
	uint8                                         Pad_548[0x8];                                      // 0x0548(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _isGassed;                                         // 0x0550(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isIdle;                                           // 0x0551(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCrouched;                                       // 0x0552(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCrawling;                                       // 0x0553(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_554[0xC];                                      // 0x0554(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GassedSurvivorSubAnimInstance">();
	}
	static class UGassedSurvivorSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGassedSurvivorSubAnimInstance>();
	}
};
static_assert(alignof(UGassedSurvivorSubAnimInstance) == 0x000010, "Wrong alignment on UGassedSurvivorSubAnimInstance");
static_assert(sizeof(UGassedSurvivorSubAnimInstance) == 0x000560, "Wrong size on UGassedSurvivorSubAnimInstance");
static_assert(offsetof(UGassedSurvivorSubAnimInstance, _isGassed) == 0x000550, "Member 'UGassedSurvivorSubAnimInstance::_isGassed' has a wrong offset!");
static_assert(offsetof(UGassedSurvivorSubAnimInstance, _isIdle) == 0x000551, "Member 'UGassedSurvivorSubAnimInstance::_isIdle' has a wrong offset!");
static_assert(offsetof(UGassedSurvivorSubAnimInstance, _isCrouched) == 0x000552, "Member 'UGassedSurvivorSubAnimInstance::_isCrouched' has a wrong offset!");
static_assert(offsetof(UGassedSurvivorSubAnimInstance, _isCrawling) == 0x000553, "Member 'UGassedSurvivorSubAnimInstance::_isCrawling' has a wrong offset!");

// Class TheClown.PopGoesTheWeasel
// 0x0010 (0x03D8 - 0x03C8)
class UPopGoesTheWeasel final : public UPerk
{
public:
	float                                         _activePerkDuration[0x3];                          // 0x03C8(0x0004)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PopGoesTheWeasel">();
	}
	static class UPopGoesTheWeasel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPopGoesTheWeasel>();
	}
};
static_assert(alignof(UPopGoesTheWeasel) == 0x000008, "Wrong alignment on UPopGoesTheWeasel");
static_assert(sizeof(UPopGoesTheWeasel) == 0x0003D8, "Wrong size on UPopGoesTheWeasel");
static_assert(offsetof(UPopGoesTheWeasel, _activePerkDuration) == 0x0003C8, "Member 'UPopGoesTheWeasel::_activePerkDuration' has a wrong offset!");

// Class TheClown.SurvivorGasCloudEffect
// 0x0048 (0x0450 - 0x0408)
class USurvivorGasCloudEffect final : public UGassedStatusEffect
{
public:
	class AGasDizzyCosmeticEffect*                _dizzyCosmeticEffect;                              // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AGasDizzyCosmeticEffect>    _gasDizzyCosmeticEffectClass;                      // 0x0410(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_418[0x8];                                      // 0x0418(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _dizzyEffectRelativeTransform;                     // 0x0420(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorGasCloudEffect">();
	}
	static class USurvivorGasCloudEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorGasCloudEffect>();
	}
};
static_assert(alignof(USurvivorGasCloudEffect) == 0x000010, "Wrong alignment on USurvivorGasCloudEffect");
static_assert(sizeof(USurvivorGasCloudEffect) == 0x000450, "Wrong size on USurvivorGasCloudEffect");
static_assert(offsetof(USurvivorGasCloudEffect, _dizzyCosmeticEffect) == 0x000408, "Member 'USurvivorGasCloudEffect::_dizzyCosmeticEffect' has a wrong offset!");
static_assert(offsetof(USurvivorGasCloudEffect, _gasDizzyCosmeticEffectClass) == 0x000410, "Member 'USurvivorGasCloudEffect::_gasDizzyCosmeticEffectClass' has a wrong offset!");
static_assert(offsetof(USurvivorGasCloudEffect, _dizzyEffectRelativeTransform) == 0x000420, "Member 'USurvivorGasCloudEffect::_dizzyEffectRelativeTransform' has a wrong offset!");

// Class TheClown.TheClownUtilities
// 0x0000 (0x0030 - 0x0030)
class UTheClownUtilities final : public UBlueprintFunctionLibrary
{
public:
	static bool CanBeGassed(const class ADBDPlayer* player);
	static class UActiveGasCloudTrackerComponent* GetActiveGasCloudTrackerComponent(const class UObject* worldContextObject);
	static class UGassedStatusEffect* GetGassedStatusEffect(const class ADBDPlayer* player);
	static bool IsAffectedByAntidote(const class ADBDPlayer* player);
	static bool IsGassed(const class ADBDPlayer* player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TheClownUtilities">();
	}
	static class UTheClownUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTheClownUtilities>();
	}
};
static_assert(alignof(UTheClownUtilities) == 0x000008, "Wrong alignment on UTheClownUtilities");
static_assert(sizeof(UTheClownUtilities) == 0x000030, "Wrong size on UTheClownUtilities");

}

