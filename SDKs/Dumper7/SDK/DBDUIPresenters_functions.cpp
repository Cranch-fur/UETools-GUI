#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIPresenters

#include "Basic.hpp"

#include "DBDUIPresenters_classes.hpp"
#include "DBDUIPresenters_parameters.hpp"


namespace SDK
{

// Function DBDUIPresenters.ArchiveCompendiumSubPresenter.OnTomeSelected
// (Final, Native, Protected)
// Parameters:
// const class FString&                    tomeId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveCompendiumSubPresenter::OnTomeSelected(const class FString& tomeId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveCompendiumSubPresenter", "OnTomeSelected");

	Params::ArchiveCompendiumSubPresenter_OnTomeSelected Parms{};

	Parms.tomeId = std::move(tomeId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.GetCurrentLevel
// (Final, Native, Private)

void UArchiveQuestMapSubPresenter::GetCurrentLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveQuestMapSubPresenter", "GetCurrentLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.NavigateToNextLevelAfterUnlock
// (Final, Native, Private)

void UArchiveQuestMapSubPresenter::NavigateToNextLevelAfterUnlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveQuestMapSubPresenter", "NavigateToNextLevelAfterUnlock");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.OnLevelSelected
// (Final, Native, Private)
// Parameters:
// const int32                             levelIndex                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveQuestMapSubPresenter::OnLevelSelected(const int32 levelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveQuestMapSubPresenter", "OnLevelSelected");

	Params::ArchiveQuestMapSubPresenter_OnLevelSelected Parms{};

	Parms.levelIndex = levelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.OnNodeSelected
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// const class FName&                      nodeId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPlayerRole                             role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveQuestMapSubPresenter::OnNodeSelected(const class FName& nodeId, EPlayerRole role, const struct FVector2D& position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveQuestMapSubPresenter", "OnNodeSelected");

	Params::ArchiveQuestMapSubPresenter_OnNodeSelected Parms{};

	Parms.nodeId = nodeId;
	Parms.role = role;
	Parms.position = std::move(position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.OnQuestNodeHovered
// (Final, Native, Private)
// Parameters:
// EPlayerRole                             role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveQuestMapSubPresenter::OnQuestNodeHovered(EPlayerRole role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveQuestMapSubPresenter", "OnQuestNodeHovered");

	Params::ArchiveQuestMapSubPresenter_OnQuestNodeHovered Parms{};

	Parms.role = role;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.OnQuestNodeUnhovered
// (Final, Native, Private)
// Parameters:
// EPlayerRole                             role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveQuestMapSubPresenter::OnQuestNodeUnhovered(EPlayerRole role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveQuestMapSubPresenter", "OnQuestNodeUnhovered");

	Params::ArchiveQuestMapSubPresenter_OnQuestNodeUnhovered Parms{};

	Parms.role = role;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.OnTomeLevelRewardAnimationDone
// (Final, Native, Private)

void UArchiveQuestMapSubPresenter::OnTomeLevelRewardAnimationDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveQuestMapSubPresenter", "OnTomeLevelRewardAnimationDone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.OnTomeMapCreated
// (Final, Native, Private)

void UArchiveQuestMapSubPresenter::OnTomeMapCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveQuestMapSubPresenter", "OnTomeMapCreated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.UpdateTomeLevels
// (Final, Native, Private)

void UArchiveQuestMapSubPresenter::UpdateTomeLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveQuestMapSubPresenter", "UpdateTomeLevels");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveEditorSubPresenter.OnSaveTomeGraph
// (Final, Native, Private, HasOutParams)
// Parameters:
// const TArray<struct FArchiveNodeGraphViewData>&nodeList                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UArchiveEditorSubPresenter::OnSaveTomeGraph(const TArray<struct FArchiveNodeGraphViewData>& nodeList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveEditorSubPresenter", "OnSaveTomeGraph");

	Params::ArchiveEditorSubPresenter_OnSaveTomeGraph Parms{};

	Parms.nodeList = std::move(nodeList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.Presenter.OnContextSectionChanged
// (Final, Native, Protected)
// Parameters:
// EContext                                context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPresenter::OnContextSectionChanged(EContext context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Presenter", "OnContextSectionChanged");

	Params::Presenter_OnContextSectionChanged Parms{};

	Parms.context = context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.Presenter.IsContextReady
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPresenter::IsContextReady() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Presenter", "IsContextReady");

	Params::Presenter_IsContextReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.Presenter.IsGameStateReady
// (Final, Native, Protected, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPresenter::IsGameStateReady() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Presenter", "IsGameStateReady");

	Params::Presenter_IsGameStateReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.Presenter.IsPlayerStateReady
// (Final, Native, Protected, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPresenter::IsPlayerStateReady() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Presenter", "IsPlayerStateReady");

	Params::Presenter_IsPlayerStateReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.Presenter.ShouldPresent
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPresenter::ShouldPresent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Presenter", "ShouldPresent");

	Params::Presenter_ShouldPresent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.ArchiveImageViewerPresenter.OnArchivesVoiceOverAutoplay
// (Final, Native, Private)
// Parameters:
// bool                                    autoplay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveImageViewerPresenter::OnArchivesVoiceOverAutoplay(bool autoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveImageViewerPresenter", "OnArchivesVoiceOverAutoplay");

	Params::ArchiveImageViewerPresenter_OnArchivesVoiceOverAutoplay Parms{};

	Parms.autoplay = autoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveImageViewerPresenter.OnArchivesVoiceOverPlayed
// (Final, Native, Private)
// Parameters:
// bool                                    playing                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveImageViewerPresenter::OnArchivesVoiceOverPlayed(bool playing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveImageViewerPresenter", "OnArchivesVoiceOverPlayed");

	Params::ArchiveImageViewerPresenter_OnArchivesVoiceOverPlayed Parms{};

	Parms.playing = playing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveImageViewerPresenter.OnBackAction
// (Final, Native, Private)

void UArchiveImageViewerPresenter::OnBackAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveImageViewerPresenter", "OnBackAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveImageViewerPresenter.OnImageViewerVoiceOverAutoplay
// (Final, Native, Private)
// Parameters:
// bool                                    autoplay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveImageViewerPresenter::OnImageViewerVoiceOverAutoplay(bool autoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveImageViewerPresenter", "OnImageViewerVoiceOverAutoplay");

	Params::ArchiveImageViewerPresenter_OnImageViewerVoiceOverAutoplay Parms{};

	Parms.autoplay = autoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveImageViewerPresenter.OnImageViewerVoiceOverPlayed
// (Final, Native, Private)

void UArchiveImageViewerPresenter::OnImageViewerVoiceOverPlayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveImageViewerPresenter", "OnImageViewerVoiceOverPlayed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveImageViewerPresenter.OnTextVisibilityChanged
// (Final, Native, Private)

void UArchiveImageViewerPresenter::OnTextVisibilityChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveImageViewerPresenter", "OnTextVisibilityChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveImageViewerPresenter.CanShowFullScreenMode
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UArchiveImageViewerPresenter::CanShowFullScreenMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveImageViewerPresenter", "CanShowFullScreenMode");

	Params::ArchiveImageViewerPresenter_CanShowFullScreenMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnAutoplayChanged
// (Final, Native, Private)
// Parameters:
// bool                                    autoplayActive                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   entryIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveJournalSubPresenter::OnAutoplayChanged(bool autoplayActive, int32 entryIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalSubPresenter", "OnAutoplayChanged");

	Params::ArchiveJournalSubPresenter_OnAutoplayChanged Parms{};

	Parms.autoplayActive = autoplayActive;
	Parms.entryIndex = entryIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnClickPlayButton
// (Final, Native, Private)
// Parameters:
// int32                                   entryIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveJournalSubPresenter::OnClickPlayButton(int32 entryIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalSubPresenter", "OnClickPlayButton");

	Params::ArchiveJournalSubPresenter_OnClickPlayButton Parms{};

	Parms.entryIndex = entryIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnEntrySelected
// (Final, Native, Private)
// Parameters:
// int32                                   entryIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveJournalSubPresenter::OnEntrySelected(int32 entryIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalSubPresenter", "OnEntrySelected");

	Params::ArchiveJournalSubPresenter_OnEntrySelected Parms{};

	Parms.entryIndex = entryIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnImageViewerVoiceOverAutoplay
// (Final, Native, Private)
// Parameters:
// bool                                    autoplay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveJournalSubPresenter::OnImageViewerVoiceOverAutoplay(bool autoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalSubPresenter", "OnImageViewerVoiceOverAutoplay");

	Params::ArchiveJournalSubPresenter_OnImageViewerVoiceOverAutoplay Parms{};

	Parms.autoplay = autoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnImageViewerVoiceOverPlayed
// (Final, Native, Private)

void UArchiveJournalSubPresenter::OnImageViewerVoiceOverPlayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalSubPresenter", "OnImageViewerVoiceOverPlayed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnPlayCinematic
// (Final, Native, Private)
// Parameters:
// const int32                             index                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveJournalSubPresenter::OnPlayCinematic(const int32 index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalSubPresenter", "OnPlayCinematic");

	Params::ArchiveJournalSubPresenter_OnPlayCinematic Parms{};

	Parms.index = index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnShowImageViewer
// (Final, Native, Private)

void UArchiveJournalSubPresenter::OnShowImageViewer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalSubPresenter", "OnShowImageViewer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnVignetteSelected
// (Final, Native, Private)
// Parameters:
// const class FString&                    vignetteId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveJournalSubPresenter::OnVignetteSelected(const class FString& vignetteId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalSubPresenter", "OnVignetteSelected");

	Params::ArchiveJournalSubPresenter_OnVignetteSelected Parms{};

	Parms.vignetteId = std::move(vignetteId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveMenuPresenter.OnBackAction
// (Final, Native, Private)

void UArchiveMenuPresenter::OnBackAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuPresenter", "OnBackAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveMenuPresenter.OnChallengeReminderClicked
// (Final, Native, Private)
// Parameters:
// EPlayerRole                             role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveMenuPresenter::OnChallengeReminderClicked(EPlayerRole role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuPresenter", "OnChallengeReminderClicked");

	Params::ArchiveMenuPresenter_OnChallengeReminderClicked Parms{};

	Parms.role = role;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveMenuPresenter.OnChallengeReminderSlotSelected
// (Final, Native, Private)
// Parameters:
// EPlayerRole                             role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveMenuPresenter::OnChallengeReminderSlotSelected(EPlayerRole role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuPresenter", "OnChallengeReminderSlotSelected");

	Params::ArchiveMenuPresenter_OnChallengeReminderSlotSelected Parms{};

	Parms.role = role;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveMenuPresenter.OnHideImageViewer
// (Final, Native, Private)

void UArchiveMenuPresenter::OnHideImageViewer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuPresenter", "OnHideImageViewer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveMenuPresenter.OnInfoClicked
// (Final, Native, Private)

void UArchiveMenuPresenter::OnInfoClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuPresenter", "OnInfoClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveMenuPresenter.OnMenuTabSelected
// (Final, Native, Private)
// Parameters:
// EArchiveMenuState                       menuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    alreadySelected                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveMenuPresenter::OnMenuTabSelected(EArchiveMenuState menuState, bool alreadySelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuPresenter", "OnMenuTabSelected");

	Params::ArchiveMenuPresenter_OnMenuTabSelected Parms{};

	Parms.menuState = menuState;
	Parms.alreadySelected = alreadySelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveMenuPresenter.OnShowImageViewer
// (Final, Native, Private)
// Parameters:
// bool                                    voiceOverIsPlaying                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveMenuPresenter::OnShowImageViewer(bool voiceOverIsPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuPresenter", "OnShowImageViewer");

	Params::ArchiveMenuPresenter_OnShowImageViewer Parms{};

	Parms.voiceOverIsPlaying = voiceOverIsPlaying;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveMenuPresenter.OnSlotSelectorClosed
// (Final, Native, Private)

void UArchiveMenuPresenter::OnSlotSelectorClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuPresenter", "OnSlotSelectorClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.BasePopupPresenter.OnContextEnter
// (Final, Native, Protected)
// Parameters:
// EContext                                context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBasePopupPresenter::OnContextEnter(EContext context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePopupPresenter", "OnContextEnter");

	Params::BasePopupPresenter_OnContextEnter Parms{};

	Parms.context = context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.BasePopupPresenter.OnContextLeave
// (Final, Native, Protected)
// Parameters:
// EContext                                context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBasePopupPresenter::OnContextLeave(EContext context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePopupPresenter", "OnContextLeave");

	Params::BasePopupPresenter_OnContextLeave Parms{};

	Parms.context = context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.BasePopupPresenter.IsContextEntered
// (Final, Native, Protected, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBasePopupPresenter::IsContextEntered() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePopupPresenter", "IsContextEntered");

	Params::BasePopupPresenter_IsContextEntered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.GenericPopupPresenter.OnAction
// (Native, Protected)
// Parameters:
// EPopupButtonType                        popupAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGenericPopupPresenter::OnAction(EPopupButtonType popupAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericPopupPresenter", "OnAction");

	Params::GenericPopupPresenter_OnAction Parms{};

	Parms.popupAction = popupAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.GenericPopupPresenter.OnAppResumed
// (Final, Native, Protected)
// Parameters:
// bool                                    isAppResumed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGenericPopupPresenter::OnAppResumed(bool isAppResumed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericPopupPresenter", "OnAppResumed");

	Params::GenericPopupPresenter_OnAppResumed Parms{};

	Parms.isAppResumed = isAppResumed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.GenericPopupPresenter.OnBack
// (Native, Protected)

void UGenericPopupPresenter::OnBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericPopupPresenter", "OnBack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveRiftSubPresenter.OnBonusTierTooltipShown
// (Final, Native, Private)

void UArchiveRiftSubPresenter::OnBonusTierTooltipShown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveRiftSubPresenter", "OnBonusTierTooltipShown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveRiftSubPresenter.OnClickPurchasePremiumPass
// (Final, Native, Private)

void UArchiveRiftSubPresenter::OnClickPurchasePremiumPass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveRiftSubPresenter", "OnClickPurchasePremiumPass");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveRiftSubPresenter.OnClickPurchaseTiers
// (Final, Native, Private)

void UArchiveRiftSubPresenter::OnClickPurchaseTiers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveRiftSubPresenter", "OnClickPurchaseTiers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveRiftSubPresenter.OnRewardCurrencyClicked
// (Final, Native, Private)
// Parameters:
// const ECurrencyType                     currencyType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveRiftSubPresenter::OnRewardCurrencyClicked(const ECurrencyType currencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveRiftSubPresenter", "OnRewardCurrencyClicked");

	Params::ArchiveRiftSubPresenter_OnRewardCurrencyClicked Parms{};

	Parms.currencyType = currencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveRiftSubPresenter.OnRewardItemClicked
// (Final, Native, Private)
// Parameters:
// const class FName                       itemId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveRiftSubPresenter::OnRewardItemClicked(const class FName itemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveRiftSubPresenter", "OnRewardItemClicked");

	Params::ArchiveRiftSubPresenter_OnRewardItemClicked Parms{};

	Parms.itemId = itemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveRiftSubPresenter.OnToggleOutfitDisplay
// (Final, Native, Private)

void UArchiveRiftSubPresenter::OnToggleOutfitDisplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveRiftSubPresenter", "OnToggleOutfitDisplay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveTierPurchasePopupPresenter.OnConfirmPurchase
// (Final, Native, Protected)
// Parameters:
// int32                                   tiersToPurchaseNumber                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveTierPurchasePopupPresenter::OnConfirmPurchase(int32 tiersToPurchaseNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTierPurchasePopupPresenter", "OnConfirmPurchase");

	Params::ArchiveTierPurchasePopupPresenter_OnConfirmPurchase Parms{};

	Parms.tiersToPurchaseNumber = tiersToPurchaseNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveTomeSubPresenter.OnEditorWidgetSwitchComplete
// (Final, Native, Private)

void UArchiveTomeSubPresenter::OnEditorWidgetSwitchComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTomeSubPresenter", "OnEditorWidgetSwitchComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ArchiveTomeSubPresenter.OnMenuTabSelected
// (Final, Native, Public)
// Parameters:
// EArchiveTomeMenuState                   menuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveTomeSubPresenter::OnMenuTabSelected(EArchiveTomeMenuState menuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTomeSubPresenter", "OnMenuTabSelected");

	Params::ArchiveTomeSubPresenter_OnMenuTabSelected Parms{};

	Parms.menuState = menuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudPresenter.IsHudReady
// (Final, Native, Private)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHudPresenter::IsHudReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudPresenter", "IsHudReady");

	Params::HudPresenter_IsHudReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.HudPresenter.OnLocallyObservedChanged
// (Final, Native, Private)

void UHudPresenter::OnLocallyObservedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudPresenter", "OnLocallyObservedChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudPresenter.OnPawnPossessed
// (Final, Native, Private)
// Parameters:
// class APawn*                            pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudPresenter::OnPawnPossessed(class APawn* pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudPresenter", "OnPawnPossessed");

	Params::HudPresenter_OnPawnPossessed Parms{};

	Parms.pawn = pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudPresenter.OnPawnUnpossessed
// (Final, Native, Private)
// Parameters:
// class APawn*                            pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudPresenter::OnPawnUnpossessed(class APawn* pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudPresenter", "OnPawnUnpossessed");

	Params::HudPresenter_OnPawnUnpossessed Parms{};

	Parms.pawn = pawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudPresenter.IsPendingPawnReady
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHudPresenter::IsPendingPawnReady() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudPresenter", "IsPendingPawnReady");

	Params::HudPresenter_IsPendingPawnReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.ChallengeTrackerPresenter.BindToQuestRepetitionEvents
// (Final, Native, Private)

void UChallengeTrackerPresenter::BindToQuestRepetitionEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeTrackerPresenter", "BindToQuestRepetitionEvents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ChallengeTrackerPresenter.OnQuestEventRepetitionValueChanged
// (Final, Native, Private)
// Parameters:
// int32                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    questEventIdTracked                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChallengeTrackerPresenter::OnQuestEventRepetitionValueChanged(int32 value, const class FString& questEventIdTracked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeTrackerPresenter", "OnQuestEventRepetitionValueChanged");

	Params::ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged Parms{};

	Parms.value = value;
	Parms.questEventIdTracked = std::move(questEventIdTracked);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ChallengeTrackerPresenter.OnReadingTimeDelayDone
// (Final, Native, Private)

void UChallengeTrackerPresenter::OnReadingTimeDelayDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeTrackerPresenter", "OnReadingTimeDelayDone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ChallengeTrackerPresenter.OnWidgetClosingDone
// (Final, Native, Private)

void UChallengeTrackerPresenter::OnWidgetClosingDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeTrackerPresenter", "OnWidgetClosingDone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ChallengeTrackerPresenter.OnWidgetOpeningDone
// (Final, Native, Private)

void UChallengeTrackerPresenter::OnWidgetOpeningDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeTrackerPresenter", "OnWidgetOpeningDone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ChallengeTrackerPresenter.OnWidgetProgressingDone
// (Final, Native, Private)

void UChallengeTrackerPresenter::OnWidgetProgressingDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeTrackerPresenter", "OnWidgetProgressingDone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.CreditsPresenter.Credits_ScrollToEnd
// (Final, Exec, Native, Public)

void UCreditsPresenter::Credits_ScrollToEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreditsPresenter", "Credits_ScrollToEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.CreditsPresenter.Credits_ScrollToName
// (Final, Exec, Native, Public)
// Parameters:
// const class FString&                    name                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCreditsPresenter::Credits_ScrollToName(const class FString& name, float delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreditsPresenter", "Credits_ScrollToName");

	Params::CreditsPresenter_Credits_ScrollToName Parms{};

	Parms.name = std::move(name);
	Parms.delay = delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.CreditsPresenter.OnBackAction
// (Final, Native, Private)

void UCreditsPresenter::OnBackAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreditsPresenter", "OnBackAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.DailyRitualsPopupPresenter.OnClaimAllRituals
// (Final, Native, Protected)

void UDailyRitualsPopupPresenter::OnClaimAllRituals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupPresenter", "OnClaimAllRituals");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.DailyRitualsPopupPresenter.OnClaimRitual
// (Final, Native, Protected)
// Parameters:
// const class FString&                    id                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsPopupPresenter::OnClaimRitual(const class FString& id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupPresenter", "OnClaimRitual");

	Params::DailyRitualsPopupPresenter_OnClaimRitual Parms{};

	Parms.id = std::move(id);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.DailyRitualsPopupPresenter.OnRemoveRitual
// (Final, Native, Protected)
// Parameters:
// const class FString&                    id                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsPopupPresenter::OnRemoveRitual(const class FString& id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupPresenter", "OnRemoveRitual");

	Params::DailyRitualsPopupPresenter_OnRemoveRitual Parms{};

	Parms.id = std::move(id);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.DailyRitualsPopupPresenter.OnRitualsFetchedEvent
// (Final, Native, Protected, Const)

void UDailyRitualsPopupPresenter::OnRitualsFetchedEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupPresenter", "OnRitualsFetchedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.DailyRitualsPopupPresenter.OnRitualsSyncErrorEvent
// (Final, Native, Protected, Const)

void UDailyRitualsPopupPresenter::OnRitualsSyncErrorEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupPresenter", "OnRitualsSyncErrorEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.DirectionalMinigamePresenter.OnMinigameEnd
// (Final, Native, Private)
// Parameters:
// EDirectionalMinigameResult              result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDirectionalMinigamePresenter::OnMinigameEnd(EDirectionalMinigameResult result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DirectionalMinigamePresenter", "OnMinigameEnd");

	Params::DirectionalMinigamePresenter_OnMinigameEnd Parms{};

	Parms.result = result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.DirectionalMinigamePresenter.OnMinigameEnterKey
// (Final, Native, Private)
// Parameters:
// EDirectionalInputKey                    enteredKey                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   enteredIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isCorrect                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   currentIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDirectionalMinigamePresenter::OnMinigameEnterKey(EDirectionalInputKey enteredKey, int32 enteredIndex, bool isCorrect, int32 currentIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DirectionalMinigamePresenter", "OnMinigameEnterKey");

	Params::DirectionalMinigamePresenter_OnMinigameEnterKey Parms{};

	Parms.enteredKey = enteredKey;
	Parms.enteredIndex = enteredIndex;
	Parms.isCorrect = isCorrect;
	Parms.currentIndex = currentIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.DirectionalMinigamePresenter.OnMinigameStart
// (Final, Native, Private)
// Parameters:
// const TArray<EDirectionalInputKey>&     sequence                                               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   currentIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDirectionalMinigamePresenter::OnMinigameStart(const TArray<EDirectionalInputKey>& sequence, int32 currentIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DirectionalMinigamePresenter", "OnMinigameStart");

	Params::DirectionalMinigamePresenter_OnMinigameStart Parms{};

	Parms.sequence = std::move(sequence);
	Parms.currentIndex = currentIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.DisplayStandPresenter.OnDisplayStandRotation
// (Final, Native, Public)
// Parameters:
// float                                   distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDisplayStandPresenter::OnDisplayStandRotation(float distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisplayStandPresenter", "OnDisplayStandRotation");

	Params::DisplayStandPresenter_OnDisplayStandRotation Parms{};

	Parms.distance = distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.DisplayStandPresenter.IsContextEntered
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDisplayStandPresenter::IsContextEntered() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisplayStandPresenter", "IsContextEntered");

	Params::DisplayStandPresenter_IsContextEntered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.ExamplePresenter.OnButtonClick
// (Final, Native, Private)

void UExamplePresenter::OnButtonClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExamplePresenter", "OnButtonClick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ExternalEffectsPresenter.OnHideExternalEffect
// (Final, Native, Protected)
// Parameters:
// const class FName                       itemId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EExternalEffectSource             externalEffectSource                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UExternalEffectsPresenter::OnHideExternalEffect(const class FName itemId, const EExternalEffectSource externalEffectSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExternalEffectsPresenter", "OnHideExternalEffect");

	Params::ExternalEffectsPresenter_OnHideExternalEffect Parms{};

	Parms.itemId = itemId;
	Parms.externalEffectSource = externalEffectSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.ExternalEffectsPresenter.OnShowExternalEffect
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FExternalEffectData&       data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UExternalEffectsPresenter::OnShowExternalEffect(const struct FExternalEffectData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExternalEffectsPresenter", "OnShowExternalEffect");

	Params::ExternalEffectsPresenter_OnShowExternalEffect Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.GameManualSubPresenter.OnCategoryCategoryEntered
// (Final, Native, Private)
// Parameters:
// EHelpType                               categoryType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameManualSubPresenter::OnCategoryCategoryEntered(EHelpType categoryType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManualSubPresenter", "OnCategoryCategoryEntered");

	Params::GameManualSubPresenter_OnCategoryCategoryEntered Parms{};

	Parms.categoryType = categoryType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudObjectivesPresenter.OnEventProgressBankedChanged
// (Final, Native, Private)
// Parameters:
// const int32                             value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudObjectivesPresenter::OnEventProgressBankedChanged(const int32 value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudObjectivesPresenter", "OnEventProgressBankedChanged");

	Params::HudObjectivesPresenter_OnEventProgressBankedChanged Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudObjectivesPresenter.OnEventProgressionDataInitialized
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FEventProgressionData&     hudEventProgressionViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHudObjectivesPresenter::OnEventProgressionDataInitialized(const struct FEventProgressionData& hudEventProgressionViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudObjectivesPresenter", "OnEventProgressionDataInitialized");

	Params::HudObjectivesPresenter_OnEventProgressionDataInitialized Parms{};

	Parms.hudEventProgressionViewData = std::move(hudEventProgressionViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudObjectivesPresenter.OnEventProgressPendingChanged
// (Final, Native, Private)
// Parameters:
// const int32                             value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EVoidEnergyChangeReason           reasonEnergyChanged                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudObjectivesPresenter::OnEventProgressPendingChanged(const int32 value, const EVoidEnergyChangeReason reasonEnergyChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudObjectivesPresenter", "OnEventProgressPendingChanged");

	Params::HudObjectivesPresenter_OnEventProgressPendingChanged Parms{};

	Parms.value = value;
	Parms.reasonEnergyChanged = reasonEnergyChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudPeekingPromptsPresenter.HandleBestPlayerInteractionsChanged
// (Final, Native, Private)

void UHudPeekingPromptsPresenter::HandleBestPlayerInteractionsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudPeekingPromptsPresenter", "HandleBestPlayerInteractionsChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudPeekingPromptsPresenter.UpdatePeekingState
// (Final, Native, Private)
// Parameters:
// ELeanState                              potentialLeanState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudPeekingPromptsPresenter::UpdatePeekingState(ELeanState potentialLeanState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudPeekingPromptsPresenter", "UpdatePeekingState");

	Params::HudPeekingPromptsPresenter_UpdatePeekingState Parms{};

	Parms.potentialLeanState = potentialLeanState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudPeekingPromptsPresenter.CanPlayerLean
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHudPeekingPromptsPresenter::CanPlayerLean() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudPeekingPromptsPresenter", "CanPlayerLean");

	Params::HudPeekingPromptsPresenter_CanPlayerLean Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.HudSpectatePresenter.OnLeaveTriggered
// (Final, Native, Private)

void UHudSpectatePresenter::OnLeaveTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudSpectatePresenter", "OnLeaveTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudSpectatePresenter.OnNextPlayerTriggered
// (Final, Native, Private)

void UHudSpectatePresenter::OnNextPlayerTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudSpectatePresenter", "OnNextPlayerTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudSpectatePresenter.OnPlayerGameStateChanged
// (Final, Native, Private)
// Parameters:
// class ADBDPlayerState*                  dbdPlayerState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGameState                              newGameState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHudSpectatePresenter::OnPlayerGameStateChanged(class ADBDPlayerState* dbdPlayerState, EGameState newGameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudSpectatePresenter", "OnPlayerGameStateChanged");

	Params::HudSpectatePresenter_OnPlayerGameStateChanged Parms{};

	Parms.dbdPlayerState = dbdPlayerState;
	Parms.newGameState = newGameState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudSpectatePresenter.OnPreviousPlayerTriggered
// (Final, Native, Private)

void UHudSpectatePresenter::OnPreviousPlayerTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudSpectatePresenter", "OnPreviousPlayerTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudTutorialObjectivesPresenter.IsInTutorial
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHudTutorialObjectivesPresenter::IsInTutorial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudTutorialObjectivesPresenter", "IsInTutorial");

	Params::HudTutorialObjectivesPresenter_IsInTutorial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.LightSensitivityPresenter.OnCompletedFadeOut
// (Final, Native, Private)

void ULightSensitivityPresenter::OnCompletedFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightSensitivityPresenter", "OnCompletedFadeOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.LightSensitivityPresenter.OnContinue
// (Final, Native, Private)

void ULightSensitivityPresenter::OnContinue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightSensitivityPresenter", "OnContinue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.LoadoutMenuPopupPresenter.OnLoadoutMenuInventorySlotClick
// (Final, Native, Private)
// Parameters:
// const ELoadoutSlot                      itemIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       itemId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupPresenter::OnLoadoutMenuInventorySlotClick(const ELoadoutSlot itemIndex, const class FName itemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupPresenter", "OnLoadoutMenuInventorySlotClick");

	Params::LoadoutMenuPopupPresenter_OnLoadoutMenuInventorySlotClick Parms{};

	Parms.itemIndex = itemIndex;
	Parms.itemId = itemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.LoadoutMenuPopupPresenter.OnLoadoutMenuPresetClicked
// (Final, Native, Private)
// Parameters:
// const int32                             presetId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ELoadoutSlot                      slotSelected                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupPresenter::OnLoadoutMenuPresetClicked(const int32 presetId, const ELoadoutSlot slotSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupPresenter", "OnLoadoutMenuPresetClicked");

	Params::LoadoutMenuPopupPresenter_OnLoadoutMenuPresetClicked Parms{};

	Parms.presetId = presetId;
	Parms.slotSelected = slotSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.LoadoutMenuPopupPresenter.OnLoadoutMenuPresetSelected
// (Final, Native, Private)
// Parameters:
// const int32                             presetId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ELoadoutSlot                      slotSelected                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupPresenter::OnLoadoutMenuPresetSelected(const int32 presetId, const ELoadoutSlot slotSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupPresenter", "OnLoadoutMenuPresetSelected");

	Params::LoadoutMenuPopupPresenter_OnLoadoutMenuPresetSelected Parms{};

	Parms.presetId = presetId;
	Parms.slotSelected = slotSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.LoadoutMenuPopupPresenter.OnLoadoutMenuSlotIsSelected
// (Final, Native, Private)
// Parameters:
// ELoadoutSlot                            slotSelected                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupPresenter::OnLoadoutMenuSlotIsSelected(ELoadoutSlot slotSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupPresenter", "OnLoadoutMenuSlotIsSelected");

	Params::LoadoutMenuPopupPresenter_OnLoadoutMenuSlotIsSelected Parms{};

	Parms.slotSelected = slotSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.LoadoutMenuPopupPresenter.OnSelectedCharacterChanged
// (Final, Native, Private)
// Parameters:
// int32                                   selectedCharacterIndex                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupPresenter::OnSelectedCharacterChanged(int32 selectedCharacterIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupPresenter", "OnSelectedCharacterChanged");

	Params::LoadoutMenuPopupPresenter_OnSelectedCharacterChanged Parms{};

	Parms.selectedCharacterIndex = selectedCharacterIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.LoadoutMenuPopupPresenter.SetLoadoutPopupViewData
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FInventorySlotData&        slotData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const EPlayerRole                       playerRole                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULoadoutMenuPopupViewData*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULoadoutMenuPopupViewData* ULoadoutMenuPopupPresenter::SetLoadoutPopupViewData(const struct FInventorySlotData& slotData, const EPlayerRole playerRole)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupPresenter", "SetLoadoutPopupViewData");

	Params::LoadoutMenuPopupPresenter_SetLoadoutPopupViewData Parms{};

	Parms.slotData = std::move(slotData);
	Parms.playerRole = playerRole;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.OnboardingMenuPresenter.OnBackAction
// (Final, Native, Private)

void UOnboardingMenuPresenter::OnBackAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuPresenter", "OnBackAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.OnboardingMenuPresenter.OnChangeAccountAction
// (Final, Native, Private)

void UOnboardingMenuPresenter::OnChangeAccountAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuPresenter", "OnChangeAccountAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.OnboardingMenuPresenter.OnFirstOnboardingStepsDone
// (Final, Native, Private)
// Parameters:
// bool                                    isFirstStepsDone                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOnboardingMenuPresenter::OnFirstOnboardingStepsDone(bool isFirstStepsDone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuPresenter", "OnFirstOnboardingStepsDone");

	Params::OnboardingMenuPresenter_OnFirstOnboardingStepsDone Parms{};

	Parms.isFirstStepsDone = isFirstStepsDone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.OnboardingMenuPresenter.OnMenuTabSelected
// (Final, Native, Private)
// Parameters:
// EOnboardingMenuState                    menuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOnboardingMenuPresenter::OnMenuTabSelected(EOnboardingMenuState menuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuPresenter", "OnMenuTabSelected");

	Params::OnboardingMenuPresenter_OnMenuTabSelected Parms{};

	Parms.menuState = menuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.OnboardingMenuPresenter.OnMenuTabSelectedAgain
// (Final, Native, Private)
// Parameters:
// EOnboardingMenuState                    menuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOnboardingMenuPresenter::OnMenuTabSelectedAgain(EOnboardingMenuState menuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuPresenter", "OnMenuTabSelectedAgain");

	Params::OnboardingMenuPresenter_OnMenuTabSelectedAgain Parms{};

	Parms.menuState = menuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.OnboardingMenuPresenter.OnQuitGameAction
// (Final, Native, Private)

void UOnboardingMenuPresenter::OnQuitGameAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuPresenter", "OnQuitGameAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.OnboardingMenuPresenter.OnSettingsAction
// (Final, Native, Private)

void UOnboardingMenuPresenter::OnSettingsAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuPresenter", "OnSettingsAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.OnboardingMenuPresenter.OnSetUIEnabled
// (Final, Native, Private)
// Parameters:
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOnboardingMenuPresenter::OnSetUIEnabled(bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuPresenter", "OnSetUIEnabled");

	Params::OnboardingMenuPresenter_OnSetUIEnabled Parms{};

	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.OnboardingTutorialSubPresenter.OnSelectTutorial
// (Final, Native, Private)
// Parameters:
// const class FString&                    stepId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    tutorialId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOnboardingTutorialSubPresenter::OnSelectTutorial(const class FString& stepId, const class FString& tutorialId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingTutorialSubPresenter", "OnSelectTutorial");

	Params::OnboardingTutorialSubPresenter_OnSelectTutorial Parms{};

	Parms.stepId = std::move(stepId);
	Parms.tutorialId = std::move(tutorialId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.PawnObserver.OnLocallyObservedChanged
// (Final, Native, Public)

void UPawnObserver::OnLocallyObservedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnObserver", "OnLocallyObservedChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.PawnObserver.OnPawnControllerSet
// (Final, Native, Private)
// Parameters:
// class APawn*                            pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      oldController                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      newController                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnObserver::OnPawnControllerSet(class APawn* pawn, class AController* oldController, class AController* newController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnObserver", "OnPawnControllerSet");

	Params::PawnObserver_OnPawnControllerSet Parms{};

	Parms.pawn = pawn;
	Parms.oldController = oldController;
	Parms.newController = newController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.PlayerProfilePresenter.GetPlayerName
// (Final, Native, Private)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UPlayerProfilePresenter::GetPlayerName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfilePresenter", "GetPlayerName");

	Params::PlayerProfilePresenter_GetPlayerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.PlayerProfilePresenter.OnCurrentSpecialEventChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FCombinedSpecialEventData& previousSpecialEvent                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ESpecialEventStatus                     previousSpecialEventStatus                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FCombinedSpecialEventData& currentSpecialEvent                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ESpecialEventStatus                     currentSpecialEventStatus                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerProfilePresenter::OnCurrentSpecialEventChanged(const struct FCombinedSpecialEventData& previousSpecialEvent, ESpecialEventStatus previousSpecialEventStatus, const struct FCombinedSpecialEventData& currentSpecialEvent, ESpecialEventStatus currentSpecialEventStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfilePresenter", "OnCurrentSpecialEventChanged");

	Params::PlayerProfilePresenter_OnCurrentSpecialEventChanged Parms{};

	Parms.previousSpecialEvent = std::move(previousSpecialEvent);
	Parms.previousSpecialEventStatus = previousSpecialEventStatus;
	Parms.currentSpecialEvent = std::move(currentSpecialEvent);
	Parms.currentSpecialEventStatus = currentSpecialEventStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.PlayerProfilePresenter.OnHideImageViewer
// (Final, Native, Private)

void UPlayerProfilePresenter::OnHideImageViewer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfilePresenter", "OnHideImageViewer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.PlayerProfilePresenter.OnShowImageViewer
// (Final, Native, Private)
// Parameters:
// bool                                    voiceOverIsPlaying                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerProfilePresenter::OnShowImageViewer(bool voiceOverIsPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfilePresenter", "OnShowImageViewer");

	Params::PlayerProfilePresenter_OnShowImageViewer Parms{};

	Parms.voiceOverIsPlaying = voiceOverIsPlaying;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.PlayerProfilePresenter.OnWalletUpdated
// (Final, Native, Private, HasOutParams)
// Parameters:
// const TArray<struct FShopWalletUpdate>& walletUpdates                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UPlayerProfilePresenter::OnWalletUpdated(const TArray<struct FShopWalletUpdate>& walletUpdates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfilePresenter", "OnWalletUpdated");

	Params::PlayerProfilePresenter_OnWalletUpdated Parms{};

	Parms.walletUpdates = std::move(walletUpdates);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.PlayerProfilePresenter.RefreshWallet
// (Final, Native, Private)

void UPlayerProfilePresenter::RefreshWallet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfilePresenter", "RefreshWallet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.PresenterManager.OnLoadingTransition
// (Final, Native, Private)
// Parameters:
// const ELoadingTransitionType            transitionType                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPresenterManager::OnLoadingTransition(const ELoadingTransitionType transitionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PresenterManager", "OnLoadingTransition");

	Params::PresenterManager_OnLoadingTransition Parms{};

	Parms.transitionType = transitionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.PresenterManager.OnViewportCreated
// (Final, Native, Private)

void UPresenterManager::OnViewportCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PresenterManager", "OnViewportCreated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.SubtitlesPresenter.OnEntryTimedOut
// (Final, Native, Private)

void USubtitlesPresenter::OnEntryTimedOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubtitlesPresenter", "OnEntryTimedOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.SubtitlesPresenter.IsSubtitlesEnabled
// (Final, Native, Private, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USubtitlesPresenter::IsSubtitlesEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubtitlesPresenter", "IsSubtitlesEnabled");

	Params::SubtitlesPresenter_IsSubtitlesEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.HudTutorialBlockingNotificationsPresenter.OnTutorialHudFadeInTriggered
// (Final, Native, Private)

void UHudTutorialBlockingNotificationsPresenter::OnTutorialHudFadeInTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudTutorialBlockingNotificationsPresenter", "OnTutorialHudFadeInTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudTutorialBlockingNotificationsPresenter.OnTutorialHudFadeOutTriggered
// (Final, Native, Private)

void UHudTutorialBlockingNotificationsPresenter::OnTutorialHudFadeOutTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudTutorialBlockingNotificationsPresenter", "OnTutorialHudFadeOutTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.HudTutorialBlockingNotificationsPresenter.OnTutorialNotificationClosedByUserInput
// (Final, Native, Private)

void UHudTutorialBlockingNotificationsPresenter::OnTutorialNotificationClosedByUserInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudTutorialBlockingNotificationsPresenter", "OnTutorialNotificationClosedByUserInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.UIConsoleCommands.DBD_ResetPresenters
// (Final, Exec, Native, Public)

void UUIConsoleCommands::DBD_ResetPresenters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConsoleCommands", "DBD_ResetPresenters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.UIConsoleCommands.DBD_SetAllHUDWidgetsVisible
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    isVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIConsoleCommands::DBD_SetAllHUDWidgetsVisible(bool isVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConsoleCommands", "DBD_SetAllHUDWidgetsVisible");

	Params::UIConsoleCommands_DBD_SetAllHUDWidgetsVisible Parms{};

	Parms.isVisible = isVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.UIConsoleCommands.DBD_SetApplicationScale
// (Final, Exec, Native, Public)
// Parameters:
// float                                   applicationScale                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIConsoleCommands::DBD_SetApplicationScale(float applicationScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConsoleCommands", "DBD_SetApplicationScale");

	Params::UIConsoleCommands_DBD_SetApplicationScale Parms{};

	Parms.applicationScale = applicationScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.UIConsoleCommands.DBD_SetHudScaleFactor
// (Final, Exec, Native, Public)
// Parameters:
// float                                   scaleFactor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIConsoleCommands::DBD_SetHudScaleFactor(float scaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConsoleCommands", "DBD_SetHudScaleFactor");

	Params::UIConsoleCommands_DBD_SetHudScaleFactor Parms{};

	Parms.scaleFactor = scaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.UIConsoleCommands.DBD_SetHudVisible
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    isVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIConsoleCommands::DBD_SetHudVisible(bool isVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConsoleCommands", "DBD_SetHudVisible");

	Params::UIConsoleCommands_DBD_SetHudVisible Parms{};

	Parms.isVisible = isVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.UIConsoleCommands.DBD_SetHUDWidgetVisible
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   index                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIConsoleCommands::DBD_SetHUDWidgetVisible(int32 index, bool isVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConsoleCommands", "DBD_SetHUDWidgetVisible");

	Params::UIConsoleCommands_DBD_SetHUDWidgetVisible Parms{};

	Parms.index = index;
	Parms.isVisible = isVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.UIConsoleCommands.DBD_SetMenuScaleFactor
// (Final, Exec, Native, Public)
// Parameters:
// float                                   scaleFactor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIConsoleCommands::DBD_SetMenuScaleFactor(float scaleFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConsoleCommands", "DBD_SetMenuScaleFactor");

	Params::UIConsoleCommands_DBD_SetMenuScaleFactor Parms{};

	Parms.scaleFactor = scaleFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.UIConsoleCommands.DBD_SetUMGVisible
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    isVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIConsoleCommands::DBD_SetUMGVisible(bool isVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConsoleCommands", "DBD_SetUMGVisible");

	Params::UIConsoleCommands_DBD_SetUMGVisible Parms{};

	Parms.isVisible = isVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.UIConsoleCommands.DBD_ShowHUDWidgetsInfo
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    show                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIConsoleCommands::DBD_ShowHUDWidgetsInfo(bool show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConsoleCommands", "DBD_ShowHUDWidgetsInfo");

	Params::UIConsoleCommands_DBD_ShowHUDWidgetsInfo Parms{};

	Parms.show = show;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.UIConsoleCommands.DBD_ShowPresenterDebugInfo
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   presenterDebugMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIConsoleCommands::DBD_ShowPresenterDebugInfo(int32 presenterDebugMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConsoleCommands", "DBD_ShowPresenterDebugInfo");

	Params::UIConsoleCommands_DBD_ShowPresenterDebugInfo Parms{};

	Parms.presenterDebugMode = presenterDebugMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.UIConsoleCommands.DBD_ToggleDPICurve
// (Final, Exec, Native, Public)

void UUIConsoleCommands::DBD_ToggleDPICurve()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConsoleCommands", "DBD_ToggleDPICurve");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.UIConsoleCommands.DBD_ToggleTestWidget
// (Final, Exec, Native, Public)

void UUIConsoleCommands::DBD_ToggleTestWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConsoleCommands", "DBD_ToggleTestWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIPresenters.WatermarkPresenter.IsNonShippingBuild
// (Final, Native, Protected)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWatermarkPresenter::IsNonShippingBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WatermarkPresenter", "IsNonShippingBuild");

	Params::WatermarkPresenter_IsNonShippingBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.WatermarkPresenter.IsSteamBuild
// (Final, Native, Protected)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWatermarkPresenter::IsSteamBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WatermarkPresenter", "IsSteamBuild");

	Params::WatermarkPresenter_IsSteamBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIPresenters.WatermarkPresenter.IsUsingCommandLineArgument
// (Final, Native, Protected)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWatermarkPresenter::IsUsingCommandLineArgument()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WatermarkPresenter", "IsUsingCommandLineArgument");

	Params::WatermarkPresenter_IsUsingCommandLineArgument Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

