#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhysicsUtilities

#include "Basic.hpp"

#include "PhysicsUtilities_classes.hpp"
#include "PhysicsUtilities_parameters.hpp"


namespace SDK
{

// Function PhysicsUtilities.DynamicCapsuleResizerComponent.OnHit
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              hitComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           otherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              otherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   normalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDynamicCapsuleResizerComponent::OnHit(class UPrimitiveComponent* hitComponent, class AActor* otherActor, class UPrimitiveComponent* otherComp, const struct FVector& normalImpulse, const struct FHitResult& hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicCapsuleResizerComponent", "OnHit");

	Params::DynamicCapsuleResizerComponent_OnHit Parms{};

	Parms.hitComponent = hitComponent;
	Parms.otherActor = otherActor;
	Parms.otherComp = otherComp;
	Parms.normalImpulse = std::move(normalImpulse);
	Parms.hit = std::move(hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsUtilities.DynamicCapsuleResizerComponent.OnRep_IsShrinkingAlwaysEnabled
// (Final, Native, Private)

void UDynamicCapsuleResizerComponent::OnRep_IsShrinkingAlwaysEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicCapsuleResizerComponent", "OnRep_IsShrinkingAlwaysEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsUtilities.DynamicCapsuleResizerComponent.SetShrinkingEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicCapsuleResizerComponent::SetShrinkingEnabled(bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DynamicCapsuleResizerComponent", "SetShrinkingEnabled");

	Params::DynamicCapsuleResizerComponent_SetShrinkingEnabled Parms{};

	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsUtilities.PrimitiveCollection.Add
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              primitive                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPrimitiveCollection::Add(class UPrimitiveComponent* primitive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrimitiveCollection", "Add");

	Params::PrimitiveCollection_Add Parms{};

	Parms.primitive = primitive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsUtilities.PrimitiveCollection.Remove
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              primitive                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPrimitiveCollection::Remove(class UPrimitiveComponent* primitive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrimitiveCollection", "Remove");

	Params::PrimitiveCollection_Remove Parms{};

	Parms.primitive = primitive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsUtilities.PrimitivesRegistererComponent.SetPrimitives
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UPrimitiveComponent*>&primitives                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UPrimitivesRegistererComponent::SetPrimitives(const TArray<class UPrimitiveComponent*>& primitives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrimitivesRegistererComponent", "SetPrimitives");

	Params::PrimitivesRegistererComponent_SetPrimitives Parms{};

	Parms.primitives = std::move(primitives);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

