#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayUtilities

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum GameplayUtilities.ESightStatus
// NumValues: 0x0004
enum class ESightStatus : uint8
{
	OutOfSight                               = 0,
	Discerned                                = 1,
	Sighted                                  = 2,
	ESightStatus_MAX                         = 3,
};

// Enum GameplayUtilities.EComparisonOperation
// NumValues: 0x0007
enum class EComparisonOperation : uint8
{
	EqualTo                                  = 0,
	NotEqualTo                               = 1,
	GreaterThan                              = 2,
	GreaterThanOrEqualTo                     = 3,
	LesserThan                               = 4,
	LesserThanOrEqualTo                      = 5,
	EComparisonOperation_MAX                 = 6,
};

// ScriptStruct GameplayUtilities.AuthorityDiscernedCharacter
// 0x0010 (0x0010 - 0x0000)
struct FAuthorityDiscernedCharacter final
{
public:
	class ACharacter*                             _character;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isSighted;                                        // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAuthorityDiscernedCharacter) == 0x000008, "Wrong alignment on FAuthorityDiscernedCharacter");
static_assert(sizeof(FAuthorityDiscernedCharacter) == 0x000010, "Wrong size on FAuthorityDiscernedCharacter");
static_assert(offsetof(FAuthorityDiscernedCharacter, _character) == 0x000000, "Member 'FAuthorityDiscernedCharacter::_character' has a wrong offset!");
static_assert(offsetof(FAuthorityDiscernedCharacter, _isSighted) == 0x000008, "Member 'FAuthorityDiscernedCharacter::_isSighted' has a wrong offset!");

// ScriptStruct GameplayUtilities.DiscernibleCharacter
// 0x0018 (0x0018 - 0x0000)
struct FDiscernibleCharacter final
{
public:
	class ACharacter*                             _character;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDiscernibleCharacter) == 0x000008, "Wrong alignment on FDiscernibleCharacter");
static_assert(sizeof(FDiscernibleCharacter) == 0x000018, "Wrong size on FDiscernibleCharacter");
static_assert(offsetof(FDiscernibleCharacter, _character) == 0x000000, "Member 'FDiscernibleCharacter::_character' has a wrong offset!");

// ScriptStruct GameplayUtilities.HitValidatorInstigatorParams
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FHitValidatorInstigatorParams final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x48];                                       // 0x0008(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    HitPrimitive;                                      // 0x0050(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitValidatorInstigatorParams) == 0x000010, "Wrong alignment on FHitValidatorInstigatorParams");
static_assert(sizeof(FHitValidatorInstigatorParams) == 0x000060, "Wrong size on FHitValidatorInstigatorParams");
static_assert(offsetof(FHitValidatorInstigatorParams, Instigator) == 0x000000, "Member 'FHitValidatorInstigatorParams::Instigator' has a wrong offset!");
static_assert(offsetof(FHitValidatorInstigatorParams, HitPrimitive) == 0x000050, "Member 'FHitValidatorInstigatorParams::HitPrimitive' has a wrong offset!");

// ScriptStruct GameplayUtilities.HitValidatorTargetParams
// 0x0018 (0x0018 - 0x0000)
struct FHitValidatorTargetParams final
{
public:
	class ACharacter*                             Target;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      HittableCapsule;                                   // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetLocationTimestamp;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHitValidatorTargetParams) == 0x000008, "Wrong alignment on FHitValidatorTargetParams");
static_assert(sizeof(FHitValidatorTargetParams) == 0x000018, "Wrong size on FHitValidatorTargetParams");
static_assert(offsetof(FHitValidatorTargetParams, Target) == 0x000000, "Member 'FHitValidatorTargetParams::Target' has a wrong offset!");
static_assert(offsetof(FHitValidatorTargetParams, HittableCapsule) == 0x000008, "Member 'FHitValidatorTargetParams::HittableCapsule' has a wrong offset!");
static_assert(offsetof(FHitValidatorTargetParams, TargetLocationTimestamp) == 0x000010, "Member 'FHitValidatorTargetParams::TargetLocationTimestamp' has a wrong offset!");

// ScriptStruct GameplayUtilities.HitValidationReport
// 0x0160 (0x0160 - 0x0000)
struct FHitValidationReport final
{
public:
	struct FHitValidatorInstigatorParams          InstigatorParams;                                  // 0x0000(0x0060)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitValidatorTargetParams              TargetParams;                                      // 0x0060(0x0018)(NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ValidationTimestamp;                               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            TargetRecorderTimeRange;                           // 0x007C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             InstigatorOwningCharacter;                         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumDistance;                                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleInflation;                                  // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValidHit;                                        // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValidDistance;                                   // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValidNotStunned;                                 // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A3[0xD];                                       // 0x00A3(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InstigatorTransform;                               // 0x00B0(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RewindedTargetLocation;                            // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SquareDistance;                                    // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasPerformCollisionCheck;                          // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValidCollision;                                  // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE[0x2];                                       // 0x00FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             HitPrimitiveTransform;                             // 0x0100(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             HittablePrimitiveTransform;                        // 0x0130(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHitValidationReport) == 0x000010, "Wrong alignment on FHitValidationReport");
static_assert(sizeof(FHitValidationReport) == 0x000160, "Wrong size on FHitValidationReport");
static_assert(offsetof(FHitValidationReport, InstigatorParams) == 0x000000, "Member 'FHitValidationReport::InstigatorParams' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, TargetParams) == 0x000060, "Member 'FHitValidationReport::TargetParams' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, ValidationTimestamp) == 0x000078, "Member 'FHitValidationReport::ValidationTimestamp' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, TargetRecorderTimeRange) == 0x00007C, "Member 'FHitValidationReport::TargetRecorderTimeRange' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, InstigatorOwningCharacter) == 0x000090, "Member 'FHitValidationReport::InstigatorOwningCharacter' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, MaximumDistance) == 0x000098, "Member 'FHitValidationReport::MaximumDistance' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, CapsuleInflation) == 0x00009C, "Member 'FHitValidationReport::CapsuleInflation' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, IsValidHit) == 0x0000A0, "Member 'FHitValidationReport::IsValidHit' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, IsValidDistance) == 0x0000A1, "Member 'FHitValidationReport::IsValidDistance' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, IsValidNotStunned) == 0x0000A2, "Member 'FHitValidationReport::IsValidNotStunned' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, InstigatorTransform) == 0x0000B0, "Member 'FHitValidationReport::InstigatorTransform' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, RewindedTargetLocation) == 0x0000E0, "Member 'FHitValidationReport::RewindedTargetLocation' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, TargetLocation) == 0x0000EC, "Member 'FHitValidationReport::TargetLocation' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, SquareDistance) == 0x0000F8, "Member 'FHitValidationReport::SquareDistance' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, HasPerformCollisionCheck) == 0x0000FC, "Member 'FHitValidationReport::HasPerformCollisionCheck' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, IsValidCollision) == 0x0000FD, "Member 'FHitValidationReport::IsValidCollision' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, HitPrimitiveTransform) == 0x000100, "Member 'FHitValidationReport::HitPrimitiveTransform' has a wrong offset!");
static_assert(offsetof(FHitValidationReport, HittablePrimitiveTransform) == 0x000130, "Member 'FHitValidationReport::HittablePrimitiveTransform' has a wrong offset!");

}

