#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimationUtilities

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AnimationUtilities.AnimInstanceExt.GetOwningActor
// 0x0010 (0x0010 - 0x0000)
struct AnimInstanceExt_GetOwningActor final
{
public:
	const class UAnimInstance*                    animInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceExt_GetOwningActor) == 0x000008, "Wrong alignment on AnimInstanceExt_GetOwningActor");
static_assert(sizeof(AnimInstanceExt_GetOwningActor) == 0x000010, "Wrong size on AnimInstanceExt_GetOwningActor");
static_assert(offsetof(AnimInstanceExt_GetOwningActor, animInstance) == 0x000000, "Member 'AnimInstanceExt_GetOwningActor::animInstance' has a wrong offset!");
static_assert(offsetof(AnimInstanceExt_GetOwningActor, ReturnValue) == 0x000008, "Member 'AnimInstanceExt_GetOwningActor::ReturnValue' has a wrong offset!");

// Function AnimationUtilities.AnimInstanceExt.GetOwningCharacter
// 0x0010 (0x0010 - 0x0000)
struct AnimInstanceExt_GetOwningCharacter final
{
public:
	const class UAnimInstance*                    animInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceExt_GetOwningCharacter) == 0x000008, "Wrong alignment on AnimInstanceExt_GetOwningCharacter");
static_assert(sizeof(AnimInstanceExt_GetOwningCharacter) == 0x000010, "Wrong size on AnimInstanceExt_GetOwningCharacter");
static_assert(offsetof(AnimInstanceExt_GetOwningCharacter, animInstance) == 0x000000, "Member 'AnimInstanceExt_GetOwningCharacter::animInstance' has a wrong offset!");
static_assert(offsetof(AnimInstanceExt_GetOwningCharacter, ReturnValue) == 0x000008, "Member 'AnimInstanceExt_GetOwningCharacter::ReturnValue' has a wrong offset!");

// Function AnimationUtilities.AnimInstanceExt.GetOwningCharacterSkeletalMeshComponent
// 0x0010 (0x0010 - 0x0000)
struct AnimInstanceExt_GetOwningCharacterSkeletalMeshComponent final
{
public:
	const class UAnimInstance*                    animInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceExt_GetOwningCharacterSkeletalMeshComponent) == 0x000008, "Wrong alignment on AnimInstanceExt_GetOwningCharacterSkeletalMeshComponent");
static_assert(sizeof(AnimInstanceExt_GetOwningCharacterSkeletalMeshComponent) == 0x000010, "Wrong size on AnimInstanceExt_GetOwningCharacterSkeletalMeshComponent");
static_assert(offsetof(AnimInstanceExt_GetOwningCharacterSkeletalMeshComponent, animInstance) == 0x000000, "Member 'AnimInstanceExt_GetOwningCharacterSkeletalMeshComponent::animInstance' has a wrong offset!");
static_assert(offsetof(AnimInstanceExt_GetOwningCharacterSkeletalMeshComponent, ReturnValue) == 0x000008, "Member 'AnimInstanceExt_GetOwningCharacterSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function AnimationUtilities.AnimInstanceExt.GetRootSkeletalMeshComponent
// 0x0010 (0x0010 - 0x0000)
struct AnimInstanceExt_GetRootSkeletalMeshComponent final
{
public:
	const class UAnimInstance*                    animInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceExt_GetRootSkeletalMeshComponent) == 0x000008, "Wrong alignment on AnimInstanceExt_GetRootSkeletalMeshComponent");
static_assert(sizeof(AnimInstanceExt_GetRootSkeletalMeshComponent) == 0x000010, "Wrong size on AnimInstanceExt_GetRootSkeletalMeshComponent");
static_assert(offsetof(AnimInstanceExt_GetRootSkeletalMeshComponent, animInstance) == 0x000000, "Member 'AnimInstanceExt_GetRootSkeletalMeshComponent::animInstance' has a wrong offset!");
static_assert(offsetof(AnimInstanceExt_GetRootSkeletalMeshComponent, ReturnValue) == 0x000008, "Member 'AnimInstanceExt_GetRootSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function AnimationUtilities.AnimInstanceExt.GetSubAnimInstance
// 0x0018 (0x0018 - 0x0000)
struct AnimInstanceExt_GetSubAnimInstance final
{
public:
	const class UAnimInstance*                    root;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 type;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceExt_GetSubAnimInstance) == 0x000008, "Wrong alignment on AnimInstanceExt_GetSubAnimInstance");
static_assert(sizeof(AnimInstanceExt_GetSubAnimInstance) == 0x000018, "Wrong size on AnimInstanceExt_GetSubAnimInstance");
static_assert(offsetof(AnimInstanceExt_GetSubAnimInstance, root) == 0x000000, "Member 'AnimInstanceExt_GetSubAnimInstance::root' has a wrong offset!");
static_assert(offsetof(AnimInstanceExt_GetSubAnimInstance, type) == 0x000008, "Member 'AnimInstanceExt_GetSubAnimInstance::type' has a wrong offset!");
static_assert(offsetof(AnimInstanceExt_GetSubAnimInstance, ReturnValue) == 0x000010, "Member 'AnimInstanceExt_GetSubAnimInstance::ReturnValue' has a wrong offset!");

// Function AnimationUtilities.SleepingAnimInstance.OnMontageStart
// 0x0008 (0x0008 - 0x0000)
struct SleepingAnimInstance_OnMontageStart final
{
public:
	class UAnimMontage*                           montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SleepingAnimInstance_OnMontageStart) == 0x000008, "Wrong alignment on SleepingAnimInstance_OnMontageStart");
static_assert(sizeof(SleepingAnimInstance_OnMontageStart) == 0x000008, "Wrong size on SleepingAnimInstance_OnMontageStart");
static_assert(offsetof(SleepingAnimInstance_OnMontageStart, montage) == 0x000000, "Member 'SleepingAnimInstance_OnMontageStart::montage' has a wrong offset!");

// Function AnimationUtilities.SleepingAnimInstance.SetNeverIdle
// 0x0001 (0x0001 - 0x0000)
struct SleepingAnimInstance_SetNeverIdle final
{
public:
	bool                                          neverIdle;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SleepingAnimInstance_SetNeverIdle) == 0x000001, "Wrong alignment on SleepingAnimInstance_SetNeverIdle");
static_assert(sizeof(SleepingAnimInstance_SetNeverIdle) == 0x000001, "Wrong size on SleepingAnimInstance_SetNeverIdle");
static_assert(offsetof(SleepingAnimInstance_SetNeverIdle, neverIdle) == 0x000000, "Member 'SleepingAnimInstance_SetNeverIdle::neverIdle' has a wrong offset!");

// Function AnimationUtilities.AnimEffectHandler.HandleAnimNotify
// 0x0018 (0x0018 - 0x0000)
struct AnimEffectHandler_HandleAnimNotify final
{
public:
	class AActor*                                 player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   notifyName;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimEffectHandler_HandleAnimNotify) == 0x000008, "Wrong alignment on AnimEffectHandler_HandleAnimNotify");
static_assert(sizeof(AnimEffectHandler_HandleAnimNotify) == 0x000018, "Wrong size on AnimEffectHandler_HandleAnimNotify");
static_assert(offsetof(AnimEffectHandler_HandleAnimNotify, player) == 0x000000, "Member 'AnimEffectHandler_HandleAnimNotify::player' has a wrong offset!");
static_assert(offsetof(AnimEffectHandler_HandleAnimNotify, notifyName) == 0x000008, "Member 'AnimEffectHandler_HandleAnimNotify::notifyName' has a wrong offset!");
static_assert(offsetof(AnimEffectHandler_HandleAnimNotify, ReturnValue) == 0x000014, "Member 'AnimEffectHandler_HandleAnimNotify::ReturnValue' has a wrong offset!");

// Function AnimationUtilities.BaseGroundDetectorComponent.GetGroundPosition
// 0x0024 (0x0024 - 0x0000)
struct BaseGroundDetectorComponent_GetGroundPosition final
{
public:
	struct FVector                                targetPos;                                         // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                extraOffset;                                       // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseGroundDetectorComponent_GetGroundPosition) == 0x000004, "Wrong alignment on BaseGroundDetectorComponent_GetGroundPosition");
static_assert(sizeof(BaseGroundDetectorComponent_GetGroundPosition) == 0x000024, "Wrong size on BaseGroundDetectorComponent_GetGroundPosition");
static_assert(offsetof(BaseGroundDetectorComponent_GetGroundPosition, targetPos) == 0x000000, "Member 'BaseGroundDetectorComponent_GetGroundPosition::targetPos' has a wrong offset!");
static_assert(offsetof(BaseGroundDetectorComponent_GetGroundPosition, extraOffset) == 0x00000C, "Member 'BaseGroundDetectorComponent_GetGroundPosition::extraOffset' has a wrong offset!");
static_assert(offsetof(BaseGroundDetectorComponent_GetGroundPosition, ReturnValue) == 0x000018, "Member 'BaseGroundDetectorComponent_GetGroundPosition::ReturnValue' has a wrong offset!");

// Function AnimationUtilities.BaseGroundDetectorComponent.InitSkinnedMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct BaseGroundDetectorComponent_InitSkinnedMeshComponent final
{
public:
	class USkinnedMeshComponent*                  mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseGroundDetectorComponent_InitSkinnedMeshComponent) == 0x000008, "Wrong alignment on BaseGroundDetectorComponent_InitSkinnedMeshComponent");
static_assert(sizeof(BaseGroundDetectorComponent_InitSkinnedMeshComponent) == 0x000008, "Wrong size on BaseGroundDetectorComponent_InitSkinnedMeshComponent");
static_assert(offsetof(BaseGroundDetectorComponent_InitSkinnedMeshComponent, mesh) == 0x000000, "Member 'BaseGroundDetectorComponent_InitSkinnedMeshComponent::mesh' has a wrong offset!");

// Function AnimationUtilities.BoneSocketLocalVelocityEvaluator.GetLocalVelocity
// 0x0018 (0x0018 - 0x0000)
struct BoneSocketLocalVelocityEvaluator_GetLocalVelocity final
{
public:
	class FName                                   boneSocketName;                                    // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoneSocketLocalVelocityEvaluator_GetLocalVelocity) == 0x000004, "Wrong alignment on BoneSocketLocalVelocityEvaluator_GetLocalVelocity");
static_assert(sizeof(BoneSocketLocalVelocityEvaluator_GetLocalVelocity) == 0x000018, "Wrong size on BoneSocketLocalVelocityEvaluator_GetLocalVelocity");
static_assert(offsetof(BoneSocketLocalVelocityEvaluator_GetLocalVelocity, boneSocketName) == 0x000000, "Member 'BoneSocketLocalVelocityEvaluator_GetLocalVelocity::boneSocketName' has a wrong offset!");
static_assert(offsetof(BoneSocketLocalVelocityEvaluator_GetLocalVelocity, ReturnValue) == 0x00000C, "Member 'BoneSocketLocalVelocityEvaluator_GetLocalVelocity::ReturnValue' has a wrong offset!");

// Function AnimationUtilities.MoveComponentToComponent.Start
// 0x0018 (0x0018 - 0x0000)
struct MoveComponentToComponent_Start final
{
public:
	class USceneComponent*                        componentToMove;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USceneComponent*                  target;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoveComponentToComponent_Start) == 0x000008, "Wrong alignment on MoveComponentToComponent_Start");
static_assert(sizeof(MoveComponentToComponent_Start) == 0x000018, "Wrong size on MoveComponentToComponent_Start");
static_assert(offsetof(MoveComponentToComponent_Start, componentToMove) == 0x000000, "Member 'MoveComponentToComponent_Start::componentToMove' has a wrong offset!");
static_assert(offsetof(MoveComponentToComponent_Start, target) == 0x000008, "Member 'MoveComponentToComponent_Start::target' has a wrong offset!");
static_assert(offsetof(MoveComponentToComponent_Start, duration) == 0x000010, "Member 'MoveComponentToComponent_Start::duration' has a wrong offset!");

// Function AnimationUtilities.SlaveAnimInstance.SetMasterMesh
// 0x0008 (0x0008 - 0x0000)
struct SlaveAnimInstance_SetMasterMesh final
{
public:
	class USkeletalMeshComponent*                 masterMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlaveAnimInstance_SetMasterMesh) == 0x000008, "Wrong alignment on SlaveAnimInstance_SetMasterMesh");
static_assert(sizeof(SlaveAnimInstance_SetMasterMesh) == 0x000008, "Wrong size on SlaveAnimInstance_SetMasterMesh");
static_assert(offsetof(SlaveAnimInstance_SetMasterMesh, masterMesh) == 0x000000, "Member 'SlaveAnimInstance_SetMasterMesh::masterMesh' has a wrong offset!");

// Function AnimationUtilities.SlaveAnimInstance.GetMasterMesh
// 0x0008 (0x0008 - 0x0000)
struct SlaveAnimInstance_GetMasterMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlaveAnimInstance_GetMasterMesh) == 0x000008, "Wrong alignment on SlaveAnimInstance_GetMasterMesh");
static_assert(sizeof(SlaveAnimInstance_GetMasterMesh) == 0x000008, "Wrong size on SlaveAnimInstance_GetMasterMesh");
static_assert(offsetof(SlaveAnimInstance_GetMasterMesh, ReturnValue) == 0x000000, "Member 'SlaveAnimInstance_GetMasterMesh::ReturnValue' has a wrong offset!");

}

