#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheBlight

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "TheBlight_structs.hpp"
#include "Engine_classes.hpp"
#include "DBDCompetence_classes.hpp"
#include "DBDAttack_classes.hpp"
#include "DBDAnimation_classes.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "StatSystem_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class TheBlight.ActivateBlightPower
// 0x0000 (0x0740 - 0x0740)
class UActivateBlightPower final : public UChargeableInteractionDefinition
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActivateBlightPower">();
	}
	static class UActivateBlightPower* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivateBlightPower>();
	}
};
static_assert(alignof(UActivateBlightPower) == 0x000010, "Wrong alignment on UActivateBlightPower");
static_assert(sizeof(UActivateBlightPower) == 0x000740, "Wrong size on UActivateBlightPower");

// Class TheBlight.Addon_TheBlight_13
// 0x0010 (0x02C8 - 0x02B8)
class UAddon_TheBlight_13 final : public UItemAddon
{
public:
	float                                         _speedIncreasePerDash;                             // 0x02B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2BC[0xC];                                      // 0x02BC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_TheBlight_13">();
	}
	static class UAddon_TheBlight_13* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_TheBlight_13>();
	}
};
static_assert(alignof(UAddon_TheBlight_13) == 0x000008, "Wrong alignment on UAddon_TheBlight_13");
static_assert(sizeof(UAddon_TheBlight_13) == 0x0002C8, "Wrong size on UAddon_TheBlight_13");
static_assert(offsetof(UAddon_TheBlight_13, _speedIncreasePerDash) == 0x0002B8, "Member 'UAddon_TheBlight_13::_speedIncreasePerDash' has a wrong offset!");

// Class TheBlight.Addon_TheBlight_14
// 0x0008 (0x02D0 - 0x02C8)
class UAddon_TheBlight_14 final : public UOnEventBaseAddon
{
public:
	float                                         _palletPulldownBlockRange;                         // 0x02C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _palletPulldownBlockSeconds;                       // 0x02CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_TheBlight_14">();
	}
	static class UAddon_TheBlight_14* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_TheBlight_14>();
	}
};
static_assert(alignof(UAddon_TheBlight_14) == 0x000008, "Wrong alignment on UAddon_TheBlight_14");
static_assert(sizeof(UAddon_TheBlight_14) == 0x0002D0, "Wrong size on UAddon_TheBlight_14");
static_assert(offsetof(UAddon_TheBlight_14, _palletPulldownBlockRange) == 0x0002C8, "Member 'UAddon_TheBlight_14::_palletPulldownBlockRange' has a wrong offset!");
static_assert(offsetof(UAddon_TheBlight_14, _palletPulldownBlockSeconds) == 0x0002CC, "Member 'UAddon_TheBlight_14::_palletPulldownBlockSeconds' has a wrong offset!");

// Class TheBlight.Addon_TheBlight_17
// 0x0008 (0x02D0 - 0x02C8)
class UAddon_TheBlight_17 final : public UOnEventBaseAddon
{
public:
	float                                         _survivorInRangeDistance;                          // 0x02C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _hinderedSeconds;                                  // 0x02CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Multicast_SpawnParticleOnSurvivors(const TArray<class ACamperPlayer*>& survivors);
	void SpawnParticleOnSurvivor(const class ACamperPlayer* camperPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_TheBlight_17">();
	}
	static class UAddon_TheBlight_17* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_TheBlight_17>();
	}
};
static_assert(alignof(UAddon_TheBlight_17) == 0x000008, "Wrong alignment on UAddon_TheBlight_17");
static_assert(sizeof(UAddon_TheBlight_17) == 0x0002D0, "Wrong size on UAddon_TheBlight_17");
static_assert(offsetof(UAddon_TheBlight_17, _survivorInRangeDistance) == 0x0002C8, "Member 'UAddon_TheBlight_17::_survivorInRangeDistance' has a wrong offset!");
static_assert(offsetof(UAddon_TheBlight_17, _hinderedSeconds) == 0x0002CC, "Member 'UAddon_TheBlight_17::_hinderedSeconds' has a wrong offset!");

// Class TheBlight.Addon_TheBlight_18
// 0x0008 (0x02C0 - 0x02B8)
class UAddon_TheBlight_18 final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _blightUndetectableEffect;                         // 0x02B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_TheBlight_18">();
	}
	static class UAddon_TheBlight_18* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_TheBlight_18>();
	}
};
static_assert(alignof(UAddon_TheBlight_18) == 0x000008, "Wrong alignment on UAddon_TheBlight_18");
static_assert(sizeof(UAddon_TheBlight_18) == 0x0002C0, "Wrong size on UAddon_TheBlight_18");
static_assert(offsetof(UAddon_TheBlight_18, _blightUndetectableEffect) == 0x0002B8, "Member 'UAddon_TheBlight_18::_blightUndetectableEffect' has a wrong offset!");

// Class TheBlight.Addon_TheBlight_19
// 0x0008 (0x02C0 - 0x02B8)
class UAddon_TheBlight_19 final : public UItemAddon
{
public:
	float                                         _survivorInRangeDistance;                          // 0x02B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _survivorRevealTime;                               // 0x02BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_TheBlight_19">();
	}
	static class UAddon_TheBlight_19* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_TheBlight_19>();
	}
};
static_assert(alignof(UAddon_TheBlight_19) == 0x000008, "Wrong alignment on UAddon_TheBlight_19");
static_assert(sizeof(UAddon_TheBlight_19) == 0x0002C0, "Wrong size on UAddon_TheBlight_19");
static_assert(offsetof(UAddon_TheBlight_19, _survivorInRangeDistance) == 0x0002B8, "Member 'UAddon_TheBlight_19::_survivorInRangeDistance' has a wrong offset!");
static_assert(offsetof(UAddon_TheBlight_19, _survivorRevealTime) == 0x0002BC, "Member 'UAddon_TheBlight_19::_survivorRevealTime' has a wrong offset!");

// Class TheBlight.Addon_TheBlight_20
// 0x0008 (0x02C0 - 0x02B8)
class UAddon_TheBlight_20 final : public UItemAddon
{
public:
	class UStatusEffect*                          _forceKoStatusEffect;                              // 0x02B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_TheBlight_20">();
	}
	static class UAddon_TheBlight_20* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_TheBlight_20>();
	}
};
static_assert(alignof(UAddon_TheBlight_20) == 0x000008, "Wrong alignment on UAddon_TheBlight_20");
static_assert(sizeof(UAddon_TheBlight_20) == 0x0002C0, "Wrong size on UAddon_TheBlight_20");
static_assert(offsetof(UAddon_TheBlight_20, _forceKoStatusEffect) == 0x0002B8, "Member 'UAddon_TheBlight_20::_forceKoStatusEffect' has a wrong offset!");

// Class TheBlight.Addon_TheBlight_ConsecutiveDashSpeedBonus
// 0x0010 (0x02C8 - 0x02B8)
class UAddon_TheBlight_ConsecutiveDashSpeedBonus final : public UItemAddon
{
public:
	float                                         _speedIncreasePerDash;                             // 0x02B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2BC[0xC];                                      // 0x02BC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_TheBlight_ConsecutiveDashSpeedBonus">();
	}
	static class UAddon_TheBlight_ConsecutiveDashSpeedBonus* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_TheBlight_ConsecutiveDashSpeedBonus>();
	}
};
static_assert(alignof(UAddon_TheBlight_ConsecutiveDashSpeedBonus) == 0x000008, "Wrong alignment on UAddon_TheBlight_ConsecutiveDashSpeedBonus");
static_assert(sizeof(UAddon_TheBlight_ConsecutiveDashSpeedBonus) == 0x0002C8, "Wrong size on UAddon_TheBlight_ConsecutiveDashSpeedBonus");
static_assert(offsetof(UAddon_TheBlight_ConsecutiveDashSpeedBonus, _speedIncreasePerDash) == 0x0002B8, "Member 'UAddon_TheBlight_ConsecutiveDashSpeedBonus::_speedIncreasePerDash' has a wrong offset!");

// Class TheBlight.Addon_TheBlight_SoulChemical
// 0x0060 (0x0318 - 0x02B8)
class UAddon_TheBlight_SoulChemical final : public UItemAddon
{
public:
	float                                         _triggerDistance;                                  // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESkillCheckCustomType                         _skillCheckType;                                   // 0x02BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  _interactionSemantics;                             // 0x02C0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  _blightPowerStateTag;                              // 0x02E0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_300[0x18];                                     // 0x0300(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_TheBlight_SoulChemical">();
	}
	static class UAddon_TheBlight_SoulChemical* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_TheBlight_SoulChemical>();
	}
};
static_assert(alignof(UAddon_TheBlight_SoulChemical) == 0x000008, "Wrong alignment on UAddon_TheBlight_SoulChemical");
static_assert(sizeof(UAddon_TheBlight_SoulChemical) == 0x000318, "Wrong size on UAddon_TheBlight_SoulChemical");
static_assert(offsetof(UAddon_TheBlight_SoulChemical, _triggerDistance) == 0x0002B8, "Member 'UAddon_TheBlight_SoulChemical::_triggerDistance' has a wrong offset!");
static_assert(offsetof(UAddon_TheBlight_SoulChemical, _skillCheckType) == 0x0002BC, "Member 'UAddon_TheBlight_SoulChemical::_skillCheckType' has a wrong offset!");
static_assert(offsetof(UAddon_TheBlight_SoulChemical, _interactionSemantics) == 0x0002C0, "Member 'UAddon_TheBlight_SoulChemical::_interactionSemantics' has a wrong offset!");
static_assert(offsetof(UAddon_TheBlight_SoulChemical, _blightPowerStateTag) == 0x0002E0, "Member 'UAddon_TheBlight_SoulChemical::_blightPowerStateTag' has a wrong offset!");

// Class TheBlight.BlightAnimInstance
// 0x0020 (0x0620 - 0x0600)
class UBlightAnimInstance final : public UKillerAnimInstance
{
public:
	class UBlightPowerStateComponent*             _blightPowerStateComponent;                        // 0x0600(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWallGrabState                                _powerState;                                       // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_609[0x3];                                      // 0x0609(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _stateTimeRemaining;                               // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _lookAngle;                                        // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_614[0xC];                                      // 0x0614(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightAnimInstance">();
	}
	static class UBlightAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightAnimInstance>();
	}
};
static_assert(alignof(UBlightAnimInstance) == 0x000010, "Wrong alignment on UBlightAnimInstance");
static_assert(sizeof(UBlightAnimInstance) == 0x000620, "Wrong size on UBlightAnimInstance");
static_assert(offsetof(UBlightAnimInstance, _blightPowerStateComponent) == 0x000600, "Member 'UBlightAnimInstance::_blightPowerStateComponent' has a wrong offset!");
static_assert(offsetof(UBlightAnimInstance, _powerState) == 0x000608, "Member 'UBlightAnimInstance::_powerState' has a wrong offset!");
static_assert(offsetof(UBlightAnimInstance, _stateTimeRemaining) == 0x00060C, "Member 'UBlightAnimInstance::_stateTimeRemaining' has a wrong offset!");
static_assert(offsetof(UBlightAnimInstance, _lookAngle) == 0x000610, "Member 'UBlightAnimInstance::_lookAngle' has a wrong offset!");

// Class TheBlight.BlightAttackPicker
// 0x0000 (0x00B8 - 0x00B8)
class UBlightAttackPicker final : public USlasherAttackPickerComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightAttackPicker">();
	}
	static class UBlightAttackPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightAttackPicker>();
	}
};
static_assert(alignof(UBlightAttackPicker) == 0x000008, "Wrong alignment on UBlightAttackPicker");
static_assert(sizeof(UBlightAttackPicker) == 0x0000B8, "Wrong size on UBlightAttackPicker");

// Class TheBlight.BlightDashAttack
// 0x0000 (0x0380 - 0x0380)
class UBlightDashAttack final : public UPounceAttack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightDashAttack">();
	}
	static class UBlightDashAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightDashAttack>();
	}
};
static_assert(alignof(UBlightDashAttack) == 0x000010, "Wrong alignment on UBlightDashAttack");
static_assert(sizeof(UBlightDashAttack) == 0x000380, "Wrong size on UBlightDashAttack");

// Class TheBlight.BlightDashAttackOpenSubstate
// 0x0000 (0x0130 - 0x0130)
class UBlightDashAttackOpenSubstate final : public UPounceAttackOpenSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightDashAttackOpenSubstate">();
	}
	static class UBlightDashAttackOpenSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightDashAttackOpenSubstate>();
	}
};
static_assert(alignof(UBlightDashAttackOpenSubstate) == 0x000008, "Wrong alignment on UBlightDashAttackOpenSubstate");
static_assert(sizeof(UBlightDashAttackOpenSubstate) == 0x000130, "Wrong size on UBlightDashAttackOpenSubstate");

// Class TheBlight.BlightDashAttackSuccessSubstate
// 0x0000 (0x0118 - 0x0118)
class UBlightDashAttackSuccessSubstate final : public UPounceAttackSuccessSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightDashAttackSuccessSubstate">();
	}
	static class UBlightDashAttackSuccessSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightDashAttackSuccessSubstate>();
	}
};
static_assert(alignof(UBlightDashAttackSuccessSubstate) == 0x000008, "Wrong alignment on UBlightDashAttackSuccessSubstate");
static_assert(sizeof(UBlightDashAttackSuccessSubstate) == 0x000118, "Wrong size on UBlightDashAttackSuccessSubstate");

// Class TheBlight.BlightDashAttackMissSubstate
// 0x0000 (0x0120 - 0x0120)
class UBlightDashAttackMissSubstate final : public UPounceAttackMissSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightDashAttackMissSubstate">();
	}
	static class UBlightDashAttackMissSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightDashAttackMissSubstate>();
	}
};
static_assert(alignof(UBlightDashAttackMissSubstate) == 0x000008, "Wrong alignment on UBlightDashAttackMissSubstate");
static_assert(sizeof(UBlightDashAttackMissSubstate) == 0x000120, "Wrong size on UBlightDashAttackMissSubstate");

// Class TheBlight.BlightDashAttackObstructSubstate
// 0x0000 (0x0128 - 0x0128)
class UBlightDashAttackObstructSubstate final : public UPounceAttackObstructSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightDashAttackObstructSubstate">();
	}
	static class UBlightDashAttackObstructSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightDashAttackObstructSubstate>();
	}
};
static_assert(alignof(UBlightDashAttackObstructSubstate) == 0x000008, "Wrong alignment on UBlightDashAttackObstructSubstate");
static_assert(sizeof(UBlightDashAttackObstructSubstate) == 0x000128, "Wrong size on UBlightDashAttackObstructSubstate");

// Class TheBlight.BlightPower
// 0x0158 (0x0608 - 0x04B0)
class ABlightPower final : public ACollectable
{
public:
	class UPowerChargeComponent*                  _blightPowerCharge;                                // 0x04B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPowerToggleComponent*                  _blightPowerToggle;                                // 0x04B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChargeableComponent*                   _blightPowerActivateChargeable;                    // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBlightPowerStateComponent*             _blightPowerStateComponent;                        // 0x04C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _blightPowerActivateMaxCharge;                     // 0x04D0(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _blightPowerMaxCharge;                             // 0x04F8(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _blightPowerDechargeRate;                          // 0x0578(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _blightPowerRechargeRate;                          // 0x05A0(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C8[0x40];                                     // 0x05C8(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPowerStateChanged(const EWallGrabState previousState, const EWallGrabState newState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPower">();
	}
	static class ABlightPower* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlightPower>();
	}
};
static_assert(alignof(ABlightPower) == 0x000008, "Wrong alignment on ABlightPower");
static_assert(sizeof(ABlightPower) == 0x000608, "Wrong size on ABlightPower");
static_assert(offsetof(ABlightPower, _blightPowerCharge) == 0x0004B0, "Member 'ABlightPower::_blightPowerCharge' has a wrong offset!");
static_assert(offsetof(ABlightPower, _blightPowerToggle) == 0x0004B8, "Member 'ABlightPower::_blightPowerToggle' has a wrong offset!");
static_assert(offsetof(ABlightPower, _blightPowerActivateChargeable) == 0x0004C0, "Member 'ABlightPower::_blightPowerActivateChargeable' has a wrong offset!");
static_assert(offsetof(ABlightPower, _blightPowerStateComponent) == 0x0004C8, "Member 'ABlightPower::_blightPowerStateComponent' has a wrong offset!");
static_assert(offsetof(ABlightPower, _blightPowerActivateMaxCharge) == 0x0004D0, "Member 'ABlightPower::_blightPowerActivateMaxCharge' has a wrong offset!");
static_assert(offsetof(ABlightPower, _blightPowerMaxCharge) == 0x0004F8, "Member 'ABlightPower::_blightPowerMaxCharge' has a wrong offset!");
static_assert(offsetof(ABlightPower, _blightPowerDechargeRate) == 0x000578, "Member 'ABlightPower::_blightPowerDechargeRate' has a wrong offset!");
static_assert(offsetof(ABlightPower, _blightPowerRechargeRate) == 0x0005A0, "Member 'ABlightPower::_blightPowerRechargeRate' has a wrong offset!");

// Class TheBlight.BlightPowerEstimatedCollisionIndicator
// 0x0008 (0x0238 - 0x0230)
class ABlightPowerEstimatedCollisionIndicator final : public AActor
{
public:
	uint8                                         Pad_230[0x8];                                      // 0x0230(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHideIndicator_Cosmetic();
	void OnShowIndicator_Cosmetic();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerEstimatedCollisionIndicator">();
	}
	static class ABlightPowerEstimatedCollisionIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlightPowerEstimatedCollisionIndicator>();
	}
};
static_assert(alignof(ABlightPowerEstimatedCollisionIndicator) == 0x000008, "Wrong alignment on ABlightPowerEstimatedCollisionIndicator");
static_assert(sizeof(ABlightPowerEstimatedCollisionIndicator) == 0x000238, "Wrong size on ABlightPowerEstimatedCollisionIndicator");

// Class TheBlight.BlightPowerState
// 0x0150 (0x0180 - 0x0030)
class UBlightPowerState : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _stateSpeedCurve;                                  // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTunableStat                           _stateDuration;                                    // 0x0048(0x0080)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _cameraPitchRecenterTime;                          // 0x00C8(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _wallDashCollisionRadius;                          // 0x00F0(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _wallDashCollisionHeight;                          // 0x0118(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _wallDashCollisionRange;                           // 0x0140(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _playerCanCancelEarly;                             // 0x0168(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_169[0xF];                                      // 0x0169(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _displayCollisionIndicator;                        // 0x0178(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetStateDuration() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerState">();
	}
	static class UBlightPowerState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerState>();
	}
};
static_assert(alignof(UBlightPowerState) == 0x000008, "Wrong alignment on UBlightPowerState");
static_assert(sizeof(UBlightPowerState) == 0x000180, "Wrong size on UBlightPowerState");
static_assert(offsetof(UBlightPowerState, _stateSpeedCurve) == 0x000040, "Member 'UBlightPowerState::_stateSpeedCurve' has a wrong offset!");
static_assert(offsetof(UBlightPowerState, _stateDuration) == 0x000048, "Member 'UBlightPowerState::_stateDuration' has a wrong offset!");
static_assert(offsetof(UBlightPowerState, _cameraPitchRecenterTime) == 0x0000C8, "Member 'UBlightPowerState::_cameraPitchRecenterTime' has a wrong offset!");
static_assert(offsetof(UBlightPowerState, _wallDashCollisionRadius) == 0x0000F0, "Member 'UBlightPowerState::_wallDashCollisionRadius' has a wrong offset!");
static_assert(offsetof(UBlightPowerState, _wallDashCollisionHeight) == 0x000118, "Member 'UBlightPowerState::_wallDashCollisionHeight' has a wrong offset!");
static_assert(offsetof(UBlightPowerState, _wallDashCollisionRange) == 0x000140, "Member 'UBlightPowerState::_wallDashCollisionRange' has a wrong offset!");
static_assert(offsetof(UBlightPowerState, _playerCanCancelEarly) == 0x000168, "Member 'UBlightPowerState::_playerCanCancelEarly' has a wrong offset!");
static_assert(offsetof(UBlightPowerState, _displayCollisionIndicator) == 0x000178, "Member 'UBlightPowerState::_displayCollisionIndicator' has a wrong offset!");

// Class TheBlight.BlightPowerStateAdjusting
// 0x0040 (0x01C0 - 0x0180)
class UBlightPowerStateAdjusting final : public UBlightPowerState
{
public:
	bool                                          _adjustRotationOnCollision;                        // 0x0180(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _bounceAwayFromCollision;                          // 0x0181(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _allowNavigation;                                  // 0x0182(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _smashBreakables;                                  // 0x0183(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _maxDistanceForSurvivorFacing;                     // 0x0188(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B0[0x10];                                     // 0x01B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateAdjusting">();
	}
	static class UBlightPowerStateAdjusting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateAdjusting>();
	}
};
static_assert(alignof(UBlightPowerStateAdjusting) == 0x000008, "Wrong alignment on UBlightPowerStateAdjusting");
static_assert(sizeof(UBlightPowerStateAdjusting) == 0x0001C0, "Wrong size on UBlightPowerStateAdjusting");
static_assert(offsetof(UBlightPowerStateAdjusting, _adjustRotationOnCollision) == 0x000180, "Member 'UBlightPowerStateAdjusting::_adjustRotationOnCollision' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateAdjusting, _bounceAwayFromCollision) == 0x000181, "Member 'UBlightPowerStateAdjusting::_bounceAwayFromCollision' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateAdjusting, _allowNavigation) == 0x000182, "Member 'UBlightPowerStateAdjusting::_allowNavigation' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateAdjusting, _smashBreakables) == 0x000183, "Member 'UBlightPowerStateAdjusting::_smashBreakables' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateAdjusting, _maxDistanceForSurvivorFacing) == 0x000188, "Member 'UBlightPowerStateAdjusting::_maxDistanceForSurvivorFacing' has a wrong offset!");

// Class TheBlight.BlightPowerStateDash
// 0x00D0 (0x0250 - 0x0180)
class UBlightPowerStateDash : public UBlightPowerState
{
public:
	uint8                                         Pad_180[0x8];                                      // 0x0180(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTunableStat                           _vectorInterpToSpeed;                              // 0x0188(0x0080)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _noDashTimeLimitSpeedCurve;                        // 0x0208(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _lookAngleToTurnRateCurveController;               // 0x0210(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _lookAngleToTurnRateCurveMouse;                    // 0x0218(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _lookAngleToMaxTurnRateCurveMouse;                 // 0x0220(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_228[0x28];                                     // 0x0228(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateDash">();
	}
	static class UBlightPowerStateDash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateDash>();
	}
};
static_assert(alignof(UBlightPowerStateDash) == 0x000008, "Wrong alignment on UBlightPowerStateDash");
static_assert(sizeof(UBlightPowerStateDash) == 0x000250, "Wrong size on UBlightPowerStateDash");
static_assert(offsetof(UBlightPowerStateDash, _vectorInterpToSpeed) == 0x000188, "Member 'UBlightPowerStateDash::_vectorInterpToSpeed' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateDash, _noDashTimeLimitSpeedCurve) == 0x000208, "Member 'UBlightPowerStateDash::_noDashTimeLimitSpeedCurve' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateDash, _lookAngleToTurnRateCurveController) == 0x000210, "Member 'UBlightPowerStateDash::_lookAngleToTurnRateCurveController' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateDash, _lookAngleToTurnRateCurveMouse) == 0x000218, "Member 'UBlightPowerStateDash::_lookAngleToTurnRateCurveMouse' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateDash, _lookAngleToMaxTurnRateCurveMouse) == 0x000220, "Member 'UBlightPowerStateDash::_lookAngleToMaxTurnRateCurveMouse' has a wrong offset!");

// Class TheBlight.BlightPowerStateAttack
// 0x0028 (0x0278 - 0x0250)
class UBlightPowerStateAttack final : public UBlightPowerStateDash
{
public:
	uint8                                         Pad_250[0x28];                                     // 0x0250(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateAttack">();
	}
	static class UBlightPowerStateAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateAttack>();
	}
};
static_assert(alignof(UBlightPowerStateAttack) == 0x000008, "Wrong alignment on UBlightPowerStateAttack");
static_assert(sizeof(UBlightPowerStateAttack) == 0x000278, "Wrong size on UBlightPowerStateAttack");

// Class TheBlight.BlightPowerStateComponent
// 0x02A8 (0x0360 - 0x00B8)
class UBlightPowerStateComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x18];                                      // 0x00B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ADBDPlayer* collidingPlayer, const struct FVector& collisionLocation, const struct FVector& collisionNormal)> OnPowerCollided; // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UBlightPowerState>>  _blightPowerStateClasses;                          // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _canDashCheckCollisionRadius;                      // 0x00F0(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _canDashCheckCollisionHeight;                      // 0x0118(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _canDashCheckCollisionRange;                       // 0x0140(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  _canWallGrabPlayerTags;                            // 0x0168(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _blightLethalDashDodgeRadius;                      // 0x0188(0x0028)(Edit, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInteractionDefinition*                 _powerInteractionDefinition;                       // 0x01B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x18];                                     // 0x01B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimerObject*                           _stateTimer;                                       // 0x01D0(0x0008)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UBlightPowerState*>              _blightPowerStates;                                // 0x01D8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UBlightPowerState*                      _currentBlightPowerState;                          // 0x01E8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         _dashTokens;                                       // 0x01F0(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTunableStat                           _maximumDashTokens;                                // 0x01F8(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _tokenChargeRate;                                  // 0x0278(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F8[0x68];                                     // 0x02F8(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multicast_SetWallGrabState(const EWallGrabState newState);
	void OnLevelReadyToPlay();
	void OnRep_DashTokens();
	void OnRep_StateTimer();
	void ResetDashTokens();
	void Server_SetWallGrabState(const EWallGrabState newState);

	bool CanDash() const;
	class UBlightPowerState* GetCurrentPowerState() const;
	uint8 GetDashTokensRemaining() const;
	float GetLookAngleDegrees() const;
	EWallGrabState GetPowerState() const;
	class UBlightPowerState* GetPowerStateByEnum(const EWallGrabState stateEnum) const;
	float GetStateTimeElapsed() const;
	class UTimerObject* GetStateTimer() const;
	float GetStateTimeRemaining() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateComponent">();
	}
	static class UBlightPowerStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateComponent>();
	}
};
static_assert(alignof(UBlightPowerStateComponent) == 0x000008, "Wrong alignment on UBlightPowerStateComponent");
static_assert(sizeof(UBlightPowerStateComponent) == 0x000360, "Wrong size on UBlightPowerStateComponent");
static_assert(offsetof(UBlightPowerStateComponent, OnPowerCollided) == 0x0000D0, "Member 'UBlightPowerStateComponent::OnPowerCollided' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _blightPowerStateClasses) == 0x0000E0, "Member 'UBlightPowerStateComponent::_blightPowerStateClasses' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _canDashCheckCollisionRadius) == 0x0000F0, "Member 'UBlightPowerStateComponent::_canDashCheckCollisionRadius' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _canDashCheckCollisionHeight) == 0x000118, "Member 'UBlightPowerStateComponent::_canDashCheckCollisionHeight' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _canDashCheckCollisionRange) == 0x000140, "Member 'UBlightPowerStateComponent::_canDashCheckCollisionRange' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _canWallGrabPlayerTags) == 0x000168, "Member 'UBlightPowerStateComponent::_canWallGrabPlayerTags' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _blightLethalDashDodgeRadius) == 0x000188, "Member 'UBlightPowerStateComponent::_blightLethalDashDodgeRadius' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _powerInteractionDefinition) == 0x0001B0, "Member 'UBlightPowerStateComponent::_powerInteractionDefinition' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _stateTimer) == 0x0001D0, "Member 'UBlightPowerStateComponent::_stateTimer' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _blightPowerStates) == 0x0001D8, "Member 'UBlightPowerStateComponent::_blightPowerStates' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _currentBlightPowerState) == 0x0001E8, "Member 'UBlightPowerStateComponent::_currentBlightPowerState' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _dashTokens) == 0x0001F0, "Member 'UBlightPowerStateComponent::_dashTokens' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _maximumDashTokens) == 0x0001F8, "Member 'UBlightPowerStateComponent::_maximumDashTokens' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _tokenChargeRate) == 0x000278, "Member 'UBlightPowerStateComponent::_tokenChargeRate' has a wrong offset!");

// Class TheBlight.BlightPowerStateCooldown
// 0x0000 (0x0180 - 0x0180)
class UBlightPowerStateCooldown final : public UBlightPowerState
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateCooldown">();
	}
	static class UBlightPowerStateCooldown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateCooldown>();
	}
};
static_assert(alignof(UBlightPowerStateCooldown) == 0x000008, "Wrong alignment on UBlightPowerStateCooldown");
static_assert(sizeof(UBlightPowerStateCooldown) == 0x000180, "Wrong size on UBlightPowerStateCooldown");

// Class TheBlight.BlightPowerStateHolding
// 0x0040 (0x01C0 - 0x0180)
class UBlightPowerStateHolding final : public UBlightPowerState
{
public:
	struct FSecondaryInteractionProperties        _secondaryInteractionProperties;                   // 0x0180(0x0038)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          _allowNavigation;                                  // 0x01B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _dashSpeedForProjection;                           // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateHolding">();
	}
	static class UBlightPowerStateHolding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateHolding>();
	}
};
static_assert(alignof(UBlightPowerStateHolding) == 0x000008, "Wrong alignment on UBlightPowerStateHolding");
static_assert(sizeof(UBlightPowerStateHolding) == 0x0001C0, "Wrong size on UBlightPowerStateHolding");
static_assert(offsetof(UBlightPowerStateHolding, _secondaryInteractionProperties) == 0x000180, "Member 'UBlightPowerStateHolding::_secondaryInteractionProperties' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateHolding, _allowNavigation) == 0x0001B8, "Member 'UBlightPowerStateHolding::_allowNavigation' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateHolding, _dashSpeedForProjection) == 0x0001BC, "Member 'UBlightPowerStateHolding::_dashSpeedForProjection' has a wrong offset!");

// Class TheBlight.BlightPowerStateInterface
// 0x0000 (0x0000 - 0x0000)
class IBlightPowerStateInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateInterface">();
	}
	static class IBlightPowerStateInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBlightPowerStateInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IBlightPowerStateInterface) == 0x000001, "Wrong alignment on IBlightPowerStateInterface");
static_assert(sizeof(IBlightPowerStateInterface) == 0x000001, "Wrong size on IBlightPowerStateInterface");

// Class TheBlight.BlightPowerStateLethalDash
// 0x0040 (0x0290 - 0x0250)
class UBlightPowerStateLethalDash final : public UBlightPowerStateDash
{
public:
	struct FSecondaryInteractionProperties        _secondaryInteractionProperties;                   // 0x0250(0x0038)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          _smashBreakables;                                  // 0x0288(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateLethalDash">();
	}
	static class UBlightPowerStateLethalDash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateLethalDash>();
	}
};
static_assert(alignof(UBlightPowerStateLethalDash) == 0x000008, "Wrong alignment on UBlightPowerStateLethalDash");
static_assert(sizeof(UBlightPowerStateLethalDash) == 0x000290, "Wrong size on UBlightPowerStateLethalDash");
static_assert(offsetof(UBlightPowerStateLethalDash, _secondaryInteractionProperties) == 0x000250, "Member 'UBlightPowerStateLethalDash::_secondaryInteractionProperties' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateLethalDash, _smashBreakables) == 0x000288, "Member 'UBlightPowerStateLethalDash::_smashBreakables' has a wrong offset!");

// Class TheBlight.BlightPowerStateNonLethalDash
// 0x0008 (0x0258 - 0x0250)
class UBlightPowerStateNonLethalDash final : public UBlightPowerStateDash
{
public:
	bool                                          _smashBreakables;                                  // 0x0250(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateNonLethalDash">();
	}
	static class UBlightPowerStateNonLethalDash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateNonLethalDash>();
	}
};
static_assert(alignof(UBlightPowerStateNonLethalDash) == 0x000008, "Wrong alignment on UBlightPowerStateNonLethalDash");
static_assert(sizeof(UBlightPowerStateNonLethalDash) == 0x000258, "Wrong size on UBlightPowerStateNonLethalDash");
static_assert(offsetof(UBlightPowerStateNonLethalDash, _smashBreakables) == 0x000250, "Member 'UBlightPowerStateNonLethalDash::_smashBreakables' has a wrong offset!");

// Class TheBlight.BlightPowerStateReady
// 0x0000 (0x0180 - 0x0180)
class UBlightPowerStateReady final : public UBlightPowerState
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateReady">();
	}
	static class UBlightPowerStateReady* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateReady>();
	}
};
static_assert(alignof(UBlightPowerStateReady) == 0x000008, "Wrong alignment on UBlightPowerStateReady");
static_assert(sizeof(UBlightPowerStateReady) == 0x000180, "Wrong size on UBlightPowerStateReady");

// Class TheBlight.BuiltToLast
// 0x0028 (0x03F0 - 0x03C8)
class UBuiltToLast final : public UPerk
{
public:
	float                                         _refillPercentage[0x3];                            // 0x03C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _hideDuration[0x3];                                // 0x03D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         _numberOfTimesPerkTriggered;                       // 0x03E0(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E1[0xF];                                      // 0x03E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBuiltToLastTrigger_Cosmetic();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuiltToLast">();
	}
	static class UBuiltToLast* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuiltToLast>();
	}
};
static_assert(alignof(UBuiltToLast) == 0x000008, "Wrong alignment on UBuiltToLast");
static_assert(sizeof(UBuiltToLast) == 0x0003F0, "Wrong size on UBuiltToLast");
static_assert(offsetof(UBuiltToLast, _refillPercentage) == 0x0003C8, "Member 'UBuiltToLast::_refillPercentage' has a wrong offset!");
static_assert(offsetof(UBuiltToLast, _hideDuration) == 0x0003D4, "Member 'UBuiltToLast::_hideDuration' has a wrong offset!");
static_assert(offsetof(UBuiltToLast, _numberOfTimesPerkTriggered) == 0x0003E0, "Member 'UBuiltToLast::_numberOfTimesPerkTriggered' has a wrong offset!");

// Class TheBlight.DesperateMeasures
// 0x0010 (0x03D8 - 0x03C8)
class UDesperateMeasures final : public UPerk
{
public:
	float                                         _healAndUnhookMultiplier[0x3];                     // 0x03C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _nbInjuredHookedOrDyingSurvivors;                  // 0x03D4(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DesperateMeasures">();
	}
	static class UDesperateMeasures* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDesperateMeasures>();
	}
};
static_assert(alignof(UDesperateMeasures) == 0x000008, "Wrong alignment on UDesperateMeasures");
static_assert(sizeof(UDesperateMeasures) == 0x0003D8, "Wrong size on UDesperateMeasures");
static_assert(offsetof(UDesperateMeasures, _healAndUnhookMultiplier) == 0x0003C8, "Member 'UDesperateMeasures::_healAndUnhookMultiplier' has a wrong offset!");
static_assert(offsetof(UDesperateMeasures, _nbInjuredHookedOrDyingSurvivors) == 0x0003D4, "Member 'UDesperateMeasures::_nbInjuredHookedOrDyingSurvivors' has a wrong offset!");

// Class TheBlight.DragonsGrip
// 0x0060 (0x0428 - 0x03C8)
class UDragonsGrip final : public UPerk
{
public:
	class AGenerator*                             _kickedGenerator;                                  // 0x03C8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _activationDuration[0x3];                          // 0x03D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _cooldownDuration[0x3];                            // 0x03DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _exposedEffectDuration[0x3];                       // 0x03E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _onlyExposeFirstSurvivor;                          // 0x03F4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F5[0xB];                                      // 0x03F5(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _loudNoiseRange;                                   // 0x0400(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Multicast_OnRevealSurvivor(class ADBDPlayer* survivor);
	void OnRevealSurvivor(class ADBDPlayer* instigator);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonsGrip">();
	}
	static class UDragonsGrip* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragonsGrip>();
	}
};
static_assert(alignof(UDragonsGrip) == 0x000008, "Wrong alignment on UDragonsGrip");
static_assert(sizeof(UDragonsGrip) == 0x000428, "Wrong size on UDragonsGrip");
static_assert(offsetof(UDragonsGrip, _kickedGenerator) == 0x0003C8, "Member 'UDragonsGrip::_kickedGenerator' has a wrong offset!");
static_assert(offsetof(UDragonsGrip, _activationDuration) == 0x0003D0, "Member 'UDragonsGrip::_activationDuration' has a wrong offset!");
static_assert(offsetof(UDragonsGrip, _cooldownDuration) == 0x0003DC, "Member 'UDragonsGrip::_cooldownDuration' has a wrong offset!");
static_assert(offsetof(UDragonsGrip, _exposedEffectDuration) == 0x0003E8, "Member 'UDragonsGrip::_exposedEffectDuration' has a wrong offset!");
static_assert(offsetof(UDragonsGrip, _onlyExposeFirstSurvivor) == 0x0003F4, "Member 'UDragonsGrip::_onlyExposeFirstSurvivor' has a wrong offset!");
static_assert(offsetof(UDragonsGrip, _loudNoiseRange) == 0x000400, "Member 'UDragonsGrip::_loudNoiseRange' has a wrong offset!");

// Class TheBlight.HexBloodFavor
// 0x0018 (0x0460 - 0x0448)
class UHexBloodFavor final : public UHexPerk
{
public:
	float                                         _palletInRange[0x3];                               // 0x0448(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _palletPulldownBlockTime[0x3];                     // 0x0454(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HexBloodFavor">();
	}
	static class UHexBloodFavor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHexBloodFavor>();
	}
};
static_assert(alignof(UHexBloodFavor) == 0x000008, "Wrong alignment on UHexBloodFavor");
static_assert(sizeof(UHexBloodFavor) == 0x000460, "Wrong size on UHexBloodFavor");
static_assert(offsetof(UHexBloodFavor, _palletInRange) == 0x000448, "Member 'UHexBloodFavor::_palletInRange' has a wrong offset!");
static_assert(offsetof(UHexBloodFavor, _palletPulldownBlockTime) == 0x000454, "Member 'UHexBloodFavor::_palletPulldownBlockTime' has a wrong offset!");

// Class TheBlight.HexUndying
// 0x0068 (0x04B0 - 0x0448)
class UHexUndying final : public UHexPerk
{
public:
	uint8                                         Pad_448[0x58];                                     // 0x0448(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _revealAuraDistanceFromTotem[0x3];                 // 0x04A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnCamperCleansedHexPerk(const struct FGameplayTag& gameplayTag, const struct FGameEventData& gameEventData);
	void Authority_OnSurvivorAdded(class ACamperPlayer* survivor);
	void Authority_UpdateHexPerkStatusView(class UGameplayModifierContainer* gameplayModifierContainer, bool isApplicable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HexUndying">();
	}
	static class UHexUndying* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHexUndying>();
	}
};
static_assert(alignof(UHexUndying) == 0x000008, "Wrong alignment on UHexUndying");
static_assert(sizeof(UHexUndying) == 0x0004B0, "Wrong size on UHexUndying");
static_assert(offsetof(UHexUndying, _revealAuraDistanceFromTotem) == 0x0004A0, "Member 'UHexUndying::_revealAuraDistanceFromTotem' has a wrong offset!");

// Class TheBlight.Visionary
// 0x0018 (0x03E0 - 0x03C8)
class UVisionary final : public UPerk
{
public:
	float                                         _auraVisibilityRange[0x3];                         // 0x03C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _cooldownDuration[0x3];                            // 0x03D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	float GetCooldownAtLevel() const;
	float GetRangeAtLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Visionary">();
	}
	static class UVisionary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVisionary>();
	}
};
static_assert(alignof(UVisionary) == 0x000008, "Wrong alignment on UVisionary");
static_assert(sizeof(UVisionary) == 0x0003E0, "Wrong size on UVisionary");
static_assert(offsetof(UVisionary, _auraVisibilityRange) == 0x0003C8, "Member 'UVisionary::_auraVisibilityRange' has a wrong offset!");
static_assert(offsetof(UVisionary, _cooldownDuration) == 0x0003D4, "Member 'UVisionary::_cooldownDuration' has a wrong offset!");

// Class TheBlight.WallGrabInteractionDefinition
// 0x0040 (0x0660 - 0x0620)
class UWallGrabInteractionDefinition final : public UInteractionDefinition
{
public:
	class UBlightPowerStateComponent*             _blightPowerStateComponent;                        // 0x0618(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _wallDashAccelerationMultiplier;                   // 0x0620(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ABlightPowerEstimatedCollisionIndicator* _blightPowerCollisionIndicator;                   // 0x0648(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class ABlightPowerEstimatedCollisionIndicator> _collisionIndicatorActorClass;        // 0x0650(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_658[0x8];                                      // 0x0658(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WallGrabInteractionDefinition">();
	}
	static class UWallGrabInteractionDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWallGrabInteractionDefinition>();
	}
};
static_assert(alignof(UWallGrabInteractionDefinition) == 0x000010, "Wrong alignment on UWallGrabInteractionDefinition");
static_assert(sizeof(UWallGrabInteractionDefinition) == 0x000660, "Wrong size on UWallGrabInteractionDefinition");
static_assert(offsetof(UWallGrabInteractionDefinition, _blightPowerStateComponent) == 0x000618, "Member 'UWallGrabInteractionDefinition::_blightPowerStateComponent' has a wrong offset!");
static_assert(offsetof(UWallGrabInteractionDefinition, _wallDashAccelerationMultiplier) == 0x000620, "Member 'UWallGrabInteractionDefinition::_wallDashAccelerationMultiplier' has a wrong offset!");
static_assert(offsetof(UWallGrabInteractionDefinition, _blightPowerCollisionIndicator) == 0x000648, "Member 'UWallGrabInteractionDefinition::_blightPowerCollisionIndicator' has a wrong offset!");
static_assert(offsetof(UWallGrabInteractionDefinition, _collisionIndicatorActorClass) == 0x000650, "Member 'UWallGrabInteractionDefinition::_collisionIndicatorActorClass' has a wrong offset!");

}

