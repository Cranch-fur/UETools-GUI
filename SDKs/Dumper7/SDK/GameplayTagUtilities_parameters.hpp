#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayTagUtilities

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function GameplayTagUtilities.DBDGameplayTagUtilities.GameplayTagExists
// 0x0010 (0x0010 - 0x0000)
struct DBDGameplayTagUtilities_GameplayTagExists final
{
public:
	class FName                                   tagName;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameplayTagUtilities_GameplayTagExists) == 0x000004, "Wrong alignment on DBDGameplayTagUtilities_GameplayTagExists");
static_assert(sizeof(DBDGameplayTagUtilities_GameplayTagExists) == 0x000010, "Wrong size on DBDGameplayTagUtilities_GameplayTagExists");
static_assert(offsetof(DBDGameplayTagUtilities_GameplayTagExists, tagName) == 0x000000, "Member 'DBDGameplayTagUtilities_GameplayTagExists::tagName' has a wrong offset!");
static_assert(offsetof(DBDGameplayTagUtilities_GameplayTagExists, ReturnValue) == 0x00000C, "Member 'DBDGameplayTagUtilities_GameplayTagExists::ReturnValue' has a wrong offset!");

// Function GameplayTagUtilities.DBDGameplayTagUtilities.GetScoreModifierName
// 0x0018 (0x0018 - 0x0000)
struct DBDGameplayTagUtilities_GetScoreModifierName final
{
public:
	class FName                                   scoreEventID;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameplayTagUtilities_GetScoreModifierName) == 0x000004, "Wrong alignment on DBDGameplayTagUtilities_GetScoreModifierName");
static_assert(sizeof(DBDGameplayTagUtilities_GetScoreModifierName) == 0x000018, "Wrong size on DBDGameplayTagUtilities_GetScoreModifierName");
static_assert(offsetof(DBDGameplayTagUtilities_GetScoreModifierName, scoreEventID) == 0x000000, "Member 'DBDGameplayTagUtilities_GetScoreModifierName::scoreEventID' has a wrong offset!");
static_assert(offsetof(DBDGameplayTagUtilities_GetScoreModifierName, ReturnValue) == 0x00000C, "Member 'DBDGameplayTagUtilities_GetScoreModifierName::ReturnValue' has a wrong offset!");

// Function GameplayTagUtilities.GameplayTagContainerComponent.Add
// 0x000C (0x000C - 0x0000)
struct GameplayTagContainerComponent_Add final
{
public:
	struct FGameplayTag                           state;                                             // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTagContainerComponent_Add) == 0x000004, "Wrong alignment on GameplayTagContainerComponent_Add");
static_assert(sizeof(GameplayTagContainerComponent_Add) == 0x00000C, "Wrong size on GameplayTagContainerComponent_Add");
static_assert(offsetof(GameplayTagContainerComponent_Add, state) == 0x000000, "Member 'GameplayTagContainerComponent_Add::state' has a wrong offset!");

// Function GameplayTagUtilities.GameplayTagContainerComponent.Remove
// 0x000C (0x000C - 0x0000)
struct GameplayTagContainerComponent_Remove final
{
public:
	struct FGameplayTag                           state;                                             // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTagContainerComponent_Remove) == 0x000004, "Wrong alignment on GameplayTagContainerComponent_Remove");
static_assert(sizeof(GameplayTagContainerComponent_Remove) == 0x00000C, "Wrong size on GameplayTagContainerComponent_Remove");
static_assert(offsetof(GameplayTagContainerComponent_Remove, state) == 0x000000, "Member 'GameplayTagContainerComponent_Remove::state' has a wrong offset!");

// Function GameplayTagUtilities.GameplayTagContainerComponent.GetTags
// 0x0020 (0x0020 - 0x0000)
struct GameplayTagContainerComponent_GetTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTagContainerComponent_GetTags) == 0x000008, "Wrong alignment on GameplayTagContainerComponent_GetTags");
static_assert(sizeof(GameplayTagContainerComponent_GetTags) == 0x000020, "Wrong size on GameplayTagContainerComponent_GetTags");
static_assert(offsetof(GameplayTagContainerComponent_GetTags, ReturnValue) == 0x000000, "Member 'GameplayTagContainerComponent_GetTags::ReturnValue' has a wrong offset!");

}

