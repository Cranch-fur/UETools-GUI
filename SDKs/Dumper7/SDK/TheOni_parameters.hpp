#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheOni

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "TheOni_structs.hpp"
#include "AnimationUtilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function TheOni.AbsorbBloodOrbsInteraction.SetPlayerOwner
// 0x0008 (0x0008 - 0x0000)
struct AbsorbBloodOrbsInteraction_SetPlayerOwner final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbsorbBloodOrbsInteraction_SetPlayerOwner) == 0x000008, "Wrong alignment on AbsorbBloodOrbsInteraction_SetPlayerOwner");
static_assert(sizeof(AbsorbBloodOrbsInteraction_SetPlayerOwner) == 0x000008, "Wrong size on AbsorbBloodOrbsInteraction_SetPlayerOwner");
static_assert(offsetof(AbsorbBloodOrbsInteraction_SetPlayerOwner, player) == 0x000000, "Member 'AbsorbBloodOrbsInteraction_SetPlayerOwner::player' has a wrong offset!");

// Function TheOni.BloodOrb.Authority_OnDropped
// 0x0010 (0x0010 - 0x0000)
struct BloodOrb_Authority_OnDropped final
{
public:
	const class ADBDPlayer*                       droppedBy;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         impulseFactor;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BloodOrb_Authority_OnDropped) == 0x000008, "Wrong alignment on BloodOrb_Authority_OnDropped");
static_assert(sizeof(BloodOrb_Authority_OnDropped) == 0x000010, "Wrong size on BloodOrb_Authority_OnDropped");
static_assert(offsetof(BloodOrb_Authority_OnDropped, droppedBy) == 0x000000, "Member 'BloodOrb_Authority_OnDropped::droppedBy' has a wrong offset!");
static_assert(offsetof(BloodOrb_Authority_OnDropped, impulseFactor) == 0x000008, "Member 'BloodOrb_Authority_OnDropped::impulseFactor' has a wrong offset!");

// Function TheOni.BloodOrb.OnIsAttractedChangedCosmetic
// 0x0001 (0x0001 - 0x0000)
struct BloodOrb_OnIsAttractedChangedCosmetic final
{
public:
	bool                                          isAttracted;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrb_OnIsAttractedChangedCosmetic) == 0x000001, "Wrong alignment on BloodOrb_OnIsAttractedChangedCosmetic");
static_assert(sizeof(BloodOrb_OnIsAttractedChangedCosmetic) == 0x000001, "Wrong size on BloodOrb_OnIsAttractedChangedCosmetic");
static_assert(offsetof(BloodOrb_OnIsAttractedChangedCosmetic, isAttracted) == 0x000000, "Member 'BloodOrb_OnIsAttractedChangedCosmetic::isAttracted' has a wrong offset!");

// Function TheOni.BloodOrb.OnRep_State
// 0x0001 (0x0001 - 0x0000)
struct BloodOrb_OnRep_State final
{
public:
	EBloodOrbState                                oldState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrb_OnRep_State) == 0x000001, "Wrong alignment on BloodOrb_OnRep_State");
static_assert(sizeof(BloodOrb_OnRep_State) == 0x000001, "Wrong size on BloodOrb_OnRep_State");
static_assert(offsetof(BloodOrb_OnRep_State, oldState) == 0x000000, "Member 'BloodOrb_OnRep_State::oldState' has a wrong offset!");

// Function TheOni.BloodOrb.UpdateAbsorbed_Cosmetic
// 0x0020 (0x0020 - 0x0000)
struct BloodOrb_UpdateAbsorbed_Cosmetic final
{
public:
	struct FVector                                destination;                                       // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             absorber;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         deltaTime;                                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BloodOrb_UpdateAbsorbed_Cosmetic) == 0x000008, "Wrong alignment on BloodOrb_UpdateAbsorbed_Cosmetic");
static_assert(sizeof(BloodOrb_UpdateAbsorbed_Cosmetic) == 0x000020, "Wrong size on BloodOrb_UpdateAbsorbed_Cosmetic");
static_assert(offsetof(BloodOrb_UpdateAbsorbed_Cosmetic, destination) == 0x000000, "Member 'BloodOrb_UpdateAbsorbed_Cosmetic::destination' has a wrong offset!");
static_assert(offsetof(BloodOrb_UpdateAbsorbed_Cosmetic, absorber) == 0x000010, "Member 'BloodOrb_UpdateAbsorbed_Cosmetic::absorber' has a wrong offset!");
static_assert(offsetof(BloodOrb_UpdateAbsorbed_Cosmetic, deltaTime) == 0x000018, "Member 'BloodOrb_UpdateAbsorbed_Cosmetic::deltaTime' has a wrong offset!");

// Function TheOni.BloodOrb.UpdateAttracted_Cosmetic
// 0x0020 (0x0020 - 0x0000)
struct BloodOrb_UpdateAttracted_Cosmetic final
{
public:
	struct FVector                                destination;                                       // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             absorber;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         deltaTime;                                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BloodOrb_UpdateAttracted_Cosmetic) == 0x000008, "Wrong alignment on BloodOrb_UpdateAttracted_Cosmetic");
static_assert(sizeof(BloodOrb_UpdateAttracted_Cosmetic) == 0x000020, "Wrong size on BloodOrb_UpdateAttracted_Cosmetic");
static_assert(offsetof(BloodOrb_UpdateAttracted_Cosmetic, destination) == 0x000000, "Member 'BloodOrb_UpdateAttracted_Cosmetic::destination' has a wrong offset!");
static_assert(offsetof(BloodOrb_UpdateAttracted_Cosmetic, absorber) == 0x000010, "Member 'BloodOrb_UpdateAttracted_Cosmetic::absorber' has a wrong offset!");
static_assert(offsetof(BloodOrb_UpdateAttracted_Cosmetic, deltaTime) == 0x000018, "Member 'BloodOrb_UpdateAttracted_Cosmetic::deltaTime' has a wrong offset!");

// Function TheOni.BloodOrb.GetDroppingPlayer
// 0x0008 (0x0008 - 0x0000)
struct BloodOrb_GetDroppingPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrb_GetDroppingPlayer) == 0x000008, "Wrong alignment on BloodOrb_GetDroppingPlayer");
static_assert(sizeof(BloodOrb_GetDroppingPlayer) == 0x000008, "Wrong size on BloodOrb_GetDroppingPlayer");
static_assert(offsetof(BloodOrb_GetDroppingPlayer, ReturnValue) == 0x000000, "Member 'BloodOrb_GetDroppingPlayer::ReturnValue' has a wrong offset!");

// Function TheOni.BloodOrbAbsorberComponent.SetInAbsorbMode
// 0x0001 (0x0001 - 0x0000)
struct BloodOrbAbsorberComponent_SetInAbsorbMode final
{
public:
	bool                                          inAbsorptionMode;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbAbsorberComponent_SetInAbsorbMode) == 0x000001, "Wrong alignment on BloodOrbAbsorberComponent_SetInAbsorbMode");
static_assert(sizeof(BloodOrbAbsorberComponent_SetInAbsorbMode) == 0x000001, "Wrong size on BloodOrbAbsorberComponent_SetInAbsorbMode");
static_assert(offsetof(BloodOrbAbsorberComponent_SetInAbsorbMode, inAbsorptionMode) == 0x000000, "Member 'BloodOrbAbsorberComponent_SetInAbsorbMode::inAbsorptionMode' has a wrong offset!");

// Function TheOni.BloodOrbAbsorberComponent.IsInAbsorbMode
// 0x0001 (0x0001 - 0x0000)
struct BloodOrbAbsorberComponent_IsInAbsorbMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbAbsorberComponent_IsInAbsorbMode) == 0x000001, "Wrong alignment on BloodOrbAbsorberComponent_IsInAbsorbMode");
static_assert(sizeof(BloodOrbAbsorberComponent_IsInAbsorbMode) == 0x000001, "Wrong size on BloodOrbAbsorberComponent_IsInAbsorbMode");
static_assert(offsetof(BloodOrbAbsorberComponent_IsInAbsorbMode, ReturnValue) == 0x000000, "Member 'BloodOrbAbsorberComponent_IsInAbsorbMode::ReturnValue' has a wrong offset!");

// Function TheOni.BloodOrbConfiguratorComponent.Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier
// 0x0008 (0x0008 - 0x0000)
struct BloodOrbConfiguratorComponent_Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier final
{
public:
	const class ADBDPlayer*                       killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbConfiguratorComponent_Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier) == 0x000008, "Wrong alignment on BloodOrbConfiguratorComponent_Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier");
static_assert(sizeof(BloodOrbConfiguratorComponent_Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier) == 0x000008, "Wrong size on BloodOrbConfiguratorComponent_Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier");
static_assert(offsetof(BloodOrbConfiguratorComponent_Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier, killer) == 0x000000, "Member 'BloodOrbConfiguratorComponent_Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier::killer' has a wrong offset!");

// Function TheOni.BloodOrbConfiguratorComponent.UpdateBloodOrbAttractSpeed
// 0x0010 (0x0010 - 0x0000)
struct BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed final
{
public:
	class UBloodOrbAbsorberComponent*             bloodOrbAbsorberComponent;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             killer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed) == 0x000008, "Wrong alignment on BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed");
static_assert(sizeof(BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed) == 0x000010, "Wrong size on BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed");
static_assert(offsetof(BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed, bloodOrbAbsorberComponent) == 0x000000, "Member 'BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed::bloodOrbAbsorberComponent' has a wrong offset!");
static_assert(offsetof(BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed, killer) == 0x000008, "Member 'BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed::killer' has a wrong offset!");

// Function TheOni.BloodOrbConfiguratorComponent.UpdateKillerBloodOrbVisiblityRanges
// 0x0010 (0x0010 - 0x0000)
struct BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges final
{
public:
	class UBloodOrbVisibilityComponent*           bloodOrbVisibilityComponent;                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             killer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges) == 0x000008, "Wrong alignment on BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges");
static_assert(sizeof(BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges) == 0x000010, "Wrong size on BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges");
static_assert(offsetof(BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges, bloodOrbVisibilityComponent) == 0x000000, "Member 'BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges::bloodOrbVisibilityComponent' has a wrong offset!");
static_assert(offsetof(BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges, killer) == 0x000008, "Member 'BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges::killer' has a wrong offset!");

// Function TheOni.BloodOrbConfiguratorComponent.UpdateSurvivorBloodOrbVisibilityRange
// 0x0010 (0x0010 - 0x0000)
struct BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange final
{
public:
	class UBloodOrbVisibilityComponent*           bloodOrbVisibilityComponent;                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       killer;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange) == 0x000008, "Wrong alignment on BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange");
static_assert(sizeof(BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange) == 0x000010, "Wrong size on BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange");
static_assert(offsetof(BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange, bloodOrbVisibilityComponent) == 0x000000, "Member 'BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange::bloodOrbVisibilityComponent' has a wrong offset!");
static_assert(offsetof(BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange, killer) == 0x000008, "Member 'BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange::killer' has a wrong offset!");

// Function TheOni.BloodOrbDropperComponent.Authority_OnCamperCrouched
// 0x0038 (0x0038 - 0x0000)
struct BloodOrbDropperComponent_Authority_OnCamperCrouched final
{
public:
	struct FGameplayTag                           gameEvent;                                         // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbDropperComponent_Authority_OnCamperCrouched) == 0x000008, "Wrong alignment on BloodOrbDropperComponent_Authority_OnCamperCrouched");
static_assert(sizeof(BloodOrbDropperComponent_Authority_OnCamperCrouched) == 0x000038, "Wrong size on BloodOrbDropperComponent_Authority_OnCamperCrouched");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnCamperCrouched, gameEvent) == 0x000000, "Member 'BloodOrbDropperComponent_Authority_OnCamperCrouched::gameEvent' has a wrong offset!");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnCamperCrouched, gameEventData) == 0x000010, "Member 'BloodOrbDropperComponent_Authority_OnCamperCrouched::gameEventData' has a wrong offset!");

// Function TheOni.BloodOrbDropperComponent.Authority_OnCamperUnhooked
// 0x0038 (0x0038 - 0x0000)
struct BloodOrbDropperComponent_Authority_OnCamperUnhooked final
{
public:
	struct FGameplayTag                           gameEvent;                                         // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbDropperComponent_Authority_OnCamperUnhooked) == 0x000008, "Wrong alignment on BloodOrbDropperComponent_Authority_OnCamperUnhooked");
static_assert(sizeof(BloodOrbDropperComponent_Authority_OnCamperUnhooked) == 0x000038, "Wrong size on BloodOrbDropperComponent_Authority_OnCamperUnhooked");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnCamperUnhooked, gameEvent) == 0x000000, "Member 'BloodOrbDropperComponent_Authority_OnCamperUnhooked::gameEvent' has a wrong offset!");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnCamperUnhooked, gameEventData) == 0x000010, "Member 'BloodOrbDropperComponent_Authority_OnCamperUnhooked::gameEventData' has a wrong offset!");

// Function TheOni.BloodOrbDropperComponent.Authority_OnOwningCamperDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged final
{
public:
	ECamperDamageState                            oldState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            newState;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged) == 0x000001, "Wrong alignment on BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged");
static_assert(sizeof(BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged) == 0x000002, "Wrong size on BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged, oldState) == 0x000000, "Member 'BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged::oldState' has a wrong offset!");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged, newState) == 0x000001, "Member 'BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged::newState' has a wrong offset!");

// Function TheOni.BloodOrbDropperComponent.Authority_SetPaused
// 0x0001 (0x0001 - 0x0000)
struct BloodOrbDropperComponent_Authority_SetPaused final
{
public:
	bool                                          paused;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbDropperComponent_Authority_SetPaused) == 0x000001, "Wrong alignment on BloodOrbDropperComponent_Authority_SetPaused");
static_assert(sizeof(BloodOrbDropperComponent_Authority_SetPaused) == 0x000001, "Wrong size on BloodOrbDropperComponent_Authority_SetPaused");
static_assert(offsetof(BloodOrbDropperComponent_Authority_SetPaused, paused) == 0x000000, "Member 'BloodOrbDropperComponent_Authority_SetPaused::paused' has a wrong offset!");

// Function TheOni.BloodOrbDropperComponent.Authority_OnCamperHooked
// 0x0038 (0x0038 - 0x0000)
struct BloodOrbDropperComponent_Authority_OnCamperHooked final
{
public:
	struct FGameplayTag                           gameEvent;                                         // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbDropperComponent_Authority_OnCamperHooked) == 0x000008, "Wrong alignment on BloodOrbDropperComponent_Authority_OnCamperHooked");
static_assert(sizeof(BloodOrbDropperComponent_Authority_OnCamperHooked) == 0x000038, "Wrong size on BloodOrbDropperComponent_Authority_OnCamperHooked");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnCamperHooked, gameEvent) == 0x000000, "Member 'BloodOrbDropperComponent_Authority_OnCamperHooked::gameEvent' has a wrong offset!");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnCamperHooked, gameEventData) == 0x000010, "Member 'BloodOrbDropperComponent_Authority_OnCamperHooked::gameEventData' has a wrong offset!");

// Function TheOni.BloodOrbDropperComponent.Authority_OnDropOrbsGameEvent
// 0x0040 (0x0040 - 0x0000)
struct BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent final
{
public:
	struct FGameplayTag                           gameEvent;                                         // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBloodOrbDropParams                    dropParams;                                        // 0x0038(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent) == 0x000008, "Wrong alignment on BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent");
static_assert(sizeof(BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent) == 0x000040, "Wrong size on BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent, gameEvent) == 0x000000, "Member 'BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent::gameEvent' has a wrong offset!");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent, gameEventData) == 0x000010, "Member 'BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent::gameEventData' has a wrong offset!");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent, dropParams) == 0x000038, "Member 'BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent::dropParams' has a wrong offset!");

// Function TheOni.BloodOrbDropperComponent.DBD_DropBloodOrbs
// 0x0004 (0x0004 - 0x0000)
struct BloodOrbDropperComponent_DBD_DropBloodOrbs final
{
public:
	int32                                         numOrbs;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbDropperComponent_DBD_DropBloodOrbs) == 0x000004, "Wrong alignment on BloodOrbDropperComponent_DBD_DropBloodOrbs");
static_assert(sizeof(BloodOrbDropperComponent_DBD_DropBloodOrbs) == 0x000004, "Wrong size on BloodOrbDropperComponent_DBD_DropBloodOrbs");
static_assert(offsetof(BloodOrbDropperComponent_DBD_DropBloodOrbs, numOrbs) == 0x000000, "Member 'BloodOrbDropperComponent_DBD_DropBloodOrbs::numOrbs' has a wrong offset!");

// Function TheOni.BloodOrbOverlapComponent.Authority_OnBloodOrbBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap final
{
public:
	class UPrimitiveComponent*                    hitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap) == 0x000008, "Wrong alignment on BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap");
static_assert(sizeof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap) == 0x0000B0, "Wrong size on BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap, hitComponent) == 0x000000, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap::hitComponent' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap, otherActor) == 0x000008, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap::otherActor' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap, otherComp) == 0x000010, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap::otherComp' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap, otherBodyIndex) == 0x000018, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap, bFromSweep) == 0x00001C, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap, sweepResult) == 0x000020, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap::sweepResult' has a wrong offset!");

// Function TheOni.BloodOrbOverlapComponent.Authority_OnBloodOrbEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap final
{
public:
	class UPrimitiveComponent*                    hitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap) == 0x000008, "Wrong alignment on BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap");
static_assert(sizeof(BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap) == 0x000020, "Wrong size on BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap, hitComponent) == 0x000000, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap::hitComponent' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap, otherActor) == 0x000008, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap::otherActor' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap, otherComp) == 0x000010, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap::otherComp' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap, otherBodyIndex) == 0x000018, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap::otherBodyIndex' has a wrong offset!");

// Function TheOni.BloodOrbOverlapComponent.Authority_OnBloodOrbVisibilityModeChanged
// 0x0001 (0x0001 - 0x0000)
struct BloodOrbOverlapComponent_Authority_OnBloodOrbVisibilityModeChanged final
{
public:
	EBloodOrbVisibilityMode                       visibilityMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbOverlapComponent_Authority_OnBloodOrbVisibilityModeChanged) == 0x000001, "Wrong alignment on BloodOrbOverlapComponent_Authority_OnBloodOrbVisibilityModeChanged");
static_assert(sizeof(BloodOrbOverlapComponent_Authority_OnBloodOrbVisibilityModeChanged) == 0x000001, "Wrong size on BloodOrbOverlapComponent_Authority_OnBloodOrbVisibilityModeChanged");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbVisibilityModeChanged, visibilityMode) == 0x000000, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbVisibilityModeChanged::visibilityMode' has a wrong offset!");

// Function TheOni.BloodOrbOverlapComponent.Authority_OnDestroyedBloodOrb
// 0x0008 (0x0008 - 0x0000)
struct BloodOrbOverlapComponent_Authority_OnDestroyedBloodOrb final
{
public:
	class AActor*                                 destroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbOverlapComponent_Authority_OnDestroyedBloodOrb) == 0x000008, "Wrong alignment on BloodOrbOverlapComponent_Authority_OnDestroyedBloodOrb");
static_assert(sizeof(BloodOrbOverlapComponent_Authority_OnDestroyedBloodOrb) == 0x000008, "Wrong size on BloodOrbOverlapComponent_Authority_OnDestroyedBloodOrb");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnDestroyedBloodOrb, destroyedActor) == 0x000000, "Member 'BloodOrbOverlapComponent_Authority_OnDestroyedBloodOrb::destroyedActor' has a wrong offset!");

// Function TheOni.BloodOrbOverlapComponent.OnRep_CurrentOverlappingOrbs
// 0x0004 (0x0004 - 0x0000)
struct BloodOrbOverlapComponent_OnRep_CurrentOverlappingOrbs final
{
public:
	int32                                         previousOverlappingOrbs;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbOverlapComponent_OnRep_CurrentOverlappingOrbs) == 0x000004, "Wrong alignment on BloodOrbOverlapComponent_OnRep_CurrentOverlappingOrbs");
static_assert(sizeof(BloodOrbOverlapComponent_OnRep_CurrentOverlappingOrbs) == 0x000004, "Wrong size on BloodOrbOverlapComponent_OnRep_CurrentOverlappingOrbs");
static_assert(offsetof(BloodOrbOverlapComponent_OnRep_CurrentOverlappingOrbs, previousOverlappingOrbs) == 0x000000, "Member 'BloodOrbOverlapComponent_OnRep_CurrentOverlappingOrbs::previousOverlappingOrbs' has a wrong offset!");

// Function TheOni.BloodOrbStateMonitorComponent.OnBloodOrbDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BloodOrbStateMonitorComponent_OnBloodOrbDestroyed final
{
public:
	const class ABloodOrb*                        bloodOrb;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbStateMonitorComponent_OnBloodOrbDestroyed) == 0x000008, "Wrong alignment on BloodOrbStateMonitorComponent_OnBloodOrbDestroyed");
static_assert(sizeof(BloodOrbStateMonitorComponent_OnBloodOrbDestroyed) == 0x000008, "Wrong size on BloodOrbStateMonitorComponent_OnBloodOrbDestroyed");
static_assert(offsetof(BloodOrbStateMonitorComponent_OnBloodOrbDestroyed, bloodOrb) == 0x000000, "Member 'BloodOrbStateMonitorComponent_OnBloodOrbDestroyed::bloodOrb' has a wrong offset!");

// Function TheOni.BloodOrbStateMonitorComponent.OnBloodOrbSpawned
// 0x0008 (0x0008 - 0x0000)
struct BloodOrbStateMonitorComponent_OnBloodOrbSpawned final
{
public:
	const class ABloodOrb*                        bloodOrb;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbStateMonitorComponent_OnBloodOrbSpawned) == 0x000008, "Wrong alignment on BloodOrbStateMonitorComponent_OnBloodOrbSpawned");
static_assert(sizeof(BloodOrbStateMonitorComponent_OnBloodOrbSpawned) == 0x000008, "Wrong size on BloodOrbStateMonitorComponent_OnBloodOrbSpawned");
static_assert(offsetof(BloodOrbStateMonitorComponent_OnBloodOrbSpawned, bloodOrb) == 0x000000, "Member 'BloodOrbStateMonitorComponent_OnBloodOrbSpawned::bloodOrb' has a wrong offset!");

// Function TheOni.BloodOrbStateMonitorComponent.OnBloodOrbStateChanged
// 0x0010 (0x0010 - 0x0000)
struct BloodOrbStateMonitorComponent_OnBloodOrbStateChanged final
{
public:
	EBloodOrbState                                oldState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBloodOrbState                                newState;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class ABloodOrb*                        bloodOrb;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbStateMonitorComponent_OnBloodOrbStateChanged) == 0x000008, "Wrong alignment on BloodOrbStateMonitorComponent_OnBloodOrbStateChanged");
static_assert(sizeof(BloodOrbStateMonitorComponent_OnBloodOrbStateChanged) == 0x000010, "Wrong size on BloodOrbStateMonitorComponent_OnBloodOrbStateChanged");
static_assert(offsetof(BloodOrbStateMonitorComponent_OnBloodOrbStateChanged, oldState) == 0x000000, "Member 'BloodOrbStateMonitorComponent_OnBloodOrbStateChanged::oldState' has a wrong offset!");
static_assert(offsetof(BloodOrbStateMonitorComponent_OnBloodOrbStateChanged, newState) == 0x000001, "Member 'BloodOrbStateMonitorComponent_OnBloodOrbStateChanged::newState' has a wrong offset!");
static_assert(offsetof(BloodOrbStateMonitorComponent_OnBloodOrbStateChanged, bloodOrb) == 0x000008, "Member 'BloodOrbStateMonitorComponent_OnBloodOrbStateChanged::bloodOrb' has a wrong offset!");

// Function TheOni.BloodOrbUtilities.GetAllBloodOrbs
// 0x0018 (0x0018 - 0x0000)
struct BloodOrbUtilities_GetAllBloodOrbs final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABloodOrb*>                      ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbUtilities_GetAllBloodOrbs) == 0x000008, "Wrong alignment on BloodOrbUtilities_GetAllBloodOrbs");
static_assert(sizeof(BloodOrbUtilities_GetAllBloodOrbs) == 0x000018, "Wrong size on BloodOrbUtilities_GetAllBloodOrbs");
static_assert(offsetof(BloodOrbUtilities_GetAllBloodOrbs, worldContextObject) == 0x000000, "Member 'BloodOrbUtilities_GetAllBloodOrbs::worldContextObject' has a wrong offset!");
static_assert(offsetof(BloodOrbUtilities_GetAllBloodOrbs, ReturnValue) == 0x000008, "Member 'BloodOrbUtilities_GetAllBloodOrbs::ReturnValue' has a wrong offset!");

// Function TheOni.BloodOrbVisibilityComponent.SetAuraVisibilityRange
// 0x0004 (0x0004 - 0x0000)
struct BloodOrbVisibilityComponent_SetAuraVisibilityRange final
{
public:
	float                                         auraVisibilityRange;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbVisibilityComponent_SetAuraVisibilityRange) == 0x000004, "Wrong alignment on BloodOrbVisibilityComponent_SetAuraVisibilityRange");
static_assert(sizeof(BloodOrbVisibilityComponent_SetAuraVisibilityRange) == 0x000004, "Wrong size on BloodOrbVisibilityComponent_SetAuraVisibilityRange");
static_assert(offsetof(BloodOrbVisibilityComponent_SetAuraVisibilityRange, auraVisibilityRange) == 0x000000, "Member 'BloodOrbVisibilityComponent_SetAuraVisibilityRange::auraVisibilityRange' has a wrong offset!");

// Function TheOni.BloodOrbVisibilityComponent.SetShowAttractedBloodOrbsAuras
// 0x0001 (0x0001 - 0x0000)
struct BloodOrbVisibilityComponent_SetShowAttractedBloodOrbsAuras final
{
public:
	bool                                          show;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbVisibilityComponent_SetShowAttractedBloodOrbsAuras) == 0x000001, "Wrong alignment on BloodOrbVisibilityComponent_SetShowAttractedBloodOrbsAuras");
static_assert(sizeof(BloodOrbVisibilityComponent_SetShowAttractedBloodOrbsAuras) == 0x000001, "Wrong size on BloodOrbVisibilityComponent_SetShowAttractedBloodOrbsAuras");
static_assert(offsetof(BloodOrbVisibilityComponent_SetShowAttractedBloodOrbsAuras, show) == 0x000000, "Member 'BloodOrbVisibilityComponent_SetShowAttractedBloodOrbsAuras::show' has a wrong offset!");

// Function TheOni.BloodOrbVisibilityComponent.SetVisibilityMode
// 0x0001 (0x0001 - 0x0000)
struct BloodOrbVisibilityComponent_SetVisibilityMode final
{
public:
	EBloodOrbVisibilityMode                       visibilityMode;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbVisibilityComponent_SetVisibilityMode) == 0x000001, "Wrong alignment on BloodOrbVisibilityComponent_SetVisibilityMode");
static_assert(sizeof(BloodOrbVisibilityComponent_SetVisibilityMode) == 0x000001, "Wrong size on BloodOrbVisibilityComponent_SetVisibilityMode");
static_assert(offsetof(BloodOrbVisibilityComponent_SetVisibilityMode, visibilityMode) == 0x000000, "Member 'BloodOrbVisibilityComponent_SetVisibilityMode::visibilityMode' has a wrong offset!");

// Function TheOni.BloodOrbVisibilityComponent.SetVisibilityRange
// 0x0004 (0x0004 - 0x0000)
struct BloodOrbVisibilityComponent_SetVisibilityRange final
{
public:
	float                                         visibilityRange;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbVisibilityComponent_SetVisibilityRange) == 0x000004, "Wrong alignment on BloodOrbVisibilityComponent_SetVisibilityRange");
static_assert(sizeof(BloodOrbVisibilityComponent_SetVisibilityRange) == 0x000004, "Wrong size on BloodOrbVisibilityComponent_SetVisibilityRange");
static_assert(offsetof(BloodOrbVisibilityComponent_SetVisibilityRange, visibilityRange) == 0x000000, "Member 'BloodOrbVisibilityComponent_SetVisibilityRange::visibilityRange' has a wrong offset!");

// Function TheOni.BloodOrbVisibilityComponent.OnBloodOrbSpawned
// 0x0008 (0x0008 - 0x0000)
struct BloodOrbVisibilityComponent_OnBloodOrbSpawned final
{
public:
	const class ABloodOrb*                        bloodOrb;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbVisibilityComponent_OnBloodOrbSpawned) == 0x000008, "Wrong alignment on BloodOrbVisibilityComponent_OnBloodOrbSpawned");
static_assert(sizeof(BloodOrbVisibilityComponent_OnBloodOrbSpawned) == 0x000008, "Wrong size on BloodOrbVisibilityComponent_OnBloodOrbSpawned");
static_assert(offsetof(BloodOrbVisibilityComponent_OnBloodOrbSpawned, bloodOrb) == 0x000000, "Member 'BloodOrbVisibilityComponent_OnBloodOrbSpawned::bloodOrb' has a wrong offset!");

// Function TheOni.DemonModeComponent.Authority_AddCharge
// 0x0004 (0x0004 - 0x0000)
struct DemonModeComponent_Authority_AddCharge final
{
public:
	float                                         chargeAmount;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_Authority_AddCharge) == 0x000004, "Wrong alignment on DemonModeComponent_Authority_AddCharge");
static_assert(sizeof(DemonModeComponent_Authority_AddCharge) == 0x000004, "Wrong size on DemonModeComponent_Authority_AddCharge");
static_assert(offsetof(DemonModeComponent_Authority_AddCharge, chargeAmount) == 0x000000, "Member 'DemonModeComponent_Authority_AddCharge::chargeAmount' has a wrong offset!");

// Function TheOni.DemonModeComponent.Authority_InterruptedMontage
// 0x0028 (0x0028 - 0x0000)
struct DemonModeComponent_Authority_InterruptedMontage final
{
public:
	struct FAnimationMontageDescriptor            montage;                                           // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          interrupted;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DemonModeComponent_Authority_InterruptedMontage) == 0x000008, "Wrong alignment on DemonModeComponent_Authority_InterruptedMontage");
static_assert(sizeof(DemonModeComponent_Authority_InterruptedMontage) == 0x000028, "Wrong size on DemonModeComponent_Authority_InterruptedMontage");
static_assert(offsetof(DemonModeComponent_Authority_InterruptedMontage, montage) == 0x000000, "Member 'DemonModeComponent_Authority_InterruptedMontage::montage' has a wrong offset!");
static_assert(offsetof(DemonModeComponent_Authority_InterruptedMontage, interrupted) == 0x000020, "Member 'DemonModeComponent_Authority_InterruptedMontage::interrupted' has a wrong offset!");

// Function TheOni.DemonModeComponent.Authority_OnChargeChanged
// 0x0004 (0x0004 - 0x0000)
struct DemonModeComponent_Authority_OnChargeChanged final
{
public:
	float                                         currentChargePercent;                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_Authority_OnChargeChanged) == 0x000004, "Wrong alignment on DemonModeComponent_Authority_OnChargeChanged");
static_assert(sizeof(DemonModeComponent_Authority_OnChargeChanged) == 0x000004, "Wrong size on DemonModeComponent_Authority_OnChargeChanged");
static_assert(offsetof(DemonModeComponent_Authority_OnChargeChanged, currentChargePercent) == 0x000000, "Member 'DemonModeComponent_Authority_OnChargeChanged::currentChargePercent' has a wrong offset!");

// Function TheOni.DemonModeComponent.Authority_SetDemonModeCooldownInteraction
// 0x0008 (0x0008 - 0x0000)
struct DemonModeComponent_Authority_SetDemonModeCooldownInteraction final
{
public:
	class UInteractionDefinition*                 interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_Authority_SetDemonModeCooldownInteraction) == 0x000008, "Wrong alignment on DemonModeComponent_Authority_SetDemonModeCooldownInteraction");
static_assert(sizeof(DemonModeComponent_Authority_SetDemonModeCooldownInteraction) == 0x000008, "Wrong size on DemonModeComponent_Authority_SetDemonModeCooldownInteraction");
static_assert(offsetof(DemonModeComponent_Authority_SetDemonModeCooldownInteraction, interaction) == 0x000000, "Member 'DemonModeComponent_Authority_SetDemonModeCooldownInteraction::interaction' has a wrong offset!");

// Function TheOni.DemonModeComponent.DBD_DemonModeForever
// 0x0001 (0x0001 - 0x0000)
struct DemonModeComponent_DBD_DemonModeForever final
{
public:
	bool                                          forever;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_DBD_DemonModeForever) == 0x000001, "Wrong alignment on DemonModeComponent_DBD_DemonModeForever");
static_assert(sizeof(DemonModeComponent_DBD_DemonModeForever) == 0x000001, "Wrong size on DemonModeComponent_DBD_DemonModeForever");
static_assert(offsetof(DemonModeComponent_DBD_DemonModeForever, forever) == 0x000000, "Member 'DemonModeComponent_DBD_DemonModeForever::forever' has a wrong offset!");

// Function TheOni.DemonModeComponent.CanStartDemonMode
// 0x0001 (0x0001 - 0x0000)
struct DemonModeComponent_CanStartDemonMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_CanStartDemonMode) == 0x000001, "Wrong alignment on DemonModeComponent_CanStartDemonMode");
static_assert(sizeof(DemonModeComponent_CanStartDemonMode) == 0x000001, "Wrong size on DemonModeComponent_CanStartDemonMode");
static_assert(offsetof(DemonModeComponent_CanStartDemonMode, ReturnValue) == 0x000000, "Member 'DemonModeComponent_CanStartDemonMode::ReturnValue' has a wrong offset!");

// Function TheOni.DemonModeComponent.GetChargePercent
// 0x0004 (0x0004 - 0x0000)
struct DemonModeComponent_GetChargePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_GetChargePercent) == 0x000004, "Wrong alignment on DemonModeComponent_GetChargePercent");
static_assert(sizeof(DemonModeComponent_GetChargePercent) == 0x000004, "Wrong size on DemonModeComponent_GetChargePercent");
static_assert(offsetof(DemonModeComponent_GetChargePercent, ReturnValue) == 0x000000, "Member 'DemonModeComponent_GetChargePercent::ReturnValue' has a wrong offset!");

// Function TheOni.DemonModeComponent.GetCurrentCharge
// 0x0004 (0x0004 - 0x0000)
struct DemonModeComponent_GetCurrentCharge final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_GetCurrentCharge) == 0x000004, "Wrong alignment on DemonModeComponent_GetCurrentCharge");
static_assert(sizeof(DemonModeComponent_GetCurrentCharge) == 0x000004, "Wrong size on DemonModeComponent_GetCurrentCharge");
static_assert(offsetof(DemonModeComponent_GetCurrentCharge, ReturnValue) == 0x000000, "Member 'DemonModeComponent_GetCurrentCharge::ReturnValue' has a wrong offset!");

// Function TheOni.DemonModeComponent.GetDemonModeState
// 0x0001 (0x0001 - 0x0000)
struct DemonModeComponent_GetDemonModeState final
{
public:
	EDemonModeState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_GetDemonModeState) == 0x000001, "Wrong alignment on DemonModeComponent_GetDemonModeState");
static_assert(sizeof(DemonModeComponent_GetDemonModeState) == 0x000001, "Wrong size on DemonModeComponent_GetDemonModeState");
static_assert(offsetof(DemonModeComponent_GetDemonModeState, ReturnValue) == 0x000000, "Member 'DemonModeComponent_GetDemonModeState::ReturnValue' has a wrong offset!");

// Function TheOni.DemonModeComponent.IsInDemonMode
// 0x0001 (0x0001 - 0x0000)
struct DemonModeComponent_IsInDemonMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_IsInDemonMode) == 0x000001, "Wrong alignment on DemonModeComponent_IsInDemonMode");
static_assert(sizeof(DemonModeComponent_IsInDemonMode) == 0x000001, "Wrong size on DemonModeComponent_IsInDemonMode");
static_assert(offsetof(DemonModeComponent_IsInDemonMode, ReturnValue) == 0x000000, "Member 'DemonModeComponent_IsInDemonMode::ReturnValue' has a wrong offset!");

// Function TheOni.DemonModeComponent.OnIsPowerChanged
// 0x0001 (0x0001 - 0x0000)
struct DemonModeComponent_OnIsPowerChanged final
{
public:
	bool                                          isInPower;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_OnIsPowerChanged) == 0x000001, "Wrong alignment on DemonModeComponent_OnIsPowerChanged");
static_assert(sizeof(DemonModeComponent_OnIsPowerChanged) == 0x000001, "Wrong size on DemonModeComponent_OnIsPowerChanged");
static_assert(offsetof(DemonModeComponent_OnIsPowerChanged, isInPower) == 0x000000, "Member 'DemonModeComponent_OnIsPowerChanged::isInPower' has a wrong offset!");

// Function TheOni.DemonModeComponent.ShouldLoseDemonModeOnStun
// 0x0001 (0x0001 - 0x0000)
struct DemonModeComponent_ShouldLoseDemonModeOnStun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_ShouldLoseDemonModeOnStun) == 0x000001, "Wrong alignment on DemonModeComponent_ShouldLoseDemonModeOnStun");
static_assert(sizeof(DemonModeComponent_ShouldLoseDemonModeOnStun) == 0x000001, "Wrong size on DemonModeComponent_ShouldLoseDemonModeOnStun");
static_assert(offsetof(DemonModeComponent_ShouldLoseDemonModeOnStun, ReturnValue) == 0x000000, "Member 'DemonModeComponent_ShouldLoseDemonModeOnStun::ReturnValue' has a wrong offset!");

// Function TheOni.DemonModeCooldownInteraction.SetPlayerOwner
// 0x0008 (0x0008 - 0x0000)
struct DemonModeCooldownInteraction_SetPlayerOwner final
{
public:
	const class ADBDPlayer*                       owner;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeCooldownInteraction_SetPlayerOwner) == 0x000008, "Wrong alignment on DemonModeCooldownInteraction_SetPlayerOwner");
static_assert(sizeof(DemonModeCooldownInteraction_SetPlayerOwner) == 0x000008, "Wrong size on DemonModeCooldownInteraction_SetPlayerOwner");
static_assert(offsetof(DemonModeCooldownInteraction_SetPlayerOwner, owner) == 0x000000, "Member 'DemonModeCooldownInteraction_SetPlayerOwner::owner' has a wrong offset!");

// Function TheOni.DemonModeMenuComponent.SetInMenuDemonMode
// 0x0001 (0x0001 - 0x0000)
struct DemonModeMenuComponent_SetInMenuDemonMode final
{
public:
	bool                                          inMenuDemonMode;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeMenuComponent_SetInMenuDemonMode) == 0x000001, "Wrong alignment on DemonModeMenuComponent_SetInMenuDemonMode");
static_assert(sizeof(DemonModeMenuComponent_SetInMenuDemonMode) == 0x000001, "Wrong size on DemonModeMenuComponent_SetInMenuDemonMode");
static_assert(offsetof(DemonModeMenuComponent_SetInMenuDemonMode, inMenuDemonMode) == 0x000000, "Member 'DemonModeMenuComponent_SetInMenuDemonMode::inMenuDemonMode' has a wrong offset!");

// Function TheOni.OniCustomizationItemAnimInstance.SetIsInDemonMode
// 0x0001 (0x0001 - 0x0000)
struct OniCustomizationItemAnimInstance_SetIsInDemonMode final
{
public:
	bool                                          isInDemonMode;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OniCustomizationItemAnimInstance_SetIsInDemonMode) == 0x000001, "Wrong alignment on OniCustomizationItemAnimInstance_SetIsInDemonMode");
static_assert(sizeof(OniCustomizationItemAnimInstance_SetIsInDemonMode) == 0x000001, "Wrong size on OniCustomizationItemAnimInstance_SetIsInDemonMode");
static_assert(offsetof(OniCustomizationItemAnimInstance_SetIsInDemonMode, isInDemonMode) == 0x000000, "Member 'OniCustomizationItemAnimInstance_SetIsInDemonMode::isInDemonMode' has a wrong offset!");

// Function TheOni.OniDashInteraction.OnChargeBegin
// 0x0008 (0x0008 - 0x0000)
struct OniDashInteraction_OnChargeBegin final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OniDashInteraction_OnChargeBegin) == 0x000008, "Wrong alignment on OniDashInteraction_OnChargeBegin");
static_assert(sizeof(OniDashInteraction_OnChargeBegin) == 0x000008, "Wrong size on OniDashInteraction_OnChargeBegin");
static_assert(offsetof(OniDashInteraction_OnChargeBegin, player) == 0x000000, "Member 'OniDashInteraction_OnChargeBegin::player' has a wrong offset!");

// Function TheOni.OniDashInteraction.OnChargeEnd
// 0x0010 (0x0010 - 0x0000)
struct OniDashInteraction_OnChargeEnd final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          chargeCompleted;                                   // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OniDashInteraction_OnChargeEnd) == 0x000008, "Wrong alignment on OniDashInteraction_OnChargeEnd");
static_assert(sizeof(OniDashInteraction_OnChargeEnd) == 0x000010, "Wrong size on OniDashInteraction_OnChargeEnd");
static_assert(offsetof(OniDashInteraction_OnChargeEnd, player) == 0x000000, "Member 'OniDashInteraction_OnChargeEnd::player' has a wrong offset!");
static_assert(offsetof(OniDashInteraction_OnChargeEnd, chargeCompleted) == 0x000008, "Member 'OniDashInteraction_OnChargeEnd::chargeCompleted' has a wrong offset!");

// Function TheOni.OniDashInteraction.OnDashBegin
// 0x0008 (0x0008 - 0x0000)
struct OniDashInteraction_OnDashBegin final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OniDashInteraction_OnDashBegin) == 0x000008, "Wrong alignment on OniDashInteraction_OnDashBegin");
static_assert(sizeof(OniDashInteraction_OnDashBegin) == 0x000008, "Wrong size on OniDashInteraction_OnDashBegin");
static_assert(offsetof(OniDashInteraction_OnDashBegin, player) == 0x000000, "Member 'OniDashInteraction_OnDashBegin::player' has a wrong offset!");

// Function TheOni.OniDashInteraction.OnDashEnd
// 0x0008 (0x0008 - 0x0000)
struct OniDashInteraction_OnDashEnd final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OniDashInteraction_OnDashEnd) == 0x000008, "Wrong alignment on OniDashInteraction_OnDashEnd");
static_assert(sizeof(OniDashInteraction_OnDashEnd) == 0x000008, "Wrong size on OniDashInteraction_OnDashEnd");
static_assert(offsetof(OniDashInteraction_OnDashEnd, player) == 0x000000, "Member 'OniDashInteraction_OnDashEnd::player' has a wrong offset!");

// Function TheOni.OniDashInteraction.SetPlayerOwner
// 0x0008 (0x0008 - 0x0000)
struct OniDashInteraction_SetPlayerOwner final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OniDashInteraction_SetPlayerOwner) == 0x000008, "Wrong alignment on OniDashInteraction_SetPlayerOwner");
static_assert(sizeof(OniDashInteraction_SetPlayerOwner) == 0x000008, "Wrong size on OniDashInteraction_SetPlayerOwner");
static_assert(offsetof(OniDashInteraction_SetPlayerOwner, player) == 0x000000, "Member 'OniDashInteraction_SetPlayerOwner::player' has a wrong offset!");

// Function TheOni.RenjirosBloodyGlove.Authority_OnBloodOrbOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin final
{
public:
	const class AActor*                           overlappingActor;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ABloodOrb*                        bloodOrb;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin) == 0x000008, "Wrong alignment on RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin");
static_assert(sizeof(RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin) == 0x000010, "Wrong size on RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin");
static_assert(offsetof(RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin, overlappingActor) == 0x000000, "Member 'RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin::overlappingActor' has a wrong offset!");
static_assert(offsetof(RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin, bloodOrb) == 0x000008, "Member 'RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin::bloodOrb' has a wrong offset!");

// Function TheOni.StartDemonModeInteraction.SetPlayerOwner
// 0x0008 (0x0008 - 0x0000)
struct StartDemonModeInteraction_SetPlayerOwner final
{
public:
	const class ADBDPlayer*                       owner;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartDemonModeInteraction_SetPlayerOwner) == 0x000008, "Wrong alignment on StartDemonModeInteraction_SetPlayerOwner");
static_assert(sizeof(StartDemonModeInteraction_SetPlayerOwner) == 0x000008, "Wrong size on StartDemonModeInteraction_SetPlayerOwner");
static_assert(offsetof(StartDemonModeInteraction_SetPlayerOwner, owner) == 0x000000, "Member 'StartDemonModeInteraction_SetPlayerOwner::owner' has a wrong offset!");

}

