#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheExecutioner

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum TheExecutioner.EProtagonist
// NumValues: 0x0003
enum class EProtagonist : uint8
{
	Instigator                               = 0,
	Target                                   = 1,
	EProtagonist_MAX                         = 2,
};

// Enum TheExecutioner.ETrailPointRefreshReason
// NumValues: 0x0006
enum class ETrailPointRefreshReason : uint8
{
	FrontNeighbourAdded                      = 0,
	BackNeighbourAdded                       = 1,
	BackNeighbourRemoved                     = 2,
	FrontNeighbourRemoved                    = 3,
	None                                     = 4,
	ETrailPointRefreshReason_MAX             = 5,
};

// Enum TheExecutioner.ETrailType
// NumValues: 0x0004
enum class ETrailType : uint8
{
	NormalTrail                              = 0,
	RestrictionTrail                         = 1,
	None                                     = 2,
	ETrailType_MAX                           = 3,
};

// ScriptStruct TheExecutioner.AgonyDisplayFxEvent
// 0x0010 (0x0010 - 0x0000)
struct FAgonyDisplayFxEvent final
{
public:
	struct FGameplayTag                           GameEvent;                                         // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProtagonist                                  Protagonist;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAgonyDisplayFxEvent) == 0x000004, "Wrong alignment on FAgonyDisplayFxEvent");
static_assert(sizeof(FAgonyDisplayFxEvent) == 0x000010, "Wrong size on FAgonyDisplayFxEvent");
static_assert(offsetof(FAgonyDisplayFxEvent, GameEvent) == 0x000000, "Member 'FAgonyDisplayFxEvent::GameEvent' has a wrong offset!");
static_assert(offsetof(FAgonyDisplayFxEvent, Protagonist) == 0x00000C, "Member 'FAgonyDisplayFxEvent::Protagonist' has a wrong offset!");

// ScriptStruct TheExecutioner.TormentTrailPointInfo
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FTormentTrailPointInfo final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTormentTrailPointInfo) == 0x000010, "Wrong alignment on FTormentTrailPointInfo");
static_assert(sizeof(FTormentTrailPointInfo) == 0x000060, "Wrong size on FTormentTrailPointInfo");

// ScriptStruct TheExecutioner.ReplicatedTrailItem
// 0x0034 (0x0040 - 0x000C)
struct FReplicatedTrailItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATormentTrailPoint*                     TrailPoint;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OrderInTrail;                                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize10                  PointRelativeLocation;                             // 0x001C(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PointRotation;                                     // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedTrailItem) == 0x000008, "Wrong alignment on FReplicatedTrailItem");
static_assert(sizeof(FReplicatedTrailItem) == 0x000040, "Wrong size on FReplicatedTrailItem");
static_assert(offsetof(FReplicatedTrailItem, TrailPoint) == 0x000010, "Member 'FReplicatedTrailItem::TrailPoint' has a wrong offset!");
static_assert(offsetof(FReplicatedTrailItem, OrderInTrail) == 0x000018, "Member 'FReplicatedTrailItem::OrderInTrail' has a wrong offset!");
static_assert(offsetof(FReplicatedTrailItem, PointRelativeLocation) == 0x00001C, "Member 'FReplicatedTrailItem::PointRelativeLocation' has a wrong offset!");
static_assert(offsetof(FReplicatedTrailItem, PointRotation) == 0x000028, "Member 'FReplicatedTrailItem::PointRotation' has a wrong offset!");

// ScriptStruct TheExecutioner.ReplicatedTrailPointList
// 0x0018 (0x0120 - 0x0108)
struct FReplicatedTrailPointList final : public FFastArraySerializer
{
public:
	TArray<struct FReplicatedTrailItem>           Items;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class ATormentTrailController*                TormentTrailController;                            // 0x0118(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplicatedTrailPointList) == 0x000008, "Wrong alignment on FReplicatedTrailPointList");
static_assert(sizeof(FReplicatedTrailPointList) == 0x000120, "Wrong size on FReplicatedTrailPointList");
static_assert(offsetof(FReplicatedTrailPointList, Items) == 0x000108, "Member 'FReplicatedTrailPointList::Items' has a wrong offset!");
static_assert(offsetof(FReplicatedTrailPointList, TormentTrailController) == 0x000118, "Member 'FReplicatedTrailPointList::TormentTrailController' has a wrong offset!");

// ScriptStruct TheExecutioner.SpawnedAttackPoint
// 0x0010 (0x0010 - 0x0000)
struct FSpawnedAttackPoint final
{
public:
	class ABaseTormentTrailPoint*                 AttackTrailPoint;                                  // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnedAttackPoint) == 0x000008, "Wrong alignment on FSpawnedAttackPoint");
static_assert(sizeof(FSpawnedAttackPoint) == 0x000010, "Wrong size on FSpawnedAttackPoint");
static_assert(offsetof(FSpawnedAttackPoint, AttackTrailPoint) == 0x000000, "Member 'FSpawnedAttackPoint::AttackTrailPoint' has a wrong offset!");

// ScriptStruct TheExecutioner.SpawnedTormentTrailPoint
// 0x0010 (0x0010 - 0x0000)
struct FSpawnedTormentTrailPoint final
{
public:
	class ATormentTrailPoint*                     TrailPoint;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnedTormentTrailPoint) == 0x000008, "Wrong alignment on FSpawnedTormentTrailPoint");
static_assert(sizeof(FSpawnedTormentTrailPoint) == 0x000010, "Wrong size on FSpawnedTormentTrailPoint");
static_assert(offsetof(FSpawnedTormentTrailPoint, TrailPoint) == 0x000000, "Member 'FSpawnedTormentTrailPoint::TrailPoint' has a wrong offset!");

}

