#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkyLight_Unlit

#include "Basic.hpp"

#include "BP_SkyLight_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SkyLight_Unlit.BP_SkyLight_Unlit_C
// 0x0030 (0x0270 - 0x0240)
class ABP_SkyLight_Unlit_C final : public ABP_SkyLight_Base_C
{
public:
	class UDirectionalLightComponent*             DirectionalLight_Up;                               // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight_04;                               // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight_03;                               // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight_02;                               // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight_01;                               // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight_Down;                             // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SkyLight_Unlit_C">();
	}
	static class ABP_SkyLight_Unlit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SkyLight_Unlit_C>();
	}
};
static_assert(alignof(ABP_SkyLight_Unlit_C) == 0x000008, "Wrong alignment on ABP_SkyLight_Unlit_C");
static_assert(sizeof(ABP_SkyLight_Unlit_C) == 0x000270, "Wrong size on ABP_SkyLight_Unlit_C");
static_assert(offsetof(ABP_SkyLight_Unlit_C, DirectionalLight_Up) == 0x000240, "Member 'ABP_SkyLight_Unlit_C::DirectionalLight_Up' has a wrong offset!");
static_assert(offsetof(ABP_SkyLight_Unlit_C, DirectionalLight_04) == 0x000248, "Member 'ABP_SkyLight_Unlit_C::DirectionalLight_04' has a wrong offset!");
static_assert(offsetof(ABP_SkyLight_Unlit_C, DirectionalLight_03) == 0x000250, "Member 'ABP_SkyLight_Unlit_C::DirectionalLight_03' has a wrong offset!");
static_assert(offsetof(ABP_SkyLight_Unlit_C, DirectionalLight_02) == 0x000258, "Member 'ABP_SkyLight_Unlit_C::DirectionalLight_02' has a wrong offset!");
static_assert(offsetof(ABP_SkyLight_Unlit_C, DirectionalLight_01) == 0x000260, "Member 'ABP_SkyLight_Unlit_C::DirectionalLight_01' has a wrong offset!");
static_assert(offsetof(ABP_SkyLight_Unlit_C, DirectionalLight_Down) == 0x000268, "Member 'ABP_SkyLight_Unlit_C::DirectionalLight_Down' has a wrong offset!");

}

