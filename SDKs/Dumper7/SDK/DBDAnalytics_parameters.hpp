#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDAnalytics

#include "Basic.hpp"


namespace SDK::Params
{

// Function DBDAnalytics.PerkAnalyticsLibrary.SendFranklinsConsumeItemAnalytics
// 0x0008 (0x0008 - 0x0000)
struct PerkAnalyticsLibrary_SendFranklinsConsumeItemAnalytics final
{
public:
	class ADBDPlayer*                             previousOwner;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkAnalyticsLibrary_SendFranklinsConsumeItemAnalytics) == 0x000008, "Wrong alignment on PerkAnalyticsLibrary_SendFranklinsConsumeItemAnalytics");
static_assert(sizeof(PerkAnalyticsLibrary_SendFranklinsConsumeItemAnalytics) == 0x000008, "Wrong size on PerkAnalyticsLibrary_SendFranklinsConsumeItemAnalytics");
static_assert(offsetof(PerkAnalyticsLibrary_SendFranklinsConsumeItemAnalytics, previousOwner) == 0x000000, "Member 'PerkAnalyticsLibrary_SendFranklinsConsumeItemAnalytics::previousOwner' has a wrong offset!");

// Function DBDAnalytics.PerkAnalyticsLibrary.SendFranklinsHitSurvivorNearDroppedItemAnalytics
// 0x0010 (0x0010 - 0x0000)
struct PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics final
{
public:
	class ADBDPlayer*                             hitSurvivor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             slasher;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics) == 0x000008, "Wrong alignment on PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics");
static_assert(sizeof(PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics) == 0x000010, "Wrong size on PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics");
static_assert(offsetof(PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics, hitSurvivor) == 0x000000, "Member 'PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics::hitSurvivor' has a wrong offset!");
static_assert(offsetof(PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics, slasher) == 0x000008, "Member 'PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics::slasher' has a wrong offset!");

// Function DBDAnalytics.PerkAnalyticsLibrary.SendKnockoutSurvivorFoundAnalytics
// 0x0010 (0x0010 - 0x0000)
struct PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics final
{
public:
	class ADBDPlayer*                             findingSurvivor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             foundSurvivor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics) == 0x000008, "Wrong alignment on PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics");
static_assert(sizeof(PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics) == 0x000010, "Wrong size on PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics");
static_assert(offsetof(PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics, findingSurvivor) == 0x000000, "Member 'PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics::findingSurvivor' has a wrong offset!");
static_assert(offsetof(PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics, foundSurvivor) == 0x000008, "Member 'PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics::foundSurvivor' has a wrong offset!");

// Function DBDAnalytics.PerkAnalyticsLibrary.SendLightbornAuraRevealedAnalytics
// 0x0010 (0x0010 - 0x0000)
struct PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics final
{
public:
	class ADBDPlayer*                             revealedPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             slasher;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics) == 0x000008, "Wrong alignment on PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics");
static_assert(sizeof(PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics) == 0x000010, "Wrong size on PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics");
static_assert(offsetof(PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics, revealedPlayer) == 0x000000, "Member 'PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics::revealedPlayer' has a wrong offset!");
static_assert(offsetof(PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics, slasher) == 0x000008, "Member 'PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics::slasher' has a wrong offset!");

// Function DBDAnalytics.PerkAnalyticsLibrary.SendTinkererUndetectableHitNearGeneratorAnalytics
// 0x0010 (0x0010 - 0x0000)
struct PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics final
{
public:
	class ADBDPlayer*                             hitPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             slasher;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics) == 0x000008, "Wrong alignment on PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics");
static_assert(sizeof(PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics) == 0x000010, "Wrong size on PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics");
static_assert(offsetof(PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics, hitPlayer) == 0x000000, "Member 'PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics::hitPlayer' has a wrong offset!");
static_assert(offsetof(PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics, slasher) == 0x000008, "Member 'PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics::slasher' has a wrong offset!");

// Function DBDAnalytics.PerkAnalyticsLibrary.SendTinkererUndetectableInterruptAnalytics
// 0x0010 (0x0010 - 0x0000)
struct PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics final
{
public:
	class ADBDPlayer*                             interruptedPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             slasher;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics) == 0x000008, "Wrong alignment on PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics");
static_assert(sizeof(PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics) == 0x000010, "Wrong size on PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics");
static_assert(offsetof(PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics, interruptedPlayer) == 0x000000, "Member 'PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics::interruptedPlayer' has a wrong offset!");
static_assert(offsetof(PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics, slasher) == 0x000008, "Member 'PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics::slasher' has a wrong offset!");

// Function DBDAnalytics.ClosetAnalytics.IncrementClosetEnter
// 0x0008 (0x0008 - 0x0000)
struct ClosetAnalytics_IncrementClosetEnter final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClosetAnalytics_IncrementClosetEnter) == 0x000008, "Wrong alignment on ClosetAnalytics_IncrementClosetEnter");
static_assert(sizeof(ClosetAnalytics_IncrementClosetEnter) == 0x000008, "Wrong size on ClosetAnalytics_IncrementClosetEnter");
static_assert(offsetof(ClosetAnalytics_IncrementClosetEnter, survivor) == 0x000000, "Member 'ClosetAnalytics_IncrementClosetEnter::survivor' has a wrong offset!");

// Function DBDAnalytics.ClosetAnalytics.RecordClosetSearchFail
// 0x0008 (0x0008 - 0x0000)
struct ClosetAnalytics_RecordClosetSearchFail final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClosetAnalytics_RecordClosetSearchFail) == 0x000008, "Wrong alignment on ClosetAnalytics_RecordClosetSearchFail");
static_assert(sizeof(ClosetAnalytics_RecordClosetSearchFail) == 0x000008, "Wrong size on ClosetAnalytics_RecordClosetSearchFail");
static_assert(offsetof(ClosetAnalytics_RecordClosetSearchFail, killer) == 0x000000, "Member 'ClosetAnalytics_RecordClosetSearchFail::killer' has a wrong offset!");

// Function DBDAnalytics.ClosetAnalytics.RecordClosetSearchSuccess
// 0x0008 (0x0008 - 0x0000)
struct ClosetAnalytics_RecordClosetSearchSuccess final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClosetAnalytics_RecordClosetSearchSuccess) == 0x000008, "Wrong alignment on ClosetAnalytics_RecordClosetSearchSuccess");
static_assert(sizeof(ClosetAnalytics_RecordClosetSearchSuccess) == 0x000008, "Wrong size on ClosetAnalytics_RecordClosetSearchSuccess");
static_assert(offsetof(ClosetAnalytics_RecordClosetSearchSuccess, killer) == 0x000000, "Member 'ClosetAnalytics_RecordClosetSearchSuccess::killer' has a wrong offset!");

// Function DBDAnalytics.DBDAnalytics.RecordGameProgress
// 0x0010 (0x0010 - 0x0000)
struct DBDAnalytics_RecordGameProgress final
{
public:
	class FString                                 InProgressType;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAnalytics_RecordGameProgress) == 0x000008, "Wrong alignment on DBDAnalytics_RecordGameProgress");
static_assert(sizeof(DBDAnalytics_RecordGameProgress) == 0x000010, "Wrong size on DBDAnalytics_RecordGameProgress");
static_assert(offsetof(DBDAnalytics_RecordGameProgress, InProgressType) == 0x000000, "Member 'DBDAnalytics_RecordGameProgress::InProgressType' has a wrong offset!");

// Function DBDAnalytics.PigAnalytics.IncrementRBTKilledCount
// 0x0010 (0x0010 - 0x0000)
struct PigAnalytics_IncrementRBTKilledCount final
{
public:
	class ACamperPlayer*                          playerKilled;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          killedByExecutionZone;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PigAnalytics_IncrementRBTKilledCount) == 0x000008, "Wrong alignment on PigAnalytics_IncrementRBTKilledCount");
static_assert(sizeof(PigAnalytics_IncrementRBTKilledCount) == 0x000010, "Wrong size on PigAnalytics_IncrementRBTKilledCount");
static_assert(offsetof(PigAnalytics_IncrementRBTKilledCount, playerKilled) == 0x000000, "Member 'PigAnalytics_IncrementRBTKilledCount::playerKilled' has a wrong offset!");
static_assert(offsetof(PigAnalytics_IncrementRBTKilledCount, killedByExecutionZone) == 0x000008, "Member 'PigAnalytics_IncrementRBTKilledCount::killedByExecutionZone' has a wrong offset!");

// Function DBDAnalytics.PigAnalytics.IncrementRBTTimerActived
// 0x0008 (0x0008 - 0x0000)
struct PigAnalytics_IncrementRBTTimerActived final
{
public:
	class ACamperPlayer*                          attachedPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PigAnalytics_IncrementRBTTimerActived) == 0x000008, "Wrong alignment on PigAnalytics_IncrementRBTTimerActived");
static_assert(sizeof(PigAnalytics_IncrementRBTTimerActived) == 0x000008, "Wrong size on PigAnalytics_IncrementRBTTimerActived");
static_assert(offsetof(PigAnalytics_IncrementRBTTimerActived, attachedPlayer) == 0x000000, "Member 'PigAnalytics_IncrementRBTTimerActived::attachedPlayer' has a wrong offset!");

// Function DBDAnalytics.PigAnalytics.OnRBTAttached_Analytics
// 0x0010 (0x0010 - 0x0000)
struct PigAnalytics_OnRBTAttached_Analytics final
{
public:
	class ASlasherPlayer*                         attacher;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          attachee;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PigAnalytics_OnRBTAttached_Analytics) == 0x000008, "Wrong alignment on PigAnalytics_OnRBTAttached_Analytics");
static_assert(sizeof(PigAnalytics_OnRBTAttached_Analytics) == 0x000010, "Wrong size on PigAnalytics_OnRBTAttached_Analytics");
static_assert(offsetof(PigAnalytics_OnRBTAttached_Analytics, attacher) == 0x000000, "Member 'PigAnalytics_OnRBTAttached_Analytics::attacher' has a wrong offset!");
static_assert(offsetof(PigAnalytics_OnRBTAttached_Analytics, attachee) == 0x000008, "Member 'PigAnalytics_OnRBTAttached_Analytics::attachee' has a wrong offset!");

// Function DBDAnalytics.PigAnalytics.RecordRBTSearch
// 0x0010 (0x0010 - 0x0000)
struct PigAnalytics_RecordRBTSearch final
{
public:
	class ACamperPlayer*                          searchingPlayer;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PigAnalytics_RecordRBTSearch) == 0x000008, "Wrong alignment on PigAnalytics_RecordRBTSearch");
static_assert(sizeof(PigAnalytics_RecordRBTSearch) == 0x000010, "Wrong size on PigAnalytics_RecordRBTSearch");
static_assert(offsetof(PigAnalytics_RecordRBTSearch, searchingPlayer) == 0x000000, "Member 'PigAnalytics_RecordRBTSearch::searchingPlayer' has a wrong offset!");
static_assert(offsetof(PigAnalytics_RecordRBTSearch, success) == 0x000008, "Member 'PigAnalytics_RecordRBTSearch::success' has a wrong offset!");

// Function DBDAnalytics.PulldownAnalytics.IncrementPalletDestroy
// 0x0008 (0x0008 - 0x0000)
struct PulldownAnalytics_IncrementPalletDestroy final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PulldownAnalytics_IncrementPalletDestroy) == 0x000008, "Wrong alignment on PulldownAnalytics_IncrementPalletDestroy");
static_assert(sizeof(PulldownAnalytics_IncrementPalletDestroy) == 0x000008, "Wrong size on PulldownAnalytics_IncrementPalletDestroy");
static_assert(offsetof(PulldownAnalytics_IncrementPalletDestroy, killer) == 0x000000, "Member 'PulldownAnalytics_IncrementPalletDestroy::killer' has a wrong offset!");

// Function DBDAnalytics.PulldownAnalytics.IncrementPalletDrop
// 0x0008 (0x0008 - 0x0000)
struct PulldownAnalytics_IncrementPalletDrop final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PulldownAnalytics_IncrementPalletDrop) == 0x000008, "Wrong alignment on PulldownAnalytics_IncrementPalletDrop");
static_assert(sizeof(PulldownAnalytics_IncrementPalletDrop) == 0x000008, "Wrong size on PulldownAnalytics_IncrementPalletDrop");
static_assert(offsetof(PulldownAnalytics_IncrementPalletDrop, survivor) == 0x000000, "Member 'PulldownAnalytics_IncrementPalletDrop::survivor' has a wrong offset!");

// Function DBDAnalytics.PulldownAnalytics.IncrementPalletSpawned
// 0x0008 (0x0008 - 0x0000)
struct PulldownAnalytics_IncrementPalletSpawned final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PulldownAnalytics_IncrementPalletSpawned) == 0x000008, "Wrong alignment on PulldownAnalytics_IncrementPalletSpawned");
static_assert(sizeof(PulldownAnalytics_IncrementPalletSpawned) == 0x000008, "Wrong size on PulldownAnalytics_IncrementPalletSpawned");
static_assert(offsetof(PulldownAnalytics_IncrementPalletSpawned, actor) == 0x000000, "Member 'PulldownAnalytics_IncrementPalletSpawned::actor' has a wrong offset!");

// Function DBDAnalytics.PulldownAnalytics.IncrementPalletStun
// 0x0008 (0x0008 - 0x0000)
struct PulldownAnalytics_IncrementPalletStun final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PulldownAnalytics_IncrementPalletStun) == 0x000008, "Wrong alignment on PulldownAnalytics_IncrementPalletStun");
static_assert(sizeof(PulldownAnalytics_IncrementPalletStun) == 0x000008, "Wrong size on PulldownAnalytics_IncrementPalletStun");
static_assert(offsetof(PulldownAnalytics_IncrementPalletStun, survivor) == 0x000000, "Member 'PulldownAnalytics_IncrementPalletStun::survivor' has a wrong offset!");

// Function DBDAnalytics.SurvivorInteractionAnalytics.IncrementHealCount
// 0x0008 (0x0008 - 0x0000)
struct SurvivorInteractionAnalytics_IncrementHealCount final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorInteractionAnalytics_IncrementHealCount) == 0x000008, "Wrong alignment on SurvivorInteractionAnalytics_IncrementHealCount");
static_assert(sizeof(SurvivorInteractionAnalytics_IncrementHealCount) == 0x000008, "Wrong size on SurvivorInteractionAnalytics_IncrementHealCount");
static_assert(offsetof(SurvivorInteractionAnalytics_IncrementHealCount, survivor) == 0x000000, "Member 'SurvivorInteractionAnalytics_IncrementHealCount::survivor' has a wrong offset!");

// Function DBDAnalytics.SurvivorInteractionAnalytics.RecordHatchEscape
// 0x0008 (0x0008 - 0x0000)
struct SurvivorInteractionAnalytics_RecordHatchEscape final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorInteractionAnalytics_RecordHatchEscape) == 0x000008, "Wrong alignment on SurvivorInteractionAnalytics_RecordHatchEscape");
static_assert(sizeof(SurvivorInteractionAnalytics_RecordHatchEscape) == 0x000008, "Wrong size on SurvivorInteractionAnalytics_RecordHatchEscape");
static_assert(offsetof(SurvivorInteractionAnalytics_RecordHatchEscape, survivor) == 0x000000, "Member 'SurvivorInteractionAnalytics_RecordHatchEscape::survivor' has a wrong offset!");

// Function DBDAnalytics.SurvivorInteractionAnalytics.RecordHealSuccess
// 0x0008 (0x0008 - 0x0000)
struct SurvivorInteractionAnalytics_RecordHealSuccess final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorInteractionAnalytics_RecordHealSuccess) == 0x000008, "Wrong alignment on SurvivorInteractionAnalytics_RecordHealSuccess");
static_assert(sizeof(SurvivorInteractionAnalytics_RecordHealSuccess) == 0x000008, "Wrong size on SurvivorInteractionAnalytics_RecordHealSuccess");
static_assert(offsetof(SurvivorInteractionAnalytics_RecordHealSuccess, survivor) == 0x000000, "Member 'SurvivorInteractionAnalytics_RecordHealSuccess::survivor' has a wrong offset!");

}

