#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIPresenters

#include "Basic.hpp"

#include "Halloween2022_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DeadByDaylight_structs.hpp"


namespace SDK::Params
{

// Function DBDUIPresenters.ArchiveCompendiumSubPresenter.OnTomeSelected
// 0x0010 (0x0010 - 0x0000)
struct ArchiveCompendiumSubPresenter_OnTomeSelected final
{
public:
	class FString                                 tomeId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveCompendiumSubPresenter_OnTomeSelected) == 0x000008, "Wrong alignment on ArchiveCompendiumSubPresenter_OnTomeSelected");
static_assert(sizeof(ArchiveCompendiumSubPresenter_OnTomeSelected) == 0x000010, "Wrong size on ArchiveCompendiumSubPresenter_OnTomeSelected");
static_assert(offsetof(ArchiveCompendiumSubPresenter_OnTomeSelected, tomeId) == 0x000000, "Member 'ArchiveCompendiumSubPresenter_OnTomeSelected::tomeId' has a wrong offset!");

// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.OnLevelSelected
// 0x0004 (0x0004 - 0x0000)
struct ArchiveQuestMapSubPresenter_OnLevelSelected final
{
public:
	int32                                         levelIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveQuestMapSubPresenter_OnLevelSelected) == 0x000004, "Wrong alignment on ArchiveQuestMapSubPresenter_OnLevelSelected");
static_assert(sizeof(ArchiveQuestMapSubPresenter_OnLevelSelected) == 0x000004, "Wrong size on ArchiveQuestMapSubPresenter_OnLevelSelected");
static_assert(offsetof(ArchiveQuestMapSubPresenter_OnLevelSelected, levelIndex) == 0x000000, "Member 'ArchiveQuestMapSubPresenter_OnLevelSelected::levelIndex' has a wrong offset!");

// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.OnNodeSelected
// 0x0018 (0x0018 - 0x0000)
struct ArchiveQuestMapSubPresenter_OnNodeSelected final
{
public:
	class FName                                   nodeId;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   role;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              position;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveQuestMapSubPresenter_OnNodeSelected) == 0x000004, "Wrong alignment on ArchiveQuestMapSubPresenter_OnNodeSelected");
static_assert(sizeof(ArchiveQuestMapSubPresenter_OnNodeSelected) == 0x000018, "Wrong size on ArchiveQuestMapSubPresenter_OnNodeSelected");
static_assert(offsetof(ArchiveQuestMapSubPresenter_OnNodeSelected, nodeId) == 0x000000, "Member 'ArchiveQuestMapSubPresenter_OnNodeSelected::nodeId' has a wrong offset!");
static_assert(offsetof(ArchiveQuestMapSubPresenter_OnNodeSelected, role) == 0x00000C, "Member 'ArchiveQuestMapSubPresenter_OnNodeSelected::role' has a wrong offset!");
static_assert(offsetof(ArchiveQuestMapSubPresenter_OnNodeSelected, position) == 0x000010, "Member 'ArchiveQuestMapSubPresenter_OnNodeSelected::position' has a wrong offset!");

// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.OnQuestNodeHovered
// 0x0001 (0x0001 - 0x0000)
struct ArchiveQuestMapSubPresenter_OnQuestNodeHovered final
{
public:
	EPlayerRole                                   role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveQuestMapSubPresenter_OnQuestNodeHovered) == 0x000001, "Wrong alignment on ArchiveQuestMapSubPresenter_OnQuestNodeHovered");
static_assert(sizeof(ArchiveQuestMapSubPresenter_OnQuestNodeHovered) == 0x000001, "Wrong size on ArchiveQuestMapSubPresenter_OnQuestNodeHovered");
static_assert(offsetof(ArchiveQuestMapSubPresenter_OnQuestNodeHovered, role) == 0x000000, "Member 'ArchiveQuestMapSubPresenter_OnQuestNodeHovered::role' has a wrong offset!");

// Function DBDUIPresenters.ArchiveQuestMapSubPresenter.OnQuestNodeUnhovered
// 0x0001 (0x0001 - 0x0000)
struct ArchiveQuestMapSubPresenter_OnQuestNodeUnhovered final
{
public:
	EPlayerRole                                   role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveQuestMapSubPresenter_OnQuestNodeUnhovered) == 0x000001, "Wrong alignment on ArchiveQuestMapSubPresenter_OnQuestNodeUnhovered");
static_assert(sizeof(ArchiveQuestMapSubPresenter_OnQuestNodeUnhovered) == 0x000001, "Wrong size on ArchiveQuestMapSubPresenter_OnQuestNodeUnhovered");
static_assert(offsetof(ArchiveQuestMapSubPresenter_OnQuestNodeUnhovered, role) == 0x000000, "Member 'ArchiveQuestMapSubPresenter_OnQuestNodeUnhovered::role' has a wrong offset!");

// Function DBDUIPresenters.ArchiveEditorSubPresenter.OnSaveTomeGraph
// 0x0010 (0x0010 - 0x0000)
struct ArchiveEditorSubPresenter_OnSaveTomeGraph final
{
public:
	TArray<struct FArchiveNodeGraphViewData>      nodeList;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveEditorSubPresenter_OnSaveTomeGraph) == 0x000008, "Wrong alignment on ArchiveEditorSubPresenter_OnSaveTomeGraph");
static_assert(sizeof(ArchiveEditorSubPresenter_OnSaveTomeGraph) == 0x000010, "Wrong size on ArchiveEditorSubPresenter_OnSaveTomeGraph");
static_assert(offsetof(ArchiveEditorSubPresenter_OnSaveTomeGraph, nodeList) == 0x000000, "Member 'ArchiveEditorSubPresenter_OnSaveTomeGraph::nodeList' has a wrong offset!");

// Function DBDUIPresenters.Presenter.OnContextSectionChanged
// 0x0001 (0x0001 - 0x0000)
struct Presenter_OnContextSectionChanged final
{
public:
	EContext                                      context;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Presenter_OnContextSectionChanged) == 0x000001, "Wrong alignment on Presenter_OnContextSectionChanged");
static_assert(sizeof(Presenter_OnContextSectionChanged) == 0x000001, "Wrong size on Presenter_OnContextSectionChanged");
static_assert(offsetof(Presenter_OnContextSectionChanged, context) == 0x000000, "Member 'Presenter_OnContextSectionChanged::context' has a wrong offset!");

// Function DBDUIPresenters.Presenter.IsContextReady
// 0x0001 (0x0001 - 0x0000)
struct Presenter_IsContextReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Presenter_IsContextReady) == 0x000001, "Wrong alignment on Presenter_IsContextReady");
static_assert(sizeof(Presenter_IsContextReady) == 0x000001, "Wrong size on Presenter_IsContextReady");
static_assert(offsetof(Presenter_IsContextReady, ReturnValue) == 0x000000, "Member 'Presenter_IsContextReady::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.Presenter.IsGameStateReady
// 0x0001 (0x0001 - 0x0000)
struct Presenter_IsGameStateReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Presenter_IsGameStateReady) == 0x000001, "Wrong alignment on Presenter_IsGameStateReady");
static_assert(sizeof(Presenter_IsGameStateReady) == 0x000001, "Wrong size on Presenter_IsGameStateReady");
static_assert(offsetof(Presenter_IsGameStateReady, ReturnValue) == 0x000000, "Member 'Presenter_IsGameStateReady::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.Presenter.IsPlayerStateReady
// 0x0001 (0x0001 - 0x0000)
struct Presenter_IsPlayerStateReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Presenter_IsPlayerStateReady) == 0x000001, "Wrong alignment on Presenter_IsPlayerStateReady");
static_assert(sizeof(Presenter_IsPlayerStateReady) == 0x000001, "Wrong size on Presenter_IsPlayerStateReady");
static_assert(offsetof(Presenter_IsPlayerStateReady, ReturnValue) == 0x000000, "Member 'Presenter_IsPlayerStateReady::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.Presenter.ShouldPresent
// 0x0001 (0x0001 - 0x0000)
struct Presenter_ShouldPresent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Presenter_ShouldPresent) == 0x000001, "Wrong alignment on Presenter_ShouldPresent");
static_assert(sizeof(Presenter_ShouldPresent) == 0x000001, "Wrong size on Presenter_ShouldPresent");
static_assert(offsetof(Presenter_ShouldPresent, ReturnValue) == 0x000000, "Member 'Presenter_ShouldPresent::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.ArchiveImageViewerPresenter.OnArchivesVoiceOverAutoplay
// 0x0001 (0x0001 - 0x0000)
struct ArchiveImageViewerPresenter_OnArchivesVoiceOverAutoplay final
{
public:
	bool                                          autoplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerPresenter_OnArchivesVoiceOverAutoplay) == 0x000001, "Wrong alignment on ArchiveImageViewerPresenter_OnArchivesVoiceOverAutoplay");
static_assert(sizeof(ArchiveImageViewerPresenter_OnArchivesVoiceOverAutoplay) == 0x000001, "Wrong size on ArchiveImageViewerPresenter_OnArchivesVoiceOverAutoplay");
static_assert(offsetof(ArchiveImageViewerPresenter_OnArchivesVoiceOverAutoplay, autoplay) == 0x000000, "Member 'ArchiveImageViewerPresenter_OnArchivesVoiceOverAutoplay::autoplay' has a wrong offset!");

// Function DBDUIPresenters.ArchiveImageViewerPresenter.OnArchivesVoiceOverPlayed
// 0x0001 (0x0001 - 0x0000)
struct ArchiveImageViewerPresenter_OnArchivesVoiceOverPlayed final
{
public:
	bool                                          playing;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerPresenter_OnArchivesVoiceOverPlayed) == 0x000001, "Wrong alignment on ArchiveImageViewerPresenter_OnArchivesVoiceOverPlayed");
static_assert(sizeof(ArchiveImageViewerPresenter_OnArchivesVoiceOverPlayed) == 0x000001, "Wrong size on ArchiveImageViewerPresenter_OnArchivesVoiceOverPlayed");
static_assert(offsetof(ArchiveImageViewerPresenter_OnArchivesVoiceOverPlayed, playing) == 0x000000, "Member 'ArchiveImageViewerPresenter_OnArchivesVoiceOverPlayed::playing' has a wrong offset!");

// Function DBDUIPresenters.ArchiveImageViewerPresenter.OnImageViewerVoiceOverAutoplay
// 0x0001 (0x0001 - 0x0000)
struct ArchiveImageViewerPresenter_OnImageViewerVoiceOverAutoplay final
{
public:
	bool                                          autoplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerPresenter_OnImageViewerVoiceOverAutoplay) == 0x000001, "Wrong alignment on ArchiveImageViewerPresenter_OnImageViewerVoiceOverAutoplay");
static_assert(sizeof(ArchiveImageViewerPresenter_OnImageViewerVoiceOverAutoplay) == 0x000001, "Wrong size on ArchiveImageViewerPresenter_OnImageViewerVoiceOverAutoplay");
static_assert(offsetof(ArchiveImageViewerPresenter_OnImageViewerVoiceOverAutoplay, autoplay) == 0x000000, "Member 'ArchiveImageViewerPresenter_OnImageViewerVoiceOverAutoplay::autoplay' has a wrong offset!");

// Function DBDUIPresenters.ArchiveImageViewerPresenter.CanShowFullScreenMode
// 0x0001 (0x0001 - 0x0000)
struct ArchiveImageViewerPresenter_CanShowFullScreenMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerPresenter_CanShowFullScreenMode) == 0x000001, "Wrong alignment on ArchiveImageViewerPresenter_CanShowFullScreenMode");
static_assert(sizeof(ArchiveImageViewerPresenter_CanShowFullScreenMode) == 0x000001, "Wrong size on ArchiveImageViewerPresenter_CanShowFullScreenMode");
static_assert(offsetof(ArchiveImageViewerPresenter_CanShowFullScreenMode, ReturnValue) == 0x000000, "Member 'ArchiveImageViewerPresenter_CanShowFullScreenMode::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnAutoplayChanged
// 0x0008 (0x0008 - 0x0000)
struct ArchiveJournalSubPresenter_OnAutoplayChanged final
{
public:
	bool                                          autoplayActive;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         entryIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalSubPresenter_OnAutoplayChanged) == 0x000004, "Wrong alignment on ArchiveJournalSubPresenter_OnAutoplayChanged");
static_assert(sizeof(ArchiveJournalSubPresenter_OnAutoplayChanged) == 0x000008, "Wrong size on ArchiveJournalSubPresenter_OnAutoplayChanged");
static_assert(offsetof(ArchiveJournalSubPresenter_OnAutoplayChanged, autoplayActive) == 0x000000, "Member 'ArchiveJournalSubPresenter_OnAutoplayChanged::autoplayActive' has a wrong offset!");
static_assert(offsetof(ArchiveJournalSubPresenter_OnAutoplayChanged, entryIndex) == 0x000004, "Member 'ArchiveJournalSubPresenter_OnAutoplayChanged::entryIndex' has a wrong offset!");

// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnClickPlayButton
// 0x0004 (0x0004 - 0x0000)
struct ArchiveJournalSubPresenter_OnClickPlayButton final
{
public:
	int32                                         entryIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalSubPresenter_OnClickPlayButton) == 0x000004, "Wrong alignment on ArchiveJournalSubPresenter_OnClickPlayButton");
static_assert(sizeof(ArchiveJournalSubPresenter_OnClickPlayButton) == 0x000004, "Wrong size on ArchiveJournalSubPresenter_OnClickPlayButton");
static_assert(offsetof(ArchiveJournalSubPresenter_OnClickPlayButton, entryIndex) == 0x000000, "Member 'ArchiveJournalSubPresenter_OnClickPlayButton::entryIndex' has a wrong offset!");

// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnEntrySelected
// 0x0004 (0x0004 - 0x0000)
struct ArchiveJournalSubPresenter_OnEntrySelected final
{
public:
	int32                                         entryIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalSubPresenter_OnEntrySelected) == 0x000004, "Wrong alignment on ArchiveJournalSubPresenter_OnEntrySelected");
static_assert(sizeof(ArchiveJournalSubPresenter_OnEntrySelected) == 0x000004, "Wrong size on ArchiveJournalSubPresenter_OnEntrySelected");
static_assert(offsetof(ArchiveJournalSubPresenter_OnEntrySelected, entryIndex) == 0x000000, "Member 'ArchiveJournalSubPresenter_OnEntrySelected::entryIndex' has a wrong offset!");

// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnImageViewerVoiceOverAutoplay
// 0x0001 (0x0001 - 0x0000)
struct ArchiveJournalSubPresenter_OnImageViewerVoiceOverAutoplay final
{
public:
	bool                                          autoplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalSubPresenter_OnImageViewerVoiceOverAutoplay) == 0x000001, "Wrong alignment on ArchiveJournalSubPresenter_OnImageViewerVoiceOverAutoplay");
static_assert(sizeof(ArchiveJournalSubPresenter_OnImageViewerVoiceOverAutoplay) == 0x000001, "Wrong size on ArchiveJournalSubPresenter_OnImageViewerVoiceOverAutoplay");
static_assert(offsetof(ArchiveJournalSubPresenter_OnImageViewerVoiceOverAutoplay, autoplay) == 0x000000, "Member 'ArchiveJournalSubPresenter_OnImageViewerVoiceOverAutoplay::autoplay' has a wrong offset!");

// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnPlayCinematic
// 0x0004 (0x0004 - 0x0000)
struct ArchiveJournalSubPresenter_OnPlayCinematic final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalSubPresenter_OnPlayCinematic) == 0x000004, "Wrong alignment on ArchiveJournalSubPresenter_OnPlayCinematic");
static_assert(sizeof(ArchiveJournalSubPresenter_OnPlayCinematic) == 0x000004, "Wrong size on ArchiveJournalSubPresenter_OnPlayCinematic");
static_assert(offsetof(ArchiveJournalSubPresenter_OnPlayCinematic, index) == 0x000000, "Member 'ArchiveJournalSubPresenter_OnPlayCinematic::index' has a wrong offset!");

// Function DBDUIPresenters.ArchiveJournalSubPresenter.OnVignetteSelected
// 0x0010 (0x0010 - 0x0000)
struct ArchiveJournalSubPresenter_OnVignetteSelected final
{
public:
	class FString                                 vignetteId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalSubPresenter_OnVignetteSelected) == 0x000008, "Wrong alignment on ArchiveJournalSubPresenter_OnVignetteSelected");
static_assert(sizeof(ArchiveJournalSubPresenter_OnVignetteSelected) == 0x000010, "Wrong size on ArchiveJournalSubPresenter_OnVignetteSelected");
static_assert(offsetof(ArchiveJournalSubPresenter_OnVignetteSelected, vignetteId) == 0x000000, "Member 'ArchiveJournalSubPresenter_OnVignetteSelected::vignetteId' has a wrong offset!");

// Function DBDUIPresenters.ArchiveMenuPresenter.OnChallengeReminderClicked
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuPresenter_OnChallengeReminderClicked final
{
public:
	EPlayerRole                                   role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuPresenter_OnChallengeReminderClicked) == 0x000001, "Wrong alignment on ArchiveMenuPresenter_OnChallengeReminderClicked");
static_assert(sizeof(ArchiveMenuPresenter_OnChallengeReminderClicked) == 0x000001, "Wrong size on ArchiveMenuPresenter_OnChallengeReminderClicked");
static_assert(offsetof(ArchiveMenuPresenter_OnChallengeReminderClicked, role) == 0x000000, "Member 'ArchiveMenuPresenter_OnChallengeReminderClicked::role' has a wrong offset!");

// Function DBDUIPresenters.ArchiveMenuPresenter.OnChallengeReminderSlotSelected
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuPresenter_OnChallengeReminderSlotSelected final
{
public:
	EPlayerRole                                   role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuPresenter_OnChallengeReminderSlotSelected) == 0x000001, "Wrong alignment on ArchiveMenuPresenter_OnChallengeReminderSlotSelected");
static_assert(sizeof(ArchiveMenuPresenter_OnChallengeReminderSlotSelected) == 0x000001, "Wrong size on ArchiveMenuPresenter_OnChallengeReminderSlotSelected");
static_assert(offsetof(ArchiveMenuPresenter_OnChallengeReminderSlotSelected, role) == 0x000000, "Member 'ArchiveMenuPresenter_OnChallengeReminderSlotSelected::role' has a wrong offset!");

// Function DBDUIPresenters.ArchiveMenuPresenter.OnMenuTabSelected
// 0x0002 (0x0002 - 0x0000)
struct ArchiveMenuPresenter_OnMenuTabSelected final
{
public:
	EArchiveMenuState                             menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          alreadySelected;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuPresenter_OnMenuTabSelected) == 0x000001, "Wrong alignment on ArchiveMenuPresenter_OnMenuTabSelected");
static_assert(sizeof(ArchiveMenuPresenter_OnMenuTabSelected) == 0x000002, "Wrong size on ArchiveMenuPresenter_OnMenuTabSelected");
static_assert(offsetof(ArchiveMenuPresenter_OnMenuTabSelected, menuState) == 0x000000, "Member 'ArchiveMenuPresenter_OnMenuTabSelected::menuState' has a wrong offset!");
static_assert(offsetof(ArchiveMenuPresenter_OnMenuTabSelected, alreadySelected) == 0x000001, "Member 'ArchiveMenuPresenter_OnMenuTabSelected::alreadySelected' has a wrong offset!");

// Function DBDUIPresenters.ArchiveMenuPresenter.OnShowImageViewer
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuPresenter_OnShowImageViewer final
{
public:
	bool                                          voiceOverIsPlaying;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuPresenter_OnShowImageViewer) == 0x000001, "Wrong alignment on ArchiveMenuPresenter_OnShowImageViewer");
static_assert(sizeof(ArchiveMenuPresenter_OnShowImageViewer) == 0x000001, "Wrong size on ArchiveMenuPresenter_OnShowImageViewer");
static_assert(offsetof(ArchiveMenuPresenter_OnShowImageViewer, voiceOverIsPlaying) == 0x000000, "Member 'ArchiveMenuPresenter_OnShowImageViewer::voiceOverIsPlaying' has a wrong offset!");

// Function DBDUIPresenters.BasePopupPresenter.OnContextEnter
// 0x0001 (0x0001 - 0x0000)
struct BasePopupPresenter_OnContextEnter final
{
public:
	EContext                                      context;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePopupPresenter_OnContextEnter) == 0x000001, "Wrong alignment on BasePopupPresenter_OnContextEnter");
static_assert(sizeof(BasePopupPresenter_OnContextEnter) == 0x000001, "Wrong size on BasePopupPresenter_OnContextEnter");
static_assert(offsetof(BasePopupPresenter_OnContextEnter, context) == 0x000000, "Member 'BasePopupPresenter_OnContextEnter::context' has a wrong offset!");

// Function DBDUIPresenters.BasePopupPresenter.OnContextLeave
// 0x0001 (0x0001 - 0x0000)
struct BasePopupPresenter_OnContextLeave final
{
public:
	EContext                                      context;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePopupPresenter_OnContextLeave) == 0x000001, "Wrong alignment on BasePopupPresenter_OnContextLeave");
static_assert(sizeof(BasePopupPresenter_OnContextLeave) == 0x000001, "Wrong size on BasePopupPresenter_OnContextLeave");
static_assert(offsetof(BasePopupPresenter_OnContextLeave, context) == 0x000000, "Member 'BasePopupPresenter_OnContextLeave::context' has a wrong offset!");

// Function DBDUIPresenters.BasePopupPresenter.IsContextEntered
// 0x0001 (0x0001 - 0x0000)
struct BasePopupPresenter_IsContextEntered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePopupPresenter_IsContextEntered) == 0x000001, "Wrong alignment on BasePopupPresenter_IsContextEntered");
static_assert(sizeof(BasePopupPresenter_IsContextEntered) == 0x000001, "Wrong size on BasePopupPresenter_IsContextEntered");
static_assert(offsetof(BasePopupPresenter_IsContextEntered, ReturnValue) == 0x000000, "Member 'BasePopupPresenter_IsContextEntered::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.GenericPopupPresenter.OnAction
// 0x0001 (0x0001 - 0x0000)
struct GenericPopupPresenter_OnAction final
{
public:
	EPopupButtonType                              popupAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericPopupPresenter_OnAction) == 0x000001, "Wrong alignment on GenericPopupPresenter_OnAction");
static_assert(sizeof(GenericPopupPresenter_OnAction) == 0x000001, "Wrong size on GenericPopupPresenter_OnAction");
static_assert(offsetof(GenericPopupPresenter_OnAction, popupAction) == 0x000000, "Member 'GenericPopupPresenter_OnAction::popupAction' has a wrong offset!");

// Function DBDUIPresenters.GenericPopupPresenter.OnAppResumed
// 0x0001 (0x0001 - 0x0000)
struct GenericPopupPresenter_OnAppResumed final
{
public:
	bool                                          isAppResumed;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericPopupPresenter_OnAppResumed) == 0x000001, "Wrong alignment on GenericPopupPresenter_OnAppResumed");
static_assert(sizeof(GenericPopupPresenter_OnAppResumed) == 0x000001, "Wrong size on GenericPopupPresenter_OnAppResumed");
static_assert(offsetof(GenericPopupPresenter_OnAppResumed, isAppResumed) == 0x000000, "Member 'GenericPopupPresenter_OnAppResumed::isAppResumed' has a wrong offset!");

// Function DBDUIPresenters.ArchiveRiftSubPresenter.OnRewardCurrencyClicked
// 0x0001 (0x0001 - 0x0000)
struct ArchiveRiftSubPresenter_OnRewardCurrencyClicked final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveRiftSubPresenter_OnRewardCurrencyClicked) == 0x000001, "Wrong alignment on ArchiveRiftSubPresenter_OnRewardCurrencyClicked");
static_assert(sizeof(ArchiveRiftSubPresenter_OnRewardCurrencyClicked) == 0x000001, "Wrong size on ArchiveRiftSubPresenter_OnRewardCurrencyClicked");
static_assert(offsetof(ArchiveRiftSubPresenter_OnRewardCurrencyClicked, currencyType) == 0x000000, "Member 'ArchiveRiftSubPresenter_OnRewardCurrencyClicked::currencyType' has a wrong offset!");

// Function DBDUIPresenters.ArchiveRiftSubPresenter.OnRewardItemClicked
// 0x000C (0x000C - 0x0000)
struct ArchiveRiftSubPresenter_OnRewardItemClicked final
{
public:
	class FName                                   itemId;                                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveRiftSubPresenter_OnRewardItemClicked) == 0x000004, "Wrong alignment on ArchiveRiftSubPresenter_OnRewardItemClicked");
static_assert(sizeof(ArchiveRiftSubPresenter_OnRewardItemClicked) == 0x00000C, "Wrong size on ArchiveRiftSubPresenter_OnRewardItemClicked");
static_assert(offsetof(ArchiveRiftSubPresenter_OnRewardItemClicked, itemId) == 0x000000, "Member 'ArchiveRiftSubPresenter_OnRewardItemClicked::itemId' has a wrong offset!");

// Function DBDUIPresenters.ArchiveTierPurchasePopupPresenter.OnConfirmPurchase
// 0x0004 (0x0004 - 0x0000)
struct ArchiveTierPurchasePopupPresenter_OnConfirmPurchase final
{
public:
	int32                                         tiersToPurchaseNumber;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTierPurchasePopupPresenter_OnConfirmPurchase) == 0x000004, "Wrong alignment on ArchiveTierPurchasePopupPresenter_OnConfirmPurchase");
static_assert(sizeof(ArchiveTierPurchasePopupPresenter_OnConfirmPurchase) == 0x000004, "Wrong size on ArchiveTierPurchasePopupPresenter_OnConfirmPurchase");
static_assert(offsetof(ArchiveTierPurchasePopupPresenter_OnConfirmPurchase, tiersToPurchaseNumber) == 0x000000, "Member 'ArchiveTierPurchasePopupPresenter_OnConfirmPurchase::tiersToPurchaseNumber' has a wrong offset!");

// Function DBDUIPresenters.ArchiveTomeSubPresenter.OnMenuTabSelected
// 0x0001 (0x0001 - 0x0000)
struct ArchiveTomeSubPresenter_OnMenuTabSelected final
{
public:
	EArchiveTomeMenuState                         menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeSubPresenter_OnMenuTabSelected) == 0x000001, "Wrong alignment on ArchiveTomeSubPresenter_OnMenuTabSelected");
static_assert(sizeof(ArchiveTomeSubPresenter_OnMenuTabSelected) == 0x000001, "Wrong size on ArchiveTomeSubPresenter_OnMenuTabSelected");
static_assert(offsetof(ArchiveTomeSubPresenter_OnMenuTabSelected, menuState) == 0x000000, "Member 'ArchiveTomeSubPresenter_OnMenuTabSelected::menuState' has a wrong offset!");

// Function DBDUIPresenters.HudPresenter.IsHudReady
// 0x0001 (0x0001 - 0x0000)
struct HudPresenter_IsHudReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudPresenter_IsHudReady) == 0x000001, "Wrong alignment on HudPresenter_IsHudReady");
static_assert(sizeof(HudPresenter_IsHudReady) == 0x000001, "Wrong size on HudPresenter_IsHudReady");
static_assert(offsetof(HudPresenter_IsHudReady, ReturnValue) == 0x000000, "Member 'HudPresenter_IsHudReady::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.HudPresenter.OnPawnPossessed
// 0x0008 (0x0008 - 0x0000)
struct HudPresenter_OnPawnPossessed final
{
public:
	class APawn*                                  pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudPresenter_OnPawnPossessed) == 0x000008, "Wrong alignment on HudPresenter_OnPawnPossessed");
static_assert(sizeof(HudPresenter_OnPawnPossessed) == 0x000008, "Wrong size on HudPresenter_OnPawnPossessed");
static_assert(offsetof(HudPresenter_OnPawnPossessed, pawn) == 0x000000, "Member 'HudPresenter_OnPawnPossessed::pawn' has a wrong offset!");

// Function DBDUIPresenters.HudPresenter.OnPawnUnpossessed
// 0x0008 (0x0008 - 0x0000)
struct HudPresenter_OnPawnUnpossessed final
{
public:
	class APawn*                                  pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudPresenter_OnPawnUnpossessed) == 0x000008, "Wrong alignment on HudPresenter_OnPawnUnpossessed");
static_assert(sizeof(HudPresenter_OnPawnUnpossessed) == 0x000008, "Wrong size on HudPresenter_OnPawnUnpossessed");
static_assert(offsetof(HudPresenter_OnPawnUnpossessed, pawn) == 0x000000, "Member 'HudPresenter_OnPawnUnpossessed::pawn' has a wrong offset!");

// Function DBDUIPresenters.HudPresenter.IsPendingPawnReady
// 0x0001 (0x0001 - 0x0000)
struct HudPresenter_IsPendingPawnReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudPresenter_IsPendingPawnReady) == 0x000001, "Wrong alignment on HudPresenter_IsPendingPawnReady");
static_assert(sizeof(HudPresenter_IsPendingPawnReady) == 0x000001, "Wrong size on HudPresenter_IsPendingPawnReady");
static_assert(offsetof(HudPresenter_IsPendingPawnReady, ReturnValue) == 0x000000, "Member 'HudPresenter_IsPendingPawnReady::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.ChallengeTrackerPresenter.OnQuestEventRepetitionValueChanged
// 0x0018 (0x0018 - 0x0000)
struct ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 questEventIdTracked;                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged) == 0x000008, "Wrong alignment on ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged");
static_assert(sizeof(ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged) == 0x000018, "Wrong size on ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged");
static_assert(offsetof(ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged, value) == 0x000000, "Member 'ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged::value' has a wrong offset!");
static_assert(offsetof(ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged, questEventIdTracked) == 0x000008, "Member 'ChallengeTrackerPresenter_OnQuestEventRepetitionValueChanged::questEventIdTracked' has a wrong offset!");

// Function DBDUIPresenters.CreditsPresenter.Credits_ScrollToName
// 0x0018 (0x0018 - 0x0000)
struct CreditsPresenter_Credits_ScrollToName final
{
public:
	class FString                                 name;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CreditsPresenter_Credits_ScrollToName) == 0x000008, "Wrong alignment on CreditsPresenter_Credits_ScrollToName");
static_assert(sizeof(CreditsPresenter_Credits_ScrollToName) == 0x000018, "Wrong size on CreditsPresenter_Credits_ScrollToName");
static_assert(offsetof(CreditsPresenter_Credits_ScrollToName, name) == 0x000000, "Member 'CreditsPresenter_Credits_ScrollToName::name' has a wrong offset!");
static_assert(offsetof(CreditsPresenter_Credits_ScrollToName, delay) == 0x000010, "Member 'CreditsPresenter_Credits_ScrollToName::delay' has a wrong offset!");

// Function DBDUIPresenters.DailyRitualsPopupPresenter.OnClaimRitual
// 0x0010 (0x0010 - 0x0000)
struct DailyRitualsPopupPresenter_OnClaimRitual final
{
public:
	class FString                                 id;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsPopupPresenter_OnClaimRitual) == 0x000008, "Wrong alignment on DailyRitualsPopupPresenter_OnClaimRitual");
static_assert(sizeof(DailyRitualsPopupPresenter_OnClaimRitual) == 0x000010, "Wrong size on DailyRitualsPopupPresenter_OnClaimRitual");
static_assert(offsetof(DailyRitualsPopupPresenter_OnClaimRitual, id) == 0x000000, "Member 'DailyRitualsPopupPresenter_OnClaimRitual::id' has a wrong offset!");

// Function DBDUIPresenters.DailyRitualsPopupPresenter.OnRemoveRitual
// 0x0010 (0x0010 - 0x0000)
struct DailyRitualsPopupPresenter_OnRemoveRitual final
{
public:
	class FString                                 id;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsPopupPresenter_OnRemoveRitual) == 0x000008, "Wrong alignment on DailyRitualsPopupPresenter_OnRemoveRitual");
static_assert(sizeof(DailyRitualsPopupPresenter_OnRemoveRitual) == 0x000010, "Wrong size on DailyRitualsPopupPresenter_OnRemoveRitual");
static_assert(offsetof(DailyRitualsPopupPresenter_OnRemoveRitual, id) == 0x000000, "Member 'DailyRitualsPopupPresenter_OnRemoveRitual::id' has a wrong offset!");

// Function DBDUIPresenters.DirectionalMinigamePresenter.OnMinigameEnd
// 0x0001 (0x0001 - 0x0000)
struct DirectionalMinigamePresenter_OnMinigameEnd final
{
public:
	EDirectionalMinigameResult                    result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionalMinigamePresenter_OnMinigameEnd) == 0x000001, "Wrong alignment on DirectionalMinigamePresenter_OnMinigameEnd");
static_assert(sizeof(DirectionalMinigamePresenter_OnMinigameEnd) == 0x000001, "Wrong size on DirectionalMinigamePresenter_OnMinigameEnd");
static_assert(offsetof(DirectionalMinigamePresenter_OnMinigameEnd, result) == 0x000000, "Member 'DirectionalMinigamePresenter_OnMinigameEnd::result' has a wrong offset!");

// Function DBDUIPresenters.DirectionalMinigamePresenter.OnMinigameEnterKey
// 0x0010 (0x0010 - 0x0000)
struct DirectionalMinigamePresenter_OnMinigameEnterKey final
{
public:
	EDirectionalInputKey                          enteredKey;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         enteredIndex;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isCorrect;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         currentIndex;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionalMinigamePresenter_OnMinigameEnterKey) == 0x000004, "Wrong alignment on DirectionalMinigamePresenter_OnMinigameEnterKey");
static_assert(sizeof(DirectionalMinigamePresenter_OnMinigameEnterKey) == 0x000010, "Wrong size on DirectionalMinigamePresenter_OnMinigameEnterKey");
static_assert(offsetof(DirectionalMinigamePresenter_OnMinigameEnterKey, enteredKey) == 0x000000, "Member 'DirectionalMinigamePresenter_OnMinigameEnterKey::enteredKey' has a wrong offset!");
static_assert(offsetof(DirectionalMinigamePresenter_OnMinigameEnterKey, enteredIndex) == 0x000004, "Member 'DirectionalMinigamePresenter_OnMinigameEnterKey::enteredIndex' has a wrong offset!");
static_assert(offsetof(DirectionalMinigamePresenter_OnMinigameEnterKey, isCorrect) == 0x000008, "Member 'DirectionalMinigamePresenter_OnMinigameEnterKey::isCorrect' has a wrong offset!");
static_assert(offsetof(DirectionalMinigamePresenter_OnMinigameEnterKey, currentIndex) == 0x00000C, "Member 'DirectionalMinigamePresenter_OnMinigameEnterKey::currentIndex' has a wrong offset!");

// Function DBDUIPresenters.DirectionalMinigamePresenter.OnMinigameStart
// 0x0018 (0x0018 - 0x0000)
struct DirectionalMinigamePresenter_OnMinigameStart final
{
public:
	TArray<EDirectionalInputKey>                  sequence;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         currentIndex;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DirectionalMinigamePresenter_OnMinigameStart) == 0x000008, "Wrong alignment on DirectionalMinigamePresenter_OnMinigameStart");
static_assert(sizeof(DirectionalMinigamePresenter_OnMinigameStart) == 0x000018, "Wrong size on DirectionalMinigamePresenter_OnMinigameStart");
static_assert(offsetof(DirectionalMinigamePresenter_OnMinigameStart, sequence) == 0x000000, "Member 'DirectionalMinigamePresenter_OnMinigameStart::sequence' has a wrong offset!");
static_assert(offsetof(DirectionalMinigamePresenter_OnMinigameStart, currentIndex) == 0x000010, "Member 'DirectionalMinigamePresenter_OnMinigameStart::currentIndex' has a wrong offset!");

// Function DBDUIPresenters.DisplayStandPresenter.OnDisplayStandRotation
// 0x0004 (0x0004 - 0x0000)
struct DisplayStandPresenter_OnDisplayStandRotation final
{
public:
	float                                         distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisplayStandPresenter_OnDisplayStandRotation) == 0x000004, "Wrong alignment on DisplayStandPresenter_OnDisplayStandRotation");
static_assert(sizeof(DisplayStandPresenter_OnDisplayStandRotation) == 0x000004, "Wrong size on DisplayStandPresenter_OnDisplayStandRotation");
static_assert(offsetof(DisplayStandPresenter_OnDisplayStandRotation, distance) == 0x000000, "Member 'DisplayStandPresenter_OnDisplayStandRotation::distance' has a wrong offset!");

// Function DBDUIPresenters.DisplayStandPresenter.IsContextEntered
// 0x0001 (0x0001 - 0x0000)
struct DisplayStandPresenter_IsContextEntered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisplayStandPresenter_IsContextEntered) == 0x000001, "Wrong alignment on DisplayStandPresenter_IsContextEntered");
static_assert(sizeof(DisplayStandPresenter_IsContextEntered) == 0x000001, "Wrong size on DisplayStandPresenter_IsContextEntered");
static_assert(offsetof(DisplayStandPresenter_IsContextEntered, ReturnValue) == 0x000000, "Member 'DisplayStandPresenter_IsContextEntered::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.ExternalEffectsPresenter.OnHideExternalEffect
// 0x0010 (0x0010 - 0x0000)
struct ExternalEffectsPresenter_OnHideExternalEffect final
{
public:
	class FName                                   itemId;                                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExternalEffectSource                         externalEffectSource;                              // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExternalEffectsPresenter_OnHideExternalEffect) == 0x000004, "Wrong alignment on ExternalEffectsPresenter_OnHideExternalEffect");
static_assert(sizeof(ExternalEffectsPresenter_OnHideExternalEffect) == 0x000010, "Wrong size on ExternalEffectsPresenter_OnHideExternalEffect");
static_assert(offsetof(ExternalEffectsPresenter_OnHideExternalEffect, itemId) == 0x000000, "Member 'ExternalEffectsPresenter_OnHideExternalEffect::itemId' has a wrong offset!");
static_assert(offsetof(ExternalEffectsPresenter_OnHideExternalEffect, externalEffectSource) == 0x00000C, "Member 'ExternalEffectsPresenter_OnHideExternalEffect::externalEffectSource' has a wrong offset!");

// Function DBDUIPresenters.ExternalEffectsPresenter.OnShowExternalEffect
// 0x0038 (0x0038 - 0x0000)
struct ExternalEffectsPresenter_OnShowExternalEffect final
{
public:
	struct FExternalEffectData                    data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExternalEffectsPresenter_OnShowExternalEffect) == 0x000008, "Wrong alignment on ExternalEffectsPresenter_OnShowExternalEffect");
static_assert(sizeof(ExternalEffectsPresenter_OnShowExternalEffect) == 0x000038, "Wrong size on ExternalEffectsPresenter_OnShowExternalEffect");
static_assert(offsetof(ExternalEffectsPresenter_OnShowExternalEffect, data) == 0x000000, "Member 'ExternalEffectsPresenter_OnShowExternalEffect::data' has a wrong offset!");

// Function DBDUIPresenters.GameManualSubPresenter.OnCategoryCategoryEntered
// 0x0001 (0x0001 - 0x0000)
struct GameManualSubPresenter_OnCategoryCategoryEntered final
{
public:
	EHelpType                                     categoryType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameManualSubPresenter_OnCategoryCategoryEntered) == 0x000001, "Wrong alignment on GameManualSubPresenter_OnCategoryCategoryEntered");
static_assert(sizeof(GameManualSubPresenter_OnCategoryCategoryEntered) == 0x000001, "Wrong size on GameManualSubPresenter_OnCategoryCategoryEntered");
static_assert(offsetof(GameManualSubPresenter_OnCategoryCategoryEntered, categoryType) == 0x000000, "Member 'GameManualSubPresenter_OnCategoryCategoryEntered::categoryType' has a wrong offset!");

// Function DBDUIPresenters.HudObjectivesPresenter.OnEventProgressBankedChanged
// 0x0004 (0x0004 - 0x0000)
struct HudObjectivesPresenter_OnEventProgressBankedChanged final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudObjectivesPresenter_OnEventProgressBankedChanged) == 0x000004, "Wrong alignment on HudObjectivesPresenter_OnEventProgressBankedChanged");
static_assert(sizeof(HudObjectivesPresenter_OnEventProgressBankedChanged) == 0x000004, "Wrong size on HudObjectivesPresenter_OnEventProgressBankedChanged");
static_assert(offsetof(HudObjectivesPresenter_OnEventProgressBankedChanged, value) == 0x000000, "Member 'HudObjectivesPresenter_OnEventProgressBankedChanged::value' has a wrong offset!");

// Function DBDUIPresenters.HudObjectivesPresenter.OnEventProgressionDataInitialized
// 0x0014 (0x0014 - 0x0000)
struct HudObjectivesPresenter_OnEventProgressionDataInitialized final
{
public:
	struct FEventProgressionData                  hudEventProgressionViewData;                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudObjectivesPresenter_OnEventProgressionDataInitialized) == 0x000004, "Wrong alignment on HudObjectivesPresenter_OnEventProgressionDataInitialized");
static_assert(sizeof(HudObjectivesPresenter_OnEventProgressionDataInitialized) == 0x000014, "Wrong size on HudObjectivesPresenter_OnEventProgressionDataInitialized");
static_assert(offsetof(HudObjectivesPresenter_OnEventProgressionDataInitialized, hudEventProgressionViewData) == 0x000000, "Member 'HudObjectivesPresenter_OnEventProgressionDataInitialized::hudEventProgressionViewData' has a wrong offset!");

// Function DBDUIPresenters.HudObjectivesPresenter.OnEventProgressPendingChanged
// 0x0008 (0x0008 - 0x0000)
struct HudObjectivesPresenter_OnEventProgressPendingChanged final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoidEnergyChangeReason                       reasonEnergyChanged;                               // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HudObjectivesPresenter_OnEventProgressPendingChanged) == 0x000004, "Wrong alignment on HudObjectivesPresenter_OnEventProgressPendingChanged");
static_assert(sizeof(HudObjectivesPresenter_OnEventProgressPendingChanged) == 0x000008, "Wrong size on HudObjectivesPresenter_OnEventProgressPendingChanged");
static_assert(offsetof(HudObjectivesPresenter_OnEventProgressPendingChanged, value) == 0x000000, "Member 'HudObjectivesPresenter_OnEventProgressPendingChanged::value' has a wrong offset!");
static_assert(offsetof(HudObjectivesPresenter_OnEventProgressPendingChanged, reasonEnergyChanged) == 0x000004, "Member 'HudObjectivesPresenter_OnEventProgressPendingChanged::reasonEnergyChanged' has a wrong offset!");

// Function DBDUIPresenters.HudPeekingPromptsPresenter.UpdatePeekingState
// 0x0001 (0x0001 - 0x0000)
struct HudPeekingPromptsPresenter_UpdatePeekingState final
{
public:
	ELeanState                                    potentialLeanState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudPeekingPromptsPresenter_UpdatePeekingState) == 0x000001, "Wrong alignment on HudPeekingPromptsPresenter_UpdatePeekingState");
static_assert(sizeof(HudPeekingPromptsPresenter_UpdatePeekingState) == 0x000001, "Wrong size on HudPeekingPromptsPresenter_UpdatePeekingState");
static_assert(offsetof(HudPeekingPromptsPresenter_UpdatePeekingState, potentialLeanState) == 0x000000, "Member 'HudPeekingPromptsPresenter_UpdatePeekingState::potentialLeanState' has a wrong offset!");

// Function DBDUIPresenters.HudPeekingPromptsPresenter.CanPlayerLean
// 0x0001 (0x0001 - 0x0000)
struct HudPeekingPromptsPresenter_CanPlayerLean final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudPeekingPromptsPresenter_CanPlayerLean) == 0x000001, "Wrong alignment on HudPeekingPromptsPresenter_CanPlayerLean");
static_assert(sizeof(HudPeekingPromptsPresenter_CanPlayerLean) == 0x000001, "Wrong size on HudPeekingPromptsPresenter_CanPlayerLean");
static_assert(offsetof(HudPeekingPromptsPresenter_CanPlayerLean, ReturnValue) == 0x000000, "Member 'HudPeekingPromptsPresenter_CanPlayerLean::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.HudSpectatePresenter.OnPlayerGameStateChanged
// 0x0010 (0x0010 - 0x0000)
struct HudSpectatePresenter_OnPlayerGameStateChanged final
{
public:
	class ADBDPlayerState*                        dbdPlayerState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameState                                    newGameState;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HudSpectatePresenter_OnPlayerGameStateChanged) == 0x000008, "Wrong alignment on HudSpectatePresenter_OnPlayerGameStateChanged");
static_assert(sizeof(HudSpectatePresenter_OnPlayerGameStateChanged) == 0x000010, "Wrong size on HudSpectatePresenter_OnPlayerGameStateChanged");
static_assert(offsetof(HudSpectatePresenter_OnPlayerGameStateChanged, dbdPlayerState) == 0x000000, "Member 'HudSpectatePresenter_OnPlayerGameStateChanged::dbdPlayerState' has a wrong offset!");
static_assert(offsetof(HudSpectatePresenter_OnPlayerGameStateChanged, newGameState) == 0x000008, "Member 'HudSpectatePresenter_OnPlayerGameStateChanged::newGameState' has a wrong offset!");

// Function DBDUIPresenters.HudTutorialObjectivesPresenter.IsInTutorial
// 0x0001 (0x0001 - 0x0000)
struct HudTutorialObjectivesPresenter_IsInTutorial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudTutorialObjectivesPresenter_IsInTutorial) == 0x000001, "Wrong alignment on HudTutorialObjectivesPresenter_IsInTutorial");
static_assert(sizeof(HudTutorialObjectivesPresenter_IsInTutorial) == 0x000001, "Wrong size on HudTutorialObjectivesPresenter_IsInTutorial");
static_assert(offsetof(HudTutorialObjectivesPresenter_IsInTutorial, ReturnValue) == 0x000000, "Member 'HudTutorialObjectivesPresenter_IsInTutorial::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.LoadoutMenuPopupPresenter.OnLoadoutMenuInventorySlotClick
// 0x0010 (0x0010 - 0x0000)
struct LoadoutMenuPopupPresenter_OnLoadoutMenuInventorySlotClick final
{
public:
	ELoadoutSlot                                  itemIndex;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   itemId;                                            // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupPresenter_OnLoadoutMenuInventorySlotClick) == 0x000004, "Wrong alignment on LoadoutMenuPopupPresenter_OnLoadoutMenuInventorySlotClick");
static_assert(sizeof(LoadoutMenuPopupPresenter_OnLoadoutMenuInventorySlotClick) == 0x000010, "Wrong size on LoadoutMenuPopupPresenter_OnLoadoutMenuInventorySlotClick");
static_assert(offsetof(LoadoutMenuPopupPresenter_OnLoadoutMenuInventorySlotClick, itemIndex) == 0x000000, "Member 'LoadoutMenuPopupPresenter_OnLoadoutMenuInventorySlotClick::itemIndex' has a wrong offset!");
static_assert(offsetof(LoadoutMenuPopupPresenter_OnLoadoutMenuInventorySlotClick, itemId) == 0x000004, "Member 'LoadoutMenuPopupPresenter_OnLoadoutMenuInventorySlotClick::itemId' has a wrong offset!");

// Function DBDUIPresenters.LoadoutMenuPopupPresenter.OnLoadoutMenuPresetClicked
// 0x0008 (0x0008 - 0x0000)
struct LoadoutMenuPopupPresenter_OnLoadoutMenuPresetClicked final
{
public:
	int32                                         presetId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoadoutSlot                                  slotSelected;                                      // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoadoutMenuPopupPresenter_OnLoadoutMenuPresetClicked) == 0x000004, "Wrong alignment on LoadoutMenuPopupPresenter_OnLoadoutMenuPresetClicked");
static_assert(sizeof(LoadoutMenuPopupPresenter_OnLoadoutMenuPresetClicked) == 0x000008, "Wrong size on LoadoutMenuPopupPresenter_OnLoadoutMenuPresetClicked");
static_assert(offsetof(LoadoutMenuPopupPresenter_OnLoadoutMenuPresetClicked, presetId) == 0x000000, "Member 'LoadoutMenuPopupPresenter_OnLoadoutMenuPresetClicked::presetId' has a wrong offset!");
static_assert(offsetof(LoadoutMenuPopupPresenter_OnLoadoutMenuPresetClicked, slotSelected) == 0x000004, "Member 'LoadoutMenuPopupPresenter_OnLoadoutMenuPresetClicked::slotSelected' has a wrong offset!");

// Function DBDUIPresenters.LoadoutMenuPopupPresenter.OnLoadoutMenuPresetSelected
// 0x0008 (0x0008 - 0x0000)
struct LoadoutMenuPopupPresenter_OnLoadoutMenuPresetSelected final
{
public:
	int32                                         presetId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoadoutSlot                                  slotSelected;                                      // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoadoutMenuPopupPresenter_OnLoadoutMenuPresetSelected) == 0x000004, "Wrong alignment on LoadoutMenuPopupPresenter_OnLoadoutMenuPresetSelected");
static_assert(sizeof(LoadoutMenuPopupPresenter_OnLoadoutMenuPresetSelected) == 0x000008, "Wrong size on LoadoutMenuPopupPresenter_OnLoadoutMenuPresetSelected");
static_assert(offsetof(LoadoutMenuPopupPresenter_OnLoadoutMenuPresetSelected, presetId) == 0x000000, "Member 'LoadoutMenuPopupPresenter_OnLoadoutMenuPresetSelected::presetId' has a wrong offset!");
static_assert(offsetof(LoadoutMenuPopupPresenter_OnLoadoutMenuPresetSelected, slotSelected) == 0x000004, "Member 'LoadoutMenuPopupPresenter_OnLoadoutMenuPresetSelected::slotSelected' has a wrong offset!");

// Function DBDUIPresenters.LoadoutMenuPopupPresenter.OnLoadoutMenuSlotIsSelected
// 0x0001 (0x0001 - 0x0000)
struct LoadoutMenuPopupPresenter_OnLoadoutMenuSlotIsSelected final
{
public:
	ELoadoutSlot                                  slotSelected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupPresenter_OnLoadoutMenuSlotIsSelected) == 0x000001, "Wrong alignment on LoadoutMenuPopupPresenter_OnLoadoutMenuSlotIsSelected");
static_assert(sizeof(LoadoutMenuPopupPresenter_OnLoadoutMenuSlotIsSelected) == 0x000001, "Wrong size on LoadoutMenuPopupPresenter_OnLoadoutMenuSlotIsSelected");
static_assert(offsetof(LoadoutMenuPopupPresenter_OnLoadoutMenuSlotIsSelected, slotSelected) == 0x000000, "Member 'LoadoutMenuPopupPresenter_OnLoadoutMenuSlotIsSelected::slotSelected' has a wrong offset!");

// Function DBDUIPresenters.LoadoutMenuPopupPresenter.OnSelectedCharacterChanged
// 0x0004 (0x0004 - 0x0000)
struct LoadoutMenuPopupPresenter_OnSelectedCharacterChanged final
{
public:
	int32                                         selectedCharacterIndex;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupPresenter_OnSelectedCharacterChanged) == 0x000004, "Wrong alignment on LoadoutMenuPopupPresenter_OnSelectedCharacterChanged");
static_assert(sizeof(LoadoutMenuPopupPresenter_OnSelectedCharacterChanged) == 0x000004, "Wrong size on LoadoutMenuPopupPresenter_OnSelectedCharacterChanged");
static_assert(offsetof(LoadoutMenuPopupPresenter_OnSelectedCharacterChanged, selectedCharacterIndex) == 0x000000, "Member 'LoadoutMenuPopupPresenter_OnSelectedCharacterChanged::selectedCharacterIndex' has a wrong offset!");

// Function DBDUIPresenters.LoadoutMenuPopupPresenter.SetLoadoutPopupViewData
// 0x0138 (0x0138 - 0x0000)
struct LoadoutMenuPopupPresenter_SetLoadoutPopupViewData final
{
public:
	struct FInventorySlotData                     slotData;                                          // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EPlayerRole                                   playerRole;                                        // 0x0128(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULoadoutMenuPopupViewData*              ReturnValue;                                       // 0x0130(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuPopupPresenter_SetLoadoutPopupViewData) == 0x000008, "Wrong alignment on LoadoutMenuPopupPresenter_SetLoadoutPopupViewData");
static_assert(sizeof(LoadoutMenuPopupPresenter_SetLoadoutPopupViewData) == 0x000138, "Wrong size on LoadoutMenuPopupPresenter_SetLoadoutPopupViewData");
static_assert(offsetof(LoadoutMenuPopupPresenter_SetLoadoutPopupViewData, slotData) == 0x000000, "Member 'LoadoutMenuPopupPresenter_SetLoadoutPopupViewData::slotData' has a wrong offset!");
static_assert(offsetof(LoadoutMenuPopupPresenter_SetLoadoutPopupViewData, playerRole) == 0x000128, "Member 'LoadoutMenuPopupPresenter_SetLoadoutPopupViewData::playerRole' has a wrong offset!");
static_assert(offsetof(LoadoutMenuPopupPresenter_SetLoadoutPopupViewData, ReturnValue) == 0x000130, "Member 'LoadoutMenuPopupPresenter_SetLoadoutPopupViewData::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.OnboardingMenuPresenter.OnFirstOnboardingStepsDone
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuPresenter_OnFirstOnboardingStepsDone final
{
public:
	bool                                          isFirstStepsDone;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuPresenter_OnFirstOnboardingStepsDone) == 0x000001, "Wrong alignment on OnboardingMenuPresenter_OnFirstOnboardingStepsDone");
static_assert(sizeof(OnboardingMenuPresenter_OnFirstOnboardingStepsDone) == 0x000001, "Wrong size on OnboardingMenuPresenter_OnFirstOnboardingStepsDone");
static_assert(offsetof(OnboardingMenuPresenter_OnFirstOnboardingStepsDone, isFirstStepsDone) == 0x000000, "Member 'OnboardingMenuPresenter_OnFirstOnboardingStepsDone::isFirstStepsDone' has a wrong offset!");

// Function DBDUIPresenters.OnboardingMenuPresenter.OnMenuTabSelected
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuPresenter_OnMenuTabSelected final
{
public:
	EOnboardingMenuState                          menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuPresenter_OnMenuTabSelected) == 0x000001, "Wrong alignment on OnboardingMenuPresenter_OnMenuTabSelected");
static_assert(sizeof(OnboardingMenuPresenter_OnMenuTabSelected) == 0x000001, "Wrong size on OnboardingMenuPresenter_OnMenuTabSelected");
static_assert(offsetof(OnboardingMenuPresenter_OnMenuTabSelected, menuState) == 0x000000, "Member 'OnboardingMenuPresenter_OnMenuTabSelected::menuState' has a wrong offset!");

// Function DBDUIPresenters.OnboardingMenuPresenter.OnMenuTabSelectedAgain
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuPresenter_OnMenuTabSelectedAgain final
{
public:
	EOnboardingMenuState                          menuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuPresenter_OnMenuTabSelectedAgain) == 0x000001, "Wrong alignment on OnboardingMenuPresenter_OnMenuTabSelectedAgain");
static_assert(sizeof(OnboardingMenuPresenter_OnMenuTabSelectedAgain) == 0x000001, "Wrong size on OnboardingMenuPresenter_OnMenuTabSelectedAgain");
static_assert(offsetof(OnboardingMenuPresenter_OnMenuTabSelectedAgain, menuState) == 0x000000, "Member 'OnboardingMenuPresenter_OnMenuTabSelectedAgain::menuState' has a wrong offset!");

// Function DBDUIPresenters.OnboardingMenuPresenter.OnSetUIEnabled
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuPresenter_OnSetUIEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuPresenter_OnSetUIEnabled) == 0x000001, "Wrong alignment on OnboardingMenuPresenter_OnSetUIEnabled");
static_assert(sizeof(OnboardingMenuPresenter_OnSetUIEnabled) == 0x000001, "Wrong size on OnboardingMenuPresenter_OnSetUIEnabled");
static_assert(offsetof(OnboardingMenuPresenter_OnSetUIEnabled, enabled) == 0x000000, "Member 'OnboardingMenuPresenter_OnSetUIEnabled::enabled' has a wrong offset!");

// Function DBDUIPresenters.OnboardingTutorialSubPresenter.OnSelectTutorial
// 0x0020 (0x0020 - 0x0000)
struct OnboardingTutorialSubPresenter_OnSelectTutorial final
{
public:
	class FString                                 stepId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 tutorialId;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingTutorialSubPresenter_OnSelectTutorial) == 0x000008, "Wrong alignment on OnboardingTutorialSubPresenter_OnSelectTutorial");
static_assert(sizeof(OnboardingTutorialSubPresenter_OnSelectTutorial) == 0x000020, "Wrong size on OnboardingTutorialSubPresenter_OnSelectTutorial");
static_assert(offsetof(OnboardingTutorialSubPresenter_OnSelectTutorial, stepId) == 0x000000, "Member 'OnboardingTutorialSubPresenter_OnSelectTutorial::stepId' has a wrong offset!");
static_assert(offsetof(OnboardingTutorialSubPresenter_OnSelectTutorial, tutorialId) == 0x000010, "Member 'OnboardingTutorialSubPresenter_OnSelectTutorial::tutorialId' has a wrong offset!");

// Function DBDUIPresenters.PawnObserver.OnPawnControllerSet
// 0x0018 (0x0018 - 0x0000)
struct PawnObserver_OnPawnControllerSet final
{
public:
	class APawn*                                  pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            oldController;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            newController;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnObserver_OnPawnControllerSet) == 0x000008, "Wrong alignment on PawnObserver_OnPawnControllerSet");
static_assert(sizeof(PawnObserver_OnPawnControllerSet) == 0x000018, "Wrong size on PawnObserver_OnPawnControllerSet");
static_assert(offsetof(PawnObserver_OnPawnControllerSet, pawn) == 0x000000, "Member 'PawnObserver_OnPawnControllerSet::pawn' has a wrong offset!");
static_assert(offsetof(PawnObserver_OnPawnControllerSet, oldController) == 0x000008, "Member 'PawnObserver_OnPawnControllerSet::oldController' has a wrong offset!");
static_assert(offsetof(PawnObserver_OnPawnControllerSet, newController) == 0x000010, "Member 'PawnObserver_OnPawnControllerSet::newController' has a wrong offset!");

// Function DBDUIPresenters.PlayerProfilePresenter.GetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct PlayerProfilePresenter_GetPlayerName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfilePresenter_GetPlayerName) == 0x000008, "Wrong alignment on PlayerProfilePresenter_GetPlayerName");
static_assert(sizeof(PlayerProfilePresenter_GetPlayerName) == 0x000018, "Wrong size on PlayerProfilePresenter_GetPlayerName");
static_assert(offsetof(PlayerProfilePresenter_GetPlayerName, ReturnValue) == 0x000000, "Member 'PlayerProfilePresenter_GetPlayerName::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.PlayerProfilePresenter.OnCurrentSpecialEventChanged
// 0x05F0 (0x05F0 - 0x0000)
struct PlayerProfilePresenter_OnCurrentSpecialEventChanged final
{
public:
	struct FCombinedSpecialEventData              previousSpecialEvent;                              // 0x0000(0x02F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ESpecialEventStatus                           previousSpecialEventStatus;                        // 0x02F0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCombinedSpecialEventData              currentSpecialEvent;                               // 0x02F8(0x02F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ESpecialEventStatus                           currentSpecialEventStatus;                         // 0x05E8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerProfilePresenter_OnCurrentSpecialEventChanged) == 0x000008, "Wrong alignment on PlayerProfilePresenter_OnCurrentSpecialEventChanged");
static_assert(sizeof(PlayerProfilePresenter_OnCurrentSpecialEventChanged) == 0x0005F0, "Wrong size on PlayerProfilePresenter_OnCurrentSpecialEventChanged");
static_assert(offsetof(PlayerProfilePresenter_OnCurrentSpecialEventChanged, previousSpecialEvent) == 0x000000, "Member 'PlayerProfilePresenter_OnCurrentSpecialEventChanged::previousSpecialEvent' has a wrong offset!");
static_assert(offsetof(PlayerProfilePresenter_OnCurrentSpecialEventChanged, previousSpecialEventStatus) == 0x0002F0, "Member 'PlayerProfilePresenter_OnCurrentSpecialEventChanged::previousSpecialEventStatus' has a wrong offset!");
static_assert(offsetof(PlayerProfilePresenter_OnCurrentSpecialEventChanged, currentSpecialEvent) == 0x0002F8, "Member 'PlayerProfilePresenter_OnCurrentSpecialEventChanged::currentSpecialEvent' has a wrong offset!");
static_assert(offsetof(PlayerProfilePresenter_OnCurrentSpecialEventChanged, currentSpecialEventStatus) == 0x0005E8, "Member 'PlayerProfilePresenter_OnCurrentSpecialEventChanged::currentSpecialEventStatus' has a wrong offset!");

// Function DBDUIPresenters.PlayerProfilePresenter.OnShowImageViewer
// 0x0001 (0x0001 - 0x0000)
struct PlayerProfilePresenter_OnShowImageViewer final
{
public:
	bool                                          voiceOverIsPlaying;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfilePresenter_OnShowImageViewer) == 0x000001, "Wrong alignment on PlayerProfilePresenter_OnShowImageViewer");
static_assert(sizeof(PlayerProfilePresenter_OnShowImageViewer) == 0x000001, "Wrong size on PlayerProfilePresenter_OnShowImageViewer");
static_assert(offsetof(PlayerProfilePresenter_OnShowImageViewer, voiceOverIsPlaying) == 0x000000, "Member 'PlayerProfilePresenter_OnShowImageViewer::voiceOverIsPlaying' has a wrong offset!");

// Function DBDUIPresenters.PlayerProfilePresenter.OnWalletUpdated
// 0x0010 (0x0010 - 0x0000)
struct PlayerProfilePresenter_OnWalletUpdated final
{
public:
	TArray<struct FShopWalletUpdate>              walletUpdates;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfilePresenter_OnWalletUpdated) == 0x000008, "Wrong alignment on PlayerProfilePresenter_OnWalletUpdated");
static_assert(sizeof(PlayerProfilePresenter_OnWalletUpdated) == 0x000010, "Wrong size on PlayerProfilePresenter_OnWalletUpdated");
static_assert(offsetof(PlayerProfilePresenter_OnWalletUpdated, walletUpdates) == 0x000000, "Member 'PlayerProfilePresenter_OnWalletUpdated::walletUpdates' has a wrong offset!");

// Function DBDUIPresenters.PresenterManager.OnLoadingTransition
// 0x0001 (0x0001 - 0x0000)
struct PresenterManager_OnLoadingTransition final
{
public:
	ELoadingTransitionType                        transitionType;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PresenterManager_OnLoadingTransition) == 0x000001, "Wrong alignment on PresenterManager_OnLoadingTransition");
static_assert(sizeof(PresenterManager_OnLoadingTransition) == 0x000001, "Wrong size on PresenterManager_OnLoadingTransition");
static_assert(offsetof(PresenterManager_OnLoadingTransition, transitionType) == 0x000000, "Member 'PresenterManager_OnLoadingTransition::transitionType' has a wrong offset!");

// Function DBDUIPresenters.SubtitlesPresenter.IsSubtitlesEnabled
// 0x0001 (0x0001 - 0x0000)
struct SubtitlesPresenter_IsSubtitlesEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesPresenter_IsSubtitlesEnabled) == 0x000001, "Wrong alignment on SubtitlesPresenter_IsSubtitlesEnabled");
static_assert(sizeof(SubtitlesPresenter_IsSubtitlesEnabled) == 0x000001, "Wrong size on SubtitlesPresenter_IsSubtitlesEnabled");
static_assert(offsetof(SubtitlesPresenter_IsSubtitlesEnabled, ReturnValue) == 0x000000, "Member 'SubtitlesPresenter_IsSubtitlesEnabled::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.UIConsoleCommands.DBD_SetAllHUDWidgetsVisible
// 0x0001 (0x0001 - 0x0000)
struct UIConsoleCommands_DBD_SetAllHUDWidgetsVisible final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConsoleCommands_DBD_SetAllHUDWidgetsVisible) == 0x000001, "Wrong alignment on UIConsoleCommands_DBD_SetAllHUDWidgetsVisible");
static_assert(sizeof(UIConsoleCommands_DBD_SetAllHUDWidgetsVisible) == 0x000001, "Wrong size on UIConsoleCommands_DBD_SetAllHUDWidgetsVisible");
static_assert(offsetof(UIConsoleCommands_DBD_SetAllHUDWidgetsVisible, isVisible) == 0x000000, "Member 'UIConsoleCommands_DBD_SetAllHUDWidgetsVisible::isVisible' has a wrong offset!");

// Function DBDUIPresenters.UIConsoleCommands.DBD_SetApplicationScale
// 0x0004 (0x0004 - 0x0000)
struct UIConsoleCommands_DBD_SetApplicationScale final
{
public:
	float                                         applicationScale;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConsoleCommands_DBD_SetApplicationScale) == 0x000004, "Wrong alignment on UIConsoleCommands_DBD_SetApplicationScale");
static_assert(sizeof(UIConsoleCommands_DBD_SetApplicationScale) == 0x000004, "Wrong size on UIConsoleCommands_DBD_SetApplicationScale");
static_assert(offsetof(UIConsoleCommands_DBD_SetApplicationScale, applicationScale) == 0x000000, "Member 'UIConsoleCommands_DBD_SetApplicationScale::applicationScale' has a wrong offset!");

// Function DBDUIPresenters.UIConsoleCommands.DBD_SetHudScaleFactor
// 0x0004 (0x0004 - 0x0000)
struct UIConsoleCommands_DBD_SetHudScaleFactor final
{
public:
	float                                         scaleFactor;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConsoleCommands_DBD_SetHudScaleFactor) == 0x000004, "Wrong alignment on UIConsoleCommands_DBD_SetHudScaleFactor");
static_assert(sizeof(UIConsoleCommands_DBD_SetHudScaleFactor) == 0x000004, "Wrong size on UIConsoleCommands_DBD_SetHudScaleFactor");
static_assert(offsetof(UIConsoleCommands_DBD_SetHudScaleFactor, scaleFactor) == 0x000000, "Member 'UIConsoleCommands_DBD_SetHudScaleFactor::scaleFactor' has a wrong offset!");

// Function DBDUIPresenters.UIConsoleCommands.DBD_SetHudVisible
// 0x0001 (0x0001 - 0x0000)
struct UIConsoleCommands_DBD_SetHudVisible final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConsoleCommands_DBD_SetHudVisible) == 0x000001, "Wrong alignment on UIConsoleCommands_DBD_SetHudVisible");
static_assert(sizeof(UIConsoleCommands_DBD_SetHudVisible) == 0x000001, "Wrong size on UIConsoleCommands_DBD_SetHudVisible");
static_assert(offsetof(UIConsoleCommands_DBD_SetHudVisible, isVisible) == 0x000000, "Member 'UIConsoleCommands_DBD_SetHudVisible::isVisible' has a wrong offset!");

// Function DBDUIPresenters.UIConsoleCommands.DBD_SetHUDWidgetVisible
// 0x0008 (0x0008 - 0x0000)
struct UIConsoleCommands_DBD_SetHUDWidgetVisible final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isVisible;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConsoleCommands_DBD_SetHUDWidgetVisible) == 0x000004, "Wrong alignment on UIConsoleCommands_DBD_SetHUDWidgetVisible");
static_assert(sizeof(UIConsoleCommands_DBD_SetHUDWidgetVisible) == 0x000008, "Wrong size on UIConsoleCommands_DBD_SetHUDWidgetVisible");
static_assert(offsetof(UIConsoleCommands_DBD_SetHUDWidgetVisible, index) == 0x000000, "Member 'UIConsoleCommands_DBD_SetHUDWidgetVisible::index' has a wrong offset!");
static_assert(offsetof(UIConsoleCommands_DBD_SetHUDWidgetVisible, isVisible) == 0x000004, "Member 'UIConsoleCommands_DBD_SetHUDWidgetVisible::isVisible' has a wrong offset!");

// Function DBDUIPresenters.UIConsoleCommands.DBD_SetMenuScaleFactor
// 0x0004 (0x0004 - 0x0000)
struct UIConsoleCommands_DBD_SetMenuScaleFactor final
{
public:
	float                                         scaleFactor;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConsoleCommands_DBD_SetMenuScaleFactor) == 0x000004, "Wrong alignment on UIConsoleCommands_DBD_SetMenuScaleFactor");
static_assert(sizeof(UIConsoleCommands_DBD_SetMenuScaleFactor) == 0x000004, "Wrong size on UIConsoleCommands_DBD_SetMenuScaleFactor");
static_assert(offsetof(UIConsoleCommands_DBD_SetMenuScaleFactor, scaleFactor) == 0x000000, "Member 'UIConsoleCommands_DBD_SetMenuScaleFactor::scaleFactor' has a wrong offset!");

// Function DBDUIPresenters.UIConsoleCommands.DBD_SetUMGVisible
// 0x0001 (0x0001 - 0x0000)
struct UIConsoleCommands_DBD_SetUMGVisible final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConsoleCommands_DBD_SetUMGVisible) == 0x000001, "Wrong alignment on UIConsoleCommands_DBD_SetUMGVisible");
static_assert(sizeof(UIConsoleCommands_DBD_SetUMGVisible) == 0x000001, "Wrong size on UIConsoleCommands_DBD_SetUMGVisible");
static_assert(offsetof(UIConsoleCommands_DBD_SetUMGVisible, isVisible) == 0x000000, "Member 'UIConsoleCommands_DBD_SetUMGVisible::isVisible' has a wrong offset!");

// Function DBDUIPresenters.UIConsoleCommands.DBD_ShowHUDWidgetsInfo
// 0x0001 (0x0001 - 0x0000)
struct UIConsoleCommands_DBD_ShowHUDWidgetsInfo final
{
public:
	bool                                          show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConsoleCommands_DBD_ShowHUDWidgetsInfo) == 0x000001, "Wrong alignment on UIConsoleCommands_DBD_ShowHUDWidgetsInfo");
static_assert(sizeof(UIConsoleCommands_DBD_ShowHUDWidgetsInfo) == 0x000001, "Wrong size on UIConsoleCommands_DBD_ShowHUDWidgetsInfo");
static_assert(offsetof(UIConsoleCommands_DBD_ShowHUDWidgetsInfo, show) == 0x000000, "Member 'UIConsoleCommands_DBD_ShowHUDWidgetsInfo::show' has a wrong offset!");

// Function DBDUIPresenters.UIConsoleCommands.DBD_ShowPresenterDebugInfo
// 0x0004 (0x0004 - 0x0000)
struct UIConsoleCommands_DBD_ShowPresenterDebugInfo final
{
public:
	int32                                         presenterDebugMode;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConsoleCommands_DBD_ShowPresenterDebugInfo) == 0x000004, "Wrong alignment on UIConsoleCommands_DBD_ShowPresenterDebugInfo");
static_assert(sizeof(UIConsoleCommands_DBD_ShowPresenterDebugInfo) == 0x000004, "Wrong size on UIConsoleCommands_DBD_ShowPresenterDebugInfo");
static_assert(offsetof(UIConsoleCommands_DBD_ShowPresenterDebugInfo, presenterDebugMode) == 0x000000, "Member 'UIConsoleCommands_DBD_ShowPresenterDebugInfo::presenterDebugMode' has a wrong offset!");

// Function DBDUIPresenters.WatermarkPresenter.IsNonShippingBuild
// 0x0001 (0x0001 - 0x0000)
struct WatermarkPresenter_IsNonShippingBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WatermarkPresenter_IsNonShippingBuild) == 0x000001, "Wrong alignment on WatermarkPresenter_IsNonShippingBuild");
static_assert(sizeof(WatermarkPresenter_IsNonShippingBuild) == 0x000001, "Wrong size on WatermarkPresenter_IsNonShippingBuild");
static_assert(offsetof(WatermarkPresenter_IsNonShippingBuild, ReturnValue) == 0x000000, "Member 'WatermarkPresenter_IsNonShippingBuild::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.WatermarkPresenter.IsSteamBuild
// 0x0001 (0x0001 - 0x0000)
struct WatermarkPresenter_IsSteamBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WatermarkPresenter_IsSteamBuild) == 0x000001, "Wrong alignment on WatermarkPresenter_IsSteamBuild");
static_assert(sizeof(WatermarkPresenter_IsSteamBuild) == 0x000001, "Wrong size on WatermarkPresenter_IsSteamBuild");
static_assert(offsetof(WatermarkPresenter_IsSteamBuild, ReturnValue) == 0x000000, "Member 'WatermarkPresenter_IsSteamBuild::ReturnValue' has a wrong offset!");

// Function DBDUIPresenters.WatermarkPresenter.IsUsingCommandLineArgument
// 0x0001 (0x0001 - 0x0000)
struct WatermarkPresenter_IsUsingCommandLineArgument final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WatermarkPresenter_IsUsingCommandLineArgument) == 0x000001, "Wrong alignment on WatermarkPresenter_IsUsingCommandLineArgument");
static_assert(sizeof(WatermarkPresenter_IsUsingCommandLineArgument) == 0x000001, "Wrong size on WatermarkPresenter_IsUsingCommandLineArgument");
static_assert(offsetof(WatermarkPresenter_IsUsingCommandLineArgument, ReturnValue) == 0x000000, "Member 'WatermarkPresenter_IsUsingCommandLineArgument::ReturnValue' has a wrong offset!");

}

