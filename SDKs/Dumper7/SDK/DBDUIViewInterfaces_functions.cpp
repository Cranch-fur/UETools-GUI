#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIViewInterfaces

#include "Basic.hpp"

#include "DBDUIViewInterfaces_classes.hpp"
#include "DBDUIViewInterfaces_parameters.hpp"


namespace SDK
{

// Function DBDUIViewInterfaces.AddonViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IAddonViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("AddonViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.AddonViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FAddonViewData&            baseLoadoutPartViewData                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IAddonViewInterface::SetData(const struct FAddonViewData& baseLoadoutPartViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("AddonViewInterface", "SetData");

	Params::AddonViewInterface_SetData Parms{};

	Parms.baseLoadoutPartViewData = std::move(baseLoadoutPartViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveCompendiumViewInterface.SetPastTomesViewData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FCompendiumButtonData>&pastStoryButtonData                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveCompendiumViewInterface::SetPastTomesViewData(const TArray<struct FCompendiumButtonData>& pastStoryButtonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveCompendiumViewInterface", "SetPastTomesViewData");

	Params::ArchiveCompendiumViewInterface_SetPastTomesViewData Parms{};

	Parms.pastStoryButtonData = std::move(pastStoryButtonData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveEditorViewInterface.DisplayEditorSaving
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveEditorViewInterface::DisplayEditorSaving(const class FString& path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveEditorViewInterface", "DisplayEditorSaving");

	Params::ArchiveEditorViewInterface_DisplayEditorSaving Parms{};

	Parms.path = std::move(path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveEditorViewInterface.InitEditor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveEditorViewInterface::InitEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveEditorViewInterface", "InitEditor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.SetTextVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveImageViewerViewInterface::SetTextVisibility(bool visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveImageViewerViewInterface", "SetTextVisibility");

	Params::ArchiveImageViewerViewInterface_SetTextVisibility Parms{};

	Parms.visible = visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.SetVoiceOverAutoplay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    voiceOverAutoplay                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveImageViewerViewInterface::SetVoiceOverAutoplay(bool voiceOverAutoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveImageViewerViewInterface", "SetVoiceOverAutoplay");

	Params::ArchiveImageViewerViewInterface_SetVoiceOverAutoplay Parms{};

	Parms.voiceOverAutoplay = voiceOverAutoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.SetVoiceOverPlaying
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    voiceOverPlaying                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveImageViewerViewInterface::SetVoiceOverPlaying(bool voiceOverPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveImageViewerViewInterface", "SetVoiceOverPlaying");

	Params::ArchiveImageViewerViewInterface_SetVoiceOverPlaying Parms{};

	Parms.voiceOverPlaying = voiceOverPlaying;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.UpdateContent
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FArchivesVignetteEntryViewData&data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveImageViewerViewInterface::UpdateContent(const struct FArchivesVignetteEntryViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveImageViewerViewInterface", "UpdateContent");

	Params::ArchiveImageViewerViewInterface_UpdateContent Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.OnImageViewerVoiceOverAutoplay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    autoplay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::OnImageViewerVoiceOverAutoplay(bool autoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveJournalViewInterface", "OnImageViewerVoiceOverAutoplay");

	Params::ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay Parms{};

	Parms.autoplay = autoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.OnImageViewerVoiceOverPlayed
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveJournalViewInterface::OnImageViewerVoiceOverPlayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveJournalViewInterface", "OnImageViewerVoiceOverPlayed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetCinematicButtonsEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::SetCinematicButtonsEnabled(bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveJournalViewInterface", "SetCinematicButtonsEnabled");

	Params::ArchiveJournalViewInterface_SetCinematicButtonsEnabled Parms{};

	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetEntryData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FArchivesVignetteEntryViewData&entryViewData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::SetEntryData(const struct FArchivesVignetteEntryViewData& entryViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveJournalViewInterface", "SetEntryData");

	Params::ArchiveJournalViewInterface_SetEntryData Parms{};

	Parms.entryViewData = std::move(entryViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVignetteData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FArchivesVignetteViewData& vignetteViewData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::SetVignetteData(const struct FArchivesVignetteViewData& vignetteViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveJournalViewInterface", "SetVignetteData");

	Params::ArchiveJournalViewInterface_SetVignetteData Parms{};

	Parms.vignetteViewData = std::move(vignetteViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVignetteInputsEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::SetVignetteInputsEnabled(bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveJournalViewInterface", "SetVignetteInputsEnabled");

	Params::ArchiveJournalViewInterface_SetVignetteInputsEnabled Parms{};

	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVignetteList
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FArchivesVignetteViewData>&vignetteDataList                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::SetVignetteList(const TArray<struct FArchivesVignetteViewData>& vignetteDataList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveJournalViewInterface", "SetVignetteList");

	Params::ArchiveJournalViewInterface_SetVignetteList Parms{};

	Parms.vignetteDataList = std::move(vignetteDataList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVoiceOverAutoplay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    voiceOverAutoplay                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::SetVoiceOverAutoplay(bool voiceOverAutoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveJournalViewInterface", "SetVoiceOverAutoplay");

	Params::ArchiveJournalViewInterface_SetVoiceOverAutoplay Parms{};

	Parms.voiceOverAutoplay = voiceOverAutoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVoiceOverPlaying
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    voiceOverPlaying                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::SetVoiceOverPlaying(bool voiceOverPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveJournalViewInterface", "SetVoiceOverPlaying");

	Params::ArchiveJournalViewInterface_SetVoiceOverPlaying Parms{};

	Parms.voiceOverPlaying = voiceOverPlaying;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.GoToNextLevel
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   levelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::GoToNextLevel(int32 levelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveLevelProgressionViewInterface", "GoToNextLevel");

	Params::ArchiveLevelProgressionViewInterface_GoToNextLevel Parms{};

	Parms.levelIndex = levelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.PlayRewardsAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveLevelProgressionViewInterface::PlayRewardsAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveLevelProgressionViewInterface", "PlayRewardsAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetActiveLevel
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   levelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    performAction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::SetActiveLevel(int32 levelIndex, bool performAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveLevelProgressionViewInterface", "SetActiveLevel");

	Params::ArchiveLevelProgressionViewInterface_SetActiveLevel Parms{};

	Parms.levelIndex = levelIndex;
	Parms.performAction = performAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetLevelSelectorEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              enabled                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::SetLevelSelectorEnabled(const bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveLevelProgressionViewInterface", "SetLevelSelectorEnabled");

	Params::ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled Parms{};

	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetLevelSelectorVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::SetLevelSelectorVisibility(bool isVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveLevelProgressionViewInterface", "SetLevelSelectorVisibility");

	Params::ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility Parms{};

	Parms.isVisible = isVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetRewardsContainerVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::SetRewardsContainerVisibility(bool isVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveLevelProgressionViewInterface", "SetRewardsContainerVisibility");

	Params::ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility Parms{};

	Parms.isVisible = isVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetTomeLevelsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<class UArchiveStoryLevelViewData*>&levelsData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   selectedLevel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::SetTomeLevelsData(const TArray<class UArchiveStoryLevelViewData*>& levelsData, int32 selectedLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveLevelProgressionViewInterface", "SetTomeLevelsData");

	Params::ArchiveLevelProgressionViewInterface_SetTomeLevelsData Parms{};

	Parms.levelsData = std::move(levelsData);
	Parms.selectedLevel = selectedLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetTomeRewardsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FRewardWrapperViewData>&rewardsData                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    areLocked                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::SetTomeRewardsData(const TArray<struct FRewardWrapperViewData>& rewardsData, bool areLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveLevelProgressionViewInterface", "SetTomeRewardsData");

	Params::ArchiveLevelProgressionViewInterface_SetTomeRewardsData Parms{};

	Parms.rewardsData = std::move(rewardsData);
	Parms.areLocked = areLocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.UpdateLevelStatus
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EArchivesStoryLevelStatus               status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::UpdateLevelStatus(int32 level, EArchivesStoryLevelStatus status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveLevelProgressionViewInterface", "UpdateLevelStatus");

	Params::ArchiveLevelProgressionViewInterface_UpdateLevelStatus Parms{};

	Parms.level = level;
	Parms.status = status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.ClearChallengeReminderData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerRole                             role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::ClearChallengeReminderData(EPlayerRole role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "ClearChallengeReminderData");

	Params::ArchiveMenuViewInterface_ClearChallengeReminderData Parms{};

	Parms.role = role;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.CloseSlotSelector
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveMenuViewInterface::CloseSlotSelector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "CloseSlotSelector");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.HideUI
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveMenuViewInterface::HideUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "HideUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.Init
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveMenuViewInterface::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetChallengeReminderData
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FArchiveChallengeReminderViewData&data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EPlayerRole                             role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    needsAnimation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 animationOriginalPosition                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetChallengeReminderData(const struct FArchiveChallengeReminderViewData& data, EPlayerRole role, bool needsAnimation, const struct FVector2D& animationOriginalPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetChallengeReminderData");

	Params::ArchiveMenuViewInterface_SetChallengeReminderData Parms{};

	Parms.data = std::move(data);
	Parms.role = role;
	Parms.needsAnimation = needsAnimation;
	Parms.animationOriginalPosition = std::move(animationOriginalPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetChallengeReminderVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetChallengeReminderVisibility(bool isVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetChallengeReminderVisibility");

	Params::ArchiveMenuViewInterface_SetChallengeReminderVisibility Parms{};

	Parms.isVisible = isVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetControllerElementsEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetControllerElementsEnabled(bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetControllerElementsEnabled");

	Params::ArchiveMenuViewInterface_SetControllerElementsEnabled Parms{};

	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetEventLabel
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    eventLabel                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetEventLabel(const class FString& eventLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetEventLabel");

	Params::ArchiveMenuViewInterface_SetEventLabel Parms{};

	Parms.eventLabel = std::move(eventLabel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetInfoButtonEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetInfoButtonEnabled(bool isEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetInfoButtonEnabled");

	Params::ArchiveMenuViewInterface_SetInfoButtonEnabled Parms{};

	Parms.isEnabled = isEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetInfoButtonVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetInfoButtonVisible(bool isVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetInfoButtonVisible");

	Params::ArchiveMenuViewInterface_SetInfoButtonVisible Parms{};

	Parms.isVisible = isVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EArchiveMenuState                       menuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetMenuState(EArchiveMenuState menuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetMenuState");

	Params::ArchiveMenuViewInterface_SetMenuState Parms{};

	Parms.menuState = menuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetQuestNodeHoverEffect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerRole                             role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isHovered                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetQuestNodeHoverEffect(EPlayerRole role, bool isHovered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetQuestNodeHoverEffect");

	Params::ArchiveMenuViewInterface_SetQuestNodeHoverEffect Parms{};

	Parms.role = role;
	Parms.isHovered = isHovered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetRemainingTime
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    remainingTime                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isMoreThanWarningThreshold                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EArchiveMenuState                       menuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetRemainingTime(const class FString& remainingTime, bool isMoreThanWarningThreshold, EArchiveMenuState menuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetRemainingTime");

	Params::ArchiveMenuViewInterface_SetRemainingTime Parms{};

	Parms.remainingTime = std::move(remainingTime);
	Parms.isMoreThanWarningThreshold = isMoreThanWarningThreshold;
	Parms.menuState = menuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetRemainingTimeVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetRemainingTimeVisible(bool isVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetRemainingTimeVisible");

	Params::ArchiveMenuViewInterface_SetRemainingTimeVisible Parms{};

	Parms.isVisible = isVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetReminderSlotsEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetReminderSlotsEnabled(bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetReminderSlotsEnabled");

	Params::ArchiveMenuViewInterface_SetReminderSlotsEnabled Parms{};

	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetSubtitle
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      subtitle                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetSubtitle(const class FText& subtitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetSubtitle");

	Params::ArchiveMenuViewInterface_SetSubtitle Parms{};

	Parms.subtitle = std::move(subtitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetSubtitleVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetSubtitleVisible(bool isVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetSubtitleVisible");

	Params::ArchiveMenuViewInterface_SetSubtitleVisible Parms{};

	Parms.isVisible = isVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetTabEnabled(int32 key, bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetTabEnabled");

	Params::ArchiveMenuViewInterface_SetTabEnabled Parms{};

	Parms.key = key;
	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FTabWidgetData>&    tabsData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   selectedKey                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetTabsData(const TArray<struct FTabWidgetData>& tabsData, int32 selectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetTabsData");

	Params::ArchiveMenuViewInterface_SetTabsData Parms{};

	Parms.tabsData = std::move(tabsData);
	Parms.selectedKey = selectedKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabSelected
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetTabSelected(int32 key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetTabSelected");

	Params::ArchiveMenuViewInterface_SetTabSelected Parms{};

	Parms.key = key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabsInputsEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetTabsInputsEnabled(bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetTabsInputsEnabled");

	Params::ArchiveMenuViewInterface_SetTabsInputsEnabled Parms{};

	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTitle
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      title                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetTitle(const class FText& title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "SetTitle");

	Params::ArchiveMenuViewInterface_SetTitle Parms{};

	Parms.title = std::move(title);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.ShowSlotSelector
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FArchiveNodeViewData&      data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::ShowSlotSelector(const struct FArchiveNodeViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "ShowSlotSelector");

	Params::ArchiveMenuViewInterface_ShowSlotSelector Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.ShowUI
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveMenuViewInterface::ShowUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "ShowUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.UpdateBackgroundSkin
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FArchiveTomeSkinData&      data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::UpdateBackgroundSkin(const int32 key, const struct FArchiveTomeSkinData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "UpdateBackgroundSkin");

	Params::ArchiveMenuViewInterface_UpdateBackgroundSkin Parms{};

	Parms.key = key;
	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.GetArchiveCompendiumInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IArchiveCompendiumViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

TScriptInterface<class IArchiveCompendiumViewInterface> IArchiveMenuViewInterface::GetArchiveCompendiumInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "GetArchiveCompendiumInterface");

	Params::ArchiveMenuViewInterface_GetArchiveCompendiumInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.GetArchiveRiftInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IArchiveRiftViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

TScriptInterface<class IArchiveRiftViewInterface> IArchiveMenuViewInterface::GetArchiveRiftInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "GetArchiveRiftInterface");

	Params::ArchiveMenuViewInterface_GetArchiveRiftInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.GetArchiveTomeInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IArchiveTomeViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

TScriptInterface<class IArchiveTomeViewInterface> IArchiveMenuViewInterface::GetArchiveTomeInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveMenuViewInterface", "GetArchiveTomeInterface");

	Params::ArchiveMenuViewInterface_GetArchiveTomeInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ArchiveQuestMapViewInterface.Reset
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveQuestMapViewInterface::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveQuestMapViewInterface", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveQuestMapViewInterface.SetLoadingSpinner
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isLoading                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveQuestMapViewInterface::SetLoadingSpinner(bool isLoading)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveQuestMapViewInterface", "SetLoadingSpinner");

	Params::ArchiveQuestMapViewInterface_SetLoadingSpinner Parms{};

	Parms.isLoading = isLoading;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveQuestMapViewInterface.SetQuestMapData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FArchiveNodeGraphViewData>&nodeDataList                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FArchiveMapPathViewData>&pathDataList                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    needsCascadeAppear                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveQuestMapViewInterface::SetQuestMapData(const TArray<struct FArchiveNodeGraphViewData>& nodeDataList, const TArray<struct FArchiveMapPathViewData>& pathDataList, bool needsCascadeAppear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveQuestMapViewInterface", "SetQuestMapData");

	Params::ArchiveQuestMapViewInterface_SetQuestMapData Parms{};

	Parms.nodeDataList = std::move(nodeDataList);
	Parms.pathDataList = std::move(pathDataList);
	Parms.needsCascadeAppear = needsCascadeAppear;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveQuestMapViewInterface.UpdateQuestMapData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FArchiveNodeGraphViewData>&nodeDataList                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FArchiveMapPathViewData>&pathDataList                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveQuestMapViewInterface::UpdateQuestMapData(const TArray<struct FArchiveNodeGraphViewData>& nodeDataList, const TArray<struct FArchiveMapPathViewData>& pathDataList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveQuestMapViewInterface", "UpdateQuestMapData");

	Params::ArchiveQuestMapViewInterface_UpdateQuestMapData Parms{};

	Parms.nodeDataList = std::move(nodeDataList);
	Parms.pathDataList = std::move(pathDataList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.PlayUnlockingAnimation
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FArchivesRiftUnlockSequenceData&data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IArchiveRiftViewInterface::PlayUnlockingAnimation(const struct FArchivesRiftUnlockSequenceData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveRiftViewInterface", "PlayUnlockingAnimation");

	Params::ArchiveRiftViewInterface_PlayUnlockingAnimation Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FArchivesRiftGenericViewData&data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IArchiveRiftViewInterface::SetData(const struct FArchivesRiftGenericViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveRiftViewInterface", "SetData");

	Params::ArchiveRiftViewInterface_SetData Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetLoadingSpinner
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isLoading                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveRiftViewInterface::SetLoadingSpinner(bool isLoading)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveRiftViewInterface", "SetLoadingSpinner");

	Params::ArchiveRiftViewInterface_SetLoadingSpinner Parms{};

	Parms.isLoading = isLoading;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetMatchmakingSoftlockState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isInMatchmakingSoftlock                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveRiftViewInterface::SetMatchmakingSoftlockState(bool isInMatchmakingSoftlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveRiftViewInterface", "SetMatchmakingSoftlockState");

	Params::ArchiveRiftViewInterface_SetMatchmakingSoftlockState Parms{};

	Parms.isInMatchmakingSoftlock = isInMatchmakingSoftlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetRewardTiersData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FArchiveRiftTierRewardsViewData>&riftTiersData                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveRiftViewInterface::SetRewardTiersData(const TArray<struct FArchiveRiftTierRewardsViewData>& riftTiersData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveRiftViewInterface", "SetRewardTiersData");

	Params::ArchiveRiftViewInterface_SetRewardTiersData Parms{};

	Parms.riftTiersData = std::move(riftTiersData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetRiftFragmentTooltipViewData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FCurrencyProgressionTooltipViewData&RiftFragmentTooltipViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveRiftViewInterface::SetRiftFragmentTooltipViewData(const struct FCurrencyProgressionTooltipViewData& RiftFragmentTooltipViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveRiftViewInterface", "SetRiftFragmentTooltipViewData");

	Params::ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData Parms{};

	Parms.RiftFragmentTooltipViewData = std::move(RiftFragmentTooltipViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EArchiveTomeMenuState                   menuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveTomeViewInterface::SetMenuState(EArchiveTomeMenuState menuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveTomeViewInterface", "SetMenuState");

	Params::ArchiveTomeViewInterface_SetMenuState Parms{};

	Parms.menuState = menuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetNotificationVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    hasNotification                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveTomeViewInterface::SetNotificationVisibility(int32 key, bool hasNotification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveTomeViewInterface", "SetNotificationVisibility");

	Params::ArchiveTomeViewInterface_SetNotificationVisibility Parms{};

	Parms.key = key;
	Parms.hasNotification = hasNotification;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetSideNavTabsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FTabWidgetData>&    tabsData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   selectedKey                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveTomeViewInterface::SetSideNavTabsData(const TArray<struct FTabWidgetData>& tabsData, int32 selectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveTomeViewInterface", "SetSideNavTabsData");

	Params::ArchiveTomeViewInterface_SetSideNavTabsData Parms{};

	Parms.tabsData = std::move(tabsData);
	Parms.selectedKey = selectedKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetSideNavTabsEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveTomeViewInterface::SetSideNavTabsEnabled(int32 key, bool isEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveTomeViewInterface", "SetSideNavTabsEnabled");

	Params::ArchiveTomeViewInterface_SetSideNavTabsEnabled Parms{};

	Parms.key = key;
	Parms.isEnabled = isEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetSideNavTabsVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveTomeViewInterface::SetSideNavTabsVisibility(int32 key, bool isVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveTomeViewInterface", "SetSideNavTabsVisibility");

	Params::ArchiveTomeViewInterface_SetSideNavTabsVisibility Parms{};

	Parms.key = key;
	Parms.isVisible = isVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.ToggleEditor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveTomeViewInterface::ToggleEditor(bool isEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveTomeViewInterface", "ToggleEditor");

	Params::ArchiveTomeViewInterface_ToggleEditor Parms{};

	Parms.isEnabled = isEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.UpdateBackgroundSkin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               skinMaterail                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveTomeViewInterface::UpdateBackgroundSkin(int32 key, class UMaterialInterface* skinMaterail)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveTomeViewInterface", "UpdateBackgroundSkin");

	Params::ArchiveTomeViewInterface_UpdateBackgroundSkin Parms{};

	Parms.key = key;
	Parms.skinMaterail = skinMaterail;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveEditorInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FEditorInterfaces                ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FEditorInterfaces IArchiveTomeViewInterface::GetArchiveEditorInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveTomeViewInterface", "GetArchiveEditorInterface");

	Params::ArchiveTomeViewInterface_GetArchiveEditorInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveJournalInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IArchiveJournalViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

TScriptInterface<class IArchiveJournalViewInterface> IArchiveTomeViewInterface::GetArchiveJournalInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveTomeViewInterface", "GetArchiveJournalInterface");

	Params::ArchiveTomeViewInterface_GetArchiveJournalInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveLevelProgressionInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IArchiveLevelProgressionViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

TScriptInterface<class IArchiveLevelProgressionViewInterface> IArchiveTomeViewInterface::GetArchiveLevelProgressionInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveTomeViewInterface", "GetArchiveLevelProgressionInterface");

	Params::ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveQuestMapInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IArchiveQuestMapViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

TScriptInterface<class IArchiveQuestMapViewInterface> IArchiveTomeViewInterface::GetArchiveQuestMapInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveTomeViewInterface", "GetArchiveQuestMapInterface");

	Params::ArchiveTomeViewInterface_GetArchiveQuestMapInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const EArchiveTomeMenuState             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EArchiveTomeMenuState IArchiveTomeViewInterface::GetMenuState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ArchiveTomeViewInterface", "GetMenuState");

	Params::ArchiveTomeViewInterface_GetMenuState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.BasePopupViewInterface.Enter
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBasePopupViewData*               data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBasePopupViewInterface::Enter(class UBasePopupViewData* data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BasePopupViewInterface", "Enter");

	Params::BasePopupViewInterface_Enter Parms{};

	Parms.data = data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.BasePopupViewInterface.Leave
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IBasePopupViewInterface::Leave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BasePopupViewInterface", "Leave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.CloseWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IChallengeTrackerViewInterface::CloseWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ChallengeTrackerViewInterface", "CloseWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.InitWidgetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FChallengeTrackerViewData& viewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IChallengeTrackerViewInterface::InitWidgetData(const struct FChallengeTrackerViewData& viewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ChallengeTrackerViewInterface", "InitWidgetData");

	Params::ChallengeTrackerViewInterface_InitWidgetData Parms{};

	Parms.viewData = std::move(viewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.OpenWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IChallengeTrackerViewInterface::OpenWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ChallengeTrackerViewInterface", "OpenWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.UpdateWidgetProgression
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FArchiveNodeObjectiveViewData&progressionData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IChallengeTrackerViewInterface::UpdateWidgetProgression(const struct FArchiveNodeObjectiveViewData& progressionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ChallengeTrackerViewInterface", "UpdateWidgetProgression");

	Params::ChallengeTrackerViewInterface_UpdateWidgetProgression Parms{};

	Parms.progressionData = std::move(progressionData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.CreditsViewInterface.ScrollToEnd
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ICreditsViewInterface::ScrollToEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("CreditsViewInterface", "ScrollToEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.CreditsViewInterface.ScrollToName
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    name                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ICreditsViewInterface::ScrollToName(const class FString& name, float delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("CreditsViewInterface", "ScrollToName");

	Params::CreditsViewInterface_ScrollToName Parms{};

	Parms.name = std::move(name);
	Parms.delay = delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.CreditsViewInterface.SetText
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ICreditsViewInterface::SetText(const class FText& text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("CreditsViewInterface", "SetText");

	Params::CreditsViewInterface_SetText Parms{};

	Parms.text = std::move(text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.DailyRitualsPopupViewInterface.SetAllDailyRitualTilesVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IDailyRitualsPopupViewInterface::SetAllDailyRitualTilesVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DailyRitualsPopupViewInterface", "SetAllDailyRitualTilesVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.DailyRitualsPopupViewInterface.SetCanRemoveDailyRitual
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              canRemoveDailyRitual                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IDailyRitualsPopupViewInterface::SetCanRemoveDailyRitual(const bool canRemoveDailyRitual)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DailyRitualsPopupViewInterface", "SetCanRemoveDailyRitual");

	Params::DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual Parms{};

	Parms.canRemoveDailyRitual = canRemoveDailyRitual;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.DailyRitualsPopupViewInterface.SetDailyRitualsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FDailyRitualViewData>&dailyRitualsData                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    isAfterTrial                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IDailyRitualsPopupViewInterface::SetDailyRitualsData(const TArray<struct FDailyRitualViewData>& dailyRitualsData, bool isAfterTrial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DailyRitualsPopupViewInterface", "SetDailyRitualsData");

	Params::DailyRitualsPopupViewInterface_SetDailyRitualsData Parms{};

	Parms.dailyRitualsData = std::move(dailyRitualsData);
	Parms.isAfterTrial = isAfterTrial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.DailyRitualsPopupViewInterface.StartAnim
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IDailyRitualsPopupViewInterface::StartAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DailyRitualsPopupViewInterface", "StartAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.DisplayStandViewInterface.SetDragZone
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDisplayStandViewData&     layoutData                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IDisplayStandViewInterface::SetDragZone(const struct FDisplayStandViewData& layoutData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("DisplayStandViewInterface", "SetDragZone");

	Params::DisplayStandViewInterface_SetDragZone Parms{};

	Parms.layoutData = std::move(layoutData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EndGameCollapseBarViewInterface.InitEndGameScenario
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEndGameCollapseBarViewInterface::InitEndGameScenario()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("EndGameCollapseBarViewInterface", "InitEndGameScenario");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EndGameCollapseBarViewInterface.SetEndGameScenarioProgressionMode
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              isSlowMode                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEndGameCollapseBarViewInterface::SetEndGameScenarioProgressionMode(const bool isSlowMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("EndGameCollapseBarViewInterface", "SetEndGameScenarioProgressionMode");

	Params::EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode Parms{};

	Parms.isSlowMode = isSlowMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EndGameCollapseBarViewInterface.SetEndGameScenarioProgressionValue
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const float                             amount                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEndGameCollapseBarViewInterface::SetEndGameScenarioProgressionValue(const float amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("EndGameCollapseBarViewInterface", "SetEndGameScenarioProgressionValue");

	Params::EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue Parms{};

	Parms.amount = amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EndGameCollapseBarViewInterface.StartEndGameScenario
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEndGameCollapseBarViewInterface::StartEndGameScenario()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("EndGameCollapseBarViewInterface", "StartEndGameScenario");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedItemViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    fullClear                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEquippedItemViewInterface::ClearData(bool fullClear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("EquippedItemViewInterface", "ClearData");

	Params::EquippedItemViewInterface_ClearData Parms{};

	Parms.fullClear = fullClear;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedItemViewInterface.SetActiveState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEquippedItemViewInterface::SetActiveState(bool isActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("EquippedItemViewInterface", "SetActiveState");

	Params::EquippedItemViewInterface_SetActiveState Parms{};

	Parms.isActive = isActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedItemViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FItemBundleViewData&       itemBundleData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IEquippedItemViewInterface::SetData(const struct FItemBundleViewData& itemBundleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("EquippedItemViewInterface", "SetData");

	Params::EquippedItemViewInterface_SetData Parms{};

	Parms.itemBundleData = std::move(itemBundleData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedItemViewInterface.SetFakeItem
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isHoldingFakeItem                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSoftObjectPtr<class UTexture2D>& fakeItemIcon                                           (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEquippedItemViewInterface::SetFakeItem(bool isHoldingFakeItem, const TSoftObjectPtr<class UTexture2D>& fakeItemIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("EquippedItemViewInterface", "SetFakeItem");

	Params::EquippedItemViewInterface_SetFakeItem Parms{};

	Parms.isHoldingFakeItem = isHoldingFakeItem;
	Parms.fakeItemIcon = fakeItemIcon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedPowerViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEquippedPowerViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("EquippedPowerViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedPowerViewInterface.SetActiveState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEquippedPowerViewInterface::SetActiveState(bool isActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("EquippedPowerViewInterface", "SetActiveState");

	Params::EquippedPowerViewInterface_SetActiveState Parms{};

	Parms.isActive = isActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedPowerViewInterface.SetCarryingMode
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              isCarrying                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEquippedPowerViewInterface::SetCarryingMode(const bool isCarrying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("EquippedPowerViewInterface", "SetCarryingMode");

	Params::EquippedPowerViewInterface_SetCarryingMode Parms{};

	Parms.isCarrying = isCarrying;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedPowerViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPowerBundleViewData&      powerBundleData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IEquippedPowerViewInterface::SetData(const struct FPowerBundleViewData& powerBundleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("EquippedPowerViewInterface", "SetData");

	Params::EquippedPowerViewInterface_SetData Parms{};

	Parms.powerBundleData = std::move(powerBundleData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExampleViewInterface.SetExampleProgressRatio
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ratio                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IExampleViewInterface::SetExampleProgressRatio(float ratio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ExampleViewInterface", "SetExampleProgressRatio");

	Params::ExampleViewInterface_SetExampleProgressRatio Parms{};

	Parms.ratio = ratio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExampleViewInterface.SetExampleText
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IExampleViewInterface::SetExampleText(const class FString& text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ExampleViewInterface", "SetExampleText");

	Params::ExampleViewInterface_SetExampleText Parms{};

	Parms.text = std::move(text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.HideExternalAddon
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      itemId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IExternalEffectsViewInterface::HideExternalAddon(const class FName& itemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ExternalEffectsViewInterface", "HideExternalAddon");

	Params::ExternalEffectsViewInterface_HideExternalAddon Parms{};

	Parms.itemId = itemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.HideExternalPerk
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      itemId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IExternalEffectsViewInterface::HideExternalPerk(const class FName& itemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ExternalEffectsViewInterface", "HideExternalPerk");

	Params::ExternalEffectsViewInterface_HideExternalPerk Parms{};

	Parms.itemId = itemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.ShowExternalAddon
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FAddonViewData&            addonViewData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IExternalEffectsViewInterface::ShowExternalAddon(const struct FAddonViewData& addonViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ExternalEffectsViewInterface", "ShowExternalAddon");

	Params::ExternalEffectsViewInterface_ShowExternalAddon Parms{};

	Parms.addonViewData = std::move(addonViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.ShowExternalPerk
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPerkViewData&             perkViewData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IExternalEffectsViewInterface::ShowExternalPerk(const struct FPerkViewData& perkViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ExternalEffectsViewInterface", "ShowExternalPerk");

	Params::ExternalEffectsViewInterface_ShowExternalPerk Parms{};

	Parms.perkViewData = std::move(perkViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.GameManualViewInterface.SetCategoryData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHelpCategoryData&         categoryData                                           (ConstParm, Parm, NativeAccessSpecifierPublic)
// const TArray<struct FHelpTopicData>&    topicsData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IGameManualViewInterface::SetCategoryData(const struct FHelpCategoryData& categoryData, const TArray<struct FHelpTopicData>& topicsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GameManualViewInterface", "SetCategoryData");

	Params::GameManualViewInterface_SetCategoryData Parms{};

	Parms.categoryData = std::move(categoryData);
	Parms.topicsData = std::move(topicsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.GameManualViewInterface.SetCurrentManualMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const EGameManualMenuState              menuState                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGameManualViewInterface::SetCurrentManualMenuState(const EGameManualMenuState menuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GameManualViewInterface", "SetCurrentManualMenuState");

	Params::GameManualViewInterface_SetCurrentManualMenuState Parms{};

	Parms.menuState = menuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.GameManualViewInterface.GetCurrentManualMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const EGameManualMenuState              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EGameManualMenuState IGameManualViewInterface::GetCurrentManualMenuState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GameManualViewInterface", "GetCurrentManualMenuState");

	Params::GameManualViewInterface_GetCurrentManualMenuState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.HookCountViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHookCountViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HookCountViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HookCountViewInterface.InitWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHookCountViewInterface::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HookCountViewInterface", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HookCountViewInterface.SetData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             currentHookCount                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             maxHookCount                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             initialMaxHookCount                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHookCountViewInterface::SetData(const int32 currentHookCount, const int32 maxHookCount, const int32 initialMaxHookCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HookCountViewInterface", "SetData");

	Params::HookCountViewInterface_SetData Parms{};

	Parms.currentHookCount = currentHookCount;
	Parms.maxHookCount = maxHookCount;
	Parms.initialMaxHookCount = initialMaxHookCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HookCountViewInterface.SetHookCountVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHookCountViewInterface::SetHookCountVisibility(bool visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HookCountViewInterface", "SetHookCountVisibility");

	Params::HookCountViewInterface_SetHookCountVisibility Parms{};

	Parms.visible = visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudAlertViewInterface.FadeIn
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHudAlertViewInterface::FadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudAlertViewInterface", "FadeIn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudAlertViewInterface.FadeOut
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudAlertViewInterface::FadeOut(float delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudAlertViewInterface", "FadeOut");

	Params::HudAlertViewInterface_FadeOut Parms{};

	Parms.delay = delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudAlertViewInterface.SetScoreEventsVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudAlertViewInterface::SetScoreEventsVisibility(bool visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudAlertViewInterface", "SetScoreEventsVisibility");

	Params::HudAlertViewInterface_SetScoreEventsVisibility Parms{};

	Parms.visible = visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudAlertViewInterface.ShowScoreAlert
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FScoreAlertViewData&       data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IHudAlertViewInterface::ShowScoreAlert(const struct FScoreAlertViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudAlertViewInterface", "ShowScoreAlert");

	Params::HudAlertViewInterface_ShowScoreAlert Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudAlertViewInterface.ShowStatusEffectAlert
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStatusEffectAlertViewData&data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IHudAlertViewInterface::ShowStatusEffectAlert(const struct FStatusEffectAlertViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudAlertViewInterface", "ShowStatusEffectAlert");

	Params::HudAlertViewInterface_ShowStatusEffectAlert Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.Hide
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IHudDirectionalMiniGameViewInterface::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudDirectionalMiniGameViewInterface", "Hide");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.Init
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   maxItems                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudDirectionalMiniGameViewInterface::Init(int32 maxItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudDirectionalMiniGameViewInterface", "Init");

	Params::HudDirectionalMiniGameViewInterface_Init Parms{};

	Parms.maxItems = maxItems;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.Show
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<EDirectionalInputKey>&     directions                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IHudDirectionalMiniGameViewInterface::Show(const TArray<EDirectionalInputKey>& directions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudDirectionalMiniGameViewInterface", "Show");

	Params::HudDirectionalMiniGameViewInterface_Show Parms{};

	Parms.directions = std::move(directions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.UpdateFinalResult
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDirectionalMinigameResult              finalResult                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudDirectionalMiniGameViewInterface::UpdateFinalResult(EDirectionalMinigameResult finalResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudDirectionalMiniGameViewInterface", "UpdateFinalResult");

	Params::HudDirectionalMiniGameViewInterface_UpdateFinalResult Parms{};

	Parms.finalResult = finalResult;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.UpdateResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   index                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isSuccessful                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudDirectionalMiniGameViewInterface::UpdateResult(int32 index, bool isSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudDirectionalMiniGameViewInterface", "UpdateResult");

	Params::HudDirectionalMiniGameViewInterface_UpdateResult Parms{};

	Parms.index = index;
	Parms.isSuccessful = isSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHudObjectivesViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudObjectivesViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.ClearHookCountData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHudObjectivesViewInterface::ClearHookCountData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudObjectivesViewInterface", "ClearHookCountData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.EnableEventProgression
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudObjectivesViewInterface::EnableEventProgression(bool isEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudObjectivesViewInterface", "EnableEventProgression");

	Params::HudObjectivesViewInterface_EnableEventProgression Parms{};

	Parms.isEnabled = isEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.InitEventProgression
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHudEventProgressionViewData&hudEventProgressionViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IHudObjectivesViewInterface::InitEventProgression(const struct FHudEventProgressionViewData& hudEventProgressionViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudObjectivesViewInterface", "InitEventProgression");

	Params::HudObjectivesViewInterface_InitEventProgression Parms{};

	Parms.hudEventProgressionViewData = std::move(hudEventProgressionViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.InitWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHudObjectivesViewInterface::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudObjectivesViewInterface", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.SetHookCountData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             currentHookCount                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             maxHookCount                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             initialMaxHookCount                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudObjectivesViewInterface::SetHookCountData(const int32 currentHookCount, const int32 maxHookCount, const int32 initialMaxHookCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudObjectivesViewInterface", "SetHookCountData");

	Params::HudObjectivesViewInterface_SetHookCountData Parms{};

	Parms.currentHookCount = currentHookCount;
	Parms.maxHookCount = maxHookCount;
	Parms.initialMaxHookCount = initialMaxHookCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.SetHookCountVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudObjectivesViewInterface::SetHookCountVisibility(bool visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudObjectivesViewInterface", "SetHookCountVisibility");

	Params::HudObjectivesViewInterface_SetHookCountVisibility Parms{};

	Parms.visible = visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.SetHudObjectiveData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHudObjectivesViewData&    hudObjectiveViewData                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IHudObjectivesViewInterface::SetHudObjectiveData(const struct FHudObjectivesViewData& hudObjectiveViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudObjectivesViewInterface", "SetHudObjectiveData");

	Params::HudObjectivesViewInterface_SetHudObjectiveData Parms{};

	Parms.hudObjectiveViewData = std::move(hudObjectiveViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.UpdateEventBankedProgress
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHudEventProgressionViewData&hudEventProgressionViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IHudObjectivesViewInterface::UpdateEventBankedProgress(const struct FHudEventProgressionViewData& hudEventProgressionViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudObjectivesViewInterface", "UpdateEventBankedProgress");

	Params::HudObjectivesViewInterface_UpdateEventBankedProgress Parms{};

	Parms.hudEventProgressionViewData = std::move(hudEventProgressionViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.UpdateEventPendingProgress
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHudEventProgressionViewData&hudEventProgressionViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IHudObjectivesViewInterface::UpdateEventPendingProgress(const struct FHudEventProgressionViewData& hudEventProgressionViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("HudObjectivesViewInterface", "UpdateEventPendingProgress");

	Params::HudObjectivesViewInterface_UpdateEventPendingProgress Parms{};

	Parms.hudEventProgressionViewData = std::move(hudEventProgressionViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InteractionProgressViewInterface.HideInputProgressPrompt
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IInteractionProgressViewInterface::HideInputProgressPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InteractionProgressViewInterface", "HideInputProgressPrompt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InteractionProgressViewInterface.PlayHemorrhageAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IInteractionProgressViewInterface::PlayHemorrhageAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InteractionProgressViewInterface", "PlayHemorrhageAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InteractionProgressViewInterface.SetInputProgressPrompt
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInteractionProgressViewData&data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IInteractionProgressViewInterface::SetInputProgressPrompt(const struct FInteractionProgressViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InteractionProgressViewInterface", "SetInputProgressPrompt");

	Params::InteractionProgressViewInterface_SetInputProgressPrompt Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InteractionProgressViewInterface.UpdateInputProgress
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const float                             progress                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             itemCharge                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IInteractionProgressViewInterface::UpdateInputProgress(const float progress, const float itemCharge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InteractionProgressViewInterface", "UpdateInputProgress");

	Params::InteractionProgressViewInterface_UpdateInputProgress Parms{};

	Parms.progress = progress;
	Parms.itemCharge = itemCharge;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InteractionPromptsContainerViewInterface.AddPrompt
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInteractionPromptViewData&data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IInteractionPromptsContainerViewInterface::AddPrompt(const struct FInteractionPromptViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InteractionPromptsContainerViewInterface", "AddPrompt");

	Params::InteractionPromptsContainerViewInterface_AddPrompt Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InteractionPromptsContainerViewInterface.RemoveAllPrompts
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IInteractionPromptsContainerViewInterface::RemoveAllPrompts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InteractionPromptsContainerViewInterface", "RemoveAllPrompts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InteractionPromptsContainerViewInterface.RemovePrompt
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             id                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IInteractionPromptsContainerViewInterface::RemovePrompt(class FName id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("InteractionPromptsContainerViewInterface", "RemovePrompt");

	Params::InteractionPromptsContainerViewInterface_RemovePrompt Parms{};

	Parms.id = id;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ItemBundleViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IItemBundleViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ItemBundleViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ItemBundleViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FItemBundleViewData&       itemBundleViewData                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IItemBundleViewInterface::SetData(const struct FItemBundleViewData& itemBundleViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ItemBundleViewInterface", "SetData");

	Params::ItemBundleViewInterface_SetData Parms{};

	Parms.itemBundleViewData = std::move(itemBundleViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ItemInteractionViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IItemInteractionViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ItemInteractionViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ItemInteractionViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FItemBundleViewData&       itemBundleData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IItemInteractionViewInterface::SetData(const struct FItemBundleViewData& itemBundleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ItemInteractionViewInterface", "SetData");

	Params::ItemInteractionViewInterface_SetData Parms{};

	Parms.itemBundleData = std::move(itemBundleData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ItemViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IItemViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ItemViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ItemViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FItemViewData&             itemViewData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IItemViewInterface::SetData(const struct FItemViewData& itemViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ItemViewInterface", "SetData");

	Params::ItemViewInterface_SetData Parms{};

	Parms.itemViewData = std::move(itemViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LeaningArrowsViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const ELeanState&                       leanState                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILeaningArrowsViewInterface::SetData(const ELeanState& leanState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LeaningArrowsViewInterface", "SetData");

	Params::LeaningArrowsViewInterface_SetData Parms{};

	Parms.leanState = leanState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LightSensitivityViewInterface.StartFadeOut
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ILightSensitivityViewInterface::StartFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LightSensitivityViewInterface", "StartFadeOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadoutMenuPopupViewInterface.SetLoadoutMenuInventoryData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<class ULoadoutMenuPopupViewData*>&loadoutMenuSlotButtonData                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const ELoadoutSlot                      slotSelected                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              isNextSlot                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILoadoutMenuPopupViewInterface::SetLoadoutMenuInventoryData(const TArray<class ULoadoutMenuPopupViewData*>& loadoutMenuSlotButtonData, const ELoadoutSlot slotSelected, const bool isNextSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LoadoutMenuPopupViewInterface", "SetLoadoutMenuInventoryData");

	Params::LoadoutMenuPopupViewInterface_SetLoadoutMenuInventoryData Parms{};

	Parms.loadoutMenuSlotButtonData = std::move(loadoutMenuSlotButtonData);
	Parms.slotSelected = slotSelected;
	Parms.isNextSlot = isNextSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadoutMenuPopupViewInterface.SetLoadoutMenuSlotData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<class ULoadoutMenuPopupViewData*>&loadoutMenuSlotButtonData                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ILoadoutMenuPopupViewInterface::SetLoadoutMenuSlotData(const TArray<class ULoadoutMenuPopupViewData*>& loadoutMenuSlotButtonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LoadoutMenuPopupViewInterface", "SetLoadoutMenuSlotData");

	Params::LoadoutMenuPopupViewInterface_SetLoadoutMenuSlotData Parms{};

	Parms.loadoutMenuSlotButtonData = std::move(loadoutMenuSlotButtonData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadoutMenuPopupViewInterface.SetSelectableCharacters
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FTabWidgetData>&    selectableCharacters                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FTabWidgetData&            selectedCharacterData                                  (ConstParm, Parm, NativeAccessSpecifierPublic)
// const int32                             botIndex                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILoadoutMenuPopupViewInterface::SetSelectableCharacters(const TArray<struct FTabWidgetData>& selectableCharacters, const struct FTabWidgetData& selectedCharacterData, const int32 botIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LoadoutMenuPopupViewInterface", "SetSelectableCharacters");

	Params::LoadoutMenuPopupViewInterface_SetSelectableCharacters Parms{};

	Parms.selectableCharacters = std::move(selectableCharacters);
	Parms.selectedCharacterData = std::move(selectedCharacterData);
	Parms.botIndex = botIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadoutMenuPopupViewInterface.SetSelectedInventoryItem
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<int32>&                    selectedIndex                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              isUnequip                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILoadoutMenuPopupViewInterface::SetSelectedInventoryItem(const TArray<int32>& selectedIndex, const bool isUnequip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LoadoutMenuPopupViewInterface", "SetSelectedInventoryItem");

	Params::LoadoutMenuPopupViewInterface_SetSelectedInventoryItem Parms{};

	Parms.selectedIndex = std::move(selectedIndex);
	Parms.isUnequip = isUnequip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadoutMenuPopupViewInterface.UpdatePresetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<int32>&                    presetData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             selectedPreset                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILoadoutMenuPopupViewInterface::UpdatePresetData(const TArray<int32>& presetData, const int32 selectedPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LoadoutMenuPopupViewInterface", "UpdatePresetData");

	Params::LoadoutMenuPopupViewInterface_UpdatePresetData Parms{};

	Parms.presetData = std::move(presetData);
	Parms.selectedPreset = selectedPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MatchResultViewInterface.PlayAnimationSequence
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IMatchResultViewInterface::PlayAnimationSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("MatchResultViewInterface", "PlayAnimationSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MatchResultViewInterface.UpdateWidget
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FMatchResultViewData&      data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IMatchResultViewInterface::UpdateWidget(const struct FMatchResultViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("MatchResultViewInterface", "UpdateWidget");

	Params::MatchResultViewInterface_UpdateWidget Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OfferingInteractionViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IOfferingInteractionViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OfferingInteractionViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OfferingInteractionViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FOfferingViewData&         OfferingData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IOfferingInteractionViewInterface::SetData(const struct FOfferingViewData& OfferingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OfferingInteractionViewInterface", "SetData");

	Params::OfferingInteractionViewInterface_SetData Parms{};

	Parms.OfferingData = std::move(OfferingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OfferingViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IOfferingViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OfferingViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OfferingViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FOfferingViewData&         offeringViewData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IOfferingViewInterface::SetData(const struct FOfferingViewData& offeringViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OfferingViewInterface", "SetData");

	Params::OfferingViewInterface_SetData Parms{};

	Parms.offeringViewData = std::move(offeringViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetBackButtonVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingMenuViewInterface::SetBackButtonVisible(bool visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingMenuViewInterface", "SetBackButtonVisible");

	Params::OnboardingMenuViewInterface_SetBackButtonVisible Parms{};

	Parms.visible = visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetChangeAccountInputSwitcherPlayerNickname
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    playerNickname                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingMenuViewInterface::SetChangeAccountInputSwitcherPlayerNickname(const class FString& playerNickname)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingMenuViewInterface", "SetChangeAccountInputSwitcherPlayerNickname");

	Params::OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname Parms{};

	Parms.playerNickname = std::move(playerNickname);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetChangeAccountInputSwitcherVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingMenuViewInterface::SetChangeAccountInputSwitcherVisible(bool visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingMenuViewInterface", "SetChangeAccountInputSwitcherVisible");

	Params::OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible Parms{};

	Parms.visible = visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetFirstTimeUserExperience
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ftue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingMenuViewInterface::SetFirstTimeUserExperience(bool ftue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingMenuViewInterface", "SetFirstTimeUserExperience");

	Params::OnboardingMenuViewInterface_SetFirstTimeUserExperience Parms{};

	Parms.ftue = ftue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetOnboardingMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EOnboardingMenuState                    menuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingMenuViewInterface::SetOnboardingMenuState(EOnboardingMenuState menuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingMenuViewInterface", "SetOnboardingMenuState");

	Params::OnboardingMenuViewInterface_SetOnboardingMenuState Parms{};

	Parms.menuState = menuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetQuitGameButtonVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingMenuViewInterface::SetQuitGameButtonVisible(bool visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingMenuViewInterface", "SetQuitGameButtonVisible");

	Params::OnboardingMenuViewInterface_SetQuitGameButtonVisible Parms{};

	Parms.visible = visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetUIEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingMenuViewInterface::SetUIEnabled(bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingMenuViewInterface", "SetUIEnabled");

	Params::OnboardingMenuViewInterface_SetUIEnabled Parms{};

	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.GetGameManualInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IGameManualViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

TScriptInterface<class IGameManualViewInterface> IOnboardingMenuViewInterface::GetGameManualInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingMenuViewInterface", "GetGameManualInterface");

	Params::OnboardingMenuViewInterface_GetGameManualInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.GetOnboardingTutorialInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IOnboardingTutorialViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

TScriptInterface<class IOnboardingTutorialViewInterface> IOnboardingMenuViewInterface::GetOnboardingTutorialInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingMenuViewInterface", "GetOnboardingTutorialInterface");

	Params::OnboardingMenuViewInterface_GetOnboardingTutorialInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetCanShowGoToMainMenuTutorialButton
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    canShowGoToMainMenuTutorialButton                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingTutorialViewInterface::SetCanShowGoToMainMenuTutorialButton(bool canShowGoToMainMenuTutorialButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingTutorialViewInterface", "SetCanShowGoToMainMenuTutorialButton");

	Params::OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton Parms{};

	Parms.canShowGoToMainMenuTutorialButton = canShowGoToMainMenuTutorialButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetIsKillSwitch
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isKillSwitch                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingTutorialViewInterface::SetIsKillSwitch(bool isKillSwitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingTutorialViewInterface", "SetIsKillSwitch");

	Params::OnboardingTutorialViewInterface_SetIsKillSwitch Parms{};

	Parms.isKillSwitch = isKillSwitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetProgress
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FOnboardingStepViewData>&progress                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IOnboardingTutorialViewInterface::SetProgress(const TArray<struct FOnboardingStepViewData>& progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingTutorialViewInterface", "SetProgress");

	Params::OnboardingTutorialViewInterface_SetProgress Parms{};

	Parms.progress = std::move(progress);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetTutorialProgressionFeedbacks
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    completedStepId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              isOnboardingEnabled                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingTutorialViewInterface::SetTutorialProgressionFeedbacks(const class FString& completedStepId, const bool isOnboardingEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingTutorialViewInterface", "SetTutorialProgressionFeedbacks");

	Params::OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks Parms{};

	Parms.completedStepId = std::move(completedStepId);
	Parms.isOnboardingEnabled = isOnboardingEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetUIEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingTutorialViewInterface::SetUIEnabled(bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingTutorialViewInterface", "SetUIEnabled");

	Params::OnboardingTutorialViewInterface_SetUIEnabled Parms{};

	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.StopLoadingSpinner
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IOnboardingTutorialViewInterface::StopLoadingSpinner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingTutorialViewInterface", "StopLoadingSpinner");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.UpdateProgress
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FOnboardingStepViewData>&before                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FOnboardingStepViewData>&after                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FRewardWrapperViewData>&rewards                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IOnboardingTutorialViewInterface::UpdateProgress(const TArray<struct FOnboardingStepViewData>& before, const TArray<struct FOnboardingStepViewData>& after, const TArray<struct FRewardWrapperViewData>& rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("OnboardingTutorialViewInterface", "UpdateProgress");

	Params::OnboardingTutorialViewInterface_UpdateProgress Parms{};

	Parms.before = std::move(before);
	Parms.after = std::move(after);
	Parms.rewards = std::move(rewards);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PerksContainerViewInterface.GetPerkInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   index                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IPerkViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

TScriptInterface<class IPerkViewInterface> IPerksContainerViewInterface::GetPerkInterface(int32 index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PerksContainerViewInterface", "GetPerkInterface");

	Params::PerksContainerViewInterface_GetPerkInterface Parms{};

	Parms.index = index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.PerkViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPerkViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PerkViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PerkViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPerkViewData&             perkViewData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IPerkViewInterface::SetData(const struct FPerkViewData& perkViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PerkViewInterface", "SetData");

	Params::PerkViewInterface_SetData Parms{};

	Parms.perkViewData = std::move(perkViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PerkViewInterface.UpdatePerkCooldown
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   cooldownValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsRechargeable                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsRechargeableActive                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPerkViewInterface::UpdatePerkCooldown(float cooldownValue, bool IsRechargeable, bool IsRechargeableActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PerkViewInterface", "UpdatePerkCooldown");

	Params::PerkViewInterface_UpdatePerkCooldown Parms{};

	Parms.cooldownValue = cooldownValue;
	Parms.IsRechargeable = IsRechargeable;
	Parms.IsRechargeableActive = IsRechargeableActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PingStatusViewInterface.SetKillerConnectionQualityStatus
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const EConnectionQuality&               killerConnectionQuality                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPingStatusViewInterface::SetKillerConnectionQualityStatus(const EConnectionQuality& killerConnectionQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PingStatusViewInterface", "SetKillerConnectionQualityStatus");

	Params::PingStatusViewInterface_SetKillerConnectionQualityStatus Parms{};

	Parms.killerConnectionQuality = killerConnectionQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PingStatusViewInterface.SetLocalPacketLossStatus
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const EConnectionQuality&               localPacketLoss                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPingStatusViewInterface::SetLocalPacketLossStatus(const EConnectionQuality& localPacketLoss)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PingStatusViewInterface", "SetLocalPacketLossStatus");

	Params::PingStatusViewInterface_SetLocalPacketLossStatus Parms{};

	Parms.localPacketLoss = localPacketLoss;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PingStatusViewInterface.SetLocalPingStatus
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const EConnectionQuality&               localPing                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPingStatusViewInterface::SetLocalPingStatus(const EConnectionQuality& localPing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PingStatusViewInterface", "SetLocalPingStatus");

	Params::PingStatusViewInterface_SetLocalPingStatus Parms{};

	Parms.localPing = localPing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.FullUpdateCurrency
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FCurrencyLabelViewData&    viewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IPlayerProfileViewInterface::FullUpdateCurrency(const struct FCurrencyLabelViewData& viewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerProfileViewInterface", "FullUpdateCurrency");

	Params::PlayerProfileViewInterface_FullUpdateCurrency Parms{};

	Parms.viewData = std::move(viewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.HidePlayerLevel
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerProfileViewInterface::HidePlayerLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerProfileViewInterface", "HidePlayerLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.HidePlayerName
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerProfileViewInterface::HidePlayerName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerProfileViewInterface", "HidePlayerName");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.HidePlayerRank
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerProfileViewInterface::HidePlayerRank()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerProfileViewInterface", "HidePlayerRank");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.HideUI
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerProfileViewInterface::HideUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerProfileViewInterface", "HideUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.HideWallet
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerProfileViewInterface::HideWallet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerProfileViewInterface", "HideWallet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetPlayerName
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      playerNameText                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IPlayerProfileViewInterface::SetPlayerName(const class FText& playerNameText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerProfileViewInterface", "SetPlayerName");

	Params::PlayerProfileViewInterface_SetPlayerName Parms{};

	Parms.playerNameText = std::move(playerNameText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetWallet
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FCurrencyLabelViewData>&walletData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IPlayerProfileViewInterface::SetWallet(const TArray<struct FCurrencyLabelViewData>& walletData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerProfileViewInterface", "SetWallet");

	Params::PlayerProfileViewInterface_SetWallet Parms{};

	Parms.walletData = std::move(walletData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.ShowUI
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerProfileViewInterface::ShowUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerProfileViewInterface", "ShowUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.UpdateWallet
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const ECurrencyType                     type                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   newBalance                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   previousBalance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerProfileViewInterface::UpdateWallet(const ECurrencyType type, int32 newBalance, int32 previousBalance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerProfileViewInterface", "UpdateWallet");

	Params::PlayerProfileViewInterface_UpdateWallet Parms{};

	Parms.type = type;
	Parms.newBalance = newBalance;
	Parms.previousBalance = previousBalance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusesContainerViewInterface.GetPlayerStatusInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   index                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IPlayerStatusViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

TScriptInterface<class IPlayerStatusViewInterface> IPlayerStatusesContainerViewInterface::GetPlayerStatusInterface(int32 index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerStatusesContainerViewInterface", "GetPlayerStatusInterface");

	Params::PlayerStatusesContainerViewInterface_GetPlayerStatusInterface Parms{};

	Parms.index = index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.KillerStatusData.IsEqual
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UKillerStatusData*          other                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKillerStatusData::IsEqual(const class UKillerStatusData* other) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillerStatusData", "IsEqual");

	Params::KillerStatusData_IsEqual Parms{};

	Parms.other = other;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerStatusViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerStatusViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.EnableChasesMode
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              isChased                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::EnableChasesMode(const bool isChased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerStatusViewInterface", "EnableChasesMode");

	Params::PlayerStatusViewInterface_EnableChasesMode Parms{};

	Parms.isChased = isChased;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.HideSurvivorActivity
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerStatusViewInterface::HideSurvivorActivity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerStatusViewInterface", "HideSurvivorActivity");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.PlayHookEscapeFailedAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerStatusViewInterface::PlayHookEscapeFailedAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerStatusViewInterface", "PlayHookEscapeFailedAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.PlayTimerAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerStatusViewInterface::PlayTimerAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerStatusViewInterface", "PlayTimerAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetCampProgress
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isLocalPlayerAKiller                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::SetCampProgress(float value, bool isLocalPlayerAKiller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerStatusViewInterface", "SetCampProgress");

	Params::PlayerStatusViewInterface_SetCampProgress Parms{};

	Parms.value = value;
	Parms.isLocalPlayerAKiller = isLocalPlayerAKiller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPlayerStatusViewData&     data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::SetData(const struct FPlayerStatusViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerStatusViewInterface", "SetData");

	Params::PlayerStatusViewInterface_SetData Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetKiller
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              killerTag                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::SetKiller(const struct FGameplayTag& killerTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerStatusViewInterface", "SetKiller");

	Params::PlayerStatusViewInterface_SetKiller Parms{};

	Parms.killerTag = std::move(killerTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetPlayerNameVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::SetPlayerNameVisibility(bool visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerStatusViewInterface", "SetPlayerNameVisibility");

	Params::PlayerStatusViewInterface_SetPlayerNameVisibility Parms{};

	Parms.visible = visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetTimerProgress
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isDeepWound                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::SetTimerProgress(float value, bool isDeepWound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerStatusViewInterface", "SetTimerProgress");

	Params::PlayerStatusViewInterface_SetTimerProgress Parms{};

	Parms.value = value;
	Parms.isDeepWound = isDeepWound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.ShowSurvivorActivity
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TSoftObjectPtr<class UTexture2D>& activityIcon                                           (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              shouldDisplayProgress                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::ShowSurvivorActivity(const TSoftObjectPtr<class UTexture2D>& activityIcon, const bool shouldDisplayProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerStatusViewInterface", "ShowSurvivorActivity");

	Params::PlayerStatusViewInterface_ShowSurvivorActivity Parms{};

	Parms.activityIcon = activityIcon;
	Parms.shouldDisplayProgress = shouldDisplayProgress;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.TriggerAfflictionHit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerStatusViewInterface::TriggerAfflictionHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerStatusViewInterface", "TriggerAfflictionHit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.UpdateSurvivorActivityProgress
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const float                             progress                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::UpdateSurvivorActivityProgress(const float progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerStatusViewInterface", "UpdateSurvivorActivityProgress");

	Params::PlayerStatusViewInterface_UpdateSurvivorActivityProgress Parms{};

	Parms.progress = progress;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.UpdateSurvivorSpecificPingIcon
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const EConnectionQuality&               connectionQuality                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::UpdateSurvivorSpecificPingIcon(const EConnectionQuality& connectionQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PlayerStatusViewInterface", "UpdateSurvivorSpecificPingIcon");

	Params::PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon Parms{};

	Parms.connectionQuality = connectionQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PowerBundleViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPowerBundleViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PowerBundleViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PowerBundleViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPowerBundleViewData&      powerBundleViewData                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IPowerBundleViewInterface::SetData(const struct FPowerBundleViewData& powerBundleViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PowerBundleViewInterface", "SetData");

	Params::PowerBundleViewInterface_SetData Parms{};

	Parms.powerBundleViewData = std::move(powerBundleViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PowerViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPowerViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PowerViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PowerViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPowerViewData&            powerViewData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IPowerViewInterface::SetData(const struct FPowerViewData& powerViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("PowerViewInterface", "SetData");

	Params::PowerViewInterface_SetData Parms{};

	Parms.powerViewData = std::move(powerViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ScreenIndicatorsContainerViewInterface.RemoveDirectionIndicator
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    id                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IScreenIndicatorsContainerViewInterface::RemoveDirectionIndicator(const class FString& id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ScreenIndicatorsContainerViewInterface", "RemoveDirectionIndicator");

	Params::ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator Parms{};

	Parms.id = std::move(id);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ScreenIndicatorsContainerViewInterface.ShowDirectionIndicator
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FScreenIndicatorViewData&  data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IScreenIndicatorsContainerViewInterface::ShowDirectionIndicator(const struct FScreenIndicatorViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ScreenIndicatorsContainerViewInterface", "ShowDirectionIndicator");

	Params::ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillCheckViewInterface.ApplyScaleFactor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISkillCheckViewInterface::ApplyScaleFactor(float scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SkillCheckViewInterface", "ApplyScaleFactor");

	Params::SkillCheckViewInterface_ApplyScaleFactor Parms{};

	Parms.scale = scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillCheckViewInterface.HideSkillCheck
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ISkillCheckViewInterface::HideSkillCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SkillCheckViewInterface", "HideSkillCheck");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillCheckViewInterface.ShowSkillCheck
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSkillCheckViewData&       skillCheckData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ISkillCheckViewInterface::ShowSkillCheck(const struct FSkillCheckViewData& skillCheckData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SkillCheckViewInterface", "ShowSkillCheck");

	Params::SkillCheckViewInterface_ShowSkillCheck Parms{};

	Parms.skillCheckData = std::move(skillCheckData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillCheckViewInterface.ShowSkillCheckFail
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ISkillCheckViewInterface::ShowSkillCheckFail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SkillCheckViewInterface", "ShowSkillCheckFail");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillCheckViewInterface.ShowSkillCheckSuccess
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isBonus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISkillCheckViewInterface::ShowSkillCheckSuccess(bool isBonus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SkillCheckViewInterface", "ShowSkillCheckSuccess");

	Params::SkillCheckViewInterface_ShowSkillCheckSuccess Parms{};

	Parms.isBonus = isBonus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillCheckViewInterface.UpdatePositionOffset
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   x                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISkillCheckViewInterface::UpdatePositionOffset(int32 x, int32 y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SkillCheckViewInterface", "UpdatePositionOffset");

	Params::SkillCheckViewInterface_UpdatePositionOffset Parms{};

	Parms.x = x;
	Parms.y = y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillCheckViewInterface.UpdateProgress
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISkillCheckViewInterface::UpdateProgress(float value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SkillCheckViewInterface", "UpdateProgress");

	Params::SkillCheckViewInterface_UpdateProgress Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SpectateBarViewInterface.SetArrowsVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              isVisible                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISpectateBarViewInterface::SetArrowsVisibility(const bool isVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SpectateBarViewInterface", "SetArrowsVisibility");

	Params::SpectateBarViewInterface_SetArrowsVisibility Parms{};

	Parms.isVisible = isVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SpectateBarViewInterface.SetSpectateBarVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              isVisible                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISpectateBarViewInterface::SetSpectateBarVisibility(const bool isVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SpectateBarViewInterface", "SetSpectateBarVisibility");

	Params::SpectateBarViewInterface_SetSpectateBarVisibility Parms{};

	Parms.isVisible = isVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SpectateBarViewInterface.SetSpectatedName
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    playerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISpectateBarViewInterface::SetSpectatedName(const class FString& playerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SpectateBarViewInterface", "SetSpectatedName");

	Params::SpectateBarViewInterface_SetSpectatedName Parms{};

	Parms.playerName = std::move(playerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StartSequenceViewInterface.HideStartSequence
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IStartSequenceViewInterface::HideStartSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("StartSequenceViewInterface", "HideStartSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StartSequenceViewInterface.ShowStartSequence
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStartSequenceViewData&    data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IStartSequenceViewInterface::ShowStartSequence(const struct FStartSequenceViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("StartSequenceViewInterface", "ShowStartSequence");

	Params::StartSequenceViewInterface_ShowStartSequence Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StartSequenceViewInterface.GetIsStartSequenceVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IStartSequenceViewInterface::GetIsStartSequenceVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("StartSequenceViewInterface", "GetIsStartSequenceVisible");

	Params::StartSequenceViewInterface_GetIsStartSequenceVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StatusEffectViewInterface.RemoveExistingStatusEffect
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      statusEffectId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStatusEffectViewInterface::RemoveExistingStatusEffect(const class FName& statusEffectId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("StatusEffectViewInterface", "RemoveExistingStatusEffect");

	Params::StatusEffectViewInterface_RemoveExistingStatusEffect Parms{};

	Parms.statusEffectId = statusEffectId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StatusEffectViewInterface.ShowActiveStatusEffect
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStatusEffectViewData&     statusEffectData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IStatusEffectViewInterface::ShowActiveStatusEffect(const struct FStatusEffectViewData& statusEffectData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("StatusEffectViewInterface", "ShowActiveStatusEffect");

	Params::StatusEffectViewInterface_ShowActiveStatusEffect Parms{};

	Parms.statusEffectData = std::move(statusEffectData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SubtitlesViewInterface.HideSubtitles
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ISubtitlesViewInterface::HideSubtitles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SubtitlesViewInterface", "HideSubtitles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetConstrainAspectRatioChanged
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isConstrained                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   aspectRatio                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISubtitlesViewInterface::SetConstrainAspectRatioChanged(bool isConstrained, float aspectRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SubtitlesViewInterface", "SetConstrainAspectRatioChanged");

	Params::SubtitlesViewInterface_SetConstrainAspectRatioChanged Parms{};

	Parms.isConstrained = isConstrained;
	Parms.aspectRatio = aspectRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetSubtitlesBackgroundOpacity
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESubtitlesBackgroundOpacity             opacity                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISubtitlesViewInterface::SetSubtitlesBackgroundOpacity(ESubtitlesBackgroundOpacity opacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SubtitlesViewInterface", "SetSubtitlesBackgroundOpacity");

	Params::SubtitlesViewInterface_SetSubtitlesBackgroundOpacity Parms{};

	Parms.opacity = opacity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetSubtitlesPosition
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESubtitlesPosition                      position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISubtitlesViewInterface::SetSubtitlesPosition(ESubtitlesPosition position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SubtitlesViewInterface", "SetSubtitlesPosition");

	Params::SubtitlesViewInterface_SetSubtitlesPosition Parms{};

	Parms.position = position;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetSubtitlesSize
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESubtitlesSize                          size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISubtitlesViewInterface::SetSubtitlesSize(ESubtitlesSize size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SubtitlesViewInterface", "SetSubtitlesSize");

	Params::SubtitlesViewInterface_SetSubtitlesSize Parms{};

	Parms.size = size;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SubtitlesViewInterface.ShowSubtitle
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      subtitleText                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ISubtitlesViewInterface::ShowSubtitle(const class FText& subtitleText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SubtitlesViewInterface", "ShowSubtitle");

	Params::SubtitlesViewInterface_ShowSubtitle Parms{};

	Parms.subtitleText = std::move(subtitleText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TemplateViewInterface.TemplateExampleFunction
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTemplateViewData&         templateData                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ITemplateViewInterface::TemplateExampleFunction(const struct FTemplateViewData& templateData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TemplateViewInterface", "TemplateExampleFunction");

	Params::TemplateViewInterface_TemplateExampleFunction Parms{};

	Parms.templateData = std::move(templateData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TestBuildFlagViewInterface.UpdateWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETestBuildType                          testBuildType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETestBuildFlagPosition                  testBuildFlagPosition                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITestBuildFlagViewInterface::UpdateWidget(ETestBuildType testBuildType, ETestBuildFlagPosition testBuildFlagPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TestBuildFlagViewInterface", "UpdateWidget");

	Params::TestBuildFlagViewInterface_UpdateWidget Parms{};

	Parms.testBuildType = testBuildType;
	Parms.testBuildFlagPosition = testBuildFlagPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialHighlightViewInterface.SetTutorialHighlight
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              show                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EHudComponent&                    componentId                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITutorialHighlightViewInterface::SetTutorialHighlight(const bool show, const EHudComponent& componentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TutorialHighlightViewInterface", "SetTutorialHighlight");

	Params::TutorialHighlightViewInterface_SetTutorialHighlight Parms{};

	Parms.show = show;
	Parms.componentId = componentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialMysteryNoteViewInterface.HideMysteryNote
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ITutorialMysteryNoteViewInterface::HideMysteryNote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TutorialMysteryNoteViewInterface", "HideMysteryNote");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialMysteryNoteViewInterface.ShowMysteryNote
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNotifTutorialPopupViewData&notifData                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ITutorialMysteryNoteViewInterface::ShowMysteryNote(const struct FNotifTutorialPopupViewData& notifData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TutorialMysteryNoteViewInterface", "ShowMysteryNote");

	Params::TutorialMysteryNoteViewInterface_ShowMysteryNote Parms{};

	Parms.notifData = std::move(notifData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialObjectivesViewInterface.AddTutorialObjective
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      id                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTutorialObjectivesViewData&interactionPromptViewData                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ITutorialObjectivesViewInterface::AddTutorialObjective(const class FName& id, const struct FTutorialObjectivesViewData& interactionPromptViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TutorialObjectivesViewInterface", "AddTutorialObjective");

	Params::TutorialObjectivesViewInterface_AddTutorialObjective Parms{};

	Parms.id = id;
	Parms.interactionPromptViewData = std::move(interactionPromptViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialObjectivesViewInterface.CompleteTutorialObjective
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      id                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    removeAfterCompletion                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITutorialObjectivesViewInterface::CompleteTutorialObjective(const class FName& id, bool removeAfterCompletion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TutorialObjectivesViewInterface", "CompleteTutorialObjective");

	Params::TutorialObjectivesViewInterface_CompleteTutorialObjective Parms{};

	Parms.id = id;
	Parms.removeAfterCompletion = removeAfterCompletion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialObjectivesViewInterface.RemoveAllTutorialObjectives
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ITutorialObjectivesViewInterface::RemoveAllTutorialObjectives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TutorialObjectivesViewInterface", "RemoveAllTutorialObjectives");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialObjectivesViewInterface.RemoveTutorialObjective
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      id                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITutorialObjectivesViewInterface::RemoveTutorialObjective(const class FName& id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TutorialObjectivesViewInterface", "RemoveTutorialObjective");

	Params::TutorialObjectivesViewInterface_RemoveTutorialObjective Parms{};

	Parms.id = id;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialPopupViewInterface.HideTutorialPopup
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    playSoundEffect                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITutorialPopupViewInterface::HideTutorialPopup(bool playSoundEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TutorialPopupViewInterface", "HideTutorialPopup");

	Params::TutorialPopupViewInterface_HideTutorialPopup Parms{};

	Parms.playSoundEffect = playSoundEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialPopupViewInterface.ShowNotifTutorialPopup
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FNotifTutorialPopupViewData&notifTutoData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ITutorialPopupViewInterface::ShowNotifTutorialPopup(const struct FNotifTutorialPopupViewData& notifTutoData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("TutorialPopupViewInterface", "ShowNotifTutorialPopup");

	Params::TutorialPopupViewInterface_ShowNotifTutorialPopup Parms{};

	Parms.notifTutoData = std::move(notifTutoData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.UIUtilities.ConvertArchiveCurrentAndMaxProgressionInPercentage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32&                                  outCurrentProgression                                  (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32&                                  outMaxProgression                                      (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIUtilities::ConvertArchiveCurrentAndMaxProgressionInPercentage(int32& outCurrentProgression, int32& outMaxProgression)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIUtilities", "ConvertArchiveCurrentAndMaxProgressionInPercentage");

	Params::UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage Parms{};

	Parms.outCurrentProgression = outCurrentProgression;
	Parms.outMaxProgression = outMaxProgression;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	outCurrentProgression = Parms.outCurrentProgression;
	outMaxProgression = Parms.outMaxProgression;
}


// Function DBDUIViewInterfaces.WatermarkViewInterface.SetSteamValuesText
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    SteamName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SteamId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IWatermarkViewInterface::SetSteamValuesText(const class FString& SteamName, const class FString& SteamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("WatermarkViewInterface", "SetSteamValuesText");

	Params::WatermarkViewInterface_SetSteamValuesText Parms{};

	Parms.SteamName = std::move(SteamName);
	Parms.SteamId = std::move(SteamId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

