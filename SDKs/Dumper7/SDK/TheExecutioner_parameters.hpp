#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheExecutioner

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "TheExecutioner_structs.hpp"


namespace SDK::Params
{

// Function TheExecutioner.ActivateTormentModeInteraction.SetTormentMode
// 0x0008 (0x0008 - 0x0000)
struct ActivateTormentModeInteraction_SetTormentMode final
{
public:
	class ATormentMode*                           tormentModeComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActivateTormentModeInteraction_SetTormentMode) == 0x000008, "Wrong alignment on ActivateTormentModeInteraction_SetTormentMode");
static_assert(sizeof(ActivateTormentModeInteraction_SetTormentMode) == 0x000008, "Wrong size on ActivateTormentModeInteraction_SetTormentMode");
static_assert(offsetof(ActivateTormentModeInteraction_SetTormentMode, tormentModeComponent) == 0x000000, "Member 'ActivateTormentModeInteraction_SetTormentMode::tormentModeComponent' has a wrong offset!");

// Function TheExecutioner.AgonyComponent.Authority_OnDrainStageChanged
// 0x0010 (0x0010 - 0x0000)
struct AgonyComponent_Authority_OnDrainStageChanged final
{
public:
	int32                                         drainStage;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgonyComponent_Authority_OnDrainStageChanged) == 0x000008, "Wrong alignment on AgonyComponent_Authority_OnDrainStageChanged");
static_assert(sizeof(AgonyComponent_Authority_OnDrainStageChanged) == 0x000010, "Wrong size on AgonyComponent_Authority_OnDrainStageChanged");
static_assert(offsetof(AgonyComponent_Authority_OnDrainStageChanged, drainStage) == 0x000000, "Member 'AgonyComponent_Authority_OnDrainStageChanged::drainStage' has a wrong offset!");
static_assert(offsetof(AgonyComponent_Authority_OnDrainStageChanged, target) == 0x000008, "Member 'AgonyComponent_Authority_OnDrainStageChanged::target' has a wrong offset!");

// Function TheExecutioner.AgonyComponent.OnAgonyChanged_Cosmetic
// 0x0001 (0x0001 - 0x0000)
struct AgonyComponent_OnAgonyChanged_Cosmetic final
{
public:
	bool                                          isInAgony;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgonyComponent_OnAgonyChanged_Cosmetic) == 0x000001, "Wrong alignment on AgonyComponent_OnAgonyChanged_Cosmetic");
static_assert(sizeof(AgonyComponent_OnAgonyChanged_Cosmetic) == 0x000001, "Wrong size on AgonyComponent_OnAgonyChanged_Cosmetic");
static_assert(offsetof(AgonyComponent_OnAgonyChanged_Cosmetic, isInAgony) == 0x000000, "Member 'AgonyComponent_OnAgonyChanged_Cosmetic::isInAgony' has a wrong offset!");

// Function TheExecutioner.AgonyComponent.OnHideBarbWireFXOnGameEvent
// 0x0038 (0x0038 - 0x0000)
struct AgonyComponent_OnHideBarbWireFXOnGameEvent final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgonyComponent_OnHideBarbWireFXOnGameEvent) == 0x000008, "Wrong alignment on AgonyComponent_OnHideBarbWireFXOnGameEvent");
static_assert(sizeof(AgonyComponent_OnHideBarbWireFXOnGameEvent) == 0x000038, "Wrong size on AgonyComponent_OnHideBarbWireFXOnGameEvent");
static_assert(offsetof(AgonyComponent_OnHideBarbWireFXOnGameEvent, gameEventType) == 0x000000, "Member 'AgonyComponent_OnHideBarbWireFXOnGameEvent::gameEventType' has a wrong offset!");
static_assert(offsetof(AgonyComponent_OnHideBarbWireFXOnGameEvent, gameEventData) == 0x000010, "Member 'AgonyComponent_OnHideBarbWireFXOnGameEvent::gameEventData' has a wrong offset!");

// Function TheExecutioner.AgonyComponent.OnLocallyObservedChanged
// 0x0001 (0x0001 - 0x0000)
struct AgonyComponent_OnLocallyObservedChanged final
{
public:
	bool                                          isLocallyObserved;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgonyComponent_OnLocallyObservedChanged) == 0x000001, "Wrong alignment on AgonyComponent_OnLocallyObservedChanged");
static_assert(sizeof(AgonyComponent_OnLocallyObservedChanged) == 0x000001, "Wrong size on AgonyComponent_OnLocallyObservedChanged");
static_assert(offsetof(AgonyComponent_OnLocallyObservedChanged, isLocallyObserved) == 0x000000, "Member 'AgonyComponent_OnLocallyObservedChanged::isLocallyObserved' has a wrong offset!");

// Function TheExecutioner.AgonyComponent.OnShowBarbWireFXOnGameEvent
// 0x0038 (0x0038 - 0x0000)
struct AgonyComponent_OnShowBarbWireFXOnGameEvent final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgonyComponent_OnShowBarbWireFXOnGameEvent) == 0x000008, "Wrong alignment on AgonyComponent_OnShowBarbWireFXOnGameEvent");
static_assert(sizeof(AgonyComponent_OnShowBarbWireFXOnGameEvent) == 0x000038, "Wrong size on AgonyComponent_OnShowBarbWireFXOnGameEvent");
static_assert(offsetof(AgonyComponent_OnShowBarbWireFXOnGameEvent, gameEventType) == 0x000000, "Member 'AgonyComponent_OnShowBarbWireFXOnGameEvent::gameEventType' has a wrong offset!");
static_assert(offsetof(AgonyComponent_OnShowBarbWireFXOnGameEvent, gameEventData) == 0x000010, "Member 'AgonyComponent_OnShowBarbWireFXOnGameEvent::gameEventData' has a wrong offset!");

// Function TheExecutioner.AgonyComponent.IsAgonyMoriable
// 0x0001 (0x0001 - 0x0000)
struct AgonyComponent_IsAgonyMoriable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgonyComponent_IsAgonyMoriable) == 0x000001, "Wrong alignment on AgonyComponent_IsAgonyMoriable");
static_assert(sizeof(AgonyComponent_IsAgonyMoriable) == 0x000001, "Wrong size on AgonyComponent_IsAgonyMoriable");
static_assert(offsetof(AgonyComponent_IsAgonyMoriable, ReturnValue) == 0x000000, "Member 'AgonyComponent_IsAgonyMoriable::ReturnValue' has a wrong offset!");

// Function TheExecutioner.AgonyComponent.IsInAgony
// 0x0001 (0x0001 - 0x0000)
struct AgonyComponent_IsInAgony final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AgonyComponent_IsInAgony) == 0x000001, "Wrong alignment on AgonyComponent_IsInAgony");
static_assert(sizeof(AgonyComponent_IsInAgony) == 0x000001, "Wrong size on AgonyComponent_IsInAgony");
static_assert(offsetof(AgonyComponent_IsInAgony, ReturnValue) == 0x000000, "Member 'AgonyComponent_IsInAgony::ReturnValue' has a wrong offset!");

// Function TheExecutioner.BloodPact.Authority_OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct BloodPact_Authority_OnInRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodPact_Authority_OnInRangeChanged) == 0x000001, "Wrong alignment on BloodPact_Authority_OnInRangeChanged");
static_assert(sizeof(BloodPact_Authority_OnInRangeChanged) == 0x000001, "Wrong size on BloodPact_Authority_OnInRangeChanged");
static_assert(offsetof(BloodPact_Authority_OnInRangeChanged, inRange) == 0x000000, "Member 'BloodPact_Authority_OnInRangeChanged::inRange' has a wrong offset!");

// Function TheExecutioner.DeathBedAntiCampComponent.Authority_OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct DeathBedAntiCampComponent_Authority_OnInRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathBedAntiCampComponent_Authority_OnInRangeChanged) == 0x000001, "Wrong alignment on DeathBedAntiCampComponent_Authority_OnInRangeChanged");
static_assert(sizeof(DeathBedAntiCampComponent_Authority_OnInRangeChanged) == 0x000001, "Wrong size on DeathBedAntiCampComponent_Authority_OnInRangeChanged");
static_assert(offsetof(DeathBedAntiCampComponent_Authority_OnInRangeChanged, inRange) == 0x000000, "Member 'DeathBedAntiCampComponent_Authority_OnInRangeChanged::inRange' has a wrong offset!");

// Function TheExecutioner.DeathBedInteractable.ActivateDeathBed
// 0x0001 (0x0001 - 0x0000)
struct DeathBedInteractable_ActivateDeathBed final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathBedInteractable_ActivateDeathBed) == 0x000001, "Wrong alignment on DeathBedInteractable_ActivateDeathBed");
static_assert(sizeof(DeathBedInteractable_ActivateDeathBed) == 0x000001, "Wrong size on DeathBedInteractable_ActivateDeathBed");
static_assert(offsetof(DeathBedInteractable_ActivateDeathBed, value) == 0x000000, "Member 'DeathBedInteractable_ActivateDeathBed::value' has a wrong offset!");

// Function TheExecutioner.DeathBedInteractable.Multicast_RelocateToOtherDeathBed
// 0x0010 (0x0010 - 0x0000)
struct DeathBedInteractable_Multicast_RelocateToOtherDeathBed final
{
public:
	class ADeathBedInteractable*                  deathBed;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          camperPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathBedInteractable_Multicast_RelocateToOtherDeathBed) == 0x000008, "Wrong alignment on DeathBedInteractable_Multicast_RelocateToOtherDeathBed");
static_assert(sizeof(DeathBedInteractable_Multicast_RelocateToOtherDeathBed) == 0x000010, "Wrong size on DeathBedInteractable_Multicast_RelocateToOtherDeathBed");
static_assert(offsetof(DeathBedInteractable_Multicast_RelocateToOtherDeathBed, deathBed) == 0x000000, "Member 'DeathBedInteractable_Multicast_RelocateToOtherDeathBed::deathBed' has a wrong offset!");
static_assert(offsetof(DeathBedInteractable_Multicast_RelocateToOtherDeathBed, camperPlayer) == 0x000008, "Member 'DeathBedInteractable_Multicast_RelocateToOtherDeathBed::camperPlayer' has a wrong offset!");

// Function TheExecutioner.DeathBedInteractable.PlayerOverlapZoneBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct DeathBedInteractable_PlayerOverlapZoneBeginOverlap final
{
public:
	class UPrimitiveComponent*                    overlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathBedInteractable_PlayerOverlapZoneBeginOverlap) == 0x000008, "Wrong alignment on DeathBedInteractable_PlayerOverlapZoneBeginOverlap");
static_assert(sizeof(DeathBedInteractable_PlayerOverlapZoneBeginOverlap) == 0x0000B0, "Wrong size on DeathBedInteractable_PlayerOverlapZoneBeginOverlap");
static_assert(offsetof(DeathBedInteractable_PlayerOverlapZoneBeginOverlap, overlappedComponent) == 0x000000, "Member 'DeathBedInteractable_PlayerOverlapZoneBeginOverlap::overlappedComponent' has a wrong offset!");
static_assert(offsetof(DeathBedInteractable_PlayerOverlapZoneBeginOverlap, otherActor) == 0x000008, "Member 'DeathBedInteractable_PlayerOverlapZoneBeginOverlap::otherActor' has a wrong offset!");
static_assert(offsetof(DeathBedInteractable_PlayerOverlapZoneBeginOverlap, otherComp) == 0x000010, "Member 'DeathBedInteractable_PlayerOverlapZoneBeginOverlap::otherComp' has a wrong offset!");
static_assert(offsetof(DeathBedInteractable_PlayerOverlapZoneBeginOverlap, otherBodyIndex) == 0x000018, "Member 'DeathBedInteractable_PlayerOverlapZoneBeginOverlap::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(DeathBedInteractable_PlayerOverlapZoneBeginOverlap, bFromSweep) == 0x00001C, "Member 'DeathBedInteractable_PlayerOverlapZoneBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(DeathBedInteractable_PlayerOverlapZoneBeginOverlap, sweepResult) == 0x000020, "Member 'DeathBedInteractable_PlayerOverlapZoneBeginOverlap::sweepResult' has a wrong offset!");

// Function TheExecutioner.DeathBedInteractable.PlayerOverlapZoneEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct DeathBedInteractable_PlayerOverlapZoneEndOverlap final
{
public:
	class UPrimitiveComponent*                    overlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DeathBedInteractable_PlayerOverlapZoneEndOverlap) == 0x000008, "Wrong alignment on DeathBedInteractable_PlayerOverlapZoneEndOverlap");
static_assert(sizeof(DeathBedInteractable_PlayerOverlapZoneEndOverlap) == 0x000020, "Wrong size on DeathBedInteractable_PlayerOverlapZoneEndOverlap");
static_assert(offsetof(DeathBedInteractable_PlayerOverlapZoneEndOverlap, overlappedComponent) == 0x000000, "Member 'DeathBedInteractable_PlayerOverlapZoneEndOverlap::overlappedComponent' has a wrong offset!");
static_assert(offsetof(DeathBedInteractable_PlayerOverlapZoneEndOverlap, otherActor) == 0x000008, "Member 'DeathBedInteractable_PlayerOverlapZoneEndOverlap::otherActor' has a wrong offset!");
static_assert(offsetof(DeathBedInteractable_PlayerOverlapZoneEndOverlap, otherComp) == 0x000010, "Member 'DeathBedInteractable_PlayerOverlapZoneEndOverlap::otherComp' has a wrong offset!");
static_assert(offsetof(DeathBedInteractable_PlayerOverlapZoneEndOverlap, otherBodyIndex) == 0x000018, "Member 'DeathBedInteractable_PlayerOverlapZoneEndOverlap::otherBodyIndex' has a wrong offset!");

// Function TheExecutioner.DeathBedInteractable.SetInDeathBedCamper
// 0x0008 (0x0008 - 0x0000)
struct DeathBedInteractable_SetInDeathBedCamper final
{
public:
	class ACamperPlayer*                          camperPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathBedInteractable_SetInDeathBedCamper) == 0x000008, "Wrong alignment on DeathBedInteractable_SetInDeathBedCamper");
static_assert(sizeof(DeathBedInteractable_SetInDeathBedCamper) == 0x000008, "Wrong size on DeathBedInteractable_SetInDeathBedCamper");
static_assert(offsetof(DeathBedInteractable_SetInDeathBedCamper, camperPlayer) == 0x000000, "Member 'DeathBedInteractable_SetInDeathBedCamper::camperPlayer' has a wrong offset!");

// Function TheExecutioner.DeathBedInteractable.CanRescueSurvivor
// 0x0001 (0x0001 - 0x0000)
struct DeathBedInteractable_CanRescueSurvivor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathBedInteractable_CanRescueSurvivor) == 0x000001, "Wrong alignment on DeathBedInteractable_CanRescueSurvivor");
static_assert(sizeof(DeathBedInteractable_CanRescueSurvivor) == 0x000001, "Wrong size on DeathBedInteractable_CanRescueSurvivor");
static_assert(offsetof(DeathBedInteractable_CanRescueSurvivor, ReturnValue) == 0x000000, "Member 'DeathBedInteractable_CanRescueSurvivor::ReturnValue' has a wrong offset!");

// Function TheExecutioner.DeathBedInteractable.GetInDeathBedCamper
// 0x0008 (0x0008 - 0x0000)
struct DeathBedInteractable_GetInDeathBedCamper final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathBedInteractable_GetInDeathBedCamper) == 0x000008, "Wrong alignment on DeathBedInteractable_GetInDeathBedCamper");
static_assert(sizeof(DeathBedInteractable_GetInDeathBedCamper) == 0x000008, "Wrong size on DeathBedInteractable_GetInDeathBedCamper");
static_assert(offsetof(DeathBedInteractable_GetInDeathBedCamper, ReturnValue) == 0x000000, "Member 'DeathBedInteractable_GetInDeathBedCamper::ReturnValue' has a wrong offset!");

// Function TheExecutioner.DeathBedInteractable.GetMontagePlayer
// 0x0008 (0x0008 - 0x0000)
struct DeathBedInteractable_GetMontagePlayer final
{
public:
	class UMontagePlayer*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathBedInteractable_GetMontagePlayer) == 0x000008, "Wrong alignment on DeathBedInteractable_GetMontagePlayer");
static_assert(sizeof(DeathBedInteractable_GetMontagePlayer) == 0x000008, "Wrong size on DeathBedInteractable_GetMontagePlayer");
static_assert(offsetof(DeathBedInteractable_GetMontagePlayer, ReturnValue) == 0x000000, "Member 'DeathBedInteractable_GetMontagePlayer::ReturnValue' has a wrong offset!");

// Function TheExecutioner.DeathBedInteractable.GetRescuerSnapPosition
// 0x000C (0x000C - 0x0000)
struct DeathBedInteractable_GetRescuerSnapPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathBedInteractable_GetRescuerSnapPosition) == 0x000004, "Wrong alignment on DeathBedInteractable_GetRescuerSnapPosition");
static_assert(sizeof(DeathBedInteractable_GetRescuerSnapPosition) == 0x00000C, "Wrong size on DeathBedInteractable_GetRescuerSnapPosition");
static_assert(offsetof(DeathBedInteractable_GetRescuerSnapPosition, ReturnValue) == 0x000000, "Member 'DeathBedInteractable_GetRescuerSnapPosition::ReturnValue' has a wrong offset!");

// Function TheExecutioner.DeathBedRescueInteraction.GetRescuerSnapPosition
// 0x000C (0x000C - 0x0000)
struct DeathBedRescueInteraction_GetRescuerSnapPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeathBedRescueInteraction_GetRescuerSnapPosition) == 0x000004, "Wrong alignment on DeathBedRescueInteraction_GetRescuerSnapPosition");
static_assert(sizeof(DeathBedRescueInteraction_GetRescuerSnapPosition) == 0x00000C, "Wrong size on DeathBedRescueInteraction_GetRescuerSnapPosition");
static_assert(offsetof(DeathBedRescueInteraction_GetRescuerSnapPosition, ReturnValue) == 0x000000, "Member 'DeathBedRescueInteraction_GetRescuerSnapPosition::ReturnValue' has a wrong offset!");

// Function TheExecutioner.Deathbound.MakeSurvivorScream
// 0x0008 (0x0008 - 0x0000)
struct Deathbound_MakeSurvivorScream final
{
public:
	const class ACamperPlayer*                    survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Deathbound_MakeSurvivorScream) == 0x000008, "Wrong alignment on Deathbound_MakeSurvivorScream");
static_assert(sizeof(Deathbound_MakeSurvivorScream) == 0x000008, "Wrong size on Deathbound_MakeSurvivorScream");
static_assert(offsetof(Deathbound_MakeSurvivorScream, survivor) == 0x000000, "Member 'Deathbound_MakeSurvivorScream::survivor' has a wrong offset!");

// Function TheExecutioner.Deathbound.GetRevealLocationDuration
// 0x0004 (0x0004 - 0x0000)
struct Deathbound_GetRevealLocationDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Deathbound_GetRevealLocationDuration) == 0x000004, "Wrong alignment on Deathbound_GetRevealLocationDuration");
static_assert(sizeof(Deathbound_GetRevealLocationDuration) == 0x000004, "Wrong size on Deathbound_GetRevealLocationDuration");
static_assert(offsetof(Deathbound_GetRevealLocationDuration, ReturnValue) == 0x000000, "Member 'Deathbound_GetRevealLocationDuration::ReturnValue' has a wrong offset!");

// Function TheExecutioner.ExecutionerTormentAttack.Multicast_TormentHitTarget
// 0x0010 (0x0010 - 0x0000)
struct ExecutionerTormentAttack_Multicast_TormentHitTarget final
{
public:
	class ADBDPlayer*                             target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hitCosmeticOnly;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExecutionerTormentAttack_Multicast_TormentHitTarget) == 0x000008, "Wrong alignment on ExecutionerTormentAttack_Multicast_TormentHitTarget");
static_assert(sizeof(ExecutionerTormentAttack_Multicast_TormentHitTarget) == 0x000010, "Wrong size on ExecutionerTormentAttack_Multicast_TormentHitTarget");
static_assert(offsetof(ExecutionerTormentAttack_Multicast_TormentHitTarget, target) == 0x000000, "Member 'ExecutionerTormentAttack_Multicast_TormentHitTarget::target' has a wrong offset!");
static_assert(offsetof(ExecutionerTormentAttack_Multicast_TormentHitTarget, hitCosmeticOnly) == 0x000008, "Member 'ExecutionerTormentAttack_Multicast_TormentHitTarget::hitCosmeticOnly' has a wrong offset!");

// Function TheExecutioner.ExecutionerTormentAttack.Server_TormentTryHitTargetNotInCoolDown
// 0x0008 (0x0008 - 0x0000)
struct ExecutionerTormentAttack_Server_TormentTryHitTargetNotInCoolDown final
{
public:
	class ADBDPlayer*                             target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExecutionerTormentAttack_Server_TormentTryHitTargetNotInCoolDown) == 0x000008, "Wrong alignment on ExecutionerTormentAttack_Server_TormentTryHitTargetNotInCoolDown");
static_assert(sizeof(ExecutionerTormentAttack_Server_TormentTryHitTargetNotInCoolDown) == 0x000008, "Wrong size on ExecutionerTormentAttack_Server_TormentTryHitTargetNotInCoolDown");
static_assert(offsetof(ExecutionerTormentAttack_Server_TormentTryHitTargetNotInCoolDown, target) == 0x000000, "Member 'ExecutionerTormentAttack_Server_TormentTryHitTargetNotInCoolDown::target' has a wrong offset!");

// Function TheExecutioner.MobileTormentTrailRenderer.Multicast_AddInstance
// 0x0010 (0x0010 - 0x0000)
struct MobileTormentTrailRenderer_Multicast_AddInstance final
{
public:
	class ABaseTormentTrailPoint*                 trailPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAttackTrailPoint;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MobileTormentTrailRenderer_Multicast_AddInstance) == 0x000008, "Wrong alignment on MobileTormentTrailRenderer_Multicast_AddInstance");
static_assert(sizeof(MobileTormentTrailRenderer_Multicast_AddInstance) == 0x000010, "Wrong size on MobileTormentTrailRenderer_Multicast_AddInstance");
static_assert(offsetof(MobileTormentTrailRenderer_Multicast_AddInstance, trailPoint) == 0x000000, "Member 'MobileTormentTrailRenderer_Multicast_AddInstance::trailPoint' has a wrong offset!");
static_assert(offsetof(MobileTormentTrailRenderer_Multicast_AddInstance, isAttackTrailPoint) == 0x000008, "Member 'MobileTormentTrailRenderer_Multicast_AddInstance::isAttackTrailPoint' has a wrong offset!");

// Function TheExecutioner.MobileTormentTrailRenderer.Multicast_RemoveInstance
// 0x0008 (0x0008 - 0x0000)
struct MobileTormentTrailRenderer_Multicast_RemoveInstance final
{
public:
	class ABaseTormentTrailPoint*                 trailPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobileTormentTrailRenderer_Multicast_RemoveInstance) == 0x000008, "Wrong alignment on MobileTormentTrailRenderer_Multicast_RemoveInstance");
static_assert(sizeof(MobileTormentTrailRenderer_Multicast_RemoveInstance) == 0x000008, "Wrong size on MobileTormentTrailRenderer_Multicast_RemoveInstance");
static_assert(offsetof(MobileTormentTrailRenderer_Multicast_RemoveInstance, trailPoint) == 0x000000, "Member 'MobileTormentTrailRenderer_Multicast_RemoveInstance::trailPoint' has a wrong offset!");

// Function TheExecutioner.RepressedAlliance.OnRep_BlockedGenerator
// 0x0008 (0x0008 - 0x0000)
struct RepressedAlliance_OnRep_BlockedGenerator final
{
public:
	class AGenerator*                             oldGenerator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RepressedAlliance_OnRep_BlockedGenerator) == 0x000008, "Wrong alignment on RepressedAlliance_OnRep_BlockedGenerator");
static_assert(sizeof(RepressedAlliance_OnRep_BlockedGenerator) == 0x000008, "Wrong size on RepressedAlliance_OnRep_BlockedGenerator");
static_assert(offsetof(RepressedAlliance_OnRep_BlockedGenerator, oldGenerator) == 0x000000, "Member 'RepressedAlliance_OnRep_BlockedGenerator::oldGenerator' has a wrong offset!");

// Function TheExecutioner.RepressedAlliance.OnRep_CurrentRepairInteractionWithAbility
// 0x0008 (0x0008 - 0x0000)
struct RepressedAlliance_OnRep_CurrentRepairInteractionWithAbility final
{
public:
	class UInteractionDefinition*                 oldRepairInteraction;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RepressedAlliance_OnRep_CurrentRepairInteractionWithAbility) == 0x000008, "Wrong alignment on RepressedAlliance_OnRep_CurrentRepairInteractionWithAbility");
static_assert(sizeof(RepressedAlliance_OnRep_CurrentRepairInteractionWithAbility) == 0x000008, "Wrong size on RepressedAlliance_OnRep_CurrentRepairInteractionWithAbility");
static_assert(offsetof(RepressedAlliance_OnRep_CurrentRepairInteractionWithAbility, oldRepairInteraction) == 0x000000, "Member 'RepressedAlliance_OnRep_CurrentRepairInteractionWithAbility::oldRepairInteraction' has a wrong offset!");

// Function TheExecutioner.RepressedAlliance.Server_OnActionInputPressed
// 0x0008 (0x0008 - 0x0000)
struct RepressedAlliance_Server_OnActionInputPressed final
{
public:
	class AGenerator*                             generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RepressedAlliance_Server_OnActionInputPressed) == 0x000008, "Wrong alignment on RepressedAlliance_Server_OnActionInputPressed");
static_assert(sizeof(RepressedAlliance_Server_OnActionInputPressed) == 0x000008, "Wrong size on RepressedAlliance_Server_OnActionInputPressed");
static_assert(offsetof(RepressedAlliance_Server_OnActionInputPressed, generator) == 0x000000, "Member 'RepressedAlliance_Server_OnActionInputPressed::generator' has a wrong offset!");

// Function TheExecutioner.SendToDeathBedInteraction.Multicast_SendCamperToDeathBed
// 0x0008 (0x0008 - 0x0000)
struct SendToDeathBedInteraction_Multicast_SendCamperToDeathBed final
{
public:
	class ADeathBedInteractable*                  deathBed;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SendToDeathBedInteraction_Multicast_SendCamperToDeathBed) == 0x000008, "Wrong alignment on SendToDeathBedInteraction_Multicast_SendCamperToDeathBed");
static_assert(sizeof(SendToDeathBedInteraction_Multicast_SendCamperToDeathBed) == 0x000008, "Wrong size on SendToDeathBedInteraction_Multicast_SendCamperToDeathBed");
static_assert(offsetof(SendToDeathBedInteraction_Multicast_SendCamperToDeathBed, deathBed) == 0x000000, "Member 'SendToDeathBedInteraction_Multicast_SendCamperToDeathBed::deathBed' has a wrong offset!");

// Function TheExecutioner.SendToDeathBedInteraction.GetOwningSurvivor
// 0x0008 (0x0008 - 0x0000)
struct SendToDeathBedInteraction_GetOwningSurvivor final
{
public:
	const class ACamperPlayer*                    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SendToDeathBedInteraction_GetOwningSurvivor) == 0x000008, "Wrong alignment on SendToDeathBedInteraction_GetOwningSurvivor");
static_assert(sizeof(SendToDeathBedInteraction_GetOwningSurvivor) == 0x000008, "Wrong size on SendToDeathBedInteraction_GetOwningSurvivor");
static_assert(offsetof(SendToDeathBedInteraction_GetOwningSurvivor, ReturnValue) == 0x000000, "Member 'SendToDeathBedInteraction_GetOwningSurvivor::ReturnValue' has a wrong offset!");

// Function TheExecutioner.SoulGuard.Authority_OnSurvivorHealed
// 0x0018 (0x0018 - 0x0000)
struct SoulGuard_Authority_OnSurvivorHealed final
{
public:
	struct FCamperHealResult                      healResult;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoulGuard_Authority_OnSurvivorHealed) == 0x000008, "Wrong alignment on SoulGuard_Authority_OnSurvivorHealed");
static_assert(sizeof(SoulGuard_Authority_OnSurvivorHealed) == 0x000018, "Wrong size on SoulGuard_Authority_OnSurvivorHealed");
static_assert(offsetof(SoulGuard_Authority_OnSurvivorHealed, healResult) == 0x000000, "Member 'SoulGuard_Authority_OnSurvivorHealed::healResult' has a wrong offset!");

// Function TheExecutioner.TheExecutionerCheatComponent.DBD_DisplayAllDeathBed
// 0x0001 (0x0001 - 0x0000)
struct TheExecutionerCheatComponent_DBD_DisplayAllDeathBed final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheExecutionerCheatComponent_DBD_DisplayAllDeathBed) == 0x000001, "Wrong alignment on TheExecutionerCheatComponent_DBD_DisplayAllDeathBed");
static_assert(sizeof(TheExecutionerCheatComponent_DBD_DisplayAllDeathBed) == 0x000001, "Wrong size on TheExecutionerCheatComponent_DBD_DisplayAllDeathBed");
static_assert(offsetof(TheExecutionerCheatComponent_DBD_DisplayAllDeathBed, value) == 0x000000, "Member 'TheExecutionerCheatComponent_DBD_DisplayAllDeathBed::value' has a wrong offset!");

// Function TheExecutioner.TheExecutionerCheatComponent.DBD_SetAgonyOnLocallyControlledPlayer
// 0x0018 (0x0018 - 0x0000)
struct TheExecutionerCheatComponent_DBD_SetAgonyOnLocallyControlledPlayer final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 localPlayerId;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheExecutionerCheatComponent_DBD_SetAgonyOnLocallyControlledPlayer) == 0x000008, "Wrong alignment on TheExecutionerCheatComponent_DBD_SetAgonyOnLocallyControlledPlayer");
static_assert(sizeof(TheExecutionerCheatComponent_DBD_SetAgonyOnLocallyControlledPlayer) == 0x000018, "Wrong size on TheExecutionerCheatComponent_DBD_SetAgonyOnLocallyControlledPlayer");
static_assert(offsetof(TheExecutionerCheatComponent_DBD_SetAgonyOnLocallyControlledPlayer, value) == 0x000000, "Member 'TheExecutionerCheatComponent_DBD_SetAgonyOnLocallyControlledPlayer::value' has a wrong offset!");
static_assert(offsetof(TheExecutionerCheatComponent_DBD_SetAgonyOnLocallyControlledPlayer, localPlayerId) == 0x000008, "Member 'TheExecutionerCheatComponent_DBD_SetAgonyOnLocallyControlledPlayer::localPlayerId' has a wrong offset!");

// Function TheExecutioner.TheExecutionerCheatComponent.DBD_SetCanBeAgonyMoriedOnLocallyControlledPlayer
// 0x0018 (0x0018 - 0x0000)
struct TheExecutionerCheatComponent_DBD_SetCanBeAgonyMoriedOnLocallyControlledPlayer final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 localPlayerId;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheExecutionerCheatComponent_DBD_SetCanBeAgonyMoriedOnLocallyControlledPlayer) == 0x000008, "Wrong alignment on TheExecutionerCheatComponent_DBD_SetCanBeAgonyMoriedOnLocallyControlledPlayer");
static_assert(sizeof(TheExecutionerCheatComponent_DBD_SetCanBeAgonyMoriedOnLocallyControlledPlayer) == 0x000018, "Wrong size on TheExecutionerCheatComponent_DBD_SetCanBeAgonyMoriedOnLocallyControlledPlayer");
static_assert(offsetof(TheExecutionerCheatComponent_DBD_SetCanBeAgonyMoriedOnLocallyControlledPlayer, value) == 0x000000, "Member 'TheExecutionerCheatComponent_DBD_SetCanBeAgonyMoriedOnLocallyControlledPlayer::value' has a wrong offset!");
static_assert(offsetof(TheExecutionerCheatComponent_DBD_SetCanBeAgonyMoriedOnLocallyControlledPlayer, localPlayerId) == 0x000008, "Member 'TheExecutionerCheatComponent_DBD_SetCanBeAgonyMoriedOnLocallyControlledPlayer::localPlayerId' has a wrong offset!");

// Function TheExecutioner.TrailControllerBase.ActivateCosmetic
// 0x0001 (0x0001 - 0x0000)
struct TrailControllerBase_ActivateCosmetic final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrailControllerBase_ActivateCosmetic) == 0x000001, "Wrong alignment on TrailControllerBase_ActivateCosmetic");
static_assert(sizeof(TrailControllerBase_ActivateCosmetic) == 0x000001, "Wrong size on TrailControllerBase_ActivateCosmetic");
static_assert(offsetof(TrailControllerBase_ActivateCosmetic, value) == 0x000000, "Member 'TrailControllerBase_ActivateCosmetic::value' has a wrong offset!");

// Function TheExecutioner.TrailControllerBase.OnAcquireChanged
// 0x0001 (0x0001 - 0x0000)
struct TrailControllerBase_OnAcquireChanged final
{
public:
	bool                                          acquired;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrailControllerBase_OnAcquireChanged) == 0x000001, "Wrong alignment on TrailControllerBase_OnAcquireChanged");
static_assert(sizeof(TrailControllerBase_OnAcquireChanged) == 0x000001, "Wrong size on TrailControllerBase_OnAcquireChanged");
static_assert(offsetof(TrailControllerBase_OnAcquireChanged, acquired) == 0x000000, "Member 'TrailControllerBase_OnAcquireChanged::acquired' has a wrong offset!");

// Function TheExecutioner.TrailControllerBase.OnTrailPointDeath
// 0x0008 (0x0008 - 0x0000)
struct TrailControllerBase_OnTrailPointDeath final
{
public:
	class ABaseTormentTrailPoint*                 baseTrailPoint;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrailControllerBase_OnTrailPointDeath) == 0x000008, "Wrong alignment on TrailControllerBase_OnTrailPointDeath");
static_assert(sizeof(TrailControllerBase_OnTrailPointDeath) == 0x000008, "Wrong size on TrailControllerBase_OnTrailPointDeath");
static_assert(offsetof(TrailControllerBase_OnTrailPointDeath, baseTrailPoint) == 0x000000, "Member 'TrailControllerBase_OnTrailPointDeath::baseTrailPoint' has a wrong offset!");

// Function TheExecutioner.TormentAttackTrailController.Multicast_StartAttackTrail
// 0x001C (0x001C - 0x0000)
struct TormentAttackTrailController_Multicast_StartAttackTrail final
{
public:
	float                                         serverTimeSpawn;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  location;                                          // 0x0004(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rotation;                                          // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TormentAttackTrailController_Multicast_StartAttackTrail) == 0x000004, "Wrong alignment on TormentAttackTrailController_Multicast_StartAttackTrail");
static_assert(sizeof(TormentAttackTrailController_Multicast_StartAttackTrail) == 0x00001C, "Wrong size on TormentAttackTrailController_Multicast_StartAttackTrail");
static_assert(offsetof(TormentAttackTrailController_Multicast_StartAttackTrail, serverTimeSpawn) == 0x000000, "Member 'TormentAttackTrailController_Multicast_StartAttackTrail::serverTimeSpawn' has a wrong offset!");
static_assert(offsetof(TormentAttackTrailController_Multicast_StartAttackTrail, location) == 0x000004, "Member 'TormentAttackTrailController_Multicast_StartAttackTrail::location' has a wrong offset!");
static_assert(offsetof(TormentAttackTrailController_Multicast_StartAttackTrail, rotation) == 0x000010, "Member 'TormentAttackTrailController_Multicast_StartAttackTrail::rotation' has a wrong offset!");

// Function TheExecutioner.TormentAttackTrailController.OnTrailPointRemovedCosmetic
// 0x0004 (0x0004 - 0x0000)
struct TormentAttackTrailController_OnTrailPointRemovedCosmetic final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TormentAttackTrailController_OnTrailPointRemovedCosmetic) == 0x000004, "Wrong alignment on TormentAttackTrailController_OnTrailPointRemovedCosmetic");
static_assert(sizeof(TormentAttackTrailController_OnTrailPointRemovedCosmetic) == 0x000004, "Wrong size on TormentAttackTrailController_OnTrailPointRemovedCosmetic");
static_assert(offsetof(TormentAttackTrailController_OnTrailPointRemovedCosmetic, index) == 0x000000, "Member 'TormentAttackTrailController_OnTrailPointRemovedCosmetic::index' has a wrong offset!");

// Function TheExecutioner.TormentAttackTrailPoint.DisplayTrailSplineMesh
// 0x0010 (0x0010 - 0x0000)
struct TormentAttackTrailPoint_DisplayTrailSplineMesh final
{
public:
	const class USplineComponent*                 splinemesh;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         indexInTrail;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TormentAttackTrailPoint_DisplayTrailSplineMesh) == 0x000008, "Wrong alignment on TormentAttackTrailPoint_DisplayTrailSplineMesh");
static_assert(sizeof(TormentAttackTrailPoint_DisplayTrailSplineMesh) == 0x000010, "Wrong size on TormentAttackTrailPoint_DisplayTrailSplineMesh");
static_assert(offsetof(TormentAttackTrailPoint_DisplayTrailSplineMesh, splinemesh) == 0x000000, "Member 'TormentAttackTrailPoint_DisplayTrailSplineMesh::splinemesh' has a wrong offset!");
static_assert(offsetof(TormentAttackTrailPoint_DisplayTrailSplineMesh, indexInTrail) == 0x000008, "Member 'TormentAttackTrailPoint_DisplayTrailSplineMesh::indexInTrail' has a wrong offset!");

// Function TheExecutioner.TormentMode.IsInTormentMode
// 0x0001 (0x0001 - 0x0000)
struct TormentMode_IsInTormentMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TormentMode_IsInTormentMode) == 0x000001, "Wrong alignment on TormentMode_IsInTormentMode");
static_assert(sizeof(TormentMode_IsInTormentMode) == 0x000001, "Wrong size on TormentMode_IsInTormentMode");
static_assert(offsetof(TormentMode_IsInTormentMode, ReturnValue) == 0x000000, "Member 'TormentMode_IsInTormentMode::ReturnValue' has a wrong offset!");

// Function TheExecutioner.Tormentor.GetTormentTrailAttackSpawnPoint
// 0x000C (0x000C - 0x0000)
struct Tormentor_GetTormentTrailAttackSpawnPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tormentor_GetTormentTrailAttackSpawnPoint) == 0x000004, "Wrong alignment on Tormentor_GetTormentTrailAttackSpawnPoint");
static_assert(sizeof(Tormentor_GetTormentTrailAttackSpawnPoint) == 0x00000C, "Wrong size on Tormentor_GetTormentTrailAttackSpawnPoint");
static_assert(offsetof(Tormentor_GetTormentTrailAttackSpawnPoint, ReturnValue) == 0x000000, "Member 'Tormentor_GetTormentTrailAttackSpawnPoint::ReturnValue' has a wrong offset!");

// Function TheExecutioner.Tormentor.GetTormentTrailSpawnPoint
// 0x000C (0x000C - 0x0000)
struct Tormentor_GetTormentTrailSpawnPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tormentor_GetTormentTrailSpawnPoint) == 0x000004, "Wrong alignment on Tormentor_GetTormentTrailSpawnPoint");
static_assert(sizeof(Tormentor_GetTormentTrailSpawnPoint) == 0x00000C, "Wrong size on Tormentor_GetTormentTrailSpawnPoint");
static_assert(offsetof(Tormentor_GetTormentTrailSpawnPoint, ReturnValue) == 0x000000, "Member 'Tormentor_GetTormentTrailSpawnPoint::ReturnValue' has a wrong offset!");

// Function TheExecutioner.TormentTrailController.Server_SpawnTormentTrailPoint
// 0x0020 (0x0020 - 0x0000)
struct TormentTrailController_Server_SpawnTormentTrailPoint final
{
public:
	class ATormentTrailPoint*                     trailPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  location;                                          // 0x0008(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rotation;                                          // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TormentTrailController_Server_SpawnTormentTrailPoint) == 0x000008, "Wrong alignment on TormentTrailController_Server_SpawnTormentTrailPoint");
static_assert(sizeof(TormentTrailController_Server_SpawnTormentTrailPoint) == 0x000020, "Wrong size on TormentTrailController_Server_SpawnTormentTrailPoint");
static_assert(offsetof(TormentTrailController_Server_SpawnTormentTrailPoint, trailPoint) == 0x000000, "Member 'TormentTrailController_Server_SpawnTormentTrailPoint::trailPoint' has a wrong offset!");
static_assert(offsetof(TormentTrailController_Server_SpawnTormentTrailPoint, location) == 0x000008, "Member 'TormentTrailController_Server_SpawnTormentTrailPoint::location' has a wrong offset!");
static_assert(offsetof(TormentTrailController_Server_SpawnTormentTrailPoint, rotation) == 0x000014, "Member 'TormentTrailController_Server_SpawnTormentTrailPoint::rotation' has a wrong offset!");

// Function TheExecutioner.TormentTrailPoint.ActivateCosmetic
// 0x0001 (0x0001 - 0x0000)
struct TormentTrailPoint_ActivateCosmetic final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TormentTrailPoint_ActivateCosmetic) == 0x000001, "Wrong alignment on TormentTrailPoint_ActivateCosmetic");
static_assert(sizeof(TormentTrailPoint_ActivateCosmetic) == 0x000001, "Wrong size on TormentTrailPoint_ActivateCosmetic");
static_assert(offsetof(TormentTrailPoint_ActivateCosmetic, value) == 0x000000, "Member 'TormentTrailPoint_ActivateCosmetic::value' has a wrong offset!");

// Function TheExecutioner.TormentTrailPoint.AddTrailCosmetic
// 0x0010 (0x0010 - 0x0000)
struct TormentTrailPoint_AddTrailCosmetic final
{
public:
	const class USplineComponent*                 splineComponent;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         indexInTrail;                                      // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TormentTrailPoint_AddTrailCosmetic) == 0x000008, "Wrong alignment on TormentTrailPoint_AddTrailCosmetic");
static_assert(sizeof(TormentTrailPoint_AddTrailCosmetic) == 0x000010, "Wrong size on TormentTrailPoint_AddTrailCosmetic");
static_assert(offsetof(TormentTrailPoint_AddTrailCosmetic, splineComponent) == 0x000000, "Member 'TormentTrailPoint_AddTrailCosmetic::splineComponent' has a wrong offset!");
static_assert(offsetof(TormentTrailPoint_AddTrailCosmetic, indexInTrail) == 0x000008, "Member 'TormentTrailPoint_AddTrailCosmetic::indexInTrail' has a wrong offset!");

// Function TheExecutioner.TormentTrailPoint.OnAcquireChanged
// 0x0001 (0x0001 - 0x0000)
struct TormentTrailPoint_OnAcquireChanged final
{
public:
	bool                                          acquired;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TormentTrailPoint_OnAcquireChanged) == 0x000001, "Wrong alignment on TormentTrailPoint_OnAcquireChanged");
static_assert(sizeof(TormentTrailPoint_OnAcquireChanged) == 0x000001, "Wrong size on TormentTrailPoint_OnAcquireChanged");
static_assert(offsetof(TormentTrailPoint_OnAcquireChanged, acquired) == 0x000000, "Member 'TormentTrailPoint_OnAcquireChanged::acquired' has a wrong offset!");

// Function TheExecutioner.TormentTrailPoint.RefreshTrailPointCosmetic
// 0x0001 (0x0001 - 0x0000)
struct TormentTrailPoint_RefreshTrailPointCosmetic final
{
public:
	ETrailPointRefreshReason                      trailPointRefreshReason;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TormentTrailPoint_RefreshTrailPointCosmetic) == 0x000001, "Wrong alignment on TormentTrailPoint_RefreshTrailPointCosmetic");
static_assert(sizeof(TormentTrailPoint_RefreshTrailPointCosmetic) == 0x000001, "Wrong size on TormentTrailPoint_RefreshTrailPointCosmetic");
static_assert(offsetof(TormentTrailPoint_RefreshTrailPointCosmetic, trailPointRefreshReason) == 0x000000, "Member 'TormentTrailPoint_RefreshTrailPointCosmetic::trailPointRefreshReason' has a wrong offset!");

// Function TheExecutioner.TormentTrailPoint.GetTrailLocationAndTangeant
// 0x0040 (0x0040 - 0x0000)
struct TormentTrailPoint_GetTrailLocationAndTangeant final
{
public:
	int32                                         indexInTrail;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USplineComponent*                 splineComponent;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                outStartLocation;                                  // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                outStartTangent;                                   // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                outEndLocation;                                    // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                outEndTangent;                                     // 0x0034(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TormentTrailPoint_GetTrailLocationAndTangeant) == 0x000008, "Wrong alignment on TormentTrailPoint_GetTrailLocationAndTangeant");
static_assert(sizeof(TormentTrailPoint_GetTrailLocationAndTangeant) == 0x000040, "Wrong size on TormentTrailPoint_GetTrailLocationAndTangeant");
static_assert(offsetof(TormentTrailPoint_GetTrailLocationAndTangeant, indexInTrail) == 0x000000, "Member 'TormentTrailPoint_GetTrailLocationAndTangeant::indexInTrail' has a wrong offset!");
static_assert(offsetof(TormentTrailPoint_GetTrailLocationAndTangeant, splineComponent) == 0x000008, "Member 'TormentTrailPoint_GetTrailLocationAndTangeant::splineComponent' has a wrong offset!");
static_assert(offsetof(TormentTrailPoint_GetTrailLocationAndTangeant, outStartLocation) == 0x000010, "Member 'TormentTrailPoint_GetTrailLocationAndTangeant::outStartLocation' has a wrong offset!");
static_assert(offsetof(TormentTrailPoint_GetTrailLocationAndTangeant, outStartTangent) == 0x00001C, "Member 'TormentTrailPoint_GetTrailLocationAndTangeant::outStartTangent' has a wrong offset!");
static_assert(offsetof(TormentTrailPoint_GetTrailLocationAndTangeant, outEndLocation) == 0x000028, "Member 'TormentTrailPoint_GetTrailLocationAndTangeant::outEndLocation' has a wrong offset!");
static_assert(offsetof(TormentTrailPoint_GetTrailLocationAndTangeant, outEndTangent) == 0x000034, "Member 'TormentTrailPoint_GetTrailLocationAndTangeant::outEndTangent' has a wrong offset!");

// Function TheExecutioner.TormentTrailPointCollectionComponent.OnTrailAcquireChanged
// 0x0010 (0x0010 - 0x0000)
struct TormentTrailPointCollectionComponent_OnTrailAcquireChanged final
{
public:
	class ATormentTrailPoint*                     trailPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TormentTrailPointCollectionComponent_OnTrailAcquireChanged) == 0x000008, "Wrong alignment on TormentTrailPointCollectionComponent_OnTrailAcquireChanged");
static_assert(sizeof(TormentTrailPointCollectionComponent_OnTrailAcquireChanged) == 0x000010, "Wrong size on TormentTrailPointCollectionComponent_OnTrailAcquireChanged");
static_assert(offsetof(TormentTrailPointCollectionComponent_OnTrailAcquireChanged, trailPoint) == 0x000000, "Member 'TormentTrailPointCollectionComponent_OnTrailAcquireChanged::trailPoint' has a wrong offset!");
static_assert(offsetof(TormentTrailPointCollectionComponent_OnTrailAcquireChanged, value) == 0x000008, "Member 'TormentTrailPointCollectionComponent_OnTrailAcquireChanged::value' has a wrong offset!");

// Function TheExecutioner.TormentTrailSpawnerComponent.OnInRangeChanged
// 0x0010 (0x0010 - 0x0000)
struct TormentTrailSpawnerComponent_OnInRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           actor;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TormentTrailSpawnerComponent_OnInRangeChanged) == 0x000008, "Wrong alignment on TormentTrailSpawnerComponent_OnInRangeChanged");
static_assert(sizeof(TormentTrailSpawnerComponent_OnInRangeChanged) == 0x000010, "Wrong size on TormentTrailSpawnerComponent_OnInRangeChanged");
static_assert(offsetof(TormentTrailSpawnerComponent_OnInRangeChanged, inRange) == 0x000000, "Member 'TormentTrailSpawnerComponent_OnInRangeChanged::inRange' has a wrong offset!");
static_assert(offsetof(TormentTrailSpawnerComponent_OnInRangeChanged, actor) == 0x000008, "Member 'TormentTrailSpawnerComponent_OnInRangeChanged::actor' has a wrong offset!");

// Function TheExecutioner.TormentTrailSpawnerComponent.Server_RequestMoreActorInPool
// 0x0001 (0x0001 - 0x0000)
struct TormentTrailSpawnerComponent_Server_RequestMoreActorInPool final
{
public:
	ETrailType                                    trailType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TormentTrailSpawnerComponent_Server_RequestMoreActorInPool) == 0x000001, "Wrong alignment on TormentTrailSpawnerComponent_Server_RequestMoreActorInPool");
static_assert(sizeof(TormentTrailSpawnerComponent_Server_RequestMoreActorInPool) == 0x000001, "Wrong size on TormentTrailSpawnerComponent_Server_RequestMoreActorInPool");
static_assert(offsetof(TormentTrailSpawnerComponent_Server_RequestMoreActorInPool, trailType) == 0x000000, "Member 'TormentTrailSpawnerComponent_Server_RequestMoreActorInPool::trailType' has a wrong offset!");

// Function TheExecutioner.TormentTrailSpawnerComponent.Server_StopTrailController
// 0x0008 (0x0008 - 0x0000)
struct TormentTrailSpawnerComponent_Server_StopTrailController final
{
public:
	class ATormentTrailController*                trailController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TormentTrailSpawnerComponent_Server_StopTrailController) == 0x000008, "Wrong alignment on TormentTrailSpawnerComponent_Server_StopTrailController");
static_assert(sizeof(TormentTrailSpawnerComponent_Server_StopTrailController) == 0x000008, "Wrong size on TormentTrailSpawnerComponent_Server_StopTrailController");
static_assert(offsetof(TormentTrailSpawnerComponent_Server_StopTrailController, trailController) == 0x000000, "Member 'TormentTrailSpawnerComponent_Server_StopTrailController::trailController' has a wrong offset!");

// Function TheExecutioner.TormentTrailSpawnerComponent.Sever_SpawnTrailController
// 0x0020 (0x0020 - 0x0000)
struct TormentTrailSpawnerComponent_Sever_SpawnTrailController final
{
public:
	class ATormentTrailController*                trailController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  location;                                          // 0x0008(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rotation;                                          // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TormentTrailSpawnerComponent_Sever_SpawnTrailController) == 0x000008, "Wrong alignment on TormentTrailSpawnerComponent_Sever_SpawnTrailController");
static_assert(sizeof(TormentTrailSpawnerComponent_Sever_SpawnTrailController) == 0x000020, "Wrong size on TormentTrailSpawnerComponent_Sever_SpawnTrailController");
static_assert(offsetof(TormentTrailSpawnerComponent_Sever_SpawnTrailController, trailController) == 0x000000, "Member 'TormentTrailSpawnerComponent_Sever_SpawnTrailController::trailController' has a wrong offset!");
static_assert(offsetof(TormentTrailSpawnerComponent_Sever_SpawnTrailController, location) == 0x000008, "Member 'TormentTrailSpawnerComponent_Sever_SpawnTrailController::location' has a wrong offset!");
static_assert(offsetof(TormentTrailSpawnerComponent_Sever_SpawnTrailController, rotation) == 0x000014, "Member 'TormentTrailSpawnerComponent_Sever_SpawnTrailController::rotation' has a wrong offset!");

// Function TheExecutioner.TrailOfTorment.OnRep_HighlightGenerator
// 0x0008 (0x0008 - 0x0000)
struct TrailOfTorment_OnRep_HighlightGenerator final
{
public:
	class AGenerator*                             _oldHighlightedGenerator;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrailOfTorment_OnRep_HighlightGenerator) == 0x000008, "Wrong alignment on TrailOfTorment_OnRep_HighlightGenerator");
static_assert(sizeof(TrailOfTorment_OnRep_HighlightGenerator) == 0x000008, "Wrong size on TrailOfTorment_OnRep_HighlightGenerator");
static_assert(offsetof(TrailOfTorment_OnRep_HighlightGenerator, _oldHighlightedGenerator) == 0x000000, "Member 'TrailOfTorment_OnRep_HighlightGenerator::_oldHighlightedGenerator' has a wrong offset!");

}

