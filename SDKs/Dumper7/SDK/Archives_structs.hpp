#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Archives

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum Archives.ECustomValueComparator
// NumValues: 0x0004
enum class ECustomValueComparator : uint8
{
	Equal                                    = 0,
	LessOrEqual                              = 1,
	GreaterOrEqual                           = 2,
	ECustomValueComparator_MAX               = 3,
};

// Enum Archives.EEventSubject
// NumValues: 0x0005
enum class EEventSubject : uint8
{
	Instigator                               = 0,
	Target                                   = 1,
	Any                                      = 2,
	None                                     = 3,
	EEventSubject_MAX                        = 4,
};

// Enum Archives.EEventCountComparisonOperator
// NumValues: 0x0006
enum class EEventCountComparisonOperator : uint8
{
	EqualTo                                  = 0,
	GreaterThan                              = 1,
	GreaterThanEqualTo                       = 2,
	LessThan                                 = 3,
	LessThanEqualTo                          = 4,
	EEventCountComparisonOperator_MAX        = 5,
};

// Enum Archives.ESubjectPerspective
// NumValues: 0x0003
enum class ESubjectPerspective : uint8
{
	Me                                       = 0,
	Other                                    = 1,
	ESubjectPerspective_MAX                  = 2,
};

// Enum Archives.EAllowedPlayerType
// NumValues: 0x0004
enum class EAllowedPlayerType : uint8
{
	All                                      = 0,
	KillerOnly                               = 1,
	SurvivorOnly                             = 2,
	EAllowedPlayerType_MAX                   = 3,
};

// Enum Archives.EInChaseTargetLogic
// NumValues: 0x0004
enum class EInChaseTargetLogic : uint8
{
	AnyOf                                    = 0,
	AllOf                                    = 1,
	NoneOf                                   = 2,
	EInChaseTargetLogic_MAX                  = 3,
};

// Enum Archives.EInstigatorTargetDistanceComparator
// NumValues: 0x0003
enum class EInstigatorTargetDistanceComparator : uint8
{
	LessOrEqual                              = 0,
	GreaterOrEqual                           = 1,
	EInstigatorTargetDistanceComparator_MAX  = 2,
};

// Enum Archives.ENearGameObjectQuestObjectProperty
// NumValues: 0x0007
enum class ENearGameObjectQuestObjectProperty : uint8
{
	NotRepaired                              = 0,
	NotSearched                              = 1,
	NotCleansed                              = 2,
	NotDestroyed                             = 3,
	Any                                      = 4,
	Count                                    = 5,
	ENearGameObjectQuestObjectProperty_MAX   = 6,
};

// Enum Archives.ENearGameObjectQuestObjectType
// NumValues: 0x0006
enum class ENearGameObjectQuestObjectType : uint8
{
	Generator                                = 0,
	Pallet                                   = 1,
	Chest                                    = 2,
	Totem                                    = 3,
	Count                                    = 4,
	ENearGameObjectQuestObjectType_MAX       = 5,
};

// ScriptStruct Archives.EventOccurrenceConditionData
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FEventOccurrenceConditionData final
{
public:
	struct FGameplayTag                           GameEventTag;                                      // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConditionSubject                             PreviousConditionSubject;                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConditionSubject                             CurrentConditionSubject;                           // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x52];                                       // 0x000E(0x0052)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEventOccurrenceConditionData) == 0x000008, "Wrong alignment on FEventOccurrenceConditionData");
static_assert(sizeof(FEventOccurrenceConditionData) == 0x000060, "Wrong size on FEventOccurrenceConditionData");
static_assert(offsetof(FEventOccurrenceConditionData, GameEventTag) == 0x000000, "Member 'FEventOccurrenceConditionData::GameEventTag' has a wrong offset!");
static_assert(offsetof(FEventOccurrenceConditionData, PreviousConditionSubject) == 0x00000C, "Member 'FEventOccurrenceConditionData::PreviousConditionSubject' has a wrong offset!");
static_assert(offsetof(FEventOccurrenceConditionData, CurrentConditionSubject) == 0x00000D, "Member 'FEventOccurrenceConditionData::CurrentConditionSubject' has a wrong offset!");

// ScriptStruct Archives.AnyEventConditionData
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FAnyEventConditionData final
{
public:
	struct FGameplayTag                           GameEventTag;                                      // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConditionSubject                             PreviousConditionSubject;                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConditionSubject                             CurrentConditionSubject;                           // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x52];                                       // 0x000E(0x0052)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnyEventConditionData) == 0x000008, "Wrong alignment on FAnyEventConditionData");
static_assert(sizeof(FAnyEventConditionData) == 0x000060, "Wrong size on FAnyEventConditionData");
static_assert(offsetof(FAnyEventConditionData, GameEventTag) == 0x000000, "Member 'FAnyEventConditionData::GameEventTag' has a wrong offset!");
static_assert(offsetof(FAnyEventConditionData, PreviousConditionSubject) == 0x00000C, "Member 'FAnyEventConditionData::PreviousConditionSubject' has a wrong offset!");
static_assert(offsetof(FAnyEventConditionData, CurrentConditionSubject) == 0x00000D, "Member 'FAnyEventConditionData::CurrentConditionSubject' has a wrong offset!");

}

