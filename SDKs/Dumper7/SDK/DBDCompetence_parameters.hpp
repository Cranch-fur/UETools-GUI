#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDCompetence

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "GameplayUtilities_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "StatSystem_structs.hpp"


namespace SDK::Params
{

// Function DBDCompetence.HasPlayerReachedWiggleFillPercentCondition.Authority_OnOwnerWiggleChargePercentChanged
// 0x0010 (0x0010 - 0x0000)
struct HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged final
{
public:
	class UChargeableComponent*                   chargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         percentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         totalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged) == 0x000008, "Wrong alignment on HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged");
static_assert(sizeof(HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged) == 0x000010, "Wrong size on HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged");
static_assert(offsetof(HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged, chargeableComponent) == 0x000000, "Member 'HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged::chargeableComponent' has a wrong offset!");
static_assert(offsetof(HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged, percentCompletionChange) == 0x000008, "Member 'HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged::percentCompletionChange' has a wrong offset!");
static_assert(offsetof(HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged, totalPercentComplete) == 0x00000C, "Member 'HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged::totalPercentComplete' has a wrong offset!");

// Function DBDCompetence.NoOneLeftBehind.Authority_OnExitGatePoweredApplicableChanged
// 0x0010 (0x0010 - 0x0000)
struct NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged final
{
public:
	class UGameplayModifierContainer*             container;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          active;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged) == 0x000008, "Wrong alignment on NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged");
static_assert(sizeof(NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged) == 0x000010, "Wrong size on NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged");
static_assert(offsetof(NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged, container) == 0x000000, "Member 'NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged::container' has a wrong offset!");
static_assert(offsetof(NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged, active) == 0x000008, "Member 'NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged::active' has a wrong offset!");

// Function DBDCompetence.HeadOn.Multicast_TriggerStunOnActor
// 0x0010 (0x0010 - 0x0000)
struct HeadOn_Multicast_TriggerStunOnActor final
{
public:
	class UObject*                                stunnableInterfaceUObject;                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             stunner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadOn_Multicast_TriggerStunOnActor) == 0x000008, "Wrong alignment on HeadOn_Multicast_TriggerStunOnActor");
static_assert(sizeof(HeadOn_Multicast_TriggerStunOnActor) == 0x000010, "Wrong size on HeadOn_Multicast_TriggerStunOnActor");
static_assert(offsetof(HeadOn_Multicast_TriggerStunOnActor, stunnableInterfaceUObject) == 0x000000, "Member 'HeadOn_Multicast_TriggerStunOnActor::stunnableInterfaceUObject' has a wrong offset!");
static_assert(offsetof(HeadOn_Multicast_TriggerStunOnActor, stunner) == 0x000008, "Member 'HeadOn_Multicast_TriggerStunOnActor::stunner' has a wrong offset!");

// Function DBDCompetence.HeadOn.OnPawnOverlapEnter
// 0x00B0 (0x00B0 - 0x0000)
struct HeadOn_OnPawnOverlapEnter final
{
public:
	class UPrimitiveComponent*                    hitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadOn_OnPawnOverlapEnter) == 0x000008, "Wrong alignment on HeadOn_OnPawnOverlapEnter");
static_assert(sizeof(HeadOn_OnPawnOverlapEnter) == 0x0000B0, "Wrong size on HeadOn_OnPawnOverlapEnter");
static_assert(offsetof(HeadOn_OnPawnOverlapEnter, hitComponent) == 0x000000, "Member 'HeadOn_OnPawnOverlapEnter::hitComponent' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapEnter, otherActor) == 0x000008, "Member 'HeadOn_OnPawnOverlapEnter::otherActor' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapEnter, otherComp) == 0x000010, "Member 'HeadOn_OnPawnOverlapEnter::otherComp' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapEnter, otherBodyIndex) == 0x000018, "Member 'HeadOn_OnPawnOverlapEnter::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapEnter, bFromSweep) == 0x00001C, "Member 'HeadOn_OnPawnOverlapEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapEnter, sweepResult) == 0x000020, "Member 'HeadOn_OnPawnOverlapEnter::sweepResult' has a wrong offset!");

// Function DBDCompetence.HeadOn.OnPawnOverlapExit
// 0x0020 (0x0020 - 0x0000)
struct HeadOn_OnPawnOverlapExit final
{
public:
	class UPrimitiveComponent*                    hitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HeadOn_OnPawnOverlapExit) == 0x000008, "Wrong alignment on HeadOn_OnPawnOverlapExit");
static_assert(sizeof(HeadOn_OnPawnOverlapExit) == 0x000020, "Wrong size on HeadOn_OnPawnOverlapExit");
static_assert(offsetof(HeadOn_OnPawnOverlapExit, hitComponent) == 0x000000, "Member 'HeadOn_OnPawnOverlapExit::hitComponent' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapExit, otherActor) == 0x000008, "Member 'HeadOn_OnPawnOverlapExit::otherActor' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapExit, otherComp) == 0x000010, "Member 'HeadOn_OnPawnOverlapExit::otherComp' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapExit, otherBodyIndex) == 0x000018, "Member 'HeadOn_OnPawnOverlapExit::otherBodyIndex' has a wrong offset!");

// Function DBDCompetence.HeadOn.CanApplyHeadOnInteraction
// 0x0001 (0x0001 - 0x0000)
struct HeadOn_CanApplyHeadOnInteraction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadOn_CanApplyHeadOnInteraction) == 0x000001, "Wrong alignment on HeadOn_CanApplyHeadOnInteraction");
static_assert(sizeof(HeadOn_CanApplyHeadOnInteraction) == 0x000001, "Wrong size on HeadOn_CanApplyHeadOnInteraction");
static_assert(offsetof(HeadOn_CanApplyHeadOnInteraction, ReturnValue) == 0x000000, "Member 'HeadOn_CanApplyHeadOnInteraction::ReturnValue' has a wrong offset!");

// Function DBDCompetence.HeadOn.GetHideDuration
// 0x0004 (0x0004 - 0x0000)
struct HeadOn_GetHideDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadOn_GetHideDuration) == 0x000004, "Wrong alignment on HeadOn_GetHideDuration");
static_assert(sizeof(HeadOn_GetHideDuration) == 0x000004, "Wrong size on HeadOn_GetHideDuration");
static_assert(offsetof(HeadOn_GetHideDuration, ReturnValue) == 0x000000, "Member 'HeadOn_GetHideDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.ActivatableEnduranceEffect.Authority_Start
// 0x0004 (0x0004 - 0x0000)
struct ActivatableEnduranceEffect_Authority_Start final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActivatableEnduranceEffect_Authority_Start) == 0x000004, "Wrong alignment on ActivatableEnduranceEffect_Authority_Start");
static_assert(sizeof(ActivatableEnduranceEffect_Authority_Start) == 0x000004, "Wrong size on ActivatableEnduranceEffect_Authority_Start");
static_assert(offsetof(ActivatableEnduranceEffect_Authority_Start, duration) == 0x000000, "Member 'ActivatableEnduranceEffect_Authority_Start::duration' has a wrong offset!");

// Function DBDCompetence.HemorrhageStatusEffect.Authority_OnSurvivorHealed
// 0x0018 (0x0018 - 0x0000)
struct HemorrhageStatusEffect_Authority_OnSurvivorHealed final
{
public:
	struct FCamperHealResult                      healResult;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HemorrhageStatusEffect_Authority_OnSurvivorHealed) == 0x000008, "Wrong alignment on HemorrhageStatusEffect_Authority_OnSurvivorHealed");
static_assert(sizeof(HemorrhageStatusEffect_Authority_OnSurvivorHealed) == 0x000018, "Wrong size on HemorrhageStatusEffect_Authority_OnSurvivorHealed");
static_assert(offsetof(HemorrhageStatusEffect_Authority_OnSurvivorHealed, healResult) == 0x000000, "Member 'HemorrhageStatusEffect_Authority_OnSurvivorHealed::healResult' has a wrong offset!");

// Function DBDCompetence.HemorrhageStatusEffect.OnStoppedHealing
// 0x0010 (0x0010 - 0x0000)
struct HemorrhageStatusEffect_OnStoppedHealing final
{
public:
	const class ADBDPlayer*                       instigator;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       target;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HemorrhageStatusEffect_OnStoppedHealing) == 0x000008, "Wrong alignment on HemorrhageStatusEffect_OnStoppedHealing");
static_assert(sizeof(HemorrhageStatusEffect_OnStoppedHealing) == 0x000010, "Wrong size on HemorrhageStatusEffect_OnStoppedHealing");
static_assert(offsetof(HemorrhageStatusEffect_OnStoppedHealing, instigator) == 0x000000, "Member 'HemorrhageStatusEffect_OnStoppedHealing::instigator' has a wrong offset!");
static_assert(offsetof(HemorrhageStatusEffect_OnStoppedHealing, target) == 0x000008, "Member 'HemorrhageStatusEffect_OnStoppedHealing::target' has a wrong offset!");

// Function DBDCompetence.BaseLingeringStatusEffect.SetLingerDuration
// 0x0004 (0x0004 - 0x0000)
struct BaseLingeringStatusEffect_SetLingerDuration final
{
public:
	float                                         lingerDuration;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseLingeringStatusEffect_SetLingerDuration) == 0x000004, "Wrong alignment on BaseLingeringStatusEffect_SetLingerDuration");
static_assert(sizeof(BaseLingeringStatusEffect_SetLingerDuration) == 0x000004, "Wrong size on BaseLingeringStatusEffect_SetLingerDuration");
static_assert(offsetof(BaseLingeringStatusEffect_SetLingerDuration, lingerDuration) == 0x000000, "Member 'BaseLingeringStatusEffect_SetLingerDuration::lingerDuration' has a wrong offset!");

// Function DBDCompetence.HexPerk.Authority_RevealCurseToAllSurvivors
// 0x0001 (0x0001 - 0x0000)
struct HexPerk_Authority_RevealCurseToAllSurvivors final
{
public:
	bool                                          revealed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HexPerk_Authority_RevealCurseToAllSurvivors) == 0x000001, "Wrong alignment on HexPerk_Authority_RevealCurseToAllSurvivors");
static_assert(sizeof(HexPerk_Authority_RevealCurseToAllSurvivors) == 0x000001, "Wrong size on HexPerk_Authority_RevealCurseToAllSurvivors");
static_assert(offsetof(HexPerk_Authority_RevealCurseToAllSurvivors, revealed) == 0x000000, "Member 'HexPerk_Authority_RevealCurseToAllSurvivors::revealed' has a wrong offset!");

// Function DBDCompetence.HexPerk.Authority_SetCurseRevealedToPlayer
// 0x0010 (0x0010 - 0x0000)
struct HexPerk_Authority_SetCurseRevealedToPlayer final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          revealed;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HexPerk_Authority_SetCurseRevealedToPlayer) == 0x000008, "Wrong alignment on HexPerk_Authority_SetCurseRevealedToPlayer");
static_assert(sizeof(HexPerk_Authority_SetCurseRevealedToPlayer) == 0x000010, "Wrong size on HexPerk_Authority_SetCurseRevealedToPlayer");
static_assert(offsetof(HexPerk_Authority_SetCurseRevealedToPlayer, player) == 0x000000, "Member 'HexPerk_Authority_SetCurseRevealedToPlayer::player' has a wrong offset!");
static_assert(offsetof(HexPerk_Authority_SetCurseRevealedToPlayer, revealed) == 0x000008, "Member 'HexPerk_Authority_SetCurseRevealedToPlayer::revealed' has a wrong offset!");

// Function DBDCompetence.HexPerk.IsCurseRevealedToPlayer
// 0x0010 (0x0010 - 0x0000)
struct HexPerk_IsCurseRevealedToPlayer final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HexPerk_IsCurseRevealedToPlayer) == 0x000008, "Wrong alignment on HexPerk_IsCurseRevealedToPlayer");
static_assert(sizeof(HexPerk_IsCurseRevealedToPlayer) == 0x000010, "Wrong size on HexPerk_IsCurseRevealedToPlayer");
static_assert(offsetof(HexPerk_IsCurseRevealedToPlayer, player) == 0x000000, "Member 'HexPerk_IsCurseRevealedToPlayer::player' has a wrong offset!");
static_assert(offsetof(HexPerk_IsCurseRevealedToPlayer, ReturnValue) == 0x000008, "Member 'HexPerk_IsCurseRevealedToPlayer::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Whispers.Multicast_FireAudioEvent
// 0x0004 (0x0004 - 0x0000)
struct Whispers_Multicast_FireAudioEvent final
{
public:
	int32                                         survivorsInRange;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Whispers_Multicast_FireAudioEvent) == 0x000004, "Wrong alignment on Whispers_Multicast_FireAudioEvent");
static_assert(sizeof(Whispers_Multicast_FireAudioEvent) == 0x000004, "Wrong size on Whispers_Multicast_FireAudioEvent");
static_assert(offsetof(Whispers_Multicast_FireAudioEvent, survivorsInRange) == 0x000000, "Member 'Whispers_Multicast_FireAudioEvent::survivorsInRange' has a wrong offset!");

// Function DBDCompetence.HexDevourHope.GetMoveSpeedIncrement
// 0x0008 (0x0008 - 0x0000)
struct HexDevourHope_GetMoveSpeedIncrement final
{
public:
	int32                                         perkLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HexDevourHope_GetMoveSpeedIncrement) == 0x000004, "Wrong alignment on HexDevourHope_GetMoveSpeedIncrement");
static_assert(sizeof(HexDevourHope_GetMoveSpeedIncrement) == 0x000008, "Wrong size on HexDevourHope_GetMoveSpeedIncrement");
static_assert(offsetof(HexDevourHope_GetMoveSpeedIncrement, perkLevel) == 0x000000, "Member 'HexDevourHope_GetMoveSpeedIncrement::perkLevel' has a wrong offset!");
static_assert(offsetof(HexDevourHope_GetMoveSpeedIncrement, ReturnValue) == 0x000004, "Member 'HexDevourHope_GetMoveSpeedIncrement::ReturnValue' has a wrong offset!");

// Function DBDCompetence.HexDevourHope.GetRangeFromUnhookedSurvivorNeeded
// 0x0008 (0x0008 - 0x0000)
struct HexDevourHope_GetRangeFromUnhookedSurvivorNeeded final
{
public:
	int32                                         perkLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HexDevourHope_GetRangeFromUnhookedSurvivorNeeded) == 0x000004, "Wrong alignment on HexDevourHope_GetRangeFromUnhookedSurvivorNeeded");
static_assert(sizeof(HexDevourHope_GetRangeFromUnhookedSurvivorNeeded) == 0x000008, "Wrong size on HexDevourHope_GetRangeFromUnhookedSurvivorNeeded");
static_assert(offsetof(HexDevourHope_GetRangeFromUnhookedSurvivorNeeded, perkLevel) == 0x000000, "Member 'HexDevourHope_GetRangeFromUnhookedSurvivorNeeded::perkLevel' has a wrong offset!");
static_assert(offsetof(HexDevourHope_GetRangeFromUnhookedSurvivorNeeded, ReturnValue) == 0x000004, "Member 'HexDevourHope_GetRangeFromUnhookedSurvivorNeeded::ReturnValue' has a wrong offset!");

// Function DBDCompetence.KillerSubjectProvider.RegisterWhenKillerSet
// 0x0008 (0x0008 - 0x0000)
struct KillerSubjectProvider_RegisterWhenKillerSet final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerSubjectProvider_RegisterWhenKillerSet) == 0x000008, "Wrong alignment on KillerSubjectProvider_RegisterWhenKillerSet");
static_assert(sizeof(KillerSubjectProvider_RegisterWhenKillerSet) == 0x000008, "Wrong size on KillerSubjectProvider_RegisterWhenKillerSet");
static_assert(offsetof(KillerSubjectProvider_RegisterWhenKillerSet, killer) == 0x000000, "Member 'KillerSubjectProvider_RegisterWhenKillerSet::killer' has a wrong offset!");

// Function DBDCompetence.ActivatableExhaustedEffect.Authority_OnHookCamper
// 0x0038 (0x0038 - 0x0000)
struct ActivatableExhaustedEffect_Authority_OnHookCamper final
{
public:
	struct FGameplayTag                           gameEvent;                                         // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActivatableExhaustedEffect_Authority_OnHookCamper) == 0x000008, "Wrong alignment on ActivatableExhaustedEffect_Authority_OnHookCamper");
static_assert(sizeof(ActivatableExhaustedEffect_Authority_OnHookCamper) == 0x000038, "Wrong size on ActivatableExhaustedEffect_Authority_OnHookCamper");
static_assert(offsetof(ActivatableExhaustedEffect_Authority_OnHookCamper, gameEvent) == 0x000000, "Member 'ActivatableExhaustedEffect_Authority_OnHookCamper::gameEvent' has a wrong offset!");
static_assert(offsetof(ActivatableExhaustedEffect_Authority_OnHookCamper, gameEventData) == 0x000010, "Member 'ActivatableExhaustedEffect_Authority_OnHookCamper::gameEventData' has a wrong offset!");

// Function DBDCompetence.ActivatableExhaustedEffect.Authority_Start
// 0x0004 (0x0004 - 0x0000)
struct ActivatableExhaustedEffect_Authority_Start final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActivatableExhaustedEffect_Authority_Start) == 0x000004, "Wrong alignment on ActivatableExhaustedEffect_Authority_Start");
static_assert(sizeof(ActivatableExhaustedEffect_Authority_Start) == 0x000004, "Wrong size on ActivatableExhaustedEffect_Authority_Start");
static_assert(offsetof(ActivatableExhaustedEffect_Authority_Start, duration) == 0x000000, "Member 'ActivatableExhaustedEffect_Authority_Start::duration' has a wrong offset!");

// Function DBDCompetence.Adrenaline.Multicast_DispatchAdrenalineEvents
// 0x0008 (0x0008 - 0x0000)
struct Adrenaline_Multicast_DispatchAdrenalineEvents final
{
public:
	bool                                          isHealthy;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         healAmount;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Adrenaline_Multicast_DispatchAdrenalineEvents) == 0x000004, "Wrong alignment on Adrenaline_Multicast_DispatchAdrenalineEvents");
static_assert(sizeof(Adrenaline_Multicast_DispatchAdrenalineEvents) == 0x000008, "Wrong size on Adrenaline_Multicast_DispatchAdrenalineEvents");
static_assert(offsetof(Adrenaline_Multicast_DispatchAdrenalineEvents, isHealthy) == 0x000000, "Member 'Adrenaline_Multicast_DispatchAdrenalineEvents::isHealthy' has a wrong offset!");
static_assert(offsetof(Adrenaline_Multicast_DispatchAdrenalineEvents, healAmount) == 0x000004, "Member 'Adrenaline_Multicast_DispatchAdrenalineEvents::healAmount' has a wrong offset!");

// Function DBDCompetence.AnyActorPairQueryRangeIsTrue.OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct AnyActorPairQueryRangeIsTrue_OnInRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnyActorPairQueryRangeIsTrue_OnInRangeChanged) == 0x000001, "Wrong alignment on AnyActorPairQueryRangeIsTrue_OnInRangeChanged");
static_assert(sizeof(AnyActorPairQueryRangeIsTrue_OnInRangeChanged) == 0x000001, "Wrong size on AnyActorPairQueryRangeIsTrue_OnInRangeChanged");
static_assert(offsetof(AnyActorPairQueryRangeIsTrue_OnInRangeChanged, inRange) == 0x000000, "Member 'AnyActorPairQueryRangeIsTrue_OnInRangeChanged::inRange' has a wrong offset!");

// Function DBDCompetence.AnyMeansNecessary.Authority_OnPalletPulledUp
// 0x0038 (0x0038 - 0x0000)
struct AnyMeansNecessary_Authority_OnPalletPulledUp final
{
public:
	struct FGameplayTag                           gameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnyMeansNecessary_Authority_OnPalletPulledUp) == 0x000008, "Wrong alignment on AnyMeansNecessary_Authority_OnPalletPulledUp");
static_assert(sizeof(AnyMeansNecessary_Authority_OnPalletPulledUp) == 0x000038, "Wrong size on AnyMeansNecessary_Authority_OnPalletPulledUp");
static_assert(offsetof(AnyMeansNecessary_Authority_OnPalletPulledUp, gameplayTag) == 0x000000, "Member 'AnyMeansNecessary_Authority_OnPalletPulledUp::gameplayTag' has a wrong offset!");
static_assert(offsetof(AnyMeansNecessary_Authority_OnPalletPulledUp, gameEventData) == 0x000010, "Member 'AnyMeansNecessary_Authority_OnPalletPulledUp::gameEventData' has a wrong offset!");

// Function DBDCompetence.AnySurvivorHasObjectState.OnSurvivorAdded
// 0x0008 (0x0008 - 0x0000)
struct AnySurvivorHasObjectState_OnSurvivorAdded final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnySurvivorHasObjectState_OnSurvivorAdded) == 0x000008, "Wrong alignment on AnySurvivorHasObjectState_OnSurvivorAdded");
static_assert(sizeof(AnySurvivorHasObjectState_OnSurvivorAdded) == 0x000008, "Wrong size on AnySurvivorHasObjectState_OnSurvivorAdded");
static_assert(offsetof(AnySurvivorHasObjectState_OnSurvivorAdded, survivor) == 0x000000, "Member 'AnySurvivorHasObjectState_OnSurvivorAdded::survivor' has a wrong offset!");

// Function DBDCompetence.AnySurvivorHasObjectState.OnSurvivorRemoved
// 0x0008 (0x0008 - 0x0000)
struct AnySurvivorHasObjectState_OnSurvivorRemoved final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnySurvivorHasObjectState_OnSurvivorRemoved) == 0x000008, "Wrong alignment on AnySurvivorHasObjectState_OnSurvivorRemoved");
static_assert(sizeof(AnySurvivorHasObjectState_OnSurvivorRemoved) == 0x000008, "Wrong size on AnySurvivorHasObjectState_OnSurvivorRemoved");
static_assert(offsetof(AnySurvivorHasObjectState_OnSurvivorRemoved, survivor) == 0x000000, "Member 'AnySurvivorHasObjectState_OnSurvivorRemoved::survivor' has a wrong offset!");

// Function DBDCompetence.RemoveOnOriginatingSurvivorGoneStatusEffect.Authority_OnSurvivorRemoved
// 0x0008 (0x0008 - 0x0000)
struct RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved) == 0x000008, "Wrong alignment on RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved");
static_assert(sizeof(RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved) == 0x000008, "Wrong size on RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved");
static_assert(offsetof(RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved, survivor) == 0x000000, "Member 'RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved::survivor' has a wrong offset!");

// Function DBDCompetence.ProveThyselfEffect.OnInRangeOfOriginatorChanged
// 0x0010 (0x0010 - 0x0000)
struct ProveThyselfEffect_OnInRangeOfOriginatorChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACamperPlayer*                          survivor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProveThyselfEffect_OnInRangeOfOriginatorChanged) == 0x000008, "Wrong alignment on ProveThyselfEffect_OnInRangeOfOriginatorChanged");
static_assert(sizeof(ProveThyselfEffect_OnInRangeOfOriginatorChanged) == 0x000010, "Wrong size on ProveThyselfEffect_OnInRangeOfOriginatorChanged");
static_assert(offsetof(ProveThyselfEffect_OnInRangeOfOriginatorChanged, inRange) == 0x000000, "Member 'ProveThyselfEffect_OnInRangeOfOriginatorChanged::inRange' has a wrong offset!");
static_assert(offsetof(ProveThyselfEffect_OnInRangeOfOriginatorChanged, survivor) == 0x000008, "Member 'ProveThyselfEffect_OnInRangeOfOriginatorChanged::survivor' has a wrong offset!");

// Function DBDCompetence.BaseIsPlayerPerformingInteraction.SetInteractionSemantics
// 0x0020 (0x0020 - 0x0000)
struct BaseIsPlayerPerformingInteraction_SetInteractionSemantics final
{
public:
	struct FGameplayTagContainer                  interactionSemantics;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseIsPlayerPerformingInteraction_SetInteractionSemantics) == 0x000008, "Wrong alignment on BaseIsPlayerPerformingInteraction_SetInteractionSemantics");
static_assert(sizeof(BaseIsPlayerPerformingInteraction_SetInteractionSemantics) == 0x000020, "Wrong size on BaseIsPlayerPerformingInteraction_SetInteractionSemantics");
static_assert(offsetof(BaseIsPlayerPerformingInteraction_SetInteractionSemantics, interactionSemantics) == 0x000000, "Member 'BaseIsPlayerPerformingInteraction_SetInteractionSemantics::interactionSemantics' has a wrong offset!");

// Function DBDCompetence.BaseIsPlayerPerformingInteraction.UpdateIsTrue
// 0x0008 (0x0008 - 0x0000)
struct BaseIsPlayerPerformingInteraction_UpdateIsTrue final
{
public:
	class UInteractionDefinition*                 interactionDefinition;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseIsPlayerPerformingInteraction_UpdateIsTrue) == 0x000008, "Wrong alignment on BaseIsPlayerPerformingInteraction_UpdateIsTrue");
static_assert(sizeof(BaseIsPlayerPerformingInteraction_UpdateIsTrue) == 0x000008, "Wrong size on BaseIsPlayerPerformingInteraction_UpdateIsTrue");
static_assert(offsetof(BaseIsPlayerPerformingInteraction_UpdateIsTrue, interactionDefinition) == 0x000000, "Member 'BaseIsPlayerPerformingInteraction_UpdateIsTrue::interactionDefinition' has a wrong offset!");

// Function DBDCompetence.SmallGame.Authority_SetTotemDetected
// 0x0001 (0x0001 - 0x0000)
struct SmallGame_Authority_SetTotemDetected final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SmallGame_Authority_SetTotemDetected) == 0x000001, "Wrong alignment on SmallGame_Authority_SetTotemDetected");
static_assert(sizeof(SmallGame_Authority_SetTotemDetected) == 0x000001, "Wrong size on SmallGame_Authority_SetTotemDetected");
static_assert(offsetof(SmallGame_Authority_SetTotemDetected, value) == 0x000000, "Member 'SmallGame_Authority_SetTotemDetected::value' has a wrong offset!");

// Function DBDCompetence.SmallGame.GetDetectionConeAngle
// 0x0004 (0x0004 - 0x0000)
struct SmallGame_GetDetectionConeAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SmallGame_GetDetectionConeAngle) == 0x000004, "Wrong alignment on SmallGame_GetDetectionConeAngle");
static_assert(sizeof(SmallGame_GetDetectionConeAngle) == 0x000004, "Wrong size on SmallGame_GetDetectionConeAngle");
static_assert(offsetof(SmallGame_GetDetectionConeAngle, ReturnValue) == 0x000000, "Member 'SmallGame_GetDetectionConeAngle::ReturnValue' has a wrong offset!");

// Function DBDCompetence.BetterTogether.GetRevealDistance
// 0x0004 (0x0004 - 0x0000)
struct BetterTogether_GetRevealDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BetterTogether_GetRevealDistance) == 0x000004, "Wrong alignment on BetterTogether_GetRevealDistance");
static_assert(sizeof(BetterTogether_GetRevealDistance) == 0x000004, "Wrong size on BetterTogether_GetRevealDistance");
static_assert(offsetof(BetterTogether_GetRevealDistance, ReturnValue) == 0x000000, "Member 'BetterTogether_GetRevealDistance::ReturnValue' has a wrong offset!");

// Function DBDCompetence.BetterTogether.OnStartedGeneratorRepair
// 0x0038 (0x0038 - 0x0000)
struct BetterTogether_OnStartedGeneratorRepair final
{
public:
	struct FGameplayTag                           gameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BetterTogether_OnStartedGeneratorRepair) == 0x000008, "Wrong alignment on BetterTogether_OnStartedGeneratorRepair");
static_assert(sizeof(BetterTogether_OnStartedGeneratorRepair) == 0x000038, "Wrong size on BetterTogether_OnStartedGeneratorRepair");
static_assert(offsetof(BetterTogether_OnStartedGeneratorRepair, gameplayTag) == 0x000000, "Member 'BetterTogether_OnStartedGeneratorRepair::gameplayTag' has a wrong offset!");
static_assert(offsetof(BetterTogether_OnStartedGeneratorRepair, gameEventData) == 0x000010, "Member 'BetterTogether_OnStartedGeneratorRepair::gameEventData' has a wrong offset!");

// Function DBDCompetence.BlessedStatusEffect.Authority_OnSurvivorRemovedFromGame
// 0x0008 (0x0008 - 0x0000)
struct BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame) == 0x000008, "Wrong alignment on BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame");
static_assert(sizeof(BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame) == 0x000008, "Wrong size on BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame");
static_assert(offsetof(BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame, survivor) == 0x000000, "Member 'BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame::survivor' has a wrong offset!");

// Function DBDCompetence.BlessedStatusEffect.GetBoonTotemBlessingRange
// 0x0004 (0x0004 - 0x0000)
struct BlessedStatusEffect_GetBoonTotemBlessingRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlessedStatusEffect_GetBoonTotemBlessingRange) == 0x000004, "Wrong alignment on BlessedStatusEffect_GetBoonTotemBlessingRange");
static_assert(sizeof(BlessedStatusEffect_GetBoonTotemBlessingRange) == 0x000004, "Wrong size on BlessedStatusEffect_GetBoonTotemBlessingRange");
static_assert(offsetof(BlessedStatusEffect_GetBoonTotemBlessingRange, ReturnValue) == 0x000000, "Member 'BlessedStatusEffect_GetBoonTotemBlessingRange::ReturnValue' has a wrong offset!");

// Function DBDCompetence.BlessedStatusEffect.GetBoundTotem
// 0x0008 (0x0008 - 0x0000)
struct BlessedStatusEffect_GetBoundTotem final
{
public:
	class ATotem*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlessedStatusEffect_GetBoundTotem) == 0x000008, "Wrong alignment on BlessedStatusEffect_GetBoundTotem");
static_assert(sizeof(BlessedStatusEffect_GetBoundTotem) == 0x000008, "Wrong size on BlessedStatusEffect_GetBoundTotem");
static_assert(offsetof(BlessedStatusEffect_GetBoundTotem, ReturnValue) == 0x000000, "Member 'BlessedStatusEffect_GetBoundTotem::ReturnValue' has a wrong offset!");

// Function DBDCompetence.BloodEcho.GetCooldownDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct BloodEcho_GetCooldownDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodEcho_GetCooldownDurationAtLevel) == 0x000004, "Wrong alignment on BloodEcho_GetCooldownDurationAtLevel");
static_assert(sizeof(BloodEcho_GetCooldownDurationAtLevel) == 0x000004, "Wrong size on BloodEcho_GetCooldownDurationAtLevel");
static_assert(offsetof(BloodEcho_GetCooldownDurationAtLevel, ReturnValue) == 0x000000, "Member 'BloodEcho_GetCooldownDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.ProveThyself.OnSurvivorInOwnerRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct ProveThyself_OnSurvivorInOwnerRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProveThyself_OnSurvivorInOwnerRangeChanged) == 0x000001, "Wrong alignment on ProveThyself_OnSurvivorInOwnerRangeChanged");
static_assert(sizeof(ProveThyself_OnSurvivorInOwnerRangeChanged) == 0x000001, "Wrong size on ProveThyself_OnSurvivorInOwnerRangeChanged");
static_assert(offsetof(ProveThyself_OnSurvivorInOwnerRangeChanged, inRange) == 0x000000, "Member 'ProveThyself_OnSurvivorInOwnerRangeChanged::inRange' has a wrong offset!");

// Function DBDCompetence.BoonPerk.Authority_OnSurvivorRemoved
// 0x0008 (0x0008 - 0x0000)
struct BoonPerk_Authority_OnSurvivorRemoved final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoonPerk_Authority_OnSurvivorRemoved) == 0x000008, "Wrong alignment on BoonPerk_Authority_OnSurvivorRemoved");
static_assert(sizeof(BoonPerk_Authority_OnSurvivorRemoved) == 0x000008, "Wrong size on BoonPerk_Authority_OnSurvivorRemoved");
static_assert(offsetof(BoonPerk_Authority_OnSurvivorRemoved, survivor) == 0x000000, "Member 'BoonPerk_Authority_OnSurvivorRemoved::survivor' has a wrong offset!");

// Function DBDCompetence.StatsSystemUtilities.GetStatValueBP
// 0x0088 (0x0088 - 0x0000)
struct StatsSystemUtilities_GetStatValueBP final
{
public:
	struct FTunableStat                           theStat;                                           // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StatsSystemUtilities_GetStatValueBP) == 0x000008, "Wrong alignment on StatsSystemUtilities_GetStatValueBP");
static_assert(sizeof(StatsSystemUtilities_GetStatValueBP) == 0x000088, "Wrong size on StatsSystemUtilities_GetStatValueBP");
static_assert(offsetof(StatsSystemUtilities_GetStatValueBP, theStat) == 0x000000, "Member 'StatsSystemUtilities_GetStatValueBP::theStat' has a wrong offset!");
static_assert(offsetof(StatsSystemUtilities_GetStatValueBP, ReturnValue) == 0x000080, "Member 'StatsSystemUtilities_GetStatValueBP::ReturnValue' has a wrong offset!");

// Function DBDCompetence.StatsSystemUtilities.InitStatBP
// 0x0090 (0x0090 - 0x0000)
struct StatsSystemUtilities_InitStatBP final
{
public:
	struct FTunableStat                           theStat;                                           // 0x0000(0x0080)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IModifierProvider>     modifierProvider;                                  // 0x0080(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsSystemUtilities_InitStatBP) == 0x000008, "Wrong alignment on StatsSystemUtilities_InitStatBP");
static_assert(sizeof(StatsSystemUtilities_InitStatBP) == 0x000090, "Wrong size on StatsSystemUtilities_InitStatBP");
static_assert(offsetof(StatsSystemUtilities_InitStatBP, theStat) == 0x000000, "Member 'StatsSystemUtilities_InitStatBP::theStat' has a wrong offset!");
static_assert(offsetof(StatsSystemUtilities_InitStatBP, modifierProvider) == 0x000080, "Member 'StatsSystemUtilities_InitStatBP::modifierProvider' has a wrong offset!");

// Function DBDCompetence.Breakout.Authority_ImposeWiggleStatusEffect
// 0x0008 (0x0008 - 0x0000)
struct Breakout_Authority_ImposeWiggleStatusEffect final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Breakout_Authority_ImposeWiggleStatusEffect) == 0x000008, "Wrong alignment on Breakout_Authority_ImposeWiggleStatusEffect");
static_assert(sizeof(Breakout_Authority_ImposeWiggleStatusEffect) == 0x000008, "Wrong size on Breakout_Authority_ImposeWiggleStatusEffect");
static_assert(offsetof(Breakout_Authority_ImposeWiggleStatusEffect, survivor) == 0x000000, "Member 'Breakout_Authority_ImposeWiggleStatusEffect::survivor' has a wrong offset!");

// Function DBDCompetence.Breakout.Authority_OnRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct Breakout_Authority_OnRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Breakout_Authority_OnRangeChanged) == 0x000001, "Wrong alignment on Breakout_Authority_OnRangeChanged");
static_assert(sizeof(Breakout_Authority_OnRangeChanged) == 0x000001, "Wrong size on Breakout_Authority_OnRangeChanged");
static_assert(offsetof(Breakout_Authority_OnRangeChanged, inRange) == 0x000000, "Member 'Breakout_Authority_OnRangeChanged::inRange' has a wrong offset!");

// Function DBDCompetence.Breakout.OnSlasherSet
// 0x0008 (0x0008 - 0x0000)
struct Breakout_OnSlasherSet final
{
public:
	class ASlasherPlayer*                         slasher;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Breakout_OnSlasherSet) == 0x000008, "Wrong alignment on Breakout_OnSlasherSet");
static_assert(sizeof(Breakout_OnSlasherSet) == 0x000008, "Wrong size on Breakout_OnSlasherSet");
static_assert(offsetof(Breakout_OnSlasherSet, slasher) == 0x000000, "Member 'Breakout_OnSlasherSet::slasher' has a wrong offset!");

// Function DBDCompetence.Solidarity.Authority_OnHealthChargeApplied
// 0x0018 (0x0018 - 0x0000)
struct Solidarity_Authority_OnHealthChargeApplied final
{
public:
	float                                         individualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         totalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 chargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          wasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         deltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Solidarity_Authority_OnHealthChargeApplied) == 0x000008, "Wrong alignment on Solidarity_Authority_OnHealthChargeApplied");
static_assert(sizeof(Solidarity_Authority_OnHealthChargeApplied) == 0x000018, "Wrong size on Solidarity_Authority_OnHealthChargeApplied");
static_assert(offsetof(Solidarity_Authority_OnHealthChargeApplied, individualChargeAmount) == 0x000000, "Member 'Solidarity_Authority_OnHealthChargeApplied::individualChargeAmount' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnHealthChargeApplied, totalChargeAmount) == 0x000004, "Member 'Solidarity_Authority_OnHealthChargeApplied::totalChargeAmount' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnHealthChargeApplied, chargeInstigator) == 0x000008, "Member 'Solidarity_Authority_OnHealthChargeApplied::chargeInstigator' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnHealthChargeApplied, wasCoop) == 0x000010, "Member 'Solidarity_Authority_OnHealthChargeApplied::wasCoop' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnHealthChargeApplied, deltaTime) == 0x000014, "Member 'Solidarity_Authority_OnHealthChargeApplied::deltaTime' has a wrong offset!");

// Function DBDCompetence.Solidarity.Authority_OnSkillCheckResponse
// 0x0018 (0x0018 - 0x0000)
struct Solidarity_Authority_OnSkillCheckResponse final
{
public:
	bool                                          success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bonus;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          triggerLoudNoise;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hadInput;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         type;                                              // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         chargeChange;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Solidarity_Authority_OnSkillCheckResponse) == 0x000008, "Wrong alignment on Solidarity_Authority_OnSkillCheckResponse");
static_assert(sizeof(Solidarity_Authority_OnSkillCheckResponse) == 0x000018, "Wrong size on Solidarity_Authority_OnSkillCheckResponse");
static_assert(offsetof(Solidarity_Authority_OnSkillCheckResponse, success) == 0x000000, "Member 'Solidarity_Authority_OnSkillCheckResponse::success' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnSkillCheckResponse, bonus) == 0x000001, "Member 'Solidarity_Authority_OnSkillCheckResponse::bonus' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnSkillCheckResponse, player) == 0x000008, "Member 'Solidarity_Authority_OnSkillCheckResponse::player' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnSkillCheckResponse, triggerLoudNoise) == 0x000010, "Member 'Solidarity_Authority_OnSkillCheckResponse::triggerLoudNoise' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnSkillCheckResponse, hadInput) == 0x000011, "Member 'Solidarity_Authority_OnSkillCheckResponse::hadInput' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnSkillCheckResponse, type) == 0x000012, "Member 'Solidarity_Authority_OnSkillCheckResponse::type' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnSkillCheckResponse, chargeChange) == 0x000014, "Member 'Solidarity_Authority_OnSkillCheckResponse::chargeChange' has a wrong offset!");

// Function DBDCompetence.CorruptIntervention.GetGeneratorBlockDuration
// 0x0004 (0x0004 - 0x0000)
struct CorruptIntervention_GetGeneratorBlockDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorruptIntervention_GetGeneratorBlockDuration) == 0x000004, "Wrong alignment on CorruptIntervention_GetGeneratorBlockDuration");
static_assert(sizeof(CorruptIntervention_GetGeneratorBlockDuration) == 0x000004, "Wrong size on CorruptIntervention_GetGeneratorBlockDuration");
static_assert(offsetof(CorruptIntervention_GetGeneratorBlockDuration, ReturnValue) == 0x000000, "Member 'CorruptIntervention_GetGeneratorBlockDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.CruelConfinement.GetBlockDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct CruelConfinement_GetBlockDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CruelConfinement_GetBlockDurationAtLevel) == 0x000004, "Wrong alignment on CruelConfinement_GetBlockDurationAtLevel");
static_assert(sizeof(CruelConfinement_GetBlockDurationAtLevel) == 0x000004, "Wrong size on CruelConfinement_GetBlockDurationAtLevel");
static_assert(offsetof(CruelConfinement_GetBlockDurationAtLevel, ReturnValue) == 0x000000, "Member 'CruelConfinement_GetBlockDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.CruelConfinement.GetEffectiveRadiusAtLevel
// 0x0004 (0x0004 - 0x0000)
struct CruelConfinement_GetEffectiveRadiusAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CruelConfinement_GetEffectiveRadiusAtLevel) == 0x000004, "Wrong alignment on CruelConfinement_GetEffectiveRadiusAtLevel");
static_assert(sizeof(CruelConfinement_GetEffectiveRadiusAtLevel) == 0x000004, "Wrong size on CruelConfinement_GetEffectiveRadiusAtLevel");
static_assert(offsetof(CruelConfinement_GetEffectiveRadiusAtLevel, ReturnValue) == 0x000000, "Member 'CruelConfinement_GetEffectiveRadiusAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DarkSense.Authority_OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct DarkSense_Authority_OnInRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkSense_Authority_OnInRangeChanged) == 0x000001, "Wrong alignment on DarkSense_Authority_OnInRangeChanged");
static_assert(sizeof(DarkSense_Authority_OnInRangeChanged) == 0x000001, "Wrong size on DarkSense_Authority_OnInRangeChanged");
static_assert(offsetof(DarkSense_Authority_OnInRangeChanged, inRange) == 0x000000, "Member 'DarkSense_Authority_OnInRangeChanged::inRange' has a wrong offset!");

// Function DBDCompetence.DBDConditionFactory.DoesPerkHaveToken
// 0x0020 (0x0020 - 0x0000)
struct DBDConditionFactory_DoesPerkHaveToken final
{
public:
	TScriptInterface<class IConditionReceiver>    conditionReceiver;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UPerk*                                  perk;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDoesPerkHaveToken*                     ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDConditionFactory_DoesPerkHaveToken) == 0x000008, "Wrong alignment on DBDConditionFactory_DoesPerkHaveToken");
static_assert(sizeof(DBDConditionFactory_DoesPerkHaveToken) == 0x000020, "Wrong size on DBDConditionFactory_DoesPerkHaveToken");
static_assert(offsetof(DBDConditionFactory_DoesPerkHaveToken, conditionReceiver) == 0x000000, "Member 'DBDConditionFactory_DoesPerkHaveToken::conditionReceiver' has a wrong offset!");
static_assert(offsetof(DBDConditionFactory_DoesPerkHaveToken, perk) == 0x000010, "Member 'DBDConditionFactory_DoesPerkHaveToken::perk' has a wrong offset!");
static_assert(offsetof(DBDConditionFactory_DoesPerkHaveToken, ReturnValue) == 0x000018, "Member 'DBDConditionFactory_DoesPerkHaveToken::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DBDConditionFactory.IsPlayerPerformingInteraction
// 0x0038 (0x0038 - 0x0000)
struct DBDConditionFactory_IsPlayerPerformingInteraction final
{
public:
	TScriptInterface<class IConditionReceiver>    conditionReceiver;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  interactionSemantics;                              // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UIsPlayerPerformingInteraction*         ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDConditionFactory_IsPlayerPerformingInteraction) == 0x000008, "Wrong alignment on DBDConditionFactory_IsPlayerPerformingInteraction");
static_assert(sizeof(DBDConditionFactory_IsPlayerPerformingInteraction) == 0x000038, "Wrong size on DBDConditionFactory_IsPlayerPerformingInteraction");
static_assert(offsetof(DBDConditionFactory_IsPlayerPerformingInteraction, conditionReceiver) == 0x000000, "Member 'DBDConditionFactory_IsPlayerPerformingInteraction::conditionReceiver' has a wrong offset!");
static_assert(offsetof(DBDConditionFactory_IsPlayerPerformingInteraction, interactionSemantics) == 0x000010, "Member 'DBDConditionFactory_IsPlayerPerformingInteraction::interactionSemantics' has a wrong offset!");
static_assert(offsetof(DBDConditionFactory_IsPlayerPerformingInteraction, ReturnValue) == 0x000030, "Member 'DBDConditionFactory_IsPlayerPerformingInteraction::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DecisiveStrike.OnOwnerPickedUp
// 0x0008 (0x0008 - 0x0000)
struct DecisiveStrike_OnOwnerPickedUp final
{
public:
	class ADBDPlayer*                             picker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisiveStrike_OnOwnerPickedUp) == 0x000008, "Wrong alignment on DecisiveStrike_OnOwnerPickedUp");
static_assert(sizeof(DecisiveStrike_OnOwnerPickedUp) == 0x000008, "Wrong size on DecisiveStrike_OnOwnerPickedUp");
static_assert(offsetof(DecisiveStrike_OnOwnerPickedUp, picker) == 0x000000, "Member 'DecisiveStrike_OnOwnerPickedUp::picker' has a wrong offset!");

// Function DBDCompetence.DecisiveStrike.OnPickUpEnded
// 0x0008 (0x0008 - 0x0000)
struct DecisiveStrike_OnPickUpEnded final
{
public:
	class ADBDPlayer*                             picker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisiveStrike_OnPickUpEnded) == 0x000008, "Wrong alignment on DecisiveStrike_OnPickUpEnded");
static_assert(sizeof(DecisiveStrike_OnPickUpEnded) == 0x000008, "Wrong size on DecisiveStrike_OnPickUpEnded");
static_assert(offsetof(DecisiveStrike_OnPickUpEnded, picker) == 0x000000, "Member 'DecisiveStrike_OnPickUpEnded::picker' has a wrong offset!");

// Function DBDCompetence.DecisiveStrike.OnSkillCheck
// 0x0010 (0x0010 - 0x0000)
struct DecisiveStrike_OnSkillCheck final
{
public:
	bool                                          hadInput;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bonus;                                             // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         type;                                              // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisiveStrike_OnSkillCheck) == 0x000008, "Wrong alignment on DecisiveStrike_OnSkillCheck");
static_assert(sizeof(DecisiveStrike_OnSkillCheck) == 0x000010, "Wrong size on DecisiveStrike_OnSkillCheck");
static_assert(offsetof(DecisiveStrike_OnSkillCheck, hadInput) == 0x000000, "Member 'DecisiveStrike_OnSkillCheck::hadInput' has a wrong offset!");
static_assert(offsetof(DecisiveStrike_OnSkillCheck, success) == 0x000001, "Member 'DecisiveStrike_OnSkillCheck::success' has a wrong offset!");
static_assert(offsetof(DecisiveStrike_OnSkillCheck, bonus) == 0x000002, "Member 'DecisiveStrike_OnSkillCheck::bonus' has a wrong offset!");
static_assert(offsetof(DecisiveStrike_OnSkillCheck, type) == 0x000003, "Member 'DecisiveStrike_OnSkillCheck::type' has a wrong offset!");
static_assert(offsetof(DecisiveStrike_OnSkillCheck, player) == 0x000008, "Member 'DecisiveStrike_OnSkillCheck::player' has a wrong offset!");

// Function DBDCompetence.DecisiveStrike.GetDurationAfterUnhook
// 0x0004 (0x0004 - 0x0000)
struct DecisiveStrike_GetDurationAfterUnhook final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisiveStrike_GetDurationAfterUnhook) == 0x000004, "Wrong alignment on DecisiveStrike_GetDurationAfterUnhook");
static_assert(sizeof(DecisiveStrike_GetDurationAfterUnhook) == 0x000004, "Wrong size on DecisiveStrike_GetDurationAfterUnhook");
static_assert(offsetof(DecisiveStrike_GetDurationAfterUnhook, ReturnValue) == 0x000000, "Member 'DecisiveStrike_GetDurationAfterUnhook::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DejaVu.Authority_OnGeneratorRepaired
// 0x0004 (0x0004 - 0x0000)
struct DejaVu_Authority_OnGeneratorRepaired final
{
public:
	int32                                         activatedGeneratorCount;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DejaVu_Authority_OnGeneratorRepaired) == 0x000004, "Wrong alignment on DejaVu_Authority_OnGeneratorRepaired");
static_assert(sizeof(DejaVu_Authority_OnGeneratorRepaired) == 0x000004, "Wrong size on DejaVu_Authority_OnGeneratorRepaired");
static_assert(offsetof(DejaVu_Authority_OnGeneratorRepaired, activatedGeneratorCount) == 0x000000, "Member 'DejaVu_Authority_OnGeneratorRepaired::activatedGeneratorCount' has a wrong offset!");

// Function DBDCompetence.DejaVu.GetActionSpeedsAtLevel
// 0x0004 (0x0004 - 0x0000)
struct DejaVu_GetActionSpeedsAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DejaVu_GetActionSpeedsAtLevel) == 0x000004, "Wrong alignment on DejaVu_GetActionSpeedsAtLevel");
static_assert(sizeof(DejaVu_GetActionSpeedsAtLevel) == 0x000004, "Wrong size on DejaVu_GetActionSpeedsAtLevel");
static_assert(offsetof(DejaVu_GetActionSpeedsAtLevel, ReturnValue) == 0x000000, "Member 'DejaVu_GetActionSpeedsAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DejaVu.GetPerkDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct DejaVu_GetPerkDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DejaVu_GetPerkDurationAtLevel) == 0x000004, "Wrong alignment on DejaVu_GetPerkDurationAtLevel");
static_assert(sizeof(DejaVu_GetPerkDurationAtLevel) == 0x000004, "Wrong size on DejaVu_GetPerkDurationAtLevel");
static_assert(offsetof(DejaVu_GetPerkDurationAtLevel, ReturnValue) == 0x000000, "Member 'DejaVu_GetPerkDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DelayedHealEffect.Authority_OnOwningCamperHealthChanged
// 0x0002 (0x0002 - 0x0000)
struct DelayedHealEffect_Authority_OnOwningCamperHealthChanged final
{
public:
	ECamperDamageState                            before;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            after;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelayedHealEffect_Authority_OnOwningCamperHealthChanged) == 0x000001, "Wrong alignment on DelayedHealEffect_Authority_OnOwningCamperHealthChanged");
static_assert(sizeof(DelayedHealEffect_Authority_OnOwningCamperHealthChanged) == 0x000002, "Wrong size on DelayedHealEffect_Authority_OnOwningCamperHealthChanged");
static_assert(offsetof(DelayedHealEffect_Authority_OnOwningCamperHealthChanged, before) == 0x000000, "Member 'DelayedHealEffect_Authority_OnOwningCamperHealthChanged::before' has a wrong offset!");
static_assert(offsetof(DelayedHealEffect_Authority_OnOwningCamperHealthChanged, after) == 0x000001, "Member 'DelayedHealEffect_Authority_OnOwningCamperHealthChanged::after' has a wrong offset!");

// Function DBDCompetence.DelayedHealEffect.Authority_OnOwningCamperPickedUp
// 0x0008 (0x0008 - 0x0000)
struct DelayedHealEffect_Authority_OnOwningCamperPickedUp final
{
public:
	class ADBDPlayer*                             picker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelayedHealEffect_Authority_OnOwningCamperPickedUp) == 0x000008, "Wrong alignment on DelayedHealEffect_Authority_OnOwningCamperPickedUp");
static_assert(sizeof(DelayedHealEffect_Authority_OnOwningCamperPickedUp) == 0x000008, "Wrong size on DelayedHealEffect_Authority_OnOwningCamperPickedUp");
static_assert(offsetof(DelayedHealEffect_Authority_OnOwningCamperPickedUp, picker) == 0x000000, "Member 'DelayedHealEffect_Authority_OnOwningCamperPickedUp::picker' has a wrong offset!");

// Function DBDCompetence.Distortion.AuraBlockCanBeActive
// 0x0001 (0x0001 - 0x0000)
struct Distortion_AuraBlockCanBeActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Distortion_AuraBlockCanBeActive) == 0x000001, "Wrong alignment on Distortion_AuraBlockCanBeActive");
static_assert(sizeof(Distortion_AuraBlockCanBeActive) == 0x000001, "Wrong size on Distortion_AuraBlockCanBeActive");
static_assert(offsetof(Distortion_AuraBlockCanBeActive, ReturnValue) == 0x000000, "Member 'Distortion_AuraBlockCanBeActive::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DoesPerkHaveToken.SetPerk
// 0x0008 (0x0008 - 0x0000)
struct DoesPerkHaveToken_SetPerk final
{
public:
	class UPerk*                                  perk;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoesPerkHaveToken_SetPerk) == 0x000008, "Wrong alignment on DoesPerkHaveToken_SetPerk");
static_assert(sizeof(DoesPerkHaveToken_SetPerk) == 0x000008, "Wrong size on DoesPerkHaveToken_SetPerk");
static_assert(offsetof(DoesPerkHaveToken_SetPerk, perk) == 0x000000, "Member 'DoesPerkHaveToken_SetPerk::perk' has a wrong offset!");

// Function DBDCompetence.DyingLight.OnObsessionChanged
// 0x0010 (0x0010 - 0x0000)
struct DyingLight_OnObsessionChanged final
{
public:
	class ACamperPlayer*                          newObsession;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          previousObsession;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DyingLight_OnObsessionChanged) == 0x000008, "Wrong alignment on DyingLight_OnObsessionChanged");
static_assert(sizeof(DyingLight_OnObsessionChanged) == 0x000010, "Wrong size on DyingLight_OnObsessionChanged");
static_assert(offsetof(DyingLight_OnObsessionChanged, newObsession) == 0x000000, "Member 'DyingLight_OnObsessionChanged::newObsession' has a wrong offset!");
static_assert(offsetof(DyingLight_OnObsessionChanged, previousObsession) == 0x000008, "Member 'DyingLight_OnObsessionChanged::previousObsession' has a wrong offset!");

// Function DBDCompetence.FlipFlop.Authority_OnPickedUp
// 0x0008 (0x0008 - 0x0000)
struct FlipFlop_Authority_OnPickedUp final
{
public:
	class ADBDPlayer*                             picker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlipFlop_Authority_OnPickedUp) == 0x000008, "Wrong alignment on FlipFlop_Authority_OnPickedUp");
static_assert(sizeof(FlipFlop_Authority_OnPickedUp) == 0x000008, "Wrong size on FlipFlop_Authority_OnPickedUp");
static_assert(offsetof(FlipFlop_Authority_OnPickedUp, picker) == 0x000000, "Member 'FlipFlop_Authority_OnPickedUp::picker' has a wrong offset!");

// Function DBDCompetence.ThrillingTremors.GetCooldownAtLevel
// 0x0004 (0x0004 - 0x0000)
struct ThrillingTremors_GetCooldownAtLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrillingTremors_GetCooldownAtLevel) == 0x000004, "Wrong alignment on ThrillingTremors_GetCooldownAtLevel");
static_assert(sizeof(ThrillingTremors_GetCooldownAtLevel) == 0x000004, "Wrong size on ThrillingTremors_GetCooldownAtLevel");
static_assert(offsetof(ThrillingTremors_GetCooldownAtLevel, ReturnValue) == 0x000000, "Member 'ThrillingTremors_GetCooldownAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.ThrillingTremors.GetDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct ThrillingTremors_GetDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrillingTremors_GetDurationAtLevel) == 0x000004, "Wrong alignment on ThrillingTremors_GetDurationAtLevel");
static_assert(sizeof(ThrillingTremors_GetDurationAtLevel) == 0x000004, "Wrong size on ThrillingTremors_GetDurationAtLevel");
static_assert(offsetof(ThrillingTremors_GetDurationAtLevel, ReturnValue) == 0x000000, "Member 'ThrillingTremors_GetDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.MonstrousShrine.Authority_OnSurvivorHookedOnScourgeHook
// 0x0028 (0x0028 - 0x0000)
struct MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook final
{
public:
	struct FGameEventData                         gameEventData;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook) == 0x000008, "Wrong alignment on MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook");
static_assert(sizeof(MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook) == 0x000028, "Wrong size on MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook");
static_assert(offsetof(MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook, gameEventData) == 0x000000, "Member 'MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook::gameEventData' has a wrong offset!");

// Function DBDCompetence.MonstrousShrine.Authority_OnSurvivorUnhookedOnScourgeHook
// 0x0028 (0x0028 - 0x0000)
struct MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook final
{
public:
	struct FGameEventData                         gameEventData;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook) == 0x000008, "Wrong alignment on MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook");
static_assert(sizeof(MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook) == 0x000028, "Wrong size on MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook");
static_assert(offsetof(MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook, gameEventData) == 0x000000, "Member 'MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook::gameEventData' has a wrong offset!");

// Function DBDCompetence.HexNoOneEscapesDeath.GetHasteAtLevel
// 0x0004 (0x0004 - 0x0000)
struct HexNoOneEscapesDeath_GetHasteAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HexNoOneEscapesDeath_GetHasteAtLevel) == 0x000004, "Wrong alignment on HexNoOneEscapesDeath_GetHasteAtLevel");
static_assert(sizeof(HexNoOneEscapesDeath_GetHasteAtLevel) == 0x000004, "Wrong size on HexNoOneEscapesDeath_GetHasteAtLevel");
static_assert(offsetof(HexNoOneEscapesDeath_GetHasteAtLevel, ReturnValue) == 0x000000, "Member 'HexNoOneEscapesDeath_GetHasteAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.HexRuin.GetRegressionModifierByLevel
// 0x0008 (0x0008 - 0x0000)
struct HexRuin_GetRegressionModifierByLevel final
{
public:
	int32                                         perkLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HexRuin_GetRegressionModifierByLevel) == 0x000004, "Wrong alignment on HexRuin_GetRegressionModifierByLevel");
static_assert(sizeof(HexRuin_GetRegressionModifierByLevel) == 0x000008, "Wrong size on HexRuin_GetRegressionModifierByLevel");
static_assert(offsetof(HexRuin_GetRegressionModifierByLevel, perkLevel) == 0x000000, "Member 'HexRuin_GetRegressionModifierByLevel::perkLevel' has a wrong offset!");
static_assert(offsetof(HexRuin_GetRegressionModifierByLevel, ReturnValue) == 0x000004, "Member 'HexRuin_GetRegressionModifierByLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.HideSurvivorVFXForKillerEffect.HideVFX
// 0x0001 (0x0001 - 0x0000)
struct HideSurvivorVFXForKillerEffect_HideVFX final
{
public:
	bool                                          hide;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HideSurvivorVFXForKillerEffect_HideVFX) == 0x000001, "Wrong alignment on HideSurvivorVFXForKillerEffect_HideVFX");
static_assert(sizeof(HideSurvivorVFXForKillerEffect_HideVFX) == 0x000001, "Wrong size on HideSurvivorVFXForKillerEffect_HideVFX");
static_assert(offsetof(HideSurvivorVFXForKillerEffect_HideVFX, hide) == 0x000000, "Member 'HideSurvivorVFXForKillerEffect_HideVFX::hide' has a wrong offset!");

// Function DBDCompetence.HighestLevelAndClosestEffectCondition.InitEffectArrays
// 0x0024 (0x0024 - 0x0000)
struct HighestLevelAndClosestEffectCondition_InitEffectArrays final
{
public:
	class FName                                   effectIDLevel1;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   effectIDLevel2;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   effectIDLevel3;                                    // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HighestLevelAndClosestEffectCondition_InitEffectArrays) == 0x000004, "Wrong alignment on HighestLevelAndClosestEffectCondition_InitEffectArrays");
static_assert(sizeof(HighestLevelAndClosestEffectCondition_InitEffectArrays) == 0x000024, "Wrong size on HighestLevelAndClosestEffectCondition_InitEffectArrays");
static_assert(offsetof(HighestLevelAndClosestEffectCondition_InitEffectArrays, effectIDLevel1) == 0x000000, "Member 'HighestLevelAndClosestEffectCondition_InitEffectArrays::effectIDLevel1' has a wrong offset!");
static_assert(offsetof(HighestLevelAndClosestEffectCondition_InitEffectArrays, effectIDLevel2) == 0x00000C, "Member 'HighestLevelAndClosestEffectCondition_InitEffectArrays::effectIDLevel2' has a wrong offset!");
static_assert(offsetof(HighestLevelAndClosestEffectCondition_InitEffectArrays, effectIDLevel3) == 0x000018, "Member 'HighestLevelAndClosestEffectCondition_InitEffectArrays::effectIDLevel3' has a wrong offset!");

// Function DBDCompetence.HighestLevelAndClosestEffectCondition.SetCurrentEffectLevel
// 0x0004 (0x0004 - 0x0000)
struct HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel final
{
public:
	int32                                         level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel) == 0x000004, "Wrong alignment on HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel");
static_assert(sizeof(HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel) == 0x000004, "Wrong size on HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel");
static_assert(offsetof(HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel, level) == 0x000000, "Member 'HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel::level' has a wrong offset!");

// Function DBDCompetence.ImAllEars.GetCooldownAtLevel
// 0x0004 (0x0004 - 0x0000)
struct ImAllEars_GetCooldownAtLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImAllEars_GetCooldownAtLevel) == 0x000004, "Wrong alignment on ImAllEars_GetCooldownAtLevel");
static_assert(sizeof(ImAllEars_GetCooldownAtLevel) == 0x000004, "Wrong size on ImAllEars_GetCooldownAtLevel");
static_assert(offsetof(ImAllEars_GetCooldownAtLevel, ReturnValue) == 0x000000, "Member 'ImAllEars_GetCooldownAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.ImAllEars.GetDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct ImAllEars_GetDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImAllEars_GetDurationAtLevel) == 0x000004, "Wrong alignment on ImAllEars_GetDurationAtLevel");
static_assert(sizeof(ImAllEars_GetDurationAtLevel) == 0x000004, "Wrong size on ImAllEars_GetDurationAtLevel");
static_assert(offsetof(ImAllEars_GetDurationAtLevel, ReturnValue) == 0x000000, "Member 'ImAllEars_GetDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.ImAllEars.Server_OnCamperLoudNoise
// 0x0038 (0x0038 - 0x0000)
struct ImAllEars_Server_OnCamperLoudNoise final
{
public:
	struct FGameplayTag                           gameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImAllEars_Server_OnCamperLoudNoise) == 0x000008, "Wrong alignment on ImAllEars_Server_OnCamperLoudNoise");
static_assert(sizeof(ImAllEars_Server_OnCamperLoudNoise) == 0x000038, "Wrong size on ImAllEars_Server_OnCamperLoudNoise");
static_assert(offsetof(ImAllEars_Server_OnCamperLoudNoise, gameplayTag) == 0x000000, "Member 'ImAllEars_Server_OnCamperLoudNoise::gameplayTag' has a wrong offset!");
static_assert(offsetof(ImAllEars_Server_OnCamperLoudNoise, gameEventData) == 0x000010, "Member 'ImAllEars_Server_OnCamperLoudNoise::gameEventData' has a wrong offset!");

// Function DBDCompetence.OnEventBaseAddon.OnEventFired
// 0x0028 (0x0028 - 0x0000)
struct OnEventBaseAddon_OnEventFired final
{
public:
	struct FGameEventData                         gameEventData;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnEventBaseAddon_OnEventFired) == 0x000008, "Wrong alignment on OnEventBaseAddon_OnEventFired");
static_assert(sizeof(OnEventBaseAddon_OnEventFired) == 0x000028, "Wrong size on OnEventBaseAddon_OnEventFired");
static_assert(offsetof(OnEventBaseAddon_OnEventFired, gameEventData) == 0x000000, "Member 'OnEventBaseAddon_OnEventFired::gameEventData' has a wrong offset!");

// Function DBDCompetence.InfectiousFright.RevealSurvivorLocation
// 0x0008 (0x0008 - 0x0000)
struct InfectiousFright_RevealSurvivorLocation final
{
public:
	class ACamperPlayer*                          target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectiousFright_RevealSurvivorLocation) == 0x000008, "Wrong alignment on InfectiousFright_RevealSurvivorLocation");
static_assert(sizeof(InfectiousFright_RevealSurvivorLocation) == 0x000008, "Wrong size on InfectiousFright_RevealSurvivorLocation");
static_assert(offsetof(InfectiousFright_RevealSurvivorLocation, target) == 0x000000, "Member 'InfectiousFright_RevealSurvivorLocation::target' has a wrong offset!");

// Function DBDCompetence.InnerStrength.Authority_OnPlayerImmobilizeStateChanged
// 0x0002 (0x0002 - 0x0000)
struct InnerStrength_Authority_OnPlayerImmobilizeStateChanged final
{
public:
	ECamperImmobilizeState                        oldImmobilizeState;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperImmobilizeState                        newImmobilizeState;                                // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InnerStrength_Authority_OnPlayerImmobilizeStateChanged) == 0x000001, "Wrong alignment on InnerStrength_Authority_OnPlayerImmobilizeStateChanged");
static_assert(sizeof(InnerStrength_Authority_OnPlayerImmobilizeStateChanged) == 0x000002, "Wrong size on InnerStrength_Authority_OnPlayerImmobilizeStateChanged");
static_assert(offsetof(InnerStrength_Authority_OnPlayerImmobilizeStateChanged, oldImmobilizeState) == 0x000000, "Member 'InnerStrength_Authority_OnPlayerImmobilizeStateChanged::oldImmobilizeState' has a wrong offset!");
static_assert(offsetof(InnerStrength_Authority_OnPlayerImmobilizeStateChanged, newImmobilizeState) == 0x000001, "Member 'InnerStrength_Authority_OnPlayerImmobilizeStateChanged::newImmobilizeState' has a wrong offset!");

// Function DBDCompetence.InnerStrength.GetHideDuration
// 0x0004 (0x0004 - 0x0000)
struct InnerStrength_GetHideDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InnerStrength_GetHideDuration) == 0x000004, "Wrong alignment on InnerStrength_GetHideDuration");
static_assert(sizeof(InnerStrength_GetHideDuration) == 0x000004, "Wrong size on InnerStrength_GetHideDuration");
static_assert(offsetof(InnerStrength_GetHideDuration, ReturnValue) == 0x000000, "Member 'InnerStrength_GetHideDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.IsBestProveThyselfEffectInRange.OnInRangeChanged
// 0x0010 (0x0010 - 0x0000)
struct IsBestProveThyselfEffectInRange_OnInRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProveThyselfEffect*                    proveThyselfEffect;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsBestProveThyselfEffectInRange_OnInRangeChanged) == 0x000008, "Wrong alignment on IsBestProveThyselfEffectInRange_OnInRangeChanged");
static_assert(sizeof(IsBestProveThyselfEffectInRange_OnInRangeChanged) == 0x000010, "Wrong size on IsBestProveThyselfEffectInRange_OnInRangeChanged");
static_assert(offsetof(IsBestProveThyselfEffectInRange_OnInRangeChanged, inRange) == 0x000000, "Member 'IsBestProveThyselfEffectInRange_OnInRangeChanged::inRange' has a wrong offset!");
static_assert(offsetof(IsBestProveThyselfEffectInRange_OnInRangeChanged, proveThyselfEffect) == 0x000008, "Member 'IsBestProveThyselfEffectInRange_OnInRangeChanged::proveThyselfEffect' has a wrong offset!");

// Function DBDCompetence.IsHighestLevelAndClosestOriginatingEffect.OnStatusEffectAddedOrRemoved
// 0x0010 (0x0010 - 0x0000)
struct IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved final
{
public:
	class UStatusEffect*                          effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          valid;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved) == 0x000008, "Wrong alignment on IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved");
static_assert(sizeof(IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved) == 0x000010, "Wrong size on IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved");
static_assert(offsetof(IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved, effect) == 0x000000, "Member 'IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved::effect' has a wrong offset!");
static_assert(offsetof(IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved, valid) == 0x000008, "Member 'IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved::valid' has a wrong offset!");

// Function DBDCompetence.IsHighestTierOriginatingPerk.OnStatusEffectAddedOrRemoved
// 0x0010 (0x0010 - 0x0000)
struct IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved final
{
public:
	class UStatusEffect*                          effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          valid;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved) == 0x000008, "Wrong alignment on IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved");
static_assert(sizeof(IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved) == 0x000010, "Wrong size on IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved");
static_assert(offsetof(IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved, effect) == 0x000000, "Member 'IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved::effect' has a wrong offset!");
static_assert(offsetof(IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved, valid) == 0x000008, "Member 'IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved::valid' has a wrong offset!");

// Function DBDCompetence.IsHighestTierOriginatingPerk.OnStatusEffectApplicableChanged
// 0x0010 (0x0010 - 0x0000)
struct IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged final
{
public:
	class UGameplayModifierContainer*             gameplayModifierContainer;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isApplicable;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged) == 0x000008, "Wrong alignment on IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged");
static_assert(sizeof(IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged) == 0x000010, "Wrong size on IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged");
static_assert(offsetof(IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged, gameplayModifierContainer) == 0x000000, "Member 'IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged::gameplayModifierContainer' has a wrong offset!");
static_assert(offsetof(IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged, isApplicable) == 0x000008, "Member 'IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged::isApplicable' has a wrong offset!");

// Function DBDCompetence.IsInRangeOfOriginatingPlayer.OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct IsInRangeOfOriginatingPlayer_OnInRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsInRangeOfOriginatingPlayer_OnInRangeChanged) == 0x000001, "Wrong alignment on IsInRangeOfOriginatingPlayer_OnInRangeChanged");
static_assert(sizeof(IsInRangeOfOriginatingPlayer_OnInRangeChanged) == 0x000001, "Wrong size on IsInRangeOfOriginatingPlayer_OnInRangeChanged");
static_assert(offsetof(IsInRangeOfOriginatingPlayer_OnInRangeChanged, inRange) == 0x000000, "Member 'IsInRangeOfOriginatingPlayer_OnInRangeChanged::inRange' has a wrong offset!");

// Function DBDCompetence.IsOriginatingPerkBoundToTotems.Init
// 0x0008 (0x0008 - 0x0000)
struct IsOriginatingPerkBoundToTotems_Init final
{
public:
	EComparisonOperation                          comparisonOperator;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         totemCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsOriginatingPerkBoundToTotems_Init) == 0x000004, "Wrong alignment on IsOriginatingPerkBoundToTotems_Init");
static_assert(sizeof(IsOriginatingPerkBoundToTotems_Init) == 0x000008, "Wrong size on IsOriginatingPerkBoundToTotems_Init");
static_assert(offsetof(IsOriginatingPerkBoundToTotems_Init, comparisonOperator) == 0x000000, "Member 'IsOriginatingPerkBoundToTotems_Init::comparisonOperator' has a wrong offset!");
static_assert(offsetof(IsOriginatingPerkBoundToTotems_Init, totemCount) == 0x000004, "Member 'IsOriginatingPerkBoundToTotems_Init::totemCount' has a wrong offset!");

// Function DBDCompetence.IsPlayerLookingAtKillerCondition.OnPawnControllerChanged
// 0x0010 (0x0010 - 0x0000)
struct IsPlayerLookingAtKillerCondition_OnPawnControllerChanged final
{
public:
	class APawn*                                  pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerLookingAtKillerCondition_OnPawnControllerChanged) == 0x000008, "Wrong alignment on IsPlayerLookingAtKillerCondition_OnPawnControllerChanged");
static_assert(sizeof(IsPlayerLookingAtKillerCondition_OnPawnControllerChanged) == 0x000010, "Wrong size on IsPlayerLookingAtKillerCondition_OnPawnControllerChanged");
static_assert(offsetof(IsPlayerLookingAtKillerCondition_OnPawnControllerChanged, pawn) == 0x000000, "Member 'IsPlayerLookingAtKillerCondition_OnPawnControllerChanged::pawn' has a wrong offset!");
static_assert(offsetof(IsPlayerLookingAtKillerCondition_OnPawnControllerChanged, controller) == 0x000008, "Member 'IsPlayerLookingAtKillerCondition_OnPawnControllerChanged::controller' has a wrong offset!");

// Function DBDCompetence.IsPlayerLookingAtKillerCondition.OnRep_IsLookingTowards
// 0x0001 (0x0001 - 0x0000)
struct IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards final
{
public:
	bool                                          isLookingTowards;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards) == 0x000001, "Wrong alignment on IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards");
static_assert(sizeof(IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards) == 0x000001, "Wrong size on IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards");
static_assert(offsetof(IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards, isLookingTowards) == 0x000000, "Member 'IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards::isLookingTowards' has a wrong offset!");

// Function DBDCompetence.IsPlayerPerfInteractionWithNoItem.OnCollectableChargeStateChange
// 0x0001 (0x0001 - 0x0000)
struct IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange final
{
public:
	bool                                          empty;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange) == 0x000001, "Wrong alignment on IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange");
static_assert(sizeof(IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange) == 0x000001, "Wrong size on IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange");
static_assert(offsetof(IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange, empty) == 0x000000, "Member 'IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange::empty' has a wrong offset!");

// Function DBDCompetence.IsPlayerPerformingItemInteraction.OnCollectableChargeStateChange
// 0x0001 (0x0001 - 0x0000)
struct IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange final
{
public:
	bool                                          empty;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange) == 0x000001, "Wrong alignment on IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange");
static_assert(sizeof(IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange) == 0x000001, "Wrong size on IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange");
static_assert(offsetof(IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange, empty) == 0x000000, "Member 'IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange::empty' has a wrong offset!");

// Function DBDCompetence.IsPlayerPerformingItemInteraction.OnCollectablePickedUp
// 0x0008 (0x0008 - 0x0000)
struct IsPlayerPerformingItemInteraction_OnCollectablePickedUp final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerPerformingItemInteraction_OnCollectablePickedUp) == 0x000008, "Wrong alignment on IsPlayerPerformingItemInteraction_OnCollectablePickedUp");
static_assert(sizeof(IsPlayerPerformingItemInteraction_OnCollectablePickedUp) == 0x000008, "Wrong size on IsPlayerPerformingItemInteraction_OnCollectablePickedUp");
static_assert(offsetof(IsPlayerPerformingItemInteraction_OnCollectablePickedUp, player) == 0x000000, "Member 'IsPlayerPerformingItemInteraction_OnCollectablePickedUp::player' has a wrong offset!");

// Function DBDCompetence.IsPlayerPerformingInteraction.SetInteractionSemantics
// 0x0020 (0x0020 - 0x0000)
struct IsPlayerPerformingInteraction_SetInteractionSemantics final
{
public:
	struct FGameplayTagContainer                  interactionSemantics;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerPerformingInteraction_SetInteractionSemantics) == 0x000008, "Wrong alignment on IsPlayerPerformingInteraction_SetInteractionSemantics");
static_assert(sizeof(IsPlayerPerformingInteraction_SetInteractionSemantics) == 0x000020, "Wrong size on IsPlayerPerformingInteraction_SetInteractionSemantics");
static_assert(offsetof(IsPlayerPerformingInteraction_SetInteractionSemantics, interactionSemantics) == 0x000000, "Member 'IsPlayerPerformingInteraction_SetInteractionSemantics::interactionSemantics' has a wrong offset!");

// Function DBDCompetence.IsPlayerPerformingInteraction.UpdateIsTrue
// 0x0008 (0x0008 - 0x0000)
struct IsPlayerPerformingInteraction_UpdateIsTrue final
{
public:
	class UInteractionDefinition*                 interactionDefinition;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerPerformingInteraction_UpdateIsTrue) == 0x000008, "Wrong alignment on IsPlayerPerformingInteraction_UpdateIsTrue");
static_assert(sizeof(IsPlayerPerformingInteraction_UpdateIsTrue) == 0x000008, "Wrong size on IsPlayerPerformingInteraction_UpdateIsTrue");
static_assert(offsetof(IsPlayerPerformingInteraction_UpdateIsTrue, interactionDefinition) == 0x000000, "Member 'IsPlayerPerformingInteraction_UpdateIsTrue::interactionDefinition' has a wrong offset!");

// Function DBDCompetence.LingeringBlessedStatusEffect.Authority_OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct LingeringBlessedStatusEffect_Authority_OnInRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LingeringBlessedStatusEffect_Authority_OnInRangeChanged) == 0x000001, "Wrong alignment on LingeringBlessedStatusEffect_Authority_OnInRangeChanged");
static_assert(sizeof(LingeringBlessedStatusEffect_Authority_OnInRangeChanged) == 0x000001, "Wrong size on LingeringBlessedStatusEffect_Authority_OnInRangeChanged");
static_assert(offsetof(LingeringBlessedStatusEffect_Authority_OnInRangeChanged, inRange) == 0x000000, "Member 'LingeringBlessedStatusEffect_Authority_OnInRangeChanged::inRange' has a wrong offset!");

// Function DBDCompetence.LingeringBlessedStatusEffect.SetLingerDuration
// 0x0004 (0x0004 - 0x0000)
struct LingeringBlessedStatusEffect_SetLingerDuration final
{
public:
	float                                         lingerDuration;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LingeringBlessedStatusEffect_SetLingerDuration) == 0x000004, "Wrong alignment on LingeringBlessedStatusEffect_SetLingerDuration");
static_assert(sizeof(LingeringBlessedStatusEffect_SetLingerDuration) == 0x000004, "Wrong size on LingeringBlessedStatusEffect_SetLingerDuration");
static_assert(offsetof(LingeringBlessedStatusEffect_SetLingerDuration, lingerDuration) == 0x000000, "Member 'LingeringBlessedStatusEffect_SetLingerDuration::lingerDuration' has a wrong offset!");

// Function DBDCompetence.LuckyBreak.Authority_OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct LuckyBreak_Authority_OnDamageStateChanged final
{
public:
	ECamperDamageState                            oldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            currentDamageState;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuckyBreak_Authority_OnDamageStateChanged) == 0x000001, "Wrong alignment on LuckyBreak_Authority_OnDamageStateChanged");
static_assert(sizeof(LuckyBreak_Authority_OnDamageStateChanged) == 0x000002, "Wrong size on LuckyBreak_Authority_OnDamageStateChanged");
static_assert(offsetof(LuckyBreak_Authority_OnDamageStateChanged, oldDamageState) == 0x000000, "Member 'LuckyBreak_Authority_OnDamageStateChanged::oldDamageState' has a wrong offset!");
static_assert(offsetof(LuckyBreak_Authority_OnDamageStateChanged, currentDamageState) == 0x000001, "Member 'LuckyBreak_Authority_OnDamageStateChanged::currentDamageState' has a wrong offset!");

// Function DBDCompetence.MakeYourChoice.CanApplyExposedEffect
// 0x0010 (0x0010 - 0x0000)
struct MakeYourChoice_CanApplyExposedEffect final
{
public:
	const class AActor*                           unhooker;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MakeYourChoice_CanApplyExposedEffect) == 0x000008, "Wrong alignment on MakeYourChoice_CanApplyExposedEffect");
static_assert(sizeof(MakeYourChoice_CanApplyExposedEffect) == 0x000010, "Wrong size on MakeYourChoice_CanApplyExposedEffect");
static_assert(offsetof(MakeYourChoice_CanApplyExposedEffect, unhooker) == 0x000000, "Member 'MakeYourChoice_CanApplyExposedEffect::unhooker' has a wrong offset!");
static_assert(offsetof(MakeYourChoice_CanApplyExposedEffect, ReturnValue) == 0x000008, "Member 'MakeYourChoice_CanApplyExposedEffect::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Poised.GetActivationTime
// 0x0004 (0x0004 - 0x0000)
struct Poised_GetActivationTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Poised_GetActivationTime) == 0x000004, "Wrong alignment on Poised_GetActivationTime");
static_assert(sizeof(Poised_GetActivationTime) == 0x000004, "Wrong size on Poised_GetActivationTime");
static_assert(offsetof(Poised_GetActivationTime, ReturnValue) == 0x000000, "Member 'Poised_GetActivationTime::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Saboteur.GetCooldownDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Saboteur_GetCooldownDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Saboteur_GetCooldownDurationAtLevel) == 0x000004, "Wrong alignment on Saboteur_GetCooldownDurationAtLevel");
static_assert(sizeof(Saboteur_GetCooldownDurationAtLevel) == 0x000004, "Wrong size on Saboteur_GetCooldownDurationAtLevel");
static_assert(offsetof(Saboteur_GetCooldownDurationAtLevel, ReturnValue) == 0x000000, "Member 'Saboteur_GetCooldownDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SecondWind.Authority_OnHealProgress
// 0x0018 (0x0018 - 0x0000)
struct SecondWind_Authority_OnHealProgress final
{
public:
	float                                         individualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         totalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 chargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          wasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         deltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SecondWind_Authority_OnHealProgress) == 0x000008, "Wrong alignment on SecondWind_Authority_OnHealProgress");
static_assert(sizeof(SecondWind_Authority_OnHealProgress) == 0x000018, "Wrong size on SecondWind_Authority_OnHealProgress");
static_assert(offsetof(SecondWind_Authority_OnHealProgress, individualChargeAmount) == 0x000000, "Member 'SecondWind_Authority_OnHealProgress::individualChargeAmount' has a wrong offset!");
static_assert(offsetof(SecondWind_Authority_OnHealProgress, totalChargeAmount) == 0x000004, "Member 'SecondWind_Authority_OnHealProgress::totalChargeAmount' has a wrong offset!");
static_assert(offsetof(SecondWind_Authority_OnHealProgress, chargeInstigator) == 0x000008, "Member 'SecondWind_Authority_OnHealProgress::chargeInstigator' has a wrong offset!");
static_assert(offsetof(SecondWind_Authority_OnHealProgress, wasCoop) == 0x000010, "Member 'SecondWind_Authority_OnHealProgress::wasCoop' has a wrong offset!");
static_assert(offsetof(SecondWind_Authority_OnHealProgress, deltaTime) == 0x000014, "Member 'SecondWind_Authority_OnHealProgress::deltaTime' has a wrong offset!");

// Function DBDCompetence.SoleSurvivor.Authority_OnSurvivorAdded
// 0x0008 (0x0008 - 0x0000)
struct SoleSurvivor_Authority_OnSurvivorAdded final
{
public:
	const class ACamperPlayer*                    survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoleSurvivor_Authority_OnSurvivorAdded) == 0x000008, "Wrong alignment on SoleSurvivor_Authority_OnSurvivorAdded");
static_assert(sizeof(SoleSurvivor_Authority_OnSurvivorAdded) == 0x000008, "Wrong size on SoleSurvivor_Authority_OnSurvivorAdded");
static_assert(offsetof(SoleSurvivor_Authority_OnSurvivorAdded, survivor) == 0x000000, "Member 'SoleSurvivor_Authority_OnSurvivorAdded::survivor' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.AreTriggersMet
// 0x0001 (0x0001 - 0x0000)
struct SpineChillPerk_AreTriggersMet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_AreTriggersMet) == 0x000001, "Wrong alignment on SpineChillPerk_AreTriggersMet");
static_assert(sizeof(SpineChillPerk_AreTriggersMet) == 0x000001, "Wrong size on SpineChillPerk_AreTriggersMet");
static_assert(offsetof(SpineChillPerk_AreTriggersMet, ReturnValue) == 0x000000, "Member 'SpineChillPerk_AreTriggersMet::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.Authority_OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct SpineChillPerk_Authority_OnInRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_Authority_OnInRangeChanged) == 0x000001, "Wrong alignment on SpineChillPerk_Authority_OnInRangeChanged");
static_assert(sizeof(SpineChillPerk_Authority_OnInRangeChanged) == 0x000001, "Wrong size on SpineChillPerk_Authority_OnInRangeChanged");
static_assert(offsetof(SpineChillPerk_Authority_OnInRangeChanged, inRange) == 0x000000, "Member 'SpineChillPerk_Authority_OnInRangeChanged::inRange' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.Authority_OnIsInLineOfSightChanged
// 0x0001 (0x0001 - 0x0000)
struct SpineChillPerk_Authority_OnIsInLineOfSightChanged final
{
public:
	bool                                          isInLineOfSight;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_Authority_OnIsInLineOfSightChanged) == 0x000001, "Wrong alignment on SpineChillPerk_Authority_OnIsInLineOfSightChanged");
static_assert(sizeof(SpineChillPerk_Authority_OnIsInLineOfSightChanged) == 0x000001, "Wrong size on SpineChillPerk_Authority_OnIsInLineOfSightChanged");
static_assert(offsetof(SpineChillPerk_Authority_OnIsInLineOfSightChanged, isInLineOfSight) == 0x000000, "Member 'SpineChillPerk_Authority_OnIsInLineOfSightChanged::isInLineOfSight' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.Authority_OnIsLookingTowardsChanged
// 0x0001 (0x0001 - 0x0000)
struct SpineChillPerk_Authority_OnIsLookingTowardsChanged final
{
public:
	bool                                          isLookingTowards;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_Authority_OnIsLookingTowardsChanged) == 0x000001, "Wrong alignment on SpineChillPerk_Authority_OnIsLookingTowardsChanged");
static_assert(sizeof(SpineChillPerk_Authority_OnIsLookingTowardsChanged) == 0x000001, "Wrong size on SpineChillPerk_Authority_OnIsLookingTowardsChanged");
static_assert(offsetof(SpineChillPerk_Authority_OnIsLookingTowardsChanged, isLookingTowards) == 0x000000, "Member 'SpineChillPerk_Authority_OnIsLookingTowardsChanged::isLookingTowards' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.GetActionSpeed
// 0x0008 (0x0008 - 0x0000)
struct SpineChillPerk_GetActionSpeed final
{
public:
	int32                                         perkLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_GetActionSpeed) == 0x000004, "Wrong alignment on SpineChillPerk_GetActionSpeed");
static_assert(sizeof(SpineChillPerk_GetActionSpeed) == 0x000008, "Wrong size on SpineChillPerk_GetActionSpeed");
static_assert(offsetof(SpineChillPerk_GetActionSpeed, perkLevel) == 0x000000, "Member 'SpineChillPerk_GetActionSpeed::perkLevel' has a wrong offset!");
static_assert(offsetof(SpineChillPerk_GetActionSpeed, ReturnValue) == 0x000004, "Member 'SpineChillPerk_GetActionSpeed::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.GetLingerDuration
// 0x0004 (0x0004 - 0x0000)
struct SpineChillPerk_GetLingerDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_GetLingerDuration) == 0x000004, "Wrong alignment on SpineChillPerk_GetLingerDuration");
static_assert(sizeof(SpineChillPerk_GetLingerDuration) == 0x000004, "Wrong size on SpineChillPerk_GetLingerDuration");
static_assert(offsetof(SpineChillPerk_GetLingerDuration, ReturnValue) == 0x000000, "Member 'SpineChillPerk_GetLingerDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.GetRange
// 0x0004 (0x0004 - 0x0000)
struct SpineChillPerk_GetRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_GetRange) == 0x000004, "Wrong alignment on SpineChillPerk_GetRange");
static_assert(sizeof(SpineChillPerk_GetRange) == 0x000004, "Wrong size on SpineChillPerk_GetRange");
static_assert(offsetof(SpineChillPerk_GetRange, ReturnValue) == 0x000000, "Member 'SpineChillPerk_GetRange::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.HasLineOfSight
// 0x0001 (0x0001 - 0x0000)
struct SpineChillPerk_HasLineOfSight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_HasLineOfSight) == 0x000001, "Wrong alignment on SpineChillPerk_HasLineOfSight");
static_assert(sizeof(SpineChillPerk_HasLineOfSight) == 0x000001, "Wrong size on SpineChillPerk_HasLineOfSight");
static_assert(offsetof(SpineChillPerk_HasLineOfSight, ReturnValue) == 0x000000, "Member 'SpineChillPerk_HasLineOfSight::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.IsInRange
// 0x0001 (0x0001 - 0x0000)
struct SpineChillPerk_IsInRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_IsInRange) == 0x000001, "Wrong alignment on SpineChillPerk_IsInRange");
static_assert(sizeof(SpineChillPerk_IsInRange) == 0x000001, "Wrong size on SpineChillPerk_IsInRange");
static_assert(offsetof(SpineChillPerk_IsInRange, ReturnValue) == 0x000000, "Member 'SpineChillPerk_IsInRange::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.IsLookingTowards
// 0x0001 (0x0001 - 0x0000)
struct SpineChillPerk_IsLookingTowards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_IsLookingTowards) == 0x000001, "Wrong alignment on SpineChillPerk_IsLookingTowards");
static_assert(sizeof(SpineChillPerk_IsLookingTowards) == 0x000001, "Wrong size on SpineChillPerk_IsLookingTowards");
static_assert(offsetof(SpineChillPerk_IsLookingTowards, ReturnValue) == 0x000000, "Member 'SpineChillPerk_IsLookingTowards::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SprintBurst.Authority_OnIsRunningAndMovingChanged
// 0x0001 (0x0001 - 0x0000)
struct SprintBurst_Authority_OnIsRunningAndMovingChanged final
{
public:
	bool                                          isRunningAndMoving;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SprintBurst_Authority_OnIsRunningAndMovingChanged) == 0x000001, "Wrong alignment on SprintBurst_Authority_OnIsRunningAndMovingChanged");
static_assert(sizeof(SprintBurst_Authority_OnIsRunningAndMovingChanged) == 0x000001, "Wrong size on SprintBurst_Authority_OnIsRunningAndMovingChanged");
static_assert(offsetof(SprintBurst_Authority_OnIsRunningAndMovingChanged, isRunningAndMoving) == 0x000000, "Member 'SprintBurst_Authority_OnIsRunningAndMovingChanged::isRunningAndMoving' has a wrong offset!");

// Function DBDCompetence.SprintBurst.Authority_OnPerkFlagsChanged
// 0x0010 (0x0010 - 0x0000)
struct SprintBurst_Authority_OnPerkFlagsChanged final
{
public:
	struct FGameplayTag                           gameplayTag;                                       // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAdded;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SprintBurst_Authority_OnPerkFlagsChanged) == 0x000004, "Wrong alignment on SprintBurst_Authority_OnPerkFlagsChanged");
static_assert(sizeof(SprintBurst_Authority_OnPerkFlagsChanged) == 0x000010, "Wrong size on SprintBurst_Authority_OnPerkFlagsChanged");
static_assert(offsetof(SprintBurst_Authority_OnPerkFlagsChanged, gameplayTag) == 0x000000, "Member 'SprintBurst_Authority_OnPerkFlagsChanged::gameplayTag' has a wrong offset!");
static_assert(offsetof(SprintBurst_Authority_OnPerkFlagsChanged, isAdded) == 0x00000C, "Member 'SprintBurst_Authority_OnPerkFlagsChanged::isAdded' has a wrong offset!");

// Function DBDCompetence.SprintBurst.GetExhaustedDuration
// 0x0004 (0x0004 - 0x0000)
struct SprintBurst_GetExhaustedDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SprintBurst_GetExhaustedDuration) == 0x000004, "Wrong alignment on SprintBurst_GetExhaustedDuration");
static_assert(sizeof(SprintBurst_GetExhaustedDuration) == 0x000004, "Wrong size on SprintBurst_GetExhaustedDuration");
static_assert(offsetof(SprintBurst_GetExhaustedDuration, ReturnValue) == 0x000000, "Member 'SprintBurst_GetExhaustedDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SprintBurst.GetSprintDuration
// 0x0004 (0x0004 - 0x0000)
struct SprintBurst_GetSprintDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SprintBurst_GetSprintDuration) == 0x000004, "Wrong alignment on SprintBurst_GetSprintDuration");
static_assert(sizeof(SprintBurst_GetSprintDuration) == 0x000004, "Wrong size on SprintBurst_GetSprintDuration");
static_assert(offsetof(SprintBurst_GetSprintDuration, ReturnValue) == 0x000000, "Member 'SprintBurst_GetSprintDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Surge.Client_TriggerEffects
// 0x0010 (0x0010 - 0x0000)
struct Surge_Client_TriggerEffects final
{
public:
	TArray<class AGenerator*>                     generators;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Surge_Client_TriggerEffects) == 0x000008, "Wrong alignment on Surge_Client_TriggerEffects");
static_assert(sizeof(Surge_Client_TriggerEffects) == 0x000010, "Wrong size on Surge_Client_TriggerEffects");
static_assert(offsetof(Surge_Client_TriggerEffects, generators) == 0x000000, "Member 'Surge_Client_TriggerEffects::generators' has a wrong offset!");

// Function DBDCompetence.Surge.GetCooldownDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Surge_GetCooldownDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Surge_GetCooldownDurationAtLevel) == 0x000004, "Wrong alignment on Surge_GetCooldownDurationAtLevel");
static_assert(sizeof(Surge_GetCooldownDurationAtLevel) == 0x000004, "Wrong size on Surge_GetCooldownDurationAtLevel");
static_assert(offsetof(Surge_GetCooldownDurationAtLevel, ReturnValue) == 0x000000, "Member 'Surge_GetCooldownDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Surge.GetHasCooldown
// 0x0001 (0x0001 - 0x0000)
struct Surge_GetHasCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Surge_GetHasCooldown) == 0x000001, "Wrong alignment on Surge_GetHasCooldown");
static_assert(sizeof(Surge_GetHasCooldown) == 0x000001, "Wrong size on Surge_GetHasCooldown");
static_assert(offsetof(Surge_GetHasCooldown, ReturnValue) == 0x000000, "Member 'Surge_GetHasCooldown::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Surge.GetInstantRegressionAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Surge_GetInstantRegressionAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Surge_GetInstantRegressionAtLevel) == 0x000004, "Wrong alignment on Surge_GetInstantRegressionAtLevel");
static_assert(sizeof(Surge_GetInstantRegressionAtLevel) == 0x000004, "Wrong size on Surge_GetInstantRegressionAtLevel");
static_assert(offsetof(Surge_GetInstantRegressionAtLevel, ReturnValue) == 0x000000, "Member 'Surge_GetInstantRegressionAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Surge.GetZoneRadius
// 0x0004 (0x0004 - 0x0000)
struct Surge_GetZoneRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Surge_GetZoneRadius) == 0x000004, "Wrong alignment on Surge_GetZoneRadius");
static_assert(sizeof(Surge_GetZoneRadius) == 0x000004, "Wrong size on Surge_GetZoneRadius");
static_assert(offsetof(Surge_GetZoneRadius, ReturnValue) == 0x000000, "Member 'Surge_GetZoneRadius::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Tinkerer.Authority_OnGeneratorChargePercentChanged
// 0x0010 (0x0010 - 0x0000)
struct Tinkerer_Authority_OnGeneratorChargePercentChanged final
{
public:
	class UChargeableComponent*                   chargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         percentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         totalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tinkerer_Authority_OnGeneratorChargePercentChanged) == 0x000008, "Wrong alignment on Tinkerer_Authority_OnGeneratorChargePercentChanged");
static_assert(sizeof(Tinkerer_Authority_OnGeneratorChargePercentChanged) == 0x000010, "Wrong size on Tinkerer_Authority_OnGeneratorChargePercentChanged");
static_assert(offsetof(Tinkerer_Authority_OnGeneratorChargePercentChanged, chargeableComponent) == 0x000000, "Member 'Tinkerer_Authority_OnGeneratorChargePercentChanged::chargeableComponent' has a wrong offset!");
static_assert(offsetof(Tinkerer_Authority_OnGeneratorChargePercentChanged, percentCompletionChange) == 0x000008, "Member 'Tinkerer_Authority_OnGeneratorChargePercentChanged::percentCompletionChange' has a wrong offset!");
static_assert(offsetof(Tinkerer_Authority_OnGeneratorChargePercentChanged, totalPercentComplete) == 0x00000C, "Member 'Tinkerer_Authority_OnGeneratorChargePercentChanged::totalPercentComplete' has a wrong offset!");

// Function DBDCompetence.Tinkerer.Authority_OnGeneratorReachedThreshold
// 0x0008 (0x0008 - 0x0000)
struct Tinkerer_Authority_OnGeneratorReachedThreshold final
{
public:
	class AGenerator*                             generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tinkerer_Authority_OnGeneratorReachedThreshold) == 0x000008, "Wrong alignment on Tinkerer_Authority_OnGeneratorReachedThreshold");
static_assert(sizeof(Tinkerer_Authority_OnGeneratorReachedThreshold) == 0x000008, "Wrong size on Tinkerer_Authority_OnGeneratorReachedThreshold");
static_assert(offsetof(Tinkerer_Authority_OnGeneratorReachedThreshold, generator) == 0x000000, "Member 'Tinkerer_Authority_OnGeneratorReachedThreshold::generator' has a wrong offset!");

// Function DBDCompetence.Tinkerer.Authority_OnUndetectableAttackSuccessNearActiveGenerator
// 0x0010 (0x0010 - 0x0000)
struct Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator final
{
public:
	class ADBDPlayer*                             instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator) == 0x000008, "Wrong alignment on Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator");
static_assert(sizeof(Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator) == 0x000010, "Wrong size on Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator");
static_assert(offsetof(Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator, instigator) == 0x000000, "Member 'Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator::instigator' has a wrong offset!");
static_assert(offsetof(Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator, target) == 0x000008, "Member 'Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator::target' has a wrong offset!");

// Function DBDCompetence.Tinkerer.Authority_OnUndetectableGeneratorInterrupt
// 0x0010 (0x0010 - 0x0000)
struct Tinkerer_Authority_OnUndetectableGeneratorInterrupt final
{
public:
	class ADBDPlayer*                             instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tinkerer_Authority_OnUndetectableGeneratorInterrupt) == 0x000008, "Wrong alignment on Tinkerer_Authority_OnUndetectableGeneratorInterrupt");
static_assert(sizeof(Tinkerer_Authority_OnUndetectableGeneratorInterrupt) == 0x000010, "Wrong size on Tinkerer_Authority_OnUndetectableGeneratorInterrupt");
static_assert(offsetof(Tinkerer_Authority_OnUndetectableGeneratorInterrupt, instigator) == 0x000000, "Member 'Tinkerer_Authority_OnUndetectableGeneratorInterrupt::instigator' has a wrong offset!");
static_assert(offsetof(Tinkerer_Authority_OnUndetectableGeneratorInterrupt, target) == 0x000008, "Member 'Tinkerer_Authority_OnUndetectableGeneratorInterrupt::target' has a wrong offset!");

// Function DBDCompetence.Tinkerer.GetActivationTimeAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Tinkerer_GetActivationTimeAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tinkerer_GetActivationTimeAtLevel) == 0x000004, "Wrong alignment on Tinkerer_GetActivationTimeAtLevel");
static_assert(sizeof(Tinkerer_GetActivationTimeAtLevel) == 0x000004, "Wrong size on Tinkerer_GetActivationTimeAtLevel");
static_assert(offsetof(Tinkerer_GetActivationTimeAtLevel, ReturnValue) == 0x000000, "Member 'Tinkerer_GetActivationTimeAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Tinkerer.GetTriggerThreshold
// 0x0004 (0x0004 - 0x0000)
struct Tinkerer_GetTriggerThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tinkerer_GetTriggerThreshold) == 0x000004, "Wrong alignment on Tinkerer_GetTriggerThreshold");
static_assert(sizeof(Tinkerer_GetTriggerThreshold) == 0x000004, "Wrong size on Tinkerer_GetTriggerThreshold");
static_assert(offsetof(Tinkerer_GetTriggerThreshold, ReturnValue) == 0x000000, "Member 'Tinkerer_GetTriggerThreshold::ReturnValue' has a wrong offset!");

// Function DBDCompetence.YamaokaFamilyCrest.RevealSurvivor
// 0x0008 (0x0008 - 0x0000)
struct YamaokaFamilyCrest_RevealSurvivor final
{
public:
	class ACamperPlayer*                          survivorToReveal;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(YamaokaFamilyCrest_RevealSurvivor) == 0x000008, "Wrong alignment on YamaokaFamilyCrest_RevealSurvivor");
static_assert(sizeof(YamaokaFamilyCrest_RevealSurvivor) == 0x000008, "Wrong size on YamaokaFamilyCrest_RevealSurvivor");
static_assert(offsetof(YamaokaFamilyCrest_RevealSurvivor, survivorToReveal) == 0x000000, "Member 'YamaokaFamilyCrest_RevealSurvivor::survivorToReveal' has a wrong offset!");

}

