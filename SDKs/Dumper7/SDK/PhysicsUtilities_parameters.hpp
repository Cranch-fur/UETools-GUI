#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhysicsUtilities

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function PhysicsUtilities.DynamicCapsuleResizerComponent.OnHit
// 0x00B8 (0x00B8 - 0x0000)
struct DynamicCapsuleResizerComponent_OnHit final
{
public:
	class UPrimitiveComponent*                    hitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                normalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             hit;                                               // 0x0024(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicCapsuleResizerComponent_OnHit) == 0x000008, "Wrong alignment on DynamicCapsuleResizerComponent_OnHit");
static_assert(sizeof(DynamicCapsuleResizerComponent_OnHit) == 0x0000B8, "Wrong size on DynamicCapsuleResizerComponent_OnHit");
static_assert(offsetof(DynamicCapsuleResizerComponent_OnHit, hitComponent) == 0x000000, "Member 'DynamicCapsuleResizerComponent_OnHit::hitComponent' has a wrong offset!");
static_assert(offsetof(DynamicCapsuleResizerComponent_OnHit, otherActor) == 0x000008, "Member 'DynamicCapsuleResizerComponent_OnHit::otherActor' has a wrong offset!");
static_assert(offsetof(DynamicCapsuleResizerComponent_OnHit, otherComp) == 0x000010, "Member 'DynamicCapsuleResizerComponent_OnHit::otherComp' has a wrong offset!");
static_assert(offsetof(DynamicCapsuleResizerComponent_OnHit, normalImpulse) == 0x000018, "Member 'DynamicCapsuleResizerComponent_OnHit::normalImpulse' has a wrong offset!");
static_assert(offsetof(DynamicCapsuleResizerComponent_OnHit, hit) == 0x000024, "Member 'DynamicCapsuleResizerComponent_OnHit::hit' has a wrong offset!");

// Function PhysicsUtilities.DynamicCapsuleResizerComponent.SetShrinkingEnabled
// 0x0001 (0x0001 - 0x0000)
struct DynamicCapsuleResizerComponent_SetShrinkingEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicCapsuleResizerComponent_SetShrinkingEnabled) == 0x000001, "Wrong alignment on DynamicCapsuleResizerComponent_SetShrinkingEnabled");
static_assert(sizeof(DynamicCapsuleResizerComponent_SetShrinkingEnabled) == 0x000001, "Wrong size on DynamicCapsuleResizerComponent_SetShrinkingEnabled");
static_assert(offsetof(DynamicCapsuleResizerComponent_SetShrinkingEnabled, enabled) == 0x000000, "Member 'DynamicCapsuleResizerComponent_SetShrinkingEnabled::enabled' has a wrong offset!");

// Function PhysicsUtilities.PrimitiveCollection.Add
// 0x0008 (0x0008 - 0x0000)
struct PrimitiveCollection_Add final
{
public:
	class UPrimitiveComponent*                    primitive;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimitiveCollection_Add) == 0x000008, "Wrong alignment on PrimitiveCollection_Add");
static_assert(sizeof(PrimitiveCollection_Add) == 0x000008, "Wrong size on PrimitiveCollection_Add");
static_assert(offsetof(PrimitiveCollection_Add, primitive) == 0x000000, "Member 'PrimitiveCollection_Add::primitive' has a wrong offset!");

// Function PhysicsUtilities.PrimitiveCollection.Remove
// 0x0008 (0x0008 - 0x0000)
struct PrimitiveCollection_Remove final
{
public:
	class UPrimitiveComponent*                    primitive;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimitiveCollection_Remove) == 0x000008, "Wrong alignment on PrimitiveCollection_Remove");
static_assert(sizeof(PrimitiveCollection_Remove) == 0x000008, "Wrong size on PrimitiveCollection_Remove");
static_assert(offsetof(PrimitiveCollection_Remove, primitive) == 0x000000, "Member 'PrimitiveCollection_Remove::primitive' has a wrong offset!");

// Function PhysicsUtilities.PrimitivesRegistererComponent.SetPrimitives
// 0x0010 (0x0010 - 0x0000)
struct PrimitivesRegistererComponent_SetPrimitives final
{
public:
	TArray<class UPrimitiveComponent*>            primitives;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrimitivesRegistererComponent_SetPrimitives) == 0x000008, "Wrong alignment on PrimitivesRegistererComponent_SetPrimitives");
static_assert(sizeof(PrimitivesRegistererComponent_SetPrimitives) == 0x000010, "Wrong size on PrimitivesRegistererComponent_SetPrimitives");
static_assert(offsetof(PrimitivesRegistererComponent_SetPrimitives, primitives) == 0x000000, "Member 'PrimitivesRegistererComponent_SetPrimitives::primitives' has a wrong offset!");

}

