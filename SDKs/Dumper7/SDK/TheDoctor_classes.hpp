#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheDoctor

#include "Basic.hpp"

#include "TheDoctor_structs.hpp"
#include "DBDGameplay_classes.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "DBDCompetence_classes.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "DBDAnimation_classes.hpp"
#include "DBDCosmetic_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "StatSystem_structs.hpp"
#include "SystemUtilities_structs.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK
{

// Class TheDoctor.Alert
// 0x0020 (0x03E8 - 0x03C8)
class UAlert final : public UPerk
{
public:
	float                                         _killerAuraRevealDuration[0x3];                    // 0x03C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStatusEffect*                          _alertKillerRevealEffect;                          // 0x03D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _alertKillerRevealEffectClass;                     // 0x03E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnPerkActivate_Cosmetic();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Alert">();
	}
	static class UAlert* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAlert>();
	}
};
static_assert(alignof(UAlert) == 0x000008, "Wrong alignment on UAlert");
static_assert(sizeof(UAlert) == 0x0003E8, "Wrong size on UAlert");
static_assert(offsetof(UAlert, _killerAuraRevealDuration) == 0x0003C8, "Member 'UAlert::_killerAuraRevealDuration' has a wrong offset!");
static_assert(offsetof(UAlert, _alertKillerRevealEffect) == 0x0003D8, "Member 'UAlert::_alertKillerRevealEffect' has a wrong offset!");
static_assert(offsetof(UAlert, _alertKillerRevealEffectClass) == 0x0003E0, "Member 'UAlert::_alertKillerRevealEffectClass' has a wrong offset!");

// Class TheDoctor.CalmBaseAddon
// 0x0008 (0x02E0 - 0x02D8)
class UCalmBaseAddon final : public USimpleSpawnEffectsOnAllSurvivorsAddon
{
public:
	float                                         _terrorRadiusModification;                         // 0x02D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CalmBaseAddon">();
	}
	static class UCalmBaseAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCalmBaseAddon>();
	}
};
static_assert(alignof(UCalmBaseAddon) == 0x000008, "Wrong alignment on UCalmBaseAddon");
static_assert(sizeof(UCalmBaseAddon) == 0x0002E0, "Wrong size on UCalmBaseAddon");
static_assert(offsetof(UCalmBaseAddon, _terrorRadiusModification) == 0x0002D8, "Member 'UCalmBaseAddon::_terrorRadiusModification' has a wrong offset!");

// Class TheDoctor.CalmIntermittentFakeTerrorRadiusEffect
// 0x0048 (0x0398 - 0x0350)
class UCalmIntermittentFakeTerrorRadiusEffect final : public UStatusEffect
{
public:
	float                                         _fakeTerrorRadiusDuration;                         // 0x0350(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _fakeTerrorRadiusIntermittenceMin;                 // 0x0354(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _fakeTerrorRadiusIntermittenceMax;                 // 0x0358(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35C[0x3C];                                     // 0x035C(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CalmIntermittentFakeTerrorRadiusEffect">();
	}
	static class UCalmIntermittentFakeTerrorRadiusEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCalmIntermittentFakeTerrorRadiusEffect>();
	}
};
static_assert(alignof(UCalmIntermittentFakeTerrorRadiusEffect) == 0x000008, "Wrong alignment on UCalmIntermittentFakeTerrorRadiusEffect");
static_assert(sizeof(UCalmIntermittentFakeTerrorRadiusEffect) == 0x000398, "Wrong size on UCalmIntermittentFakeTerrorRadiusEffect");
static_assert(offsetof(UCalmIntermittentFakeTerrorRadiusEffect, _fakeTerrorRadiusDuration) == 0x000350, "Member 'UCalmIntermittentFakeTerrorRadiusEffect::_fakeTerrorRadiusDuration' has a wrong offset!");
static_assert(offsetof(UCalmIntermittentFakeTerrorRadiusEffect, _fakeTerrorRadiusIntermittenceMin) == 0x000354, "Member 'UCalmIntermittentFakeTerrorRadiusEffect::_fakeTerrorRadiusIntermittenceMin' has a wrong offset!");
static_assert(offsetof(UCalmIntermittentFakeTerrorRadiusEffect, _fakeTerrorRadiusIntermittenceMax) == 0x000358, "Member 'UCalmIntermittentFakeTerrorRadiusEffect::_fakeTerrorRadiusIntermittenceMax' has a wrong offset!");

// Class TheDoctor.CartersSpark
// 0x00D8 (0x0588 - 0x04B0)
class ACartersSpark final : public ACollectable
{
public:
	uint8                                         Pad_4B0[0x18];                                     // 0x04B0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _shockAttackComboTimerDuration;                    // 0x04C8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class USurvivorCartersSparkComponent> _survivorCartersSparkComponentClass;           // 0x04F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4F8[0x70];                                     // 0x04F8(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _doctorBlockInterruptEffect;                       // 0x0568(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _madnessStatusEffect;                              // 0x0570(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _illusionaryDoctorEffect;                          // 0x0578(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCartersSparkComponent*                 _cartersSparkComponent;                            // 0x0580(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Authority_StartShockAttackComboTimer(class ACamperPlayer* shockedSurvivor);
	void CancelSurvivorInteraction(class ACamperPlayer* survivor);
	void Cosmetic_OnShockTherapyZoneDetonated(class ADBDPlayer* killer, const int32 survivorsHitCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CartersSpark">();
	}
	static class ACartersSpark* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACartersSpark>();
	}
};
static_assert(alignof(ACartersSpark) == 0x000008, "Wrong alignment on ACartersSpark");
static_assert(sizeof(ACartersSpark) == 0x000588, "Wrong size on ACartersSpark");
static_assert(offsetof(ACartersSpark, _shockAttackComboTimerDuration) == 0x0004C8, "Member 'ACartersSpark::_shockAttackComboTimerDuration' has a wrong offset!");
static_assert(offsetof(ACartersSpark, _survivorCartersSparkComponentClass) == 0x0004F0, "Member 'ACartersSpark::_survivorCartersSparkComponentClass' has a wrong offset!");
static_assert(offsetof(ACartersSpark, _doctorBlockInterruptEffect) == 0x000568, "Member 'ACartersSpark::_doctorBlockInterruptEffect' has a wrong offset!");
static_assert(offsetof(ACartersSpark, _madnessStatusEffect) == 0x000570, "Member 'ACartersSpark::_madnessStatusEffect' has a wrong offset!");
static_assert(offsetof(ACartersSpark, _illusionaryDoctorEffect) == 0x000578, "Member 'ACartersSpark::_illusionaryDoctorEffect' has a wrong offset!");
static_assert(offsetof(ACartersSpark, _cartersSparkComponent) == 0x000580, "Member 'ACartersSpark::_cartersSparkComponent' has a wrong offset!");

// Class TheDoctor.DisciplineEffect
// 0x00A8 (0x03F8 - 0x0350)
class UDisciplineEffect final : public UStatusEffect
{
public:
	float                                         _deactivationDelay;                                // 0x0350(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _redStainInterpolating;                            // 0x0358(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_359[0x9F];                                     // 0x0359(0x009F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_ActivateKillerRedStain(bool activate);
	void Cosmetic_ActivateSurvivorRedStain(bool activate);
	void Cosmetic_SpawnRedStains();
	void Cosmetic_UpdateKillerRedStain(bool visible, float deltaTime);
	void Cosmetic_UpdateSurvivorRedStain(bool visible, float deltaTime);
	void SetRedStainInterpolating(bool isInterpolating);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DisciplineEffect">();
	}
	static class UDisciplineEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDisciplineEffect>();
	}
};
static_assert(alignof(UDisciplineEffect) == 0x000008, "Wrong alignment on UDisciplineEffect");
static_assert(sizeof(UDisciplineEffect) == 0x0003F8, "Wrong size on UDisciplineEffect");
static_assert(offsetof(UDisciplineEffect, _deactivationDelay) == 0x000350, "Member 'UDisciplineEffect::_deactivationDelay' has a wrong offset!");
static_assert(offsetof(UDisciplineEffect, _redStainInterpolating) == 0x000358, "Member 'UDisciplineEffect::_redStainInterpolating' has a wrong offset!");

// Class TheDoctor.DoctorAnimInstance
// 0x0000 (0x0600 - 0x0600)
class UDoctorAnimInstance final : public UKillerAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DoctorAnimInstance">();
	}
	static class UDoctorAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDoctorAnimInstance>();
	}
};
static_assert(alignof(UDoctorAnimInstance) == 0x000010, "Wrong alignment on UDoctorAnimInstance");
static_assert(sizeof(UDoctorAnimInstance) == 0x000600, "Wrong size on UDoctorAnimInstance");

// Class TheDoctor.DoctorCheatComponent
// 0x0000 (0x00B8 - 0x00B8)
class UDoctorCheatComponent final : public UActorComponent
{
public:
	void DBD_AddMadness(float madnessToAdd, const class FString& localPlayerId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DoctorCheatComponent">();
	}
	static class UDoctorCheatComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDoctorCheatComponent>();
	}
};
static_assert(alignof(UDoctorCheatComponent) == 0x000008, "Wrong alignment on UDoctorCheatComponent");
static_assert(sizeof(UDoctorCheatComponent) == 0x0000B8, "Wrong size on UDoctorCheatComponent");

// Class TheDoctor.DoctorPowerSubAnimInstance
// 0x0010 (0x02D0 - 0x02C0)
class UDoctorPowerSubAnimInstance final : public UAnimInstance
{
public:
	EDoctorAbilityType                            _abilityType;                                      // 0x02C0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EDoctorAbilityPhase                           _abilityPhase;                                     // 0x02C1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isShockTherapyInCooldown;                         // 0x02C2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C3[0x1];                                      // 0x02C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UDoctorPowerAnimStateComponent> _powerStateComponent;                       // 0x02C4(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnShockTherapyAnimationAttackStart();
	void OnShockTherapyAnimationAttackStop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DoctorPowerSubAnimInstance">();
	}
	static class UDoctorPowerSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDoctorPowerSubAnimInstance>();
	}
};
static_assert(alignof(UDoctorPowerSubAnimInstance) == 0x000010, "Wrong alignment on UDoctorPowerSubAnimInstance");
static_assert(sizeof(UDoctorPowerSubAnimInstance) == 0x0002D0, "Wrong size on UDoctorPowerSubAnimInstance");
static_assert(offsetof(UDoctorPowerSubAnimInstance, _abilityType) == 0x0002C0, "Member 'UDoctorPowerSubAnimInstance::_abilityType' has a wrong offset!");
static_assert(offsetof(UDoctorPowerSubAnimInstance, _abilityPhase) == 0x0002C1, "Member 'UDoctorPowerSubAnimInstance::_abilityPhase' has a wrong offset!");
static_assert(offsetof(UDoctorPowerSubAnimInstance, _isShockTherapyInCooldown) == 0x0002C2, "Member 'UDoctorPowerSubAnimInstance::_isShockTherapyInCooldown' has a wrong offset!");
static_assert(offsetof(UDoctorPowerSubAnimInstance, _powerStateComponent) == 0x0002C4, "Member 'UDoctorPowerSubAnimInstance::_powerStateComponent' has a wrong offset!");

// Class TheDoctor.DoctorSurvivorCosmeticHelperActor
// 0x0080 (0x02E8 - 0x0268)
class ADoctorSurvivorCosmeticHelperActor final : public ASurvivorCosmeticHelperActor
{
public:
	uint8                                         Pad_268[0x80];                                     // 0x0268(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnIllusionaryDoctorApparitionSequenceStart(const struct FTransform& illusionaryDoctorTransform, const float apparitionDuration);
	void Cosmetic_OnIllusionaryPalletActivated(const class APallet* pallet);
	void Cosmetic_OnIllusionaryPalletDeactivated(const class APallet* pallet);
	void Cosmetic_OnInsaneSkillCheck();
	void Cosmetic_OnMadnessChanged(int32 newTier, bool increased);
	void Cosmetic_OnMadnessIntermittentScream();
	void Cosmetic_OnOwningSurvivorShocked();

	bool CanPlayerSeeIllusionaryPalletGlitch(class APallet* pallet) const;
	bool CanPlayOverwhelmingMadnessAnimation() const;
	bool CanPlayOverwhelmingMadnessAudio() const;
	bool CanPlayShockedAnimation() const;
	class AIllusionaryDoctor* GetIllusionaryDoctor() const;
	class USurvivorMadnessEffect* GetSurvivorMadnessEffect() const;
	bool IsSurvivorOperatingLocker() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DoctorSurvivorCosmeticHelperActor">();
	}
	static class ADoctorSurvivorCosmeticHelperActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADoctorSurvivorCosmeticHelperActor>();
	}
};
static_assert(alignof(ADoctorSurvivorCosmeticHelperActor) == 0x000008, "Wrong alignment on ADoctorSurvivorCosmeticHelperActor");
static_assert(sizeof(ADoctorSurvivorCosmeticHelperActor) == 0x0002E8, "Wrong size on ADoctorSurvivorCosmeticHelperActor");

// Class TheDoctor.IllusionaryDoctor
// 0x0030 (0x0288 - 0x0258)
class AIllusionaryDoctor final : public ABaseHusk
{
public:
	class UDBDOutlineComponent*                   _dbdOutline;                                       // 0x0258(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           _revealedAuraColor;                                // 0x0260(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           _unrevealedAuraColor;                              // 0x0270(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_280[0x8];                                      // 0x0280(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateIllusion(const struct FTransform& transform);
	void DeactivateIllusion();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IllusionaryDoctor">();
	}
	static class AIllusionaryDoctor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AIllusionaryDoctor>();
	}
};
static_assert(alignof(AIllusionaryDoctor) == 0x000008, "Wrong alignment on AIllusionaryDoctor");
static_assert(sizeof(AIllusionaryDoctor) == 0x000288, "Wrong size on AIllusionaryDoctor");
static_assert(offsetof(AIllusionaryDoctor, _dbdOutline) == 0x000258, "Member 'AIllusionaryDoctor::_dbdOutline' has a wrong offset!");
static_assert(offsetof(AIllusionaryDoctor, _revealedAuraColor) == 0x000260, "Member 'AIllusionaryDoctor::_revealedAuraColor' has a wrong offset!");
static_assert(offsetof(AIllusionaryDoctor, _unrevealedAuraColor) == 0x000270, "Member 'AIllusionaryDoctor::_unrevealedAuraColor' has a wrong offset!");

// Class TheDoctor.IllusionaryDoctorEffect
// 0x01D0 (0x0520 - 0x0350)
class UIllusionaryDoctorEffect final : public UStatusEffect
{
public:
	uint8                                         Pad_350[0x18];                                     // 0x0350(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AIllusionaryDoctor>         _illusionaryDoctorClass;                           // 0x0368(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AIllusionaryDoctor*                     _illusionaryDoctor;                                // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_378[0x38];                                     // 0x0378(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _madness2IllusionaryDoctorIntervalMinimum;         // 0x03B0(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _madness2IllusionaryDoctorIntervalMaximum;         // 0x03D8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _madness3IllusionaryDoctorIntervalMinimum;         // 0x0400(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _madness3IllusionaryDoctorIntervalMaximum;         // 0x0428(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _illusionaryDoctorFrontalDistance;                 // 0x0450(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _illusionaryDoctorRadialVarianceMaximum;           // 0x0478(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _illusionaryDoctorApparitionDuration;              // 0x04A0(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Multicast_DebugDisplayInfo(const float timeRemainingBeforeActivation, const struct FColor& messageColor);
	void Multicast_StartIllusionaryDoctorAppearSequence(const struct FTransform& illusionaryDoctorTransform);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IllusionaryDoctorEffect">();
	}
	static class UIllusionaryDoctorEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIllusionaryDoctorEffect>();
	}
};
static_assert(alignof(UIllusionaryDoctorEffect) == 0x000008, "Wrong alignment on UIllusionaryDoctorEffect");
static_assert(sizeof(UIllusionaryDoctorEffect) == 0x000520, "Wrong size on UIllusionaryDoctorEffect");
static_assert(offsetof(UIllusionaryDoctorEffect, _illusionaryDoctorClass) == 0x000368, "Member 'UIllusionaryDoctorEffect::_illusionaryDoctorClass' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _illusionaryDoctor) == 0x000370, "Member 'UIllusionaryDoctorEffect::_illusionaryDoctor' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _madness2IllusionaryDoctorIntervalMinimum) == 0x0003B0, "Member 'UIllusionaryDoctorEffect::_madness2IllusionaryDoctorIntervalMinimum' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _madness2IllusionaryDoctorIntervalMaximum) == 0x0003D8, "Member 'UIllusionaryDoctorEffect::_madness2IllusionaryDoctorIntervalMaximum' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _madness3IllusionaryDoctorIntervalMinimum) == 0x000400, "Member 'UIllusionaryDoctorEffect::_madness3IllusionaryDoctorIntervalMinimum' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _madness3IllusionaryDoctorIntervalMaximum) == 0x000428, "Member 'UIllusionaryDoctorEffect::_madness3IllusionaryDoctorIntervalMaximum' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _illusionaryDoctorFrontalDistance) == 0x000450, "Member 'UIllusionaryDoctorEffect::_illusionaryDoctorFrontalDistance' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _illusionaryDoctorRadialVarianceMaximum) == 0x000478, "Member 'UIllusionaryDoctorEffect::_illusionaryDoctorRadialVarianceMaximum' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _illusionaryDoctorApparitionDuration) == 0x0004A0, "Member 'UIllusionaryDoctorEffect::_illusionaryDoctorApparitionDuration' has a wrong offset!");

// Class TheDoctor.IllusionaryPalletBaseAddon
// 0x0060 (0x0338 - 0x02D8)
class UIllusionaryPalletBaseAddon final : public USimpleSpawnEffectsOnAllSurvivorsAddon
{
public:
	uint8                                         Pad_2D8[0x50];                                     // 0x02D8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _illusionaryPalletInterval;                        // 0x0328(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UIllusionaryPalletComponent> _palletComponentClass;                            // 0x0330(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Authority_OnIllusionaryPalletActorOverlapped(class UPrimitiveComponent* overlappedComponent, class AActor* otherActor, class UPrimitiveComponent* otherComp, int32 otherBodyIndex, bool bFromSweep, const struct FHitResult& sweepResult);
	void Multicast_ActivateIllusionaryPallet(class APallet* pallet, bool isPalletDown);
	void Multicast_DeactivateIllusionaryPallet(class APallet* pallet, class ADBDPlayer* triggeringPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IllusionaryPalletBaseAddon">();
	}
	static class UIllusionaryPalletBaseAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIllusionaryPalletBaseAddon>();
	}
};
static_assert(alignof(UIllusionaryPalletBaseAddon) == 0x000008, "Wrong alignment on UIllusionaryPalletBaseAddon");
static_assert(sizeof(UIllusionaryPalletBaseAddon) == 0x000338, "Wrong size on UIllusionaryPalletBaseAddon");
static_assert(offsetof(UIllusionaryPalletBaseAddon, _illusionaryPalletInterval) == 0x000328, "Member 'UIllusionaryPalletBaseAddon::_illusionaryPalletInterval' has a wrong offset!");
static_assert(offsetof(UIllusionaryPalletBaseAddon, _palletComponentClass) == 0x000330, "Member 'UIllusionaryPalletBaseAddon::_palletComponentClass' has a wrong offset!");

// Class TheDoctor.IllusionaryPalletComponent
// 0x0148 (0x0200 - 0x00B8)
class UIllusionaryPalletComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _illusionaryPalletDownTransform;                   // 0x00C0(0x0030)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	class UBoxComponent*                          _illusionaryPalletTriggerZone;                     // 0x00F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                _illusionaryPalletTriggerZoneBoxExtent;            // 0x00F8(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                _illusionaryPalletTriggerZoneLocation;             // 0x0104(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _glitchEffectRange;                                // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   _illusionaryPalletStaticMeshComponent;             // 0x0118(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_120[0xE0];                                     // 0x0120(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateIllusionaryPallet(const bool isPalletDown);
	void DeactivateIllusionaryPallet();
	void OnStartIllusionaryPalletActivation(const bool isPalletDown);
	void OnStartIllusionaryPalletDeactivation(class ADBDPlayer* triggeringPlayer);

	bool CanLocallyObservedPlayerSeeIllusionaryPallet() const;
	float GetGlitchEffectRange() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IllusionaryPalletComponent">();
	}
	static class UIllusionaryPalletComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIllusionaryPalletComponent>();
	}
};
static_assert(alignof(UIllusionaryPalletComponent) == 0x000010, "Wrong alignment on UIllusionaryPalletComponent");
static_assert(sizeof(UIllusionaryPalletComponent) == 0x000200, "Wrong size on UIllusionaryPalletComponent");
static_assert(offsetof(UIllusionaryPalletComponent, _illusionaryPalletDownTransform) == 0x0000C0, "Member 'UIllusionaryPalletComponent::_illusionaryPalletDownTransform' has a wrong offset!");
static_assert(offsetof(UIllusionaryPalletComponent, _illusionaryPalletTriggerZone) == 0x0000F0, "Member 'UIllusionaryPalletComponent::_illusionaryPalletTriggerZone' has a wrong offset!");
static_assert(offsetof(UIllusionaryPalletComponent, _illusionaryPalletTriggerZoneBoxExtent) == 0x0000F8, "Member 'UIllusionaryPalletComponent::_illusionaryPalletTriggerZoneBoxExtent' has a wrong offset!");
static_assert(offsetof(UIllusionaryPalletComponent, _illusionaryPalletTriggerZoneLocation) == 0x000104, "Member 'UIllusionaryPalletComponent::_illusionaryPalletTriggerZoneLocation' has a wrong offset!");
static_assert(offsetof(UIllusionaryPalletComponent, _glitchEffectRange) == 0x000110, "Member 'UIllusionaryPalletComponent::_glitchEffectRange' has a wrong offset!");
static_assert(offsetof(UIllusionaryPalletComponent, _illusionaryPalletStaticMeshComponent) == 0x000118, "Member 'UIllusionaryPalletComponent::_illusionaryPalletStaticMeshComponent' has a wrong offset!");

// Class TheDoctor.IridescentQueenEffect
// 0x0050 (0x03A0 - 0x0350)
class UIridescentQueenEffect final : public UStatusEffect
{
public:
	class UCapsuleComponent*                      _authority_iridescentQueenDischargeDetectionZone;  // 0x0350(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _dischargeDetectionZoneHalfHeight;                 // 0x0358(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _dischargeDetectionZoneRadius;                     // 0x035C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _madnessToAddOnDischarge;                          // 0x0360(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _chargeActive;                                     // 0x0390(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _charged;                                          // 0x0391(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_392[0xE];                                      // 0x0392(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnSurvivorOverlappedDischargeZone(class UPrimitiveComponent* overlappedComponent, class AActor* otherActor, class UPrimitiveComponent* otherComp, int32 otherBodyIndex, bool bFromSweep, const struct FHitResult& sweepResult);
	void Cosmetic_OnDischargeOnSurvivor(class ADBDPlayer* survivorToShock);
	void Cosmetic_OnDischargeZoneActivated();
	void Cosmetic_OnDischargeZoneDeactivated();
	void Cosmetic_SpawnStaticFieldFX();
	void Cosmetic_UpdateStaticFieldFX();
	void Multicast_DischargeOnSurvivor(class ACamperPlayer* survivor);
	void OnRep_ChargeActive();

	EStaticFieldMovementSpeed GetStaticFieldMovementSpeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IridescentQueenEffect">();
	}
	static class UIridescentQueenEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIridescentQueenEffect>();
	}
};
static_assert(alignof(UIridescentQueenEffect) == 0x000008, "Wrong alignment on UIridescentQueenEffect");
static_assert(sizeof(UIridescentQueenEffect) == 0x0003A0, "Wrong size on UIridescentQueenEffect");
static_assert(offsetof(UIridescentQueenEffect, _authority_iridescentQueenDischargeDetectionZone) == 0x000350, "Member 'UIridescentQueenEffect::_authority_iridescentQueenDischargeDetectionZone' has a wrong offset!");
static_assert(offsetof(UIridescentQueenEffect, _dischargeDetectionZoneHalfHeight) == 0x000358, "Member 'UIridescentQueenEffect::_dischargeDetectionZoneHalfHeight' has a wrong offset!");
static_assert(offsetof(UIridescentQueenEffect, _dischargeDetectionZoneRadius) == 0x00035C, "Member 'UIridescentQueenEffect::_dischargeDetectionZoneRadius' has a wrong offset!");
static_assert(offsetof(UIridescentQueenEffect, _madnessToAddOnDischarge) == 0x000360, "Member 'UIridescentQueenEffect::_madnessToAddOnDischarge' has a wrong offset!");
static_assert(offsetof(UIridescentQueenEffect, _chargeActive) == 0x000390, "Member 'UIridescentQueenEffect::_chargeActive' has a wrong offset!");
static_assert(offsetof(UIridescentQueenEffect, _charged) == 0x000391, "Member 'UIridescentQueenEffect::_charged' has a wrong offset!");

// Class TheDoctor.Lithe
// 0x0018 (0x03E0 - 0x03C8)
class ULithe final : public UPerk
{
public:
	TSubclassOf<class UStatusEffect>              _exhaustedStatusEffectClass;                       // 0x03C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _movementSpeedStatusEffectClass;                   // 0x03D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _movementSpeedPercentage;                          // 0x03D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _movementSpeedDuration;                            // 0x03DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	const float GetMovementSpeedDuration();
	const float GetMovementSpeedPercentage();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Lithe">();
	}
	static class ULithe* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULithe>();
	}
};
static_assert(alignof(ULithe) == 0x000008, "Wrong alignment on ULithe");
static_assert(sizeof(ULithe) == 0x0003E0, "Wrong size on ULithe");
static_assert(offsetof(ULithe, _exhaustedStatusEffectClass) == 0x0003C8, "Member 'ULithe::_exhaustedStatusEffectClass' has a wrong offset!");
static_assert(offsetof(ULithe, _movementSpeedStatusEffectClass) == 0x0003D0, "Member 'ULithe::_movementSpeedStatusEffectClass' has a wrong offset!");
static_assert(offsetof(ULithe, _movementSpeedPercentage) == 0x0003D8, "Member 'ULithe::_movementSpeedPercentage' has a wrong offset!");
static_assert(offsetof(ULithe, _movementSpeedDuration) == 0x0003DC, "Member 'ULithe::_movementSpeedDuration' has a wrong offset!");

// Class TheDoctor.MadnessSurvivorSubAnimInstance
// 0x0010 (0x0560 - 0x0550)
class UMadnessSurvivorSubAnimInstance final : public UBaseSurvivorAnimInstance
{
public:
	uint8                                         Pad_548[0x8];                                      // 0x0548(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _isTotallyInsane;                                  // 0x0550(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInjured;                                        // 0x0551(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCrawling;                                       // 0x0552(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isIdle;                                           // 0x0553(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCrouched;                                       // 0x0554(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_555[0x3];                                      // 0x0555(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _walkAnimSpeed;                                    // 0x0558(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCarried;                                        // 0x055C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInAir;                                          // 0x055D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isDead;                                           // 0x055E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_55F[0x1];                                      // 0x055F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MadnessSurvivorSubAnimInstance">();
	}
	static class UMadnessSurvivorSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMadnessSurvivorSubAnimInstance>();
	}
};
static_assert(alignof(UMadnessSurvivorSubAnimInstance) == 0x000010, "Wrong alignment on UMadnessSurvivorSubAnimInstance");
static_assert(sizeof(UMadnessSurvivorSubAnimInstance) == 0x000560, "Wrong size on UMadnessSurvivorSubAnimInstance");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isTotallyInsane) == 0x000550, "Member 'UMadnessSurvivorSubAnimInstance::_isTotallyInsane' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isInjured) == 0x000551, "Member 'UMadnessSurvivorSubAnimInstance::_isInjured' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isCrawling) == 0x000552, "Member 'UMadnessSurvivorSubAnimInstance::_isCrawling' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isIdle) == 0x000553, "Member 'UMadnessSurvivorSubAnimInstance::_isIdle' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isCrouched) == 0x000554, "Member 'UMadnessSurvivorSubAnimInstance::_isCrouched' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _walkAnimSpeed) == 0x000558, "Member 'UMadnessSurvivorSubAnimInstance::_walkAnimSpeed' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isCarried) == 0x00055C, "Member 'UMadnessSurvivorSubAnimInstance::_isCarried' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isInAir) == 0x00055D, "Member 'UMadnessSurvivorSubAnimInstance::_isInAir' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isDead) == 0x00055E, "Member 'UMadnessSurvivorSubAnimInstance::_isDead' has a wrong offset!");

// Class TheDoctor.Overcharge
// 0x00E8 (0x04B0 - 0x03C8)
class UOvercharge final : public UPerk
{
public:
	float                                         _skillCheckFailurePenalty[0x3];                    // 0x03C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _regressionRateMultiplierCurve;                    // 0x03D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class AGenerator*, struct FFastTimer>    _overchargedGeneratorTimers;                       // 0x03E0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_430[0x30];                                     // 0x0430(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AGenerator*, uint64>               _gameplayModifierHandles;                          // 0x0460(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	const class UCurveFloat* GetRegressionRateMultiplierCurve() const;
	float GetSkillCheckFailurePenaltyAtLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Overcharge">();
	}
	static class UOvercharge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOvercharge>();
	}
};
static_assert(alignof(UOvercharge) == 0x000008, "Wrong alignment on UOvercharge");
static_assert(sizeof(UOvercharge) == 0x0004B0, "Wrong size on UOvercharge");
static_assert(offsetof(UOvercharge, _skillCheckFailurePenalty) == 0x0003C8, "Member 'UOvercharge::_skillCheckFailurePenalty' has a wrong offset!");
static_assert(offsetof(UOvercharge, _regressionRateMultiplierCurve) == 0x0003D8, "Member 'UOvercharge::_regressionRateMultiplierCurve' has a wrong offset!");
static_assert(offsetof(UOvercharge, _overchargedGeneratorTimers) == 0x0003E0, "Member 'UOvercharge::_overchargedGeneratorTimers' has a wrong offset!");
static_assert(offsetof(UOvercharge, _gameplayModifierHandles) == 0x000460, "Member 'UOvercharge::_gameplayModifierHandles' has a wrong offset!");

// Class TheDoctor.RestraintRevealToKillerEffect
// 0x0000 (0x0380 - 0x0380)
class URestraintRevealToKillerEffect final : public UActivateOnEventTimedStatusEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RestraintRevealToKillerEffect">();
	}
	static class URestraintRevealToKillerEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<URestraintRevealToKillerEffect>();
	}
};
static_assert(alignof(URestraintRevealToKillerEffect) == 0x000008, "Wrong alignment on URestraintRevealToKillerEffect");
static_assert(sizeof(URestraintRevealToKillerEffect) == 0x000380, "Wrong size on URestraintRevealToKillerEffect");

// Class TheDoctor.ShockTherapy
// 0x01B0 (0x08F0 - 0x0740)
class UShockTherapy final : public UChargeableInteractionDefinition
{
public:
	uint8                                         Pad_740[0x38];                                     // 0x0740(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AShockTherapyAOE>           _shockTherapyConeAOEClass;                         // 0x0778(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AShockTherapyAOE>           _shockTherapyLineAOEClass;                         // 0x0780(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AShockTherapyAOE>           _shockTherapyCircleAOEClass;                       // 0x0788(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AShockTherapyAOE*>               _shockTherapyZones;                                // 0x0790(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7A0[0x30];                                     // 0x07A0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTunableStat                           _shockTherapyDetonationDelay;                      // 0x07D0(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _shockTherapyBlockActionDuration;                  // 0x0850(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _shockTherapySecondsToCharge;                      // 0x0878(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _shockTherapyBlockAllInteractionsEffectClass;      // 0x08A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8A8[0x10];                                     // 0x08A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _shockTherapyMadnessGain;                          // 0x08B8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8E0[0x10];                                     // 0x08E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnShockTherapyChargeEnd(class ADBDPlayer* player, bool charged);
	void Multicast_ActivateShockTherapyAOE(const struct FTransform& shockTherapyZoneTransform);
	void Multicast_DetonateShockTherapy(const TArray<class ACamperPlayer*>& shockedSurvivors, float madnessToAdd);
	void OnLevelReadyToPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShockTherapy">();
	}
	static class UShockTherapy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShockTherapy>();
	}
};
static_assert(alignof(UShockTherapy) == 0x000010, "Wrong alignment on UShockTherapy");
static_assert(sizeof(UShockTherapy) == 0x0008F0, "Wrong size on UShockTherapy");
static_assert(offsetof(UShockTherapy, _shockTherapyConeAOEClass) == 0x000778, "Member 'UShockTherapy::_shockTherapyConeAOEClass' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapyLineAOEClass) == 0x000780, "Member 'UShockTherapy::_shockTherapyLineAOEClass' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapyCircleAOEClass) == 0x000788, "Member 'UShockTherapy::_shockTherapyCircleAOEClass' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapyZones) == 0x000790, "Member 'UShockTherapy::_shockTherapyZones' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapyDetonationDelay) == 0x0007D0, "Member 'UShockTherapy::_shockTherapyDetonationDelay' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapyBlockActionDuration) == 0x000850, "Member 'UShockTherapy::_shockTherapyBlockActionDuration' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapySecondsToCharge) == 0x000878, "Member 'UShockTherapy::_shockTherapySecondsToCharge' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapyBlockAllInteractionsEffectClass) == 0x0008A0, "Member 'UShockTherapy::_shockTherapyBlockAllInteractionsEffectClass' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapyMadnessGain) == 0x0008B8, "Member 'UShockTherapy::_shockTherapyMadnessGain' has a wrong offset!");

// Class TheDoctor.ShockTherapyAOE
// 0x00F0 (0x0320 - 0x0230)
class AShockTherapyAOE final : public AActor
{
public:
	class UStaticMeshComponent*                   _attackZone;                                       // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        _rootComponent;                                    // 0x0238(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTunableStat                           _shockTherapyRange;                                // 0x0240(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _killerOffset;                                     // 0x02C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _baseZoneSize;                                     // 0x02C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AShockTherapyAOEPreview>    _shockTherapyPreviewClass;                         // 0x02C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AShockTherapyAOEPreview*                _shockTherapyPreview;                              // 0x02D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _previewTransform;                                 // 0x02E0(0x0030)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_310[0x10];                                     // 0x0310(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_ActivateShockTherapyAOE();
	void OnScaleInitialized();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShockTherapyAOE">();
	}
	static class AShockTherapyAOE* GetDefaultObj()
	{
		return GetDefaultObjImpl<AShockTherapyAOE>();
	}
};
static_assert(alignof(AShockTherapyAOE) == 0x000010, "Wrong alignment on AShockTherapyAOE");
static_assert(sizeof(AShockTherapyAOE) == 0x000320, "Wrong size on AShockTherapyAOE");
static_assert(offsetof(AShockTherapyAOE, _attackZone) == 0x000230, "Member 'AShockTherapyAOE::_attackZone' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOE, _rootComponent) == 0x000238, "Member 'AShockTherapyAOE::_rootComponent' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOE, _shockTherapyRange) == 0x000240, "Member 'AShockTherapyAOE::_shockTherapyRange' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOE, _killerOffset) == 0x0002C0, "Member 'AShockTherapyAOE::_killerOffset' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOE, _baseZoneSize) == 0x0002C4, "Member 'AShockTherapyAOE::_baseZoneSize' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOE, _shockTherapyPreviewClass) == 0x0002C8, "Member 'AShockTherapyAOE::_shockTherapyPreviewClass' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOE, _shockTherapyPreview) == 0x0002D0, "Member 'AShockTherapyAOE::_shockTherapyPreview' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOE, _previewTransform) == 0x0002E0, "Member 'AShockTherapyAOE::_previewTransform' has a wrong offset!");

// Class TheDoctor.ShockTherapyAOEPreview
// 0x0098 (0x02C8 - 0x0230)
class AShockTherapyAOEPreview final : public AActor
{
public:
	struct FVector                                _baseWorldScale;                                   // 0x0230(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTunableStat                           _shockTherapyRange;                                // 0x0240(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C0[0x8];                                      // 0x02C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAttackZonePreviewScale(const struct FVector& scale);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShockTherapyAOEPreview">();
	}
	static class AShockTherapyAOEPreview* GetDefaultObj()
	{
		return GetDefaultObjImpl<AShockTherapyAOEPreview>();
	}
};
static_assert(alignof(AShockTherapyAOEPreview) == 0x000008, "Wrong alignment on AShockTherapyAOEPreview");
static_assert(sizeof(AShockTherapyAOEPreview) == 0x0002C8, "Wrong size on AShockTherapyAOEPreview");
static_assert(offsetof(AShockTherapyAOEPreview, _baseWorldScale) == 0x000230, "Member 'AShockTherapyAOEPreview::_baseWorldScale' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOEPreview, _shockTherapyRange) == 0x000240, "Member 'AShockTherapyAOEPreview::_shockTherapyRange' has a wrong offset!");

// Class TheDoctor.SnapOutOfIt
// 0x0090 (0x07D0 - 0x0740)
class USnapOutOfIt final : public UChargeableInteractionDefinition
{
public:
	uint8                                         Pad_740[0x8];                                      // 0x0740(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _postSnapOutOfItMadnessTier;                       // 0x0748(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _snapOutOfItSkillCheckFailTimePenalty;             // 0x0770(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_798[0x30];                                     // 0x0798(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _isSkillCheckFailureTimerActive;                   // 0x07C8(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7C9[0x7];                                      // 0x07C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnSkillCheckResponseAuthority(bool success, bool bonus, class ADBDPlayer* player, bool triggerLoudNoise, ESkillCheckCustomType type);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapOutOfIt">();
	}
	static class USnapOutOfIt* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapOutOfIt>();
	}
};
static_assert(alignof(USnapOutOfIt) == 0x000010, "Wrong alignment on USnapOutOfIt");
static_assert(sizeof(USnapOutOfIt) == 0x0007D0, "Wrong size on USnapOutOfIt");
static_assert(offsetof(USnapOutOfIt, _postSnapOutOfItMadnessTier) == 0x000748, "Member 'USnapOutOfIt::_postSnapOutOfItMadnessTier' has a wrong offset!");
static_assert(offsetof(USnapOutOfIt, _snapOutOfItSkillCheckFailTimePenalty) == 0x000770, "Member 'USnapOutOfIt::_snapOutOfItSkillCheckFailTimePenalty' has a wrong offset!");
static_assert(offsetof(USnapOutOfIt, _isSkillCheckFailureTimerActive) == 0x0007C8, "Member 'USnapOutOfIt::_isSkillCheckFailureTimerActive' has a wrong offset!");

// Class TheDoctor.StaticBlast
// 0x0100 (0x0840 - 0x0740)
class UStaticBlast final : public UChargeableInteractionDefinition
{
public:
	uint8                                         Pad_740[0x90];                                     // 0x0740(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _staticBlastActivationDelay;                       // 0x07D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7D4[0x4];                                      // 0x07D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _staticBlastMadnessGain;                           // 0x07D8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _staticBlastSecondsToCharge;                       // 0x0800(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_828[0x18];                                     // 0x0828(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnStaticBlastChargeEnd(class ADBDPlayer* player, bool charged);
	void Multicast_StaticBlastShockSurvivors(const TArray<class ACamperPlayer*>& survivorsToShock);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaticBlast">();
	}
	static class UStaticBlast* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaticBlast>();
	}
};
static_assert(alignof(UStaticBlast) == 0x000010, "Wrong alignment on UStaticBlast");
static_assert(sizeof(UStaticBlast) == 0x000840, "Wrong size on UStaticBlast");
static_assert(offsetof(UStaticBlast, _staticBlastActivationDelay) == 0x0007D0, "Member 'UStaticBlast::_staticBlastActivationDelay' has a wrong offset!");
static_assert(offsetof(UStaticBlast, _staticBlastMadnessGain) == 0x0007D8, "Member 'UStaticBlast::_staticBlastMadnessGain' has a wrong offset!");
static_assert(offsetof(UStaticBlast, _staticBlastSecondsToCharge) == 0x000800, "Member 'UStaticBlast::_staticBlastSecondsToCharge' has a wrong offset!");

// Class TheDoctor.SurvivorCartersSparkComponent
// 0x0010 (0x00C8 - 0x00B8)
class USurvivorCartersSparkComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorCartersSparkComponent">();
	}
	static class USurvivorCartersSparkComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorCartersSparkComponent>();
	}
};
static_assert(alignof(USurvivorCartersSparkComponent) == 0x000008, "Wrong alignment on USurvivorCartersSparkComponent");
static_assert(sizeof(USurvivorCartersSparkComponent) == 0x0000C8, "Wrong size on USurvivorCartersSparkComponent");

// Class TheDoctor.SurvivorMadnessEffect
// 0x0148 (0x0498 - 0x0350)
class USurvivorMadnessEffect final : public UStatusEffect
{
public:
	uint8                                         Pad_350[0x20];                                     // 0x0350(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _madnessAmount;                                    // 0x0370(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _maxMadnessTier;                                   // 0x0378(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FDBDTunableRowHandle>           _madnessThresholds;                                // 0x03A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FDBDTunableRowHandle>           _insaneSkillCheckChances;                          // 0x03B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _screamDelayMin;                                   // 0x03C0(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _screamDelayMax;                                   // 0x03E8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   madnessStatusViewId;                               // 0x0410(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41C[0x4C];                                     // 0x041C(0x004C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  _survivorOperatingLockerSemanticTags;              // 0x0468(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_488[0x10];                                     // 0x0488(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateMadnessBubbleIndicator();
	void Authority_AddMadness(float amountToAdd);
	void Multicast_MadnessIntermittentScream();
	void Multicast_OnMadnessTierChanged(const int32 newMadnessTier, const int32 oldMadnessTier);
	void OnRep_MadnessAmount();
	void SpawnMadnessBubbleIndicator();

	int32 GetMadnessTier() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorMadnessEffect">();
	}
	static class USurvivorMadnessEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorMadnessEffect>();
	}
};
static_assert(alignof(USurvivorMadnessEffect) == 0x000008, "Wrong alignment on USurvivorMadnessEffect");
static_assert(sizeof(USurvivorMadnessEffect) == 0x000498, "Wrong size on USurvivorMadnessEffect");
static_assert(offsetof(USurvivorMadnessEffect, _madnessAmount) == 0x000370, "Member 'USurvivorMadnessEffect::_madnessAmount' has a wrong offset!");
static_assert(offsetof(USurvivorMadnessEffect, _maxMadnessTier) == 0x000378, "Member 'USurvivorMadnessEffect::_maxMadnessTier' has a wrong offset!");
static_assert(offsetof(USurvivorMadnessEffect, _madnessThresholds) == 0x0003A0, "Member 'USurvivorMadnessEffect::_madnessThresholds' has a wrong offset!");
static_assert(offsetof(USurvivorMadnessEffect, _insaneSkillCheckChances) == 0x0003B0, "Member 'USurvivorMadnessEffect::_insaneSkillCheckChances' has a wrong offset!");
static_assert(offsetof(USurvivorMadnessEffect, _screamDelayMin) == 0x0003C0, "Member 'USurvivorMadnessEffect::_screamDelayMin' has a wrong offset!");
static_assert(offsetof(USurvivorMadnessEffect, _screamDelayMax) == 0x0003E8, "Member 'USurvivorMadnessEffect::_screamDelayMax' has a wrong offset!");
static_assert(offsetof(USurvivorMadnessEffect, madnessStatusViewId) == 0x000410, "Member 'USurvivorMadnessEffect::madnessStatusViewId' has a wrong offset!");
static_assert(offsetof(USurvivorMadnessEffect, _survivorOperatingLockerSemanticTags) == 0x000468, "Member 'USurvivorMadnessEffect::_survivorOperatingLockerSemanticTags' has a wrong offset!");

// Class TheDoctor.TheDoctorUtilities
// 0x0000 (0x0030 - 0x0030)
class UTheDoctorUtilities final : public UBlueprintFunctionLibrary
{
public:
	static bool CanGainInsanity(const class ADBDPlayer* player);
	static int32 GetMadnessTier(const class ADBDPlayer* player);
	static class USurvivorMadnessEffect* GetSurvivorMadnessEffect(const class ADBDPlayer* player);
	static bool IsTotallyInsane(const class ADBDPlayer* player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TheDoctorUtilities">();
	}
	static class UTheDoctorUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTheDoctorUtilities>();
	}
};
static_assert(alignof(UTheDoctorUtilities) == 0x000008, "Wrong alignment on UTheDoctorUtilities");
static_assert(sizeof(UTheDoctorUtilities) == 0x000030, "Wrong size on UTheDoctorUtilities");

}

