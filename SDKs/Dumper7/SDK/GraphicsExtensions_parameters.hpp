#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GraphicsExtensions

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GraphicsExtensions.GMAdaptiveShadowMapControllerComponent.GetTileCountX
// 0x0004 (0x0004 - 0x0000)
struct GMAdaptiveShadowMapControllerComponent_GetTileCountX final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMAdaptiveShadowMapControllerComponent_GetTileCountX) == 0x000004, "Wrong alignment on GMAdaptiveShadowMapControllerComponent_GetTileCountX");
static_assert(sizeof(GMAdaptiveShadowMapControllerComponent_GetTileCountX) == 0x000004, "Wrong size on GMAdaptiveShadowMapControllerComponent_GetTileCountX");
static_assert(offsetof(GMAdaptiveShadowMapControllerComponent_GetTileCountX, ReturnValue) == 0x000000, "Member 'GMAdaptiveShadowMapControllerComponent_GetTileCountX::ReturnValue' has a wrong offset!");

// Function GraphicsExtensions.GMAdaptiveShadowMapControllerComponent.GetTileCountY
// 0x0004 (0x0004 - 0x0000)
struct GMAdaptiveShadowMapControllerComponent_GetTileCountY final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMAdaptiveShadowMapControllerComponent_GetTileCountY) == 0x000004, "Wrong alignment on GMAdaptiveShadowMapControllerComponent_GetTileCountY");
static_assert(sizeof(GMAdaptiveShadowMapControllerComponent_GetTileCountY) == 0x000004, "Wrong size on GMAdaptiveShadowMapControllerComponent_GetTileCountY");
static_assert(offsetof(GMAdaptiveShadowMapControllerComponent_GetTileCountY, ReturnValue) == 0x000000, "Member 'GMAdaptiveShadowMapControllerComponent_GetTileCountY::ReturnValue' has a wrong offset!");

// Function GraphicsExtensions.GMAdaptiveShadowMapControllerComponent.GetTileSize
// 0x0004 (0x0004 - 0x0000)
struct GMAdaptiveShadowMapControllerComponent_GetTileSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMAdaptiveShadowMapControllerComponent_GetTileSize) == 0x000004, "Wrong alignment on GMAdaptiveShadowMapControllerComponent_GetTileSize");
static_assert(sizeof(GMAdaptiveShadowMapControllerComponent_GetTileSize) == 0x000004, "Wrong size on GMAdaptiveShadowMapControllerComponent_GetTileSize");
static_assert(offsetof(GMAdaptiveShadowMapControllerComponent_GetTileSize, ReturnValue) == 0x000000, "Member 'GMAdaptiveShadowMapControllerComponent_GetTileSize::ReturnValue' has a wrong offset!");

// Function GraphicsExtensions.GMAdaptiveShadowMapControllerComponent.IsControllerDonePreallocatingTiles
// 0x0001 (0x0001 - 0x0000)
struct GMAdaptiveShadowMapControllerComponent_IsControllerDonePreallocatingTiles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMAdaptiveShadowMapControllerComponent_IsControllerDonePreallocatingTiles) == 0x000001, "Wrong alignment on GMAdaptiveShadowMapControllerComponent_IsControllerDonePreallocatingTiles");
static_assert(sizeof(GMAdaptiveShadowMapControllerComponent_IsControllerDonePreallocatingTiles) == 0x000001, "Wrong size on GMAdaptiveShadowMapControllerComponent_IsControllerDonePreallocatingTiles");
static_assert(offsetof(GMAdaptiveShadowMapControllerComponent_IsControllerDonePreallocatingTiles, ReturnValue) == 0x000000, "Member 'GMAdaptiveShadowMapControllerComponent_IsControllerDonePreallocatingTiles::ReturnValue' has a wrong offset!");

// Function GraphicsExtensions.GMAdaptiveShadowMapSourceComponent.SetLightRadiusWithBounds
// 0x0010 (0x0010 - 0x0000)
struct GMAdaptiveShadowMapSourceComponent_SetLightRadiusWithBounds final
{
public:
	struct FVector                                BoundingSphereCenter;                              // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoundingSphereRadius;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GMAdaptiveShadowMapSourceComponent_SetLightRadiusWithBounds) == 0x000004, "Wrong alignment on GMAdaptiveShadowMapSourceComponent_SetLightRadiusWithBounds");
static_assert(sizeof(GMAdaptiveShadowMapSourceComponent_SetLightRadiusWithBounds) == 0x000010, "Wrong size on GMAdaptiveShadowMapSourceComponent_SetLightRadiusWithBounds");
static_assert(offsetof(GMAdaptiveShadowMapSourceComponent_SetLightRadiusWithBounds, BoundingSphereCenter) == 0x000000, "Member 'GMAdaptiveShadowMapSourceComponent_SetLightRadiusWithBounds::BoundingSphereCenter' has a wrong offset!");
static_assert(offsetof(GMAdaptiveShadowMapSourceComponent_SetLightRadiusWithBounds, BoundingSphereRadius) == 0x00000C, "Member 'GMAdaptiveShadowMapSourceComponent_SetLightRadiusWithBounds::BoundingSphereRadius' has a wrong offset!");

}

