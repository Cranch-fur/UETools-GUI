#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ActorController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ActorController.BP_ActorController_C
// 0x0110 (0x0340 - 0x0230)
class ABP_ActorController_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Controlled_Actor_Reference;                        // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class APlayerController*                      Running_PC;                                        // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         MovementMultiplier;                                // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationMultiplier;                                // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gamepad_Movement_Multiplier;                       // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gamepad_Rotation_Multiplier;                       // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Key_MoveForward;                                   // 0x0260(0x0020)(Edit, BlueprintVisible, Config, DisableEditOnInstance, HasGetValueTypeHash)
	struct FKey                                   Key_MoveBack;                                      // 0x0280(0x0020)(Edit, BlueprintVisible, Config, DisableEditOnInstance, HasGetValueTypeHash)
	struct FKey                                   Key_MoveRight;                                     // 0x02A0(0x0020)(Edit, BlueprintVisible, Config, DisableEditOnInstance, HasGetValueTypeHash)
	struct FKey                                   Key_MoveLeft;                                      // 0x02C0(0x0020)(Edit, BlueprintVisible, Config, DisableEditOnInstance, HasGetValueTypeHash)
	struct FKey                                   Key_MoveDown;                                      // 0x02E0(0x0020)(Edit, BlueprintVisible, Config, DisableEditOnInstance, HasGetValueTypeHash)
	struct FKey                                   Key_MoveUp;                                        // 0x0300(0x0020)(Edit, BlueprintVisible, Config, DisableEditOnInstance, HasGetValueTypeHash)
	struct FKey                                   Key_ResetRoll;                                     // 0x0320(0x0020)(Edit, BlueprintVisible, Config, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ActorController(int32 EntryPoint);
	void Event_FlyUp();
	void Event_FlyDown();
	void Event_Update_Running_PC();
	void ReceiveBeginPlay();
	void Event_KeyLeft();
	void Event_KeyRight();
	void Event_KeyBack();
	void Event_KeyForward();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ActorController_C">();
	}
	static class ABP_ActorController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ActorController_C>();
	}
};
static_assert(alignof(ABP_ActorController_C) == 0x000008, "Wrong alignment on ABP_ActorController_C");
static_assert(sizeof(ABP_ActorController_C) == 0x000340, "Wrong size on ABP_ActorController_C");
static_assert(offsetof(ABP_ActorController_C, UberGraphFrame) == 0x000230, "Member 'ABP_ActorController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ActorController_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_ActorController_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ActorController_C, Controlled_Actor_Reference) == 0x000240, "Member 'ABP_ActorController_C::Controlled_Actor_Reference' has a wrong offset!");
static_assert(offsetof(ABP_ActorController_C, Running_PC) == 0x000248, "Member 'ABP_ActorController_C::Running_PC' has a wrong offset!");
static_assert(offsetof(ABP_ActorController_C, MovementMultiplier) == 0x000250, "Member 'ABP_ActorController_C::MovementMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_ActorController_C, RotationMultiplier) == 0x000254, "Member 'ABP_ActorController_C::RotationMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_ActorController_C, Gamepad_Movement_Multiplier) == 0x000258, "Member 'ABP_ActorController_C::Gamepad_Movement_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_ActorController_C, Gamepad_Rotation_Multiplier) == 0x00025C, "Member 'ABP_ActorController_C::Gamepad_Rotation_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_ActorController_C, Key_MoveForward) == 0x000260, "Member 'ABP_ActorController_C::Key_MoveForward' has a wrong offset!");
static_assert(offsetof(ABP_ActorController_C, Key_MoveBack) == 0x000280, "Member 'ABP_ActorController_C::Key_MoveBack' has a wrong offset!");
static_assert(offsetof(ABP_ActorController_C, Key_MoveRight) == 0x0002A0, "Member 'ABP_ActorController_C::Key_MoveRight' has a wrong offset!");
static_assert(offsetof(ABP_ActorController_C, Key_MoveLeft) == 0x0002C0, "Member 'ABP_ActorController_C::Key_MoveLeft' has a wrong offset!");
static_assert(offsetof(ABP_ActorController_C, Key_MoveDown) == 0x0002E0, "Member 'ABP_ActorController_C::Key_MoveDown' has a wrong offset!");
static_assert(offsetof(ABP_ActorController_C, Key_MoveUp) == 0x000300, "Member 'ABP_ActorController_C::Key_MoveUp' has a wrong offset!");
static_assert(offsetof(ABP_ActorController_C, Key_ResetRoll) == 0x000320, "Member 'ABP_ActorController_C::Key_ResetRoll' has a wrong offset!");

}

