#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIViewsCore

#include "Basic.hpp"

#include "DBDUIManagers_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "DBDUIViewsCore_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"
#include "UITween_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DBDInput_structs.hpp"
#include "InputCore_structs.hpp"
#include "CoreCommonUIUtils_structs.hpp"


namespace SDK
{

// Class DBDUIViewsCore.CoreBaseLoadoutPartWidget
// 0x0018 (0x02B0 - 0x0298)
class UCoreBaseLoadoutPartWidget : public UUserWidget
{
public:
	class UDBDImage*                              ImageRarity;                                       // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ImageIcon;                                         // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             TextStackCount;                                    // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetLoadoutPartIcon(TSoftObjectPtr<class UTexture2D> icon);
	void SetLoadoutPartRarity(EItemRarity rarity);
	void SetLoadoutStackCount(int32 stackCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreBaseLoadoutPartWidget">();
	}
	static class UCoreBaseLoadoutPartWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreBaseLoadoutPartWidget>();
	}
};
static_assert(alignof(UCoreBaseLoadoutPartWidget) == 0x000008, "Wrong alignment on UCoreBaseLoadoutPartWidget");
static_assert(sizeof(UCoreBaseLoadoutPartWidget) == 0x0002B0, "Wrong size on UCoreBaseLoadoutPartWidget");
static_assert(offsetof(UCoreBaseLoadoutPartWidget, ImageRarity) == 0x000298, "Member 'UCoreBaseLoadoutPartWidget::ImageRarity' has a wrong offset!");
static_assert(offsetof(UCoreBaseLoadoutPartWidget, ImageIcon) == 0x0002A0, "Member 'UCoreBaseLoadoutPartWidget::ImageIcon' has a wrong offset!");
static_assert(offsetof(UCoreBaseLoadoutPartWidget, TextStackCount) == 0x0002A8, "Member 'UCoreBaseLoadoutPartWidget::TextStackCount' has a wrong offset!");

// Class DBDUIViewsCore.CoreBaseUserWidget
// 0x0078 (0x0310 - 0x0298)
class UCoreBaseUserWidget : public UUserWidget
{
public:
	uint8                                         Pad_298[0x10];                                     // 0x0298(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UScaleBox*                              ScaleContainer;                                    // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInteractive;                                     // 0x02B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EControlMode                                  _controlMode;                                      // 0x02B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EScaleType                                    ScaleType;                                         // 0x02B2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B3[0x5];                                      // 0x02B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDInputManager*                       _inputManager;                                     // 0x02B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, class UWidgetAnimation*>    _animationMap;                                     // 0x02C0(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	void DeregisterFromInput();
	void OnControlModeChangedBP(EControlMode controlMode);
	bool PlayAnimationByName(class FName animName, float starttime, int32 loopcount, EUMGSequencePlayMode playMode, float playbackspeed);
	void RegisterForInput();
	bool StopAnimationByName(class FName animName);
	void UpdateScale(float scale);

	class UWidgetAnimation* GetAnimationByName(class FName animName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreBaseUserWidget">();
	}
	static class UCoreBaseUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreBaseUserWidget>();
	}
};
static_assert(alignof(UCoreBaseUserWidget) == 0x000008, "Wrong alignment on UCoreBaseUserWidget");
static_assert(sizeof(UCoreBaseUserWidget) == 0x000310, "Wrong size on UCoreBaseUserWidget");
static_assert(offsetof(UCoreBaseUserWidget, ScaleContainer) == 0x0002A8, "Member 'UCoreBaseUserWidget::ScaleContainer' has a wrong offset!");
static_assert(offsetof(UCoreBaseUserWidget, IsInteractive) == 0x0002B0, "Member 'UCoreBaseUserWidget::IsInteractive' has a wrong offset!");
static_assert(offsetof(UCoreBaseUserWidget, _controlMode) == 0x0002B1, "Member 'UCoreBaseUserWidget::_controlMode' has a wrong offset!");
static_assert(offsetof(UCoreBaseUserWidget, ScaleType) == 0x0002B2, "Member 'UCoreBaseUserWidget::ScaleType' has a wrong offset!");
static_assert(offsetof(UCoreBaseUserWidget, _inputManager) == 0x0002B8, "Member 'UCoreBaseUserWidget::_inputManager' has a wrong offset!");
static_assert(offsetof(UCoreBaseUserWidget, _animationMap) == 0x0002C0, "Member 'UCoreBaseUserWidget::_animationMap' has a wrong offset!");

// Class DBDUIViewsCore.CoreButtonWidget
// 0x00F8 (0x0408 - 0x0310)
class UCoreButtonWidget : public UCoreBaseUserWidget
{
public:
	class UDBDImage*                              BackgroundIMG;                                     // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDImage*                              AdditionalIconIMG;                                 // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreButtonWidget* buttonTarget)> OnHoveredDelegate;         // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreButtonWidget* buttonTarget)> OnUnhoveredDelegate;       // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreButtonWidget* buttonTarget)> OnPressedDelegate;         // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreButtonWidget* buttonTarget)> OnReleasedDelegate;        // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreButtonWidget* buttonTarget)> OnClickedDelegate;         // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 HoveredSfxName;                                    // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          HoveredSfx;                                        // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PressedSfxName;                                    // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          PressedSfx;                                        // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClickedSfxName;                                    // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ClickedSfx;                                        // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnalogCursorStickiness                       AnalogCursorStickiness;                            // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDButton*                             HitzoneButton;                                     // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LabelTB;                                           // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextJustify                                  _alignment;                                        // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D1[0x21];                                     // 0x03D1(0x0021)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          SendAnalyticsData;                                 // 0x03F2(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F3[0x5];                                      // 0x03F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnalyticsName;                                     // 0x03F8(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnAlignmentChanged(ETextJustify newAlignment);
	void OnClicked();
	void OnEnabledChanged(bool isEnabled);
	void OnHovered();
	void OnInternalClicked();
	void OnInternalHovered();
	void OnInternalPressed();
	void OnInternalReleased();
	void OnInternalUnhovered();
	void OnPressed();
	void OnReleased();
	void OnUnhovered();
	void SetAdditionalIcon(TSoftObjectPtr<class UTexture2D> iconTexture);
	void SetAlignment(ETextJustify newAlignment);
	void SetBackground(TSoftObjectPtr<class UMaterialInstance> backgroundMaterial);
	void SetChargeable(bool isChargeable);
	void SetClickable(bool isClickable);
	void SetEnabled(bool isEnabled);
	void SetHoldable(bool isHoldable);
	void SetHoverable(bool isHoverable);
	void SetLabel(const class FText& label);
	void SetPressable(bool isPressable);
	void SetRepeatable(bool isRepeatable, class UCurveFloat* repetitionDelayCurve);
	void SetVisible(EButtonWidgetVisibility visible);

	const struct FGeometry GetHitzonePaintSpaceGeometry() const;
	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreButtonWidget">();
	}
	static class UCoreButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreButtonWidget>();
	}
};
static_assert(alignof(UCoreButtonWidget) == 0x000008, "Wrong alignment on UCoreButtonWidget");
static_assert(sizeof(UCoreButtonWidget) == 0x000408, "Wrong size on UCoreButtonWidget");
static_assert(offsetof(UCoreButtonWidget, BackgroundIMG) == 0x000310, "Member 'UCoreButtonWidget::BackgroundIMG' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, AdditionalIconIMG) == 0x000318, "Member 'UCoreButtonWidget::AdditionalIconIMG' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, OnHoveredDelegate) == 0x000320, "Member 'UCoreButtonWidget::OnHoveredDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, OnUnhoveredDelegate) == 0x000330, "Member 'UCoreButtonWidget::OnUnhoveredDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, OnPressedDelegate) == 0x000340, "Member 'UCoreButtonWidget::OnPressedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, OnReleasedDelegate) == 0x000350, "Member 'UCoreButtonWidget::OnReleasedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, OnClickedDelegate) == 0x000360, "Member 'UCoreButtonWidget::OnClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, HoveredSfxName) == 0x000370, "Member 'UCoreButtonWidget::HoveredSfxName' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, HoveredSfx) == 0x000380, "Member 'UCoreButtonWidget::HoveredSfx' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, PressedSfxName) == 0x000388, "Member 'UCoreButtonWidget::PressedSfxName' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, PressedSfx) == 0x000398, "Member 'UCoreButtonWidget::PressedSfx' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, ClickedSfxName) == 0x0003A0, "Member 'UCoreButtonWidget::ClickedSfxName' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, ClickedSfx) == 0x0003B0, "Member 'UCoreButtonWidget::ClickedSfx' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, AnalogCursorStickiness) == 0x0003B8, "Member 'UCoreButtonWidget::AnalogCursorStickiness' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, HitzoneButton) == 0x0003C0, "Member 'UCoreButtonWidget::HitzoneButton' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, LabelTB) == 0x0003C8, "Member 'UCoreButtonWidget::LabelTB' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, _alignment) == 0x0003D0, "Member 'UCoreButtonWidget::_alignment' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, SendAnalyticsData) == 0x0003F2, "Member 'UCoreButtonWidget::SendAnalyticsData' has a wrong offset!");
static_assert(offsetof(UCoreButtonWidget, AnalyticsName) == 0x0003F8, "Member 'UCoreButtonWidget::AnalyticsName' has a wrong offset!");

// Class DBDUIViewsCore.CoreGameManualCategoryButton
// 0x0030 (0x0438 - 0x0408)
class UCoreGameManualCategoryButton final : public UCoreButtonWidget
{
public:
	class UDBDTextBlock*                          Title;                                             // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          Description;                                       // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDImage*                              Icon;                                              // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDImage*                              Background;                                        // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0428(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BackgroundTexture;                                 // 0x0430(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetText(const class FText& title, const class FText& description);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreGameManualCategoryButton">();
	}
	static class UCoreGameManualCategoryButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreGameManualCategoryButton>();
	}
};
static_assert(alignof(UCoreGameManualCategoryButton) == 0x000008, "Wrong alignment on UCoreGameManualCategoryButton");
static_assert(sizeof(UCoreGameManualCategoryButton) == 0x000438, "Wrong size on UCoreGameManualCategoryButton");
static_assert(offsetof(UCoreGameManualCategoryButton, Title) == 0x000408, "Member 'UCoreGameManualCategoryButton::Title' has a wrong offset!");
static_assert(offsetof(UCoreGameManualCategoryButton, Description) == 0x000410, "Member 'UCoreGameManualCategoryButton::Description' has a wrong offset!");
static_assert(offsetof(UCoreGameManualCategoryButton, Icon) == 0x000418, "Member 'UCoreGameManualCategoryButton::Icon' has a wrong offset!");
static_assert(offsetof(UCoreGameManualCategoryButton, Background) == 0x000420, "Member 'UCoreGameManualCategoryButton::Background' has a wrong offset!");
static_assert(offsetof(UCoreGameManualCategoryButton, IconTexture) == 0x000428, "Member 'UCoreGameManualCategoryButton::IconTexture' has a wrong offset!");
static_assert(offsetof(UCoreGameManualCategoryButton, BackgroundTexture) == 0x000430, "Member 'UCoreGameManualCategoryButton::BackgroundTexture' has a wrong offset!");

// Class DBDUIViewsCore.ArchiveCompendiumTooltipWidget
// 0x0018 (0x0328 - 0x0310)
class UArchiveCompendiumTooltipWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDTextBlock*                          TomeTitleTB;                                       // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          DescriptionTB;                                     // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreStoryLevelsSelectorWidget*         StoryLevelsSelector;                               // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Reset();
	void SetTooltipData(const struct FCompendiumButtonData& tooltipViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveCompendiumTooltipWidget">();
	}
	static class UArchiveCompendiumTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveCompendiumTooltipWidget>();
	}
};
static_assert(alignof(UArchiveCompendiumTooltipWidget) == 0x000008, "Wrong alignment on UArchiveCompendiumTooltipWidget");
static_assert(sizeof(UArchiveCompendiumTooltipWidget) == 0x000328, "Wrong size on UArchiveCompendiumTooltipWidget");
static_assert(offsetof(UArchiveCompendiumTooltipWidget, TomeTitleTB) == 0x000310, "Member 'UArchiveCompendiumTooltipWidget::TomeTitleTB' has a wrong offset!");
static_assert(offsetof(UArchiveCompendiumTooltipWidget, DescriptionTB) == 0x000318, "Member 'UArchiveCompendiumTooltipWidget::DescriptionTB' has a wrong offset!");
static_assert(offsetof(UArchiveCompendiumTooltipWidget, StoryLevelsSelector) == 0x000320, "Member 'UArchiveCompendiumTooltipWidget::StoryLevelsSelector' has a wrong offset!");

// Class DBDUIViewsCore.ArchiveNodeTooltipWidget
// 0x0050 (0x0360 - 0x0310)
class UArchiveNodeTooltipWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDImage*                              BackgroundIMG;                                     // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              RarityIMG;                                         // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          NodeTitleTB;                                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SubtitleTB;                                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      NodeDescriptionRTB;                                // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreArchiveObjectiveWidget> ObjectiveWidgetClass;                             // 0x0338(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           ArchiveObjectivesContainer;                        // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreCurrencyForTooltipsWidget*         ProgressionRewardWidget;                           // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreCurrencyForTooltipsWidget*         CurrencyRewardWidget;                              // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      VignetteRTB;                                       // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Reset();
	void SetNodeType(EArchiveNodeType type);
	void SetTooltipData(const struct FArchiveNodeViewData& nodeViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveNodeTooltipWidget">();
	}
	static class UArchiveNodeTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveNodeTooltipWidget>();
	}
};
static_assert(alignof(UArchiveNodeTooltipWidget) == 0x000008, "Wrong alignment on UArchiveNodeTooltipWidget");
static_assert(sizeof(UArchiveNodeTooltipWidget) == 0x000360, "Wrong size on UArchiveNodeTooltipWidget");
static_assert(offsetof(UArchiveNodeTooltipWidget, BackgroundIMG) == 0x000310, "Member 'UArchiveNodeTooltipWidget::BackgroundIMG' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, RarityIMG) == 0x000318, "Member 'UArchiveNodeTooltipWidget::RarityIMG' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, NodeTitleTB) == 0x000320, "Member 'UArchiveNodeTooltipWidget::NodeTitleTB' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, SubtitleTB) == 0x000328, "Member 'UArchiveNodeTooltipWidget::SubtitleTB' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, NodeDescriptionRTB) == 0x000330, "Member 'UArchiveNodeTooltipWidget::NodeDescriptionRTB' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, ObjectiveWidgetClass) == 0x000338, "Member 'UArchiveNodeTooltipWidget::ObjectiveWidgetClass' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, ArchiveObjectivesContainer) == 0x000340, "Member 'UArchiveNodeTooltipWidget::ArchiveObjectivesContainer' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, ProgressionRewardWidget) == 0x000348, "Member 'UArchiveNodeTooltipWidget::ProgressionRewardWidget' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, CurrencyRewardWidget) == 0x000350, "Member 'UArchiveNodeTooltipWidget::CurrencyRewardWidget' has a wrong offset!");
static_assert(offsetof(UArchiveNodeTooltipWidget, VignetteRTB) == 0x000358, "Member 'UArchiveNodeTooltipWidget::VignetteRTB' has a wrong offset!");

// Class DBDUIViewsCore.ArchiveRewardNodeTooltipWidget
// 0x0008 (0x0318 - 0x0310)
class UArchiveRewardNodeTooltipWidget final : public UCoreBaseUserWidget
{
public:
	class UCustomizationTooltipWidget*            CustomizationTooltip;                              // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveRewardNodeTooltipWidget">();
	}
	static class UArchiveRewardNodeTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveRewardNodeTooltipWidget>();
	}
};
static_assert(alignof(UArchiveRewardNodeTooltipWidget) == 0x000008, "Wrong alignment on UArchiveRewardNodeTooltipWidget");
static_assert(sizeof(UArchiveRewardNodeTooltipWidget) == 0x000318, "Wrong size on UArchiveRewardNodeTooltipWidget");
static_assert(offsetof(UArchiveRewardNodeTooltipWidget, CustomizationTooltip) == 0x000310, "Member 'UArchiveRewardNodeTooltipWidget::CustomizationTooltip' has a wrong offset!");

// Class DBDUIViewsCore.AspectRatioBox
// 0x0018 (0x0160 - 0x0148)
class UAspectRatioBox final : public UContentWidget
{
public:
	float                                         AspectRatio;                                       // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsAspectRatioOverridden : 1;                       // 0x014C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_14D[0x13];                                     // 0x014D(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearAspectRatio();
	void SetAspectRatio(float inAspectRatio);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AspectRatioBox">();
	}
	static class UAspectRatioBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAspectRatioBox>();
	}
};
static_assert(alignof(UAspectRatioBox) == 0x000008, "Wrong alignment on UAspectRatioBox");
static_assert(sizeof(UAspectRatioBox) == 0x000160, "Wrong size on UAspectRatioBox");
static_assert(offsetof(UAspectRatioBox, AspectRatio) == 0x000148, "Member 'UAspectRatioBox::AspectRatio' has a wrong offset!");

// Class DBDUIViewsCore.AspectRatioBoxSlot
// 0x0028 (0x0068 - 0x0040)
class UAspectRatioBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x16];                                      // 0x0052(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment inHorizontalAlignment);
	void SetPadding(const struct FMargin& inPadding);
	void SetVerticalAlignment(EVerticalAlignment inVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AspectRatioBoxSlot">();
	}
	static class UAspectRatioBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAspectRatioBoxSlot>();
	}
};
static_assert(alignof(UAspectRatioBoxSlot) == 0x000008, "Wrong alignment on UAspectRatioBoxSlot");
static_assert(sizeof(UAspectRatioBoxSlot) == 0x000068, "Wrong size on UAspectRatioBoxSlot");
static_assert(offsetof(UAspectRatioBoxSlot, Padding) == 0x000040, "Member 'UAspectRatioBoxSlot::Padding' has a wrong offset!");
static_assert(offsetof(UAspectRatioBoxSlot, HorizontalAlignment) == 0x000050, "Member 'UAspectRatioBoxSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UAspectRatioBoxSlot, VerticalAlignment) == 0x000051, "Member 'UAspectRatioBoxSlot::VerticalAlignment' has a wrong offset!");

// Class DBDUIViewsCore.CharacterTooltipWidget
// 0x0020 (0x0330 - 0x0310)
class UCharacterTooltipWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDTextBlock*                          InstructionTB;                                     // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LevelTB;                                           // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          MarketTB;                                          // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      DifficultyRTB;                                     // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetDifficulty(ECharacterDifficulty difficulty);
	void SetLevel(int32 level);
	void SetTooltipData(const struct FCharacterTooltipViewData& characterViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterTooltipWidget">();
	}
	static class UCharacterTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterTooltipWidget>();
	}
};
static_assert(alignof(UCharacterTooltipWidget) == 0x000008, "Wrong alignment on UCharacterTooltipWidget");
static_assert(sizeof(UCharacterTooltipWidget) == 0x000330, "Wrong size on UCharacterTooltipWidget");
static_assert(offsetof(UCharacterTooltipWidget, InstructionTB) == 0x000310, "Member 'UCharacterTooltipWidget::InstructionTB' has a wrong offset!");
static_assert(offsetof(UCharacterTooltipWidget, LevelTB) == 0x000318, "Member 'UCharacterTooltipWidget::LevelTB' has a wrong offset!");
static_assert(offsetof(UCharacterTooltipWidget, MarketTB) == 0x000320, "Member 'UCharacterTooltipWidget::MarketTB' has a wrong offset!");
static_assert(offsetof(UCharacterTooltipWidget, DifficultyRTB) == 0x000328, "Member 'UCharacterTooltipWidget::DifficultyRTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreAddonWidget
// 0x0008 (0x02B8 - 0x02B0)
class UCoreAddonWidget final : public UCoreBaseLoadoutPartWidget
{
public:
	uint8                                         Pad_2B0[0x8];                                      // 0x02B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreAddonWidget">();
	}
	static class UCoreAddonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreAddonWidget>();
	}
};
static_assert(alignof(UCoreAddonWidget) == 0x000008, "Wrong alignment on UCoreAddonWidget");
static_assert(sizeof(UCoreAddonWidget) == 0x0002B8, "Wrong size on UCoreAddonWidget");

// Class DBDUIViewsCore.CoreSelectableButtonWidget
// 0x0038 (0x0440 - 0x0408)
class UCoreSelectableButtonWidget : public UCoreButtonWidget
{
public:
	TMulticastInlineDelegate<void(class UCoreSelectableButtonWidget* buttonTarget, bool isSelected)> OnSelectedChangedDelegate; // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreSelectableButtonWidget* buttonTarget)> OnSelectedAgainDelegate; // 0x0418(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 _analyticsName;                                    // 0x0428(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_438[0x8];                                      // 0x0438(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSelectedChanged(bool isSelected);
	void SetSelectable(bool isSelectable);
	void SetSelected(bool isSelected);
	void UpdateBackgroundSkin(class UMaterialInterface* skinMaterial);

	bool IsSelectable() const;
	bool IsSelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSelectableButtonWidget">();
	}
	static class UCoreSelectableButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSelectableButtonWidget>();
	}
};
static_assert(alignof(UCoreSelectableButtonWidget) == 0x000008, "Wrong alignment on UCoreSelectableButtonWidget");
static_assert(sizeof(UCoreSelectableButtonWidget) == 0x000440, "Wrong size on UCoreSelectableButtonWidget");
static_assert(offsetof(UCoreSelectableButtonWidget, OnSelectedChangedDelegate) == 0x000408, "Member 'UCoreSelectableButtonWidget::OnSelectedChangedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreSelectableButtonWidget, OnSelectedAgainDelegate) == 0x000418, "Member 'UCoreSelectableButtonWidget::OnSelectedAgainDelegate' has a wrong offset!");
static_assert(offsetof(UCoreSelectableButtonWidget, _analyticsName) == 0x000428, "Member 'UCoreSelectableButtonWidget::_analyticsName' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget
// 0x0068 (0x04A8 - 0x0440)
class UCoreArchiveChallengeReminderSlotWidget final : public UCoreSelectableButtonWidget
{
public:
	class UCoreArchiveQuestNodeWidget*            Node;                                              // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              EmptySlotImage;                                    // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              InactiveBG;                                        // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ActiveBG;                                          // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              SmokeBackground;                                   // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ProgressBar;                                       // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              SelectorHighlight;                                 // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TitleTB;                                           // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SubtitleTB;                                        // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          InactiveTitleTB;                                   // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          InactiveSubtitleTB;                                // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPlayerRole                                   _slotRole;                                         // 0x04A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hasActiveHoverEffect;                             // 0x04A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A2[0x6];                                      // 0x04A2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearData();
	void Init(EPlayerRole role);
	void InitVisualState();
	void SetData(const struct FArchiveChallengeReminderViewData& data);
	void SetQuestNodeHoverEffect(bool isHovered);
	void SetSlotSelectorState(bool isSelectorOpen);
	void SwapChallenge(const struct FArchiveChallengeReminderViewData& data);
	void UpdateActiveState(bool isActive, bool playAnimation);
	void UpdateProgressBar(float progress);
	void UpdateVisualState(const struct FArchiveChallengeReminderViewData& data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveChallengeReminderSlotWidget">();
	}
	static class UCoreArchiveChallengeReminderSlotWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveChallengeReminderSlotWidget>();
	}
};
static_assert(alignof(UCoreArchiveChallengeReminderSlotWidget) == 0x000008, "Wrong alignment on UCoreArchiveChallengeReminderSlotWidget");
static_assert(sizeof(UCoreArchiveChallengeReminderSlotWidget) == 0x0004A8, "Wrong size on UCoreArchiveChallengeReminderSlotWidget");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, Node) == 0x000440, "Member 'UCoreArchiveChallengeReminderSlotWidget::Node' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, EmptySlotImage) == 0x000448, "Member 'UCoreArchiveChallengeReminderSlotWidget::EmptySlotImage' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, InactiveBG) == 0x000450, "Member 'UCoreArchiveChallengeReminderSlotWidget::InactiveBG' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, ActiveBG) == 0x000458, "Member 'UCoreArchiveChallengeReminderSlotWidget::ActiveBG' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, SmokeBackground) == 0x000460, "Member 'UCoreArchiveChallengeReminderSlotWidget::SmokeBackground' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, ProgressBar) == 0x000468, "Member 'UCoreArchiveChallengeReminderSlotWidget::ProgressBar' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, SelectorHighlight) == 0x000470, "Member 'UCoreArchiveChallengeReminderSlotWidget::SelectorHighlight' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, TitleTB) == 0x000478, "Member 'UCoreArchiveChallengeReminderSlotWidget::TitleTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, SubtitleTB) == 0x000480, "Member 'UCoreArchiveChallengeReminderSlotWidget::SubtitleTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, InactiveTitleTB) == 0x000488, "Member 'UCoreArchiveChallengeReminderSlotWidget::InactiveTitleTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, InactiveSubtitleTB) == 0x000490, "Member 'UCoreArchiveChallengeReminderSlotWidget::InactiveSubtitleTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, OnHoverBorder) == 0x000498, "Member 'UCoreArchiveChallengeReminderSlotWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, _slotRole) == 0x0004A0, "Member 'UCoreArchiveChallengeReminderSlotWidget::_slotRole' has a wrong offset!");
static_assert(offsetof(UCoreArchiveChallengeReminderSlotWidget, _hasActiveHoverEffect) == 0x0004A1, "Member 'UCoreArchiveChallengeReminderSlotWidget::_hasActiveHoverEffect' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveCompendiumButtonWidget
// 0x0088 (0x0490 - 0x0408)
class UCoreArchiveCompendiumButtonWidget final : public UCoreButtonWidget
{
public:
	ETooltipHorizontalAlignment                   HorizontalAlignment;                               // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     VerticalAlignment;                                 // 0x0409(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40A[0x6];                                      // 0x040A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDImage*                              TomeProgressStyleTexture;                          // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          VolumeIndex;                                       // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCompendiumButtonData                  _compendiumButtonData;                             // 0x0420(0x0070)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	class FString GetTomeId();
	void OnButtonHovered();
	void OnButtonUnhovered();
	void ResetVisuals();
	void SetButtonData(const struct FCompendiumButtonData& buttonData);
	void SetButtonVisual(const struct FCompendiumButtonData& buttonData);
	void SetGhostStory(bool isGhostStory);
	void SetLevelProgressionVisual(int32 buttonLevel, EArchivesStoryLevelStatus levelStatus);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveCompendiumButtonWidget">();
	}
	static class UCoreArchiveCompendiumButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveCompendiumButtonWidget>();
	}
};
static_assert(alignof(UCoreArchiveCompendiumButtonWidget) == 0x000008, "Wrong alignment on UCoreArchiveCompendiumButtonWidget");
static_assert(sizeof(UCoreArchiveCompendiumButtonWidget) == 0x000490, "Wrong size on UCoreArchiveCompendiumButtonWidget");
static_assert(offsetof(UCoreArchiveCompendiumButtonWidget, HorizontalAlignment) == 0x000408, "Member 'UCoreArchiveCompendiumButtonWidget::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumButtonWidget, VerticalAlignment) == 0x000409, "Member 'UCoreArchiveCompendiumButtonWidget::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumButtonWidget, TomeProgressStyleTexture) == 0x000410, "Member 'UCoreArchiveCompendiumButtonWidget::TomeProgressStyleTexture' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumButtonWidget, VolumeIndex) == 0x000418, "Member 'UCoreArchiveCompendiumButtonWidget::VolumeIndex' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumButtonWidget, _compendiumButtonData) == 0x000420, "Member 'UCoreArchiveCompendiumButtonWidget::_compendiumButtonData' has a wrong offset!");

// Class DBDUIViewsCore.CoreTabContentWidget
// 0x0020 (0x0330 - 0x0310)
class UCoreTabContentWidget : public UCoreBaseUserWidget
{
public:
	TArray<class UWidget*>                        ContentWidgets;                                    // 0x0310(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                         _contentFadeInTime;                                // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   _contentFadeInEasing;                              // 0x0324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _contentFadeOutTime;                               // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   _contentFadeOutEasing;                             // 0x032C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32D[0x3];                                      // 0x032D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FadeInContent();
	void FadeOutContent();
	void ResetFade();
	void StopFadeInTweening(float opacityValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTabContentWidget">();
	}
	static class UCoreTabContentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTabContentWidget>();
	}
};
static_assert(alignof(UCoreTabContentWidget) == 0x000008, "Wrong alignment on UCoreTabContentWidget");
static_assert(sizeof(UCoreTabContentWidget) == 0x000330, "Wrong size on UCoreTabContentWidget");
static_assert(offsetof(UCoreTabContentWidget, ContentWidgets) == 0x000310, "Member 'UCoreTabContentWidget::ContentWidgets' has a wrong offset!");
static_assert(offsetof(UCoreTabContentWidget, _contentFadeInTime) == 0x000320, "Member 'UCoreTabContentWidget::_contentFadeInTime' has a wrong offset!");
static_assert(offsetof(UCoreTabContentWidget, _contentFadeInEasing) == 0x000324, "Member 'UCoreTabContentWidget::_contentFadeInEasing' has a wrong offset!");
static_assert(offsetof(UCoreTabContentWidget, _contentFadeOutTime) == 0x000328, "Member 'UCoreTabContentWidget::_contentFadeOutTime' has a wrong offset!");
static_assert(offsetof(UCoreTabContentWidget, _contentFadeOutEasing) == 0x00032C, "Member 'UCoreTabContentWidget::_contentFadeOutEasing' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveCompendiumWidget
// 0x0058 (0x0388 - 0x0330)
class UCoreArchiveCompendiumWidget final : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreArchiveCompendiumButtonWidget> _compendiumButtonWidgetClass;              // 0x0338(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FString& tomeId)> _onCompendiumClickedDelegate;        // 0x0340(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UGridPanel*                             CompendiumGrid;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          CompendiumScroll;                                  // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _cellsPerRow;                                      // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCoreArchiveCompendiumButtonWidget*> _compendiumButtonWidgetPool;                   // 0x0368(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreArchiveCompendiumButtonWidget*> _compendiumButtonWidgetList;                   // 0x0378(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	class UCoreArchiveCompendiumButtonWidget* CreateAndAddButtonToGrid(int32 index);
	void CreateGhostStories(const int32 currentStoryNum);
	void OnPastStoryClicked(class UCoreButtonWidget* button);
	void Reset();
	void ResetScroll();
	void SetGridSlot(class UGridSlot* gridSlot, int32 index);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveCompendiumWidget">();
	}
	static class UCoreArchiveCompendiumWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveCompendiumWidget>();
	}
};
static_assert(alignof(UCoreArchiveCompendiumWidget) == 0x000008, "Wrong alignment on UCoreArchiveCompendiumWidget");
static_assert(sizeof(UCoreArchiveCompendiumWidget) == 0x000388, "Wrong size on UCoreArchiveCompendiumWidget");
static_assert(offsetof(UCoreArchiveCompendiumWidget, _compendiumButtonWidgetClass) == 0x000338, "Member 'UCoreArchiveCompendiumWidget::_compendiumButtonWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumWidget, _onCompendiumClickedDelegate) == 0x000340, "Member 'UCoreArchiveCompendiumWidget::_onCompendiumClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumWidget, CompendiumGrid) == 0x000350, "Member 'UCoreArchiveCompendiumWidget::CompendiumGrid' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumWidget, CompendiumScroll) == 0x000358, "Member 'UCoreArchiveCompendiumWidget::CompendiumScroll' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumWidget, _cellsPerRow) == 0x000360, "Member 'UCoreArchiveCompendiumWidget::_cellsPerRow' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumWidget, _compendiumButtonWidgetPool) == 0x000368, "Member 'UCoreArchiveCompendiumWidget::_compendiumButtonWidgetPool' has a wrong offset!");
static_assert(offsetof(UCoreArchiveCompendiumWidget, _compendiumButtonWidgetList) == 0x000378, "Member 'UCoreArchiveCompendiumWidget::_compendiumButtonWidgetList' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveJournalImageViewerWidget
// 0x0058 (0x0388 - 0x0330)
class UCoreArchiveJournalImageViewerWidget final : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreInputSwitcherWidget*               TextVisibilityInputSwitcher;                       // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              _backActionDelegate;                               // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _imageViewerTextVisibilityActionDelegate;          // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _imageViewerVoiceOverPlayedDelegate;               // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const bool autoplayVoiceOver)> _imageViewerVoiceOverAutoplayDelegate; // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	void OnTextVisibilityChanged();
	void OnVoiceOverAutoPlay(bool autoplay);
	void OnVoiceOverPlay();
	void SetData(const struct FArchivesVignetteEntryViewData& data, const bool hasTitle, const bool hasDescription);
	void SetScrollData(const class FText& journalEntryScrollPromptText);
	void SetTextVisibilityInputText(const class FText& displayText, const class FText& hideText);
	void SetVoiceOverText(const class FText& playVoiceOverText, const class FText& stopVoiceOverText, const class FText& autoplayVoiceOverText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveJournalImageViewerWidget">();
	}
	static class UCoreArchiveJournalImageViewerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveJournalImageViewerWidget>();
	}
};
static_assert(alignof(UCoreArchiveJournalImageViewerWidget) == 0x000008, "Wrong alignment on UCoreArchiveJournalImageViewerWidget");
static_assert(sizeof(UCoreArchiveJournalImageViewerWidget) == 0x000388, "Wrong size on UCoreArchiveJournalImageViewerWidget");
static_assert(offsetof(UCoreArchiveJournalImageViewerWidget, BackInputSwitcher) == 0x000338, "Member 'UCoreArchiveJournalImageViewerWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalImageViewerWidget, TextVisibilityInputSwitcher) == 0x000340, "Member 'UCoreArchiveJournalImageViewerWidget::TextVisibilityInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalImageViewerWidget, _backActionDelegate) == 0x000348, "Member 'UCoreArchiveJournalImageViewerWidget::_backActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalImageViewerWidget, _imageViewerTextVisibilityActionDelegate) == 0x000358, "Member 'UCoreArchiveJournalImageViewerWidget::_imageViewerTextVisibilityActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalImageViewerWidget, _imageViewerVoiceOverPlayedDelegate) == 0x000368, "Member 'UCoreArchiveJournalImageViewerWidget::_imageViewerVoiceOverPlayedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalImageViewerWidget, _imageViewerVoiceOverAutoplayDelegate) == 0x000378, "Member 'UCoreArchiveJournalImageViewerWidget::_imageViewerVoiceOverAutoplayDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveJournalWidget
// 0x00E8 (0x0418 - 0x0330)
class UCoreArchiveJournalWidget final : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreArchiveVignetteButtonContainerWidget* VignetteButtonContainer;                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreArchiveVignetteEntryContainerWidget* VignetteEntryContainer;                          // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreArchiveVignetteCinematicContainerWidget* VignetteCinematicsContainer;                 // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               LeftArrowInputSwitcher;                            // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               RightArrowInputSwitcher;                           // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              DebugRewardImage;                                  // 0x0360(0x0030)(Edit, BlueprintVisible, Transient, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         RewardImageMaxDescriptionLength;                   // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& vignetteId)> _vignetteSelectedDelegate;       // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const int32 vignetteEntryIndex)> _vignetteEntrySelectedDelegate;   // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const int32 cinematicId)> _vignetteCinematicPlayedDelegate;        // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const int32 vignetteEntry)> _vignetteVoiceOverPlayedDelegate;      // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const bool autoplayVoiceOver, const int32 vignetteEntry)> _vignetteVoiceOverAutoplayDelegate; // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _vignetteShowImageViewerDelegate;                  // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F8[0x20];                                     // 0x03F8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeArrow(class UCoreInputSwitcherWidget* arrowWidget, bool active);
	void OnFirstJournalEntryUnlocked();
	void OnJournalEntriesUnlocked();
	void OnLeftArrowTriggered();
	void OnRewardImageLoaded(TSoftObjectPtr<class UTexture2D> loadedTexture, bool success, const class FText& titleText, const class FText& descriptionText, float textureOffset);
	void OnRightArrowTriggered();
	void OnVignetteButtonSelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnVignetteCinematicSelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnVignetteEntrySelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnVoiceOverAutoPlay(bool autoplay);
	void OnVoiceOverPlay();
	void SetBottomFogOffset(bool hasAudio);
	void SetEntryImage(const class FText& titleText, const class FText& descriptionText, const TSoftObjectPtr<class UTexture2D>& rewardImage, float textureOffset);
	void SetEntryText(const class FText& titleText, const class FText& descriptionText);
	void SetTopFogOffset(bool hasTitle, bool hasDescription);
	void SetVignetteText(const class FText& titleText, const class FText& subtitleText);
	void SetVoiceOverButtonsVisibility(const bool isVisible);
	void SetVoiceOverText(const class FText& playVoiceOverText, const class FText& stopVoiceOverText, const class FText& autoplayVoiceOverText);
	void ShowImageViewer();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveJournalWidget">();
	}
	static class UCoreArchiveJournalWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveJournalWidget>();
	}
};
static_assert(alignof(UCoreArchiveJournalWidget) == 0x000008, "Wrong alignment on UCoreArchiveJournalWidget");
static_assert(sizeof(UCoreArchiveJournalWidget) == 0x000418, "Wrong size on UCoreArchiveJournalWidget");
static_assert(offsetof(UCoreArchiveJournalWidget, VignetteButtonContainer) == 0x000338, "Member 'UCoreArchiveJournalWidget::VignetteButtonContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, VignetteEntryContainer) == 0x000340, "Member 'UCoreArchiveJournalWidget::VignetteEntryContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, VignetteCinematicsContainer) == 0x000348, "Member 'UCoreArchiveJournalWidget::VignetteCinematicsContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, LeftArrowInputSwitcher) == 0x000350, "Member 'UCoreArchiveJournalWidget::LeftArrowInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, RightArrowInputSwitcher) == 0x000358, "Member 'UCoreArchiveJournalWidget::RightArrowInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, DebugRewardImage) == 0x000360, "Member 'UCoreArchiveJournalWidget::DebugRewardImage' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, RewardImageMaxDescriptionLength) == 0x000390, "Member 'UCoreArchiveJournalWidget::RewardImageMaxDescriptionLength' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, _vignetteSelectedDelegate) == 0x000398, "Member 'UCoreArchiveJournalWidget::_vignetteSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, _vignetteEntrySelectedDelegate) == 0x0003A8, "Member 'UCoreArchiveJournalWidget::_vignetteEntrySelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, _vignetteCinematicPlayedDelegate) == 0x0003B8, "Member 'UCoreArchiveJournalWidget::_vignetteCinematicPlayedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, _vignetteVoiceOverPlayedDelegate) == 0x0003C8, "Member 'UCoreArchiveJournalWidget::_vignetteVoiceOverPlayedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, _vignetteVoiceOverAutoplayDelegate) == 0x0003D8, "Member 'UCoreArchiveJournalWidget::_vignetteVoiceOverAutoplayDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveJournalWidget, _vignetteShowImageViewerDelegate) == 0x0003E8, "Member 'UCoreArchiveJournalWidget::_vignetteShowImageViewerDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveLevelProgressionWidget
// 0x0068 (0x0378 - 0x0310)
class UCoreArchiveLevelProgressionWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 level)>   _levelSelectedDelegate;                            // 0x0318(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _levelAnimationDoneDelegate;                       // 0x0328(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _levelRewardAnimationDoneDelegate;                 // 0x0338(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _levelUnlockedAnimationDoneDelegate;               // 0x0348(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UCoreStoryLevelsSelectorWidget*         StoryLevelsSelector;                               // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LevelNumberTF;                                     // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LevelCompletionTF;                                 // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               SideContent;                                       // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnStoryLevelSelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnTomeLevelUnlockedAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveLevelProgressionWidget">();
	}
	static class UCoreArchiveLevelProgressionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveLevelProgressionWidget>();
	}
};
static_assert(alignof(UCoreArchiveLevelProgressionWidget) == 0x000008, "Wrong alignment on UCoreArchiveLevelProgressionWidget");
static_assert(sizeof(UCoreArchiveLevelProgressionWidget) == 0x000378, "Wrong size on UCoreArchiveLevelProgressionWidget");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, _levelSelectedDelegate) == 0x000318, "Member 'UCoreArchiveLevelProgressionWidget::_levelSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, _levelAnimationDoneDelegate) == 0x000328, "Member 'UCoreArchiveLevelProgressionWidget::_levelAnimationDoneDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, _levelRewardAnimationDoneDelegate) == 0x000338, "Member 'UCoreArchiveLevelProgressionWidget::_levelRewardAnimationDoneDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, _levelUnlockedAnimationDoneDelegate) == 0x000348, "Member 'UCoreArchiveLevelProgressionWidget::_levelUnlockedAnimationDoneDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, StoryLevelsSelector) == 0x000358, "Member 'UCoreArchiveLevelProgressionWidget::StoryLevelsSelector' has a wrong offset!");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, LevelNumberTF) == 0x000360, "Member 'UCoreArchiveLevelProgressionWidget::LevelNumberTF' has a wrong offset!");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, LevelCompletionTF) == 0x000368, "Member 'UCoreArchiveLevelProgressionWidget::LevelCompletionTF' has a wrong offset!");
static_assert(offsetof(UCoreArchiveLevelProgressionWidget, SideContent) == 0x000370, "Member 'UCoreArchiveLevelProgressionWidget::SideContent' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveMenuWidget
// 0x0268 (0x0578 - 0x0310)
class UCoreArchiveMenuWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreTabContainerWidget*                ArchiveMenuTabs;                                   // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreArchiveChallengeReminderSlotWidget* SurvivorChallengeSlot;                            // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreArchiveChallengeReminderSlotWidget* KillerChallengeSlot;                              // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreArchiveSlotSelectorWidget*         SlotSelector;                                      // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreButtonWidget*                      InfoButton;                                        // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              _backActionDelegate;                               // 0x0348(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _infoClickedDelegate;                              // 0x0358(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _slotSelectorClosedDelegate;                       // 0x0368(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EArchiveMenuState menuState, bool alreadySelected)> MenuTabSelectedDelegate; // 0x0378(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EPlayerRole role)> _challengeReminderClickedDelegate;              // 0x0388(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EPlayerRole role)> _slotSelectionSelectedDelegate;                 // 0x0398(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class FText                                   _riftRemainingTimeText;                            // 0x03A8(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C0[0x1B8];                                    // 0x03C0(0x01B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FText GetTimeRemainingLabelFromMenuState(EArchiveMenuState menuState);
	void OnChallengeReminderClick(class UCoreButtonWidget* button);
	void OnInfoButtonClicked(class UCoreButtonWidget* buttonTarget);
	void OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnMenuTabSelectedAgain(class UCoreSelectableButtonWidget* selectedButton);
	void OnSlotSelected(EPlayerRole role);
	void OnSlotSelectionCancelled();
	void SetScrollData(const class FText& vignetteListScrollPromptText, const class FText& journalEntryScrollPromptText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveMenuWidget">();
	}
	static class UCoreArchiveMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveMenuWidget>();
	}
};
static_assert(alignof(UCoreArchiveMenuWidget) == 0x000008, "Wrong alignment on UCoreArchiveMenuWidget");
static_assert(sizeof(UCoreArchiveMenuWidget) == 0x000578, "Wrong size on UCoreArchiveMenuWidget");
static_assert(offsetof(UCoreArchiveMenuWidget, ArchiveMenuTabs) == 0x000318, "Member 'UCoreArchiveMenuWidget::ArchiveMenuTabs' has a wrong offset!");
static_assert(offsetof(UCoreArchiveMenuWidget, SurvivorChallengeSlot) == 0x000320, "Member 'UCoreArchiveMenuWidget::SurvivorChallengeSlot' has a wrong offset!");
static_assert(offsetof(UCoreArchiveMenuWidget, KillerChallengeSlot) == 0x000328, "Member 'UCoreArchiveMenuWidget::KillerChallengeSlot' has a wrong offset!");
static_assert(offsetof(UCoreArchiveMenuWidget, SlotSelector) == 0x000330, "Member 'UCoreArchiveMenuWidget::SlotSelector' has a wrong offset!");
static_assert(offsetof(UCoreArchiveMenuWidget, BackInputSwitcher) == 0x000338, "Member 'UCoreArchiveMenuWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreArchiveMenuWidget, InfoButton) == 0x000340, "Member 'UCoreArchiveMenuWidget::InfoButton' has a wrong offset!");
static_assert(offsetof(UCoreArchiveMenuWidget, _backActionDelegate) == 0x000348, "Member 'UCoreArchiveMenuWidget::_backActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveMenuWidget, _infoClickedDelegate) == 0x000358, "Member 'UCoreArchiveMenuWidget::_infoClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveMenuWidget, _slotSelectorClosedDelegate) == 0x000368, "Member 'UCoreArchiveMenuWidget::_slotSelectorClosedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveMenuWidget, MenuTabSelectedDelegate) == 0x000378, "Member 'UCoreArchiveMenuWidget::MenuTabSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveMenuWidget, _challengeReminderClickedDelegate) == 0x000388, "Member 'UCoreArchiveMenuWidget::_challengeReminderClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveMenuWidget, _slotSelectionSelectedDelegate) == 0x000398, "Member 'UCoreArchiveMenuWidget::_slotSelectionSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveMenuWidget, _riftRemainingTimeText) == 0x0003A8, "Member 'UCoreArchiveMenuWidget::_riftRemainingTimeText' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveObjectiveWidget
// 0x0020 (0x0330 - 0x0310)
class UCoreArchiveObjectiveWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDRichTextBlock*                      ObjectiveDescriptionRTB;                           // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ProgressBar;                                       // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          CurrentProgressTB;                                 // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          MaxProgressTB;                                     // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetData(const struct FArchiveNodeObjectiveViewData& objectiveData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveObjectiveWidget">();
	}
	static class UCoreArchiveObjectiveWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveObjectiveWidget>();
	}
};
static_assert(alignof(UCoreArchiveObjectiveWidget) == 0x000008, "Wrong alignment on UCoreArchiveObjectiveWidget");
static_assert(sizeof(UCoreArchiveObjectiveWidget) == 0x000330, "Wrong size on UCoreArchiveObjectiveWidget");
static_assert(offsetof(UCoreArchiveObjectiveWidget, ObjectiveDescriptionRTB) == 0x000310, "Member 'UCoreArchiveObjectiveWidget::ObjectiveDescriptionRTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveObjectiveWidget, ProgressBar) == 0x000318, "Member 'UCoreArchiveObjectiveWidget::ProgressBar' has a wrong offset!");
static_assert(offsetof(UCoreArchiveObjectiveWidget, CurrentProgressTB) == 0x000320, "Member 'UCoreArchiveObjectiveWidget::CurrentProgressTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveObjectiveWidget, MaxProgressTB) == 0x000328, "Member 'UCoreArchiveObjectiveWidget::MaxProgressTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreBasePopupWidget
// 0x0018 (0x0328 - 0x0310)
class UCoreBasePopupWidget : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDRichTextBlock*                      TitleText;                                         // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      MessageText;                                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Hide();
	void Show(class UBasePopupViewData* data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreBasePopupWidget">();
	}
	static class UCoreBasePopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreBasePopupWidget>();
	}
};
static_assert(alignof(UCoreBasePopupWidget) == 0x000008, "Wrong alignment on UCoreBasePopupWidget");
static_assert(sizeof(UCoreBasePopupWidget) == 0x000328, "Wrong size on UCoreBasePopupWidget");
static_assert(offsetof(UCoreBasePopupWidget, TitleText) == 0x000318, "Member 'UCoreBasePopupWidget::TitleText' has a wrong offset!");
static_assert(offsetof(UCoreBasePopupWidget, MessageText) == 0x000320, "Member 'UCoreBasePopupWidget::MessageText' has a wrong offset!");

// Class DBDUIViewsCore.CoreGenericPopupWidget
// 0x0040 (0x0368 - 0x0328)
class UCoreGenericPopupWidget : public UCoreBasePopupWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               ProgressionButton;                                 // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               RegressionButton;                                  // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               AlternativeButton;                                 // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EPopupButtonType popupAction)> _popupActionDelegate;               // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _popupBackActionDelegate;                          // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	void OnAlternativeAction();
	void OnProgressionAction();
	void OnRegressionAction();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreGenericPopupWidget">();
	}
	static class UCoreGenericPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreGenericPopupWidget>();
	}
};
static_assert(alignof(UCoreGenericPopupWidget) == 0x000008, "Wrong alignment on UCoreGenericPopupWidget");
static_assert(sizeof(UCoreGenericPopupWidget) == 0x000368, "Wrong size on UCoreGenericPopupWidget");
static_assert(offsetof(UCoreGenericPopupWidget, ProgressionButton) == 0x000330, "Member 'UCoreGenericPopupWidget::ProgressionButton' has a wrong offset!");
static_assert(offsetof(UCoreGenericPopupWidget, RegressionButton) == 0x000338, "Member 'UCoreGenericPopupWidget::RegressionButton' has a wrong offset!");
static_assert(offsetof(UCoreGenericPopupWidget, AlternativeButton) == 0x000340, "Member 'UCoreGenericPopupWidget::AlternativeButton' has a wrong offset!");
static_assert(offsetof(UCoreGenericPopupWidget, _popupActionDelegate) == 0x000348, "Member 'UCoreGenericPopupWidget::_popupActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreGenericPopupWidget, _popupBackActionDelegate) == 0x000358, "Member 'UCoreGenericPopupWidget::_popupBackActionDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchivePassPurchasePopupWidget
// 0x0008 (0x0370 - 0x0368)
class UCoreArchivePassPurchasePopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FText GetTranslatedAvailabilityTitleText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchivePassPurchasePopupWidget">();
	}
	static class UCoreArchivePassPurchasePopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchivePassPurchasePopupWidget>();
	}
};
static_assert(alignof(UCoreArchivePassPurchasePopupWidget) == 0x000008, "Wrong alignment on UCoreArchivePassPurchasePopupWidget");
static_assert(sizeof(UCoreArchivePassPurchasePopupWidget) == 0x000370, "Wrong size on UCoreArchivePassPurchasePopupWidget");

// Class DBDUIViewsCore.CoreArchiveQuestMapWidget
// 0x0178 (0x04A8 - 0x0330)
class UCoreArchiveQuestMapWidget : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           ChallengesContainer;                               // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreArchiveQuestNodeWidget> ArchiveQuestNodeWidgetClass;                      // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreArchiveQuestPathWidget> ArchiveQuestPathWidgetClass;                      // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxDisplayedNodes;                                 // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxDisplayedPaths;                                 // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         QuestMapRevealDuration;                            // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NodeRevealDuration;                                // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PathRevealDuration;                                // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   NodeRevealEasingType;                              // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   PathRevealEasingType;                              // 0x0365(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_366[0x2];                                      // 0x0366(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          QuestMapGenerationSound;                           // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FArchiveNodeGraphViewData>      _nodeGraphDataList;                                // 0x0370(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FArchiveMapPathViewData>        _pathDataList;                                     // 0x0380(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _questMapCreatedDelegate;                          // 0x0390(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EPlayerRole role)> _questNodeHoveredDelegate;                      // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(EPlayerRole role)> _questNodeUnhoveredDelegate;                    // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FName& nodeId, EPlayerRole role, const struct FVector2D& position)> _questNodeSelectedDelegate; // 0x03C0(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMap<class FName, class UCoreArchiveQuestNodeWidget*> _nodeDictionary;                           // 0x03D0(0x0050)(ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class UCoreArchiveQuestPathWidget*> _pathDictionary;                           // 0x0420(0x0050)(ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UCoreArchiveQuestNodeWidget*>    _nodeWidgetPool;                                   // 0x0470(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreArchiveQuestPathWidget*>    _pathWidgetPool;                                   // 0x0480(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_490[0x18];                                     // 0x0490(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindToNode(class UCoreArchiveQuestNodeWidget* node);
	void BindToPath(class UCoreArchiveQuestPathWidget* path);
	void OnNodeClicked(class UCoreButtonWidget* buttonTarget);
	void OnNodeHovered(class UCoreButtonWidget* buttonTarget);
	void OnNodesRevealCompleted();
	void OnNodeUnhovered(class UCoreButtonWidget* buttonTarget);
	void SetupNode(const struct FArchiveNodeGraphViewData& nodeData);
	void SetupPath(const struct FArchiveMapPathViewData& pathData);
	void UnbindFromNode(class UCoreArchiveQuestNodeWidget* node);
	void UnbindFromPath(class UCoreArchiveQuestPathWidget* path);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveQuestMapWidget">();
	}
	static class UCoreArchiveQuestMapWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveQuestMapWidget>();
	}
};
static_assert(alignof(UCoreArchiveQuestMapWidget) == 0x000008, "Wrong alignment on UCoreArchiveQuestMapWidget");
static_assert(sizeof(UCoreArchiveQuestMapWidget) == 0x0004A8, "Wrong size on UCoreArchiveQuestMapWidget");
static_assert(offsetof(UCoreArchiveQuestMapWidget, ChallengesContainer) == 0x000338, "Member 'UCoreArchiveQuestMapWidget::ChallengesContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, ArchiveQuestNodeWidgetClass) == 0x000340, "Member 'UCoreArchiveQuestMapWidget::ArchiveQuestNodeWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, ArchiveQuestPathWidgetClass) == 0x000348, "Member 'UCoreArchiveQuestMapWidget::ArchiveQuestPathWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, MaxDisplayedNodes) == 0x000350, "Member 'UCoreArchiveQuestMapWidget::MaxDisplayedNodes' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, MaxDisplayedPaths) == 0x000354, "Member 'UCoreArchiveQuestMapWidget::MaxDisplayedPaths' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, QuestMapRevealDuration) == 0x000358, "Member 'UCoreArchiveQuestMapWidget::QuestMapRevealDuration' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, NodeRevealDuration) == 0x00035C, "Member 'UCoreArchiveQuestMapWidget::NodeRevealDuration' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, PathRevealDuration) == 0x000360, "Member 'UCoreArchiveQuestMapWidget::PathRevealDuration' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, NodeRevealEasingType) == 0x000364, "Member 'UCoreArchiveQuestMapWidget::NodeRevealEasingType' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, PathRevealEasingType) == 0x000365, "Member 'UCoreArchiveQuestMapWidget::PathRevealEasingType' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, QuestMapGenerationSound) == 0x000368, "Member 'UCoreArchiveQuestMapWidget::QuestMapGenerationSound' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _nodeGraphDataList) == 0x000370, "Member 'UCoreArchiveQuestMapWidget::_nodeGraphDataList' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _pathDataList) == 0x000380, "Member 'UCoreArchiveQuestMapWidget::_pathDataList' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _questMapCreatedDelegate) == 0x000390, "Member 'UCoreArchiveQuestMapWidget::_questMapCreatedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _questNodeHoveredDelegate) == 0x0003A0, "Member 'UCoreArchiveQuestMapWidget::_questNodeHoveredDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _questNodeUnhoveredDelegate) == 0x0003B0, "Member 'UCoreArchiveQuestMapWidget::_questNodeUnhoveredDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _questNodeSelectedDelegate) == 0x0003C0, "Member 'UCoreArchiveQuestMapWidget::_questNodeSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _nodeDictionary) == 0x0003D0, "Member 'UCoreArchiveQuestMapWidget::_nodeDictionary' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _pathDictionary) == 0x000420, "Member 'UCoreArchiveQuestMapWidget::_pathDictionary' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _nodeWidgetPool) == 0x000470, "Member 'UCoreArchiveQuestMapWidget::_nodeWidgetPool' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestMapWidget, _pathWidgetPool) == 0x000480, "Member 'UCoreArchiveQuestMapWidget::_pathWidgetPool' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveQuestEditorWidget
// 0x0100 (0x05A8 - 0x04A8)
class UCoreArchiveQuestEditorWidget final : public UCoreArchiveQuestMapWidget
{
public:
	uint8                                         Pad_4A8[0x8];                                      // 0x04A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinePair>                      _gridLinesListVertical;                            // 0x04B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLinePair>                      _gridLinesListHorizontal;                          // 0x04C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UCoreArchiveQuestNodeWidget*            _activeNode;                                       // 0x04D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreArchiveQuestPathWidget*            _pathInCreation;                                   // 0x04D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const TArray<struct FArchiveNodeGraphViewData>& nodeList)> _questEditorSaveDelegate; // 0x04E0(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          _isCreatingPath;                                   // 0x04F0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F1[0x7];                                      // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBorder*                                EditorBorder;                                      // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCheckBox*                              MoveNodesRadioCheckbox;                            // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCheckBox*                              LinkNodesRadioCheckbox;                            // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCheckBox*                              GridVisibilityCheckbox;                            // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCheckBox*                              SnapGridCheckbox;                                  // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEditableTextBox*                       GridTileWidthInputPixelsTextBox;                   // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEditableTextBox*                       GridTileWidthInputPercentTextBox;                  // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEditableTextBox*                       GridTileHeightInputPixelsTextBox;                  // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEditableTextBox*                       GridTileHeightInputPercentTextBox;                 // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerButtonWidget*           RefreshGridButton;                                 // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               NodeCoordinateContainer;                           // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEditableTextBox*                       NodeXInputPixels;                                  // 0x0550(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEditableTextBox*                       NodeXInputPercent;                                 // 0x0558(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEditableTextBox*                       NodeYInputPixels;                                  // 0x0560(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEditableTextBox*                       NodeYInputPercent;                                 // 0x0568(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerButtonWidget*           SubmitButton;                                      // 0x0570(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerButtonWidget*           SaveQuestMapButton;                                // 0x0578(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           SaveInfoContainer;                                 // 0x0580(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PathTextBlock;                                     // 0x0588(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GridTileHeightValuePercent;                        // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GridTileWidthValuePercent;                         // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsSnapping;                                        // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsGridVisible;                                     // 0x0599(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEditorMode                                   Mode;                                              // 0x059A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_59B[0xD];                                      // 0x059B(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void IntermediatePathMove(const struct FVector2D& position);
	void NodeDragged(const struct FVector2D& position);
	void OnGridTileHeightPercentChanged(const class FText& text);
	void OnGridTileHeightPixelChanged(const class FText& text);
	void OnGridTileWidthPercentChanged(const class FText& text);
	void OnGridTileWidthPixelChanged(const class FText& text);
	void OnGridVisbilityChecked(bool checked);
	void OnLinkNodesModeChecked(bool checked);
	void OnMoveNodesModeChecked(bool checked);
	void OnNodeBeginDrag(const class FName& id);
	void OnNodeSubmitClick(class UCoreButtonWidget* buttonTarget);
	void OnNodeXPercentChanged(const class FText& text);
	void OnNodeXPixelChanged(const class FText& text);
	void OnNodeYPercentChanged(const class FText& text);
	void OnNodeYPixelChanged(const class FText& text);
	void OnPathClicked(class UCoreButtonWidget* buttonTarget);
	void OnRefreshGridClick(class UCoreButtonWidget* buttonTarget);
	void OnSaveGraphClick(class UCoreButtonWidget* buttonTarget);
	void OnSnapGridChecked(bool checked);
	void SetGridLinesArray(const TArray<struct FLinePair>& gridArrayVertical, const TArray<struct FLinePair>& gridArrayHorizontal);
	void SetHighlightedGridLines(int32 verticalIndex, int32 horizontalIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveQuestEditorWidget">();
	}
	static class UCoreArchiveQuestEditorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveQuestEditorWidget>();
	}
};
static_assert(alignof(UCoreArchiveQuestEditorWidget) == 0x000008, "Wrong alignment on UCoreArchiveQuestEditorWidget");
static_assert(sizeof(UCoreArchiveQuestEditorWidget) == 0x0005A8, "Wrong size on UCoreArchiveQuestEditorWidget");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, _gridLinesListVertical) == 0x0004B0, "Member 'UCoreArchiveQuestEditorWidget::_gridLinesListVertical' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, _gridLinesListHorizontal) == 0x0004C0, "Member 'UCoreArchiveQuestEditorWidget::_gridLinesListHorizontal' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, _activeNode) == 0x0004D0, "Member 'UCoreArchiveQuestEditorWidget::_activeNode' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, _pathInCreation) == 0x0004D8, "Member 'UCoreArchiveQuestEditorWidget::_pathInCreation' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, _questEditorSaveDelegate) == 0x0004E0, "Member 'UCoreArchiveQuestEditorWidget::_questEditorSaveDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, _isCreatingPath) == 0x0004F0, "Member 'UCoreArchiveQuestEditorWidget::_isCreatingPath' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, EditorBorder) == 0x0004F8, "Member 'UCoreArchiveQuestEditorWidget::EditorBorder' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, MoveNodesRadioCheckbox) == 0x000500, "Member 'UCoreArchiveQuestEditorWidget::MoveNodesRadioCheckbox' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, LinkNodesRadioCheckbox) == 0x000508, "Member 'UCoreArchiveQuestEditorWidget::LinkNodesRadioCheckbox' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, GridVisibilityCheckbox) == 0x000510, "Member 'UCoreArchiveQuestEditorWidget::GridVisibilityCheckbox' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, SnapGridCheckbox) == 0x000518, "Member 'UCoreArchiveQuestEditorWidget::SnapGridCheckbox' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, GridTileWidthInputPixelsTextBox) == 0x000520, "Member 'UCoreArchiveQuestEditorWidget::GridTileWidthInputPixelsTextBox' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, GridTileWidthInputPercentTextBox) == 0x000528, "Member 'UCoreArchiveQuestEditorWidget::GridTileWidthInputPercentTextBox' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, GridTileHeightInputPixelsTextBox) == 0x000530, "Member 'UCoreArchiveQuestEditorWidget::GridTileHeightInputPixelsTextBox' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, GridTileHeightInputPercentTextBox) == 0x000538, "Member 'UCoreArchiveQuestEditorWidget::GridTileHeightInputPercentTextBox' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, RefreshGridButton) == 0x000540, "Member 'UCoreArchiveQuestEditorWidget::RefreshGridButton' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, NodeCoordinateContainer) == 0x000548, "Member 'UCoreArchiveQuestEditorWidget::NodeCoordinateContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, NodeXInputPixels) == 0x000550, "Member 'UCoreArchiveQuestEditorWidget::NodeXInputPixels' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, NodeXInputPercent) == 0x000558, "Member 'UCoreArchiveQuestEditorWidget::NodeXInputPercent' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, NodeYInputPixels) == 0x000560, "Member 'UCoreArchiveQuestEditorWidget::NodeYInputPixels' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, NodeYInputPercent) == 0x000568, "Member 'UCoreArchiveQuestEditorWidget::NodeYInputPercent' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, SubmitButton) == 0x000570, "Member 'UCoreArchiveQuestEditorWidget::SubmitButton' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, SaveQuestMapButton) == 0x000578, "Member 'UCoreArchiveQuestEditorWidget::SaveQuestMapButton' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, SaveInfoContainer) == 0x000580, "Member 'UCoreArchiveQuestEditorWidget::SaveInfoContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, PathTextBlock) == 0x000588, "Member 'UCoreArchiveQuestEditorWidget::PathTextBlock' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, GridTileHeightValuePercent) == 0x000590, "Member 'UCoreArchiveQuestEditorWidget::GridTileHeightValuePercent' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, GridTileWidthValuePercent) == 0x000594, "Member 'UCoreArchiveQuestEditorWidget::GridTileWidthValuePercent' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, IsSnapping) == 0x000598, "Member 'UCoreArchiveQuestEditorWidget::IsSnapping' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, IsGridVisible) == 0x000599, "Member 'UCoreArchiveQuestEditorWidget::IsGridVisible' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestEditorWidget, Mode) == 0x00059A, "Member 'UCoreArchiveQuestEditorWidget::Mode' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveQuestNodeWidget
// 0x0150 (0x0558 - 0x0408)
class UCoreArchiveQuestNodeWidget final : public UCoreButtonWidget
{
public:
	uint8                                         Pad_408[0x10];                                     // 0x0408(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	ETooltipHorizontalAlignment                   HorizontalAlignment;                               // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     VerticalAlignment;                                 // 0x0419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41A[0x6];                                      // 0x041A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDImage*                              Icon;                                              // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               VignetteTextIndicatorOverlay;                      // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               VignetteImageIndicatorOverlay;                     // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ENodeStatusChange, class UAkAudioEvent*> StatusChangeAudioEvents;                           // 0x0438(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FArchiveNodeViewData                   _nodeData;                                         // 0x0488(0x00B8)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FName                                   _nodeId;                                           // 0x0540(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isChallengeReminderNode;                          // 0x054C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isDraggable;                                      // 0x054D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54E[0xA];                                      // 0x054E(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BroadcastDragBegin();
	void HandleStatusChange(const EStoryNodeState prevStatus, const EStoryNodeState currentStatus);
	void InitNode(const class FName& nodeId, const struct FArchiveNodeViewData& data, bool isChallengeReminderNode);
	void OnInit();
	void OnReset();
	void OnStatusChanged(ENodeStatusChange nodeStatusChange);
	void Reset();
	void SetRewardRarity(EItemRarity rarity);
	void ShowRewardNodeTooltip();
	void UpdateAllStoryIndicators();
	void UpdateNode(const struct FArchiveNodeViewData& data);
	void UpdateStoryIndicatorOpacity(bool isImageReward, bool isCompleted);

	bool IsSelectableNode() const;
	bool IsValidNode() const;
	bool NeedsChallengeReminderHoverAnimation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveQuestNodeWidget">();
	}
	static class UCoreArchiveQuestNodeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveQuestNodeWidget>();
	}
};
static_assert(alignof(UCoreArchiveQuestNodeWidget) == 0x000008, "Wrong alignment on UCoreArchiveQuestNodeWidget");
static_assert(sizeof(UCoreArchiveQuestNodeWidget) == 0x000558, "Wrong size on UCoreArchiveQuestNodeWidget");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, HorizontalAlignment) == 0x000418, "Member 'UCoreArchiveQuestNodeWidget::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, VerticalAlignment) == 0x000419, "Member 'UCoreArchiveQuestNodeWidget::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, Icon) == 0x000420, "Member 'UCoreArchiveQuestNodeWidget::Icon' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, VignetteTextIndicatorOverlay) == 0x000428, "Member 'UCoreArchiveQuestNodeWidget::VignetteTextIndicatorOverlay' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, VignetteImageIndicatorOverlay) == 0x000430, "Member 'UCoreArchiveQuestNodeWidget::VignetteImageIndicatorOverlay' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, StatusChangeAudioEvents) == 0x000438, "Member 'UCoreArchiveQuestNodeWidget::StatusChangeAudioEvents' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, _nodeData) == 0x000488, "Member 'UCoreArchiveQuestNodeWidget::_nodeData' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, _nodeId) == 0x000540, "Member 'UCoreArchiveQuestNodeWidget::_nodeId' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, _isChallengeReminderNode) == 0x00054C, "Member 'UCoreArchiveQuestNodeWidget::_isChallengeReminderNode' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestNodeWidget, _isDraggable) == 0x00054D, "Member 'UCoreArchiveQuestNodeWidget::_isDraggable' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveQuestPathWidget
// 0x0048 (0x0450 - 0x0408)
class UCoreArchiveQuestPathWidget final : public UCoreButtonWidget
{
public:
	class UOverlay*                               PathOverlay;                                       // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              PathImage;                                         // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EArchivePathStatus                            _status;                                           // 0x0418(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_419[0x3];                                      // 0x0419(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArchiveMapPathViewData                _data;                                             // 0x041C(0x002C)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_448[0x8];                                      // 0x0448(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitPath(const struct FArchiveMapPathViewData& data);
	void Reset();
	void SetVisualState(const EArchivePathStatus& pathStatus);
	void UpdatePath(const struct FArchiveMapPathViewData& data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveQuestPathWidget">();
	}
	static class UCoreArchiveQuestPathWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveQuestPathWidget>();
	}
};
static_assert(alignof(UCoreArchiveQuestPathWidget) == 0x000008, "Wrong alignment on UCoreArchiveQuestPathWidget");
static_assert(sizeof(UCoreArchiveQuestPathWidget) == 0x000450, "Wrong size on UCoreArchiveQuestPathWidget");
static_assert(offsetof(UCoreArchiveQuestPathWidget, PathOverlay) == 0x000408, "Member 'UCoreArchiveQuestPathWidget::PathOverlay' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestPathWidget, PathImage) == 0x000410, "Member 'UCoreArchiveQuestPathWidget::PathImage' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestPathWidget, _status) == 0x000418, "Member 'UCoreArchiveQuestPathWidget::_status' has a wrong offset!");
static_assert(offsetof(UCoreArchiveQuestPathWidget, _data) == 0x00041C, "Member 'UCoreArchiveQuestPathWidget::_data' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveRiftTierItem
// 0x0060 (0x02F8 - 0x0298)
class UCoreArchiveRiftTierItem final : public UUserWidget
{
public:
	TMulticastInlineDelegate<void(int32 tier, class UCoreButtonWidget* selectedReward, bool isPremium, int32 index)> _itemClickedDelegate; // 0x0298(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _unlockAnimationCompleteDelegate;                  // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UGridPanel*                             FreeRewardsContainer;                              // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             PremiumRewardsContainer;                           // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreRewardWrapperWidget*>       _freeRewardWidgets;                                // 0x02C8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UCoreRewardWrapperWidget*>       _premiumRewardWidgets;                             // 0x02D8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          _unlockAnimationCompleteSound;                     // 0x02E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F0[0x8];                                      // 0x02F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Clear();
	void OnRewardClicked(class UCoreButtonWidget* button);
	void PlayUnlockanimation(bool isPremiumUnlocked, float delay);
	void SetGenericData(const struct FArchiveRiftTierRewardsViewData& data);
	void SetLockedState(const bool isLocked, const bool hasPremium);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveRiftTierItem">();
	}
	static class UCoreArchiveRiftTierItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveRiftTierItem>();
	}
};
static_assert(alignof(UCoreArchiveRiftTierItem) == 0x000008, "Wrong alignment on UCoreArchiveRiftTierItem");
static_assert(sizeof(UCoreArchiveRiftTierItem) == 0x0002F8, "Wrong size on UCoreArchiveRiftTierItem");
static_assert(offsetof(UCoreArchiveRiftTierItem, _itemClickedDelegate) == 0x000298, "Member 'UCoreArchiveRiftTierItem::_itemClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftTierItem, _unlockAnimationCompleteDelegate) == 0x0002A8, "Member 'UCoreArchiveRiftTierItem::_unlockAnimationCompleteDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftTierItem, FreeRewardsContainer) == 0x0002B8, "Member 'UCoreArchiveRiftTierItem::FreeRewardsContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftTierItem, PremiumRewardsContainer) == 0x0002C0, "Member 'UCoreArchiveRiftTierItem::PremiumRewardsContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftTierItem, _freeRewardWidgets) == 0x0002C8, "Member 'UCoreArchiveRiftTierItem::_freeRewardWidgets' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftTierItem, _premiumRewardWidgets) == 0x0002D8, "Member 'UCoreArchiveRiftTierItem::_premiumRewardWidgets' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftTierItem, _unlockAnimationCompleteSound) == 0x0002E8, "Member 'UCoreArchiveRiftTierItem::_unlockAnimationCompleteSound' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveRiftWidget
// 0x02B8 (0x05E8 - 0x0330)
class UCoreArchiveRiftWidget final : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ETooltipHorizontalAlignment                   HorizontalAlignment;                               // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     VerticalAlignment;                                 // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class FName itemId)> _rewardItemClickedDelegate;                   // 0x0340(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(ECurrencyType currencyId)> _rewardCurrencyClickedDelegate;         // 0x0350(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _purchasePremiumPassClickedDelegate;               // 0x0360(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _purchaseTierClickedDelegate;                      // 0x0370(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _outfitClickedDelegate;                            // 0x0380(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _bonusTierShownDelegate;                           // 0x0390(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	struct FArchivesRiftGenericViewData           _genericData;                                      // 0x03A0(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FArchiveRiftTierRewardsViewData> _riftTiersData;                                   // 0x03C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         _currentPage;                                      // 0x03D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _maxTierItemsPerPage;                              // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _animationItemDelay;                               // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _animationPremiumTrackDelay;                       // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _pageSwitchFadeDuration;                           // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   _pageSwitchFadeTweenEasing;                        // 0x03E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E5[0x3];                                      // 0x03E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreArchiveRiftTierItem>   _archiveRiftTierItemClass;                         // 0x03E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _freePurchaseButtonText;                           // 0x03F0(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class FText                                   _freePurchaseDescriptionText;                      // 0x0408(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class FText                                   _premiumPurchaseButtonText;                        // 0x0420(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class FText                                   _premiumPurchaseDescriptionText;                   // 0x0438(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class FText                                   _maxTierText;                                      // 0x0450(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class FText                                   _currentProgressInfoText;                          // 0x0468(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	struct FCurrencyProgressionTooltipViewData    _riftFragmentTooltipViewData;                      // 0x0480(0x00C0)(BlueprintVisible, Transient, Protected, NativeAccessSpecifierProtected)
	class UCoreToggleButtonWidget*                OutfitButton;                                      // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               PurchaseButton;                                    // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         RewardGrid;                                        // 0x0550(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      TierInfoDescriptionRTB;                            // 0x0558(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TierInfoTopTB;                                     // 0x0560(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TierInfoBottomTB;                                  // 0x0568(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          FreeTrackLabelTB;                                  // 0x0570(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PremiumTrackLabelTB;                               // 0x0578(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PaginationTB;                                      // 0x0580(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               PaginationPreviousButton;                          // 0x0588(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               PaginationNextButton;                              // 0x0590(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreArchiveRiftTierItem*>       _tierItemPool;                                     // 0x0598(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UUITweenInstance*                       _contentVisbilityTween;                            // 0x05A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUITweenInstance*                       _pageSwitchVisbilityTween;                         // 0x05B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreSelectableButtonWidget*            _currentSelectedReward;                            // 0x05B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C0[0x28];                                     // 0x05C0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayPage(class UUITweenInstance* tween);
	void OnCurrentPageAnimationCompleted();
	void OnNextButtonClicked();
	void OnOutfitButtonClicked(class UCoreButtonWidget* button);
	void OnOutfitButtonHovered(class UCoreButtonWidget* button);
	void OnOutfitButtonUnhovered(class UCoreButtonWidget* button);
	void OnPreviousButtonClicked();
	void OnRewardAnimationCompleted();
	void OnRewardItemClicked(int32 tier, class UCoreButtonWidget* button, bool isPremium, int32 index);
	void PlayPremiumTrackUnlockAnimation();
	void SetPaginationVisuals(const bool showBonusTierHighlight, const class FText& bonusTierTooltipText);
	void SetTierVisuals(ETierType tierType);
	void SetVisualData(const struct FArchivesRiftGenericViewData& data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveRiftWidget">();
	}
	static class UCoreArchiveRiftWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveRiftWidget>();
	}
};
static_assert(alignof(UCoreArchiveRiftWidget) == 0x000008, "Wrong alignment on UCoreArchiveRiftWidget");
static_assert(sizeof(UCoreArchiveRiftWidget) == 0x0005E8, "Wrong size on UCoreArchiveRiftWidget");
static_assert(offsetof(UCoreArchiveRiftWidget, HorizontalAlignment) == 0x000338, "Member 'UCoreArchiveRiftWidget::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, VerticalAlignment) == 0x000339, "Member 'UCoreArchiveRiftWidget::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _rewardItemClickedDelegate) == 0x000340, "Member 'UCoreArchiveRiftWidget::_rewardItemClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _rewardCurrencyClickedDelegate) == 0x000350, "Member 'UCoreArchiveRiftWidget::_rewardCurrencyClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _purchasePremiumPassClickedDelegate) == 0x000360, "Member 'UCoreArchiveRiftWidget::_purchasePremiumPassClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _purchaseTierClickedDelegate) == 0x000370, "Member 'UCoreArchiveRiftWidget::_purchaseTierClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _outfitClickedDelegate) == 0x000380, "Member 'UCoreArchiveRiftWidget::_outfitClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _bonusTierShownDelegate) == 0x000390, "Member 'UCoreArchiveRiftWidget::_bonusTierShownDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _genericData) == 0x0003A0, "Member 'UCoreArchiveRiftWidget::_genericData' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _riftTiersData) == 0x0003C0, "Member 'UCoreArchiveRiftWidget::_riftTiersData' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _currentPage) == 0x0003D0, "Member 'UCoreArchiveRiftWidget::_currentPage' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _maxTierItemsPerPage) == 0x0003D4, "Member 'UCoreArchiveRiftWidget::_maxTierItemsPerPage' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _animationItemDelay) == 0x0003D8, "Member 'UCoreArchiveRiftWidget::_animationItemDelay' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _animationPremiumTrackDelay) == 0x0003DC, "Member 'UCoreArchiveRiftWidget::_animationPremiumTrackDelay' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _pageSwitchFadeDuration) == 0x0003E0, "Member 'UCoreArchiveRiftWidget::_pageSwitchFadeDuration' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _pageSwitchFadeTweenEasing) == 0x0003E4, "Member 'UCoreArchiveRiftWidget::_pageSwitchFadeTweenEasing' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _archiveRiftTierItemClass) == 0x0003E8, "Member 'UCoreArchiveRiftWidget::_archiveRiftTierItemClass' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _freePurchaseButtonText) == 0x0003F0, "Member 'UCoreArchiveRiftWidget::_freePurchaseButtonText' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _freePurchaseDescriptionText) == 0x000408, "Member 'UCoreArchiveRiftWidget::_freePurchaseDescriptionText' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _premiumPurchaseButtonText) == 0x000420, "Member 'UCoreArchiveRiftWidget::_premiumPurchaseButtonText' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _premiumPurchaseDescriptionText) == 0x000438, "Member 'UCoreArchiveRiftWidget::_premiumPurchaseDescriptionText' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _maxTierText) == 0x000450, "Member 'UCoreArchiveRiftWidget::_maxTierText' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _currentProgressInfoText) == 0x000468, "Member 'UCoreArchiveRiftWidget::_currentProgressInfoText' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _riftFragmentTooltipViewData) == 0x000480, "Member 'UCoreArchiveRiftWidget::_riftFragmentTooltipViewData' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, OutfitButton) == 0x000540, "Member 'UCoreArchiveRiftWidget::OutfitButton' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, PurchaseButton) == 0x000548, "Member 'UCoreArchiveRiftWidget::PurchaseButton' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, RewardGrid) == 0x000550, "Member 'UCoreArchiveRiftWidget::RewardGrid' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, TierInfoDescriptionRTB) == 0x000558, "Member 'UCoreArchiveRiftWidget::TierInfoDescriptionRTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, TierInfoTopTB) == 0x000560, "Member 'UCoreArchiveRiftWidget::TierInfoTopTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, TierInfoBottomTB) == 0x000568, "Member 'UCoreArchiveRiftWidget::TierInfoBottomTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, FreeTrackLabelTB) == 0x000570, "Member 'UCoreArchiveRiftWidget::FreeTrackLabelTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, PremiumTrackLabelTB) == 0x000578, "Member 'UCoreArchiveRiftWidget::PremiumTrackLabelTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, PaginationTB) == 0x000580, "Member 'UCoreArchiveRiftWidget::PaginationTB' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, PaginationPreviousButton) == 0x000588, "Member 'UCoreArchiveRiftWidget::PaginationPreviousButton' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, PaginationNextButton) == 0x000590, "Member 'UCoreArchiveRiftWidget::PaginationNextButton' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _tierItemPool) == 0x000598, "Member 'UCoreArchiveRiftWidget::_tierItemPool' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _contentVisbilityTween) == 0x0005A8, "Member 'UCoreArchiveRiftWidget::_contentVisbilityTween' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _pageSwitchVisbilityTween) == 0x0005B0, "Member 'UCoreArchiveRiftWidget::_pageSwitchVisbilityTween' has a wrong offset!");
static_assert(offsetof(UCoreArchiveRiftWidget, _currentSelectedReward) == 0x0005B8, "Member 'UCoreArchiveRiftWidget::_currentSelectedReward' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveSlotSelectorWidget
// 0x0048 (0x0358 - 0x0310)
class UCoreArchiveSlotSelectorWidget final : public UCoreBaseUserWidget
{
public:
	class UArchiveNodeTooltipWidget*              NodeTooltip;                                       // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      SurvivorSlotPromptWidget;                          // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      BothSlotPromptWidget;                              // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      KillerSlotPromptWidget;                            // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               CancelPromptWidget;                                // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_338[0x20];                                     // 0x0338(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBothSelection();
	void OnCancelSelection();
	void OnKillerSelection();
	void OnSurvivorSelection();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveSlotSelectorWidget">();
	}
	static class UCoreArchiveSlotSelectorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveSlotSelectorWidget>();
	}
};
static_assert(alignof(UCoreArchiveSlotSelectorWidget) == 0x000008, "Wrong alignment on UCoreArchiveSlotSelectorWidget");
static_assert(sizeof(UCoreArchiveSlotSelectorWidget) == 0x000358, "Wrong size on UCoreArchiveSlotSelectorWidget");
static_assert(offsetof(UCoreArchiveSlotSelectorWidget, NodeTooltip) == 0x000310, "Member 'UCoreArchiveSlotSelectorWidget::NodeTooltip' has a wrong offset!");
static_assert(offsetof(UCoreArchiveSlotSelectorWidget, SurvivorSlotPromptWidget) == 0x000318, "Member 'UCoreArchiveSlotSelectorWidget::SurvivorSlotPromptWidget' has a wrong offset!");
static_assert(offsetof(UCoreArchiveSlotSelectorWidget, BothSlotPromptWidget) == 0x000320, "Member 'UCoreArchiveSlotSelectorWidget::BothSlotPromptWidget' has a wrong offset!");
static_assert(offsetof(UCoreArchiveSlotSelectorWidget, KillerSlotPromptWidget) == 0x000328, "Member 'UCoreArchiveSlotSelectorWidget::KillerSlotPromptWidget' has a wrong offset!");
static_assert(offsetof(UCoreArchiveSlotSelectorWidget, CancelPromptWidget) == 0x000330, "Member 'UCoreArchiveSlotSelectorWidget::CancelPromptWidget' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget
// 0x0150 (0x04B8 - 0x0368)
class UCoreArchiveTierPurchasePopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               LessInputSwitcher;                                 // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               MoreInputSwitcher;                                 // 0x0378(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      CurrentQuantityText;                               // 0x0380(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ImageContainer;                                    // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               PriceContainer;                                    // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PriceText;                                         // 0x0398(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          DiscountText;                                      // 0x03A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              CurrencyIcon;                                      // 0x03A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _quantityCurve;                                    // 0x03B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _bonusTierStyleName;                               // 0x03B8(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<ECurrencyType, TSoftObjectPtr<class UTexture2D>> _currencyIconTextures;                     // 0x03D0(0x0050)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<ECurrencyType, struct FSlateColor>       _currencyTextColors;                               // 0x0420(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSlateColor                            _unaffordablePriceColor;                           // 0x0470(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 tiersToPurchaseNumber)> _confirmPurchaseDelegate;            // 0x0498(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A8[0x10];                                     // 0x04A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnConfirmPurchase();
	void OnLessInputTriggered();
	void OnMoreInputTriggered();
	void SetVisualData(const class UArchiveTierPurchasePopupViewData* viewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveTierPurchasePopupWidget">();
	}
	static class UCoreArchiveTierPurchasePopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveTierPurchasePopupWidget>();
	}
};
static_assert(alignof(UCoreArchiveTierPurchasePopupWidget) == 0x000008, "Wrong alignment on UCoreArchiveTierPurchasePopupWidget");
static_assert(sizeof(UCoreArchiveTierPurchasePopupWidget) == 0x0004B8, "Wrong size on UCoreArchiveTierPurchasePopupWidget");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, LessInputSwitcher) == 0x000370, "Member 'UCoreArchiveTierPurchasePopupWidget::LessInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, MoreInputSwitcher) == 0x000378, "Member 'UCoreArchiveTierPurchasePopupWidget::MoreInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, CurrentQuantityText) == 0x000380, "Member 'UCoreArchiveTierPurchasePopupWidget::CurrentQuantityText' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, ImageContainer) == 0x000388, "Member 'UCoreArchiveTierPurchasePopupWidget::ImageContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, PriceContainer) == 0x000390, "Member 'UCoreArchiveTierPurchasePopupWidget::PriceContainer' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, PriceText) == 0x000398, "Member 'UCoreArchiveTierPurchasePopupWidget::PriceText' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, DiscountText) == 0x0003A0, "Member 'UCoreArchiveTierPurchasePopupWidget::DiscountText' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, CurrencyIcon) == 0x0003A8, "Member 'UCoreArchiveTierPurchasePopupWidget::CurrencyIcon' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, _quantityCurve) == 0x0003B0, "Member 'UCoreArchiveTierPurchasePopupWidget::_quantityCurve' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, _bonusTierStyleName) == 0x0003B8, "Member 'UCoreArchiveTierPurchasePopupWidget::_bonusTierStyleName' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, _currencyIconTextures) == 0x0003D0, "Member 'UCoreArchiveTierPurchasePopupWidget::_currencyIconTextures' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, _currencyTextColors) == 0x000420, "Member 'UCoreArchiveTierPurchasePopupWidget::_currencyTextColors' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, _unaffordablePriceColor) == 0x000470, "Member 'UCoreArchiveTierPurchasePopupWidget::_unaffordablePriceColor' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTierPurchasePopupWidget, _confirmPurchaseDelegate) == 0x000498, "Member 'UCoreArchiveTierPurchasePopupWidget::_confirmPurchaseDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveTomeWidget
// 0x0048 (0x0378 - 0x0330)
class UCoreArchiveTomeWidget final : public UCoreTabContentWidget
{
public:
	uint8                                         Pad_330[0x8];                                      // 0x0330(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreArchiveQuestEditorWidget> _archiveQuestEditorWidgetClass;                 // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreArchiveQuestEditorWidget*          _archiveQuestEditorWidget;                         // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreTabContainerWidget*                ArchiveTomeSideNav;                                // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        EditorSwitcher;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const EArchiveTomeMenuState menuState)> MenuTabSelectedDelegate;   // 0x0358(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _editorSwitchCompleteDelegate;                     // 0x0368(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveTomeWidget">();
	}
	static class UCoreArchiveTomeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveTomeWidget>();
	}
};
static_assert(alignof(UCoreArchiveTomeWidget) == 0x000008, "Wrong alignment on UCoreArchiveTomeWidget");
static_assert(sizeof(UCoreArchiveTomeWidget) == 0x000378, "Wrong size on UCoreArchiveTomeWidget");
static_assert(offsetof(UCoreArchiveTomeWidget, _archiveQuestEditorWidgetClass) == 0x000338, "Member 'UCoreArchiveTomeWidget::_archiveQuestEditorWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTomeWidget, _archiveQuestEditorWidget) == 0x000340, "Member 'UCoreArchiveTomeWidget::_archiveQuestEditorWidget' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTomeWidget, ArchiveTomeSideNav) == 0x000348, "Member 'UCoreArchiveTomeWidget::ArchiveTomeSideNav' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTomeWidget, EditorSwitcher) == 0x000350, "Member 'UCoreArchiveTomeWidget::EditorSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTomeWidget, MenuTabSelectedDelegate) == 0x000358, "Member 'UCoreArchiveTomeWidget::MenuTabSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreArchiveTomeWidget, _editorSwitchCompleteDelegate) == 0x000368, "Member 'UCoreArchiveTomeWidget::_editorSwitchCompleteDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreButtonSelector
// 0x0050 (0x0360 - 0x0310)
class UCoreButtonSelector : public UCoreBaseUserWidget
{
public:
	TMulticastInlineDelegate<void(class UCoreSelectableButtonWidget* selectedButton)> OnSelectedDelegate; // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreSelectableButtonWidget* selectedButton)> OnSelectedAgainDelegate; // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UCoreSelectableButtonWidget* unselectedButton)> OnUnselectedDelegate; // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UCoreSelectableButtonWidget*>    _buttons;                                          // 0x0340(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnButtonSelectedAgain(class UCoreSelectableButtonWidget* selectedButton);
	void OnButtonSelectedChanged(class UCoreSelectableButtonWidget* selectedButton, bool isSelected);
	bool Select(class UCoreSelectableButtonWidget* buttonToSelect, bool performAction);
	bool SelectNext();
	bool SelectPrevious();
	void SetAllEnabled(bool enabled);
	void SetInputsEnabled(bool enabled);
	void UnselectCurrent();

	bool HasSelection() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreButtonSelector">();
	}
	static class UCoreButtonSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreButtonSelector>();
	}
};
static_assert(alignof(UCoreButtonSelector) == 0x000008, "Wrong alignment on UCoreButtonSelector");
static_assert(sizeof(UCoreButtonSelector) == 0x000360, "Wrong size on UCoreButtonSelector");
static_assert(offsetof(UCoreButtonSelector, OnSelectedDelegate) == 0x000310, "Member 'UCoreButtonSelector::OnSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonSelector, OnSelectedAgainDelegate) == 0x000320, "Member 'UCoreButtonSelector::OnSelectedAgainDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonSelector, OnUnselectedDelegate) == 0x000330, "Member 'UCoreButtonSelector::OnUnselectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreButtonSelector, _buttons) == 0x000340, "Member 'UCoreButtonSelector::_buttons' has a wrong offset!");

// Class DBDUIViewsCore.CoreTabContainerWidget
// 0x0030 (0x0390 - 0x0360)
class UCoreTabContainerWidget : public UCoreButtonSelector
{
public:
	bool                                          AlignHorizontally;                                 // 0x0360(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                TabPadding;                                        // 0x0364(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreTabWidget>             CoreTabClass;                                      // 0x0378(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             TabContainer;                                      // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseControllerTabSwitching;                         // 0x0388(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanLoop;                                           // 0x0389(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FillContainerSpace;                                // 0x038A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SendAnalyticsData;                                 // 0x038B(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Init(const TArray<struct FTabWidgetData>& tabsData);
	void LayOutTabs();
	void OnTabSelected(class UCoreSelectableButtonWidget* selectedButton);
	void RemoveTabs();
	void SetNotificationVisibility(int32 key, bool hasNotification);
	void SetTabEnabled(int32 key, bool enabled);
	void SetTabVisible(int32 key, bool visible);
	void SetUseControllerTabSwitching(bool enabled);
	void UpdateBackgroundSkin(int32 key, class UMaterialInterface* skinMaterial);

	class UCoreTabWidget* GetTab(int32 key) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTabContainerWidget">();
	}
	static class UCoreTabContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTabContainerWidget>();
	}
};
static_assert(alignof(UCoreTabContainerWidget) == 0x000008, "Wrong alignment on UCoreTabContainerWidget");
static_assert(sizeof(UCoreTabContainerWidget) == 0x000390, "Wrong size on UCoreTabContainerWidget");
static_assert(offsetof(UCoreTabContainerWidget, AlignHorizontally) == 0x000360, "Member 'UCoreTabContainerWidget::AlignHorizontally' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, TabPadding) == 0x000364, "Member 'UCoreTabContainerWidget::TabPadding' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, CoreTabClass) == 0x000378, "Member 'UCoreTabContainerWidget::CoreTabClass' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, TabContainer) == 0x000380, "Member 'UCoreTabContainerWidget::TabContainer' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, UseControllerTabSwitching) == 0x000388, "Member 'UCoreTabContainerWidget::UseControllerTabSwitching' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, CanLoop) == 0x000389, "Member 'UCoreTabContainerWidget::CanLoop' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, FillContainerSpace) == 0x00038A, "Member 'UCoreTabContainerWidget::FillContainerSpace' has a wrong offset!");
static_assert(offsetof(UCoreTabContainerWidget, SendAnalyticsData) == 0x00038B, "Member 'UCoreTabContainerWidget::SendAnalyticsData' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveVignetteButtonContainerWidget
// 0x0000 (0x0390 - 0x0390)
class UCoreArchiveVignetteButtonContainerWidget final : public UCoreTabContainerWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveVignetteButtonContainerWidget">();
	}
	static class UCoreArchiveVignetteButtonContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveVignetteButtonContainerWidget>();
	}
};
static_assert(alignof(UCoreArchiveVignetteButtonContainerWidget) == 0x000008, "Wrong alignment on UCoreArchiveVignetteButtonContainerWidget");
static_assert(sizeof(UCoreArchiveVignetteButtonContainerWidget) == 0x000390, "Wrong size on UCoreArchiveVignetteButtonContainerWidget");

// Class DBDUIViewsCore.CoreTabWidget
// 0x0038 (0x0478 - 0x0440)
class UCoreTabWidget : public UCoreSelectableButtonWidget
{
public:
	class UDBDTextBlock*                          TabTextField;                                      // 0x0440(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              TabImage;                                          // 0x0448(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                NotificationWidget;                                // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   LabelTooltipText;                                  // 0x0458(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_470[0x8];                                      // 0x0470(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool HasLabelTooltip();
	void PostInit();
	void SetIconSoftTexture(TSoftObjectPtr<class UTexture2D> iconTexture, const struct FVector2D& forcedIconSize);
	void SetIconTexture(class UTexture2D* iconTexture, const struct FVector2D& forcedIconSize);
	void SetNotificationVisibility(bool hasNotification);

	int32 GetKey() const;
	class FText GetTabText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTabWidget">();
	}
	static class UCoreTabWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTabWidget>();
	}
};
static_assert(alignof(UCoreTabWidget) == 0x000008, "Wrong alignment on UCoreTabWidget");
static_assert(sizeof(UCoreTabWidget) == 0x000478, "Wrong size on UCoreTabWidget");
static_assert(offsetof(UCoreTabWidget, TabTextField) == 0x000440, "Member 'UCoreTabWidget::TabTextField' has a wrong offset!");
static_assert(offsetof(UCoreTabWidget, TabImage) == 0x000448, "Member 'UCoreTabWidget::TabImage' has a wrong offset!");
static_assert(offsetof(UCoreTabWidget, NotificationWidget) == 0x000450, "Member 'UCoreTabWidget::NotificationWidget' has a wrong offset!");
static_assert(offsetof(UCoreTabWidget, LabelTooltipText) == 0x000458, "Member 'UCoreTabWidget::LabelTooltipText' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveVignetteButtonWidget
// 0x0078 (0x04F0 - 0x0478)
class UCoreArchiveVignetteButtonWidget final : public UCoreTabWidget
{
public:
	uint8                                         Pad_478[0x70];                                     // 0x0478(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _subtitleMaxLength;                                // 0x04E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetData(const struct FArchivesVignetteViewData& vignetteDataList);
	void SetVignetteRead(const bool isRead);
	void SetVisualData(const class FText& vignetteTitle, const class FText& vignetteSubtitle, const class FText& vignetteProgressText, const bool displayProgress, const float vignetteProgress, const bool isUnread, const class FText& unreadIndicatorText, const bool showCinematics, const bool lockCinematics);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveVignetteButtonWidget">();
	}
	static class UCoreArchiveVignetteButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveVignetteButtonWidget>();
	}
};
static_assert(alignof(UCoreArchiveVignetteButtonWidget) == 0x000008, "Wrong alignment on UCoreArchiveVignetteButtonWidget");
static_assert(sizeof(UCoreArchiveVignetteButtonWidget) == 0x0004F0, "Wrong size on UCoreArchiveVignetteButtonWidget");
static_assert(offsetof(UCoreArchiveVignetteButtonWidget, _subtitleMaxLength) == 0x0004E8, "Member 'UCoreArchiveVignetteButtonWidget::_subtitleMaxLength' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveVignetteCinematicButton
// 0x0008 (0x0480 - 0x0478)
class UCoreArchiveVignetteCinematicButton final : public UCoreTabWidget
{
public:
	bool                                          IsForceDisabled;                                   // 0x0478(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIsForceDisabled(bool isForceDisabled);
	void UnlockCinematic();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveVignetteCinematicButton">();
	}
	static class UCoreArchiveVignetteCinematicButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveVignetteCinematicButton>();
	}
};
static_assert(alignof(UCoreArchiveVignetteCinematicButton) == 0x000008, "Wrong alignment on UCoreArchiveVignetteCinematicButton");
static_assert(sizeof(UCoreArchiveVignetteCinematicButton) == 0x000480, "Wrong size on UCoreArchiveVignetteCinematicButton");
static_assert(offsetof(UCoreArchiveVignetteCinematicButton, IsForceDisabled) == 0x000478, "Member 'UCoreArchiveVignetteCinematicButton::IsForceDisabled' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveVignetteCinematicContainerWidget
// 0x0000 (0x0390 - 0x0390)
class UCoreArchiveVignetteCinematicContainerWidget final : public UCoreTabContainerWidget
{
public:
	void UnlockCinematics();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveVignetteCinematicContainerWidget">();
	}
	static class UCoreArchiveVignetteCinematicContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveVignetteCinematicContainerWidget>();
	}
};
static_assert(alignof(UCoreArchiveVignetteCinematicContainerWidget) == 0x000008, "Wrong alignment on UCoreArchiveVignetteCinematicContainerWidget");
static_assert(sizeof(UCoreArchiveVignetteCinematicContainerWidget) == 0x000390, "Wrong size on UCoreArchiveVignetteCinematicContainerWidget");

// Class DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget
// 0x0028 (0x04A0 - 0x0478)
class UCoreArchiveVignetteEntryButtonWidget final : public UCoreTabWidget
{
public:
	class UTexture2D*                             TextIconLocked;                                    // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             TextIconUnlocked;                                  // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             ImageIconLocked;                                   // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             ImageIconUnlocked;                                 // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_498[0x8];                                      // 0x0498(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetData(const int32 entryNumber, const bool isRead, const bool isImage);
	void SetVisualData(const int32 entryNumber, const bool isRead, const class FText& unreadIndicatorText, const bool isImage);
	void UnlockEntry();

	const int32 GetEntryNumber() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveVignetteEntryButtonWidget">();
	}
	static class UCoreArchiveVignetteEntryButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveVignetteEntryButtonWidget>();
	}
};
static_assert(alignof(UCoreArchiveVignetteEntryButtonWidget) == 0x000008, "Wrong alignment on UCoreArchiveVignetteEntryButtonWidget");
static_assert(sizeof(UCoreArchiveVignetteEntryButtonWidget) == 0x0004A0, "Wrong size on UCoreArchiveVignetteEntryButtonWidget");
static_assert(offsetof(UCoreArchiveVignetteEntryButtonWidget, TextIconLocked) == 0x000478, "Member 'UCoreArchiveVignetteEntryButtonWidget::TextIconLocked' has a wrong offset!");
static_assert(offsetof(UCoreArchiveVignetteEntryButtonWidget, TextIconUnlocked) == 0x000480, "Member 'UCoreArchiveVignetteEntryButtonWidget::TextIconUnlocked' has a wrong offset!");
static_assert(offsetof(UCoreArchiveVignetteEntryButtonWidget, ImageIconLocked) == 0x000488, "Member 'UCoreArchiveVignetteEntryButtonWidget::ImageIconLocked' has a wrong offset!");
static_assert(offsetof(UCoreArchiveVignetteEntryButtonWidget, ImageIconUnlocked) == 0x000490, "Member 'UCoreArchiveVignetteEntryButtonWidget::ImageIconUnlocked' has a wrong offset!");

// Class DBDUIViewsCore.CoreArchiveVignetteEntryContainerWidget
// 0x0040 (0x03D0 - 0x0390)
class UCoreArchiveVignetteEntryContainerWidget final : public UCoreTabContainerWidget
{
public:
	uint8                                         Pad_390[0x20];                                     // 0x0390(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UProgressBar*                           JournalProgressBar;                                // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   AnimationEasing;                                   // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B9[0x3];                                      // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProgressAnimationDuration;                         // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C0[0x10];                                     // 0x03C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnUnlockComplete(class UUITweenInstance* tween);
	void OnUnlockProgress(class UUITweenInstance* tween);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreArchiveVignetteEntryContainerWidget">();
	}
	static class UCoreArchiveVignetteEntryContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreArchiveVignetteEntryContainerWidget>();
	}
};
static_assert(alignof(UCoreArchiveVignetteEntryContainerWidget) == 0x000008, "Wrong alignment on UCoreArchiveVignetteEntryContainerWidget");
static_assert(sizeof(UCoreArchiveVignetteEntryContainerWidget) == 0x0003D0, "Wrong size on UCoreArchiveVignetteEntryContainerWidget");
static_assert(offsetof(UCoreArchiveVignetteEntryContainerWidget, JournalProgressBar) == 0x0003B0, "Member 'UCoreArchiveVignetteEntryContainerWidget::JournalProgressBar' has a wrong offset!");
static_assert(offsetof(UCoreArchiveVignetteEntryContainerWidget, AnimationEasing) == 0x0003B8, "Member 'UCoreArchiveVignetteEntryContainerWidget::AnimationEasing' has a wrong offset!");
static_assert(offsetof(UCoreArchiveVignetteEntryContainerWidget, ProgressAnimationDuration) == 0x0003BC, "Member 'UCoreArchiveVignetteEntryContainerWidget::ProgressAnimationDuration' has a wrong offset!");

// Class DBDUIViewsCore.CoreBaseHudWidget
// 0x0018 (0x0328 - 0x0310)
class UCoreBaseHudWidget : public UCoreBaseUserWidget
{
public:
	float                                         FocusAnimationDuration;                            // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FocusAnimationDelay;                               // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   FocusAnimationEasing;                              // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FocusAnimationMaxOpacity;                          // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FocusAnimationMinOpacity;                          // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayFocusAnimation();

	bool ShouldPlayFocusAnimation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreBaseHudWidget">();
	}
	static class UCoreBaseHudWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreBaseHudWidget>();
	}
};
static_assert(alignof(UCoreBaseHudWidget) == 0x000008, "Wrong alignment on UCoreBaseHudWidget");
static_assert(sizeof(UCoreBaseHudWidget) == 0x000328, "Wrong size on UCoreBaseHudWidget");
static_assert(offsetof(UCoreBaseHudWidget, FocusAnimationDuration) == 0x000310, "Member 'UCoreBaseHudWidget::FocusAnimationDuration' has a wrong offset!");
static_assert(offsetof(UCoreBaseHudWidget, FocusAnimationDelay) == 0x000314, "Member 'UCoreBaseHudWidget::FocusAnimationDelay' has a wrong offset!");
static_assert(offsetof(UCoreBaseHudWidget, FocusAnimationEasing) == 0x000318, "Member 'UCoreBaseHudWidget::FocusAnimationEasing' has a wrong offset!");
static_assert(offsetof(UCoreBaseHudWidget, FocusAnimationMaxOpacity) == 0x00031C, "Member 'UCoreBaseHudWidget::FocusAnimationMaxOpacity' has a wrong offset!");
static_assert(offsetof(UCoreBaseHudWidget, FocusAnimationMinOpacity) == 0x000320, "Member 'UCoreBaseHudWidget::FocusAnimationMinOpacity' has a wrong offset!");

// Class DBDUIViewsCore.CoreBinkVideoPlayerWidget
// 0x0020 (0x0330 - 0x0310)
class UCoreBinkVideoPlayerWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDImage*                              VideoBinkBG;                                       // 0x0310(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USizeBox*                               VideoBinkSizeBox;                                  // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScaleBox*                              VideoBinkScaleBox;                                 // 0x0320(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 VideoBinkImage;                                    // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetSize(const struct FVector2D& size);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreBinkVideoPlayerWidget">();
	}
	static class UCoreBinkVideoPlayerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreBinkVideoPlayerWidget>();
	}
};
static_assert(alignof(UCoreBinkVideoPlayerWidget) == 0x000008, "Wrong alignment on UCoreBinkVideoPlayerWidget");
static_assert(sizeof(UCoreBinkVideoPlayerWidget) == 0x000330, "Wrong size on UCoreBinkVideoPlayerWidget");
static_assert(offsetof(UCoreBinkVideoPlayerWidget, VideoBinkBG) == 0x000310, "Member 'UCoreBinkVideoPlayerWidget::VideoBinkBG' has a wrong offset!");
static_assert(offsetof(UCoreBinkVideoPlayerWidget, VideoBinkSizeBox) == 0x000318, "Member 'UCoreBinkVideoPlayerWidget::VideoBinkSizeBox' has a wrong offset!");
static_assert(offsetof(UCoreBinkVideoPlayerWidget, VideoBinkScaleBox) == 0x000320, "Member 'UCoreBinkVideoPlayerWidget::VideoBinkScaleBox' has a wrong offset!");
static_assert(offsetof(UCoreBinkVideoPlayerWidget, VideoBinkImage) == 0x000328, "Member 'UCoreBinkVideoPlayerWidget::VideoBinkImage' has a wrong offset!");

// Class DBDUIViewsCore.CoreChallengeTrackerWidget
// 0x0068 (0x0390 - 0x0328)
class UCoreChallengeTrackerWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              _onWidgetOpeningDone;                              // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _onWidgetClosingDone;                              // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _onWidgetProgressionDone;                          // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          OpenSfx;                                           // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          CloseSfx;                                          // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ProgressionSfx;                                    // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          CompleteSfx;                                       // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ProgressionAudioRTPC;                              // 0x0380(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreChallengeTrackerWidget">();
	}
	static class UCoreChallengeTrackerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreChallengeTrackerWidget>();
	}
};
static_assert(alignof(UCoreChallengeTrackerWidget) == 0x000008, "Wrong alignment on UCoreChallengeTrackerWidget");
static_assert(sizeof(UCoreChallengeTrackerWidget) == 0x000390, "Wrong size on UCoreChallengeTrackerWidget");
static_assert(offsetof(UCoreChallengeTrackerWidget, _onWidgetOpeningDone) == 0x000330, "Member 'UCoreChallengeTrackerWidget::_onWidgetOpeningDone' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerWidget, _onWidgetClosingDone) == 0x000340, "Member 'UCoreChallengeTrackerWidget::_onWidgetClosingDone' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerWidget, _onWidgetProgressionDone) == 0x000350, "Member 'UCoreChallengeTrackerWidget::_onWidgetProgressionDone' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerWidget, OpenSfx) == 0x000360, "Member 'UCoreChallengeTrackerWidget::OpenSfx' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerWidget, CloseSfx) == 0x000368, "Member 'UCoreChallengeTrackerWidget::CloseSfx' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerWidget, ProgressionSfx) == 0x000370, "Member 'UCoreChallengeTrackerWidget::ProgressionSfx' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerWidget, CompleteSfx) == 0x000378, "Member 'UCoreChallengeTrackerWidget::CompleteSfx' has a wrong offset!");
static_assert(offsetof(UCoreChallengeTrackerWidget, ProgressionAudioRTPC) == 0x000380, "Member 'UCoreChallengeTrackerWidget::ProgressionAudioRTPC' has a wrong offset!");

// Class DBDUIViewsCore.CoreRewardWidget
// 0x0018 (0x0458 - 0x0440)
class UCoreRewardWidget : public UCoreSelectableButtonWidget
{
public:
	class UDBDImage*                              RewardIcon;                                        // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreLockedOverlayWidget*               LockedOverlay;                                     // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ClearData();
	class UCoreLockedOverlayWidget* GetLockedOverlay();
	void SetIsLocked(bool isLocked, bool useAnimation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreRewardWidget">();
	}
	static class UCoreRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreRewardWidget>();
	}
};
static_assert(alignof(UCoreRewardWidget) == 0x000008, "Wrong alignment on UCoreRewardWidget");
static_assert(sizeof(UCoreRewardWidget) == 0x000458, "Wrong size on UCoreRewardWidget");
static_assert(offsetof(UCoreRewardWidget, RewardIcon) == 0x000440, "Member 'UCoreRewardWidget::RewardIcon' has a wrong offset!");
static_assert(offsetof(UCoreRewardWidget, LockedOverlay) == 0x000448, "Member 'UCoreRewardWidget::LockedOverlay' has a wrong offset!");
static_assert(offsetof(UCoreRewardWidget, OnHoverBorder) == 0x000450, "Member 'UCoreRewardWidget::OnHoverBorder' has a wrong offset!");

// Class DBDUIViewsCore.CoreCharacterRewardWidget
// 0x0000 (0x0458 - 0x0458)
class UCoreCharacterRewardWidget final : public UCoreRewardWidget
{
public:
	void SetData(const struct FCharacterRewardViewData& characterRewardViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCharacterRewardWidget">();
	}
	static class UCoreCharacterRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCharacterRewardWidget>();
	}
};
static_assert(alignof(UCoreCharacterRewardWidget) == 0x000008, "Wrong alignment on UCoreCharacterRewardWidget");
static_assert(sizeof(UCoreCharacterRewardWidget) == 0x000458, "Wrong size on UCoreCharacterRewardWidget");

// Class DBDUIViewsCore.CoreCreditsWidget
// 0x0038 (0x0348 - 0x0310)
class UCoreCreditsWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScrollSpeed;                                       // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      CreditsTextBlock;                                  // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _backActionDelegate;                               // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	class UUITweenInstance*                       _tween;                                            // 0x0340(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnScrollEnd(class UUITweenInstance* tween);
	void ScrollText();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCreditsWidget">();
	}
	static class UCoreCreditsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCreditsWidget>();
	}
};
static_assert(alignof(UCoreCreditsWidget) == 0x000008, "Wrong alignment on UCoreCreditsWidget");
static_assert(sizeof(UCoreCreditsWidget) == 0x000348, "Wrong size on UCoreCreditsWidget");
static_assert(offsetof(UCoreCreditsWidget, ScrollSpeed) == 0x000318, "Member 'UCoreCreditsWidget::ScrollSpeed' has a wrong offset!");
static_assert(offsetof(UCoreCreditsWidget, BackInputSwitcher) == 0x000320, "Member 'UCoreCreditsWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreCreditsWidget, CreditsTextBlock) == 0x000328, "Member 'UCoreCreditsWidget::CreditsTextBlock' has a wrong offset!");
static_assert(offsetof(UCoreCreditsWidget, _backActionDelegate) == 0x000330, "Member 'UCoreCreditsWidget::_backActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreCreditsWidget, _tween) == 0x000340, "Member 'UCoreCreditsWidget::_tween' has a wrong offset!");

// Class DBDUIViewsCore.CoreCurrencyExpirationLabelWidget
// 0x0000 (0x0310 - 0x0310)
class UCoreCurrencyExpirationLabelWidget final : public UCoreBaseUserWidget
{
public:
	void SetData(const struct FCurrencyExpirationLabelViewData& viewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCurrencyExpirationLabelWidget">();
	}
	static class UCoreCurrencyExpirationLabelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCurrencyExpirationLabelWidget>();
	}
};
static_assert(alignof(UCoreCurrencyExpirationLabelWidget) == 0x000008, "Wrong alignment on UCoreCurrencyExpirationLabelWidget");
static_assert(sizeof(UCoreCurrencyExpirationLabelWidget) == 0x000310, "Wrong size on UCoreCurrencyExpirationLabelWidget");

// Class DBDUIViewsCore.CoreCurrencyForTooltipsWidget
// 0x0000 (0x0310 - 0x0310)
class UCoreCurrencyForTooltipsWidget final : public UCoreBaseUserWidget
{
public:
	void SetData(const struct FCurrencyProgressionRewardViewData& currencyRewardViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCurrencyForTooltipsWidget">();
	}
	static class UCoreCurrencyForTooltipsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCurrencyForTooltipsWidget>();
	}
};
static_assert(alignof(UCoreCurrencyForTooltipsWidget) == 0x000008, "Wrong alignment on UCoreCurrencyForTooltipsWidget");
static_assert(sizeof(UCoreCurrencyForTooltipsWidget) == 0x000310, "Wrong size on UCoreCurrencyForTooltipsWidget");

// Class DBDUIViewsCore.CoreCurrencyLabelWidget
// 0x0000 (0x0408 - 0x0408)
class UCoreCurrencyLabelWidget final : public UCoreButtonWidget
{
public:
	void PlayNotEnoughCurrency();
	void SetData(const struct FCurrencyLabelViewData& viewData);
	void UpdateCurrency(int32 newBalance, int32 previousBalance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCurrencyLabelWidget">();
	}
	static class UCoreCurrencyLabelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCurrencyLabelWidget>();
	}
};
static_assert(alignof(UCoreCurrencyLabelWidget) == 0x000008, "Wrong alignment on UCoreCurrencyLabelWidget");
static_assert(sizeof(UCoreCurrencyLabelWidget) == 0x000408, "Wrong size on UCoreCurrencyLabelWidget");

// Class DBDUIViewsCore.CoreCurrencyProgressionRewardWidget
// 0x0000 (0x0458 - 0x0458)
class UCoreCurrencyProgressionRewardWidget final : public UCoreRewardWidget
{
public:
	void SetData(const struct FCurrencyProgressionRewardViewData& currencyProgressionRewardViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCurrencyProgressionRewardWidget">();
	}
	static class UCoreCurrencyProgressionRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCurrencyProgressionRewardWidget>();
	}
};
static_assert(alignof(UCoreCurrencyProgressionRewardWidget) == 0x000008, "Wrong alignment on UCoreCurrencyProgressionRewardWidget");
static_assert(sizeof(UCoreCurrencyProgressionRewardWidget) == 0x000458, "Wrong size on UCoreCurrencyProgressionRewardWidget");

// Class DBDUIViewsCore.CoreCustomizationRewardWidget
// 0x0008 (0x0460 - 0x0458)
class UCoreCustomizationRewardWidget final : public UCoreRewardWidget
{
public:
	class UDBDImage*                              RarityIMG;                                         // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetData(const struct FCustomizationRewardViewData& customizationRewardViewData);
	void SetOwnedText(const class FText& ownedText);
	void SetRarity(EItemRarity rarity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreCustomizationRewardWidget">();
	}
	static class UCoreCustomizationRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreCustomizationRewardWidget>();
	}
};
static_assert(alignof(UCoreCustomizationRewardWidget) == 0x000008, "Wrong alignment on UCoreCustomizationRewardWidget");
static_assert(sizeof(UCoreCustomizationRewardWidget) == 0x000460, "Wrong size on UCoreCustomizationRewardWidget");
static_assert(offsetof(UCoreCustomizationRewardWidget, RarityIMG) == 0x000458, "Member 'UCoreCustomizationRewardWidget::RarityIMG' has a wrong offset!");

// Class DBDUIViewsCore.CoreDisplayStandWidget
// 0x0020 (0x0330 - 0x0310)
class UCoreDisplayStandWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float distance)> _displayStandRotationDelegate;                    // 0x0318(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UDragZone*                              DragZone;                                          // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnDrag(const struct FVector2D& cursorDelta);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreDisplayStandWidget">();
	}
	static class UCoreDisplayStandWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreDisplayStandWidget>();
	}
};
static_assert(alignof(UCoreDisplayStandWidget) == 0x000008, "Wrong alignment on UCoreDisplayStandWidget");
static_assert(sizeof(UCoreDisplayStandWidget) == 0x000330, "Wrong size on UCoreDisplayStandWidget");
static_assert(offsetof(UCoreDisplayStandWidget, _displayStandRotationDelegate) == 0x000318, "Member 'UCoreDisplayStandWidget::_displayStandRotationDelegate' has a wrong offset!");
static_assert(offsetof(UCoreDisplayStandWidget, DragZone) == 0x000328, "Member 'UCoreDisplayStandWidget::DragZone' has a wrong offset!");

// Class DBDUIViewsCore.CoreEndGameCollapseBarWidget
// 0x0078 (0x03A0 - 0x0328)
class UCoreEndGameCollapseBarWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _progressBarInterpSpeed;                           // 0x0330(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_334[0x6C];                                     // 0x0334(0x006C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayToZeroAnimation();
	void UpdateBarProgression(const float progress);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreEndGameCollapseBarWidget">();
	}
	static class UCoreEndGameCollapseBarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreEndGameCollapseBarWidget>();
	}
};
static_assert(alignof(UCoreEndGameCollapseBarWidget) == 0x000008, "Wrong alignment on UCoreEndGameCollapseBarWidget");
static_assert(sizeof(UCoreEndGameCollapseBarWidget) == 0x0003A0, "Wrong size on UCoreEndGameCollapseBarWidget");
static_assert(offsetof(UCoreEndGameCollapseBarWidget, _progressBarInterpSpeed) == 0x000330, "Member 'UCoreEndGameCollapseBarWidget::_progressBarInterpSpeed' has a wrong offset!");

// Class DBDUIViewsCore.CoreEndGameCollapseProgressWidget
// 0x0048 (0x0358 - 0x0310)
class UCoreEndGameCollapseProgressWidget final : public UCoreBaseUserWidget
{
public:
	class UProgressBar*                           ProgressBar;                                       // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           MarkerLeftCanvas;                                  // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           MarkerRightCanvas;                                 // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBoxSlot*                     _markerLeftBox;                                    // 0x0328(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHorizontalBoxSlot*                     _markerRightBox;                                   // 0x0330(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_338[0x20];                                     // 0x0338(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreEndGameCollapseProgressWidget">();
	}
	static class UCoreEndGameCollapseProgressWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreEndGameCollapseProgressWidget>();
	}
};
static_assert(alignof(UCoreEndGameCollapseProgressWidget) == 0x000008, "Wrong alignment on UCoreEndGameCollapseProgressWidget");
static_assert(sizeof(UCoreEndGameCollapseProgressWidget) == 0x000358, "Wrong size on UCoreEndGameCollapseProgressWidget");
static_assert(offsetof(UCoreEndGameCollapseProgressWidget, ProgressBar) == 0x000310, "Member 'UCoreEndGameCollapseProgressWidget::ProgressBar' has a wrong offset!");
static_assert(offsetof(UCoreEndGameCollapseProgressWidget, MarkerLeftCanvas) == 0x000318, "Member 'UCoreEndGameCollapseProgressWidget::MarkerLeftCanvas' has a wrong offset!");
static_assert(offsetof(UCoreEndGameCollapseProgressWidget, MarkerRightCanvas) == 0x000320, "Member 'UCoreEndGameCollapseProgressWidget::MarkerRightCanvas' has a wrong offset!");
static_assert(offsetof(UCoreEndGameCollapseProgressWidget, _markerLeftBox) == 0x000328, "Member 'UCoreEndGameCollapseProgressWidget::_markerLeftBox' has a wrong offset!");
static_assert(offsetof(UCoreEndGameCollapseProgressWidget, _markerRightBox) == 0x000330, "Member 'UCoreEndGameCollapseProgressWidget::_markerRightBox' has a wrong offset!");

// Class DBDUIViewsCore.CoreEquippedItemWidget
// 0x0010 (0x0338 - 0x0328)
class UCoreEquippedItemWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          ItemDisappearSfx;                                  // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreEquippedItemWidget">();
	}
	static class UCoreEquippedItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreEquippedItemWidget>();
	}
};
static_assert(alignof(UCoreEquippedItemWidget) == 0x000008, "Wrong alignment on UCoreEquippedItemWidget");
static_assert(sizeof(UCoreEquippedItemWidget) == 0x000338, "Wrong size on UCoreEquippedItemWidget");
static_assert(offsetof(UCoreEquippedItemWidget, ItemDisappearSfx) == 0x000330, "Member 'UCoreEquippedItemWidget::ItemDisappearSfx' has a wrong offset!");

// Class DBDUIViewsCore.CoreEquippedPowerWidget
// 0x0008 (0x0330 - 0x0328)
class UCoreEquippedPowerWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreEquippedPowerWidget">();
	}
	static class UCoreEquippedPowerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreEquippedPowerWidget>();
	}
};
static_assert(alignof(UCoreEquippedPowerWidget) == 0x000008, "Wrong alignment on UCoreEquippedPowerWidget");
static_assert(sizeof(UCoreEquippedPowerWidget) == 0x000330, "Wrong size on UCoreEquippedPowerWidget");

// Class DBDUIViewsCore.CoreExampleWidget
// 0x0098 (0x03C0 - 0x0328)
class UCoreExampleWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EditAnywhere;                                      // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EditDefaultsOnly;                                  // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EditInstanceOnly;                                  // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EditNoBlueprint;                                   // 0x0360(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EditDefaultsOnlyBlueprintReadOnly;                 // 0x0370(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VisibleAnywhere;                                   // 0x0380(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VisibleDefaultsOnly;                               // 0x0390(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VisibleInstanceOnly;                               // 0x03A0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ExampleButtonClickDelegate;                        // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreExampleWidget">();
	}
	static class UCoreExampleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreExampleWidget>();
	}
};
static_assert(alignof(UCoreExampleWidget) == 0x000008, "Wrong alignment on UCoreExampleWidget");
static_assert(sizeof(UCoreExampleWidget) == 0x0003C0, "Wrong size on UCoreExampleWidget");
static_assert(offsetof(UCoreExampleWidget, EditAnywhere) == 0x000330, "Member 'UCoreExampleWidget::EditAnywhere' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, EditDefaultsOnly) == 0x000340, "Member 'UCoreExampleWidget::EditDefaultsOnly' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, EditInstanceOnly) == 0x000350, "Member 'UCoreExampleWidget::EditInstanceOnly' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, EditNoBlueprint) == 0x000360, "Member 'UCoreExampleWidget::EditNoBlueprint' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, EditDefaultsOnlyBlueprintReadOnly) == 0x000370, "Member 'UCoreExampleWidget::EditDefaultsOnlyBlueprintReadOnly' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, VisibleAnywhere) == 0x000380, "Member 'UCoreExampleWidget::VisibleAnywhere' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, VisibleDefaultsOnly) == 0x000390, "Member 'UCoreExampleWidget::VisibleDefaultsOnly' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, VisibleInstanceOnly) == 0x0003A0, "Member 'UCoreExampleWidget::VisibleInstanceOnly' has a wrong offset!");
static_assert(offsetof(UCoreExampleWidget, ExampleButtonClickDelegate) == 0x0003B0, "Member 'UCoreExampleWidget::ExampleButtonClickDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreExternalEffectsWidget
// 0x0278 (0x05A0 - 0x0328)
class UCoreExternalEffectsWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              GridSlotSize;                                      // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AddonScaleRatio;                                   // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SpacingBetweenRows;                                // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SpacingPerks;                                      // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SpacingAddons;                                     // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SpacingBetweenPerksAndAddons;                      // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCorePerkWidget>            PerkWidgetClass;                                   // 0x0350(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreAddonWidget>           AddonWidgetClass;                                  // 0x0358(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             Container;                                         // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPerkViewData>                  _perkData;                                         // 0x0370(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, class UCorePerkWidget*>     _perkWidgets;                                      // 0x0380(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCorePerkWidget*>                _perkPool;                                         // 0x03D0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class FName, TScriptInterface<class IPerkViewInterface>> _perkViewInterfaces;               // 0x03E0(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<struct FAddonViewData>                 _addonData;                                        // 0x0430(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, class UCoreAddonWidget*>    _addonWidgets;                                     // 0x0440(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreAddonWidget*>               _addonPool;                                        // 0x0490(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class FName, TScriptInterface<class IAddonViewInterface>> _addonViewInterfaces;             // 0x04A0(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FTimerHandle>        _timerHandleMap;                                   // 0x04F0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, class USpacer*>             _spacerWidgets;                                    // 0x0540(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USpacer*>                        _spacerPool;                                       // 0x0590(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void HideExternalAddon_Implementation(const class FName& itemId);
	void HideExternalPerk_Implementation(const class FName& itemId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreExternalEffectsWidget">();
	}
	static class UCoreExternalEffectsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreExternalEffectsWidget>();
	}
};
static_assert(alignof(UCoreExternalEffectsWidget) == 0x000008, "Wrong alignment on UCoreExternalEffectsWidget");
static_assert(sizeof(UCoreExternalEffectsWidget) == 0x0005A0, "Wrong size on UCoreExternalEffectsWidget");
static_assert(offsetof(UCoreExternalEffectsWidget, GridSlotSize) == 0x000330, "Member 'UCoreExternalEffectsWidget::GridSlotSize' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, AddonScaleRatio) == 0x000338, "Member 'UCoreExternalEffectsWidget::AddonScaleRatio' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, SpacingBetweenRows) == 0x00033C, "Member 'UCoreExternalEffectsWidget::SpacingBetweenRows' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, SpacingPerks) == 0x000340, "Member 'UCoreExternalEffectsWidget::SpacingPerks' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, SpacingAddons) == 0x000344, "Member 'UCoreExternalEffectsWidget::SpacingAddons' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, SpacingBetweenPerksAndAddons) == 0x000348, "Member 'UCoreExternalEffectsWidget::SpacingBetweenPerksAndAddons' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, PerkWidgetClass) == 0x000350, "Member 'UCoreExternalEffectsWidget::PerkWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, AddonWidgetClass) == 0x000358, "Member 'UCoreExternalEffectsWidget::AddonWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, Container) == 0x000360, "Member 'UCoreExternalEffectsWidget::Container' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _perkData) == 0x000370, "Member 'UCoreExternalEffectsWidget::_perkData' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _perkWidgets) == 0x000380, "Member 'UCoreExternalEffectsWidget::_perkWidgets' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _perkPool) == 0x0003D0, "Member 'UCoreExternalEffectsWidget::_perkPool' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _perkViewInterfaces) == 0x0003E0, "Member 'UCoreExternalEffectsWidget::_perkViewInterfaces' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _addonData) == 0x000430, "Member 'UCoreExternalEffectsWidget::_addonData' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _addonWidgets) == 0x000440, "Member 'UCoreExternalEffectsWidget::_addonWidgets' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _addonPool) == 0x000490, "Member 'UCoreExternalEffectsWidget::_addonPool' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _addonViewInterfaces) == 0x0004A0, "Member 'UCoreExternalEffectsWidget::_addonViewInterfaces' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _timerHandleMap) == 0x0004F0, "Member 'UCoreExternalEffectsWidget::_timerHandleMap' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _spacerWidgets) == 0x000540, "Member 'UCoreExternalEffectsWidget::_spacerWidgets' has a wrong offset!");
static_assert(offsetof(UCoreExternalEffectsWidget, _spacerPool) == 0x000590, "Member 'UCoreExternalEffectsWidget::_spacerPool' has a wrong offset!");

// Class DBDUIViewsCore.CoreFearMarketWidget
// 0x0020 (0x0388 - 0x0368)
class UCoreFearMarketWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreMenuPerkWidget*                    MenuPerk;                                          // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         BloodpointsRewardContainer;                        // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          BloodpointsValueTB;                                // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreFearMarketWidget">();
	}
	static class UCoreFearMarketWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreFearMarketWidget>();
	}
};
static_assert(alignof(UCoreFearMarketWidget) == 0x000008, "Wrong alignment on UCoreFearMarketWidget");
static_assert(sizeof(UCoreFearMarketWidget) == 0x000388, "Wrong size on UCoreFearMarketWidget");
static_assert(offsetof(UCoreFearMarketWidget, MenuPerk) == 0x000370, "Member 'UCoreFearMarketWidget::MenuPerk' has a wrong offset!");
static_assert(offsetof(UCoreFearMarketWidget, BloodpointsRewardContainer) == 0x000378, "Member 'UCoreFearMarketWidget::BloodpointsRewardContainer' has a wrong offset!");
static_assert(offsetof(UCoreFearMarketWidget, BloodpointsValueTB) == 0x000380, "Member 'UCoreFearMarketWidget::BloodpointsValueTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreFooterButtonWidget
// 0x0040 (0x0448 - 0x0408)
class UCoreFooterButtonWidget final : public UCoreButtonWidget
{
public:
	class UDBDImage*                              IconIMG;                                           // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           _hoveredColor;                                     // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           _unhoveredColor;                                   // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _tooltipLabelText;                                 // 0x0430(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void SetHoveredColor();
	void SetUnhoveredColor();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreFooterButtonWidget">();
	}
	static class UCoreFooterButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreFooterButtonWidget>();
	}
};
static_assert(alignof(UCoreFooterButtonWidget) == 0x000008, "Wrong alignment on UCoreFooterButtonWidget");
static_assert(sizeof(UCoreFooterButtonWidget) == 0x000448, "Wrong size on UCoreFooterButtonWidget");
static_assert(offsetof(UCoreFooterButtonWidget, IconIMG) == 0x000408, "Member 'UCoreFooterButtonWidget::IconIMG' has a wrong offset!");
static_assert(offsetof(UCoreFooterButtonWidget, _hoveredColor) == 0x000410, "Member 'UCoreFooterButtonWidget::_hoveredColor' has a wrong offset!");
static_assert(offsetof(UCoreFooterButtonWidget, _unhoveredColor) == 0x000420, "Member 'UCoreFooterButtonWidget::_unhoveredColor' has a wrong offset!");
static_assert(offsetof(UCoreFooterButtonWidget, _tooltipLabelText) == 0x000430, "Member 'UCoreFooterButtonWidget::_tooltipLabelText' has a wrong offset!");

// Class DBDUIViewsCore.CoreInputSwitcherWidget
// 0x0090 (0x03A0 - 0x0310)
class UCoreInputSwitcherWidget : public UCoreBaseUserWidget
{
public:
	EInputSwitcherDisplayRule                     ButtonDisplayRule;                                 // 0x0310(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputSwitcherDisplayRule                     InputPromptDisplayRule;                            // 0x0311(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_312[0x6];                                      // 0x0312(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ButtonPressedSfxName;                              // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ButtonPressedSfx;                                  // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ButtonHoveredSfxName;                              // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ButtonHoveredSfx;                                  // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InputTriggeredSfxName;                             // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          InputTriggeredSfx;                                 // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreKeyListenerInputPromptWidget*      InputPrompt;                                       // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreButtonWidget*                      Button;                                            // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _shouldRegisterForInputInConstruct;                // 0x0370(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextJustify                                  _alignment;                                        // 0x0371(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isEnabled;                                        // 0x0372(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_373[0x5];                                      // 0x0373(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              _onInputSwitcherTriggeredDelegate;                 // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_388[0x1];                                      // 0x0388(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          SendAnalyticsData;                                 // 0x0389(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38A[0x6];                                      // 0x038A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnalyticsName;                                     // 0x0390(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnAlignmentChanged(ETextJustify newAlignment);
	void OnButtonClicked(class UCoreButtonWidget* target);
	void OnInputPromptTriggered();
	void SetAdditionalIcon(TSoftObjectPtr<class UTexture2D> iconTexture);
	void SetAlignment(ETextJustify newAlignment);
	void SetBackground(TSoftObjectPtr<class UMaterialInstance> backgroundMaterial);
	void SetEnabled(bool isEnabled);
	void SetKeyOverride(const struct FKey& keyOverride);
	void SetLabel(const class FText& label);
	void SetRepeatable(bool isRepeatable, class UCurveFloat* repetitionDelayCurve);
	void SetUIAction(const EUIActionType actionType);

	class UCoreButtonWidget* GetButton() const;
	class UCoreKeyListenerInputPromptWidget* GetInputPrompt() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInputSwitcherWidget">();
	}
	static class UCoreInputSwitcherWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInputSwitcherWidget>();
	}
};
static_assert(alignof(UCoreInputSwitcherWidget) == 0x000008, "Wrong alignment on UCoreInputSwitcherWidget");
static_assert(sizeof(UCoreInputSwitcherWidget) == 0x0003A0, "Wrong size on UCoreInputSwitcherWidget");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonDisplayRule) == 0x000310, "Member 'UCoreInputSwitcherWidget::ButtonDisplayRule' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, InputPromptDisplayRule) == 0x000311, "Member 'UCoreInputSwitcherWidget::InputPromptDisplayRule' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonPressedSfxName) == 0x000318, "Member 'UCoreInputSwitcherWidget::ButtonPressedSfxName' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonPressedSfx) == 0x000328, "Member 'UCoreInputSwitcherWidget::ButtonPressedSfx' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonHoveredSfxName) == 0x000330, "Member 'UCoreInputSwitcherWidget::ButtonHoveredSfxName' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, ButtonHoveredSfx) == 0x000340, "Member 'UCoreInputSwitcherWidget::ButtonHoveredSfx' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, InputTriggeredSfxName) == 0x000348, "Member 'UCoreInputSwitcherWidget::InputTriggeredSfxName' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, InputTriggeredSfx) == 0x000358, "Member 'UCoreInputSwitcherWidget::InputTriggeredSfx' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, InputPrompt) == 0x000360, "Member 'UCoreInputSwitcherWidget::InputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, Button) == 0x000368, "Member 'UCoreInputSwitcherWidget::Button' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, _shouldRegisterForInputInConstruct) == 0x000370, "Member 'UCoreInputSwitcherWidget::_shouldRegisterForInputInConstruct' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, _alignment) == 0x000371, "Member 'UCoreInputSwitcherWidget::_alignment' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, _isEnabled) == 0x000372, "Member 'UCoreInputSwitcherWidget::_isEnabled' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, _onInputSwitcherTriggeredDelegate) == 0x000378, "Member 'UCoreInputSwitcherWidget::_onInputSwitcherTriggeredDelegate' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, SendAnalyticsData) == 0x000389, "Member 'UCoreInputSwitcherWidget::SendAnalyticsData' has a wrong offset!");
static_assert(offsetof(UCoreInputSwitcherWidget, AnalyticsName) == 0x000390, "Member 'UCoreInputSwitcherWidget::AnalyticsName' has a wrong offset!");

// Class DBDUIViewsCore.CoreFooterInputSwitcherWidget
// 0x0008 (0x03A8 - 0x03A0)
class UCoreFooterInputSwitcherWidget final : public UCoreInputSwitcherWidget
{
public:
	class UTexture2D*                             _iconTexture;                                      // 0x03A0(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreFooterInputSwitcherWidget">();
	}
	static class UCoreFooterInputSwitcherWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreFooterInputSwitcherWidget>();
	}
};
static_assert(alignof(UCoreFooterInputSwitcherWidget) == 0x000008, "Wrong alignment on UCoreFooterInputSwitcherWidget");
static_assert(sizeof(UCoreFooterInputSwitcherWidget) == 0x0003A8, "Wrong size on UCoreFooterInputSwitcherWidget");
static_assert(offsetof(UCoreFooterInputSwitcherWidget, _iconTexture) == 0x0003A0, "Member 'UCoreFooterInputSwitcherWidget::_iconTexture' has a wrong offset!");

// Class DBDUIViewsCore.CoreGameManualPanelWidget
// 0x00D8 (0x03E8 - 0x0310)
class UCoreGameManualPanelWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EGameManualMenuState                          _currentSelectedManualMenu;                        // 0x0318(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHelpType                                     _currentGameManualTopic;                           // 0x0319(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31A[0x6];                                      // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           CategoryPanel;                                     // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreGameManualCategoryButton*          GameCategoryButton;                                // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreGameManualCategoryButton*          SurvivorCategoryButton;                            // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreGameManualCategoryButton*          KillerCategoryButton;                              // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           TopicsPanel;                                       // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreTabContainerWidget*                GameManualTopicsTabs;                              // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          GameManualContentTitle;                            // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          GameManualContentSubtitle;                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      GameManualContentText;                             // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class FText subtitle)> _onSetOnboardingMenuSubtitleDelegate;       // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _onResetOnboardingMenuSubtitleDelegate;            // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_388[0x60];                                     // 0x0388(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTopicsTabSelected(class UCoreSelectableButtonWidget* selectedButton);
	void ResetScrolls(bool resetTopicsScroll);
	void SetCurrentOnbardingMenuSubtitle();
	void SetGameManualMenuState(EGameManualMenuState menuState);
	void ShowHelpTopics(EHelpType categoryType);
	void ToggleGameManualMenuState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreGameManualPanelWidget">();
	}
	static class UCoreGameManualPanelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreGameManualPanelWidget>();
	}
};
static_assert(alignof(UCoreGameManualPanelWidget) == 0x000008, "Wrong alignment on UCoreGameManualPanelWidget");
static_assert(sizeof(UCoreGameManualPanelWidget) == 0x0003E8, "Wrong size on UCoreGameManualPanelWidget");
static_assert(offsetof(UCoreGameManualPanelWidget, _currentSelectedManualMenu) == 0x000318, "Member 'UCoreGameManualPanelWidget::_currentSelectedManualMenu' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, _currentGameManualTopic) == 0x000319, "Member 'UCoreGameManualPanelWidget::_currentGameManualTopic' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, CategoryPanel) == 0x000320, "Member 'UCoreGameManualPanelWidget::CategoryPanel' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, GameCategoryButton) == 0x000328, "Member 'UCoreGameManualPanelWidget::GameCategoryButton' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, SurvivorCategoryButton) == 0x000330, "Member 'UCoreGameManualPanelWidget::SurvivorCategoryButton' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, KillerCategoryButton) == 0x000338, "Member 'UCoreGameManualPanelWidget::KillerCategoryButton' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, TopicsPanel) == 0x000340, "Member 'UCoreGameManualPanelWidget::TopicsPanel' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, GameManualTopicsTabs) == 0x000348, "Member 'UCoreGameManualPanelWidget::GameManualTopicsTabs' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, GameManualContentTitle) == 0x000350, "Member 'UCoreGameManualPanelWidget::GameManualContentTitle' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, GameManualContentSubtitle) == 0x000358, "Member 'UCoreGameManualPanelWidget::GameManualContentSubtitle' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, GameManualContentText) == 0x000360, "Member 'UCoreGameManualPanelWidget::GameManualContentText' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, _onSetOnboardingMenuSubtitleDelegate) == 0x000368, "Member 'UCoreGameManualPanelWidget::_onSetOnboardingMenuSubtitleDelegate' has a wrong offset!");
static_assert(offsetof(UCoreGameManualPanelWidget, _onResetOnboardingMenuSubtitleDelegate) == 0x000378, "Member 'UCoreGameManualPanelWidget::_onResetOnboardingMenuSubtitleDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreGenericTextInputPopupWidget
// 0x0038 (0x03A0 - 0x0368)
class UCoreGenericTextInputPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_368[0x20];                                     // 0x0368(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UEditableTextBox*                       InputTextBox;                                      // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          MessageScrollBox;                                  // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      ErrorMessageTextBlock;                             // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreGenericTextInputPopupWidget">();
	}
	static class UCoreGenericTextInputPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreGenericTextInputPopupWidget>();
	}
};
static_assert(alignof(UCoreGenericTextInputPopupWidget) == 0x000008, "Wrong alignment on UCoreGenericTextInputPopupWidget");
static_assert(sizeof(UCoreGenericTextInputPopupWidget) == 0x0003A0, "Wrong size on UCoreGenericTextInputPopupWidget");
static_assert(offsetof(UCoreGenericTextInputPopupWidget, InputTextBox) == 0x000388, "Member 'UCoreGenericTextInputPopupWidget::InputTextBox' has a wrong offset!");
static_assert(offsetof(UCoreGenericTextInputPopupWidget, MessageScrollBox) == 0x000390, "Member 'UCoreGenericTextInputPopupWidget::MessageScrollBox' has a wrong offset!");
static_assert(offsetof(UCoreGenericTextInputPopupWidget, ErrorMessageTextBlock) == 0x000398, "Member 'UCoreGenericTextInputPopupWidget::ErrorMessageTextBlock' has a wrong offset!");

// Class DBDUIViewsCore.CoreHookCountWidget
// 0x0008 (0x0330 - 0x0328)
class UCoreHookCountWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHookCountWidget">();
	}
	static class UCoreHookCountWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHookCountWidget>();
	}
};
static_assert(alignof(UCoreHookCountWidget) == 0x000008, "Wrong alignment on UCoreHookCountWidget");
static_assert(sizeof(UCoreHookCountWidget) == 0x000330, "Wrong size on UCoreHookCountWidget");

// Class DBDUIViewsCore.CoreHudAlertWidget
// 0x0090 (0x03B8 - 0x0328)
class UCoreHudAlertWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxDisplayedItems;                                 // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SecondaryAlpha;                                    // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FullAlertDuration;                                 // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PendingAlertDuration;                              // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnimationDuration;                                 // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   AnimationEasing;                                   // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationTranslationY;                             // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreHudScoreAlertItem>     CoreHudScoreAlertItemClass;                        // 0x0350(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreHudStatusEffectAlertItem> CoreHudStatusEffectAlertItemClass;              // 0x0358(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             AlertContainer;                                    // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreBaseUserWidget*>            _alerts;                                           // 0x0368(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreBaseUserWidget*>            _pendingAlerts;                                    // 0x0378(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreHudScoreAlertItem*>         _scoreAlertPool;                                   // 0x0388(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreHudStatusEffectAlertItem*>  _statusEffectAlertPool;                            // 0x0398(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A8[0x10];                                     // 0x03A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearAlerts();
	void OnClearAlertsComplete(class UUITweenInstance* tween);
	void OnPopAlertComplete(class UUITweenInstance* tween);
	void PopAlert();

	TArray<class UCoreBaseUserWidget*> GetAlerts() const;
	TArray<class UCoreBaseUserWidget*> GetPendingAlerts() const;
	float GetRemainingTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudAlertWidget">();
	}
	static class UCoreHudAlertWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudAlertWidget>();
	}
};
static_assert(alignof(UCoreHudAlertWidget) == 0x000008, "Wrong alignment on UCoreHudAlertWidget");
static_assert(sizeof(UCoreHudAlertWidget) == 0x0003B8, "Wrong size on UCoreHudAlertWidget");
static_assert(offsetof(UCoreHudAlertWidget, MaxDisplayedItems) == 0x000330, "Member 'UCoreHudAlertWidget::MaxDisplayedItems' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, SecondaryAlpha) == 0x000334, "Member 'UCoreHudAlertWidget::SecondaryAlpha' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, FullAlertDuration) == 0x000338, "Member 'UCoreHudAlertWidget::FullAlertDuration' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, PendingAlertDuration) == 0x00033C, "Member 'UCoreHudAlertWidget::PendingAlertDuration' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, AnimationDuration) == 0x000340, "Member 'UCoreHudAlertWidget::AnimationDuration' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, AnimationEasing) == 0x000344, "Member 'UCoreHudAlertWidget::AnimationEasing' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, AnimationTranslationY) == 0x000348, "Member 'UCoreHudAlertWidget::AnimationTranslationY' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, CoreHudScoreAlertItemClass) == 0x000350, "Member 'UCoreHudAlertWidget::CoreHudScoreAlertItemClass' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, CoreHudStatusEffectAlertItemClass) == 0x000358, "Member 'UCoreHudAlertWidget::CoreHudStatusEffectAlertItemClass' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, AlertContainer) == 0x000360, "Member 'UCoreHudAlertWidget::AlertContainer' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, _alerts) == 0x000368, "Member 'UCoreHudAlertWidget::_alerts' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, _pendingAlerts) == 0x000378, "Member 'UCoreHudAlertWidget::_pendingAlerts' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, _scoreAlertPool) == 0x000388, "Member 'UCoreHudAlertWidget::_scoreAlertPool' has a wrong offset!");
static_assert(offsetof(UCoreHudAlertWidget, _statusEffectAlertPool) == 0x000398, "Member 'UCoreHudAlertWidget::_statusEffectAlertPool' has a wrong offset!");

// Class DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget
// 0x0000 (0x0328 - 0x0328)
class UCoreHudDirectionalMiniGameItemWidget final : public UCoreBaseHudWidget
{
public:
	void Init(EDirectionalInputKey direction);
	void RevealDirection(bool withAnimation);
	void UpdateResult(bool isSuccessful);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudDirectionalMiniGameItemWidget">();
	}
	static class UCoreHudDirectionalMiniGameItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudDirectionalMiniGameItemWidget>();
	}
};
static_assert(alignof(UCoreHudDirectionalMiniGameItemWidget) == 0x000008, "Wrong alignment on UCoreHudDirectionalMiniGameItemWidget");
static_assert(sizeof(UCoreHudDirectionalMiniGameItemWidget) == 0x000328, "Wrong size on UCoreHudDirectionalMiniGameItemWidget");

// Class DBDUIViewsCore.CoreHudDirectionalMiniGameWidget
// 0x0030 (0x0358 - 0x0328)
class UCoreHudDirectionalMiniGameWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreHudDirectionalMiniGameItemWidget> ItemWidgetClass;                        // 0x0330(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHorizontalBox*                         Container;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreHudDirectionalMiniGameItemWidget*> _widgets;                                   // 0x0340(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class UCoreHudDirectionalMiniGameItemWidget*> GetWidgets();
	void ShowVisual();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudDirectionalMiniGameWidget">();
	}
	static class UCoreHudDirectionalMiniGameWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudDirectionalMiniGameWidget>();
	}
};
static_assert(alignof(UCoreHudDirectionalMiniGameWidget) == 0x000008, "Wrong alignment on UCoreHudDirectionalMiniGameWidget");
static_assert(sizeof(UCoreHudDirectionalMiniGameWidget) == 0x000358, "Wrong size on UCoreHudDirectionalMiniGameWidget");
static_assert(offsetof(UCoreHudDirectionalMiniGameWidget, ItemWidgetClass) == 0x000330, "Member 'UCoreHudDirectionalMiniGameWidget::ItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreHudDirectionalMiniGameWidget, Container) == 0x000338, "Member 'UCoreHudDirectionalMiniGameWidget::Container' has a wrong offset!");
static_assert(offsetof(UCoreHudDirectionalMiniGameWidget, _widgets) == 0x000340, "Member 'UCoreHudDirectionalMiniGameWidget::_widgets' has a wrong offset!");

// Class DBDUIViewsCore.CoreHudObjectivesWidget
// 0x0018 (0x0340 - 0x0328)
class UCoreHudObjectivesWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x10];                                     // 0x0328(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          SpecialSpacer;                                     // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudObjectivesWidget">();
	}
	static class UCoreHudObjectivesWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudObjectivesWidget>();
	}
};
static_assert(alignof(UCoreHudObjectivesWidget) == 0x000008, "Wrong alignment on UCoreHudObjectivesWidget");
static_assert(sizeof(UCoreHudObjectivesWidget) == 0x000340, "Wrong size on UCoreHudObjectivesWidget");
static_assert(offsetof(UCoreHudObjectivesWidget, SpecialSpacer) == 0x000338, "Member 'UCoreHudObjectivesWidget::SpecialSpacer' has a wrong offset!");

// Class DBDUIViewsCore.CoreHudScoreAlertItem
// 0x0000 (0x0310 - 0x0310)
class UCoreHudScoreAlertItem final : public UCoreBaseUserWidget
{
public:
	void SetData(const struct FScoreAlertViewData& data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudScoreAlertItem">();
	}
	static class UCoreHudScoreAlertItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudScoreAlertItem>();
	}
};
static_assert(alignof(UCoreHudScoreAlertItem) == 0x000008, "Wrong alignment on UCoreHudScoreAlertItem");
static_assert(sizeof(UCoreHudScoreAlertItem) == 0x000310, "Wrong size on UCoreHudScoreAlertItem");

// Class DBDUIViewsCore.CoreHudStatusEffectAlertItem
// 0x0000 (0x0310 - 0x0310)
class UCoreHudStatusEffectAlertItem final : public UCoreBaseUserWidget
{
public:
	void SetData(const struct FStatusEffectAlertViewData& data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreHudStatusEffectAlertItem">();
	}
	static class UCoreHudStatusEffectAlertItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreHudStatusEffectAlertItem>();
	}
};
static_assert(alignof(UCoreHudStatusEffectAlertItem) == 0x000008, "Wrong alignment on UCoreHudStatusEffectAlertItem");
static_assert(sizeof(UCoreHudStatusEffectAlertItem) == 0x000310, "Wrong size on UCoreHudStatusEffectAlertItem");

// Class DBDUIViewsCore.CoreInputPromptWidget
// 0x0040 (0x0350 - 0x0310)
class UCoreInputPromptWidget final : public UCoreBaseUserWidget
{
public:
	class FText                                   _unfoundInputKeyText;                              // 0x0310(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FKey                                   _inputKey;                                         // 0x0328(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isEnabled;                                        // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayPrompt();
	struct FKey GetInputKey();
	bool IsEnabled();
	void OnEnabledChanged(bool isEnabled);
	void PromptNotFound();
	void SetEnabled(bool isEnabled);
	void SetInputKey(const struct FKey& inputKey);

	class FText GetInputShortDisplayName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInputPromptWidget">();
	}
	static class UCoreInputPromptWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInputPromptWidget>();
	}
};
static_assert(alignof(UCoreInputPromptWidget) == 0x000008, "Wrong alignment on UCoreInputPromptWidget");
static_assert(sizeof(UCoreInputPromptWidget) == 0x000350, "Wrong size on UCoreInputPromptWidget");
static_assert(offsetof(UCoreInputPromptWidget, _unfoundInputKeyText) == 0x000310, "Member 'UCoreInputPromptWidget::_unfoundInputKeyText' has a wrong offset!");
static_assert(offsetof(UCoreInputPromptWidget, _inputKey) == 0x000328, "Member 'UCoreInputPromptWidget::_inputKey' has a wrong offset!");
static_assert(offsetof(UCoreInputPromptWidget, _isEnabled) == 0x000348, "Member 'UCoreInputPromptWidget::_isEnabled' has a wrong offset!");

// Class DBDUIViewsCore.CoreInteractionProgressWidget
// 0x0030 (0x0358 - 0x0328)
class UCoreInteractionProgressWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x10];                                     // 0x0328(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCoreStatusEffectIcon*>          Proficiencies;                                     // 0x0338(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _hemorrhageAnimationIsCompleteDelegate;            // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	void SetProficiencies(const TArray<struct FStatusEffectViewData>& proficiencyDatas);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInteractionProgressWidget">();
	}
	static class UCoreInteractionProgressWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInteractionProgressWidget>();
	}
};
static_assert(alignof(UCoreInteractionProgressWidget) == 0x000008, "Wrong alignment on UCoreInteractionProgressWidget");
static_assert(sizeof(UCoreInteractionProgressWidget) == 0x000358, "Wrong size on UCoreInteractionProgressWidget");
static_assert(offsetof(UCoreInteractionProgressWidget, Proficiencies) == 0x000338, "Member 'UCoreInteractionProgressWidget::Proficiencies' has a wrong offset!");
static_assert(offsetof(UCoreInteractionProgressWidget, _hemorrhageAnimationIsCompleteDelegate) == 0x000348, "Member 'UCoreInteractionProgressWidget::_hemorrhageAnimationIsCompleteDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreInteractionPromptActionWidget
// 0x00B8 (0x03C8 - 0x0310)
class UCoreInteractionPromptActionWidget final : public UCoreBaseUserWidget
{
public:
	class UCoreInputPromptWidget*                 InputPrompt;                                       // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputPromptWidget*                 InputPrompt2;                                      // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputPromptWidget*                 InputPrompt3;                                      // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputPromptWidget*                 InputPrompt4;                                      // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   IdleAnimationName;                                 // 0x0330(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   InputKey;                                          // 0x0340(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FKey                                   InputKey2;                                         // 0x0360(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FKey                                   InputKey3;                                         // 0x0380(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FKey                                   InputKey4;                                         // 0x03A0(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C0[0x8];                                      // 0x03C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayIdleAnimation();
	void SetInputKey(const struct FKey& inputKey);
	void SetInputKey2(const struct FKey& inputKey2);
	void SetInputKey3(const struct FKey& inputKey3);
	void SetInputKey4(const struct FKey& inputKey4);
	void StopIdleAnimation();

	bool HasFourthPrompt() const;
	bool HasSecondPrompt() const;
	bool HasThirdPrompt() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInteractionPromptActionWidget">();
	}
	static class UCoreInteractionPromptActionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInteractionPromptActionWidget>();
	}
};
static_assert(alignof(UCoreInteractionPromptActionWidget) == 0x000008, "Wrong alignment on UCoreInteractionPromptActionWidget");
static_assert(sizeof(UCoreInteractionPromptActionWidget) == 0x0003C8, "Wrong size on UCoreInteractionPromptActionWidget");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputPrompt) == 0x000310, "Member 'UCoreInteractionPromptActionWidget::InputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputPrompt2) == 0x000318, "Member 'UCoreInteractionPromptActionWidget::InputPrompt2' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputPrompt3) == 0x000320, "Member 'UCoreInteractionPromptActionWidget::InputPrompt3' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputPrompt4) == 0x000328, "Member 'UCoreInteractionPromptActionWidget::InputPrompt4' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, IdleAnimationName) == 0x000330, "Member 'UCoreInteractionPromptActionWidget::IdleAnimationName' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputKey) == 0x000340, "Member 'UCoreInteractionPromptActionWidget::InputKey' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputKey2) == 0x000360, "Member 'UCoreInteractionPromptActionWidget::InputKey2' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputKey3) == 0x000380, "Member 'UCoreInteractionPromptActionWidget::InputKey3' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptActionWidget, InputKey4) == 0x0003A0, "Member 'UCoreInteractionPromptActionWidget::InputKey4' has a wrong offset!");

// Class DBDUIViewsCore.CoreInteractionPromptsContainerWidget
// 0x00D0 (0x03F8 - 0x0328)
class UCoreInteractionPromptsContainerWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x10];                                     // 0x0328(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDWrapBox*                            CenterContainerBox;                                // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDWrapBox*                            ContainerBox;                                      // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreInteractionPromptWidget> InteractionPromptWidgetClass;                    // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxDisplayedPrompts;                               // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxDisplayedCenterPrompts;                         // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                SlotMargin;                                        // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FInteractionPromptViewData>     _promptViewDataList;                               // 0x0368(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FInteractionPromptViewData>     _centerPromptViewDataList;                         // 0x0378(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UCoreInteractionPromptWidget*>   _promptWidgets;                                    // 0x0388(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreInteractionPromptWidget*>   _centerPromptWidgets;                              // 0x0398(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class FName, class UCoreInteractionPromptWidget*> _displayedPromptsMap;                     // 0x03A8(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInteractionPromptsContainerWidget">();
	}
	static class UCoreInteractionPromptsContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInteractionPromptsContainerWidget>();
	}
};
static_assert(alignof(UCoreInteractionPromptsContainerWidget) == 0x000008, "Wrong alignment on UCoreInteractionPromptsContainerWidget");
static_assert(sizeof(UCoreInteractionPromptsContainerWidget) == 0x0003F8, "Wrong size on UCoreInteractionPromptsContainerWidget");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, CenterContainerBox) == 0x000338, "Member 'UCoreInteractionPromptsContainerWidget::CenterContainerBox' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, ContainerBox) == 0x000340, "Member 'UCoreInteractionPromptsContainerWidget::ContainerBox' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, InteractionPromptWidgetClass) == 0x000348, "Member 'UCoreInteractionPromptsContainerWidget::InteractionPromptWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, MaxDisplayedPrompts) == 0x000350, "Member 'UCoreInteractionPromptsContainerWidget::MaxDisplayedPrompts' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, MaxDisplayedCenterPrompts) == 0x000354, "Member 'UCoreInteractionPromptsContainerWidget::MaxDisplayedCenterPrompts' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, SlotMargin) == 0x000358, "Member 'UCoreInteractionPromptsContainerWidget::SlotMargin' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, _promptViewDataList) == 0x000368, "Member 'UCoreInteractionPromptsContainerWidget::_promptViewDataList' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, _centerPromptViewDataList) == 0x000378, "Member 'UCoreInteractionPromptsContainerWidget::_centerPromptViewDataList' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, _promptWidgets) == 0x000388, "Member 'UCoreInteractionPromptsContainerWidget::_promptWidgets' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, _centerPromptWidgets) == 0x000398, "Member 'UCoreInteractionPromptsContainerWidget::_centerPromptWidgets' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptsContainerWidget, _displayedPromptsMap) == 0x0003A8, "Member 'UCoreInteractionPromptsContainerWidget::_displayedPromptsMap' has a wrong offset!");

// Class DBDUIViewsCore.CoreInteractionPromptWidget
// 0x0020 (0x02B8 - 0x0298)
class UCoreInteractionPromptWidget final : public UUserWidget
{
public:
	float                                         LargeTextScale;                                    // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UScaleBox*                              LargeTextScaleBox;                                 // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ActionTB;                                          // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextManager*                        _textManager;                                      // 0x02B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ClearData();
	void OnLargeTextSettingsChanged(bool isLargeTextEnabled);
	void SetData(const struct FInteractionPromptViewData& data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInteractionPromptWidget">();
	}
	static class UCoreInteractionPromptWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInteractionPromptWidget>();
	}
};
static_assert(alignof(UCoreInteractionPromptWidget) == 0x000008, "Wrong alignment on UCoreInteractionPromptWidget");
static_assert(sizeof(UCoreInteractionPromptWidget) == 0x0002B8, "Wrong size on UCoreInteractionPromptWidget");
static_assert(offsetof(UCoreInteractionPromptWidget, LargeTextScale) == 0x000298, "Member 'UCoreInteractionPromptWidget::LargeTextScale' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptWidget, LargeTextScaleBox) == 0x0002A0, "Member 'UCoreInteractionPromptWidget::LargeTextScaleBox' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptWidget, ActionTB) == 0x0002A8, "Member 'UCoreInteractionPromptWidget::ActionTB' has a wrong offset!");
static_assert(offsetof(UCoreInteractionPromptWidget, _textManager) == 0x0002B0, "Member 'UCoreInteractionPromptWidget::_textManager' has a wrong offset!");

// Class DBDUIViewsCore.CoreItemBundleWidget
// 0x0008 (0x0318 - 0x0310)
class UCoreItemBundleWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreItemBundleWidget">();
	}
	static class UCoreItemBundleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreItemBundleWidget>();
	}
};
static_assert(alignof(UCoreItemBundleWidget) == 0x000008, "Wrong alignment on UCoreItemBundleWidget");
static_assert(sizeof(UCoreItemBundleWidget) == 0x000318, "Wrong size on UCoreItemBundleWidget");

// Class DBDUIViewsCore.CoreItemInteractionWidget
// 0x0008 (0x0330 - 0x0328)
class UCoreItemInteractionWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreItemInteractionWidget">();
	}
	static class UCoreItemInteractionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreItemInteractionWidget>();
	}
};
static_assert(alignof(UCoreItemInteractionWidget) == 0x000008, "Wrong alignment on UCoreItemInteractionWidget");
static_assert(sizeof(UCoreItemInteractionWidget) == 0x000330, "Wrong size on UCoreItemInteractionWidget");

// Class DBDUIViewsCore.CoreItemWidget
// 0x0008 (0x02B8 - 0x02B0)
class UCoreItemWidget final : public UCoreBaseLoadoutPartWidget
{
public:
	uint8                                         Pad_2B0[0x8];                                      // 0x02B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreItemWidget">();
	}
	static class UCoreItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreItemWidget>();
	}
};
static_assert(alignof(UCoreItemWidget) == 0x000008, "Wrong alignment on UCoreItemWidget");
static_assert(sizeof(UCoreItemWidget) == 0x0002B8, "Wrong size on UCoreItemWidget");

// Class DBDUIViewsCore.CoreKeyListenerButtonWidget
// 0x0038 (0x0440 - 0x0408)
class UCoreKeyListenerButtonWidget final : public UCoreButtonWidget
{
public:
	bool                                          IsKeyboardLabelVisible;                            // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          InputNameTB;                                       // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_418[0x28];                                     // 0x0418(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetKeyOverride(const struct FKey& keyOverride);
	void SetUIAction(const EUIActionType actionType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreKeyListenerButtonWidget">();
	}
	static class UCoreKeyListenerButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreKeyListenerButtonWidget>();
	}
};
static_assert(alignof(UCoreKeyListenerButtonWidget) == 0x000008, "Wrong alignment on UCoreKeyListenerButtonWidget");
static_assert(sizeof(UCoreKeyListenerButtonWidget) == 0x000440, "Wrong size on UCoreKeyListenerButtonWidget");
static_assert(offsetof(UCoreKeyListenerButtonWidget, IsKeyboardLabelVisible) == 0x000408, "Member 'UCoreKeyListenerButtonWidget::IsKeyboardLabelVisible' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerButtonWidget, InputNameTB) == 0x000410, "Member 'UCoreKeyListenerButtonWidget::InputNameTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreKeyListenerInputPromptWidget
// 0x0058 (0x0368 - 0x0310)
class UCoreKeyListenerInputPromptWidget final : public UCoreBaseUserWidget
{
public:
	class FString                                 ClickedSfxName;                                    // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ClickedSfx;                                        // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreInputPromptWidget*                 InputPrompt;                                       // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LabelTB;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              AdditionalIconIMG;                                 // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _onKeyListenerInputPromptTriggeredDelegate;        // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_350[0x18];                                     // 0x0350(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEnabledChanged(bool isEnabled);
	void SetAdditionalIcon(TSoftObjectPtr<class UTexture2D> iconTexture);
	void SetEnabled(bool isEnabled);
	void SetKeyOverride(const struct FKey& keyOverride);
	void SetLabel(const class FText& label);
	void SetRepeatable(bool isRepeatable, class UCurveFloat* repetitionDelayCurve);
	void SetUIAction(const EUIActionType actionType);

	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreKeyListenerInputPromptWidget">();
	}
	static class UCoreKeyListenerInputPromptWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreKeyListenerInputPromptWidget>();
	}
};
static_assert(alignof(UCoreKeyListenerInputPromptWidget) == 0x000008, "Wrong alignment on UCoreKeyListenerInputPromptWidget");
static_assert(sizeof(UCoreKeyListenerInputPromptWidget) == 0x000368, "Wrong size on UCoreKeyListenerInputPromptWidget");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, ClickedSfxName) == 0x000310, "Member 'UCoreKeyListenerInputPromptWidget::ClickedSfxName' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, ClickedSfx) == 0x000320, "Member 'UCoreKeyListenerInputPromptWidget::ClickedSfx' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, InputPrompt) == 0x000328, "Member 'UCoreKeyListenerInputPromptWidget::InputPrompt' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, LabelTB) == 0x000330, "Member 'UCoreKeyListenerInputPromptWidget::LabelTB' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, AdditionalIconIMG) == 0x000338, "Member 'UCoreKeyListenerInputPromptWidget::AdditionalIconIMG' has a wrong offset!");
static_assert(offsetof(UCoreKeyListenerInputPromptWidget, _onKeyListenerInputPromptTriggeredDelegate) == 0x000340, "Member 'UCoreKeyListenerInputPromptWidget::_onKeyListenerInputPromptTriggeredDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreLeaningArrowsWidget
// 0x0008 (0x0330 - 0x0328)
class UCoreLeaningArrowsWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLeaningArrowsWidget">();
	}
	static class UCoreLeaningArrowsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLeaningArrowsWidget>();
	}
};
static_assert(alignof(UCoreLeaningArrowsWidget) == 0x000008, "Wrong alignment on UCoreLeaningArrowsWidget");
static_assert(sizeof(UCoreLeaningArrowsWidget) == 0x000330, "Wrong size on UCoreLeaningArrowsWidget");

// Class DBDUIViewsCore.CoreLightSensitivityWidget
// 0x0030 (0x0340 - 0x0310)
class UCoreLightSensitivityWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDBDRichTextBlock*>              _lightSensitivityRichTextBlocks;                   // 0x0318(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       FadeOutAnim;                                       // 0x0328(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_330[0x10];                                     // 0x0330(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLightSensitivityWidget">();
	}
	static class UCoreLightSensitivityWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLightSensitivityWidget>();
	}
};
static_assert(alignof(UCoreLightSensitivityWidget) == 0x000008, "Wrong alignment on UCoreLightSensitivityWidget");
static_assert(sizeof(UCoreLightSensitivityWidget) == 0x000340, "Wrong size on UCoreLightSensitivityWidget");
static_assert(offsetof(UCoreLightSensitivityWidget, _lightSensitivityRichTextBlocks) == 0x000318, "Member 'UCoreLightSensitivityWidget::_lightSensitivityRichTextBlocks' has a wrong offset!");
static_assert(offsetof(UCoreLightSensitivityWidget, FadeOutAnim) == 0x000328, "Member 'UCoreLightSensitivityWidget::FadeOutAnim' has a wrong offset!");

// Class DBDUIViewsCore.CoreLockedOverlayWidget
// 0x0000 (0x0310 - 0x0310)
class UCoreLockedOverlayWidget final : public UCoreBaseUserWidget
{
public:
	void SetIsLocked(bool isLocked, bool useAnimation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreLockedOverlayWidget">();
	}
	static class UCoreLockedOverlayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreLockedOverlayWidget>();
	}
};
static_assert(alignof(UCoreLockedOverlayWidget) == 0x000008, "Wrong alignment on UCoreLockedOverlayWidget");
static_assert(sizeof(UCoreLockedOverlayWidget) == 0x000310, "Wrong size on UCoreLockedOverlayWidget");

// Class DBDUIViewsCore.CoreMatchResultWidget
// 0x0008 (0x0330 - 0x0328)
class UCoreMatchResultWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMatchResultWidget">();
	}
	static class UCoreMatchResultWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMatchResultWidget>();
	}
};
static_assert(alignof(UCoreMatchResultWidget) == 0x000008, "Wrong alignment on UCoreMatchResultWidget");
static_assert(sizeof(UCoreMatchResultWidget) == 0x000330, "Wrong size on UCoreMatchResultWidget");

// Class DBDUIViewsCore.CoreMenuLoadoutPartWidget
// 0x0100 (0x0540 - 0x0440)
class UCoreMenuLoadoutPartWidget : public UCoreSelectableButtonWidget
{
public:
	ELoadoutSlot                                  SlotIndex;                                         // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipHorizontalAlignment                   HorizontalAlignment;                               // 0x0441(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETooltipVerticalAlignment                     VerticalAlignment;                                 // 0x0442(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_443[0x5];                                      // 0x0443(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLoadoutTooltipData                    _loadoutTooltipViewData;                           // 0x0448(0x0090)(BlueprintVisible, Transient, Protected, NativeAccessSpecifierProtected)
	class UDBDImage*                              RarityIMG;                                         // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              IconIMG;                                           // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              KillSwitchIMG;                                     // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              LockedIcon;                                        // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              Background;                                        // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ShadowOffset;                                      // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             Selected;                                          // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScaleBox*                              LayoutScale;                                       // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreOnHoverBorderWidget*               OnHoverBorder;                                     // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             StackCountTB;                                      // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             RarityTexture;                                     // 0x0528(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   _itemId;                                           // 0x0530(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_53C[0x4];                                      // 0x053C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FLoadoutTooltipData GetTooltipData();
	class FName GetWidgetItemId();
	bool GetWidgetLockedState();
	void SetBackgroundLayers();
	void SetBackgroundShadowLayers();
	void SetDisabledWidget();
	void SetEmptyWidget();
	void SetLoadoutPartData(const class UMenuLoadoutPartViewData* data);
	void SetLoadoutPartScale(float scale);
	void SetLoadoutPartTooltipData(const struct FLoadoutTooltipData& tooltipData);
	void SetSelectedState(bool selectedState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMenuLoadoutPartWidget">();
	}
	static class UCoreMenuLoadoutPartWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMenuLoadoutPartWidget>();
	}
};
static_assert(alignof(UCoreMenuLoadoutPartWidget) == 0x000008, "Wrong alignment on UCoreMenuLoadoutPartWidget");
static_assert(sizeof(UCoreMenuLoadoutPartWidget) == 0x000540, "Wrong size on UCoreMenuLoadoutPartWidget");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, SlotIndex) == 0x000440, "Member 'UCoreMenuLoadoutPartWidget::SlotIndex' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, HorizontalAlignment) == 0x000441, "Member 'UCoreMenuLoadoutPartWidget::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, VerticalAlignment) == 0x000442, "Member 'UCoreMenuLoadoutPartWidget::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, _loadoutTooltipViewData) == 0x000448, "Member 'UCoreMenuLoadoutPartWidget::_loadoutTooltipViewData' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, RarityIMG) == 0x0004D8, "Member 'UCoreMenuLoadoutPartWidget::RarityIMG' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, IconIMG) == 0x0004E0, "Member 'UCoreMenuLoadoutPartWidget::IconIMG' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, KillSwitchIMG) == 0x0004E8, "Member 'UCoreMenuLoadoutPartWidget::KillSwitchIMG' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, LockedIcon) == 0x0004F0, "Member 'UCoreMenuLoadoutPartWidget::LockedIcon' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, Background) == 0x0004F8, "Member 'UCoreMenuLoadoutPartWidget::Background' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, ShadowOffset) == 0x000500, "Member 'UCoreMenuLoadoutPartWidget::ShadowOffset' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, Selected) == 0x000508, "Member 'UCoreMenuLoadoutPartWidget::Selected' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, LayoutScale) == 0x000510, "Member 'UCoreMenuLoadoutPartWidget::LayoutScale' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, OnHoverBorder) == 0x000518, "Member 'UCoreMenuLoadoutPartWidget::OnHoverBorder' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, StackCountTB) == 0x000520, "Member 'UCoreMenuLoadoutPartWidget::StackCountTB' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, RarityTexture) == 0x000528, "Member 'UCoreMenuLoadoutPartWidget::RarityTexture' has a wrong offset!");
static_assert(offsetof(UCoreMenuLoadoutPartWidget, _itemId) == 0x000530, "Member 'UCoreMenuLoadoutPartWidget::_itemId' has a wrong offset!");

// Class DBDUIViewsCore.CoreMenuAddonWidget
// 0x0028 (0x0568 - 0x0540)
class UCoreMenuAddonWidget final : public UCoreMenuLoadoutPartWidget
{
public:
	class UDBDImage*                              DisabledState;                                     // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _addonInventoryScale;                              // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54C[0x1C];                                     // 0x054C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FText GetWidgetParentDisplayName();
	void HidePlusIcon();
	void SetAddonDisabled(bool isParentAvailable);
	void SetMenuAddonData(const class UMenuAddonViewData* data);
	void SetMenuAddonTooltipData(const struct FLoadoutTooltipData& tooltipData);
	void UpdateWidgetScale();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMenuAddonWidget">();
	}
	static class UCoreMenuAddonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMenuAddonWidget>();
	}
};
static_assert(alignof(UCoreMenuAddonWidget) == 0x000008, "Wrong alignment on UCoreMenuAddonWidget");
static_assert(sizeof(UCoreMenuAddonWidget) == 0x000568, "Wrong size on UCoreMenuAddonWidget");
static_assert(offsetof(UCoreMenuAddonWidget, DisabledState) == 0x000540, "Member 'UCoreMenuAddonWidget::DisabledState' has a wrong offset!");
static_assert(offsetof(UCoreMenuAddonWidget, _addonInventoryScale) == 0x000548, "Member 'UCoreMenuAddonWidget::_addonInventoryScale' has a wrong offset!");

// Class DBDUIViewsCore.CoreMenuItemWidget
// 0x0000 (0x0540 - 0x0540)
class UCoreMenuItemWidget final : public UCoreMenuLoadoutPartWidget
{
public:
	void SetMenuItemData(const class UMenuItemViewData* data);
	void SetMenuItemTooltipData(const struct FLoadoutTooltipData& tooltipData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMenuItemWidget">();
	}
	static class UCoreMenuItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMenuItemWidget>();
	}
};
static_assert(alignof(UCoreMenuItemWidget) == 0x000008, "Wrong alignment on UCoreMenuItemWidget");
static_assert(sizeof(UCoreMenuItemWidget) == 0x000540, "Wrong size on UCoreMenuItemWidget");

// Class DBDUIViewsCore.CoreMenuOfferingWidget
// 0x0000 (0x0540 - 0x0540)
class UCoreMenuOfferingWidget final : public UCoreMenuLoadoutPartWidget
{
public:
	void SetMenuOfferingData(const class UMenuOfferingViewData* data);
	void SetMenuOfferingTooltipData(const struct FLoadoutTooltipData& tooltipData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMenuOfferingWidget">();
	}
	static class UCoreMenuOfferingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMenuOfferingWidget>();
	}
};
static_assert(alignof(UCoreMenuOfferingWidget) == 0x000008, "Wrong alignment on UCoreMenuOfferingWidget");
static_assert(sizeof(UCoreMenuOfferingWidget) == 0x000540, "Wrong size on UCoreMenuOfferingWidget");

// Class DBDUIViewsCore.CoreMenuPerkWidget
// 0x0000 (0x0540 - 0x0540)
class UCoreMenuPerkWidget final : public UCoreMenuLoadoutPartWidget
{
public:
	void SetEmptyPerk();
	void SetMenuPerkData(const class UMenuPerkViewData* data);
	void SetMenuPerkLevel(int32 level);
	void SetMenuPerkTooltipData(const struct FLoadoutTooltipData& tooltipData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMenuPerkWidget">();
	}
	static class UCoreMenuPerkWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMenuPerkWidget>();
	}
};
static_assert(alignof(UCoreMenuPerkWidget) == 0x000008, "Wrong alignment on UCoreMenuPerkWidget");
static_assert(sizeof(UCoreMenuPerkWidget) == 0x000540, "Wrong size on UCoreMenuPerkWidget");

// Class DBDUIViewsCore.CoreMenuPowerWidget
// 0x0000 (0x0540 - 0x0540)
class UCoreMenuPowerWidget final : public UCoreMenuLoadoutPartWidget
{
public:
	void SetMenuPowerData(const class UMenuPowerViewData* data);
	void SetMenuPowerTooltipData(const struct FLoadoutTooltipData& tooltipData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreMenuPowerWidget">();
	}
	static class UCoreMenuPowerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreMenuPowerWidget>();
	}
};
static_assert(alignof(UCoreMenuPowerWidget) == 0x000008, "Wrong alignment on UCoreMenuPowerWidget");
static_assert(sizeof(UCoreMenuPowerWidget) == 0x000540, "Wrong size on UCoreMenuPowerWidget");

// Class DBDUIViewsCore.CoreOfferingInteractionWidget
// 0x0008 (0x0330 - 0x0328)
class UCoreOfferingInteractionWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOfferingInteractionWidget">();
	}
	static class UCoreOfferingInteractionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOfferingInteractionWidget>();
	}
};
static_assert(alignof(UCoreOfferingInteractionWidget) == 0x000008, "Wrong alignment on UCoreOfferingInteractionWidget");
static_assert(sizeof(UCoreOfferingInteractionWidget) == 0x000330, "Wrong size on UCoreOfferingInteractionWidget");

// Class DBDUIViewsCore.CoreOfferingWidget
// 0x0008 (0x02B8 - 0x02B0)
class UCoreOfferingWidget final : public UCoreBaseLoadoutPartWidget
{
public:
	uint8                                         Pad_2B0[0x8];                                      // 0x02B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOfferingWidget">();
	}
	static class UCoreOfferingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOfferingWidget>();
	}
};
static_assert(alignof(UCoreOfferingWidget) == 0x000008, "Wrong alignment on UCoreOfferingWidget");
static_assert(sizeof(UCoreOfferingWidget) == 0x0002B8, "Wrong size on UCoreOfferingWidget");

// Class DBDUIViewsCore.CoreOnboardingButtonHolderWidget
// 0x0030 (0x0340 - 0x0310)
class UCoreOnboardingButtonHolderWidget final : public UCoreBaseUserWidget
{
public:
	TMulticastInlineDelegate<void(class UCoreButtonWidget* clickedTutorialButton)> OnTutorialButtonClickedDelegate; // 0x0310(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnSetDataAnimationCompleteDelegate;                // 0x0320(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TArray<class UCoreOnboardingTutorialButtonWidget*> TutorialButtons;                              // 0x0330(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	class FString GetStepId();
	void OnButtonSetDataAnimationCompleteDelegate();
	void OnClickedTutorialButton(class UCoreButtonWidget* ClickedTutorialButton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOnboardingButtonHolderWidget">();
	}
	static class UCoreOnboardingButtonHolderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOnboardingButtonHolderWidget>();
	}
};
static_assert(alignof(UCoreOnboardingButtonHolderWidget) == 0x000008, "Wrong alignment on UCoreOnboardingButtonHolderWidget");
static_assert(sizeof(UCoreOnboardingButtonHolderWidget) == 0x000340, "Wrong size on UCoreOnboardingButtonHolderWidget");
static_assert(offsetof(UCoreOnboardingButtonHolderWidget, OnTutorialButtonClickedDelegate) == 0x000310, "Member 'UCoreOnboardingButtonHolderWidget::OnTutorialButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingButtonHolderWidget, OnSetDataAnimationCompleteDelegate) == 0x000320, "Member 'UCoreOnboardingButtonHolderWidget::OnSetDataAnimationCompleteDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingButtonHolderWidget, TutorialButtons) == 0x000330, "Member 'UCoreOnboardingButtonHolderWidget::TutorialButtons' has a wrong offset!");

// Class DBDUIViewsCore.CoreOnboardingMenuTitleWidget
// 0x0000 (0x0310 - 0x0310)
class UCoreOnboardingMenuTitleWidget final : public UCoreBaseUserWidget
{
public:
	void ResetOnboardingMenuSubtitle();
	void SetOnboardingMenuDoubleTitle(const class FText& menuTitle, const class FText& menuSubTitle);
	void SetOnboardingMenuSubtitle(const class FText& menuTitle);
	void SetOnboardingMenuTitle(const class FText& menuTitle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOnboardingMenuTitleWidget">();
	}
	static class UCoreOnboardingMenuTitleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOnboardingMenuTitleWidget>();
	}
};
static_assert(alignof(UCoreOnboardingMenuTitleWidget) == 0x000008, "Wrong alignment on UCoreOnboardingMenuTitleWidget");
static_assert(sizeof(UCoreOnboardingMenuTitleWidget) == 0x000310, "Wrong size on UCoreOnboardingMenuTitleWidget");

// Class DBDUIViewsCore.CoreOnboardingMenuWidget
// 0x00A0 (0x03B0 - 0x0310)
class UCoreOnboardingMenuWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreTabContainerWidget*                OnboardingMenuTabs;                                // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreOnboardingMenuTitleWidget*         MenuTitle;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               BackInputSwitcher;                                 // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterInputSwitcherWidget*         SettingsInputSwitcher;                             // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreFooterInputSwitcherWidget*         QuitGameInputSwitcher;                             // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               ChangeAccountInputSwitcher;                        // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              BackActionDelegate;                                // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              SettingsActionDelegate;                            // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              QuitGameActionDelegate;                            // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              ChangeAccountActionDelegate;                       // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(EOnboardingMenuState menuState)> MenuTabSelectedDelegate;          // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(EOnboardingMenuState selectedTabIndex)> MenuTabSelectedAgainDelegate; // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A8[0x8];                                      // 0x03A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnMenuTabSelectedAgain(class UCoreSelectableButtonWidget* selectedButton);
	void SetBackButton(const bool isFTUE);
	void SetTitleText(const bool isInTutorial);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOnboardingMenuWidget">();
	}
	static class UCoreOnboardingMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOnboardingMenuWidget>();
	}
};
static_assert(alignof(UCoreOnboardingMenuWidget) == 0x000008, "Wrong alignment on UCoreOnboardingMenuWidget");
static_assert(sizeof(UCoreOnboardingMenuWidget) == 0x0003B0, "Wrong size on UCoreOnboardingMenuWidget");
static_assert(offsetof(UCoreOnboardingMenuWidget, OnboardingMenuTabs) == 0x000318, "Member 'UCoreOnboardingMenuWidget::OnboardingMenuTabs' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, MenuTitle) == 0x000320, "Member 'UCoreOnboardingMenuWidget::MenuTitle' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, BackInputSwitcher) == 0x000328, "Member 'UCoreOnboardingMenuWidget::BackInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, SettingsInputSwitcher) == 0x000330, "Member 'UCoreOnboardingMenuWidget::SettingsInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, QuitGameInputSwitcher) == 0x000338, "Member 'UCoreOnboardingMenuWidget::QuitGameInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, ChangeAccountInputSwitcher) == 0x000340, "Member 'UCoreOnboardingMenuWidget::ChangeAccountInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, BackActionDelegate) == 0x000348, "Member 'UCoreOnboardingMenuWidget::BackActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, SettingsActionDelegate) == 0x000358, "Member 'UCoreOnboardingMenuWidget::SettingsActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, QuitGameActionDelegate) == 0x000368, "Member 'UCoreOnboardingMenuWidget::QuitGameActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, ChangeAccountActionDelegate) == 0x000378, "Member 'UCoreOnboardingMenuWidget::ChangeAccountActionDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, MenuTabSelectedDelegate) == 0x000388, "Member 'UCoreOnboardingMenuWidget::MenuTabSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingMenuWidget, MenuTabSelectedAgainDelegate) == 0x000398, "Member 'UCoreOnboardingMenuWidget::MenuTabSelectedAgainDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreOnboardingTutorialButtonWidget
// 0x00E8 (0x04F0 - 0x0408)
class UCoreOnboardingTutorialButtonWidget final : public UCoreButtonWidget
{
public:
	TMulticastInlineDelegate<void()>              OnSetDataAnimationCompleteDelegate;                // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	class FString                                 UnavailablePressedSfxName;                         // 0x0418(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          UnavailablePressedSfx;                             // 0x0428(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          TitleText;                                         // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          DescriptionText;                                   // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RewardsText;                                       // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              RoleIcon;                                          // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetSwitcher*                        StateSwitcher;                                     // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              LockedImage;                                       // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              CompletedImage;                                    // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreRewardWrapperWidget*>       RewardWrappers;                                    // 0x0468(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FOnboardingTutorialButtonViewData      ViewData;                                          // 0x0478(0x0078)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)

public:
	void OnRewardClicked(class UCoreButtonWidget* buttonTarget);
	void OnRewardPressed(class UCoreButtonWidget* buttonTarget);
	void OnRewardReleased(class UCoreButtonWidget* buttonTarget);
	void SetData(const struct FOnboardingTutorialButtonViewData& viewData, bool isRefreshingWithAnimation);
	void SetIsKillSwitch(bool isKillSwitch);
	void SetUIEnabled(bool enabled);
	void SetVisual();

	bool IsInUnavailableStep() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOnboardingTutorialButtonWidget">();
	}
	static class UCoreOnboardingTutorialButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOnboardingTutorialButtonWidget>();
	}
};
static_assert(alignof(UCoreOnboardingTutorialButtonWidget) == 0x000008, "Wrong alignment on UCoreOnboardingTutorialButtonWidget");
static_assert(sizeof(UCoreOnboardingTutorialButtonWidget) == 0x0004F0, "Wrong size on UCoreOnboardingTutorialButtonWidget");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, OnSetDataAnimationCompleteDelegate) == 0x000408, "Member 'UCoreOnboardingTutorialButtonWidget::OnSetDataAnimationCompleteDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, UnavailablePressedSfxName) == 0x000418, "Member 'UCoreOnboardingTutorialButtonWidget::UnavailablePressedSfxName' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, UnavailablePressedSfx) == 0x000428, "Member 'UCoreOnboardingTutorialButtonWidget::UnavailablePressedSfx' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, TitleText) == 0x000430, "Member 'UCoreOnboardingTutorialButtonWidget::TitleText' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, DescriptionText) == 0x000438, "Member 'UCoreOnboardingTutorialButtonWidget::DescriptionText' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, RewardsText) == 0x000440, "Member 'UCoreOnboardingTutorialButtonWidget::RewardsText' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, RoleIcon) == 0x000448, "Member 'UCoreOnboardingTutorialButtonWidget::RoleIcon' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, StateSwitcher) == 0x000450, "Member 'UCoreOnboardingTutorialButtonWidget::StateSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, LockedImage) == 0x000458, "Member 'UCoreOnboardingTutorialButtonWidget::LockedImage' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, CompletedImage) == 0x000460, "Member 'UCoreOnboardingTutorialButtonWidget::CompletedImage' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, RewardWrappers) == 0x000468, "Member 'UCoreOnboardingTutorialButtonWidget::RewardWrappers' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialButtonWidget, ViewData) == 0x000478, "Member 'UCoreOnboardingTutorialButtonWidget::ViewData' has a wrong offset!");

// Class DBDUIViewsCore.CoreOnboardingTutorialPanelWidget
// 0x0070 (0x0380 - 0x0310)
class UCoreOnboardingTutorialPanelWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UOverlay*>                       OnboardingButtonHolderContainers;                  // 0x0318(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FString& stepId, const class FString& tutorialId)> TutorialSelectedDelegate; // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UUserWidget*                            LoadingWidget;                                     // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _arrowHighlightRenderOpacity;                      // 0x0340(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _arrowUnhighlightRenderOpacity;                    // 0x0344(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreOnboardingButtonHolderWidget> _oneTutorialButtonHolderWidgetClass;        // 0x0348(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreOnboardingButtonHolderWidget> _twoTutorialButtonHolderWidgetClass;        // 0x0350(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreOnboardingButtonHolderWidget*> _onboardingButtonHolderWidgets;                 // 0x0358(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPendingStepData>               _pendingData;                                      // 0x0368(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckNextPendingButtonUpdate();
	void NextPendingButtonUpdated();
	void SetTutorialDescription(const class FText& description, bool isWarning);
	void SetTutorialSeparators(const class FString& completedStepId);
	void TryBroadcastSelectedTutorial(class UCoreButtonWidget* buttonTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOnboardingTutorialPanelWidget">();
	}
	static class UCoreOnboardingTutorialPanelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOnboardingTutorialPanelWidget>();
	}
};
static_assert(alignof(UCoreOnboardingTutorialPanelWidget) == 0x000008, "Wrong alignment on UCoreOnboardingTutorialPanelWidget");
static_assert(sizeof(UCoreOnboardingTutorialPanelWidget) == 0x000380, "Wrong size on UCoreOnboardingTutorialPanelWidget");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, OnboardingButtonHolderContainers) == 0x000318, "Member 'UCoreOnboardingTutorialPanelWidget::OnboardingButtonHolderContainers' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, TutorialSelectedDelegate) == 0x000328, "Member 'UCoreOnboardingTutorialPanelWidget::TutorialSelectedDelegate' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, LoadingWidget) == 0x000338, "Member 'UCoreOnboardingTutorialPanelWidget::LoadingWidget' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, _arrowHighlightRenderOpacity) == 0x000340, "Member 'UCoreOnboardingTutorialPanelWidget::_arrowHighlightRenderOpacity' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, _arrowUnhighlightRenderOpacity) == 0x000344, "Member 'UCoreOnboardingTutorialPanelWidget::_arrowUnhighlightRenderOpacity' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, _oneTutorialButtonHolderWidgetClass) == 0x000348, "Member 'UCoreOnboardingTutorialPanelWidget::_oneTutorialButtonHolderWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, _twoTutorialButtonHolderWidgetClass) == 0x000350, "Member 'UCoreOnboardingTutorialPanelWidget::_twoTutorialButtonHolderWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, _onboardingButtonHolderWidgets) == 0x000358, "Member 'UCoreOnboardingTutorialPanelWidget::_onboardingButtonHolderWidgets' has a wrong offset!");
static_assert(offsetof(UCoreOnboardingTutorialPanelWidget, _pendingData) == 0x000368, "Member 'UCoreOnboardingTutorialPanelWidget::_pendingData' has a wrong offset!");

// Class DBDUIViewsCore.CoreOnHoverBorderWidget
// 0x0000 (0x0310 - 0x0310)
class UCoreOnHoverBorderWidget final : public UCoreBaseUserWidget
{
public:
	void BindToButton(class UCoreButtonWidget* buttonToBindOn);
	void PlayHoveredAnimation(bool playForward);
	void PlayPressedAnimation(bool playForward);
	void UnbindFromButton();
	void UpdateColors(const struct FLinearColor& progressBarColor, const struct FLinearColor& backgroundColor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreOnHoverBorderWidget">();
	}
	static class UCoreOnHoverBorderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreOnHoverBorderWidget>();
	}
};
static_assert(alignof(UCoreOnHoverBorderWidget) == 0x000008, "Wrong alignment on UCoreOnHoverBorderWidget");
static_assert(sizeof(UCoreOnHoverBorderWidget) == 0x000310, "Wrong size on UCoreOnHoverBorderWidget");

// Class DBDUIViewsCore.CorePaginationContainerWidget
// 0x00D8 (0x0438 - 0x0360)
class UCorePaginationContainerWidget final : public UCoreButtonSelector
{
public:
	TMulticastInlineDelegate<void(int32 selectedPage, bool isUpdate)> OnSelectedPageDelegate;        // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UCoreSelectableButtonWidget> PaginationWidgetClass;                            // 0x0370(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxNumberOfPages;                                  // 0x0378(0x0004)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridPanel*                             PaginationContainer;                               // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSelectableButtonWidget*            FirstPage;                                         // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          FirstEllipsis;                                     // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          LastEllipsis;                                      // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSelectableButtonWidget*            LastPage;                                          // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _widgetPadding;                                    // 0x03A8(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TArray<class UCoreSelectableButtonWidget*>    _paginationWidgetList;                             // 0x03B8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C8[0x70];                                     // 0x03C8(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetCurrentPage();
	void OnPaginationSelected(class UCoreSelectableButtonWidget* selectedButton);
	void UpdateSelectedWidget(int32 currentIndex, int32 numberOfPages);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePaginationContainerWidget">();
	}
	static class UCorePaginationContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePaginationContainerWidget>();
	}
};
static_assert(alignof(UCorePaginationContainerWidget) == 0x000008, "Wrong alignment on UCorePaginationContainerWidget");
static_assert(sizeof(UCorePaginationContainerWidget) == 0x000438, "Wrong size on UCorePaginationContainerWidget");
static_assert(offsetof(UCorePaginationContainerWidget, OnSelectedPageDelegate) == 0x000360, "Member 'UCorePaginationContainerWidget::OnSelectedPageDelegate' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, PaginationWidgetClass) == 0x000370, "Member 'UCorePaginationContainerWidget::PaginationWidgetClass' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, MaxNumberOfPages) == 0x000378, "Member 'UCorePaginationContainerWidget::MaxNumberOfPages' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, PaginationContainer) == 0x000380, "Member 'UCorePaginationContainerWidget::PaginationContainer' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, FirstPage) == 0x000388, "Member 'UCorePaginationContainerWidget::FirstPage' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, FirstEllipsis) == 0x000390, "Member 'UCorePaginationContainerWidget::FirstEllipsis' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, LastEllipsis) == 0x000398, "Member 'UCorePaginationContainerWidget::LastEllipsis' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, LastPage) == 0x0003A0, "Member 'UCorePaginationContainerWidget::LastPage' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, _widgetPadding) == 0x0003A8, "Member 'UCorePaginationContainerWidget::_widgetPadding' has a wrong offset!");
static_assert(offsetof(UCorePaginationContainerWidget, _paginationWidgetList) == 0x0003B8, "Member 'UCorePaginationContainerWidget::_paginationWidgetList' has a wrong offset!");

// Class DBDUIViewsCore.CorePerksContainerWidget
// 0x0028 (0x0350 - 0x0328)
class UCorePerksContainerWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCorePerkWidget*>                PerkWidgets;                                       // 0x0330(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<TScriptInterface<class IPerkViewInterface>> _perkViewInterfaces;                          // 0x0340(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePerksContainerWidget">();
	}
	static class UCorePerksContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePerksContainerWidget>();
	}
};
static_assert(alignof(UCorePerksContainerWidget) == 0x000008, "Wrong alignment on UCorePerksContainerWidget");
static_assert(sizeof(UCorePerksContainerWidget) == 0x000350, "Wrong size on UCorePerksContainerWidget");
static_assert(offsetof(UCorePerksContainerWidget, PerkWidgets) == 0x000330, "Member 'UCorePerksContainerWidget::PerkWidgets' has a wrong offset!");
static_assert(offsetof(UCorePerksContainerWidget, _perkViewInterfaces) == 0x000340, "Member 'UCorePerksContainerWidget::_perkViewInterfaces' has a wrong offset!");

// Class DBDUIViewsCore.CorePerkWidget
// 0x0008 (0x02B8 - 0x02B0)
class UCorePerkWidget final : public UCoreBaseLoadoutPartWidget
{
public:
	uint8                                         Pad_2B0[0x8];                                      // 0x02B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePerkWidget">();
	}
	static class UCorePerkWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePerkWidget>();
	}
};
static_assert(alignof(UCorePerkWidget) == 0x000008, "Wrong alignment on UCorePerkWidget");
static_assert(sizeof(UCorePerkWidget) == 0x0002B8, "Wrong size on UCorePerkWidget");

// Class DBDUIViewsCore.CorePingStatusWidget
// 0x0008 (0x0330 - 0x0328)
class UCorePingStatusWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePingStatusWidget">();
	}
	static class UCorePingStatusWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePingStatusWidget>();
	}
};
static_assert(alignof(UCorePingStatusWidget) == 0x000008, "Wrong alignment on UCorePingStatusWidget");
static_assert(sizeof(UCorePingStatusWidget) == 0x000330, "Wrong size on UCorePingStatusWidget");

// Class DBDUIViewsCore.CorePlayerLevelWidget
// 0x0000 (0x0310 - 0x0310)
class UCorePlayerLevelWidget final : public UCoreBaseUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerLevelWidget">();
	}
	static class UCorePlayerLevelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerLevelWidget>();
	}
};
static_assert(alignof(UCorePlayerLevelWidget) == 0x000008, "Wrong alignment on UCorePlayerLevelWidget");
static_assert(sizeof(UCorePlayerLevelWidget) == 0x000310, "Wrong size on UCorePlayerLevelWidget");

// Class DBDUIViewsCore.CorePlayerNameWidget
// 0x0008 (0x0318 - 0x0310)
class UCorePlayerNameWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDTextBlock*                          PlayerNameTB;                                      // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetPlayerName(const class FText& playerName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerNameWidget">();
	}
	static class UCorePlayerNameWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerNameWidget>();
	}
};
static_assert(alignof(UCorePlayerNameWidget) == 0x000008, "Wrong alignment on UCorePlayerNameWidget");
static_assert(sizeof(UCorePlayerNameWidget) == 0x000318, "Wrong size on UCorePlayerNameWidget");
static_assert(offsetof(UCorePlayerNameWidget, PlayerNameTB) == 0x000310, "Member 'UCorePlayerNameWidget::PlayerNameTB' has a wrong offset!");

// Class DBDUIViewsCore.CorePlayerProfileWidget
// 0x0028 (0x0338 - 0x0310)
class UCorePlayerProfileWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreWalletWidget*                      Wallet;                                            // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePlayerNameWidget*                  PlayerName;                                        // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePlayerLevelWidget*                 PlayerLevel;                                       // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePlayerRankWidget*                  PlayerRank;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerProfileWidget">();
	}
	static class UCorePlayerProfileWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerProfileWidget>();
	}
};
static_assert(alignof(UCorePlayerProfileWidget) == 0x000008, "Wrong alignment on UCorePlayerProfileWidget");
static_assert(sizeof(UCorePlayerProfileWidget) == 0x000338, "Wrong size on UCorePlayerProfileWidget");
static_assert(offsetof(UCorePlayerProfileWidget, Wallet) == 0x000318, "Member 'UCorePlayerProfileWidget::Wallet' has a wrong offset!");
static_assert(offsetof(UCorePlayerProfileWidget, PlayerName) == 0x000320, "Member 'UCorePlayerProfileWidget::PlayerName' has a wrong offset!");
static_assert(offsetof(UCorePlayerProfileWidget, PlayerLevel) == 0x000328, "Member 'UCorePlayerProfileWidget::PlayerLevel' has a wrong offset!");
static_assert(offsetof(UCorePlayerProfileWidget, PlayerRank) == 0x000330, "Member 'UCorePlayerProfileWidget::PlayerRank' has a wrong offset!");

// Class DBDUIViewsCore.CorePlayerRankWidget
// 0x0000 (0x0310 - 0x0310)
class UCorePlayerRankWidget final : public UCoreBaseUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerRankWidget">();
	}
	static class UCorePlayerRankWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerRankWidget>();
	}
};
static_assert(alignof(UCorePlayerRankWidget) == 0x000008, "Wrong alignment on UCorePlayerRankWidget");
static_assert(sizeof(UCorePlayerRankWidget) == 0x000310, "Wrong size on UCorePlayerRankWidget");

// Class DBDUIViewsCore.CorePlayerStatusesContainerWidget
// 0x0030 (0x0358 - 0x0328)
class UCorePlayerStatusesContainerWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x10];                                     // 0x0328(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCorePlayerStatusWidget*>        PlayerStatusWidgets;                               // 0x0338(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<TScriptInterface<class IPlayerStatusViewInterface>> _playerStatusViewInterfaces;          // 0x0348(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerStatusesContainerWidget">();
	}
	static class UCorePlayerStatusesContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerStatusesContainerWidget>();
	}
};
static_assert(alignof(UCorePlayerStatusesContainerWidget) == 0x000008, "Wrong alignment on UCorePlayerStatusesContainerWidget");
static_assert(sizeof(UCorePlayerStatusesContainerWidget) == 0x000358, "Wrong size on UCorePlayerStatusesContainerWidget");
static_assert(offsetof(UCorePlayerStatusesContainerWidget, PlayerStatusWidgets) == 0x000338, "Member 'UCorePlayerStatusesContainerWidget::PlayerStatusWidgets' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusesContainerWidget, _playerStatusViewInterfaces) == 0x000348, "Member 'UCorePlayerStatusesContainerWidget::_playerStatusViewInterfaces' has a wrong offset!");

// Class DBDUIViewsCore.CorePlayerStatusKillerEffectWidget
// 0x0000 (0x0328 - 0x0328)
class UCorePlayerStatusKillerEffectWidget : public UCoreBaseHudWidget
{
public:
	void ClearVisual();
	void SetKillerData(const struct FPlayerStatusViewData& data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerStatusKillerEffectWidget">();
	}
	static class UCorePlayerStatusKillerEffectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerStatusKillerEffectWidget>();
	}
};
static_assert(alignof(UCorePlayerStatusKillerEffectWidget) == 0x000008, "Wrong alignment on UCorePlayerStatusKillerEffectWidget");
static_assert(sizeof(UCorePlayerStatusKillerEffectWidget) == 0x000328, "Wrong size on UCorePlayerStatusKillerEffectWidget");

// Class DBDUIViewsCore.CorePlayerStatusKillerEffectK07Widget
// 0x0000 (0x0328 - 0x0328)
class UCorePlayerStatusKillerEffectK07Widget final : public UCorePlayerStatusKillerEffectWidget
{
public:
	void AfflictionHit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerStatusKillerEffectK07Widget">();
	}
	static class UCorePlayerStatusKillerEffectK07Widget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerStatusKillerEffectK07Widget>();
	}
};
static_assert(alignof(UCorePlayerStatusKillerEffectK07Widget) == 0x000008, "Wrong alignment on UCorePlayerStatusKillerEffectK07Widget");
static_assert(sizeof(UCorePlayerStatusKillerEffectK07Widget) == 0x000328, "Wrong size on UCorePlayerStatusKillerEffectK07Widget");

// Class DBDUIViewsCore.CorePlayerStatusWidget
// 0x0120 (0x0448 - 0x0328)
class UCorePlayerStatusWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNameLength;                                     // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPlayerStatus, struct FPlayerStatusAssets> PlayerStatusAssets;                              // 0x0338(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ObsessionSfx;                                      // 0x0388(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          PlayerNameTextfield;                               // 0x0390(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               KillerStatusContainer;                             // 0x0398(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPlayerStatusViewData                  _cachedViewData;                                   // 0x03A0(0x0048)(BlueprintVisible, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E8[0x50];                                     // 0x03E8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UCorePlayerStatusKillerEffectWidget*    _killerStatusEffectWidget;                         // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             _killerStatusDataMappingDB;                        // 0x0440(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	struct FPlayerStatusViewData CacheViewData(const struct FPlayerStatusViewData& data);

	class UDataTable* GetKillerStatusDataMappingDB() const;
	class UCorePlayerStatusKillerEffectWidget* GetKillerStatusEffectWidget() const;
	EPlayerStateChangeType GetPlayerStateChangeType(const struct FPlayerStatusViewData& newViewData) const;
	bool HasKillerStatusDataChanged(const struct FPlayerStatusViewData& newViewData) const;
	bool HasObsessionStateChanged(EObsessionUIState newObsessionState) const;
	bool HasPlayerStateChanged(EPlayerStatus newPlayerState) const;
	bool HasPlayerStatusDataChanged(const struct FPlayerStatusViewData& newViewData) const;
	bool HasTimerProgressChanged(float newTimerProgress) const;
	bool ShouldPlaySleepAnimation(ESleepingUIState newSleepState) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePlayerStatusWidget">();
	}
	static class UCorePlayerStatusWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePlayerStatusWidget>();
	}
};
static_assert(alignof(UCorePlayerStatusWidget) == 0x000008, "Wrong alignment on UCorePlayerStatusWidget");
static_assert(sizeof(UCorePlayerStatusWidget) == 0x000448, "Wrong size on UCorePlayerStatusWidget");
static_assert(offsetof(UCorePlayerStatusWidget, MaxNameLength) == 0x000330, "Member 'UCorePlayerStatusWidget::MaxNameLength' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, PlayerStatusAssets) == 0x000338, "Member 'UCorePlayerStatusWidget::PlayerStatusAssets' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, ObsessionSfx) == 0x000388, "Member 'UCorePlayerStatusWidget::ObsessionSfx' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, PlayerNameTextfield) == 0x000390, "Member 'UCorePlayerStatusWidget::PlayerNameTextfield' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, KillerStatusContainer) == 0x000398, "Member 'UCorePlayerStatusWidget::KillerStatusContainer' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, _cachedViewData) == 0x0003A0, "Member 'UCorePlayerStatusWidget::_cachedViewData' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, _killerStatusEffectWidget) == 0x000438, "Member 'UCorePlayerStatusWidget::_killerStatusEffectWidget' has a wrong offset!");
static_assert(offsetof(UCorePlayerStatusWidget, _killerStatusDataMappingDB) == 0x000440, "Member 'UCorePlayerStatusWidget::_killerStatusDataMappingDB' has a wrong offset!");

// Class DBDUIViewsCore.CorePowerBundleWidget
// 0x0008 (0x0318 - 0x0310)
class UCorePowerBundleWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePowerBundleWidget">();
	}
	static class UCorePowerBundleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePowerBundleWidget>();
	}
};
static_assert(alignof(UCorePowerBundleWidget) == 0x000008, "Wrong alignment on UCorePowerBundleWidget");
static_assert(sizeof(UCorePowerBundleWidget) == 0x000318, "Wrong size on UCorePowerBundleWidget");

// Class DBDUIViewsCore.CorePowerWidget
// 0x0008 (0x02B8 - 0x02B0)
class UCorePowerWidget final : public UCoreBaseLoadoutPartWidget
{
public:
	uint8                                         Pad_2B0[0x8];                                      // 0x02B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePowerWidget">();
	}
	static class UCorePowerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePowerWidget>();
	}
};
static_assert(alignof(UCorePowerWidget) == 0x000008, "Wrong alignment on UCorePowerWidget");
static_assert(sizeof(UCorePowerWidget) == 0x0002B8, "Wrong size on UCorePowerWidget");

// Class DBDUIViewsCore.CorePresetWidgetContainer
// 0x0040 (0x03A0 - 0x0360)
class UCorePresetWidgetContainer final : public UCoreButtonSelector
{
public:
	TMulticastInlineDelegate<void(int32 selectedPreset)> OnSelectedPresetDelegate;                   // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCoreSelectableButtonWidget*            Preset_1;                                          // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSelectableButtonWidget*            Preset_2;                                          // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSelectableButtonWidget*            Preset_3;                                          // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreSelectableButtonWidget*            Preset_4;                                          // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreSelectableButtonWidget*>    _presetWidgets;                                    // 0x0390(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void SetPreset(const TArray<int32>& presetData, const int32 selectedPreset);
	void SetSelectedPreset(class UCoreSelectableButtonWidget* selectedButton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CorePresetWidgetContainer">();
	}
	static class UCorePresetWidgetContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorePresetWidgetContainer>();
	}
};
static_assert(alignof(UCorePresetWidgetContainer) == 0x000008, "Wrong alignment on UCorePresetWidgetContainer");
static_assert(sizeof(UCorePresetWidgetContainer) == 0x0003A0, "Wrong size on UCorePresetWidgetContainer");
static_assert(offsetof(UCorePresetWidgetContainer, OnSelectedPresetDelegate) == 0x000360, "Member 'UCorePresetWidgetContainer::OnSelectedPresetDelegate' has a wrong offset!");
static_assert(offsetof(UCorePresetWidgetContainer, Preset_1) == 0x000370, "Member 'UCorePresetWidgetContainer::Preset_1' has a wrong offset!");
static_assert(offsetof(UCorePresetWidgetContainer, Preset_2) == 0x000378, "Member 'UCorePresetWidgetContainer::Preset_2' has a wrong offset!");
static_assert(offsetof(UCorePresetWidgetContainer, Preset_3) == 0x000380, "Member 'UCorePresetWidgetContainer::Preset_3' has a wrong offset!");
static_assert(offsetof(UCorePresetWidgetContainer, Preset_4) == 0x000388, "Member 'UCorePresetWidgetContainer::Preset_4' has a wrong offset!");
static_assert(offsetof(UCorePresetWidgetContainer, _presetWidgets) == 0x000390, "Member 'UCorePresetWidgetContainer::_presetWidgets' has a wrong offset!");

// Class DBDUIViewsCore.CoreRewardWrapperWidget
// 0x0028 (0x02C0 - 0x0298)
class UCoreRewardWrapperWidget final : public UUserWidget
{
public:
	TSubclassOf<class UCoreCharacterRewardWidget> CharacterRewardWidget;                             // 0x0298(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreCurrencyProgressionRewardWidget> CurrencyProgressionRewardWidget;         // 0x02A0(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreCustomizationRewardWidget> CustomizationRewardWidget;                     // 0x02A8(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           RewardContainer;                                   // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreRewardWidget*                      _rewardWidget;                                     // 0x02B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ClearData();
	class UCoreRewardWidget* GetRewardWidget();
	void SetData(const struct FRewardWrapperViewData& viewData);
	void SetIsClickable(bool isClickable);
	void SetIsLocked(bool isLocked, bool playAnimation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreRewardWrapperWidget">();
	}
	static class UCoreRewardWrapperWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreRewardWrapperWidget>();
	}
};
static_assert(alignof(UCoreRewardWrapperWidget) == 0x000008, "Wrong alignment on UCoreRewardWrapperWidget");
static_assert(sizeof(UCoreRewardWrapperWidget) == 0x0002C0, "Wrong size on UCoreRewardWrapperWidget");
static_assert(offsetof(UCoreRewardWrapperWidget, CharacterRewardWidget) == 0x000298, "Member 'UCoreRewardWrapperWidget::CharacterRewardWidget' has a wrong offset!");
static_assert(offsetof(UCoreRewardWrapperWidget, CurrencyProgressionRewardWidget) == 0x0002A0, "Member 'UCoreRewardWrapperWidget::CurrencyProgressionRewardWidget' has a wrong offset!");
static_assert(offsetof(UCoreRewardWrapperWidget, CustomizationRewardWidget) == 0x0002A8, "Member 'UCoreRewardWrapperWidget::CustomizationRewardWidget' has a wrong offset!");
static_assert(offsetof(UCoreRewardWrapperWidget, RewardContainer) == 0x0002B0, "Member 'UCoreRewardWrapperWidget::RewardContainer' has a wrong offset!");
static_assert(offsetof(UCoreRewardWrapperWidget, _rewardWidget) == 0x0002B8, "Member 'UCoreRewardWrapperWidget::_rewardWidget' has a wrong offset!");

// Class DBDUIViewsCore.CoreScreenIndicatorsContainerWidget
// 0x0080 (0x03A8 - 0x0328)
class UCoreScreenIndicatorsContainerWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InactiveThreshold;                                 // 0x0330(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           Container;                                         // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreScreenIndicatorWidget> ScreenIndicatorClass;                              // 0x0340(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FString, class UCoreScreenIndicatorWidget*> _screenIndicatorsMap;                     // 0x0348(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreScreenIndicatorWidget*>     _screenIndicatorsPool;                             // 0x0398(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	TMap<class FString, class UCoreScreenIndicatorWidget*> GetScreenIndicatorsMap();

	class FString FindScreenIndicatorKey(class UCoreScreenIndicatorWidget* value) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreScreenIndicatorsContainerWidget">();
	}
	static class UCoreScreenIndicatorsContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreScreenIndicatorsContainerWidget>();
	}
};
static_assert(alignof(UCoreScreenIndicatorsContainerWidget) == 0x000008, "Wrong alignment on UCoreScreenIndicatorsContainerWidget");
static_assert(sizeof(UCoreScreenIndicatorsContainerWidget) == 0x0003A8, "Wrong size on UCoreScreenIndicatorsContainerWidget");
static_assert(offsetof(UCoreScreenIndicatorsContainerWidget, InactiveThreshold) == 0x000330, "Member 'UCoreScreenIndicatorsContainerWidget::InactiveThreshold' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorsContainerWidget, Container) == 0x000338, "Member 'UCoreScreenIndicatorsContainerWidget::Container' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorsContainerWidget, ScreenIndicatorClass) == 0x000340, "Member 'UCoreScreenIndicatorsContainerWidget::ScreenIndicatorClass' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorsContainerWidget, _screenIndicatorsMap) == 0x000348, "Member 'UCoreScreenIndicatorsContainerWidget::_screenIndicatorsMap' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorsContainerWidget, _screenIndicatorsPool) == 0x000398, "Member 'UCoreScreenIndicatorsContainerWidget::_screenIndicatorsPool' has a wrong offset!");

// Class DBDUIViewsCore.CoreScreenIndicatorWidget
// 0x0020 (0x0330 - 0x0310)
class UCoreScreenIndicatorWidget final : public UCoreBaseUserWidget
{
public:
	float                                         InactiveTime;                                      // 0x0310(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              IndicatorPadding;                                  // 0x0314(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DistanceClamping;                                  // 0x031C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceRatio;                                  // 0x0324(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceAlpha;                                  // 0x0328(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearData();
	void SetData(const struct FScreenIndicatorViewData& data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreScreenIndicatorWidget">();
	}
	static class UCoreScreenIndicatorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreScreenIndicatorWidget>();
	}
};
static_assert(alignof(UCoreScreenIndicatorWidget) == 0x000008, "Wrong alignment on UCoreScreenIndicatorWidget");
static_assert(sizeof(UCoreScreenIndicatorWidget) == 0x000330, "Wrong size on UCoreScreenIndicatorWidget");
static_assert(offsetof(UCoreScreenIndicatorWidget, InactiveTime) == 0x000310, "Member 'UCoreScreenIndicatorWidget::InactiveTime' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorWidget, IndicatorPadding) == 0x000314, "Member 'UCoreScreenIndicatorWidget::IndicatorPadding' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorWidget, DistanceClamping) == 0x00031C, "Member 'UCoreScreenIndicatorWidget::DistanceClamping' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorWidget, MinDistanceRatio) == 0x000324, "Member 'UCoreScreenIndicatorWidget::MinDistanceRatio' has a wrong offset!");
static_assert(offsetof(UCoreScreenIndicatorWidget, MinDistanceAlpha) == 0x000328, "Member 'UCoreScreenIndicatorWidget::MinDistanceAlpha' has a wrong offset!");

// Class DBDUIViewsCore.CoreSkillCheckWidget
// 0x0008 (0x0330 - 0x0328)
class UCoreSkillCheckWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSkillCheckWidget">();
	}
	static class UCoreSkillCheckWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSkillCheckWidget>();
	}
};
static_assert(alignof(UCoreSkillCheckWidget) == 0x000008, "Wrong alignment on UCoreSkillCheckWidget");
static_assert(sizeof(UCoreSkillCheckWidget) == 0x000330, "Wrong size on UCoreSkillCheckWidget");

// Class DBDUIViewsCore.CoreSpectateBarWidget
// 0x0050 (0x0378 - 0x0328)
class UCoreSpectateBarWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               LeaveInputSwitcher;                                // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               LeftArrowInputSwitcher;                            // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               RightArrowInputSwitcher;                           // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _leaveTriggeredDelegate;                           // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _leftArrowTriggeredDelegate;                       // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              _rightArrowTriggeredDelegate;                      // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	void OnLeaveTriggered();
	void OnLeftArrowTriggered();
	void OnRightArrowTriggered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSpectateBarWidget">();
	}
	static class UCoreSpectateBarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSpectateBarWidget>();
	}
};
static_assert(alignof(UCoreSpectateBarWidget) == 0x000008, "Wrong alignment on UCoreSpectateBarWidget");
static_assert(sizeof(UCoreSpectateBarWidget) == 0x000378, "Wrong size on UCoreSpectateBarWidget");
static_assert(offsetof(UCoreSpectateBarWidget, LeaveInputSwitcher) == 0x000330, "Member 'UCoreSpectateBarWidget::LeaveInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreSpectateBarWidget, LeftArrowInputSwitcher) == 0x000338, "Member 'UCoreSpectateBarWidget::LeftArrowInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreSpectateBarWidget, RightArrowInputSwitcher) == 0x000340, "Member 'UCoreSpectateBarWidget::RightArrowInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreSpectateBarWidget, _leaveTriggeredDelegate) == 0x000348, "Member 'UCoreSpectateBarWidget::_leaveTriggeredDelegate' has a wrong offset!");
static_assert(offsetof(UCoreSpectateBarWidget, _leftArrowTriggeredDelegate) == 0x000358, "Member 'UCoreSpectateBarWidget::_leftArrowTriggeredDelegate' has a wrong offset!");
static_assert(offsetof(UCoreSpectateBarWidget, _rightArrowTriggeredDelegate) == 0x000368, "Member 'UCoreSpectateBarWidget::_rightArrowTriggeredDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreStartSequenceWidget
// 0x00A0 (0x03C8 - 0x0328)
class UCoreStartSequenceWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeInDuration;                                    // 0x0330(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeOutDuration;                                   // 0x0334(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   FadeInEasing;                                      // 0x0338(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EEasingType                                   FadeOutEasing;                                     // 0x0339(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EThemeColorId, struct FLinearColor>      BorderColors;                                      // 0x0340(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FLinearColor                           DefaultColor;                                      // 0x0390(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ThemeNameTextfield;                                // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 SeparatorImage;                                    // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          MapNameTextfield;                                  // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              StartSequenceFadeOutDelegate;                      // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	void OnHideStartSequenceComplete(class UUITweenInstance* tween);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStartSequenceWidget">();
	}
	static class UCoreStartSequenceWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStartSequenceWidget>();
	}
};
static_assert(alignof(UCoreStartSequenceWidget) == 0x000008, "Wrong alignment on UCoreStartSequenceWidget");
static_assert(sizeof(UCoreStartSequenceWidget) == 0x0003C8, "Wrong size on UCoreStartSequenceWidget");
static_assert(offsetof(UCoreStartSequenceWidget, FadeInDuration) == 0x000330, "Member 'UCoreStartSequenceWidget::FadeInDuration' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, FadeOutDuration) == 0x000334, "Member 'UCoreStartSequenceWidget::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, FadeInEasing) == 0x000338, "Member 'UCoreStartSequenceWidget::FadeInEasing' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, FadeOutEasing) == 0x000339, "Member 'UCoreStartSequenceWidget::FadeOutEasing' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, BorderColors) == 0x000340, "Member 'UCoreStartSequenceWidget::BorderColors' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, DefaultColor) == 0x000390, "Member 'UCoreStartSequenceWidget::DefaultColor' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, ThemeNameTextfield) == 0x0003A0, "Member 'UCoreStartSequenceWidget::ThemeNameTextfield' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, SeparatorImage) == 0x0003A8, "Member 'UCoreStartSequenceWidget::SeparatorImage' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, MapNameTextfield) == 0x0003B0, "Member 'UCoreStartSequenceWidget::MapNameTextfield' has a wrong offset!");
static_assert(offsetof(UCoreStartSequenceWidget, StartSequenceFadeOutDelegate) == 0x0003B8, "Member 'UCoreStartSequenceWidget::StartSequenceFadeOutDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreStatusEffectIcon
// 0x0058 (0x0368 - 0x0310)
class UCoreStatusEffectIcon final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_310[0x58];                                     // 0x0310(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FStatusEffectViewData GetStatusEffectData();
	void ResetWidget();
	void SetInactiveTicks(const int32 inactiveTicks);
	void SetStatusEffectData(const struct FStatusEffectViewData& data);
	void UpdatePercentageFill(float percentage);
	void UpdateWidget();

	int32 GetInactiveTicks() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStatusEffectIcon">();
	}
	static class UCoreStatusEffectIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStatusEffectIcon>();
	}
};
static_assert(alignof(UCoreStatusEffectIcon) == 0x000008, "Wrong alignment on UCoreStatusEffectIcon");
static_assert(sizeof(UCoreStatusEffectIcon) == 0x000368, "Wrong size on UCoreStatusEffectIcon");

// Class DBDUIViewsCore.CoreStatusEffectWidget
// 0x0098 (0x03C0 - 0x0328)
class UCoreStatusEffectWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InactiveThreshold;                                 // 0x0330(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PrepooledItemAmount;                               // 0x0334(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ItemsByColumn;                                     // 0x0338(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EvenColumnOffset;                                  // 0x033C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreStatusEffectIcon>      CoreStatusEffectIconClass;                         // 0x0340(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             StatusEffectContainer;                             // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreStatusEffectIcon*>          _statusEffectPool;                                 // 0x0350(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class FName>                           _statusEffectOrder;                                // 0x0360(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, class UCoreStatusEffectIcon*> _statusEffectMap;                                // 0x0370(0x0050)(BlueprintVisible, ExportObject, BlueprintReadOnly, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	TMap<class FName, class UCoreStatusEffectIcon*> GetStatusEffectMap() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStatusEffectWidget">();
	}
	static class UCoreStatusEffectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStatusEffectWidget>();
	}
};
static_assert(alignof(UCoreStatusEffectWidget) == 0x000008, "Wrong alignment on UCoreStatusEffectWidget");
static_assert(sizeof(UCoreStatusEffectWidget) == 0x0003C0, "Wrong size on UCoreStatusEffectWidget");
static_assert(offsetof(UCoreStatusEffectWidget, InactiveThreshold) == 0x000330, "Member 'UCoreStatusEffectWidget::InactiveThreshold' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, PrepooledItemAmount) == 0x000334, "Member 'UCoreStatusEffectWidget::PrepooledItemAmount' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, ItemsByColumn) == 0x000338, "Member 'UCoreStatusEffectWidget::ItemsByColumn' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, EvenColumnOffset) == 0x00033C, "Member 'UCoreStatusEffectWidget::EvenColumnOffset' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, CoreStatusEffectIconClass) == 0x000340, "Member 'UCoreStatusEffectWidget::CoreStatusEffectIconClass' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, StatusEffectContainer) == 0x000348, "Member 'UCoreStatusEffectWidget::StatusEffectContainer' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, _statusEffectPool) == 0x000350, "Member 'UCoreStatusEffectWidget::_statusEffectPool' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, _statusEffectOrder) == 0x000360, "Member 'UCoreStatusEffectWidget::_statusEffectOrder' has a wrong offset!");
static_assert(offsetof(UCoreStatusEffectWidget, _statusEffectMap) == 0x000370, "Member 'UCoreStatusEffectWidget::_statusEffectMap' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoryLevelButtonWidget
// 0x0038 (0x0478 - 0x0440)
class UCoreStoryLevelButtonWidget final : public UCoreSelectableButtonWidget
{
public:
	TMulticastInlineDelegate<void()>              _levelUnlockedAnimationDoneDelegate;               // 0x0440(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class FText                                   _tooltipText;                                      // 0x0450(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	ERemainingTimeFormat                          _lockedLevelTimeFormat;                            // 0x0468(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_469[0xF];                                      // 0x0469(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetData(const class UArchiveStoryLevelViewData* viewData, bool isSelectorReadOnly);
	void UpdateStatusData(EArchivesStoryLevelStatus newStatus, bool isSelectorReadOnly);
	void UpdateVisual(const class UArchiveStoryLevelViewData* viewData, bool newlyUnlocked);
	void UpdateVisualStatus(EArchivesStoryLevelStatus newStatus, bool newlyUnlocked);

	int32 GetLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoryLevelButtonWidget">();
	}
	static class UCoreStoryLevelButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoryLevelButtonWidget>();
	}
};
static_assert(alignof(UCoreStoryLevelButtonWidget) == 0x000008, "Wrong alignment on UCoreStoryLevelButtonWidget");
static_assert(sizeof(UCoreStoryLevelButtonWidget) == 0x000478, "Wrong size on UCoreStoryLevelButtonWidget");
static_assert(offsetof(UCoreStoryLevelButtonWidget, _levelUnlockedAnimationDoneDelegate) == 0x000440, "Member 'UCoreStoryLevelButtonWidget::_levelUnlockedAnimationDoneDelegate' has a wrong offset!");
static_assert(offsetof(UCoreStoryLevelButtonWidget, _tooltipText) == 0x000450, "Member 'UCoreStoryLevelButtonWidget::_tooltipText' has a wrong offset!");
static_assert(offsetof(UCoreStoryLevelButtonWidget, _lockedLevelTimeFormat) == 0x000468, "Member 'UCoreStoryLevelButtonWidget::_lockedLevelTimeFormat' has a wrong offset!");

// Class DBDUIViewsCore.CoreStoryLevelsSelectorWidget
// 0x0048 (0x03A8 - 0x0360)
class UCoreStoryLevelsSelectorWidget final : public UCoreButtonSelector
{
public:
	bool                                          IsReadOnly;                                        // 0x0360(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreStoryLevelButtonWidget> CoreStoryLevelButtonWidgetClass;                  // 0x0368(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             LevelButtonsContainer;                             // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               PreviousLevelInputSwitcher;                        // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               NextLevelInputSwitcher;                            // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UArchiveStoryLevelViewData*>     _levelButtonsData;                                 // 0x0388(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_398[0x10];                                     // 0x0398(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AdaptButtonsPoolToData(int32 dataNumber);
	void OnStoryLevelUnlockedAnimation();
	void SetData(const TArray<class UArchiveStoryLevelViewData*>& levelbuttonsData);
	void SetEnabled(bool enabled);
	void SetUpInteractionMode();
	void UpdateLevelStatus(const int32 level, const EArchivesStoryLevelStatus status);
	void UpdateVisual(EArchivesStoryLevelStatus globalStatus, bool playAnimation);

	class UCoreStoryLevelButtonWidget* GetStoryLevelButton(int32 level) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreStoryLevelsSelectorWidget">();
	}
	static class UCoreStoryLevelsSelectorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreStoryLevelsSelectorWidget>();
	}
};
static_assert(alignof(UCoreStoryLevelsSelectorWidget) == 0x000008, "Wrong alignment on UCoreStoryLevelsSelectorWidget");
static_assert(sizeof(UCoreStoryLevelsSelectorWidget) == 0x0003A8, "Wrong size on UCoreStoryLevelsSelectorWidget");
static_assert(offsetof(UCoreStoryLevelsSelectorWidget, IsReadOnly) == 0x000360, "Member 'UCoreStoryLevelsSelectorWidget::IsReadOnly' has a wrong offset!");
static_assert(offsetof(UCoreStoryLevelsSelectorWidget, CoreStoryLevelButtonWidgetClass) == 0x000368, "Member 'UCoreStoryLevelsSelectorWidget::CoreStoryLevelButtonWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreStoryLevelsSelectorWidget, LevelButtonsContainer) == 0x000370, "Member 'UCoreStoryLevelsSelectorWidget::LevelButtonsContainer' has a wrong offset!");
static_assert(offsetof(UCoreStoryLevelsSelectorWidget, PreviousLevelInputSwitcher) == 0x000378, "Member 'UCoreStoryLevelsSelectorWidget::PreviousLevelInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreStoryLevelsSelectorWidget, NextLevelInputSwitcher) == 0x000380, "Member 'UCoreStoryLevelsSelectorWidget::NextLevelInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreStoryLevelsSelectorWidget, _levelButtonsData) == 0x000388, "Member 'UCoreStoryLevelsSelectorWidget::_levelButtonsData' has a wrong offset!");

// Class DBDUIViewsCore.CoreSubtitlesWidget
// 0x0010 (0x0320 - 0x0310)
class UCoreSubtitlesWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDTextBlock*                          SubtitlesTB;                                       // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSubtitlesWidget">();
	}
	static class UCoreSubtitlesWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSubtitlesWidget>();
	}
};
static_assert(alignof(UCoreSubtitlesWidget) == 0x000008, "Wrong alignment on UCoreSubtitlesWidget");
static_assert(sizeof(UCoreSubtitlesWidget) == 0x000320, "Wrong size on UCoreSubtitlesWidget");
static_assert(offsetof(UCoreSubtitlesWidget, SubtitlesTB) == 0x000318, "Member 'UCoreSubtitlesWidget::SubtitlesTB' has a wrong offset!");

// Class DBDUIViewsCore.CoreTemplateWidget
// 0x0008 (0x02A0 - 0x0298)
class UCoreTemplateWidget final : public UUserWidget
{
public:
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTemplateWidget">();
	}
	static class UCoreTemplateWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTemplateWidget>();
	}
};
static_assert(alignof(UCoreTemplateWidget) == 0x000008, "Wrong alignment on UCoreTemplateWidget");
static_assert(sizeof(UCoreTemplateWidget) == 0x0002A0, "Wrong size on UCoreTemplateWidget");

// Class DBDUIViewsCore.CoreTestBuildFlagWidget
// 0x0070 (0x0398 - 0x0328)
class UCoreTestBuildFlagWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridPanel*                             HudTestFlagContainer;                              // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             HudTopLineTextfield;                               // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             HudBottomLineTextfield;                            // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_348[0x50];                                     // 0x0348(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTestBuildFlagWidget">();
	}
	static class UCoreTestBuildFlagWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTestBuildFlagWidget>();
	}
};
static_assert(alignof(UCoreTestBuildFlagWidget) == 0x000008, "Wrong alignment on UCoreTestBuildFlagWidget");
static_assert(sizeof(UCoreTestBuildFlagWidget) == 0x000398, "Wrong size on UCoreTestBuildFlagWidget");
static_assert(offsetof(UCoreTestBuildFlagWidget, HudTestFlagContainer) == 0x000330, "Member 'UCoreTestBuildFlagWidget::HudTestFlagContainer' has a wrong offset!");
static_assert(offsetof(UCoreTestBuildFlagWidget, HudTopLineTextfield) == 0x000338, "Member 'UCoreTestBuildFlagWidget::HudTopLineTextfield' has a wrong offset!");
static_assert(offsetof(UCoreTestBuildFlagWidget, HudBottomLineTextfield) == 0x000340, "Member 'UCoreTestBuildFlagWidget::HudBottomLineTextfield' has a wrong offset!");

// Class DBDUIViewsCore.CoreToggleButtonWidget
// 0x0008 (0x0410 - 0x0408)
class UCoreToggleButtonWidget final : public UCoreButtonWidget
{
public:
	bool                                          DefaultToggleState;                                // 0x0408(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetActiveVisualState(bool isActive);
	void SetToDefaultState();

	bool IsToggled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreToggleButtonWidget">();
	}
	static class UCoreToggleButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreToggleButtonWidget>();
	}
};
static_assert(alignof(UCoreToggleButtonWidget) == 0x000008, "Wrong alignment on UCoreToggleButtonWidget");
static_assert(sizeof(UCoreToggleButtonWidget) == 0x000410, "Wrong size on UCoreToggleButtonWidget");
static_assert(offsetof(UCoreToggleButtonWidget, DefaultToggleState) == 0x000408, "Member 'UCoreToggleButtonWidget::DefaultToggleState' has a wrong offset!");

// Class DBDUIViewsCore.CoreTutorialMysteryNoteWidget
// 0x0008 (0x0330 - 0x0328)
class UCoreTutorialMysteryNoteWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTutorialMysteryNoteWidget">();
	}
	static class UCoreTutorialMysteryNoteWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTutorialMysteryNoteWidget>();
	}
};
static_assert(alignof(UCoreTutorialMysteryNoteWidget) == 0x000008, "Wrong alignment on UCoreTutorialMysteryNoteWidget");
static_assert(sizeof(UCoreTutorialMysteryNoteWidget) == 0x000330, "Wrong size on UCoreTutorialMysteryNoteWidget");

// Class DBDUIViewsCore.CoreTutorialObjectiveItem
// 0x0010 (0x0320 - 0x0310)
class UCoreTutorialObjectiveItem final : public UCoreBaseUserWidget
{
public:
	TMulticastInlineDelegate<void(class UCoreTutorialObjectiveItem* item)> TutorialObjectiveCompletedDelegate; // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void InitObjective(const struct FTutorialObjectivesViewData& interactionsViewData);
	void SetObjectiveCompleted(bool removeAfterCompletion);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTutorialObjectiveItem">();
	}
	static class UCoreTutorialObjectiveItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTutorialObjectiveItem>();
	}
};
static_assert(alignof(UCoreTutorialObjectiveItem) == 0x000008, "Wrong alignment on UCoreTutorialObjectiveItem");
static_assert(sizeof(UCoreTutorialObjectiveItem) == 0x000320, "Wrong size on UCoreTutorialObjectiveItem");
static_assert(offsetof(UCoreTutorialObjectiveItem, TutorialObjectiveCompletedDelegate) == 0x000310, "Member 'UCoreTutorialObjectiveItem::TutorialObjectiveCompletedDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreTutorialObjectivesContainer
// 0x0080 (0x03A8 - 0x0328)
class UCoreTutorialObjectivesContainer final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreTutorialObjectiveItem> CoreTutorialObjectiveItemClass;                    // 0x0330(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BasePooledInstanceAmount;                          // 0x0338(0x0004)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridPanel*                             ObjectiveContainer;                                // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UCoreTutorialObjectiveItem*>     _objectivePool;                                    // 0x0348(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class FName, class UCoreTutorialObjectiveItem*> _objectiveItems;                            // 0x0358(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void OnTutorialObjectiveCompleted(class UCoreTutorialObjectiveItem* item);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTutorialObjectivesContainer">();
	}
	static class UCoreTutorialObjectivesContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTutorialObjectivesContainer>();
	}
};
static_assert(alignof(UCoreTutorialObjectivesContainer) == 0x000008, "Wrong alignment on UCoreTutorialObjectivesContainer");
static_assert(sizeof(UCoreTutorialObjectivesContainer) == 0x0003A8, "Wrong size on UCoreTutorialObjectivesContainer");
static_assert(offsetof(UCoreTutorialObjectivesContainer, CoreTutorialObjectiveItemClass) == 0x000330, "Member 'UCoreTutorialObjectivesContainer::CoreTutorialObjectiveItemClass' has a wrong offset!");
static_assert(offsetof(UCoreTutorialObjectivesContainer, BasePooledInstanceAmount) == 0x000338, "Member 'UCoreTutorialObjectivesContainer::BasePooledInstanceAmount' has a wrong offset!");
static_assert(offsetof(UCoreTutorialObjectivesContainer, ObjectiveContainer) == 0x000340, "Member 'UCoreTutorialObjectivesContainer::ObjectiveContainer' has a wrong offset!");
static_assert(offsetof(UCoreTutorialObjectivesContainer, _objectivePool) == 0x000348, "Member 'UCoreTutorialObjectivesContainer::_objectivePool' has a wrong offset!");
static_assert(offsetof(UCoreTutorialObjectivesContainer, _objectiveItems) == 0x000358, "Member 'UCoreTutorialObjectivesContainer::_objectiveItems' has a wrong offset!");

// Class DBDUIViewsCore.CoreTutorialPopupWidget
// 0x0028 (0x0350 - 0x0328)
class UCoreTutorialPopupWidget final : public UCoreBaseHudWidget
{
public:
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCoreInputSwitcherWidget*               ProgressionInputSwitcher;                          // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          ClosePopupSfx;                                     // 0x0338(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _notifTutoConfirmButtonClickDelegate;              // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreTutorialPopupWidget">();
	}
	static class UCoreTutorialPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreTutorialPopupWidget>();
	}
};
static_assert(alignof(UCoreTutorialPopupWidget) == 0x000008, "Wrong alignment on UCoreTutorialPopupWidget");
static_assert(sizeof(UCoreTutorialPopupWidget) == 0x000350, "Wrong size on UCoreTutorialPopupWidget");
static_assert(offsetof(UCoreTutorialPopupWidget, ProgressionInputSwitcher) == 0x000330, "Member 'UCoreTutorialPopupWidget::ProgressionInputSwitcher' has a wrong offset!");
static_assert(offsetof(UCoreTutorialPopupWidget, ClosePopupSfx) == 0x000338, "Member 'UCoreTutorialPopupWidget::ClosePopupSfx' has a wrong offset!");
static_assert(offsetof(UCoreTutorialPopupWidget, _notifTutoConfirmButtonClickDelegate) == 0x000340, "Member 'UCoreTutorialPopupWidget::_notifTutoConfirmButtonClickDelegate' has a wrong offset!");

// Class DBDUIViewsCore.CoreUnlockPersonalPerksPopupWidget
// 0x0030 (0x0398 - 0x0368)
class UCoreUnlockPersonalPerksPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCoreMenuPerkWidget*>            _perkArray;                                        // 0x0370(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UCoreMenuPerkWidget*                    FirstPerk;                                         // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuPerkWidget*                    SecondPerk;                                        // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuPerkWidget*                    ThirdPerk;                                         // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HideMenuPerkTooltip(class UCoreButtonWidget* unhoveredSlotWidget);
	void ShowMenuPerkTooltip(class UCoreButtonWidget* hoveredSlotWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreUnlockPersonalPerksPopupWidget">();
	}
	static class UCoreUnlockPersonalPerksPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreUnlockPersonalPerksPopupWidget>();
	}
};
static_assert(alignof(UCoreUnlockPersonalPerksPopupWidget) == 0x000008, "Wrong alignment on UCoreUnlockPersonalPerksPopupWidget");
static_assert(sizeof(UCoreUnlockPersonalPerksPopupWidget) == 0x000398, "Wrong size on UCoreUnlockPersonalPerksPopupWidget");
static_assert(offsetof(UCoreUnlockPersonalPerksPopupWidget, _perkArray) == 0x000370, "Member 'UCoreUnlockPersonalPerksPopupWidget::_perkArray' has a wrong offset!");
static_assert(offsetof(UCoreUnlockPersonalPerksPopupWidget, FirstPerk) == 0x000380, "Member 'UCoreUnlockPersonalPerksPopupWidget::FirstPerk' has a wrong offset!");
static_assert(offsetof(UCoreUnlockPersonalPerksPopupWidget, SecondPerk) == 0x000388, "Member 'UCoreUnlockPersonalPerksPopupWidget::SecondPerk' has a wrong offset!");
static_assert(offsetof(UCoreUnlockPersonalPerksPopupWidget, ThirdPerk) == 0x000390, "Member 'UCoreUnlockPersonalPerksPopupWidget::ThirdPerk' has a wrong offset!");

// Class DBDUIViewsCore.CoreWalletWidget
// 0x0060 (0x0370 - 0x0310)
class UCoreWalletWidget final : public UCoreBaseUserWidget
{
public:
	TSubclassOf<class UCoreCurrencyLabelWidget>   CoreCurrencyLabelWidgetClass;                      // 0x0310(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGridPanel*                             CurrencyContainer;                                 // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ECurrencyType, class UCoreCurrencyLabelWidget*> _currencyWidgetMap;                         // 0x0320(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void FullUpdateCurrency(const struct FCurrencyLabelViewData& viewData);
	void InitWallet(const TArray<struct FCurrencyLabelViewData>& walletData);
	void PlayNotEnoughCurrency(const ECurrencyType type);
	void UpdateCurrency(const ECurrencyType type, int32 newBalance, int32 previousBalance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreWalletWidget">();
	}
	static class UCoreWalletWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreWalletWidget>();
	}
};
static_assert(alignof(UCoreWalletWidget) == 0x000008, "Wrong alignment on UCoreWalletWidget");
static_assert(sizeof(UCoreWalletWidget) == 0x000370, "Wrong size on UCoreWalletWidget");
static_assert(offsetof(UCoreWalletWidget, CoreCurrencyLabelWidgetClass) == 0x000310, "Member 'UCoreWalletWidget::CoreCurrencyLabelWidgetClass' has a wrong offset!");
static_assert(offsetof(UCoreWalletWidget, CurrencyContainer) == 0x000318, "Member 'UCoreWalletWidget::CurrencyContainer' has a wrong offset!");
static_assert(offsetof(UCoreWalletWidget, _currencyWidgetMap) == 0x000320, "Member 'UCoreWalletWidget::_currencyWidgetMap' has a wrong offset!");

// Class DBDUIViewsCore.CoreWatermarkWidget
// 0x0040 (0x0350 - 0x0310)
class UCoreWatermarkWidget final : public UCoreBaseUserWidget
{
public:
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDBDTextBlock*>                  _watermarkDBDTextBlocks;                           // 0x0318(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_328[0x28];                                     // 0x0328(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateWatermarkText();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreWatermarkWidget">();
	}
	static class UCoreWatermarkWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreWatermarkWidget>();
	}
};
static_assert(alignof(UCoreWatermarkWidget) == 0x000008, "Wrong alignment on UCoreWatermarkWidget");
static_assert(sizeof(UCoreWatermarkWidget) == 0x000350, "Wrong size on UCoreWatermarkWidget");
static_assert(offsetof(UCoreWatermarkWidget, _watermarkDBDTextBlocks) == 0x000318, "Member 'UCoreWatermarkWidget::_watermarkDBDTextBlocks' has a wrong offset!");

// Class DBDUIViewsCore.CurrencyProgressionTooltipWidget
// 0x0078 (0x0388 - 0x0310)
class UCurrencyProgressionTooltipWidget final : public UCoreBaseUserWidget
{
public:
	int32                                         MaxExpirationLabels;                               // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCoreCurrencyExpirationLabelWidget> CoreCurrencyExpirationLabelWidgetClass;    // 0x0318(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          CurrencyTB;                                        // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          CurrencyTitleTB;                                   // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDRichTextBlock*                      CurrencyDescriptionRTB;                            // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDImage*                              TitleBgIMG;                                        // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           EventContainer;                                    // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          EventNameTB;                                       // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          EventDescriptionTB;                                // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          EventTimerTB;                                      // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           ExpirationPanel;                                   // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           ExpirationLabelContainer;                          // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDTextBlock*                          ExpirationTitleTB;                                 // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UCoreCurrencyExpirationLabelWidget*> _currencyExpirationWidgetPool;                 // 0x0378(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void SetTooltipData(const struct FCurrencyProgressionTooltipViewData& currencyViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurrencyProgressionTooltipWidget">();
	}
	static class UCurrencyProgressionTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurrencyProgressionTooltipWidget>();
	}
};
static_assert(alignof(UCurrencyProgressionTooltipWidget) == 0x000008, "Wrong alignment on UCurrencyProgressionTooltipWidget");
static_assert(sizeof(UCurrencyProgressionTooltipWidget) == 0x000388, "Wrong size on UCurrencyProgressionTooltipWidget");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, MaxExpirationLabels) == 0x000310, "Member 'UCurrencyProgressionTooltipWidget::MaxExpirationLabels' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, CoreCurrencyExpirationLabelWidgetClass) == 0x000318, "Member 'UCurrencyProgressionTooltipWidget::CoreCurrencyExpirationLabelWidgetClass' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, CurrencyTB) == 0x000320, "Member 'UCurrencyProgressionTooltipWidget::CurrencyTB' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, CurrencyTitleTB) == 0x000328, "Member 'UCurrencyProgressionTooltipWidget::CurrencyTitleTB' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, CurrencyDescriptionRTB) == 0x000330, "Member 'UCurrencyProgressionTooltipWidget::CurrencyDescriptionRTB' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, TitleBgIMG) == 0x000338, "Member 'UCurrencyProgressionTooltipWidget::TitleBgIMG' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, EventContainer) == 0x000340, "Member 'UCurrencyProgressionTooltipWidget::EventContainer' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, EventNameTB) == 0x000348, "Member 'UCurrencyProgressionTooltipWidget::EventNameTB' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, EventDescriptionTB) == 0x000350, "Member 'UCurrencyProgressionTooltipWidget::EventDescriptionTB' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, EventTimerTB) == 0x000358, "Member 'UCurrencyProgressionTooltipWidget::EventTimerTB' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, ExpirationPanel) == 0x000360, "Member 'UCurrencyProgressionTooltipWidget::ExpirationPanel' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, ExpirationLabelContainer) == 0x000368, "Member 'UCurrencyProgressionTooltipWidget::ExpirationLabelContainer' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, ExpirationTitleTB) == 0x000370, "Member 'UCurrencyProgressionTooltipWidget::ExpirationTitleTB' has a wrong offset!");
static_assert(offsetof(UCurrencyProgressionTooltipWidget, _currencyExpirationWidgetPool) == 0x000378, "Member 'UCurrencyProgressionTooltipWidget::_currencyExpirationWidgetPool' has a wrong offset!");

// Class DBDUIViewsCore.CustomizationTooltipWidget
// 0x0010 (0x0320 - 0x0310)
class UCustomizationTooltipWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDTextBlock*                          ToolTipStatusTB;                                   // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      ToolTipDescriptionRTB;                             // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AppendToDescriptionText(const class FText& appendedText);
	void SetStatusText(const bool isEquipped, const bool isOwned, const bool isLocked);
	void SetTooltipData(const struct FCustomizationTooltipViewData& customizationViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomizationTooltipWidget">();
	}
	static class UCustomizationTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomizationTooltipWidget>();
	}
};
static_assert(alignof(UCustomizationTooltipWidget) == 0x000008, "Wrong alignment on UCustomizationTooltipWidget");
static_assert(sizeof(UCustomizationTooltipWidget) == 0x000320, "Wrong size on UCustomizationTooltipWidget");
static_assert(offsetof(UCustomizationTooltipWidget, ToolTipStatusTB) == 0x000310, "Member 'UCustomizationTooltipWidget::ToolTipStatusTB' has a wrong offset!");
static_assert(offsetof(UCustomizationTooltipWidget, ToolTipDescriptionRTB) == 0x000318, "Member 'UCustomizationTooltipWidget::ToolTipDescriptionRTB' has a wrong offset!");

// Class DBDUIViewsCore.DailyRitualsContainerWidget
// 0x0098 (0x03A8 - 0x0310)
class UDailyRitualsContainerWidget final : public UCoreBaseUserWidget
{
public:
	TMulticastInlineDelegate<void(const class FString& dailyRitualKey)> _claimButtonClickedDelegate; // 0x0310(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FString& dailyRitualKey)> _removeButtonClickedDelegate; // 0x0320(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _onOutOfDailyRitualsDelegate;                      // 0x0330(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TSubclassOf<class UDailyRitualTileWidget>     DailyRitualTileWidgetClass;                        // 0x0340(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           Container;                                         // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          NoRitualWarningText;                               // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TilePadding;                                       // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeInNoRitualsWarningTextDuration;                // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AlignmentAnimationDuration;                        // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_364[0x3C];                                     // 0x0364(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	class UUITweenInstance*                       _alignAssignedRitualsTween;                        // 0x03A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnDailyRitualClaimButtonClicked(const class FString& dailyRitualKey);
	void OnDailyRitualRemoveButtonClicked(const class FString& dailyRitualKey);
	void OnDailyRitualTileFadeOutComplete(class UDailyRitualTileWidget* dailyRitualTile);
	void OnDelayUntilFadeInSequenceComplete(class UUITweenInstance* delayUntilFadeInSequenceTween);
	void OnRecentlyAssignedDailyRitualFadeInComplete(class UDailyRitualTileWidget* dailyRitualTile);
	void SetData(const TArray<struct FDailyRitualViewData>& dailyRitualsData, const bool isAfterTrial);
	void StartAnim();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DailyRitualsContainerWidget">();
	}
	static class UDailyRitualsContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDailyRitualsContainerWidget>();
	}
};
static_assert(alignof(UDailyRitualsContainerWidget) == 0x000008, "Wrong alignment on UDailyRitualsContainerWidget");
static_assert(sizeof(UDailyRitualsContainerWidget) == 0x0003A8, "Wrong size on UDailyRitualsContainerWidget");
static_assert(offsetof(UDailyRitualsContainerWidget, _claimButtonClickedDelegate) == 0x000310, "Member 'UDailyRitualsContainerWidget::_claimButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UDailyRitualsContainerWidget, _removeButtonClickedDelegate) == 0x000320, "Member 'UDailyRitualsContainerWidget::_removeButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UDailyRitualsContainerWidget, _onOutOfDailyRitualsDelegate) == 0x000330, "Member 'UDailyRitualsContainerWidget::_onOutOfDailyRitualsDelegate' has a wrong offset!");
static_assert(offsetof(UDailyRitualsContainerWidget, DailyRitualTileWidgetClass) == 0x000340, "Member 'UDailyRitualsContainerWidget::DailyRitualTileWidgetClass' has a wrong offset!");
static_assert(offsetof(UDailyRitualsContainerWidget, Container) == 0x000348, "Member 'UDailyRitualsContainerWidget::Container' has a wrong offset!");
static_assert(offsetof(UDailyRitualsContainerWidget, NoRitualWarningText) == 0x000350, "Member 'UDailyRitualsContainerWidget::NoRitualWarningText' has a wrong offset!");
static_assert(offsetof(UDailyRitualsContainerWidget, TilePadding) == 0x000358, "Member 'UDailyRitualsContainerWidget::TilePadding' has a wrong offset!");
static_assert(offsetof(UDailyRitualsContainerWidget, FadeInNoRitualsWarningTextDuration) == 0x00035C, "Member 'UDailyRitualsContainerWidget::FadeInNoRitualsWarningTextDuration' has a wrong offset!");
static_assert(offsetof(UDailyRitualsContainerWidget, AlignmentAnimationDuration) == 0x000360, "Member 'UDailyRitualsContainerWidget::AlignmentAnimationDuration' has a wrong offset!");
static_assert(offsetof(UDailyRitualsContainerWidget, _alignAssignedRitualsTween) == 0x0003A0, "Member 'UDailyRitualsContainerWidget::_alignAssignedRitualsTween' has a wrong offset!");

// Class DBDUIViewsCore.DailyRitualsPopupWidget
// 0x0070 (0x03D8 - 0x0368)
class UDailyRitualsPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& dailyRitualKey)> _onRemovedDailyRitualDelegate; // 0x0370(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FString& dailyRitualKey)> _onClaimedRitualDelegate;    // 0x0380(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _onClaimedAllRitualsDelegate;                      // 0x0390(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UDBDImage*                              BaseBG;                                            // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               DailyRitualsDetails;                               // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDailyRitualsContainerWidget*           DailyRitualsContainer;                             // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      FooterText;                                        // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstance*                      DefaultBackgroundMaterialInstance;                 // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstance*                      AfterTrialBackgroundMaterialInstance;              // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D0[0x8];                                      // 0x03D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDailyRitualClaimAllButtonClicked();
	void OnDailyRitualClaimButtonClicked(const class FString& dailyRitualKey);
	void OnDailyRitualRemoveButtonClicked(const class FString& dailyRitualKey);
	void SetVisuals(bool isAfterTrial);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DailyRitualsPopupWidget">();
	}
	static class UDailyRitualsPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDailyRitualsPopupWidget>();
	}
};
static_assert(alignof(UDailyRitualsPopupWidget) == 0x000008, "Wrong alignment on UDailyRitualsPopupWidget");
static_assert(sizeof(UDailyRitualsPopupWidget) == 0x0003D8, "Wrong size on UDailyRitualsPopupWidget");
static_assert(offsetof(UDailyRitualsPopupWidget, _onRemovedDailyRitualDelegate) == 0x000370, "Member 'UDailyRitualsPopupWidget::_onRemovedDailyRitualDelegate' has a wrong offset!");
static_assert(offsetof(UDailyRitualsPopupWidget, _onClaimedRitualDelegate) == 0x000380, "Member 'UDailyRitualsPopupWidget::_onClaimedRitualDelegate' has a wrong offset!");
static_assert(offsetof(UDailyRitualsPopupWidget, _onClaimedAllRitualsDelegate) == 0x000390, "Member 'UDailyRitualsPopupWidget::_onClaimedAllRitualsDelegate' has a wrong offset!");
static_assert(offsetof(UDailyRitualsPopupWidget, BaseBG) == 0x0003A0, "Member 'UDailyRitualsPopupWidget::BaseBG' has a wrong offset!");
static_assert(offsetof(UDailyRitualsPopupWidget, DailyRitualsDetails) == 0x0003A8, "Member 'UDailyRitualsPopupWidget::DailyRitualsDetails' has a wrong offset!");
static_assert(offsetof(UDailyRitualsPopupWidget, DailyRitualsContainer) == 0x0003B0, "Member 'UDailyRitualsPopupWidget::DailyRitualsContainer' has a wrong offset!");
static_assert(offsetof(UDailyRitualsPopupWidget, FooterText) == 0x0003B8, "Member 'UDailyRitualsPopupWidget::FooterText' has a wrong offset!");
static_assert(offsetof(UDailyRitualsPopupWidget, DefaultBackgroundMaterialInstance) == 0x0003C0, "Member 'UDailyRitualsPopupWidget::DefaultBackgroundMaterialInstance' has a wrong offset!");
static_assert(offsetof(UDailyRitualsPopupWidget, AfterTrialBackgroundMaterialInstance) == 0x0003C8, "Member 'UDailyRitualsPopupWidget::AfterTrialBackgroundMaterialInstance' has a wrong offset!");

// Class DBDUIViewsCore.DailyRitualTileWidget
// 0x0128 (0x0438 - 0x0310)
class UDailyRitualTileWidget final : public UCoreBaseUserWidget
{
public:
	TMulticastInlineDelegate<void(const class FString& dailyRitualKey)> _claimButtonClickedDelegate; // 0x0310(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class FString& dailyRitualKey)> _removeButtonClickedDelegate; // 0x0320(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UDailyRitualTileWidget* tile)> _onDailyRitualTileFadeInCompletedDelegate; // 0x0330(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UDailyRitualTileWidget* tile)> _onDailyRitualTileFadeOutCompletedDelegate; // 0x0340(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class USizeBox*                               ContainerSizeBox;                                  // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              IconImage;                                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              BackgroundImage;                                   // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              ProgressBar;                                       // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          TitleTextBlock;                                    // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RewardTextBlock;                                   // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          DescriptionTextBlock;                              // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          ProgressTextBlock;                                 // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreButtonWidget*                      ClaimButton;                                       // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreButtonWidget*                      RemoveButton;                                      // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             DefaultBackgroundTexture;                          // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             NewBackgroundTexture;                              // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             CompletedBackgroundTexture;                        // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDailyRitualViewData                   _dailyRitualData;                                  // 0x03B8(0x0078)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_430[0x8];                                      // 0x0430(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClaimButtonClicked(class UCoreButtonWidget* button);
	void OnRemoveButtonClicked(class UCoreButtonWidget* button);
	void PlayFadeInAnimation();
	void PlayFadeOutAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DailyRitualTileWidget">();
	}
	static class UDailyRitualTileWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDailyRitualTileWidget>();
	}
};
static_assert(alignof(UDailyRitualTileWidget) == 0x000008, "Wrong alignment on UDailyRitualTileWidget");
static_assert(sizeof(UDailyRitualTileWidget) == 0x000438, "Wrong size on UDailyRitualTileWidget");
static_assert(offsetof(UDailyRitualTileWidget, _claimButtonClickedDelegate) == 0x000310, "Member 'UDailyRitualTileWidget::_claimButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, _removeButtonClickedDelegate) == 0x000320, "Member 'UDailyRitualTileWidget::_removeButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, _onDailyRitualTileFadeInCompletedDelegate) == 0x000330, "Member 'UDailyRitualTileWidget::_onDailyRitualTileFadeInCompletedDelegate' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, _onDailyRitualTileFadeOutCompletedDelegate) == 0x000340, "Member 'UDailyRitualTileWidget::_onDailyRitualTileFadeOutCompletedDelegate' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, ContainerSizeBox) == 0x000350, "Member 'UDailyRitualTileWidget::ContainerSizeBox' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, IconImage) == 0x000358, "Member 'UDailyRitualTileWidget::IconImage' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, BackgroundImage) == 0x000360, "Member 'UDailyRitualTileWidget::BackgroundImage' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, ProgressBar) == 0x000368, "Member 'UDailyRitualTileWidget::ProgressBar' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, TitleTextBlock) == 0x000370, "Member 'UDailyRitualTileWidget::TitleTextBlock' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, RewardTextBlock) == 0x000378, "Member 'UDailyRitualTileWidget::RewardTextBlock' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, DescriptionTextBlock) == 0x000380, "Member 'UDailyRitualTileWidget::DescriptionTextBlock' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, ProgressTextBlock) == 0x000388, "Member 'UDailyRitualTileWidget::ProgressTextBlock' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, ClaimButton) == 0x000390, "Member 'UDailyRitualTileWidget::ClaimButton' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, RemoveButton) == 0x000398, "Member 'UDailyRitualTileWidget::RemoveButton' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, DefaultBackgroundTexture) == 0x0003A0, "Member 'UDailyRitualTileWidget::DefaultBackgroundTexture' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, NewBackgroundTexture) == 0x0003A8, "Member 'UDailyRitualTileWidget::NewBackgroundTexture' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, CompletedBackgroundTexture) == 0x0003B0, "Member 'UDailyRitualTileWidget::CompletedBackgroundTexture' has a wrong offset!");
static_assert(offsetof(UDailyRitualTileWidget, _dailyRitualData) == 0x0003B8, "Member 'UDailyRitualTileWidget::_dailyRitualData' has a wrong offset!");

// Class DBDUIViewsCore.DBDButton
// 0x0018 (0x04B8 - 0x04A0)
class UDBDButton final : public UButton
{
public:
	bool                                          SendAnalyticsData;                                 // 0x04A0(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A1[0x7];                                      // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnalyticsName;                                     // 0x04A8(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDButton">();
	}
	static class UDBDButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDButton>();
	}
};
static_assert(alignof(UDBDButton) == 0x000008, "Wrong alignment on UDBDButton");
static_assert(sizeof(UDBDButton) == 0x0004B8, "Wrong size on UDBDButton");
static_assert(offsetof(UDBDButton, SendAnalyticsData) == 0x0004A0, "Member 'UDBDButton::SendAnalyticsData' has a wrong offset!");
static_assert(offsetof(UDBDButton, AnalyticsName) == 0x0004A8, "Member 'UDBDButton::AnalyticsName' has a wrong offset!");

// Class DBDUIViewsCore.DBDComboBoxString
// 0x0000 (0x0EE8 - 0x0EE8)
class UDBDComboBoxString final : public UComboBoxString
{
public:
	void SetData(const TArray<class FString>& OptionsList, const class FString& DefaultOption);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDComboBoxString">();
	}
	static class UDBDComboBoxString* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDComboBoxString>();
	}
};
static_assert(alignof(UDBDComboBoxString) == 0x000008, "Wrong alignment on UDBDComboBoxString");
static_assert(sizeof(UDBDComboBoxString) == 0x000EE8, "Wrong size on UDBDComboBoxString");

// Class DBDUIViewsCore.DBDDropDownListButton
// 0x0000 (0x0478 - 0x0478)
class UDBDDropDownListButton final : public UCoreTabWidget
{
public:
	void ToggleDropDownArrow(bool showArrow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDDropDownListButton">();
	}
	static class UDBDDropDownListButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDDropDownListButton>();
	}
};
static_assert(alignof(UDBDDropDownListButton) == 0x000008, "Wrong alignment on UDBDDropDownListButton");
static_assert(sizeof(UDBDDropDownListButton) == 0x000478, "Wrong size on UDBDDropDownListButton");

// Class DBDUIViewsCore.DBDDropDownListWidget
// 0x0028 (0x03B8 - 0x0390)
class UDBDDropDownListWidget final : public UCoreTabContainerWidget
{
public:
	TMulticastInlineDelegate<void(const struct FTabWidgetData& buttonData)> OnSelectedOptionDelegate; // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCoreButtonWidget*                      _triggerButton;                                    // 0x03A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A8[0x10];                                     // 0x03A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindToTrigger(class UCoreButtonWidget* triggerButton);
	void HideDropDownList();
	void OnOptionSelected(class UCoreSelectableButtonWidget* selectedButton);
	void OnTriggerClicked(class UCoreButtonWidget* buttonTarget);
	void OnUserClicked(const struct FPointerEvent& mouseEvent);
	void UnbindFromTrigger();
	void UpdateDropDown();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDDropDownListWidget">();
	}
	static class UDBDDropDownListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDDropDownListWidget>();
	}
};
static_assert(alignof(UDBDDropDownListWidget) == 0x000008, "Wrong alignment on UDBDDropDownListWidget");
static_assert(sizeof(UDBDDropDownListWidget) == 0x0003B8, "Wrong size on UDBDDropDownListWidget");
static_assert(offsetof(UDBDDropDownListWidget, OnSelectedOptionDelegate) == 0x000390, "Member 'UDBDDropDownListWidget::OnSelectedOptionDelegate' has a wrong offset!");
static_assert(offsetof(UDBDDropDownListWidget, _triggerButton) == 0x0003A0, "Member 'UDBDDropDownListWidget::_triggerButton' has a wrong offset!");

// Class DBDUIViewsCore.DBDImage
// 0x0048 (0x0298 - 0x0250)
class UDBDImage final : public UImage
{
public:
	class UTexture2D*                             DefaultImage;                                      // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              _onImageStreamingCancelled;                        // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              _onImageStreamingStarted;                          // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              _onImageStreamingCompleted;                        // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_288[0x10];                                     // 0x0288(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBrushFromSoftTextureWithDefault(TSoftObjectPtr<class UTexture2D> softTexture, bool matchSize);
	void SetBrushFromTextureWithDefault(class UTexture2D* texture, bool matchSize);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDImage">();
	}
	static class UDBDImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDImage>();
	}
};
static_assert(alignof(UDBDImage) == 0x000008, "Wrong alignment on UDBDImage");
static_assert(sizeof(UDBDImage) == 0x000298, "Wrong size on UDBDImage");
static_assert(offsetof(UDBDImage, DefaultImage) == 0x000250, "Member 'UDBDImage::DefaultImage' has a wrong offset!");
static_assert(offsetof(UDBDImage, _onImageStreamingCancelled) == 0x000258, "Member 'UDBDImage::_onImageStreamingCancelled' has a wrong offset!");
static_assert(offsetof(UDBDImage, _onImageStreamingStarted) == 0x000268, "Member 'UDBDImage::_onImageStreamingStarted' has a wrong offset!");
static_assert(offsetof(UDBDImage, _onImageStreamingCompleted) == 0x000278, "Member 'UDBDImage::_onImageStreamingCompleted' has a wrong offset!");

// Class DBDUIViewsCore.DBDRichTextBlock
// 0x0110 (0x07E0 - 0x06D0)
class UDBDRichTextBlock final : public URichTextBlock
{
public:
	class FString                                 TextStyle;                                         // 0x06D0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USwitchDockStateManager*                _switchDockStateManager;                           // 0x06E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextManager*                        _textManager;                                      // 0x06E8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _characterLimit;                                   // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isUpperCase;                                      // 0x06F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hasLargeText;                                     // 0x06F5(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6F6[0x2];                                      // 0x06F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockOverrideProperties           _largeTextProperties;                              // 0x06F8(0x0048)(Edit, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_740[0x1];                                      // 0x0740(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _overrideUndockedPropertiesWithLargeText;          // 0x0741(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hasUndocking;                                     // 0x0742(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_743[0x5];                                      // 0x0743(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockOverrideProperties           _undockedProperties;                               // 0x0748(0x0048)(Edit, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_790[0x50];                                     // 0x0790(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLargeTextSettingsChanged(bool isLargeText);
	void OnSwitchDockStateChanged(bool isDocked);
	void PreviewLargeText();
	void PreviewUndocked();
	void SetHTMLText(const class FText& InText);
	void SetIsUpperCase(bool isUpperCase);

	bool GetIsUpperCase() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDRichTextBlock">();
	}
	static class UDBDRichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDRichTextBlock>();
	}
};
static_assert(alignof(UDBDRichTextBlock) == 0x000008, "Wrong alignment on UDBDRichTextBlock");
static_assert(sizeof(UDBDRichTextBlock) == 0x0007E0, "Wrong size on UDBDRichTextBlock");
static_assert(offsetof(UDBDRichTextBlock, TextStyle) == 0x0006D0, "Member 'UDBDRichTextBlock::TextStyle' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _switchDockStateManager) == 0x0006E0, "Member 'UDBDRichTextBlock::_switchDockStateManager' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _textManager) == 0x0006E8, "Member 'UDBDRichTextBlock::_textManager' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _characterLimit) == 0x0006F0, "Member 'UDBDRichTextBlock::_characterLimit' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _isUpperCase) == 0x0006F4, "Member 'UDBDRichTextBlock::_isUpperCase' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _hasLargeText) == 0x0006F5, "Member 'UDBDRichTextBlock::_hasLargeText' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _largeTextProperties) == 0x0006F8, "Member 'UDBDRichTextBlock::_largeTextProperties' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _overrideUndockedPropertiesWithLargeText) == 0x000741, "Member 'UDBDRichTextBlock::_overrideUndockedPropertiesWithLargeText' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _hasUndocking) == 0x000742, "Member 'UDBDRichTextBlock::_hasUndocking' has a wrong offset!");
static_assert(offsetof(UDBDRichTextBlock, _undockedProperties) == 0x000748, "Member 'UDBDRichTextBlock::_undockedProperties' has a wrong offset!");

// Class DBDUIViewsCore.DBDScrollBox
// 0x0040 (0x0950 - 0x0910)
class UDBDScrollBox final : public UScrollBox
{
public:
	bool                                          _useControllerScroll;                              // 0x0910(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _shouldScrollOnMouseOver;                          // 0x0911(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_912[0x2];                                      // 0x0912(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _scrollSpeed;                                      // 0x0914(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreKeyListenerInputPromptWidget*      _displayPrompt;                                    // 0x0918(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   _displayPromptText;                                // 0x0920(0x0018)(Edit, BlueprintVisible, DisableEditOnTemplate, NoClear, Protected, NativeAccessSpecifierProtected)
	EShowScrollDisplayPrompt                      _showDisplayPrompt;                                // 0x0938(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsUsingSmoothMask;                                 // 0x0939(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_93A[0x6];                                      // 0x093A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URetainerBox*                           SmoothMaskRetainerBox;                             // 0x0940(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_948[0x8];                                      // 0x0948(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleControllerInput(float analogValue);
	bool IsMouseOver();
	void OnControlModeChanged(EControlMode controlMode);
	void SetDisplayPrompt(class UCoreKeyListenerInputPromptWidget* displayPrompt);
	void UpdateDisplayPrompt();
	void UpdateSmoothMask(float currentOffset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDScrollBox">();
	}
	static class UDBDScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDScrollBox>();
	}
};
static_assert(alignof(UDBDScrollBox) == 0x000008, "Wrong alignment on UDBDScrollBox");
static_assert(sizeof(UDBDScrollBox) == 0x000950, "Wrong size on UDBDScrollBox");
static_assert(offsetof(UDBDScrollBox, _useControllerScroll) == 0x000910, "Member 'UDBDScrollBox::_useControllerScroll' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, _shouldScrollOnMouseOver) == 0x000911, "Member 'UDBDScrollBox::_shouldScrollOnMouseOver' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, _scrollSpeed) == 0x000914, "Member 'UDBDScrollBox::_scrollSpeed' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, _displayPrompt) == 0x000918, "Member 'UDBDScrollBox::_displayPrompt' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, _displayPromptText) == 0x000920, "Member 'UDBDScrollBox::_displayPromptText' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, _showDisplayPrompt) == 0x000938, "Member 'UDBDScrollBox::_showDisplayPrompt' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, IsUsingSmoothMask) == 0x000939, "Member 'UDBDScrollBox::IsUsingSmoothMask' has a wrong offset!");
static_assert(offsetof(UDBDScrollBox, SmoothMaskRetainerBox) == 0x000940, "Member 'UDBDScrollBox::SmoothMaskRetainerBox' has a wrong offset!");

// Class DBDUIViewsCore.DBDTextBlock
// 0x0110 (0x0400 - 0x02F0)
class UDBDTextBlock final : public UTextBlock
{
public:
	class FString                                 TextStyle;                                         // 0x02F0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USwitchDockStateManager*                _switchDockStateManager;                           // 0x0300(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextManager*                        _textManager;                                      // 0x0308(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _characterLimit;                                   // 0x0310(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isUpperCase;                                      // 0x0314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hasLargeText;                                     // 0x0315(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_316[0x2];                                      // 0x0316(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockOverrideProperties           _largeTextProperties;                              // 0x0318(0x0048)(Edit, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_360[0x1];                                      // 0x0360(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _overrideUndockedPropertiesWithLargeText;          // 0x0361(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hasUndocking;                                     // 0x0362(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_363[0x5];                                      // 0x0363(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockOverrideProperties           _undockedProperties;                               // 0x0368(0x0048)(Edit, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B0[0x50];                                     // 0x03B0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLargeTextSettingsChanged(bool isLargeText);
	void OnSwitchDockStateChanged(bool isDocked);
	void PreviewLargeText();
	void PreviewUndocked();
	void SetIsUpperCase(bool isUpperCase);

	bool GetIsUpperCase() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDTextBlock">();
	}
	static class UDBDTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDTextBlock>();
	}
};
static_assert(alignof(UDBDTextBlock) == 0x000008, "Wrong alignment on UDBDTextBlock");
static_assert(sizeof(UDBDTextBlock) == 0x000400, "Wrong size on UDBDTextBlock");
static_assert(offsetof(UDBDTextBlock, TextStyle) == 0x0002F0, "Member 'UDBDTextBlock::TextStyle' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _switchDockStateManager) == 0x000300, "Member 'UDBDTextBlock::_switchDockStateManager' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _textManager) == 0x000308, "Member 'UDBDTextBlock::_textManager' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _characterLimit) == 0x000310, "Member 'UDBDTextBlock::_characterLimit' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _isUpperCase) == 0x000314, "Member 'UDBDTextBlock::_isUpperCase' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _hasLargeText) == 0x000315, "Member 'UDBDTextBlock::_hasLargeText' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _largeTextProperties) == 0x000318, "Member 'UDBDTextBlock::_largeTextProperties' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _overrideUndockedPropertiesWithLargeText) == 0x000361, "Member 'UDBDTextBlock::_overrideUndockedPropertiesWithLargeText' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _hasUndocking) == 0x000362, "Member 'UDBDTextBlock::_hasUndocking' has a wrong offset!");
static_assert(offsetof(UDBDTextBlock, _undockedProperties) == 0x000368, "Member 'UDBDTextBlock::_undockedProperties' has a wrong offset!");

// Class DBDUIViewsCore.TooltipRoot
// 0x0008 (0x02A0 - 0x0298)
class UTooltipRoot final : public UUserWidget
{
public:
	class UCanvasPanel*                           _canvasPanel;                                      // 0x0298(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TooltipRoot">();
	}
	static class UTooltipRoot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTooltipRoot>();
	}
};
static_assert(alignof(UTooltipRoot) == 0x000008, "Wrong alignment on UTooltipRoot");
static_assert(sizeof(UTooltipRoot) == 0x0002A0, "Wrong size on UTooltipRoot");
static_assert(offsetof(UTooltipRoot, _canvasPanel) == 0x000298, "Member 'UTooltipRoot::_canvasPanel' has a wrong offset!");

// Class DBDUIViewsCore.DBDTooltipManager
// 0x0070 (0x00A8 - 0x0038)
class UDBDTooltipManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UTooltipRoot*                           _rootWidget;                                       // 0x0048(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<ETooltipType, class UUserWidget*>        _tooltipPool;                                      // 0x0050(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UUserWidget*                            _currentTooltip;                                   // 0x00A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HideTooltip();
	void OnViewportCreated();
	void ShowArchiveCompendiumTooltip(const struct FCompendiumButtonData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowArchiveNodeTooltip(const struct FArchiveNodeViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowArchiveRewardNodeTooltip(const struct FArchiveRewardNodeTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowCharacterTooltip(const struct FCharacterTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowCurrencyTooltip(const struct FCurrencyProgressionTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowCustomizationTooltip(const struct FCustomizationTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowLabelTooltip(const class FText& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);
	void ShowLoadoutTooltip(const struct FLoadoutTooltipData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDTooltipManager">();
	}
	static class UDBDTooltipManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDTooltipManager>();
	}
};
static_assert(alignof(UDBDTooltipManager) == 0x000008, "Wrong alignment on UDBDTooltipManager");
static_assert(sizeof(UDBDTooltipManager) == 0x0000A8, "Wrong size on UDBDTooltipManager");
static_assert(offsetof(UDBDTooltipManager, _rootWidget) == 0x000048, "Member 'UDBDTooltipManager::_rootWidget' has a wrong offset!");
static_assert(offsetof(UDBDTooltipManager, _tooltipPool) == 0x000050, "Member 'UDBDTooltipManager::_tooltipPool' has a wrong offset!");
static_assert(offsetof(UDBDTooltipManager, _currentTooltip) == 0x0000A0, "Member 'UDBDTooltipManager::_currentTooltip' has a wrong offset!");

// Class DBDUIViewsCore.DBDWrapBox
// 0x0020 (0x0168 - 0x0148)
class UDBDWrapBox final : public UPanelWidget
{
public:
	struct FVector2D                              InnerSlotPadding;                                  // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WrapWidth;                                         // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplicitWrapWidth;                                // 0x0154(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0155(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_156[0x12];                                     // 0x0156(0x0012)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UDBDWrapBoxSlot* AddChildToWrapBox(class UWidget* Content);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetInnerSlotPadding(const struct FVector2D& InPadding);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDWrapBox">();
	}
	static class UDBDWrapBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDWrapBox>();
	}
};
static_assert(alignof(UDBDWrapBox) == 0x000008, "Wrong alignment on UDBDWrapBox");
static_assert(sizeof(UDBDWrapBox) == 0x000168, "Wrong size on UDBDWrapBox");
static_assert(offsetof(UDBDWrapBox, InnerSlotPadding) == 0x000148, "Member 'UDBDWrapBox::InnerSlotPadding' has a wrong offset!");
static_assert(offsetof(UDBDWrapBox, WrapWidth) == 0x000150, "Member 'UDBDWrapBox::WrapWidth' has a wrong offset!");
static_assert(offsetof(UDBDWrapBox, bExplicitWrapWidth) == 0x000154, "Member 'UDBDWrapBox::bExplicitWrapWidth' has a wrong offset!");
static_assert(offsetof(UDBDWrapBox, HorizontalAlignment) == 0x000155, "Member 'UDBDWrapBox::HorizontalAlignment' has a wrong offset!");

// Class DBDUIViewsCore.DBDWrapBoxSlot
// 0x0028 (0x0068 - 0x0040)
class UDBDWrapBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFillEmptySpace;                                   // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FillSpanWhenLessThan;                              // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0xE];                                       // 0x005A(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFillEmptySpace(bool InbFillEmptySpace);
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDWrapBoxSlot">();
	}
	static class UDBDWrapBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDWrapBoxSlot>();
	}
};
static_assert(alignof(UDBDWrapBoxSlot) == 0x000008, "Wrong alignment on UDBDWrapBoxSlot");
static_assert(sizeof(UDBDWrapBoxSlot) == 0x000068, "Wrong size on UDBDWrapBoxSlot");
static_assert(offsetof(UDBDWrapBoxSlot, Padding) == 0x000040, "Member 'UDBDWrapBoxSlot::Padding' has a wrong offset!");
static_assert(offsetof(UDBDWrapBoxSlot, bFillEmptySpace) == 0x000050, "Member 'UDBDWrapBoxSlot::bFillEmptySpace' has a wrong offset!");
static_assert(offsetof(UDBDWrapBoxSlot, FillSpanWhenLessThan) == 0x000054, "Member 'UDBDWrapBoxSlot::FillSpanWhenLessThan' has a wrong offset!");
static_assert(offsetof(UDBDWrapBoxSlot, HorizontalAlignment) == 0x000058, "Member 'UDBDWrapBoxSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UDBDWrapBoxSlot, VerticalAlignment) == 0x000059, "Member 'UDBDWrapBoxSlot::VerticalAlignment' has a wrong offset!");

// Class DBDUIViewsCore.DragZone
// 0x0058 (0x02F0 - 0x0298)
class UDragZone final : public UUserWidget
{
public:
	TMulticastInlineDelegate<void(const struct FVector2D& cursorDelta)> OnDragDelegate;              // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         DeadZone;                                          // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDragZoneAxis                                 Axis;                                              // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBorder*                                DebugPreview;                                      // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDButton*                             HitzoneButton;                                     // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C0[0x30];                                     // 0x02C0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAnalogInput(const struct FAnalogInputEvent& analogEvent);
	void OnMouseHoverHitzone();
	void OnMouseMoveGlobal(const struct FPointerEvent& mouseEvent);
	void OnMousePressGlobal(const struct FPointerEvent& mouseEvent);
	void OnMousePressHitzone();
	void OnMouseReleaseGlobal(const struct FPointerEvent& mouseEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragZone">();
	}
	static class UDragZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragZone>();
	}
};
static_assert(alignof(UDragZone) == 0x000008, "Wrong alignment on UDragZone");
static_assert(sizeof(UDragZone) == 0x0002F0, "Wrong size on UDragZone");
static_assert(offsetof(UDragZone, OnDragDelegate) == 0x000298, "Member 'UDragZone::OnDragDelegate' has a wrong offset!");
static_assert(offsetof(UDragZone, DeadZone) == 0x0002A8, "Member 'UDragZone::DeadZone' has a wrong offset!");
static_assert(offsetof(UDragZone, Axis) == 0x0002AC, "Member 'UDragZone::Axis' has a wrong offset!");
static_assert(offsetof(UDragZone, DebugPreview) == 0x0002B0, "Member 'UDragZone::DebugPreview' has a wrong offset!");
static_assert(offsetof(UDragZone, HitzoneButton) == 0x0002B8, "Member 'UDragZone::HitzoneButton' has a wrong offset!");

// Class DBDUIViewsCore.EventEntryPopupWidget
// 0x0058 (0x03C0 - 0x0368)
class UEventEntryPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDImage*                              ImageContainer;                                    // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              TitleBanner;                                       // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              TitleImage;                                        // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              BackgroundImage;                                   // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDScrollBox*                          ScrollBox;                                         // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          EventDateText;                                     // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      AdditionalInformationText;                         // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             _eventSkinDataTable;                               // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class FName EventLabel)> _eventEntrySkinUpdatedEvent;              // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void setWidgetSkinFromEventLabel(const class FText& eventLabel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryPopupWidget">();
	}
	static class UEventEntryPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryPopupWidget>();
	}
};
static_assert(alignof(UEventEntryPopupWidget) == 0x000008, "Wrong alignment on UEventEntryPopupWidget");
static_assert(sizeof(UEventEntryPopupWidget) == 0x0003C0, "Wrong size on UEventEntryPopupWidget");
static_assert(offsetof(UEventEntryPopupWidget, ImageContainer) == 0x000370, "Member 'UEventEntryPopupWidget::ImageContainer' has a wrong offset!");
static_assert(offsetof(UEventEntryPopupWidget, TitleBanner) == 0x000378, "Member 'UEventEntryPopupWidget::TitleBanner' has a wrong offset!");
static_assert(offsetof(UEventEntryPopupWidget, TitleImage) == 0x000380, "Member 'UEventEntryPopupWidget::TitleImage' has a wrong offset!");
static_assert(offsetof(UEventEntryPopupWidget, BackgroundImage) == 0x000388, "Member 'UEventEntryPopupWidget::BackgroundImage' has a wrong offset!");
static_assert(offsetof(UEventEntryPopupWidget, ScrollBox) == 0x000390, "Member 'UEventEntryPopupWidget::ScrollBox' has a wrong offset!");
static_assert(offsetof(UEventEntryPopupWidget, EventDateText) == 0x000398, "Member 'UEventEntryPopupWidget::EventDateText' has a wrong offset!");
static_assert(offsetof(UEventEntryPopupWidget, AdditionalInformationText) == 0x0003A0, "Member 'UEventEntryPopupWidget::AdditionalInformationText' has a wrong offset!");
static_assert(offsetof(UEventEntryPopupWidget, _eventSkinDataTable) == 0x0003A8, "Member 'UEventEntryPopupWidget::_eventSkinDataTable' has a wrong offset!");
static_assert(offsetof(UEventEntryPopupWidget, _eventEntrySkinUpdatedEvent) == 0x0003B0, "Member 'UEventEntryPopupWidget::_eventEntrySkinUpdatedEvent' has a wrong offset!");

// Class DBDUIViewsCore.LabelTooltipWidget
// 0x0008 (0x0318 - 0x0310)
class ULabelTooltipWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDRichTextBlock*                      LabelRTB;                                          // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Reset();
	void SetTooltipData(const class FText& labelText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LabelTooltipWidget">();
	}
	static class ULabelTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULabelTooltipWidget>();
	}
};
static_assert(alignof(ULabelTooltipWidget) == 0x000008, "Wrong alignment on ULabelTooltipWidget");
static_assert(sizeof(ULabelTooltipWidget) == 0x000318, "Wrong size on ULabelTooltipWidget");
static_assert(offsetof(ULabelTooltipWidget, LabelRTB) == 0x000310, "Member 'ULabelTooltipWidget::LabelRTB' has a wrong offset!");

// Class DBDUIViewsCore.LoadoutMenuPopupWidget
// 0x02D8 (0x0640 - 0x0368)
class ULoadoutMenuPopupWidget final : public UCoreGenericPopupWidget
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDRichTextBlock*                      LoadoutMenuPowerItemRTB;                           // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      LoadoutMenuAddonRTB;                               // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      LoadoutMenuOfferingRTB;                            // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      LoadoutMenuPerkRTB;                                // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          BotRoleIndexText;                                  // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      LoadoutMenuInventoryRTB;                           // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      LoadoutMenuSubtitleRTB;                            // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      LoadoutMenuPresetRTB;                              // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDDropDownListWidget*                 DropDownListWidget;                                // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDDropDownListButton*                 DropDownListTrigger;                               // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuPowerWidget*                   CoreMenuPower;                                     // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuItemWidget*                    CoreMenuItem;                                      // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuAddonWidget*                   CoreAddon_1;                                       // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuAddonWidget*                   CoreAddon_2;                                       // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuOfferingWidget*                CoreOffering;                                      // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuPerkWidget*                    CorePerk_1;                                        // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuPerkWidget*                    CorePerk_2;                                        // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuPerkWidget*                    CorePerk_3;                                        // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreMenuPerkWidget*                    CorePerk_4;                                        // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePresetWidgetContainer*             PresetContainer;                                   // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             InventoryGridContainer;                            // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCorePaginationContainerWidget*         PaginationGridContainer;                           // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               LeftArrow;                                         // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCoreInputSwitcherWidget*               RightArrow;                                        // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              _onPaginationAnimationCompletedDelegate;           // 0x0430(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(ELoadoutSlot slotIndex)> _onLoadoutMenuSlotClickedDelegate;        // 0x0440(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(ELoadoutSlot slotSelected)> _onLoadoutMenuSlotSelectedDelegate;    // 0x0450(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(ELoadoutSlot itemIndex, const class FName itemId)> _onLoadoutMenuInventorySlotClickedDelegate; // 0x0460(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 presetId, ELoadoutSlot slotSelected)> _onLoadoutMenuPresetSlotClickedDelegate; // 0x0470(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 SelectedCharacter)> _onSelectedCharacterChangedDelegate;     // 0x0480(0x0010)(ZeroConstructor, InstancedReference, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreMenuPowerWidget>       _loadoutPowerClass;                                // 0x0490(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreMenuItemWidget>        _loadoutItemWidgetClass;                           // 0x0498(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreMenuAddonWidget>       _loadoutAddonClass;                                // 0x04A0(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreMenuOfferingWidget>    _loadoutOfferingClass;                             // 0x04A8(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCoreMenuPerkWidget>        _loadoutPerkClass;                                 // 0x04B0(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCorePaginationContainerWidget> _paginationWidgetClass;                        // 0x04B8(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _inventoryPerRow;                                  // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _inventoryPerColumn;                               // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _cellsPerRow;                                      // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                _inventoryItemPadding;                             // 0x04CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                _inventoryPerkPadding;                             // 0x04DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                _inventoryOfferingPadding;                         // 0x04EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         _inventoryPerkExtraNudge;                          // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _inventoryOfferingExtraNudge;                      // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETooltipHorizontalAlignment                   HorizontalAlignment;                               // 0x0504(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETooltipVerticalAlignment                     VerticalAlignment;                                 // 0x0505(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_506[0x2];                                      // 0x0506(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCoreMenuLoadoutPartWidget*>     _inventoryItemWidgetList;                          // 0x0508(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreMenuPerkWidget*>            _perkSlotWidget;                                   // 0x0518(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UCoreMenuAddonWidget*>           _addonSlotWidget;                                  // 0x0528(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UMenuLoadoutPartViewData*               _menuLoadoutPartViewData;                          // 0x0538(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ELoadoutSlot                                  _loadoutSelectedSlot;                              // 0x0540(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_541[0x3];                                      // 0x0541(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _numberOfPaginationItem;                           // 0x0544(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ULoadoutMenuPopupViewData*>      _perkData;                                         // 0x0548(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class ULoadoutMenuPopupViewData*>      _addonLoadoutData;                                 // 0x0558(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class ULoadoutMenuPopupViewData*>      _inventoryViewData;                                // 0x0568(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_578[0xC8];                                     // 0x0578(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideMenuLoadoutPartsTooltip(class UCoreButtonWidget* unhoveredSlotWidget);
	void OnDropDownListSelectedOptionChanged(const struct FTabWidgetData& buttonData);
	void OnDropdownSelected(ESlateVisibility InVisibility);
	void OnLoadoutMenuAddonSlotClicked(class UCoreButtonWidget* menuAddonWidget);
	void OnLoadoutMenuInventorySlotClicked(class UCoreButtonWidget* menuPerkWidget);
	void OnLoadoutMenuItemSlotClicked(class UCoreButtonWidget* menuItemWidget);
	void OnLoadoutMenuLeftArrowClicked();
	void OnLoadoutMenuOfferingSlotClicked(class UCoreButtonWidget* menuOfferingWidget);
	void OnLoadoutMenuPerkSlotClicked(class UCoreButtonWidget* menuPerkWidget);
	void OnLoadoutMenuPowerSlotClicked(class UCoreButtonWidget* menuPowerWidget);
	void OnLoadoutMenuPresetClicked(const int32 selectedPresetId);
	void OnLoadoutMenuRightArrowClicked();
	void OnPaginationSelected(const int32 currentPage, bool isUpdate);
	void PlayPaginationInAnimation();
	void PlayPaginationOutAnimation(bool isNextPage);
	void SetInventoryItemEnabled(class UCoreMenuLoadoutPartWidget* widget, const EItemAvailability availability);
	void ShowMenuLoadoutPartsTooltip(class UCoreButtonWidget* hoveredSlotWidget);
	void UpdateInventoryItemData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadoutMenuPopupWidget">();
	}
	static class ULoadoutMenuPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadoutMenuPopupWidget>();
	}
};
static_assert(alignof(ULoadoutMenuPopupWidget) == 0x000008, "Wrong alignment on ULoadoutMenuPopupWidget");
static_assert(sizeof(ULoadoutMenuPopupWidget) == 0x000640, "Wrong size on ULoadoutMenuPopupWidget");
static_assert(offsetof(ULoadoutMenuPopupWidget, LoadoutMenuPowerItemRTB) == 0x000370, "Member 'ULoadoutMenuPopupWidget::LoadoutMenuPowerItemRTB' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, LoadoutMenuAddonRTB) == 0x000378, "Member 'ULoadoutMenuPopupWidget::LoadoutMenuAddonRTB' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, LoadoutMenuOfferingRTB) == 0x000380, "Member 'ULoadoutMenuPopupWidget::LoadoutMenuOfferingRTB' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, LoadoutMenuPerkRTB) == 0x000388, "Member 'ULoadoutMenuPopupWidget::LoadoutMenuPerkRTB' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, BotRoleIndexText) == 0x000390, "Member 'ULoadoutMenuPopupWidget::BotRoleIndexText' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, LoadoutMenuInventoryRTB) == 0x000398, "Member 'ULoadoutMenuPopupWidget::LoadoutMenuInventoryRTB' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, LoadoutMenuSubtitleRTB) == 0x0003A0, "Member 'ULoadoutMenuPopupWidget::LoadoutMenuSubtitleRTB' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, LoadoutMenuPresetRTB) == 0x0003A8, "Member 'ULoadoutMenuPopupWidget::LoadoutMenuPresetRTB' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, DropDownListWidget) == 0x0003B0, "Member 'ULoadoutMenuPopupWidget::DropDownListWidget' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, DropDownListTrigger) == 0x0003B8, "Member 'ULoadoutMenuPopupWidget::DropDownListTrigger' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, CoreMenuPower) == 0x0003C0, "Member 'ULoadoutMenuPopupWidget::CoreMenuPower' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, CoreMenuItem) == 0x0003C8, "Member 'ULoadoutMenuPopupWidget::CoreMenuItem' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, CoreAddon_1) == 0x0003D0, "Member 'ULoadoutMenuPopupWidget::CoreAddon_1' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, CoreAddon_2) == 0x0003D8, "Member 'ULoadoutMenuPopupWidget::CoreAddon_2' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, CoreOffering) == 0x0003E0, "Member 'ULoadoutMenuPopupWidget::CoreOffering' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, CorePerk_1) == 0x0003E8, "Member 'ULoadoutMenuPopupWidget::CorePerk_1' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, CorePerk_2) == 0x0003F0, "Member 'ULoadoutMenuPopupWidget::CorePerk_2' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, CorePerk_3) == 0x0003F8, "Member 'ULoadoutMenuPopupWidget::CorePerk_3' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, CorePerk_4) == 0x000400, "Member 'ULoadoutMenuPopupWidget::CorePerk_4' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, PresetContainer) == 0x000408, "Member 'ULoadoutMenuPopupWidget::PresetContainer' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, InventoryGridContainer) == 0x000410, "Member 'ULoadoutMenuPopupWidget::InventoryGridContainer' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, PaginationGridContainer) == 0x000418, "Member 'ULoadoutMenuPopupWidget::PaginationGridContainer' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, LeftArrow) == 0x000420, "Member 'ULoadoutMenuPopupWidget::LeftArrow' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, RightArrow) == 0x000428, "Member 'ULoadoutMenuPopupWidget::RightArrow' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _onPaginationAnimationCompletedDelegate) == 0x000430, "Member 'ULoadoutMenuPopupWidget::_onPaginationAnimationCompletedDelegate' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _onLoadoutMenuSlotClickedDelegate) == 0x000440, "Member 'ULoadoutMenuPopupWidget::_onLoadoutMenuSlotClickedDelegate' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _onLoadoutMenuSlotSelectedDelegate) == 0x000450, "Member 'ULoadoutMenuPopupWidget::_onLoadoutMenuSlotSelectedDelegate' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _onLoadoutMenuInventorySlotClickedDelegate) == 0x000460, "Member 'ULoadoutMenuPopupWidget::_onLoadoutMenuInventorySlotClickedDelegate' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _onLoadoutMenuPresetSlotClickedDelegate) == 0x000470, "Member 'ULoadoutMenuPopupWidget::_onLoadoutMenuPresetSlotClickedDelegate' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _onSelectedCharacterChangedDelegate) == 0x000480, "Member 'ULoadoutMenuPopupWidget::_onSelectedCharacterChangedDelegate' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _loadoutPowerClass) == 0x000490, "Member 'ULoadoutMenuPopupWidget::_loadoutPowerClass' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _loadoutItemWidgetClass) == 0x000498, "Member 'ULoadoutMenuPopupWidget::_loadoutItemWidgetClass' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _loadoutAddonClass) == 0x0004A0, "Member 'ULoadoutMenuPopupWidget::_loadoutAddonClass' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _loadoutOfferingClass) == 0x0004A8, "Member 'ULoadoutMenuPopupWidget::_loadoutOfferingClass' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _loadoutPerkClass) == 0x0004B0, "Member 'ULoadoutMenuPopupWidget::_loadoutPerkClass' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _paginationWidgetClass) == 0x0004B8, "Member 'ULoadoutMenuPopupWidget::_paginationWidgetClass' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _inventoryPerRow) == 0x0004C0, "Member 'ULoadoutMenuPopupWidget::_inventoryPerRow' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _inventoryPerColumn) == 0x0004C4, "Member 'ULoadoutMenuPopupWidget::_inventoryPerColumn' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _cellsPerRow) == 0x0004C8, "Member 'ULoadoutMenuPopupWidget::_cellsPerRow' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _inventoryItemPadding) == 0x0004CC, "Member 'ULoadoutMenuPopupWidget::_inventoryItemPadding' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _inventoryPerkPadding) == 0x0004DC, "Member 'ULoadoutMenuPopupWidget::_inventoryPerkPadding' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _inventoryOfferingPadding) == 0x0004EC, "Member 'ULoadoutMenuPopupWidget::_inventoryOfferingPadding' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _inventoryPerkExtraNudge) == 0x0004FC, "Member 'ULoadoutMenuPopupWidget::_inventoryPerkExtraNudge' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _inventoryOfferingExtraNudge) == 0x000500, "Member 'ULoadoutMenuPopupWidget::_inventoryOfferingExtraNudge' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, HorizontalAlignment) == 0x000504, "Member 'ULoadoutMenuPopupWidget::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, VerticalAlignment) == 0x000505, "Member 'ULoadoutMenuPopupWidget::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _inventoryItemWidgetList) == 0x000508, "Member 'ULoadoutMenuPopupWidget::_inventoryItemWidgetList' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _perkSlotWidget) == 0x000518, "Member 'ULoadoutMenuPopupWidget::_perkSlotWidget' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _addonSlotWidget) == 0x000528, "Member 'ULoadoutMenuPopupWidget::_addonSlotWidget' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _menuLoadoutPartViewData) == 0x000538, "Member 'ULoadoutMenuPopupWidget::_menuLoadoutPartViewData' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _loadoutSelectedSlot) == 0x000540, "Member 'ULoadoutMenuPopupWidget::_loadoutSelectedSlot' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _numberOfPaginationItem) == 0x000544, "Member 'ULoadoutMenuPopupWidget::_numberOfPaginationItem' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _perkData) == 0x000548, "Member 'ULoadoutMenuPopupWidget::_perkData' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _addonLoadoutData) == 0x000558, "Member 'ULoadoutMenuPopupWidget::_addonLoadoutData' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPopupWidget, _inventoryViewData) == 0x000568, "Member 'ULoadoutMenuPopupWidget::_inventoryViewData' has a wrong offset!");

// Class DBDUIViewsCore.LoadoutTooltipWidget
// 0x0050 (0x0360 - 0x0310)
class ULoadoutTooltipWidget final : public UCoreBaseUserWidget
{
public:
	class UDBDTextBlock*                          TooltipTitle;                                      // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      ToolTipDescriptionRTB;                             // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SpecialEventTitle;                                 // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          SpecialEventDescription;                           // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          UnlockInstructionText;                             // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDTextBlock*                          RarityTypeSubtitle;                                // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              RarityBG;                                          // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              Line_1;                                            // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDImage*                              LevelIcon;                                         // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDBDRichTextBlock*                      ToolTipWarning;                                    // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Reset();
	void SetLoadoutTooltipLockedState();
	void SetLoadoutTooltipPerkLevel(int32 level);
	void SetTooltipData(const struct FLoadoutTooltipData& tooltipViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadoutTooltipWidget">();
	}
	static class ULoadoutTooltipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadoutTooltipWidget>();
	}
};
static_assert(alignof(ULoadoutTooltipWidget) == 0x000008, "Wrong alignment on ULoadoutTooltipWidget");
static_assert(sizeof(ULoadoutTooltipWidget) == 0x000360, "Wrong size on ULoadoutTooltipWidget");
static_assert(offsetof(ULoadoutTooltipWidget, TooltipTitle) == 0x000310, "Member 'ULoadoutTooltipWidget::TooltipTitle' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, ToolTipDescriptionRTB) == 0x000318, "Member 'ULoadoutTooltipWidget::ToolTipDescriptionRTB' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, SpecialEventTitle) == 0x000320, "Member 'ULoadoutTooltipWidget::SpecialEventTitle' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, SpecialEventDescription) == 0x000328, "Member 'ULoadoutTooltipWidget::SpecialEventDescription' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, UnlockInstructionText) == 0x000330, "Member 'ULoadoutTooltipWidget::UnlockInstructionText' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, RarityTypeSubtitle) == 0x000338, "Member 'ULoadoutTooltipWidget::RarityTypeSubtitle' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, RarityBG) == 0x000340, "Member 'ULoadoutTooltipWidget::RarityBG' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, Line_1) == 0x000348, "Member 'ULoadoutTooltipWidget::Line_1' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, LevelIcon) == 0x000350, "Member 'ULoadoutTooltipWidget::LevelIcon' has a wrong offset!");
static_assert(offsetof(ULoadoutTooltipWidget, ToolTipWarning) == 0x000358, "Member 'ULoadoutTooltipWidget::ToolTipWarning' has a wrong offset!");

// Class DBDUIViewsCore.RichTextBlockImageSharedSizeDecorator
// 0x0008 (0x0040 - 0x0038)
class URichTextBlockImageSharedSizeDecorator final : public URichTextBlockImageDecorator
{
public:
	int32                                         Width;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextBlockImageSharedSizeDecorator">();
	}
	static class URichTextBlockImageSharedSizeDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextBlockImageSharedSizeDecorator>();
	}
};
static_assert(alignof(URichTextBlockImageSharedSizeDecorator) == 0x000008, "Wrong alignment on URichTextBlockImageSharedSizeDecorator");
static_assert(sizeof(URichTextBlockImageSharedSizeDecorator) == 0x000040, "Wrong size on URichTextBlockImageSharedSizeDecorator");
static_assert(offsetof(URichTextBlockImageSharedSizeDecorator, Width) == 0x000038, "Member 'URichTextBlockImageSharedSizeDecorator::Width' has a wrong offset!");
static_assert(offsetof(URichTextBlockImageSharedSizeDecorator, Height) == 0x00003C, "Member 'URichTextBlockImageSharedSizeDecorator::Height' has a wrong offset!");

// Class DBDUIViewsCore.RichTextBlockScalableImageDecorator
// 0x0000 (0x0038 - 0x0038)
class URichTextBlockScalableImageDecorator final : public URichTextBlockImageDecorator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextBlockScalableImageDecorator">();
	}
	static class URichTextBlockScalableImageDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextBlockScalableImageDecorator>();
	}
};
static_assert(alignof(URichTextBlockScalableImageDecorator) == 0x000008, "Wrong alignment on URichTextBlockScalableImageDecorator");
static_assert(sizeof(URichTextBlockScalableImageDecorator) == 0x000038, "Wrong size on URichTextBlockScalableImageDecorator");

// Class DBDUIViewsCore.RichTextHTMLDecorator
// 0x0000 (0x0030 - 0x0030)
class URichTextHTMLDecorator final : public URichTextBlockDecorator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextHTMLDecorator">();
	}
	static class URichTextHTMLDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextHTMLDecorator>();
	}
};
static_assert(alignof(URichTextHTMLDecorator) == 0x000008, "Wrong alignment on URichTextHTMLDecorator");
static_assert(sizeof(URichTextHTMLDecorator) == 0x000030, "Wrong size on URichTextHTMLDecorator");

// Class DBDUIViewsCore.RichTextNestedTagsDecorator
// 0x0050 (0x0080 - 0x0030)
class URichTextNestedTagsDecorator final : public URichTextBlockDecorator
{
public:
	uint8                                         Pad_30[0x50];                                      // 0x0030(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextNestedTagsDecorator">();
	}
	static class URichTextNestedTagsDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextNestedTagsDecorator>();
	}
};
static_assert(alignof(URichTextNestedTagsDecorator) == 0x000008, "Wrong alignment on URichTextNestedTagsDecorator");
static_assert(sizeof(URichTextNestedTagsDecorator) == 0x000080, "Wrong size on URichTextNestedTagsDecorator");

// Class DBDUIViewsCore.TestWidget
// 0x0010 (0x0320 - 0x0310)
class UTestWidget final : public UCoreBaseUserWidget
{
public:
	class UPanelWidget*                           Workbench;                                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ShowWorkbench;                                     // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetShowWorkbench(bool showWorkbench);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestWidget">();
	}
	static class UTestWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestWidget>();
	}
};
static_assert(alignof(UTestWidget) == 0x000008, "Wrong alignment on UTestWidget");
static_assert(sizeof(UTestWidget) == 0x000320, "Wrong size on UTestWidget");
static_assert(offsetof(UTestWidget, Workbench) == 0x000310, "Member 'UTestWidget::Workbench' has a wrong offset!");
static_assert(offsetof(UTestWidget, ShowWorkbench) == 0x000318, "Member 'UTestWidget::ShowWorkbench' has a wrong offset!");

}

