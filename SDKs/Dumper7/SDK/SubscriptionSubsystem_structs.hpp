#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SubscriptionSubsystem

#include "Basic.hpp"

#include "RewardUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SubscriptionSubsystem.ESubscriptionClaimType
// NumValues: 0x0004
enum class ESubscriptionClaimType : uint8
{
	None                                     = 0,
	Daily                                    = 1,
	Renewal                                  = 2,
	ESubscriptionClaimType_MAX               = 3,
};

// ScriptStruct SubscriptionSubsystem.SubscriptionReward
// 0x0028 (0x0028 - 0x0000)
struct FSubscriptionReward final
{
public:
	TArray<struct FRewardItem>                    Rewards;                                           // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FDateTime                              NextClaimTime;                                     // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AnalyticsEventId;                                  // 0x0018(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubscriptionReward) == 0x000008, "Wrong alignment on FSubscriptionReward");
static_assert(sizeof(FSubscriptionReward) == 0x000028, "Wrong size on FSubscriptionReward");
static_assert(offsetof(FSubscriptionReward, Rewards) == 0x000000, "Member 'FSubscriptionReward::Rewards' has a wrong offset!");
static_assert(offsetof(FSubscriptionReward, NextClaimTime) == 0x000010, "Member 'FSubscriptionReward::NextClaimTime' has a wrong offset!");
static_assert(offsetof(FSubscriptionReward, AnalyticsEventId) == 0x000018, "Member 'FSubscriptionReward::AnalyticsEventId' has a wrong offset!");

// ScriptStruct SubscriptionSubsystem.SubscriptionRewardMap
// 0x0050 (0x0050 - 0x0000)
struct FSubscriptionRewardMap final
{
public:
	TMap<ESubscriptionClaimType, struct FSubscriptionReward> RewardsByClaimType;                     // 0x0000(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubscriptionRewardMap) == 0x000008, "Wrong alignment on FSubscriptionRewardMap");
static_assert(sizeof(FSubscriptionRewardMap) == 0x000050, "Wrong size on FSubscriptionRewardMap");
static_assert(offsetof(FSubscriptionRewardMap, RewardsByClaimType) == 0x000000, "Member 'FSubscriptionRewardMap::RewardsByClaimType' has a wrong offset!");

}

