#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDSharedTypes

#include "Basic.hpp"

#include "DataTableUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum DBDSharedTypes.EPlayerRole
// NumValues: 0x0006
enum class EPlayerRole : uint8
{
	VE_None                                  = 0,
	VE_Slasher                               = 1,
	VE_Camper                                = 2,
	VE_Observer                              = 3,
	Max                                      = 4,
	EPlayerRole_MAX                          = 5,
};

// Enum DBDSharedTypes.ECurrencyType
// NumValues: 0x0008
enum class ECurrencyType : uint8
{
	None                                     = 0,
	BloodPoints                              = 1,
	FearTokens                               = 2,
	Cells                                    = 3,
	HalloweenCoins                           = 4,
	LunarNewYearCoins                        = 5,
	HalloweenEventCurrency                   = 6,
	ECurrencyType_MAX                        = 7,
};

// Enum DBDSharedTypes.EItemRarity
// NumValues: 0x0010
enum class EItemRarity : uint8
{
	Common                                   = 0,
	Uncommon                                 = 1,
	Rare                                     = 2,
	VeryRare                                 = 3,
	UltraRare                                = 4,
	Artifact                                 = 5,
	Spectral                                 = 6,
	Teachable                                = 7,
	SpecialEvent                             = 8,
	Legendary                                = 9,
	Epic                                     = 10,
	SuperEpic                                = 11,
	UltraEpic                                = 12,
	Count                                    = 13,
	None                                     = 14,
	EItemRarity_MAX                          = 15,
};

// Enum DBDSharedTypes.EProgressionType
// NumValues: 0x0004
enum class EProgressionType : uint8
{
	None                                     = 0,
	Stars                                    = 1,
	ArchiveRiftPass                          = 2,
	EProgressionType_MAX                     = 3,
};

// Enum DBDSharedTypes.ECharacterDifficulty
// NumValues: 0x0006
enum class ECharacterDifficulty : uint8
{
	VE_None                                  = 0,
	VE_Easy                                  = 1,
	VE_Intermediate                          = 2,
	VE_Hard                                  = 3,
	VE_VeryHard                              = 4,
	VE_MAX                                   = 5,
};

// Enum DBDSharedTypes.ERewardType
// NumValues: 0x0006
enum class ERewardType : uint8
{
	None                                     = 0,
	Character                                = 1,
	Currency                                 = 2,
	Customization                            = 3,
	Progression                              = 4,
	ERewardType_MAX                          = 5,
};

// Enum DBDSharedTypes.EQuestProgressionType
// NumValues: 0x0005
enum class EQuestProgressionType : uint8
{
	None                                     = 0,
	Action                                   = 1,
	Percentage                               = 2,
	Time                                     = 3,
	EQuestProgressionType_MAX                = 4,
};

// Enum DBDSharedTypes.EStoryNodeState
// NumValues: 0x0008
enum class EStoryNodeState : uint8
{
	Unavailable                              = 0,
	AvailableDefault                         = 1,
	AvailableActive                          = 2,
	AvailablePaused                          = 3,
	Completed                                = 4,
	Claimed                                  = 5,
	None                                     = 255,
	EStoryNodeState_MAX                      = 256,
};

// Enum DBDSharedTypes.EArchiveNodeType
// NumValues: 0x0007
enum class EArchiveNodeType : uint8
{
	Narrative                                = 0,
	Task                                     = 1,
	Challenge                                = 2,
	Contextual                               = 3,
	Reward                                   = 4,
	None                                     = 255,
	EArchiveNodeType_MAX                     = 256,
};

// Enum DBDSharedTypes.EArchiveMenuState
// NumValues: 0x0006
enum class EArchiveMenuState : uint8
{
	CurrentTome                              = 0,
	EventTome                                = 1,
	PastTome                                 = 2,
	Rift                                     = 3,
	Compendium                               = 4,
	EArchiveMenuState_MAX                    = 5,
};

// Enum DBDSharedTypes.EHelpType
// NumValues: 0x0004
enum class EHelpType : uint8
{
	General                                  = 0,
	Survivor                                 = 1,
	Killer                                   = 2,
	EHelpType_MAX                            = 3,
};

// Enum DBDSharedTypes.EPopupButtonType
// NumValues: 0x0004
enum class EPopupButtonType : uint8
{
	Regression                               = 0,
	Progression                              = 1,
	Alternative                              = 2,
	EPopupButtonType_MAX                     = 3,
};

// Enum DBDSharedTypes.ELoadoutSlot
// NumValues: 0x000B
enum class ELoadoutSlot : uint8
{
	SKIN                                     = 0,
	ITEM_POWER                               = 1,
	ADD_ON_1                                 = 2,
	ADD_ON_2                                 = 3,
	PERK_1                                   = 4,
	PERK_2                                   = 5,
	PERK_3                                   = 6,
	PERK_4                                   = 7,
	FAVOR                                    = 8,
	COUNT                                    = 9,
	ELoadoutSlot_MAX                         = 10,
};

// Enum DBDSharedTypes.EControlMode
// NumValues: 0x000A
enum class EControlMode : uint8
{
	MOUSE_KB                                 = 0,
	XBOX                                     = 1,
	PS                                       = 2,
	VITA                                     = 3,
	SWITCH                                   = 4,
	STADIA                                   = 5,
	SWITCH_PRO                               = 6,
	ATLANTA                                  = 7,
	UNDEFINED                                = 8,
	EControlMode_MAX                         = 9,
};

// Enum DBDSharedTypes.EInputInteractionType
// NumValues: 0x0039
enum class EInputInteractionType : uint8
{
	VE_None                                  = 0,
	VE_Interact                              = 1,
	VE_ItemUse                               = 2,
	VE_FastInteract                          = 3,
	VE_AttackInteract                        = 4,
	VE_ItemInteract                          = 5,
	VE_Rush                                  = 6,
	VE_AbilityUse                            = 7,
	VE_ActivatablePerk01                     = 8,
	VE_ActivatablePerk02                     = 9,
	VE_ActivatablePerk03                     = 10,
	VE_ActivatablePerk04                     = 11,
	VE_Run                                   = 12,
	VE_ItemDrop                              = 13,
	VE_InteractMash                          = 14,
	VE_Struggle                              = 15,
	VE_AbilityTwo                            = 16,
	VE_Action                                = 17,
	VE_Crouch                                = 18,
	VE_ActionKiller                          = 19,
	VE_CancelCharge                          = 20,
	VE_WiggleLeft                            = 21,
	VE_WiggleRight                           = 22,
	VE_SecondaryAction                       = 23,
	VE_Gesture01                             = 24,
	VE_Gesture02                             = 25,
	VE_Gesture03                             = 26,
	VE_Gesture04                             = 27,
	VE_ExternalChainBlink                    = 28,
	VE_ExternalRequestClosetExitFast         = 29,
	VE_ExternalRequestClosetStun             = 30,
	VE_ExternalRequestDestroyWithPowerAttack = 31,
	VE_ExternalRequestDrop                   = 32,
	VE_ExternalRequestDropBySkillCheck       = 33,
	VE_ExternalRequestDropByStunning         = 34,
	VE_ExternalRequestDropByStunningWithFlashlight = 35,
	VE_ExternalRequestDropByStunningByPallet = 36,
	VE_ExternalRequestDropByWiggleFree       = 37,
	VE_ExternalRequestEscape                 = 38,
	VE_ExternalRequestFlashlightStunUncloak  = 39,
	VE_ExternalRequestGeneratorTrapStun      = 40,
	VE_ExternalRequestHarpoonRifleStun       = 41,
	VE_ExternalRequestKickStun               = 42,
	VE_ExternalRequestKillerCaughtInBearTrap = 43,
	VE_ExternalRequestPalletStun             = 44,
	VE_ExternalRequestPalletStunUncloak      = 45,
	VE_ExternalRequestPutToSleepStun         = 46,
	VE_ExternalRequestRBTExecute             = 47,
	VE_ExternalRequestRBTExecuteAtExit       = 48,
	VE_ExternalRequestSacrifice              = 49,
	VE_ExternalRequestSlashedOutOfTrap       = 50,
	VE_ExternalRequestStun                   = 51,
	VE_ExternalRequestStunBySkillCheck       = 52,
	VE_ExternalRequestStunEvilWithin         = 53,
	VE_ExternalRequestStunUncloak            = 54,
	VE_Count                                 = 55,
	VE_MAX                                   = 56,
};

// Enum DBDSharedTypes.EGameState
// NumValues: 0x000A
enum class EGameState : uint8
{
	VE_Active                                = 0,
	VE_Killed                                = 1,
	VE_Escaped                               = 2,
	VE_EscapedInjured                        = 3,
	VE_Sacrificed                            = 4,
	VE_None                                  = 5,
	VE_Disconnected                          = 6,
	VE_ManuallyLeftMatch                     = 7,
	VE_BledOut                               = 8,
	VE_MAX                                   = 9,
};

// Enum DBDSharedTypes.EAttackType
// NumValues: 0x0013
enum class EAttackType : uint8
{
	VE_None                                  = 0,
	VE_Slash                                 = 1,
	VE_Pounce                                = 2,
	VE_Chainsaw                              = 3,
	VE_Blink                                 = 4,
	VE_LFChainsaw                            = 5,
	VE_Ambush                                = 6,
	VE_Frenzy                                = 7,
	VE_GhostCrouch                           = 8,
	VE_QatarDash                             = 9,
	VE_OniBasicAttack                        = 10,
	VE_OniDemonBasicAttack                   = 11,
	VE_OniDemonPowerAttack                   = 12,
	VE_OniDemonDashAttack                    = 13,
	VE_ExecutionerTormentAttack              = 14,
	VE_BlightDash                            = 15,
	VE_TwinJump                              = 16,
	VE_K24WhipAttack                         = 17,
	VE_MAX                                   = 18,
};

// Enum DBDSharedTypes.EDetectionZone
// NumValues: 0x0010
enum class EDetectionZone : uint8
{
	VE_None                                  = 0,
	VE_Slash                                 = 1,
	VE_Pounce                                = 2,
	VE_Chainsaw                              = 3,
	VE_Obstructed                            = 4,
	VE_Interruption                          = 5,
	VE_ChainsawLockExtended                  = 6,
	VE_Damage                                = 7,
	VE_ChainsawObstruction                   = 8,
	VE_Blink                                 = 9,
	VE_ChainsawDamageExtended                = 10,
	VE_Stalker                               = 11,
	VE_Lunge                                 = 12,
	VE_PowerAttack                           = 13,
	VE_Max                                   = 14,
	VE_MAX                                   = 15,
};

// Enum DBDSharedTypes.EStunType
// NumValues: 0x000B
enum class EStunType : uint8
{
	VE_None                                  = 0,
	VE_Pallet                                = 1,
	VE_BearTrap                              = 2,
	VE_Flashlight                            = 3,
	VE_WiggleFree                            = 4,
	VE_EvilWithin                            = 5,
	VE_Kicked                                = 6,
	VE_Closet                                = 7,
	VE_HarpoonRifle                          = 8,
	VE_GeneratorTrap                         = 9,
	VE_MAX                                   = 10,
};

// Enum DBDSharedTypes.EInteractionAnimation
// NumValues: 0x001D
enum class EInteractionAnimation : uint8
{
	VE_None                                  = 0,
	VE_Generator                             = 1,
	VE_PullDownLeft                          = 2,
	VE_PullDownRight                         = 3,
	VE_Hiding                                = 4,
	VE_SearchCloset                          = 5,
	VE_HealingOther                          = 6,
	VE_OpenEscape                            = 7,
	VE_StruggleFree                          = 8,
	VE_HealOther                             = 9,
	VE_HealSelf                              = 10,
	VE_PickedUp                              = 11,
	VE_Unused01                              = 12,
	VE_Dropped                               = 13,
	VE_Unused02                              = 14,
	VE_BeingHooked                           = 15,
	VE_Sabotage                              = 16,
	VE_ChargeBlink                           = 17,
	VE_ThrowFirecracker                      = 18,
	VE_WakeUpOther                           = 19,
	VE_RemoveReverseBearTrap                 = 20,
	VE_DeadHard                              = 21,
	VE_DestroyPortal                         = 22,
	VE_OniDash                               = 23,
	VE_PickUpAnniversaryCrown                = 24,
	VE_InteractWithGlyph                     = 25,
	VE_InteractWithUnstableRift              = 26,
	VE_OpenChest                             = 27,
	VE_MAX                                   = 28,
};

// Enum DBDSharedTypes.EPawnType
// NumValues: 0x0005
enum class EPawnType : uint8
{
	VE_None                                  = 0,
	VE_Killer                                = 1,
	VE_Survivor                              = 2,
	VE_Sidekick                              = 3,
	VE_MAX                                   = 4,
};

// Enum DBDSharedTypes.EPlayerTeam
// NumValues: 0x0004
enum class EPlayerTeam : uint8
{
	VE_None                                  = 0,
	VE_Killer                                = 1,
	VE_Survivor                              = 2,
	VE_MAX                                   = 3,
};

// Enum DBDSharedTypes.EAnimNotifyType
// NumValues: 0x0004
enum class EAnimNotifyType : uint8
{
	VE_None                                  = 0,
	VE_Pickup                                = 1,
	VE_Release                               = 2,
	VE_MAX                                   = 3,
};

// Enum DBDSharedTypes.EAttackSubstate
// NumValues: 0x0008
enum class EAttackSubstate : uint8
{
	VE_None                                  = 0,
	VE_Open                                  = 1,
	VE_Hitting                               = 2,
	VE_HitSucceed                            = 3,
	VE_HitMiss                               = 4,
	VE_HitObstructed                         = 5,
	VE_Done                                  = 6,
	VE_MAX                                   = 7,
};

// Enum DBDSharedTypes.ECamperState
// NumValues: 0x0004
enum class ECamperState : uint8
{
	VE_None                                  = 0,
	VE_Navigate                              = 1,
	VE_Interact                              = 2,
	VE_MAX                                   = 3,
};

// Enum DBDSharedTypes.ELoadoutPartState
// NumValues: 0x0007
enum class ELoadoutPartState : uint8
{
	None                                     = 0,
	Default                                  = 1,
	InProgress                               = 2,
	Ready                                    = 3,
	Active                                   = 4,
	Vanished                                 = 5,
	ELoadoutPartState_MAX                    = 6,
};

// Enum DBDSharedTypes.EItemAvailability
// NumValues: 0x0004
enum class EItemAvailability : uint8
{
	Available                                = 0,
	Disabled                                 = 1,
	Retired                                  = 2,
	EItemAvailability_MAX                    = 3,
};

// Enum DBDSharedTypes.EStatusEffectType
// NumValues: 0x0005
enum class EStatusEffectType : uint8
{
	None                                     = 0,
	Buff                                     = 1,
	Debuff                                   = 2,
	Count                                    = 3,
	EStatusEffectType_MAX                    = 4,
};

// Enum DBDSharedTypes.EInventoryItemType
// NumValues: 0x0012
enum class EInventoryItemType : uint8
{
	None                                     = 0,
	Item                                     = 1,
	ItemAddOn                                = 2,
	CamperPerk                               = 3,
	Power                                    = 4,
	PowerAddOn                               = 5,
	SlasherPerk                              = 6,
	Favor                                    = 7,
	Customization                            = 8,
	IridescentShardsPack                     = 9,
	AuricCellsPack                           = 10,
	BloodPointsPack                          = 11,
	FreeTicket                               = 12,
	Chest                                    = 13,
	SuperChest                               = 14,
	EntityBox                                = 15,
	Count                                    = 16,
	EInventoryItemType_MAX                   = 17,
};

// Enum DBDSharedTypes.EKillerAbilities
// NumValues: 0x0022
enum class EKillerAbilities : uint8
{
	VE_None                                  = 0,
	VE_SpawnTraps                            = 1,
	VE_Cloak                                 = 2,
	VE_Chainsaw                              = 3,
	VE_Blink                                 = 4,
	VE_PhantomTrap                           = 5,
	VE_Stalker                               = 6,
	VE_Killer07Ability                       = 7,
	VE_Killer08Ability                       = 8,
	VE_LFChainsaw                            = 9,
	VE_InduceDreams                          = 10,
	VE_ReverseBearTrap                       = 11,
	VE_GasBomb                               = 12,
	VE_PhaseWalk                             = 13,
	VE_Frenzy                                = 14,
	VE_Vomit                                 = 15,
	VE_GhostStalker                          = 16,
	VE_GroundPortals                         = 17,
	VE_DemonMode                             = 18,
	VE_HarpoonRifle                          = 19,
	VE_TormentMode                           = 20,
	VE_K21Power                              = 21,
	VE_K22Power                              = 22,
	VE_ThrowingKnives                        = 23,
	VE_K24Power                              = 24,
	VE_Zombies                               = 25,
	VE_K25Power                              = 26,
	VE_K26Power                              = 27,
	VE_OnryoPower                            = 28,
	VE_K28Power                              = 29,
	VE_K29Power                              = 30,
	VE_K30Power                              = 31,
	VE_K31Power                              = 32,
	VE_MAX                                   = 33,
};

// Enum DBDSharedTypes.EKillerMoodInfluence
// NumValues: 0x0007
enum class EKillerMoodInfluence : uint8
{
	VE_None                                  = 0,
	VE_Chuckles                              = 1,
	VE_Banshee                               = 2,
	VE_Hillbilly                             = 3,
	VE_Nurse                                 = 4,
	VE_Shape                                 = 5,
	VE_MAX                                   = 6,
};

// Enum DBDSharedTypes.ESkillCheckCustomType
// NumValues: 0x000F
enum class ESkillCheckCustomType : uint8
{
	VE_None                                  = 0,
	VE_OnPickedUp                            = 1,
	VE_OnAttacked                            = 2,
	VE_DecisiveStrikeWhileWiggling           = 3,
	VE_GeneratorOvercharge1                  = 4,
	VE_GeneratorOvercharge2                  = 5,
	VE_GeneratorOvercharge3                  = 6,
	VE_BrandNewPart                          = 7,
	VE_Struggle                              = 8,
	VE_OppressionPerkGeneratorKicked         = 9,
	VE_SoulChemical                          = 10,
	VE_Wiggle                                = 11,
	VE_YellowGlyph                           = 12,
	VE_K27P03Continuous                      = 13,
	VE_MAX                                   = 14,
};

// Enum DBDSharedTypes.ELoadoutItemType
// NumValues: 0x000A
enum class ELoadoutItemType : uint8
{
	None                                     = 0,
	Medkit                                   = 1,
	Toolbox                                  = 2,
	Flashlight                               = 3,
	Key                                      = 4,
	Map                                      = 5,
	Firecracker                              = 6,
	Flashbang                                = 7,
	Count                                    = 8,
	ELoadoutItemType_MAX                     = 9,
};

// Enum DBDSharedTypes.ELeanState
// NumValues: 0x0004
enum class ELeanState : uint8
{
	NotLeaning                               = 0,
	LeanLeft                                 = 1,
	LeanRight                                = 2,
	ELeanState_MAX                           = 3,
};

// Enum DBDSharedTypes.EQuestOperationType
// NumValues: 0x0007
enum class EQuestOperationType : uint8
{
	EQ                                       = 0,
	GEQ                                      = 1,
	LEQ                                      = 2,
	G                                        = 3,
	L                                        = 4,
	None                                     = 255,
	EQuestOperationType_MAX                  = 256,
};

// Enum DBDSharedTypes.EArchivesEventStyle
// NumValues: 0x0003
enum class EArchivesEventStyle : uint8
{
	None                                     = 0,
	Halloween                                = 1,
	EArchivesEventStyle_MAX                  = 2,
};

// Enum DBDSharedTypes.EArchivesStoryLevelAnimationType
// NumValues: 0x0003
enum class EArchivesStoryLevelAnimationType : uint8
{
	Completed                                = 0,
	Mastered                                 = 1,
	EArchivesStoryLevelAnimationType_MAX     = 2,
};

// Enum DBDSharedTypes.EArchivesStoryLevelStatus
// NumValues: 0x0006
enum class EArchivesStoryLevelStatus : uint8
{
	Locked                                   = 0,
	Unavailable                              = 1,
	Available                                = 2,
	Completed                                = 3,
	Mastered                                 = 4,
	EArchivesStoryLevelStatus_MAX            = 5,
};

// Enum DBDSharedTypes.EArchiveNodeStatus
// NumValues: 0x0007
enum class EArchiveNodeStatus : uint8
{
	Closed                                   = 0,
	Completed                                = 1,
	Open                                     = 2,
	Paused                                   = 3,
	Waiting                                  = 4,
	Error                                    = 5,
	EArchiveNodeStatus_MAX                   = 6,
};

// Enum DBDSharedTypes.EKillerMatchResult
// NumValues: 0x0005
enum class EKillerMatchResult : uint8
{
	EntityDispleased                         = 0,
	BrutalKiller                             = 1,
	RuthlessKiller                           = 2,
	MercilessKiller                          = 3,
	EKillerMatchResult_MAX                   = 4,
};

// Enum DBDSharedTypes.EDailyRitualTileState
// NumValues: 0x0004
enum class EDailyRitualTileState : uint8
{
	None                                     = 0,
	Dismissed                                = 1,
	Claimed                                  = 2,
	EDailyRitualTileState_MAX                = 3,
};

// Enum DBDSharedTypes.EDailyRitualState
// NumValues: 0x0004
enum class EDailyRitualState : uint8
{
	Assigned                                 = 0,
	DismissedReplacement                     = 1,
	ClaimedReplacement                       = 2,
	EDailyRitualState_MAX                    = 3,
};

// Enum DBDSharedTypes.EGameType
// NumValues: 0x0007
enum class EGameType : uint8
{
	Online                                   = 0,
	KillYourFriends                          = 1,
	Tutorial                                 = 4,
	TutorialBotMatch                         = 5,
	SecretBotMatch                           = 6,
	None                                     = 7,
	EGameType_MAX                            = 8,
};

// Enum DBDSharedTypes.EDirectionalMinigameResult
// NumValues: 0x0004
enum class EDirectionalMinigameResult : uint8
{
	VE_SUCCESS                               = 0,
	VE_FAILED                                = 1,
	VE_CANCELLED                             = 2,
	VE_MAX                                   = 3,
};

// Enum DBDSharedTypes.EDirectionalInputKey
// NumValues: 0x0006
enum class EDirectionalInputKey : uint8
{
	VE_INVALID                               = 0,
	VE_UP                                    = 1,
	VE_DOWN                                  = 2,
	VE_RIGHT                                 = 3,
	VE_LEFT                                  = 4,
	VE_MAX                                   = 5,
};

// Enum DBDSharedTypes.EGender
// NumValues: 0x0006
enum class EGender : uint8
{
	VE_Male                                  = 0,
	VE_Female                                = 1,
	VE_Multiple                              = 2,
	VE_NotHuman                              = 3,
	VE_Undefined                             = 4,
	VE_MAX                                   = 5,
};

// Enum DBDSharedTypes.EAttackSuccess
// NumValues: 0x0005
enum class EAttackSuccess : uint8
{
	VE_None                                  = 0,
	VE_Success                               = 1,
	VE_Failure                               = 2,
	VE_Obstructed                            = 3,
	VE_MAX                                   = 4,
};

// Enum DBDSharedTypes.EBlindType
// NumValues: 0x0005
enum class EBlindType : uint8
{
	VE_None                                  = 0,
	VE_Flashlight                            = 1,
	VE_SacrificeSuspended                    = 2,
	VE_Firecracker                           = 3,
	VE_MAX                                   = 4,
};

// Enum DBDSharedTypes.EDBDScoreCategory
// NumValues: 0x0010
enum class EDBDScoreCategory : uint8
{
	DBD_CamperScoreCat_Objectives            = 0,
	DBD_CamperScoreCat_Survival              = 1,
	DBD_CamperScoreCat_Altruism              = 2,
	DBD_CamperScoreCat_Boldness              = 3,
	DBD_SlasherScoreCat_Brutality            = 4,
	DBD_SlasherScoreCat_Deviousness          = 5,
	DBD_SlasherScoreCat_Hunter               = 6,
	DBD_SlasherScoreCat_Sacrifice            = 7,
	DBD_CamperScoreCat_Untracked             = 8,
	DBD_CamperScoreCat_Streak                = 9,
	DBD_ScoreCat_SpecialEvents               = 10,
	DBD_ScoreCat_Bonus                       = 11,
	DBD_ScoreCat_MatchIncentive              = 12,
	DBD_ScoreCat_BonusEvents                 = 13,
	Count                                    = 14,
	EDBDScoreCategory_MAX                    = 15,
};

// Enum DBDSharedTypes.ELoadingTransitionType
// NumValues: 0x0004
enum class ELoadingTransitionType : uint8
{
	TravelToMainMenu                         = 0,
	TravelToInGame                           = 1,
	TravelToSplash                           = 2,
	ELoadingTransitionType_MAX               = 3,
};

// Enum DBDSharedTypes.EFriendshipStatus
// NumValues: 0x0005
enum class EFriendshipStatus : uint8
{
	None                                     = 0,
	RequestSent                              = 1,
	RequestReceived                          = 2,
	Friend                                   = 3,
	EFriendshipStatus_MAX                    = 4,
};

// Enum DBDSharedTypes.EFriendSuggestionType
// NumValues: 0x0004
enum class EFriendSuggestionType : uint8
{
	None                                     = 0,
	Facebook                                 = 1,
	Google                                   = 2,
	EFriendSuggestionType_MAX                = 3,
};

// Enum DBDSharedTypes.EMatchingStatusEffectType
// NumValues: 0x0006
enum class EMatchingStatusEffectType : uint8
{
	None                                     = 0,
	Buff                                     = 1,
	Debuff                                   = 2,
	Any                                      = 3,
	Count                                    = 4,
	EMatchingStatusEffectType_MAX            = 5,
};

// Enum DBDSharedTypes.EBarColor
// NumValues: 0x0004
enum class EBarColor : uint8
{
	Default                                  = 0,
	Yellow                                   = 1,
	Red                                      = 2,
	EBarColor_MAX                            = 3,
};

// Enum DBDSharedTypes.EHudScreenIndicatorType
// NumValues: 0x0006
enum class EHudScreenIndicatorType : uint8
{
	None                                     = 0,
	LoudNoise                                = 1,
	StealthBroken                            = 2,
	Objective                                = 3,
	TerrorRadiusVisualFeedback               = 4,
	EHudScreenIndicatorType_MAX              = 5,
};

// Enum DBDSharedTypes.EHudParentContainerType
// NumValues: 0x0004
enum class EHudParentContainerType : uint8
{
	Widget                                   = 0,
	Outer                                    = 1,
	Spectate                                 = 2,
	EHudParentContainerType_MAX              = 3,
};

// Enum DBDSharedTypes.EInteractionLayer
// NumValues: 0x0003
enum class EInteractionLayer : uint8
{
	VE_Camper                                = 0,
	VE_Slasher                               = 1,
	VE_MAX                                   = 2,
};

// Enum DBDSharedTypes.EOnboardingTutorialType
// NumValues: 0x0005
enum class EOnboardingTutorialType : uint8
{
	TutorialLevel                            = 0,
	BotMatchLevel                            = 1,
	FinalReward                              = 2,
	GoToMainMenu                             = 3,
	EOnboardingTutorialType_MAX              = 4,
};

// Enum DBDSharedTypes.EOnboardingTutorialButtonStyle
// NumValues: 0x0006
enum class EOnboardingTutorialButtonStyle : uint8
{
	Default                                  = 0,
	Survivor                                 = 1,
	Killer                                   = 2,
	Reward                                   = 3,
	GoToMainMenu                             = 4,
	EOnboardingTutorialButtonStyle_MAX       = 5,
};

// Enum DBDSharedTypes.EOnboardingStepStatus
// NumValues: 0x0004
enum class EOnboardingStepStatus : uint8
{
	Unavailable                              = 0,
	Open                                     = 1,
	Completed                                = 2,
	EOnboardingStepStatus_MAX                = 3,
};

// Enum DBDSharedTypes.EConnectionQuality
// NumValues: 0x0004
enum class EConnectionQuality : uint8
{
	Good                                     = 0,
	Bad                                      = 1,
	Awful                                    = 2,
	EConnectionQuality_MAX                   = 3,
};

// Enum DBDSharedTypes.EPlayerStateChangeType
// NumValues: 0x0005
enum class EPlayerStateChangeType : uint8
{
	None                                     = 0,
	Negative                                 = 1,
	Neutral                                  = 2,
	Positive                                 = 3,
	EPlayerStateChangeType_MAX               = 4,
};

// Enum DBDSharedTypes.ESicknessLevel
// NumValues: 0x0004
enum class ESicknessLevel : uint8
{
	Off                                      = 0,
	InProgress                               = 1,
	Full                                     = 2,
	ESicknessLevel_MAX                       = 3,
};

// Enum DBDSharedTypes.EAfflictionLevel
// NumValues: 0x0005
enum class EAfflictionLevel : uint8
{
	Off                                      = 0,
	Level1                                   = 1,
	Level2                                   = 2,
	Level3                                   = 3,
	EAfflictionLevel_MAX                     = 4,
};

// Enum DBDSharedTypes.EBloodDisplayType
// NumValues: 0x0004
enum class EBloodDisplayType : uint8
{
	Hidden                                   = 0,
	Bottom                                   = 1,
	Top                                      = 2,
	EBloodDisplayType_MAX                    = 3,
};

// Enum DBDSharedTypes.EPlayerStatus
// NumValues: 0x000C
enum class EPlayerStatus : uint8
{
	Default                                  = 0,
	Hook                                     = 1,
	Trap                                     = 2,
	Dead                                     = 3,
	Escaped                                  = 4,
	Injured                                  = 5,
	Carried                                  = 6,
	Crawling                                 = 7,
	Sacrificed                               = 8,
	Disconnected                             = 9,
	InDeathBed                               = 10,
	EPlayerStatus_MAX                        = 11,
};

// Enum DBDSharedTypes.EReverseBearTrapUIState
// NumValues: 0x0004
enum class EReverseBearTrapUIState : uint8
{
	Off                                      = 0,
	Stage1                                   = 1,
	Stage2                                   = 2,
	EReverseBearTrapUIState_MAX              = 3,
};

// Enum DBDSharedTypes.ESleepingUIState
// NumValues: 0x0004
enum class ESleepingUIState : uint8
{
	Off                                      = 0,
	FallingAsleep                            = 1,
	Asleep                                   = 2,
	ESleepingUIState_MAX                     = 3,
};

// Enum DBDSharedTypes.EObsessionUIState
// NumValues: 0x0005
enum class EObsessionUIState : uint8
{
	Off                                      = 0,
	Target                                   = 1,
	Chased                                   = 2,
	Dead                                     = 3,
	EObsessionUIState_MAX                    = 4,
};

// Enum DBDSharedTypes.EThemeColorId
// NumValues: 0x0005
enum class EThemeColorId : uint8
{
	Invalid                                  = 0,
	Blue                                     = 1,
	Green                                    = 2,
	Yellow                                   = 3,
	EThemeColorId_MAX                        = 4,
};

// Enum DBDSharedTypes.ESubtitlesSize
// NumValues: 0x0005
enum class ESubtitlesSize : uint8
{
	Small                                    = 0,
	Default                                  = 1,
	Large                                    = 2,
	Huge                                     = 3,
	ESubtitlesSize_MAX                       = 4,
};

// Enum DBDSharedTypes.ESubtitlesBackgroundOpacity
// NumValues: 0x0005
enum class ESubtitlesBackgroundOpacity : uint8
{
	None                                     = 0,
	Default                                  = 1,
	High                                     = 2,
	Opaque                                   = 3,
	ESubtitlesBackgroundOpacity_MAX          = 4,
};

// Enum DBDSharedTypes.ESubtitlesPosition
// NumValues: 0x0004
enum class ESubtitlesPosition : uint8
{
	HUD                                      = 0,
	Menus                                    = 1,
	Cinematics                               = 2,
	ESubtitlesPosition_MAX                   = 3,
};

// Enum DBDSharedTypes.ETutorialObjectivePlayerActionMapping
// NumValues: 0x0016
enum class ETutorialObjectivePlayerActionMapping : uint8
{
	None                                     = 0,
	Action_Camper                            = 1,
	Interact_Camper                          = 2,
	Interact_Slasher                         = 3,
	Run_Camper                               = 4,
	Attack_Slasher                           = 5,
	SecondaryAction_Camper                   = 6,
	AbilityTwo_Camper                        = 7,
	ItemUse_Camper                           = 8,
	Crouch                                   = 9,
	ItemDrop_Camper                          = 10,
	ItemUse_Slasher                          = 11,
	ItemDrop_Slasher                         = 12,
	Mash_Camper                              = 13,
	FastInteract_Camper                      = 14,
	SecondaryAction_Slasher                  = 15,
	Action_Slasher                           = 16,
	Struggle                                 = 17,
	MoveAxes                                 = 18,
	LookAxes                                 = 19,
	Count                                    = 20,
	ETutorialObjectivePlayerActionMapping_MAX = 21,
};

// Enum DBDSharedTypes.EChatType
// NumValues: 0x0005
enum class EChatType : uint8
{
	None                                     = 0,
	PreGame                                  = 1,
	PostGame                                 = 2,
	Party                                    = 3,
	EChatType_MAX                            = 4,
};

// Enum DBDSharedTypes.EStickerType
// NumValues: 0x0004
enum class EStickerType : uint8
{
	None                                     = 0,
	Emoji                                    = 1,
	Text                                     = 2,
	EStickerType_MAX                         = 3,
};

// Enum DBDSharedTypes.ELobbyState
// NumValues: 0x0005
enum class ELobbyState : uint8
{
	Searching                                = 0,
	Joined                                   = 1,
	Offering                                 = 2,
	Fog                                      = 3,
	ELobbyState_MAX                          = 4,
};

// Enum DBDSharedTypes.EPopupPriority
// NumValues: 0x0008
enum class EPopupPriority : uint8
{
	ErrorSystem                              = 0,
	ErrorGameHigh                            = 1,
	ErrorGameLow                             = 2,
	InfoHigh                                 = 3,
	InfoLow                                  = 4,
	ErrorUIThreshold                         = 2,
	LowestPriority                           = 4,
	EPopupPriority_MAX                       = 5,
};

// Enum DBDSharedTypes.EHudComponent
// NumValues: 0x0019
enum class EHudComponent : uint8
{
	ACTION_PROMPT                            = 0,
	ACTION_PROGRESS_BAR                      = 1,
	GENERATOR_ICON                           = 2,
	HATCH_ICON                               = 3,
	EXIT_ICON                                = 4,
	LOCAL_PLAYER_STATUS                      = 5,
	OTHER_PLAYER_STATUSES                    = 6,
	SURVIVOR_HOOK_COUNT                      = 7,
	CROUCH_BUTTON                            = 8,
	CENTER_INTERACT_BUTTON                   = 9,
	DIRECTIONAL_STICK                        = 10,
	WIGGLE_BUTTONS                           = 11,
	STRUGGLE_BUTTONS                         = 12,
	POWER_BUTTON                             = 13,
	ATTACK_BUTTON                            = 14,
	OBJECTIVES                               = 15,
	LOUD_NOISE_INDICATOR                     = 16,
	SECOND_ABILITY_BUTTON                    = 17,
	ACTION_BUTTON                            = 18,
	CANCEL_BUTTON                            = 19,
	DROP_SURVIVOR_BUTTON                     = 20,
	LOOK_BACK_BUTTON                         = 21,
	CENTER_ITEM_CONTAINER                    = 22,
	MOVEMENT_LOCK                            = 23,
	EHudComponent_MAX                        = 24,
};

// Enum DBDSharedTypes.ETestBuildType
// NumValues: 0x0005
enum class ETestBuildType : uint8
{
	None                                     = 0,
	PublicTestBuild                          = 1,
	PaxBuild                                 = 2,
	ConsolePreAlphaBuild                     = 3,
	ETestBuildType_MAX                       = 4,
};

// ScriptStruct DBDSharedTypes.ArchiveTomeSkinData
// 0x0038 (0x0038 - 0x0000)
struct FArchiveTomeSkinData final
{
public:
	class UMaterialInterface*                     ArchiveTitleBarSkinMaterial;                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ArchiveSideNavSkinMaterial;                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ArchiveSideNavSmokeSkinMaterial;                   // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ArchiveTabsSkinMaterial;                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ArchiveProgressPanelSmokeSkinMaterial;             // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ArchiveSkinColor;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchiveTomeSkinData) == 0x000008, "Wrong alignment on FArchiveTomeSkinData");
static_assert(sizeof(FArchiveTomeSkinData) == 0x000038, "Wrong size on FArchiveTomeSkinData");
static_assert(offsetof(FArchiveTomeSkinData, ArchiveTitleBarSkinMaterial) == 0x000000, "Member 'FArchiveTomeSkinData::ArchiveTitleBarSkinMaterial' has a wrong offset!");
static_assert(offsetof(FArchiveTomeSkinData, ArchiveSideNavSkinMaterial) == 0x000008, "Member 'FArchiveTomeSkinData::ArchiveSideNavSkinMaterial' has a wrong offset!");
static_assert(offsetof(FArchiveTomeSkinData, ArchiveSideNavSmokeSkinMaterial) == 0x000010, "Member 'FArchiveTomeSkinData::ArchiveSideNavSmokeSkinMaterial' has a wrong offset!");
static_assert(offsetof(FArchiveTomeSkinData, ArchiveTabsSkinMaterial) == 0x000018, "Member 'FArchiveTomeSkinData::ArchiveTabsSkinMaterial' has a wrong offset!");
static_assert(offsetof(FArchiveTomeSkinData, ArchiveProgressPanelSmokeSkinMaterial) == 0x000020, "Member 'FArchiveTomeSkinData::ArchiveProgressPanelSmokeSkinMaterial' has a wrong offset!");
static_assert(offsetof(FArchiveTomeSkinData, ArchiveSkinColor) == 0x000028, "Member 'FArchiveTomeSkinData::ArchiveSkinColor' has a wrong offset!");

// ScriptStruct DBDSharedTypes.ArchiveTomeSkinUIDataRow
// 0x0040 (0x0058 - 0x0018)
struct FArchiveTomeSkinUIDataRow final : public FDBDTableRowBaseWithId
{
public:
	EArchiveMenuState                             menuState;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArchiveTomeSkinData                   ArchiveSkinData;                                   // 0x0020(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchiveTomeSkinUIDataRow) == 0x000008, "Wrong alignment on FArchiveTomeSkinUIDataRow");
static_assert(sizeof(FArchiveTomeSkinUIDataRow) == 0x000058, "Wrong size on FArchiveTomeSkinUIDataRow");
static_assert(offsetof(FArchiveTomeSkinUIDataRow, menuState) == 0x000018, "Member 'FArchiveTomeSkinUIDataRow::menuState' has a wrong offset!");
static_assert(offsetof(FArchiveTomeSkinUIDataRow, ArchiveSkinData) == 0x000020, "Member 'FArchiveTomeSkinUIDataRow::ArchiveSkinData' has a wrong offset!");

// ScriptStruct DBDSharedTypes.CurrencyProgressionUIData
// 0x00C0 (0x00C0 - 0x0000)
struct FCurrencyProgressionUIData final
{
public:
	class FText                                   TooltipTitle;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   TooltipDescription;                                // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      TooltipHeaderMaterial;                             // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      RewardBackgroundMaterial;                          // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RewardIcon;                                        // 0x0090(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyProgressionUIData) == 0x000008, "Wrong alignment on FCurrencyProgressionUIData");
static_assert(sizeof(FCurrencyProgressionUIData) == 0x0000C0, "Wrong size on FCurrencyProgressionUIData");
static_assert(offsetof(FCurrencyProgressionUIData, TooltipTitle) == 0x000000, "Member 'FCurrencyProgressionUIData::TooltipTitle' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionUIData, TooltipDescription) == 0x000018, "Member 'FCurrencyProgressionUIData::TooltipDescription' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionUIData, TooltipHeaderMaterial) == 0x000030, "Member 'FCurrencyProgressionUIData::TooltipHeaderMaterial' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionUIData, RewardBackgroundMaterial) == 0x000060, "Member 'FCurrencyProgressionUIData::RewardBackgroundMaterial' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionUIData, RewardIcon) == 0x000090, "Member 'FCurrencyProgressionUIData::RewardIcon' has a wrong offset!");

// ScriptStruct DBDSharedTypes.ProgressionUIDataRow
// 0x00C8 (0x00D0 - 0x0008)
struct FProgressionUIDataRow final : public FDBDTableRowBase
{
public:
	EProgressionType                              ProgressionType;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurrencyProgressionUIData             CurrencyProgressionUIData;                         // 0x0010(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProgressionUIDataRow) == 0x000008, "Wrong alignment on FProgressionUIDataRow");
static_assert(sizeof(FProgressionUIDataRow) == 0x0000D0, "Wrong size on FProgressionUIDataRow");
static_assert(offsetof(FProgressionUIDataRow, ProgressionType) == 0x000008, "Member 'FProgressionUIDataRow::ProgressionType' has a wrong offset!");
static_assert(offsetof(FProgressionUIDataRow, CurrencyProgressionUIData) == 0x000010, "Member 'FProgressionUIDataRow::CurrencyProgressionUIData' has a wrong offset!");

// ScriptStruct DBDSharedTypes.CurrencyUIDataRow
// 0x00C8 (0x00D0 - 0x0008)
struct FCurrencyUIDataRow final : public FDBDTableRowBase
{
public:
	ECurrencyType                                 CurrencyType;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurrencyProgressionUIData             CurrencyProgressionUIData;                         // 0x0010(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyUIDataRow) == 0x000008, "Wrong alignment on FCurrencyUIDataRow");
static_assert(sizeof(FCurrencyUIDataRow) == 0x0000D0, "Wrong size on FCurrencyUIDataRow");
static_assert(offsetof(FCurrencyUIDataRow, CurrencyType) == 0x000008, "Member 'FCurrencyUIDataRow::CurrencyType' has a wrong offset!");
static_assert(offsetof(FCurrencyUIDataRow, CurrencyProgressionUIData) == 0x000010, "Member 'FCurrencyUIDataRow::CurrencyProgressionUIData' has a wrong offset!");

// ScriptStruct DBDSharedTypes.EventProgressionData
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FEventProgressionData final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEventProgressionData) == 0x000004, "Wrong alignment on FEventProgressionData");
static_assert(sizeof(FEventProgressionData) == 0x000014, "Wrong size on FEventProgressionData");

// ScriptStruct DBDSharedTypes.FriendData
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FFriendData final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriendData) == 0x000008, "Wrong alignment on FFriendData");
static_assert(sizeof(FFriendData) == 0x000060, "Wrong size on FFriendData");

// ScriptStruct DBDSharedTypes.HelpCategoryData
// 0x0048 (0x0050 - 0x0008)
struct FHelpCategoryData final : public FDBDTableRowBase
{
public:
	EHelpType                                     Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FName>                           TopicIds;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHelpCategoryData) == 0x000008, "Wrong alignment on FHelpCategoryData");
static_assert(sizeof(FHelpCategoryData) == 0x000050, "Wrong size on FHelpCategoryData");
static_assert(offsetof(FHelpCategoryData, Type) == 0x000008, "Member 'FHelpCategoryData::Type' has a wrong offset!");
static_assert(offsetof(FHelpCategoryData, Title) == 0x000010, "Member 'FHelpCategoryData::Title' has a wrong offset!");
static_assert(offsetof(FHelpCategoryData, Description) == 0x000028, "Member 'FHelpCategoryData::Description' has a wrong offset!");
static_assert(offsetof(FHelpCategoryData, TopicIds) == 0x000040, "Member 'FHelpCategoryData::TopicIds' has a wrong offset!");

// ScriptStruct DBDSharedTypes.HelpContextMappingData
// 0x0020 (0x0028 - 0x0008)
struct FHelpContextMappingData final : public FDBDTableRowBase
{
public:
	class FString                                 ContextName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TopicIds;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHelpContextMappingData) == 0x000008, "Wrong alignment on FHelpContextMappingData");
static_assert(sizeof(FHelpContextMappingData) == 0x000028, "Wrong size on FHelpContextMappingData");
static_assert(offsetof(FHelpContextMappingData, ContextName) == 0x000008, "Member 'FHelpContextMappingData::ContextName' has a wrong offset!");
static_assert(offsetof(FHelpContextMappingData, TopicIds) == 0x000018, "Member 'FHelpContextMappingData::TopicIds' has a wrong offset!");

// ScriptStruct DBDSharedTypes.HelpTopicData
// 0x0090 (0x0098 - 0x0008)
struct FHelpTopicData final : public FDBDTableRowBase
{
public:
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ImagePath;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IconPath;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoID;                                           // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0068(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHelpTopicData) == 0x000008, "Wrong alignment on FHelpTopicData");
static_assert(sizeof(FHelpTopicData) == 0x000098, "Wrong size on FHelpTopicData");
static_assert(offsetof(FHelpTopicData, Title) == 0x000008, "Member 'FHelpTopicData::Title' has a wrong offset!");
static_assert(offsetof(FHelpTopicData, Description) == 0x000020, "Member 'FHelpTopicData::Description' has a wrong offset!");
static_assert(offsetof(FHelpTopicData, ImagePath) == 0x000038, "Member 'FHelpTopicData::ImagePath' has a wrong offset!");
static_assert(offsetof(FHelpTopicData, IconPath) == 0x000048, "Member 'FHelpTopicData::IconPath' has a wrong offset!");
static_assert(offsetof(FHelpTopicData, VideoID) == 0x000058, "Member 'FHelpTopicData::VideoID' has a wrong offset!");
static_assert(offsetof(FHelpTopicData, Icon) == 0x000068, "Member 'FHelpTopicData::Icon' has a wrong offset!");

// ScriptStruct DBDSharedTypes.RarityMaterialData
// 0x0018 (0x0018 - 0x0000)
struct FRarityMaterialData final
{
public:
	class UMaterialInterface*                     LoadoutPartMaterial;                               // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CustomizationMaterial;                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     TooltipHeaderMaterial;                             // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRarityMaterialData) == 0x000008, "Wrong alignment on FRarityMaterialData");
static_assert(sizeof(FRarityMaterialData) == 0x000018, "Wrong size on FRarityMaterialData");
static_assert(offsetof(FRarityMaterialData, LoadoutPartMaterial) == 0x000000, "Member 'FRarityMaterialData::LoadoutPartMaterial' has a wrong offset!");
static_assert(offsetof(FRarityMaterialData, CustomizationMaterial) == 0x000008, "Member 'FRarityMaterialData::CustomizationMaterial' has a wrong offset!");
static_assert(offsetof(FRarityMaterialData, TooltipHeaderMaterial) == 0x000010, "Member 'FRarityMaterialData::TooltipHeaderMaterial' has a wrong offset!");

// ScriptStruct DBDSharedTypes.RarityMaterialDataRow
// 0x0020 (0x0028 - 0x0008)
struct FRarityMaterialDataRow final : public FDBDTableRowBase
{
public:
	EItemRarity                                   Rarity;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRarityMaterialData                    RarityData;                                        // 0x0010(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRarityMaterialDataRow) == 0x000008, "Wrong alignment on FRarityMaterialDataRow");
static_assert(sizeof(FRarityMaterialDataRow) == 0x000028, "Wrong size on FRarityMaterialDataRow");
static_assert(offsetof(FRarityMaterialDataRow, Rarity) == 0x000008, "Member 'FRarityMaterialDataRow::Rarity' has a wrong offset!");
static_assert(offsetof(FRarityMaterialDataRow, RarityData) == 0x000010, "Member 'FRarityMaterialDataRow::RarityData' has a wrong offset!");

// ScriptStruct DBDSharedTypes.ScreenIndicatorViewData
// 0x0038 (0x0038 - 0x0000)
struct FScreenIndicatorViewData final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHudScreenIndicatorType                       IndicatorType;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ViewportSize;                                      // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInFront;                                         // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScreenPosition;                                    // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                AdditionalData;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScreenIndicatorViewData) == 0x000008, "Wrong alignment on FScreenIndicatorViewData");
static_assert(sizeof(FScreenIndicatorViewData) == 0x000038, "Wrong size on FScreenIndicatorViewData");
static_assert(offsetof(FScreenIndicatorViewData, Id) == 0x000000, "Member 'FScreenIndicatorViewData::Id' has a wrong offset!");
static_assert(offsetof(FScreenIndicatorViewData, IndicatorType) == 0x000010, "Member 'FScreenIndicatorViewData::IndicatorType' has a wrong offset!");
static_assert(offsetof(FScreenIndicatorViewData, ViewportSize) == 0x000014, "Member 'FScreenIndicatorViewData::ViewportSize' has a wrong offset!");
static_assert(offsetof(FScreenIndicatorViewData, IsInFront) == 0x00001C, "Member 'FScreenIndicatorViewData::IsInFront' has a wrong offset!");
static_assert(offsetof(FScreenIndicatorViewData, ScreenPosition) == 0x000020, "Member 'FScreenIndicatorViewData::ScreenPosition' has a wrong offset!");
static_assert(offsetof(FScreenIndicatorViewData, Distance) == 0x000028, "Member 'FScreenIndicatorViewData::Distance' has a wrong offset!");
static_assert(offsetof(FScreenIndicatorViewData, AdditionalData) == 0x000030, "Member 'FScreenIndicatorViewData::AdditionalData' has a wrong offset!");

}

