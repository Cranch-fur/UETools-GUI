#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CoreMemory

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function CoreMemory.CoreMemoryController.Authority_CreatePlayerSpecificController
// 0x0008 (0x0008 - 0x0000)
struct CoreMemoryController_Authority_CreatePlayerSpecificController final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMemoryController_Authority_CreatePlayerSpecificController) == 0x000008, "Wrong alignment on CoreMemoryController_Authority_CreatePlayerSpecificController");
static_assert(sizeof(CoreMemoryController_Authority_CreatePlayerSpecificController) == 0x000008, "Wrong size on CoreMemoryController_Authority_CreatePlayerSpecificController");
static_assert(offsetof(CoreMemoryController_Authority_CreatePlayerSpecificController, player) == 0x000000, "Member 'CoreMemoryController_Authority_CreatePlayerSpecificController::player' has a wrong offset!");

// Function CoreMemory.CoreMemoryController.Authority_OnCharacterAdded
// 0x0008 (0x0008 - 0x0000)
struct CoreMemoryController_Authority_OnCharacterAdded final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMemoryController_Authority_OnCharacterAdded) == 0x000008, "Wrong alignment on CoreMemoryController_Authority_OnCharacterAdded");
static_assert(sizeof(CoreMemoryController_Authority_OnCharacterAdded) == 0x000008, "Wrong size on CoreMemoryController_Authority_OnCharacterAdded");
static_assert(offsetof(CoreMemoryController_Authority_OnCharacterAdded, player) == 0x000000, "Member 'CoreMemoryController_Authority_OnCharacterAdded::player' has a wrong offset!");

// Function CoreMemory.CoreMemoryFragment.OnLocallyObservedChanged
// 0x0001 (0x0001 - 0x0000)
struct CoreMemoryFragment_OnLocallyObservedChanged final
{
public:
	bool                                          isLocallyObserved;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMemoryFragment_OnLocallyObservedChanged) == 0x000001, "Wrong alignment on CoreMemoryFragment_OnLocallyObservedChanged");
static_assert(sizeof(CoreMemoryFragment_OnLocallyObservedChanged) == 0x000001, "Wrong size on CoreMemoryFragment_OnLocallyObservedChanged");
static_assert(offsetof(CoreMemoryFragment_OnLocallyObservedChanged, isLocallyObserved) == 0x000000, "Member 'CoreMemoryFragment_OnLocallyObservedChanged::isLocallyObserved' has a wrong offset!");

// Function CoreMemory.CoreMemoryFragment.OnRep_SpawnLocation
// 0x000C (0x000C - 0x0000)
struct CoreMemoryFragment_OnRep_SpawnLocation final
{
public:
	struct FVector                                location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMemoryFragment_OnRep_SpawnLocation) == 0x000004, "Wrong alignment on CoreMemoryFragment_OnRep_SpawnLocation");
static_assert(sizeof(CoreMemoryFragment_OnRep_SpawnLocation) == 0x00000C, "Wrong size on CoreMemoryFragment_OnRep_SpawnLocation");
static_assert(offsetof(CoreMemoryFragment_OnRep_SpawnLocation, location) == 0x000000, "Member 'CoreMemoryFragment_OnRep_SpawnLocation::location' has a wrong offset!");

// Function CoreMemory.CoreMemoryFragmentComponent.OnCollectZoneEntered
// 0x00B0 (0x00B0 - 0x0000)
struct CoreMemoryFragmentComponent_OnCollectZoneEntered final
{
public:
	class UPrimitiveComponent*                    hitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMemoryFragmentComponent_OnCollectZoneEntered) == 0x000008, "Wrong alignment on CoreMemoryFragmentComponent_OnCollectZoneEntered");
static_assert(sizeof(CoreMemoryFragmentComponent_OnCollectZoneEntered) == 0x0000B0, "Wrong size on CoreMemoryFragmentComponent_OnCollectZoneEntered");
static_assert(offsetof(CoreMemoryFragmentComponent_OnCollectZoneEntered, hitComponent) == 0x000000, "Member 'CoreMemoryFragmentComponent_OnCollectZoneEntered::hitComponent' has a wrong offset!");
static_assert(offsetof(CoreMemoryFragmentComponent_OnCollectZoneEntered, otherActor) == 0x000008, "Member 'CoreMemoryFragmentComponent_OnCollectZoneEntered::otherActor' has a wrong offset!");
static_assert(offsetof(CoreMemoryFragmentComponent_OnCollectZoneEntered, otherComp) == 0x000010, "Member 'CoreMemoryFragmentComponent_OnCollectZoneEntered::otherComp' has a wrong offset!");
static_assert(offsetof(CoreMemoryFragmentComponent_OnCollectZoneEntered, otherBodyIndex) == 0x000018, "Member 'CoreMemoryFragmentComponent_OnCollectZoneEntered::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(CoreMemoryFragmentComponent_OnCollectZoneEntered, bFromSweep) == 0x00001C, "Member 'CoreMemoryFragmentComponent_OnCollectZoneEntered::bFromSweep' has a wrong offset!");
static_assert(offsetof(CoreMemoryFragmentComponent_OnCollectZoneEntered, sweepResult) == 0x000020, "Member 'CoreMemoryFragmentComponent_OnCollectZoneEntered::sweepResult' has a wrong offset!");

// Function CoreMemory.CoreMemoryFragmentComponent.OnTriggerZoneEntered
// 0x00B0 (0x00B0 - 0x0000)
struct CoreMemoryFragmentComponent_OnTriggerZoneEntered final
{
public:
	class UPrimitiveComponent*                    hitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMemoryFragmentComponent_OnTriggerZoneEntered) == 0x000008, "Wrong alignment on CoreMemoryFragmentComponent_OnTriggerZoneEntered");
static_assert(sizeof(CoreMemoryFragmentComponent_OnTriggerZoneEntered) == 0x0000B0, "Wrong size on CoreMemoryFragmentComponent_OnTriggerZoneEntered");
static_assert(offsetof(CoreMemoryFragmentComponent_OnTriggerZoneEntered, hitComponent) == 0x000000, "Member 'CoreMemoryFragmentComponent_OnTriggerZoneEntered::hitComponent' has a wrong offset!");
static_assert(offsetof(CoreMemoryFragmentComponent_OnTriggerZoneEntered, otherActor) == 0x000008, "Member 'CoreMemoryFragmentComponent_OnTriggerZoneEntered::otherActor' has a wrong offset!");
static_assert(offsetof(CoreMemoryFragmentComponent_OnTriggerZoneEntered, otherComp) == 0x000010, "Member 'CoreMemoryFragmentComponent_OnTriggerZoneEntered::otherComp' has a wrong offset!");
static_assert(offsetof(CoreMemoryFragmentComponent_OnTriggerZoneEntered, otherBodyIndex) == 0x000018, "Member 'CoreMemoryFragmentComponent_OnTriggerZoneEntered::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(CoreMemoryFragmentComponent_OnTriggerZoneEntered, bFromSweep) == 0x00001C, "Member 'CoreMemoryFragmentComponent_OnTriggerZoneEntered::bFromSweep' has a wrong offset!");
static_assert(offsetof(CoreMemoryFragmentComponent_OnTriggerZoneEntered, sweepResult) == 0x000020, "Member 'CoreMemoryFragmentComponent_OnTriggerZoneEntered::sweepResult' has a wrong offset!");

// Function CoreMemory.CoreMemoryPortalComponent.GetPlayersWithActivePortal
// 0x0010 (0x0010 - 0x0000)
struct CoreMemoryPortalComponent_GetPlayersWithActivePortal final
{
public:
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreMemoryPortalComponent_GetPlayersWithActivePortal) == 0x000008, "Wrong alignment on CoreMemoryPortalComponent_GetPlayersWithActivePortal");
static_assert(sizeof(CoreMemoryPortalComponent_GetPlayersWithActivePortal) == 0x000010, "Wrong size on CoreMemoryPortalComponent_GetPlayersWithActivePortal");
static_assert(offsetof(CoreMemoryPortalComponent_GetPlayersWithActivePortal, ReturnValue) == 0x000000, "Member 'CoreMemoryPortalComponent_GetPlayersWithActivePortal::ReturnValue' has a wrong offset!");

}

