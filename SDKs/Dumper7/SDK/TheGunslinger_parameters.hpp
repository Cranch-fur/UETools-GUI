#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheGunslinger

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "TheGunslinger_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function TheGunslinger.ChainPlayerMovementStatusEffect.OnIsChainCollidingChanged
// 0x0001 (0x0001 - 0x0000)
struct ChainPlayerMovementStatusEffect_OnIsChainCollidingChanged final
{
public:
	bool                                          isColliding;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChainPlayerMovementStatusEffect_OnIsChainCollidingChanged) == 0x000001, "Wrong alignment on ChainPlayerMovementStatusEffect_OnIsChainCollidingChanged");
static_assert(sizeof(ChainPlayerMovementStatusEffect_OnIsChainCollidingChanged) == 0x000001, "Wrong size on ChainPlayerMovementStatusEffect_OnIsChainCollidingChanged");
static_assert(offsetof(ChainPlayerMovementStatusEffect_OnIsChainCollidingChanged, isColliding) == 0x000000, "Member 'ChainPlayerMovementStatusEffect_OnIsChainCollidingChanged::isColliding' has a wrong offset!");

// Function TheGunslinger.FireHarpoonRifleInteraction.Server_HandleMissShotScores
// 0x0010 (0x0010 - 0x0000)
struct FireHarpoonRifleInteraction_Server_HandleMissShotScores final
{
public:
	TArray<class ADBDPlayer*>                     nearMissedPlayers;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireHarpoonRifleInteraction_Server_HandleMissShotScores) == 0x000008, "Wrong alignment on FireHarpoonRifleInteraction_Server_HandleMissShotScores");
static_assert(sizeof(FireHarpoonRifleInteraction_Server_HandleMissShotScores) == 0x000010, "Wrong size on FireHarpoonRifleInteraction_Server_HandleMissShotScores");
static_assert(offsetof(FireHarpoonRifleInteraction_Server_HandleMissShotScores, nearMissedPlayers) == 0x000000, "Member 'FireHarpoonRifleInteraction_Server_HandleMissShotScores::nearMissedPlayers' has a wrong offset!");

// Function TheGunslinger.FireHarpoonRifleInteraction.Server_SetAimingSubstate
// 0x0001 (0x0001 - 0x0000)
struct FireHarpoonRifleInteraction_Server_SetAimingSubstate final
{
public:
	EFireHarpoonRifleAimingInteractionSubState    newState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireHarpoonRifleInteraction_Server_SetAimingSubstate) == 0x000001, "Wrong alignment on FireHarpoonRifleInteraction_Server_SetAimingSubstate");
static_assert(sizeof(FireHarpoonRifleInteraction_Server_SetAimingSubstate) == 0x000001, "Wrong size on FireHarpoonRifleInteraction_Server_SetAimingSubstate");
static_assert(offsetof(FireHarpoonRifleInteraction_Server_SetAimingSubstate, newState) == 0x000000, "Member 'FireHarpoonRifleInteraction_Server_SetAimingSubstate::newState' has a wrong offset!");

// Function TheGunslinger.ForThePeople.Multicast_OnHealAbilityUsed
// 0x0018 (0x0018 - 0x0000)
struct ForThePeople_Multicast_OnHealAbilityUsed final
{
public:
	class ACamperPlayer*                          healer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          healTarget;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         amountHealed;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ForThePeople_Multicast_OnHealAbilityUsed) == 0x000008, "Wrong alignment on ForThePeople_Multicast_OnHealAbilityUsed");
static_assert(sizeof(ForThePeople_Multicast_OnHealAbilityUsed) == 0x000018, "Wrong size on ForThePeople_Multicast_OnHealAbilityUsed");
static_assert(offsetof(ForThePeople_Multicast_OnHealAbilityUsed, healer) == 0x000000, "Member 'ForThePeople_Multicast_OnHealAbilityUsed::healer' has a wrong offset!");
static_assert(offsetof(ForThePeople_Multicast_OnHealAbilityUsed, healTarget) == 0x000008, "Member 'ForThePeople_Multicast_OnHealAbilityUsed::healTarget' has a wrong offset!");
static_assert(offsetof(ForThePeople_Multicast_OnHealAbilityUsed, amountHealed) == 0x000010, "Member 'ForThePeople_Multicast_OnHealAbilityUsed::amountHealed' has a wrong offset!");

// Function TheGunslinger.ForThePeople.OnHealingAbilityUsed
// 0x0010 (0x0010 - 0x0000)
struct ForThePeople_OnHealingAbilityUsed final
{
public:
	class ACamperPlayer*                          healingSurvivor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          healedSurvivor;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ForThePeople_OnHealingAbilityUsed) == 0x000008, "Wrong alignment on ForThePeople_OnHealingAbilityUsed");
static_assert(sizeof(ForThePeople_OnHealingAbilityUsed) == 0x000010, "Wrong size on ForThePeople_OnHealingAbilityUsed");
static_assert(offsetof(ForThePeople_OnHealingAbilityUsed, healingSurvivor) == 0x000000, "Member 'ForThePeople_OnHealingAbilityUsed::healingSurvivor' has a wrong offset!");
static_assert(offsetof(ForThePeople_OnHealingAbilityUsed, healedSurvivor) == 0x000008, "Member 'ForThePeople_OnHealingAbilityUsed::healedSurvivor' has a wrong offset!");

// Function TheGunslinger.GunslingerEffectsComponent.OnItemUsedStateChanged
// 0x0001 (0x0001 - 0x0000)
struct GunslingerEffectsComponent_OnItemUsedStateChanged final
{
public:
	bool                                          isPressed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunslingerEffectsComponent_OnItemUsedStateChanged) == 0x000001, "Wrong alignment on GunslingerEffectsComponent_OnItemUsedStateChanged");
static_assert(sizeof(GunslingerEffectsComponent_OnItemUsedStateChanged) == 0x000001, "Wrong size on GunslingerEffectsComponent_OnItemUsedStateChanged");
static_assert(offsetof(GunslingerEffectsComponent_OnItemUsedStateChanged, isPressed) == 0x000000, "Member 'GunslingerEffectsComponent_OnItemUsedStateChanged::isPressed' has a wrong offset!");

// Function TheGunslinger.GunslingerUtilities.GetHarpoonRifle
// 0x0010 (0x0010 - 0x0000)
struct GunslingerUtilities_GetHarpoonRifle final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHarpoonRifle*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunslingerUtilities_GetHarpoonRifle) == 0x000008, "Wrong alignment on GunslingerUtilities_GetHarpoonRifle");
static_assert(sizeof(GunslingerUtilities_GetHarpoonRifle) == 0x000010, "Wrong size on GunslingerUtilities_GetHarpoonRifle");
static_assert(offsetof(GunslingerUtilities_GetHarpoonRifle, player) == 0x000000, "Member 'GunslingerUtilities_GetHarpoonRifle::player' has a wrong offset!");
static_assert(offsetof(GunslingerUtilities_GetHarpoonRifle, ReturnValue) == 0x000008, "Member 'GunslingerUtilities_GetHarpoonRifle::ReturnValue' has a wrong offset!");

// Function TheGunslinger.HarpoonChainPositioner.OnCurrentHarpoonChanged
// 0x0008 (0x0008 - 0x0000)
struct HarpoonChainPositioner_OnCurrentHarpoonChanged final
{
public:
	class AActor*                                 currentHarpoon;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarpoonChainPositioner_OnCurrentHarpoonChanged) == 0x000008, "Wrong alignment on HarpoonChainPositioner_OnCurrentHarpoonChanged");
static_assert(sizeof(HarpoonChainPositioner_OnCurrentHarpoonChanged) == 0x000008, "Wrong size on HarpoonChainPositioner_OnCurrentHarpoonChanged");
static_assert(offsetof(HarpoonChainPositioner_OnCurrentHarpoonChanged, currentHarpoon) == 0x000000, "Member 'HarpoonChainPositioner_OnCurrentHarpoonChanged::currentHarpoon' has a wrong offset!");

// Function TheGunslinger.HarpoonChainPositioner.OnHarpoonTravelingChanged
// 0x0001 (0x0001 - 0x0000)
struct HarpoonChainPositioner_OnHarpoonTravelingChanged final
{
public:
	bool                                          isTravelling;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarpoonChainPositioner_OnHarpoonTravelingChanged) == 0x000001, "Wrong alignment on HarpoonChainPositioner_OnHarpoonTravelingChanged");
static_assert(sizeof(HarpoonChainPositioner_OnHarpoonTravelingChanged) == 0x000001, "Wrong size on HarpoonChainPositioner_OnHarpoonTravelingChanged");
static_assert(offsetof(HarpoonChainPositioner_OnHarpoonTravelingChanged, isTravelling) == 0x000000, "Member 'HarpoonChainPositioner_OnHarpoonTravelingChanged::isTravelling' has a wrong offset!");

// Function TheGunslinger.HarpoonChainPositioner.OnOwnerCollected
// 0x0008 (0x0008 - 0x0000)
struct HarpoonChainPositioner_OnOwnerCollected final
{
public:
	class ADBDPlayer*                             collector;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarpoonChainPositioner_OnOwnerCollected) == 0x000008, "Wrong alignment on HarpoonChainPositioner_OnOwnerCollected");
static_assert(sizeof(HarpoonChainPositioner_OnOwnerCollected) == 0x000008, "Wrong size on HarpoonChainPositioner_OnOwnerCollected");
static_assert(offsetof(HarpoonChainPositioner_OnOwnerCollected, collector) == 0x000000, "Member 'HarpoonChainPositioner_OnOwnerCollected::collector' has a wrong offset!");

// Function TheGunslinger.HarpoonChainPositioner.GetCurrentHarpoon
// 0x0008 (0x0008 - 0x0000)
struct HarpoonChainPositioner_GetCurrentHarpoon final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarpoonChainPositioner_GetCurrentHarpoon) == 0x000008, "Wrong alignment on HarpoonChainPositioner_GetCurrentHarpoon");
static_assert(sizeof(HarpoonChainPositioner_GetCurrentHarpoon) == 0x000008, "Wrong size on HarpoonChainPositioner_GetCurrentHarpoon");
static_assert(offsetof(HarpoonChainPositioner_GetCurrentHarpoon, ReturnValue) == 0x000000, "Member 'HarpoonChainPositioner_GetCurrentHarpoon::ReturnValue' has a wrong offset!");

// Function TheGunslinger.HarpoonChainPositioner.GetHarpoonProp
// 0x0008 (0x0008 - 0x0000)
struct HarpoonChainPositioner_GetHarpoonProp final
{
public:
	class AHarpoonProp*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarpoonChainPositioner_GetHarpoonProp) == 0x000008, "Wrong alignment on HarpoonChainPositioner_GetHarpoonProp");
static_assert(sizeof(HarpoonChainPositioner_GetHarpoonProp) == 0x000008, "Wrong size on HarpoonChainPositioner_GetHarpoonProp");
static_assert(offsetof(HarpoonChainPositioner_GetHarpoonProp, ReturnValue) == 0x000000, "Member 'HarpoonChainPositioner_GetHarpoonProp::ReturnValue' has a wrong offset!");

// Function TheGunslinger.HarpoonProjectile.OnHarpoonStop
// 0x0090 (0x0090 - 0x0000)
struct HarpoonProjectile_OnHarpoonStop final
{
public:
	struct FHitResult                             result;                                            // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarpoonProjectile_OnHarpoonStop) == 0x000004, "Wrong alignment on HarpoonProjectile_OnHarpoonStop");
static_assert(sizeof(HarpoonProjectile_OnHarpoonStop) == 0x000090, "Wrong size on HarpoonProjectile_OnHarpoonStop");
static_assert(offsetof(HarpoonProjectile_OnHarpoonStop, result) == 0x000000, "Member 'HarpoonProjectile_OnHarpoonStop::result' has a wrong offset!");

// Function TheGunslinger.HarpoonRifle.GetChain
// 0x0008 (0x0008 - 0x0000)
struct HarpoonRifle_GetChain final
{
public:
	class ARifleChain*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarpoonRifle_GetChain) == 0x000008, "Wrong alignment on HarpoonRifle_GetChain");
static_assert(sizeof(HarpoonRifle_GetChain) == 0x000008, "Wrong size on HarpoonRifle_GetChain");
static_assert(offsetof(HarpoonRifle_GetChain, ReturnValue) == 0x000000, "Member 'HarpoonRifle_GetChain::ReturnValue' has a wrong offset!");

// Function TheGunslinger.OffTheRecord.GetActivationDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct OffTheRecord_GetActivationDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OffTheRecord_GetActivationDurationAtLevel) == 0x000004, "Wrong alignment on OffTheRecord_GetActivationDurationAtLevel");
static_assert(sizeof(OffTheRecord_GetActivationDurationAtLevel) == 0x000004, "Wrong size on OffTheRecord_GetActivationDurationAtLevel");
static_assert(offsetof(OffTheRecord_GetActivationDurationAtLevel, ReturnValue) == 0x000000, "Member 'OffTheRecord_GetActivationDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RedHerring.OnRep_MarkedGenerator
// 0x0008 (0x0008 - 0x0000)
struct RedHerring_OnRep_MarkedGenerator final
{
public:
	class AGenerator*                             oldMarkedGenerator;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RedHerring_OnRep_MarkedGenerator) == 0x000008, "Wrong alignment on RedHerring_OnRep_MarkedGenerator");
static_assert(sizeof(RedHerring_OnRep_MarkedGenerator) == 0x000008, "Wrong size on RedHerring_OnRep_MarkedGenerator");
static_assert(offsetof(RedHerring_OnRep_MarkedGenerator, oldMarkedGenerator) == 0x000000, "Member 'RedHerring_OnRep_MarkedGenerator::oldMarkedGenerator' has a wrong offset!");

// Function TheGunslinger.RifleChain.OnAttachToPlayer
// 0x0008 (0x0008 - 0x0000)
struct RifleChain_OnAttachToPlayer final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_OnAttachToPlayer) == 0x000008, "Wrong alignment on RifleChain_OnAttachToPlayer");
static_assert(sizeof(RifleChain_OnAttachToPlayer) == 0x000008, "Wrong size on RifleChain_OnAttachToPlayer");
static_assert(offsetof(RifleChain_OnAttachToPlayer, player) == 0x000000, "Member 'RifleChain_OnAttachToPlayer::player' has a wrong offset!");

// Function TheGunslinger.RifleChain.OnUnattachFromPlayer
// 0x0008 (0x0008 - 0x0000)
struct RifleChain_OnUnattachFromPlayer final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_OnUnattachFromPlayer) == 0x000008, "Wrong alignment on RifleChain_OnUnattachFromPlayer");
static_assert(sizeof(RifleChain_OnUnattachFromPlayer) == 0x000008, "Wrong size on RifleChain_OnUnattachFromPlayer");
static_assert(offsetof(RifleChain_OnUnattachFromPlayer, player) == 0x000000, "Member 'RifleChain_OnUnattachFromPlayer::player' has a wrong offset!");

// Function TheGunslinger.RifleChain.SpawnChainPoints
// 0x0040 (0x0040 - 0x0000)
struct RifleChain_SpawnChainPoints final
{
public:
	struct FVector                                start;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                stop;                                              // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            influenceCurve;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pointYPosition;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pointZPosition;                                    // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useOffset;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       spline;                                            // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RifleChain_SpawnChainPoints) == 0x000008, "Wrong alignment on RifleChain_SpawnChainPoints");
static_assert(sizeof(RifleChain_SpawnChainPoints) == 0x000040, "Wrong size on RifleChain_SpawnChainPoints");
static_assert(offsetof(RifleChain_SpawnChainPoints, start) == 0x000000, "Member 'RifleChain_SpawnChainPoints::start' has a wrong offset!");
static_assert(offsetof(RifleChain_SpawnChainPoints, stop) == 0x00000C, "Member 'RifleChain_SpawnChainPoints::stop' has a wrong offset!");
static_assert(offsetof(RifleChain_SpawnChainPoints, influenceCurve) == 0x000018, "Member 'RifleChain_SpawnChainPoints::influenceCurve' has a wrong offset!");
static_assert(offsetof(RifleChain_SpawnChainPoints, pointYPosition) == 0x000020, "Member 'RifleChain_SpawnChainPoints::pointYPosition' has a wrong offset!");
static_assert(offsetof(RifleChain_SpawnChainPoints, pointZPosition) == 0x000024, "Member 'RifleChain_SpawnChainPoints::pointZPosition' has a wrong offset!");
static_assert(offsetof(RifleChain_SpawnChainPoints, useOffset) == 0x000028, "Member 'RifleChain_SpawnChainPoints::useOffset' has a wrong offset!");
static_assert(offsetof(RifleChain_SpawnChainPoints, spline) == 0x000030, "Member 'RifleChain_SpawnChainPoints::spline' has a wrong offset!");
static_assert(offsetof(RifleChain_SpawnChainPoints, ReturnValue) == 0x000038, "Member 'RifleChain_SpawnChainPoints::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChain.UpdateChainMesh
// 0x0018 (0x0018 - 0x0000)
struct RifleChain_UpdateChainMesh final
{
public:
	class UInstancedStaticMeshComponent*          mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       spline;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RifleChain_UpdateChainMesh) == 0x000008, "Wrong alignment on RifleChain_UpdateChainMesh");
static_assert(sizeof(RifleChain_UpdateChainMesh) == 0x000018, "Wrong size on RifleChain_UpdateChainMesh");
static_assert(offsetof(RifleChain_UpdateChainMesh, mesh) == 0x000000, "Member 'RifleChain_UpdateChainMesh::mesh' has a wrong offset!");
static_assert(offsetof(RifleChain_UpdateChainMesh, spline) == 0x000008, "Member 'RifleChain_UpdateChainMesh::spline' has a wrong offset!");
static_assert(offsetof(RifleChain_UpdateChainMesh, alpha) == 0x000010, "Member 'RifleChain_UpdateChainMesh::alpha' has a wrong offset!");

// Function TheGunslinger.RifleChain.GetChainEnd
// 0x000C (0x000C - 0x0000)
struct RifleChain_GetChainEnd final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_GetChainEnd) == 0x000004, "Wrong alignment on RifleChain_GetChainEnd");
static_assert(sizeof(RifleChain_GetChainEnd) == 0x00000C, "Wrong size on RifleChain_GetChainEnd");
static_assert(offsetof(RifleChain_GetChainEnd, ReturnValue) == 0x000000, "Member 'RifleChain_GetChainEnd::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChain.GetChainStart
// 0x000C (0x000C - 0x0000)
struct RifleChain_GetChainStart final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_GetChainStart) == 0x000004, "Wrong alignment on RifleChain_GetChainStart");
static_assert(sizeof(RifleChain_GetChainStart) == 0x00000C, "Wrong size on RifleChain_GetChainStart");
static_assert(offsetof(RifleChain_GetChainStart, ReturnValue) == 0x000000, "Member 'RifleChain_GetChainStart::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChain.GetChainTensionComponent
// 0x0008 (0x0008 - 0x0000)
struct RifleChain_GetChainTensionComponent final
{
public:
	class URifleChainTensionComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_GetChainTensionComponent) == 0x000008, "Wrong alignment on RifleChain_GetChainTensionComponent");
static_assert(sizeof(RifleChain_GetChainTensionComponent) == 0x000008, "Wrong size on RifleChain_GetChainTensionComponent");
static_assert(offsetof(RifleChain_GetChainTensionComponent, ReturnValue) == 0x000000, "Member 'RifleChain_GetChainTensionComponent::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChain.GetFirstAndLastCollisionHits
// 0x0010 (0x0010 - 0x0000)
struct RifleChain_GetFirstAndLastCollisionHits final
{
public:
	TArray<struct FHitResult>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_GetFirstAndLastCollisionHits) == 0x000008, "Wrong alignment on RifleChain_GetFirstAndLastCollisionHits");
static_assert(sizeof(RifleChain_GetFirstAndLastCollisionHits) == 0x000010, "Wrong size on RifleChain_GetFirstAndLastCollisionHits");
static_assert(offsetof(RifleChain_GetFirstAndLastCollisionHits, ReturnValue) == 0x000000, "Member 'RifleChain_GetFirstAndLastCollisionHits::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChain.GetRiflePlayerLinker
// 0x0008 (0x0008 - 0x0000)
struct RifleChain_GetRiflePlayerLinker final
{
public:
	class URiflePlayerLinker*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_GetRiflePlayerLinker) == 0x000008, "Wrong alignment on RifleChain_GetRiflePlayerLinker");
static_assert(sizeof(RifleChain_GetRiflePlayerLinker) == 0x000008, "Wrong size on RifleChain_GetRiflePlayerLinker");
static_assert(offsetof(RifleChain_GetRiflePlayerLinker, ReturnValue) == 0x000000, "Member 'RifleChain_GetRiflePlayerLinker::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChain.GetUnwindingSpeed
// 0x0004 (0x0004 - 0x0000)
struct RifleChain_GetUnwindingSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_GetUnwindingSpeed) == 0x000004, "Wrong alignment on RifleChain_GetUnwindingSpeed");
static_assert(sizeof(RifleChain_GetUnwindingSpeed) == 0x000004, "Wrong size on RifleChain_GetUnwindingSpeed");
static_assert(offsetof(RifleChain_GetUnwindingSpeed, ReturnValue) == 0x000000, "Member 'RifleChain_GetUnwindingSpeed::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChain.IsColliding
// 0x0001 (0x0001 - 0x0000)
struct RifleChain_IsColliding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_IsColliding) == 0x000001, "Wrong alignment on RifleChain_IsColliding");
static_assert(sizeof(RifleChain_IsColliding) == 0x000001, "Wrong size on RifleChain_IsColliding");
static_assert(offsetof(RifleChain_IsColliding, ReturnValue) == 0x000000, "Member 'RifleChain_IsColliding::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChainTensionComponent.OnTensionChargeableCompletionChanged
// 0x0018 (0x0018 - 0x0000)
struct RifleChainTensionComponent_OnTensionChargeableCompletionChanged final
{
public:
	bool                                          completed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         instigatorsForCompletion;                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChainTensionComponent_OnTensionChargeableCompletionChanged) == 0x000008, "Wrong alignment on RifleChainTensionComponent_OnTensionChargeableCompletionChanged");
static_assert(sizeof(RifleChainTensionComponent_OnTensionChargeableCompletionChanged) == 0x000018, "Wrong size on RifleChainTensionComponent_OnTensionChargeableCompletionChanged");
static_assert(offsetof(RifleChainTensionComponent_OnTensionChargeableCompletionChanged, completed) == 0x000000, "Member 'RifleChainTensionComponent_OnTensionChargeableCompletionChanged::completed' has a wrong offset!");
static_assert(offsetof(RifleChainTensionComponent_OnTensionChargeableCompletionChanged, instigatorsForCompletion) == 0x000008, "Member 'RifleChainTensionComponent_OnTensionChargeableCompletionChanged::instigatorsForCompletion' has a wrong offset!");

// Function TheGunslinger.RifleChainTensionComponent.GetProgress
// 0x0004 (0x0004 - 0x0000)
struct RifleChainTensionComponent_GetProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChainTensionComponent_GetProgress) == 0x000004, "Wrong alignment on RifleChainTensionComponent_GetProgress");
static_assert(sizeof(RifleChainTensionComponent_GetProgress) == 0x000004, "Wrong size on RifleChainTensionComponent_GetProgress");
static_assert(offsetof(RifleChainTensionComponent_GetProgress, ReturnValue) == 0x000000, "Member 'RifleChainTensionComponent_GetProgress::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChainTensionComponent.IsBuildingTension
// 0x0001 (0x0001 - 0x0000)
struct RifleChainTensionComponent_IsBuildingTension final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChainTensionComponent_IsBuildingTension) == 0x000001, "Wrong alignment on RifleChainTensionComponent_IsBuildingTension");
static_assert(sizeof(RifleChainTensionComponent_IsBuildingTension) == 0x000001, "Wrong size on RifleChainTensionComponent_IsBuildingTension");
static_assert(offsetof(RifleChainTensionComponent_IsBuildingTension, ReturnValue) == 0x000000, "Member 'RifleChainTensionComponent_IsBuildingTension::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RiflePlayerLinker.Client_OnAuthorityTensionBreakChain
// 0x0008 (0x0008 - 0x0000)
struct RiflePlayerLinker_Client_OnAuthorityTensionBreakChain final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiflePlayerLinker_Client_OnAuthorityTensionBreakChain) == 0x000008, "Wrong alignment on RiflePlayerLinker_Client_OnAuthorityTensionBreakChain");
static_assert(sizeof(RiflePlayerLinker_Client_OnAuthorityTensionBreakChain) == 0x000008, "Wrong size on RiflePlayerLinker_Client_OnAuthorityTensionBreakChain");
static_assert(offsetof(RiflePlayerLinker_Client_OnAuthorityTensionBreakChain, player) == 0x000000, "Member 'RiflePlayerLinker_Client_OnAuthorityTensionBreakChain::player' has a wrong offset!");

// Function TheGunslinger.RiflePlayerLinker.Multicast_Link
// 0x0008 (0x0008 - 0x0000)
struct RiflePlayerLinker_Multicast_Link final
{
public:
	class ADBDPlayer*                             linkedPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiflePlayerLinker_Multicast_Link) == 0x000008, "Wrong alignment on RiflePlayerLinker_Multicast_Link");
static_assert(sizeof(RiflePlayerLinker_Multicast_Link) == 0x000008, "Wrong size on RiflePlayerLinker_Multicast_Link");
static_assert(offsetof(RiflePlayerLinker_Multicast_Link, linkedPlayer) == 0x000000, "Member 'RiflePlayerLinker_Multicast_Link::linkedPlayer' has a wrong offset!");

// Function TheGunslinger.RiflePlayerLinker.Server_OnClientConfirmTensionBreakChain
// 0x0008 (0x0008 - 0x0000)
struct RiflePlayerLinker_Server_OnClientConfirmTensionBreakChain final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiflePlayerLinker_Server_OnClientConfirmTensionBreakChain) == 0x000008, "Wrong alignment on RiflePlayerLinker_Server_OnClientConfirmTensionBreakChain");
static_assert(sizeof(RiflePlayerLinker_Server_OnClientConfirmTensionBreakChain) == 0x000008, "Wrong size on RiflePlayerLinker_Server_OnClientConfirmTensionBreakChain");
static_assert(offsetof(RiflePlayerLinker_Server_OnClientConfirmTensionBreakChain, player) == 0x000000, "Member 'RiflePlayerLinker_Server_OnClientConfirmTensionBreakChain::player' has a wrong offset!");

// Function TheGunslinger.RiflePlayerLinker.GetLinkedPlayer
// 0x0008 (0x0008 - 0x0000)
struct RiflePlayerLinker_GetLinkedPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiflePlayerLinker_GetLinkedPlayer) == 0x000008, "Wrong alignment on RiflePlayerLinker_GetLinkedPlayer");
static_assert(sizeof(RiflePlayerLinker_GetLinkedPlayer) == 0x000008, "Wrong size on RiflePlayerLinker_GetLinkedPlayer");
static_assert(offsetof(RiflePlayerLinker_GetLinkedPlayer, ReturnValue) == 0x000000, "Member 'RiflePlayerLinker_GetLinkedPlayer::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RiflePlayerLinker.GetLinkOwner
// 0x0008 (0x0008 - 0x0000)
struct RiflePlayerLinker_GetLinkOwner final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiflePlayerLinker_GetLinkOwner) == 0x000008, "Wrong alignment on RiflePlayerLinker_GetLinkOwner");
static_assert(sizeof(RiflePlayerLinker_GetLinkOwner) == 0x000008, "Wrong size on RiflePlayerLinker_GetLinkOwner");
static_assert(offsetof(RiflePlayerLinker_GetLinkOwner, ReturnValue) == 0x000000, "Member 'RiflePlayerLinker_GetLinkOwner::ReturnValue' has a wrong offset!");

// Function TheGunslinger.SurvivorReelVelocityAdditiveStrategy.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct SurvivorReelVelocityAdditiveStrategy_OnKillerSet final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorReelVelocityAdditiveStrategy_OnKillerSet) == 0x000008, "Wrong alignment on SurvivorReelVelocityAdditiveStrategy_OnKillerSet");
static_assert(sizeof(SurvivorReelVelocityAdditiveStrategy_OnKillerSet) == 0x000008, "Wrong size on SurvivorReelVelocityAdditiveStrategy_OnKillerSet");
static_assert(offsetof(SurvivorReelVelocityAdditiveStrategy_OnKillerSet, killer) == 0x000000, "Member 'SurvivorReelVelocityAdditiveStrategy_OnKillerSet::killer' has a wrong offset!");

}

