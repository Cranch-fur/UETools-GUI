#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIPresenters

#include "Basic.hpp"

#include "DBDSharedTypes_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DataTableUtilities_structs.hpp"


namespace SDK
{

// Enum DBDUIPresenters.EContextSection
// NumValues: 0x000D
enum class EContextSection : uint8
{
	None                                     = 0,
	Hud                                      = 1,
	MainMenu                                 = 2,
	Lobby                                    = 3,
	Store                                    = 4,
	Tally                                    = 5,
	Archive                                  = 6,
	Credits                                  = 7,
	Onboarding                               = 8,
	Popups                                   = 9,
	GenericPopups                            = 10,
	LightSensitivity                         = 11,
	EContextSection_MAX                      = 12,
};

// Enum DBDUIPresenters.EPlayerProfileFilter
// NumValues: 0x0005
enum class EPlayerProfileFilter : uint8
{
	Wallet                                   = 0,
	PlayerName                               = 1,
	PlayerLevel                              = 2,
	PlayerRank                               = 3,
	EPlayerProfileFilter_MAX                 = 4,
};

// Enum DBDUIPresenters.EPresenterPhase
// NumValues: 0x0003
enum class EPresenterPhase : uint8
{
	Initialization                           = 0,
	StartPresenting                          = 1,
	EPresenterPhase_MAX                      = 2,
};

// Enum DBDUIPresenters.EGameLayer
// NumValues: 0x0004
enum class EGameLayer : uint8
{
	Default                                  = 0,
	UMGPopup                                 = 1,
	Watermark                                = 2,
	EGameLayer_MAX                           = 3,
};

// ScriptStruct DBDUIPresenters.QuestEventsTrackingData
// 0x0020 (0x0020 - 0x0000)
struct FQuestEventsTrackingData final
{
public:
	class FString                                 QuestEventId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentProgressionValue;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProgressionValue;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestOperationType                           OperationType;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestEventsTrackingData) == 0x000008, "Wrong alignment on FQuestEventsTrackingData");
static_assert(sizeof(FQuestEventsTrackingData) == 0x000020, "Wrong size on FQuestEventsTrackingData");
static_assert(offsetof(FQuestEventsTrackingData, QuestEventId) == 0x000000, "Member 'FQuestEventsTrackingData::QuestEventId' has a wrong offset!");
static_assert(offsetof(FQuestEventsTrackingData, CurrentProgressionValue) == 0x000010, "Member 'FQuestEventsTrackingData::CurrentProgressionValue' has a wrong offset!");
static_assert(offsetof(FQuestEventsTrackingData, MaxProgressionValue) == 0x000014, "Member 'FQuestEventsTrackingData::MaxProgressionValue' has a wrong offset!");
static_assert(offsetof(FQuestEventsTrackingData, OperationType) == 0x000018, "Member 'FQuestEventsTrackingData::OperationType' has a wrong offset!");

// ScriptStruct DBDUIPresenters.PresenterContainerInfo
// 0x0028 (0x0028 - 0x0000)
struct FPresenterContainerInfo final
{
public:
	TSubclassOf<class UPresenterContainer>        ContainerClass;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              Nudge;                                             // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Row;                                               // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Column;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPresenterContainerInfo) == 0x000008, "Wrong alignment on FPresenterContainerInfo");
static_assert(sizeof(FPresenterContainerInfo) == 0x000028, "Wrong size on FPresenterContainerInfo");
static_assert(offsetof(FPresenterContainerInfo, ContainerClass) == 0x000000, "Member 'FPresenterContainerInfo::ContainerClass' has a wrong offset!");
static_assert(offsetof(FPresenterContainerInfo, Padding) == 0x000008, "Member 'FPresenterContainerInfo::Padding' has a wrong offset!");
static_assert(offsetof(FPresenterContainerInfo, Nudge) == 0x000018, "Member 'FPresenterContainerInfo::Nudge' has a wrong offset!");
static_assert(offsetof(FPresenterContainerInfo, Row) == 0x000020, "Member 'FPresenterContainerInfo::Row' has a wrong offset!");
static_assert(offsetof(FPresenterContainerInfo, Column) == 0x000024, "Member 'FPresenterContainerInfo::Column' has a wrong offset!");

// ScriptStruct DBDUIPresenters.PresenterGroupData
// 0x0008 (0x0010 - 0x0008)
struct FPresenterGroupData final : public FDBDTableRowBase
{
public:
	TSubclassOf<class UPresenterGroup>            PresenterGroup;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPresenterGroupData) == 0x000008, "Wrong alignment on FPresenterGroupData");
static_assert(sizeof(FPresenterGroupData) == 0x000010, "Wrong size on FPresenterGroupData");
static_assert(offsetof(FPresenterGroupData, PresenterGroup) == 0x000008, "Member 'FPresenterGroupData::PresenterGroup' has a wrong offset!");

// ScriptStruct DBDUIPresenters.SubtitlesEntry
// 0x0018 (0x0018 - 0x0000)
struct FSubtitlesEntry final
{
public:
	class FString                                 subtitle;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAOneLiner;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubtitlesEntry) == 0x000008, "Wrong alignment on FSubtitlesEntry");
static_assert(sizeof(FSubtitlesEntry) == 0x000018, "Wrong size on FSubtitlesEntry");
static_assert(offsetof(FSubtitlesEntry, subtitle) == 0x000000, "Member 'FSubtitlesEntry::subtitle' has a wrong offset!");
static_assert(offsetof(FSubtitlesEntry, isAOneLiner) == 0x000010, "Member 'FSubtitlesEntry::isAOneLiner' has a wrong offset!");

}

