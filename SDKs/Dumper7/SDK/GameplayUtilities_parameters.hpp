#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayUtilities

#include "Basic.hpp"

#include "GameplayUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GameplayUtilities.CharacterPusherComponent.Construct
// 0x0018 (0x0018 - 0x0000)
struct CharacterPusherComponent_Construct final
{
public:
	class UCapsuleComponent*                      characterDetector;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      characterCollision;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBasePushStrategyComponent*             pushStrategy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterPusherComponent_Construct) == 0x000008, "Wrong alignment on CharacterPusherComponent_Construct");
static_assert(sizeof(CharacterPusherComponent_Construct) == 0x000018, "Wrong size on CharacterPusherComponent_Construct");
static_assert(offsetof(CharacterPusherComponent_Construct, characterDetector) == 0x000000, "Member 'CharacterPusherComponent_Construct::characterDetector' has a wrong offset!");
static_assert(offsetof(CharacterPusherComponent_Construct, characterCollision) == 0x000008, "Member 'CharacterPusherComponent_Construct::characterCollision' has a wrong offset!");
static_assert(offsetof(CharacterPusherComponent_Construct, pushStrategy) == 0x000010, "Member 'CharacterPusherComponent_Construct::pushStrategy' has a wrong offset!");

// Function GameplayUtilities.CharacterPusherComponent.OnCharacterDetectorOverlapExit
// 0x0020 (0x0020 - 0x0000)
struct CharacterPusherComponent_OnCharacterDetectorOverlapExit final
{
public:
	class UPrimitiveComponent*                    hitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterPusherComponent_OnCharacterDetectorOverlapExit) == 0x000008, "Wrong alignment on CharacterPusherComponent_OnCharacterDetectorOverlapExit");
static_assert(sizeof(CharacterPusherComponent_OnCharacterDetectorOverlapExit) == 0x000020, "Wrong size on CharacterPusherComponent_OnCharacterDetectorOverlapExit");
static_assert(offsetof(CharacterPusherComponent_OnCharacterDetectorOverlapExit, hitComponent) == 0x000000, "Member 'CharacterPusherComponent_OnCharacterDetectorOverlapExit::hitComponent' has a wrong offset!");
static_assert(offsetof(CharacterPusherComponent_OnCharacterDetectorOverlapExit, otherActor) == 0x000008, "Member 'CharacterPusherComponent_OnCharacterDetectorOverlapExit::otherActor' has a wrong offset!");
static_assert(offsetof(CharacterPusherComponent_OnCharacterDetectorOverlapExit, otherComp) == 0x000010, "Member 'CharacterPusherComponent_OnCharacterDetectorOverlapExit::otherComp' has a wrong offset!");
static_assert(offsetof(CharacterPusherComponent_OnCharacterDetectorOverlapExit, otherBodyIndex) == 0x000018, "Member 'CharacterPusherComponent_OnCharacterDetectorOverlapExit::otherBodyIndex' has a wrong offset!");

// Function GameplayUtilities.CharacterPusherComponent.SetIgnoredCharacter
// 0x0010 (0x0010 - 0x0000)
struct CharacterPusherComponent_SetIgnoredCharacter final
{
public:
	class ACharacter*                             character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ignore;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterPusherComponent_SetIgnoredCharacter) == 0x000008, "Wrong alignment on CharacterPusherComponent_SetIgnoredCharacter");
static_assert(sizeof(CharacterPusherComponent_SetIgnoredCharacter) == 0x000010, "Wrong size on CharacterPusherComponent_SetIgnoredCharacter");
static_assert(offsetof(CharacterPusherComponent_SetIgnoredCharacter, character) == 0x000000, "Member 'CharacterPusherComponent_SetIgnoredCharacter::character' has a wrong offset!");
static_assert(offsetof(CharacterPusherComponent_SetIgnoredCharacter, ignore) == 0x000008, "Member 'CharacterPusherComponent_SetIgnoredCharacter::ignore' has a wrong offset!");

// Function GameplayUtilities.BasePoolableActorComponent.SetAcquired
// 0x0001 (0x0001 - 0x0000)
struct BasePoolableActorComponent_SetAcquired final
{
public:
	bool                                          active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePoolableActorComponent_SetAcquired) == 0x000001, "Wrong alignment on BasePoolableActorComponent_SetAcquired");
static_assert(sizeof(BasePoolableActorComponent_SetAcquired) == 0x000001, "Wrong size on BasePoolableActorComponent_SetAcquired");
static_assert(offsetof(BasePoolableActorComponent_SetAcquired, active) == 0x000000, "Member 'BasePoolableActorComponent_SetAcquired::active' has a wrong offset!");

// Function GameplayUtilities.BasePoolableActorComponent.IsAcquired
// 0x0001 (0x0001 - 0x0000)
struct BasePoolableActorComponent_IsAcquired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePoolableActorComponent_IsAcquired) == 0x000001, "Wrong alignment on BasePoolableActorComponent_IsAcquired");
static_assert(sizeof(BasePoolableActorComponent_IsAcquired) == 0x000001, "Wrong size on BasePoolableActorComponent_IsAcquired");
static_assert(offsetof(BasePoolableActorComponent_IsAcquired, ReturnValue) == 0x000000, "Member 'BasePoolableActorComponent_IsAcquired::ReturnValue' has a wrong offset!");

// Function GameplayUtilities.AuthoritativeActorPoolComponent.Authority_OnActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct AuthoritativeActorPoolComponent_Authority_OnActorDestroyed final
{
public:
	class AActor*                                 destroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AuthoritativeActorPoolComponent_Authority_OnActorDestroyed) == 0x000008, "Wrong alignment on AuthoritativeActorPoolComponent_Authority_OnActorDestroyed");
static_assert(sizeof(AuthoritativeActorPoolComponent_Authority_OnActorDestroyed) == 0x000008, "Wrong size on AuthoritativeActorPoolComponent_Authority_OnActorDestroyed");
static_assert(offsetof(AuthoritativeActorPoolComponent_Authority_OnActorDestroyed, destroyedActor) == 0x000000, "Member 'AuthoritativeActorPoolComponent_Authority_OnActorDestroyed::destroyedActor' has a wrong offset!");

// Function GameplayUtilities.AuthoritativeActorPoolComponent.OnRep_Pool
// 0x0010 (0x0010 - 0x0000)
struct AuthoritativeActorPoolComponent_OnRep_Pool final
{
public:
	TArray<class AActor*>                         previousPool;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AuthoritativeActorPoolComponent_OnRep_Pool) == 0x000008, "Wrong alignment on AuthoritativeActorPoolComponent_OnRep_Pool");
static_assert(sizeof(AuthoritativeActorPoolComponent_OnRep_Pool) == 0x000010, "Wrong size on AuthoritativeActorPoolComponent_OnRep_Pool");
static_assert(offsetof(AuthoritativeActorPoolComponent_OnRep_Pool, previousPool) == 0x000000, "Member 'AuthoritativeActorPoolComponent_OnRep_Pool::previousPool' has a wrong offset!");

// Function GameplayUtilities.BoxOcclusionQueryComponent.GetEstimatedRenderedPixelCount
// 0x0004 (0x0004 - 0x0000)
struct BoxOcclusionQueryComponent_GetEstimatedRenderedPixelCount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoxOcclusionQueryComponent_GetEstimatedRenderedPixelCount) == 0x000004, "Wrong alignment on BoxOcclusionQueryComponent_GetEstimatedRenderedPixelCount");
static_assert(sizeof(BoxOcclusionQueryComponent_GetEstimatedRenderedPixelCount) == 0x000004, "Wrong size on BoxOcclusionQueryComponent_GetEstimatedRenderedPixelCount");
static_assert(offsetof(BoxOcclusionQueryComponent_GetEstimatedRenderedPixelCount, ReturnValue) == 0x000000, "Member 'BoxOcclusionQueryComponent_GetEstimatedRenderedPixelCount::ReturnValue' has a wrong offset!");

// Function GameplayUtilities.BoxOcclusionQueryComponent.GetNumberOfVisiblePixels
// 0x0004 (0x0004 - 0x0000)
struct BoxOcclusionQueryComponent_GetNumberOfVisiblePixels final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoxOcclusionQueryComponent_GetNumberOfVisiblePixels) == 0x000004, "Wrong alignment on BoxOcclusionQueryComponent_GetNumberOfVisiblePixels");
static_assert(sizeof(BoxOcclusionQueryComponent_GetNumberOfVisiblePixels) == 0x000004, "Wrong size on BoxOcclusionQueryComponent_GetNumberOfVisiblePixels");
static_assert(offsetof(BoxOcclusionQueryComponent_GetNumberOfVisiblePixels, ReturnValue) == 0x000000, "Member 'BoxOcclusionQueryComponent_GetNumberOfVisiblePixels::ReturnValue' has a wrong offset!");

// Function GameplayUtilities.BoxOcclusionQueryComponent.GetVisiblePercentOfScreen
// 0x0004 (0x0004 - 0x0000)
struct BoxOcclusionQueryComponent_GetVisiblePercentOfScreen final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoxOcclusionQueryComponent_GetVisiblePercentOfScreen) == 0x000004, "Wrong alignment on BoxOcclusionQueryComponent_GetVisiblePercentOfScreen");
static_assert(sizeof(BoxOcclusionQueryComponent_GetVisiblePercentOfScreen) == 0x000004, "Wrong size on BoxOcclusionQueryComponent_GetVisiblePercentOfScreen");
static_assert(offsetof(BoxOcclusionQueryComponent_GetVisiblePercentOfScreen, ReturnValue) == 0x000000, "Member 'BoxOcclusionQueryComponent_GetVisiblePercentOfScreen::ReturnValue' has a wrong offset!");

// Function GameplayUtilities.CharacterSightableComponent.GetHighestSightStatus
// 0x0001 (0x0001 - 0x0000)
struct CharacterSightableComponent_GetHighestSightStatus final
{
public:
	ESightStatus                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSightableComponent_GetHighestSightStatus) == 0x000001, "Wrong alignment on CharacterSightableComponent_GetHighestSightStatus");
static_assert(sizeof(CharacterSightableComponent_GetHighestSightStatus) == 0x000001, "Wrong size on CharacterSightableComponent_GetHighestSightStatus");
static_assert(offsetof(CharacterSightableComponent_GetHighestSightStatus, ReturnValue) == 0x000000, "Member 'CharacterSightableComponent_GetHighestSightStatus::ReturnValue' has a wrong offset!");

// Function GameplayUtilities.CharacterSightComponent.Server_UpdateDiscernedCharacters
// 0x0010 (0x0010 - 0x0000)
struct CharacterSightComponent_Server_UpdateDiscernedCharacters final
{
public:
	TArray<class ACharacter*>                     characters;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSightComponent_Server_UpdateDiscernedCharacters) == 0x000008, "Wrong alignment on CharacterSightComponent_Server_UpdateDiscernedCharacters");
static_assert(sizeof(CharacterSightComponent_Server_UpdateDiscernedCharacters) == 0x000010, "Wrong size on CharacterSightComponent_Server_UpdateDiscernedCharacters");
static_assert(offsetof(CharacterSightComponent_Server_UpdateDiscernedCharacters, characters) == 0x000000, "Member 'CharacterSightComponent_Server_UpdateDiscernedCharacters::characters' has a wrong offset!");

// Function GameplayUtilities.CharacterSightComponent.SetMaximumSightDistance
// 0x0004 (0x0004 - 0x0000)
struct CharacterSightComponent_SetMaximumSightDistance final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSightComponent_SetMaximumSightDistance) == 0x000004, "Wrong alignment on CharacterSightComponent_SetMaximumSightDistance");
static_assert(sizeof(CharacterSightComponent_SetMaximumSightDistance) == 0x000004, "Wrong size on CharacterSightComponent_SetMaximumSightDistance");
static_assert(offsetof(CharacterSightComponent_SetMaximumSightDistance, value) == 0x000000, "Member 'CharacterSightComponent_SetMaximumSightDistance::value' has a wrong offset!");

// Function GameplayUtilities.CharacterSightComponent.SetMinimumCharacterScreenPercentInZone
// 0x0008 (0x0008 - 0x0000)
struct CharacterSightComponent_SetMinimumCharacterScreenPercentInZone final
{
public:
	float                                         trigger;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         untrigger;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSightComponent_SetMinimumCharacterScreenPercentInZone) == 0x000004, "Wrong alignment on CharacterSightComponent_SetMinimumCharacterScreenPercentInZone");
static_assert(sizeof(CharacterSightComponent_SetMinimumCharacterScreenPercentInZone) == 0x000008, "Wrong size on CharacterSightComponent_SetMinimumCharacterScreenPercentInZone");
static_assert(offsetof(CharacterSightComponent_SetMinimumCharacterScreenPercentInZone, trigger) == 0x000000, "Member 'CharacterSightComponent_SetMinimumCharacterScreenPercentInZone::trigger' has a wrong offset!");
static_assert(offsetof(CharacterSightComponent_SetMinimumCharacterScreenPercentInZone, untrigger) == 0x000004, "Member 'CharacterSightComponent_SetMinimumCharacterScreenPercentInZone::untrigger' has a wrong offset!");

// Function GameplayUtilities.CharacterSightComponent.SetMinimumCharacterScreenPercentNotInZone
// 0x0008 (0x0008 - 0x0000)
struct CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone final
{
public:
	float                                         trigger;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         untrigger;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone) == 0x000004, "Wrong alignment on CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone");
static_assert(sizeof(CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone) == 0x000008, "Wrong size on CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone");
static_assert(offsetof(CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone, trigger) == 0x000000, "Member 'CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone::trigger' has a wrong offset!");
static_assert(offsetof(CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone, untrigger) == 0x000004, "Member 'CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone::untrigger' has a wrong offset!");

// Function GameplayUtilities.CharacterSightComponent.SetMinimumCharacterVisiblePixelsPercent
// 0x0008 (0x0008 - 0x0000)
struct CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent final
{
public:
	float                                         trigger;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         untrigger;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent) == 0x000004, "Wrong alignment on CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent");
static_assert(sizeof(CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent) == 0x000008, "Wrong size on CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent");
static_assert(offsetof(CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent, trigger) == 0x000000, "Member 'CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent::trigger' has a wrong offset!");
static_assert(offsetof(CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent, untrigger) == 0x000004, "Member 'CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent::untrigger' has a wrong offset!");

// Function GameplayUtilities.CharacterSightComponent.SetScreenVisibilityZoneRadiusPercent
// 0x0008 (0x0008 - 0x0000)
struct CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent final
{
public:
	float                                         valueX;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         valueY;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent) == 0x000004, "Wrong alignment on CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent");
static_assert(sizeof(CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent) == 0x000008, "Wrong size on CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent");
static_assert(offsetof(CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent, valueX) == 0x000000, "Member 'CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent::valueX' has a wrong offset!");
static_assert(offsetof(CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent, valueY) == 0x000004, "Member 'CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent::valueY' has a wrong offset!");

// Function GameplayUtilities.ChargeableUtilities.ConvertSecondsToAddToRateMultiplier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableUtilities_ConvertSecondsToAddToRateMultiplier final
{
public:
	float                                         secondsToAdd;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         baseMaxSeconds;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         baseRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableUtilities_ConvertSecondsToAddToRateMultiplier) == 0x000004, "Wrong alignment on ChargeableUtilities_ConvertSecondsToAddToRateMultiplier");
static_assert(sizeof(ChargeableUtilities_ConvertSecondsToAddToRateMultiplier) == 0x000010, "Wrong size on ChargeableUtilities_ConvertSecondsToAddToRateMultiplier");
static_assert(offsetof(ChargeableUtilities_ConvertSecondsToAddToRateMultiplier, secondsToAdd) == 0x000000, "Member 'ChargeableUtilities_ConvertSecondsToAddToRateMultiplier::secondsToAdd' has a wrong offset!");
static_assert(offsetof(ChargeableUtilities_ConvertSecondsToAddToRateMultiplier, baseMaxSeconds) == 0x000004, "Member 'ChargeableUtilities_ConvertSecondsToAddToRateMultiplier::baseMaxSeconds' has a wrong offset!");
static_assert(offsetof(ChargeableUtilities_ConvertSecondsToAddToRateMultiplier, baseRate) == 0x000008, "Member 'ChargeableUtilities_ConvertSecondsToAddToRateMultiplier::baseRate' has a wrong offset!");
static_assert(offsetof(ChargeableUtilities_ConvertSecondsToAddToRateMultiplier, ReturnValue) == 0x00000C, "Member 'ChargeableUtilities_ConvertSecondsToAddToRateMultiplier::ReturnValue' has a wrong offset!");

// Function GameplayUtilities.MovementUtilities.Local_MoveActorTo
// 0x0028 (0x0028 - 0x0000)
struct MovementUtilities_Local_MoveActorTo final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rotation;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovementUtilities_Local_MoveActorTo) == 0x000008, "Wrong alignment on MovementUtilities_Local_MoveActorTo");
static_assert(sizeof(MovementUtilities_Local_MoveActorTo) == 0x000028, "Wrong size on MovementUtilities_Local_MoveActorTo");
static_assert(offsetof(MovementUtilities_Local_MoveActorTo, actor) == 0x000000, "Member 'MovementUtilities_Local_MoveActorTo::actor' has a wrong offset!");
static_assert(offsetof(MovementUtilities_Local_MoveActorTo, location) == 0x000008, "Member 'MovementUtilities_Local_MoveActorTo::location' has a wrong offset!");
static_assert(offsetof(MovementUtilities_Local_MoveActorTo, rotation) == 0x000014, "Member 'MovementUtilities_Local_MoveActorTo::rotation' has a wrong offset!");
static_assert(offsetof(MovementUtilities_Local_MoveActorTo, duration) == 0x000020, "Member 'MovementUtilities_Local_MoveActorTo::duration' has a wrong offset!");

// Function GameplayUtilities.PawnUtilities.GetLocallyObservedPawn
// 0x0010 (0x0010 - 0x0000)
struct PawnUtilities_GetLocallyObservedPawn final
{
public:
	const class UObject*                          worldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnUtilities_GetLocallyObservedPawn) == 0x000008, "Wrong alignment on PawnUtilities_GetLocallyObservedPawn");
static_assert(sizeof(PawnUtilities_GetLocallyObservedPawn) == 0x000010, "Wrong size on PawnUtilities_GetLocallyObservedPawn");
static_assert(offsetof(PawnUtilities_GetLocallyObservedPawn, worldContext) == 0x000000, "Member 'PawnUtilities_GetLocallyObservedPawn::worldContext' has a wrong offset!");
static_assert(offsetof(PawnUtilities_GetLocallyObservedPawn, ReturnValue) == 0x000008, "Member 'PawnUtilities_GetLocallyObservedPawn::ReturnValue' has a wrong offset!");

// Function GameplayUtilities.PawnUtilities.GetOwningPawn
// 0x0010 (0x0010 - 0x0000)
struct PawnUtilities_GetOwningPawn final
{
public:
	const class AActor*                           origin;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnUtilities_GetOwningPawn) == 0x000008, "Wrong alignment on PawnUtilities_GetOwningPawn");
static_assert(sizeof(PawnUtilities_GetOwningPawn) == 0x000010, "Wrong size on PawnUtilities_GetOwningPawn");
static_assert(offsetof(PawnUtilities_GetOwningPawn, origin) == 0x000000, "Member 'PawnUtilities_GetOwningPawn::origin' has a wrong offset!");
static_assert(offsetof(PawnUtilities_GetOwningPawn, ReturnValue) == 0x000008, "Member 'PawnUtilities_GetOwningPawn::ReturnValue' has a wrong offset!");

}

