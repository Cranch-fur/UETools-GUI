#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheGhostface

#include "Basic.hpp"

#include "DataTableUtilities_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "DBDCompetence_classes.hpp"
#include "Engine_classes.hpp"
#include "TheGhostface_structs.hpp"
#include "StatSystem_structs.hpp"
#include "DBDInteraction_classes.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "DBDAttack_classes.hpp"
#include "GameplayTagUtilities_structs.hpp"


namespace SDK
{

// Class TheGhostface.Addon_Ghost_DriversLicense
// 0x0068 (0x0320 - 0x02B8)
class UAddon_Ghost_DriversLicense final : public UItemAddon
{
public:
	struct FDBDTunableRowHandle                   _progressLoss;                                     // 0x02B8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _blockedTime;                                      // 0x02E0(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_308[0x18];                                     // 0x0308(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_Ghost_DriversLicense">();
	}
	static class UAddon_Ghost_DriversLicense* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_Ghost_DriversLicense>();
	}
};
static_assert(alignof(UAddon_Ghost_DriversLicense) == 0x000008, "Wrong alignment on UAddon_Ghost_DriversLicense");
static_assert(sizeof(UAddon_Ghost_DriversLicense) == 0x000320, "Wrong size on UAddon_Ghost_DriversLicense");
static_assert(offsetof(UAddon_Ghost_DriversLicense, _progressLoss) == 0x0002B8, "Member 'UAddon_Ghost_DriversLicense::_progressLoss' has a wrong offset!");
static_assert(offsetof(UAddon_Ghost_DriversLicense, _blockedTime) == 0x0002E0, "Member 'UAddon_Ghost_DriversLicense::_blockedTime' has a wrong offset!");

// Class TheGhostface.Addon_Ghost_OlsensAddressBook
// 0x0000 (0x02E8 - 0x02E8)
class UAddon_Ghost_OlsensAddressBook final : public UImposeStatusEffectOnEventAddon
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_Ghost_OlsensAddressBook">();
	}
	static class UAddon_Ghost_OlsensAddressBook* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_Ghost_OlsensAddressBook>();
	}
};
static_assert(alignof(UAddon_Ghost_OlsensAddressBook) == 0x000008, "Wrong alignment on UAddon_Ghost_OlsensAddressBook");
static_assert(sizeof(UAddon_Ghost_OlsensAddressBook) == 0x0002E8, "Wrong size on UAddon_Ghost_OlsensAddressBook");

// Class TheGhostface.GhostChargeStalkModeInteraction
// 0x0010 (0x0630 - 0x0620)
class UGhostChargeStalkModeInteraction final : public UBaseStalkModeInteraction
{
public:
	uint8                                         Pad_620[0x10];                                     // 0x0620(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UGhostStealthComponent* GetStealthComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GhostChargeStalkModeInteraction">();
	}
	static class UGhostChargeStalkModeInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGhostChargeStalkModeInteraction>();
	}
};
static_assert(alignof(UGhostChargeStalkModeInteraction) == 0x000010, "Wrong alignment on UGhostChargeStalkModeInteraction");
static_assert(sizeof(UGhostChargeStalkModeInteraction) == 0x000630, "Wrong size on UGhostChargeStalkModeInteraction");

// Class TheGhostface.GhostfaceCrouchAttack
// 0x0000 (0x0380 - 0x0380)
class UGhostfaceCrouchAttack final : public UPounceAttack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GhostfaceCrouchAttack">();
	}
	static class UGhostfaceCrouchAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGhostfaceCrouchAttack>();
	}
};
static_assert(alignof(UGhostfaceCrouchAttack) == 0x000010, "Wrong alignment on UGhostfaceCrouchAttack");
static_assert(sizeof(UGhostfaceCrouchAttack) == 0x000380, "Wrong size on UGhostfaceCrouchAttack");

// Class TheGhostface.GhostKillerAnalyticsComponent
// 0x0150 (0x0208 - 0x00B8)
class UGhostKillerAnalyticsComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x38];                                      // 0x00B8(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGhostKillerAnalytics                  _ghostKillerAnalytics;                             // 0x00F0(0x00F0)(Net, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E0[0x28];                                     // 0x01E0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnPreAttackSuccess(const struct FGameplayTag& gameplayTag, const struct FGameEventData& gameEventData);
	void Authority_OnStalkChargePercentChanged(class UChargeableComponent* chargeableComponent, float percentCompletionChange, float totalPercentComplete);
	void Local_OnIsStealthChanged(bool isStealth);
	void Local_OnLeanStateChanged(ELeanState leanState);
	void Local_OnStalkModeChanged(bool isInStalkMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GhostKillerAnalyticsComponent">();
	}
	static class UGhostKillerAnalyticsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGhostKillerAnalyticsComponent>();
	}
};
static_assert(alignof(UGhostKillerAnalyticsComponent) == 0x000008, "Wrong alignment on UGhostKillerAnalyticsComponent");
static_assert(sizeof(UGhostKillerAnalyticsComponent) == 0x000208, "Wrong size on UGhostKillerAnalyticsComponent");
static_assert(offsetof(UGhostKillerAnalyticsComponent, _ghostKillerAnalytics) == 0x0000F0, "Member 'UGhostKillerAnalyticsComponent::_ghostKillerAnalytics' has a wrong offset!");

// Class TheGhostface.GhostStalkedComponent
// 0x0258 (0x0310 - 0x00B8)
class UGhostStalkedComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool isMarked)> OnIsMarkedChanged;                                 // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool isSpotting)> OnIsSpottingKillerChanged;                       // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FTagStateBool                          _isMarked;                                         // 0x00E0(0x0030)(Net, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UStatusEffect*                          _ghostKillerInstinctEffect;                        // 0x0118(0x0008)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_120[0x30];                                     // 0x0120(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimerObject*                           _markTimer;                                        // 0x0150(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _killerInstinctDuration;                           // 0x0158(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _markDuration;                                     // 0x01D8(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _stalkPointsDepleteDelay;                          // 0x0258(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ASlasherPlayer*                         _killer;                                           // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStalkedComponent*                      _stalkedComponent;                                 // 0x0288(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_290[0x80];                                     // 0x0290(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnStalkedChargeFull(bool completed, const TArray<class AActor*>& instigatorsForCompletion);
	void Client_OnSpotKiller();
	void DBD_DebugGhost(bool debug);
	void Initialize(class ASlasherPlayer* killer);
	void Local_OnSpotKiller();
	void OnKillerSpottedChanged(class ADBDPlayer* spotter, bool spotted);

	bool IsMarked() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GhostStalkedComponent">();
	}
	static class UGhostStalkedComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGhostStalkedComponent>();
	}
};
static_assert(alignof(UGhostStalkedComponent) == 0x000008, "Wrong alignment on UGhostStalkedComponent");
static_assert(sizeof(UGhostStalkedComponent) == 0x000310, "Wrong size on UGhostStalkedComponent");
static_assert(offsetof(UGhostStalkedComponent, OnIsMarkedChanged) == 0x0000C0, "Member 'UGhostStalkedComponent::OnIsMarkedChanged' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, OnIsSpottingKillerChanged) == 0x0000D0, "Member 'UGhostStalkedComponent::OnIsSpottingKillerChanged' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _isMarked) == 0x0000E0, "Member 'UGhostStalkedComponent::_isMarked' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _ghostKillerInstinctEffect) == 0x000118, "Member 'UGhostStalkedComponent::_ghostKillerInstinctEffect' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _markTimer) == 0x000150, "Member 'UGhostStalkedComponent::_markTimer' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _killerInstinctDuration) == 0x000158, "Member 'UGhostStalkedComponent::_killerInstinctDuration' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _markDuration) == 0x0001D8, "Member 'UGhostStalkedComponent::_markDuration' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _stalkPointsDepleteDelay) == 0x000258, "Member 'UGhostStalkedComponent::_stalkPointsDepleteDelay' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _killer) == 0x000280, "Member 'UGhostStalkedComponent::_killer' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _stalkedComponent) == 0x000288, "Member 'UGhostStalkedComponent::_stalkedComponent' has a wrong offset!");

// Class TheGhostface.GhostStalkPowerComponent
// 0x0158 (0x0210 - 0x00B8)
class UGhostStalkPowerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x30];                                      // 0x00B8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UStalkerComponent*                      _stalkerComponent;                                 // 0x00E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   _ghostStalkedComponentClassPtr;                    // 0x00F0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _crouchAttackRequiredTimeSeconds;                  // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_124[0xC];                                      // 0x0124(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _debugMode;                                        // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _maxStalkPointsPerSurvivor;                        // 0x0138(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _survivorMaximumSightDistance;                     // 0x0160(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E0[0x30];                                     // 0x01E0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnStalkModeChanged(bool isInStalkMode);
	void OnIsCrouchedChanged(bool isCrouched);
	void OnLeanStateChanged(ELeanState leanState);

	void RefreshSurvivorMaximumSightDistance() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GhostStalkPowerComponent">();
	}
	static class UGhostStalkPowerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGhostStalkPowerComponent>();
	}
};
static_assert(alignof(UGhostStalkPowerComponent) == 0x000008, "Wrong alignment on UGhostStalkPowerComponent");
static_assert(sizeof(UGhostStalkPowerComponent) == 0x000210, "Wrong size on UGhostStalkPowerComponent");
static_assert(offsetof(UGhostStalkPowerComponent, _stalkerComponent) == 0x0000E8, "Member 'UGhostStalkPowerComponent::_stalkerComponent' has a wrong offset!");
static_assert(offsetof(UGhostStalkPowerComponent, _ghostStalkedComponentClassPtr) == 0x0000F0, "Member 'UGhostStalkPowerComponent::_ghostStalkedComponentClassPtr' has a wrong offset!");
static_assert(offsetof(UGhostStalkPowerComponent, _crouchAttackRequiredTimeSeconds) == 0x000120, "Member 'UGhostStalkPowerComponent::_crouchAttackRequiredTimeSeconds' has a wrong offset!");
static_assert(offsetof(UGhostStalkPowerComponent, _debugMode) == 0x000130, "Member 'UGhostStalkPowerComponent::_debugMode' has a wrong offset!");
static_assert(offsetof(UGhostStalkPowerComponent, _maxStalkPointsPerSurvivor) == 0x000138, "Member 'UGhostStalkPowerComponent::_maxStalkPointsPerSurvivor' has a wrong offset!");
static_assert(offsetof(UGhostStalkPowerComponent, _survivorMaximumSightDistance) == 0x000160, "Member 'UGhostStalkPowerComponent::_survivorMaximumSightDistance' has a wrong offset!");

// Class TheGhostface.GhostStealthComponent
// 0x02B0 (0x0368 - 0x00B8)
class UGhostStealthComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ADBDPlayer* target)> OnSuccessfulAttackInStealth;            // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EGhostStealthState stealthState)> OnStealthStateChanged;           // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool isStealth)> OnIsStealthChanged;                               // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ADBDPlayer* spotter, bool isBeingSpot)> OnIsBeingSpotChanged; // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ADBDPlayer* player)> Local_OnStealthCancelledByPlayer;       // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EGhostStealthState                            _stealthState;                                     // 0x0110(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_111[0x4F];                                     // 0x0111(0x004F)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimerObject*                           _cooldownTimer;                                    // 0x0160(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class ACharacter*, TWeakObjectPtr<class UScreenIndicatorWorldMarkerComponent>> _markers;    // 0x0168(0x0050)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _cooldownDuration;                                 // 0x01B8(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FNonTunableStat                        _keepStealthOnAttackMiss;                          // 0x0238(0x0060)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _markerMinVisibleDistance;                         // 0x0298(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _markerLifetime;                                   // 0x02C0(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _stealthTerrorRadius;                              // 0x02E8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _markerMaxAngleOffset;                             // 0x0310(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _useKillerInstinctWhenSpotted;                     // 0x0314(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USightRevealableComponent*              _sightRevealableComponent;                         // 0x0318(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStalkerComponent*                      _stalkerComponent;                                 // 0x0320(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_328[0x40];                                     // 0x0328(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_ResetGhostStealth();
	void Authority_TryActivateStealth();
	void Client_SpawnMarkerOnCharacter(class ACharacter* revealer);
	void DBD_ResetGhostStealth();
	void Multicast_BroadcastOnSuccessfulAttackInStealth(class ADBDPlayer* target);
	void Multicast_OnIsBeingSpottedChanged(class ADBDPlayer* spotter, bool isBeingSpotted, bool onlyUpdateSurvivor);
	void Multicast_OnPlayerSpottedKiller(class ADBDPlayer* spotter);
	void OnRep_StealthState(EGhostStealthState previousState);

	float GetStealthChargePercent() const;
	EGhostStealthState GetStealthState() const;
	bool IsStealth() const;
	bool IsStealthReadyToActivate() const;
	void SetRedStainVisibility(const bool visible) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GhostStealthComponent">();
	}
	static class UGhostStealthComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGhostStealthComponent>();
	}
};
static_assert(alignof(UGhostStealthComponent) == 0x000008, "Wrong alignment on UGhostStealthComponent");
static_assert(sizeof(UGhostStealthComponent) == 0x000368, "Wrong size on UGhostStealthComponent");
static_assert(offsetof(UGhostStealthComponent, OnSuccessfulAttackInStealth) == 0x0000C0, "Member 'UGhostStealthComponent::OnSuccessfulAttackInStealth' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, OnStealthStateChanged) == 0x0000D0, "Member 'UGhostStealthComponent::OnStealthStateChanged' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, OnIsStealthChanged) == 0x0000E0, "Member 'UGhostStealthComponent::OnIsStealthChanged' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, OnIsBeingSpotChanged) == 0x0000F0, "Member 'UGhostStealthComponent::OnIsBeingSpotChanged' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, Local_OnStealthCancelledByPlayer) == 0x000100, "Member 'UGhostStealthComponent::Local_OnStealthCancelledByPlayer' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _stealthState) == 0x000110, "Member 'UGhostStealthComponent::_stealthState' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _cooldownTimer) == 0x000160, "Member 'UGhostStealthComponent::_cooldownTimer' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _markers) == 0x000168, "Member 'UGhostStealthComponent::_markers' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _cooldownDuration) == 0x0001B8, "Member 'UGhostStealthComponent::_cooldownDuration' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _keepStealthOnAttackMiss) == 0x000238, "Member 'UGhostStealthComponent::_keepStealthOnAttackMiss' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _markerMinVisibleDistance) == 0x000298, "Member 'UGhostStealthComponent::_markerMinVisibleDistance' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _markerLifetime) == 0x0002C0, "Member 'UGhostStealthComponent::_markerLifetime' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _stealthTerrorRadius) == 0x0002E8, "Member 'UGhostStealthComponent::_stealthTerrorRadius' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _markerMaxAngleOffset) == 0x000310, "Member 'UGhostStealthComponent::_markerMaxAngleOffset' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _useKillerInstinctWhenSpotted) == 0x000314, "Member 'UGhostStealthComponent::_useKillerInstinctWhenSpotted' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _sightRevealableComponent) == 0x000318, "Member 'UGhostStealthComponent::_sightRevealableComponent' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _stalkerComponent) == 0x000320, "Member 'UGhostStealthComponent::_stalkerComponent' has a wrong offset!");

// Class TheGhostface.TheGhostUtilities
// 0x0000 (0x0030 - 0x0030)
class UTheGhostUtilities final : public UBlueprintFunctionLibrary
{
public:
	static bool IsKillerStealth(class AActor* killer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TheGhostUtilities">();
	}
	static class UTheGhostUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTheGhostUtilities>();
	}
};
static_assert(alignof(UTheGhostUtilities) == 0x000008, "Wrong alignment on UTheGhostUtilities");
static_assert(sizeof(UTheGhostUtilities) == 0x000030, "Wrong size on UTheGhostUtilities");

}

