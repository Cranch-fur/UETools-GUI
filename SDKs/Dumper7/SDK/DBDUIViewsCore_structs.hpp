#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIViewsCore

#include "Basic.hpp"

#include "DBDUIViewInterfaces_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "DataTableUtilities_structs.hpp"


namespace SDK
{

// Enum DBDUIViewsCore.EButtonWidgetVisibility
// NumValues: 0x0004
enum class EButtonWidgetVisibility : uint8
{
	Visible                                  = 0,
	Collapsed                                = 1,
	Hidden                                   = 2,
	EButtonWidgetVisibility_MAX              = 3,
};

// Enum DBDUIViewsCore.EAnalogCursorStickiness
// NumValues: 0x0007
enum class EAnalogCursorStickiness : uint8
{
	None                                     = 0,
	ButtonSmall                              = 1,
	ButtonMedium                             = 2,
	ButtonLarge                              = 3,
	Bloodweb                                 = 4,
	Slow                                     = 5,
	EAnalogCursorStickiness_MAX              = 6,
};

// Enum DBDUIViewsCore.EChallengeReminderUpdateType
// NumValues: 0x0003
enum class EChallengeReminderUpdateType : uint8
{
	Reveal                                   = 0,
	Swap                                     = 1,
	EChallengeReminderUpdateType_MAX         = 2,
};

// Enum DBDUIViewsCore.EEditorMode
// NumValues: 0x0003
enum class EEditorMode : uint8
{
	Node                                     = 0,
	Path                                     = 1,
	EEditorMode_MAX                          = 2,
};

// Enum DBDUIViewsCore.ENodeStatusChange
// NumValues: 0x0007
enum class ENodeStatusChange : uint8
{
	NodeQuestActivate                        = 0,
	NodeQuestPaused                          = 1,
	NodeQuestUnlock                          = 2,
	NodeRewardAvailableForClaim              = 3,
	NodeQuestClaimed                         = 4,
	None                                     = 5,
	ENodeStatusChange_MAX                    = 6,
};

// Enum DBDUIViewsCore.EBackgroundProgressBarState
// NumValues: 0x0006
enum class EBackgroundProgressBarState : uint8
{
	Empty                                    = 0,
	Quarter                                  = 1,
	Half                                     = 2,
	ThreeQuarters                            = 3,
	Full                                     = 4,
	EBackgroundProgressBarState_MAX          = 5,
};

// Enum DBDUIViewsCore.EInputSwitcherDisplayRule
// NumValues: 0x0005
enum class EInputSwitcherDisplayRule : uint8
{
	Undefined                                = 0,
	OnlyGamepad                              = 1,
	OnlyKeyboard                             = 2,
	Always                                   = 3,
	EInputSwitcherDisplayRule_MAX            = 4,
};

// Enum DBDUIViewsCore.EPlayerStatusBloodSplatterType
// NumValues: 0x0004
enum class EPlayerStatusBloodSplatterType : uint8
{
	None                                     = 0,
	Top                                      = 1,
	Bottom                                   = 2,
	EPlayerStatusBloodSplatterType_MAX       = 3,
};

// Enum DBDUIViewsCore.EShowScrollDisplayPrompt
// NumValues: 0x0004
enum class EShowScrollDisplayPrompt : uint8
{
	DontShow                                 = 0,
	AlwaysShow                               = 1,
	ShowOnMouseOver                          = 2,
	EShowScrollDisplayPrompt_MAX             = 3,
};

// Enum DBDUIViewsCore.ETooltipVerticalAlignment
// NumValues: 0x0004
enum class ETooltipVerticalAlignment : uint8
{
	Default                                  = 0,
	Top                                      = 1,
	Bottom                                   = 2,
	ETooltipVerticalAlignment_MAX            = 3,
};

// Enum DBDUIViewsCore.ETooltipHorizontalAlignment
// NumValues: 0x0004
enum class ETooltipHorizontalAlignment : uint8
{
	Default                                  = 0,
	Left                                     = 1,
	Right                                    = 2,
	ETooltipHorizontalAlignment_MAX          = 3,
};

// Enum DBDUIViewsCore.EDragZoneAxis
// NumValues: 0x0003
enum class EDragZoneAxis : uint8
{
	Horizontal                               = 0,
	Vertical                                 = 1,
	EDragZoneAxis_MAX                        = 2,
};

// Enum DBDUIViewsCore.ETooltipType
// NumValues: 0x000A
enum class ETooltipType : uint8
{
	None                                     = 0,
	ArchiveCompendium                        = 1,
	ArchiveNode                              = 2,
	ArchiveRewardNode                        = 3,
	Character                                = 4,
	CurrencyProgression                      = 5,
	Customization                            = 6,
	Label                                    = 7,
	Loadout                                  = 8,
	ETooltipType_MAX                         = 9,
};

// ScriptStruct DBDUIViewsCore.LinePair
// 0x0010 (0x0010 - 0x0000)
struct FLinePair final
{
public:
	struct FVector2D                              start;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              end;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLinePair) == 0x000004, "Wrong alignment on FLinePair");
static_assert(sizeof(FLinePair) == 0x000010, "Wrong size on FLinePair");
static_assert(offsetof(FLinePair, start) == 0x000000, "Member 'FLinePair::start' has a wrong offset!");
static_assert(offsetof(FLinePair, end) == 0x000008, "Member 'FLinePair::end' has a wrong offset!");

// ScriptStruct DBDUIViewsCore.OnboardingTutorialButtonViewData
// 0x0078 (0x0078 - 0x0000)
struct FOnboardingTutorialButtonViewData final
{
public:
	EOnboardingStepStatus                         StepStatus;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StepId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TutorialId;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRewardWrapperViewData>         RewardsData;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EOnboardingTutorialButtonStyle                ButtonStyle;                                       // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOnboardingTutorialButtonViewData) == 0x000008, "Wrong alignment on FOnboardingTutorialButtonViewData");
static_assert(sizeof(FOnboardingTutorialButtonViewData) == 0x000078, "Wrong size on FOnboardingTutorialButtonViewData");
static_assert(offsetof(FOnboardingTutorialButtonViewData, StepStatus) == 0x000000, "Member 'FOnboardingTutorialButtonViewData::StepStatus' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialButtonViewData, StepId) == 0x000008, "Member 'FOnboardingTutorialButtonViewData::StepId' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialButtonViewData, TutorialId) == 0x000018, "Member 'FOnboardingTutorialButtonViewData::TutorialId' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialButtonViewData, Title) == 0x000028, "Member 'FOnboardingTutorialButtonViewData::Title' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialButtonViewData, Description) == 0x000040, "Member 'FOnboardingTutorialButtonViewData::Description' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialButtonViewData, Icon) == 0x000058, "Member 'FOnboardingTutorialButtonViewData::Icon' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialButtonViewData, RewardsData) == 0x000060, "Member 'FOnboardingTutorialButtonViewData::RewardsData' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialButtonViewData, ButtonStyle) == 0x000070, "Member 'FOnboardingTutorialButtonViewData::ButtonStyle' has a wrong offset!");

// ScriptStruct DBDUIViewsCore.PendingStepData
// 0x0010 (0x0010 - 0x0000)
struct FPendingStepData final
{
public:
	TArray<struct FOnboardingTutorialButtonViewData> updatedButtonViewData;                          // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPendingStepData) == 0x000008, "Wrong alignment on FPendingStepData");
static_assert(sizeof(FPendingStepData) == 0x000010, "Wrong size on FPendingStepData");
static_assert(offsetof(FPendingStepData, updatedButtonViewData) == 0x000000, "Member 'FPendingStepData::updatedButtonViewData' has a wrong offset!");

// ScriptStruct DBDUIViewsCore.PlayerStatusAssets
// 0x0018 (0x0018 - 0x0000)
struct FPlayerStatusAssets final
{
public:
	EPlayerStatusBloodSplatterType                BloodSplatterType;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             BloodTexture;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerStatusAssets) == 0x000008, "Wrong alignment on FPlayerStatusAssets");
static_assert(sizeof(FPlayerStatusAssets) == 0x000018, "Wrong size on FPlayerStatusAssets");
static_assert(offsetof(FPlayerStatusAssets, BloodSplatterType) == 0x000000, "Member 'FPlayerStatusAssets::BloodSplatterType' has a wrong offset!");
static_assert(offsetof(FPlayerStatusAssets, BloodTexture) == 0x000008, "Member 'FPlayerStatusAssets::BloodTexture' has a wrong offset!");
static_assert(offsetof(FPlayerStatusAssets, IconTexture) == 0x000010, "Member 'FPlayerStatusAssets::IconTexture' has a wrong offset!");

// ScriptStruct DBDUIViewsCore.HtmlRichTextTag
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FHtmlRichTextTag final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHtmlRichTextTag) == 0x000008, "Wrong alignment on FHtmlRichTextTag");
static_assert(sizeof(FHtmlRichTextTag) == 0x000050, "Wrong size on FHtmlRichTextTag");

// ScriptStruct DBDUIViewsCore.HtmlToRichTagConvertRow
// 0x0020 (0x0028 - 0x0008)
struct FHtmlToRichTagConvertRow final : public FTableRowBase
{
public:
	class FString                                 HtmlTag;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RichTextTag;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHtmlToRichTagConvertRow) == 0x000008, "Wrong alignment on FHtmlToRichTagConvertRow");
static_assert(sizeof(FHtmlToRichTagConvertRow) == 0x000028, "Wrong size on FHtmlToRichTagConvertRow");
static_assert(offsetof(FHtmlToRichTagConvertRow, HtmlTag) == 0x000008, "Member 'FHtmlToRichTagConvertRow::HtmlTag' has a wrong offset!");
static_assert(offsetof(FHtmlToRichTagConvertRow, RichTextTag) == 0x000018, "Member 'FHtmlToRichTagConvertRow::RichTextTag' has a wrong offset!");

// ScriptStruct DBDUIViewsCore.InputPromptDataRow
// 0x0048 (0x0050 - 0x0008)
struct FInputPromptDataRow final : public FTableRowBase
{
public:
	class FText                                   InputLabel;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FKey                                   InputKey;                                          // 0x0020(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PromptTexture;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowLabel;                                         // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputPromptDataRow) == 0x000008, "Wrong alignment on FInputPromptDataRow");
static_assert(sizeof(FInputPromptDataRow) == 0x000050, "Wrong size on FInputPromptDataRow");
static_assert(offsetof(FInputPromptDataRow, InputLabel) == 0x000008, "Member 'FInputPromptDataRow::InputLabel' has a wrong offset!");
static_assert(offsetof(FInputPromptDataRow, InputKey) == 0x000020, "Member 'FInputPromptDataRow::InputKey' has a wrong offset!");
static_assert(offsetof(FInputPromptDataRow, PromptTexture) == 0x000040, "Member 'FInputPromptDataRow::PromptTexture' has a wrong offset!");
static_assert(offsetof(FInputPromptDataRow, ShowLabel) == 0x000048, "Member 'FInputPromptDataRow::ShowLabel' has a wrong offset!");

// ScriptStruct DBDUIViewsCore.TextBlockOverrideProperties
// 0x0048 (0x0048 - 0x0000)
struct FTextBlockOverrideProperties final
{
public:
	bool                                          UseColor;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            Color;                                             // 0x0008(0x0028)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	bool                                          UseOpacity;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Opacity;                                           // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSize;                                           // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Size;                                              // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTextBlockOverrideProperties) == 0x000008, "Wrong alignment on FTextBlockOverrideProperties");
static_assert(sizeof(FTextBlockOverrideProperties) == 0x000048, "Wrong size on FTextBlockOverrideProperties");
static_assert(offsetof(FTextBlockOverrideProperties, UseColor) == 0x000000, "Member 'FTextBlockOverrideProperties::UseColor' has a wrong offset!");
static_assert(offsetof(FTextBlockOverrideProperties, Color) == 0x000008, "Member 'FTextBlockOverrideProperties::Color' has a wrong offset!");
static_assert(offsetof(FTextBlockOverrideProperties, UseOpacity) == 0x000030, "Member 'FTextBlockOverrideProperties::UseOpacity' has a wrong offset!");
static_assert(offsetof(FTextBlockOverrideProperties, Opacity) == 0x000034, "Member 'FTextBlockOverrideProperties::Opacity' has a wrong offset!");
static_assert(offsetof(FTextBlockOverrideProperties, UseSize) == 0x000038, "Member 'FTextBlockOverrideProperties::UseSize' has a wrong offset!");
static_assert(offsetof(FTextBlockOverrideProperties, Size) == 0x00003C, "Member 'FTextBlockOverrideProperties::Size' has a wrong offset!");

// ScriptStruct DBDUIViewsCore.TooltipWidgetData
// 0x0010 (0x0018 - 0x0008)
struct FTooltipWidgetData final : public FDBDTableRowBase
{
public:
	ETooltipType                                  TooltipType;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTooltipWidgetData) == 0x000008, "Wrong alignment on FTooltipWidgetData");
static_assert(sizeof(FTooltipWidgetData) == 0x000018, "Wrong size on FTooltipWidgetData");
static_assert(offsetof(FTooltipWidgetData, TooltipType) == 0x000008, "Member 'FTooltipWidgetData::TooltipType' has a wrong offset!");
static_assert(offsetof(FTooltipWidgetData, WidgetClass) == 0x000010, "Member 'FTooltipWidgetData::WidgetClass' has a wrong offset!");

}

