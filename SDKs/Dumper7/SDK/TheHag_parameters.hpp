#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheHag

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function TheHag.HagScoreComponent.Authority_OnActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct HagScoreComponent_Authority_OnActorEndPlay final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                endPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HagScoreComponent_Authority_OnActorEndPlay) == 0x000008, "Wrong alignment on HagScoreComponent_Authority_OnActorEndPlay");
static_assert(sizeof(HagScoreComponent_Authority_OnActorEndPlay) == 0x000010, "Wrong size on HagScoreComponent_Authority_OnActorEndPlay");
static_assert(offsetof(HagScoreComponent_Authority_OnActorEndPlay, actor) == 0x000000, "Member 'HagScoreComponent_Authority_OnActorEndPlay::actor' has a wrong offset!");
static_assert(offsetof(HagScoreComponent_Authority_OnActorEndPlay, endPlayReason) == 0x000008, "Member 'HagScoreComponent_Authority_OnActorEndPlay::endPlayReason' has a wrong offset!");

// Function TheHag.PhantomTrap.BP_OnTrapDestroyed
// 0x0008 (0x0008 - 0x0000)
struct PhantomTrap_BP_OnTrapDestroyed final
{
public:
	class ACamperPlayer*                          playerDestroyingTrap;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhantomTrap_BP_OnTrapDestroyed) == 0x000008, "Wrong alignment on PhantomTrap_BP_OnTrapDestroyed");
static_assert(sizeof(PhantomTrap_BP_OnTrapDestroyed) == 0x000008, "Wrong size on PhantomTrap_BP_OnTrapDestroyed");
static_assert(offsetof(PhantomTrap_BP_OnTrapDestroyed, playerDestroyingTrap) == 0x000000, "Member 'PhantomTrap_BP_OnTrapDestroyed::playerDestroyingTrap' has a wrong offset!");

// Function TheHag.PhantomTrap.CanActivateTrap
// 0x0010 (0x0010 - 0x0000)
struct PhantomTrap_CanActivateTrap final
{
public:
	class ACamperPlayer*                          camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isInUse;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhantomTrap_CanActivateTrap) == 0x000008, "Wrong alignment on PhantomTrap_CanActivateTrap");
static_assert(sizeof(PhantomTrap_CanActivateTrap) == 0x000010, "Wrong size on PhantomTrap_CanActivateTrap");
static_assert(offsetof(PhantomTrap_CanActivateTrap, camper) == 0x000000, "Member 'PhantomTrap_CanActivateTrap::camper' has a wrong offset!");
static_assert(offsetof(PhantomTrap_CanActivateTrap, isInUse) == 0x000008, "Member 'PhantomTrap_CanActivateTrap::isInUse' has a wrong offset!");
static_assert(offsetof(PhantomTrap_CanActivateTrap, ReturnValue) == 0x000009, "Member 'PhantomTrap_CanActivateTrap::ReturnValue' has a wrong offset!");

// Function TheHag.PhantomTrap.InitializeTerrorRadiusEmitter
// 0x0008 (0x0008 - 0x0000)
struct PhantomTrap_InitializeTerrorRadiusEmitter final
{
public:
	class ASlasherPlayer*                         OwningSlasher;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhantomTrap_InitializeTerrorRadiusEmitter) == 0x000008, "Wrong alignment on PhantomTrap_InitializeTerrorRadiusEmitter");
static_assert(sizeof(PhantomTrap_InitializeTerrorRadiusEmitter) == 0x000008, "Wrong size on PhantomTrap_InitializeTerrorRadiusEmitter");
static_assert(offsetof(PhantomTrap_InitializeTerrorRadiusEmitter, OwningSlasher) == 0x000000, "Member 'PhantomTrap_InitializeTerrorRadiusEmitter::OwningSlasher' has a wrong offset!");

// Function TheHag.PhantomTrap.Multicast_DestroyTrap
// 0x0008 (0x0008 - 0x0000)
struct PhantomTrap_Multicast_DestroyTrap final
{
public:
	class ACamperPlayer*                          playerDestroyingTrap;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhantomTrap_Multicast_DestroyTrap) == 0x000008, "Wrong alignment on PhantomTrap_Multicast_DestroyTrap");
static_assert(sizeof(PhantomTrap_Multicast_DestroyTrap) == 0x000008, "Wrong size on PhantomTrap_Multicast_DestroyTrap");
static_assert(offsetof(PhantomTrap_Multicast_DestroyTrap, playerDestroyingTrap) == 0x000000, "Member 'PhantomTrap_Multicast_DestroyTrap::playerDestroyingTrap' has a wrong offset!");

// Function TheHag.PhantomTrap.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct PhantomTrap_GetMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhantomTrap_GetMesh) == 0x000008, "Wrong alignment on PhantomTrap_GetMesh");
static_assert(sizeof(PhantomTrap_GetMesh) == 0x000008, "Wrong size on PhantomTrap_GetMesh");
static_assert(offsetof(PhantomTrap_GetMesh, ReturnValue) == 0x000000, "Member 'PhantomTrap_GetMesh::ReturnValue' has a wrong offset!");

// Function TheHag.PhantomTrap.IsTrapSet
// 0x0001 (0x0001 - 0x0000)
struct PhantomTrap_IsTrapSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PhantomTrap_IsTrapSet) == 0x000001, "Wrong alignment on PhantomTrap_IsTrapSet");
static_assert(sizeof(PhantomTrap_IsTrapSet) == 0x000001, "Wrong size on PhantomTrap_IsTrapSet");
static_assert(offsetof(PhantomTrap_IsTrapSet, ReturnValue) == 0x000000, "Member 'PhantomTrap_IsTrapSet::ReturnValue' has a wrong offset!");

// Function TheHag.TeleportToPhantomTrap.BP_OnTeleport
// 0x0010 (0x0010 - 0x0000)
struct TeleportToPhantomTrap_BP_OnTeleport final
{
public:
	class ASlasherPlayer*                         slasher;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APhantomTrap*                           trap;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeleportToPhantomTrap_BP_OnTeleport) == 0x000008, "Wrong alignment on TeleportToPhantomTrap_BP_OnTeleport");
static_assert(sizeof(TeleportToPhantomTrap_BP_OnTeleport) == 0x000010, "Wrong size on TeleportToPhantomTrap_BP_OnTeleport");
static_assert(offsetof(TeleportToPhantomTrap_BP_OnTeleport, slasher) == 0x000000, "Member 'TeleportToPhantomTrap_BP_OnTeleport::slasher' has a wrong offset!");
static_assert(offsetof(TeleportToPhantomTrap_BP_OnTeleport, trap) == 0x000008, "Member 'TeleportToPhantomTrap_BP_OnTeleport::trap' has a wrong offset!");

// Function TheHag.TeleportToPhantomTrap.Cosmetic_OnInteractionFinished
// 0x0010 (0x0010 - 0x0000)
struct TeleportToPhantomTrap_Cosmetic_OnInteractionFinished final
{
public:
	class ADBDPlayer*                             slasher;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hasInteractionStarted;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeleportToPhantomTrap_Cosmetic_OnInteractionFinished) == 0x000008, "Wrong alignment on TeleportToPhantomTrap_Cosmetic_OnInteractionFinished");
static_assert(sizeof(TeleportToPhantomTrap_Cosmetic_OnInteractionFinished) == 0x000010, "Wrong size on TeleportToPhantomTrap_Cosmetic_OnInteractionFinished");
static_assert(offsetof(TeleportToPhantomTrap_Cosmetic_OnInteractionFinished, slasher) == 0x000000, "Member 'TeleportToPhantomTrap_Cosmetic_OnInteractionFinished::slasher' has a wrong offset!");
static_assert(offsetof(TeleportToPhantomTrap_Cosmetic_OnInteractionFinished, hasInteractionStarted) == 0x000008, "Member 'TeleportToPhantomTrap_Cosmetic_OnInteractionFinished::hasInteractionStarted' has a wrong offset!");

// Function TheHag.TeleportToPhantomTrap.Cosmetic_OnTeleport
// 0x0010 (0x0010 - 0x0000)
struct TeleportToPhantomTrap_Cosmetic_OnTeleport final
{
public:
	class ASlasherPlayer*                         slasher;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APhantomTrap*                           trap;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeleportToPhantomTrap_Cosmetic_OnTeleport) == 0x000008, "Wrong alignment on TeleportToPhantomTrap_Cosmetic_OnTeleport");
static_assert(sizeof(TeleportToPhantomTrap_Cosmetic_OnTeleport) == 0x000010, "Wrong size on TeleportToPhantomTrap_Cosmetic_OnTeleport");
static_assert(offsetof(TeleportToPhantomTrap_Cosmetic_OnTeleport, slasher) == 0x000000, "Member 'TeleportToPhantomTrap_Cosmetic_OnTeleport::slasher' has a wrong offset!");
static_assert(offsetof(TeleportToPhantomTrap_Cosmetic_OnTeleport, trap) == 0x000008, "Member 'TeleportToPhantomTrap_Cosmetic_OnTeleport::trap' has a wrong offset!");

// Function TheHag.TeleportToPhantomTrap.GetPhantomTrap
// 0x0008 (0x0008 - 0x0000)
struct TeleportToPhantomTrap_GetPhantomTrap final
{
public:
	class APhantomTrap*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TeleportToPhantomTrap_GetPhantomTrap) == 0x000008, "Wrong alignment on TeleportToPhantomTrap_GetPhantomTrap");
static_assert(sizeof(TeleportToPhantomTrap_GetPhantomTrap) == 0x000008, "Wrong size on TeleportToPhantomTrap_GetPhantomTrap");
static_assert(offsetof(TeleportToPhantomTrap_GetPhantomTrap, ReturnValue) == 0x000000, "Member 'TeleportToPhantomTrap_GetPhantomTrap::ReturnValue' has a wrong offset!");

// Function TheHag.TeleportToPhantomTrap.GetTeleportMaxDistance
// 0x0010 (0x0010 - 0x0000)
struct TeleportToPhantomTrap_GetTeleportMaxDistance final
{
public:
	class ASlasherPlayer*                         slasher;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TeleportToPhantomTrap_GetTeleportMaxDistance) == 0x000008, "Wrong alignment on TeleportToPhantomTrap_GetTeleportMaxDistance");
static_assert(sizeof(TeleportToPhantomTrap_GetTeleportMaxDistance) == 0x000010, "Wrong size on TeleportToPhantomTrap_GetTeleportMaxDistance");
static_assert(offsetof(TeleportToPhantomTrap_GetTeleportMaxDistance, slasher) == 0x000000, "Member 'TeleportToPhantomTrap_GetTeleportMaxDistance::slasher' has a wrong offset!");
static_assert(offsetof(TeleportToPhantomTrap_GetTeleportMaxDistance, ReturnValue) == 0x000008, "Member 'TeleportToPhantomTrap_GetTeleportMaxDistance::ReturnValue' has a wrong offset!");

// Function TheHag.WipeAwayPhantomTrapInteraction.CancelInteraction
// 0x0008 (0x0008 - 0x0000)
struct WipeAwayPhantomTrapInteraction_CancelInteraction final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WipeAwayPhantomTrapInteraction_CancelInteraction) == 0x000008, "Wrong alignment on WipeAwayPhantomTrapInteraction_CancelInteraction");
static_assert(sizeof(WipeAwayPhantomTrapInteraction_CancelInteraction) == 0x000008, "Wrong size on WipeAwayPhantomTrapInteraction_CancelInteraction");
static_assert(offsetof(WipeAwayPhantomTrapInteraction_CancelInteraction, player) == 0x000000, "Member 'WipeAwayPhantomTrapInteraction_CancelInteraction::player' has a wrong offset!");

}

