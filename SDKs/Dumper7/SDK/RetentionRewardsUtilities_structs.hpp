#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RetentionRewardsUtilities

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "RewardUtilities_structs.hpp"


namespace SDK
{

// Enum RetentionRewardsUtilities.EClaimType
// NumValues: 0x0007
enum class EClaimType : uint8
{
	Minute                                   = 0,
	Hour                                     = 1,
	Day                                      = 2,
	Week                                     = 3,
	Month                                    = 4,
	Year                                     = 5,
	EClaimType_MAX                           = 6,
};

// Enum RetentionRewardsUtilities.EClaimResponseCodes
// NumValues: 0x0005
enum class EClaimResponseCodes : uint8
{
	Claimed                                  = 0,
	CalendarNotFound                         = 1,
	RewardNotAvailable                       = 2,
	RewardNotSupported                       = 3,
	EClaimResponseCodes_MAX                  = 4,
};

// ScriptStruct RetentionRewardsUtilities.RetentionReward
// 0x0068 (0x0068 - 0x0000)
struct FRetentionReward final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Amount;                                            // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardItemType                               RewardType;                                        // 0x0014(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FString>              GameSpecificData;                                  // 0x0018(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRetentionReward) == 0x000008, "Wrong alignment on FRetentionReward");
static_assert(sizeof(FRetentionReward) == 0x000068, "Wrong size on FRetentionReward");
static_assert(offsetof(FRetentionReward, ItemId) == 0x000000, "Member 'FRetentionReward::ItemId' has a wrong offset!");
static_assert(offsetof(FRetentionReward, Amount) == 0x000010, "Member 'FRetentionReward::Amount' has a wrong offset!");
static_assert(offsetof(FRetentionReward, RewardType) == 0x000014, "Member 'FRetentionReward::RewardType' has a wrong offset!");
static_assert(offsetof(FRetentionReward, GameSpecificData) == 0x000018, "Member 'FRetentionReward::GameSpecificData' has a wrong offset!");

// ScriptStruct RetentionRewardsUtilities.RetentionCalendar
// 0x0038 (0x0038 - 0x0000)
struct FRetentionCalendar final
{
public:
	class FString                                 Id;                                                // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              StartTime;                                         // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClaimType                                    ClaimType;                                         // 0x0020(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRetentionReward>               Rewards;                                           // 0x0028(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRetentionCalendar) == 0x000008, "Wrong alignment on FRetentionCalendar");
static_assert(sizeof(FRetentionCalendar) == 0x000038, "Wrong size on FRetentionCalendar");
static_assert(offsetof(FRetentionCalendar, Id) == 0x000000, "Member 'FRetentionCalendar::Id' has a wrong offset!");
static_assert(offsetof(FRetentionCalendar, StartTime) == 0x000010, "Member 'FRetentionCalendar::StartTime' has a wrong offset!");
static_assert(offsetof(FRetentionCalendar, EndTime) == 0x000018, "Member 'FRetentionCalendar::EndTime' has a wrong offset!");
static_assert(offsetof(FRetentionCalendar, ClaimType) == 0x000020, "Member 'FRetentionCalendar::ClaimType' has a wrong offset!");
static_assert(offsetof(FRetentionCalendar, Rewards) == 0x000028, "Member 'FRetentionCalendar::Rewards' has a wrong offset!");

// ScriptStruct RetentionRewardsUtilities.CampaignStatus
// 0x0018 (0x0018 - 0x0000)
struct FCampaignStatus final
{
public:
	bool                                          IsValid;                                           // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartDate;                                         // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCampaignStatus) == 0x000008, "Wrong alignment on FCampaignStatus");
static_assert(sizeof(FCampaignStatus) == 0x000018, "Wrong size on FCampaignStatus");
static_assert(offsetof(FCampaignStatus, IsValid) == 0x000000, "Member 'FCampaignStatus::IsValid' has a wrong offset!");
static_assert(offsetof(FCampaignStatus, StartDate) == 0x000008, "Member 'FCampaignStatus::StartDate' has a wrong offset!");
static_assert(offsetof(FCampaignStatus, EndDate) == 0x000010, "Member 'FCampaignStatus::EndDate' has a wrong offset!");

// ScriptStruct RetentionRewardsUtilities.ClaimStatus
// 0x0010 (0x0010 - 0x0000)
struct FClaimStatus final
{
public:
	bool                                          isSet;                                             // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastClaimedIndex;                                  // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              NextClaimTime;                                     // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClaimStatus) == 0x000008, "Wrong alignment on FClaimStatus");
static_assert(sizeof(FClaimStatus) == 0x000010, "Wrong size on FClaimStatus");
static_assert(offsetof(FClaimStatus, isSet) == 0x000000, "Member 'FClaimStatus::isSet' has a wrong offset!");
static_assert(offsetof(FClaimStatus, LastClaimedIndex) == 0x000004, "Member 'FClaimStatus::LastClaimedIndex' has a wrong offset!");
static_assert(offsetof(FClaimStatus, NextClaimTime) == 0x000008, "Member 'FClaimStatus::NextClaimTime' has a wrong offset!");

}

