#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheNurse

#include "Basic.hpp"

#include "TheNurse_structs.hpp"
#include "Engine_structs.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK::Params
{

// Function TheNurse.AnxiousGaspAddon.OnDetectorOverlapBegin
// 0x00B0 (0x00B0 - 0x0000)
struct AnxiousGaspAddon_OnDetectorOverlapBegin final
{
public:
	class UPrimitiveComponent*                    overlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnxiousGaspAddon_OnDetectorOverlapBegin) == 0x000008, "Wrong alignment on AnxiousGaspAddon_OnDetectorOverlapBegin");
static_assert(sizeof(AnxiousGaspAddon_OnDetectorOverlapBegin) == 0x0000B0, "Wrong size on AnxiousGaspAddon_OnDetectorOverlapBegin");
static_assert(offsetof(AnxiousGaspAddon_OnDetectorOverlapBegin, overlappedComponent) == 0x000000, "Member 'AnxiousGaspAddon_OnDetectorOverlapBegin::overlappedComponent' has a wrong offset!");
static_assert(offsetof(AnxiousGaspAddon_OnDetectorOverlapBegin, otherActor) == 0x000008, "Member 'AnxiousGaspAddon_OnDetectorOverlapBegin::otherActor' has a wrong offset!");
static_assert(offsetof(AnxiousGaspAddon_OnDetectorOverlapBegin, otherComp) == 0x000010, "Member 'AnxiousGaspAddon_OnDetectorOverlapBegin::otherComp' has a wrong offset!");
static_assert(offsetof(AnxiousGaspAddon_OnDetectorOverlapBegin, otherBodyIndex) == 0x000018, "Member 'AnxiousGaspAddon_OnDetectorOverlapBegin::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(AnxiousGaspAddon_OnDetectorOverlapBegin, bFromSweep) == 0x00001C, "Member 'AnxiousGaspAddon_OnDetectorOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(AnxiousGaspAddon_OnDetectorOverlapBegin, sweepResult) == 0x000020, "Member 'AnxiousGaspAddon_OnDetectorOverlapBegin::sweepResult' has a wrong offset!");

// Function TheNurse.AnxiousGaspAddon.PlayScream
// 0x0008 (0x0008 - 0x0000)
struct AnxiousGaspAddon_PlayScream final
{
public:
	const class ACamperPlayer*                    survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnxiousGaspAddon_PlayScream) == 0x000008, "Wrong alignment on AnxiousGaspAddon_PlayScream");
static_assert(sizeof(AnxiousGaspAddon_PlayScream) == 0x000008, "Wrong size on AnxiousGaspAddon_PlayScream");
static_assert(offsetof(AnxiousGaspAddon_PlayScream, survivor) == 0x000000, "Member 'AnxiousGaspAddon_PlayScream::survivor' has a wrong offset!");

// Function TheNurse.BalancedLanding.GetExhaustionDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct BalancedLanding_GetExhaustionDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BalancedLanding_GetExhaustionDurationAtLevel) == 0x000004, "Wrong alignment on BalancedLanding_GetExhaustionDurationAtLevel");
static_assert(sizeof(BalancedLanding_GetExhaustionDurationAtLevel) == 0x000004, "Wrong size on BalancedLanding_GetExhaustionDurationAtLevel");
static_assert(offsetof(BalancedLanding_GetExhaustionDurationAtLevel, ReturnValue) == 0x000000, "Member 'BalancedLanding_GetExhaustionDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheNurse.BalancedLanding.GetSprintDuration
// 0x0004 (0x0004 - 0x0000)
struct BalancedLanding_GetSprintDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BalancedLanding_GetSprintDuration) == 0x000004, "Wrong alignment on BalancedLanding_GetSprintDuration");
static_assert(sizeof(BalancedLanding_GetSprintDuration) == 0x000004, "Wrong size on BalancedLanding_GetSprintDuration");
static_assert(offsetof(BalancedLanding_GetSprintDuration, ReturnValue) == 0x000000, "Member 'BalancedLanding_GetSprintDuration::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPlayerComponent.Local_OnMovementModeChanged
// 0x0010 (0x0010 - 0x0000)
struct BlinkPlayerComponent_Local_OnMovementModeChanged final
{
public:
	class ACharacter*                             character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 prevMovementMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         previousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlinkPlayerComponent_Local_OnMovementModeChanged) == 0x000008, "Wrong alignment on BlinkPlayerComponent_Local_OnMovementModeChanged");
static_assert(sizeof(BlinkPlayerComponent_Local_OnMovementModeChanged) == 0x000010, "Wrong size on BlinkPlayerComponent_Local_OnMovementModeChanged");
static_assert(offsetof(BlinkPlayerComponent_Local_OnMovementModeChanged, character) == 0x000000, "Member 'BlinkPlayerComponent_Local_OnMovementModeChanged::character' has a wrong offset!");
static_assert(offsetof(BlinkPlayerComponent_Local_OnMovementModeChanged, prevMovementMode) == 0x000008, "Member 'BlinkPlayerComponent_Local_OnMovementModeChanged::prevMovementMode' has a wrong offset!");
static_assert(offsetof(BlinkPlayerComponent_Local_OnMovementModeChanged, previousCustomMode) == 0x000009, "Member 'BlinkPlayerComponent_Local_OnMovementModeChanged::previousCustomMode' has a wrong offset!");

// Function TheNurse.BlinkPlayerComponent.Multicast_StartBlink
// 0x0040 (0x0040 - 0x0000)
struct BlinkPlayerComponent_Multicast_StartBlink final
{
public:
	struct FBlinkParams                           params;                                            // 0x0000(0x0040)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPlayerComponent_Multicast_StartBlink) == 0x000010, "Wrong alignment on BlinkPlayerComponent_Multicast_StartBlink");
static_assert(sizeof(BlinkPlayerComponent_Multicast_StartBlink) == 0x000040, "Wrong size on BlinkPlayerComponent_Multicast_StartBlink");
static_assert(offsetof(BlinkPlayerComponent_Multicast_StartBlink, params) == 0x000000, "Member 'BlinkPlayerComponent_Multicast_StartBlink::params' has a wrong offset!");

// Function TheNurse.BlinkPlayerComponent.Server_StartBlink
// 0x0040 (0x0040 - 0x0000)
struct BlinkPlayerComponent_Server_StartBlink final
{
public:
	struct FBlinkParams                           params;                                            // 0x0000(0x0040)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPlayerComponent_Server_StartBlink) == 0x000010, "Wrong alignment on BlinkPlayerComponent_Server_StartBlink");
static_assert(sizeof(BlinkPlayerComponent_Server_StartBlink) == 0x000040, "Wrong size on BlinkPlayerComponent_Server_StartBlink");
static_assert(offsetof(BlinkPlayerComponent_Server_StartBlink, params) == 0x000000, "Member 'BlinkPlayerComponent_Server_StartBlink::params' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.OnAttackFinished
// 0x0001 (0x0001 - 0x0000)
struct BlinkPowerPlayerComponent_OnAttackFinished final
{
public:
	EAttackType                                   attackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_OnAttackFinished) == 0x000001, "Wrong alignment on BlinkPowerPlayerComponent_OnAttackFinished");
static_assert(sizeof(BlinkPowerPlayerComponent_OnAttackFinished) == 0x000001, "Wrong size on BlinkPowerPlayerComponent_OnAttackFinished");
static_assert(offsetof(BlinkPowerPlayerComponent_OnAttackFinished, attackType) == 0x000000, "Member 'BlinkPowerPlayerComponent_OnAttackFinished::attackType' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.OnAttackStarted
// 0x0001 (0x0001 - 0x0000)
struct BlinkPowerPlayerComponent_OnAttackStarted final
{
public:
	EAttackType                                   attackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_OnAttackStarted) == 0x000001, "Wrong alignment on BlinkPowerPlayerComponent_OnAttackStarted");
static_assert(sizeof(BlinkPowerPlayerComponent_OnAttackStarted) == 0x000001, "Wrong size on BlinkPowerPlayerComponent_OnAttackStarted");
static_assert(offsetof(BlinkPowerPlayerComponent_OnAttackStarted, attackType) == 0x000000, "Member 'BlinkPowerPlayerComponent_OnAttackStarted::attackType' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.OnRep_BlinkState
// 0x0001 (0x0001 - 0x0000)
struct BlinkPowerPlayerComponent_OnRep_BlinkState final
{
public:
	EBlinkPowerState                              oldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_OnRep_BlinkState) == 0x000001, "Wrong alignment on BlinkPowerPlayerComponent_OnRep_BlinkState");
static_assert(sizeof(BlinkPowerPlayerComponent_OnRep_BlinkState) == 0x000001, "Wrong size on BlinkPowerPlayerComponent_OnRep_BlinkState");
static_assert(offsetof(BlinkPowerPlayerComponent_OnRep_BlinkState, oldState) == 0x000000, "Member 'BlinkPowerPlayerComponent_OnRep_BlinkState::oldState' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.Server_InterruptDuringChainBlink
// 0x0008 (0x0008 - 0x0000)
struct BlinkPowerPlayerComponent_Server_InterruptDuringChainBlink final
{
public:
	class AActor*                                 interruptedPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_Server_InterruptDuringChainBlink) == 0x000008, "Wrong alignment on BlinkPowerPlayerComponent_Server_InterruptDuringChainBlink");
static_assert(sizeof(BlinkPowerPlayerComponent_Server_InterruptDuringChainBlink) == 0x000008, "Wrong size on BlinkPowerPlayerComponent_Server_InterruptDuringChainBlink");
static_assert(offsetof(BlinkPowerPlayerComponent_Server_InterruptDuringChainBlink, interruptedPlayer) == 0x000000, "Member 'BlinkPowerPlayerComponent_Server_InterruptDuringChainBlink::interruptedPlayer' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.Server_SetState
// 0x0001 (0x0001 - 0x0000)
struct BlinkPowerPlayerComponent_Server_SetState final
{
public:
	EBlinkPowerState                              state;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_Server_SetState) == 0x000001, "Wrong alignment on BlinkPowerPlayerComponent_Server_SetState");
static_assert(sizeof(BlinkPowerPlayerComponent_Server_SetState) == 0x000001, "Wrong size on BlinkPowerPlayerComponent_Server_SetState");
static_assert(offsetof(BlinkPowerPlayerComponent_Server_SetState, state) == 0x000000, "Member 'BlinkPowerPlayerComponent_Server_SetState::state' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.Server_TriggerChainBlink
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_Server_TriggerChainBlink final
{
public:
	int32                                         remainingBlinkCharges;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_Server_TriggerChainBlink) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_Server_TriggerChainBlink");
static_assert(sizeof(BlinkPowerPlayerComponent_Server_TriggerChainBlink) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_Server_TriggerChainBlink");
static_assert(offsetof(BlinkPowerPlayerComponent_Server_TriggerChainBlink, remainingBlinkCharges) == 0x000000, "Member 'BlinkPowerPlayerComponent_Server_TriggerChainBlink::remainingBlinkCharges' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.Server_TriggerCooldown
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_Server_TriggerCooldown final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_Server_TriggerCooldown) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_Server_TriggerCooldown");
static_assert(sizeof(BlinkPowerPlayerComponent_Server_TriggerCooldown) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_Server_TriggerCooldown");
static_assert(offsetof(BlinkPowerPlayerComponent_Server_TriggerCooldown, duration) == 0x000000, "Member 'BlinkPowerPlayerComponent_Server_TriggerCooldown::duration' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.Setup
// 0x0018 (0x0018 - 0x0000)
struct BlinkPowerPlayerComponent_Setup final
{
public:
	struct FBlinkPowerSetupParams                 params;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_Setup) == 0x000008, "Wrong alignment on BlinkPowerPlayerComponent_Setup");
static_assert(sizeof(BlinkPowerPlayerComponent_Setup) == 0x000018, "Wrong size on BlinkPowerPlayerComponent_Setup");
static_assert(offsetof(BlinkPowerPlayerComponent_Setup, params) == 0x000000, "Member 'BlinkPowerPlayerComponent_Setup::params' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetBlinkCharges
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetBlinkCharges final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetBlinkCharges) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetBlinkCharges");
static_assert(sizeof(BlinkPowerPlayerComponent_GetBlinkCharges) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetBlinkCharges");
static_assert(offsetof(BlinkPowerPlayerComponent_GetBlinkCharges, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetBlinkCharges::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetChainBlinkProgressPercent
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetChainBlinkProgressPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetChainBlinkProgressPercent) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetChainBlinkProgressPercent");
static_assert(sizeof(BlinkPowerPlayerComponent_GetChainBlinkProgressPercent) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetChainBlinkProgressPercent");
static_assert(offsetof(BlinkPowerPlayerComponent_GetChainBlinkProgressPercent, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetChainBlinkProgressPercent::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetChainBlinkRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetChainBlinkRemainingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetChainBlinkRemainingTime) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetChainBlinkRemainingTime");
static_assert(sizeof(BlinkPowerPlayerComponent_GetChainBlinkRemainingTime) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetChainBlinkRemainingTime");
static_assert(offsetof(BlinkPowerPlayerComponent_GetChainBlinkRemainingTime, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetChainBlinkRemainingTime::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetChainBlinkTimerDuration
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetChainBlinkTimerDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetChainBlinkTimerDuration) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetChainBlinkTimerDuration");
static_assert(sizeof(BlinkPowerPlayerComponent_GetChainBlinkTimerDuration) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetChainBlinkTimerDuration");
static_assert(offsetof(BlinkPowerPlayerComponent_GetChainBlinkTimerDuration, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetChainBlinkTimerDuration::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetCooldownProgressPercent
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetCooldownProgressPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetCooldownProgressPercent) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetCooldownProgressPercent");
static_assert(sizeof(BlinkPowerPlayerComponent_GetCooldownProgressPercent) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetCooldownProgressPercent");
static_assert(offsetof(BlinkPowerPlayerComponent_GetCooldownProgressPercent, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetCooldownProgressPercent::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetCooldownRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetCooldownRemainingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetCooldownRemainingTime) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetCooldownRemainingTime");
static_assert(sizeof(BlinkPowerPlayerComponent_GetCooldownRemainingTime) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetCooldownRemainingTime");
static_assert(offsetof(BlinkPowerPlayerComponent_GetCooldownRemainingTime, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetCooldownRemainingTime::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetCooldownTimerDuration
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetCooldownTimerDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetCooldownTimerDuration) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetCooldownTimerDuration");
static_assert(sizeof(BlinkPowerPlayerComponent_GetCooldownTimerDuration) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetCooldownTimerDuration");
static_assert(offsetof(BlinkPowerPlayerComponent_GetCooldownTimerDuration, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetCooldownTimerDuration::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetPowerState
// 0x0001 (0x0001 - 0x0000)
struct BlinkPowerPlayerComponent_GetPowerState final
{
public:
	EBlinkPowerState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetPowerState) == 0x000001, "Wrong alignment on BlinkPowerPlayerComponent_GetPowerState");
static_assert(sizeof(BlinkPowerPlayerComponent_GetPowerState) == 0x000001, "Wrong size on BlinkPowerPlayerComponent_GetPowerState");
static_assert(offsetof(BlinkPowerPlayerComponent_GetPowerState, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetPowerState::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.GetRechargeProgressPercent
// 0x0004 (0x0004 - 0x0000)
struct BlinkPowerPlayerComponent_GetRechargeProgressPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_GetRechargeProgressPercent) == 0x000004, "Wrong alignment on BlinkPowerPlayerComponent_GetRechargeProgressPercent");
static_assert(sizeof(BlinkPowerPlayerComponent_GetRechargeProgressPercent) == 0x000004, "Wrong size on BlinkPowerPlayerComponent_GetRechargeProgressPercent");
static_assert(offsetof(BlinkPowerPlayerComponent_GetRechargeProgressPercent, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_GetRechargeProgressPercent::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.IsBlinking
// 0x0001 (0x0001 - 0x0000)
struct BlinkPowerPlayerComponent_IsBlinking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_IsBlinking) == 0x000001, "Wrong alignment on BlinkPowerPlayerComponent_IsBlinking");
static_assert(sizeof(BlinkPowerPlayerComponent_IsBlinking) == 0x000001, "Wrong size on BlinkPowerPlayerComponent_IsBlinking");
static_assert(offsetof(BlinkPowerPlayerComponent_IsBlinking, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_IsBlinking::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.IsChargeFull
// 0x0001 (0x0001 - 0x0000)
struct BlinkPowerPlayerComponent_IsChargeFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_IsChargeFull) == 0x000001, "Wrong alignment on BlinkPowerPlayerComponent_IsChargeFull");
static_assert(sizeof(BlinkPowerPlayerComponent_IsChargeFull) == 0x000001, "Wrong size on BlinkPowerPlayerComponent_IsChargeFull");
static_assert(offsetof(BlinkPowerPlayerComponent_IsChargeFull, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_IsChargeFull::ReturnValue' has a wrong offset!");

// Function TheNurse.BlinkPowerPlayerComponent.IsChargingBlink
// 0x0001 (0x0001 - 0x0000)
struct BlinkPowerPlayerComponent_IsChargingBlink final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlinkPowerPlayerComponent_IsChargingBlink) == 0x000001, "Wrong alignment on BlinkPowerPlayerComponent_IsChargingBlink");
static_assert(sizeof(BlinkPowerPlayerComponent_IsChargingBlink) == 0x000001, "Wrong size on BlinkPowerPlayerComponent_IsChargingBlink");
static_assert(offsetof(BlinkPowerPlayerComponent_IsChargingBlink, ReturnValue) == 0x000000, "Member 'BlinkPowerPlayerComponent_IsChargingBlink::ReturnValue' has a wrong offset!");

// Function TheNurse.NurseFXInterface.Cosmetic_OnSpasmodicBreathAddonEffectActive
// 0x0001 (0x0001 - 0x0000)
struct NurseFXInterface_Cosmetic_OnSpasmodicBreathAddonEffectActive final
{
public:
	bool                                          activeValue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NurseFXInterface_Cosmetic_OnSpasmodicBreathAddonEffectActive) == 0x000001, "Wrong alignment on NurseFXInterface_Cosmetic_OnSpasmodicBreathAddonEffectActive");
static_assert(sizeof(NurseFXInterface_Cosmetic_OnSpasmodicBreathAddonEffectActive) == 0x000001, "Wrong size on NurseFXInterface_Cosmetic_OnSpasmodicBreathAddonEffectActive");
static_assert(offsetof(NurseFXInterface_Cosmetic_OnSpasmodicBreathAddonEffectActive, activeValue) == 0x000000, "Member 'NurseFXInterface_Cosmetic_OnSpasmodicBreathAddonEffectActive::activeValue' has a wrong offset!");

// Function TheNurse.NurseHelper.GetBlinkPowerItem
// 0x0010 (0x0010 - 0x0000)
struct NurseHelper_GetBlinkPowerItem final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABlinkPowerItem*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NurseHelper_GetBlinkPowerItem) == 0x000008, "Wrong alignment on NurseHelper_GetBlinkPowerItem");
static_assert(sizeof(NurseHelper_GetBlinkPowerItem) == 0x000010, "Wrong size on NurseHelper_GetBlinkPowerItem");
static_assert(offsetof(NurseHelper_GetBlinkPowerItem, player) == 0x000000, "Member 'NurseHelper_GetBlinkPowerItem::player' has a wrong offset!");
static_assert(offsetof(NurseHelper_GetBlinkPowerItem, ReturnValue) == 0x000008, "Member 'NurseHelper_GetBlinkPowerItem::ReturnValue' has a wrong offset!");

// Function TheNurse.StreetwiseEffect.Authority_OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct StreetwiseEffect_Authority_OnInRangeChanged final
{
public:
	bool                                          inRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreetwiseEffect_Authority_OnInRangeChanged) == 0x000001, "Wrong alignment on StreetwiseEffect_Authority_OnInRangeChanged");
static_assert(sizeof(StreetwiseEffect_Authority_OnInRangeChanged) == 0x000001, "Wrong size on StreetwiseEffect_Authority_OnInRangeChanged");
static_assert(offsetof(StreetwiseEffect_Authority_OnInRangeChanged, inRange) == 0x000000, "Member 'StreetwiseEffect_Authority_OnInRangeChanged::inRange' has a wrong offset!");

}

