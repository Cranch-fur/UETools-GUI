#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheNurse

#include "Basic.hpp"

#include "DeadByDaylight_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "TheNurse_structs.hpp"
#include "DBDCompetence_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DBDAttack_classes.hpp"
#include "StatSystem_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "Competence_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class TheNurse.ActivateByBlinkAttackTimedEffect
// 0x0008 (0x0358 - 0x0350)
class UActivateByBlinkAttackTimedEffect final : public UStatusEffect
{
public:
	float                                         _activationDuration;                               // 0x0350(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActivateByBlinkAttackTimedEffect">();
	}
	static class UActivateByBlinkAttackTimedEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivateByBlinkAttackTimedEffect>();
	}
};
static_assert(alignof(UActivateByBlinkAttackTimedEffect) == 0x000008, "Wrong alignment on UActivateByBlinkAttackTimedEffect");
static_assert(sizeof(UActivateByBlinkAttackTimedEffect) == 0x000358, "Wrong size on UActivateByBlinkAttackTimedEffect");
static_assert(offsetof(UActivateByBlinkAttackTimedEffect, _activationDuration) == 0x000350, "Member 'UActivateByBlinkAttackTimedEffect::_activationDuration' has a wrong offset!");

// Class TheNurse.AnxiousGaspAddon
// 0x0088 (0x0340 - 0x02B8)
class UAnxiousGaspAddon final : public UItemAddon
{
public:
	class UAkAudioEvent*                          _screamSoundEvent;                                 // 0x02B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           _scoreEventTag;                                    // 0x02C0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _detectionCapsuleHalfHeight;                       // 0x02CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _detectionCapsuleRadius;                           // 0x02D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      _survivorDetector;                                 // 0x02D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<class AActor*>                           _alreadyDetectedPlayers;                           // 0x02E0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_330[0x10];                                     // 0x0330(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDetectorOverlapBegin(class UPrimitiveComponent* overlappedComponent, class AActor* otherActor, class UPrimitiveComponent* otherComp, int32 otherBodyIndex, bool bFromSweep, const struct FHitResult& sweepResult);

	void PlayScream(const class ACamperPlayer* survivor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnxiousGaspAddon">();
	}
	static class UAnxiousGaspAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnxiousGaspAddon>();
	}
};
static_assert(alignof(UAnxiousGaspAddon) == 0x000008, "Wrong alignment on UAnxiousGaspAddon");
static_assert(sizeof(UAnxiousGaspAddon) == 0x000340, "Wrong size on UAnxiousGaspAddon");
static_assert(offsetof(UAnxiousGaspAddon, _screamSoundEvent) == 0x0002B8, "Member 'UAnxiousGaspAddon::_screamSoundEvent' has a wrong offset!");
static_assert(offsetof(UAnxiousGaspAddon, _scoreEventTag) == 0x0002C0, "Member 'UAnxiousGaspAddon::_scoreEventTag' has a wrong offset!");
static_assert(offsetof(UAnxiousGaspAddon, _detectionCapsuleHalfHeight) == 0x0002CC, "Member 'UAnxiousGaspAddon::_detectionCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(UAnxiousGaspAddon, _detectionCapsuleRadius) == 0x0002D0, "Member 'UAnxiousGaspAddon::_detectionCapsuleRadius' has a wrong offset!");
static_assert(offsetof(UAnxiousGaspAddon, _survivorDetector) == 0x0002D8, "Member 'UAnxiousGaspAddon::_survivorDetector' has a wrong offset!");
static_assert(offsetof(UAnxiousGaspAddon, _alreadyDetectedPlayers) == 0x0002E0, "Member 'UAnxiousGaspAddon::_alreadyDetectedPlayers' has a wrong offset!");

// Class TheNurse.BaseInstantBlinkInteraction
// 0x0020 (0x0640 - 0x0620)
class UBaseInstantBlinkInteraction : public UInteractionDefinition
{
public:
	float                                         _blinkTimePercentage;                              // 0x0618(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61C[0x24];                                     // 0x061C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseInstantBlinkInteraction">();
	}
	static class UBaseInstantBlinkInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseInstantBlinkInteraction>();
	}
};
static_assert(alignof(UBaseInstantBlinkInteraction) == 0x000010, "Wrong alignment on UBaseInstantBlinkInteraction");
static_assert(sizeof(UBaseInstantBlinkInteraction) == 0x000640, "Wrong size on UBaseInstantBlinkInteraction");
static_assert(offsetof(UBaseInstantBlinkInteraction, _blinkTimePercentage) == 0x000618, "Member 'UBaseInstantBlinkInteraction::_blinkTimePercentage' has a wrong offset!");

// Class TheNurse.AutomaticBlinkInteraction
// 0x0030 (0x0670 - 0x0640)
class UAutomaticBlinkInteraction final : public UBaseInstantBlinkInteraction
{
public:
	float                                         _blinkDistancePercent;                             // 0x0640(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_644[0x2C];                                     // 0x0644(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutomaticBlinkInteraction">();
	}
	static class UAutomaticBlinkInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutomaticBlinkInteraction>();
	}
};
static_assert(alignof(UAutomaticBlinkInteraction) == 0x000010, "Wrong alignment on UAutomaticBlinkInteraction");
static_assert(sizeof(UAutomaticBlinkInteraction) == 0x000670, "Wrong size on UAutomaticBlinkInteraction");
static_assert(offsetof(UAutomaticBlinkInteraction, _blinkDistancePercent) == 0x000640, "Member 'UAutomaticBlinkInteraction::_blinkDistancePercent' has a wrong offset!");

// Class TheNurse.BadMansLastBreathAddon
// 0x0018 (0x02D0 - 0x02B8)
class UBadMansLastBreathAddon final : public UItemAddon
{
public:
	float                                         _activationDuration;                               // 0x02B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _cooldownDuration;                                 // 0x02BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStatusEffect*                          _cooldownIndicator;                                // 0x02C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStatusEffect*                          _undetectableEffect;                               // 0x02C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BadMansLastBreathAddon">();
	}
	static class UBadMansLastBreathAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBadMansLastBreathAddon>();
	}
};
static_assert(alignof(UBadMansLastBreathAddon) == 0x000008, "Wrong alignment on UBadMansLastBreathAddon");
static_assert(sizeof(UBadMansLastBreathAddon) == 0x0002D0, "Wrong size on UBadMansLastBreathAddon");
static_assert(offsetof(UBadMansLastBreathAddon, _activationDuration) == 0x0002B8, "Member 'UBadMansLastBreathAddon::_activationDuration' has a wrong offset!");
static_assert(offsetof(UBadMansLastBreathAddon, _cooldownDuration) == 0x0002BC, "Member 'UBadMansLastBreathAddon::_cooldownDuration' has a wrong offset!");
static_assert(offsetof(UBadMansLastBreathAddon, _cooldownIndicator) == 0x0002C0, "Member 'UBadMansLastBreathAddon::_cooldownIndicator' has a wrong offset!");
static_assert(offsetof(UBadMansLastBreathAddon, _undetectableEffect) == 0x0002C8, "Member 'UBadMansLastBreathAddon::_undetectableEffect' has a wrong offset!");

// Class TheNurse.BalancedLanding
// 0x0078 (0x0440 - 0x03C8)
class UBalancedLanding final : public UPerk
{
public:
	uint8                                         Pad_3C8[0x8];                                      // 0x03C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _staggerReductionEffect;                           // 0x03D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _activableExhaustedEffect;                         // 0x03D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _sprintDuration;                                   // 0x03E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _exhaustionDurationPerLevel[0x3];                  // 0x03E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UActivatableExhaustedEffect*            _exhaustedEffect;                                  // 0x03F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F8[0x48];                                     // 0x03F8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Client_UnvalidateBalanceLanding();
	void Server_WarnBalancedLandingPredicted();

	float GetExhaustionDurationAtLevel() const;
	float GetSprintDuration() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BalancedLanding">();
	}
	static class UBalancedLanding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBalancedLanding>();
	}
};
static_assert(alignof(UBalancedLanding) == 0x000008, "Wrong alignment on UBalancedLanding");
static_assert(sizeof(UBalancedLanding) == 0x000440, "Wrong size on UBalancedLanding");
static_assert(offsetof(UBalancedLanding, _staggerReductionEffect) == 0x0003D0, "Member 'UBalancedLanding::_staggerReductionEffect' has a wrong offset!");
static_assert(offsetof(UBalancedLanding, _activableExhaustedEffect) == 0x0003D8, "Member 'UBalancedLanding::_activableExhaustedEffect' has a wrong offset!");
static_assert(offsetof(UBalancedLanding, _sprintDuration) == 0x0003E0, "Member 'UBalancedLanding::_sprintDuration' has a wrong offset!");
static_assert(offsetof(UBalancedLanding, _exhaustionDurationPerLevel) == 0x0003E4, "Member 'UBalancedLanding::_exhaustionDurationPerLevel' has a wrong offset!");
static_assert(offsetof(UBalancedLanding, _exhaustedEffect) == 0x0003F0, "Member 'UBalancedLanding::_exhaustedEffect' has a wrong offset!");

// Class TheNurse.BaseNursePerk
// 0x0000 (0x0480 - 0x0480)
class UBaseNursePerk : public USpawningEffectPerk
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseNursePerk">();
	}
	static class UBaseNursePerk* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseNursePerk>();
	}
};
static_assert(alignof(UBaseNursePerk) == 0x000008, "Wrong alignment on UBaseNursePerk");
static_assert(sizeof(UBaseNursePerk) == 0x000480, "Wrong size on UBaseNursePerk");

// Class TheNurse.BlinkAttack
// 0x0000 (0x0380 - 0x0380)
class UBlinkAttack final : public UPounceAttack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkAttack">();
	}
	static class UBlinkAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkAttack>();
	}
};
static_assert(alignof(UBlinkAttack) == 0x000010, "Wrong alignment on UBlinkAttack");
static_assert(sizeof(UBlinkAttack) == 0x000380, "Wrong size on UBlinkAttack");

// Class TheNurse.BlinkAttackSuccessSubstate
// 0x0000 (0x0118 - 0x0118)
class UBlinkAttackSuccessSubstate final : public UPounceAttackSuccessSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkAttackSuccessSubstate">();
	}
	static class UBlinkAttackSuccessSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkAttackSuccessSubstate>();
	}
};
static_assert(alignof(UBlinkAttackSuccessSubstate) == 0x000008, "Wrong alignment on UBlinkAttackSuccessSubstate");
static_assert(sizeof(UBlinkAttackSuccessSubstate) == 0x000118, "Wrong size on UBlinkAttackSuccessSubstate");

// Class TheNurse.BlinkBackInteraction
// 0x0000 (0x0640 - 0x0640)
class UBlinkBackInteraction final : public UBaseInstantBlinkInteraction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkBackInteraction">();
	}
	static class UBlinkBackInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkBackInteraction>();
	}
};
static_assert(alignof(UBlinkBackInteraction) == 0x000010, "Wrong alignment on UBlinkBackInteraction");
static_assert(sizeof(UBlinkBackInteraction) == 0x000640, "Wrong size on UBlinkBackInteraction");

// Class TheNurse.BlinkIndicatorController
// 0x0080 (0x0138 - 0x00B8)
class UBlinkIndicatorController final : public UActorComponent
{
public:
	TSubclassOf<class AActor>                     _indicatorClass;                                   // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           _activationFlag;                                   // 0x00C0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _indicatorMinimumVelocity;                         // 0x00CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _indicatorVelocityEasingFactor;                    // 0x00D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _indicator;                                        // 0x00D8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x58];                                      // 0x00E0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkIndicatorController">();
	}
	static class UBlinkIndicatorController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkIndicatorController>();
	}
};
static_assert(alignof(UBlinkIndicatorController) == 0x000008, "Wrong alignment on UBlinkIndicatorController");
static_assert(sizeof(UBlinkIndicatorController) == 0x000138, "Wrong size on UBlinkIndicatorController");
static_assert(offsetof(UBlinkIndicatorController, _indicatorClass) == 0x0000B8, "Member 'UBlinkIndicatorController::_indicatorClass' has a wrong offset!");
static_assert(offsetof(UBlinkIndicatorController, _activationFlag) == 0x0000C0, "Member 'UBlinkIndicatorController::_activationFlag' has a wrong offset!");
static_assert(offsetof(UBlinkIndicatorController, _indicatorMinimumVelocity) == 0x0000CC, "Member 'UBlinkIndicatorController::_indicatorMinimumVelocity' has a wrong offset!");
static_assert(offsetof(UBlinkIndicatorController, _indicatorVelocityEasingFactor) == 0x0000D0, "Member 'UBlinkIndicatorController::_indicatorVelocityEasingFactor' has a wrong offset!");
static_assert(offsetof(UBlinkIndicatorController, _indicator) == 0x0000D8, "Member 'UBlinkIndicatorController::_indicator' has a wrong offset!");

// Class TheNurse.BlinkInteraction
// 0x0120 (0x0860 - 0x0740)
class UBlinkInteraction final : public UChargeableInteractionDefinition
{
public:
	uint8                                         Pad_740[0x60];                                     // 0x0740(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStatProperty                          _chargeTime;                                       // 0x07A0(0x0088)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_828[0x38];                                     // 0x0828(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkInteraction">();
	}
	static class UBlinkInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkInteraction>();
	}
};
static_assert(alignof(UBlinkInteraction) == 0x000010, "Wrong alignment on UBlinkInteraction");
static_assert(sizeof(UBlinkInteraction) == 0x000860, "Wrong size on UBlinkInteraction");
static_assert(offsetof(UBlinkInteraction, _chargeTime) == 0x0007A0, "Member 'UBlinkInteraction::_chargeTime' has a wrong offset!");

// Class TheNurse.BlinkPlayerComponent
// 0x0158 (0x0210 - 0x00B8)
class alignas(0x10) UBlinkPlayerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x18];                                      // 0x00B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTunableStat                           _maxBlinkDuration;                                 // 0x00D0(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _minBlinkDuration;                                 // 0x0150(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _blinkFOVCurve;                                    // 0x0178(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x90];                                     // 0x0180(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Local_OnMovementModeChanged(class ACharacter* character, EMovementMode prevMovementMode, uint8 previousCustomMode);
	void Multicast_EndBlink();
	void Multicast_StartBlink(const struct FBlinkParams& params);
	void Server_EndBlink();
	void Server_StartBlink(const struct FBlinkParams& params);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkPlayerComponent">();
	}
	static class UBlinkPlayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkPlayerComponent>();
	}
};
static_assert(alignof(UBlinkPlayerComponent) == 0x000010, "Wrong alignment on UBlinkPlayerComponent");
static_assert(sizeof(UBlinkPlayerComponent) == 0x000210, "Wrong size on UBlinkPlayerComponent");
static_assert(offsetof(UBlinkPlayerComponent, _maxBlinkDuration) == 0x0000D0, "Member 'UBlinkPlayerComponent::_maxBlinkDuration' has a wrong offset!");
static_assert(offsetof(UBlinkPlayerComponent, _minBlinkDuration) == 0x000150, "Member 'UBlinkPlayerComponent::_minBlinkDuration' has a wrong offset!");
static_assert(offsetof(UBlinkPlayerComponent, _blinkFOVCurve) == 0x000178, "Member 'UBlinkPlayerComponent::_blinkFOVCurve' has a wrong offset!");

// Class TheNurse.BlinkPowerDebugComponent
// 0x0058 (0x0110 - 0x00B8)
class UBlinkPowerDebugComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x58];                                      // 0x00B8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkPowerDebugComponent">();
	}
	static class UBlinkPowerDebugComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkPowerDebugComponent>();
	}
};
static_assert(alignof(UBlinkPowerDebugComponent) == 0x000008, "Wrong alignment on UBlinkPowerDebugComponent");
static_assert(sizeof(UBlinkPowerDebugComponent) == 0x000110, "Wrong size on UBlinkPowerDebugComponent");

// Class TheNurse.BlinkPowerEventDispatcher
// 0x01D0 (0x0288 - 0x00B8)
class UBlinkPowerEventDispatcher final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void()>              OnFinishPlaying;                                   // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnStartBlinkChargeEvent;                           // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float progressPercent)> OnUpdateBlinkChargeEvent;                  // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool stopByBlink)> OnStopBlinkChargeEvent;                         // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnEnterBlinkEvent;                                 // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float progressPercent)> OnUpdateBlinkEvent;                        // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitBlinkEvent;                                  // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnEnterChainBlinkEvent;                            // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float progressPercent)> OnUpdateChainBlinkEvent;                   // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitChainBlinkEvent;                             // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnEnterCooldownEvent;                              // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float progressPercent)> OnUpdateCooldownEvent;                     // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitCooldownEvent;                               // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool isBlinking)> OnIsBlinkingChangedEvent;                        // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool isChargingBlink)> OnIsChargingBlinkChangedEvent;              // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBlinkChargeFullEvent;                            // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EBlinkPowerState oldState, EBlinkPowerState newState)> OnBlinkPowerStateChangedEvent; // 0x01B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 charges, bool wasSetByRecharge)> OnBlinkChargesChangedEvent; // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0xB0];                                     // 0x01D8(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkPowerEventDispatcher">();
	}
	static class UBlinkPowerEventDispatcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkPowerEventDispatcher>();
	}
};
static_assert(alignof(UBlinkPowerEventDispatcher) == 0x000008, "Wrong alignment on UBlinkPowerEventDispatcher");
static_assert(sizeof(UBlinkPowerEventDispatcher) == 0x000288, "Wrong size on UBlinkPowerEventDispatcher");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnFinishPlaying) == 0x0000B8, "Member 'UBlinkPowerEventDispatcher::OnFinishPlaying' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnStartBlinkChargeEvent) == 0x0000C8, "Member 'UBlinkPowerEventDispatcher::OnStartBlinkChargeEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnUpdateBlinkChargeEvent) == 0x0000D8, "Member 'UBlinkPowerEventDispatcher::OnUpdateBlinkChargeEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnStopBlinkChargeEvent) == 0x0000E8, "Member 'UBlinkPowerEventDispatcher::OnStopBlinkChargeEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnEnterBlinkEvent) == 0x0000F8, "Member 'UBlinkPowerEventDispatcher::OnEnterBlinkEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnUpdateBlinkEvent) == 0x000108, "Member 'UBlinkPowerEventDispatcher::OnUpdateBlinkEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnExitBlinkEvent) == 0x000118, "Member 'UBlinkPowerEventDispatcher::OnExitBlinkEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnEnterChainBlinkEvent) == 0x000128, "Member 'UBlinkPowerEventDispatcher::OnEnterChainBlinkEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnUpdateChainBlinkEvent) == 0x000138, "Member 'UBlinkPowerEventDispatcher::OnUpdateChainBlinkEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnExitChainBlinkEvent) == 0x000148, "Member 'UBlinkPowerEventDispatcher::OnExitChainBlinkEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnEnterCooldownEvent) == 0x000158, "Member 'UBlinkPowerEventDispatcher::OnEnterCooldownEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnUpdateCooldownEvent) == 0x000168, "Member 'UBlinkPowerEventDispatcher::OnUpdateCooldownEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnExitCooldownEvent) == 0x000178, "Member 'UBlinkPowerEventDispatcher::OnExitCooldownEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnIsBlinkingChangedEvent) == 0x000188, "Member 'UBlinkPowerEventDispatcher::OnIsBlinkingChangedEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnIsChargingBlinkChangedEvent) == 0x000198, "Member 'UBlinkPowerEventDispatcher::OnIsChargingBlinkChangedEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnBlinkChargeFullEvent) == 0x0001A8, "Member 'UBlinkPowerEventDispatcher::OnBlinkChargeFullEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnBlinkPowerStateChangedEvent) == 0x0001B8, "Member 'UBlinkPowerEventDispatcher::OnBlinkPowerStateChangedEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnBlinkChargesChangedEvent) == 0x0001C8, "Member 'UBlinkPowerEventDispatcher::OnBlinkChargesChangedEvent' has a wrong offset!");

// Class TheNurse.BlinkPowerItem
// 0x0020 (0x04D0 - 0x04B0)
class ABlinkPowerItem final : public ACollectable
{
public:
	class UInteractor*                            _powerInteractor;                                  // 0x04B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChargeableComponent*                   _blinkChargeable;                                  // 0x04B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C0[0x10];                                     // 0x04C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkPowerItem">();
	}
	static class ABlinkPowerItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlinkPowerItem>();
	}
};
static_assert(alignof(ABlinkPowerItem) == 0x000008, "Wrong alignment on ABlinkPowerItem");
static_assert(sizeof(ABlinkPowerItem) == 0x0004D0, "Wrong size on ABlinkPowerItem");
static_assert(offsetof(ABlinkPowerItem, _powerInteractor) == 0x0004B0, "Member 'ABlinkPowerItem::_powerInteractor' has a wrong offset!");
static_assert(offsetof(ABlinkPowerItem, _blinkChargeable) == 0x0004B8, "Member 'ABlinkPowerItem::_blinkChargeable' has a wrong offset!");

// Class TheNurse.BlinkPowerPlayerComponent
// 0x0500 (0x05B8 - 0x00B8)
class UBlinkPowerPlayerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x30];                                      // 0x00B8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTunableStat                           _maxBlinkCharges;                                  // 0x00E8(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _rechargeDuration;                                 // 0x0168(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _chainBlinkDuration;                               // 0x01E8(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _allowedInteractionSemancticsDuringChainBlink;     // 0x0268(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _fatigueDuration;                                  // 0x0288(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _fatigueChainBlinkPenalty;                         // 0x0308(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _fatigueAttackPenalty;                             // 0x0388(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           _fatigueAttackMissPenaltyModifier;                 // 0x0408(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_414[0x4];                                      // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _fatigueSpeedCurve;                                // 0x0418(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_420[0x90];                                     // 0x0420(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	EBlinkPowerState                              _powerState;                                       // 0x04B0(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B1[0x3];                                      // 0x04B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _blinkCharges;                                     // 0x04B4(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _wasCurrentChargeSetByRecharge;                    // 0x04B8(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B9[0xDF];                                     // 0x04B9(0x00DF)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimerObject*                           _chainBlinkTimer;                                  // 0x0598(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTimerObject*                           _cooldownTimer;                                    // 0x05A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTimerObject*                           _rechargeTimer;                                    // 0x05A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5B0[0x8];                                      // 0x05B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAttackFinished(const EAttackType attackType);
	void OnAttackStarted(const EAttackType attackType);
	void OnLevelReadyToPlay();
	void OnRep_BlinkCharges();
	void OnRep_BlinkState(EBlinkPowerState oldState);
	void Server_InterruptDuringChainBlink(class AActor* interruptedPlayer);
	void Server_SetState(EBlinkPowerState state);
	void Server_TriggerChainBlink(int32 remainingBlinkCharges);
	void Server_TriggerCooldown(float duration);
	void Setup(const struct FBlinkPowerSetupParams& params);

	int32 GetBlinkCharges() const;
	float GetChainBlinkProgressPercent() const;
	float GetChainBlinkRemainingTime() const;
	float GetChainBlinkTimerDuration() const;
	float GetCooldownProgressPercent() const;
	float GetCooldownRemainingTime() const;
	float GetCooldownTimerDuration() const;
	EBlinkPowerState GetPowerState() const;
	float GetRechargeProgressPercent() const;
	bool IsBlinking() const;
	bool IsChargeFull() const;
	bool IsChargingBlink() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkPowerPlayerComponent">();
	}
	static class UBlinkPowerPlayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkPowerPlayerComponent>();
	}
};
static_assert(alignof(UBlinkPowerPlayerComponent) == 0x000008, "Wrong alignment on UBlinkPowerPlayerComponent");
static_assert(sizeof(UBlinkPowerPlayerComponent) == 0x0005B8, "Wrong size on UBlinkPowerPlayerComponent");
static_assert(offsetof(UBlinkPowerPlayerComponent, _maxBlinkCharges) == 0x0000E8, "Member 'UBlinkPowerPlayerComponent::_maxBlinkCharges' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _rechargeDuration) == 0x000168, "Member 'UBlinkPowerPlayerComponent::_rechargeDuration' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _chainBlinkDuration) == 0x0001E8, "Member 'UBlinkPowerPlayerComponent::_chainBlinkDuration' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _allowedInteractionSemancticsDuringChainBlink) == 0x000268, "Member 'UBlinkPowerPlayerComponent::_allowedInteractionSemancticsDuringChainBlink' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _fatigueDuration) == 0x000288, "Member 'UBlinkPowerPlayerComponent::_fatigueDuration' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _fatigueChainBlinkPenalty) == 0x000308, "Member 'UBlinkPowerPlayerComponent::_fatigueChainBlinkPenalty' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _fatigueAttackPenalty) == 0x000388, "Member 'UBlinkPowerPlayerComponent::_fatigueAttackPenalty' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _fatigueAttackMissPenaltyModifier) == 0x000408, "Member 'UBlinkPowerPlayerComponent::_fatigueAttackMissPenaltyModifier' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _fatigueSpeedCurve) == 0x000418, "Member 'UBlinkPowerPlayerComponent::_fatigueSpeedCurve' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _powerState) == 0x0004B0, "Member 'UBlinkPowerPlayerComponent::_powerState' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _blinkCharges) == 0x0004B4, "Member 'UBlinkPowerPlayerComponent::_blinkCharges' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _wasCurrentChargeSetByRecharge) == 0x0004B8, "Member 'UBlinkPowerPlayerComponent::_wasCurrentChargeSetByRecharge' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _chainBlinkTimer) == 0x000598, "Member 'UBlinkPowerPlayerComponent::_chainBlinkTimer' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _cooldownTimer) == 0x0005A0, "Member 'UBlinkPowerPlayerComponent::_cooldownTimer' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _rechargeTimer) == 0x0005A8, "Member 'UBlinkPowerPlayerComponent::_rechargeTimer' has a wrong offset!");

// Class TheNurse.BlinkTargetFinder
// 0x0128 (0x01E0 - 0x00B8)
class UBlinkTargetFinder final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x18];                                      // 0x00B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _minDistance;                                      // 0x00D0(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _maxDistance;                                      // 0x00F8(0x0080)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _floorRaycastStartZOffset;                         // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _floorRaycastLength;                               // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _locationClearStepHeight;                          // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 _horizontalSamplePercentages;                      // 0x0188(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         _blinkBlockerSphereCastRadius;                     // 0x0198(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19C[0x44];                                     // 0x019C(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkTargetFinder">();
	}
	static class UBlinkTargetFinder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkTargetFinder>();
	}
};
static_assert(alignof(UBlinkTargetFinder) == 0x000008, "Wrong alignment on UBlinkTargetFinder");
static_assert(sizeof(UBlinkTargetFinder) == 0x0001E0, "Wrong size on UBlinkTargetFinder");
static_assert(offsetof(UBlinkTargetFinder, _minDistance) == 0x0000D0, "Member 'UBlinkTargetFinder::_minDistance' has a wrong offset!");
static_assert(offsetof(UBlinkTargetFinder, _maxDistance) == 0x0000F8, "Member 'UBlinkTargetFinder::_maxDistance' has a wrong offset!");
static_assert(offsetof(UBlinkTargetFinder, _floorRaycastStartZOffset) == 0x000178, "Member 'UBlinkTargetFinder::_floorRaycastStartZOffset' has a wrong offset!");
static_assert(offsetof(UBlinkTargetFinder, _floorRaycastLength) == 0x00017C, "Member 'UBlinkTargetFinder::_floorRaycastLength' has a wrong offset!");
static_assert(offsetof(UBlinkTargetFinder, _locationClearStepHeight) == 0x000180, "Member 'UBlinkTargetFinder::_locationClearStepHeight' has a wrong offset!");
static_assert(offsetof(UBlinkTargetFinder, _horizontalSamplePercentages) == 0x000188, "Member 'UBlinkTargetFinder::_horizontalSamplePercentages' has a wrong offset!");
static_assert(offsetof(UBlinkTargetFinder, _blinkBlockerSphereCastRadius) == 0x000198, "Member 'UBlinkTargetFinder::_blinkBlockerSphereCastRadius' has a wrong offset!");

// Class TheNurse.DarkCinctureAddon
// 0x0018 (0x02D0 - 0x02B8)
class UDarkCinctureAddon final : public UItemAddon
{
public:
	class UStatusEffect*                          _speedEffect;                                      // 0x02B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _speedEffectClass;                                 // 0x02C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _movementSpeedMultiplier;                          // 0x02C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DarkCinctureAddon">();
	}
	static class UDarkCinctureAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDarkCinctureAddon>();
	}
};
static_assert(alignof(UDarkCinctureAddon) == 0x000008, "Wrong alignment on UDarkCinctureAddon");
static_assert(sizeof(UDarkCinctureAddon) == 0x0002D0, "Wrong size on UDarkCinctureAddon");
static_assert(offsetof(UDarkCinctureAddon, _speedEffect) == 0x0002B8, "Member 'UDarkCinctureAddon::_speedEffect' has a wrong offset!");
static_assert(offsetof(UDarkCinctureAddon, _speedEffectClass) == 0x0002C0, "Member 'UDarkCinctureAddon::_speedEffectClass' has a wrong offset!");
static_assert(offsetof(UDarkCinctureAddon, _movementSpeedMultiplier) == 0x0002C8, "Member 'UDarkCinctureAddon::_movementSpeedMultiplier' has a wrong offset!");

// Class TheNurse.FragileWheezeAddon
// 0x0008 (0x02C0 - 0x02B8)
class UFragileWheezeAddon final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _mangledEffectClass;                               // 0x02B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FragileWheezeAddon">();
	}
	static class UFragileWheezeAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFragileWheezeAddon>();
	}
};
static_assert(alignof(UFragileWheezeAddon) == 0x000008, "Wrong alignment on UFragileWheezeAddon");
static_assert(sizeof(UFragileWheezeAddon) == 0x0002C0, "Wrong size on UFragileWheezeAddon");
static_assert(offsetof(UFragileWheezeAddon, _mangledEffectClass) == 0x0002B8, "Member 'UFragileWheezeAddon::_mangledEffectClass' has a wrong offset!");

// Class TheNurse.IsChainBlinkingCondition
// 0x0010 (0x00F8 - 0x00E8)
class UIsChainBlinkingCondition final : public UEventDrivenModifierCondition
{
public:
	uint8                                         Pad_E8[0x10];                                      // 0x00E8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IsChainBlinkingCondition">();
	}
	static class UIsChainBlinkingCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIsChainBlinkingCondition>();
	}
};
static_assert(alignof(UIsChainBlinkingCondition) == 0x000008, "Wrong alignment on UIsChainBlinkingCondition");
static_assert(sizeof(UIsChainBlinkingCondition) == 0x0000F8, "Wrong size on UIsChainBlinkingCondition");

// Class TheNurse.IsInChainBlinkWindowCondition
// 0x0028 (0x0110 - 0x00E8)
class UIsInChainBlinkWindowCondition final : public UEventDrivenModifierCondition
{
public:
	uint8                                         Pad_E8[0x28];                                      // 0x00E8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IsInChainBlinkWindowCondition">();
	}
	static class UIsInChainBlinkWindowCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIsInChainBlinkWindowCondition>();
	}
};
static_assert(alignof(UIsInChainBlinkWindowCondition) == 0x000008, "Wrong alignment on UIsInChainBlinkWindowCondition");
static_assert(sizeof(UIsInChainBlinkWindowCondition) == 0x000110, "Wrong size on UIsInChainBlinkWindowCondition");

// Class TheNurse.KavanaghsLastBreathAddon
// 0x0020 (0x02D8 - 0x02B8)
class UKavanaghsLastBreathAddon final : public UItemAddon
{
public:
	uint8                                         Pad_2B8[0x10];                                     // 0x02B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _blindnessEffectClass;                             // 0x02C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _maxBlindnessRange;                                // 0x02D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _blindedEffectDuration;                            // 0x02D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KavanaghsLastBreathAddon">();
	}
	static class UKavanaghsLastBreathAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKavanaghsLastBreathAddon>();
	}
};
static_assert(alignof(UKavanaghsLastBreathAddon) == 0x000008, "Wrong alignment on UKavanaghsLastBreathAddon");
static_assert(sizeof(UKavanaghsLastBreathAddon) == 0x0002D8, "Wrong size on UKavanaghsLastBreathAddon");
static_assert(offsetof(UKavanaghsLastBreathAddon, _blindnessEffectClass) == 0x0002C8, "Member 'UKavanaghsLastBreathAddon::_blindnessEffectClass' has a wrong offset!");
static_assert(offsetof(UKavanaghsLastBreathAddon, _maxBlindnessRange) == 0x0002D0, "Member 'UKavanaghsLastBreathAddon::_maxBlindnessRange' has a wrong offset!");
static_assert(offsetof(UKavanaghsLastBreathAddon, _blindedEffectDuration) == 0x0002D4, "Member 'UKavanaghsLastBreathAddon::_blindedEffectDuration' has a wrong offset!");

// Class TheNurse.MatchboxAddon
// 0x0008 (0x02C0 - 0x02B8)
class UMatchboxAddon final : public UItemAddon
{
public:
	float                                         _speedModifier;                                    // 0x02B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatchboxAddon">();
	}
	static class UMatchboxAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatchboxAddon>();
	}
};
static_assert(alignof(UMatchboxAddon) == 0x000008, "Wrong alignment on UMatchboxAddon");
static_assert(sizeof(UMatchboxAddon) == 0x0002C0, "Wrong size on UMatchboxAddon");
static_assert(offsetof(UMatchboxAddon, _speedModifier) == 0x0002B8, "Member 'UMatchboxAddon::_speedModifier' has a wrong offset!");

// Class TheNurse.NurseAnimInstance
// 0x0080 (0x0340 - 0x02C0)
class UNurseAnimInstance final : public UAnimInstance
{
public:
	bool                                          _isBlinkReady;                                     // 0x02C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isChargingBlink;                                  // 0x02C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isFullyCharged;                                   // 0x02C2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C3[0x5];                                      // 0x02C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          _blinkSequence;                                    // 0x02C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isChainBlinking;                                  // 0x02D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBlinking;                                       // 0x02D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D2[0x2];                                      // 0x02D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _blinkPlayRate;                                    // 0x02D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          _cooldownSequence;                                 // 0x02D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInCooldown;                                     // 0x02E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _cooldownPlayRate;                                 // 0x02E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isChainBlinkAttacking;                            // 0x02E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isNurse;                                          // 0x02E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2EA[0x26];                                     // 0x02EA(0x0026)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimEffectHandler*                     _animEffectHandlerForSFX;                          // 0x0310(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimEffectHandler*                     _animEffectHandlerForVFX;                          // 0x0318(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UAnimEffectHandler>         _animEffectHandlerClassForSFX;                     // 0x0320(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UAnimEffectHandler>         _animEffectHandlerClassForVFX;                     // 0x0328(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ASlasherPlayer*                         _mySlasher;                                        // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBlinkTriggered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NurseAnimInstance">();
	}
	static class UNurseAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNurseAnimInstance>();
	}
};
static_assert(alignof(UNurseAnimInstance) == 0x000010, "Wrong alignment on UNurseAnimInstance");
static_assert(sizeof(UNurseAnimInstance) == 0x000340, "Wrong size on UNurseAnimInstance");
static_assert(offsetof(UNurseAnimInstance, _isBlinkReady) == 0x0002C0, "Member 'UNurseAnimInstance::_isBlinkReady' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _isChargingBlink) == 0x0002C1, "Member 'UNurseAnimInstance::_isChargingBlink' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _isFullyCharged) == 0x0002C2, "Member 'UNurseAnimInstance::_isFullyCharged' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _blinkSequence) == 0x0002C8, "Member 'UNurseAnimInstance::_blinkSequence' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _isChainBlinking) == 0x0002D0, "Member 'UNurseAnimInstance::_isChainBlinking' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _isBlinking) == 0x0002D1, "Member 'UNurseAnimInstance::_isBlinking' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _blinkPlayRate) == 0x0002D4, "Member 'UNurseAnimInstance::_blinkPlayRate' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _cooldownSequence) == 0x0002D8, "Member 'UNurseAnimInstance::_cooldownSequence' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _isInCooldown) == 0x0002E0, "Member 'UNurseAnimInstance::_isInCooldown' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _cooldownPlayRate) == 0x0002E4, "Member 'UNurseAnimInstance::_cooldownPlayRate' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _isChainBlinkAttacking) == 0x0002E8, "Member 'UNurseAnimInstance::_isChainBlinkAttacking' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _isNurse) == 0x0002E9, "Member 'UNurseAnimInstance::_isNurse' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _animEffectHandlerForSFX) == 0x000310, "Member 'UNurseAnimInstance::_animEffectHandlerForSFX' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _animEffectHandlerForVFX) == 0x000318, "Member 'UNurseAnimInstance::_animEffectHandlerForVFX' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _animEffectHandlerClassForSFX) == 0x000320, "Member 'UNurseAnimInstance::_animEffectHandlerClassForSFX' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _animEffectHandlerClassForVFX) == 0x000328, "Member 'UNurseAnimInstance::_animEffectHandlerClassForVFX' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _mySlasher) == 0x000330, "Member 'UNurseAnimInstance::_mySlasher' has a wrong offset!");

// Class TheNurse.NurseAttackPicker
// 0x0010 (0x00C8 - 0x00B8)
class UNurseAttackPicker final : public USlasherAttackPickerComponent
{
public:
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NurseAttackPicker">();
	}
	static class UNurseAttackPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNurseAttackPicker>();
	}
};
static_assert(alignof(UNurseAttackPicker) == 0x000008, "Wrong alignment on UNurseAttackPicker");
static_assert(sizeof(UNurseAttackPicker) == 0x0000C8, "Wrong size on UNurseAttackPicker");

// Class TheNurse.NurseFXInterface
// 0x0000 (0x0000 - 0x0000)
class INurseFXInterface final
{
public:
	void Cosmetic_OnSpasmodicBreathAddonEffectActive(bool activeValue);
	void Cosmetic_SpawnSpasmodicBreathVignette();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NurseFXInterface">();
	}
	static class INurseFXInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INurseFXInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(INurseFXInterface) == 0x000001, "Wrong alignment on INurseFXInterface");
static_assert(sizeof(INurseFXInterface) == 0x000001, "Wrong size on INurseFXInterface");

// Class TheNurse.NurseHelper
// 0x0000 (0x0030 - 0x0030)
class UNurseHelper final : public UBlueprintFunctionLibrary
{
public:
	static class ABlinkPowerItem* GetBlinkPowerItem(class ADBDPlayer* player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NurseHelper">();
	}
	static class UNurseHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNurseHelper>();
	}
};
static_assert(alignof(UNurseHelper) == 0x000008, "Wrong alignment on UNurseHelper");
static_assert(sizeof(UNurseHelper) == 0x000030, "Wrong size on UNurseHelper");

// Class TheNurse.SpasmodicBreathAddon
// 0x0030 (0x02E8 - 0x02B8)
class USpasmodicBreathAddon final : public UItemAddon
{
public:
	uint8                                         Pad_2B8[0x10];                                     // 0x02B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UStatusEffect*                          _speedEffect;                                      // 0x02C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStatusEffect*                          _indicatorEffect;                                  // 0x02D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D8[0x4];                                      // 0x02D8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _speedModifier;                                    // 0x02DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _activationDuration;                               // 0x02E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpasmodicBreathAddon">();
	}
	static class USpasmodicBreathAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpasmodicBreathAddon>();
	}
};
static_assert(alignof(USpasmodicBreathAddon) == 0x000008, "Wrong alignment on USpasmodicBreathAddon");
static_assert(sizeof(USpasmodicBreathAddon) == 0x0002E8, "Wrong size on USpasmodicBreathAddon");
static_assert(offsetof(USpasmodicBreathAddon, _speedEffect) == 0x0002C8, "Member 'USpasmodicBreathAddon::_speedEffect' has a wrong offset!");
static_assert(offsetof(USpasmodicBreathAddon, _indicatorEffect) == 0x0002D0, "Member 'USpasmodicBreathAddon::_indicatorEffect' has a wrong offset!");
static_assert(offsetof(USpasmodicBreathAddon, _speedModifier) == 0x0002DC, "Member 'USpasmodicBreathAddon::_speedModifier' has a wrong offset!");
static_assert(offsetof(USpasmodicBreathAddon, _activationDuration) == 0x0002E0, "Member 'USpasmodicBreathAddon::_activationDuration' has a wrong offset!");

// Class TheNurse.StreetwiseEffect
// 0x0030 (0x0388 - 0x0358)
class UStreetwiseEffect final : public UBaseLingeringStatusEffect
{
public:
	float                                         _range;                                            // 0x0358(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_35C[0x2C];                                     // 0x035C(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnInRangeChanged(const bool inRange);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StreetwiseEffect">();
	}
	static class UStreetwiseEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStreetwiseEffect>();
	}
};
static_assert(alignof(UStreetwiseEffect) == 0x000008, "Wrong alignment on UStreetwiseEffect");
static_assert(sizeof(UStreetwiseEffect) == 0x000388, "Wrong size on UStreetwiseEffect");
static_assert(offsetof(UStreetwiseEffect, _range) == 0x000358, "Member 'UStreetwiseEffect::_range' has a wrong offset!");

// Class TheNurse.ThanatophobiaEffect
// 0x0008 (0x0358 - 0x0350)
class UThanatophobiaEffect final : public UStatusEffect
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ThanatophobiaEffect">();
	}
	static class UThanatophobiaEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UThanatophobiaEffect>();
	}
};
static_assert(alignof(UThanatophobiaEffect) == 0x000008, "Wrong alignment on UThanatophobiaEffect");
static_assert(sizeof(UThanatophobiaEffect) == 0x000358, "Wrong size on UThanatophobiaEffect");

// Class TheNurse.ThanatophobiaPerk
// 0x0080 (0x0500 - 0x0480)
class UThanatophobiaPerk final : public UBaseNursePerk
{
public:
	uint8                                         Pad_480[0x18];                                     // 0x0480(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _actionSpeedModifier[0x3];                         // 0x0498(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _additionalActionSpeedModifier[0x3];               // 0x04A4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _numSurvivorsForAdditionalSpeedModifier;           // 0x04B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B4[0x4C];                                     // 0x04B4(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ThanatophobiaPerk">();
	}
	static class UThanatophobiaPerk* GetDefaultObj()
	{
		return GetDefaultObjImpl<UThanatophobiaPerk>();
	}
};
static_assert(alignof(UThanatophobiaPerk) == 0x000008, "Wrong alignment on UThanatophobiaPerk");
static_assert(sizeof(UThanatophobiaPerk) == 0x000500, "Wrong size on UThanatophobiaPerk");
static_assert(offsetof(UThanatophobiaPerk, _actionSpeedModifier) == 0x000498, "Member 'UThanatophobiaPerk::_actionSpeedModifier' has a wrong offset!");
static_assert(offsetof(UThanatophobiaPerk, _additionalActionSpeedModifier) == 0x0004A4, "Member 'UThanatophobiaPerk::_additionalActionSpeedModifier' has a wrong offset!");
static_assert(offsetof(UThanatophobiaPerk, _numSurvivorsForAdditionalSpeedModifier) == 0x0004B0, "Member 'UThanatophobiaPerk::_numSurvivorsForAdditionalSpeedModifier' has a wrong offset!");

}

