#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CoreUtilities

#include "Basic.hpp"

#include "CoreUtilities_classes.hpp"
#include "CoreUtilities_parameters.hpp"


namespace SDK
{

// Function CoreUtilities.CoreUtilities.GetGameInstance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    worldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameInstance*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameInstance* UCoreUtilities::GetGameInstance(const class UObject* worldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreUtilities", "GetGameInstance");

	Params::CoreUtilities_GetGameInstance Parms{};

	Parms.worldContextObject = worldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreUtilities.CoreUtilities.GetRandomValuesFromArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             numberOfDesiredValues                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UCoreUtilities::GetRandomValuesFromArray(const TArray<int32>& values, const int32 numberOfDesiredValues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreUtilities", "GetRandomValuesFromArray");

	Params::CoreUtilities_GetRandomValuesFromArray Parms{};

	Parms.values = std::move(values);
	Parms.numberOfDesiredValues = numberOfDesiredValues;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function CoreUtilities.PropertyParser.CopyProperties
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  dest                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UActorComponent*            origin                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    copyTransform                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              propertiesToExclude                                    (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UPropertyParser::CopyProperties(class UActorComponent* dest, const class UActorComponent* origin, bool copyTransform, const TArray<class FName>& propertiesToExclude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PropertyParser", "CopyProperties");

	Params::PropertyParser_CopyProperties Parms{};

	Parms.dest = dest;
	Parms.origin = origin;
	Parms.copyTransform = copyTransform;
	Parms.propertiesToExclude = std::move(propertiesToExclude);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

