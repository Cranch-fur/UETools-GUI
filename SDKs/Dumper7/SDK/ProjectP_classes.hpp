#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProjectP

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "PhysicsCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "ProjectP_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ProjectPContentInfo_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"
#include "NiagaraAnimNotifies_classes.hpp"
#include "ApexDestruction_classes.hpp"
#include "Niagara_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "CinematicCamera_classes.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Class ProjectP.LGameSubSystem
// 0x0048 (0x0078 - 0x0030)
class ULGameSubSystem : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SpawnedSystemData;                                 // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 SystemLibraryClass;                                // 0x0058(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UClass*                                 SystemDataClass;                                   // 0x0060(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 DefaultSystemData;                                 // 0x0068(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InitialPriority;                                   // 0x0070(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGameSubSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGameSubSystem")
	}
	static class ULGameSubSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULGameSubSystem>();
	}
};
DUMPER7_ASSERTS_ULGameSubSystem;

// Class ProjectP.LFXSystem
// 0x0450 (0x04C8 - 0x0078)
class ULFXSystem final : public ULGameSubSystem
{
public:
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ALFXSystemData*                         SystemData;                                        // 0x0080(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_88[0x20];                                      // 0x0088(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLSwingSFXTable                        SwingSFXTable;                                     // 0x00A8(0x0058)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLHitFxTable                           HitFxTable;                                        // 0x0100(0x0008)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLHitSFXTable                          HitSFXTable;                                       // 0x0108(0x0008)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLSplashBloodFxTable                   SplashBloodFxTable;                                // 0x0110(0x0008)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLCameraShakeTable                     CameraShakeTable;                                  // 0x0118(0x0008)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLSmashFxTable                         SmashFxTable;                                      // 0x0120(0x0008)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLPhysicalSurfaceFxTable               PhysicalSurfaceFxTable;                            // 0x0128(0x0058)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLPhysicalSurfaceSoundTable            PhysicalSurfaceSoundTable;                         // 0x0180(0x0058)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLCharacterSoundTable                  CharacereSDTable;                                  // 0x01D8(0x0058)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLFxAttachCommonTable                  FxAttachCommonTable;                               // 0x0230(0x0008)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLWeatherFxTable                       WeatherFxTable;                                    // 0x0238(0x0008)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLWeatherSoundTable                    WeatherSoundTable;                                 // 0x0240(0x0008)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLEnvSoundTable                        EnvSoundTable;                                     // 0x0248(0x0008)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLBladeTrailTable                      BladeTrailTable;                                   // 0x0250(0x0008)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLSparkFxTable                         SparkFxTable;                                      // 0x0258(0x0058)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLSparkSoundTable                      SparkSoundTable;                                   // 0x02B0(0x0058)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLRepulseFxTable                       RepulseFxTable;                                    // 0x0308(0x0058)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLRepulseSoundTable                    RepulseSoundTable;                                 // 0x0360(0x0058)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLSoundCueTable                        SoundCueTable;                                     // 0x03B8(0x0008)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLHitLevelTable                        HitLevelTable;                                     // 0x03C0(0x0008)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C8[0x8];                                      // 0x03C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLPlaySoundNotify_TimeChecker          PlaySoundNotify_TimeChecker;                       // 0x03D0(0x0058)(NativeAccessSpecifierPublic)
	TMap<class FString, class UFXSystemComponent*> SpawnedFxSystemComponentHolder;                   // 0x0428(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FString, class UAudioComponent*>   SpawnedAudioComponentHolder;                       // 0x0478(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void DetachEffectHardly(struct FLAttachedEffectSet* Attached);
	void DoFrenzyModeMV(class ALCharacter* InTarget, bool bFrenzyMode);
	void DoHitEffect(const struct FLHitFXPlayData& HitFXPlayData);
	void DoSmashEffect(const struct FLSmashFXPlayData& SmashFxPlayData);
	void DoSocketTracerHitEffect_FX(class FName EventName, const struct FTransform& HitTransform, ELPhysicalSurfaceType AttackerPhysicalSurface, ELPhysicalSurfaceType GroundPhysicalSurface);
	void DoSocketTracerHitEffect_SFX(class FName EventName, const struct FTransform& HitTransform, ELPhysicalSurfaceType AttackerPhysicalSurface, ELPhysicalSurfaceType GroundPhysicalSurface);
	void DoWeaponBladeDestroyEffect(const struct FVector& Location);
	TSoftObjectPtr<class ULMaterialVarying> GetWeaponMaterialVarying(class FName MaterialFxCodename);
	class UNiagaraSystem* GetWeaponTrailElementFX(class FName ElementFXCodename);
	void OnBeginTalk();
	void OnDetachNiagaraDelegate(class UNiagaraComponent* InNiagaraComp);
	void OnDetachParticleDelegate(class UParticleSystemComponent* InParticleComp);
	void OnEndTalk();
	void OnFuryAttack(class ALNPCCharacter* InTarget);
	void OnParalyzationOcurred(class AActor* Victim);
	void OnPulseRecharged();
	void OnTorsionCoilPostProcess();
	void SetFatalIndicatorState(class FName IndicatorKey, class ALCharacter* TargetActor, ELFatalIndicatorState PrevState, ELFatalIndicatorState CurrentState, const struct FTransform& FxTransform);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LFXSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LFXSystem")
	}
	static class ULFXSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULFXSystem>();
	}
};
DUMPER7_ASSERTS_ULFXSystem;

// Class ProjectP.LActPayloadBase
// 0x0008 (0x0030 - 0x0028)
class ULActPayloadBase : public UObject
{
public:
	class FName                                   CodeName;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActPayloadBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActPayloadBase")
	}
	static class ULActPayloadBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActPayloadBase>();
	}
};
DUMPER7_ASSERTS_ULActPayloadBase;

// Class ProjectP.LSpot
// 0x00B0 (0x02D0 - 0x0220)
class ALSpot : public AActor
{
public:
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ELSpotType                                    SpotType;                                          // 0x0228(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OwnerLevelName;                                    // 0x022C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceId;                                        // 0x0234(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpotUniqueID;                                      // 0x0238(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpotCodeName;                                      // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WorldEventCodeName;                                // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActorSpawnable;                                    // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnDistanceScale;                                // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnDistanceScaleByCode;                          // 0x0260(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpotVolumeOverlapCount;                            // 0x0264(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIncludeSpotVolume : 1;                            // 0x0268(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTouchedTalker : 1;                                // 0x0268(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TalkerCodeName;                                    // 0x026C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLSpotOptionInfo                       OptionInfo;                                        // 0x0274(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_275[0x3];                                      // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLPreloadBox                           PreloadInstance;                                   // 0x0278(0x0030)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8[0x11];                                     // 0x02A8(0x0011)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ReserveActorSpawn;                                 // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReserveActorDespawn;                               // 0x02BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BB[0x5];                                      // 0x02BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpotMatchInfoPtr                      SpotMatchInfo;                                     // 0x02C0(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CheckedSpotMatchInfo;                              // 0x02C8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResultSpotMatchInfo;                               // 0x02C9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPreloadSpotSetting                          PreloadSpotSetting;                                // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CB[0x5];                                      // 0x02CB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpot")
	}
	static class ALSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALSpot>();
	}
};
DUMPER7_ASSERTS_ALSpot;

// Class ProjectP.LPropSpot
// 0x0088 (0x0358 - 0x02D0)
class ALPropSpot : public ALSpot
{
public:
	int32                                         PropState;                                         // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  SpawnedActor;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SaveFlag;                                          // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RespawnFlag;                                       // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E2[0x6];                                      // 0x02E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLLinkedPropInfo>               LinkedPropInfoList;                                // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<struct FLLinkedNpcSpot>                LinkedNpcSpotList;                                 // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	class ULPropComponent*                        PropComponent;                                     // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULWorldEventComponent*                  WorldEventComponent;                               // 0x0310(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        SpotSoundComponent;                                // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULPropInteractCollisionComponent*       InteractCollisionComponent;                        // 0x0320(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULPropInteractStartComponent*           InteractStartComponent;                            // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULPropSoundLocationComponent*           SoundLocationComponent;                            // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReservedLinkedState;                               // 0x0338(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ALPropSpot* TargetPropSpot)> OnSpawnedActor;                 // 0x0340(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnChangePropStateFromLevelObject(int32 TargetState);
	void OnCheckLinkedNpcSpotFromLevelObject(ELLinkedNpcSpotExecuteType ExecuteType);
	void OnCheckNextPropStateFromLevelObject();
	void OnComponentBeginOverlapPropVolume(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnComponentEndOverlapPropVolume(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropSpot")
	}
	static class ALPropSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPropSpot>();
	}
};
DUMPER7_ASSERTS_ALPropSpot;

// Class ProjectP.LBossRoomSpot
// 0x0078 (0x03D0 - 0x0358)
class ALBossRoomSpot final : public ALPropSpot
{
public:
	TArray<class ALPropShapeObjectSpot*>          FogGateSpotList;                                   // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class ALPropDoorSpot*                         BossDoorSpot;                                      // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALPropShapeObjectSpot*                  BossDoorShapeObjectSpot;                           // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ALNPCSpot*>                      BossNpcSpotList;                                   // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class ALPropHelpMateSpot*                     PropHelpMateSpot;                                  // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALNPCSpot*                              NPCHelpMateSpot;                                   // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULPropVolumeComponent*                  PC_ErgoDrop_Fix_Volume;                            // 0x0398(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        PC_ErgoDrop_Fix_Pos;                               // 0x03A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BossNpcCodeName;                                   // 0x03A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          BossIsDead;                                        // 0x03B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsPlayerInVolume;                                  // 0x03B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          NpcDefaultState;                                   // 0x03B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          OnDeadBossUIEvent;                                 // 0x03B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ALPropSpot>              ControlledBossDoor;                                // 0x03B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CheckDefaultStatus;                                // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3BD[0x3];                                      // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         DefaultActorSpawnableList;                         // 0x03C0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnDeadRewardUseOtherSystem(class AActor* TargetActor);
	void OnDeadSpawnNpc(class ALNPCSpot* TargetNpcSpot);
	void OnSpawnedActor(class ALPropSpot* TargetPropSpot);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBossRoomSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBossRoomSpot")
	}
	static class ALBossRoomSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALBossRoomSpot>();
	}
};
DUMPER7_ASSERTS_ALBossRoomSpot;

// Class ProjectP.LDialogDebugInfo
// 0x0060 (0x0088 - 0x0028)
class ULDialogDebugInfo final : public UObject
{
public:
	class FName                                   NPCCodeName;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TalkerCodeName;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLSingleDialogDebugInfo                Main;                                              // 0x0038(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FLSingleDialogDebugInfo>        Menu;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)

public:
	class FString ToString() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDialogDebugInfo")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDialogDebugInfo")
	}
	static class ULDialogDebugInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULDialogDebugInfo>();
	}
};
DUMPER7_ASSERTS_ULDialogDebugInfo;

// Class ProjectP.LDurableAbnormalBPFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULDurableAbnormalBPFuncLibrary final : public UObject
{
public:
	static struct FAbnormalStateCommonInfoPtr GetInfo(const struct FLDurableAbnormalBPPtr& In);
	static int64 GetUniqueId(const struct FLDurableAbnormalBPPtr& In);

	int32 GetRemainDuration(const struct FLDurableAbnormalBPPtr& In);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDurableAbnormalBPFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDurableAbnormalBPFuncLibrary")
	}
	static class ULDurableAbnormalBPFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULDurableAbnormalBPFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULDurableAbnormalBPFuncLibrary;

// Class ProjectP.LAnimNotifyStateBase
// 0x0010 (0x0040 - 0x0030)
class ULAnimNotifyStateBase : public UAnimNotifyState
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Enabled;                                           // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyStateBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyStateBase")
	}
	static class ULAnimNotifyStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyStateBase>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyStateBase;

// Class ProjectP.LAnimNotifyState_Reset_PralyzeGroggy
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_Reset_PralyzeGroggy final : public ULAnimNotifyStateBase
{
public:
	bool                                          Groggy;                                            // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Reset_PralyzeGroggy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Reset_PralyzeGroggy")
	}
	static class ULAnimNotifyState_Reset_PralyzeGroggy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Reset_PralyzeGroggy>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Reset_PralyzeGroggy;

// Class ProjectP.LBTComposite_Bool
// 0x0000 (0x0090 - 0x0090)
class ULBTComposite_Bool final : public UBTCompositeNode
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBTComposite_Bool")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBTComposite_Bool")
	}
	static class ULBTComposite_Bool* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBTComposite_Bool>();
	}
};
DUMPER7_ASSERTS_ULBTComposite_Bool;

// Class ProjectP.LActPayload_HitAnim
// 0x0150 (0x0180 - 0x0030)
class ULActPayload_HitAnim final : public ULActPayloadBase
{
public:
	class AActor*                                 Attacker;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLHitInfo                              HitInfo;                                           // 0x0038(0x0140)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, ExposeOnSpawn, NativeAccessSpecifierPublic)
	bool                                          Cached_IsBackHit;                                  // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActPayload_HitAnim")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActPayload_HitAnim")
	}
	static class ULActPayload_HitAnim* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActPayload_HitAnim>();
	}
};
DUMPER7_ASSERTS_ULActPayload_HitAnim;

// Class ProjectP.LAbnormalCalculator
// 0x0008 (0x0030 - 0x0028)
class ULAbnormalCalculator final : public UObject
{
public:
	TWeakObjectPtr<class ALCharacter>             OwnerCharacter;                                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAbnormalCalculator")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAbnormalCalculator")
	}
	static class ULAbnormalCalculator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAbnormalCalculator>();
	}
};
DUMPER7_ASSERTS_ULAbnormalCalculator;

// Class ProjectP.LHumanitySystem
// 0x0040 (0x00B8 - 0x0078)
class ULHumanitySystem final : public ULGameSubSystem
{
public:
	class ULHumanityDB*                           HumanityDB;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FHumanizationBuffAlterInfoPtr& BuffAlterInfo)> OnSatisfiedBuffAlter; // 0x0080(0x0010)(Edit, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FHumanizationBuffAddInfoPtr>    Applied_BuffAdd;                                   // 0x0090(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHumanityAcquisitionPopupEnded();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LHumanitySystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LHumanitySystem")
	}
	static class ULHumanitySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULHumanitySystem>();
	}
};
DUMPER7_ASSERTS_ULHumanitySystem;

// Class ProjectP.LAbnormalComponent
// 0x0130 (0x01E0 - 0x00B0)
class ULAbnormalComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x10];                                      // 0x00B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ALCharacter>             OwnerCharacter;                                    // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULAbnormalCalculator*                   AbnormalCalculator;                                // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLAbnormalFromOther>            AppliedFromOthers;                                 // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x18];                                      // 0x00F0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool IsApply, class FName AbnormalCodeName)> OnApplyRunningAbnormal; // 0x0108(0x0010)(Edit, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0xC8];                                     // 0x0118(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BuildupHitBP(const struct FLCalcBuildupData& InBuildupData);
	TArray<struct FLCalcBuildupData> CalcDirectBuildupHitByHit(const struct FLHitInfo& InHitInfo, int32 InSkillBuildupDamage, int32 InFireBuildupDamage, int32 InElectricBuildupDamage, int32 InAcidBuildupDamage);
	int32 GetAppliedAbnormalMaxDurationByUniqueId(int64 InAbnormalUniqueId);
	int32 GetAppliedAbnormalRemainDurationByUniqueId(int64 InAbnormalUniqueId);
	void OnCaptureMoment(class AActor* Owner, const struct FMomentConditionCaptureInfo& Capture);
	void OnChooseOtherWeapon(const struct FLEquipItemSlot& EquipSlot);
	void OnPlayHideFX(bool IsHide);
	void OnRemoveAbnormalNiagaraFX(class UNiagaraComponent* InNiagaraComp);
	void OnRemoveAbnormalParticleFX(class UParticleSystemComponent* InParticleComp);
	void OnSatisfiedBuffAlter(const struct FHumanizationBuffAlterInfoPtr& InActiveBuffAlterInfo);
	int64 PutOn(const class FName& InAbnormalCodeName, bool ForceNewAbnormal);
	int64 PutOnByPayload(const class FName& InAbnormalCodeName, const struct FLAbnormalPayload& InPayload);
	int64 PutOnWithInstigator(const class FName& InAbnormalCodeName, class UObject* InInstigator);
	int64 PutOnWithReason(const class FName& InAbnormalCodeName, const class FName& InReasonCodeName);
	void RequestBroadcast_NPCElementUI();
	void TakeOff(const class FName& InAbnormalCodeName, bool Immediately);
	void TakeOffAllByInstigator(class UObject* InInstigator, bool Immediately);
	void TakeOffByGroup(const class FName& IGroupCodeName, bool Immediately);
	void TakeOffByInstigator(const class FName& InAbnormalCodeName, class UObject* InInstigator, bool Immediately);
	void TakeOffByUniqueId(int64 InAbnormalUniqueId, bool Immediately);

	TArray<struct FLDurableAbnormalBPPtr> GetAppliedAbnormals() const;
	bool IsAppliedAbnormal(const class FName& InAbnormalCodeName) const;
	int32 IsAppliedAbnormalCount(const class FName& InAbnormalCodeName) const;
	bool IsAppliedGroupAbnormal(const class FName& GroupCodename) const;
	bool IsBuildupAbnormal(const class FName& InAbnormalCodeName) const;
	bool IsGaugeAbnormal(const class FName& InAbnormalCodeName) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAbnormalComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAbnormalComponent")
	}
	static class ULAbnormalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAbnormalComponent>();
	}
};
DUMPER7_ASSERTS_ULAbnormalComponent;

// Class ProjectP.LBTask_BlueprintBase
// 0x0008 (0x00B0 - 0x00A8)
class ULBTask_BlueprintBase final : public UBTTask_BlueprintBase
{
public:
	class ALAIController*                         LAIOwner;                                          // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class FString GetBehaivorTreeNodeName();
	void OnPostEditChangeProperty();
	void SetBehaivorTreeNodeName(const class FString& Name_0);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBTask_BlueprintBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBTask_BlueprintBase")
	}
	static class ULBTask_BlueprintBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBTask_BlueprintBase>();
	}
};
DUMPER7_ASSERTS_ULBTask_BlueprintBase;

// Class ProjectP.LObjectDataDB
// 0x0020 (0x0048 - 0x0028)
class ULObjectDataDB final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGameDataCharacterSync(class ULCharacterSaveGame* CharacterSaveGame, bool bLoad);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LObjectDataDB")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LObjectDataDB")
	}
	static class ULObjectDataDB* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULObjectDataDB>();
	}
};
DUMPER7_ASSERTS_ULObjectDataDB;

// Class ProjectP.LAchievementSystem
// 0x00C8 (0x0140 - 0x0078)
class ULAchievementSystem final : public ULGameSubSystem
{
public:
	bool                                          bVisibleCompleteUI;                                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FLAchievementHierarchyInfo> AchievementDB;                              // 0x0080(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected)
	TMap<ELCallBackEventType, struct FLAchievementDetailInfoList> AutoCompleteAchievementDB;         // 0x00D0(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class FName AchievementCodeName)> OnCompleteAchievement;           // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName AchievementCodeName)> OnCompleteAchievementDetail;     // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	class FString MakeAchievementLog(const class FName& AchievementCodeName);
	void OnSendPlatform(class FName AchievementCodeName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAchievementSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAchievementSystem")
	}
	static class ULAchievementSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAchievementSystem>();
	}
};
DUMPER7_ASSERTS_ULAchievementSystem;

// Class ProjectP.LAnimNotifyState_CameraWork
// 0x0018 (0x0058 - 0x0040)
class ULAnimNotifyState_CameraWork final : public ULAnimNotifyStateBase
{
public:
	class FName                                   CameraWorkName;                                    // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationTime;                                      // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DontStopWhenNotifyEnd;                             // 0x004C(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ALCameraWork*                           CameraWork;                                        // 0x0050(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_CameraWork")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_CameraWork")
	}
	static class ULAnimNotifyState_CameraWork* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_CameraWork>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_CameraWork;

// Class ProjectP.LBTask_Test
// 0x0018 (0x0088 - 0x0070)
class ULBTask_Test final : public UBTTaskNode
{
public:
	EBTNodeResult                                 ResultType;                                        // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProgressingTime;                                   // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVLogToEachTask;                                   // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALAIController*                         LAIOwner;                                          // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBTask_Test")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBTask_Test")
	}
	static class ULBTask_Test* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBTask_Test>();
	}
};
DUMPER7_ASSERTS_ULBTask_Test;

// Class ProjectP.LActionClass
// 0x0000 (0x0028 - 0x0028)
class ULActionClass final : public UObject
{
public:
	static class FName ULActionClass_Common();
	static class FName ULActionClass_CommonMontage();
	static class FName ULActionClass_Dialoging();
	static class FName ULActionClass_Die();
	static class FName ULActionClass_DMG_STAND();
	static class FName ULActionClass_Down_Away();
	static class FName ULActionClass_Down_Drag();
	static class FName ULActionClass_Down_Stamp();
	static class FName ULActionClass_Down_Up();
	static class FName ULActionClass_Draw_Weapon();
	static class FName ULActionClass_Falling();
	static class FName ULActionClass_FatalAttack();
	static class FName ULActionClass_FatalAttack_Victim();
	static class FName ULActionClass_FatalAttack_Victim_BeforeHit();
	static class FName ULActionClass_FatalAttack_Victim_End();
	static class FName ULActionClass_Game_Start();
	static class FName ULActionClass_GetUpDash();
	static class FName ULActionClass_Grab();
	static class FName ULActionClass_Grabbed();
	static class FName ULActionClass_GrabRelease();
	static class FName ULActionClass_Grinder_Element();
	static class FName ULActionClass_Groggy();
	static class FName ULActionClass_Guard();
	static class FName ULActionClass_Guard_Break();
	static class FName ULActionClass_Guard_Hit_Heavy();
	static class FName ULActionClass_Guard_Hit_Normal();
	static class FName ULActionClass_Guard_Reflect();
	static class FName ULActionClass_Guard_Repulse();
	static class FName ULActionClass_IdleTurn();
	static class FName ULActionClass_IdleTurnEnd();
	static class FName ULActionClass_Interaction();
	static class FName ULActionClass_Jump();
	static class FName ULActionClass_KnockBack();
	static class FName ULActionClass_Landing();
	static class FName ULActionClass_Multiple();
	static class FName ULActionClass_None();
	static class FName ULActionClass_NpcGuard_Break();
	static class FName ULActionClass_NpcGuard_Hit();
	static class FName ULActionClass_NpcGuard_Hit_Repulse();
	static class FName ULActionClass_Object_Repulse();
	static class FName ULActionClass_Paralyzation();
	static class FName ULActionClass_Parry();
	static class FName ULActionClass_Put_Weapon();
	static class FName ULActionClass_SkillFailed();
	static class FName ULActionClass_SlaveArm();
	static class FName ULActionClass_SlaveArm_Visual_Idle();
	static class FName ULActionClass_SpawnIdle();
	static class FName ULActionClass_Sprint();
	static class FName ULActionClass_Sprint_Exhausted();
	static class FName ULActionClass_Sprint_TurnAround();
	static class FName ULActionClass_StopRunning();
	static class FName ULActionClass_StopSprint();
	static class FName ULActionClass_Teleport_End();
	static class FName ULActionClass_Teleport_Start();
	static class FName ULActionClass_ToughSpecialHit();
	static class FName ULActionClass_TurnAround();
	static class FName ULActionClass_Use_Item();
	static class FName ULActionClass_Weapon_Change();
	static class FName ULActionClass_Wire_Following();
	static class FName ULActionClass_Wire_Hit();
	static class FName ULActionClass_Wire_Pulling();
	static class FName ULActionClass_WireAction();
	static class FName ULActionClass_WireJumpSmash();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActionClass")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActionClass")
	}
	static class ULActionClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActionClass>();
	}
};
DUMPER7_ASSERTS_ULActionClass;

// Class ProjectP.LBTComposite_ForceSequence
// 0x0000 (0x0090 - 0x0090)
class ULBTComposite_ForceSequence final : public UBTCompositeNode
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBTComposite_ForceSequence")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBTComposite_ForceSequence")
	}
	static class ULBTComposite_ForceSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBTComposite_ForceSequence>();
	}
};
DUMPER7_ASSERTS_ULBTComposite_ForceSequence;

// Class ProjectP.LMonologControl
// 0x0028 (0x0050 - 0x0028)
class ULMonologControl final : public UObject
{
public:
	bool                                          PlayingFromInteractCollision;                      // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDialogInfoPtr                         Monolog;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RepeatCount;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepeatTimer;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PendingStop;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FText GetScriptText();
	void OnCompleteSingleMonologPlay();
	void PlayRepeat();

	bool IsValid() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LMonologControl")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LMonologControl")
	}
	static class ULMonologControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULMonologControl>();
	}
};
DUMPER7_ASSERTS_ULMonologControl;

// Class ProjectP.LActPayload_UseItem
// 0x0010 (0x0040 - 0x0030)
class ULActPayload_UseItem final : public ULActPayloadBase
{
public:
	class ULItem*                                 Item;                                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UseCount;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELItemUseOccurredFrom                         ItemUsedFrom;                                      // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPassedSlavearmAlterProcess;                      // 0x003D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActPayload_UseItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActPayload_UseItem")
	}
	static class ULActPayload_UseItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActPayload_UseItem>();
	}
};
DUMPER7_ASSERTS_ULActPayload_UseItem;

// Class ProjectP.LAnimNotifyState_ApplyInput_Parrying
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ApplyInput_Parrying final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ApplyInput_Parrying")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ApplyInput_Parrying")
	}
	static class ULAnimNotifyState_ApplyInput_Parrying* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ApplyInput_Parrying>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ApplyInput_Parrying;

// Class ProjectP.LBTreeFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULBTreeFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector GetBlackboardValueAsLocation(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBTreeFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBTreeFuncLibrary")
	}
	static class ULBTreeFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBTreeFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULBTreeFuncLibrary;

// Class ProjectP.LActPayload_Interaction
// 0x0010 (0x0040 - 0x0030)
class ULActPayload_Interaction final : public ULActPayloadBase
{
public:
	TScriptInterface<class ILInteractInterface>   InteractingComponent;                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActPayload_Interaction")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActPayload_Interaction")
	}
	static class ULActPayload_Interaction* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActPayload_Interaction>();
	}
};
DUMPER7_ASSERTS_ULActPayload_Interaction;

// Class ProjectP.LBTreeStateMachineData
// 0x0050 (0x0080 - 0x0030)
class ULBTreeStateMachineData final : public UDataAsset
{
public:
	TMap<class FName, struct FLBTreeState>        States;                                            // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBTreeStateMachineData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBTreeStateMachineData")
	}
	static class ULBTreeStateMachineData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBTreeStateMachineData>();
	}
};
DUMPER7_ASSERTS_ULBTreeStateMachineData;

// Class ProjectP.LReasonForDeathInfo
// 0x01D8 (0x0200 - 0x0028)
class ULReasonForDeathInfo final : public UObject
{
public:
	TWeakObjectPtr<class AActor>                  DeadBody;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deadtime;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLHitInfo                              DieCauseHitInfo;                                   // 0x0038(0x0140)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Murderer;                                          // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BodyExplode;                                       // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_ForcedDieActionByFalling;                     // 0x0184(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDieCauseType                                DieCauseType;                                      // 0x018C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAllowLieDying;                                   // 0x018D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18E[0x2];                                      // 0x018E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CurrentActionClassCodeName;                        // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurrentCommonActionMontage;                        // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSkillHitType                                LastSkillHitType;                                  // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NpcAssetTableCodeName;                             // 0x01A4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionGroupTableCodeName;                          // 0x01AC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCCodeName;                                       // 0x01B4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideDieMontageCodeName;                        // 0x01BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELHitMotionType                               DieCauseHitAction;                                 // 0x01C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELActionCategory                              DieCauseActionCategory;                            // 0x01C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalDamageType                          DieCausePhysicalDamageType;                        // 0x01C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C7[0x1];                                      // 0x01C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELDieCauseHitDirection>                DieCauseHitDirection;                              // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ELDieCauseElement                             DieCauseElement;                                   // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDieCauseFall                                DieCauseFall;                                      // 0x01D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELHitMotionType                               DieCauseHitActionOverride;                         // 0x01DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuiside;                                          // 0x01DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           OverrideDieAnim;                                   // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayDyingAnim;                                    // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableGenerateExp;                                // 0x01E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableGenerateItem;                               // 0x01EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOverrideNPCRespawnState;                       // 0x01EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideNPCRespawn;                               // 0x01EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HideCharacterTime;                                 // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DespawnCharacterTime;                              // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDieFromFatalAttack;                               // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDiedByKillZone;                                   // 0x01F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomDieUIShowTime;                           // 0x01FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FB[0x1];                                      // 0x01FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DieUI_StartDelay;                                  // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool IsDead();
	bool MakeNewRecord(class AActor* TargetActor, ELDieCauseType InDieCauseType);
	void Reset();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LReasonForDeathInfo")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LReasonForDeathInfo")
	}
	static class ULReasonForDeathInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULReasonForDeathInfo>();
	}
};
DUMPER7_ASSERTS_ULReasonForDeathInfo;

// Class ProjectP.LActPayload_Die
// 0x0008 (0x0038 - 0x0030)
class ULActPayload_Die final : public ULActPayloadBase
{
public:
	TWeakObjectPtr<class ULReasonForDeathInfo>    ReasonInfo;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActPayload_Die")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActPayload_Die")
	}
	static class ULActPayload_Die* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActPayload_Die>();
	}
};
DUMPER7_ASSERTS_ULActPayload_Die;

// Class ProjectP.LActPayload_TurnAround
// 0x0018 (0x0048 - 0x0030)
class ULActPayload_TurnAround final : public ULActPayloadBase
{
public:
	bool                                          bMoveRotation;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngleTurnAround;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cooltime;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddCooltime;                                      // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlaySpeed;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActPayload_TurnAround")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActPayload_TurnAround")
	}
	static class ULActPayload_TurnAround* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActPayload_TurnAround>();
	}
};
DUMPER7_ASSERTS_ULActPayload_TurnAround;

// Class ProjectP.LActPayload_CommonAction
// 0x0008 (0x0038 - 0x0030)
class ULActPayload_CommonAction final : public ULActPayloadBase
{
public:
	class FName                                   CommonActionMontageCodeName;                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActPayload_CommonAction")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActPayload_CommonAction")
	}
	static class ULActPayload_CommonAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActPayload_CommonAction>();
	}
};
DUMPER7_ASSERTS_ULActPayload_CommonAction;

// Class ProjectP.LAnimNotifyState_ReserveInput_Dash
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ReserveInput_Dash final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ReserveInput_Dash")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ReserveInput_Dash")
	}
	static class ULAnimNotifyState_ReserveInput_Dash* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ReserveInput_Dash>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ReserveInput_Dash;

// Class ProjectP.LActPayload_SlaveArm
// 0x0008 (0x0038 - 0x0030)
class ULActPayload_SlaveArm final : public ULActPayloadBase
{
public:
	ELActionCategory                              PreviousActionCategory;                            // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FulminisChargingStep;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActPayload_SlaveArm")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActPayload_SlaveArm")
	}
	static class ULActPayload_SlaveArm* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActPayload_SlaveArm>();
	}
};
DUMPER7_ASSERTS_ULActPayload_SlaveArm;

// Class ProjectP.LButton
// 0x0038 (0x0460 - 0x0428)
class ULButton final : public UButton
{
public:
	TMulticastInlineDelegate<void(const struct FFocusEvent& InFocusEvent)> OnFocused;                // 0x0428(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FFocusEvent& InFocusEvent)> OnUnfocused;              // 0x0438(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_448[0x10];                                     // 0x0448(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSelected;                                         // 0x0458(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSelected(bool bSelected_0);

	bool IsSelected() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LButton")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LButton")
	}
	static class ULButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULButton>();
	}
};
DUMPER7_ASSERTS_ULButton;

// Class ProjectP.LActPayload_GrabRelease
// 0x0010 (0x0040 - 0x0030)
class ULActPayload_GrabRelease final : public ULActPayloadBase
{
public:
	struct FLGrabReleaseInfo                      GrabReleaseInfo;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActPayload_GrabRelease")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActPayload_GrabRelease")
	}
	static class ULActPayload_GrabRelease* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActPayload_GrabRelease>();
	}
};
DUMPER7_ASSERTS_ULActPayload_GrabRelease;

// Class ProjectP.LAnimNotifyState_ChangePartsAnimState
// 0x0010 (0x0050 - 0x0040)
class ULAnimNotifyState_ChangePartsAnimState final : public ULAnimNotifyStateBase
{
public:
	class FName                                   PartsCodeName;                                     // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLPartsAnimStateType                   AnimStateName;                                     // 0x0048(0x0008)(Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ChangePartsAnimState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ChangePartsAnimState")
	}
	static class ULAnimNotifyState_ChangePartsAnimState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ChangePartsAnimState>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ChangePartsAnimState;

// Class ProjectP.LCalcStatFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULCalcStatFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool ApplyMaxStatMultiplier(class AActor* TargetChar, ELSecondStat SecondStatType, float Muliplier);
	static float CalcConsumeFrenzyAmount(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo, int32 FrenzyAmount);
	static float CalcConsumeGuardWeaponSharpness(class AActor* Victim);
	static int32 CalcConsumeWeaponSharpness_Attacker(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo, class ULPartsComponent* HitPartsComp);
	static int32 CalcConsumeWeaponSharpness_Victim(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo, class ULPartsComponent* HitPartsComp);
	static void CalcDamage(struct FLCalcDamageData& CalcDamageData, class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo, const struct FHitResult& HitResult, class ULHitProcContext* HitProcContext);
	static void CalcElementalDamage(struct FLCalcDamageData& CalcDamageData, class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo, const struct FHitResult& HitResult, class ULHitProcContext* HitProcContext);
	static float CalcEquipmentWeightRatio(class AActor* TargetActor);
	static float CalcEquipmentWeightRatioInGivenMaxWeight(class AActor* TargetActor, int32 InMaxWeight);
	static float CalcFallingDamage(class AActor* TargetActor);
	static float CalcFrenzyPoint_ForAttacker(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo);
	static float CalcFrenzyPoint_ForVictim(class AActor* Victim, const struct FLHitInfo& HitInfo, class ALWeapon* VictimWeapon, bool bPerfectGuard);
	static float CalcGroggy_ConsumablePoint(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo, float* OutGroggyAttackDamage, class ULPartsComponent* ReduceByPartsComp);
	static float CalcGroggy_MaintainTime(class AActor* TargetChar, const struct FLHitInfo& HitInfo);
	static float CalcGroggyEnableTimeAdd(class AActor* Attacker, class AActor* Victim, bool IsPerfectGuard, bool IsFuryAttack);
	static int32 CalcGuard_ConsumablePoint(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo);
	static float CalcGuard_GuardHitDuration(class AActor* TargetActor, const struct FLHitInfo& HitInfo);
	static float CalcGuard_PenetrationPower(class AActor* TargetActor, class FName SkillHitCodeName);
	static bool CalcHitIntensity(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo, float* OutHitIntensity);
	static float CalcParalyzation_ConsumablePoint(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo);
	static float CalcParalyzation_MaintainTime(class AActor* TargetChar);
	static float CalcPulseRechargePoint(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo);
	static float CalcRigidity(class AActor* TargetActor);
	static float CalcTough_DamageFinal(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo, float* OutToughAttackDamage);
	static float CalcTough_DamagePrimary(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo);
	static float CalcTough_DamageSecondary(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo);
	static bool CheckVictimInCounterEnableBP(class AActor* Attacker, class AActor* Victim, EExecutePin* Branches);
	static float GetAttackRatio_by_Stat(class AActor* Attacker, const struct FLHitInfo& HitInfo, ELPhysicalDamageType physicalDamageType);
	static int32 GetCharacterElementalAttack(class AActor* Character, class FName SkillHitCodeName, ELElementDamageType ElementalDamageType);
	static int32 GetCharacterElementalDefence(class AActor* Character, ELElementDamageType ElementalDamageType);
	static int32 GetCharacterPhysicalAttack(class AActor* Character, const struct FLHitInfo& HitInfo, ELPhysicalDamageType physicalDamageType);
	static int32 GetCharacterPhysicalDefence(class AActor* Character, ELPhysicalDamageType physicalDamageType);
	static float GetDestructionPower(class AActor* Attacker, const struct FLHitInfo& HitInfo);
	static int32 GetFirstStat(class UObject* WorldContextObject, ELFirstStatDataType DataType, ELFirstStat StatType, bool IsVirtual);
	static TArray<struct FLFirstStatData> GetFirstStatDataList(class UObject* WorldContextObject, bool IsVirtual);
	static int32 GetGuardPoint(class AActor* TargetActor);
	static int32 GetProjectileElementalAttack(class ALProjectile* Projectile, ELElementDamageType ElementalType);
	static int32 GetProjectilePhysicalAttack(class ALProjectile* Projectile);
	static int32 GetPulseRechargePointMax(int32 RechargeCount);
	static int32 GetSlaveArmElementalAttack(class AActor* Attacker, ELElementDamageType ElementalType);
	static int32 GetSlaveArmPhysicalAttack(class AActor* Attacker);
	static float GetSpecialBuffAttackMultiplier(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo);
	static class ULStatComponent* GetStatComponentBP(class AActor* TargetActor, EExecutePin* Branches);
	static int32 GetTotalDamage(struct FLCalcDamageData& CalcDamageData);
	static int32 GetWeaponSkillElementalAttack(class AActor* Character, class ALWeapon* AttackerWeapon, ELElementDamageType ElementalDamageType);
	static int32 GetWeaponSkillPhysicalAttack(class AActor* Character, class ALWeapon* AttackerWeapon, ELPhysicalDamageType physicalDamageType);
	static bool HasElementDamage(const struct FLCalcDamageData& CalcDamageData, ELElementDamageType ElementDamageType);
	static bool IsElementalAttack(class AActor* Attacker, const struct FLHitInfo& HitInfo, ELElementDamageType ElementalType);
	static bool IsElementalAttack_Impl(class AActor* Attacker, class FName SkillHitCodeName, class ALWeapon* AttackerWeapon, ELElementDamageType ElementalType);
	static ELPhysicalDamageType PickPhysicalDamagedType(class AActor* Attacker, const struct FLHitInfo& HitInfo);
	static void Test_ApplyCharacterStat(class AActor* Target, ELSecondStat StatType, int32 InputStat, bool ApplyMax, bool Broadcast);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCalcStatFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCalcStatFuncLibrary")
	}
	static class ULCalcStatFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULCalcStatFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULCalcStatFuncLibrary;

// Class ProjectP.LAnimNotifyBase
// 0x0010 (0x0048 - 0x0038)
class ULAnimNotifyBase : public UAnimNotify
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Enabled;                                           // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyBase")
	}
	static class ULAnimNotifyBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyBase>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyBase;

// Class ProjectP.LAnimNotify_HpRestore
// 0x0008 (0x0050 - 0x0048)
class ULAnimNotify_HpRestore final : public ULAnimNotifyBase
{
public:
	float                                         HPRestoreRatio;                                    // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HPRestoreValue;                                    // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_HpRestore")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_HpRestore")
	}
	static class ULAnimNotify_HpRestore* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_HpRestore>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_HpRestore;

// Class ProjectP.LActPayload_Teleport
// 0x0010 (0x0040 - 0x0030)
class ULActPayload_Teleport final : public ULActPayloadBase
{
public:
	bool                                          ActionTeleportStart;                               // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TeleportTarget;                                    // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActionTeleportEnd;                                 // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActionReconnect;                                   // 0x003D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActPayload_Teleport")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActPayload_Teleport")
	}
	static class ULActPayload_Teleport* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActPayload_Teleport>();
	}
};
DUMPER7_ASSERTS_ULActPayload_Teleport;

// Class ProjectP.LActPayload_Dialoging
// 0x0008 (0x0038 - 0x0030)
class ULActPayload_Dialoging final : public ULActPayloadBase
{
public:
	bool                                          CancelPrevMotion;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActPayload_Dialoging")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActPayload_Dialoging")
	}
	static class ULActPayload_Dialoging* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActPayload_Dialoging>();
	}
};
DUMPER7_ASSERTS_ULActPayload_Dialoging;

// Class ProjectP.LAnimNotifyState_GrappleGun_Reflect
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_GrappleGun_Reflect final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_GrappleGun_Reflect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_GrappleGun_Reflect")
	}
	static class ULAnimNotifyState_GrappleGun_Reflect* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_GrappleGun_Reflect>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_GrappleGun_Reflect;

// Class ProjectP.LCameraManager
// 0x0200 (0x2BF0 - 0x29F0)
class ALCameraManager final : public APlayerCameraManager
{
public:
	uint8                                         Pad_29F0[0xA8];                                    // 0x29F0(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLPlayerCameraData                     DefaultCameraData;                                 // 0x2A98(0x003C)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FLRotationAccordingToMovement          RotationAccordingToMovement;                       // 0x2AD4(0x0050)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bEnableImmediateControlRotation;                   // 0x2B24(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B25[0x3];                                     // 0x2B25(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               BodyLookAtCameraRotation;                          // 0x2B28(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B34[0x4];                                     // 0x2B34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULCameraWorkManager*                    WorkManager;                                       // 0x2B38(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraRotationLagSpeed;                            // 0x2B40(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInitToDefault;                                    // 0x2B44(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B45[0xAB];                                    // 0x2B45(0x00AB)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DestoryCameraWork(class ALCameraWork* CameraWork);
	void DisableShoulderView();
	void EnableMoveCameraUpDown(bool bEnable);
	void EnableShoulderView(const struct FVector& Offset, float BlendInTime, float BlendOutTime);
	struct FRotator GetBasicCameraRotation();
	class ALCameraWork* NewCameraWork(class FName CameraWorkName);
	void OnStopWorkFinish(class ALCameraWork* CameraWork);
	class ALCameraWork* PlayCameraWork(class FName CameraWorkName, class UObject* ObjectContext, const struct FTransform& TransformContext, float DurationTime);
	void RegisterCameraWork(class ALCameraWork* CameraWork);
	void ResetAllModifiers(class UObject* InInstigator);
	void ResetCameraDistanceModifier(class UObject* InInstigator);
	void ResetCameraLagSpeedModifier(const struct FLCameraAttrModifierID& ModifierID);
	void ResetCameraRotationLagSpeedModifier(const struct FLCameraAttrModifierID& ModifierID);
	void ResetLocationOffsetModifier(const struct FLCameraAttrModifierID& ModifierID);
	void SetCameraDistanceModifier(class UObject* InInstigator, float Distance, ELCameraModifierPriority Priority);
	void SetCameraLagSpeedModifier(const struct FLCameraAttrModifierID& ModifierID, float CameraLagSpeed, ELCameraModifierPriority Priority, const struct FLCameraAttrModifierBlendTime& BlendTime);
	void SetCameraRotationLagSpeedModifier(const struct FLCameraAttrModifierID& ModifierID, float CameraRotationLagSpeed_0, ELCameraModifierPriority Priority, const struct FLCameraAttrModifierBlendTime& BlendTime);
	void SetCharacterFastMovement(bool bFastMovement);
	void SetCineCamera(bool bAlignToCineCamera, bool bAlignToPlayerBack);
	void SetCinematicPlay(bool bPlaying);
	void SetControlRotation(const struct FRotator& Rotation);
	void SetControlRotationBack_Player();
	void SetControlRotationBack_PlayerInit();
	void SetControlRotationSmooth(const struct FRotator& Rotation);
	void SetDialogCamera(bool bEnable);
	void SetFollowingCamera(bool bFollowing);
	void SetLadderCamera(bool bLadderCamera);
	void SetLocationOffsetModifier(const struct FLCameraAttrModifierID& ModifierID, const struct FVector& LocationOffset, ELCameraModifierPriority Priority, const struct FLCameraAttrModifierBlendTime& BlendTime);
	void SetLockOnCamera();
	void SetMovingCamera();
	void SpawnCameraWorkByName(class FName CameraWorkName, class ALCameraWork** CameraWork);

	struct FRotator GetBodyLookAtCameraRotation() const;
	float GetCameraDistanceValue() const;
	const struct FLPlayerCameraData GetDefaultCameraData() const;
	class ALCameraWork* GetPlayingCameraWork() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCameraManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCameraManager")
	}
	static class ALCameraManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALCameraManager>();
	}
};
DUMPER7_ASSERTS_ALCameraManager;

// Class ProjectP.LAnimNotifyState_FuryAttack
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_FuryAttack final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_FuryAttack")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_FuryAttack")
	}
	static class ULAnimNotifyState_FuryAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_FuryAttack>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_FuryAttack;

// Class ProjectP.LActionStopReason
// 0x0000 (0x0028 - 0x0028)
class ULActionStopReason final : public UObject
{
public:
	static class FName ActionStopReason_CancelDash();
	static class FName ActionStopReason_CancelMove();
	static class FName ActionStopReason_EscapeFromInfiniteGrabbing();
	static class FName ActionStopReason_Explode();
	static class FName ActionStopReason_GrabFailed();
	static class FName ActionStopReason_None();
	static class FName ActionStopReason_PayloadInvalid();
	static class FName ActionStopReason_PlayAnimFailed();
	static class FName ActionStopReason_Sequencer();
	static class FName ActionStopReason_StaminaExhausted();
	static class FName ActionStopReason_Tutorial();
	static class FName ActionStopReason_UnexpectedBehaviour();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActionStopReason")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActionStopReason")
	}
	static class ULActionStopReason* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActionStopReason>();
	}
};
DUMPER7_ASSERTS_ULActionStopReason;

// Class ProjectP.LCameraWork
// 0x0120 (0x0340 - 0x0220)
class ALCameraWork final : public AActor
{
public:
	TMulticastInlineDelegate<void(class ALCameraWork* CameraWork)> OnStopWorkFinish;                 // 0x0220(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FLViewTargetTransitionParams           BlendInTransitionParams;                           // 0x0230(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FLViewTargetTransitionParams           BlendOutTransitionParams;                          // 0x023C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CustomTransform;                                   // 0x0250(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DurationTime;                                      // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0284(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOnBlend;                                       // 0x0288(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOnFullyBlend;                                  // 0x028C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendAlpha;                                        // 0x0290(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELCameraWorkBlendState                        BlendState;                                        // 0x0294(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLCameraWorkViewInfo                   BlendChangeViewInfo;                               // 0x0298(0x001C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLCameraWorkViewInfo                   RecentlyViewInfo;                                  // 0x02B4(0x001C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLCameraWorkViewInfo                   ResultViewInfo;                                    // 0x02D0(0x001C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULCameraWorkManager*                    WorkManager;                                       // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALCameraManager*                        CameraOwner;                                       // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartWorking;                                     // 0x0300(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_301[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UObject>                 ObjectContext;                                     // 0x0304(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransformContext;                                  // 0x0310(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	void OnChangeBlend(ELCameraWorkBlendState CameraWorkBlendState);
	void OnPreWork(bool* bCanStartWorking);
	void OnStartWork();
	void OnStopWork();
	void ResetWork(class APlayerCameraManager* Manager, class ULCameraWorkManager* WorkManager_0);
	void SetPostProcess(float PostProcessBlendWeight, const struct FPostProcessSettings& PostProcessSettings);
	void SetViewInfo(const struct FLCameraWorkViewInfo& ViewInfo);
	bool StartWork(float DurationTime_0);
	void StopWork();
	void StopWorkFinish();
	void UpdatePostProcess(float DeltaTime);
	void UpdateTargetView(float DeltaTime);
	void UpdateTargetViewBlendIn(float DeltaTime);
	void UpdateTargetViewBlendInFully(float DeltaTime);
	void UpdateTargetViewBlendOut(float DeltaTime);

	float GetElapsedAlpha(float Multiflier) const;
	bool HasDurationTime() const;
	bool IsWorking() const;
	void UpdateElapsedAlphaForBlend(float* LastElapsedAlaph, float* ResultAlpha, float MultiflierIn) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCameraWork")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCameraWork")
	}
	static class ALCameraWork* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALCameraWork>();
	}
};
DUMPER7_ASSERTS_ALCameraWork;

// Class ProjectP.LActBase
// 0x0128 (0x0150 - 0x0028)
class ULActBase : public UObject
{
public:
	uint8                                         Pad_28[0x9];                                       // 0x0028(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Reusable;                                          // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Tickable;                                          // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PlayingActor;                                      // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULActMgrComponent*                      ActMgr;                                            // 0x0040(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLActionInfo                           Info;                                              // 0x0048(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ULActPayloadBase*                       Payload;                                           // 0x00B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C0[0x90];                                      // 0x00C0(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddActionState(class FName ActionState);
	void ChangeActionImmuneState(bool Enable);
	bool OnPreProcessAction();
	void OnReset();
	void OnStart();
	void OnStop(class ULActBase* ReasonAction, class FName Reason);
	void OnStopByMe(class ULActBase* StoppingAction);
	void OnTick(float DeltaTime);
	bool ProcessValidLandingSpot(const struct FVector& CapsuleLocation, const struct FHitResult& Hit, bool IsValidLandingSpot);
	void RemoveActionState(class FName ActionState);
	bool Reset();
	bool SetActPayload(class ULActPayloadBase* InActPayload);
	bool SetTickable(bool InTickable);
	bool Start();
	bool Stop(class ULActBase* ReasonAction, class FName Reason);

	float GetActionTime_End() const;
	float GetActionTime_Start() const;
	class ULActPayloadBase* GetActPayload() const;
	bool IsPlaying() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActBase")
	}
	static class ULActBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActBase>();
	}
};
DUMPER7_ASSERTS_ULActBase;

// Class ProjectP.LAnimNotifyState_BareHand_On
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_BareHand_On final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_BareHand_On")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_BareHand_On")
	}
	static class ULAnimNotifyState_BareHand_On* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_BareHand_On>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_BareHand_On;

// Class ProjectP.LCameraWorkManager
// 0x0010 (0x0038 - 0x0028)
class ULCameraWorkManager final : public UObject
{
public:
	class ALCameraWork*                           CameraWorkPrevious;                                // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ALCameraWork*                           CameraWorkCurrent;                                 // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCameraWorkManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCameraWorkManager")
	}
	static class ULCameraWorkManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULCameraWorkManager>();
	}
};
DUMPER7_ASSERTS_ULCameraWorkManager;

// Class ProjectP.LAnimNotifyState_ApplyInput_WeaponChange
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ApplyInput_WeaponChange final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ApplyInput_WeaponChange")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ApplyInput_WeaponChange")
	}
	static class ULAnimNotifyState_ApplyInput_WeaponChange* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ApplyInput_WeaponChange>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ApplyInput_WeaponChange;

// Class ProjectP.LAction_SingleAnim
// 0x0068 (0x01B8 - 0x0150)
class ULAction_SingleAnim : public ULActBase
{
public:
	class UAnimSequenceBase*                      TargetAnim;                                        // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StopAllPreviousMontages : 1;                       // 0x0164(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         StopAnimOnShutdown : 1;                            // 0x0164(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrMontageInstanceID;                             // 0x0168(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             PlayingChar;                                       // 0x0170(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGameObjectHandle                     StartRotationModifierHandle;                       // 0x0178(0x0004)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLConditionalAnimBranchContext> Cached_ConditionalAnimBranchArray;                 // 0x0180(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x28];                                     // 0x0190(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool BindOnCurrMontageBlendOutStarted(int32 MontageInstanceID);
	bool BindOnCurrMontageEnded(int32 MontageInstanceID);
	void ConditionalAnimBranch(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, TSoftObjectPtr<class UAnimMontage> Montage, ELConditionalAnimBranch* OutBranchResult, class UObject** OutInstigator);
	void ConditionalAnimBranch_WithMontageInstanceID(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, int32 MontageInstanceID, ELConditionalAnimBranch* OutBranchResult, class UObject** OutInstigator);
	class UAnimInstance* GetAnimInst();
	class UAnimInstance* GetAnimInstBP(EExecutePin* Branches);
	class UAnimMontage* GetCurrMontage();
	int32 GetCurrMontageInstanceID(class UAnimInstance** AnimInstance, EExecutePin* Branches);
	class ACharacter* GetPlayingCharacter();
	void InitSingleAnim(bool LoadPayload);
	void OnCurrMontageBlendOutStarted(class UAnimMontage* Montage, bool bInterrupted, int32 MontageInstanceID);
	void OnCurrMontageEnded(class UAnimMontage* Montage, bool bInterrupted, int32 MontageInstanceID);
	bool OnLanded(class ACharacter* LandingChar, const struct FHitResult& Hit);
	bool OnMoveBlockedBy(class ACharacter* BlockedChar, const struct FHitResult& Hit);
	int32 PlayTargetAnim();
	int32 PlayTargetAnimBP(EExecutePin* Branches);
	void StartActionRotation(bool NeedRotator);
	bool StopTargetAnim();
	void UnBindOnCurrMontageEnded();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAction_SingleAnim")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAction_SingleAnim")
	}
	static class ULAction_SingleAnim* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAction_SingleAnim>();
	}
};
DUMPER7_ASSERTS_ULAction_SingleAnim;

// Class ProjectP.LAction_LoopAnim
// 0x0028 (0x01E0 - 0x01B8)
class ULAction_LoopAnim : public ULAction_SingleAnim
{
public:
	class FName                                   LoopCancelByLanding;                               // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopCancelByCommand;                               // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSection;                                      // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0[0x10];                                     // 0x01D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CancelLoopAnim(class FName JumpToSectionName);
	void Init_LoopAnim(bool LoadPayload);
	bool IsLoopAnim();
	void NextLoopAnim(class FName JumpToSectionName);
	void OnCommandOccurred(class ULActMgrComponent* ActMgrComponent, class AActor* TargetActor, class FName Command, const struct FVector& Lever, bool SkipCommandPrerequisitiesCheck);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAction_LoopAnim")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAction_LoopAnim")
	}
	static class ULAction_LoopAnim* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAction_LoopAnim>();
	}
};
DUMPER7_ASSERTS_ULAction_LoopAnim;

// Class ProjectP.LAnimNotifyState_Projectile
// 0x0050 (0x0090 - 0x0040)
class ULAnimNotifyState_Projectile final : public ULAnimNotifyStateBase
{
public:
	class FName                                   ProjectileID;                                      // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnOffset;                                       // 0x0050(0x0030)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ALProjectile>            TestProjectile;                                    // 0x0080(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Projectile")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Projectile")
	}
	static class ULAnimNotifyState_Projectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Projectile>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Projectile;

// Class ProjectP.LAction_HitAnim
// 0x0198 (0x0378 - 0x01E0)
class ULAction_HitAnim final : public ULAction_LoopAnim
{
public:
	class ULActPayload_HitAnim*                   Cached_Payload_HitAnim;                            // 0x01E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillHitInfoPtr                       Cached_SkillHitInfoPtr;                            // 0x01E8(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkillHitInfoPtr                       Cached_SkillHitInfoPtr_Origin;                     // 0x01F0(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  Cached_Attacker;                                   // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLHitInfo                              Cached_HitInfo;                                    // 0x0200(0x0140)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   Cached_SkillHit_Replaced;                          // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELHitMotionType                               Cached_HitMotionType;                              // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELHitMotionType                               Cached_HitMotionType_Original;                     // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34A[0x2];                                      // 0x034A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Cached_HitAnimDuration;                            // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELKnockBackDirectionType                      Cached_KnockbackDirection;                         // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Cached_KnockbackDuration;                          // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cached_KnockbackScale;                             // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cached_KnockbackDistance;                          // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cached_BoundHeight;                                // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cached_BoundDuration;                              // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Cached_HitCameraShakeCodeName;                     // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Cached_LastPlayedHitAnim;                          // 0x0370(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	int32 PlayHitAnim(class FName HitAnim);
	void PlayHitAnimBP(class FName HitAnim, int32* MontageInstanceID, class UAnimMontage** Montage, EExecutePin* Branches);
	void SetLastPlayedHitAnim(class FName HitAnim);
	bool UpdateHitMotionReplace(ELHitMotionType OriginHitMotionType);
	bool UpdateSkillHitReplace(class FName NewSkillHitCodeName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAction_HitAnim")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAction_HitAnim")
	}
	static class ULAction_HitAnim* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAction_HitAnim>();
	}
};
DUMPER7_ASSERTS_ULAction_HitAnim;

// Class ProjectP.LAction_MultiAnim
// 0x0018 (0x01F8 - 0x01E0)
class ULAction_MultiAnim final : public ULAction_LoopAnim
{
public:
	TArray<class UAnimSequenceBase*>              TargetAnimArray;                                   // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrChosenAnimIndex;                               // 0x01F0(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnNewAnimPlayed();
	int32 OnSelectNextAnim(class UAnimMontage* Montage, bool bInterrupted, int32 CurrentAnimIndex);
	int32 PlayTargetAnimByIndexBP(int32 TargetAnimIndex, EExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAction_MultiAnim")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAction_MultiAnim")
	}
	static class ULAction_MultiAnim* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAction_MultiAnim>();
	}
};
DUMPER7_ASSERTS_ULAction_MultiAnim;

// Class ProjectP.LAnimNotifyState_TimedNiagaraEffect
// 0x0130 (0x0190 - 0x0060)
class ULAnimNotifyState_TimedNiagaraEffect final : public UAnimNotifyState_TimedNiagaraEffect
{
public:
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UseAbsoluteRotation;                               // 0x0068(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x006C(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 AttachedComponent;                                 // 0x0078(0x0008)(ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0080(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELWeaponAttachPointType>               DisableWhenWeaponInListBroken;                     // 0x0088(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      ApplyVariableFloat;                                // 0x0098(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector2D>           ApplyVariableVector2;                              // 0x00E8(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector>             ApplyVariableVector3;                              // 0x0138(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ELMeshSelectionType                           MeshSelectionType;                                 // 0x0188(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_TimedNiagaraEffect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_TimedNiagaraEffect")
	}
	static class ULAnimNotifyState_TimedNiagaraEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_TimedNiagaraEffect>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_TimedNiagaraEffect;

// Class ProjectP.LAction_SlaveArmVisual
// 0x0000 (0x01E0 - 0x01E0)
class ULAction_SlaveArmVisual final : public ULAction_LoopAnim
{
public:
	float GetSlaveArmAdditiveAlpha();
	class UAnimSequenceBase* GetSlaveArmAdditiveAnim();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAction_SlaveArmVisual")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAction_SlaveArmVisual")
	}
	static class ULAction_SlaveArmVisual* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAction_SlaveArmVisual>();
	}
};
DUMPER7_ASSERTS_ULAction_SlaveArmVisual;

// Class ProjectP.LAction_Dialoging
// 0x0008 (0x01E8 - 0x01E0)
class ULAction_Dialoging final : public ULAction_LoopAnim
{
public:
	class FName                                   CommonActionCodeName;                              // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void StopAfterToWait();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAction_Dialoging")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAction_Dialoging")
	}
	static class ULAction_Dialoging* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAction_Dialoging>();
	}
};
DUMPER7_ASSERTS_ULAction_Dialoging;

// Class ProjectP.LAnimNotify_TestNotify
// 0x0000 (0x0048 - 0x0048)
class ULAnimNotify_TestNotify final : public ULAnimNotifyBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_TestNotify")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_TestNotify")
	}
	static class ULAnimNotify_TestNotify* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_TestNotify>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_TestNotify;

// Class ProjectP.LActionStateDebugInfo
// 0x0000 (0x0028 - 0x0028)
class ULActionStateDebugInfo final : public UObject
{
public:
	static class FString ActionStateDebugInfo_From_Action();
	static class FString ActionStateDebugInfo_From_Notify();
	static class FString ActionStateDebugInfo_From_Notify_ApplyInput();
	static class FString ActionStateDebugInfo_From_NotifyEndMarked();
	static class FString ActionStateDebugInfo_None();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActionStateDebugInfo")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActionStateDebugInfo")
	}
	static class ULActionStateDebugInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActionStateDebugInfo>();
	}
};
DUMPER7_ASSERTS_ULActionStateDebugInfo;

// Class ProjectP.LActionState
// 0x0000 (0x0028 - 0x0028)
class ULActionState final : public UObject
{
public:
	static class FName ActionState_Aggro_Target();
	static class FName ActionState_AITargetList_Disable();
	static class FName ActionState_Allow_AcquireGroggyPoint();
	static class FName ActionState_Allow_ChargeCancel();
	static class FName ActionState_Allow_Dash_Heavy();
	static class FName ActionState_Allow_Dash_Light();
	static class FName ActionState_Allow_Dying();
	static class FName ActionState_Allow_FableCancel();
	static class FName ActionState_Allow_GuardRepulse();
	static class FName ActionState_Allow_LieDying();
	static class FName ActionState_Allow_RepairCancel();
	static class FName ActionState_AllowAction_Sequence();
	static class FName ActionState_AllowInput_Dash();
	static class FName ActionState_AllowInput_DoubleDash();
	static class FName ActionState_AllowInput_FableHandle();
	static class FName ActionState_AllowInput_Frenzy();
	static class FName ActionState_AllowInput_GetUpDash();
	static class FName ActionState_AllowInput_Guard();
	static class FName ActionState_AllowInput_LightAttack();
	static class FName ActionState_AllowInput_Movement();
	static class FName ActionState_AllowInput_Movement_Forced();
	static class FName ActionState_AllowInput_Parrying();
	static class FName ActionState_AllowInput_Rotation();
	static class FName ActionState_AllowInput_Rotation_Forced();
	static class FName ActionState_AllowInput_SlaveArm();
	static class FName ActionState_AllowInput_StrongAttack();
	static class FName ActionState_AllowInput_UseItem();
	static class FName ActionState_AllowInput_WeaponChange();
	static class FName ActionState_ApplyInput();
	static class FName ActionState_BladeWeight();
	static class FName ActionState_Can_Dodge_Zero_Stamina();
	static class FName ActionState_CancelMove();
	static class FName ActionState_Cinematic();
	static class FName ActionState_ClimbDown();
	static class FName ActionState_ClimbUp();
	static class FName ActionState_ConsumeMovement();
	static class FName ActionState_ConsumeRotation();
	static class FName ActionState_Dash_Disable();
	static class FName ActionState_Dash_SuperHeavy();
	static class FName ActionState_Dead();
	static class FName ActionState_DepenetrateFromEnv();
	static class FName ActionState_DestructionDefence();
	static class FName ActionState_Disable_Footstep();
	static class FName ActionState_Disable_LockOnRotation();
	static class FName ActionState_Disable_TransformModifier_MoveActor();
	static class FName ActionState_Dodge();
	static class FName ActionState_DoubleDash_Enable();
	static class FName ActionState_Dying();
	static class FName ActionState_Fable_Buff_Blade();
	static class FName ActionState_Fable_Buff_Handle();
	static class FName ActionState_FableArt();
	static class FName ActionState_Falling();
	static class FName ActionState_FallingStart();
	static class FName ActionState_FatalAttack_As_Attacker();
	static class FName ActionState_FatalAttack_As_Victim();
	static class FName ActionState_FatalAttack_Counter_Enable();
	static class FName ActionState_FatalAttack_Disable();
	static class FName ActionState_FatalAttack_Enable();
	static class FName ActionState_FatalAttack_Enable_Forced();
	static class FName ActionState_Floating();
	static class FName ActionState_FloatingCeiling();
	static class FName ActionState_Frenzy();
	static class FName ActionState_FuryAttack();
	static class FName ActionState_FuryAttackGuardEnable();
	static class FName ActionState_GetUpDash_Enable();
	static class FName ActionState_Grab();
	static class FName ActionState_Grabbed();
	static class FName ActionState_GrappleGun_Reflect();
	static class FName ActionState_Groggy();
	static class FName ActionState_Groggy_Enable();
	static class FName ActionState_Groggy_Enable_Time_Added();
	static class FName ActionState_Guard_Hit();
	static class FName ActionState_HeadCostumeOff_Sequence();
	static class FName ActionState_Hide();
	static class FName ActionState_HitBoom();
	static class FName ActionState_HitBoom_CoolTime();
	static class FName ActionState_HitCheck();
	static class FName ActionState_Ignore_Drop_Ergo();
	static class FName ActionState_Ignore_FallingLateralFriction();
	static class FName ActionState_Ignore_Repulse_All();
	static class FName ActionState_IK_Disable();
	static class FName ActionState_Immune_Damage();
	static class FName ActionState_Immune_Elemental();
	static class FName ActionState_Immune_Groggy();
	static class FName ActionState_Immune_Hit();
	static class FName ActionState_Immune_HitActionDMGStand();
	static class FName ActionState_Immune_HitActionDownAwayUp();
	static class FName ActionState_Immune_HitActionDownDragStamp();
	static class FName ActionState_Immune_HitActionGrab();
	static class FName ActionState_Immune_HitActionKnockBack();
	static class FName ActionState_Immune_Immune_Abnormal_Fire_Point();
	static class FName ActionState_Immune_Paralyzation();
	static class FName ActionState_Immune_Special_Elemental();
	static class FName ActionState_Immune_Tough();
	static class FName ActionState_Invincible();
	static class FName ActionState_Key_Pressed_Guard();
	static class FName ActionState_Key_Pressed_Sprint();
	static class FName ActionState_LockCameraMovement();
	static class FName ActionState_LockCancelMove();
	static class FName ActionState_LockDieAction();
	static class FName ActionState_LockFalling();
	static class FName ActionState_LockInput_Movement_Forced();
	static class FName ActionState_LockInput_Rotation_Forced();
	static class FName ActionState_LockMovement();
	static class FName ActionState_LockOn_Disable();
	static class FName ActionState_LockOn_DisablePC();
	static class FName ActionState_LockOnRotateTarget();
	static class FName ActionState_LockParry_Dash();
	static class FName ActionState_LockParry_Guard();
	static class FName ActionState_LockPerfectGuard();
	static class FName ActionState_LockPlayerAction_Movie();
	static class FName ActionState_LockPlayerAction_Sequence();
	static class FName ActionState_LockRotation();
	static class FName ActionState_LockUseSkill();
	static class FName ActionState_LookAt_AimToTarget();
	static class FName ActionState_LookAt_Disable();
	static class FName ActionState_LookAt_FixAimToTarget();
	static class FName ActionState_LookAt_Head();
	static class FName ActionState_LookAt_Smash();
	static class FName ActionState_LookAt_UpperBody();
	static class FName ActionState_None();
	static class FName ActionState_NotifyApplyInput_Dash();
	static class FName ActionState_NotifyApplyInput_Guard();
	static class FName ActionState_NotifyApplyInput_LightAttack();
	static class FName ActionState_NotifyApplyInput_StrongAttack();
	static class FName ActionState_OnGuardHit_Attacker();
	static class FName ActionState_OnGuardHit_Victim();
	static class FName ActionState_Paralyzation();
	static class FName ActionState_Paralyzation_Enable();
	static class FName ActionState_Peace();
	static class FName ActionState_PerBodyCollisionProfileApplied();
	static class FName ActionState_Perception_Disable();
	static class FName ActionState_Perfect_Guard_Tough_Damage_Enable();
	static class FName ActionState_PhysicsSimulation();
	static class FName ActionState_Prepare_Spawn();
	static class FName ActionState_PreventFallingDamage();
	static class FName ActionState_Pulse_Rechargeable();
	static class FName ActionState_RepairWeapon();
	static class FName ActionState_ReserveInput();
	static class FName ActionState_ReserveInput_Attack();
	static class FName ActionState_ReserveInput_Dash();
	static class FName ActionState_ReserveInput_Special();
	static class FName ActionState_Resurrection();
	static class FName ActionState_Resurrection_Used();
	static class FName ActionState_RideOnLift();
	static class FName ActionState_RisingAttack_Enable();
	static class FName ActionState_SA_NicolaTail_Active();
	static class FName ActionState_SA_NicolaTail_Counter();
	static class FName ActionState_SA_PileBunker_Lock();
	static class FName ActionState_Shotgun_Hold();
	static class FName ActionState_Show_Weapon_Forced();
	static class FName ActionState_SlaveArm_Disable();
	static class FName ActionState_Sleep();
	static class FName ActionState_SpawnIdle();
	static class FName ActionState_Sprint_Disable();
	static class FName ActionState_Sprint_Enable();
	static class FName ActionState_Stance_Always_Guard();
	static class FName ActionState_Stance_Always_Guard_Off();
	static class FName ActionState_Stance_Guard();
	static class FName ActionState_Stance_NoStiffen_Guard();
	static class FName ActionState_Stance_Parrying();
	static class FName ActionState_Stance_Perfect_Guard();
	static class FName ActionState_Stance_Reflect_Guard();
	static class FName ActionState_Stance_Stance_BareHand();
	static class FName ActionState_Stance_Sword_OneHand();
	static class FName ActionState_Stance_Sword_TwoHand();
	static class FName ActionState_Stance_Weapon_Axe();
	static class FName ActionState_Stance_Weapon_Axe2();
	static class FName ActionState_Stance_Weapon_Blade();
	static class FName ActionState_Stance_Weapon_Blade2();
	static class FName ActionState_Stance_Weapon_Spear();
	static class FName ActionState_Stance_Weapon_Spear2();
	static class FName ActionState_Stance_Weapon_Sword();
	static class FName ActionState_Stance_Weapon_Sword2();
	static class FName ActionState_StandGuard();
	static class FName ActionState_StandGuardEnable();
	static class FName ActionState_Start_Rotation();
	static class FName ActionState_StopSprint();
	static class FName ActionState_SuperArmor();
	static class FName ActionState_ToggleWalkMode();
	static class FName ActionState_TransitAnimation_Dead();
	static class FName ActionState_TryLockInput_Movement();
	static class FName ActionState_TryLockInput_Rotation();
	static class FName ActionState_Tutorial_Walk();
	static class FName ActionState_UseItem_Disable();
	static class FName ActionState_Victim_Counter_Enable();
	static class FName ActionState_Weapon_Transform();
	static class FName ActionState_Weight_Advantage_Enable();
	static class FName ActionState_WeightPenalty_Decrease_L1_Change();
	static class FName ActionState_Zombie();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActionState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActionState")
	}
	static class ULActionState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActionState>();
	}
};
DUMPER7_ASSERTS_ULActionState;

// Class ProjectP.LAnimNotifyState_UseSmashLookAt
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_UseSmashLookAt final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_UseSmashLookAt")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_UseSmashLookAt")
	}
	static class ULAnimNotifyState_UseSmashLookAt* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_UseSmashLookAt>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_UseSmashLookAt;

// Class ProjectP.LActionSystemData
// 0x0338 (0x0558 - 0x0220)
class ALActionSystemData : public AActor
{
public:
	float                                         Dash_Front_End;                                    // 0x0220(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dash_Right_End;                                    // 0x0224(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dash_Back_End;                                     // 0x0228(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dash_Left_End;                                     // 0x022C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StiffenDelayDefender;                              // 0x0230(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RF_Start;                                          // 0x0234(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RB_Start;                                          // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BR_Start;                                          // 0x023C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BL_Start;                                          // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LB_Start;                                          // 0x0244(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LF_Start;                                          // 0x0248(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FL_Start;                                          // 0x024C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitRotateTime;                                     // 0x0250(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockbackRotateTime;                               // 0x0254(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownRotateTime;                                    // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PerfectGuardBuff;                                  // 0x025C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerfectGuardDuration;                              // 0x0264(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SparkFxInterval;                                   // 0x0268(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SparkSFxInterval;                                  // 0x026C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EncroachingEscapeAngle;                            // 0x0270(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PCRotationSpeed;                                   // 0x0274(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PCRotationSpeed_Skill;                             // 0x0278(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PC_Sprint_TurnAround_Lever_Threshold;              // 0x027C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PC_LockOn_Turn_Angle_Start_Threshold;              // 0x0280(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PC_LockOn_Turn_Angle_Stop_Threshold;               // 0x0284(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockOnRotationInterpSpeed;                         // 0x0288(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PC_Running_Stop_MaxSpeed_Weight;                   // 0x028C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PC_Sprint_Stop_MaxSpeed_Weight;                    // 0x0290(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PC_Sprint_TurnAround_MaxSpeed_Weight;              // 0x0294(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PCAllowRotationEndTimeLimit;                       // 0x0298(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallingStuckExitTime;                              // 0x029C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MontageSlotNameForSeparateAnimRateScalingArray;    // 0x02A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PerfectGuard_ReduceRate;                           // 0x02B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerfectGuard_Stamina_ReduceRate;                   // 0x02B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffen_Duration_PerfectGuard;                     // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffen_PlayRate_PerfectGuard;                     // 0x02BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerfectGuardDamageReductionRatio;                  // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerfectGuardLockDuration;                          // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseNoneLockOnAttackGuide;                          // 0x02C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FallingDieVariable;                                // 0x02CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RigidityConstant;                                  // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RgidityRatioPerfectGuard;                          // 0x02D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuardRegainDelayTime;                              // 0x02D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuardRegainRecoveryRatioGuarding;                  // 0x02DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuardRegainHealRatioParrying;                      // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuardRegainDamageRatio;                            // 0x02E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OnGuardHit_RetainTime;                             // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AllowLockOnInAction : 1;                           // 0x02EC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLFallingHeightOverrideInfo>    FallingHeightOverrideArray;                        // 0x02F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ELActionCategory>                      WallSlidingCategory_CH_OnMoveArray;                // 0x0300(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         WallSlidingMultiplier_CH_OnMove;                   // 0x0310(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallSlidingMultiplier_CH_OnAction;                 // 0x0314(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ELActionCategory>                      WallSlidingCategory_ENV_OnActionArray;             // 0x0318(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         WallSlidingMultiplier_ENV_OnMove;                  // 0x0328(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallSlidingMultiplier_ENV_OnAction;                // 0x032C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ActionClass_Down_Drag;                             // 0x0330(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ActionClass_Down_Away;                             // 0x0358(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ActionClass_Down_Up;                               // 0x0380(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ActionClass_Down_Stamp;                            // 0x03A8(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ActionClass_Knock_Back;                            // 0x03D0(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponMaxSharpnessReduceRatio_by_Grinding;         // 0x03F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSharpnesReduceMultiplier_by_Grinding_Count;  // 0x03FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JustRepairSharpnessRatio;                          // 0x0400(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JustRepairDuration;                                // 0x0404(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RagdollFreezeTime;                                 // 0x0408(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RagdollInteractionTime;                            // 0x040C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroggyDamageRatioJustToughZero;                    // 0x0410(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopAfterSprintTime;                               // 0x0414(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerfectGuard_GroggyEnable_AddTime_Normal;          // 0x0418(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerfectGuard_GroggyEnable_AddTime_Fury;            // 0x041C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hit_Intencity_KnockBack;                           // 0x0420(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hit_Intencity_Down;                                // 0x0424(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fatal_Angle_Limit;                                 // 0x0428(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fatal_Angle_Speed_Limit;                           // 0x042C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fatal_Angle_RecordTime_Limit;                      // 0x0430(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FatalCheckLeverAngle;                              // 0x0434(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FatalSocket_LocationPivot;                         // 0x0438(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FatalSocket_LookAtTriangle_Bottom;                 // 0x0440(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FatalSocket_LookAtTriangle_Top_R;                  // 0x0448(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FatalSocket_LookAtTriangle_Top_L;                  // 0x0450(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Explosion_FxTableCodeName;                         // 0x0458(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Explosion_Cut_FxTableCodeName;                     // 0x0460(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Explosion_FxTableCodeName_Carcass;                 // 0x0468(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Explosion_Cut_FxTableCodeName_Carcass;             // 0x0470(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Explosion_AdditionalKillPower_ToUp;                // 0x0478(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Explosion_AdditionalKillPower_RootToCut;           // 0x047C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Explosion_Cut_DetachBoneName_Head;                 // 0x0480(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Explosion_Cut_DetachBoneName_Arm_R;                // 0x0488(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Explosion_Cut_DetachBoneName_Arm_L;                // 0x0490(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Explosion_Cut_DetachBoneName_Upper;                // 0x0498(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Explosion_Cut_HideBoneName_Head;                   // 0x04A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Explosion_Cut_HideBoneName_Arm_R;                  // 0x04A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Explosion_Cut_HideBoneName_Arm_L;                  // 0x04B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Explosion_FxSocketNameArray_All_Carcass;           // 0x04B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Explosion_FxSocketNameArray_All;                   // 0x04C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Explosion_FxSocketNameArray_Head;                  // 0x04D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Explosion_FxSocketNameArray_Arm_R;                 // 0x04E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Explosion_FxSocketNameArray_Arm_L;                 // 0x04F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           Explosion_FxSocketNameArray_Upper;                 // 0x0508(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         IdleTransitionTimeDown;                            // 0x0518(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkTransitionTimeUp;                              // 0x051C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkTransitionTimeDown;                            // 0x0520(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunTransitionTimeUp;                               // 0x0524(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunTransitionTimeDown;                             // 0x0528(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintTransitionTimeUp;                            // 0x052C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_530[0x28];                                     // 0x0530(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool FindHandBloodMaterial_ForCurrentBody(class UMaterialInstance** OutMaterial);
	bool FindPixelDepthOffsetData_ForCurrentFace(class UTexture** OutMask, float* OutIntensity);
	void RemoveFatalLocationIndicator(class AActor* TargetActor, const struct FLFatalAttackInfo& FatalAttackInfo, int32 SuccessFatalAttackInfoIndex);
	void SetFatalLocationIndicatorState(const struct FLFatalIndicatorFxState& IndicatorFx);
	void SpawnFatalLocationIndicator(class AActor* TargetActor, const struct FLFatalAttackInfo& FatalAttackInfo);
	void UpdateFatalLocationIndicator();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActionSystemData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActionSystemData")
	}
	static class ALActionSystemData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALActionSystemData>();
	}
};
DUMPER7_ASSERTS_ALActionSystemData;

// Class ProjectP.LActionSystem
// 0x00E8 (0x0160 - 0x0078)
class ULActionSystem final : public ULGameSubSystem
{
public:
	uint8                                         Pad_78[0xC];                                       // 0x0078(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	ELExplosionMeshType                           TEST_ExplodeType;                                  // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TEST_PartsDestory;                                 // 0x0085(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeaponAttachSocketName_R;                          // 0x0088(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WeaponAttachSocketName_L;                          // 0x0090(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLDeadExplosionTable                   DeadExplosionTable;                                // 0x0098(0x0008)(Transient, NativeAccessSpecifierPublic)
	struct FLActionGroupTable                     ActionGroupTable;                                  // 0x00A0(0x0008)(Transient, NativeAccessSpecifierPublic)
	struct FLNPCAssetTable                        NPCAssetTable;                                     // 0x00A8(0x0008)(Transient, NativeAccessSpecifierPublic)
	struct FLWeaponAssetTable                     WeaponAssetTable;                                  // 0x00B0(0x0008)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FLPartsAssetTable                      PartsAssetTable;                                   // 0x00B8(0x0008)(Transient, NativeAccessSpecifierPublic)
	class ALActionSystemData*                     ActionSystemData;                                  // 0x00C0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C8[0x98];                                      // 0x00C8(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 AddFatalIndicator(class AActor* TargetActor);
	void RemoveFatalIndicator(class AActor* TargetActor, int32 SuccessFatalAttackInfoIndex);

	float GetBL_Start() const;
	float GetBR_Start() const;
	float GetDash_Back_End() const;
	float GetDash_Front_End() const;
	float GetDash_Left_End() const;
	float GetDash_Right_End() const;
	float GetDownRotateTime() const;
	int32 GetFallingDieVariable() const;
	void GetFatalTargetPointLocation(int32 Index_0, struct FVector* WorldLocation, bool* InRange) const;
	float GetFL_Start() const;
	float GetGroggyDamageRatioJustToughZero() const;
	float GetGuardRegainDamageRatio() const;
	float GetGuardRegainDelayTime() const;
	float GetGuardRegainHealRatioParrying() const;
	int32 GetGuardRegainRecoveryRatioGuarding() const;
	float GetHit_Intencity_Down() const;
	float GetHit_Intencity_KnockBack() const;
	float GetHitRotateTime() const;
	float GetJustRepairDuration() const;
	float GetJustRepairSharpnessRatio() const;
	float GetKnockbackRotateTime() const;
	float GetLB_Start() const;
	float GetLF_Start() const;
	float GetOnGuardHit_RetainTime() const;
	float GetPerfectGuard_ReduceRate() const;
	float GetPerfectGuard_Stamina_ReduceRate() const;
	float GetRagdollFreezeTime() const;
	float GetRagdollInteractionTime() const;
	float GetRB_Start() const;
	float GetRF_Start() const;
	float GetRgidityRatioPerfectGuard() const;
	float GetRigidityConstant() const;
	float GetSparkFxInterval() const;
	float GetSparkSFxInterval() const;
	float GetStiffen_Duration_PerfectGuard() const;
	float GetStiffen_PlayRate_PerfectGuard() const;
	float GetStiffenDelayDefender() const;
	float GetStopAfterSprintTime() const;
	float GetWeaponMaxSharpnessReduceRatio_By_Grinding() const;
	float GetWeaponSharpnessReduceMultiplier_By_Grinding_count() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActionSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActionSystem")
	}
	static class ULActionSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActionSystem>();
	}
};
DUMPER7_ASSERTS_ULActionSystem;

// Class ProjectP.LActionUtilFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULActionUtilFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AddInputActionKeyMapping(class FName InputAction, const struct FInputActionKeyMapping& Mapping);
	static bool AddInputAxisKeyMapping(class FName InputAction, const struct FInputAxisKeyMapping& Mapping);
	static float CalcHitAngleBP(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo, struct FVector* OutHitOrigin, EExecutePin* Branches);
	static struct FVector CalcParabolicMoveVelocity(const struct FVector& StartLocation, const struct FVector& EndLocation, float Duration, float Gravity);
	static void ChangeCollisionState(class AActor* TargetActor, ELCollisionState CollisionState);
	static void ChangeFloatingState(class AActor* TargetActor, bool bEnable, bool bApplyCeiling);
	static void ChangeHairCategoryType(ELHairCategoryType HairCategoryType);
	static bool ChangeInputPreset(class FName PresetName);
	static bool ChangePerBodyCollisionProfile(class AActor* TargetActor, bool TurnOffOverlapBody, bool TurnOffSecondaryBody, const class FName CollisionProfile_ChangeTarget, const class FName CollisionProfile_Other, int32* OutCount_AllBody, int32* OutCount_ChangeByOverlap, int32* OutCount_ChangedBySecondary);
	static int32 ChangeWeaponAnimState(class AActor* Actor, ELWeaponAttachPointType AttachPointType, ELWeaponPartType PartType, class FName AnimState);
	static void ChangeWeaponAnimStateWithPickedIndex(class AActor* Actor, int32 PickedIndex, ELWeaponPartType PartType, class FName AnimState);
	static void CheatFly(class AActor* TargetActor);
	static void CheatGhost(class AActor* TargetActor);
	static void CheatWalk(class AActor* TargetActor);
	static bool CheckAlwaysGuard(class AActor* Attacker, class AActor* Victim);
	static bool CheckCollisionOwnerTypeBP(const class UPrimitiveComponent* CollisionComponent, ELCollisionOwnerType CheckType, EExecutePin* Branches);
	static bool CheckFatalAttackConditionsBP(class AActor* CheckTarget, const struct FLFatalAttackInfo& CheckFatalAttackInfo, EExecutePin* Branches);
	static bool CheckGrabBP(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo, EExecutePin* Branches);
	static struct FHitResult CheckObstacleOnPathBP(class UPrimitiveComponent* CheckTargetComponent, const TArray<struct FVector>& PathArray, EExecutePin* Branches);
	static int32 CollectLCharacterInRange(const struct FVector& TestOrigin, const float Range, const TArray<class ALCharacter*>& IgnoredCharacterArray, TArray<class ALCharacter*>* OutCollectedCharacterArray);
	static struct FRotator ComputeFatalOffsetRotationBP(class AActor* CheckTarget, EExecutePin* Branches);
	static ELPCActionKeyType ConvertToActionKey(const class FString& InActionName);
	static class FString ConvertToActionKeyString(ELPCActionKeyType InActionKey);
	static void DecreaseWeaponDestructDurability(class AActor* Attacker, class AActor* Victim, int32 DurabilityAmount, const struct FVector& BreakDirection, bool bVictimGuard, bool bPlayHitAction, class FName* OutPlayActionClassCodeName);
	static bool DoChangeCharBlockType(class AActor* TargetActor, ELCharacterCollisionType CharacterCollisionType, bool UseStack);
	static bool DoChangeWeapon(class AActor* TargetActor, bool SelectPrevious);
	static void DoCharacterKillZone(class AActor* Actor, bool bUseCustomDieUIShowTime, float DieUI_StartDelay);
	static bool DoGrabBP(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo, EExecutePin* Branches);
	static bool DoGrabReleaseBP(class AActor* TargetActor, const struct FLGrabReleaseInfo& GrabReleaseInfo, EExecutePin* Branches);
	static bool DoHideBone(class USkeletalMeshComponent* SkeletalMeshComponent, class FName BoneName, bool Hide);
	static bool DoIdleMove(class AActor* TargetActor, bool bCalledFromNotify);
	static void DoNPCSuicide(class AActor* Actor, ELNPCSuicideType SuicideType, class FName DeadCodeName, bool bItemGet, bool bExpGet, bool bUseOverrideRespawnState, bool bRespawnEnable);
	static bool DoRespawn(class AActor* TargetActor);
	static bool DoWeaponOffBP(class AActor* TargetActor, EExecutePin* Branches);
	static bool DoWeaponOnBP(class AActor* TargetActor, EExecutePin* Branches);
	static struct FTransform ExtractMontageBoneTransformBP(class UAnimInstance* AnimInstance, class UAnimMontage* AnimMontage, const class FName BoneName, const float position, bool ExtractRootmotion, EExecutePin* Branches);
	static TArray<class FName> FindActionKeyInputAction(const struct FKey& Key, bool Alt, bool Ctrl, bool Shift, bool Cmd);
	static bool FindActionState(class AActor* Actor, class FName ActionState);
	static struct FLFxSocketTracerInfo FindActiveFxSocketTracerInfo(class AActor* TargetActor, const struct FLGameObjectHandle& Handle, EExecutePin* Branches);
	static TArray<class FName> FindAxisKeyInputAction(const struct FKey& Key, bool Alt, bool Ctrl, bool Shift, bool Cmd);
	static struct FItemSlaveArmInfoPtr FindEquippedItemSlaveArmInfoBP(class AActor* TargetActor, EExecutePin* Branches);
	static class AActor* FindFatalAttackTargetBP(class AActor* Attacker, struct FLFatalAttackInfo* OutFatalAttackInfo, EExecutePin* Branches);
	static void FindHandBloodMaterial_ForCurrentBodyBP(class UMaterialInstance** OutMaterial, EExecutePin* Branches);
	static struct FHitIndexInfoPtr FindHitIndexInfoBP(class FName SkillCodeName, int32 HitIndex, EExecutePin* Branches);
	static struct FHitMotionReplaceInfoPtr FindHitMotionReplaceInfoBP(class FName HitMotionReplaceGroupCodeName, ELHitMotionType OriginHitMotionType, EExecutePin* Branches);
	static class AActor* FindNoneLockOnAutoGuideTarget(class AActor* TargetActor);
	static class ALPartsActor* FindPartsActor(class AActor* Actor, int32 PartsIndex);
	static class ULPartsComponent* FindPartsComponent(class AActor* Actor, int32 PartsIndex);
	static void FindPixelDepthOffsetData_ForCurrentFaceBP(class UTexture** OutMask, float* OutIntensity, EExecutePin* Branches);
	static ELPCActionKeyType FindPresetInputAction(class FName InPresetName, const struct FKey& Key);
	static struct FKey FindPresetInputActionKey(class FName InPresetName, ELPCActionKeyType KeyType);
	static class USceneComponent* FindSocketOwnerComponent(class AActor* TargetActor, class FName SocketName, ELMeshSelectionType MeshSelectionType);
	static bool FindWeaponDestructDurability(class AActor* Actor, ELWeaponAttachPointType WeaponAttachPoint, struct FLWeaponDestructDurabilityEnable* WeaponDestructDurabilityEnable_0);
	static class FName GetActionClassCodeNameBySkillHit(class AActor* Victim, class FName SkillHitCodeName);
	static class ULItem* GetActiveSlaveArmItemBP(class AActor* TargetActor, EExecutePin* Branches);
	static class FName GetActiveSlaveArmSkillCodeNameBP(class AActor* TargetActor, EExecutePin* Branches);
	static class FName GetActiveUseItemSkillCodeNameBP(class ULActPayloadBase* InOptionalPayloadItem, EExecutePin* Branches);
	static class ULActMgrComponent* GetActMgrComponent(class AActor* TargetActor);
	static class ULActMgrComponent* GetActMgrComponentBP(class AActor* TargetActor, EExecutePin* Branches);
	static class FName GetAssistUseItemSkillCodeNameBP(ELAssistUseItemSlotType InSlotType, EExecutePin* Branches);
	static bool GetCommandConsumed(class FName Command);
	static float GetCommandRaisedTime(class FName Command);
	static class UAnimMontage* GetCommonAnim(class AActor* TargetActor, class FName CommonCodeName);
	static class UAnimMontage* GetCommonAnimBP(class AActor* TargetActor, class FName CommonCodeName, EExecutePin* Branches);
	static ELActionCategory GetCurrentActionCategory(class AActor* TargetActor, bool ExceptHitAction);
	static bool GetCurrentGrabResultBP(class AActor* TargetActor, struct FLGrabResultInfo* OutGrabResultInfo, EExecutePin* Branches);
	static ELPCActionKeyType GetCurrentPresetInputAction(bool IsGamePad, const struct FKey& Key);
	static struct FKey GetCurrentPresetInputActionKey(bool IsGamePad, ELPCActionKeyType KeyType);
	static class ULReasonForDeathInfo* GetDeathInfo(class AActor* TargetActor);
	static ELSecondStat GetDebuffResistStat(ELAbnormalAbstateClass InAbnormalAbstateClass);
	static class UAnimMontage* GetDieAnim(class AActor* TargetActor, const class ULReasonForDeathInfo* ReasonInfo);
	static ELSecondStat GetElementalStat(ELElementDamageType ElementalType, ELDamageBranchType ElementalStatType);
	static class FName GetEndCommonAnimBP(class AActor* TargetActor, class FName CommonCodeName, EExecutePin* Branches);
	static class UAnimMontage* GetFallingAnim(class AActor* TargetActor);
	static class AActor* GetGrabAttackerBP(class AActor* Victim, EExecutePin* Branches);
	static class AActor* GetGrabVictimBP(class AActor* Attacker, EExecutePin* Branches);
	static ELHairCategoryType GetHairCategoryType();
	static class ULHitProcComponent* GetHitProcComponentBP(class AActor* TargetActor, EExecutePin* Branches);
	static TArray<struct FKey> GetInputKeyForAction(class FName InputAction, bool Gamepad);
	static TArray<struct FKey> GetInputKeyForAxis(class FName InputAction, bool Gamepad);
	static class UAnimMontage* GetLandingAnim(class AActor* TargetActor);
	static class ULActBase* GetLastPlayingAction(class AActor* TargetActor, bool ExceptHitAction);
	static class ULCharacterMovementComponent* GetLCharacterMovementComponentBP(class AActor* TargetActor, EExecutePin* Branches);
	static class FName GetMontage_CurrentSectionBP(class UAnimInstance* AnimInst, int32 MontageInstanceID, EExecutePin* Branches);
	static float GetMontage_SectionLength(class UAnimMontage* InMontage, int32 InSection);
	static class ULPhysicalAnimationComponent* GetPhysicalAnimationComponentBP(class AActor* TargetActor, EExecutePin* Branches);
	static ELSecondStat GetPhysicalStat(ELPhysicalDamageType PhysicalType, ELDamageBranchType ElementalStatType);
	static class UAnimSequenceBase* GetSkillAnim(class AActor* TargetActor, class FName SkillCodeName);
	static class ALWeapon* GetWeapon(class AActor* TargetActor);
	static class FName GetWeaponAttachPointSocket(class AActor* TargetActor, ELWeaponAttachPointType AttachPointType);
	static ELWeaponAttachPointType GetWeaponAttachTypeByMeshSelectionType(ELMeshSelectionType MeshSelectionType);
	static class ALWeapon* GetWeaponByAttachPoint(class AActor* TargetActor, ELWeaponAttachPointType AttachPointType);
	static class ALWeapon* GetWeaponByItem(class AActor* TargetActor);
	static class ALWeapon* GetWeaponBySkillHit(class AActor* TargetActor, class FName SkillHitCodeName);
	static bool IsAttackAction(ELActionCategory ActionCategory);
	static bool IsCommandPressed(class FName Command);
	static bool IsDashAction(ELActionCategory ActionCategory);
	static bool IsFatalHitActionClassName(class FName ActionClassName);
	static bool IsHitAction(ELActionCategory ActionCategory);
	static bool IsInGrabProcessBP(class AActor* TargetActor, EExecutePin* Branches);
	static bool IsInIdleMoveState(class AActor* TargetActor);
	static bool IsLandWalkable(const struct FVector& LandNormal);
	static bool IsSkillHitTypeWeapon(ELSkillHitType SkillHitType);
	static bool IsValidGameObjectHandle(const struct FLGameObjectHandle& Handle);
	static class ALHitCollisionDynamic* LaunchHitCollisionDynamic(class AActor* Instigator, const struct FLHitCollisionInfo& HitColInfo, const struct FLHitContext& HitContext);
	static class ALHitCollisionDynamic* LaunchHitCollisionDynamicWithGrab(class AActor* Instigator, const struct FLHitCollisionInfo& HitColInfo, const struct FLHitContext& HitContext, const struct FLGrabInfo& GrabInfo);
	static struct FLGameObjectHandle LaunchTraceAttack(class AActor* TargetActor, class FName SkillHitName, ELSocketTraceType SocketTraceType, bool IsBroken, class UObject* LifeOwner);
	static struct FLGameObjectHandle LaunchTraceAttack_by_NonHitNotify(class AActor* TargetActor, ELSocketTraceType SocketTraceType, class FName TraceStartSocket, class FName TraceEndSocket, float TraceSphereRadius, float LifeSpan, ELPhysicalSurfaceType PhysicalSurface, bool IsBroken, class UObject* LifeOwner);
	static bool LockPCActions(const class UObject* WorldContextObject, bool AllowMoveOnly);
	static bool OverrideAnimationAssetBP(class UAnimInstance* AnimInstance, class UAnimationAsset* AnimationAsset, class FName MachineName, class FName StateName, EExecutePin* Branches);
	static bool PauseMontage(class UAnimInstance* AnimInst, int32 MontageInstanceID, bool Pause);
	static class ULActBase* PlayActionClass(class AActor* Target, class FName ActionClassCodeName, class ULActPayloadBase* Payload);
	static int32 PlayAnimAsDynamicMontage(class UAnimInstance* AnimInst, class UAnimSequenceBase* Anim, class FName InSlotNodeName, class UAnimMontage** OutMontage, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);
	static class ULActBase* PlayCommonMontage(class AActor* Target, class FName CommonMontageCodeName);
	static class ULActBase* PlayHitActionBP(class AActor* Attacker, class AActor* Victim, class FName HitActionClassCodeName, const struct FLHitInfo& HitInfo, EExecutePin* Branches);
	static int32 PlayLoopAnimAsDynamicMontage(class UAnimInstance* AnimInst, class UAnimSequenceBase* StartAnim, class UAnimSequenceBase* LoopAnim, class UAnimSequenceBase* EndAnim, class FName InSlotNodeName, class UAnimMontage** OutMontage, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);
	static int32 PlayMontage(class UAnimInstance* AnimInst, class UAnimMontage* Montage, float InPlayRate, float InTimeToStartMontageAt, bool bStopAllMontages);
	static class ULActBase* PlaySkillActionBP(class AActor* Target, class FName SkillCodeName, const struct FLAction_StartRotationInfo& StartRotationInfo, class ULActPayloadBase* Payload, EExecutePin* Branches);
	static void PlaySocketTracerFx(class AActor* OwnerActor, const struct FLFxSocketTracerInfo& FxSocketTracerInfo, const struct FHitResult& HitResult, bool bPlayFx, bool bPlaySound);
	static bool ProcessHit(class AActor* Attacker, class AActor* Victim, const struct FHitResult& HitResult, const struct FLHitInfo& HitInfo, class ULHitColMgrComponent* LHitColMgrComponent);
	static void PutOnBuff(class AActor* TargetActor, class FName BuffCodeName, class UObject* InInstigator);
	static bool RecordDieCauseHitDirectionBP(class AActor* TargetActor, class AActor* Attacker, EExecutePin* Branches);
	static bool RecreateClothingActors(class AActor* TargetActor);
	static bool RemoveInputActionKeyMapping(class FName InputAction, bool IsGamePad);
	static bool RemoveInputAxisKeyMapping(class FName InputAction, bool IsGamePad);
	static bool ResetInputKeyMapping();
	static class FName SelectCommonActionMontageCodeNameByHitMotionBP(class AActor* TargetActor, ELHitMotionType HitMotionType, ELHitMotionDirectionType HitMotionDirectionType, class FName TryExcludeCodeName, EExecutePin* Branches);
	static void SetAllPhysicsAngularVelocityInRadians(class USkeletalMeshComponent* SkeletalMeshComponent, const struct FVector& NewVel, bool bAddToCurrent);
	static void SetAllPhysicsLinearVelocity(class USkeletalMeshComponent* SkeletalMeshComponent, const struct FVector& NewVel, bool bAddToCurrent);
	static bool SetAxisValueUpperLimit(class AActor* TargetActor, float Limit);
	static void SetCommandConsumed(class FName Command, bool Consumed);
	static void SetFullBodyWhenMoveStopped(class AActor* TargetActor, bool bEnable);
	static bool SetMainAnimFSMState(class AActor* TargetActor, ELAnimFSMState MainAnimFSMState);
	static bool SetMontage_AutoBlendOut(class UAnimInstance* AnimInst, int32 MontageInstanceID, bool UseAutoBlendOut);
	static bool SetMontage_ExpireAllBranchingPointWhenBlendOutStartedBP(class UAnimInstance* AnimInst, int32 MontageInstanceID, bool Value, EExecutePin* Branches);
	static bool SetMontage_NextSection(class UAnimInstance* AnimInst, int32 MontageInstanceID, class FName SectionNameToChange, class FName NextSection);
	static void SetMoveIgnoreMask_Monster(class ACharacter* TargetCharacter, bool Ignore);
	static bool SetNoSkeletonUpdate(class AActor* TargetActor, bool TurnOff);
	static bool SetPerBoneMotionBlur(class USkinnedMeshComponent* SkinnedMeshComponent, bool TurnOn);
	static void SetStaminaSprintStatus(class AActor* TargetActor, bool Status);
	static bool SetUpdateOverlapsOnAnimationFinalize(class AActor* TargetActor, bool bUpdateOverlap);
	static class ALDynamicDamageVolumeActor* SpawnDynamicDamageVolumeActor(class AActor* Instigator, class FName DynamicDamageVolumeCodeName, const struct FTransform& SpawnTransform);
	static class ALWeapon* SpawnWeaponByItem(class AActor* OwnerActor, class ULItem* Item);
	static class ALWeapon* SpawnWeaponByMonster(class AActor* OwnerActor, class FName MonsterWeaponCodeName);
	static void StartHide(class AActor* TargetActor, bool bUseDissolveEffect);
	static void StopHide(class AActor* TargetActor, bool bUseDissolveEffect);
	static bool StopMontage(class UAnimInstance* AnimInst, int32 MontageInstanceID, float BlendOutTime);
	static ELAngleRangeType SwitchAngleToType(class AActor* TargetActor, float Angle);
	static ELAngleRangeType_2Way SwitchAngleToType_2Way(class AActor* TargetActor, float Angle);
	static ELAngleRangeType_4Way SwitchAngleToType_4Way(class AActor* TargetActor, float Angle);
	static void TakeOffBuff(class AActor* TargetActor, class FName BuffCodeName);
	static void Test_ContentCommand(class FName CommandCodeName);
	static void Test_DeadCharacter(class AActor* TargetActor);
	static void Test_ForceToggleCommmand(class FName ToggleCommand, bool TurnOn);
	static bool UndoLastChangeCharBlockType(class AActor* TargetActor, bool UndoToOrigin);
	static bool UnlockPCActions(const class UObject* WorldContextObject);
	static void UpdateWeaponOnOffByBareHand(class AActor* TargetActor);
	static void WeaponDestructDurabilityDisable(class AActor* Actor, ELWeaponAttachPointType WeaponAttachPoint, bool bUsageGuard);
	static void WeaponDestructDurabilityEnable(class AActor* Actor, ELWeaponAttachPointType WeaponAttackPoint, int32 StartAngle, int32 EndAngle, int32 Distance, bool bUsageGuard);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActionUtilFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActionUtilFuncLibrary")
	}
	static class ULActionUtilFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActionUtilFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULActionUtilFuncLibrary;

// Class ProjectP.LActMgrComponent
// 0x0AE8 (0x0B98 - 0x00B0)
class ULActMgrComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x4];                                       // 0x00B0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Test_OptionLevel;                                  // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULActMgrComponent* ActMgrComponent, class AActor* TargetActor, class FName Command, const struct FVector& Lever, bool SkipCommandPrerequisitiesCheck)> OnCommandOccurred; // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   TargetComboTable;                                  // 0x00C8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x50];                                      // 0x00F0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ULActMgrComponent* ActMgrComponent, class ULActBase* StartedAction)> OnActionStarted; // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULActMgrComponent* ActMgrComponent, class ULActBase* StoppingAction, class ULActBase* ReasonAction)> OnActionStopCalled; // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_160[0x140];                                    // 0x0160(0x0140)(Fixing Size After Last Property [ Dumper-7 ])
	class ULActBase*                              CachedLastStoppedAction;                           // 0x02A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8[0x20];                                     // 0x02A8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULActBase*>                      ActiveActionArray;                                 // 0x02C8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class ULActBase*>                      ReusableActionArray;                               // 0x02D8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E8[0x248];                                    // 0x02E8(0x0248)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBladeWeightInfoPtr                    BladeWeightInfoInHandle;                           // 0x0530(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FBladeWeightInfoPtr                    BladeWeightInfoInBlade;                            // 0x0538(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class ULReasonForDeathInfo*                   ReasonForDeathInfo;                                // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuardRangeAngleStart;                              // 0x0548(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuardRangeAngleEnd;                                // 0x054C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_550[0x20];                                     // 0x0550(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLWeaponDestructDurabilityEnable> WeaponDestructDurabilityEnables;                 // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_580[0x40];                                     // 0x0580(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGameObjectHandle                     Cached_GlobalMotionSpeedRatioHandle;               // 0x05C0(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   Cached_LastPlayedHitCommonActionMontage;           // 0x05C4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cached_LastPlayedHitCommonActionMontage_Count;     // 0x05CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLFatalAttackResultInfo                Cached_CurrentFatalAttackResultInfo;               // 0x05D0(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FLFatalAttackInfo                      Cached_CurrentFatalAttackInfo;                     // 0x05E0(0x0054)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FLFatalAttackInfo                      FatalAttackInfo;                                   // 0x0634(0x0054)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FLFatalAttackInfo                      FatalAttackInfo_Add;                               // 0x0688(0x0054)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          GuardCmdRaised;                                    // 0x06DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6DD[0x3];                                      // 0x06DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UObject*, class ALHitCollisionDynamic*> HitCollisionDynamicMap;                       // 0x06E0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class UObject*, struct FHitCollisionDynamicArray> HitCollisionDynamicArrayMap;              // 0x0730(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_780[0x50];                                     // 0x0780(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  SkillTarget;                                       // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SkillTargetLocation;                               // 0x07D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidSkillTargetLocation;                         // 0x07E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E5[0x8B];                                     // 0x07E5(0x008B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGrabResultInfo                       CurrentGrabResultInfo;                             // 0x0870(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class ULActPayload_GrabRelease*               Cached_ActPayload_GrabRelease;                     // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B0[0x2A8];                                    // 0x08B0(0x02A8)(Fixing Size After Last Property [ Dumper-7 ])
	class ULComboTableBase*                       CurrComboTable;                                    // 0x0B58(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B60[0x38];                                     // 0x0B60(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddActionState(class FName State, bool UsePair, class UObject* Instigator, class ULActBase* OwnerAction, ELImmuneSourceType ImmuneSourceType, const class FString& DebugInfo);
	struct FLGameObjectHandle AddActionState_AutoRemove(float LifeSpan, class FName State, bool UsePair, class UObject* Instigator, class ULActBase* OwnerAction, ELImmuneSourceType ImmuneSourceType, float ExpirationTime, const class FString& DebugInfo);
	bool AddActionStateArray(const TArray<class FName>& StateArray, bool UsePair, class UObject* Instigator, class ULActBase* OwnerAction, ELImmuneSourceType ImmuneSourceType, const class FString& DebugInfo);
	struct FLGameObjectHandle AddAnimRateScale(ELAnimRateScaleOperationType OperationType, float RateScale, float Duration, class UObject* Instigator, class USkeletalMeshComponent* SkeletalMeshComponent, class UAnimMontage* AnimMontage);
	struct FLGameObjectHandle AddAnimRootMotionTranslationScale(ELAnimRootMotionScaleOperationType OperationType, float RateScale, float Duration, class UObject* Instigator, float RateScale_Vertical, float RateScale_Horizontal);
	struct FLGameObjectHandle AddFxSocketTracer(const struct FLFxSocketTracerInfo& Info, bool StartCheck);
	void AddPreInputCommand(const struct FLReservedCommand& ReservedCommand);
	void AddToHitGroup(class AActor* Victim, int32 HitGroup);
	void BindTransformModifierToAction(class ULActBase* OwnerAction, const struct FLGameObjectHandle& Handle);
	void CachePlayedHitCommonActionMontageCodeName(class FName HitCommonActionMontageCodeName);
	bool CheckFxSocketTracer_Redo(const struct FLGameObjectHandle& Handle);
	bool CheckFxSocketTracer_Stop(const struct FLGameObjectHandle& Handle);
	bool ClearActionState(class FName State);
	void ClearPreInputCommand();
	void FuncForClearPreInputCommand(class UAnimMontage* Montage, bool Interrupted);
	class ULActBase* GetActionFromAssetName(class AActor* TargetActor, class FName BaseActionClassCodeName, class FName AssetName);
	class ULActBase* GetActionFromTable(class AActor* TargetActor, class FName CodeName);
	class ULActBase* GetAvailableAction(class AActor* TargetActor, const TSoftClassPtr<class UClass> Type);
	class ULActBase* GetPlayingAction(const TSoftClassPtr<class UClass> Type);
	class ULAction_SlaveArmVisual* GetSlaveArmActionForVisualActionBP(EExecutePin* Branches);
	void OnBoneTransformsFinalized_ForGrab();
	bool PlayAction_Die(class AActor* TargetActor);
	bool PlayAction_SkillFailed(class AActor* TargetActor, class FName FailedSkillCodeName);
	bool PreProcessCommand(class AActor* TargetActor, class FName Command, const struct FVector& Lever);
	bool ProcessAction(class AActor* TargetActor, class ULActBase* TargetAction, class ULActPayloadBase* Payload);
	class ULActBase* ProcessCommand(class AActor* TargetActor, class FName Command, const struct FVector& Lever, bool SkipCommandPrerequisitiesCheck, float CommandEventTime, bool ForceQueryCommand);
	bool QueryNextAction(class AActor* TargetActor, class FName Command, const struct FVector& Lever, class ULActBase* CurrAction, class FName* OutActionClass, struct FLActionInfo* OutActionInfo, class ULActPayloadBase** OutPayload);
	bool RegisterFxSocketTracerEvent(const struct FLGameObjectHandle& Handle, const TDelegate<void(class ULActMgrComponent* ActMgrComponent, const struct FLFxSocketTracerInfo& SocketTracerInfo, const struct FHitResult& HitResult)>& SocketTraceEvent);
	struct FLGameObjectHandle RegisterWatchingCommand(class FName Command, bool CheckReservedCommand, class ULActBase* OwnerAction);
	bool RemoveActionState(class FName State, bool UsePair, class UObject* Instigator, ELImmuneSourceType ImmuneSourceType, bool ValidOnThisFrame);
	void RemoveActionState_AutoRemove(const struct FLGameObjectHandle& Handle);
	bool RemoveActionStateArray(const TArray<class FName>& StateArray, bool UsePair, class UObject* Instigator, ELImmuneSourceType ImmuneSourceType, bool ValidOnThisFrame);
	bool RemoveAllAnimRateScale();
	bool RemoveAllAnimRootMotionTranslationScale();
	bool RemoveAllFxSocketTracer();
	bool RemoveAnimRateScale(const struct FLGameObjectHandle& Handle);
	bool RemoveAnimRateScaleByInstigator(class UObject* Instigator);
	bool RemoveAnimRootMotionTranslationScale(const struct FLGameObjectHandle& Handle);
	bool RemoveAnimRootMotionTranslationScaleByInstigator(class UObject* Instigator);
	bool RemoveFxSocketTracer(const struct FLGameObjectHandle& Handle);
	bool SetComboTable(TSoftClassPtr<class UClass> Type);
	void SetSkillTarget(class AActor* Target);
	void SetSkillTargetLocation(const struct FVector& Location);
	int32 StartMeshRotatingOnFloor(float RotSpeed);
	void StartSkillMove(class FName SkillMoveID, float Duration);
	bool StartSyncTransformToTarget(const struct FLSyncTransformToTargetInfo& Info);
	struct FLGameObjectHandle StartTransformModifier_MoveActor(class AActor* TargetActor, const struct FVector& Movement, float Duration, bool FixedDir, bool UseStepUp, class UCurveVector* MoveCurve, const struct FRotator& MoveRot, bool CheckNavPath, bool InvokeBlockEvent, bool CheckFloor);
	struct FLGameObjectHandle StartTransformModifier_MoveActor_MoveOnly(class AActor* TargetActor, const struct FVector& Movement, float Duration, bool UseStepUp, class UCurveVector* MoveCurve, bool CheckNavPath, float ApplyFakeVelocity, bool InvokeBlockEvent, bool CheckFloor);
	struct FLGameObjectHandle StartTransformModifier_MoveActor_Walking(class AActor* TargetActor, const struct FVector& Movement, float Duration, bool FixedDir, class UCurveVector* MoveCurve, const struct FRotator& MoveRot, bool CheckNavPath, bool CheckFloor);
	struct FLGameObjectHandle StartTransformModifier_MoveActor_Walking_MoveOnly(class AActor* TargetActor, const struct FVector& Movement, float Duration, class UCurveVector* MoveCurve, bool CheckNavPath, float ApplyFakeVelocity, bool CheckFloor);
	struct FLGameObjectHandle StartTransformModifier_MoveActor_Walking_Tracking(class AActor* TargetActor, struct FLTransformModifierInfo_MoveActor_Walking_Tracking* Info);
	struct FLGameObjectHandle StartTransformModifier_RotateActor(class AActor* TargetActor, const struct FRotator& Rot, float Duration, class UCurveFloat* RotSpeedCurve);
	struct FLGameObjectHandle StartTransformModifier_RotateActor_AddYaw(class AActor* TargetActor, float AddYaw, float Duration, class UCurveFloat* RotSpeedCurve);
	struct FLGameObjectHandle StartTransformModifier_RotateActor_ToLocation(class AActor* TargetActor, const struct FVector& FaceToLocation, float Duration);
	struct FLGameObjectHandle StartTransformModifier_RotateActor_ToYaw(class AActor* TargetActor, float FinalYaw, float YawSpeed, float Duration);
	struct FLGameObjectHandle StartTransformModifier_RotateActor_Tracking(class AActor* TargetActor, struct FLTransformModifierInfo_RotateActor_Tracking* Info);
	void StopAction(const TSoftClassPtr<class UClass> Type, class ULActBase* ReasonAction, class FName Reason);
	void StopAllAction(class ULActBase* ReasonAction, class FName Reason, bool IncludeDecorateAction);
	void StopAllTransformModifier(float CompensationTime);
	int32 StopMeshRotatingOnFloor(float RotSpeed, bool StopImmediate);
	void StopSkillMove();
	void StopSyncTransformToTarget();
	void StopTransformModifier(const struct FLGameObjectHandle& Handle, float CompensationTime);
	bool UnregisterFxSocketTracerEvent(const struct FLGameObjectHandle& Handle, const TDelegate<void(class ULActMgrComponent* ActMgrComponent, const struct FLFxSocketTracerInfo& SocketTracerInfo, const struct FHitResult& HitResult)>& SocketTraceEvent);
	void UnregisterWatchingCommand(const struct FLGameObjectHandle& Handle);

	bool AleadyInHitGroup(class AActor* Victim, int32 HitGroup) const;
	bool CheckLastPlayingActionClass(const TSoftClassPtr<class UClass> Type) const;
	bool FindActionState(class FName State) const;
	bool FindActionStateAny(const TArray<class FName>& StateArray) const;
	int32 GetActionFrameCount() const;
	class ULComboTableBase* GetComboTable() const;
	class ULActBase* GetLastPlayingAction(bool ExceptHitAction, bool IncludeJustStopped, bool excludeDecorateAction, bool IncludePendingOnStart) const;
	class ULActBase* GetLastPlayingDecorateAction(bool IncludePendingOnStart) const;
	struct FLReservedCommand GetLastPreInputCommand() const;
	struct FVector GetSkillTargetLocation() const;
	void GetStandGuardRangeAngle(int32* RangeAngleStart, int32* RangeAngleEnd) const;
	bool IsInSkillMove() const;
	bool IsTransformModifierActive(const struct FLGameObjectHandle& Handle) const;
	bool IsValidSkillTarget() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LActMgrComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LActMgrComponent")
	}
	static class ULActMgrComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULActMgrComponent>();
	}
};
DUMPER7_ASSERTS_ULActMgrComponent;

// Class ProjectP.LAIController
// 0x0A40 (0x0D68 - 0x0328)
class ALAIController : public AAIController
{
public:
	TMulticastInlineDelegate<void()>              OnSenseApplied;                                    // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         bDebugTargeting : 1;                               // 0x0338(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDebugSkill : 1;                                   // 0x0338(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDebugMovement : 1;                                // 0x0338(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReactivePathFinding : 1;                          // 0x0338(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableCantMove;                                   // 0x0339(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33A[0x2];                                      // 0x033A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CantMoveCheckTime;                                 // 0x033C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CantMoveRandomMoveTime;                            // 0x0340(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRunningAI : 1;                                    // 0x0344(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ANavigationData*                        MyNavData;                                         // 0x0348(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELAITakeDamageType                            TakeDamageType;                                    // 0x0350(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELAIHitDamageType                             HitDamageType;                                     // 0x0351(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_352[0x2];                                      // 0x0352(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitDamageSkillHitCodeName;                         // 0x0354(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELAIRangeCheckFailReason                      RangeCheckFailReason;                              // 0x035C(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35D[0x3];                                      // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLLogicCondition                       LogicCondition;                                    // 0x0360(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<class FString>                           WorldTriggers;                                     // 0x03B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class ALCharacter*                            LCharacter;                                        // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALNPCCharacter*                         OwnerNPC;                                          // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_410[0x14];                                     // 0x0410(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReserveInitStartAITime;                            // 0x0424(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, struct FLAITimer>           Timers;                                            // 0x0428(0x0050)(Edit, BlueprintVisible, EditConst, Protected, NativeAccessSpecifierProtected)
	class ULBTreeStateMachineData*                BTreeStateMachineData;                             // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLBTreeStateMachine                    BTreeStateMachine;                                 // 0x0480(0x0190)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FLNPCTargeting                         Targeting;                                         // 0x0610(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FLNPCPerception                        Perception;                                        // 0x0660(0x0120)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         DebugTargetDetectHistory;                          // 0x0780(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FLBBoardKeyBool                        IsSelectSkillBBKey;                                // 0x0790(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FLNPCSkillLauncher                     SkillLauncher;                                     // 0x0798(0x0208)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_9A0[0x8];                                      // 0x09A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLNPCMovement                          Movement;                                          // 0x09A8(0x03C0)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)

public:
	void AddMoveSpeedRate(class FName MoveSpeedRateName, float SpeedRate);
	void AddPauseAI(class FName PauseName, bool bMaintain);
	void BeginPlayControllerBP();
	bool CalculatePathLength(class FName* CalculateName, const struct FVector& StartLocation, const struct FVector& EndLocation, bool bAllowPartialPaths, float* PathLength, struct FVector* DestLocation, struct FVector* Path1Delta);
	bool CanReachTarget(ELAITargetType TargetType, bool bCheckHeight);
	void ChangeBehaviorTreeState(class FName InStateName);
	void ChangeExtraState();
	void ChangeMoveSpeedRate(float Rate);
	void ChangeReverseMoveDirection(bool bReverse);
	bool CheckActionCategoryAndConsume(ELAITargetType TargetType, ELHostileType HostileTargetType, float TargetCheckRange, ELActionCategory CheckActionCategory, const class FName& ActionCategory_AnyCodeName);
	bool CheckMoveReduced(float ThresholdMoveAmount, float HoldingTime);
	bool CheckOnceCondition(class FName ConditionName);
	bool CheckSelectedSkillRangeAngle(class AActor* CheckActor, ELAIRangeMinMaxType MinMaxType, bool bCheckDistance, bool bCheckAngle, bool bCheckHeight, ELAIRangeCheckType OverrideRangeCheckType);
	bool CheckSkillApproachDist(class AActor* CheckActor, ELAIRangeMinMaxType MinMaxType, float MinDist, float MaxDist);
	bool CheckSkillUseCount(ELAIUseSkillCountType UseSkillCountType, int32 Count);
	bool CheckTargetAngleDeviation(const struct FVector& TargetLocation, int32 DeviationAngle);
	bool CheckTargetRangeHeightAngleDist_PrimaryAngle(float MinRange, float MaxRange, int32 BeginDegree, int32 EndDegree, float CheckHeight, ELAIRangeCheckType RangeCheckType, float PrimaryTarget_StartAngle, float PrimaryTarget_EndAngle, float OverrideTargetToSelf_Angle, float OverrideTargetToSelf_Distance);
	bool CheckTargetRangeInAround(ELAIActorClassType ActorClassType, float CheckDistance, ELHostileType TargetHostileType, class FName TargetCodeName);
	bool CheckWorldTriggerVolatile(const class FString& TriggerName);
	bool ChooseUseSkill(bool bCheckRange, bool bCheckAngle, ELAIRangeMinMaxType RangeMinMaxType, const TArray<struct FLNPCStandbySkill>& CustomSkillList, bool bReselectIncludeCooltime);
	void DoTeleport(ELAITargetType TargetType, ELAIDirectionType DirectionType, const struct FLFloatInterval& Distance, const struct FLFloatInterval& Angle);
	void EndPlayControllerBP();
	class UBehaviorTree* GetCurrentBehaviorTree();
	struct FVector GetHomeLocation();
	class FName GetLastUsedSkillCodeName();
	class AActor* GetMasterActor();
	struct FNPCInfoPtr GetNpcInfo();
	class AActor* GetPrimaryTarget();
	bool GetRandomPointInStrafe(class AActor* TargetActor, float MinDistance, float MaxDistance, float MinAngle, float MaxAngle, struct FVector* RandomLocation, TSubclassOf<class UNavigationQueryFilter> FilterClass);
	class FName GetSelectedSkillCodeName();
	struct FVector GetWarningLocation();
	bool HasMoveGoalReached(const struct FLAIMovementGoal& Goal, bool bProjectPoint, float CustumAcceptibleRadius);
	bool HasMoveReached(const struct FLAIObjective& Target, bool bProjectPoint, float CustumAcceptibleRadius);
	void InitBehaviorTree(class UBehaviorTree* BTree);
	void InitBehaviorTreeState(class FName InStateName);
	void InitStartAI();
	bool IsApplyBoostAI();
	bool IsExistDamageEvent();
	bool IsLaunchSkill(class ULActBase* Action);
	bool IsPathWayMoving();
	bool IsSkillCooltime(class FName SkillId);
	bool IsSkillGlobalCooltime();
	bool IsStrafeMove();
	bool IsWaitOrFinishWayPoint();
	void ManipulateTimer(class FName TimerCodeName, ELAITimerFunctionType FunctionType);
	void ModifyCooltime(ELModifyCooltimeChangeType ChangeType, ELModifyCooltimeTargetType TargetType, const TArray<class FName>& SkillCodeNames, bool bExceptSkillCodeNames, ELAIFloatValueType ValueType, float Cooltime);
	struct FLAIMovementID MoveToGoal(const struct FLAIMovementID& CurrMovementID, const struct FLAIMovementGoal& Goal, const struct FLAIMovementDirection& Direction);
	struct FLAIMoveBehaviorID MoveToPosition(const struct FLAIMovementGoal& Goal, float RotationRate, bool bUseTurnAround, int32 RotateAngleOverride, ELAIMoveSpeedType MoveSpeedType, float MoveSpeed);
	struct FLAIMoveBehaviorID MoveToPositionBack(const struct FLAIMovementGoal& Goal, float RotationRate, ELAIMoveSpeedType MoveSpeedType, float MoveSpeed);
	struct FLAIMovementID MoveToRandomRoamSelf(const struct FLAIMovementID& CurrMovementID, ELAIDirectionType DirectionType, float Distance);
	struct FLAIMovementID MoveToRandomRoamStrafe(const struct FLAIMovementID& CurrMovementID, ELAIDirectionType DirectionType, class AActor* TargetActor, float MinDistance, float MaxDistance, float MinAngle, float MaxAngle);
	struct FLAIMovementID MoveToSkill(const struct FLAIMovementID& CurrMovementID, ELAITargetType TargetType, ELAIDirectionType DirectionType);
	struct FLAIMoveBehaviorID MoveToStrafe(ELAIMoveDirection MoveDirection, float MoveTime, ELAIMoveSpeedType MoveSpeedType, float MoveSpeed);
	struct FLAIMovementID MoveToType(const struct FLAIMovementID& CurrMovementID, ELAITargetType TargetType, ELAIDirectionType DirectionType);
	void OnMovementNavigationQueryFilter(TSubclassOf<class UNavigationQueryFilter>* FilterClass);
	bool QueryTargetCondition(ELQueryTargetConditionType ConditionType);
	void RemoveMoveSpeedRate(class FName MoveSpeedRateName);
	void RemovePauseAI(class FName PauseName, bool bMaintain);
	void RequestMoveToWayPoint(class FName PathWayCodeName, int32 RotateActionDeviationAngle, ELAIMoveSpeedType MoveSpeedType, float MoveSpeedRate);
	void ResetSelectedSkill();
	void ResetTarget();
	void SendWorldTrigger(ELAISendWorldTriggerType TriggerType, const class FString& TriggerString, float SendRadius, class FName NPCCodeName);
	void SenseEvent(const struct FLAISenseTakeLocation& TakeLocation);
	void SetForcePrimaryTarget(class AActor* TargetActor);
	void SetRotationCooltime(float Cooltime);
	void SetSenseEnabled(ELAISense Sense, bool bEnable);
	void SetSkillGlobalCooltime(float Min, float Max);
	void SetSkillList(const TArray<struct FLNPCStandbySkill>& SkillList, bool bResetSkillCooltime);
	void StartAI();
	void StopAI();
	void StopLastMovement();
	void UnChangeExtraState();
	void UpdatePauseLogic();
	void UseSkill(class FName SkillId, bool bUseSkillCooltime, bool bUseGlobalCooltime, bool bForceToLaunch, struct FLNPCSkillLaunchResult* OutResult);
	class ULActBase* UseSkillForce(class FName SkillId, bool bUseSkillCooltime, bool bUseGlobalCooltime);

	bool FindPause(class FName PauseName) const;
	bool FindPauseMetaName(class FName MetaName) const;
	bool FindPauseOnlyMetaName(class FName MetaName) const;
	float GetElapsedTimer(class FName TimerCodeName) const;
	float GetGlobalSkillCooltime() const;
	struct FVector GetLastMoveDestLocation() const;
	struct FLAIMovementID GetLastMovementID() const;
	const class ANavigationData* GetNavData() const;
	float GetRotationCooltime() const;
	float GetSelectedSkillApproachDist() const;
	const TMap<class FName, float> GetSkillCooltimes() const;
	bool GetSkillTargetLocation(struct FVector* Location) const;
	int32 GetTargetNearAllyNum() const;
	bool IsMasterExist() const;
	bool IsMoveBlocking() const;
	bool IsMoving() const;
	bool IsPauseAI() const;
	bool IsRequestMovement(const struct FLAIMovementID& MovementID) const;
	bool IsRunningAI() const;
	bool IsRunningMoveBehavior(const struct FLAIMoveBehaviorID& BehaviorID) const;
	bool IsSkillMoveApproachDistReached() const;
	bool IsTargetExist() const;
	bool IsTicketMove() const;
	bool IsWarningExist() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAIController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAIController")
	}
	static class ALAIController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALAIController>();
	}
};
DUMPER7_ASSERTS_ALAIController;

// Class ProjectP.LAnimNotify_PlayParticleEffect
// 0x0010 (0x00A0 - 0x0090)
class ULAnimNotify_PlayParticleEffect final : public UAnimNotify_PlayParticleEffect
{
public:
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UseAbsoluteRotation;                               // 0x0098(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0099(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_PlayParticleEffect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_PlayParticleEffect")
	}
	static class ULAnimNotify_PlayParticleEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_PlayParticleEffect>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_PlayParticleEffect;

// Class ProjectP.LAIUtilFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULAIUtilFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddPauseAI(class AActor* Actor, class FName PauseName, bool bMaintain);
	static bool CanMoveToLocation_Nav(const struct FLAICheckOwner& CheckOwner, const struct FLAIObjective& CheckTarget, struct FVector* HitLocation);
	static bool CanMoveToLocation_Trace(const struct FLAICheckOwner& CheckOwner, const struct FLAIObjective& CheckTarget, bool bSubtractTargetCapsuleSize);
	static bool CheckAngleBetween(const struct FVector& CriterionLocation, const struct FRotator& CriterionRotation, const struct FVector& TargetLocation, int32 BeginDegree, int32 EndDegree);
	static bool CheckAngleBetweenActor(class AActor* CriterionActor, class AActor* TargetActor, int32 BeginDegree, int32 EndDegree);
	static bool CheckAngleBetweenDeviation(const struct FVector& CriterionLocation, const struct FRotator& CriterionRotation, const struct FVector& TargetLocation, int32 DeviationAngle);
	static bool CheckBackSideLocation2D(class AActor* CriterionActor, class AActor* AroundActor);
	static bool CheckEnemyAttack(class AActor* EnemyActor);
	static bool CheckHostileType(class AActor* CriterionActor, class AActor* TargetActor, ELHostileType HostileType);
	static bool CheckInCameraView(class AActor* Target, float Distance);
	static bool CheckInsideDistance(const struct FVector& P1, const struct FVector& P2, float InsideLength);
	static bool CheckInsideDistance2D(const struct FVector& P1, const struct FVector& P2, float InsideLength);
	static bool CheckInsideDistance2DAndHeight(const struct FVector& P1, const struct FVector& P2, float InsideLength, float InsideHeight);
	static bool CheckInsidePathDistance(class AActor* CriterionActor, class AActor* AroundActor, float InsideLength, class FName CacheName);
	static bool CheckMoveHeight(class ALCharacter* Character, const struct FVector& TraceDelta, bool bDebug);
	static bool CheckPathDirect(const struct FLAICheckOwner& CheckOwner, const struct FLAIObjective& CheckTarget, float MinRange, float MaxRange, ELAIRangeMinMaxType MinMaxType, ELAIRangeCheckFailReason* FailReason);
	static bool CheckPathDirectNavi(const struct FLAICheckOwner& CheckOwner, const struct FLAIObjective& CheckTarget, float MinRange, float MaxRange, ELAIRangeMinMaxType MinMaxType, ELAIRangeCheckFailReason* FailReason);
	static bool CheckPathDirectNavi_Lagacy(const struct FLAICheckOwner& CheckOwner, const struct FLAIObjective& CheckTarget, float MinRange, float MaxRange, ELAIRangeMinMaxType MinMaxType);
	static bool CheckPathDirectProjectile(const struct FLAICheckOwner& CheckOwner, const struct FLAIObjective& CheckTarget, float MinRange, float MaxRange, ELAIRangeMinMaxType MinMaxType, ELAIRangeCheckFailReason* FailReason);
	static bool CheckPathNavi(const struct FLAICheckOwner& CheckOwner, const struct FLAIObjective& CheckTarget, float MinRange, float MaxRange, ELAIRangeMinMaxType MinMaxType, ELAIRangeCheckFailReason* FailReason);
	static bool CheckRangeAngleBetween(const struct FVector& CriterionLocation, const struct FRotator& CriterionRotation, const struct FVector& TargetLocation, float MinRange, float MaxRange, int32 BeginDegree, int32 EndDegree);
	static bool CheckRangeBetween(const struct FVector& CriterionLocation, const struct FVector& TargetLocation, float MinRange, float MaxRange);
	static bool CheckRangeBetweenActor(class AActor* CriterionActor, class AActor* TargetActor, float MinRange, float MaxRange);
	static bool CheckTargetAngle(const struct FLAICheckOwner& CheckOwner, const struct FVector& TargetLocation, int32 BeginDegree, int32 EndDegree);
	static bool CheckTargetHeight(const struct FLAICheckOwner& CheckOwner, const struct FLAIObjective& CheckTarget, float Height);
	static bool CheckTargetRangeHeightAngleDist(const struct FLAICheckOwner& CheckOwner, const struct FLAIObjective& CheckTarget, float CheckHeight, int32 BeginDegree, int32 EndDegree, float MinRange, float MaxRange, ELAIRangeCheckType RangeCheckType, ELAIRangeCheckFailReason* FailReason);
	static bool CheckTargetRangeType(const struct FLAICheckOwner& CheckOwner, const struct FLAIObjective& CheckTarget, ELAIRangeCheckType RangeCheckType, float MinRange, float MaxRange, ELAIRangeMinMaxType MinMaxType, ELAIRangeCheckFailReason* FailReason);
	static struct FLAIMovementDirection DirectionAsActor(class AActor* Actor);
	static struct FLAIMovementDirection DirectionAsLocation(const struct FVector& Location);
	static struct FLAIMovementDirection DirectionAsType(class ALAIController* Controller, ELAIDirectionType DirectionType);
	static void EmptyMovementID(struct FLAIMovementID& MovementID);
	static struct FVector GetAgentDeltaLocation(class ACharacter* Character);
	static class ALNPCController* GetAIController(class AActor* Actor);
	static bool GetAIEnabled(const class UObject* WorldContextObject);
	static struct FVector GetBlackboardValueAsLocation(class UBTNode* NodeOwner, const struct FBlackboardKeySelector& Key);
	static float GetRandomInInterval(const struct FLFloatInterval& Interval);
	static bool GetRandomLocation(struct FLAILocationSampler& Sampler, struct FVector* Location);
	static bool GetRandomLocationInDistance(struct FLAILocationSampler& Sampler, struct FVector* Location, float Distance);
	static bool GetRandomLocationTargetDistanceAngle(struct FLAILocationSampler& Sampler, struct FVector* Location, const struct FLAIObjective& Target, float MinDistance, float MaxDistance, float MinAngle, float MaxAngle);
	static struct FVector GetReachedCylinderExtent(const struct FLAICheckOwner& CheckOwner, const struct FLAIObjective& CheckTarget, float OwnerRadiusScaleFactor);
	static struct FVector GetTraceCharacterMoveObstacleStartLocation(class ALCharacter* Character);
	static void GetTraceStartEndLocation(struct FVector* StartTrace, struct FVector* EndTrace, const struct FLAIObjective& StartActor, const struct FLAIObjective& EndActor);
	static struct FLAIMovementGoal GoalAsActor(class AActor* Actor);
	static struct FLAIMovementGoal GoalAsLocation(const struct FVector& Location);
	static struct FLAIMovementGoal GoalAsType(class ALAIController* Controller, ELAITargetType TargetType);
	static bool IsAttackable(class AActor* CriterionActor, class AActor* TargetActor);
	static bool IsEnemy(class AActor* CriterionActor, class AActor* TargetActor);
	static bool IsEnemyFaction(EFactionType CritrionFaction, EFactionType TargetFaction);
	static bool IsInsideCylinder(const struct FVector& CylinderExtent, const struct FVector& CylinderOrigin, const struct FVector& TargetLocation);
	static bool IsMonsterFactionActor(class AActor* TargetActor);
	static class AActor* MovementDirectionGetActor(const struct FLAIMovementDirection& MovementDirection);
	static class ALCharacter* MovementDirectionGetCharacter(const struct FLAIMovementDirection& MovementDirection);
	static struct FVector MovementDirectionGetLocation(const struct FLAIMovementDirection& MovementDirection);
	static struct FRotator MovementDirectionGetRotation(const struct FLAIMovementDirection& MovementDirection);
	static bool MovementDirectionIsValid(const struct FLAIMovementDirection& MovementDirection);
	static class AActor* MovementGoalGetActor(const struct FLAIMovementGoal& MovementGoal);
	static class ALCharacter* MovementGoalGetCharacter(const struct FLAIMovementGoal& MovementGoal);
	static struct FVector MovementGoalGetLocation(const struct FLAIMovementGoal& MovementGoal);
	static struct FRotator MovementGoalGetRotation(const struct FLAIMovementGoal& MovementGoal);
	static bool MovementGoalIsValid(const struct FLAIMovementGoal& MovementGoal);
	static void MovementGoalSetCustomArriveDistance(struct FLAIMovementGoal& MovementGoal, float ArriveDistance);
	static struct FLAIObjective ObjectiveAsActor(class AActor* Actor);
	static struct FLAIObjective ObjectiveAsLocation(const struct FVector& Location);
	static struct FLAIObjective ObjectiveAsType(class ALAIController* Controller, ELAITargetType TargetType);
	static class AActor* ObjectiveGetActor(const struct FLAIObjective& Objective);
	static struct FVector ObjectiveGetAgentLocation(const struct FLAIObjective& Objective);
	static class ALCharacter* ObjectiveGetCharacter(const struct FLAIObjective& Objective);
	static struct FVector ObjectiveGetLocation(const struct FLAIObjective& Objective);
	static struct FRotator ObjectiveGetRotation(const struct FLAIObjective& Objective);
	static bool ObjectiveIsValid(const struct FLAIObjective& Objective);
	static bool RangeCheck_AllDistance(const struct FLAICheckOwner& CheckOwner, const struct FLAIObjective& CheckTarget, float MinRange, float MaxRange, ELAIRangeMinMaxType MinMaxType, ELAIRangeCheckFailReason* FailReason);
	static bool RangeCheck_Distance2D(const struct FLAICheckOwner& CheckOwner, const struct FLAIObjective& CheckTarget, float MinRange, float MaxRange, ELAIRangeMinMaxType MinMaxType, ELAIRangeCheckFailReason* FailReason);
	static void RemovePauseAI(class AActor* Actor, class FName PauseName, bool bMaintain);
	static bool SampleLocations(struct FLAILocationSampler& Sampler, class ALAIController* Querier, const struct FVector& SampleOrigin, float ReSampleDistance, float SampleDistance, float SpaceBetween);
	static void SetAIEnabled(const class UObject* WorldContextObject, bool bEnable);
	static bool TestCanWalkOnNavi(class ALCharacter* Character, const struct FVector& Start, const struct FVector& End);
	static void TraceMidpointWall(bool* bHasWall, bool* bHasMidpointWall, bool bDebug, class AActor* CheckOwner, const struct FVector& TraceStart, const struct FVector& TraceEnd, const struct FVector& GoalLocation);
	static void UpdateAIEnabled(const class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAIUtilFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAIUtilFuncLibrary")
	}
	static class ULAIUtilFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAIUtilFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULAIUtilFuncLibrary;

// Class ProjectP.LAnimInstance
// 0x03A0 (0x0660 - 0x02C0)
class ULAnimInstance : public UAnimInstance
{
public:
	uint8                                         bDebug : 1;                                        // 0x02B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReflectOnlyInputVelocity : 1;                     // 0x02B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUnregisterdAnimInstance : 1;                      // 0x02B8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         IsStatRoomCharacter : 1;                           // 0x02B8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsPlayingAction : 1;                              // 0x02B8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsFloatingState : 1;                              // 0x02B8(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableFootIK : 1;                                 // 0x02B8(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              HitAdditiveDirection;                              // 0x02BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMainAnimFSMData                       MainFSMData;                                       // 0x02C4(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         FootIKAlpha;                                       // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLMoveBasedRootMotion                  MoveBasedRootMotion;                               // 0x0350(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FLDefinedBoneNames                     BoneNames;                                         // 0x0378(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         LookAtType;                                        // 0x03C8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLAnimLookAtHead                       LookAtHead;                                        // 0x03CC(0x007C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FLAnimLookAtUpperBody                  LookAtUpperBody;                                   // 0x0448(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bDialoging : 1;                                    // 0x0488(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_489[0x3];                                      // 0x0489(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLMontageSlotBlend                     MontageSlotBlend;                                  // 0x048C(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLStretchBoneList                      StretchBones;                                      // 0x04A8(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FLDebugOption_Movement                 Debug_Option;                                      // 0x04F8(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLPhysicsAssetForRigidBodyNode> PhysicsAssetForRigidBodyNodeArray;                 // 0x0540(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLAnimStateMachineInfo> Debug_WatchMachine;                             // 0x0550(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULAnimInstance* LAnimInstance, class FName EventName)> OnRecvAnimFSMCallback; // 0x05A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULAnimInstance* LAnimInstance, class FName MachineName, class FName CurrStateName, class FName PrevStateName, class FName NextStateName)> OnAnimFSM_StateEntry; // 0x05B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULAnimInstance* LAnimInstance, class FName MachineName, class FName CurrStateName, class FName PrevStateName, class FName NextStateName)> OnAnimFSM_StateExit; // 0x05C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USkeletalMesh>>   BodyMeshLibrary;                                   // 0x05D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         BodyMeshLibrary_Cached_Index;                      // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E4[0x4];                                      // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class USkeletalMesh>>   HairMeshLibrary;                                   // 0x05E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         HairMeshLibrary_Cached_Index;                      // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5FC[0x4];                                      // 0x05FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FLAnimStateMachineInfo> BindingAnimFSMInfoMap;                          // 0x0600(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_650[0x10];                                     // 0x0650(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindAnimFSMEvent(class FName MachineName, const TArray<class FName>& StateNameArray);
	void DecreaseStretchBoneAll();
	void DoRagdollFreezeEnable(bool Enable);
	struct FTransform GetEmptyBoneRotation(class FName BoneName, ERelativeTransformSpace TransformSpace);
	struct FRotator GetOwnerBaseRotation(const struct FRotator& Rotation);
	void OnGraphStateChanged_Entry(const struct FAnimNode_StateMachine& Machine, int32 PrevStateIndex, int32 NextStateIndex, class FName MachineName);
	void OnGraphStateChanged_Exit(const struct FAnimNode_StateMachine& Machine, int32 PrevStateIndex, int32 NextStateIndex, class FName MachineName);
	class UAnimMontage* PlaySlotStartLoopEndAnimationAsDynamicMontage(class FName SlotNodeName, class UAnimSequenceBase* StartAsset, class UAnimSequenceBase* LoopAsset, class UAnimSequenceBase* EndAsset, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);
	void SetAdditiveHitFlipFlop();
	void SetAdditiveHitType(ELAdditiveHitType AdditiveHitType);
	void SetSequenceBindingPlaying(bool InPlaying);

	const struct FLDefinedBoneNames GetBoneNames() const;
	struct FLRigStretchBone GetRigStretchBoneDistance(class FName BoneName) const;
	float GetStretchBoneDistance(class FName BoneName) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimInstance")
	}
	static class ULAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimInstance>();
	}
};
DUMPER7_ASSERTS_ULAnimInstance;

// Class ProjectP.LAnimNotifyState_NPCSpawnIdleBranch
// 0x0030 (0x0070 - 0x0040)
class ULAnimNotifyState_NPCSpawnIdleBranch final : public ULAnimNotifyStateBase
{
public:
	class FName                                   UseSkillCodeName;                                  // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ConditionPercent : 1;                              // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PercentValue;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ConditionRange : 1;                                // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ELAIRangeCheckType                            SkillrangeChecktype;                               // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkillDistMin;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillDistMax;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillRangeAngleStart;                              // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillRangeAngleEnd;                                // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillDistHeight;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_NPCSpawnIdleBranch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_NPCSpawnIdleBranch")
	}
	static class ULAnimNotifyState_NPCSpawnIdleBranch* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_NPCSpawnIdleBranch>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_NPCSpawnIdleBranch;

// Class ProjectP.LIKUtilFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULIKUtilFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void FootIK_CalcuateOffset(class ULAnimInstance* AnimInstance, struct FLInverseKinemetic& IK, struct FLFootIKContext& FootIKContext, float DeltaTime);
	static void FootIK_GetPelvisOffset(class ULAnimInstance* AnimInstance, struct FLInverseKinemetic& IK, const TArray<struct FLFootIKContext>& FootIKContexts, float DeltaTime);
	static void FootIK_Trace(class ULAnimInstance* AnimInstance, struct FLInverseKinemetic& IK, struct FLFootIKContext& FootIKContext, float DeltaTime);
	static void IK_Update(class ULAnimInstance* AnimInstance, struct FLInverseKinemetic& IK, float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LIKUtilFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LIKUtilFuncLibrary")
	}
	static class ULIKUtilFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULIKUtilFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULIKUtilFuncLibrary;

// Class ProjectP.LAnimNotifyState_Trail_Inner
// 0x0038 (0x0068 - 0x0030)
class ULAnimNotifyState_Trail_Inner : public UAnimNotifyState
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        PSTemplate;                                        // 0x0038(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 AttachedComponent;                                 // 0x0040(0x0008)(ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   FirstSocketName;                                   // 0x0048(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SecondSocketName;                                  // 0x0050(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Enabled;                                           // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrailWidthMode                               WidthScaleMode;                                    // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WidthScaleCurve;                                   // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRecycleSpawnedSystems : 1;                        // 0x0064(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UParticleSystem* OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Trail_Inner")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Trail_Inner")
	}
	static class ULAnimNotifyState_Trail_Inner* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Trail_Inner>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Trail_Inner;

// Class ProjectP.LAnimNotifyState_UseNaviSpeedrateChange
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_UseNaviSpeedrateChange final : public ULAnimNotifyStateBase
{
public:
	float                                         MoveSpeedRate;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_UseNaviSpeedrateChange")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_UseNaviSpeedrateChange")
	}
	static class ULAnimNotifyState_UseNaviSpeedrateChange* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_UseNaviSpeedrateChange>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_UseNaviSpeedrateChange;

// Class ProjectP.LAnimNotifyState_CommonTrail
// 0x0088 (0x00F0 - 0x0068)
class ULAnimNotifyState_CommonTrail final : public ULAnimNotifyState_Trail_Inner
{
public:
	uint8                                         UseBladeTrail : 1;                                 // 0x0068(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Test_WeaponBreak : 1;                              // 0x0068(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLBladeTrailType                       TestBladeTrailType;                                // 0x006C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
	ELMeshSelectionType                           MeshSelectionType;                                 // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Normal_FirstSocketName;                            // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Normal_SecondSocketName;                           // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Break_FirstSocketName;                             // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Break_SecondSocketName;                            // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ELTrailConditionType, class UParticleSystem*> TrailList;                                    // 0x0098(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ELTrailConditionType                          Test_Condition;                                    // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_CommonTrail")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_CommonTrail")
	}
	static class ULAnimNotifyState_CommonTrail* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_CommonTrail>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_CommonTrail;

// Class ProjectP.LAssetLoader
// 0x0000 (0x0028 - 0x0028)
class ULAssetLoader final : public UObject
{
public:
	static class UObject* FindOrLoadAssetSlowly(TSoftObjectPtr<class UObject> Asset);
	static class UClass* FindOrLoadClassSlowly(TSoftClassPtr<class UClass> AssetClass);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAssetLoader")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAssetLoader")
	}
	static class ULAssetLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAssetLoader>();
	}
};
DUMPER7_ASSERTS_ULAssetLoader;

// Class ProjectP.LAnimNotify_MaterialVaryingDecal
// 0x0048 (0x0090 - 0x0048)
class ULAnimNotify_MaterialVaryingDecal final : public ULAnimNotifyBase
{
public:
	class ULMaterialVarying*                      MaterialVarying;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELMaterialVaryingPlayType                     PlayType;                                          // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x0054(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0060(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                DecalSize;                                         // 0x006C(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRandomRotate;                                   // 0x0078(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELWeaponAttachPointType>               DisableWhenWeaponInListBroken;                     // 0x0080(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_MaterialVaryingDecal")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_MaterialVaryingDecal")
	}
	static class ULAnimNotify_MaterialVaryingDecal* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_MaterialVaryingDecal>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_MaterialVaryingDecal;

// Class ProjectP.LVolume
// 0x0000 (0x0258 - 0x0258)
class ALVolume : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LVolume")
	}
	static class ALVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALVolume>();
	}
};
DUMPER7_ASSERTS_ALVolume;

// Class ProjectP.LAudioOcclusionVolume
// 0x0000 (0x0258 - 0x0258)
class ALAudioOcclusionVolume final : public ALVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAudioOcclusionVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAudioOcclusionVolume")
	}
	static class ALAudioOcclusionVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALAudioOcclusionVolume>();
	}
};
DUMPER7_ASSERTS_ALAudioOcclusionVolume;

// Class ProjectP.LBDecorator_BlueprintBase
// 0x0008 (0x00A8 - 0x00A0)
class ULBDecorator_BlueprintBase final : public UBTDecorator_BlueprintBase
{
public:
	class ALAIController*                         LAIOwner;                                          // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class FString GetBehaivorTreeNodeName();
	void OnPostEditChangeProperty();
	void SetBehaivorTreeNodeName(const class FString& Name_0);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBDecorator_BlueprintBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBDecorator_BlueprintBase")
	}
	static class ULBDecorator_BlueprintBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBDecorator_BlueprintBase>();
	}
};
DUMPER7_ASSERTS_ULBDecorator_BlueprintBase;

// Class ProjectP.LBehaviorTreeComponent
// 0x0008 (0x02A0 - 0x0298)
class ULBehaviorTreeComponent final : public UBehaviorTreeComponent
{
public:
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBehaviorTreeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBehaviorTreeComponent")
	}
	static class ULBehaviorTreeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBehaviorTreeComponent>();
	}
};
DUMPER7_ASSERTS_ULBehaviorTreeComponent;

// Class ProjectP.LAnimNotify_BGM
// 0x0010 (0x0058 - 0x0048)
class ULAnimNotify_BGM final : public ULAnimNotifyBase
{
public:
	class FName                                   SoundName;                                         // 0x0048(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowSoundNameUI;                                  // 0x0050(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_BGM")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_BGM")
	}
	static class ULAnimNotify_BGM* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_BGM>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_BGM;

// Class ProjectP.LBodyStain_Base
// 0x0030 (0x0058 - 0x0028)
class ULBodyStain_Base : public UObject
{
public:
	ELBodyStainCategory                           Category;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ALCharacter>             Owner;                                             // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CodeName;                                          // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBodyStain_Base")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBodyStain_Base")
	}
	static class ULBodyStain_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBodyStain_Base>();
	}
};
DUMPER7_ASSERTS_ULBodyStain_Base;

// Class ProjectP.LBodyStain_Common
// 0x00B8 (0x0110 - 0x0058)
class ULBodyStain_Common final : public ULBodyStain_Base
{
public:
	TSoftObjectPtr<class ULMaterialVarying>       MaterialVaryingRef;                                // 0x0058(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RemainTimeForRewind;                               // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ForwardTimeScale;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RewindTimeScale;                                   // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLMaterialVaryingPlayer                MaterialVaryingPlayer;                             // 0x0090(0x0028)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B8[0x58];                                      // 0x00B8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Initialize(class ALCharacter* InOwner, class FName InCodeName, ELBodyStainCategory InCategory, int32 InPriority, TSoftObjectPtr<class ULMaterialVarying> InMaterialVaryingRef, float InStartTimeDelay, float InRemainTimeForRewind, float InForwardTimeScale, float InRewindTimeScale, bool InRewindOnRemove);

	bool IsRewinding() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBodyStain_Common")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBodyStain_Common")
	}
	static class ULBodyStain_Common* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBodyStain_Common>();
	}
};
DUMPER7_ASSERTS_ULBodyStain_Common;

// Class ProjectP.LAnimNotify_PlayedDisappearEffect
// 0x0000 (0x0048 - 0x0048)
class ULAnimNotify_PlayedDisappearEffect final : public ULAnimNotifyBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_PlayedDisappearEffect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_PlayedDisappearEffect")
	}
	static class ULAnimNotify_PlayedDisappearEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_PlayedDisappearEffect>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_PlayedDisappearEffect;

// Class ProjectP.LBodyStain_Blood
// 0x00D0 (0x0128 - 0x0058)
class ULBodyStain_Blood final : public ULBodyStain_Base
{
public:
	int32                                         BloodLevel;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C[0x24];                                      // 0x005C(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLMaterialParamPlayer                  ParamPlayer;                                       // 0x0080(0x0088)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_108[0x20];                                     // 0x0108(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Initialize(class ALCharacter* InOwner, ELBodyStainCategory InCategory, int32 InPriority, int32 InLevel, float InAmount, const struct FLinearColor& InWetColor, float InTimeApplyWet, float InTimeRemainWet, float InTimeRewindWet);
	void UpdateColorAndAmount(int32 InLevel, const struct FLinearColor& InBloodColor, float InAmount);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBodyStain_Blood")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBodyStain_Blood")
	}
	static class ULBodyStain_Blood* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBodyStain_Blood>();
	}
};
DUMPER7_ASSERTS_ULBodyStain_Blood;

// Class ProjectP.LBodyStain_Wet_Body
// 0x00F8 (0x0150 - 0x0058)
class ULBodyStain_Wet_Body final : public ULBodyStain_Base
{
public:
	float                                         Current_Amount;                                    // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Current_WetColor;                                  // 0x005C(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x14];                                      // 0x006C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLMaterialParamPlayer                  ParamPlayer;                                       // 0x0080(0x0088)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x48];                                     // 0x0108(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Initialize(class ALCharacter* InOwner, float InAmount, const struct FLinearColor& InWetColor, float InTimeApplyWet, float InTimeRemainWet, float InTimeRewindWet);
	void SetFinished();
	void SetTargetAmountAndColor(float InAmount, const struct FLinearColor& InColor);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBodyStain_Wet_Body")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBodyStain_Wet_Body")
	}
	static class ULBodyStain_Wet_Body* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBodyStain_Wet_Body>();
	}
};
DUMPER7_ASSERTS_ULBodyStain_Wet_Body;

// Class ProjectP.LAnimNotify_BodyStain
// 0x0008 (0x0050 - 0x0048)
class ULAnimNotify_BodyStain final : public ULAnimNotifyBase
{
public:
	int32                                         StainLevel;                                        // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amount;                                            // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_BodyStain")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_BodyStain")
	}
	static class ULAnimNotify_BodyStain* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_BodyStain>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_BodyStain;

// Class ProjectP.LBodyStain_Wet_Leg
// 0x0120 (0x0178 - 0x0058)
class ULBodyStain_Wet_Leg final : public ULBodyStain_Base
{
public:
	float                                         Time_Remain_Wet;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrySpeed;                                          // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalSurfaceType                         PhysicalSurface;                                   // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLMaterialParamPlayer                  WetParamPlayer;                                    // 0x0068(0x0088)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F0[0x88];                                      // 0x00F0(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyWetColor();
	void Initialize(class ALCharacter* InOwner, ELPhysicalSurfaceType InPhysicalSurface, const struct FLinearColor& InWetColor, int32 InPriority_Wet_Leg, float InTimeRemainWet, float InDrySpeed);
	void SetTargetColor(const struct FLinearColor& InColor);
	void SetTargetHeight(float InHeight);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBodyStain_Wet_Leg")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBodyStain_Wet_Leg")
	}
	static class ULBodyStain_Wet_Leg* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBodyStain_Wet_Leg>();
	}
};
DUMPER7_ASSERTS_ULBodyStain_Wet_Leg;

// Class ProjectP.LBodyStain_Burn
// 0x00B8 (0x0110 - 0x0058)
class ULBodyStain_Burn final : public ULBodyStain_Base
{
public:
	float                                         Burn_Amount_Value;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Burn_Emissive_Fade_Value;                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Time_Apply_Burn;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Time_Rewind_Burn;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Time_Remain_Dust;                                  // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Time_Rewind_Dust;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLMaterialParamPlayer                  ParamPlayer;                                       // 0x0070(0x0088)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F8[0x18];                                      // 0x00F8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Initialize(class ALCharacter* InOwner, class FName InCodeName, ELBodyStainCategory InType, int32 InPriority, float InBurnAmount, float InEmissiveFade, float InTime_Apply_Burn, float InTime_Rewind_Burn, float InTime_Remain_Dust, float InTime_Rewind_Dust);
	void Rewind_Dust();
	void SetFinished();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBodyStain_Burn")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBodyStain_Burn")
	}
	static class ULBodyStain_Burn* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBodyStain_Burn>();
	}
};
DUMPER7_ASSERTS_ULBodyStain_Burn;

// Class ProjectP.LAnimNotifyState_CamShake
// 0x0018 (0x0058 - 0x0040)
class ULAnimNotifyState_CamShake final : public ULAnimNotifyStateBase
{
public:
	TSubclassOf<class UMatineeCameraShake>        CameraShake;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Falloff;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_CamShake")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_CamShake")
	}
	static class ULAnimNotifyState_CamShake* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_CamShake>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_CamShake;

// Class ProjectP.LBodyStainComponent
// 0x0050 (0x0100 - 0x00B0)
class ULBodyStainComponent final : public UActorComponent
{
public:
	TArray<class ULBodyStain_Base*>               BodyStainList;                                     // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C0[0x20];                                      // 0x00C0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLStain_Loop_Wet_Body_Info>     Loop_Wet_Body_InfoList;                            // 0x00E0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Wet_Leg_Height_Offset;                             // 0x00F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddLoopWetBodyInfo(class AActor* Instigator, ELPhysicalSurfaceType PhysicalSurface, float InAmount, bool IsWaterDrop);
	void ApplyBodyStainData(class ULBodyStain_Base* BodyStain, float TimePlayFrom);
	class ULBodyStain_Base* GetBodyStain(ELBodyStainCategory InType);
	class ULBodyStain_Base* GetBodyStain_by_CodeName(class FName InCodeName);
	void OnBloodOptionChanged(bool bEnable);
	void OnRemoveBodyStain(class FName InCodeName);
	void PlayStain_Abnormal(class FName EventName);
	void PlayStain_Blood(ELBloodEffectType BloodType, int32 InBloodLevel, float ApplyTime);
	void PlayStain_Wet_Body(ELPhysicalSurfaceType PhysicalSurface, float InAmount, bool IsWaterDrop);
	void PlayStain_Wet_Leg(ELPhysicalSurfaceType SurfaceType);
	void Refresh(class USkeletalMeshComponent* SkeletalMeshComponent);
	void RemoveAll();
	void RemoveBodyStain(class FName InCodeName);
	void RemoveLoopWetBodyInfo(class AActor* Instigator);
	void RewindBodyStain(class FName InCodeName);
	void UpdateWaterSoakHeight();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBodyStainComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBodyStainComponent")
	}
	static class ULBodyStainComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBodyStainComponent>();
	}
};
DUMPER7_ASSERTS_ULBodyStainComponent;

// Class ProjectP.LAnimNotify_MaterialParam
// 0x0038 (0x0080 - 0x0048)
class ULAnimNotify_MaterialParam final : public ULAnimNotifyBase
{
public:
	ELMeshSelectionType                           SelectionType;                                     // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLMaterialParamScalar>          ScalarParams;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLMaterialParamVector>          VectorParams;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         OverrideAllDurationTime;                           // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideMaterialSlotName;                          // 0x0074(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_MaterialParam")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_MaterialParam")
	}
	static class ULAnimNotify_MaterialParam* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_MaterialParam>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_MaterialParam;

// Class ProjectP.LAnimNotify_Buff
// 0x0008 (0x0050 - 0x0048)
class ULAnimNotify_Buff final : public ULAnimNotifyBase
{
public:
	class FName                                   BuffCodeName;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_Buff")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_Buff")
	}
	static class ULAnimNotify_Buff* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_Buff>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_Buff;

// Class ProjectP.LBService_BlueprintBase
// 0x0000 (0x0098 - 0x0098)
class ULBService_BlueprintBase final : public UBTService_BlueprintBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LBService_BlueprintBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LBService_BlueprintBase")
	}
	static class ULBService_BlueprintBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULBService_BlueprintBase>();
	}
};
DUMPER7_ASSERTS_ULBService_BlueprintBase;

// Class ProjectP.LCameraUtilFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULCameraUtilFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector CalculateCameraLocationFromPC(class ALCameraWork* CameraWork, float ArmLength, const struct FRotator& ControlRotation);
	static class ALPCCharacter* GetCameraCharacter(const class UObject* WorldContextObject);
	static class ALCameraManager* GetCameraManager(const class UObject* WorldContextObject);
	static struct FVector GetCameraSocketLocation(class ALCameraWork* CameraWork, class FName SocketName);
	static struct FRotator GetCameraSocketRotation(class ALCameraWork* CameraWork, class FName SocketName);
	static float GetCameraTargetArmLength(class ALCameraWork* CameraWork);
	static struct FVector GetCameraTargetArmLocation(class ALCameraWork* CameraWork);
	static void GetCharacterSocketTransform(class ALCharacter* Character, class FName SocketName, struct FTransform* OutTransform);
	static float LinearStep(float Min, float Max, float Value);
	static void MakeLookatCharacter(class ALCharacter* Character, class FName SocketName, const struct FRotator& ActorRotation, float Distance, struct FTransform* OutTransform);
	static void MakeLookatTargetLocation(const struct FVector& CameraLocation, const struct FVector& TargetLocation, float Distance, struct FTransform* OutTransform);
	static void SetCameraCharacterControlRotation(class ALCameraWork* CameraWork, const struct FRotator& ControlRotation);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCameraUtilFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCameraUtilFuncLibrary")
	}
	static class ULCameraUtilFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULCameraUtilFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULCameraUtilFuncLibrary;

// Class ProjectP.LAnimNotifyState_PartsRestore
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_PartsRestore final : public ULAnimNotifyStateBase
{
public:
	class FName                                   PartsCodeName;                                     // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_PartsRestore")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_PartsRestore")
	}
	static class ULAnimNotifyState_PartsRestore* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_PartsRestore>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_PartsRestore;

// Class ProjectP.LInteractActor
// 0x0030 (0x0250 - 0x0220)
class ALInteractActor : public AActor
{
public:
	class ULInteractComponent*                    InteractComponent;                                 // 0x0220(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTalker*                               Talker;                                            // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LastAttachedTalker;                                // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238[0x18];                                     // 0x0238(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LInteractActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LInteractActor")
	}
	static class ALInteractActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALInteractActor>();
	}
};
DUMPER7_ASSERTS_ALInteractActor;

// Class ProjectP.LLevelObject
// 0x0050 (0x02A0 - 0x0250)
class ALLevelObject : public ALInteractActor
{
public:
	uint8                                         Pad_250[0x50];                                     // 0x0250(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetDelayInteractTime();
	float GetInteractTime();
	void OnChangeState(int32 TargetState);
	void OnInteractionEnd();
	void OnInteractionStart();
	void OwnerSpotChangePropState(int32 TargetState);
	void OwnerSpotCheckLinkedNpcSpot(ELLinkedNpcSpotExecuteType ExecuteType);
	void OwnerSpotCheckNextPropState();
	void RemovePropProjectile(int64 ProjectileHandleId);
	int64 SpawnPropProjectile(class FName ProjectileCodeName, class USceneComponent* MuzzleSocket, class AActor* TargetActor);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLevelObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLevelObject")
	}
	static class ALLevelObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALLevelObject>();
	}
};
DUMPER7_ASSERTS_ALLevelObject;

// Class ProjectP.LAnimNotify_PlayMonologue
// 0x0018 (0x0060 - 0x0048)
class ULAnimNotify_PlayMonologue final : public ULAnimNotifyBase
{
public:
	class FName                                   DialogCodeName;                                    // 0x0048(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           PlayableNpc_CodeNameList;                          // 0x0050(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_PlayMonologue")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_PlayMonologue")
	}
	static class ULAnimNotify_PlayMonologue* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_PlayMonologue>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_PlayMonologue;

// Class ProjectP.LCarcassBodyObject
// 0x0078 (0x0318 - 0x02A0)
class ALCarcassBodyObject final : public ALLevelObject
{
public:
	TArray<class FName>                           CarcassHitList;                                    // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   PropVolumeCodeName;                                // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           TimerHandle_AbnormalState_BuildUp;                 // 0x02B8(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPropVolumeInfoPtr                     PropVolumeInfoPtr;                                 // 0x02C0(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLCarcassBodyOverlapData> OverlappedCharacterDataMap;                   // 0x02C8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void CheckAbnormalStateBuildUp();
	void ClearCharacterOverlapState();
	void OnProcessHit(const struct FLProjectileHitInfo& HitInfo, const struct FHitResult& HitResult);
	void RemoveCharacterOverlapState(class ALCharacter* Character);
	void SetCharacterOverlapState(class ALCharacter* Character, ELCarcassBodyObjectOverlapState OverlapState);

	ELCarcassBodyObjectOverlapState GetCharacterOverlapState(class ALCharacter* Character) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCarcassBodyObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCarcassBodyObject")
	}
	static class ALCarcassBodyObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALCarcassBodyObject>();
	}
};
DUMPER7_ASSERTS_ALCarcassBodyObject;

// Class ProjectP.LCharacter
// 0x0780 (0x0C40 - 0x04C0)
class ALCharacter : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x18];                                     // 0x04B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bFootStepLineTrace;                                // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D1[0xF];                                      // 0x04D1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TEMP_IsHitRight;                                   // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlwaysMeshRotatingOnFloor;                         // 0x04E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Is4WayHit;                                         // 0x04E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELCharacterCollisionType                      CharacterCollisionType;                            // 0x04E6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E7[0x11];                                     // 0x04E7(0x0011)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UseCollision_BigCapsule;                           // 0x04F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCollision_BigPhysicsBody;                       // 0x04F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCollision_VisualPhysicsBody;                    // 0x04FA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePhysicsHit;                                     // 0x04FB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MainCapsule_UseOnlyMove;                           // 0x04FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4FD[0x3];                                      // 0x04FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPhysicalAnimationData                 PhysicalAnimationData;                             // 0x0500(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	ELDiePhysicsType                              DiePhysicsType;                                    // 0x0524(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_525[0x3];                                      // 0x0525(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PhysicalAnimationRootBoneName;                     // 0x0528(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalForceToDeadBody_Radius;                    // 0x0530(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalForceToDeadBody_OffsetHeight;              // 0x0534(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalForceToDeadBody_Strength;                  // 0x0538(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PhysicalForceToDeadBody_UseLinearFalloff : 1;      // 0x053C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_53D[0x3];                                      // 0x053D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysicalForceToDeadBody_MarginFromPrevious;        // 0x0540(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAnimFSMState                                MainAnimFSMState;                                  // 0x0544(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFullBodyWhenMoveStopped;                          // 0x0545(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_546[0x2];                                      // 0x0546(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ETEST_ExplodeType, class USkeletalMeshComponent*> TEST_ExplodeMeshMap;                      // 0x0548(0x0050)(Edit, BlueprintVisible, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          TEST_ExplodeLowerMesh;                             // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          TEST_ExplodeMesh_Recovery;                         // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          TEST_ExplodeMesh_Cut;                              // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultActionGroup;                                // 0x05B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLCommonActionMontageInfo> CommonActionGroupMap;                        // 0x05B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLCommonMotionInfo                     CommonMotionInfo;                                  // 0x0608(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   HitProcComponentClass;                             // 0x0618(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ActMgrComponentClass;                              // 0x0640(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   EquipmentComponentClass;                           // 0x0668(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BodyStainComponentClass;                           // 0x0690(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   FrenzyComponentClass;                              // 0x06B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PhysicalAnimationComponentClass;                   // 0x06E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   FXComponentClass;                                  // 0x0708(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ALCharacter* Instigator)> OnJumpedEvent;                     // 0x0730(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Attacker, class AActor* Victim, const struct FHitResult& HitResult, const struct FLHitInfo& Info)> OnProcessHit; // 0x0740(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULHitProcContext* HitContext)> OnPostProcessHit;             // 0x0750(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ALCharacter* Instigator)> OnPostDeadCalled;                  // 0x0760(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ALCharacter* Instigator)> OnDeadCharacter;                   // 0x0770(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsHide)>   OnPlayHide;                                        // 0x0780(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	EFactionType                                  Faction;                                           // 0x0790(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_791[0x1F];                                     // 0x0791(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ELExplosionMeshType, struct FLExplosionMeshInfo> ExplodeMeshTypeMap;                        // 0x07B0(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Default_Mesh_Body;                                 // 0x0800(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Default_Mesh_Face;                                 // 0x0808(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Default_Mesh_Hair;                                 // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USkeletalMeshComponent>  Cached_Mesh_Face;                                  // 0x0818(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USkeletalMeshComponent>  Cached_Mesh_Hair;                                  // 0x0820(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USkeletalMeshComponent>  Cached_Mesh_Mask;                                  // 0x0828(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Value, ELElementDamageType ElementDamageType)> DelegateUI_ReceiveDamage_HeadTag; // 0x0830(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Value, ELElementDamageType ElementDamageType)> DelegateUI_ReceiveDamage_BossHP; // 0x0840(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float HealthRatio, bool ShowFlag)> DelegateUI_SetHP;               // 0x0850(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class ULInteractionCapsuleComponent*          InteractionCapsuleComponent;                       // 0x0860(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULStatComponent*                        StatComponent;                                     // 0x0868(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULAbnormalComponent*                    AbnormalComponent;                                 // 0x0870(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULEquipmentComponent*                   EquipmentComponent;                                // 0x0878(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULBodyStainComponent*                   BodyStainComponent;                                // 0x0880(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULPhysicalAnimationComponent*           PhysicalAnimationComponent;                        // 0x0888(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULWorldEventComponent*                  WorldEventComponent;                               // 0x0890(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULFrenzyComponent*                      FrenzyComponent;                                   // 0x0898(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULFXComponent*                          FXComponent;                                       // 0x08A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULActMgrComponent*                      ActMgrComponent;                                   // 0x08A8(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULHitProcComponent*                     HitProcComponent;                                  // 0x08B0(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationInvokerComponent*            NavInvokerComponent;                               // 0x08B8(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class ULCharacterBlockCapsuleComponent>> CharacterBlockCapsuleComponentArray; // 0x08C0(0x0010)(Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<ELExplosionMeshType, TWeakObjectPtr<class ULExplodeSkeletalMeshComponent>> ExplodeSkeletalMeshComponentMap; // 0x08D0(0x0050)(Edit, ExportObject, DisableEditOnTemplate, Transient, EditConst, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         FallingHeight;                                     // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFallingHeightFromFloor;                         // 0x0924(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLNestedNameState                      NavInvokerNestedState;                             // 0x0928(0x0010)(Edit, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_938[0x45];                                     // 0x0938(0x0045)(Fixing Size After Last Property [ Dumper-7 ])
	EVisibilityBasedAnimTickOption                DesiredAnimTickOption;                             // 0x097D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_97E[0x2];                                      // 0x097E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LastActionGroupTableCodeName;                      // 0x0980(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_988[0x8];                                      // 0x0988(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OriginTransform;                                   // 0x0990(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9C0[0x30];                                     // 0x09C0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RotateBody_UpperBodyLookatAdditiveRotation;        // 0x09F0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	ELLookAtUpperBodyType                         LookAtUpperBodyType;                               // 0x09FC(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9FD[0x3];                                      // 0x09FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookAtUpperBodyScale;                              // 0x0A00(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayBloodSpread_FX;                               // 0x0A04(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELBloodEffectType                             BloodEffectType;                                   // 0x0A05(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A06[0x2];                                      // 0x0A06(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLMaterialParamPlayer>          MaterialParamPlayers;                              // 0x0A08(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FLMaterialParamDefaults                MaterialParamDefaults;                             // 0x0A18(0x00A0)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_AB8[0x10];                                     // 0x0AB8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ULInteractComponent*                    InteractComponent;                                 // 0x0AC8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTalker*                               Talker;                                            // 0x0AD0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LastAttachedTalker;                                // 0x0AD8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AE0[0x18];                                     // 0x0AE0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DitherFadeCodeName;                                // 0x0AF8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DitherFadeHairCodeName;                            // 0x0B00(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DitherFadeWeaponCodeName;                          // 0x0B08(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLLoopAttachFxData>  AttachedLoopFxMap;                                 // 0x0B10(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B60[0xD0];                                     // 0x0B60(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ALHitCollisionDynamic>   SpawnedGuardCollision;                             // 0x0C30(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Cached_Resurrection_Abnormal_Code_Name;            // 0x0C38(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddManagedParticle(class UFXSystemComponent* Particle);
	bool AddRadialImpulseToBody(const struct FVector& Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, bool bVelChange, float MarginFromPrevious);
	bool AddStat(ELSecondStat InStat, int32 AdditionalStat);
	void ApplyMeshScale(float MeshScale);
	void CaptureFallingMotionTransitionInfo();
	bool ChangeActionGroup(class FName ActionGroupTableCodeName);
	bool ChangeCollisionState(ELCollisionState InCollisionState, bool ForceChange);
	bool ChangeCommonActionGroup(class FName CommonActionGroup, class FName LocomotionActionGroup);
	void ChangeLocomotion(class FName ActionGroup);
	void ChangeWeaponAnimState(ELWeaponAttachPointType AttachPointType, ELWeaponPartType PartType, class FName AnimState);
	void ClearWeaponAnimState(ELWeaponAttachPointType AttachPointType, ELWeaponPartType PartType);
	void DeactiveAllManagedParticle();
	void DeadToEvent();
	void EventHitStart(class AActor* Attacker, class AActor* Victim, const struct FLHitInfo& HitInfo, const struct FHitResult& HitResult);
	bool GameObject_RegisterStateManagedComponent(class UActorComponent* TargetActorComponent);
	bool GameObject_UnregisterStateManagedComponent(class UActorComponent* TargetActorComponent);
	struct FRotator GetFocusRotation();
	class AActor* GetFocusTarget();
	void GetHPPercent(float* HPPercent, float* RegainHPPercent);
	class UPhysicalMaterial* GetSimplePhysicalSurface();
	bool IsAboveNavigation(bool bForceUpdate);
	bool IsDead();
	void MoveMeshComponentToCapsuleBottom(const struct FVector& MeshOffset, bool bMaintainMeshView);
	void MoveMeshComponentToCapsuleCenter();
	void OnActionStarted(class ULActMgrComponent* InActMgrComponent, class ULActBase* StartedAction);
	void OnActionStopCalled(class ULActMgrComponent* InActMgrComponent, class ULActBase* StoppingAction, class ULActBase* ReasonAction);
	void OnApplyNeedShrink();
	void OnApplyRunningAbnormal(bool IsApply, class FName AbnormalCodeName);
	bool OnCanHitOccurDecoMesh(class AActor* Attacker, class AActor* Victim, const struct FHitResult& HitResult);
	void OnEquipmentWeaponStateChanged(ELWeaponStateChangeType WeaponStateChangeType);
	void OnPostDead();
	void OnRagdoll(bool bEnable);
	void OnStaminaConsume(int32 InAmount);
	void OnStatChanged(ELSecondStat StatType, int32 AddedValue, int32 PrevStatValue);
	void OverwriteFallingStartHeight(float Height);
	void PlayMaterialParam(const struct FLMaterialParamCollection& ParamCollection, ELMeshSelectionType SelectType);
	void PlayMaterialVarying(class ULMaterialVarying* MaterialVarying, ELMaterialVaryingPlayType PlayType, ELMeshSelectionType SelectionType, class FName PlayName);
	void PostHitProcess(class ULHitProcContext* HitProcContext);
	void PostInitEquipWeapon();
	void ProcessHitContextDeliver(class ULHitProcContext* LHitProcContext, EExecutePin* Branches);
	struct FLReceiveDamageResults ReceiveDamage(const struct FLReceiveDamageParams& Params_0);
	void ReceivePartsDamage(class ULPartsComponent* PartsComponent, int32 Damage, bool* bDestructionIndexDestoryed, class ULHitProcContext* HitProcContext);
	void ReceivePostBeginPlay();
	void RegisterNavigationInvoker(class FName StateName);
	void RemoveAllManagedParticle();
	void ResetFallingMotionTransitionInfo();
	void SetReverseDirection(bool bReverse);
	void SetRuntimeRootMotionEnabled(bool bRootMotion);
	void StopMaterialVarying(class ULMaterialVarying* MaterialVarying);
	void TraceAndLandingOnFloor();
	bool TraceFloatingCeiling(const struct FVector& TestLocation, float TestCapsuleHalfHeight, struct FVector* ResultLocation);
	bool TryConsumeElementalGauge(ELSecondStat ElementType, int32 ConsumePoint);
	bool TryConsumeTough(int32 InAmount, class AActor* Attacker, const struct FLHitInfo& HitInfo, bool CheckOnly, class ULHitProcContext* HitProcContext);
	bool TrySuppressTough();
	void UnregisterNavInvoker(class FName StateName);

	void GetActionGroup(class FName* ActionGroup, class FName* CommonActionGroup, class FName* LocomotionActionGroup) const;
	ELCollisionState GetCurrCollisionState() const;
	EPhysicalSurface GetFloorPhysicalSurface() const;
	const class ANavigationData* GetNavData() const;
	void GetNavInvokerRadius(float* TileGenerationRadius, float* TileRemovalRadius) const;
	const struct FTransform GetOriginTransform() const;
	bool IsRuntimeRootMotionEnabled() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCharacter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCharacter")
	}
	static class ALCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALCharacter>();
	}
};
DUMPER7_ASSERTS_ALCharacter;

// Class ProjectP.LAnimNotifyState_DestructionDefence
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_DestructionDefence final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_DestructionDefence")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_DestructionDefence")
	}
	static class ULAnimNotifyState_DestructionDefence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_DestructionDefence>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_DestructionDefence;

// Class ProjectP.LCharacterBlockCapsuleComponent
// 0x0010 (0x0480 - 0x0470)
class ULCharacterBlockCapsuleComponent final : public UCapsuleComponent
{
public:
	uint8                                         IsHittable : 1;                                    // 0x0470(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         IsMoveBlock : 1;                                   // 0x0470(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         AlwaysStandCapsule : 1;                            // 0x0470(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_471[0xF];                                      // 0x0471(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCharacterBlockCapsuleComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCharacterBlockCapsuleComponent")
	}
	static class ULCharacterBlockCapsuleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULCharacterBlockCapsuleComponent>();
	}
};
DUMPER7_ASSERTS_ULCharacterBlockCapsuleComponent;

// Class ProjectP.LCharacterMovementComponent
// 0x0170 (0x0C60 - 0x0AF0)
class ULCharacterMovementComponent final : public UCharacterMovementComponent
{
public:
	uint8                                         Pad_AF0[0x18];                                     // 0x0AF0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomFalling_PerchRadius;                         // 0x0B08(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomFalling_FloatingHeight;                      // 0x0B0C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomFalling_FloatingHeight_Falling;              // 0x0B10(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomFalling_KeepMotionSpeed;                     // 0x0B14(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B15[0x3];                                      // 0x0B15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ImmediateFallingRemainTimeForPC;                   // 0x0B18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrSpeed;                                         // 0x0B1C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedAdjustRatio;                                  // 0x0B20(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisValueUpperLimit;                               // 0x0B24(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cached_MaxSprintRetainTime;                        // 0x0B28(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ShowMaxWalkSpeedControlLog : 1;                    // 0x0B2C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_B2D[0x3];                                      // 0x0B2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SprintRetainingTimeWhenFalling;                    // 0x0B30(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         UseCanWalkOnFloorOnly : 1;                         // 0x0B34(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         UseCanWalkOnNaviOnly : 1;                          // 0x0B34(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_B35[0x3];                                      // 0x0B35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Cached_AccumulatedMovement;                        // 0x0B38(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Cached_AccumulatedMovement_ForAll;                 // 0x0B44(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMovementMode                                 Cached_PerchHelper_MovementMode;                   // 0x0B50(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B51[0x3];                                      // 0x0B51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Cached_PerchHelper_PreLocation;                    // 0x0B54(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Cached_PerchHelper_OriginalPerchRadiusThreshold;   // 0x0B60(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Cached_PerchHelper_SaveTime;                       // 0x0B64(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B68[0xF8];                                     // 0x0B68(0x00F8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAccumulatedMovement(const struct FVector& AccumulatedMovement, bool ApplyWalkingOnly, bool InSetUseCanWalkOnNaviOnly, bool InSetUseCanWalkOnFloorOnly);
	void SetBrakingDecelerationOverride(float InBrakingDecelerationOverride);
	void SetFrictionOverride(float InFrictionOverride);
	void SetIgnoreRootmotionVelocity(bool DoIgnore);
	void SetUseVelocityControl(bool InUseVelocityControl, float InMaxWalkSpeed);

	bool CheckIsValidLandingSpot(const struct FVector& CapsuleLocation, const struct FHitResult& Hit) const;
	bool GetUseVelocityControl() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCharacterMovementComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCharacterMovementComponent")
	}
	static class ULCharacterMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULCharacterMovementComponent>();
	}
};
DUMPER7_ASSERTS_ULCharacterMovementComponent;

// Class ProjectP.LAnimNotify_PlayTimedGroundFx
// 0x0190 (0x01D0 - 0x0040)
class ULAnimNotify_PlayTimedGroundFx final : public ULAnimNotifyStateBase
{
public:
	class FName                                   EventName;                                         // 0x0040(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName_Sound;                                   // 0x0048(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0050(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Offset;                                            // 0x0060(0x0030)(BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UseSocketOrientedOffset;                           // 0x0090(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAbsoluteRotation;                               // 0x0091(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttached;                                         // 0x0092(0x0001)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      ApplyVariableFloat;                                // 0x0098(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector2D>           ApplyVariableVector2;                              // 0x00E8(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector>             ApplyVariableVector3;                              // 0x0138(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         VolumeModifier;                                    // 0x0188(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLSoundFadeData                        FadeIn;                                            // 0x018C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLSoundFadeData                        FadeOut;                                           // 0x019C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELWeaponAttachPointType>               DisableWhenWeaponInListBroken;                     // 0x01B0(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ELPhysicalSurfaceType                         TestSurface;                                       // 0x01C0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1[0xF];                                      // 0x01C1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_PlayTimedGroundFx")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_PlayTimedGroundFx")
	}
	static class ULAnimNotify_PlayTimedGroundFx* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_PlayTimedGroundFx>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_PlayTimedGroundFx;

// Class ProjectP.LLocalPlayer
// 0x0000 (0x0258 - 0x0258)
class ULLocalPlayer final : public ULocalPlayer
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLocalPlayer")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLocalPlayer")
	}
	static class ULLocalPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLocalPlayer>();
	}
};
DUMPER7_ASSERTS_ULLocalPlayer;

// Class ProjectP.LCheatManager
// 0x0000 (0x0088 - 0x0088)
class ULCheatManager final : public UCheatManager
{
public:
	void BullsOne();
	void CheckDist();
	void CheckDistReset();
	void DebugHit();
	void Die();
	void DisableNotify(const class FString& NotifyType);
	void EnableNotify(const class FString& NotifyType);
	class APlayerController* GetActivePlayerController();
	bool IsActiveDebugCamera();
	void OnePunchMan();
	void RedBull();
	void SetDebugCameraSpeedScale(float InSpeedScale);
	void ToggleDebugCameraHUD();
	void ToggleDebugHitCollision();
	void ToggleGameCommandBook();
	void Zombie();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCheatManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCheatManager")
	}
	static class ULCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULCheatManager>();
	}
};
DUMPER7_ASSERTS_ULCheatManager;

// Class ProjectP.LComboTableBase
// 0x00C0 (0x00E8 - 0x0028)
class ULComboTableBase : public UObject
{
public:
	class ULActPayloadBase*                       Cached_Payload;                                    // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   Cached_SelectedSkillCodeName;                      // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 Cached_CurrActor;                                  // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   Cached_Command;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Cached_Lever;                                      // 0x0048(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULActBase*                              Cached_CurrAction;                                 // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLActionInfo                           Cached_ActionInfo;                                 // 0x0060(0x0060)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FLAction_StartRotationInfo             Cached_StartRotationInfo;                          // 0x00C0(0x0028)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	bool CheckCurrAction_ActionState(const class FName State);
	bool CheckCurrAction_Category(const ELActionCategory Category);
	bool CheckCurrAction_Class(const TSoftClassPtr<class UClass> Type);
	bool CheckCurrAction_SkillID(class FName ID);
	bool CheckCurrAction_Valid();
	bool CheckCurrActor_Moving();
	bool CheckLever_Neutral(bool CheckInputted);
	bool QueryNextAction(class AActor* TargetActor, class FName Command, const struct FVector& Lever, class ULActBase* CurrAction, class FName* OutActionClass, struct FLActionInfo* ActionInfo, class ULActPayloadBase** OutPayload);
	void Select_Skill(class FName SkillCodeName);
	void SelectDir_CurrentLever(float RotationTime);
	void SelectDir_InputttedLever(float RotationTime);
	void SelectDir_LockOnDir(float RotationTime);
	void Traverse(class AActor* TargetActor, class FName Command, const struct FVector& Lever, class ULActBase* CurrAction);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LComboTableBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LComboTableBase")
	}
	static class ULComboTableBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULComboTableBase>();
	}
};
DUMPER7_ASSERTS_ULComboTableBase;

// Class ProjectP.LAnimNotifyState_HUDEvent
// 0x0018 (0x0058 - 0x0040)
class ULAnimNotifyState_HUDEvent final : public ULAnimNotifyStateBase
{
public:
	class FName                                   EventName;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELHUDEventNotifyType                          HUDEventNotifyType;                                // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0xF];                                       // 0x0049(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_HUDEvent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_HUDEvent")
	}
	static class ULAnimNotifyState_HUDEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_HUDEvent>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_HUDEvent;

// Class ProjectP.LCommandHotKeySettings
// 0x0010 (0x0038 - 0x0028)
class ULCommandHotKeySettings final : public UObject
{
public:
	TArray<struct FCommandHotKeyMapping>          CommandHotKeyMappings;                             // 0x0028(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCommandHotKeySettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCommandHotKeySettings")
	}
	static class ULCommandHotKeySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULCommandHotKeySettings>();
	}
};
DUMPER7_ASSERTS_ULCommandHotKeySettings;

// Class ProjectP.LAnimNotifyState_WarningEvent
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_WarningEvent final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_WarningEvent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_WarningEvent")
	}
	static class ULAnimNotifyState_WarningEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_WarningEvent>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_WarningEvent;

// Class ProjectP.LAnimNotifyStateBase_HitCheck
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyStateBase_HitCheck : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyStateBase_HitCheck")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyStateBase_HitCheck")
	}
	static class ULAnimNotifyStateBase_HitCheck* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyStateBase_HitCheck>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyStateBase_HitCheck;

// Class ProjectP.LAnimNotifyState_DisableFatalAttack
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_DisableFatalAttack final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_DisableFatalAttack")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_DisableFatalAttack")
	}
	static class ULAnimNotifyState_DisableFatalAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_DisableFatalAttack>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_DisableFatalAttack;

// Class ProjectP.LAnimNotifyState_Debug
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_Debug final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Debug")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Debug")
	}
	static class ULAnimNotifyState_Debug* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Debug>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Debug;

// Class ProjectP.LAnimNotify_HitGrab
// 0x00E0 (0x0120 - 0x0040)
class ULAnimNotify_HitGrab final : public ULAnimNotifyStateBase_HitCheck
{
public:
	struct FLHitCollisionInfo                     Info;                                              // 0x0040(0x0078)(Edit, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FLGrabInfo                             GrabInfo;                                          // 0x00B8(0x0068)(Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_HitGrab")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_HitGrab")
	}
	static class ULAnimNotify_HitGrab* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_HitGrab>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_HitGrab;

// Class ProjectP.LAnimNotify_SendNPCWorldTrigger
// 0x0028 (0x0070 - 0x0048)
class ULAnimNotify_SendNPCWorldTrigger final : public ULAnimNotifyBase
{
public:
	ELAISendWorldTriggerType                      TriggerType;                                       // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TriggerString;                                     // 0x0050(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SendRadius;                                        // 0x0060(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCCodeName;                                       // 0x0064(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_SendNPCWorldTrigger")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_SendNPCWorldTrigger")
	}
	static class ULAnimNotify_SendNPCWorldTrigger* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_SendNPCWorldTrigger>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_SendNPCWorldTrigger;

// Class ProjectP.LMovieSystemData
// 0x0010 (0x0230 - 0x0220)
class ALMovieSystemData : public AActor
{
public:
	class FName                                   OpenMovieCodeName;                                 // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayingMovieCodeName;                              // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ClearMovieData();
	bool IsPlayingBinkMovie();
	bool PlayBinkMovie(class FName MovieCodeName);
	void StopBinkMovie();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LMovieSystemData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LMovieSystemData")
	}
	static class ALMovieSystemData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALMovieSystemData>();
	}
};
DUMPER7_ASSERTS_ALMovieSystemData;

// Class ProjectP.LAnimNotify_HitGrabRelease
// 0x0088 (0x00C8 - 0x0040)
class ULAnimNotify_HitGrabRelease final : public ULAnimNotifyStateBase_HitCheck
{
public:
	struct FLHitCollisionInfo                     Info;                                              // 0x0040(0x0078)(Edit, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FLGrabReleaseInfo                      GrabReleaseInfo;                                   // 0x00B8(0x0010)(Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_HitGrabRelease")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_HitGrabRelease")
	}
	static class ULAnimNotify_HitGrabRelease* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_HitGrabRelease>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_HitGrabRelease;

// Class ProjectP.LLocationActor
// 0x0000 (0x0220 - 0x0220)
class ALLocationActor final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLocationActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLocationActor")
	}
	static class ALLocationActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALLocationActor>();
	}
};
DUMPER7_ASSERTS_ALLocationActor;

// Class ProjectP.LAnimNotify_PartsHitCheck
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotify_PartsHitCheck final : public ULAnimNotifyStateBase_HitCheck
{
public:
	int32                                         HitIndex;                                          // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartsIndex;                                        // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_PartsHitCheck")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_PartsHitCheck")
	}
	static class ULAnimNotify_PartsHitCheck* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_PartsHitCheck>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_PartsHitCheck;

// Class ProjectP.LAnimNotify_DespawnNPC
// 0x0000 (0x0048 - 0x0048)
class ULAnimNotify_DespawnNPC final : public ULAnimNotifyBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_DespawnNPC")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_DespawnNPC")
	}
	static class ULAnimNotify_DespawnNPC* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_DespawnNPC>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_DespawnNPC;

// Class ProjectP.LAnimNotify_HitCheck
// 0x0078 (0x00B8 - 0x0040)
class ULAnimNotify_HitCheck : public ULAnimNotifyStateBase_HitCheck
{
public:
	struct FLHitCollisionInfo                     Info;                                              // 0x0040(0x0078)(Edit, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_HitCheck")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_HitCheck")
	}
	static class ULAnimNotify_HitCheck* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_HitCheck>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_HitCheck;

// Class ProjectP.LAnimNotifyState_Object_Destruct
// 0x0000 (0x00B8 - 0x00B8)
class ULAnimNotifyState_Object_Destruct final : public ULAnimNotify_HitCheck
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Object_Destruct")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Object_Destruct")
	}
	static class ULAnimNotifyState_Object_Destruct* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Object_Destruct>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Object_Destruct;

// Class ProjectP.LAnimNotifyState_ApplyInput_GetUpDash
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ApplyInput_GetUpDash final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ApplyInput_GetUpDash")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ApplyInput_GetUpDash")
	}
	static class ULAnimNotifyState_ApplyInput_GetUpDash* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ApplyInput_GetUpDash>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ApplyInput_GetUpDash;

// Class ProjectP.LAnimNotifyState_WeaponHitCheck
// 0x0018 (0x0058 - 0x0040)
class ULAnimNotifyState_WeaponHitCheck final : public ULAnimNotifyStateBase_HitCheck
{
public:
	class FName                                   SkillCodeNameOverride;                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitIndex;                                          // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickInterval;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponAttachPointType                       WeaponAttachPointType;                             // 0x0050(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSpark;                                      // 0x0051(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRepulse;                                    // 0x0052(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_WeaponHitCheck")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_WeaponHitCheck")
	}
	static class ULAnimNotifyState_WeaponHitCheck* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_WeaponHitCheck>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_WeaponHitCheck;

// Class ProjectP.LAnimNotifyState_WeaponHide
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_WeaponHide final : public ULAnimNotifyStateBase
{
public:
	ELWeaponAttachPointType                       WeaponAttachPointType;                             // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_WeaponHide")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_WeaponHide")
	}
	static class ULAnimNotifyState_WeaponHide* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_WeaponHide>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_WeaponHide;

// Class ProjectP.LAnimNotifyState_ChangeState_Dead
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ChangeState_Dead final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ChangeState_Dead")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ChangeState_Dead")
	}
	static class ULAnimNotifyState_ChangeState_Dead* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ChangeState_Dead>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ChangeState_Dead;

// Class ProjectP.LAnimNotifyState_HideManagedEffects
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_HideManagedEffects final : public ULAnimNotifyStateBase
{
public:
	bool                                          bHide;                                             // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_HideManagedEffects")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_HideManagedEffects")
	}
	static class ULAnimNotifyState_HideManagedEffects* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_HideManagedEffects>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_HideManagedEffects;

// Class ProjectP.LAnimNotifyState_RootMotionScaling
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_RootMotionScaling final : public ULAnimNotifyStateBase
{
public:
	ELAnimRootMotionScaleOperationType            OperationType;                                     // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TranslationScale;                                  // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_RootMotionScaling")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_RootMotionScaling")
	}
	static class ULAnimNotifyState_RootMotionScaling* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_RootMotionScaling>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_RootMotionScaling;

// Class ProjectP.LAnimNotify_ChangeNpcWeapon
// 0x0018 (0x0060 - 0x0048)
class ULAnimNotify_ChangeNpcWeapon final : public ULAnimNotifyBase
{
public:
	class FName                                   MonsterWeaponCodeName;                             // 0x0048(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ELWeaponAttachPointType                       WeaponAttachPointType;                             // 0x0050(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionGroupTableCodeName;                          // 0x0054(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_ChangeNpcWeapon")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_ChangeNpcWeapon")
	}
	static class ULAnimNotify_ChangeNpcWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_ChangeNpcWeapon>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_ChangeNpcWeapon;

// Class ProjectP.LAnimNotify_WeaponOn
// 0x0000 (0x0048 - 0x0048)
class ULAnimNotify_WeaponOn final : public ULAnimNotifyBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_WeaponOn")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_WeaponOn")
	}
	static class ULAnimNotify_WeaponOn* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_WeaponOn>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_WeaponOn;

// Class ProjectP.LAnimNotify_WeaponOff
// 0x0000 (0x0048 - 0x0048)
class ULAnimNotify_WeaponOff final : public ULAnimNotifyBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_WeaponOff")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_WeaponOff")
	}
	static class ULAnimNotify_WeaponOff* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_WeaponOff>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_WeaponOff;

// Class ProjectP.LAnimNotifyState_FixAimToTarget
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_FixAimToTarget final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_FixAimToTarget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_FixAimToTarget")
	}
	static class ULAnimNotifyState_FixAimToTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_FixAimToTarget>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_FixAimToTarget;

// Class ProjectP.LAnimNotify_WeaponSelectOn
// 0x0008 (0x0050 - 0x0048)
class ULAnimNotify_WeaponSelectOn final : public ULAnimNotifyBase
{
public:
	ELWeaponAttachPointType                       WeaponAttachPointType;                             // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_WeaponSelectOn")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_WeaponSelectOn")
	}
	static class ULAnimNotify_WeaponSelectOn* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_WeaponSelectOn>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_WeaponSelectOn;

// Class ProjectP.LAnimNotify_WeaponSelectOff
// 0x0008 (0x0050 - 0x0048)
class ULAnimNotify_WeaponSelectOff final : public ULAnimNotifyBase
{
public:
	ELWeaponAttachPointType                       WeaponAttachPointType;                             // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_WeaponSelectOff")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_WeaponSelectOff")
	}
	static class ULAnimNotify_WeaponSelectOff* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_WeaponSelectOff>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_WeaponSelectOff;

// Class ProjectP.LAnimNotify_FootStep
// 0x0030 (0x0078 - 0x0048)
class ULAnimNotify_FootStep final : public ULAnimNotifyBase
{
public:
	class FName                                   BoneName;                                          // 0x0048(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0050(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName_Sound;                                   // 0x0058(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeModifier;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestMoveSpeed;                                     // 0x0064(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalSurfaceType                         TestMaterialType;                                  // 0x0068(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLCharacterSoundType                   TestCharacterSoundType;                            // 0x006C(0x0008)(Edit, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_FootStep")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_FootStep")
	}
	static class ULAnimNotify_FootStep* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_FootStep>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_FootStep;

// Class ProjectP.LAnimNotifyState_ChangeRateScale
// 0x0010 (0x0050 - 0x0040)
class ULAnimNotifyState_ChangeRateScale final : public ULAnimNotifyStateBase
{
public:
	float                                         PrevPlayRate;                                      // 0x0040(0x0004)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ELAnimRateScaleOperationType                  OperationType;                                     // 0x0044(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimRateScale;                                     // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreezeTime;                                        // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ChangeRateScale")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ChangeRateScale")
	}
	static class ULAnimNotifyState_ChangeRateScale* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ChangeRateScale>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ChangeRateScale;

// Class ProjectP.LAnimNotifyState_AnimPlayRate
// 0x0010 (0x0050 - 0x0040)
class ULAnimNotifyState_AnimPlayRate final : public ULAnimNotifyStateBase
{
public:
	ELAnimRateScaleOperationType                  OperationType;                                     // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimRateScale;                                     // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreezeTime;                                        // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_AnimPlayRate")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_AnimPlayRate")
	}
	static class ULAnimNotifyState_AnimPlayRate* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_AnimPlayRate>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_AnimPlayRate;

// Class ProjectP.LAnimNotify_NpcStandGuardEnable
// 0x00A0 (0x00E8 - 0x0048)
class ULAnimNotify_NpcStandGuardEnable final : public ULAnimNotifyBase
{
public:
	class FName                                   ActionGroupCodeName;                               // 0x0048(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaminaRecoveryRatio;                              // 0x0050(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuardRangeAngleStart;                              // 0x0054(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuardRangeAngleEnd;                                // 0x0058(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLHitCollisionInfo                     HitInfo;                                           // 0x0060(0x0078)(Edit, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ELWeaponAttachPointType                       WeaponAttachPointType;                             // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartAngle;                                        // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndAngle;                                          // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Distance;                                          // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_NpcStandGuardEnable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_NpcStandGuardEnable")
	}
	static class ULAnimNotify_NpcStandGuardEnable* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_NpcStandGuardEnable>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_NpcStandGuardEnable;

// Class ProjectP.LAnimNotifyState_AllowInput_Rotation
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_AllowInput_Rotation final : public ULAnimNotifyStateBase
{
public:
	float                                         RotationSpeed;                                     // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_AllowInput_Rotation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_AllowInput_Rotation")
	}
	static class ULAnimNotifyState_AllowInput_Rotation* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_AllowInput_Rotation>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_AllowInput_Rotation;

// Class ProjectP.LAnimNotifyState_DisableLockOnRotation
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_DisableLockOnRotation final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_DisableLockOnRotation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_DisableLockOnRotation")
	}
	static class ULAnimNotifyState_DisableLockOnRotation* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_DisableLockOnRotation>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_DisableLockOnRotation;

// Class ProjectP.LAnimNotify_Smash
// 0x0050 (0x0098 - 0x0048)
class ULAnimNotify_Smash final : public ULAnimNotifyBase
{
public:
	ELMeshSelectionType                           MeshSelectionType;                                 // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x004C(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _OffsetLocation;                                   // 0x0054(0x000C)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetRotation;                                    // 0x0060(0x000C)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetScale;                                       // 0x006C(0x000C)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSocketOrientedOffset;                           // 0x0078(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAbsoluteRotation;                               // 0x0079(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeModifier;                                    // 0x007C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ELWeaponAttachPointType>               DisableWhenWeaponInListBroken;                     // 0x0080(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ELPhysicalSurfaceType                         TestAttackerSurface;                               // 0x0090(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalSurfaceType                         TestGroundSurface;                                 // 0x0091(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_Smash")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_Smash")
	}
	static class ULAnimNotify_Smash* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_Smash>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_Smash;

// Class ProjectP.LAnimNotifyState_CurrentLeverForcedMove
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_CurrentLeverForcedMove final : public ULAnimNotifyStateBase
{
public:
	float                                         MoveSpeed;                                         // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseRotation : 1;                                   // 0x0044(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         UseLeverTracking : 1;                              // 0x0044(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_CurrentLeverForcedMove")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_CurrentLeverForcedMove")
	}
	static class ULAnimNotifyState_CurrentLeverForcedMove* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_CurrentLeverForcedMove>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_CurrentLeverForcedMove;

// Class ProjectP.LAnimNotifyState_AllowInput_Move
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_AllowInput_Move final : public ULAnimNotifyStateBase
{
public:
	uint8                                         CancelAction : 1;                                  // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_AllowInput_Move")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_AllowInput_Move")
	}
	static class ULAnimNotifyState_AllowInput_Move* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_AllowInput_Move>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_AllowInput_Move;

// Class ProjectP.LAnimNotify_PlayTimedCharacterSD
// 0x0090 (0x00D0 - 0x0040)
class ULAnimNotify_PlayTimedCharacterSD final : public ULAnimNotifyStateBase
{
public:
	class FName                                   EventName;                                         // 0x0040(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0048(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Offset;                                            // 0x0050(0x0030)(BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAttached;                                         // 0x0080(0x0001)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeModifier;                                    // 0x0084(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELMeshSelectionType                           MeshSelectionType;                                 // 0x0088(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLSoundFadeData                        FadeIn;                                            // 0x008C(0x0010)(Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLSoundFadeData                        FadeOut;                                           // 0x009C(0x0010)(Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELWeaponAttachPointType>               DisableWhenWeaponInListBroken;                     // 0x00B0(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLCharacterSoundType                   TestCharacterSoundType;                            // 0x00C0(0x0008)(Edit, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAudioComponent>         AudioComponent;                                    // 0x00C8(0x0008)(ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_PlayTimedCharacterSD")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_PlayTimedCharacterSD")
	}
	static class ULAnimNotify_PlayTimedCharacterSD* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_PlayTimedCharacterSD>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_PlayTimedCharacterSD;

// Class ProjectP.LAnimNotifyState_ApplyInput
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ApplyInput final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ApplyInput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ApplyInput")
	}
	static class ULAnimNotifyState_ApplyInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ApplyInput>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ApplyInput;

// Class ProjectP.LAnimNotifyState_ApplyInput_ChargeCancel
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ApplyInput_ChargeCancel final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ApplyInput_ChargeCancel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ApplyInput_ChargeCancel")
	}
	static class ULAnimNotifyState_ApplyInput_ChargeCancel* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ApplyInput_ChargeCancel>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ApplyInput_ChargeCancel;

// Class ProjectP.LAnimNotify_ApplySingleActionState
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotify_ApplySingleActionState final : public ULAnimNotifyStateBase
{
public:
	class FName                                   ActionState;                                       // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_ApplySingleActionState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_ApplySingleActionState")
	}
	static class ULAnimNotify_ApplySingleActionState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_ApplySingleActionState>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_ApplySingleActionState;

// Class ProjectP.LAnimNotifyState_AllowInput_Charge_Cancel
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_AllowInput_Charge_Cancel final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_AllowInput_Charge_Cancel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_AllowInput_Charge_Cancel")
	}
	static class ULAnimNotifyState_AllowInput_Charge_Cancel* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_AllowInput_Charge_Cancel>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_AllowInput_Charge_Cancel;

// Class ProjectP.LAnimNotifyState_Allow_FableCancel
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_Allow_FableCancel final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Allow_FableCancel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Allow_FableCancel")
	}
	static class ULAnimNotifyState_Allow_FableCancel* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Allow_FableCancel>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Allow_FableCancel;

// Class ProjectP.LAnimNotify_LAnimBranch
// 0x0030 (0x0070 - 0x0040)
class ULAnimNotify_LAnimBranch final : public ULAnimNotifyStateBase
{
public:
	bool                                          _condition_percent;                                // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _percent_value;                                    // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _condition_hit_target;                             // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _hit_target_action_event_alias;                    // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _condition_defence_skill;                          // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _condition_part_needed;                            // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_LAnimBranch")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_LAnimBranch")
	}
	static class ULAnimNotify_LAnimBranch* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_LAnimBranch>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_LAnimBranch;

// Class ProjectP.LAnimNotifyState_AllowInput_SlaveArm
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_AllowInput_SlaveArm final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_AllowInput_SlaveArm")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_AllowInput_SlaveArm")
	}
	static class ULAnimNotifyState_AllowInput_SlaveArm* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_AllowInput_SlaveArm>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_AllowInput_SlaveArm;

// Class ProjectP.LAnimNotifyState_ApplyInput_Guard
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ApplyInput_Guard final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ApplyInput_Guard")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ApplyInput_Guard")
	}
	static class ULAnimNotifyState_ApplyInput_Guard* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ApplyInput_Guard>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ApplyInput_Guard;

// Class ProjectP.LAnimNotifyState_FloatingStateOff
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_FloatingStateOff final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_FloatingStateOff")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_FloatingStateOff")
	}
	static class ULAnimNotifyState_FloatingStateOff* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_FloatingStateOff>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_FloatingStateOff;

// Class ProjectP.LAnimNotifyState_AllowInput_Guard
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_AllowInput_Guard final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_AllowInput_Guard")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_AllowInput_Guard")
	}
	static class ULAnimNotifyState_AllowInput_Guard* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_AllowInput_Guard>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_AllowInput_Guard;

// Class ProjectP.LAnimNotifyState_ApplyInput_LightAttack
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ApplyInput_LightAttack final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ApplyInput_LightAttack")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ApplyInput_LightAttack")
	}
	static class ULAnimNotifyState_ApplyInput_LightAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ApplyInput_LightAttack>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ApplyInput_LightAttack;

// Class ProjectP.LAnimNotifyState_ChangeWeaponAnimState
// 0x0010 (0x0050 - 0x0040)
class ULAnimNotifyState_ChangeWeaponAnimState final : public ULAnimNotifyStateBase
{
public:
	ELWeaponPartType                              WeaponPartType;                                    // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponAttachPointType                       WeaponAttachPointType;                             // 0x0041(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLWeaponAnimStateType                  AnimStateName;                                     // 0x0044(0x0008)(Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ChangeWeaponAnimState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ChangeWeaponAnimState")
	}
	static class ULAnimNotifyState_ChangeWeaponAnimState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ChangeWeaponAnimState>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ChangeWeaponAnimState;

// Class ProjectP.LAnimNotifyState_ApplyInput_StrongAttack
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ApplyInput_StrongAttack final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ApplyInput_StrongAttack")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ApplyInput_StrongAttack")
	}
	static class ULAnimNotifyState_ApplyInput_StrongAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ApplyInput_StrongAttack>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ApplyInput_StrongAttack;

// Class ProjectP.LAnimNotifyState_ApplyInput_Dash
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ApplyInput_Dash final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ApplyInput_Dash")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ApplyInput_Dash")
	}
	static class ULAnimNotifyState_ApplyInput_Dash* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ApplyInput_Dash>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ApplyInput_Dash;

// Class ProjectP.LAnimNotifyState_GuardCheck_NoStiffen
// 0x0080 (0x00C0 - 0x0040)
class ULAnimNotifyState_GuardCheck_NoStiffen final : public ULAnimNotifyStateBase
{
public:
	int32                                         GuardRangeAngleStart;                              // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuardRangeAngleEnd;                                // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLHitCollisionInfo                     HitInfo;                                           // 0x0048(0x0078)(Edit, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_GuardCheck_NoStiffen")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_GuardCheck_NoStiffen")
	}
	static class ULAnimNotifyState_GuardCheck_NoStiffen* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_GuardCheck_NoStiffen>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_GuardCheck_NoStiffen;

// Class ProjectP.LAnimNotifyState_AllowInput_Repair_Cancel
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_AllowInput_Repair_Cancel final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_AllowInput_Repair_Cancel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_AllowInput_Repair_Cancel")
	}
	static class ULAnimNotifyState_AllowInput_Repair_Cancel* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_AllowInput_Repair_Cancel>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_AllowInput_Repair_Cancel;

// Class ProjectP.LAnimNotifyState_Victim_CounterCheck
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_Victim_CounterCheck final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Victim_CounterCheck")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Victim_CounterCheck")
	}
	static class ULAnimNotifyState_Victim_CounterCheck* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Victim_CounterCheck>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Victim_CounterCheck;

// Class ProjectP.LAnimNotify_ConsumeFrenzyUnit
// 0x0000 (0x0048 - 0x0048)
class ULAnimNotify_ConsumeFrenzyUnit final : public ULAnimNotifyBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_ConsumeFrenzyUnit")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_ConsumeFrenzyUnit")
	}
	static class ULAnimNotify_ConsumeFrenzyUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_ConsumeFrenzyUnit>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_ConsumeFrenzyUnit;

// Class ProjectP.LAnimNotifyState_ToughDefense
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_ToughDefense final : public ULAnimNotifyStateBase
{
public:
	int32                                         ToughDefenseValue;                                 // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ToughDefense")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ToughDefense")
	}
	static class ULAnimNotifyState_ToughDefense* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ToughDefense>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ToughDefense;

// Class ProjectP.LAnimNotifyState_MoveActor
// 0x0020 (0x0060 - 0x0040)
class ULAnimNotifyState_MoveActor final : public ULAnimNotifyStateBase
{
public:
	class UCurveVector*                           MoveCurve;                                         // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Movement;                                          // 0x0048(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFixedDir;                                       // 0x0054(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseStepUp;                                         // 0x0055(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckNavPath;                                      // 0x0056(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x9];                                       // 0x0057(0x0009)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_MoveActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_MoveActor")
	}
	static class ULAnimNotifyState_MoveActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_MoveActor>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_MoveActor;

// Class ProjectP.LAnimNotify_TeleportTimed
// 0x0018 (0x0058 - 0x0040)
class ULAnimNotify_TeleportTimed final : public ULAnimNotifyStateBase
{
public:
	ELAITargetType                                TargetType;                                        // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAIDirectionType                             DirectionType;                                     // 0x0041(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         Distance;                                          // 0x0044(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         Angle;                                             // 0x004C(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDissolveEffectEnabled;                            // 0x0054(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_TeleportTimed")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_TeleportTimed")
	}
	static class ULAnimNotify_TeleportTimed* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_TeleportTimed>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_TeleportTimed;

// Class ProjectP.LAnimNotifyState_GroundWalking
// 0x0020 (0x0060 - 0x0040)
class ULAnimNotifyState_GroundWalking final : public ULAnimNotifyStateBase
{
public:
	class UCurveVector*                           MoveCurve;                                         // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Movement;                                          // 0x0048(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFixedDir;                                       // 0x0054(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0xB];                                       // 0x0055(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_GroundWalking")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_GroundWalking")
	}
	static class ULAnimNotifyState_GroundWalking* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_GroundWalking>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_GroundWalking;

// Class ProjectP.LAnimNotify_ApplyCommmand
// 0x0018 (0x0060 - 0x0048)
class ULAnimNotify_ApplyCommmand final : public ULAnimNotifyBase
{
public:
	class FName                                   Command;                                           // 0x0048(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Lever;                                             // 0x0050(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipCommandPrerequisitiesCheck;                    // 0x005C(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_ApplyCommmand")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_ApplyCommmand")
	}
	static class ULAnimNotify_ApplyCommmand* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_ApplyCommmand>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_ApplyCommmand;

// Class ProjectP.LAnimNotifyState_CheckCommandHold
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_CheckCommandHold final : public ULAnimNotifyStateBase
{
public:
	class FName                                   Command;                                           // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_CheckCommandHold")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_CheckCommandHold")
	}
	static class ULAnimNotifyState_CheckCommandHold* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_CheckCommandHold>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_CheckCommandHold;

// Class ProjectP.LAnimNotify_ApplyActionState
// 0x0010 (0x0050 - 0x0040)
class ULAnimNotify_ApplyActionState final : public ULAnimNotifyStateBase
{
public:
	TArray<class FName>                           ActionStateArray;                                  // 0x0040(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_ApplyActionState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_ApplyActionState")
	}
	static class ULAnimNotify_ApplyActionState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_ApplyActionState>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_ApplyActionState;

// Class ProjectP.LAnimNotifyState_UseBodyLookat
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_UseBodyLookat final : public ULAnimNotifyStateBase
{
public:
	ELLookAtUpperBodyType                         LookAtType;                                        // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookatScale;                                       // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_UseBodyLookat")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_UseBodyLookat")
	}
	static class ULAnimNotifyState_UseBodyLookat* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_UseBodyLookat>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_UseBodyLookat;

// Class ProjectP.LAnimNotify_DecreaseWeaponDurability
// 0x0008 (0x0050 - 0x0048)
class ULAnimNotify_DecreaseWeaponDurability final : public ULAnimNotifyBase
{
public:
	int32                                         DecreaseAmount;                                    // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_DecreaseWeaponDurability")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_DecreaseWeaponDurability")
	}
	static class ULAnimNotify_DecreaseWeaponDurability* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_DecreaseWeaponDurability>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_DecreaseWeaponDurability;

// Class ProjectP.LAnimNotifyState_UseHeadLookat
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_UseHeadLookat final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_UseHeadLookat")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_UseHeadLookat")
	}
	static class ULAnimNotifyState_UseHeadLookat* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_UseHeadLookat>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_UseHeadLookat;

// Class ProjectP.LSpecialBuff
// 0x0020 (0x0048 - 0x0028)
class ULSpecialBuff : public UObject
{
public:
	struct FSpecialBuffInfoPtr                    Info;                                              // 0x0028(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class ALCharacter* GetOwner();
	void OnAttached();
	void OnDetached();
	void Tick(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff")
	}
	static class ULSpecialBuff* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff;

// Class ProjectP.LSpecialBuff_Abnormal_On_PerfectGuardSuccessOnFuryAttack
// 0x0000 (0x0048 - 0x0048)
class ULSpecialBuff_Abnormal_On_PerfectGuardSuccessOnFuryAttack final : public ULSpecialBuff
{
public:
	void ApplyAbnormal();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_Abnormal_On_PerfectGuardSuccessOnFuryAttack")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_Abnormal_On_PerfectGuardSuccessOnFuryAttack")
	}
	static class ULSpecialBuff_Abnormal_On_PerfectGuardSuccessOnFuryAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_Abnormal_On_PerfectGuardSuccessOnFuryAttack>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_Abnormal_On_PerfectGuardSuccessOnFuryAttack;

// Class ProjectP.LAnimNotifyState_SkillMove
// 0x00B0 (0x00F0 - 0x0040)
class ULAnimNotifyState_SkillMove final : public ULAnimNotifyStateBase
{
public:
	class FName                                   SkillMoveID;                                       // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseOverride : 1;                                   // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLSkillMoveInfoOverride                SkillMoveOverride;                                 // 0x0050(0x00A0)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_SkillMove")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_SkillMove")
	}
	static class ULAnimNotifyState_SkillMove* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_SkillMove>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_SkillMove;

// Class ProjectP.LPropMonologueComponent
// 0x0010 (0x00C0 - 0x00B0)
class ULPropMonologueComponent final : public UActorComponent
{
public:
	class FName                                   DialogCodeName;                                    // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlay2DSound;                                      // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropMonologueComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropMonologueComponent")
	}
	static class ULPropMonologueComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPropMonologueComponent>();
	}
};
DUMPER7_ASSERTS_ULPropMonologueComponent;

// Class ProjectP.LAnimNotifyState_GuardCheck
// 0x0080 (0x00C0 - 0x0040)
class ULAnimNotifyState_GuardCheck final : public ULAnimNotifyStateBase
{
public:
	int32                                         GuardRangeAngleStart;                              // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuardRangeAngleEnd;                                // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLHitCollisionInfo                     HitInfo;                                           // 0x0048(0x0078)(Edit, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_GuardCheck")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_GuardCheck")
	}
	static class ULAnimNotifyState_GuardCheck* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_GuardCheck>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_GuardCheck;

// Class ProjectP.LSpecialBuff_Abnormal_On_Debuff
// 0x0008 (0x0050 - 0x0048)
class ULSpecialBuff_Abnormal_On_Debuff final : public ULSpecialBuff
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnApplyRunningAbnormal(bool IsApply, class FName AbnormalCodeName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_Abnormal_On_Debuff")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_Abnormal_On_Debuff")
	}
	static class ULSpecialBuff_Abnormal_On_Debuff* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_Abnormal_On_Debuff>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_Abnormal_On_Debuff;

// Class ProjectP.LAnimNotify_PackageDrop
// 0x0000 (0x0048 - 0x0048)
class ULAnimNotify_PackageDrop final : public ULAnimNotifyBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_PackageDrop")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_PackageDrop")
	}
	static class ULAnimNotify_PackageDrop* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_PackageDrop>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_PackageDrop;

// Class ProjectP.LSpecialBuff_GoldenTree_Time_Sub
// 0x0000 (0x0048 - 0x0048)
class ULSpecialBuff_GoldenTree_Time_Sub final : public ULSpecialBuff
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_GoldenTree_Time_Sub")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_GoldenTree_Time_Sub")
	}
	static class ULSpecialBuff_GoldenTree_Time_Sub* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_GoldenTree_Time_Sub>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_GoldenTree_Time_Sub;

// Class ProjectP.LAnimNotify_PlayNiagaraEffect
// 0x0120 (0x01B0 - 0x0090)
class ULAnimNotify_PlayNiagaraEffect final : public UAnimNotify_PlayNiagaraEffect
{
public:
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UseAbsoluteRotation;                               // 0x0098(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0099(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELWeaponAttachPointType>               DisableWhenWeaponInListBroken;                     // 0x00A0(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      ApplyVariableFloat;                                // 0x00B0(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector2D>           ApplyVariableVector2;                              // 0x0100(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector>             ApplyVariableVector3;                              // 0x0150(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ELMeshSelectionType                           MeshSelectionType;                                 // 0x01A0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0xF];                                      // 0x01A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_PlayNiagaraEffect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_PlayNiagaraEffect")
	}
	static class ULAnimNotify_PlayNiagaraEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_PlayNiagaraEffect>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_PlayNiagaraEffect;

// Class ProjectP.LQuestSystem
// 0x0178 (0x01F0 - 0x0078)
class ULQuestSystem final : public ULGameSubSystem
{
public:
	TMap<class FName, struct FQuestDetailInfo>    QuestProgressMap;                                  // 0x0078(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FQuestDetailInfo>    QuestCompleteMap;                                  // 0x00C8(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FLQuestHierarchyInfo> QuestDB;                                          // 0x0118(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<ELCallBackEventType, struct FLAutoQuestInfoList> AutoAddQuestDB;                            // 0x0168(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<struct FLQuestTaskInfo>                QuestTaskInfoDB;                                   // 0x01B8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLCallBackEventData>            DelayQuestEventList;                               // 0x01C8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class ULQuestDebugInfo* Info)> OnRefreshQuestDebugInfo;            // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class ULQuestDebugInfo*                       QuestDebugInfo;                                    // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool GetQuestIconFromTeleportName(class FName FindTeleport, TArray<TSoftObjectPtr<class UObject>>* outQuestIconList);
	void OnGameDataCharacterSync(class ULCharacterSaveGame* CharacterSaveGame, bool bLoad);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LQuestSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LQuestSystem")
	}
	static class ULQuestSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULQuestSystem>();
	}
};
DUMPER7_ASSERTS_ULQuestSystem;

// Class ProjectP.LAnimNotifyState_TimedParticleEffect
// 0x0038 (0x0098 - 0x0060)
class ULAnimNotifyState_TimedParticleEffect final : public UAnimNotifyState_TimedParticleEffect
{
public:
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UseAbsoluteRotation;                               // 0x0068(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x006C(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 AttachedComponent;                                 // 0x0078(0x0008)(ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0080(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELWeaponAttachPointType>               DisableWhenWeaponInListBroken;                     // 0x0088(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_TimedParticleEffect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_TimedParticleEffect")
	}
	static class ULAnimNotifyState_TimedParticleEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_TimedParticleEffect>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_TimedParticleEffect;

// Class ProjectP.LSpecialBuff_Item_Rechargeable_Max_Stack_Add
// 0x0000 (0x0048 - 0x0048)
class ULSpecialBuff_Item_Rechargeable_Max_Stack_Add final : public ULSpecialBuff
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_Item_Rechargeable_Max_Stack_Add")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_Item_Rechargeable_Max_Stack_Add")
	}
	static class ULSpecialBuff_Item_Rechargeable_Max_Stack_Add* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_Item_Rechargeable_Max_Stack_Add>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_Item_Rechargeable_Max_Stack_Add;

// Class ProjectP.LAnimNotifyState_NiagaraTrailEffect
// 0x0130 (0x0190 - 0x0060)
class ULAnimNotifyState_NiagaraTrailEffect final : public UAnimNotifyState_TimedNiagaraEffect
{
public:
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UseAbsoluteRotation;                               // 0x0068(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x006C(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 AttachedComponent;                                 // 0x0078(0x0008)(ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0080(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELWeaponAttachPointType>               DisableWhenWeaponInListBroken;                     // 0x0088(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      ApplyVariableFloat;                                // 0x0098(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector2D>           ApplyVariableVector2;                              // 0x00E8(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector>             ApplyVariableVector3;                              // 0x0138(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ELMeshSelectionType                           MeshSelectionType;                                 // 0x0188(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELElementDamageType                           CheckElementDamageType;                            // 0x0189(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18A[0x6];                                      // 0x018A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_NiagaraTrailEffect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_NiagaraTrailEffect")
	}
	static class ULAnimNotifyState_NiagaraTrailEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_NiagaraTrailEffect>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_NiagaraTrailEffect;

// Class ProjectP.LAnimNotify_PlayDecal
// 0x0048 (0x0090 - 0x0048)
class ULAnimNotify_PlayDecal final : public ULAnimNotifyBase
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0050(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x005C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                DecalSize;                                         // 0x0068(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x0074(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRandomRotate;                                   // 0x0078(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELWeaponAttachPointType>               DisableWhenWeaponInListBroken;                     // 0x0080(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_PlayDecal")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_PlayDecal")
	}
	static class ULAnimNotify_PlayDecal* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_PlayDecal>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_PlayDecal;

// Class ProjectP.LPropNavigationComponent
// 0x0000 (0x0480 - 0x0480)
class ULPropNavigationComponent final : public UBoxComponent
{
public:
	void SetNavObstacleArea();
	void SetNavWalkableArea();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropNavigationComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropNavigationComponent")
	}
	static class ULPropNavigationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPropNavigationComponent>();
	}
};
DUMPER7_ASSERTS_ULPropNavigationComponent;

// Class ProjectP.LAnimNotifyState_PlayDecal
// 0x0048 (0x0088 - 0x0040)
class ULAnimNotifyState_PlayDecal final : public ULAnimNotifyStateBase
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0054(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                DecalSize;                                         // 0x0060(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x006C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRandomRotate;                                   // 0x0070(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELWeaponAttachPointType>               DisableWhenWeaponInListBroken;                     // 0x0078(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_PlayDecal")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_PlayDecal")
	}
	static class ULAnimNotifyState_PlayDecal* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_PlayDecal>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_PlayDecal;

// Class ProjectP.LAnimNotifyState_NPCSkillLink
// 0x0070 (0x00B0 - 0x0040)
class ULAnimNotifyState_NPCSkillLink final : public ULAnimNotifyStateBase
{
public:
	class FName                                   SkillLinkCodeName;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseOverride : 1;                                   // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLSkillLinkInfoOverride                SkillLinkOverride;                                 // 0x0050(0x0060)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_NPCSkillLink")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_NPCSkillLink")
	}
	static class ULAnimNotifyState_NPCSkillLink* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_NPCSkillLink>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_NPCSkillLink;

// Class ProjectP.LPropShapeObjectSpot
// 0x0000 (0x0358 - 0x0358)
class ALPropShapeObjectSpot : public ALPropSpot
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropShapeObjectSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropShapeObjectSpot")
	}
	static class ALPropShapeObjectSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPropShapeObjectSpot>();
	}
};
DUMPER7_ASSERTS_ALPropShapeObjectSpot;

// Class ProjectP.LSaveGame
// 0x0028 (0x0050 - 0x0028)
class ULSaveGame : public USaveGame
{
public:
	class FString                                 SlotName;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGameDataType                                GameDataType;                                      // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              UtcDateTime;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Saved;                                             // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loaded;                                            // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CRCHash;                                           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSaveGame")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSaveGame")
	}
	static class ULSaveGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSaveGame>();
	}
};
DUMPER7_ASSERTS_ULSaveGame;

// Class ProjectP.LAnimNotifyState_ReservePreInput
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ReservePreInput final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ReservePreInput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ReservePreInput")
	}
	static class ULAnimNotifyState_ReservePreInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ReservePreInput>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ReservePreInput;

// Class ProjectP.LAnimNotifyState_ApplyPreInput
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ApplyPreInput final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ApplyPreInput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ApplyPreInput")
	}
	static class ULAnimNotifyState_ApplyPreInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ApplyPreInput>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ApplyPreInput;

// Class ProjectP.LAnimNotifyState_StaminaRestore
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_StaminaRestore final : public ULAnimNotifyStateBase
{
public:
	float                                         StaminaRestoreRatio;                               // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_StaminaRestore")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_StaminaRestore")
	}
	static class ULAnimNotifyState_StaminaRestore* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_StaminaRestore>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_StaminaRestore;

// Class ProjectP.LPropLadderSpot
// 0x0028 (0x0380 - 0x0358)
class ALPropLadderSpot final : public ALPropSpot
{
public:
	class USceneComponent*                        DownStairInteract;                                 // 0x0358(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        DownStairStart;                                    // 0x0360(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        UpStairInteract;                                   // 0x0368(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        UpStairStart;                                      // 0x0370(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxClimbCount;                                     // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const struct FPropLadderInfoPtr GetPropLadderInfo(int32 FindState) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropLadderSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropLadderSpot")
	}
	static class ALPropLadderSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPropLadderSpot>();
	}
};
DUMPER7_ASSERTS_ALPropLadderSpot;

// Class ProjectP.LAnimNotify_Consume_Item
// 0x0000 (0x0048 - 0x0048)
class ULAnimNotify_Consume_Item final : public ULAnimNotifyBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_Consume_Item")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_Consume_Item")
	}
	static class ULAnimNotify_Consume_Item* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_Consume_Item>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_Consume_Item;

// Class ProjectP.LQuartzEffect
// 0x0010 (0x0038 - 0x0028)
class ULQuartzEffect final : public UObject
{
public:
	struct FQuartzEffectInfoPtr                   Info;                                              // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUnlock;                                           // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstalled;                                        // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LQuartzEffect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LQuartzEffect")
	}
	static class ULQuartzEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULQuartzEffect>();
	}
};
DUMPER7_ASSERTS_ULQuartzEffect;

// Class ProjectP.LAnimNotifyState_Item_On
// 0x0010 (0x0050 - 0x0040)
class ULAnimNotifyState_Item_On final : public ULAnimNotifyStateBase
{
public:
	TWeakObjectPtr<class UMeshComponent>          ItemMeshComp;                                      // 0x0040(0x0008)(ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  ItemMeshActor;                                     // 0x0048(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Item_On")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Item_On")
	}
	static class ULAnimNotifyState_Item_On* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Item_On>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Item_On;

// Class ProjectP.LAnimNotifyState_TransitAnimation_Dead
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_TransitAnimation_Dead final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_TransitAnimation_Dead")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_TransitAnimation_Dead")
	}
	static class ULAnimNotifyState_TransitAnimation_Dead* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_TransitAnimation_Dead>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_TransitAnimation_Dead;

// Class ProjectP.LProjectilePropSpot
// 0x0020 (0x0378 - 0x0358)
class ALProjectilePropSpot final : public ALPropSpot
{
public:
	class ULPropVolumeComponent*                  ProjectileTriggerVolumeComponent;                  // 0x0358(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class AActor>>          OverlappedActorList;                               // 0x0360(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_370[0x8];                                      // 0x0370(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectilePropSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectilePropSpot")
	}
	static class ALProjectilePropSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALProjectilePropSpot>();
	}
};
DUMPER7_ASSERTS_ALProjectilePropSpot;

// Class ProjectP.LAnimNotifyState_UseNavi
// 0x0030 (0x0070 - 0x0040)
class ULAnimNotifyState_UseNavi final : public ULAnimNotifyStateBase
{
public:
	float                                         MoveSpeedRate;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeed;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnSpeed;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAITargetType                                TargetType;                                        // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetOffset;                                      // 0x0050(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusRange;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MovableTargetCheck;                                // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAIDirectionType                             DirectionType;                                     // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ArriveSkillCodeName;                               // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_UseNavi")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_UseNavi")
	}
	static class ULAnimNotifyState_UseNavi* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_UseNavi>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_UseNavi;

// Class ProjectP.LAnimNotifyState_AimToTarget
// 0x0028 (0x0068 - 0x0040)
class ULAnimNotifyState_AimToTarget final : public ULAnimNotifyStateBase
{
public:
	class FName                                   FireBoneName;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FireLocationOffset;                                // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetBoneName;                                    // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocationOffset;                              // 0x005C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_AimToTarget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_AimToTarget")
	}
	static class ULAnimNotifyState_AimToTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_AimToTarget>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_AimToTarget;

// Class ProjectP.LPropInteractCollisionComponent
// 0x0000 (0x0200 - 0x0200)
class ULPropInteractCollisionComponent final : public USceneComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropInteractCollisionComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropInteractCollisionComponent")
	}
	static class ULPropInteractCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPropInteractCollisionComponent>();
	}
};
DUMPER7_ASSERTS_ULPropInteractCollisionComponent;

// Class ProjectP.LAnimNotifyState_Always_Guard_Off
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_Always_Guard_Off final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Always_Guard_Off")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Always_Guard_Off")
	}
	static class ULAnimNotifyState_Always_Guard_Off* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Always_Guard_Off>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Always_Guard_Off;

// Class ProjectP.LAnimNotifyState_ForceFeedback
// 0x0018 (0x0058 - 0x0040)
class ULAnimNotifyState_ForceFeedback final : public ULAnimNotifyStateBase
{
public:
	class UForceFeedbackEffect*                   ForceFeedbackEffect;                               // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Attached;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Looping;                                           // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Tag;                                               // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ForceFeedback")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ForceFeedback")
	}
	static class ULAnimNotifyState_ForceFeedback* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ForceFeedback>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ForceFeedback;

// Class ProjectP.LPartsComponent
// 0x00A0 (0x02A0 - 0x0200)
class ULPartsComponent final : public USceneComponent
{
public:
	uint8                                         bBoneMerging : 1;                                  // 0x01F8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreHitJudgmentAngle : 1;                       // 0x01F8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDropOnCompleteDestruct : 1;                       // 0x01F8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCompleteDestruct : 1;                             // 0x01F8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDestoryedOnSpawn : 1;                             // 0x01F8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableOnSpawn : 1;                                // 0x01F8(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHitEnabled : 1;                                   // 0x01F8(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1F9[0x3];                                      // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PartsIndex;                                        // 0x01FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCPartsInfoCodeName;                              // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           LinkBodyBones;                                     // 0x0208(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ForceCompleteDestructionIndex;                     // 0x0218(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FLPartsBuildData>          PartsBuildDatas;                                   // 0x0220(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ALCharacter>             OwnerCharacter;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ALPartsActor*                           PartsActor;                                        // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNPCPartsInfoPtr                       NPCPartsInfo;                                      // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	int32                                         DestructionIndex;                                  // 0x0288(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrHealthPoint;                                   // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxHealthPoint;                                    // 0x0290(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_294[0xC];                                      // 0x0294(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeNextDestructState();
	bool CheckHitJudgmentAngle(class AActor* Attacker);
	bool CheckRepulseHitLevel(ELPhysicalDamageType InPhysicalDamageType, int32 InAttackRepulseLevel);
	class ALCharacter* GetOwnerCharacter();
	const struct FNPCPartsInfoPtr GetPartsInfo();
	void SetPartsEnabled(bool bEnable);

	float GetAttackerRepulseEnable() const;
	class ALPartsActor* GetPartsActor() const;
	int32 GetPartsIndex() const;
	bool IsCompleteDestruct() const;
	bool IsHitEnabled() const;
	bool IsPartsDamageToOwner() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPartsComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPartsComponent")
	}
	static class ULPartsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPartsComponent>();
	}
};
DUMPER7_ASSERTS_ULPartsComponent;

// Class ProjectP.LAnimNotifyState_Swing_SFX
// 0x00A8 (0x00E8 - 0x0040)
class ULAnimNotifyState_Swing_SFX final : public ULAnimNotifyStateBase
{
public:
	class USoundBase*                             OverrideSoundAsset;                                // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Blade_override_Codename;                           // 0x0048(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Handle_override_Codename;                          // 0x0050(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponAttachPointType                       WeaponAttachPoint;                                 // 0x0058(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSkillMotionType                             MotionType;                                        // 0x0059(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELSwingPowerType                              SwingPower;                                        // 0x005A(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x1];                                       // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeOutDuration;                                   // 0x005C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolumeLevel;                                   // 0x0060(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ELAbnormalEnchantType, struct FLSoundFadeData> EnchantSoundFadeInfo;                        // 0x0068(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UAudioComponent*                        MainAudioComponent_for_Editor;                     // 0x00B8(0x0008)(ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        SubAudioComponent_for_Editor;                      // 0x00C0(0x0008)(ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        EnchantAudioComponent_for_Editor;                  // 0x00C8(0x0008)(ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Generated_Blade_Codename_For_Test;                 // 0x00D0(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Generated_Handle_Codename_For_Test;                // 0x00D8(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAbnormalEnchantType                         EnchantType_For_Test;                              // 0x00E0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Swing_SFX")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Swing_SFX")
	}
	static class ULAnimNotifyState_Swing_SFX* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Swing_SFX>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Swing_SFX;

// Class ProjectP.LAnimNotifyState_DropMesh
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_DropMesh final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_DropMesh")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_DropMesh")
	}
	static class ULAnimNotifyState_DropMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_DropMesh>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_DropMesh;

// Class ProjectP.LAnimNotifyState_Drop_DecoMesh
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_Drop_DecoMesh final : public ULAnimNotifyStateBase
{
public:
	class FName                                   DecoMeshName;                                      // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Drop_DecoMesh")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Drop_DecoMesh")
	}
	static class ULAnimNotifyState_Drop_DecoMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Drop_DecoMesh>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Drop_DecoMesh;

// Class ProjectP.LPCAnimInstance
// 0x0000 (0x0660 - 0x0660)
class ULPCAnimInstance : public ULAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPCAnimInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPCAnimInstance")
	}
	static class ULPCAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPCAnimInstance>();
	}
};
DUMPER7_ASSERTS_ULPCAnimInstance;

// Class ProjectP.LSaveGameSystem
// 0x00D8 (0x0150 - 0x0078)
class ULSaveGameSystem final : public ULGameSubSystem
{
public:
	uint8                                         Pad_78[0xB0];                                      // 0x0078(0x00B0)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bDebugLog;                                         // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool SyncStart)> OnGameSyncSave;                                   // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool SyncStart)> OnGameSyncLoad;                                   // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void LoadGameDelegateFunction(const class FString& InSlotName, const int32 InUserIndex, class USaveGame* LoadedSave);
	void SaveGameDelegateFunction(const class FString& InSlotName, const int32 InUserIndex, bool bSuccess);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSaveGameSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSaveGameSystem")
	}
	static class ULSaveGameSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSaveGameSystem>();
	}
};
DUMPER7_ASSERTS_ULSaveGameSystem;

// Class ProjectP.LAnimNotify_PlaySound
// 0x0038 (0x0080 - 0x0048)
class ULAnimNotify_PlaySound final : public ULAnimNotifyBase
{
public:
	class USoundBase*                             Sound;                                             // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFollow : 1;                                       // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachName;                                        // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeaveDelay;                                        // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ELWeaponAttachPointType>               DisableWhenWeaponInListBroken;                     // 0x0070(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_PlaySound")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_PlaySound")
	}
	static class ULAnimNotify_PlaySound* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_PlaySound>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_PlaySound;

// Class ProjectP.LAnimNotifyState_PlayLoopSound
// 0x0050 (0x0090 - 0x0040)
class ULAnimNotifyState_PlayLoopSound final : public ULAnimNotifyStateBase
{
public:
	class USoundBase*                             Sound;                                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFollow : 1;                                       // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLSoundFadeData                        FadeIn;                                            // 0x0054(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLSoundFadeData                        FadeOut;                                           // 0x0064(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AttachName;                                        // 0x0074(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELWeaponAttachPointType>               DisableWhenWeaponInListBroken;                     // 0x0080(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_PlayLoopSound")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_PlayLoopSound")
	}
	static class ULAnimNotifyState_PlayLoopSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_PlayLoopSound>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_PlayLoopSound;

// Class ProjectP.LAnimNotifyState_EnableFatalATK
// 0x00A8 (0x00E8 - 0x0040)
class ULAnimNotifyState_EnableFatalATK final : public ULAnimNotifyStateBase
{
public:
	struct FLFatalAttackInfo                      FatalAttackInfo;                                   // 0x0040(0x0054)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLFatalAttackInfo                      FatalAttackInfo_Add;                               // 0x0094(0x0054)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_EnableFatalATK")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_EnableFatalATK")
	}
	static class ULAnimNotifyState_EnableFatalATK* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_EnableFatalATK>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_EnableFatalATK;

// Class ProjectP.LPersonaHelperComponent
// 0x00C8 (0x0178 - 0x00B0)
class ULPersonaHelperComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULActMgrComponent*                      ActMgrComponent;                                   // 0x00B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   RefLWeaponClass;                                   // 0x00C0(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMeshComponent*                 SkeletalMeshComponent_SlaveArm;                    // 0x00E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ALWeapon*                               Weapon_R;                                          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ALWeapon*                               Weapon_L;                                          // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x78];                                     // 0x0100(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPersonaHelperComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPersonaHelperComponent")
	}
	static class ULPersonaHelperComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPersonaHelperComponent>();
	}
};
DUMPER7_ASSERTS_ULPersonaHelperComponent;

// Class ProjectP.LAnimNotifyState_MaterialVarying
// 0x0018 (0x0058 - 0x0040)
class ULAnimNotifyState_MaterialVarying final : public ULAnimNotifyStateBase
{
public:
	ELMeshSelectionType                           SelectionType;                                     // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULMaterialVarying*                      MaterialVarying;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELMaterialVaryingPlayType                     PlayType;                                          // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_MaterialVarying")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_MaterialVarying")
	}
	static class ULAnimNotifyState_MaterialVarying* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_MaterialVarying>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_MaterialVarying;

// Class ProjectP.LAnimNotify_NPC_Change_Phase
// 0x0018 (0x0060 - 0x0048)
class ULAnimNotify_NPC_Change_Phase final : public ULAnimNotifyBase
{
public:
	class FName                                   CommonActionPathCodeName;                          // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LocomotionActionPathCodeName;                      // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionGroupTableCodeName;                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_NPC_Change_Phase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_NPC_Change_Phase")
	}
	static class ULAnimNotify_NPC_Change_Phase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_NPC_Change_Phase>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_NPC_Change_Phase;

// Class ProjectP.LInputCommand
// 0x0000 (0x0028 - 0x0028)
class ULInputCommand final : public UObject
{
public:
	static class FName InputCommand_AssistUseItemDown();
	static class FName InputCommand_AssistUseItemLeft();
	static class FName InputCommand_AssistUseItemRight();
	static class FName InputCommand_AssistUseItemUp();
	static class FName InputCommand_ChargeCancel();
	static class FName InputCommand_Dash();
	static class FName InputCommand_DisableSprint();
	static class FName InputCommand_EnableSprint();
	static class FName InputCommand_FableHandle();
	static class FName InputCommand_FableHandle_OnGuardHit();
	static class FName InputCommand_Frenzy();
	static class FName InputCommand_FrenzyRelease();
	static class FName InputCommand_Guard();
	static class FName InputCommand_GuardEnd();
	static class FName InputCommand_LightAttack();
	static class FName InputCommand_None();
	static class FName InputCommand_ObjectInteraction();
	static class FName InputCommand_ParryDash();
	static class FName InputCommand_ParryGuard();
	static class FName InputCommand_Parrying();
	static class FName InputCommand_SlaveArmPress();
	static class FName InputCommand_SlaveArmRelease();
	static class FName InputCommand_StartSprint();
	static class FName InputCommand_StartTurning();
	static class FName InputCommand_StopRunning();
	static class FName InputCommand_StopSprint();
	static class FName InputCommand_StopTurning();
	static class FName InputCommand_StrongAttack();
	static class FName InputCommand_ToggleWalkMode();
	static class FName InputCommand_TurnSprint();
	static class FName InputCommand_UseItem();
	static class FName InputCommand_WeaponChange();
	static class FName InputCommand_WeaponChangePrevious();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LInputCommand")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LInputCommand")
	}
	static class ULInputCommand* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULInputCommand>();
	}
};
DUMPER7_ASSERTS_ULInputCommand;

// Class ProjectP.LSoundVolume
// 0x0010 (0x0268 - 0x0258)
class ALSoundVolume final : public ALVolume
{
public:
	ELSoundVolumeType                             SoundVolumeType;                                   // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SoundName;                                         // 0x025C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSoundVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSoundVolume")
	}
	static class ALSoundVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALSoundVolume>();
	}
};
DUMPER7_ASSERTS_ALSoundVolume;

// Class ProjectP.LAnimNotify_Unbuff
// 0x0008 (0x0050 - 0x0048)
class ULAnimNotify_Unbuff final : public ULAnimNotifyBase
{
public:
	class FName                                   BuffCodeName;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_Unbuff")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_Unbuff")
	}
	static class ULAnimNotify_Unbuff* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_Unbuff>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_Unbuff;

// Class ProjectP.LAnimNotify_LaunchWire
// 0x0010 (0x0058 - 0x0048)
class ULAnimNotify_LaunchWire final : public ULAnimNotifyBase
{
public:
	TSubclassOf<class AActor>                     ActorToSpawn;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpawnSocketName;                                   // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_LaunchWire")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_LaunchWire")
	}
	static class ULAnimNotify_LaunchWire* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_LaunchWire>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_LaunchWire;

// Class ProjectP.LAnimNotify_WindVolume
// 0x0030 (0x0078 - 0x0048)
class ULAnimNotify_WindVolume final : public ULAnimNotifyBase
{
public:
	float                                         WindSpeed;                                         // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPointWind;                                        // 0x004C(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VolumeSize;                                        // 0x0050(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x005C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0068(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x0074(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_WindVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_WindVolume")
	}
	static class ULAnimNotify_WindVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_WindVolume>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_WindVolume;

// Class ProjectP.LAccountSaveGame
// 0x00B8 (0x0108 - 0x0050)
class ULAccountSaveGame final : public ULSaveGame
{
public:
	struct FLAccountData                          AccountData;                                       // 0x0050(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FLAchievementSaveData                  AchievementSaveData;                               // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FLCharacterStorageData>         CharacterStorageList;                              // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FLDLCSaveData_Account                  DLCSaveData_Account;                               // 0x00B8(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAccountSaveGame")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAccountSaveGame")
	}
	static class ULAccountSaveGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAccountSaveGame>();
	}
};
DUMPER7_ASSERTS_ULAccountSaveGame;

// Class ProjectP.LAnimNotifyState_StopCameraWork
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_StopCameraWork final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_StopCameraWork")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_StopCameraWork")
	}
	static class ULAnimNotifyState_StopCameraWork* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_StopCameraWork>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_StopCameraWork;

// Class ProjectP.LAnimNotifyState_ApplyInput_Frenzy
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ApplyInput_Frenzy final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ApplyInput_Frenzy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ApplyInput_Frenzy")
	}
	static class ULAnimNotifyState_ApplyInput_Frenzy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ApplyInput_Frenzy>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ApplyInput_Frenzy;

// Class ProjectP.LAnimNotifyState_AllowInput_FableHandle
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_AllowInput_FableHandle final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_AllowInput_FableHandle")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_AllowInput_FableHandle")
	}
	static class ULAnimNotifyState_AllowInput_FableHandle* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_AllowInput_FableHandle>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_AllowInput_FableHandle;

// Class ProjectP.LSlaveArmPage
// 0x0020 (0x0048 - 0x0028)
class ULSlaveArmPage final : public UObject
{
public:
	struct FSlaveArmPageInfoPtr                   Info;                                              // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bActivated;                                        // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x17];                                      // 0x0031(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetCanReset();
	TMap<class FName, int32> GetRequireItemsToReset();
	TMap<class FName, int32> GetReturnItemsAfterReset();
	bool RequestReset();
	void Reset(bool bForceReset);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSlaveArmPage")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSlaveArmPage")
	}
	static class ULSlaveArmPage* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSlaveArmPage>();
	}
};
DUMPER7_ASSERTS_ULSlaveArmPage;

// Class ProjectP.LAnimNotifyState_ApplyInput_UseItem
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ApplyInput_UseItem final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ApplyInput_UseItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ApplyInput_UseItem")
	}
	static class ULAnimNotifyState_ApplyInput_UseItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ApplyInput_UseItem>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ApplyInput_UseItem;

// Class ProjectP.LAnimNotifyState_ReserveInput_Attack
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ReserveInput_Attack final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ReserveInput_Attack")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ReserveInput_Attack")
	}
	static class ULAnimNotifyState_ReserveInput_Attack* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ReserveInput_Attack>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ReserveInput_Attack;

// Class ProjectP.LSoundSystemData
// 0x0008 (0x0228 - 0x0220)
class ALSoundSystemData : public AActor
{
public:
	float                                         SwishMultiplier;                                   // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class USoundMix* GetBaseSoundMix();
	void GetGlobalMuteSoundMixes(TArray<class USoundMix*>* MuteMixes);
	void OnCompletePlayDialogSound();
	void OnFadeMuteSound(bool bMute);
	void OnPlayBGM(class FName SoundName, bool* PlayResult);
	bool OnPlayDialogSound(const struct FDialogInfoPtr& InDialog);
	bool OnPlayRecord(class FName RecordCodeName, class ALPropSpot* InSoundSource);
	void OnStopBGM();
	bool OnStopDialogSound();
	bool OnStopRecord();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSoundSystemData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSoundSystemData")
	}
	static class ALSoundSystemData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALSoundSystemData>();
	}
};
DUMPER7_ASSERTS_ALSoundSystemData;

// Class ProjectP.LPropLiftStartPointComponent
// 0x0000 (0x0480 - 0x0480)
class ULPropLiftStartPointComponent final : public UBoxComponent
{
public:
	ELPropLiftStateType                           ForceDefaultState;                                 // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropLiftStartPointComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropLiftStartPointComponent")
	}
	static class ULPropLiftStartPointComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPropLiftStartPointComponent>();
	}
};
DUMPER7_ASSERTS_ULPropLiftStartPointComponent;

// Class ProjectP.LAnimNotifyState_ReserveInput_Special
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ReserveInput_Special final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ReserveInput_Special")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ReserveInput_Special")
	}
	static class ULAnimNotifyState_ReserveInput_Special* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ReserveInput_Special>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ReserveInput_Special;

// Class ProjectP.LAnimNotifyState_ParryCheck
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ParryCheck final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ParryCheck")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ParryCheck")
	}
	static class ULAnimNotifyState_ParryCheck* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ParryCheck>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ParryCheck;

// Class ProjectP.LSpecialBuff_ActionState
// 0x0000 (0x0048 - 0x0048)
class ULSpecialBuff_ActionState final : public ULSpecialBuff
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_ActionState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_ActionState")
	}
	static class ULSpecialBuff_ActionState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_ActionState>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_ActionState;

// Class ProjectP.LAnimNotifyState_GlobalTimeDilation
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_GlobalTimeDilation final : public ULAnimNotifyStateBase
{
public:
	float                                         TimeDilation;                                      // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_GlobalTimeDilation")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_GlobalTimeDilation")
	}
	static class ULAnimNotifyState_GlobalTimeDilation* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_GlobalTimeDilation>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_GlobalTimeDilation;

// Class ProjectP.LAnimNotifyState_EnableParts
// 0x0010 (0x0050 - 0x0040)
class ULAnimNotifyState_EnableParts final : public ULAnimNotifyStateBase
{
public:
	class FName                                   PartsCodeName;                                     // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPartsEnabled;                                     // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoreEnableOnNotifyEnd;                         // 0x0049(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_EnableParts")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_EnableParts")
	}
	static class ULAnimNotifyState_EnableParts* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_EnableParts>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_EnableParts;

// Class ProjectP.LAnimNotifyState_PartsDestroy
// 0x0010 (0x0050 - 0x0040)
class ULAnimNotifyState_PartsDestroy final : public ULAnimNotifyStateBase
{
public:
	class FName                                   PartsCodeName;                                     // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageRatio;                                       // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompleteDestruct;                                 // 0x004C(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_PartsDestroy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_PartsDestroy")
	}
	static class ULAnimNotifyState_PartsDestroy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_PartsDestroy>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_PartsDestroy;

// Class ProjectP.LAnimNotifyState_EnableNPCParts
// 0x0010 (0x0050 - 0x0040)
class ULAnimNotifyState_EnableNPCParts final : public ULAnimNotifyStateBase
{
public:
	class FName                                   PartsCodeName;                                     // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPartsEnable;                                      // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestoreEnableOnNotifyEnd;                         // 0x0049(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_EnableNPCParts")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_EnableNPCParts")
	}
	static class ULAnimNotifyState_EnableNPCParts* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_EnableNPCParts>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_EnableNPCParts;

// Class ProjectP.LAnimNotifyState_NPCPartsDestroySelf
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_NPCPartsDestroySelf final : public ULAnimNotifyStateBase
{
public:
	class FName                                   PartsCodeName;                                     // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_NPCPartsDestroySelf")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_NPCPartsDestroySelf")
	}
	static class ULAnimNotifyState_NPCPartsDestroySelf* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_NPCPartsDestroySelf>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_NPCPartsDestroySelf;

// Class ProjectP.LAnimNotifyState_NPCPartsRestore
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_NPCPartsRestore final : public ULAnimNotifyStateBase
{
public:
	class FName                                   PartsCodeName;                                     // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_NPCPartsRestore")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_NPCPartsRestore")
	}
	static class ULAnimNotifyState_NPCPartsRestore* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_NPCPartsRestore>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_NPCPartsRestore;

// Class ProjectP.LAnimNotifyState_HelpSignal
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_HelpSignal final : public ULAnimNotifyStateBase
{
public:
	float                                         OverrideRange;                                     // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_HelpSignal")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_HelpSignal")
	}
	static class ULAnimNotifyState_HelpSignal* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_HelpSignal>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_HelpSignal;

// Class ProjectP.LAnimNotify_PlaySequence
// 0x0008 (0x0050 - 0x0048)
class ULAnimNotify_PlaySequence final : public ULAnimNotifyBase
{
public:
	class FName                                   SequenceCodeName;                                  // 0x0048(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_PlaySequence")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_PlaySequence")
	}
	static class ULAnimNotify_PlaySequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_PlaySequence>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_PlaySequence;

// Class ProjectP.LAnimNotify_ContentCommand
// 0x0008 (0x0050 - 0x0048)
class ULAnimNotify_ContentCommand final : public ULAnimNotifyBase
{
public:
	class FName                                   CommandCodeName;                                   // 0x0048(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_ContentCommand")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_ContentCommand")
	}
	static class ULAnimNotify_ContentCommand* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_ContentCommand>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_ContentCommand;

// Class ProjectP.LAnimNotifyState_LockPerfectGuard
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_LockPerfectGuard final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_LockPerfectGuard")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_LockPerfectGuard")
	}
	static class ULAnimNotifyState_LockPerfectGuard* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_LockPerfectGuard>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_LockPerfectGuard;

// Class ProjectP.LAnimNotifyState_ApplyInput_DoubleDash
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_ApplyInput_DoubleDash final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ApplyInput_DoubleDash")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ApplyInput_DoubleDash")
	}
	static class ULAnimNotifyState_ApplyInput_DoubleDash* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ApplyInput_DoubleDash>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ApplyInput_DoubleDash;

// Class ProjectP.LMultiTriggerBase
// 0x0000 (0x0220 - 0x0220)
class ALMultiTriggerBase : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LMultiTriggerBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LMultiTriggerBase")
	}
	static class ALMultiTriggerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALMultiTriggerBase>();
	}
};
DUMPER7_ASSERTS_ALMultiTriggerBase;

// Class ProjectP.LAnimNotifyState_MeshRotatingOnFloor
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_MeshRotatingOnFloor final : public ULAnimNotifyStateBase
{
public:
	float                                         RotSpeed_In;                                       // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotSpeed_Out;                                      // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_MeshRotatingOnFloor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_MeshRotatingOnFloor")
	}
	static class ULAnimNotifyState_MeshRotatingOnFloor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_MeshRotatingOnFloor>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_MeshRotatingOnFloor;

// Class ProjectP.LAnimNotify_PlayGroundFx
// 0x0168 (0x01B0 - 0x0048)
class ULAnimNotify_PlayGroundFx final : public ULAnimNotifyBase
{
public:
	class FName                                   EventName;                                         // 0x0048(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName_Sound;                                   // 0x0050(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0058(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Offset;                                            // 0x0060(0x0030)(BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UseSocketOrientedOffset;                           // 0x0090(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAbsoluteRotation;                               // 0x0091(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttached;                                         // 0x0092(0x0001)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      ApplyVariableFloat;                                // 0x0098(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector2D>           ApplyVariableVector2;                              // 0x00E8(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector>             ApplyVariableVector3;                              // 0x0138(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         VolumeModifier;                                    // 0x0188(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELWeaponAttachPointType>               DisableWhenWeaponInListBroken;                     // 0x0190(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ELPhysicalSurfaceType                         TestSurface;                                       // 0x01A0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0xF];                                      // 0x01A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_PlayGroundFx")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_PlayGroundFx")
	}
	static class ULAnimNotify_PlayGroundFx* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_PlayGroundFx>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_PlayGroundFx;

// Class ProjectP.LAnimNotify_SpawnNPC
// 0x0020 (0x0068 - 0x0048)
class ULAnimNotify_SpawnNPC final : public ULAnimNotifyBase
{
public:
	class FName                                   NPCCodeName;                                       // 0x0048(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0050(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpawnIdleCodeName;                                 // 0x005C(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_SpawnNPC")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_SpawnNPC")
	}
	static class ULAnimNotify_SpawnNPC* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_SpawnNPC>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_SpawnNPC;

// Class ProjectP.LAnimNotifyState_MoveCollisionDisable
// 0x0018 (0x0058 - 0x0040)
class ULAnimNotifyState_MoveCollisionDisable final : public ULAnimNotifyStateBase
{
public:
	uint8                                         MainCapsuleMoveOnly : 1;                           // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         MainCapsuleDisable : 1;                            // 0x0040(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           DisableSubCapsuleName;                             // 0x0048(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_MoveCollisionDisable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_MoveCollisionDisable")
	}
	static class ULAnimNotifyState_MoveCollisionDisable* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_MoveCollisionDisable>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_MoveCollisionDisable;

// Class ProjectP.LAnimNotifyState_ChangeCharBlockType
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_ChangeCharBlockType final : public ULAnimNotifyStateBase
{
public:
	ELCharacterCollisionType                      CharacterCollisionType;                            // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ChangeCharBlockType")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ChangeCharBlockType")
	}
	static class ULAnimNotifyState_ChangeCharBlockType* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ChangeCharBlockType>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ChangeCharBlockType;

// Class ProjectP.LLockOnTargetComponent
// 0x0000 (0x0200 - 0x0200)
class ULLockOnTargetComponent final : public USceneComponent
{
public:
	void DisableLockOn();
	void EnableLockOn();

	bool IsLockOnEnabled() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLockOnTargetComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLockOnTargetComponent")
	}
	static class ULLockOnTargetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLockOnTargetComponent>();
	}
};
DUMPER7_ASSERTS_ULLockOnTargetComponent;

// Class ProjectP.LStatComponent
// 0x00B0 (0x0160 - 0x00B0)
class ULStatComponent final : public UActorComponent
{
public:
	TWeakObjectPtr<class ALCharacter>             OwnerCharacter;                                    // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULStatList*                             StatDataList;                                      // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLStatSimpleData>               RetainAcquireStatList;                             // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLStatGaugeContext>             StatGaugeList;                                     // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ELSecondStat StatType, int32 AddedValue, int32 PrevStatValue)> Delegate_StatChanged; // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ELSecondStat StatType)> Delegate_InitStatChanged;                  // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x58];                                     // 0x0100(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bBlockCalculate;                                   // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndStaminaRestore(class UObject* Instigator);
	int32 GetCharacterRawStat(ELSecondStat StatType);
	int32 GetCharacterStat(ELSecondStat StatType);
	int32 GetStat(ELStatDataType DataType, ELSecondStat StatType);
	int32 GetStatByPercent(ELSecondStat StatType, float CalcRatio);
	void GetStatInfo(ELSecondStat StatType, int32* Current, int32* Max, float* Ratio);
	float GetStatPercent(ELSecondStat StatType);
	bool RecoveryMaxStat(ELSecondStat StatType);
	bool RecoveryStat(ELSecondStat StatType, int32 Amount);
	void StartStaminaRestore(float Ratio, class UObject* Instigator);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LStatComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LStatComponent")
	}
	static class ULStatComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULStatComponent>();
	}
};
DUMPER7_ASSERTS_ULStatComponent;

// Class ProjectP.LAnimNotify_PlayLadderFx
// 0x0138 (0x0180 - 0x0048)
class ULAnimNotify_PlayLadderFx final : public ULAnimNotifyBase
{
public:
	class FName                                   EventName;                                         // 0x0048(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName_Sound;                                   // 0x0050(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0058(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0060(0x000C)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x006C(0x000C)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ScaleOffset;                                       // 0x0078(0x000C)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSocketOrientedOffset;                           // 0x0084(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAbsoluteRotation;                               // 0x0085(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttached;                                         // 0x0086(0x0001)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELMeshSelectionType                           MeshSelectionType;                                 // 0x0087(0x0001)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      ApplyVariableFloat;                                // 0x0088(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector2D>           ApplyVariableVector2;                              // 0x00D8(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector>             ApplyVariableVector3;                              // 0x0128(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         VolumeModifier;                                    // 0x0178(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalSurfaceType                         TestSurface;                                       // 0x017C(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_PlayLadderFx")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_PlayLadderFx")
	}
	static class ULAnimNotify_PlayLadderFx* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_PlayLadderFx>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_PlayLadderFx;

// Class ProjectP.LAnimNotify_PlayTimedLadderFx
// 0x0138 (0x0178 - 0x0040)
class ULAnimNotify_PlayTimedLadderFx final : public ULAnimNotifyStateBase
{
public:
	class FName                                   EventName;                                         // 0x0040(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName_Sound;                                   // 0x0048(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0050(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0058(0x000C)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0064(0x000C)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ScaleOffset;                                       // 0x0070(0x000C)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSocketOrientedOffset;                           // 0x007C(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAbsoluteRotation;                               // 0x007D(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttached;                                         // 0x007E(0x0001)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELMeshSelectionType                           MeshSelectionType;                                 // 0x007F(0x0001)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      ApplyVariableFloat;                                // 0x0080(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector2D>           ApplyVariableVector2;                              // 0x00D0(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector>             ApplyVariableVector3;                              // 0x0120(0x0050)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         VolumeModifier;                                    // 0x0170(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalSurfaceType                         TestSurface;                                       // 0x0174(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_PlayTimedLadderFx")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_PlayTimedLadderFx")
	}
	static class ULAnimNotify_PlayTimedLadderFx* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_PlayTimedLadderFx>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_PlayTimedLadderFx;

// Class ProjectP.LAnimNotifyState_NPCExtraBT
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_NPCExtraBT final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_NPCExtraBT")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_NPCExtraBT")
	}
	static class ULAnimNotifyState_NPCExtraBT* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_NPCExtraBT>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_NPCExtraBT;

// Class ProjectP.LTeleportObjectSpot
// 0x0040 (0x0398 - 0x0358)
class ALTeleportObjectSpot final : public ALPropShapeObjectSpot
{
public:
	class FName                                   TeleportObjectCodeName;                            // 0x0358(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TorsionCoilActivate;                               // 0x0360(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTeleportType                                TeleportType;                                      // 0x0361(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELStargazerType                               StargazerType;                                     // 0x0362(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_363[0x5];                                      // 0x0363(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        SpawnPointComponent;                               // 0x0368(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULPropOverlapPawnComponent*             StargazerUnstableVolume;                           // 0x0370(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cached_OverlapEnemyNpc;                            // 0x0378(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle_RefreshStargazerUnstable;              // 0x0380(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ULSequenceActorData>     PortalSequenceActorData;                           // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_390[0x8];                                      // 0x0390(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FTransform GetSpawnPointTransform();
	class FName GetTeleportObjectCodeName();
	void OnClosedWindow(class FName WidgetTableName);
	void OnCompleteTorsionCoilActiveAlert();
	void OnComponentBeginOverlapPropOverlapPawn(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnComponentEndOverlapPropOverlapPawn(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnFinishedPortalSequenceActor();
	void OnInteractTorsionCoil();
	void RefreshStargazerUnstable();
	void SetTeleportObjectCodeName(class FName InCodeName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LTeleportObjectSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LTeleportObjectSpot")
	}
	static class ALTeleportObjectSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALTeleportObjectSpot>();
	}
};
DUMPER7_ASSERTS_ALTeleportObjectSpot;

// Class ProjectP.LAnimNotify_NPCSuicide
// 0x0010 (0x0058 - 0x0048)
class ULAnimNotify_NPCSuicide final : public ULAnimNotifyBase
{
public:
	ELNPCSuicideType                              SuicideType;                                       // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DeadCodeName;                                      // 0x004C(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bItemGet;                                          // 0x0054(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExpGet;                                           // 0x0055(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOverrideRespawnState;                          // 0x0056(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespawnEnable;                                    // 0x0057(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_NPCSuicide")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_NPCSuicide")
	}
	static class ULAnimNotify_NPCSuicide* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_NPCSuicide>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_NPCSuicide;

// Class ProjectP.LAnimNotifyState_IncreaseStretchBone
// 0x0030 (0x0070 - 0x0040)
class ULAnimNotifyState_IncreaseStretchBone final : public ULAnimNotifyStateBase
{
public:
	TArray<class FName>                           BoneNames;                                         // 0x0040(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         StretchDistance;                                   // 0x0050(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLEasingData                           StretchEasingData;                                 // 0x0054(0x000C)(Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ExceptionDurationTime;                             // 0x0060(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLEasingData                           ExceptionEasingData;                               // 0x0064(0x000C)(Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_IncreaseStretchBone")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_IncreaseStretchBone")
	}
	static class ULAnimNotifyState_IncreaseStretchBone* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_IncreaseStretchBone>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_IncreaseStretchBone;

// Class ProjectP.LAnimNotifyState_DecreaseStretchBone
// 0x0020 (0x0060 - 0x0040)
class ULAnimNotifyState_DecreaseStretchBone final : public ULAnimNotifyStateBase
{
public:
	TArray<class FName>                           BoneNames;                                         // 0x0040(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLEasingData                           EasingData;                                        // 0x0050(0x000C)(Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_DecreaseStretchBone")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_DecreaseStretchBone")
	}
	static class ULAnimNotifyState_DecreaseStretchBone* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_DecreaseStretchBone>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_DecreaseStretchBone;

// Class ProjectP.LAnimNotifyState_DisableLockOn
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_DisableLockOn final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_DisableLockOn")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_DisableLockOn")
	}
	static class ULAnimNotifyState_DisableLockOn* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_DisableLockOn>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_DisableLockOn;

// Class ProjectP.ChildActorComponentForProp
// 0x0000 (0x0230 - 0x0230)
class UChildActorComponentForProp final : public UChildActorComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ChildActorComponentForProp")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ChildActorComponentForProp")
	}
	static class UChildActorComponentForProp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChildActorComponentForProp>();
	}
};
DUMPER7_ASSERTS_UChildActorComponentForProp;

// Class ProjectP.LAnimNotify_NpcStandGuardDisable
// 0x0008 (0x0050 - 0x0048)
class ULAnimNotify_NpcStandGuardDisable final : public ULAnimNotifyBase
{
public:
	ELWeaponAttachPointType                       WeaponAttachPointType;                             // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_NpcStandGuardDisable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_NpcStandGuardDisable")
	}
	static class ULAnimNotify_NpcStandGuardDisable* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_NpcStandGuardDisable>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_NpcStandGuardDisable;

// Class ProjectP.LAnimNotify_PlayCharacterSD
// 0x0068 (0x00B0 - 0x0048)
class ULAnimNotify_PlayCharacterSD final : public ULAnimNotifyBase
{
public:
	class FName                                   EventName;                                         // 0x0048(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0050(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Offset;                                            // 0x0060(0x0030)(BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAttached;                                         // 0x0090(0x0001)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeModifier;                                    // 0x0094(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELMeshSelectionType                           MeshSelectionType;                                 // 0x0098(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLCharacterSoundType                   TestCharacterSoundType;                            // 0x009C(0x0008)(Edit, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0xC];                                       // 0x00A4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_PlayCharacterSD")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_PlayCharacterSD")
	}
	static class ULAnimNotify_PlayCharacterSD* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_PlayCharacterSD>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_PlayCharacterSD;

// Class ProjectP.LQuartzSystem
// 0x0088 (0x0100 - 0x0078)
class ULQuartzSystem final : public ULGameSubSystem
{
public:
	TMap<class FName, class ULQuartzPocket*>      QuartzPocketMap;                                   // 0x0078(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class ULQuartzEffect*>                 QuartzEffectList;                                  // 0x00C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0xC];                                       // 0x00D8(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LastInstalledPocketCodeName;                       // 0x00E4(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnQuartzLevelUp;                                   // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	class ULQuartzPocket* GetPocketData(class FName PocketCodeName);
	class ULQuartzPocket* GetPocketDataByIndex(int32 InPocketIndex);
	class ULQuartzEffect* GetQuartzEffect(class FName QuartzEffectCodeName);
	void GetRequireItemsForReset(TMap<class FName, int32>* OutRequireItems);
	void GetReturnItemsAfterReset(TMap<class FName, int32>* OutReturnItems);
	void OnGameDataCharacterSync(class ULCharacterSaveGame* CharacterSaveGame, bool bLoad);
	bool RequestResetAllQuartz(bool bIgnoreRequirements);
	bool RequestUpgradeCoreLevel();
	void ResetAllQuartz(bool bForceReset);

	int32 GetCoreItemCount() const;
	int32 GetEnabledCoreLevel() const;
	bool GetEnabledQuartzMenu() const;
	int32 GetMaxLevelLimit() const;
	int32 GetQuartzItemCount() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LQuartzSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LQuartzSystem")
	}
	static class ULQuartzSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULQuartzSystem>();
	}
};
DUMPER7_ASSERTS_ULQuartzSystem;

// Class ProjectP.LAnimNotifyState_ChangeFSMState
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_ChangeFSMState final : public ULAnimNotifyStateBase
{
public:
	ELAnimFSMState                                AnimFSMState;                                      // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LockRotation : 1;                                  // 0x0041(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ChangeFSMState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ChangeFSMState")
	}
	static class ULAnimNotifyState_ChangeFSMState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ChangeFSMState>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ChangeFSMState;

// Class ProjectP.LAnimNotifyState_GuardCheck_Reflect
// 0x0080 (0x00C0 - 0x0040)
class ULAnimNotifyState_GuardCheck_Reflect final : public ULAnimNotifyStateBase
{
public:
	int32                                         GuardRangeAngleStart;                              // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuardRangeAngleEnd;                                // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLHitCollisionInfo                     HitInfo;                                           // 0x0048(0x0078)(Edit, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_GuardCheck_Reflect")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_GuardCheck_Reflect")
	}
	static class ULAnimNotifyState_GuardCheck_Reflect* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_GuardCheck_Reflect>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_GuardCheck_Reflect;

// Class ProjectP.LRedButterFlySearchBoxCollisionComponent
// 0x0000 (0x0480 - 0x0480)
class ULRedButterFlySearchBoxCollisionComponent final : public UBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LRedButterFlySearchBoxCollisionComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LRedButterFlySearchBoxCollisionComponent")
	}
	static class ULRedButterFlySearchBoxCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULRedButterFlySearchBoxCollisionComponent>();
	}
};
DUMPER7_ASSERTS_ULRedButterFlySearchBoxCollisionComponent;

// Class ProjectP.LAnimNotify_SwapNpc
// 0x0018 (0x0060 - 0x0048)
class ULAnimNotify_SwapNpc final : public ULAnimNotifyBase
{
public:
	class FName                                   SwapNpcCodeName;                                   // 0x0048(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnOffset;                                       // 0x0050(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInheritHP;                                        // 0x005C(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetSwapAtRespawn;                               // 0x005D(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnOnSpot;                                      // 0x005E(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_SwapNpc")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_SwapNpc")
	}
	static class ULAnimNotify_SwapNpc* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_SwapNpc>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_SwapNpc;

// Class ProjectP.LAnimNotifyState_ChangePCWeapon
// 0x0028 (0x0068 - 0x0040)
class ULAnimNotifyState_ChangePCWeapon final : public ULAnimNotifyStateBase
{
public:
	ELWeaponAttachPointType                       WeaponAttachPointType1;                            // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeaponHandleCodeName1;                             // 0x0044(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WeaponBladeCodeName1;                              // 0x004C(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponAttachPointType                       WeaponAttachPointType2;                            // 0x0054(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeaponHandleCodeName2;                             // 0x0058(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WeaponBladeCodeName2;                              // 0x0060(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_ChangePCWeapon")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_ChangePCWeapon")
	}
	static class ULAnimNotifyState_ChangePCWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_ChangePCWeapon>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_ChangePCWeapon;

// Class ProjectP.RichImageRowFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class URichImageRowFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UObject* GetImage(const struct FRichImageRow& Row);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RichImageRowFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RichImageRowFunctionLibrary")
	}
	static class URichImageRowFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichImageRowFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_URichImageRowFunctionLibrary;

// Class ProjectP.LAnimNotifyState_InterectStateChange
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_InterectStateChange final : public ULAnimNotifyStateBase
{
public:
	bool                                          Input_Key_Check;                                   // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Input_Cam_Check;                                   // 0x0041(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_InterectStateChange")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_InterectStateChange")
	}
	static class ULAnimNotifyState_InterectStateChange* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_InterectStateChange>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_InterectStateChange;

// Class ProjectP.LWidget
// 0x0040 (0x02A0 - 0x0260)
class ULWidget : public UUserWidget
{
public:
	uint8                                         Pad_260[0x10];                                     // 0x0260(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             DefaultTexture;                                    // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class FName CategoryName)> OnCompleteTween;                        // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bOverlayLoading;                                   // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_289[0x17];                                     // 0x0289(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CompleteSetBrush_FromAsyncTexture();
	void ListenForInputAxis(class FName AxisName, bool bConsume, TDelegate<void(float AxisValue)> Callback);
	void SetBrush_FromAsyncTexture(class UImage* InImage, TSoftObjectPtr<class UObject> InSoftObject);
	void StopListeningForInputAxis(class FName AxisName);
	void Tween_CanvasMove(class UWidget* Widget, const struct FVector2D& Start, const struct FVector2D& End, const struct FTweenEase& Ease, float Time);
	void Tween_CanvasSize(class UWidget* Widget, const struct FVector2D& Start, const struct FVector2D& End, const struct FTweenEase& Ease, float Time);
	void Tween_ColorAndOpacity(class UWidget* Widget, const struct FLinearColor& Start, const struct FLinearColor& End, const struct FTweenEase& Ease, float Time);
	void Tween_ContentFloatValue(class UWidget* Widget, float Start, float End, const struct FTweenEase& Ease, float Time);
	void Tween_ContentsColorAndOpacity(class UWidget* Widget, const struct FLinearColor& Start, const struct FLinearColor& End, const struct FTweenEase& Ease, float Time);
	void Tween_MaterialColor(class UWidget* Widget, class FName ParameterName, const struct FLinearColor& Start, const struct FLinearColor& End, const struct FTweenEase& Ease, float Time);
	void Tween_MaterialScalar(class UWidget* Widget, class FName ParameterName, float Start, float End, const struct FTweenEase& Ease, float Time);
	void Tween_Opacity(class UWidget* Widget, float Start, float End, const struct FTweenEase& Ease, float Time);
	void Tween_RenderAngle(class UWidget* Widget, float Start, float End, const struct FTweenEase& Ease, float Time);
	void Tween_RenderOpacity(class UWidget* Widget, float Start, float End, const struct FTweenEase& Ease, float Time);
	void Tween_RenderScale(class UWidget* Widget, const struct FVector2D& Start, const struct FVector2D& End, const struct FTweenEase& Ease, float Time);
	void Tween_RenderTransform(class UWidget* Widget, const struct FWidgetTransform& Start, const struct FWidgetTransform& End, const struct FTweenEase& Ease, float Time);
	void Tween_RenderTranslation(class UWidget* Widget, const struct FVector2D& Start, const struct FVector2D& End, const struct FTweenEase& Ease, float Time);
	void Tween_Reset(class FName Category_Name);
	void Tween_Start(class FName Category_Name);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWidget")
	}
	static class ULWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWidget>();
	}
};
DUMPER7_ASSERTS_ULWidget;

// Class ProjectP.LAnimNotifyState_EnableSkillHitDecreaseWeaponDurability
// 0x0010 (0x0050 - 0x0040)
class ULAnimNotifyState_EnableSkillHitDecreaseWeaponDurability final : public ULAnimNotifyStateBase
{
public:
	int32                                         StartAngle;                                        // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndAngle;                                          // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Distance;                                          // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELWeaponAttachPointType                       WeaponAttachPointType;                             // 0x004C(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_EnableSkillHitDecreaseWeaponDurability")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_EnableSkillHitDecreaseWeaponDurability")
	}
	static class ULAnimNotifyState_EnableSkillHitDecreaseWeaponDurability* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_EnableSkillHitDecreaseWeaponDurability>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_EnableSkillHitDecreaseWeaponDurability;

// Class ProjectP.LAnimNotifyState_FloatingState
// 0x0010 (0x0050 - 0x0040)
class ULAnimNotifyState_FloatingState final : public ULAnimNotifyStateBase
{
public:
	class FName                                   EndSkillCodeName;                                  // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyCeiling;                                     // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_FloatingState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_FloatingState")
	}
	static class ULAnimNotifyState_FloatingState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_FloatingState>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_FloatingState;

// Class ProjectP.LWindSourceComponent
// 0x0010 (0x0230 - 0x0220)
class ULWindSourceComponent final : public UWindDirectionalSourceComponent
{
public:
	struct FVector                                VolumeSize;                                        // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224[0xC];                                      // 0x0224(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWindSourceComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWindSourceComponent")
	}
	static class ULWindSourceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWindSourceComponent>();
	}
};
DUMPER7_ASSERTS_ULWindSourceComponent;

// Class ProjectP.LAnimNotifyState_FloatingCollisionEnable
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_FloatingCollisionEnable final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_FloatingCollisionEnable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_FloatingCollisionEnable")
	}
	static class ULAnimNotifyState_FloatingCollisionEnable* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_FloatingCollisionEnable>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_FloatingCollisionEnable;

// Class ProjectP.LAnimNotifyState_Show_Weapon_Forced
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_Show_Weapon_Forced final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Show_Weapon_Forced")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Show_Weapon_Forced")
	}
	static class ULAnimNotifyState_Show_Weapon_Forced* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Show_Weapon_Forced>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Show_Weapon_Forced;

// Class ProjectP.LWorldEventSystem
// 0x01D0 (0x0248 - 0x0078)
class ULWorldEventSystem final : public ULGameSubSystem
{
public:
	bool                                          UseWorldEventComponent;                            // 0x0078(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class ALNPCSpot>>       DespawnNpcSpotList;                                // 0x0080(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class ALNPCSpot>>       DeadNpcSpotList;                                   // 0x0090(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<class FName, struct FEventDetailInfoList> WorldEventDB;                                     // 0x00A0(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F0[0xA0];                                      // 0x00F0(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FContentConditionInfoList> ContentConditionDB;                          // 0x0190(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FContentCommandInfoList> ContentCommandDB;                              // 0x01E0(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_230[0x10];                                     // 0x0230(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHolding_ContentCommand;                           // 0x0240(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ExecuteContentCommand(const class FName& CommandName);
	bool IsValidEventConditionBP(const class FName& CommandName);
	void OnClosedWindow(class FName WidgetTableName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWorldEventSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWorldEventSystem")
	}
	static class ULWorldEventSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWorldEventSystem>();
	}
};
DUMPER7_ASSERTS_ULWorldEventSystem;

// Class ProjectP.LAnimNotifyState_BareHand_Off
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_BareHand_Off final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_BareHand_Off")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_BareHand_Off")
	}
	static class ULAnimNotifyState_BareHand_Off* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_BareHand_Off>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_BareHand_Off;

// Class ProjectP.LAnimNotify_SetMovementMode
// 0x0008 (0x0050 - 0x0048)
class ULAnimNotify_SetMovementMode final : public ULAnimNotifyBase
{
public:
	EMovementMode                                 MovementMode;                                      // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_SetMovementMode")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_SetMovementMode")
	}
	static class ULAnimNotify_SetMovementMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_SetMovementMode>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_SetMovementMode;

// Class ProjectP.LAnimNotify_Teleport
// 0x0018 (0x0060 - 0x0048)
class ULAnimNotify_Teleport final : public ULAnimNotifyBase
{
public:
	ELAITargetType                                TargetType;                                        // 0x0048(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELAIDirectionType                             DirectionType;                                     // 0x0049(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         Distance;                                          // 0x004C(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         Angle;                                             // 0x0054(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDissolveEffectEnabled;                            // 0x005C(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_Teleport")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_Teleport")
	}
	static class ULAnimNotify_Teleport* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_Teleport>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_Teleport;

// Class ProjectP.LWorldSystemData
// 0x0000 (0x0220 - 0x0220)
class ALWorldSystemData : public AActor
{
public:
	void ChangeLightScenario(class FName UnLoadLevel, class FName LoadLevel);
	void OnMoveToTeleportSpotSameLevelLoadingFinished();
	void ProcessMoveToTeleportSpotSameLevel(class FName TeleportCodeName, bool bInGameLoadingScreen);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWorldSystemData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWorldSystemData")
	}
	static class ALWorldSystemData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALWorldSystemData>();
	}
};
DUMPER7_ASSERTS_ALWorldSystemData;

// Class ProjectP.LAnimNotifyState_RecieveToughGroggyRate
// 0x0010 (0x0050 - 0x0040)
class ULAnimNotifyState_RecieveToughGroggyRate final : public ULAnimNotifyStateBase
{
public:
	uint8                                         Tough : 1;                                         // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ToughRate;                                         // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Groggy : 1;                                        // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GroggyRate;                                        // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_RecieveToughGroggyRate")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_RecieveToughGroggyRate")
	}
	static class ULAnimNotifyState_RecieveToughGroggyRate* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_RecieveToughGroggyRate>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_RecieveToughGroggyRate;

// Class ProjectP.LAnimNotifyState_DistanceRootMotionScaling
// 0x0018 (0x0058 - 0x0040)
class ULAnimNotifyState_DistanceRootMotionScaling final : public ULAnimNotifyStateBase
{
public:
	ELAnimRootMotionScaleOperationType            OperationType;                                     // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scaling_Min;                                       // 0x0044(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scaling_Max;                                       // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootMotion_Distance;                               // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset_Distance_From_Taget;                        // 0x0050(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_DistanceRootMotionScaling")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_DistanceRootMotionScaling")
	}
	static class ULAnimNotifyState_DistanceRootMotionScaling* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_DistanceRootMotionScaling>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_DistanceRootMotionScaling;

// Class ProjectP.LAnimNotifyState_DropWeapon
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_DropWeapon final : public ULAnimNotifyStateBase
{
public:
	ELWeaponAttachPointType                       WeaponAttachPointType;                             // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_DropWeapon")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_DropWeapon")
	}
	static class ULAnimNotifyState_DropWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_DropWeapon>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_DropWeapon;

// Class ProjectP.LCineCameraComponent
// 0x0050 (0x0970 - 0x0920)
class ULCineCameraComponent final : public UCineCameraComponent
{
public:
	struct FLSequenceTarget                       TraceTarget;                                       // 0x0918(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         TraceBlendSpeed;                                   // 0x0958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95C[0x14];                                     // 0x095C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCineCameraComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCineCameraComponent")
	}
	static class ULCineCameraComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULCineCameraComponent>();
	}
};
DUMPER7_ASSERTS_ULCineCameraComponent;

// Class ProjectP.LAnimNotifyState_Repulse
// 0x0020 (0x0060 - 0x0040)
class ULAnimNotifyState_Repulse final : public ULAnimNotifyStateBase
{
public:
	ELWeaponAttachPointType                       WeaponAttachPoint;                                 // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TraceStartSocket;                                  // 0x0044(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TraceEndSocket;                                    // 0x004C(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceSphereRadius;                                 // 0x0054(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x0058(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalSurfaceType                         Material;                                          // 0x005C(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Repulse")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Repulse")
	}
	static class ULAnimNotifyState_Repulse* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Repulse>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Repulse;

// Class ProjectP.LKillZoneVolume
// 0x0028 (0x0280 - 0x0258)
class ALKillZoneVolume final : public ALVolume
{
public:
	ELKillZoneType                                KillZoneType;                                      // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraSequenceStartDelay;                          // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraUpperPosition;                              // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CameraSequencePlayTimer;                           // 0x0268(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomDieUIShowTime;                           // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DieUI_StartDelay;                                  // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALLocationActor*                        ErgoDropLocation;                                  // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LKillZoneVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LKillZoneVolume")
	}
	static class ALKillZoneVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALKillZoneVolume>();
	}
};
DUMPER7_ASSERTS_ALKillZoneVolume;

// Class ProjectP.LAnimNotifyState_Spark
// 0x0020 (0x0060 - 0x0040)
class ULAnimNotifyState_Spark final : public ULAnimNotifyStateBase
{
public:
	ELWeaponAttachPointType                       WeaponAttachPoint;                                 // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TraceStartSocket;                                  // 0x0044(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TraceEndSocket;                                    // 0x004C(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceSphereRadius;                                 // 0x0054(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x0058(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPhysicalSurfaceType                         Material;                                          // 0x005C(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Spark")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Spark")
	}
	static class ULAnimNotifyState_Spark* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Spark>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Spark;

// Class ProjectP.LAnimNotifyState_RepairWeapon
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_RepairWeapon final : public ULAnimNotifyStateBase
{
public:
	float                                         SharpnessRecoverRatio;                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_RepairWeapon")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_RepairWeapon")
	}
	static class ULAnimNotifyState_RepairWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_RepairWeapon>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_RepairWeapon;

// Class ProjectP.LAnimNotifyState_FallingSpeedRate
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_FallingSpeedRate final : public ULAnimNotifyStateBase
{
public:
	float                                         FallingSpeedRate;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_FallingSpeedRate")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_FallingSpeedRate")
	}
	static class ULAnimNotifyState_FallingSpeedRate* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_FallingSpeedRate>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_FallingSpeedRate;

// Class ProjectP.LSequenceActorData
// 0x0070 (0x0098 - 0x0028)
class ULSequenceActorData final : public UObject
{
public:
	TWeakObjectPtr<class ALevelSequenceActor>     SequenceActorPtr;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ALSequenceRuntimeSetting> RuntimeSettingPtr;                                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLSequenceBindActor>            SequenceBindActorList;                             // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  InstigatorActorPtr;                                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnPlaySequenceActor;                               // 0x0050(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnFinishedSequenceActor;                           // 0x0060(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          EnableSkipSequence;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelSequenceInfoPtr                  InfoPtr;                                           // 0x0078(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   CommandCodeName;                                   // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SeqnenceTableCodeName;                             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ExecuteSkipUIControl(bool Visible);
	void OnFinishedSequencePlayer();
	void OnFinishedSkipSequenceActor();
	void OnPlaySequencePlayer();
	void OnStopSequencePlayer();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSequenceActorData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSequenceActorData")
	}
	static class ULSequenceActorData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSequenceActorData>();
	}
};
DUMPER7_ASSERTS_ULSequenceActorData;

// Class ProjectP.LAnimNotifyState_Fatal_Counter_Signal
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_Fatal_Counter_Signal final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Fatal_Counter_Signal")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Fatal_Counter_Signal")
	}
	static class ULAnimNotifyState_Fatal_Counter_Signal* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Fatal_Counter_Signal>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Fatal_Counter_Signal;

// Class ProjectP.LObjectManagementSystem
// 0x06C0 (0x0738 - 0x0078)
class ULObjectManagementSystem final : public ULGameSubSystem
{
public:
	float                                         GameObject_PlayerMovementForUpdateTriggering;      // 0x0078(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameObject_InactiveDistanceFromPlayer;             // 0x007C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePreload;                                        // 0x0080(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        AnimAssets;                                        // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x100];                                     // 0x0098(0x0100)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLPreloadBox                           PCPreloadInstance_Always;                          // 0x0198(0x0030)(Transient, NativeAccessSpecifierPublic)
	TMap<int32, struct FLPreloadBox>              PCPreloadInstance_Weapon;                          // 0x01C8(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMap<int32, struct FLPreloadBox>              PCPreloadInstance_SlaveArm;                        // 0x0218(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMap<int32, struct FLPreloadBox>              PCPreloadInstance_Item;                            // 0x0268(0x0050)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8[0x28];                                     // 0x02B8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class UObject>>         LevelGameObjects;                                  // 0x02E0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AActor>>          ObjectList;                                        // 0x02F0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FString, TWeakObjectPtr<class AActor>> ObjectMap;                                     // 0x0300(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ALPCCharacter>           PlayerCharacter;                                   // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ALStatRoomPCCharacter>   StatRoomCharacter;                                 // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALCharacter>>     CharacterList;                                     // 0x0360(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALDestructionObject>> DestructObjectList;                            // 0x0370(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALNPCCharacter>>  InstantSpawnNPCList;                               // 0x0380(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALDestructionObject>> InstantSpawnDestructionObjectList;             // 0x0390(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALSpot>>          SpotList;                                          // 0x03A0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALNPCSpot>>       NpcSpotList;                                       // 0x03B0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALExiledNPCSpot>> ExiledNPCSpotSpotList;                             // 0x03C0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALPropSpot>>      PropSpotList;                                      // 0x03D0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALPropItemSpot>>  PropItemSpotList;                                  // 0x03E0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALPropHelpMateSpot>> PropHelpMateSpotList;                           // 0x03F0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALTeleportObjectSpot>> TeleportObjectSpotList;                       // 0x0400(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALPropShapeObjectSpot>> PropShapeObjectSpotList;                     // 0x0410(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALPropLadderSpot>> PropLadderSpotList;                               // 0x0420(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALPropLiftSpot>>  PropLiftSpotList;                                  // 0x0430(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALPropDestructionSpot>> PropDestructionSpotList;                     // 0x0440(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALPropVolumeSpot>> PropVolumeSpotList;                               // 0x0450(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALPropLevelSequenceSpot>> PropLevelSequenceSpotList;                 // 0x0460(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALBossRoomSpot>>  BossRoomSpotList;                                  // 0x0470(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALPropDoorSpot>>  PropDoorSpotList;                                  // 0x0480(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALProjectilePropSpot>> ProjectileSpotList;                           // 0x0490(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	class ALDummySpot*                            DummySpot;                                         // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ALDummyNPCSpot*                         DummyNPCSpot;                                      // 0x04A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ALDummyPropSpot*                        DummyPropSpot;                                     // 0x04B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ALSoulDropObject>        SoulDropObject;                                    // 0x04B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALExiledNpcArea>> ExiledNpcAreaList;                                 // 0x04C0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALPathWayObject>> PathWayObjectList;                                 // 0x04D0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  FluidControllerPtr;                                // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALNPCCharacter>>  FocusToPCList;                                     // 0x04E8(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALNPCCharacter>>  CombatNPCList;                                     // 0x04F8(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AActor>>          RemoveFlagList;                                    // 0x0508(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	class ALObjectManagementSystemData*           SystemData;                                        // 0x0518(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_520[0x50];                                     // 0x0520(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLNpcDeadbodySettings                  NpcDeadbodySettings;                               // 0x0570(0x000C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FLSpotManagementSettings               NpcSpotSettings;                                   // 0x057C(0x001C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FLSpotManagementSettings               DestructionSpotSettings;                           // 0x0598(0x001C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FLSpotManagementSettings               ImportantPropSpotSettings;                         // 0x05B4(0x001C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FLSpotManagementSettings               NormalPropSpotSettings;                            // 0x05D0(0x001C)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5EC[0x4];                                      // 0x05EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class ALPropSpot>>         ImportantPropSpotClasses;                          // 0x05F0(0x0010)(Edit, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class ALNPCCharacter>>  NpcDeadbodyList;                                   // 0x0600(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FLSpotListManagement                   NpcSpotManager;                                    // 0x0610(0x0028)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLSpotListManagement                   DestructionSpotManager;                            // 0x0638(0x0028)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLSpotListManagement                   ImportantPropSpotManager;                          // 0x0660(0x0028)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FLSpotListManagement                   NormalPropSpotManager;                             // 0x0688(0x0028)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class ALSpot>>          TempAsyncLoadList;                                 // 0x06B0(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class ALSpot>>          TempSpawnList;                                     // 0x06C0(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ALSpot>                  TempSpotToSpawn;                                   // 0x06D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULGoldenTree*                           GoldenTree;                                        // 0x06D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int64                                         UniqueId_Tail;                                     // 0x06E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<int64>                                   UniqueIdSet;                                       // 0x06E8(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	void AddRemoveFlag(class AActor* InActor);
	void FindFiles(TArray<struct FSoftObjectPath>* OutObjectPaths, const class FString& Directory);
	class AActor* GetFluidController(EExecutePin* Branches);
	class ULGoldenTree* GetGoldenTree();
	class ALPCCharacter* GetPlayerCharacter();
	void OnSetActiveEnvironment(bool bWorldActive);
	void SetFluidController(class AActor* TargetActor);
	class ALDestructionObject* SpawnDestructionObject(class FName DestructionObjectCodeName, const struct FTransform& SpawnTransform, bool bTraceAndLandingOnFloor);
	class ALNPCCharacter* SpawnNPC(class FName NPCCodeName, const struct FTransform& SpawnTransform, bool bTraceAndLandingOnFloor, class FName SpawnIdleActionGroupCodeName);

	TArray<class ALNPCCharacter*> FindNPCCharactersAround(class FName NPCCodeName, float AroundDistance) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LObjectManagementSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LObjectManagementSystem")
	}
	static class ULObjectManagementSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULObjectManagementSystem>();
	}
};
DUMPER7_ASSERTS_ULObjectManagementSystem;

// Class ProjectP.LAnimNotifyState_Fatal_Counter_Enable
// 0x0008 (0x0048 - 0x0040)
class ULAnimNotifyState_Fatal_Counter_Enable final : public ULAnimNotifyStateBase
{
public:
	uint8                                         Tough : 1;                                         // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_Fatal_Counter_Enable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_Fatal_Counter_Enable")
	}
	static class ULAnimNotifyState_Fatal_Counter_Enable* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_Fatal_Counter_Enable>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_Fatal_Counter_Enable;

// Class ProjectP.LAnimNotifyState_JumpTargetSet
// 0x0000 (0x0040 - 0x0040)
class ULAnimNotifyState_JumpTargetSet final : public ULAnimNotifyStateBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_JumpTargetSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_JumpTargetSet")
	}
	static class ULAnimNotifyState_JumpTargetSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_JumpTargetSet>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_JumpTargetSet;

// Class ProjectP.LAnimNotifyState_QstReceiveCallback
// 0x0010 (0x0050 - 0x0040)
class ULAnimNotifyState_QstReceiveCallback final : public ULAnimNotifyStateBase
{
public:
	TArray<class FString>                         NotifyCodeNameList;                                // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyState_QstReceiveCallback")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyState_QstReceiveCallback")
	}
	static class ULAnimNotifyState_QstReceiveCallback* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotifyState_QstReceiveCallback>();
	}
};
DUMPER7_ASSERTS_ULAnimNotifyState_QstReceiveCallback;

// Class ProjectP.LLevelSkeletalMeshActor
// 0x0088 (0x02A8 - 0x0220)
class ALLevelSkeletalMeshActor final : public AActor
{
public:
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bShouldDoAnimNotifies : 1;                         // 0x0228(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWakeOnLevelStart : 1;                             // 0x0228(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULLevelSkeletalMeshComponent*           SkeletalMeshComponent;                             // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkeletalMesh*                          ReplicatedMesh;                                    // 0x0238(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                          ReplicatedPhysAsset;                               // 0x0240(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReplicatedMaterial0;                               // 0x0248(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReplicatedMaterial1;                               // 0x0250(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258[0x50];                                     // 0x0258(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_ReplicatedMaterial0();
	void OnRep_ReplicatedMaterial1();
	void OnRep_ReplicatedMesh();
	void OnRep_ReplicatedPhysAsset();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLevelSkeletalMeshActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLevelSkeletalMeshActor")
	}
	static class ALLevelSkeletalMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALLevelSkeletalMeshActor>();
	}
};
DUMPER7_ASSERTS_ALLevelSkeletalMeshActor;

// Class ProjectP.LAnimNotify_InvincibleForDirecting
// 0x0008 (0x0050 - 0x0048)
class ULAnimNotify_InvincibleForDirecting final : public ULAnimNotifyBase
{
public:
	bool                                          ActiveFlag;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotify_InvincibleForDirecting")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotify_InvincibleForDirecting")
	}
	static class ULAnimNotify_InvincibleForDirecting* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAnimNotify_InvincibleForDirecting>();
	}
};
DUMPER7_ASSERTS_ULAnimNotify_InvincibleForDirecting;

// Class ProjectP.DitherAssetUserData
// 0x0010 (0x0038 - 0x0028)
class UDitherAssetUserData final : public UAssetUserData
{
public:
	class FName                                   CodeName;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceScale;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DitherAssetUserData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DitherAssetUserData")
	}
	static class UDitherAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDitherAssetUserData>();
	}
};
DUMPER7_ASSERTS_UDitherAssetUserData;

// Class ProjectP.LDamageVolume
// 0x0020 (0x0278 - 0x0258)
class ALDamageVolume final : public ALVolume
{
public:
	ELDamageVolumeType                            DamageVolumeType;                                  // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Damage;                                            // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationTime;                                      // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLDamagePerTime>                TargetList;                                        // 0x0268(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDamageVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDamageVolume")
	}
	static class ALDamageVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALDamageVolume>();
	}
};
DUMPER7_ASSERTS_ALDamageVolume;

// Class ProjectP.LDamageCollisionComponent
// 0x0020 (0x04A0 - 0x0480)
class ULDamageCollisionComponent final : public UBoxComponent
{
public:
	ELDamageVolumeType                            DamageVolumeType;                                  // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Damage;                                            // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationTime;                                      // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLDamagePerTime>                TargetList;                                        // 0x0488(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_498[0x8];                                      // 0x0498(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginOverlapDamageCollision(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
	void EndOverlapDamageCollision(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDamageCollisionComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDamageCollisionComponent")
	}
	static class ULDamageCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULDamageCollisionComponent>();
	}
};
DUMPER7_ASSERTS_ULDamageCollisionComponent;

// Class ProjectP.LTransformDataAsset
// 0x0050 (0x0080 - 0x0030)
class ULTransformDataAsset final : public UPrimaryDataAsset
{
public:
	TMap<class FName, struct FTransform>          DataMap;                                           // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void AddObjectTransform(class FName TargetObjectName, const struct FTransform& LocationTransform);
	void ClearAllData();
	void PrintData();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LTransformDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LTransformDataAsset")
	}
	static class ULTransformDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTransformDataAsset>();
	}
};
DUMPER7_ASSERTS_ULTransformDataAsset;

// Class ProjectP.LSpotDataAsset
// 0x0088 (0x00B8 - 0x0030)
class ULSpotDataAsset final : public UPrimaryDataAsset
{
public:
	class FString                                 DataStr;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FTransform>          DataMap;                                           // 0x0040(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ALCharacter>             CharacterPtr;                                      // 0x0090(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ClearAllData();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpotDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpotDataAsset")
	}
	static class ULSpotDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpotDataAsset>();
	}
};
DUMPER7_ASSERTS_ULSpotDataAsset;

// Class ProjectP.LPreloadTargetComponent
// 0x0030 (0x00E0 - 0x00B0)
class ULPreloadTargetComponent final : public UActorComponent
{
public:
	TArray<TSoftObjectPtr<class UParticleSystem>> ParticleArray;                                     // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UNiagaraSystem>>  NiagaraArray;                                      // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USoundBase>>      SoundArray;                                        // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPreloadTargetComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPreloadTargetComponent")
	}
	static class ULPreloadTargetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPreloadTargetComponent>();
	}
};
DUMPER7_ASSERTS_ULPreloadTargetComponent;

// Class ProjectP.LPreloadDataAsset
// 0x00F0 (0x0120 - 0x0030)
class ULPreloadDataAsset final : public UPrimaryDataAsset
{
public:
	struct FLPreloadProjectileChildSpawnCodeNameData ProjectileChildSpawnCodeNames;                  // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLPreloadActionGroupData> ActionGroupDatas;                             // 0x0080(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLPreloadNPCData>    NPCDatas;                                          // 0x00D0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void ClearAllData();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPreloadDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPreloadDataAsset")
	}
	static class ULPreloadDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPreloadDataAsset>();
	}
};
DUMPER7_ASSERTS_ULPreloadDataAsset;

// Class ProjectP.LLevelSequenceSystem
// 0x00E8 (0x0160 - 0x0078)
class ULLevelSequenceSystem final : public ULGameSubSystem
{
public:
	class ALLevelSequenceSystemData*              SystemData;                                        // 0x0078(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnStopSkipProcessUI;                               // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<class ULSequenceActorData*>            SequenceActorDataList;                             // 0x0090(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          TickReserveEnable;                                 // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReserveSpotUniqueID;                               // 0x00A8(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ReserveExecuteCommand;                             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ReservePlayReverse;                                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C1[0xF];                                       // 0x00C1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ULSequenceActorData>     Cached_SkipSequenceActorData;                      // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ULSequenceActorData>     Cached_CanSkipSequenceActorData;                   // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ULSequenceActorData>     Cached_LieEffectSequenceActorData;                 // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLSubtitleHierarchyInfo> SubtitleDB;                                    // 0x00E8(0x0050)(Protected, NativeAccessSpecifierProtected)
	bool                                          TickSubtitleEnable;                                // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TickSubtitleTime;                                  // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TickSubtitleCodeName;                              // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SubtitleStartTimeIndex;                            // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TickSubtitleStartTimeList;                         // 0x0150(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	class ULSequenceActorData* GetLastPlayingSequenceActorData();
	class ULSequenceActorData* GetSequenceActorData(const class FName& SequenceCodeName);
	void OnLieDialogEnd();
	void OnLieDialogStart();
	void SkipPlayingSequence();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLevelSequenceSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLevelSequenceSystem")
	}
	static class ULLevelSequenceSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLevelSequenceSystem>();
	}
};
DUMPER7_ASSERTS_ULLevelSequenceSystem;

// Class ProjectP.LDataTableSystem
// 0x0050 (0x00C8 - 0x0078)
class ULDataTableSystem final : public ULGameSubSystem
{
public:
	TMap<EDataTableType, class UDataTable*>       LoadedDataTableMap;                                // 0x0078(0x0050)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDataTableSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDataTableSystem")
	}
	static class ULDataTableSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULDataTableSystem>();
	}
};
DUMPER7_ASSERTS_ULDataTableSystem;

// Class ProjectP.LDebugCameraController
// 0x0000 (0x0688 - 0x0688)
class ALDebugCameraController final : public ADebugCameraController
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDebugCameraController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDebugCameraController")
	}
	static class ALDebugCameraController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALDebugCameraController>();
	}
};
DUMPER7_ASSERTS_ALDebugCameraController;

// Class ProjectP.LProductShop
// 0x0000 (0x0028 - 0x0028)
class ULProductShop : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProductShop")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProductShop")
	}
	static class ULProductShop* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULProductShop>();
	}
};
DUMPER7_ASSERTS_ULProductShop;

// Class ProjectP.LProductBuyShop
// 0x0028 (0x0050 - 0x0028)
class ULProductBuyShop final : public ULProductShop
{
public:
	class FName                                   ShopCodeName;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLProductShopItemData>          DealProducts;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class ULProduct*>                      Products;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)

public:
	bool Buy(class ULProduct* InProduct, int32 InCount);
	TSet<ELItemFirstCategory> GetBuyCategorys();
	TArray<class ULProduct*> GetBuyList(ELItemFirstCategory Category);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProductBuyShop")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProductBuyShop")
	}
	static class ULProductBuyShop* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULProductBuyShop>();
	}
};
DUMPER7_ASSERTS_ULProductBuyShop;

// Class ProjectP.LSequenceBindingActor
// 0x0000 (0x0220 - 0x0220)
class ALSequenceBindingActor final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSequenceBindingActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSequenceBindingActor")
	}
	static class ALSequenceBindingActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALSequenceBindingActor>();
	}
};
DUMPER7_ASSERTS_ALSequenceBindingActor;

// Class ProjectP.LDecalComponent
// 0x0030 (0x0270 - 0x0240)
class ULDecalComponent final : public UDecalComponent
{
public:
	class ULMaterialVarying*                      MaterialVarying;                                   // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELMaterialVaryingPlayType                     PlayType;                                          // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLMaterialVaryingPlayer                MaterialVaryingPlayer;                             // 0x0248(0x0028)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDecalComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDecalComponent")
	}
	static class ULDecalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULDecalComponent>();
	}
};
DUMPER7_ASSERTS_ULDecalComponent;

// Class ProjectP.LAnimNotifyInterface
// 0x0000 (0x0000 - 0x0000)
class ILAnimNotifyInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAnimNotifyInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAnimNotifyInterface")
	}
	static class ILAnimNotifyInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILAnimNotifyInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ILAnimNotifyInterface;

// Class ProjectP.LGeneralName
// 0x0000 (0x0028 - 0x0028)
class ULGeneralName final : public UObject
{
public:
	static class FName LName_Action_SpawnIdle();
	static class FName LName_Action_TurnAround();
	static class FName LName_CommonAnim_Run_F();
	static class FName LName_CommonAnim_Walk_B();
	static class FName LName_CommonAnim_Walk_F();
	static class FName LName_CommonAnim_Walk_L();
	static class FName LName_CommonAnim_Walk_R();
	static class FName LName_Hair();
	static class FName LName_Head();
	static class FName LName_MontageSection_End();
	static class FName LName_None();
	static class FName LName_NPCPause_SpotTrigger();
	static class FName LName_NPCPauseMeta_Action();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGeneralName")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGeneralName")
	}
	static class ULGeneralName* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULGeneralName>();
	}
};
DUMPER7_ASSERTS_ULGeneralName;

// Class ProjectP.LProjectileHit_PeriodicHandler_V2
// 0x0048 (0x0070 - 0x0028)
class ULProjectileHit_PeriodicHandler_V2 final : public UObject
{
public:
	class ALProjectile*                           Owner;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLProjectileHitInfo_V2                 HitInfo;                                           // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTimerHandle                           TimerHandle;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Clear();
	void Initialize(class ALProjectile* InOwner, const struct FLProjectileHitInfo_V2& InHitInfo);
	void OnGenerateHit();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectileHit_PeriodicHandler_V2")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectileHit_PeriodicHandler_V2")
	}
	static class ULProjectileHit_PeriodicHandler_V2* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULProjectileHit_PeriodicHandler_V2>();
	}
};
DUMPER7_ASSERTS_ULProjectileHit_PeriodicHandler_V2;

// Class ProjectP.LCollisionMaskFilter
// 0x0000 (0x0028 - 0x0028)
class ULCollisionMaskFilter final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCollisionMaskFilter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCollisionMaskFilter")
	}
	static class ULCollisionMaskFilter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULCollisionMaskFilter>();
	}
};
DUMPER7_ASSERTS_ULCollisionMaskFilter;

// Class ProjectP.LLevelUtilFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULLevelUtilFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ChangePropStateBP(class AActor* TargetActor, int32 TargetState, EExecutePin* Branches);
	static void CheckNextPropStateBP(class AActor* TargetActor);
	static class ULPropComponent* GetPropComponentBP(class AActor* TargetActor, EExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLevelUtilFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLevelUtilFuncLibrary")
	}
	static class ULLevelUtilFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLevelUtilFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULLevelUtilFuncLibrary;

// Class ProjectP.LCollisionChannel
// 0x0000 (0x0028 - 0x0028)
class ULCollisionChannel final : public UObject
{
public:
	static ECollisionChannel CollisionChannel_LAttack();
	static ECollisionChannel CollisionChannel_LCapsuleBig();
	static ECollisionChannel CollisionChannel_LCapsuleNormal();
	static ECollisionChannel CollisionChannel_LCapsulePC();
	static ECollisionChannel CollisionChannel_LCloud();
	static ECollisionChannel CollisionChannel_LIK();
	static ECollisionChannel CollisionChannel_LPhysicsBodyBig();
	static ECollisionChannel CollisionChannel_LPhysicsBodyNormal();
	static ECollisionChannel CollisionChannel_LPhysicsBodyVisual();
	static ECollisionChannel CollisionChannel_LProjectile();
	static ECollisionChannel CollisionChannel_LRepulse();
	static ECollisionChannel CollisionChannel_LSpark();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCollisionChannel")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCollisionChannel")
	}
	static class ULCollisionChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULCollisionChannel>();
	}
};
DUMPER7_ASSERTS_ULCollisionChannel;

// Class ProjectP.LCollisionProfile
// 0x0000 (0x0028 - 0x0028)
class ULCollisionProfile final : public UObject
{
public:
	static class FName CollisionProfile_BlockAll();
	static class FName CollisionProfile_BlockAllDynamic();
	static class FName CollisionProfile_CharacterMesh();
	static class FName CollisionProfile_Destructible();
	static class FName CollisionProfile_IgnoreOnlyPawn();
	static class FName CollisionProfile_InvisibleWall();
	static class FName CollisionProfile_InvisibleWallDynamic();
	static class FName CollisionProfile_LAttack_Base();
	static class FName CollisionProfile_LAttack_Range();
	static class FName CollisionProfile_LBlock_Obstacle();
	static class FName CollisionProfile_LBlock_Obstacle_Projectile();
	static class FName CollisionProfile_LBlockAll_MovingEnvironment();
	static class FName CollisionProfile_LBlockAll_ThruCamera();
	static class FName CollisionProfile_LCamera_Block();
	static class FName CollisionProfile_LCapsuleAll_BlockAll();
	static class FName CollisionProfile_LCapsuleAll_Penetrate();
	static class FName CollisionProfile_LCapsuleAll_Penetrate_Fly();
	static class FName CollisionProfile_LCapsuleAll_TestOverlap();
	static class FName CollisionProfile_LCapsuleBig_Base();
	static class FName CollisionProfile_LCapsuleBig_Dead();
	static class FName CollisionProfile_LCapsuleBig_Ghost();
	static class FName CollisionProfile_LCapsuleNormal_Base();
	static class FName CollisionProfile_LCapsuleNormal_Dead();
	static class FName CollisionProfile_LCapsuleNormal_Ghost();
	static class FName CollisionProfile_LCapsuleNormal_Ghost_Hittable();
	static class FName CollisionProfile_LCapsuleNormal_Hittable();
	static class FName CollisionProfile_LCapsuleNormal_Penetrate_Hittable();
	static class FName CollisionProfile_LCapsuleNPC_TestOverlap();
	static class FName CollisionProfile_LCapsulePC_Base();
	static class FName CollisionProfile_LCapsulePC_Dead();
	static class FName CollisionProfile_LCapsulePC_Ghost();
	static class FName CollisionProfile_LCapsulePC_TestOverlap();
	static class FName CollisionProfile_LDecoMesh_Attack();
	static class FName CollisionProfile_LDecoMesh_DropEnd();
	static class FName CollisionProfile_LDecoMesh_DropStart();
	static class FName CollisionProfile_LDestructible_Chunk();
	static class FName CollisionProfile_LEnvironmentVolume();
	static class FName CollisionProfile_LInteract_Base();
	static class FName CollisionProfile_LInteract_CapsuleBase();
	static class FName CollisionProfile_LPhysicsBody_Explosion_Cut();
	static class FName CollisionProfile_LPhysicsBodyBig_Base();
	static class FName CollisionProfile_LPhysicsBodyBig_Dead();
	static class FName CollisionProfile_LPhysicsBodyBig_Dying();
	static class FName CollisionProfile_LPhysicsBodyBig_Ghost();
	static class FName CollisionProfile_LPhysicsBodyBig_Penetrate();
	static class FName CollisionProfile_LPhysicsBodyNormal_Base();
	static class FName CollisionProfile_LPhysicsBodyNormal_Dead();
	static class FName CollisionProfile_LPhysicsBodyNormal_Dying();
	static class FName CollisionProfile_LPhysicsBodyNormal_Ghost();
	static class FName CollisionProfile_LPhysicsBodyNormal_Penetrate();
	static class FName CollisionProfile_LPhysicsBodyNormal_SimulateOnly();
	static class FName CollisionProfile_LPhysicsBodyPC_Base();
	static class FName CollisionProfile_LPhysicsBodyPC_Dead();
	static class FName CollisionProfile_LPhysicsBodyPC_Dying();
	static class FName CollisionProfile_LPhysicsBodyPC_Ghost();
	static class FName CollisionProfile_LPhysicsBodyPC_Penetrate();
	static class FName CollisionProfile_LPhysicsBodyPC_SimulateOnly();
	static class FName CollisionProfile_LPhysicsBodyVisual_Base();
	static class FName CollisionProfile_LProjectile_Base();
	static class FName CollisionProfile_NoCollision();
	static class FName CollisionProfile_None();
	static class FName CollisionProfile_OverlapAll();
	static class FName CollisionProfile_OverlapAllDynamic();
	static class FName CollisionProfile_OverlapOnlyPawn();
	static class FName CollisionProfile_Pawn();
	static class FName CollisionProfile_PhysicsActor();
	static class FName CollisionProfile_Ragdoll();
	static class FName CollisionProfile_Spectator();
	static class FName CollisionProfile_Trigger();
	static class FName CollisionProfile_UI();
	static class FName CollisionProfile_Vehicle();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCollisionProfile")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCollisionProfile")
	}
	static class ULCollisionProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULCollisionProfile>();
	}
};
DUMPER7_ASSERTS_ULCollisionProfile;

// Class ProjectP.LComponentTag
// 0x0000 (0x0028 - 0x0028)
class ULComponentTag final : public UObject
{
public:
	static class FName CollisionProfile_LFootCollision();
	static class FName CollisionProfile_None();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LComponentTag")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LComponentTag")
	}
	static class ULComponentTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULComponentTag>();
	}
};
DUMPER7_ASSERTS_ULComponentTag;

// Class ProjectP.Interface_DestructEntity
// 0x0000 (0x0000 - 0x0000)
class IInterface_DestructEntity final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Interface_DestructEntity")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Interface_DestructEntity")
	}
	static class IInterface_DestructEntity* GetDefaultObj()
	{
		return GetDefaultObjImpl<IInterface_DestructEntity>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IInterface_DestructEntity;

// Class ProjectP.LDestructStaticMeshComponent
// 0x0020 (0x0510 - 0x04F0)
class ULDestructStaticMeshComponent final : public UStaticMeshComponent
{
public:
	uint8                                         Pad_4F0[0x8];                                      // 0x04F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AllMassScale;                                      // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveChunksPushStrengthRate;                        // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bDebugDraw : 1;                                    // 0x0500(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCollideCamera : 1;                                // 0x0500(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCanPushChunks : 1;                                // 0x0500(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bArtificialImpulse : 1;                            // 0x0500(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_501[0xF];                                      // 0x0501(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDestructOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDestructStaticMeshComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDestructStaticMeshComponent")
	}
	static class ULDestructStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULDestructStaticMeshComponent>();
	}
};
DUMPER7_ASSERTS_ULDestructStaticMeshComponent;

// Class ProjectP.LDestructSkeletalMeshComponent
// 0x0020 (0x0EF0 - 0x0ED0)
class ULDestructSkeletalMeshComponent final : public USkeletalMeshComponent
{
public:
	uint8                                         Pad_EC8[0x8];                                      // 0x0EC8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AllMassScale;                                      // 0x0ED0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveChunksPushStrengthRate;                        // 0x0ED4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bDebugDraw : 1;                                    // 0x0ED8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCollideCamera : 1;                                // 0x0ED8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_ED9[0x17];                                     // 0x0ED9(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDestructOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDestructSkeletalMeshComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDestructSkeletalMeshComponent")
	}
	static class ULDestructSkeletalMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULDestructSkeletalMeshComponent>();
	}
};
DUMPER7_ASSERTS_ULDestructSkeletalMeshComponent;

// Class ProjectP.LNiagaraDataInterfaceWind
// 0x0000 (0x0038 - 0x0038)
class ULNiagaraDataInterfaceWind final : public UNiagaraDataInterface
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LNiagaraDataInterfaceWind")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LNiagaraDataInterfaceWind")
	}
	static class ULNiagaraDataInterfaceWind* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULNiagaraDataInterfaceWind>();
	}
};
DUMPER7_ASSERTS_ULNiagaraDataInterfaceWind;

// Class ProjectP.LTextLocalization
// 0x0018 (0x0040 - 0x0028)
class ULTextLocalization final : public UBlueprintFunctionLibrary
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bLoadConetentInfoText;                             // 0x0038(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class FText GetGameStr(const class FString& CodeName);
	static class FText GetGameStrWithName(class FName CodeName);
	static void InitLoadLocalization();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LTextLocalization")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LTextLocalization")
	}
	static class ULTextLocalization* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTextLocalization>();
	}
};
DUMPER7_ASSERTS_ULTextLocalization;

// Class ProjectP.LDestructibleComponent
// 0x0030 (0x07B0 - 0x0780)
class ULDestructibleComponent final : public UDestructibleComponent
{
public:
	float                                         AllMassScale;                                      // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveChunksPushStrengthRate;                        // 0x0784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bDebugDraw : 1;                                    // 0x0788(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCollideCamera : 1;                                // 0x0788(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCanPushChunks : 1;                                // 0x0788(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bArtificialImpulse : 1;                            // 0x0788(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_789[0x17];                                     // 0x0789(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x07A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7A8[0x8];                                      // 0x07A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideStaticMeshProcess();
	void OnDestructFracture(const struct FVector& HitPoint, const struct FVector& HitDirection);
	void OnDestructOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDestructibleComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDestructibleComponent")
	}
	static class ULDestructibleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULDestructibleComponent>();
	}
};
DUMPER7_ASSERTS_ULDestructibleComponent;

// Class ProjectP.LLocationVolume
// 0x0008 (0x0260 - 0x0258)
class ALLocationVolume final : public ALVolume
{
public:
	class FName                                   LocationCodeName;                                  // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLocationVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLocationVolume")
	}
	static class ALLocationVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALLocationVolume>();
	}
};
DUMPER7_ASSERTS_ALLocationVolume;

// Class ProjectP.LDestructionObject
// 0x0120 (0x0370 - 0x0250)
class ALDestructionObject final : public ALInteractActor
{
public:
	uint8                                         bIsPossiblePhysicalReactionRemains : 1;            // 0x0250(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_251[0x1F];                                     // 0x0251(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisappearRange;                                    // 0x0270(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bDebugDraw : 1;                                    // 0x0274(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCrashedAll : 1;                                   // 0x0274(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bStableAll : 1;                                    // 0x0274(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCanDisappearByCameraView : 1;                     // 0x0274(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCanDissolveEffect : 1;                            // 0x0274(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bTakeWarningEvent : 1;                             // 0x0274(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIndestructibleButOccurEvent : 1;                  // 0x0274(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_275[0x3];                                      // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DissolveEffectDelayTime;                           // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DissolveEffectActorDestoryDelayTime;               // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNavModifierComponent*                  NavModifierComponent;                              // 0x0288(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_290[0x10];                                     // 0x0290(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HideByCameraViewTimerHandle;                       // 0x02A0(0x0008)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           DissolveTimerHandle;                               // 0x02A8(0x0008)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B0[0xC0];                                     // 0x02B0(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanRepulse(class AActor* Attacker);
	void DoHitDirection(const struct FVector& HitLocation, const struct FVector& HitDirection, float Strength);
	void DoHitFully(const struct FVector& HitLocation, float Strength);
	void DoHitRadius(const struct FVector& HitLocation, float Radius, float Strength);
	void DoHitSelf(float Strength);
	int32 GetCurrectHPDestructionProp();
	void OnDestructCrashed();
	void ProcessHit();
	void PushCrashedChunks(const struct FVector& PushLocation);
	void ResetCrashed();

	class AActor* GetControlShapeObjectSpot(int32 Index_0) const;
	int32 GetControlShapeObjectSpotLastIndex() const;
	class AActor* GetControlVolumeSpot() const;
	ELPhysicalSurfaceType GetPhysicalSurfaceType() const;
	bool IsCrashedAll() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDestructionObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDestructionObject")
	}
	static class ALDestructionObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALDestructionObject>();
	}
};
DUMPER7_ASSERTS_ALDestructionObject;

// Class ProjectP.LDevSystem
// 0x0038 (0x00B0 - 0x0078)
class ULDevSystem final : public ULGameSubSystem
{
public:
	TMulticastInlineDelegate<void()>              OnToggleCommandBook;                               // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	uint8                                         Pad_88[0x10];                                      // 0x0088(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ULRecordCameraData*                     LastRecordCameraData;                              // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableRecordCamera;                               // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RecordLookatZOffset;                               // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddUserGameCommand(const struct FLGameCommandBookEntity& Command);
	void BindGameCommandBookHotKey(const struct FLGameCommandBookEntity& Command);
	void EmptyUserCommands();
	void ExecuteGameCommand(const struct FLGameCommandBookEntity& Command);
	class AActor* GetDebugTargetActor();
	class ALNPCCharacter* GetNpcActorOnlyOne();
	void LoadGameCommands(TArray<struct FLGameCommandBookEntity>* DefaultCommands, TArray<struct FLGameCommandBookEntity>* UserCommands, TArray<struct FLGameCommandBookEntity>* DefaultChapterCommands, TArray<struct FLGameCommandBookEntity>* DefaultMoneyCommands);
	void SaveUserGameCommands(const TArray<struct FLGameCommandBookEntity>& UserCommands);
	void StartRecordCamera(float FrameRate, int32 LookatZOffset);
	void StopRecordCamera();
	void TogglePrintLocation();
	void UnbindGameCommandBookHotKey(const struct FLGameCommandBookEntity& Command);
	void UnbindGameCommandBookHotKeyAll();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDevSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDevSystem")
	}
	static class ULDevSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULDevSystem>();
	}
};
DUMPER7_ASSERTS_ULDevSystem;

// Class ProjectP.LDLCSystem
// 0x0100 (0x0178 - 0x0078)
class ULDLCSystem final : public ULGameSubSystem
{
public:
	uint8                                         Pad_78[0xC0];                                      // 0x0078(0x00C0)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              UIPreviewDLC;                                      // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bConnectionSuccess, const TArray<class ULItem*>& DLC_ItemList, bool IsLastDLC)> UIDLCItemReceiveResult_Account; // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ELDLCItemReceiveResult DLCItemReceiveResult, class FName DLC_CodeName, const TArray<class ULItem*>& DLC_ItemList)> UIDLCItemReceiveResult; // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x10];                                     // 0x0168(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckAvailableDLC();
	void OnCloseItemReceiveUI();
	void OnConnectionCanceled();
	void OnConnectionFailed();
	bool PopOutPendingDLC_Account();
	bool PopOutPendingDLC_Character();
	void PrintPreview();

	TArray<class FName> GetPendingDLCList() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDLCSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDLCSystem")
	}
	static class ULDLCSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULDLCSystem>();
	}
};
DUMPER7_ASSERTS_ULDLCSystem;

// Class ProjectP.SphereComponentForGuide
// 0x0000 (0x0470 - 0x0470)
class USphereComponentForGuide : public USphereComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SphereComponentForGuide")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SphereComponentForGuide")
	}
	static class USphereComponentForGuide* GetDefaultObj()
	{
		return GetDefaultObjImpl<USphereComponentForGuide>();
	}
};
DUMPER7_ASSERTS_USphereComponentForGuide;

// Class ProjectP.LTreeView
// 0x04D0 (0x0890 - 0x03C0)
class ULTreeView final : public UTreeView
{
public:
	struct FScrollBarStyle                        WidgetStyle;                                       // 0x03C0(0x04D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LTreeView")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LTreeView")
	}
	static class ULTreeView* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTreeView>();
	}
};
DUMPER7_ASSERTS_ULTreeView;

// Class ProjectP.LDropFixVolume
// 0x0008 (0x0260 - 0x0258)
class ALDropFixVolume final : public ALVolume
{
public:
	class ALLocationActor*                        ErgoDropLocation;                                  // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDropFixVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDropFixVolume")
	}
	static class ALDropFixVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALDropFixVolume>();
	}
};
DUMPER7_ASSERTS_ALDropFixVolume;

// Class ProjectP.LDummySpot
// 0x0000 (0x02D0 - 0x02D0)
class ALDummySpot final : public ALSpot
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDummySpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDummySpot")
	}
	static class ALDummySpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALDummySpot>();
	}
};
DUMPER7_ASSERTS_ALDummySpot;

// Class ProjectP.LNPCSpot
// 0x0120 (0x03F0 - 0x02D0)
class ALNPCSpot : public ALSpot
{
public:
	class FName                                   SpawnIdleActionGroup;                              // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDisableSenseOnSpawnIdle : 1;                      // 0x02D8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLNPCSpawnIdleOverride                 SpawnIdleOverride;                                 // 0x02DC(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FLNPCInfoOverride                      NPCInfoOverride;                                   // 0x02F0(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PathWayCodeName;                                   // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveByPathWayOnSpawn;                             // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFloatingStateOnSpawn : 1;                         // 0x0331(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFloatingStateCeiling : 1;                         // 0x0331(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAIPauseOnSpawn : 1;                               // 0x0331(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSleepOnSpawn : 1;                                 // 0x0331(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bResetSwapOnRespawn : 1;                           // 0x0331(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bImportantNPC;                                     // 0x0332(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_333[0x1];                                      // 0x0333(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GameObject_InactiveDistanceFromPlayer_Override;    // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFactionType                                  Faction;                                           // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDeadState;                                       // 0x0339(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsHideDespawn : 1;                                // 0x033A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_33B[0x1];                                      // 0x033B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StolenDropErgo;                                    // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsRespawnEnable : 1;                              // 0x0340(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SwapNpcCodeName;                                   // 0x0344(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            PartsItemDropCount;                                // 0x0350(0x0050)(Edit, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class ULAITargetPointComponent*>       AITargetPointComponents;                           // 0x03A0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bIncludeBossRoomSpot : 1;                          // 0x03B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           WakeUpTimerHandle;                                 // 0x03B8(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class ALNPCSpot* TargetNpcSpot)> OnDeadSpawnNpc;                   // 0x03C0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* TargetActor)> OnDeadRewardUseOtherSystem;            // 0x03D0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ALNPCCharacter>          SpawnedNpc;                                        // 0x03E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E8[0x8];                                      // 0x03E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnComponentBeginOverlapPathway(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnWakeUpSpawnedNpc();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LNPCSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LNPCSpot")
	}
	static class ALNPCSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALNPCSpot>();
	}
};
DUMPER7_ASSERTS_ALNPCSpot;

// Class ProjectP.LDummyNPCSpot
// 0x0000 (0x03F0 - 0x03F0)
class ALDummyNPCSpot final : public ALNPCSpot
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDummyNPCSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDummyNPCSpot")
	}
	static class ALDummyNPCSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALDummyNPCSpot>();
	}
};
DUMPER7_ASSERTS_ALDummyNPCSpot;

// Class ProjectP.LAITargetPointComponent
// 0x0000 (0x0200 - 0x0200)
class ULAITargetPointComponent final : public USceneComponent
{
public:
	ELAITargetPointType                           TargetPointType;                                   // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LAITargetPointComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LAITargetPointComponent")
	}
	static class ULAITargetPointComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULAITargetPointComponent>();
	}
};
DUMPER7_ASSERTS_ULAITargetPointComponent;

// Class ProjectP.LWaterVolume
// 0x0000 (0x0258 - 0x0258)
class ALWaterVolume final : public ALVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWaterVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWaterVolume")
	}
	static class ALWaterVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALWaterVolume>();
	}
};
DUMPER7_ASSERTS_ALWaterVolume;

// Class ProjectP.LDummyPropSpot
// 0x0000 (0x0358 - 0x0358)
class ALDummyPropSpot final : public ALPropSpot
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDummyPropSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDummyPropSpot")
	}
	static class ALDummyPropSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALDummyPropSpot>();
	}
};
DUMPER7_ASSERTS_ALDummyPropSpot;

// Class ProjectP.LDynamicDamageVolumeActor
// 0x0080 (0x02A0 - 0x0220)
class ALDynamicDamageVolumeActor final : public AActor
{
public:
	struct FDynamicDamageVolumeInfoPtr            Info;                                              // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_228[0x50];                                     // 0x0228(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          EnableTick;                                        // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLDynamicDamageVolume_TargetInfo> TargetList;                                      // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_290[0x10];                                     // 0x0290(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddDamagePerTime(class ALCharacter* TargetActor);
	void ApplyDamage(class AActor* TargetActor, const struct FHitResult& HitResult, class FName Skill_Hit_Override);
	TArray<class AActor*> GetOverlappedActors();
	void OnBeginOverlap(class AActor* Actor, const struct FHitResult& HitResult);
	void OnEndOverlap(class AActor* Actor);
	void RemoveDamagePerTime(class AActor* TargetActor);
	void Reset();
	void ResetDynamicDamageVolumeInfo(class FName InCodeName);
	void Start();
	void Stop();
	void UpdateOverlapEvents();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDynamicDamageVolumeActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDynamicDamageVolumeActor")
	}
	static class ALDynamicDamageVolumeActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALDynamicDamageVolumeActor>();
	}
};
DUMPER7_ASSERTS_ALDynamicDamageVolumeActor;

// Class ProjectP.LEnvRootComponent
// 0x0000 (0x0200 - 0x0200)
class ULEnvRootComponent final : public USceneComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LEnvRootComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LEnvRootComponent")
	}
	static class ULEnvRootComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULEnvRootComponent>();
	}
};
DUMPER7_ASSERTS_ULEnvRootComponent;

// Class ProjectP.LWeaponDerbisBlade
// 0x0010 (0x0230 - 0x0220)
class ALWeaponDerbisBlade : public AActor
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UMeshComponent* GetActiveMeshComponent() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWeaponDerbisBlade")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWeaponDerbisBlade")
	}
	static class ALWeaponDerbisBlade* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALWeaponDerbisBlade>();
	}
};
DUMPER7_ASSERTS_ALWeaponDerbisBlade;

// Class ProjectP.LPostProcessComponent
// 0x0020 (0x07F0 - 0x07D0)
class ULPostProcessComponent final : public UPostProcessComponent
{
public:
	uint8                                         Pad_7D0[0x20];                                     // 0x07D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPostProcessComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPostProcessComponent")
	}
	static class ULPostProcessComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPostProcessComponent>();
	}
};
DUMPER7_ASSERTS_ULPostProcessComponent;

// Class ProjectP.LListView
// 0x04E0 (0x0848 - 0x0368)
class ULListView final : public UListView
{
public:
	struct FScrollBarStyle                        WidgetStyle;                                       // 0x0368(0x04D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_838[0x10];                                     // 0x0838(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetScrollOffset();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LListView")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LListView")
	}
	static class ULListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULListView>();
	}
};
DUMPER7_ASSERTS_ULListView;

// Class ProjectP.LEnvSettings
// 0x08C8 (0x08F0 - 0x0028)
class ULEnvSettings final : public UObject
{
public:
	struct FLDirectionalLightSettings             DirectionalLight;                                  // 0x0028(0x005C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLDirectionalLightNoShadowSettings     DirectionalLightNoShadow;                          // 0x0084(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLDirectionalLightNoShadowSettings     DirectionalLightCharacter;                         // 0x00B0(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLSkyLightSettings                     SkyLight;                                          // 0x00DC(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLHeightFogSettings                    HeightFog;                                         // 0x00F8(0x006C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLSkySphereSettings                    SkySphere;                                         // 0x0164(0x0094)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLCloudSettings                        Cloud;                                             // 0x01F8(0x008C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLWeatherSettings                      Weather;                                           // 0x0284(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLLightningSettings                    Lightning;                                         // 0x02C4(0x0074)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   PostProcess;                                       // 0x0340(0x05B0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void OnApplySetting_BP(float LocalWeight);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LEnvSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LEnvSettings")
	}
	static class ULEnvSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULEnvSettings>();
	}
};
DUMPER7_ASSERTS_ULEnvSettings;

// Class ProjectP.LEnvVolumeActor
// 0x0078 (0x02D0 - 0x0258)
class ALEnvVolumeActor final : public ALVolume
{
public:
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULPostProcessComponent*                 PostProcessSource;                                 // 0x0260(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULPostProcessComponent*                 PostProcessTarget;                                 // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRadius;                                       // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class ULEnvSettings*>       EnvSettings;                                       // 0x0280(0x0050)(Edit, BlueprintVisible, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LEnvVolumeActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LEnvVolumeActor")
	}
	static class ALEnvVolumeActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALEnvVolumeActor>();
	}
};
DUMPER7_ASSERTS_ALEnvVolumeActor;

// Class ProjectP.LGlobalEnvActor
// 0x0440 (0x0660 - 0x0220)
class ALGlobalEnvActor final : public AActor
{
public:
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULEnvRootComponent*                     DummyRoot;                                         // 0x0228(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        StaticScene;                                       // 0x0230(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        MovableScene;                                      // 0x0238(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULPostProcessComponent*                 PostProcessSource;                                 // 0x0240(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULPostProcessComponent*                 PostProcessTarget;                                 // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             DirectionalLight;                                  // 0x0250(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             DirectionalLightNoShadow;                          // 0x0258(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             DirectionalLightCharacter;                         // 0x0260(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     SkyLight;                                          // 0x0268(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   SkySphere;                                         // 0x0270(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      SkyMI;                                             // 0x0280(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           MPC;                                               // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDayTimeType                                  DayTime;                                           // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LowerHemisphereColor;                              // 0x0294(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               SkyMID;                                            // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollectionInstance*   MPCInst;                                           // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlayerCameraLocation;                              // 0x02B8(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasPlayerCamera;                                  // 0x02C4(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class ULEnvSettings*>       EnvSettings;                                       // 0x02C8(0x0050)(Edit, BlueprintVisible, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   CurrentSetting;                                    // 0x0318(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PrevSetting;                                       // 0x0320(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendAlpha;                                        // 0x0328(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendDuration;                                     // 0x032C(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QueuedSetting;                                     // 0x0330(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QueuedBlendDuration;                               // 0x0338(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLDirectionalLightSettings             Blended_DirectionalLight;                          // 0x033C(0x005C)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FLDirectionalLightNoShadowSettings     Blended_DirectionalLightNoShadow;                  // 0x0398(0x002C)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FLDirectionalLightNoShadowSettings     Blended_DirectionalLightCharacter;                 // 0x03C4(0x002C)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FLSkyLightSettings                     Blended_SkyLight;                                  // 0x03F0(0x001C)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FLHeightFogSettings                    Blended_HeightFog;                                 // 0x040C(0x006C)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FLSkySphereSettings                    Blended_SkySphere;                                 // 0x0478(0x0094)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FLCloudSettings                        Blended_Cloud;                                     // 0x050C(0x008C)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FLWeatherSettings                      Blended_Weather;                                   // 0x0598(0x0040)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FLLightningSettings                    Blended_Lightning;                                 // 0x05D8(0x0074)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BlendWeightAccumed;                                // 0x064C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_650[0x10];                                     // 0x0650(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetEditorCameraPosition(struct FVector* OutCameraPostion);
	bool IsBlending();
	void OnStartPostProcessing_BP();
	void SetPreviewTarget(int32 Index_0);
	void SpawnCustomLightning(float Delay, float Direction, float Intensity, float Distance, float Height);
	void StartBlend(class FName TargetName, float Duration);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGlobalEnvActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGlobalEnvActor")
	}
	static class ALGlobalEnvActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALGlobalEnvActor>();
	}
};
DUMPER7_ASSERTS_ALGlobalEnvActor;

// Class ProjectP.LItem
// 0x0080 (0x00A8 - 0x0028)
class ULItem : public UObject
{
public:
	bool                                          VirtualBasedUpgrade;                               // 0x0028(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0xF];                                       // 0x0029(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemCommonInfoPtr                     CommonInfo;                                        // 0x0038(0x0008)(Edit, Transient, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	int32                                         ItemCount;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DurabilityAmount;                                  // 0x0044(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int64                                         UniqueId;                                          // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ULItem>                  ComplexItem_Unit;                                  // 0x0050(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ULItem>                  ComplexItem_Main;                                  // 0x0058(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         ComplexItem_UseMainInstead : 1;                    // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLWeaponPart                           WeaponPart;                                        // 0x0068(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          OnToggled;                                         // 0x0098(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_99[0xF];                                       // 0x0099(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanKeep();
	bool ChangeCorrection(ELStatCorrectChangeType Type);
	ELAssistUseItemSlotType GetAssistUseSlotType();
	ELEquipSlotType GetEquipSlotType();
	int32 GetMaxStackCount();
	int32 GetRawSlaveArmStat(ELSecondStat InStat);
	class ULItem* GetSlavearmAlteredItem();
	int32 GetSlaveArmStat(class AActor* InOwner, ELSecondStat InStat, bool IsVirtual);
	int32 GetSlaveArmStatBonus(class AActor* InOwner, ELSecondStat InStat, bool IsVirtual);
	int32 GetUseSlotIndex(bool FirstLine);
	bool IsEquipped();
	bool IsEquippedAssistUseItem();
	bool IsEquippedUseItem(bool* OutIsFirstLine);
	bool Reinforce();
	void SetComplexItem_UseMainInstead(bool UseMainInstead);
	void SetCount(int32 Count);
	void SetSlavearmAlteredItem(class ULItem* InAlteredItem);

	bool CanChangeCorrection(ELStatCorrectChangeType Type) const;
	bool CanCombineBlade(ELBladeShapeType BladeShapeType) const;
	bool CanReinforce() const;
	bool CanStackCount() const;
	struct FHandleStatCorrectionChangeInfoPtr GetChangeCorrectionInfo(ELStatCorrectChangeType Type) const;
	ELStatCorrectChangeType GetChangedCorrectionType() const;
	class FName GetCodeName() const;
	struct FItemCollectionInfoPtr GetCollectionInfo() const;
	struct FItemCommonInfoPtr GetCommonInfo() const;
	class ULItem* GetComplexItem_Main() const;
	class ULItem* GetComplexItem_Unit() const;
	struct FItemConsumeInfoPtr GetConsumeInfo() const;
	ELHandleCorrectResultGrade GetCorrectionGrade(ELFirstStat Type, ELStatCorrectChangeType WillBeChangeCorrection, int32* OutStackLevel) const;
	int32 GetCount() const;
	int32 GetDurabilityAmount() const;
	ELItemFirstCategory GetFirstCategory() const;
	TSoftObjectPtr<class UObject> GetImageResource() const;
	int64 GetItemId() const;
	int32 GetMaxSharpnessPoint(bool bIncludeSharpnessStatBonus, bool WillReinforceDiffStat, bool bIncludeGrindingReducement) const;
	int32 GetMaxSharpnessPointByType(ELBladeSharpnessType Type, bool bIncludeSharpnessStatBonus, bool WillReinforceDiffStat) const;
	struct FItemWeaponReinforceInfoPtr GetNextReinforceInfo() const;
	struct FItemPartsInfoPtr GetPartsInfo() const;
	int32 GetRawWeaponStat(ELSecondStat InStat, bool WillReinforceDiffStat, ELStatCorrectChangeType WillHandleDiffStat) const;
	struct FItemWeaponReinforceInfoPtr GetReinforceInfo() const;
	int32 GetReinforceLevel() const;
	ELItemSecondCategory GetSecondCategory() const;
	struct FItemSlaveArmInfoPtr GetSlaveArmInfo() const;
	struct FItemBladeInfoPtr GetWeaponBladeInfo() const;
	struct FItemHandleInfoPtr GetWeaponHandleInfo() const;
	int32 GetWeaponStat(class AActor* InOwner, ELSecondStat InStat, bool WillReinforceDiffStat, ELStatCorrectChangeType WillHandleDiffStat) const;
	int32 GetWeaponStatBonus(class AActor* InOwner, ELSecondStat InStat, bool WillReinforceDiffStat, ELStatCorrectChangeType WillHandleDiffStat) const;
	int32 GetWeight() const;
	bool IsBladeItem() const;
	bool IsChangedCorrection() const;
	bool IsComplexItem() const;
	bool IsHandleItem() const;
	bool IsOnToggled() const;
	bool IsReinforced() const;
	bool IsSameGroup(class ULItem* In) const;
	bool IsSameItem(class ULItem* In) const;
	bool IsToggleItem() const;
	bool IsWeapon() const;
	bool IsWeaponBlade() const;
	bool IsWeaponHandle() const;
	bool IsWeaponSlaveArm() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LItem")
	}
	static class ULItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULItem>();
	}
};
DUMPER7_ASSERTS_ULItem;

// Class ProjectP.LPulseItem
// 0x0010 (0x00B8 - 0x00A8)
class ULPulseItem final : public ULItem
{
public:
	uint8                                         bPulseGaugeRechargeable : 1;                       // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRecharged : 1;                                    // 0x00A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PulseItemExhaustedCount;                           // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PulseGaugeRechargedCount;                          // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPulseItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPulseItem")
	}
	static class ULPulseItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPulseItem>();
	}
};
DUMPER7_ASSERTS_ULPulseItem;

// Class ProjectP.LSlaveArmInfo
// 0x0038 (0x0060 - 0x0028)
class ULSlaveArmInfo final : public UObject
{
public:
	uint8                                         Pad_28[0xC];                                       // 0x0028(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CodeName;                                          // 0x0034(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USkeletalMeshComponent>  SkeletalMeshComponent;                             // 0x003C(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULPartsAttachInfo*>              AttachInfoList;                                    // 0x0048(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         bEnableWeaponItemPreload : 1;                      // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSlaveArmInfo")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSlaveArmInfo")
	}
	static class ULSlaveArmInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSlaveArmInfo>();
	}
};
DUMPER7_ASSERTS_ULSlaveArmInfo;

// Class ProjectP.LNPCSpotTriggerComponent
// 0x0020 (0x04A0 - 0x0480)
class ULNPCSpotTriggerComponent final : public UBoxComponent
{
public:
	uint8                                         Pad_478[0x9];                                      // 0x0478(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	ELNPCSpotTriggerType                          TriggerType;                                       // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_482[0x2];                                      // 0x0482(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TriggerDelay;                                      // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   NpcSkillCodeName;                                  // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLNpcSpotWakeUpData                    WakeUpData;                                        // 0x0490(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_498[0x8];                                      // 0x0498(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnComponentBeginOverlapSpotTrigger(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnRemovePauseAI();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LNPCSpotTriggerComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LNPCSpotTriggerComponent")
	}
	static class ULNPCSpotTriggerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULNPCSpotTriggerComponent>();
	}
};
DUMPER7_ASSERTS_ULNPCSpotTriggerComponent;

// Class ProjectP.LPartsAttachInfo
// 0x0008 (0x0030 - 0x0028)
class ULPartsAttachInfo final : public UObject
{
public:
	TWeakObjectPtr<class USkeletalMeshComponent>  SkeletalMeshComponent;                             // 0x0028(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPartsAttachInfo")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPartsAttachInfo")
	}
	static class ULPartsAttachInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPartsAttachInfo>();
	}
};
DUMPER7_ASSERTS_ULPartsAttachInfo;

// Class ProjectP.LEquipmentComponent
// 0x01B0 (0x0260 - 0x00B0)
class ULEquipmentComponent : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(ELWeaponStateChangeType WeaponStateChangeType)> OnWeaponStateChanged; // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class USkeletalMeshComponent* SkeletalMeshComponent)> OnPartsMeshChanged; // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         bEnableWeaponItemPreload : 1;                      // 0x00D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUpdateWeaponOnOff : 1;                            // 0x00D0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          Current_Mesh_Mask;                                 // 0x00D8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FLWeaponBuildData>         WeaponBuildDatas;                                  // 0x00E8(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         ExtraWeaponSetupIndex;                             // 0x0138(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13C[0x14];                                     // 0x013C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectedWeaponIndex;                               // 0x0150(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FLSlaveArmBuildData>       SlaveArmBuildDatas;                                // 0x0158(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         SelectedSlaveArmIndex;                             // 0x01A8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLWeaponTransformData>          WeaponTransformDatas;                              // 0x01B0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FLDecoMeshData>      DecoMeshDatas;                                     // 0x01C0(0x0050)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FLHitMeshParts>      HitMeshPartsList;                                  // 0x0210(0x0050)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void AddNpcHitParts(class FName NpcPartsCodeName, class FName SkillCodeNameOnDestroy, class UPrimitiveComponent* Primitive, bool bPartsEnableWhenSpawn);
	void ChangeTransformWeapon(ELWeaponAttachPointType MasterWeaponAttachPoint, ELWeaponAttachPointType WeaponAttachPoint1, class ULWeaponItem* WeaponItem1, ELWeaponAttachPointType WeaponAttachPoint2, class ULWeaponItem* WeaponItem2);
	bool CheckHitPartsWeakElement(class FName HitPartsName, const struct FLCalcDamageData& CalcDamageData);
	class UShapeComponent* CreateDecoShape(class FName MeshName, const struct FVector& Size, class FName AttachSocketName, const struct FRotator& Rotation, bool bResponseCollision, bool bDebugDraw);
	class UStaticMeshComponent* CreateDecoStaticMesh(class FName MeshName, class UStaticMesh* StaticMesh, class FName AttachSocketName, bool bResponseCollision, bool bDisappear);
	void DeactivatePartsAll();
	void DestroyDecoMesh(class FName MeshName);
	void DoHeadCostumeOff(bool DoOff, bool RetainMask);
	void DropDecoMeshes();
	class UStaticMeshComponent* DropPhysicsDecoStaticMesh(class FName MeshName, bool IgnorePawn);
	void DropPickedWeapon(ELWeaponAttachPointType AttachPointType);
	void DropPickedWeaponAll();
	class UStaticMeshComponent* FindDecoStaticMesh(class FName MeshName);
	class ALPartsActor* FindPartsActor(int32 PartsIndex);
	class ULPartsComponent* FindPartsCompByLinkBodyBone(class FName BoneName);
	class ULPartsComponent* FindPartsCompByNPCPartsCodeName(class FName NpcPartsCodeName);
	class FName GetHitPartsNameByPrimitive(class UPrimitiveComponent* Primitive);
	class ULPartsComponent* GetPartsComp(int32 PartsIndex);
	class ALWeapon* GetPickedWeaponActor(ELWeaponAttachPointType AttachPointType);
	class ALWeapon* GetSelectedWeaponActor();
	int32 GetSelectedWeaponIndex();
	class ULSlaveArmInfo* GetSlaveArmInfo();
	class ALWeapon* GetWeaponActor(int32 Index_0);
	class ALWeapon* GetWeaponByComponent(class UPrimitiveComponent* Component);
	class ALWeapon* GetWeaponByULItem(class ULItem* Item);
	class ULWeaponItem* GetWeaponItem(int32 Index_0);
	bool HasDecoMeshResponseCollision(class UPrimitiveComponent* PrimitiveComponent);
	bool IsDecoMesh(class UPrimitiveComponent* MeshComponent);
	bool IsHitPartsByPrimitive(class UPrimitiveComponent* Primitive);
	class ALWeapon* PickWeapon(ELWeaponAttachPointType AttachPointType, int32 Index_0, ELPickWeaponChangeMotionType ChangeMotionType);
	void ResetDeco(class FName MeshName);
	class UStaticMeshComponent* ResetDecoStaticMesh(class FName MeshName);
	void ResetWeapon(int32 Index_0);
	void ResetWeaponAll();
	void SelectSlaveArm(int32 Index_0);
	void SelectWeapon(int32 Index_0);
	void SetDecoHidden(class FName MeshName, bool bHidden);
	void SetDecoNoCollsion(class FName MeshName);
	void SetParts(class ULItem* Item);
	void SetSlaveArmByItem(int32 Index_0, class ULItem* Item);
	void SetWeaponByItem(int32 Index_0, class ULItem* Item);
	void SetWeaponByItemWeaponMonster(int32 Index_0, class FName ItemWeaponMonsterCodeName);
	class ALWeapon* SpawnWeapon();
	class ALWeapon* SpawnWeaponWithClass(TSubclassOf<class ALWeapon> HandleWeaponClass, TSubclassOf<class ALWeapon> BladeWeaponClass);
	void UnChangeTransformWeapon(ELWeaponAttachPointType OriginalWeaponAttachPoint);
	void UnPickWeapon(ELWeaponAttachPointType AttachPointType, ELPickWeaponChangeMotionType ChangeMotionType);
	void WeaponOff(ELWeaponAttachPointType AttachPointType);
	void WeaponOn(ELWeaponAttachPointType AttachPointType);
	void WeaponOnOffOwnerHidden(bool bOnOff);

	bool CheckHitPartsRepulseHitRangeAngle(class FName HitPartsName, class AActor* Attacker, class AActor* Victim) const;
	bool CheckHitPartsRepulseLevel(class FName HitPartsName, ELPhysicalDamageType InPhysicalDamageType, int32 InAttackRepulseLevel) const;
	class FName GetHitPartsSkillCodeNameOnDestory(class FName HitPartsName) const;
	TArray<class ULPartsComponent*> GetPartsComponents() const;
	class FName GetWeakElementSkillCodeName(class FName HitPartsName) const;
	bool IsHitPartsDestoryed(class FName HitPartsName) const;
	bool IsHitPartsEnabled(class FName HitPartsName) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LEquipmentComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LEquipmentComponent")
	}
	static class ULEquipmentComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULEquipmentComponent>();
	}
};
DUMPER7_ASSERTS_ULEquipmentComponent;

// Class ProjectP.LEventDispatcherSystem
// 0x0620 (0x0698 - 0x0078)
class ULEventDispatcherSystem final : public ULGameSubSystem
{
public:
	TMulticastInlineDelegate<void(class AActor* ActorPtr)> OnSpawnActor;                             // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EPNGameState GameState, bool ExecuteInGameMode)> OnChangeGameState; // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              YouDieToReStart;                                   // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnYouDie;                                          // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplyLoadedGameDataAccount;                        // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplyLoadedGameDataCharacter;                      // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsValid)>  OnSetActiveEnvironment;                            // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Int32Data)> OnChangeLevelPuppetKing;                         // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ELGameStartSequenceState State)> OnCompleteAsyncPreLoad;           // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnEndAsyncPreLoadScene;                            // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Int32Data)> OnGainExp;                                       // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Int32Data)> OnGainFrenzyPoint;                               // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Int32Data)> OnStaminaConsume;                                // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsValid)>  OnChangedSlaveMagazine;                            // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsValid)>  OnSlaveArmUsableStateChange;                       // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Int32Data)> OnChangeWeapon;                                  // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName ItemId, int32 ItemCount)> OnGainItem;                  // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FName& Handle, const class FName& Blade)> OnGainWeapon; // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Value, int32 PointPerSlot)> OnMaxOrb;                        // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Value, int32 PointPerSlot, bool IsUsed)> OnRefreshOrb;       // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 CurrentSharpness, int32 MaxSharpness, bool IsGrinding)> OnUpdateWeaponSharpness; // 0x01B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Current, int32 Max, int32 UnitCount, int32 ConsumeUnitCount, ELFrenzyConsumeReason FrenzyPointConsumeReason)> OnUpdateFrenzyPoint; // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsActivated)> OnChangeFrenzyMode;                             // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName PocketName, class FName QuartzSlotCodeName)> OnQuartzSlotInstalled; // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName PocketName)> OnQuartzSynergyActivated;                 // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsPutOn, class FName AbnormalCodeName)> OnVisibleAbnormalPassiveUI; // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsPutOn, class FName SpeicalBuffCodeName)> OnVisibleSpecialBuffUI; // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool On, bool IsHandle)> OnFableBuffEnable;                        // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName NameData)> OnDeadBoss;                                 // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnReadyHUD;                                        // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRefreshHealthPower;                              // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRefreshDeathCount;                               // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRefreshReceiveDamage;                            // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRefreshPlayTime;                                 // 0x0288(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsValid, class FName InteractMsg)> OnVisibleInteractionUI;    // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsValid)>  OnEnableInteractionUI;                             // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsValid, class FText LocalizedText)> OnVisibleGuideUI;        // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float VisibleTime, class FText LocalizedText)> OnTimerGuideUI;     // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName TutorialName, bool VisibleFlag, float VisibleTime)> OnTutorialMessageUI; // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnErgoDropAcquisition;                             // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnErgoDropChange;                                  // 0x02F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ALNPCCharacter* NPCActor, bool IsVisible)> OnVisibleHudBossHPBar; // 0x0308(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Index)>   OnAddFatalIndicator;                               // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Index)>   OnRemoveFatalIndicator;                            // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              UIMsgYouDie;                                       // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              UIMsgYouDieEnd;                                    // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              UIFadeBlackOn;                                     // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              UIFadeBlackOff;                                    // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              UIFadeOutHUD;                                      // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              UIFadeOutHUD_Finished;                             // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              UIFadeInHUD;                                       // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              UIFadeInHUD_Finished;                              // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName NameData)> UIMsgCurrentLocation;                       // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Int32Data)> UIUpdateCurrentSoul;                             // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ELSecondStat InStat)> UIUpdateCharacterStat;                       // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              UIConfirmCharacterStat;                            // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ELFirstStat FirstStat, int32 ChangeData)> UIChangeFirstStat;       // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 RemainSoul, const TArray<struct FLSecondStatDiffData>& CommonDiff, const TArray<struct FLSecondStatDiffData>& Weapon1stDiff, const TArray<struct FLSecondStatDiffData>& Weapon2ndDiff)> UIUpdateSecondStat; // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsValid)>  UIActiveLevelUpWidget;                             // 0x0418(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsValid)>  UISettingInputBlock;                               // 0x0428(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ELLobbyMenu LobbyMenu, bool ProcessResult)> UILobbyProcessEnd;     // 0x0438(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName NameData)> UIConfirmTeleport;                          // 0x0448(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool UseItem)>  OnBackToLatestTorsionCoil;                         // 0x0458(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool UseItem)>  OnBackToHotelTorsionCoil;                          // 0x0468(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName NameData)> UIActivateTorsionCoil;                      // 0x0478(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              UICompleteTorsionCoilActiveAlert;                  // 0x0488(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsValid)>  UIHelpMatePopupResult;                             // 0x0498(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Int32Data)> UIUpdateCurrentHumanity;                         // 0x04A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName NameData)> UIHumanityAcquisitionPopup;                 // 0x04B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              UIHumanityAcquisitionPopupEnded;                   // 0x04C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName AbnormalName, const TArray<struct FLBuildupInfo>& BuildupInfos)> UIBuildupPCAbnormal; // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName AbnormalName, int64 AbnormalUniqueId, bool Visible)> UIVisibleAbnormalDuration; // 0x04E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName EventName, bool IsStart)> UIHUDEvent;                  // 0x04F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName LetterName, int32 PageNum)> UIReadLetterEvent;         // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsValid)>  UIPressAssistUseItemTriggerKey;                    // 0x0518(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FText TextData)> UIOnPlayMonolog;                            // 0x0528(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              UIOnStopMonolog;                                   // 0x0538(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bVisible)> UICrossHairVisibleChanged;                         // 0x0548(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Int32Data)> UIShowNewGamePlus;                               // 0x0558(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsValid)>  UIConfirmNewGamePlus;                              // 0x0568(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& StringData)> UIPlayerSpawnFailedMessage;      // 0x0578(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              UIChangedScreenResolution;                         // 0x0588(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float FloatData)> UIApplyGoldenTreeBoost;                          // 0x0598(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Current, int32 Max)> UISlaveArmAmmoChanged;                  // 0x05A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsValid)>  UIPressShotgunAmmoPouch;                           // 0x05B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ELShotGunAmmoType Type)> OnShotGunAmmoChanged;                     // 0x05C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnLieDialogStart;                                  // 0x05D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnLieDialogEnd;                                    // 0x05E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsValid)>  OnOverlapTrainingArea;                             // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ALNPCCharacter* NPCActor, bool IsVisible)> OnVisibleHelpmateHPBar; // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsValid)>  OnProtectErgoDropChanged;                          // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName CodeName, float Duration)> OnShowSubtitle;             // 0x0628(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsValid)>  OnLoadedCharacterSaveData;                         // 0x0638(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnShowControlGuide;                                // 0x0648(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_658[0x8];                                      // 0x0658(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* Owner, const struct FMomentConditionCaptureInfo& CapturedInfo)> OnCaptureMomentCondition; // 0x0660(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_670[0x28];                                     // 0x0670(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CaptureMomentCondition(const struct FMomentConditionCaptureInfo& CapturedInfo, class AActor* Owner);
	void OnUIConfirmNewGamePlus(bool IsConfirm);
	void OnUIMsgYouDieEnd();
	void RaiseSenseToActor(class AActor* Reciever, const struct FLAISenseTakeLocation& TakeLocation);
	void RaiseSenseToActors(const struct FLAISenseTakeLocation& TakeLocation);
	void SendHelpSignal(class AActor* Target, float OverrideRange);
	void SenseTargetToActor(class AActor* Reciever, ELAISense Sense, class AActor* Target);
	void SenseTargetToCharacters(ELAISense Sense, class AActor* Target);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LEventDispatcherSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LEventDispatcherSystem")
	}
	static class ULEventDispatcherSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULEventDispatcherSystem>();
	}
};
DUMPER7_ASSERTS_ULEventDispatcherSystem;

// Class ProjectP.LItemDropSystem
// 0x0050 (0x00C8 - 0x0078)
class ULItemDropSystem final : public ULGameSubSystem
{
public:
	class ALItemDropSystemData*                   SystemData;                                        // 0x0078(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ItemDropEnable;                                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ItemDefaultExtent;                                 // 0x0094(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ItemLargeExtend;                                   // 0x00A0(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0xC];                                       // 0x00AC(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLDropErgoData>                 DropErgoDataList;                                  // 0x00B8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void GainDropErgoData(const class FString& SpotUniqueID);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LItemDropSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LItemDropSystem")
	}
	static class ULItemDropSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULItemDropSystem>();
	}
};
DUMPER7_ASSERTS_ULItemDropSystem;

// Class ProjectP.LExiledNpcArea
// 0x00A8 (0x0348 - 0x02A0)
class ALExiledNpcArea final : public ALLevelObject
{
public:
	class ALExiledNPCSpot*                        OwnerExiledNPCSpot;                                // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Root_Warning_Inner;                                // 0x02A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Root_Warning_Outer;                                // 0x02B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Root_IsolateBarrier;                               // 0x02B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Root_IsolateBarrierEffect;                         // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Root_IsolateBarrierForCamera;                      // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D0[0x78];                                     // 0x02D0(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnComponentBeginOverlapped_Warning_Inner(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
	void OnComponentBeginOverlapped_Warning_Outer(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
	void OnComponentEndOverlapped_Warning_Inner(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnComponentEndOverlapped_Warning_Outer(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LExiledNpcArea")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LExiledNpcArea")
	}
	static class ALExiledNpcArea* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALExiledNpcArea>();
	}
};
DUMPER7_ASSERTS_ALExiledNpcArea;

// Class ProjectP.LLogObjectInterface
// 0x0000 (0x0000 - 0x0000)
class ILLogObjectInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLogObjectInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLogObjectInterface")
	}
	static class ILLogObjectInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILLogObjectInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ILLogObjectInterface;

// Class ProjectP.LExiledNPCSpot
// 0x0008 (0x03F8 - 0x03F0)
class ALExiledNPCSpot final : public ALNPCSpot
{
public:
	class FName                                   ExiledNpcSpot_CodeName;                            // 0x03F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LExiledNPCSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LExiledNPCSpot")
	}
	static class ALExiledNPCSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALExiledNPCSpot>();
	}
};
DUMPER7_ASSERTS_ALExiledNPCSpot;

// Class ProjectP.LExiledNpcSystemData
// 0x00E8 (0x0308 - 0x0220)
class ALExiledNpcSystemData : public AActor
{
public:
	struct FExiledNpcContextInfo                  ContextInfo;                                       // 0x0220(0x00E0)(Edit, EditConst, NativeAccessSpecifierPublic)
	float                                         NextMsgBlockingTime;                               // 0x0300(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LExiledNpcSystemData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LExiledNpcSystemData")
	}
	static class ALExiledNpcSystemData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALExiledNpcSystemData>();
	}
};
DUMPER7_ASSERTS_ALExiledNpcSystemData;

// Class ProjectP.LExiledNpcSystem
// 0x0120 (0x0198 - 0x0078)
class ULExiledNpcSystem final : public ULGameSubSystem
{
public:
	int32                                         NumberOfExiledNpc;                                 // 0x0078(0x0004)(Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExiledNpcContextInfo                  ContextInfo;                                       // 0x0080(0x00E0)(Edit, EditConst, NativeAccessSpecifierPrivate)
	class ALExiledNpcSystemData*                  ExiledNpcSystemData;                               // 0x0160(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLPreloadBox                           PreloadInstance;                                   // 0x0168(0x0030)(Transient, NativeAccessSpecifierPrivate)

public:
	bool MakeNewContextBP();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LExiledNpcSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LExiledNpcSystem")
	}
	static class ULExiledNpcSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULExiledNpcSystem>();
	}
};
DUMPER7_ASSERTS_ULExiledNpcSystem;

// Class ProjectP.LLiftObject
// 0x0018 (0x02B8 - 0x02A0)
class ALLiftObject final : public ALLevelObject
{
public:
	class USceneComponent*                        InteractPositionComp;                              // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELiftObjectType                               LiftObjectType;                                    // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELDoorState                                   LiftDoorState;                                     // 0x02A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELLiftObjectState                             LiftObjectState;                                   // 0x02AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AB[0x1];                                      // 0x02AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AAudioVolume>            AudioVolume;                                       // 0x02AC(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActorBeginOverlapToAudioVolume(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnActorEndOverlapToAudioVolume(class AActor* OverlappedActor, class AActor* OtherActor);
	float PlayInteractMotion();
	void SetDoorState(ELDoorState StateData);
	void SetLiftObjectState(ELLiftObjectState StateData);
	void SetPropLiftState(ELPropLiftStateType StateData);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLiftObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLiftObject")
	}
	static class ALLiftObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALLiftObject>();
	}
};
DUMPER7_ASSERTS_ALLiftObject;

// Class ProjectP.LExplodeSkeletalMeshComponent
// 0x0000 (0x0ED0 - 0x0ED0)
class ULExplodeSkeletalMeshComponent final : public USkeletalMeshComponent
{
public:
	ELExplosionMeshType                           ExplosionMeshType;                                 // 0x0EC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC9[0x7];                                      // 0x0EC9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LExplodeSkeletalMeshComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LExplodeSkeletalMeshComponent")
	}
	static class ULExplodeSkeletalMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULExplodeSkeletalMeshComponent>();
	}
};
DUMPER7_ASSERTS_ULExplodeSkeletalMeshComponent;

// Class ProjectP.LObjectPoolSystemData
// 0x0000 (0x0220 - 0x0220)
class ALObjectPoolSystemData : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LObjectPoolSystemData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LObjectPoolSystemData")
	}
	static class ALObjectPoolSystemData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALObjectPoolSystemData>();
	}
};
DUMPER7_ASSERTS_ALObjectPoolSystemData;

// Class ProjectP.LFrenzyComponent
// 0x0028 (0x00D8 - 0x00B0)
class ULFrenzyComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLFrenzyEffectData>             RemainEffectList;                                  // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x10];                                      // 0x00C8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateFrenzy();
	void DeactivateFrenzy(bool bExhaustAllFrenzyPoint);
	void OnFrenzySkillEnded();
	void OnFrenzySkillUsed();

	bool IsActivated() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LFrenzyComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LFrenzyComponent")
	}
	static class ULFrenzyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULFrenzyComponent>();
	}
};
DUMPER7_ASSERTS_ULFrenzyComponent;

// Class ProjectP.LMaterialVarying
// 0x0048 (0x0070 - 0x0028)
class ULMaterialVarying final : public UObject
{
public:
	TArray<class UMaterialInterface*>             BaseMaterials;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AssetRegistrySearchable, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           MaterialSlotNames;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         TimeScale;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLMaterialVaryingScalar>        ScalarValues;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLMaterialVaryingColor>         ColorValues;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LMaterialVarying")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LMaterialVarying")
	}
	static class ULMaterialVarying* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULMaterialVarying>();
	}
};
DUMPER7_ASSERTS_ULMaterialVarying;

// Class ProjectP.LFXVaryingComponent
// 0x0070 (0x0120 - 0x00B0)
class ULFXVaryingComponent : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class ULMaterialVarying* MaterialVarying, const TArray<class FName>& PlayNames)> OnCompletePlayMaterialVarying; // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x50];                                      // 0x00C0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLMaterialVaryingPlayer>        MaterialVaryings;                                  // 0x0110(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	bool IsPlayingVaryingName(class FName PlayName);
	void PlayVaryingWithMesh(class ULMaterialVarying* MaterialVarying, ELMaterialVaryingPlayType PlayType, class UMeshComponent* MeshComp, bool bResetToDefault, class FName PlayName);
	void PlayVaryingWithMeshes(class ULMaterialVarying* MaterialVarying, ELMaterialVaryingPlayType PlayType, const TArray<class UMeshComponent*>& MeshComps, bool bResetToDefault, class FName PlayName);
	void StopVaryingAll(bool bResetToDefault);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LFXVaryingComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LFXVaryingComponent")
	}
	static class ULFXVaryingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULFXVaryingComponent>();
	}
};
DUMPER7_ASSERTS_ULFXVaryingComponent;

// Class ProjectP.LSequenceRuntimeSetting
// 0x0020 (0x0240 - 0x0220)
class ALSequenceRuntimeSetting final : public AActor
{
public:
	struct FLSequenceRuntimeSettings              RuntimeSetting;                                    // 0x0220(0x0005)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_225[0x3];                                      // 0x0225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool Visible)>                 OnSkipUIControl;                                   // 0x0228(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Cached_PlayerWeaponControl;                        // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Cached_PlayerWeaponOn;                             // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Cached_SkipUIControl;                              // 0x023A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Cached_SkipUIOn;                                   // 0x023B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Cached_EnableSkipSequence;                         // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSequenceRuntimeSetting")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSequenceRuntimeSetting")
	}
	static class ALSequenceRuntimeSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALSequenceRuntimeSetting>();
	}
};
DUMPER7_ASSERTS_ALSequenceRuntimeSetting;

// Class ProjectP.LWeaponFXVaryingComponent
// 0x0010 (0x0130 - 0x0120)
class ULWeaponFXVaryingComponent final : public ULFXVaryingComponent
{
public:
	uint8                                         Pad_120[0x10];                                     // 0x0120(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyMaterialFx(class FName InMaterialFxCodename, class UMeshComponent* MeshComp);
	void RemoveMaterialFx(class FName InMaterialFxCodename, class UMeshComponent* MeshComp);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWeaponFXVaryingComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWeaponFXVaryingComponent")
	}
	static class ULWeaponFXVaryingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWeaponFXVaryingComponent>();
	}
};
DUMPER7_ASSERTS_ULWeaponFXVaryingComponent;

// Class ProjectP.LNPCCharacter
// 0x0700 (0x1340 - 0x0C40)
class ALNPCCharacter : public ALCharacter
{
public:
	bool                                          bResetMovementOnTargetChanged;                     // 0x0C40(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C41[0x3];                                      // 0x0C41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpawnIdleActionGroup;                              // 0x0C44(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PathWayCodeName;                                   // 0x0C4C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveByPathWayOnSpawn;                             // 0x0C54(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerPathWay;                                   // 0x0C55(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFloatingStateOnSpawn : 1;                         // 0x0C56(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFloatingStateCeiling : 1;                         // 0x0C56(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFloatingStateLanding : 1;                         // 0x0C56(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAIPauseOnSpawn : 1;                               // 0x0C56(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSleepOnSpawn : 1;                                 // 0x0C56(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableSenseOnSpawnIdle : 1;                      // 0x0C56(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSeeThroughPC : 1;                                 // 0x0C56(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bImportantNPC : 1;                                 // 0x0C56(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C57[0x1];                                      // 0x0C57(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLAbnormalCodeNameType                 ImmuneAbnormalCodename;                            // 0x0C58(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALNPCController*                        NPCController;                                     // 0x0C60(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULHeadTagComponent*                     HeadTagComponent;                                  // 0x0C68(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MeshOffset;                                        // 0x0C70(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NpcTableID;                                        // 0x0C7C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C84[0x4];                                      // 0x0C84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNPCInfoPtr                            NPCInfo;                                           // 0x0C88(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FNPCStatInfoPtr                        NPCStatInfo;                                       // 0x0C90(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   HitMotionReplaceGroupCodeName;                     // 0x0C98(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLMonsterCameraModifier                MonsterCameraModifier;                             // 0x0CA0(0x0024)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC4[0x4];                                      // 0x0CC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FLMonsterLockOnCameraModifiers> MonsterLockOnCameraModifiers;           // 0x0CC8(0x0050)(Edit, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FLNPCAimToTarget                       AimToTarget;                                       // 0x0D18(0x0028)(Edit, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FloatingStateCeilingCapsuleHalfHeight;             // 0x0D40(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D44[0x8];                                      // 0x0D44(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseMovementDesiredRotation;                       // 0x0D4C(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4D[0x3];                                      // 0x0D4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveToActorAcceptanceRadius;                       // 0x0D50(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PathDirect_OverrideRadius;                         // 0x0D54(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PathDirect_TraceOffsetZ;                           // 0x0D58(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerceptionSight_TraceOffsetZ;                      // 0x0D5C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerceptionSight_AngleOffset;                       // 0x0D60(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NPCDIR_RF_Start;                                   // 0x0D64(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NPCDIR_RB_Start;                                   // 0x0D68(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NPCDIR_BR_Start;                                   // 0x0D6C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NPCDIR_BL_Start;                                   // 0x0D70(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NPCDIR_LB_Start;                                   // 0x0D74(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NPCDIR_LF_Start;                                   // 0x0D78(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NPCDIR_FL_Start;                                   // 0x0D7C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AlwaysExplosiveKill : 1;                           // 0x0D80(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D81[0x3];                                      // 0x0D81(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AlwaysExplosiveKill_SkillHit;                      // 0x0D84(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Explosive_Kill_Power_Light;                        // 0x0D8C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Explosive_Kill_Power_Medium;                       // 0x0D90(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Explosive_Kill_Power_Heavy;                        // 0x0D94(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Explosive_FxSocketNameArray;                       // 0x0D98(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLFatalAttackCounterEnableInfo         FatalAttackCounterEnableInfo;                      // 0x0DA8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   FatalAttack_IndicatorUISocketName;                 // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FatalSocket_LocationPivot_Override;                // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FatalSocket_LookAtTriangle_Bottom_Override;        // 0x0DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FatalSocket_LookAtTriangle_Top_R_Override;         // 0x0DD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FatalSocket_LookAtTriangle_Top_L_Override;         // 0x0DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FatalAttack_EnableHeight_Up;                       // 0x0DE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FatalAttack_EnableHeight_Down;                     // 0x0DEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FatalAttack_CapsuleBackAngle_Start;                // 0x0DF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FatalAttack_CapsuleBackAngle_End;                  // 0x0DF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLFatalAttackInfo                      FatalAttackInfo;                                   // 0x0DF8(0x0054)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FLFatalAttackInfo                      FatalAttackInfo_Add;                               // 0x0E4C(0x0054)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA0[0x8];                                      // 0x0EA0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool IsParalyzeEnable)> OnParalyzeEnable;                          // 0x0EA8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsStarted)> OnGroggy;                                         // 0x0EB8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	float                                         Current_GroggyEnable_Duration;                     // 0x0EC8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Current_GroggyEnable_ElapsedTime;                  // 0x0ECC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cached_GroggyEnableRetainTime;                     // 0x0ED0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdjustGauge_Count_Groggy;                          // 0x0ED4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLGroggyPointAdjustRatio>       Cached_GroggyPointAdjustRatioArray;                // 0x0ED8(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         Cached_GroggyPointAdjustRatioIndex;                // 0x0EE8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EEC[0x4];                                      // 0x0EEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      AdjustDuration_Count_Debuff;                       // 0x0EF0(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ALNPCCharacter* NPCActor, bool IsSleep)> OnSleepState;       // 0x0F40(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnEndSpawnIdle;                                    // 0x0F50(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName AbnormalName, int64 AbnormalUniqueId, bool Visible)> OnVisibleElementalDuration; // 0x0F60(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName AbnormalName, int64 AbnormalUniqueId, bool Visible)> OnVisibleHelpmateAbnormal; // 0x0F70(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class FName                                   Default_ActionGroupCodeName;                       // 0x0F80(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   Phase_ActionGroupCodeName;                         // 0x0F88(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   Floating_ActionGroupCodeName;                      // 0x0F90(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ALNPCSpot>               OwnerNpcSpot;                                      // 0x0F98(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLCharacterExitFunction                ExitFunction;                                      // 0x0FA0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FLSectionRotationSpeed                 SectionRotationSpeed;                              // 0x0FB8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_FC4[0x2F0];                                    // 0x0FC4(0x02F0)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ExecuteDieEvent;                                   // 0x12B4(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ExecuteItemDrop;                                   // 0x12B5(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ExecuteErgoDrop;                                   // 0x12B6(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELHPUIType                                    HPUIType;                                          // 0x12B7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegainHP;                                          // 0x12B8(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RegainHPRecoveryTime;                              // 0x12BC(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C0[0x8];                                     // 0x12C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool IsInCombatState)> DelegateUI_OnChangedCombatState;            // 0x12C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bVisible)> DelegateUI_OnVisibleHeadTag;                       // 0x12D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FLNPCShareData                         NPCShareData;                                      // 0x12E8(0x0050)(Edit, BlueprintVisible, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_1338[0x8];                                     // 0x1338(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangePhase(class FName ActionGroupTableCodeName);
	void DeadCharacterBP();
	void DoExitFunctionRangeDespawn(float Range);
	void DoExitFunctionTimeDespawn(float Time);
	void DoExitFunctionTimeInvisible(float Time);
	void DoExitFunctionTimeLookHide(float Time, class ULMaterialVarying* HideVarying);
	bool HasShareData_Event(class FName EventName);
	void HeadTagBindingBP();
	void HeadTagSettingBP();
	void HeadTagVisibility(bool InVisibility);
	void InitPhase();
	void OnChangePhase(class FName ActionGroupTableCodeName, class FName CommonActionPath, class FName LocomotoinActionPath);
	void OnExitCharacter();
	void OnGroggyOccurred(bool IsStarted);
	void OnRespawnBP();
	void OnSleepStateChanged(bool bSleepState);
	void OnStartAI();
	void OnSwapNPC(class ALNPCCharacter* BeforeNPC, class ALNPCCharacter* AfterNPC);
	void OnWatchActionStateAfterRemove(class ULActMgrComponent* InActMgrComponent, class FName ActionState, bool IsPair);
	void OnWatchActionStateBeforeAdd(class ULActMgrComponent* InActMgrComponent, class FName ActionState, bool IsPair);
	class ULActBase* PlayAction_CommonMontage(class FName CommonMontageCodeName);
	class ULActBase* PlayAction_RotationToAngle(float YawAngle);
	class ULActBase* PlayAction_RotationToHome();
	class ULActBase* PlayAction_RotationToTarget(float Cooltime, float PlaySpeed);
	class ULActBase* PlayAction_SpawnIdle();
	class ULActBase* PlayAction_TalkerIdle();
	class ULActBase* PlaySkill(class FName SkillCodeName);
	void SetCombatStateBP(bool bCombatState);
	void SetGroggyPointAdjustRatio(const TArray<struct FLGroggyPointAdjustRatio>& Override);
	void SetScarecrow(const class FString& Command);
	void SetShareData_Event(class FName EventName);
	void SetVisibleHPBar(bool IsVisible);
	void StartExitNPCFunctions();
	void StopAction_SpawnIdle();
	void SwapNpc(const class FName& NPCCodeName, const struct FVector& SpawnOffset, bool bInheritHP, bool bForceSpawn, bool bResetSwapAtRespawn, bool bSpawnOnSpot);
	bool TryGroggy(int32 ConsumePoint, bool CheckOnly);
	bool TryGroggyEnableTimeAdd(float Time);
	bool TrySuppressGroggy();

	bool CheckHitRepulse(ELPhysicalDamageType InPhyscialDamageType, int32 InAttackRepulseLevel) const;
	bool CheckPartsHitRepulse(ELPhysicalDamageType InPhyscialDamageType, int32 InAttackRepulseLevel, class FName HitPartsName) const;
	float GetMoveSpeed() const;
	class FName GetNPCInfoActionGroupCodeName() const;
	float GetScaledFloatingStateCeilingCapsuleHalfHeight() const;
	float GetSightDistance() const;
	float GetTargetDetectRange() const;
	bool IsCombatState() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LNPCCharacter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LNPCCharacter")
	}
	static class ALNPCCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALNPCCharacter>();
	}
};
DUMPER7_ASSERTS_ALNPCCharacter;

// Class ProjectP.LManagedNiagaraComponent
// 0x0010 (0x0610 - 0x0600)
class ULManagedNiagaraComponent final : public UNiagaraComponent
{
public:
	ELManagedNiagaraUsage                         Usage;                                             // 0x0600(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_601[0xF];                                      // 0x0601(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LManagedNiagaraComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LManagedNiagaraComponent")
	}
	static class ULManagedNiagaraComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULManagedNiagaraComponent>();
	}
};
DUMPER7_ASSERTS_ULManagedNiagaraComponent;

// Class ProjectP.LFXComponent
// 0x0160 (0x0210 - 0x00B0)
class ULFXComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class ULMaterialVarying* MaterialVarying, const TArray<class FName>& PlayNames)> OnCompletePlayMaterialVarying; // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName PlayerName)> OnCompletePlayMaterialParam;              // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bUseResetToDefaultMaterial;                        // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D1[0x57];                                      // 0x00D1(0x0057)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLMaterialVaryingPlayer>        MaterialVaryings;                                  // 0x0128(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_138[0x10];                                     // 0x0138(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLFXTrailEmitter>               TrailList;                                         // 0x0148(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<TWeakObjectPtr<class UNiagaraComponent>, float> DelayDeactiveSystemList;                    // 0x0158(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A8[0x8];                                      // 0x01A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULMaterialVarying*                      DissolveVarying;                                   // 0x01B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B8[0x58];                                     // 0x01B8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DelayDeactiveSystem(class UNiagaraComponent* NiagaraComponent, float DelayTime);
	void FXCommand_DeactiveTime(const TArray<class UFXSystemComponent*>& FXs, float DeactiveTime);
	void FXCommand_DoEvent(ELFXCommandEventType Type);
	void FXCommands_DeactiveEvent(const TArray<class UFXSystemComponent*>& FXs, ELFXCommandEventType Type);
	void HideManagedNiagaraComponents(bool bHide);
	bool IsPlayingVaryingName(class FName PlayName);
	void PlayDeadHide(bool bDissolveEffect);
	void PlayElementPartsHitFX(class UNiagaraSystem* System, const struct FVector& HitLocation);
	void PlayHide(bool bDissolveEffect, class ULMaterialVarying* HideVarying, const class FName VaryingName);
	void PlayHitRegionFX(const struct FLHitFXPlayData& HitFXPlayData);
	void PlayMaterialParamScalar(class FName PlayerName, const TArray<class UMaterialInterface*>& Materials, const TArray<struct FLMaterialParamScalar>& Scalar);
	void PlayMaterialParamScalarSingle(class FName PlayerName, const TArray<class UMaterialInterface*>& Materials, const struct FLMaterialParamScalar& Scalar);
	void PlayMaterialVaryingValues(const TArray<struct FLMaterialVaryingScalar>& ScalarValues, const TArray<struct FLMaterialVaryingColor>& ColorValues, ELMaterialVaryingPlayType PlayType, const TArray<class UMeshComponent*>& MeshComponents, class FName PlayName);
	void PlayMaterialVaryingWithMesh(class ULMaterialVarying* MaterialVarying, ELMaterialVaryingPlayType PlayType, class UMeshComponent* MeshComp, class FName PlayName);
	void PlayMaterialVaryingWithMeshes(class ULMaterialVarying* MaterialVarying, ELMaterialVaryingPlayType PlayType, const TArray<class UMeshComponent*>& MeshComps, class FName PlayName);
	void PlayTrail(class UObject* Instigator, class UParticleSystem* PSTemplate, class FName FirstSocketName, class FName SecondSocketName);
	void ResetToDefaultMaterial();
	void SetUseResetToDefaultMaterial(bool bEnable);
	void StartSplashBloodFX(class ALCharacter* Attacker, class ALWeapon* AttackerWeapon, ELBloodEffectType BloodType, float AttackerStiffenDurationTime);
	void StopHide(bool bDissolveEffect);
	void StopMaterialParam(class FName PlayerName);
	void StopMaterialVarying(class ULMaterialVarying* MaterialVarying);
	void StopMaterialVaryingAll(bool ResetToDefault);
	void StopSplashBloodFX();
	void StopTrail(class UObject* Instigator, float ReserveStopTime);

	bool IsHide() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LFXComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LFXComponent")
	}
	static class ULFXComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULFXComponent>();
	}
};
DUMPER7_ASSERTS_ULFXComponent;

// Class ProjectP.LFXSystemData
// 0x0010 (0x0230 - 0x0220)
class ALFXSystemData : public AActor
{
public:
	bool                                          Enable_FootStepFX;                                 // 0x0220(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x3];                                      // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GroundFX_RayStartHeight;                           // 0x0224(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundFX_RayEndHeight;                             // 0x0228(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FLAttachedEffectSet ActiveFuryAttack(class ALNPCCharacter* InTarget, bool bActive);
	TSoftObjectPtr<class ULMaterialVarying> GetWeaponMaterialVarying(class FName MaterialFxCodename);
	class UNiagaraSystem* GetWeaponTrailElementFX(class FName ElementFXCodename);
	void OnBeginTalk();
	struct FLAttachedEffectSet OnBuffEffect(class AActor* Actor, class FName EventName, ELPhysicalSurfaceType PhysicalSurface, class FName AttachedSocketName);
	void OnDisappear(class ALCharacter* Character);
	void OnEndTalk();
	void OnFrenzyModeMV(class ALCharacter* InTarget, bool bFrenzyMode);
	void OnParalyzationOcurred(class AActor* Victim);
	void OnPulseRecharged();
	void OnTorsionCoilPostProcess();
	void OnWeaponBladeDestroyEffect(const struct FVector& Location);
	void PlayHitEffect(const struct FLHitFXPlayData& HitFXPlayData);
	void PlaySocketTracerHitEffect_FX(class FName EventName, const struct FTransform& HitTransform, ELPhysicalSurfaceType AttackerPhysicalSurface, ELPhysicalSurfaceType GroundPhysicalSurface);
	void PlaySocketTracerHitEffect_SFX(class FName EventName, const struct FTransform& HitTransform, ELPhysicalSurfaceType AttackerPhysicalSurface, ELPhysicalSurfaceType GroundPhysicalSurface);
	void SetBloodOnOff(bool bOnOff);
	void SetFatalIndicatorState(class FName IndicatorKey, class ALCharacter* TargetActor, ELFatalIndicatorState PrevState, ELFatalIndicatorState CurrentState, const struct FTransform& FxTransform);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LFXSystemData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LFXSystemData")
	}
	static class ALFXSystemData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALFXSystemData>();
	}
};
DUMPER7_ASSERTS_ALFXSystemData;

// Class ProjectP.LSubOption
// 0x0020 (0x0048 - 0x0028)
class ULSubOption : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ALOptionSystemData*                     SystemData;                                        // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULOptionSaveGame*                       SaveGame;                                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ResetToDefault();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSubOption")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSubOption")
	}
	static class ULSubOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSubOption>();
	}
};
DUMPER7_ASSERTS_ULSubOption;

// Class ProjectP.LGamePadOption
// 0x0018 (0x0060 - 0x0048)
class ULGamePadOption final : public ULSubOption
{
public:
	uint8                                         Pad_48[0x18];                                      // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetDeadZoneStep(bool LeftStick);
	int32 GetForceFeedbackStep();
	int32 GetMoveSpeedStep(ECameraDirectOption InRotator);
	bool IsInvertMove(ECameraDirectOption InRotator);
	void ResetEditedInputAction();
	bool SetDeadZoneStep(bool LeftStick, int32 InStep);
	bool SetForceFeedbackStep(int32 InStep);
	bool SetInvertMove(ECameraDirectOption InRotator, bool InInvert);
	bool SetMoveSpeedStep(ECameraDirectOption InRotator, int32 InStep);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGamePadOption")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGamePadOption")
	}
	static class ULGamePadOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULGamePadOption>();
	}
};
DUMPER7_ASSERTS_ULGamePadOption;

// Class ProjectP.LGallerySystemData
// 0x0000 (0x0220 - 0x0220)
class ALGallerySystemData : public AActor
{
public:
	class AActor* GetSpawned();
	void Spawn(const class FName& CodeName, const struct FVector& InLocation, class ACineCameraActor* InPreviewCam, float InPreviewCam_OriginZ);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGallerySystemData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGallerySystemData")
	}
	static class ALGallerySystemData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALGallerySystemData>();
	}
};
DUMPER7_ASSERTS_ALGallerySystemData;

// Class ProjectP.LGallerySystem
// 0x0040 (0x00B8 - 0x0078)
class ULGallerySystem final : public ULGameSubSystem
{
public:
	uint8                                         Pad_78[0x10];                                      // 0x0078(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ALGallerySystemData*                    SystemData;                                        // 0x0088(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLGalleryAssetTable                    GalleryAssetTable;                                 // 0x0090(0x0008)(Transient, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName CodeName)> OnAcquireRecollection;                      // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* SpawnActor)> OnSuccessSpawnModel;                    // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	struct FLGalleryAssetTableRowType GetRecollectionAssetInfo(const class FName& CodeName);
	TArray<struct FLDiplayableGallery> GetRecollections();
	class AActor* GetSpawnedModel();
	void SpawnModel(const class FName& CodeName, const struct FVector& InLocation, class ACineCameraActor* InPreviewCam, float InPreviewCam_OriginZ);
	void SuccessSpawnModel(class AActor* InSpawnModel);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGallerySystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGallerySystem")
	}
	static class ULGallerySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULGallerySystem>();
	}
};
DUMPER7_ASSERTS_ULGallerySystem;

// Class ProjectP.LRecordCameraData
// 0x0020 (0x0048 - 0x0028)
class ULRecordCameraData final : public UObject
{
public:
	float                                         FrameRate;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTime;                                           // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleElapsedTime;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLRecordCameraFrame>            Frames;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void GetSampleFrame(float FlowTime, struct FVector* Location, struct FRotator* Rotation);
	void SampleFrame(float DeltaTime, const struct FVector& Location, const struct FRotator& Rotation);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LRecordCameraData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LRecordCameraData")
	}
	static class ULRecordCameraData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULRecordCameraData>();
	}
};
DUMPER7_ASSERTS_ULRecordCameraData;

// Class ProjectP.LPCCharacter
// 0x01B0 (0x0DF0 - 0x0C40)
class ALPCCharacter : public ALCharacter
{
public:
	struct FDefaultStatInfoPtr                    DefaultStatInfo;                                   // 0x0C40(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FPNPlayerData                          PlayerData;                                        // 0x0C48(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class ALWeapon*                               CurrWeapon;                                        // 0x0C90(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CurrWeaponIndex;                                   // 0x0C98(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockonLeftRightMaxSpeed;                           // 0x0C9C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockonBackMaxSpeed;                                // 0x0CA0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalMaxSpeed;                                    // 0x0CA4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackAttack_EnableDegree;                           // 0x0CA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CAC[0x4];                                      // 0x0CAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           WeaponLists;                                       // 0x0CB0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class FName>                           WeaponNameLists;                                   // 0x0CC0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD0[0x2];                                      // 0x0CD0(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UpperBodyLookat_AlwaysActive;                      // 0x0CD2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD3[0x45];                                     // 0x0CD3(0x0045)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLFirstStatData>                FirstStatDataList;                                 // 0x0D18(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	class ULCharacterSaveGame*                    PlayingGameData;                                   // 0x0D28(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D30[0x18];                                     // 0x0D30(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle_ShowLocationMsg;                       // 0x0D48(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ULSequenceActorData>     AppearanceSequenceActorData;                       // 0x0D50(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FootPrintInterval;                                 // 0x0D58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D5C[0x6C];                                     // 0x0D5C(0x006C)(Fixing Size After Last Property [ Dumper-7 ])
	class ALStatRoomPCCharacter*                  CachedStatRoomPC;                                  // 0x0DC8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD0[0x20];                                     // 0x0DD0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AttachPCLamp();
	void AttachRainHitSound(ELPhysicalSurfaceType InPhysicalSurface, const struct FVector& InLocation, float InRainIntensity, bool IsPCHit);
	void ConsumeFrenzyPoint(int32 InAmount, ELFrenzyConsumeReason ConsumeReason);
	bool ConsumeSlaveMagazinePoint(int32 ConsumeAmount, int32 RequirementAmount);
	int32 ConvertFrenzyUnitCountToFrenzyPoint(int32 FrenzyUnitCount);
	void EndAction_GameStart();
	void EndAction_TeleportEnd();
	void Execute_ShowLocationMsg(bool Teleport);
	void ExecuteAction_GameStart();
	void ExecuteAction_Reconnect();
	void ExecuteAction_TeleportEnd_Normal();
	void ExecuteAction_TeleportStart(class FName TeleportTorsionCoil);
	void ExecuteAppearanceProcessEnd();
	void GainFrenzyPoint(int32 InAmount);
	int32 GetCurrentFrenzyUnitCount();
	class ULStatComponent* GetDefaultStatComponent(class FName DefalutStatName);
	struct FWeightPenaltyInfoPtr GetWeightPenalty();
	struct FWeightPenaltyInfoPtr GetWeightPenaltyInGivenMaxWeight(int32 InMaxWeight);
	void InitialOverlapUpdate();
	bool IsFrenzyActivated();
	bool IsStaminaChangeStatus();
	void OnAlertLamp(float DurationTime);
	void OnBackToHotelTorsionCoil(bool UseItem);
	void OnBackToLatestTorsionCoil(bool UseItem);
	void OnClosedLevelUpOrPOrgan(class FName WidgetTableName);
	void OnDialogLampOff();
	void OnDialogLampOn();
	void OnFinishedIntroSequenceActor();
	void OnFinishedPortalSequenceActor();
	void OnFrenzyModeMV(bool bFrenzyMode, bool bInstant);
	void OnGainExp(int32 InExp);
	void OnGainHumanity(int32 InHumanity);
	void OnGainItem(class FName ItemId, int32 ItemCount);
	void OnGainWeapon(const class FName& Handle, const class FName& Blade);
	void OnGameDataCharacterSync(class ULCharacterSaveGame* CharacterSaveGame, bool bLoad);
	void OnInitMainUI(class FName MainStateName);
	void OnMustBeEqualStatsKeepSamed(ELSecondStat StatType);
	void OnPlayIntroSequenceActor();
	void OnReadyHUD();
	void OnUIConfirmTeleport(class FName TeleportTorsionCoil);
	void OnUseItemBP(class FName ItemId, bool IsOn);
	void OnWatchActionStateAfterRemove(class ULActMgrComponent* InActMgrComponent, class FName ActionState, bool IsPair);
	void OnWatchActionStateBeforeAdd(class ULActMgrComponent* InActMgrComponent, class FName ActionState, bool IsPair);
	void ProcessBeginPlayBP();
	void RemoveRainHitSound();
	bool RequestResetAllFirstStat();
	void SelectDefaultStat(class FName DefaultStatCodeName);
	void ShowUIMsgYouDie();
	void UIActiveLevelUpWidget(bool IsActive);
	void UIChangeFirstStat(ELFirstStat FirstStat, int32 ChangeData);
	void UIConfirmCharacterStat();

	bool CheckCanChangeFirstStat(ELFirstStat FirstStat, int32 ChangeData, int32* OutErrorCode) const;
	class FName GetCurrentWeaponName() const;
	int32 GetFirstStat(ELFirstStatDataType DataType, ELFirstStat StatType) const;
	class UMeshComponent* GetLampMesh() const;
	int32 GetMaxWeaponCount() const;
	int32 GetWeaponIndex() const;
	bool IsProtectErgoDrop() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPCCharacter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPCCharacter")
	}
	static class ALPCCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPCCharacter>();
	}
};
DUMPER7_ASSERTS_ALPCCharacter;

// Class ProjectP.LPropActor
// 0x0010 (0x0260 - 0x0250)
class ALPropActor : public ALInteractActor
{
public:
	TWeakObjectPtr<class ULPropComponent>         PropComponent;                                     // 0x0250(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0258(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropActor")
	}
	static class ALPropActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPropActor>();
	}
};
DUMPER7_ASSERTS_ALPropActor;

// Class ProjectP.LProjectilePropActor
// 0x0020 (0x0280 - 0x0260)
class ALProjectilePropActor final : public ALPropActor
{
public:
	TArray<struct FLProjectilePropSpawnParameter> ProjectileList;                                    // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ULSpotProjectileSpawn_PeriodicHandler*> SpawnHandlerList;                           // 0x0270(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectilePropActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectilePropActor")
	}
	static class ALProjectilePropActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALProjectilePropActor>();
	}
};
DUMPER7_ASSERTS_ALProjectilePropActor;

// Class ProjectP.LCommonConstantValues
// 0x00F0 (0x0118 - 0x0028)
class ULCommonConstantValues final : public UObject
{
public:
	TMap<class FName, int32>                      IntValues;                                         // 0x0028(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FName, float>                      FloatValues;                                       // 0x0078(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class FName>                NameVlaues;                                        // 0x00C8(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	float GetAbnormalStateBuildUpRecover();
	int32 GetAbnormalStateBuildUpRecoverDelay();
	int32 GetAbnormalStateBuildupRecoverRate();
	int32 GetAbnormalStateBuildupRecoverWait();
	int32 GetAbnormalStatePenaltyBase();
	float GetAbnormalStatePenaltyExponent();
	class FName GetAfterEndingCookieMovie();
	float GetAggro_Target_Range();
	int32 GetASZombieHPSet();
	float GetAttackDefenceAdd();
	float GetAttackDefenceExponent();
	float GetAttackDefenceScale();
	float GetAttackScale();
	int32 GetAttackSpeedRatioMax();
	int32 GetAttackSpeedRatioMin();
	class FName GetBladeElementAttackBuff_Acid();
	class FName GetBladeElementAttackBuff_Electric();
	class FName GetBladeElementAttackBuff_Fire();
	int32 GetBladeNeedStatLackAtkRatio();
	int32 GetBladeNeedStatLackDestructionRatio();
	int32 GetBladeNeedStatLackStaminaRatio();
	class FName GetBossRoom_Ergodrop_relocation_check_state();
	int32 GetBuildUpRecoverIncBase();
	float GetBuildUpRecoverIncExponent();
	int32 GetCatDustEffectRange();
	int32 GetCatDustRangeDecreaseRatio();
	int32 GetCatDustSensitiveDecreaseTime();
	class FName GetCH06BossKill();
	class FName GetConsumeReturnClockBlockCondition();
	class FName GetConsumeReturnClockBlockMsg();
	class FName GetCopper2setAbnormalState();
	class FName GetCopper3setAbnormalState();
	int32 GetDashParryCooltime();
	float GetDefenceFactor();
	float GetDefenceScale();
	int32 GetDialogInputTerm();
	float GetDialogNextSpeed();
	int32 GetDialogVoiceTermTime();
	class FName GetDoorKeyFail();
	class FName GetDoorKeySuccess();
	int32 GetDropErgoExchangeRate();
	float GetElementalAbStateBuildUpRecover();
	int32 GetElementalAbStateBuildUpRecoverDelay();
	int32 GetExiledNpcWarningMsgDelay();
	class FName GetFrenzyAbnormalCodeName();
	int32 GetFrenzyPointMax();
	int32 GetGoldenTreeAccelTimes();
	int32 GetGoldenTreeHarvestFirst();
	class FName GetGoldenTreeHarvestItem();
	int32 GetGoldenTreeHarvestItemNum();
	TArray<class FString> GetGoldenTreePropUniqueId();
	int32 GetGoldenTreeTimeToHarvesting();
	int32 GetGoldStackLimit();
	TSoftObjectPtr<class USoundAttenuation> GetGramophoneAttenuationAsset();
	int32 GetGuardParryCooltime();
	class FName GetHandleCorrectChangeCodeName_Advance();
	class FName GetHandleCorrectChangeCodeName_Clear();
	class FName GetHandleCorrectChangeCodeName_Motifvity();
	class FName GetHandleCorrectChangeCodeName_Technique();
	int32 GetHandleCorrectionChange_UnderLimit();
	int32 GetHandleCorrectionChange_UpperStackLimit();
	int32 GetHandleNeedStatLackAtkRatio();
	int32 GetHandleNeedStatLackGuardSaveStaminaRatio();
	class FName GetHelpMateAwakeItem();
	class FName GetHelpMateDespawnWorldTrigger();
	class FName GetHelpMateFailMsg();
	class FName GetHelpMateSuccessMsg();
	class FName GetHitBoom_Projectile_Code_Name();
	class FName GetHotelTeleportActivateCondition1();
	class FName GetHotelTeleportActivateCondition2();
	class FName GetHotelTosionCoilCodeName();
	class FName GetHotelTosionCoilCodeName2();
	int32 GetHumanityGain_HighStart();
	class FName GetHumanityGainSkill_High();
	class FName GetHumanityGainSkill_Low();
	int32 GetHumanityMax();
	class FName GetInitWeatherCodeName();
	class FName GetIntroSequenceCodeName();
	int32 GetItemValueGradeCheck();
	class FName GetLevelResetNeedItem();
	int32 GetLevelResetNeedItemNum();
	class FName GetLieEffectSequenceCodeName();
	bool GetLockerRefillMsgOn();
	int32 GetMaxLevelStationStargazer();
	class FName GetMaxLevelStationStargazerCondition();
	class FName GetMonadBuffMainItem();
	int32 GetMonologueRepeatTime();
	class FName GetMoviePOrganOpen();
	int32 GetNpcMenuOpenDelay();
	class FName GetOpeningMovieCodeName();
	class FName GetPCActionTypeBld1();
	class FName GetPCActionTypeBld2();
	class FName GetPCActionTypeBld3();
	class FName GetPCActionTypeHnd1();
	class FName GetPCActionTypeHnd2();
	class FName GetPCActionTypeHnd3();
	class FName GetPCActionTypeStat1();
	class FName GetPCActionTypeStat2();
	class FName GetPCActionTypeStat3();
	int32 GetPCDialogMinTurnAngle();
	int32 GetPCDialogRotateTime();
	class FName GetPCInitializeSet1();
	class FName GetPCInitializeSet2();
	class FName GetPCInitializeSet3();
	class FName GetPCInitializeSet_Factory1();
	class FName GetPCInitializeSet_Factory2();
	class FName GetPCInitializeSet_Factory3();
	float GetPlayRateExponentOver();
	float GetPlayRateExponentUnder();
	int32 GetPlayRecordCheckTime();
	int32 GetPSystemLevel2RequiredSynergyCount();
	int32 GetPSystemLevel3RequiredSynergyCount();
	int32 GetPSystemLevel4RequiredSynergyCount();
	int32 GetPSystemLevel5RequiredSynergyCount();
	int32 GetPSystemLevel6RequiredSynergyCount();
	int32 GetPSystemLevel7RequiredSynergyCount();
	int32 GetPSystemLevelLimitNewGamePlus0();
	int32 GetPSystemLevelLimitNewGamePlus1();
	int32 GetPSystemLevelLimitNewGamePlus2();
	int32 GetPSystemMaxLevel();
	class FName GetPulseItemBuffCodenameOnBreaked();
	class FName GetPulseItemCodeName();
	class FName GetQuartzItemCodeName();
	class FName GetQuartzSystemLevelUpItemCodeName();
	class FName GetQuartzSystemResetItemCodeName();
	int32 GetQuartzSystemResetItemNum();
	int32 GetReduceFPOnFrenzy();
	int32 GetReduceFPOnFrenzyInterval();
	int32 GetRegainhpMakeRatio();
	bool GetResetItemSlotPosition();
	class FName GetResurrection_Abnormal_Code_Name();
	int32 GetSellingPriceRatio();
	int32 GetSharpnessBadAttackMod();
	int32 GetSharpnessBadDestructionMod();
	int32 GetSharpnessBrokenAttackMod();
	int32 GetSharpnessBrokenDestructionMod();
	int32 GetSharpnessFineAttackMod();
	int32 GetSharpnessFineDestructionMod();
	int32 GetSharpnessNormalAttackMod();
	int32 GetSharpnessNormalDestructionMod();
	int32 GetSharpnessReduceValue();
	float GetSkillHitDefenceExponent();
	class FName GetSlavearmItemAlterUseType();
	class FName GetSlaveArmReinforcementResetItemCodeName();
	int32 GetSlaveArmReinforcementResetItemNum();
	int32 GetSprintExhaustTime();
	int32 GetSprintSpeedRatioMax();
	int32 GetSprintSpeedRatioMin();
	float GetStaminaConsumeRatioExponentOver();
	float GetStaminaConsumeRatioExponentUnder();
	class FName GetStealthAbnormalCodeName();
	int32 GetSwapNPCDefaultHPRate();
	int32 GetTalkerDialogRotateTime();
	class FName GetTalkerTurnLAnim();
	class FName GetTalkerTurnRAnim();
	class FName GetTeleporStartSequenceCodeName();
	class FName GetTeleportEndSequenceCodeName();
	class FName GetTeleportObjectForNGPDelay();
	class FName GetTeleportObjectForNGPStart();
	bool GetTorsionCoilSetFullSlaveMagazine();
	class FName GetTungsten2setAbnormalState();
	class FName GetTungsten3setAbnormalState();
	int32 GetTutorialPendingLimit();
	float GetTutorialPendingTime();
	class FName GetUniqueGrinderMainItem();
	class FName GetUranium2setAbnormalState();
	class FName GetUranium3setAbnormalState();
	class FName GetVibranium2setAbnormalState();
	class FName GetVibranium3setAbnormalState();
	int32 GetWalkRunSpeedRatioMax();
	int32 GetWalkRunSpeedRatioMin();
	int32 GetWeaponPhysicalAttackpowerFatalWeight();
	float GetWeightLimitOverAllowRatio();
	class FName GetWood2setAbnormalState();
	class FName GetWood3setAbnormalState();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCommonConstantValues")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCommonConstantValues")
	}
	static class ULCommonConstantValues* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULCommonConstantValues>();
	}
};
DUMPER7_ASSERTS_ULCommonConstantValues;

// Class ProjectP.LGameDataSystem
// 0x0148 (0x01C0 - 0x0078)
class ULGameDataSystem final : public ULGameSubSystem
{
public:
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           AutoSaveTimerHandle;                               // 0x0080(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AutoSaveDelayTime;                                 // 0x0088(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULAccountSaveGame*                      AccountSaveGame;                                   // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULCharacterSaveGame*                    CharacterSaveGame;                                 // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A0[0x28];                                      // 0x00A0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLGameDataExecute>              GameDataExecuteList;                               // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<ELGameDataType>                        AsyncSaveExecutionList;                            // 0x00D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<ELGameDataType>                        AsyncLoadExecutionList;                            // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<int32, struct FLTeleportLocationChapter> TeleportLocationMap;                               // 0x00F8(0x0050)(NativeAccessSpecifierPrivate)
	bool                                          DebugLog;                                          // 0x0148(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InitAcquisitionSoul;                               // 0x014C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 EULA_Version;                                      // 0x0150(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULCommonConstantValues*                 CommonConstantValues;                              // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULObjectDataDB*                         ObjectDataDB;                                      // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_170[0x38];                                     // 0x0170(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class FName VariableName, int32 Value)> OnGlobalVariableChanged;   // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddPlayedRecord(const class FName& RecordName);
	void CalcTeleportList();
	void CheckAutoSave();
	void ContinueCharacterStorageData();
	void DeleteCharacterStorageData(const class FString& DeleteName);
	class FString GetAccountEULAVersion();
	TArray<int32> GetCategoryList();
	int32 GetCharacterLevel();
	class FString GetCharacterName();
	class FString GetCharacterStoragePlayTime(const class FString& FindName);
	class FString GetCharacterStorageSaveDateTime(const struct FDateTime& InDateTime);
	class ULCommonConstantValues* GetConstantValues();
	int32 GetCurrentErgo();
	class FName GetCurrentHotelTosionCoil();
	int32 GetCurrentHumanity();
	int32 GetCurrentNewGamePlus();
	class FName GetDepartureTeleportObject();
	int32 GetDropErgo();
	class FString GetEULAVersion();
	int32 GetForceStartChapter();
	int32 GetGlobalVariableData(const class FName& InCodeName);
	ELHairCategoryType GetHairCategoryType();
	int32 GetHumanityLevel();
	float GetHumanityRatio();
	class FName GetLatestTorsionCoil();
	int32 GetLevelUpRequireErgo(int32 CheckLevel);
	int32 GetMaxLevelUpCount();
	bool GetNewGamePlusProcess();
	int32 GetNextLevelUpRequireSoul();
	struct FTransform GetPlayerTeleportTransform(ELSpawnTransformType* outSpawnTransformType);
	int32 GetRemainSoul(int32 LevelUpCount);
	bool GetSaveData(TArray<struct FLCharacterStorageData>* outCharacterList);
	bool GetTeleportList(int32 CategoryIndex, TArray<struct FLTeleportLocation>* outTeleportLocationList);
	class FName GetWeatherCodeName();
	bool IsHiddenConditionTeleportToHotel();
	bool IsLastPlayCharacter(const class FString& FindName);
	bool IsNormalShutDown();
	bool IsPossibleTeleportToHotel();
	bool IsValidLastPlayCharacter();
	bool IsValidPlayerTeleportTransform(struct FTransform* OutTransform);
	bool IsValidStarterPackContinueCharacter();
	bool IsValidStarterPackSelectCharacter(const class FString& SelectName);
	bool IsValidTeleportTransformByType(ELSpawnTransformType FindType, struct FTransform* OutTransform);
	void LoadContinueCharacterStorageData();
	void LoadSelectCharacterStorageData(const class FString& SelectName);
	void NewCharacterStorageData(int32 StartChapter);
	void NewGamePlusToPlayStart();
	class ULObjectDataDB* ObjDataDB();
	void OnLoadGameDataInGame(const class FString& SlotName, bool bSuccess, ELGameDataType GameDataType, class ULSaveGame* SaveGame);
	void OnLoadGameDataLobby(const class FString& SlotName, bool bSuccess, ELGameDataType GameDataType, class ULSaveGame* SaveGame);
	void OnResultEULA(bool InAgree);
	void OnSaveGameDataInGame(const class FString& SlotName, bool bSuccess, ELGameDataType GameDataType);
	void OnSaveGameDataLobby(const class FString& SlotName, bool bSuccess, ELGameDataType GameDataType);
	void RestoreCharacterStorageData(int32 StartChapter);
	void SaveGameDataFromUI(bool IsAsyncSave, bool NormalShutDown);
	void SelectCharacterStorageData(const class FString& SelectName);
	void SetPlayerSpawnFailedMessage(const class FString& InMessage);

	bool GetAccountOpenedRecollection() const;
	class FString GetAccountPlayTime() const;
	bool GetAccountShowEndingCredit() const;
	int32 GetDeathCount() const;
	class FString GetPlayTime() const;
	int32 GetReceiveDamage() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGameDataSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGameDataSystem")
	}
	static class ULGameDataSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULGameDataSystem>();
	}
};
DUMPER7_ASSERTS_ULGameDataSystem;

// Class ProjectP.LPhysicalAnimationComponent
// 0x0208 (0x02B8 - 0x00B0)
class ULPhysicalAnimationComponent final : public UActorComponent
{
public:
	ELPhysicsState                                CurrentState;                                      // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Cached_RagdollStartTime;                           // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class USkeletalMeshComponent>  PendingInfo_SkeletalMeshComponent;                 // 0x00C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PendingInfo_FromBeginPlay;                         // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ELPhysicsState>                        PendingStateArray;                                 // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	struct FLPhysicsInfo_NoPhysics                PendingInfo_NoPhysics;                             // 0x00E0(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLPhysicsInfo_PhysicalAnimation        PendingInfo_PhysicalAnimation;                     // 0x00E1(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLPhysicsInfo_RagDoll                  PendingInfo_RagDoll;                               // 0x00E2(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3[0x5];                                       // 0x00E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLPhysicsInfo_Explosion                PendingInfo_Explosion;                             // 0x00E8(0x01C8)(Edit, Transient, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FLPhysicsInfo_PhysicsAsset             PendingInfo_PhysicsAsset;                          // 0x02B0(0x0008)(Edit, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	static bool GetUseRagdollSleepAndWake();

	bool ChangePhysicsAssetBP(const struct FLPhysicsInfo_PhysicsAsset& PhysicsInfo, EExecutePin* Branches);
	bool ChangeToExplosionBP(const struct FLPhysicsInfo_Explosion& PhysicsInfo, EExecutePin* Branches);
	bool ChangeToNoPhysicsBP(const struct FLPhysicsInfo_NoPhysics& PhysicsInfo, EExecutePin* Branches);
	bool ChangeToPhysicalAnimationBP(const struct FLPhysicsInfo_PhysicalAnimation& PhysicsInfo, EExecutePin* Branches);
	bool ChangeToRagdollBP(const struct FLPhysicsInfo_RagDoll& PhysicsInfo, EExecutePin* Branches);
	bool ChangeToRagdollFreezeBP(EExecutePin* Branches);
	void Debug_BindRagdollOverlapWake();
	void Debug_UnbindRagdollOverlapWake();
	class USkeletalMeshComponent* GetSkeletalMeshComponentBP(EExecutePin* Branches);
	struct FLPhysicsInfo_Explosion MakeExplosionInfo(class AActor* TargetActor, class AActor* Murderer, const struct FLHitInfo& HitInfo);
	bool OnChangePhysicsAssetBP(const struct FLPhysicsInfo_PhysicsAsset& PhysicsInfo);
	bool OnChangeToExplosionBP(const struct FLPhysicsInfo_Explosion& PhysicsInfo);
	bool OnChangeToNoPhysicsBP(const struct FLPhysicsInfo_NoPhysics& PhysicsInfo);
	bool OnChangeToPhysicalAnimationBP(const struct FLPhysicsInfo_PhysicalAnimation& PhysicsInfo);
	bool OnChangeToRagdollBP(const struct FLPhysicsInfo_RagDoll& PhysicsInfo);
	bool OnChangeToRagdollFreezeBP();
	void OnResetBP(class USkeletalMeshComponent* InSkeletalMeshComponent);
	void PutAllRigidBodiesToSleep();
	bool ReserveChangePhysicsAssetBP(const struct FLPhysicsInfo_PhysicsAsset& PhysicsInfo, EExecutePin* Branches);
	bool ReserveChangeToExplosionBP(const struct FLPhysicsInfo_Explosion& PhysicsInfo, EExecutePin* Branches);
	bool ReserveChangeToNoPhysicsBP(const struct FLPhysicsInfo_NoPhysics& PhysicsInfo, EExecutePin* Branches);
	bool ReserveChangeToPhysicalAnimationBP(const struct FLPhysicsInfo_PhysicalAnimation& PhysicsInfo, EExecutePin* Branches);
	bool ReserveChangeToRagdollBP(const struct FLPhysicsInfo_RagDoll& PhysicsInfo, EExecutePin* Branches);
	bool ReserveChangeToRagdollFreezeBP(EExecutePin* Branches);
	bool ReserveResetBP(class USkeletalMeshComponent* InSkeletalMeshComponent, bool FromBeginPlay, EExecutePin* Branches);
	void Reset(class USkeletalMeshComponent* InSkeletalMeshComponent, bool FromBeginPlay);
	void ResetExplosionState();
	void WakeAllRigidBodies();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPhysicalAnimationComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPhysicalAnimationComponent")
	}
	static class ULPhysicalAnimationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPhysicalAnimationComponent>();
	}
};
DUMPER7_ASSERTS_ULPhysicalAnimationComponent;

// Class ProjectP.PNGameEngine
// 0x0000 (0x0D70 - 0x0D70)
class UPNGameEngine final : public UGameEngine
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PNGameEngine")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PNGameEngine")
	}
	static class UPNGameEngine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPNGameEngine>();
	}
};
DUMPER7_ASSERTS_UPNGameEngine;

// Class ProjectP.LGameInstance
// 0x00F8 (0x02A0 - 0x01A8)
class ULGameInstance : public UGameInstance
{
public:
	uint8                                         Pad_1A8[0x8];                                      // 0x01A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTransformDataAsset*                   TeleportTransformDataAsset;                        // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULPreloadDataAsset*                     PreloadDataAsset;                                  // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULGameState*>                    GameStateList;                                     // 0x01C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ULGameState>             CurrentGameStatePtr;                               // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D8[0x3];                                      // 0x01D8(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bReloadContentInfoXml;                             // 0x01DB(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCreateGameModeForPIE;                             // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1DD[0x2B];                                     // 0x01DD(0x002B)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ActionGroupTableCodeNameArray_PreloadForPC;        // 0x0208(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionGroupTableCodeNameArray_PreloadForPCSkill;   // 0x0218(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           Mesh_Hair_Basic;                                   // 0x0228(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           Mesh_Hair_Long;                                    // 0x0250(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           Mesh_Hair_WLong;                                   // 0x0278(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static void ActiveGameSystemForTest(ELGameSubSystemActiveType ActiveType);

	bool ExecBP(class UWorld* InWorld, const class FString& Cmd);
	void GetEmptyPulseGauge(int32* EmptyPulseCount, int32* EmptyPulseGauge_Current, int32* EmptyPulseGauge_Max, int32* EmptyPulseGauge_DefatltMax);
	EPNGameState GetGameState();
	bool IsPlayState();
	void MainProcess_PlayExit();
	void MainProcess_PlayStart();
	void MainProcess_StartInstance();
	void MakeNewCharacterBP(bool bInEditor);
	void OnChangeGameState(EPNGameState InGameState, bool ExecuteInGameMode);
	void OnEndAsyncPreLoadScene();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGameInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGameInstance")
	}
	static class ULGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULGameInstance>();
	}
};
DUMPER7_ASSERTS_ULGameInstance;

// Class ProjectP.LGameModeBase
// 0x0008 (0x02C8 - 0x02C0)
class ALGameModeBase : public AGameModeBase
{
public:
	bool                                          bPlayGameMode;                                     // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdjustPlayerLocationAndRotation;                  // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportWorldAsyncLoad;                            // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadingLevel;                                     // 0x02C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateForPIE;                                     // 0x02C4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeGameState();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGameModeBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGameModeBase")
	}
	static class ALGameModeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALGameModeBase>();
	}
};
DUMPER7_ASSERTS_ALGameModeBase;

// Class ProjectP.LPlayOption
// 0x0018 (0x0060 - 0x0048)
class ULPlayOption final : public ULSubOption
{
public:
	uint8                                         Pad_48[0x18];                                      // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetCurrentLanguage();
	bool GetEnableTutorialPopup();
	ELHUDVisible GetHUDVisibility();
	int32 GetLanguageStep();
	int32 GetLockOnImportanceWeightMultiply();
	TArray<class FString> GetSelectableLanguages();
	bool GetUseAutoNewTargetLockOn();
	bool GetUseAutoTargeting();
	bool IsBloodExpressionEnabled();
	bool IsMotionBlurEnabled();
	bool IsVideoSubtitleEnabled();
	bool SetEnableBloodExpression(bool InEnable);
	bool SetEnableTutorialPopup(bool Enable);
	bool SetEnableVideoSubtitle(bool InEnable);
	bool SetHUDVisibility(ELHUDVisible InVisible);
	bool SetLanguageStep(int32 InStep);
	bool SetLockOnImportanceWeightMultiply(int32 InStep);
	bool SetMotionBlurEnabled(bool InEnable);
	bool SetUseAutoNewTargetLockOn(bool InAuto);
	bool SetUseAutoTargeting(bool Enable);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPlayOption")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPlayOption")
	}
	static class ULPlayOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPlayOption>();
	}
};
DUMPER7_ASSERTS_ULPlayOption;

// Class ProjectP.LGameObjectInterface
// 0x0000 (0x0000 - 0x0000)
class ILGameObjectInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGameObjectInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGameObjectInterface")
	}
	static class ILGameObjectInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILGameObjectInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ILGameObjectInterface;

// Class ProjectP.LGameSettings
// 0x0008 (0x0040 - 0x0038)
class ULGameSettings final : public UDeveloperSettings
{
public:
	bool                                          bGameDay;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEasyMode;                                         // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLevelStreaming;                                // 0x003A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeowizAuth;                                       // 0x003B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableCanHotKeyInShipping;                       // 0x003C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableActivationSystemV2;                         // 0x003D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBoostAI;                                    // 0x003E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool CanHotKey();
	static bool CanPreload(ELPreloadUsage Usage);
	static bool CheckGameCommand(ELGameCommandCategory CommandCategory);
	static bool IsBoostAI();
	static bool IsEasyMode();
	static bool IsEnableActivationSystemV2();
	static bool IsGameDayBuild();
	static bool IsNeowizAuth();
	static bool IsProjectilePreloadLagacy();
	static bool IsUseActionGroupBuildData();
	static bool IsUseLevelStreaming();
	static void SetEasyModeEnabled(bool bEnable);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGameSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGameSettings")
	}
	static class ULGameSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULGameSettings>();
	}
};
DUMPER7_ASSERTS_ULGameSettings;

// Class ProjectP.LEditorSettings
// 0x0008 (0x0040 - 0x0038)
class ULEditorSettings final : public UDeveloperSettings
{
public:
	bool                                          bUseActionGroupBuildData;                          // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreload_System;                                   // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreload_PC;                                       // 0x003A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreload_NPC;                                      // 0x003B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreload_PROP;                                     // 0x003C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreload_UI;                                       // 0x003D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreload_PROJECTILE;                               // 0x003E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugAI;                                          // 0x003F(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LEditorSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LEditorSettings")
	}
	static class ULEditorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULEditorSettings>();
	}
};
DUMPER7_ASSERTS_ULEditorSettings;

// Class ProjectP.LOptionSaveGame
// 0x00B0 (0x0100 - 0x0050)
class ULOptionSaveGame final : public ULSaveGame
{
public:
	struct FLOptionData                           OptionData;                                        // 0x0050(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LOptionSaveGame")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LOptionSaveGame")
	}
	static class ULOptionSaveGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULOptionSaveGame>();
	}
};
DUMPER7_ASSERTS_ULOptionSaveGame;

// Class ProjectP.LGameEditableSettings
// 0x0018 (0x0040 - 0x0028)
class ULGameEditableSettings final : public UObject
{
public:
	class FString                                 CustomXmlDataPath;                                 // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLoadXmlLocalization;                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMonsterAlwaysDissolveEffect;                      // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGameEditableSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGameEditableSettings")
	}
	static class ULGameEditableSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULGameEditableSettings>();
	}
};
DUMPER7_ASSERTS_ULGameEditableSettings;

// Class ProjectP.LPCControllerDefault
// 0x0000 (0x0588 - 0x0588)
class ALPCControllerDefault final : public APlayerController
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPCControllerDefault")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPCControllerDefault")
	}
	static class ALPCControllerDefault* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPCControllerDefault>();
	}
};
DUMPER7_ASSERTS_ALPCControllerDefault;

// Class ProjectP.LGameState
// 0x0010 (0x0038 - 0x0028)
class ULGameState : public UObject
{
public:
	uint8                                         Pad_28[0x4];                                       // 0x0028(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ULGameInstance>          LGameInstancePtr;                                  // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGameState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGameState")
	}
	static class ULGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULGameState>();
	}
};
DUMPER7_ASSERTS_ULGameState;

// Class ProjectP.LPSOGameState
// 0x0000 (0x0038 - 0x0038)
class ULPSOGameState final : public ULGameState
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPSOGameState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPSOGameState")
	}
	static class ULPSOGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPSOGameState>();
	}
};
DUMPER7_ASSERTS_ULPSOGameState;

// Class ProjectP.LInitGameState
// 0x0000 (0x0038 - 0x0038)
class ULInitGameState final : public ULGameState
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LInitGameState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LInitGameState")
	}
	static class ULInitGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULInitGameState>();
	}
};
DUMPER7_ASSERTS_ULInitGameState;

// Class ProjectP.LSlaveArmReinforcementSystem
// 0x00C8 (0x0140 - 0x0078)
class ULSlaveArmReinforcementSystem final : public ULGameSubSystem
{
public:
	TArray<class ULSlaveArmPage*>                 SlaveArmPageList;                                  // 0x0078(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class ULSlaveArmTree*>      SlaveArmTreeMap;                                   // 0x0088(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FLSlaveArmInfoHolder> SlaveArmReinforceInfoMap;                         // 0x00D8(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           ActiveSlaveArmReinforceList;                       // 0x0128(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckHaveEnoughMagazinePoint();
	void CheckPageActivated();
	class ULSlaveArmTree* FindTreeByCodeName(class FName SlaveArmTreeCodename);
	TArray<class ULSlaveArmTree*> FindTreeByPageCodeName(class FName SlaveArmPageCodename);
	float GetConsumeMagazinePointMultiplier(class FName SlaveArmCodeName);
	int32 GetIncreasedAmmo(class FName ItemSlaveArmCodeName);
	int32 GetReinforcedHitIndex(class FName SlaveArmItemCodename, int32 BaseHitIndex);
	class FName GetReinforcedProjectile(class FName SlaveArmItemCodename, class FName BaseProjectileID);
	TArray<struct FSlaveArmReinforcementInfoPtr> GetReinforcementInfoList(class FName SlavearmReinforcementInfoname);
	class ULSlaveArmPage* GetSlaveArmPage(class FName SlaveArmPageCodename);
	class ULSlaveArmPage* GetSlaveArmPageBySlaveArmCodeName(class FName SlaveArmItemCodename);
	TArray<class ULSlaveArmPage*> GetSlaveArmPageList();
	class FName GetSlaveArmSkillCodeName(class FName SlaveArmItemCodename);
	int32 GetSlaveArmStat(class FName ItemSlaveArmCodeName, ELSecondStat InStat);
	TArray<class ULSlaveArmTree*> GetSlaveArmTreeListByPageCodeName(class FName SlaveArmPageCodename);
	TArray<class ULSlaveArmTree*> GetSlaveArmTreeListBySlaveArmCodeName(class FName SlaveArmItemCodename);
	bool HasReinforcement(class FName SlaveArmReinfocementCodeName);
	void OnGameDataCharacterSync(class ULCharacterSaveGame* CharacterSaveGame, bool bLoad);
	void OnOpenUI();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSlaveArmReinforcementSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSlaveArmReinforcementSystem")
	}
	static class ULSlaveArmReinforcementSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSlaveArmReinforcementSystem>();
	}
};
DUMPER7_ASSERTS_ULSlaveArmReinforcementSystem;

// Class ProjectP.LIntroGameState
// 0x0000 (0x0038 - 0x0038)
class ULIntroGameState final : public ULGameState
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LIntroGameState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LIntroGameState")
	}
	static class ULIntroGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULIntroGameState>();
	}
};
DUMPER7_ASSERTS_ULIntroGameState;

// Class ProjectP.LOptionSystem
// 0x0068 (0x00E0 - 0x0078)
class ULOptionSystem final : public ULGameSubSystem
{
public:
	class ULPlayOption*                           PlayOption;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULCameraOption*                         CameraOption;                                      // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULDispalySoundOption*                   DisplaySoundOption;                                // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGraphicOption*                        GraphicOption;                                     // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGamePadOption*                        GamePadOption;                                     // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULKeyboardMouseOption*                  KeyboardMouseOption;                               // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULKeySettingOption*                     KeySettingOption;                                  // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULFirstGameStartOption*                 FirstGameStartOption;                              // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALOptionSystemData*                     SystemData;                                        // 0x00B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULOptionSaveGame*                       OptionSaveGame;                                    // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(bool SyncStart)> OnOptionSyncSave;                                 // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FName GetLocationCodeName();
	int32 GetPlayerLevel();
	class FString GetPlayTime();
	bool Load();
	void OnInitLoadOptionGameData(const class FString& SlotName, bool bSuccess, ELGameDataType GameDataType, class ULSaveGame* SaveGame);
	void OnLoadOptionGameData(const class FString& SlotName, bool bSuccess, ELGameDataType GameDataType, class ULSaveGame* SaveGame);
	void OnResetSystemData();
	void OnSaveOptionGameData(const class FString& SlotName, bool bSuccess, ELGameDataType GameDataType);
	bool Save();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LOptionSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LOptionSystem")
	}
	static class ULOptionSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULOptionSystem>();
	}
};
DUMPER7_ASSERTS_ULOptionSystem;

// Class ProjectP.LLoginGameState
// 0x0000 (0x0038 - 0x0038)
class ULLoginGameState final : public ULGameState
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLoginGameState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLoginGameState")
	}
	static class ULLoginGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLoginGameState>();
	}
};
DUMPER7_ASSERTS_ULLoginGameState;

// Class ProjectP.LLobbyGameState
// 0x0000 (0x0038 - 0x0038)
class ULLobbyGameState final : public ULGameState
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLobbyGameState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLobbyGameState")
	}
	static class ULLobbyGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLobbyGameState>();
	}
};
DUMPER7_ASSERTS_ULLobbyGameState;

// Class ProjectP.LPlayGameState
// 0x0000 (0x0038 - 0x0038)
class ULPlayGameState final : public ULGameState
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPlayGameState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPlayGameState")
	}
	static class ULPlayGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPlayGameState>();
	}
};
DUMPER7_ASSERTS_ULPlayGameState;

// Class ProjectP.LSoundSystem
// 0x0168 (0x01E0 - 0x0078)
class ULSoundSystem final : public ULGameSubSystem
{
public:
	TMulticastInlineDelegate<void(class FName SoundName)> OnPlayBGM;                                 // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class USoundWave* PlayingSoundWave, const float PlaybackPercent)> OnRecordPlayback; // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsPlayStart, class FName RecordCodeName)> OnPlayRecord;       // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class FName                                   PlayingRecordCodename;                             // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Pending_NextPlayRecordCodeName;                    // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayingRecordSpotUniqueId;                         // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastReached_RecordSpotUniqueId;                    // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PlayingDialogActor;                                // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayingDialogSound;                              // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayingMonologueSound;                           // 0x00E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x56];                                      // 0x00E2(0x0056)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundMix*>                      MuteSoundMixes;                                    // 0x0138(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ALSoundSystemData*                      SystemData;                                        // 0x0150(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_158[0x10];                                     // 0x0158(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundMix*>                      SoundMixSequenceList;                              // 0x0168(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class UAudioComponent>> Sound2DSequenceList;                               // 0x0178(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class FName                                   PlayBGMCodeName;                                   // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   Cache_NpcBGMCodeName;                              // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           BGM_ActiveNpcList;                                 // 0x0198(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class ULSoundControlComponent>> SoundControlComponentList_to_Refresh;      // 0x01A8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& NpcSpotUniqueID)> OnNpcDeadDelegate;          // 0x01B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnAsyncLoadingMap;                                 // 0x01D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	bool AcquireHumanityRecord(class FName RecordCodeName);
	void AddSoundControlComponentToRefresh(class ULSoundControlComponent* Comp);
	void CheckPlayBGM_FromNpc(const class FName& NpcName, const class FName& SoundName, bool bShowSoundNameUI);
	void CheckStopBGM_FromNpc(const class FName& NpcName, const class FName& SoundName);
	void ClearSoundControlComponentsToRefresh();
	void ClearSoundMix(class USoundMix* SoundMix);
	void DoCompletePlayDialogSound();
	bool DoNextPlayRecord();
	bool DoPlayBGM(const class FName& SoundName, bool bShowSoundNameUI);
	bool DoPlayDialogSound(const struct FDialogInfoPtr& InDialog);
	bool DoPlayRecord(class FName RecordCodeName);
	bool DoPrevPlayRecord();
	bool DoStopDialogSound();
	bool DoStopRecord();
	void FadeMuteSound(bool bMute);
	class FName FindPlayableRecordFromPlayingNow(bool FindNext);
	const TArray<struct FItemCommonInfo> GetAllRecordList();
	class USoundCue* GetDialogSound(class FName RowName);
	float GetMultifliedVolume(ELVolumeType FindType);
	class USoundCue* GetRecordCue(class FName RecordCodeName);
	float GetRecordCurrentDuration(const class USoundWave* PlayingSoundWave, const float PlaybackPercent);
	float GetRecordDuration(class FName RecordCodeName);
	float GetSwishMultiplier();
	float GetVolume(ELVolumeType FindType);
	bool IsPlayableUISound();
	bool IsPlayingBGM();
	void MuteAllSound(bool bMute, bool bFade);
	void MuteSound(bool bMute);
	void MuteUISound(bool Mute);
	void OnRecordPlaybackPercent(const class USoundWave* PlayingSoundWave, const float PlaybackPercent);
	void PlaySound2DFromSequence(class USoundBase* Sound);
	void PopSoundMixFromSequence(class USoundMix* SoundMix);
	void PushSoundMixFromSequence(class USoundMix* SoundMix);
	void SetPendingNextPlayRecord(class FName RecordCodeName);
	bool SetVolume(ELVolumeType FindType, float InVolume);

	float GetAudioVolumeConcurrency(const class UAudioComponent* InAudioComp) const;
	bool GetIsAsncLoadingMapCompleted() const;
	bool IsNotiRecord(class FName RecordCodeName) const;
	bool IsRecord_CanAquireHumanity(class FName RecordCodeName) const;
	bool IsRecordHavingHumanity(class FName RecordCodeName) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSoundSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSoundSystem")
	}
	static class ULSoundSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSoundSystem>();
	}
};
DUMPER7_ASSERTS_ULSoundSystem;

// Class ProjectP.LNewGamePlusState
// 0x0000 (0x0038 - 0x0038)
class ULNewGamePlusState final : public ULGameState
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LNewGamePlusState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LNewGamePlusState")
	}
	static class ULNewGamePlusState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULNewGamePlusState>();
	}
};
DUMPER7_ASSERTS_ULNewGamePlusState;

// Class ProjectP.LPlayerItemLocker
// 0x00F0 (0x0118 - 0x0028)
class ULPlayerItemLocker final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ULItem* Item)> OnAddItem;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULItem* Item)> OnAddItemFail;                                // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULItem* Item)> OnRemoveItem;                                 // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULItem* Item)> OnUpdateItem;                                 // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULItem* Item, int32 Count)> OnGetItemEventWithCount;         // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULItem* Item, int32 Count)> OnGetItemSpecialWithCount;       // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<class ULItem*>& ItemList)> OnRefillItem;              // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMap<ELItemSecondCategory, struct FLInvenCategoryItemList> ItemCategoryMap;                      // 0x00A0(0x0050)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<class ULWeaponItem*>                   WeaponItemList;                                    // 0x00F0(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<class ULItem*>                         AllItemList;                                       // 0x0100(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AbandonItem(class ULItem* Item, int32 RemoveCount);
	bool AddItem(class ULItem* Item);
	void EmptyItems();
	TArray<class ULItem*> FindCategoryItems(ELItemSecondCategory Category);
	class ULItem* FindItemByCodeName(class FName CodeName);
	TArray<class ULItem*> FindItemsByCodeName(class FName CodeName);
	TArray<class ULItem*> FindUICategoryItems(ELItemFirstCategory Category);
	const TArray<class ULItem*> GetAllItems();
	const TMap<ELItemSecondCategory, struct FLInvenCategoryItemList> GetItemCategoryMap();
	int32 GetItemTotalCountByCodeName(class FName CodeName);
	int32 GetMaxItemCountMovableToInventory(class ULItem* Item);
	const TArray<class ULWeaponItem*> GetWeaponItems();
	int32 GetWeaponTotalCountByCodeName(class FName HandleCodeName, class FName BladeCodeName);
	bool HasItem(class ULItem* Item);
	bool MoveItemToInventory(class ULItem* Item, int32 ItemCount, bool bManualMove);
	void RefillMonadUnitItem();
	bool RemoveItem(class ULItem* Item);

	bool HasSameItem(class FName ItemCodeName) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPlayerItemLocker")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPlayerItemLocker")
	}
	static class ULPlayerItemLocker* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPlayerItemLocker>();
	}
};
DUMPER7_ASSERTS_ULPlayerItemLocker;

// Class ProjectP.LGalleryGameState
// 0x0000 (0x0038 - 0x0038)
class ULGalleryGameState final : public ULGameState
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGalleryGameState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGalleryGameState")
	}
	static class ULGalleryGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULGalleryGameState>();
	}
};
DUMPER7_ASSERTS_ULGalleryGameState;

// Class ProjectP.LGameTagVolume
// 0x0020 (0x0278 - 0x0258)
class ALGameTagVolume final : public ALVolume
{
public:
	struct FGameplayTagContainer                  ExecuteTags;                                       // 0x0258(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGameTagVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGameTagVolume")
	}
	static class ALGameTagVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALGameTagVolume>();
	}
};
DUMPER7_ASSERTS_ALGameTagVolume;

// Class ProjectP.LGameUserSettings
// 0x0040 (0x01D0 - 0x0190)
class ULGameUserSettings final : public UGameUserSettings
{
public:
	bool                                          IsInitedGraphic;                                   // 0x0190(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              LastResolution;                                    // 0x0194(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RayTracingShadows;                                 // 0x019C(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RayTracingAmbientOcclusion;                        // 0x019D(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RayTracingSkyLight;                                // 0x019E(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RayTracingGlobalIllumination;                      // 0x019F(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RayTracingTranslucency;                            // 0x01A0(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RayTracingReflections;                             // 0x01A1(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VRSEnabled;                                        // 0x01A2(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CACAOEnabled;                                      // 0x01A3(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDLSSMode                                     DLSSMode;                                          // 0x01A4(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DLSSSharpness;                                     // 0x01A8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DLSSFrameGeneration;                               // 0x01AC(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFSR1Mode                                     FSR1Mode;                                          // 0x01AD(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFSR2Mode                                     FSR2Mode;                                          // 0x01AE(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF[0x1];                                      // 0x01AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FSR2Sharpness;                                     // 0x01B0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EXeSSMode                                     XeSSMode;                                          // 0x01B4(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReflexMode                                   ReflexMode;                                        // 0x01B5(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HDROutputEnabled;                                  // 0x01B6(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B7[0x1];                                      // 0x01B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ColorBrightness;                                   // 0x01B8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HDRBrightness;                                     // 0x01BC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HDRContrast;                                       // 0x01C0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FirstBrightnessSetting;                            // 0x01C4(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayStyle;                                         // 0x01C8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHFREnabled;                                       // 0x01CC(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD[0x3];                                      // 0x01CD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGameUserSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGameUserSettings")
	}
	static class ULGameUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULGameUserSettings>();
	}
};
DUMPER7_ASSERTS_ULGameUserSettings;

// Class ProjectP.LPathWayObject
// 0x0038 (0x0258 - 0x0220)
class ALPathWayObject final : public AActor
{
public:
	class FName                                   PathWayCodeName;                                   // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELPathWayType                                 PathWayType;                                       // 0x0228(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLPathWayPointData>             WayPoints;                                         // 0x0230(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class ULPathWaySplineComponent*               SplineComponent;                                   // 0x0240(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_248[0x10];                                     // 0x0248(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPathWayObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPathWayObject")
	}
	static class ALPathWayObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPathWayObject>();
	}
};
DUMPER7_ASSERTS_ALPathWayObject;

// Class ProjectP.LGameVariables
// 0x0008 (0x0030 - 0x0028)
class ULGameVariables final : public UObject
{
public:
	class UCurveFloat*                            WirePullingCurve;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGameVariables")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGameVariables")
	}
	static class ULGameVariables* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULGameVariables>();
	}
};
DUMPER7_ASSERTS_ULGameVariables;

// Class ProjectP.LGameViewportClient
// 0x0000 (0x0360 - 0x0360)
class ULGameViewportClient final : public UGameViewportClient
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGameViewportClient")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGameViewportClient")
	}
	static class ULGameViewportClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULGameViewportClient>();
	}
};
DUMPER7_ASSERTS_ULGameViewportClient;

// Class ProjectP.LProductSpecialShop
// 0x0028 (0x0050 - 0x0028)
class ULProductSpecialShop final : public ULProductShop
{
public:
	class FName                                   ShopCodeName;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLProductShopItemData>          DealProducts;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class ULProduct*>                      Products;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)

public:
	bool Buy(class ULProduct* InProduct, int32 InCount);
	TSet<ELItemFirstCategory> GetBuyCategorys();
	TArray<class ULProduct*> GetBuyList(ELItemFirstCategory Category);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProductSpecialShop")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProductSpecialShop")
	}
	static class ULProductSpecialShop* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULProductSpecialShop>();
	}
};
DUMPER7_ASSERTS_ULProductSpecialShop;

// Class ProjectP.LGarbageCollectionVolume
// 0x0008 (0x0260 - 0x0258)
class ALGarbageCollectionVolume final : public ALVolume
{
public:
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGarbageCollectionVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGarbageCollectionVolume")
	}
	static class ALGarbageCollectionVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALGarbageCollectionVolume>();
	}
};
DUMPER7_ASSERTS_ALGarbageCollectionVolume;

// Class ProjectP.LGuideObject
// 0x0008 (0x02A8 - 0x02A0)
class ALGuideObject final : public ALLevelObject
{
public:
	float                                         EffectDisappearTime;                               // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGuideObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGuideObject")
	}
	static class ALGuideObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALGuideObject>();
	}
};
DUMPER7_ASSERTS_ALGuideObject;

// Class ProjectP.LHeadTagComponent
// 0x0010 (0x05B0 - 0x05A0)
class ULHeadTagComponent final : public UWidgetComponent
{
public:
	uint8                                         Pad_5A0[0x10];                                     // 0x05A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LHeadTagComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LHeadTagComponent")
	}
	static class ULHeadTagComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULHeadTagComponent>();
	}
};
DUMPER7_ASSERTS_ULHeadTagComponent;

// Class ProjectP.LHitCollisionBoxComponent
// 0x0000 (0x0480 - 0x0480)
class ULHitCollisionBoxComponent final : public UBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LHitCollisionBoxComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LHitCollisionBoxComponent")
	}
	static class ULHitCollisionBoxComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULHitCollisionBoxComponent>();
	}
};
DUMPER7_ASSERTS_ULHitCollisionBoxComponent;

// Class ProjectP.LHitCollisionCapsuleComponent
// 0x0000 (0x0470 - 0x0470)
class ULHitCollisionCapsuleComponent final : public UCapsuleComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LHitCollisionCapsuleComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LHitCollisionCapsuleComponent")
	}
	static class ULHitCollisionCapsuleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULHitCollisionCapsuleComponent>();
	}
};
DUMPER7_ASSERTS_ULHitCollisionCapsuleComponent;

// Class ProjectP.LHitCollisionSphereComponent
// 0x0000 (0x0470 - 0x0470)
class ULHitCollisionSphereComponent final : public USphereComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LHitCollisionSphereComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LHitCollisionSphereComponent")
	}
	static class ULHitCollisionSphereComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULHitCollisionSphereComponent>();
	}
};
DUMPER7_ASSERTS_ULHitCollisionSphereComponent;

// Class ProjectP.LProjectile
// 0x0100 (0x0320 - 0x0220)
#pragma pack(push, 0x1)
class alignas(0x10) ALProjectile : public AActor
{
public:
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ProjectileHandleId;                                // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProjectileInfoPtr                     Info;                                              // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          StopByNotify;                                      // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALProjectileDesign*                     ProjectileDesign;                                  // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 RootParentActor;                                   // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  AttachedActor;                                     // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInPool;                                          // 0x0260(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnderDestroying;                                 // 0x0261(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPaused;                                          // 0x0262(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCollisionCheck;                             // 0x0263(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_StartCollisionCheck;                         // 0x0268(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CollisionProfile;                                  // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionRadius;                                   // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Cached_StartTransform;                             // 0x0280(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FTimerHandle                           Timer_LifeTime;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class ULProjectileHit_PeriodicHandler*> PeriodicHitHandlerList;                           // 0x02B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class ULProjectileHit_PeriodicHandler_V2*> PeriodicHitHandler_V2_List;                    // 0x02C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class ULProjectileSpawn_PeriodicHandler*> PeriodicChildSpawnHandlerList;                  // 0x02D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class ULProjectile_AbnormalApplyInRange*      AbnormalApplyInRangeInfo;                          // 0x02E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F0[0x10];                                     // 0x02F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         VictimCheckerList;                                 // 0x0300(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_310[0x8];                                      // 0x0310(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckTargetHittable(class AActor* Victim, class FName SkillHitCodeName);
	bool CheckValidFaction(class AActor* Victim);
	bool CheckValidOverlapTarget(class AActor* Victim);
	bool CheckValidTargetType(class AActor* Victim);
	void ClearOverlappedActorList();
	void GenerateHit(const struct FLProjectileHitInfo& HitInfo, const struct FVector& Location);
	void GenerateHit_TargetOnly(const struct FLProjectileHitInfo& ProjectileHitInfo, const struct FHitResult& HitResult);
	void GenerateHit_TargetOnly_V2(const struct FLProjectileHitInfo_V2& ProjectileHitInfo, const struct FHitResult& HitResult);
	void GenerateHit_V2(const struct FLProjectileHitInfo_V2& HitInfo, const struct FVector& Location);
	void InitializeFromProjectileDesign();
	bool InitProjectile(const struct FProjectileInfoPtr& InInfo, const struct FLProjectileSpawnParameter& SpawnParameters);
	bool IsStopByNotify();
	bool IsStopByRootOwnerDie();
	void OnAttachedActorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void OnAttackedByOther(class AActor* Other, class FName SkillHitCodeName);
	void OnCollisionBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FHitResult& SweepResult);
	void OnCollisionHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FHitResult& HitResult);
	void OnDeadParentCharacter(class ALCharacter* DeadCharacter);
	void OnDisappear(ELProjectileDestroyReason Reason);
	void OnExplode(ELProjectileDestroyReason Reason);
	void OnLifeTimeOver();
	void ProcessHit(const struct FLProjectileHitInfo& HitInfo, const struct FHitResult& HitResult);
	void ProcessHitProp(const struct FLProjectileHitInfo& ProjectileHitInfo, const struct FHitResult& HitResult);
	void Reset();
	void SenseTarget();
	void SpawnChildren(const struct FLChildProjectileSpawnInfo& ChildSpawnInfo);
	bool SpawnProjectileDesignActor();
	void Start();
	void StartCollisionCheck();
	void Stop();
	void StopApplyAbnormal();
	void StopGeneratePeriodicHit();
	void StopSpawnChildren();
	void UpdateOverlapEvents(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectile")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectile")
	}
	static class ALProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALProjectile>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_ALProjectile;

// Class ProjectP.LHitCollisionDynamic
// 0x00B0 (0x02D0 - 0x0220)
class ALHitCollisionDynamic final : public AActor
{
public:
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UShapeComponent*                        ShapeComponent;                                    // 0x0228(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELCollisionOwnerType                          CollisionOwnerType;                                // 0x0230(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULHitColMgrComponent*                   HitColMgrComponent;                                // 0x0238(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_240[0x90];                                     // 0x0240(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class AActor* GetCollisionOwner();
	ELPhysicalSurfaceType GetPhysicalSurface();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LHitCollisionDynamic")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LHitCollisionDynamic")
	}
	static class ALHitCollisionDynamic* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALHitCollisionDynamic>();
	}
};
DUMPER7_ASSERTS_ALHitCollisionDynamic;

// Class ProjectP.LHitColMgrComponent
// 0x00F0 (0x01A0 - 0x00B0)
class ULHitColMgrComponent final : public UActorComponent
{
public:
	class AActor*                                 HitColOwner;                                       // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLHitContext                           Cached_HitContext;                                 // 0x00B8(0x0070)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FLGrabInfo                             Cached_GrabInfo;                                   // 0x0128(0x0068)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x10];                                     // 0x0190(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnComponentBeginOverlapped(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
	void OnComponentEndOverlapped(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LHitColMgrComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LHitColMgrComponent")
	}
	static class ULHitColMgrComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULHitColMgrComponent>();
	}
};
DUMPER7_ASSERTS_ULHitColMgrComponent;

// Class ProjectP.LHitProcComponent
// 0x01F8 (0x02A8 - 0x00B0)
class ULHitProcComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B0[0x50];                                      // 0x00B0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   HitProcContextClass;                               // 0x0100(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULHitProcContext*                       Cached_HitProcContext;                             // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLHitInfo                              Cached_LastHitInfo;                                // 0x0130(0x0140)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   RedirectToSkill_Paralyzation;                      // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RedirectToSkill_Groggy;                            // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGameObjectHandle                     Cached_LastRegisteredSocketTracer_Fx;              // 0x0280(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FLGameObjectHandle                     Cached_LastRegisteredSocketTracer_Repulse;         // 0x0284(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FLGameObjectHandle                     Cached_LastRegisteredSocketTracer_RepulseForWeaponOnly; // 0x0288(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLTest_HitProcOptions                  TestOption;                                        // 0x0290(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastHitTime;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool GetDebugShowRepulseSparkInfo();
	void OnActionStarted(class ULActMgrComponent* ActMgrComponent, class ULActBase* StartedAction);
	void OnActionStopCalled(class ULActMgrComponent* ActMgrComponent, class ULActBase* StoppingAction, class ULActBase* ReasonAction);
	void OnDebugHitOcurred(const struct FHitResult& Info);
	void OnFxSocketHitOccurred(class ULActMgrComponent* ActMgrComponent, const struct FLFxSocketTracerInfo& SocketTracerInfo, const struct FHitResult& HitResult);
	void OnRepulseSocketHitOccurred(class ULActMgrComponent* ActMgrComponent, const struct FLFxSocketTracerInfo& SocketTracerInfo, const struct FHitResult& HitResult);
	void ProcessHit(class AActor* Attacker, class AActor* Victim, const struct FHitResult& HitResult, const struct FLHitInfo& HitInfo);
	void ProcessHitDecoMesh(class AActor* Attacker, class AActor* Victim, const struct FHitResult& HitResult);
	void ProcessHitProp(class AActor* Attacker, class AActor* Victim, const struct FHitResult& HitResult, const struct FLHitInfo& HitInfo);
	void RegisterNewHit(class AActor* Victim, const struct FLHitContext& HitContext);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LHitProcComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LHitProcComponent")
	}
	static class ULHitProcComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULHitProcComponent>();
	}
};
DUMPER7_ASSERTS_ULHitProcComponent;

// Class ProjectP.LPropDestructMarkerComponent
// 0x0000 (0x0200 - 0x0200)
class ULPropDestructMarkerComponent final : public USceneComponent
{
public:
	float                                         Strength;                                          // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropDestructMarkerComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropDestructMarkerComponent")
	}
	static class ULPropDestructMarkerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPropDestructMarkerComponent>();
	}
};
DUMPER7_ASSERTS_ULPropDestructMarkerComponent;

// Class ProjectP.LHitProcContext
// 0x0AD8 (0x0B00 - 0x0028)
class ULHitProcContext final : public UObject
{
public:
	class AActor*                                 Attacker;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Victim;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Original_HitResult;                                // 0x0038(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FLHitInfo                              Original_HitInfo;                                  // 0x00C0(0x0140)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_200[0x50];                                     // 0x0200(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Original_SkillHitCodeName;                         // 0x0250(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillHitInfoPtr                       Original_SkillHitInfo;                             // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SkillHitCodeName;                                  // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillHitInfoPtr                       SkillHitInfo;                                      // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class ULHitProcComponent*                     Attacker_HitProcComp;                              // 0x0270(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULActMgrComponent*                      Attacker_ActMgrComp;                               // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULStatComponent*                        Attacker_StatComp;                                 // 0x0280(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULActBase*                              Attacker_ActionAtHitStarted;                       // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALWeapon*                               Attacker_Weapon;                                   // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULHitProcComponent*                     Victim_HitProcComp;                                // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULActMgrComponent*                      Victim_ActMgrComp;                                 // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULStatComponent*                        Victim_StatComp;                                   // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULActBase*                              Victim_ActionAtHitStarted;                         // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALWeapon*                               Victim_Weapon;                                     // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALPartsActor*                           Victim_PartsActor;                                 // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULPartsComponent*                       Victim_PartsComp;                                  // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Processed_Attacker_HitActionClassName;             // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Processed_Attacker_SkillCodeName;                  // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Processed_Attacker_HitResult;                      // 0x02E0(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FLHitInfo                              Processed_Attacker_HitInfo;                        // 0x0368(0x0140)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   Processed_Victim_HitActionClassName;               // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Processed_Victim_SkillCodeName;                    // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Processed_Victim_CommonMontageCodeName;            // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Processed_Victim_HitResult;                        // 0x04C0(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FLHitInfo                              Processed_Victim_HitInfo;                          // 0x0548(0x0140)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Processed_Victim_DiedByCurrentHit : 1;             // 0x0688(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Processed_Victim_PlayDieAction : 1;                // 0x0688(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Processed_Victim_Endured : 1;                      // 0x0688(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Processed_Victim_GuardSucceed : 1;                 // 0x0688(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Processed_Victim_PerfectGuardSucceed : 1;          // 0x0688(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Processed_Victim_GuardBreak : 1;                   // 0x0688(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Processed_Victim_GuardReflect : 1;                 // 0x0688(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Processed_Victim_Dodge : 1;                        // 0x0688(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Processed_Victim_PartsDestoryed : 1;               // 0x0689(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Processed_IsMultipleHit : 1;                       // 0x0689(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_68A[0x6];                                      // 0x068A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLReceiveDamageParams                  Processed_ReceiveDamageParams;                     // 0x0690(0x00D0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FLReceiveDamageResults                 Processed_ReceiveDamageResults;                    // 0x0760(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_774[0x4];                                      // 0x0774(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLCalcDamageData                       Processed_CalcDamageData;                          // 0x0778(0x0110)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLReservedHitContext                   Processed_ReservedHitContext;                      // 0x0888(0x01D8)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FLHitFXPlayData                        Processed_HitFXPlayData;                           // 0x0A60(0x0080)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<ELMomentType>                          Processed_ReachMomentTypeArray;                    // 0x0AE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Processed_DebugString;                             // 0x0AF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AttackerActionAtHitStarted(EExecutePin* Branches, class ULActBase** OutActionAtHitStarted);
	void AttackerActMgrComp(EExecutePin* Branches, class ULActMgrComponent** OutActMgrComponent);
	void AttackerAs(ELHitProcObjectType* Branches, class ALCharacter** OutCharacter, class ALPCCharacter** OutPC, class ALNPCCharacter** OutNPC, class ALDynamicDamageVolumeActor** OutDamageVolume, class ALProjectile** OutProjectile);
	void AttackerHitProcComp(EExecutePin* Branches, class ULHitProcComponent** OutHitProcComponent);
	void AttackerStatComp(EExecutePin* Branches, class ULStatComponent** OutStatComponent);
	void AttackerWeapon(EExecutePin* Branches, class ALWeapon** OutWeapon);
	bool ChangeSkillHitBP(class FName InSkillHitCodeName, EExecutePin* Branches);
	bool OnPrepareBP();
	void OnResetBP();
	bool PrepareBP(class AActor* InAttacker, class AActor* InVictim, const struct FHitResult& InHitResult, const struct FLHitInfo& InHitInfo, EExecutePin* Branches);
	void Reset();
	void VictimActionAtHitStarted(EExecutePin* Branches, class ULActBase** OutActionAtHitStarted);
	void VictimActMgrComp(EExecutePin* Branches, class ULActMgrComponent** OutActMgrComponent);
	void VictimAs(ELHitProcObjectType* Branches, class ALCharacter** OutCharacter, class ALPCCharacter** OutPC, class ALNPCCharacter** OutNPC, class ALDynamicDamageVolumeActor** OutDamageVolume, class ALProjectile** OutProjectile);
	void VictimHitProcComp(EExecutePin* Branches, class ULHitProcComponent** OutHitProcComponent);
	void VictimStatComp(EExecutePin* Branches, class ULStatComponent** OutStatComponent);
	void VictimWeapon(EExecutePin* Branches, class ALWeapon** OutWeapon);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LHitProcContext")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LHitProcContext")
	}
	static class ULHitProcContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULHitProcContext>();
	}
};
DUMPER7_ASSERTS_ULHitProcContext;

// Class ProjectP.LHUD
// 0x0060 (0x0370 - 0x0310)
class ALHUD final : public AHUD
{
public:
	uint8                                         Pad_310[0x60];                                     // 0x0310(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LHUD")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LHUD")
	}
	static class ALHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALHUD>();
	}
};
DUMPER7_ASSERTS_ALHUD;

// Class ProjectP.LDebugCameraHUD
// 0x0038 (0x0348 - 0x0310)
class ALDebugCameraHUD final : public ADebugCameraHUD
{
public:
	uint8                                         Pad_310[0x38];                                     // 0x0310(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDebugCameraHUD")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDebugCameraHUD")
	}
	static class ALDebugCameraHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALDebugCameraHUD>();
	}
};
DUMPER7_ASSERTS_ALDebugCameraHUD;

// Class ProjectP.LProjectileDesign
// 0x0078 (0x0298 - 0x0220)
class ALProjectileDesign : public AActor
{
public:
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProjectileInfoPtr                     Info;                                              // 0x0228(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ALProjectile>            Projectile;                                        // 0x0230(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLProjectileDestructionInfo            DestructionInfo;                                   // 0x0238(0x000E)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_246[0x2];                                      // 0x0246(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLProjectileHitInfo>            HitInfoList;                                       // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLProjectileHitInfo_V2>         HitInfoList_V2;                                    // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLChildProjectileSpawnInfo>     ChildSpawnInfoList;                                // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLProjectileAbnormalApplyInRangeInfo   AbnormalApplyInfo;                                 // 0x0278(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsUnderDestroying;                                 // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInPool;                                          // 0x0291(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_292[0x6];                                      // 0x0292(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckCustomOverlapDestroyCondition(class AActor* OverlappedActor);
	class FName CheckUseSubstituteSkillHit(const struct FLProjectileHitInfo& ProjectileHitInfo, const struct FHitResult& HitResult);
	void EndProjectileDesign();
	class ALProjectile* GetProjectile();
	void InitProjectile();
	void OnAttakedByOther(class AActor* Other, class FName SkillHitCodeName);
	void OnBounce();
	void OnDisappear(ELProjectileDestroyReason Reason);
	void OnExplode(ELProjectileDestroyReason Reason);
	void OnSpawnChildren(class ALProjectile* ChildProjectile);
	void Pause(bool bPauseFlag);
	TArray<struct FHitResult> RefineHitTarget(const TArray<struct FHitResult>& InHitResults);
	void ReserveDestroy();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectileDesign")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectileDesign")
	}
	static class ALProjectileDesign* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALProjectileDesign>();
	}
};
DUMPER7_ASSERTS_ALProjectileDesign;

// Class ProjectP.LHumanityDB
// 0x00B0 (0x00D8 - 0x0028)
class ULHumanityDB final : public UObject
{
public:
	uint8                                         Pad_28[0xB0];                                      // 0x0028(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LHumanityDB")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LHumanityDB")
	}
	static class ULHumanityDB* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULHumanityDB>();
	}
};
DUMPER7_ASSERTS_ULHumanityDB;

// Class ProjectP.LInteractVolumeComponent
// 0x0010 (0x0490 - 0x0480)
class ULInteractVolumeComponent final : public UBoxComponent
{
public:
	bool                                          UseConfrontAngle_Override;                         // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConfrontAngle_Override;                            // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConfrontAngleProp_Override;                     // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_481[0x3];                                      // 0x0481(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConfrontAngleProp_Override;                        // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_488[0x8];                                      // 0x0488(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LInteractVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LInteractVolumeComponent")
	}
	static class ULInteractVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULInteractVolumeComponent>();
	}
};
DUMPER7_ASSERTS_ULInteractVolumeComponent;

// Class ProjectP.LDispalySoundOption
// 0x0000 (0x0048 - 0x0048)
class ULDispalySoundOption final : public ULSubOption
{
public:
	int32 GetVolumeStep(ELVolumeType InType);
	bool SetVolumeStep(ELVolumeType InType, int32 InStep);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDispalySoundOption")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDispalySoundOption")
	}
	static class ULDispalySoundOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULDispalySoundOption>();
	}
};
DUMPER7_ASSERTS_ULDispalySoundOption;

// Class ProjectP.LInteractComponent
// 0x0050 (0x0250 - 0x0200)
class ULInteractComponent final : public USceneComponent
{
public:
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLInteractionInfo>              InteractionInfoList;                               // 0x0200(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UPrimitiveComponent>     UserInteractedComp;                                // 0x0210(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELInteractResult                              DialogInteractResult;                              // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_219[0x17];                                     // 0x0219(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ULInteractSphereComponent> InteractComp_ByVolume;                           // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnTriggerInteract;                                 // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void OnCloseDialog();
	void OnComponentBeginOverlapped_Interact(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
	void OnComponentBeginOverlapped_InteractVolume(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
	void OnComponentBeginOverlapped_LookAt(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
	void OnComponentBeginOverlapped_Radius(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
	void OnComponentEndOverlapped_Interact(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnComponentEndOverlapped_InteractVolume(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnComponentEndOverlapped_LookAt(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnComponentEndOverlapped_Radius(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnOpenDialog();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LInteractComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LInteractComponent")
	}
	static class ULInteractComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULInteractComponent>();
	}
};
DUMPER7_ASSERTS_ULInteractComponent;

// Class ProjectP.LProjetileAbnormalApplyTargetInfo
// 0x0030 (0x0058 - 0x0028)
class ULProjetileAbnormalApplyTargetInfo final : public UObject
{
public:
	uint8                                         Pad_28[0x30];                                      // 0x0028(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjetileAbnormalApplyTargetInfo")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjetileAbnormalApplyTargetInfo")
	}
	static class ULProjetileAbnormalApplyTargetInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULProjetileAbnormalApplyTargetInfo>();
	}
};
DUMPER7_ASSERTS_ULProjetileAbnormalApplyTargetInfo;

// Class ProjectP.LInteractInterface
// 0x0000 (0x0000 - 0x0000)
class ILInteractInterface final
{
public:
	void CalcInteractionResult();
	struct FTransform GetInteractionStartTransform(bool* IsValid);
	class UAnimSequenceBase* GetInteractionUserAnimMontage();
	void InteractionEnd();
	bool IsValidUserInteractedComp();
	void StopPlayerInteraction();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LInteractInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LInteractInterface")
	}
	static class ILInteractInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILInteractInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ILInteractInterface;

// Class ProjectP.LInteractSphereComponent
// 0x0010 (0x0480 - 0x0470)
class ULInteractSphereComponent final : public USphereComponent
{
public:
	int32                                         ConfrontAngle;                                     // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConfrontAngleProp;                                 // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MessageCodeName;                                   // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LInteractSphereComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LInteractSphereComponent")
	}
	static class ULInteractSphereComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULInteractSphereComponent>();
	}
};
DUMPER7_ASSERTS_ULInteractSphereComponent;

// Class ProjectP.LInteractionCapsuleComponent
// 0x0000 (0x0470 - 0x0470)
class ULInteractionCapsuleComponent final : public UCapsuleComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LInteractionCapsuleComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LInteractionCapsuleComponent")
	}
	static class ULInteractionCapsuleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULInteractionCapsuleComponent>();
	}
};
DUMPER7_ASSERTS_ULInteractionCapsuleComponent;

// Class ProjectP.LKeySettingOption
// 0x0070 (0x00B8 - 0x0048)
class ULKeySettingOption final : public ULSubOption
{
public:
	uint8                                         Pad_48[0x70];                                      // 0x0048(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyBackupCustomizedInputInfo(ELInputOptionType InControllerType);
	bool ChangeInputKey(class FName InputAction, const struct FKey& Key);
	ELPCActionKeyType FindPresetInputAction(class FName InPresetName, const struct FKey& Key);
	struct FKey FindPresetInputActionKey(class FName InPresetName, ELPCActionKeyType KeyType);
	class FName GetCurrentPresetName(bool IsGamePad);
	TArray<class FName> GetSelectablePresetNames(bool IsGamePad);
	void OnClosedWindow(class FName WidgetTableName);
	void SetBackupCustomizedInputInfo();
	bool SetChangePreset(class FName InPresetName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LKeySettingOption")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LKeySettingOption")
	}
	static class ULKeySettingOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULKeySettingOption>();
	}
};
DUMPER7_ASSERTS_ULKeySettingOption;

// Class ProjectP.LPropDoorSpot
// 0x0008 (0x0360 - 0x0358)
class ALPropDoorSpot final : public ALPropSpot
{
public:
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropDoorSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropDoorSpot")
	}
	static class ALPropDoorSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPropDoorSpot>();
	}
};
DUMPER7_ASSERTS_ALPropDoorSpot;

// Class ProjectP.LDialogControl
// 0x0040 (0x0068 - 0x0028)
class ULDialogControl final : public UObject
{
public:
	struct FLDisplayableDialog                    Dialogs;                                           // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FDialogInfoPtr                         ScriptInfo;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FDialogInfoPtr>                 MenuItemInfos;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         SelectedMenuIndex;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEssensialNow;                                    // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FLDialogExecute Execute();
	struct FLDialogExecute ExecuteSelect(int32 InMenuIdx);
	TArray<int32> GetMenuItemNotifies();
	TArray<class FText> GetMenuItemTexts();
	class FText GetNameText();
	class FText GetScriptText();
	void OnCloseUIByExecute(class FName WidgetTableName);
	int32 StartExecute();

	struct FDialogInfoPtr GetSelectedMenuInfoPtr() const;
	const struct FTalkerInfoPtr GetTalkerInfo() const;
	bool IsHoldSelectDialog() const;
	bool IsValid() const;
	bool WillExit() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDialogControl")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDialogControl")
	}
	static class ULDialogControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULDialogControl>();
	}
};
DUMPER7_ASSERTS_ULDialogControl;

// Class ProjectP.LDialogDB
// 0x00F0 (0x0118 - 0x0028)
class ULDialogDB final : public UObject
{
public:
	uint8                                         Pad_28[0xF0];                                      // 0x0028(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FLDisplayableDialog GetDialog(class FName DialogCodeName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LDialogDB")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LDialogDB")
	}
	static class ULDialogDB* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULDialogDB>();
	}
};
DUMPER7_ASSERTS_ULDialogDB;

// Class ProjectP.LPartsActor
// 0x0020 (0x0240 - 0x0220)
class ALPartsActor final : public AActor
{
public:
	uint8                                         Pad_220[0x10];                                     // 0x0220(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLDropPrimitive>                DropPrimitives;                                    // 0x0230(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void BoneMerging();
	void BoneMergingSkeletalMesh(class USkeletalMeshComponent* Component);
	void DropParts();
	TArray<class UMeshComponent*> FindDropMeshes();
	class ALCharacter* GetOwnerCharacter();
	class USkeletalMeshComponent* GetPartsAttachParent();
	class ULPartsComponent* GetPartsComponent();
	struct FNPCPartsInfoPtr GetPartsInfo();
	void OnChangeNextDestructState();
	void OnPartsDestroyed();
	void OnRespawn();
	void PartsActivate();
	void PartsDeactivate();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPartsActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPartsActor")
	}
	static class ALPartsActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPartsActor>();
	}
};
DUMPER7_ASSERTS_ALPartsActor;

// Class ProjectP.LInteractSystem
// 0x00B0 (0x0128 - 0x0078)
class ULInteractSystem final : public ULGameSubSystem
{
public:
	uint8                                         Pad_78[0x30];                                      // 0x0078(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ULDialogDebugInfo* Info)> OnRefreshDialogForDebug;           // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFinishDialog;                                    // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class ULDialogControl*                        ActiveDialog;                                      // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULMonologControl*                       ActiveMonolog;                                     // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULDialogDB*                             DialogDB;                                          // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OpenedUIByDialog;                                  // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULDialogDebugInfo*                      DebugResult;                                       // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInInteractVolume;                                // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timer_NeedWaitBeforeUI;                            // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x28];                                     // 0x0100(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class ULDialogDebugInfo* GetDialogDebugInfo();
	class AActor* GetLastDialogingActor();
	void OnClosedDialog(class FName WidgetTableName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LInteractSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LInteractSystem")
	}
	static class ULInteractSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULInteractSystem>();
	}
};
DUMPER7_ASSERTS_ULInteractSystem;

// Class ProjectP.LProjectile_Typical
// 0x0020 (0x0340 - 0x0320)
class ALProjectile_Typical : public ALProjectile
{
public:
	struct FTimerHandle                           Timer_Activate;                                    // 0x0318(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxDistance;                                       // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivated;                                        // 0x0324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_325[0x1B];                                     // 0x0325(0x001B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectile_Typical")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectile_Typical")
	}
	static class ALProjectile_Typical* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALProjectile_Typical>();
	}
};
DUMPER7_ASSERTS_ALProjectile_Typical;

// Class ProjectP.LProjectile_Angular
// 0x0020 (0x0360 - 0x0340)
class ALProjectile_Angular final : public ALProjectile_Typical
{
public:
	uint8                                         Pad_340[0x14];                                     // 0x0340(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentBounceCount;                                // 0x0354(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectile_Angular")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectile_Angular")
	}
	static class ALProjectile_Angular* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALProjectile_Angular>();
	}
};
DUMPER7_ASSERTS_ALProjectile_Angular;

// Class ProjectP.LPlayerInventory
// 0x0170 (0x0198 - 0x0028)
class ULPlayerInventory final : public UObject
{
public:
	uint8                                         Pad_28[0xB0];                                      // 0x0028(0x00B0)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ULItem* Item)> OnAddItem;                                    // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULItem* Item)> OnRemoveItem;                                 // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULItem* Item)> OnUpdateItem;                                 // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULItem* Item, int32 Count)> OnGetItemEventWithCount;         // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULItem* Item, int32 Count)> OnGetItemSpecialWithCount;       // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMap<ELItemSecondCategory, struct FLInvenCategoryItemList> ItemCategoryMap;                      // 0x0128(0x0050)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<class ULWeaponItem*>                   WeaponItemList;                                    // 0x0178(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<class ULItem*>                         AllItemList;                                       // 0x0188(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)

public:
	bool AbandonItem(class ULItem* Item, int32 RemoveCount);
	bool AddItem(class ULItem* Item);
	void BlockNewNotification(bool InBlocked);
	void ClearAllNotification();
	bool ConsumeItem(class ULItem* Item, int32 ConsumeCount);
	bool ConsumeItemByCodeName(class FName CodeName, int32 ConsumeCount);
	void EmptyItems();
	TArray<class ULItem*> FindBladeItems();
	TArray<class ULItem*> FindCategoryItems(ELItemSecondCategory Category);
	TArray<class ULItem*> FindHandleItems();
	class ULItem* FindItemByCodeName(class FName CodeName);
	TArray<class ULItem*> FindItemsByCodeName(class FName CodeName);
	TArray<class ULItem*> FindUICategoryItems(ELItemFirstCategory Category);
	const TArray<class ULItem*> GetAllItems();
	const TMap<ELItemSecondCategory, struct FLInvenCategoryItemList> GetItemCategoryMap();
	int32 GetItemTotalCountByCodeName(class FName CodeName);
	const TArray<class ULWeaponItem*> GetWeaponItems();
	int32 GetWeaponTotalCountByCodeName(class FName HandleCodeName, class FName BladeCodeName);
	bool HasItem(class ULItem* Item);
	bool IsNotiCategory(ELItemFirstCategory Category);
	bool IsNotiItem(class ULItem* InItem);
	bool MoveItemToLocker(class ULItem* Item, int32 ItemCount);
	void RechargeConsumeItems();
	bool RemoveItem(class ULItem* Item);

	bool HasSameItem(class FName ItemCodeName) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPlayerInventory")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPlayerInventory")
	}
	static class ULPlayerInventory* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPlayerInventory>();
	}
};
DUMPER7_ASSERTS_ULPlayerInventory;

// Class ProjectP.LWeaponItem
// 0x0048 (0x00F0 - 0x00A8)
class ULWeaponItem final : public ULItem
{
public:
	struct FLWeaponPart                           BladePart;                                         // 0x00A8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bHeroicWeapon;                                     // 0x00D8(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SharpnessPoint;                                    // 0x00DC(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELBladeSharpnessType                          SharpnessType;                                     // 0x00E0(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GrindCount;                                        // 0x00E4(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SharpnessRecoverRatio;                             // 0x00E8(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ChangeCorrectionHandle(ELStatCorrectChangeType Type);
	void ConsumeSharpness(int32 InConsumePoint, bool CanBreakWeapon, bool* bIsConsumed);
	class FName GetSharpnessAbnormalStateCodeName(ELBladeSharpnessType Type);
	float GetSharpnessDamageRatio(ELBladeSharpnessType Type);
	float GetSharpnessDestructionRatio(ELBladeSharpnessType Type);
	int32 GetSharpnessRepulseLevel();
	bool IsOnHand();
	bool ReinforceBlade();
	void RestoreSharpness(int32 InPoint, bool IsGrinding);
	void SetHeroicWeapon(bool bHeroic);
	void SetSharpnessPoint(int32 InSharpnessPoint, bool IsGrinding);

	bool CanChangeCorrectionHandle(ELStatCorrectChangeType Type) const;
	bool CanReinforceBlade() const;
	class FName GetBladeCodeName() const;
	struct FItemCommonInfoPtr GetBladeCommonInfo() const;
	struct FItemBladeInfoPtr GetBladeInfo() const;
	struct FItemWeaponReinforceInfoPtr GetBladeReinforceInfo() const;
	int32 GetBladeStat(class AActor* InOwner, ELSecondStat InStat, bool WillReinforceDiffStat) const;
	int32 GetBladeStatBonus(class AActor* InOwner, ELSecondStat InStat, bool WillReinforceDiffStat) const;
	int32 GetCurrentSharpnessPoint() const;
	ELBladeSharpnessType GetCurrentSharpnessType() const;
	struct FHandleStatCorrectionChangeInfoPtr GetHandleChangeCorrectionInfo(ELStatCorrectChangeType Type) const;
	ELStatCorrectChangeType GetHandleChangedCorrectionType() const;
	class FName GetHandleCodeName() const;
	struct FItemCommonInfoPtr GetHandleCommonInfo() const;
	ELHandleCorrectResultGrade GetHandleCorrectionGrade(ELFirstStat Type, ELStatCorrectChangeType WillBeChangeCorrection, int32* OutStackLevel) const;
	struct FItemHandleInfoPtr GetHandleInfo() const;
	int32 GetHandleStat(class AActor* InOwner, ELSecondStat InStat) const;
	int32 GetHandleStatBonus(class AActor* InOwner, ELSecondStat InStat) const;
	int32 GetNecessityFirstStat(ELFirstStat InStat) const;
	struct FItemWeaponReinforceInfoPtr GetNextBladeReinforceInfo() const;
	int32 GetRawBladeStat(ELSecondStat InStat, bool WillReinforceDiffStat) const;
	int32 GetRawHandleStat(ELSecondStat InStat) const;
	void GetSeparatedWeaponParts(class ULItem** OutHandleItem, class ULItem** OutBladeItem) const;
	float GetSharpnessRecoverRatio() const;
	ELElementDamageType GetWeaponElementalType() const;
	class FText GetWeaponName() const;
	bool HasBlade() const;
	bool IsChangedCorrectionHandle() const;
	bool IsHeroicWeapon() const;
	bool IsOriginalWeapon() const;
	bool IsReinforcedBlade() const;
	bool IsSharpnessMax() const;
	TArray<class ULItem*> SeparateWeaponPart() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWeaponItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWeaponItem")
	}
	static class ULWeaponItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWeaponItem>();
	}
};
DUMPER7_ASSERTS_ULWeaponItem;

// Class ProjectP.LSlaveArmItem
// 0x0028 (0x00D0 - 0x00A8)
class ULSlaveArmItem final : public ULItem
{
public:
	int32                                         Ammo_Max;                                          // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ammo_Current;                                      // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ammo_Reload_Cooltime;                              // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ammo_Reload_Amount;                                // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELShotGunAmmoType                             CurrentShotGunAmmoType;                            // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x17];                                      // 0x00B9(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeShotGunAmmo(ELShotGunAmmoType InType);
	void ConsumeAmmo(int32 ConsumeAmmoCount);
	bool IsShotGunSlavearm();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSlaveArmItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSlaveArmItem")
	}
	static class ULSlaveArmItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSlaveArmItem>();
	}
};
DUMPER7_ASSERTS_ULSlaveArmItem;

// Class ProjectP.LMonadUnitItem
// 0x0000 (0x00A8 - 0x00A8)
class ULMonadUnitItem final : public ULItem
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LMonadUnitItem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LMonadUnitItem")
	}
	static class ULMonadUnitItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULMonadUnitItem>();
	}
};
DUMPER7_ASSERTS_ULMonadUnitItem;

// Class ProjectP.LItemDropSystemData
// 0x0000 (0x0220 - 0x0220)
class ALItemDropSystemData : public AActor
{
public:
	void SpawnDropErgoData(const struct FLDropErgoData& DropErgoData);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LItemDropSystemData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LItemDropSystemData")
	}
	static class ALItemDropSystemData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALItemDropSystemData>();
	}
};
DUMPER7_ASSERTS_ALItemDropSystemData;

// Class ProjectP.LItemSystem
// 0x0090 (0x0108 - 0x0078)
class ULItemSystem final : public ULGameSubSystem
{
public:
	TMulticastInlineDelegate<void(class ULItem* Item)> OnUpdateItem;                                 // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULPlayerInventory*                      PlayerInventory;                                   // 0x0090(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULPlayerEquipment*                      PlayerEquipment;                                   // 0x0098(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULPlayerItemLocker*                     PlayerItemLocker;                                  // 0x00A0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class ULProductBuyShop*>               BuyShops;                                          // 0x00A8(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	class ULProductSellShop*                      SellShop;                                          // 0x00B8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class ULProductSpecialShop*>           SpecialShops;                                      // 0x00C0(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	class ULItem*                                 UsedItem;                                          // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULItem*                                 TorsionCoilReservedItem;                           // 0x00D8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULItem*                                 ForceUseReservedItem;                              // 0x00E0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActiveShopCodeName;                                // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           CheckedLettersPage;                                // 0x00F0(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FLItemCostumeTable                     ItemCostumeTable;                                  // 0x0100(0x0008)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	bool AbandonItem(class ULItem* Item, int32 InCount);
	bool ChangeCorrectionHandle(ELStatCorrectChangeType Type, class ULItem* HandleOrWeapon);
	bool CheckItemCanUsed(class ULItem* Item, int32 UseCount);
	bool CombineWeapon(class ULWeaponItem* WeaponToChange, const struct FLWeaponPartInfoForCombine& HandlePart, const struct FLWeaponPartInfoForCombine& BladePart, class ULWeaponItem** OutResultWeaponItem);
	bool CombineWeaponWithoutRestrictions(class ULItem* HandleItem, class ULItem* BladeItem, class ULWeaponItem** OutResultWeaponItem);
	class ULItem* CreateItem(class FName CodeName);
	class ULWeaponItem* CreateWeaponItem(class FName HandleCodeName, class FName BladeCodeName);
	void DecideForceUseItem(bool Result, class FName ItemCodeName);
	bool DestoryItem(class ULItem* Item);
	bool DivideWeapon(class ULWeaponItem* WeaponItem, class ULItem** ResultHandleItem, class ULItem** ResultBladeItem);
	struct FSlavearmAlterItemMatchInfoPtr FindSlavearmAlteredConsumeItemInfo(class FName ConsumeItemCodename, class FName SlaveArmItemCodename);
	void GetBladeListForCombine(class ULWeaponItem* WeaponToChange, TArray<struct FLWeaponPartInfoForCombine>* OutBladeInfoList);
	class ULProductBuyShop* GetBuyShop(class FName ShopCodeName);
	void GetChangeCorrectionHandleNeeds(ELStatCorrectChangeType InType, class ULItem* InHandleOrWeapon, class FName* OutItemCodeName, int32* OutItemCount, int32* OutErgoCount);
	class ULWeaponItem* GetCombineResultWeapon(class ULItem* HandleItem, class ULItem* BladeItem);
	ELConsumeItemSlavearmAtlerableState GetConsumeItemAlterableState(class FName ConsumeItemCodename);
	void GetHandleListForCombine(class ULWeaponItem* WeaponToChange, TArray<struct FLWeaponPartInfoForCombine>* OutHandleInfoList);
	TSoftObjectPtr<class UObject> GetItemToggleImageResource(class ULItem* Item);
	void GetNecessaryMaterialForCombineWeapon(class ULItem* HandleItem, class ULItem* BladeItem, int32* CurrentCost, int32* RequireCost, TArray<struct FLItemRequireCount>* RequireItems);
	void GetNecessaryMaterialForDivideWeapon(class ULWeaponItem* WeaponItem, int32* CurrentCost, int32* RequireCost, struct FLItemRequireCount* Item1, struct FLItemRequireCount* Item2);
	class ULPlayerEquipment* GetPlayerEquipment();
	class ULPlayerInventory* GetPlayerInventory();
	class ULPlayerItemLocker* GetPlayerItemLocker();
	bool GetPulseGaugeRechargeSystemEnable();
	int32 GetPulseItemExhaustedCount();
	int32 GetPulseItemRechargeableCount();
	int32 GetPulseItemRechargedCount();
	bool GetPulseRechargeable();
	class ULItem* GetReadyToUseItem(class ULActBase* Action, int32* OutUseCount);
	TArray<ELItemSecondCategory> GetSecondCategory_Blade();
	TArray<ELItemSecondCategory> GetSecondCategory_FromFirst(ELItemFirstCategory InCategory);
	TArray<ELItemSecondCategory> GetSecondCategory_Handle();
	class ULProductSellShop* GetSellShop();
	class ULProductSpecialShop* GetSpecialShop(class FName ShopCodeName);
	bool GetUnusableNow(class FName ItemCodeName);
	bool MakeComplexItem(class ULItem* ComplexItem_Main, class ULItem* ComplexItem_Unit);
	void OnClosedWindow(class FName WidgetTableName);
	void OnGameDataCharacterSync(class ULCharacterSaveGame* CharacterSaveGame, bool bLoad);
	void OnReadLetter(class FName InLetterName, int32 InPageNum);
	void OnUpdateItemInventory(class ULItem* Item);
	void RechargeConsumeItems();
	bool ReinforceBlade(class ULItem* BladeOrWeapon);
	void RestoreWeaponSharpnessMax();
	void SetPulseGaugeRechargeSystemEnable(bool bEnable);
	bool UseItem(class ULItem* Item, int32 UseCount);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LItemSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LItemSystem")
	}
	static class ULItemSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULItemSystem>();
	}
};
DUMPER7_ASSERTS_ULItemSystem;

// Class ProjectP.LFogGateObject
// 0x0000 (0x02A0 - 0x02A0)
class ALFogGateObject final : public ALLevelObject
{
public:
	void SetFogGateState(ELFogGateState StateData);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LFogGateObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LFogGateObject")
	}
	static class ALFogGateObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALFogGateObject>();
	}
};
DUMPER7_ASSERTS_ALFogGateObject;

// Class ProjectP.LLevelPreloadBoxComponent
// 0x0050 (0x04D0 - 0x0480)
class ULLevelPreloadBoxComponent final : public UBoxComponent
{
public:
	TArray<class FName>                           ProjectileCodeNames;                               // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_488[0x48];                                     // 0x0488(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnComponentBeginOverlapProjectile(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnComponentEndOverlapProjectlie(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLevelPreloadBoxComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLevelPreloadBoxComponent")
	}
	static class ULLevelPreloadBoxComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLevelPreloadBoxComponent>();
	}
};
DUMPER7_ASSERTS_ULLevelPreloadBoxComponent;

// Class ProjectP.LSequenceTransformTracker
// 0x0090 (0x02B0 - 0x0220)
class ALSequenceTransformTracker final : public AActor
{
public:
	struct FLSequenceTarget                       TrackingTargetFirst;                               // 0x0220(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLSequenceTarget                       TrackingTargetSecond;                              // 0x0260(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         BlendAlpha;                                        // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4[0xC];                                      // 0x02A4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSequenceTransformTracker")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSequenceTransformTracker")
	}
	static class ALSequenceTransformTracker* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALSequenceTransformTracker>();
	}
};
DUMPER7_ASSERTS_ALSequenceTransformTracker;

// Class ProjectP.LCineCameraActor
// 0x0000 (0x0860 - 0x0860)
class ALCineCameraActor final : public ACineCameraActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCineCameraActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCineCameraActor")
	}
	static class ALCineCameraActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALCineCameraActor>();
	}
};
DUMPER7_ASSERTS_ALCineCameraActor;

// Class ProjectP.LLevelSequenceSystemData
// 0x0000 (0x0220 - 0x0220)
class ALLevelSequenceSystemData : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLevelSequenceSystemData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLevelSequenceSystemData")
	}
	static class ALLevelSequenceSystemData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALLevelSequenceSystemData>();
	}
};
DUMPER7_ASSERTS_ALLevelSequenceSystemData;

// Class ProjectP.LLevelSequenceUtilFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULLevelSequenceUtilFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ApplyPCCommand(class FName Command);
	static void LockPlayerAction();
	static void UnLockPlayerAction();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLevelSequenceUtilFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLevelSequenceUtilFuncLibrary")
	}
	static class ULLevelSequenceUtilFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLevelSequenceUtilFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULLevelSequenceUtilFuncLibrary;

// Class ProjectP.LLevelSkeletalMeshComponent
// 0x0010 (0x0EE0 - 0x0ED0)
class ULLevelSkeletalMeshComponent final : public USkeletalMeshComponent
{
public:
	uint8                                         Pad_EC8[0x18];                                     // 0x0EC8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLevelSkeletalMeshComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLevelSkeletalMeshComponent")
	}
	static class ULLevelSkeletalMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLevelSkeletalMeshComponent>();
	}
};
DUMPER7_ASSERTS_ULLevelSkeletalMeshComponent;

// Class ProjectP.LLevelStreamingVolume
// 0x0008 (0x0278 - 0x0270)
class ALLevelStreamingVolume final : public ALevelStreamingVolume
{
public:
	EStreamingLayer                               StreamingLayer;                                    // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysLoadStreaming;                              // 0x0271(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_272[0x6];                                      // 0x0272(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLevelStreamingVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLevelStreamingVolume")
	}
	static class ALLevelStreamingVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALLevelStreamingVolume>();
	}
};
DUMPER7_ASSERTS_ALLevelStreamingVolume;

// Class ProjectP.LManualLevelStreamingVolume
// 0x0008 (0x0278 - 0x0270)
class ALManualLevelStreamingVolume final : public ALevelStreamingVolume
{
public:
	uint8                                         bHighPriority : 1;                                 // 0x0270(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LManualLevelStreamingVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LManualLevelStreamingVolume")
	}
	static class ALManualLevelStreamingVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALManualLevelStreamingVolume>();
	}
};
DUMPER7_ASSERTS_ALManualLevelStreamingVolume;

// Class ProjectP.LManualLevelStreamingTirgger
// 0x0008 (0x0228 - 0x0220)
class ALManualLevelStreamingTirgger final : public AActor
{
public:
	class UBoxComponent*                          CollisionComponent;                                // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LManualLevelStreamingTirgger")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LManualLevelStreamingTirgger")
	}
	static class ALManualLevelStreamingTirgger* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALManualLevelStreamingTirgger>();
	}
};
DUMPER7_ASSERTS_ALManualLevelStreamingTirgger;

// Class ProjectP.LLight
// 0x0000 (0x0220 - 0x0220)
class ALLight final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLight")
	}
	static class ALLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALLight>();
	}
};
DUMPER7_ASSERTS_ALLight;

// Class ProjectP.LLockOnSystemData
// 0x0108 (0x0328 - 0x0220)
class ALLockOnSystemData : public AActor
{
public:
	struct FNoneLockOnAutoGuideData               NoneLockOnAutoGuideData;                           // 0x0220(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsLockOn;                                         // 0x0238(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LockOnTarget;                                      // 0x0240(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrnetCameraRotationLagSpeed;                     // 0x0248(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugMode;                                        // 0x024C(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugSeeTargetsHiddenInEnvionment;                // 0x024D(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugTarget;                                      // 0x024E(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugScreenPos;                                   // 0x024F(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugSensitiveRotation;                           // 0x0250(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTestFunction;                                     // 0x0251(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSensitiveRotationYaw;                          // 0x0252(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRotationYawSectionData;                        // 0x0253(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLRotationYawSectionData>       RotationYawSectionDatas;                           // 0x0258(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLFloatInterval                        LimitPitchMinMax;                                  // 0x0268(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FLFloatInterval                        HoldPitchStopMove;                                 // 0x0270(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FLockOnSensitiveRotation               SensitiveRotation;                                 // 0x0278(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FLockOnFocusedTargetOffsetMove         FocusedTargetOffsetMove;                           // 0x028C(0x002C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TryingLockOnRotationSpeed;                         // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBlockInverse;                                  // 0x02BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraLag;                                  // 0x02BD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraRotationLag;                          // 0x02BE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BF[0x1];                                      // 0x02BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLagSpeed;                                    // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraRotationLagSpeed;                            // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLagMaxDistance;                              // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLimitPitchAngle;                                // 0x02CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLimitPitchAngle;                                // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLockOnImportanceFactor                ImportanceFactor;                                  // 0x02D4(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ScreenVerticalRate;                                // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeNearbyDistanceCheckFromTarget;              // 0x02F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChangeNearbyDistance;                              // 0x02F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FowardCollectDistance;                             // 0x02FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InheritCollectDistance;                            // 0x0300(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CollectFOVScaling;                                 // 0x0304(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UpperBodyLookAtBoneName;                           // 0x030C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockOnPostponeTime;                                // 0x0314(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeNearbyDelayTime;                             // 0x0318(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamePadPressValue;                                 // 0x031C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MousePressValue;                                   // 0x0320(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLockOnSystemData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLockOnSystemData")
	}
	static class ALLockOnSystemData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALLockOnSystemData>();
	}
};
DUMPER7_ASSERTS_ALLockOnSystemData;

// Class ProjectP.LLockOnSystem
// 0x07A8 (0x0820 - 0x0078)
class alignas(0x10) ULLockOnSystem final : public ULGameSubSystem
{
public:
	TMulticastInlineDelegate<void()>              OnStartLockOnMode;                                 // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFinishLockOnMode;                                // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class ALLockOnSystemData*                     LockOnData;                                        // 0x0098(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A0[0x780];                                     // 0x00A0(0x0780)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsFocusTarget(class AActor* CheckActor);

	class AActor* GetLockOnTargetActor() const;
	struct FVector GetLockOnTargetPointLocation() const;
	bool IsLockOnMode() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLockOnSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLockOnSystem")
	}
	static class ULLockOnSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLockOnSystem>();
	}
};
DUMPER7_ASSERTS_ULLockOnSystem;

// Class ProjectP.LMiscUtilFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULMiscUtilFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UMaterialInstanceDynamic* AddPostProcessMaterial(class UPostProcessComponent* PostProcessComponent, class UMaterialInterface* Material, float InWeight);
	static class UAudioComponent* AttachFollowingEnvSound(class FName InCodeName, ELPhysicalSurfaceType InPhysicalSurface, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed);
	static void ChangeMaterialColor(const TArray<class UMeshComponent*>& MeshComponents, class FName ParameterName, const struct FLinearColor& Value);
	static void ChangeMaterialScalar(const TArray<class UMeshComponent*>& MeshComponents, class FName ParameterName, float Value);
	static void ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, struct FTimerHandle& Handle);
	static ELPhysicalSurfaceType ConvertPhysicalSurfaceNameToEnum(class FName InPhysicalSurfaceName);
	static ELPhysicalSurfaceType ConvertPhysicalSurfaceToEnum(EPhysicalSurface InPhysicalSurface);
	static bool ExecuteContentCommand(class FName CommandCodeName);
	static bool ExecuteWorldEvent(ELCallBackEventType CallBackEventType, const class FString& Param1, const class FString& Param2);
	static bool FindClosestBoneOnPhysicsAsset(class USkeletalMeshComponent* MeshComponent, const struct FVector& WorldPosition, const struct FVector& WorldImpulse, bool bApproximate, const TArray<class FName>& SearchBoneNames, class FName* ClosestBoneName);
	static class UPrimitiveComponent* FindComponentForEffect(class USkeletalMeshComponent* SkeletalMeshComponent, class AActor* Actor, const class FName& FXSocket, ELMeshSelectionType MeshSelectionType);
	static bool FindLowerBoneList(class USkeletalMeshComponent* MeshComponent, class FName BoneName, TArray<class FName>* BoneList);
	static bool FindNearbyBoneList(class USkeletalMeshComponent* MeshComponent, class FName BoneName, TArray<class FName>* BoneList);
	static float FindNearestFloatInArray(const TArray<float>& FloatArray, float InputFloat);
	static bool FindSplashBloodFx(ELBloodEffectType InBloodType, class UNiagaraSystem** OutParticle, class UParticleSystem** OutTrail);
	static bool FindWeatherFx(class FName InCodeName, class UNiagaraSystem** OutNiagara, struct FVector* OutOffset, TMap<class FName, float>* OutDefaultScalarVariables, TMap<class FName, struct FColor>* OutDefautlColorVariables);
	static bool FindWeatherSound(class FName InCodeName, class USoundBase** OutSound, TMap<class FName, float>* OutDefaultScalarVariables, TMap<class FName, struct FColor>* OutDefautlColorVariables);
	static bool GameObject_Activate(class AActor* TargetActor, bool ForceReset);
	static bool GameObject_Deactivate(class AActor* TargetActor);
	static ELGameObjectState GameObject_GetState(class AActor* TargetActor);
	static void GetBuildConfiguration(class FString* Configuration);
	static class ULCommonConstantValues* GetConstantValues();
	static struct FVector GetCurrentLever(class APawn* TargetActor);
	static class ULEquipmentComponent* GetEquipmentComponentBP(class AActor* TargetActor);
	static class ULFXComponent* GetFXComponent(class AActor* TargetActor);
	static struct FVector GetHitSweepLocation(const struct FHitResult& HitResult);
	static class ULBodyStainComponent* GetLBodyStainComponentBP(class AActor* TargetActor, EExecutePin* Branches);
	static void GetMeshComponentsBySelectionType(class AActor* Actor, TArray<class UMeshComponent*>* OutComponents, ELMeshSelectionType SelectType);
	static class FName GetObjectFName(class UObject* Object);
	static ELWeaponCorrectionPhysicalGrade GetProjectileCorrectionGrade(ELFirstStat Stat, const class ULItem* ConsumeItem);
	static bool GetRigidBodyBoneList(class USkeletalMeshComponent* MeshComponent, TArray<class FName>* BoneList);
	static bool GetRigidBodyBox(class USkeletalMeshComponent* MeshComponent, class FName BoneName, struct FVector* Location, struct FRotator* Rotation, struct FVector* BoundExtent);
	static bool GetRigidBodyBoxNearby(class USkeletalMeshComponent* MeshComponent, class FName BoneName, struct FVector* Location, struct FRotator* Rotation, struct FVector* BoundExtent);
	static int32 GetShaderPrecompileRemainingCount();
	static ELWeaponCorrectionPhysicalGrade GetSlaveArmCorrectionGrade(ELFirstStat Stat, const class ULItem* SlaveArmItem);
	static void GetSpecialBuffLocalText(class FName CodeName, class FText* OutName, class FText* OutTooltip);
	static class ALStatRoomPCCharacter* GetStatRoomPC(class UObject* WorldContextObject);
	static void GetWeaponMeshComponentsBySelectionType(class ALWeapon* WeaponActor, TArray<class UMeshComponent*>* OutComponents, ELMeshSelectionType SelectType);
	static bool IsLiquidSurface(ELPhysicalSurfaceType PhysicalSurfaceType);
	static bool IsNearPC(class UObject* WorldContextObject, const struct FVector& Location);
	static bool IsPCInBox(const class UObject* WorldContextObject, class UBoxComponent* Box);
	static bool IsRightAcceptButton();
	static bool IsValidEventCondition(class FName ConditionName);
	static class UActorComponent* LoadAndAddComponent(class AActor* TargetActor, TSoftClassPtr<class UClass> TargetComponentClass);
	static class USceneComponent* LoadAndAttachToComponent(class USceneComponent* AttachTargetComponent, TSoftClassPtr<class UClass> TargetComponentClass, class FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	static void LogBP(class UObject* WorldContextObject, const class FString& Msg, class UObject* LogInstigator, bool ShowScreen, float ShowScreenDuration);
	static void LogForWarningBP(class UObject* WorldContextObject, const class FString& Msg, class UObject* LogInstigator, bool ShowScreen, float ShowScreenDuration);
	static void MessagePump();
	static bool PlayCameraShake(class UObject* WorldContextObject, class FName TableCodeName, const struct FVector& Epicenter);
	static class UAudioComponent* PlayCharacterSoundAtLocation(const class UObject* WorldContextObject, class FName EventName, class FName CharacterSoundTypeCodeName, const struct FTransform& SpawnTransform, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	static class UAudioComponent* PlayCharacterSoundAttached(class FName EventName, class FName CharacterSoundTypeCodeName, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	static bool PlayExplosiveKillFx(class AActor* TargetActor, class FName EventName, class FName Attribute, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, const TArray<class FName>& TargetFxSocketArray);
	static struct FLAttachedEffectSet PlayFxCommon_Attach(class AActor* TargetActor, class FName EventName, class FName SocketName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bAutoDestroy, bool bPlayFx, bool bPlaySound);
	static void PlayFxCommon_Location(class AActor* TargetActor, class FName EventName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, float VolumeMultiplier, bool bPlayFx, bool bPlaySound);
	static bool PlayHitFx(class UObject* WorldContextObject, class AActor* Victim, ELHitFXType InHitFxType, ELHitFX_SecondaryType InSecondType, ELPhysicalSurfaceType InAttackerMaterial, class FName Attribute, ELSwingPowerType InPower, ELFxVictimType VictimType, const struct FTransform& SpawnTransform);
	static bool PlayHitFxAttached(class AActor* ActorToAttach, ELHitFXType InHitFxType, ELHitFX_SecondaryType InSecondType, ELPhysicalSurfaceType InAttackerMaterial, class FName Attribute, ELSwingPowerType InPower, ELFxVictimType VictimType);
	static bool PlayHitSFX(class UObject* WorldContextObject, ELHitSoundType InHitSoundType, ELHitSound_SecondaryType InSecondType, class FName Attribute, ELPhysicalSurfaceType InAttackerMaterial, ELPhysicalSurfaceType InPhysicalSurface, ELSwingPowerType InPower, ELFxVictimType VictimType, const struct FTransform& SpawnTransform, float VolumeMultiplier, float PitchMultiplier, class AActor* OwningActor, bool bPlay2DSound);
	static class UNiagaraComponent* PlayPhysicalSurfaceFxAtLocation(const class UObject* WorldContextObject, class FName EventName, ELPhysicalSurfaceType PhysicalSurface, const struct FTransform& SpawnTransform, bool bAutoDestroy);
	static class UNiagaraComponent* PlayPhysicalSurfaceFxAttached(class FName EventName, ELPhysicalSurfaceType PhysicalSurface, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bAutoDestroy);
	static class UAudioComponent* PlayPhysicalSurfaceSoundAtLocation(const class UObject* WorldContextObject, class FName EventName, ELPhysicalSurfaceType PhysicalSurface, class FName CharacterSoundTypeCodeName, const struct FTransform& SpawnTransform, float CurveValue, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	static class UAudioComponent* PlayPhysicalSurfaceSoundAttached(class FName EventName, ELPhysicalSurfaceType PhysicalSurface, class FName CharacterSoundTypeCodeName, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float CurveValue, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	static void PlayRepulseFx(const class UObject* WorldContextObject, ELPhysicalSurfaceType AttackerMaterial, ELPhysicalSurfaceType GroundMaterial, const struct FTransform& SpawnTransform);
	static void PlayRepulseSound(const class UObject* WorldContextObject, ELPhysicalSurfaceType AttackerMaterial, ELPhysicalSurfaceType GroundMaterial, const struct FTransform& SpawnTransform, float VolumeModifier, float PitchModifier);
	static bool PlaySmashFX(class UObject* WorldContextObject, ELPhysicalSurfaceType InAttackMaterial, ELPhysicalSurfaceType InGroundMaterial, ELSwingPowerType InPower, const struct FTransform& SpawnTransform);
	static void PlaySparkFx(const class UObject* WorldContextObject, ELPhysicalSurfaceType AttackerMaterial, ELPhysicalSurfaceType GroundMaterial, const struct FTransform& SpawnTransform);
	static void PlaySparkSound(const class UObject* WorldContextObject, ELPhysicalSurfaceType AttackerMaterial, ELPhysicalSurfaceType GroundMaterial, const struct FTransform& SpawnTransform, float VolumeModifier, float PitchModifier);
	static void PlaySwingSFX(class UAudioComponent** OutSwingSfxComponent, class UAudioComponent** OutEnchantSfxComponent, class USceneComponent* TargetComponent, class FName InCodeName, ELSkillMotionType InMotionType, ELSwingPowerType InPower, ELAbnormalEnchantType InEnchantType, class FName TargetSocketName, const struct FVector& OffsetLocation, float VolumeMultiplier, float PitchMultiplier);
	static void PrintActionGroupPathAssets(class FName ActionGroupCodeName);
	static void PrintNPCLoadAssets(class FName NPCCodeName);
	static class ALWeapon* Proto_EquipSubWeapon(class FName HandleCodeName, class FName BladeCodeName);
	static class ALWeapon* Proto_GetSubWeapon(class AActor* TargetActor);
	static int32 Proto_GetSubWeaponIndex();
	static void Proto_ResetSubWeapon();
	static void RemovePostProcessMaterial(class UPostProcessComponent* PostProcessComponent, class UMaterialInstanceDynamic* MaterialInstnaceDynamic);
	static void SetAudioListenerPosition_AudioListenerPositionComponent(const struct FVector& Offset, float LerpDuration);
	static void SetAudioListenerPosition_Camera(const struct FVector& Offset, float LerpDuration);
	static void SetAudioListenerPosition_Character(float LerpDuration);
	static void SetAudioListenerPosition_CustomLocation(const struct FVector& Location, float LerpDuration);
	static void SetAudioListenerPosition_StatRoom();
	static bool SetupMainCamera(class ACharacter* TargetActor);
	static class UForceFeedbackComponent* SpawnForceFeedbackAtLocation(const class UObject* WorldContextObject, class UForceFeedbackEffect* ForceFeedbackEffect, const struct FVector& Location, const struct FRotator& Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);
	static class UForceFeedbackComponent* SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);
	static class ULDecalComponent* SpawnMaterialVaryingDecalAtLocation(const class UObject* WorldContextObject, class ULMaterialVarying* InMaterialVarying, ELMaterialVaryingPlayType InPlayType, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation);
	static class UNiagaraComponent* SpawnSystemAttachedWithParameters(class AActor* ActorToAttach, const struct FLNiagaraWithParameters& NiagaraWithParameters);
	static class ULWindSourceComponent* SpawnWindSourceAtLocation(const class UObject* WorldContextObject, float WindSpeed, bool bPointWind, const struct FVector& VolumeSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan);
	static bool WasRenderedActor(class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LMiscUtilFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LMiscUtilFuncLibrary")
	}
	static class ULMiscUtilFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULMiscUtilFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULMiscUtilFuncLibrary;

// Class ProjectP.LMovieSystem
// 0x0010 (0x0088 - 0x0078)
class ULMovieSystem final : public ULGameSubSystem
{
public:
	class ALMovieSystemData*                      SystemData;                                        // 0x0078(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ReserveMovieCodeName;                              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnMediaClosed(class FName MovieCodeName);
	void OnMediaOpened(class FName MovieCodeName);
	void OnMediaReachedEnd(class FName MovieCodeName);
	bool PlayBinkMovie(class FName MovieCodeName);
	void StopBinkMovie();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LMovieSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LMovieSystem")
	}
	static class ULMovieSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULMovieSystem>();
	}
};
DUMPER7_ASSERTS_ULMovieSystem;

// Class ProjectP.LNavLinkProxy
// 0x0000 (0x0270 - 0x0270)
class ALNavLinkProxy final : public ANavLinkProxy
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LNavLinkProxy")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LNavLinkProxy")
	}
	static class ALNavLinkProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALNavLinkProxy>();
	}
};
DUMPER7_ASSERTS_ALNavLinkProxy;

// Class ProjectP.LNPCAnimInstance
// 0x0000 (0x0660 - 0x0660)
class ULNPCAnimInstance final : public ULAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LNPCAnimInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LNPCAnimInstance")
	}
	static class ULNPCAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULNPCAnimInstance>();
	}
};
DUMPER7_ASSERTS_ULNPCAnimInstance;

// Class ProjectP.LNPCController
// 0x0000 (0x0D68 - 0x0D68)
class ALNPCController : public ALAIController
{
public:
	static class ALNPCController* Get(class AActor* Actor);

	void DeadCharacterBP();
	void EndCombatState();
	bool IsCombatState();
	void OnRespawnBP();
	void ResetBBKeys();
	void RunInitBehaviorTree(class UBehaviorTree* CustomBehaviroTree);
	void SelectCommonActionBP(const class FName& CommonActionMontageName, class FName* OutActionClassName, class ULActPayloadBase** OutPayload);
	void SetActivate(bool bInActivate);
	void StartCombatState();

	bool IsActivate() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LNPCController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LNPCController")
	}
	static class ALNPCController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALNPCController>();
	}
};
DUMPER7_ASSERTS_ALNPCController;

// Class ProjectP.LNPCSpotComponentForGuide
// 0x0000 (0x0470 - 0x0470)
class ULNPCSpotComponentForGuide final : public USphereComponentForGuide
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LNPCSpotComponentForGuide")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LNPCSpotComponentForGuide")
	}
	static class ULNPCSpotComponentForGuide* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULNPCSpotComponentForGuide>();
	}
};
DUMPER7_ASSERTS_ULNPCSpotComponentForGuide;

// Class ProjectP.LPathwayCollisionComponent
// 0x0000 (0x0480 - 0x0480)
class ULPathwayCollisionComponent final : public UBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPathwayCollisionComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPathwayCollisionComponent")
	}
	static class ULPathwayCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPathwayCollisionComponent>();
	}
};
DUMPER7_ASSERTS_ULPathwayCollisionComponent;

// Class ProjectP.LObjectManagementSystemData
// 0x0000 (0x0220 - 0x0220)
class ALObjectManagementSystemData : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LObjectManagementSystemData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LObjectManagementSystemData")
	}
	static class ALObjectManagementSystemData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALObjectManagementSystemData>();
	}
};
DUMPER7_ASSERTS_ALObjectManagementSystemData;

// Class ProjectP.LGoldenTree
// 0x0028 (0x0050 - 0x0028)
class ULGoldenTree final : public UObject
{
public:
	uint8                                         Pad_28[0x1C];                                      // 0x0028(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ALPropSpot>              TreeSpot;                                          // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetHarvestRemainSec();
	void OnGameDataCharacterSync(class ULCharacterSaveGame* CharacterSaveGame, bool bLoad);

	float GetBoostExcelGoalSec() const;
	float GetBoostExcelSec() const;
	int32 GetGoldStackLimit() const;
	int32 GetHarvestableCount() const;
	ELGoldenTreeState GetState() const;
	bool IsBoostNow() const;
	bool IsPlayerReached() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGoldenTree")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGoldenTree")
	}
	static class ULGoldenTree* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULGoldenTree>();
	}
};
DUMPER7_ASSERTS_ULGoldenTree;

// Class ProjectP.LObjectPoolInterface
// 0x0000 (0x0000 - 0x0000)
class ILObjectPoolInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LObjectPoolInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LObjectPoolInterface")
	}
	static class ILObjectPoolInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILObjectPoolInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ILObjectPoolInterface;

// Class ProjectP.LPoolingObjectManager
// 0x0050 (0x0078 - 0x0028)
class ULPoolingObjectManager final : public UObject
{
public:
	TMap<class UClass*, struct FLPoolingObjectHolder> PoolingObjectMap;                              // 0x0028(0x0050)(NativeAccessSpecifierPrivate)

public:
	void Clear();
	void CreateObjects(class UObject* WorldContext, TSoftClassPtr<class UClass> objectClassPtr, int32 Count, bool bCreateOnlySurplusAmount);
	void CreateWidgets(class UObject* WorldContext, TSoftClassPtr<class UClass> widgetClassPtr, int32 Count, bool bCreateOnlySurplusAmount);
	class UObject* GetRecyclableObject(class UObject* WorldContext, TSoftClassPtr<class UClass> objectClassPtr);
	bool ReturnToRecyclingBin(class UObject* WorldContext, class UObject* TargetObject);
	void ShrinkRecyclingBin(class UObject* WorldContext, TSoftClassPtr<class UClass> objectClassPtr, int32 Count);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPoolingObjectManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPoolingObjectManager")
	}
	static class ULPoolingObjectManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPoolingObjectManager>();
	}
};
DUMPER7_ASSERTS_ULPoolingObjectManager;

// Class ProjectP.LObjectPoolSystem
// 0x0028 (0x00A0 - 0x0078)
class ULObjectPoolSystem final : public ULGameSubSystem
{
public:
	uint8                                         Pad_78[0x18];                                      // 0x0078(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class ULPoolingObjectManager*                 PoolingObjectManager;                              // 0x0090(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALObjectPoolSystemData*                 SystemData;                                        // 0x0098(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	int32 CreateNewRecyclables(class UObject* WorldContext, const TSoftClassPtr<class UClass> RecyclablesClass, int32 Count);
	class AActor* GetRecyclables(class UObject* WorldContext, const TSoftClassPtr<class UClass> RecyclablesClass);
	const class ALObjectPoolSystemData* GetSystemData();
	int32 ResizeRecyclingBin(class UObject* WorldContext, const TSoftClassPtr<class UClass> RecyclablesClass, int32 DesiredSize);
	bool ReturnToRecyclingBin(class AActor* TargetActor);
	int32 ShrinkRecyclingBin(class UObject* WorldContext, const TSoftClassPtr<class UClass> RecyclablesClass, int32 DesiredSize);

	int32 GetSizeOfRecyclingBin(class UObject* WorldContext, const TSoftClassPtr<class UClass> RecyclablesClass) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LObjectPoolSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LObjectPoolSystem")
	}
	static class ULObjectPoolSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULObjectPoolSystem>();
	}
};
DUMPER7_ASSERTS_ULObjectPoolSystem;

// Class ProjectP.LOptionSystemData
// 0x0258 (0x0478 - 0x0220)
class ALOptionSystemData : public AActor
{
public:
	int32                                         Visual_RenderScale;                                // 0x0220(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_Viewdistance;                               // 0x0224(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_Antialiasing;                               // 0x0228(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_Postprocess;                                // 0x022C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_Shadow;                                     // 0x0230(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_Texture;                                    // 0x0234(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_Effects;                                    // 0x0238(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_Foliage;                                    // 0x023C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_Shading;                                    // 0x0240(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_Anisotropy;                                 // 0x0244(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_Atmosphere;                                 // 0x0248(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_AmbientOcclusion;                           // 0x024C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_Reflection;                                 // 0x0250(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_FSR;                                        // 0x0254(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_RayTracing;                                 // 0x0258(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_FrameRate;                                  // 0x025C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_RenderScale;                                   // 0x0260(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_Viewdistance;                                  // 0x0264(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_Antialiasing;                                  // 0x0268(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_Postprocess;                                   // 0x026C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_Shadow;                                        // 0x0270(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_Texture;                                       // 0x0274(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_Effects;                                       // 0x0278(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_Foliage;                                       // 0x027C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_Shading;                                       // 0x0280(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_Anisotropy;                                    // 0x0284(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_Atmosphere;                                    // 0x0288(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_AmbientOcclusion;                              // 0x028C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_Reflection;                                    // 0x0290(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_FSR;                                           // 0x0294(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_RayTracing;                                    // 0x0298(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_FrameRate;                                     // 0x029C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_RenderScale;                                // 0x02A0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_Viewdistance;                               // 0x02A4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_Antialiasing;                               // 0x02A8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_Postprocess;                                // 0x02AC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_Shadow;                                     // 0x02B0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_Texture;                                    // 0x02B4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_Effects;                                    // 0x02B8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_Foliage;                                    // 0x02BC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_Shading;                                    // 0x02C0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_Anisotropy;                                 // 0x02C4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_Atmosphere;                                 // 0x02C8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_AmbientOcclusion;                           // 0x02CC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_Reflection;                                 // 0x02D0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_FSR;                                        // 0x02D4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_RayTracing;                                 // 0x02D8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_FrameRate;                                  // 0x02DC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_RenderScale;                            // 0x02E0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_Viewdistance;                           // 0x02E4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_Antialiasing;                           // 0x02E8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_Postprocess;                            // 0x02EC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_Shadow;                                 // 0x02F0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_Texture;                                // 0x02F4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_Effects;                                // 0x02F8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_Foliage;                                // 0x02FC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_Shading;                                // 0x0300(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_Anisotropy;                             // 0x0304(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_Atmosphere;                             // 0x0308(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_AmbientOcclusion;                       // 0x030C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_Reflection;                             // 0x0310(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_FSR;                                    // 0x0314(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_RayTracing;                             // 0x0318(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Visual_2nd_FrameRate;                              // 0x031C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_RenderScale;                               // 0x0320(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_Viewdistance;                              // 0x0324(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_Antialiasing;                              // 0x0328(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_Postprocess;                               // 0x032C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_Shadow;                                    // 0x0330(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_Texture;                                   // 0x0334(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_Effects;                                   // 0x0338(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_Foliage;                                   // 0x033C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_Shading;                                   // 0x0340(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_Anisotropy;                                // 0x0344(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_Atmosphere;                                // 0x0348(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_AmbientOcclusion;                          // 0x034C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_Reflection;                                // 0x0350(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_FSR;                                       // 0x0354(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_RayTracing;                                // 0x0358(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HFR_2nd_FrameRate;                                 // 0x035C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_RenderScale;                            // 0x0360(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_Viewdistance;                           // 0x0364(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_Antialiasing;                           // 0x0368(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_Postprocess;                            // 0x036C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_Shadow;                                 // 0x0370(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_Texture;                                // 0x0374(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_Effects;                                // 0x0378(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_Foliage;                                // 0x037C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_Shading;                                // 0x0380(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_Anisotropy;                             // 0x0384(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_Atmosphere;                             // 0x0388(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_AmbientOcclusion;                       // 0x038C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_Reflection;                             // 0x0390(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_FSR;                                    // 0x0394(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_RayTracing;                             // 0x0398(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Action_2nd_FrameRate;                              // 0x039C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Low_RenderScaleStep;                               // 0x03A0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Low_ViewdistanceStep;                              // 0x03A4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Low_AntialiasingStep;                              // 0x03A8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Low_PostprocessStep;                               // 0x03AC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Low_ShadowStep;                                    // 0x03B0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Low_TextureStep;                                   // 0x03B4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Low_EffectsStep;                                   // 0x03B8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Low_FoliageStep;                                   // 0x03BC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Low_ShadingStep;                                   // 0x03C0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Low_AnisotropyStep;                                // 0x03C4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Low_AtmosphereStep;                                // 0x03C8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Low_AmbientOcclusionStep;                          // 0x03CC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Low_ReflectionStep;                                // 0x03D0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Medium_RenderScaleStep;                            // 0x03D4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Medium_ViewdistanceStep;                           // 0x03D8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Medium_AntialiasingStep;                           // 0x03DC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Medium_PostprocessStep;                            // 0x03E0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Medium_ShadowStep;                                 // 0x03E4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Medium_TextureStep;                                // 0x03E8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Medium_EffectsStep;                                // 0x03EC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Medium_FoliageStep;                                // 0x03F0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Medium_ShadingStep;                                // 0x03F4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Medium_AnisotropyStep;                             // 0x03F8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Medium_AtmosphereStep;                             // 0x03FC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Medium_AmbientOcclusionStep;                       // 0x0400(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Medium_ReflectionStep;                             // 0x0404(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High_RenderScaleStep;                              // 0x0408(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High_ViewdistanceStep;                             // 0x040C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High_AntialiasingStep;                             // 0x0410(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High_PostprocessStep;                              // 0x0414(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High_ShadowStep;                                   // 0x0418(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High_TextureStep;                                  // 0x041C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High_EffectsStep;                                  // 0x0420(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High_FoliageStep;                                  // 0x0424(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High_ShadingStep;                                  // 0x0428(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High_AnisotropyStep;                               // 0x042C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High_AtmosphereStep;                               // 0x0430(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High_AmbientOcclusionStep;                         // 0x0434(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High_ReflectionStep;                               // 0x0438(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Epic_RenderScaleStep;                              // 0x043C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Epic_ViewdistanceStep;                             // 0x0440(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Epic_AntialiasingStep;                             // 0x0444(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Epic_PostprocessStep;                              // 0x0448(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Epic_ShadowStep;                                   // 0x044C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Epic_TextureStep;                                  // 0x0450(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Epic_EffectsStep;                                  // 0x0454(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Epic_FoliageStep;                                  // 0x0458(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Epic_ShadingStep;                                  // 0x045C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Epic_AnisotropyStep;                               // 0x0460(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Epic_AtmosphereStep;                               // 0x0464(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Epic_AmbientOcclusionStep;                         // 0x0468(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Epic_ReflectionStep;                               // 0x046C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumAspectRatio;                                // 0x0470(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetDefault_EnableAlignmentToCamera();
	bool GetDefault_EnableCameraShake();
	bool GetDefault_EnableMoveCameraUpDown();
	bool GetDefaultCameraInvert(ECameraDirectOption InRotator);
	int32 GetDefaultCameraSpeedIdx(ECameraDirectOption InRotator);
	int32 GetDefaultDeadZoneIdx(bool LeftStick);
	bool GetDefaultEnableBloodExpression();
	bool GetDefaultEnableMotionBlur();
	bool GetDefaultEnableTutorialPopup();
	bool GetDefaultEnableVideoSubtitle();
	int32 GetDefaultForceFeedbackIdx();
	float GetDefaultFramerateLimit();
	EWindowMode GetDefaultFullscreenMode();
	ELHUDVisible GetDefaultHUDVisibility();
	class FName GetDefaultInputPresetName(bool IsGamePad);
	class FString GetDefaultLanguage();
	int32 GetDefaultLockOnImportanceWeightMultiply();
	EPlayStyleOption GetDefaultPlayStyleOption();
	ELScalabilityLevel GetDefaultScalabilityLevel();
	struct FIntPoint GetDefaultScreenResolution();
	bool GetDefaultUseAutoNewTargetLockOn();
	bool GetDefaultUseAutoTargeting();
	int32 GetDefaultVolumeIdx(ELVolumeType InType);
	bool GetDefaultVSyncEnabled();
	TArray<float> GetSelectableCameraSpeeds(ECameraDirectOption InRotator, bool IsPad);
	TArray<float> GetSelectableDeadZone(bool LeftStick);
	TArray<float> GetSelectableForceFeedback();
	TArray<class FString> GetSelectableLanguages();
	TArray<struct FLLockOnImportanceWeight> GetSelectableLockOnImportanceWeightMultiply();
	TArray<float> GetSelectableVolumes(ELVolumeType InType);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LOptionSystemData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LOptionSystemData")
	}
	static class ALOptionSystemData* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALOptionSystemData>();
	}
};
DUMPER7_ASSERTS_ALOptionSystemData;

// Class ProjectP.LCameraOption
// 0x0018 (0x0060 - 0x0048)
class ULCameraOption final : public ULSubOption
{
public:
	uint8                                         Pad_48[0x18];                                      // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetMoveSpeedStep(ECameraDirectOption InRotator, ELInputOptionType InType);
	bool IsEnableAlignmentToCamera();
	bool IsEnableCameraShake();
	bool IsEnableMoveCameraUpDown();
	bool IsInvertMove(ECameraDirectOption InRotator, ELInputOptionType InType);
	void OnChangedInputMode(bool bGamePad);
	bool SetEnableAlignmentToCamera(bool Enable);
	bool SetEnableCameraShake(bool Enable);
	bool SetEnableMoveCameraUpDown(bool Enable);
	bool SetInvertMove(ECameraDirectOption InRotator, bool InInvert, ELInputOptionType InType);
	bool SetMoveSpeedStep(ECameraDirectOption InRotator, int32 InStep, ELInputOptionType InType);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCameraOption")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCameraOption")
	}
	static class ULCameraOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULCameraOption>();
	}
};
DUMPER7_ASSERTS_ULCameraOption;

// Class ProjectP.LGraphicOption
// 0x0030 (0x0078 - 0x0048)
class ULGraphicOption final : public ULSubOption
{
public:
	uint8                                         Pad_48[0x30];                                      // 0x0048(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AutoScalabilityLevel();
	bool GetCACAOEnabled();
	int32 GetCurrentBrightness();
	EDLSSMode GetCurrentDLSSMode();
	float GetCurrentDLSSSharpness();
	EFSR1Mode GetCurrentFSR1Mode();
	EFSR2Mode GetCurrentFSR2Mode();
	float GetCurrentFSR2Sharpness();
	int32 GetCurrentHDRBrightness();
	int32 GetCurrentHDRContrast();
	EPlayStyleOption GetCurrentPlayStyleOption();
	EReflexMode GetCurrentReflexMode();
	struct FIntPoint GetCurrentScreenResolution();
	EXeSSMode GetCurrentXeSSMode();
	ELScalabilityDefaultLevel GetDetailScalability(EScalabilityType InType);
	bool GetDLSSGEnabled();
	float GetFrameRateLimit();
	EWindowMode GetFullscreenMode();
	class FString GetGraphicCardName();
	int32 GetScreenResolutionStep();
	TArray<struct FIntPoint> GetSelectableScreenResolutions();
	TArray<EDLSSMode> GetSupportedDLSSModes();
	bool Is120HzModeEnabled();
	bool Is120HzModeSupported();
	bool IsCACAOSupported();
	bool IsDLSSGAvailable();
	bool IsDLSSGSupported();
	bool IsDLSSModeSupported(EDLSSMode InMode);
	bool IsDLSSSharpnessAvailable();
	bool IsDLSSSupported();
	bool IsFSR1Supported();
	bool IsFSR2SharpnessAvailable();
	bool IsFSR2Supported();
	bool IsHDROutputEnabled();
	bool IsHDROutputSupported();
	bool IsPlayStyleOptionEnabled();
	bool IsRayTracingAmbientOcclusionEnabled();
	bool IsRayTracingGlobalIlluminationEnabled();
	bool IsRayTracingReflectionsEnabled();
	bool IsRayTracingShadowsEnabled();
	bool IsRayTracingSkyLightEnabled();
	bool IsRayTracingSupported();
	bool IsRayTracingTranslucencyEnabled();
	bool IsReflexModeAvailable();
	bool IsReflexSupported();
	bool IsVRSEnabled();
	bool IsVRSSupported();
	bool IsVSyncEnabled();
	bool IsXeSSSupported();
	bool Set120HzModeEnabled(bool bEnabled);
	bool SetCACAOEnabled(bool InEnable);
	bool SetCurrentBrightness(int32 InBrightness);
	bool SetCurrentHDRBrightness(int32 InBrightness);
	bool SetCurrentHDRContrast(int32 InContrast);
	bool SetDetailScalability(const EScalabilityType InType, ELScalabilityDefaultLevel InValue);
	bool SetDLSSGEnabled(bool InEnabled);
	bool SetDLSSMode(EDLSSMode InMode);
	bool SetDLSSSharpness(float InSharpness);
	bool SetFrameRateLimit(float InFrameratelimit);
	bool SetFSR1Mode(EFSR1Mode InMode);
	bool SetFSR2Mode(EFSR2Mode InMode);
	bool SetFSR2Sharpness(float InSharpness);
	bool SetFullscreenMode(EWindowMode InType);
	bool SetHDROutputEnabled(bool InEnable);
	bool SetPlayStyleOption(const EPlayStyleOption InPlayStyle);
	bool SetRayTracingAmbientOcclusionEnabled(bool bEnabled);
	bool SetRayTracingGlobalIlluminationEnabled(bool bEnabled);
	bool SetRayTracingReflectionsEnabled(bool bEnabled);
	bool SetRayTracingShadowsEnabled(bool bEnabled);
	bool SetRayTracingSkyLightEnabled(bool bEnabled);
	bool SetRayTracingTranslucencyEnabled(bool bEnabled);
	bool SetReflexMode(EReflexMode InMode);
	bool SetScalabilityLevel(ELScalabilityLevel InType);
	bool SetScreenResolutionStep(int32 InStep);
	bool SetVRSEnabled(bool InEnable);
	bool SetVSyncEnabled(bool InEnable);
	bool SetXeSSMode(EXeSSMode InMode);

	ELScalabilityLevel GetCurrentScalabilityLevel() const;
	struct FIntPoint GetDesktopResolution() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LGraphicOption")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LGraphicOption")
	}
	static class ULGraphicOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULGraphicOption>();
	}
};
DUMPER7_ASSERTS_ULGraphicOption;

// Class ProjectP.LKeyboardMouseOption
// 0x0000 (0x0048 - 0x0048)
class ULKeyboardMouseOption final : public ULSubOption
{
public:
	int32 GetMoveSpeedStep(ECameraDirectOption InRotator);
	bool IsInvertMove(ECameraDirectOption InRotator);
	void ResetEditedInputAction();
	bool SetInvertMove(ECameraDirectOption InRotator, bool InInvert);
	bool SetMoveSpeedStep(ECameraDirectOption InRotator, int32 InStep);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LKeyboardMouseOption")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LKeyboardMouseOption")
	}
	static class ULKeyboardMouseOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULKeyboardMouseOption>();
	}
};
DUMPER7_ASSERTS_ULKeyboardMouseOption;

// Class ProjectP.LFirstGameStartOption
// 0x0008 (0x0050 - 0x0048)
class ULFirstGameStartOption final : public ULSubOption
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetAutoSaveAlert();
	bool GetFirstBrightness();
	bool GetFirstLanguage();
	void OnClosedWindow(class FName WidgetTableName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LFirstGameStartOption")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LFirstGameStartOption")
	}
	static class ULFirstGameStartOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULFirstGameStartOption>();
	}
};
DUMPER7_ASSERTS_ULFirstGameStartOption;

// Class ProjectP.LPartsAnimInstance
// 0x0000 (0x02C0 - 0x02C0)
class ULPartsAnimInstance final : public UAnimInstance
{
public:
	class FName                                   AnimState;                                         // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ChangeAnimState(class FName AnimState_0);
	void ClearAnimState();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPartsAnimInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPartsAnimInstance")
	}
	static class ULPartsAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPartsAnimInstance>();
	}
};
DUMPER7_ASSERTS_ULPartsAnimInstance;

// Class ProjectP.LChildActorEditorComponent
// 0x0000 (0x0230 - 0x0230)
class ULChildActorEditorComponent final : public UChildActorComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LChildActorEditorComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LChildActorEditorComponent")
	}
	static class ULChildActorEditorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULChildActorEditorComponent>();
	}
};
DUMPER7_ASSERTS_ULChildActorEditorComponent;

// Class ProjectP.LPathWaySplineComponent
// 0x0000 (0x0550 - 0x0550)
class ULPathWaySplineComponent final : public USplineComponent
{
public:
	class UFont*                                  WayPointFont;                                      // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPathWaySplineComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPathWaySplineComponent")
	}
	static class ULPathWaySplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPathWaySplineComponent>();
	}
};
DUMPER7_ASSERTS_ULPathWaySplineComponent;

// Class ProjectP.LPCController
// 0x00A0 (0x0628 - 0x0588)
class ALPCController final : public APlayerController
{
public:
	uint8                                         Pad_588[0x10];                                     // 0x0588(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultCameraRotationInputSpeed;                   // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateToLockOnPoint;                              // 0x059C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59D[0xF];                                      // 0x059D(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ULActBase>               ActionAtStartLockOn;                               // 0x05AC(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LSBForwardAxisValue;                               // 0x05B4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LSBRightAxisValue;                                 // 0x05B8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnAxisValue;                                     // 0x05BC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookUpAxisValue;                                   // 0x05C0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InteractionStatus;                                 // 0x05C4(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          InteractionMotion;                                 // 0x05C5(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          InteractionLadder;                                 // 0x05C6(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C7[0x11];                                     // 0x05C7(0x0011)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLAudioListenerPosition                AudioListenerPosition;                             // 0x05D8(0x0050)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	bool CanUseItem(class ULItem* Item);
	void DoLookUp(float InAxisValue);
	void DoMoveForward(float InAxisValue);
	void DoMoveRight(float InAxisValue);
	void DoTargetLockOn();
	void DoTurn(float InAxisValue);
	void DoUseItem(class ULItem* Item, int32 UseCount);
	void ExecuteInteractionEvent();
	bool IsInteractionLadder();
	bool IsInteractionMotion();
	bool IsInteractionStatus();
	void OnControllerCommand(const class FString& Command, const TArray<class FString>& Args);
	void OnRecvRespawnFromCharacterBP();
	void ReceiveOnActionStarted(class ULActMgrComponent* InActMgrComponent, class ULActBase* StartedAction);
	void ReceiveOnActionStopCalled(class ULActMgrComponent* InActMgrComponent, class ULActBase* StoppingAction, class ULActBase* ReasonAction);
	void SetAudioListenerPosition_AudioListenerPositionComponent(const struct FVector& Offset, float LerpDuration);
	void SetAudioListenerPosition_Camera(const struct FVector& Offset, float LerpDuration);
	void SetAudioListenerPosition_Character(float LerpDuration);
	void SetAudioListenerPosition_CustomLocation(const struct FVector& Location, float LerpDuration);
	void SetAudioListenerPosition_StatRoom();
	void SetInteractionLadder(bool Motion);

	ELAudioListenerPositionType GetAudioListenerPositionType() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPCController")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPCController")
	}
	static class ALPCController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPCController>();
	}
};
DUMPER7_ASSERTS_ALPCController;

// Class ProjectP.LPlatformSystem
// 0x00D8 (0x0150 - 0x0078)
class alignas(0x10) ULPlatformSystem final : public ULGameSubSystem
{
public:
	TMulticastInlineDelegate<void(bool Result)>   OnNeowizAuth;                                      // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         bSkipNeowizAuth : 1;                               // 0x0088(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bCompleteNeowizAuth;                               // 0x0089(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NWZ_Auth_ID;                                       // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NWZ_Auth_PW;                                       // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NWZ_Auth_Token;                                    // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          NWZ_Auth_ExternalAccount;                          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NeowizAuthInterval;                                // 0x00C4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           NeowizAuthTimerHandle;                             // 0x00C8(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StoreCategory;                                     // 0x00D0(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 StoreProductId;                                    // 0x00E0(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Cache_RefreshPlatformAchievements;                 // 0x00F8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F9[0x57];                                      // 0x00F9(0x0057)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConfirmNeowizAuth(const class FString& ID, const class FString& PW, bool ExternalAccount);
	void ExecuteNeowizAuthRefresh();
	float GetChunkInstallProgress();
	class FString GetGameVersionString();
	class FString GetPlatformName();
	class FString GetPlayerNickName();
	bool IsChunkInstallComplete();
	bool IsNeowizAuthExternalAccount();
	bool IsValidNeowizAuth();
	bool ShowStoreUI();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPlatformSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPlatformSystem")
	}
	static class ULPlatformSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPlatformSystem>();
	}
};
DUMPER7_ASSERTS_ULPlatformSystem;

// Class ProjectP.LPlayerEquipment
// 0x0190 (0x01B8 - 0x0028)
class ULPlayerEquipment final : public UObject
{
public:
	TMulticastInlineDelegate<void(ELEquipSlotType EquipSlot, class ULItem* OldItem, class ULItem* NewItem)> OnChangeEquipItem; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsFirstLine, int32 SlotIndex, class FName OldItemCodeName, class FName NewItemCodeName)> OnChangeUseItem; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ELAssistUseItemSlotType SlotType, class FName OldItemCodeName, class FName NewItemCodeName)> OnChangeAssistUseItem; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName MainItemCodeName, class FName UnitItemCodeName)> OnChangeComplexItem; // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMap<ELEquipSlotType, struct FLEquipItemSlot> EquipSlots;                                        // 0x0068(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLUseItemSlot>                  UseSlots1;                                         // 0x00C0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLUseItemSlot>                  UseSlots2;                                         // 0x00D0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         SelectedIdx_UseSlot1;                              // 0x00E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SelectedIdx_UseSlot2;                              // 0x00E4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ELAssistUseItemSlotType, struct FLAssistUseItemSlot> AssistUseSlots;                        // 0x00E8(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const struct FLEquipItemSlot& EquipSlot)> OnChooseWeaponItem;      // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLEquipItemSlot& SlaveArmSlot)> OnChooseSlaveArmItem; // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FLUseItemSlot& UseSlot)> OnChooseUseItem;             // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FLEquipItemSlot                        ChosenEquipSlot;                                   // 0x0168(0x0018)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FLEquipItemSlot                        ChosenSlaveArmSlot;                                // 0x0180(0x0018)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FLUseItemSlot                          ChosenUseSlot;                                     // 0x0198(0x0014)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	ELItemMaterial                                PartsSetMaterial;                                  // 0x01AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PartsSetAbnormalCodeName;                          // 0x01B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool CheckCanEquipItem(ELEquipSlotType SlotType, class ULItem* Item);
	void ChooseNextSlaveArmItem(bool bSelectPrevious);
	void ChooseNextUseItem(bool bSelectPrevious);
	void ChooseNextWeaponItem(bool bSelectPrevious);
	bool EquipAssistUseItem(ELAssistUseItemSlotType SlotType, class ULItem* Item);
	bool EquipItem(ELEquipSlotType SlotType, class ULItem* Item);
	bool EquipUseItem_CurrentLine(int32 SlotIndex, class ULItem* Item);
	bool EquipUseItem_SpecifiedLine(int32 SlotIndex, class ULItem* Item, bool FirstLine);
	struct FLAssistUseItemSlot FindAssistUseItem(class FName ItemCodeName);
	struct FLEquipItemSlot FindEquipItem(class ULItem* Item);
	TArray<struct FLEquipItemSlot> FindEquipItems_ByEquipGroupId(int32 InEquipGroupId);
	struct FLUseItemSlot FindUseItem_CurrentLine(class FName ItemCodeName);
	struct FLUseItemSlot FindUseItem_SpecifiedLine(class FName ItemCodeName, bool FirstLine);
	class ULItem* GetAssistUseItem(ELAssistUseItemSlotType SlotType);
	class FName GetAssistUseItemCodeName(ELAssistUseItemSlotType SlotType);
	struct FLEquipItemSlot GetChosenSlaveArmItem();
	struct FLUseItemSlot GetChosenUseItem();
	struct FLEquipItemSlot GetChosenWeaponItem();
	void GetChosenWeaponItemBP(class ALWeapon** Weapon, ELEquipSlotType* EquipSlot);
	class ULItem* GetEquipItem(ELEquipSlotType SlotType);
	struct FLEquipItemSlot GetEquipItemSlot(ELEquipSlotType EquipSlotType, bool* bFound);
	class ULItem* GetUseItem_CurrentLine(int32 SlotIndex);
	class ULItem* GetUseItem_SpecifiedLine(int32 SlotIndex, bool FirstLine);
	class FName GetUseItemCodeName_CurrentLine(int32 SlotIndex);
	class FName GetUseItemCodeName_SpecifiedLine(int32 SlotIndex, bool FirstLine);
	struct FLUseItemSlot GetUseItemSlot(bool FirstLine, int32 SlotIndex, bool* bFound);
	TArray<struct FLUseItemSlot> GetUseSlotsLine(bool FirstLine);
	const TArray<struct FLUseItemSlot> GetUseSlotsLine_AllSlot(bool FirstLine);
	void SetUnlockEquipSlot(ELEquipSlotType SlotType, bool bUnlock);
	void SetUnlockEquipSlotByCategory(class FName SlotCategoryType, bool bUnlock);
	void SetUnlockEquipUseSlot(bool bUnlock, int32 Count);
	bool SwapUseSlotsLine();
	bool UnEquipAssistUseItem(ELAssistUseItemSlotType SlotType);
	bool UnEquipItem(ELEquipSlotType SlotType);
	bool UnEquipUseItem_CurrentLine(int32 SlotIndex);
	bool UnEquipUseItem_SpecifiedLine(int32 SlotIndex, bool FirstLine);

	TArray<ELEquipSlotType> GetGearArmSlotTypeList() const;
	TArray<ELEquipSlotType> GetSlaveArmSlotTypeList() const;
	TArray<ELEquipSlotType> GetWeaponSlotTypeList() const;
	bool IsEquipedPartsSet() const;
	bool IsSelectedUseSlotsLineFirst() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPlayerEquipment")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPlayerEquipment")
	}
	static class ULPlayerEquipment* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPlayerEquipment>();
	}
};
DUMPER7_ASSERTS_ULPlayerEquipment;

// Class ProjectP.LPlayerInput
// 0x01E0 (0x0588 - 0x03A8)
class ULPlayerInput final : public UPlayerInput
{
public:
	uint8                                         Pad_3A8[0x1E0];                                    // 0x03A8(0x01E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPlayerInput")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPlayerInput")
	}
	static class ULPlayerInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPlayerInput>();
	}
};
DUMPER7_ASSERTS_ULPlayerInput;

// Class ProjectP.LPlayInputSystem
// 0x00A0 (0x0118 - 0x0078)
class ULPlayInputSystem final : public ULGameSubSystem
{
public:
	TMulticastInlineDelegate<void(bool bGamePad)> OnChangePlayInput;                                 // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EUINavigation Navigation, EInputEvent EventType)> OnInputNavigationKey; // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<struct FLInputAxisSpeedMapping>        InputAxisValueStep;                                // 0x0098(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FLInputAxisSpeedMapping>        InputAxisValueStepForLockOnSideStep;               // 0x00A8(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FLInputAxisSpeedMapping>        InputAxisValueStepForLockOnForwardStep;            // 0x00B8(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FLInputAxisSpeedMapping>        InputAxisValueStepForLockOnBackwardStep;           // 0x00C8(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	float                                         LockOnRotationInterpSpeed;                         // 0x00D8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   LastInputKey;                                      // 0x00E0(0x0018)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bGamePadMode;                                      // 0x00F8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseWinDualShock;                                  // 0x00F9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FA[0x16];                                      // 0x00FA(0x0016)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bPlayInputLock;                                    // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FlushPressedActionBindingKeysExceptAxisKeys();
	void FlushPressedKeys();
	void SetPlayInputLock(bool bLock);

	class FString GetInputPlatformName() const;
	const struct FKey GetLastInputKey() const;
	class ULPlayerInput* GetPlayerInput() const;
	bool IsGamePadMode() const;
	bool IsRightAcceptButton() const;
	bool IsUsingPlayStationGamePad() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPlayInputSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPlayInputSystem")
	}
	static class ULPlayInputSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPlayInputSystem>();
	}
};
DUMPER7_ASSERTS_ULPlayInputSystem;

// Class ProjectP.LPreventFallingDamageVolume
// 0x0000 (0x0258 - 0x0258)
class ALPreventFallingDamageVolume final : public ALVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPreventFallingDamageVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPreventFallingDamageVolume")
	}
	static class ALPreventFallingDamageVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPreventFallingDamageVolume>();
	}
};
DUMPER7_ASSERTS_ALPreventFallingDamageVolume;

// Class ProjectP.LProduct
// 0x0028 (0x0050 - 0x0028)
class ULProduct final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GoodsCodeName;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULItem*                                 ConnectedItem;                                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool CanStackCount();
	class ULItem* GetItem();
	int32 Price();
	int32 StockCount();

	int32 BuyNumMax() const;
	bool CanBuyInfinity() const;
	bool CanDisplayOn() const;
	ELShopProductType GetProductType() const;
	bool IsWeapon() const;
	struct FLSpecialShopExchangeNeeds Needs() const;
	int32 OriginStockCount() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProduct")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProduct")
	}
	static class ULProduct* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULProduct>();
	}
};
DUMPER7_ASSERTS_ULProduct;

// Class ProjectP.LProductSellShop
// 0x0000 (0x0028 - 0x0028)
class ULProductSellShop final : public UObject
{
public:
	TSet<ELItemFirstCategory> GetSellCategorys();
	TArray<class ULItem*> GetSellList(ELItemFirstCategory Category);
	bool Sell(class ULItem* InSell, int32 InCount, bool IsLockerItem);

	int32 CalcSellingPrice(const class ULItem* InItem) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProductSellShop")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProductSellShop")
	}
	static class ULProductSellShop* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULProductSellShop>();
	}
};
DUMPER7_ASSERTS_ULProductSellShop;

// Class ProjectP.LProjectileHit_PeriodicHandler
// 0x00A8 (0x00D0 - 0x0028)
class ULProjectileHit_PeriodicHandler final : public UObject
{
public:
	class ALProjectile*                           Owner;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLProjectileHitInfo                    HitInfo;                                           // 0x0030(0x0090)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTimerHandle                           TimerHandle;                                       // 0x00C0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Clear();
	void Initialize(class ALProjectile* InOwner, const struct FLProjectileHitInfo& InHitInfo);
	void OnGenerateHit();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectileHit_PeriodicHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectileHit_PeriodicHandler")
	}
	static class ULProjectileHit_PeriodicHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULProjectileHit_PeriodicHandler>();
	}
};
DUMPER7_ASSERTS_ULProjectileHit_PeriodicHandler;

// Class ProjectP.LProjectileSpawn_PeriodicHandler
// 0x0068 (0x0090 - 0x0028)
class ULProjectileSpawn_PeriodicHandler final : public UObject
{
public:
	class ALProjectile*                           Owner;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLChildProjectileSpawnInfo             SpawnInfo;                                         // 0x0030(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTimerHandle                           TimerHandle;                                       // 0x0080(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Clear();
	void Initialize(class ALProjectile* InOwner, const struct FLChildProjectileSpawnInfo& InSpawnInfo);
	void OnSpawn();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectileSpawn_PeriodicHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectileSpawn_PeriodicHandler")
	}
	static class ULProjectileSpawn_PeriodicHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULProjectileSpawn_PeriodicHandler>();
	}
};
DUMPER7_ASSERTS_ULProjectileSpawn_PeriodicHandler;

// Class ProjectP.LProjectile_AbnormalApplyInRange
// 0x0030 (0x0058 - 0x0028)
class ULProjectile_AbnormalApplyInRange final : public UObject
{
public:
	class ALProjectile*                           Owner;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLProjectileAbnormalApplyInRangeInfo   AbnormalApplyInfo;                                 // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class ULProjetileAbnormalApplyTargetInfo*> AppliedTargetList;                             // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void Clear();
	void Initialize(class ALProjectile* InOwner, const struct FLProjectileAbnormalApplyInRangeInfo& InAbnormalApplyInfo);
	void OnActorBeginOverlap(class AActor* Other);
	void OnActorEndOverlap(class AActor* Other);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectile_AbnormalApplyInRange")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectile_AbnormalApplyInRange")
	}
	static class ULProjectile_AbnormalApplyInRange* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULProjectile_AbnormalApplyInRange>();
	}
};
DUMPER7_ASSERTS_ULProjectile_AbnormalApplyInRange;

// Class ProjectP.LProjectileMovementComponent
// 0x0010 (0x01E0 - 0x01D0)
class ULProjectileMovementComponent final : public UProjectileMovementComponent
{
public:
	bool                                          bHandleBlockingHit;                                // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHandleImpact;                                     // 0x01D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2[0xE];                                      // 0x01D2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectileMovementComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectileMovementComponent")
	}
	static class ULProjectileMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULProjectileMovementComponent>();
	}
};
DUMPER7_ASSERTS_ULProjectileMovementComponent;

// Class ProjectP.LProjectile_NonTypical
// 0x0000 (0x0320 - 0x0320)
class ALProjectile_NonTypical final : public ALProjectile
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectile_NonTypical")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectile_NonTypical")
	}
	static class ALProjectile_NonTypical* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALProjectile_NonTypical>();
	}
};
DUMPER7_ASSERTS_ALProjectile_NonTypical;

// Class ProjectP.LProjectile_Direct
// 0x0020 (0x0360 - 0x0340)
class ALProjectile_Direct final : public ALProjectile_Typical
{
public:
	uint8                                         Pad_340[0x20];                                     // 0x0340(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectile_Direct")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectile_Direct")
	}
	static class ALProjectile_Direct* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALProjectile_Direct>();
	}
};
DUMPER7_ASSERTS_ALProjectile_Direct;

// Class ProjectP.LProjectile_Chase
// 0x0050 (0x0390 - 0x0340)
class ALProjectile_Chase final : public ALProjectile_Typical
{
public:
	TWeakObjectPtr<class AActor>                  FixedTarget;                                       // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  PickedTarget;                                      // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELChaseProjectileState                        ChasingState;                                      // 0x0350(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Chase_Start_Distance;                              // 0x0354(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chase_Start_Angle;                                 // 0x0358(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chase_Start_HalfHeight;                            // 0x035C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chase_End_Distance;                                // 0x0360(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chase_End_Angle;                                   // 0x0364(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Chase_End_HalfHeight;                              // 0x0368(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Chase_Target_Socket;                               // 0x036C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_374[0x1C];                                     // 0x0374(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectile_Chase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectile_Chase")
	}
	static class ALProjectile_Chase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALProjectile_Chase>();
	}
};
DUMPER7_ASSERTS_ALProjectile_Chase;

// Class ProjectP.LProjectile_Fixed
// 0x0000 (0x0340 - 0x0340)
class ALProjectile_Fixed : public ALProjectile_Typical
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectile_Fixed")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectile_Fixed")
	}
	static class ALProjectile_Fixed* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALProjectile_Fixed>();
	}
};
DUMPER7_ASSERTS_ALProjectile_Fixed;

// Class ProjectP.LProjectile_Ring
// 0x0030 (0x0370 - 0x0340)
class ALProjectile_Ring final : public ALProjectile_Typical
{
public:
	struct FLProjectileCollisionData_Cylinder     RingCollisionData;                                 // 0x0340(0x001C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_35C[0x14];                                     // 0x035C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectile_Ring")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectile_Ring")
	}
	static class ALProjectile_Ring* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALProjectile_Ring>();
	}
};
DUMPER7_ASSERTS_ALProjectile_Ring;

// Class ProjectP.LProjectileSystem
// 0x00B8 (0x0130 - 0x0078)
class ULProjectileSystem final : public ULGameSubSystem
{
public:
	uint8                                         Pad_78[0xB1];                                      // 0x0078(0x00B1)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         GDebugDrawType;                                    // 0x0129(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddUniqueSkillHit(class AActor* Victim, class FName SkillHitCodeName, float InDuration);
	void ClearAllProjectile();
	float FindAngularProjectileAngle(const struct FVector& FireLocation, const struct FVector& TargetLocation, float Speed, float GravityForce);
	float FindAngularProjectileSpeed(const struct FVector& FireLocation, const struct FVector& TargetLocation, float Angle);
	struct FVector FindAngularProjectileVelocity(const struct FVector& FireLocation, const struct FVector& TargetLocation, float Duration);
	bool IsSkillHitIgnored(class AActor* Victim, class FName SkillHitCodeName);
	class ALProjectile* LaunchProjectile(class AActor* Instigator, const struct FLProjectileSpawnParameter& SpawnParameters);
	void PauseAllProjectile(bool PauseFlag);
	void RemoveProjectile(int64 ProjectileHandleId);

	bool BoxOverlapMultiByProfile(class ALProjectile* Projectile, TArray<struct FLOverlapResult>* OutOverlaps, const struct FVector& Pos, const struct FRotator& Rot, const struct FVector& Extent, class FName ProfileName) const;
	bool SphereOverlapMultiByProfile(class ALProjectile* Projectile, TArray<struct FLOverlapResult>* OutOverlaps, const struct FVector& Pos, const struct FRotator& Rot, float Radius, class FName ProfileName) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LProjectileSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LProjectileSystem")
	}
	static class ULProjectileSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULProjectileSystem>();
	}
};
DUMPER7_ASSERTS_ULProjectileSystem;

// Class ProjectP.LSpotProjectileSpawn_PeriodicHandler
// 0x0078 (0x00A0 - 0x0028)
class ULSpotProjectileSpawn_PeriodicHandler final : public UObject
{
public:
	class ALProjectilePropActor*                  Owner;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLProjectilePropSpawnParameter         SpawnInfo;                                         // 0x0030(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTimerHandle                           TimerHandle;                                       // 0x0080(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnCount;                                        // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x14];                                      // 0x008C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Clear();
	void Initialize(class ALProjectilePropActor* InOwner, const struct FLProjectilePropSpawnParameter& InSpawnInfo);
	void SpawnProjectile();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpotProjectileSpawn_PeriodicHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpotProjectileSpawn_PeriodicHandler")
	}
	static class ULSpotProjectileSpawn_PeriodicHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpotProjectileSpawn_PeriodicHandler>();
	}
};
DUMPER7_ASSERTS_ULSpotProjectileSpawn_PeriodicHandler;

// Class ProjectP.LPropComponent
// 0x0070 (0x0270 - 0x0200)
class ULPropComponent final : public USceneComponent
{
public:
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ALPropSpot*                             OwnerProp;                                         // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FLPropInteractionInfo>          InteractionInfoList;                               // 0x0208(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ALPropActor>             TargetPropActor;                                   // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ALLevelObject>           TargetLevelObject;                                 // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLPropState                            PropState;                                         // 0x0228(0x0018)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UPrimitiveComponent>     UserInteractedComp;                                // 0x0240(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELPropInteractState                           PropInteractState;                                 // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELInteractResult                              PropInteractResult;                                // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24A[0xE];                                      // 0x024A(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle_PropMotionDelay;                       // 0x0258(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          InteractMotionOnly;                                // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_261[0xF];                                      // 0x0261(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsFixCameraOnInteraction();
	void OnComponentBeginOverlapped_Interact(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
	void OnComponentEndOverlapped_Interact(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropComponent")
	}
	static class ULPropComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPropComponent>();
	}
};
DUMPER7_ASSERTS_ULPropComponent;

// Class ProjectP.LPropDestructionSpot
// 0x0028 (0x0380 - 0x0358)
class ALPropDestructionSpot final : public ALPropSpot
{
public:
	float                                         OverrideMassScale;                                 // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ControlVolumeSpot;                                 // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ControlShapeObjectSpots;                           // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          DestructionObjectCrashed;                          // 0x0378(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool DoFracture();
	void OnDestructionObjectCrashed();
	void SetCodeNameByBP(class FName InCodeName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropDestructionSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropDestructionSpot")
	}
	static class ALPropDestructionSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPropDestructionSpot>();
	}
};
DUMPER7_ASSERTS_ALPropDestructionSpot;

// Class ProjectP.LPropGuideObjectSpot
// 0x0000 (0x0358 - 0x0358)
class ALPropGuideObjectSpot final : public ALPropShapeObjectSpot
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropGuideObjectSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropGuideObjectSpot")
	}
	static class ALPropGuideObjectSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPropGuideObjectSpot>();
	}
};
DUMPER7_ASSERTS_ALPropGuideObjectSpot;

// Class ProjectP.LPropHelpMateSpot
// 0x0008 (0x0360 - 0x0358)
class ALPropHelpMateSpot final : public ALPropShapeObjectSpot
{
public:
	bool                                          HelpMatePopupConfirm;                              // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInteractionRetry();
	void OnOpenPopupHelpMate();
	void OnUIHelpMatePopupResult(bool PopupResult);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropHelpMateSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropHelpMateSpot")
	}
	static class ALPropHelpMateSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPropHelpMateSpot>();
	}
};
DUMPER7_ASSERTS_ALPropHelpMateSpot;

// Class ProjectP.LPropItemSpot
// 0x0020 (0x0378 - 0x0358)
class ALPropItemSpot final : public ALPropShapeObjectSpot
{
public:
	class FName                                   ItemPackageCodeName;                               // 0x0358(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExecuteItemPackageState;                           // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_364[0x14];                                     // 0x0364(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropItemSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropItemSpot")
	}
	static class ALPropItemSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPropItemSpot>();
	}
};
DUMPER7_ASSERTS_ALPropItemSpot;

// Class ProjectP.LPropLevelSequenceSpot
// 0x0068 (0x03C0 - 0x0358)
class ALPropLevelSequenceSpot final : public ALPropSpot
{
public:
	class FName                                   SequenceCodeName;                                  // 0x0358(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToggleSequenceCodeName;                            // 0x0360(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayed;                                          // 0x0368(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayReverse;                                     // 0x0369(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTogglePlay;                                      // 0x036A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VolumeInSequencePlay;                              // 0x036B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VolumeOutSequenceStop;                             // 0x036C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VolumeEnterOnce;                                   // 0x036D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36E[0x2];                                      // 0x036E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLSequenceBindActor>            BindSpotList;                                      // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class ALPropLevelSequenceSpot*>        StopSequenceSpotList;                              // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ULSequenceActorData>     CurrentSequenceActorData;                          // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ULSequenceActorData>     DefaultSequenceActorData;                          // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ULSequenceActorData>     ToggleSequenceActorData;                           // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ULSequenceActorData>     BeforePlayedSequenceActorData;                     // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ULSequenceActorData>     AfterPlayedSequenceActorData;                      // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SequencePlayAgainFlag;                             // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFinishedCurrentSequenceActor();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropLevelSequenceSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropLevelSequenceSpot")
	}
	static class ALPropLevelSequenceSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPropLevelSequenceSpot>();
	}
};
DUMPER7_ASSERTS_ALPropLevelSequenceSpot;

// Class ProjectP.LPropLiftSpot
// 0x00B8 (0x0410 - 0x0358)
class ALPropLiftSpot final : public ALPropSpot
{
public:
	class USceneComponent*                        PointA_DoorComp;                                   // 0x0358(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        PointB_DoorComp;                                   // 0x0360(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        PointA_TriggerComp;                                // 0x0368(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        PointB_TriggerComp;                                // 0x0370(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        PointA_Position;                                   // 0x0378(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        PointB_Position;                                   // 0x0380(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ElevatorSoundVolume_Name;                          // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceDefaultState;                                 // 0x0390(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ALLiftObject>            ElevatorObject;                                    // 0x0394(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ALLiftObject>            PointA_DoorObject;                                 // 0x039C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ALLiftObject>            PointB_DoorObject;                                 // 0x03A4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ALLiftObject>            PointA_TriggerObject;                              // 0x03AC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ALLiftObject>            PointB_TriggerObject;                              // 0x03B4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCurveFloat>             MoveCurveData;                                     // 0x03C0(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseLiftMove;                                       // 0x03E8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E9[0x27];                                     // 0x03E9(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnComponentBeginOverlapSetLiftStartPoint(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropLiftSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropLiftSpot")
	}
	static class ALPropLiftSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPropLiftSpot>();
	}
};
DUMPER7_ASSERTS_ALPropLiftSpot;

// Class ProjectP.LPropVolumeComponent
// 0x0000 (0x0480 - 0x0480)
class ULPropVolumeComponent final : public UBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropVolumeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropVolumeComponent")
	}
	static class ULPropVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPropVolumeComponent>();
	}
};
DUMPER7_ASSERTS_ULPropVolumeComponent;

// Class ProjectP.LPropInteractStartComponent
// 0x0000 (0x0200 - 0x0200)
class ULPropInteractStartComponent final : public USceneComponent
{
public:
	ELPropInteractState                           InteractStateType;                                 // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropInteractStartComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropInteractStartComponent")
	}
	static class ULPropInteractStartComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPropInteractStartComponent>();
	}
};
DUMPER7_ASSERTS_ULPropInteractStartComponent;

// Class ProjectP.LPropSoundLocationComponent
// 0x0000 (0x0200 - 0x0200)
class ULPropSoundLocationComponent final : public USceneComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropSoundLocationComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropSoundLocationComponent")
	}
	static class ULPropSoundLocationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPropSoundLocationComponent>();
	}
};
DUMPER7_ASSERTS_ULPropSoundLocationComponent;

// Class ProjectP.LPropHUDEventComponent
// 0x0010 (0x00C0 - 0x00B0)
class ULPropHUDEventComponent final : public UActorComponent
{
public:
	class FName                                   HUDEvent;                                          // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForTrainingArea;                                 // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropHUDEventComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropHUDEventComponent")
	}
	static class ULPropHUDEventComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPropHUDEventComponent>();
	}
};
DUMPER7_ASSERTS_ULPropHUDEventComponent;

// Class ProjectP.LPropVolumeSpot
// 0x0048 (0x03A0 - 0x0358)
class ALPropVolumeSpot final : public ALPropSpot
{
public:
	uint8                                         bLocationNameDisplay : 1;                          // 0x0358(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALSpot*                                 Lookat_Object;                                     // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Lookat_Offset;                                     // 0x0368(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class ALCharacter>>     OverlapCharacterList;                              // 0x0378(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class ALCharacter>>     AbnormalStateApplyList;                            // 0x0388(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           TimerHandle_AbnormalState_BuildUp;                 // 0x0398(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CheckAbnormalStateBuildUp();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropVolumeSpot")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropVolumeSpot")
	}
	static class ALPropVolumeSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALPropVolumeSpot>();
	}
};
DUMPER7_ASSERTS_ALPropVolumeSpot;

// Class ProjectP.LQuartzPocket
// 0x0028 (0x0050 - 0x0028)
class ULQuartzPocket final : public UObject
{
public:
	struct FQuartzPocketInfoPtr                   PocketInfo;                                        // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLQuartzSlot>                   QuartzSlotList;                                    // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLQuartzPocketSynergy                  Synergy;                                           // 0x0040(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool InstallSlotFromUI(int32 InSlotIndex, class FName QuartzEffectCodeName);

	int32 GetPocketLevel() const;
	bool IsPocketUnlocked() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LQuartzPocket")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LQuartzPocket")
	}
	static class ULQuartzPocket* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULQuartzPocket>();
	}
};
DUMPER7_ASSERTS_ULQuartzPocket;

// Class ProjectP.LQuestDebugInfo
// 0x0010 (0x0038 - 0x0028)
class ULQuestDebugInfo final : public UObject
{
public:
	class FString                                 QuestLog;                                          // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LQuestDebugInfo")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LQuestDebugInfo")
	}
	static class ULQuestDebugInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULQuestDebugInfo>();
	}
};
DUMPER7_ASSERTS_ULQuestDebugInfo;

// Class ProjectP.LRedButterFlySearchCollisionComponent
// 0x0000 (0x0470 - 0x0470)
class ULRedButterFlySearchCollisionComponent final : public USphereComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LRedButterFlySearchCollisionComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LRedButterFlySearchCollisionComponent")
	}
	static class ULRedButterFlySearchCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULRedButterFlySearchCollisionComponent>();
	}
};
DUMPER7_ASSERTS_ULRedButterFlySearchCollisionComponent;

// Class ProjectP.LRichTextBlock
// 0x0000 (0x0678 - 0x0678)
class ULRichTextBlock : public URichTextBlock
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LRichTextBlock")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LRichTextBlock")
	}
	static class ULRichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULRichTextBlock>();
	}
};
DUMPER7_ASSERTS_ULRichTextBlock;

// Class ProjectP.LCharacterSaveGame
// 0x0550 (0x05A0 - 0x0050)
class ULCharacterSaveGame final : public ULSaveGame
{
public:
	struct FLCharacterSaveData                    CharacterSaveData;                                 // 0x0050(0x0310)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FLSpotSaveData                         SpotSaveData;                                      // 0x0360(0x00E0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FLExiledNpcData                        ExiledNpcData;                                     // 0x0440(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FLVariableSaveData                     VariableSaveData;                                  // 0x0450(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FLWorldEventSaveData                   WorldEventSaveData;                                // 0x0460(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FLTalkerSaveData                       TalkerSaveData;                                    // 0x0470(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FLQuestSaveData                        QuestSaveData;                                     // 0x0480(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FLTutorialSaveData                     TutorialSaveData;                                  // 0x0490(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FLDropItemSaveData                     DropItemSaveData;                                  // 0x04A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FLLoadingScreenData                    LoadingScreenSaveData;                             // 0x04B0(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FLDLCSaveData_Character                DLCSaveData_Character;                             // 0x0550(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LCharacterSaveGame")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LCharacterSaveGame")
	}
	static class ULCharacterSaveGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULCharacterSaveGame>();
	}
};
DUMPER7_ASSERTS_ULCharacterSaveGame;

// Class ProjectP.LSlaveArmTree
// 0x0010 (0x0038 - 0x0028)
class ULSlaveArmTree final : public UObject
{
public:
	struct FSlaveArmTreeInfoPtr                   Info;                                              // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUnlock;                                           // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivated;                                        // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ActivateTreeFromUI();
	void SetActivate(bool bNewActivate, bool bNeedCalcPlayerStat);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSlaveArmTree")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSlaveArmTree")
	}
	static class ULSlaveArmTree* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSlaveArmTree>();
	}
};
DUMPER7_ASSERTS_ULSlaveArmTree;

// Class ProjectP.LSoulDropObject
// 0x0000 (0x02A0 - 0x02A0)
class ALSoulDropObject : public ALLevelObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSoulDropObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSoulDropObject")
	}
	static class ALSoulDropObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALSoulDropObject>();
	}
};
DUMPER7_ASSERTS_ALSoulDropObject;

// Class ProjectP.LSoundControlComponent
// 0x0088 (0x0138 - 0x00B0)
class ULSoundControlComponent final : public UActorComponent
{
public:
	class FName                                   SoundActivateFlag;                                 // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundDeactivateFlag;                               // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SoundActivate_if_NpcSpot_Spawnable;                // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SoundActivate_if_NpcSpot_Not_Spawnable;            // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SoundDeactivate_if_NpcSpot_Spawnable;              // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SoundDeactivate_if_NpcSpot_Not_Spawnable;          // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayToPlay;                                       // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayToStop;                                       // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLSoundFadeData                        FadeIn;                                            // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FLSoundFadeData                        FadeOut;                                           // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x10];                                     // 0x0128(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceStop();
	void OnGlobalVariableChanged(class FName InGlobalVariable, int32 InValue);
	void OnNpcDead(const class FString& NpcSpotUniqueID);
	void OnPlayStateChanged(EAudioComponentPlayState PlayState);
	void Play();
	void PlayInstant();
	void Stop();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSoundControlComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSoundControlComponent")
	}
	static class ULSoundControlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSoundControlComponent>();
	}
};
DUMPER7_ASSERTS_ULSoundControlComponent;

// Class ProjectP.LSpecialBuff_Abnormal
// 0x0000 (0x0048 - 0x0048)
class ULSpecialBuff_Abnormal final : public ULSpecialBuff
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_Abnormal")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_Abnormal")
	}
	static class ULSpecialBuff_Abnormal* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_Abnormal>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_Abnormal;

// Class ProjectP.LSpecialBuff_Abnormal_By_HP
// 0x0008 (0x0050 - 0x0048)
class ULSpecialBuff_Abnormal_By_HP final : public ULSpecialBuff
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnUpdateHP(int32 CurrentHP, int32 MaxHP);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_Abnormal_By_HP")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_Abnormal_By_HP")
	}
	static class ULSpecialBuff_Abnormal_By_HP* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_Abnormal_By_HP>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_Abnormal_By_HP;

// Class ProjectP.LSpecialBuff_Abnormal_By_WeaponChange
// 0x0000 (0x0048 - 0x0048)
class ULSpecialBuff_Abnormal_By_WeaponChange final : public ULSpecialBuff
{
public:
	void ApplyAbnormal();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_Abnormal_By_WeaponChange")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_Abnormal_By_WeaponChange")
	}
	static class ULSpecialBuff_Abnormal_By_WeaponChange* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_Abnormal_By_WeaponChange>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_Abnormal_By_WeaponChange;

// Class ProjectP.LSpecialBuff_Resurrection
// 0x0008 (0x0050 - 0x0048)
class ULSpecialBuff_Resurrection final : public ULSpecialBuff
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnUpdateHP(int32 CurrentHP, int32 MaxHP);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_Resurrection")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_Resurrection")
	}
	static class ULSpecialBuff_Resurrection* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_Resurrection>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_Resurrection;

// Class ProjectP.LSpecialBuff_Abnormal_On_PulseRechargeState
// 0x0008 (0x0050 - 0x0048)
class ULSpecialBuff_Abnormal_On_PulseRechargeState final : public ULSpecialBuff
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEnterActionState(class ULActMgrComponent* ActMgrComponent, class FName ActionState, bool IsPair);
	void OnLeaveActionState(class ULActMgrComponent* ActMgrComponent, class FName ActionState, bool IsPair);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_Abnormal_On_PulseRechargeState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_Abnormal_On_PulseRechargeState")
	}
	static class ULSpecialBuff_Abnormal_On_PulseRechargeState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_Abnormal_On_PulseRechargeState>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_Abnormal_On_PulseRechargeState;

// Class ProjectP.LSpecialBuff_Abnormal_On_FrenzyAction
// 0x0008 (0x0050 - 0x0048)
class ULSpecialBuff_Abnormal_On_FrenzyAction final : public ULSpecialBuff
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEnterActionState(class ULActMgrComponent* ActMgrComponent, class FName ActionState, bool IsPair);
	void OnLeaveActionState(class ULActMgrComponent* ActMgrComponent, class FName ActionState, bool IsPair);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_Abnormal_On_FrenzyAction")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_Abnormal_On_FrenzyAction")
	}
	static class ULSpecialBuff_Abnormal_On_FrenzyAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_Abnormal_On_FrenzyAction>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_Abnormal_On_FrenzyAction;

// Class ProjectP.LSpecialBuff_AbnormalGroupDurationAdd
// 0x0000 (0x0048 - 0x0048)
class ULSpecialBuff_AbnormalGroupDurationAdd final : public ULSpecialBuff
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_AbnormalGroupDurationAdd")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_AbnormalGroupDurationAdd")
	}
	static class ULSpecialBuff_AbnormalGroupDurationAdd* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_AbnormalGroupDurationAdd>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_AbnormalGroupDurationAdd;

// Class ProjectP.LSpecialBuff_Abnormal_By_Pulse_ExhastedCount
// 0x0008 (0x0050 - 0x0048)
class ULSpecialBuff_Abnormal_By_Pulse_ExhastedCount final : public ULSpecialBuff
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyAbnormal(int32 ExhastedCount);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_Abnormal_By_Pulse_ExhastedCount")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_Abnormal_By_Pulse_ExhastedCount")
	}
	static class ULSpecialBuff_Abnormal_By_Pulse_ExhastedCount* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_Abnormal_By_Pulse_ExhastedCount>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_Abnormal_By_Pulse_ExhastedCount;

// Class ProjectP.LSpecialBuff_EquipSlotUnlock
// 0x0000 (0x0048 - 0x0048)
class ULSpecialBuff_EquipSlotUnlock final : public ULSpecialBuff
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_EquipSlotUnlock")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_EquipSlotUnlock")
	}
	static class ULSpecialBuff_EquipSlotUnlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_EquipSlotUnlock>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_EquipSlotUnlock;

// Class ProjectP.LSpecialBuff_SlaveMagazine_Consume_MulAdd
// 0x0000 (0x0048 - 0x0048)
class ULSpecialBuff_SlaveMagazine_Consume_MulAdd final : public ULSpecialBuff
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_SlaveMagazine_Consume_MulAdd")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_SlaveMagazine_Consume_MulAdd")
	}
	static class ULSpecialBuff_SlaveMagazine_Consume_MulAdd* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_SlaveMagazine_Consume_MulAdd>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_SlaveMagazine_Consume_MulAdd;

// Class ProjectP.LSpecialBuff_Sharpness_Recover_OffHand
// 0x0000 (0x0048 - 0x0048)
class ULSpecialBuff_Sharpness_Recover_OffHand final : public ULSpecialBuff
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_Sharpness_Recover_OffHand")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_Sharpness_Recover_OffHand")
	}
	static class ULSpecialBuff_Sharpness_Recover_OffHand* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_Sharpness_Recover_OffHand>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_Sharpness_Recover_OffHand;

// Class ProjectP.LSpecialBuff_Item_Category_Max_Stack_Add
// 0x0000 (0x0048 - 0x0048)
class ULSpecialBuff_Item_Category_Max_Stack_Add final : public ULSpecialBuff
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuff_Item_Category_Max_Stack_Add")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuff_Item_Category_Max_Stack_Add")
	}
	static class ULSpecialBuff_Item_Category_Max_Stack_Add* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuff_Item_Category_Max_Stack_Add>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuff_Item_Category_Max_Stack_Add;

// Class ProjectP.LSpecialBuffSystem
// 0x0100 (0x0178 - 0x0078)
class ULSpecialBuffSystem final : public ULGameSubSystem
{
public:
	TMap<ELSpecialBuffType, struct FLSpecialBuffContainer> BuffMap;                                  // 0x0078(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULSpecialBuff*>                  ReservedSpecialBuffList;                           // 0x00D0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x98];                                      // 0x00E0(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddBuff(class FName SpecialBuffCodeName, class FName Reason);
	bool CheckHaveBuff(ELSpecialBuffType Type);
	bool GetAppliedBuff(ELSpecialBuffType Type, TArray<class ULSpecialBuff*>* OutBuffInfoList);
	bool GetAppliedBuffAll(TArray<class ULSpecialBuff*>* OutBuffInfoList);
	int32 GetAppliedBuffTotalAmount(ELSpecialBuffType Type);
	void OnGameDataCharacterSync(class ULCharacterSaveGame* CharacterSaveGame, bool bLoad);
	void OnHumanityChangesSpecialBuff(const struct FHumanizationBuffAlterInfoPtr& BuffAlterInfo);
	void OnPerfectGuardSuccessOnFuryAttack();
	void OnStatChanged(ELSecondStat StatType, int32 AddedValue, int32 PrevStatValue);
	void RemoveBuff(class FName SpecialBuffCodeName);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpecialBuffSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpecialBuffSystem")
	}
	static class ULSpecialBuffSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpecialBuffSystem>();
	}
};
DUMPER7_ASSERTS_ULSpecialBuffSystem;

// Class ProjectP.BoxComponentForGuide
// 0x0000 (0x0480 - 0x0480)
class UBoxComponentForGuide final : public UBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BoxComponentForGuide")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BoxComponentForGuide")
	}
	static class UBoxComponentForGuide* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBoxComponentForGuide>();
	}
};
DUMPER7_ASSERTS_UBoxComponentForGuide;

// Class ProjectP.CapsuleComponentForGuide
// 0x0000 (0x0470 - 0x0470)
class UCapsuleComponentForGuide final : public UCapsuleComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CapsuleComponentForGuide")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CapsuleComponentForGuide")
	}
	static class UCapsuleComponentForGuide* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCapsuleComponentForGuide>();
	}
};
DUMPER7_ASSERTS_UCapsuleComponentForGuide;

// Class ProjectP.LSpotVolume
// 0x0010 (0x0230 - 0x0220)
class ALSpotVolume final : public ALMultiTriggerBase
{
public:
	TArray<class ALSpot*>                         Spots;                                             // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpotVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpotVolume")
	}
	static class ALSpotVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALSpotVolume>();
	}
};
DUMPER7_ASSERTS_ALSpotVolume;

// Class ProjectP.LLevelInactiveInterface
// 0x0000 (0x0000 - 0x0000)
class ILLevelInactiveInterface final
{
public:
	void ActivateLevelActor();
	void DeactivateLevelActor();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLevelInactiveInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLevelInactiveInterface")
	}
	static class ILLevelInactiveInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILLevelInactiveInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ILLevelInactiveInterface;

// Class ProjectP.LLevelInactiveVolume
// 0x0010 (0x0230 - 0x0220)
class ALLevelInactiveVolume final : public ALMultiTriggerBase
{
public:
	TArray<class AActor*>                         LevelActors;                                       // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLevelInactiveVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLevelInactiveVolume")
	}
	static class ALLevelInactiveVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALLevelInactiveVolume>();
	}
};
DUMPER7_ASSERTS_ALLevelInactiveVolume;

// Class ProjectP.LSpringArmComponent
// 0x0030 (0x02B0 - 0x0280)
class ULSpringArmComponent final : public USpringArmComponent
{
public:
	bool                                          bRotationPause;                                    // 0x0280(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRotationLinearInterpolate;                        // 0x0281(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_282[0x2E];                                     // 0x0282(0x002E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LSpringArmComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LSpringArmComponent")
	}
	static class ULSpringArmComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSpringArmComponent>();
	}
};
DUMPER7_ASSERTS_ULSpringArmComponent;

// Class ProjectP.LStargazerObject
// 0x0000 (0x02A0 - 0x02A0)
class ALStargazerObject final : public ALLevelObject
{
public:
	void ResetDilationTime();
	void SetStargazerType(ELStargazerType StateData);
	void SetStargazerUnstable(bool Unstable);
	void UpdateDilationTime(float DeltaTime, float DilationScale);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LStargazerObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LStargazerObject")
	}
	static class ALStargazerObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALStargazerObject>();
	}
};
DUMPER7_ASSERTS_ALStargazerObject;

// Class ProjectP.LStatList
// 0x0040 (0x0068 - 0x0028)
class ULStatList final : public UObject
{
public:
	TArray<struct FLStatData>                     StatList;                                          // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLStatSimpleData>               BuffList;                                          // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLStatSimpleData>               EquipList;                                         // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLStatSimpleData>               MaxStatMultiflierList;                             // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LStatList")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LStatList")
	}
	static class ULStatList* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULStatList>();
	}
};
DUMPER7_ASSERTS_ULStatList;

// Class ProjectP.LStatRoomPCCharacter
// 0x0040 (0x0C80 - 0x0C40)
class ALStatRoomPCCharacter : public ALCharacter
{
public:
	uint8                                         bEnableStatRoomEnterExitOptimize : 1;              // 0x0C40(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C41[0x7];                                      // 0x0C41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULStatComponent*                        GrowingUpStatComponent;                            // 0x0C48(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLFirstStatData>                SimulateFirstStatDataList;                         // 0x0C50(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLFirstStatSimpleData>          WillRaiseFirstStatCounts;                          // 0x0C60(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C70[0x10];                                     // 0x0C70(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AttachPCLamp();
	void OnActiveMesh(bool Active);
	void OnSetActiveEnvironment(bool Active);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LStatRoomPCCharacter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LStatRoomPCCharacter")
	}
	static class ALStatRoomPCCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALStatRoomPCCharacter>();
	}
};
DUMPER7_ASSERTS_ALStatRoomPCCharacter;

// Class ProjectP.LTalker
// 0x0010 (0x0038 - 0x0028)
class ULTalker final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LTalker")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LTalker")
	}
	static class ULTalker* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTalker>();
	}
};
DUMPER7_ASSERTS_ULTalker;

// Class ProjectP.LPropOverlapPawnComponent
// 0x0000 (0x0480 - 0x0480)
class ULPropOverlapPawnComponent final : public UBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LPropOverlapPawnComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LPropOverlapPawnComponent")
	}
	static class ULPropOverlapPawnComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULPropOverlapPawnComponent>();
	}
};
DUMPER7_ASSERTS_ULPropOverlapPawnComponent;

// Class ProjectP.LTestHelper
// 0x0000 (0x0220 - 0x0220)
class ALTestHelper final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LTestHelper")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LTestHelper")
	}
	static class ALTestHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALTestHelper>();
	}
};
DUMPER7_ASSERTS_ALTestHelper;

// Class ProjectP.LTextBlock
// 0x0000 (0x02A8 - 0x02A8)
class ULTextBlock final : public UTextBlock
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LTextBlock")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LTextBlock")
	}
	static class ULTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTextBlock>();
	}
};
DUMPER7_ASSERTS_ULTextBlock;

// Class ProjectP.LTileView
// 0x04E0 (0x0868 - 0x0388)
class ULTileView final : public UTileView
{
public:
	struct FScrollBarStyle                        WidgetStyle;                                       // 0x0388(0x04D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_858[0x10];                                     // 0x0858(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetScrollOffset();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LTileView")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LTileView")
	}
	static class ULTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTileView>();
	}
};
DUMPER7_ASSERTS_ULTileView;

// Class ProjectP.LTutorialSystem
// 0x01C0 (0x0238 - 0x0078)
class ULTutorialSystem final : public ULGameSubSystem
{
public:
	bool                                          TutorialPauseState;                                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GameInitDelayTime;                                 // 0x007C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   GameInitTutorial;                                  // 0x0080(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           TimerHandle_GameInit;                              // 0x0088(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          ActivateTutorialSystem;                            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FLTutorialHierarchyInfo> TutorialDB;                                    // 0x0098(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<ELCallBackEventType, struct FLAutoTutorialInfoList> AutoStartTutorialDB;                    // 0x00E8(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<ELCallBackEventType, struct FLAutoTutorialInfoList> AutoEndTutorialDB;                      // 0x0138(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<ELCallBackEventType, struct FLAutoTutorialInfoList> AutoPlayCountAssignDB;                  // 0x0188(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           TutorialList;                                      // 0x01D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   VisibleTutorial;                                   // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   TutorialDuringTick;                                // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TickDefaultCoolTime;                               // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLTutorialCoolTime>             TutorialCoolTimeList;                              // 0x0200(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           BattlePendingList;                                 // 0x0210(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	int32                                         BattlePendingCount;                                // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BattlePendingLimit;                                // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BattlePendingTime;                                 // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle_BattlePending;                         // 0x0230(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CheckBattlePendingList();
	void EndTutorialUI(const class FName& TutorialCodeName);
	void ExecuteTutorial(class FName TutorialCodeName);
	void GetCurrentTutorialList(TArray<class FName>* outTutorialList);
	class FText GetDescriptionText(const class FName& TutorialCodeName, int32 StepNum);
	class FText GetTitleText(const class FName& TutorialCodeName, int32 StepNum);
	int32 GetTutorialMaxStep(const class FName& TutorialCodeName);
	class FName GetWindowTutorialCodeName();
	void OnGameInitTutorial();

	struct FTutorialInfoPtr GetTutorialDB_TutorialInfo(const class FName& TutorialCodeName, int32 TutorialStep) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LTutorialSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LTutorialSystem")
	}
	static class ULTutorialSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTutorialSystem>();
	}
};
DUMPER7_ASSERTS_ULTutorialSystem;

// Class ProjectP.LUISystem
// 0x01E8 (0x0260 - 0x0078)
class ULUISystem final : public ULGameSubSystem
{
public:
	TMulticastInlineDelegate<void(class FName MainStateName)> OnInitMainUI;                          // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName MainStateName)> OnPostInitMainUI;                      // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& CommandName, bool CommandCondition)> OnExecuteCommandUI; // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName WidgetTableName)> OnRequestOpenWindow;                 // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName WidgetTableName)> OnRequestCloseWindow;                // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName WidgetTableName)> OnRequestOpenPopup;                  // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName WidgetTableName)> OnRequestClosePopup;                 // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName WidgetTableName)> OnClosedWindow;                      // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName ItemCodeName)> OnOpenPopupForceUse;                    // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRequestCloseAllWindow;                           // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FText& Message)> OnSystemMessage;                      // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FText& Message)> OnRemoveSystemMessage;                // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAcquireHumanityRecord;                           // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x10];                                     // 0x0148(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLWidgetTable                          WidgetTable;                                       // 0x0158(0x0070)(Transient, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ULWidget>                MainWidget;                                        // 0x01C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ULLoadingWidget>         AsyncLoadingWidget;                                // 0x01D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWidgetVisibility;                                 // 0x01D8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bQAMode;                                           // 0x01D9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bQuestDebugMode;                                   // 0x01DA(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELLoadingScreenType                           LoadingScreenType;                                 // 0x01DB(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAlertBlock;                                       // 0x01DC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULLoadingScreenHandler*                 LoadingScreenHandler;                              // 0x01E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E8[0x50];                                     // 0x01E8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLBuffIconData>                 BuffIconOrder;                                     // 0x0238(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnDetachAsyncLoadingUI;                            // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void AddSystemMessage(const class FText& Message);
	void CompleteNotify_UI(const class FString& InUIName);
	void CreateMainWidget();
	bool GetAlertBlock();
	class ULLoadingScreenHandler* GetLoadingScreenHandler();
	bool IsNotified_UI(const class FString& InUIName);
	void OnFirstSelectActionTypeForcly();
	void OnGameDataCharacterSync(class ULCharacterSaveGame* CharacterSaveGame, bool bLoad);
	void RemoveSystemMessage(const class FText& Message);
	void StartLoadingScreen(ELLoadingScreenType Type);
	void StopLoadingScreen();

	class ULWidget* GetMainWidget() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LUISystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LUISystem")
	}
	static class ULUISystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULUISystem>();
	}
};
DUMPER7_ASSERTS_ULUISystem;

// Class ProjectP.LLoadingScreenHandler
// 0x0068 (0x0090 - 0x0028)
class ULLoadingScreenHandler final : public UObject
{
public:
	uint8                                         Pad_28[0x68];                                      // 0x0028(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceSuccess();
	float GetProgressRate(float DeltaTime, bool bCheckLevelLoadOnly);
	class FName GetSelectedLoadingScreenTableCodeName();
	void InvisibleLoading();
	void MoveLifeTime(float Time);
	void NextIndicatorIndex();
	void SelectLoadingScreenTable(class ULDataTableSystem* DataTableSystem, class ULQuestSystem* QuestSystem);
	void SetIndicatorIndex(int32 Index_0);
	void StartLoadingSequence(const struct FLLoadingScreenContext& LoadingContext);
	void StopLoadingSequence(ELLoadingScreenUsage Usage);
	void VisibleLoading(bool bMainLoading);

	int32 GetIndicatorIndex() const;
	float GetLifeTime() const;
	TSoftObjectPtr<class UTexture2D> GetSelectedImage() const;
	const TArray<class FName> GetSelectedTipGameStringCodeNames() const;
	ELLoadingScreenUsage GetUsage() const;
	bool IsLoadingComplete() const;
	bool IsLoadingSequence() const;
	bool IsLoadingVisible() const;
	bool IsMovieEnabled() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLoadingScreenHandler")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLoadingScreenHandler")
	}
	static class ULLoadingScreenHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLoadingScreenHandler>();
	}
};
DUMPER7_ASSERTS_ULLoadingScreenHandler;

// Class ProjectP.LWeaponHandleComponent
// 0x0000 (0x0470 - 0x0470)
class ULWeaponHandleComponent final : public UCapsuleComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWeaponHandleComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWeaponHandleComponent")
	}
	static class ULWeaponHandleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWeaponHandleComponent>();
	}
};
DUMPER7_ASSERTS_ULWeaponHandleComponent;

// Class ProjectP.LWeaponBladeComponent
// 0x0000 (0x0470 - 0x0470)
class ULWeaponBladeComponent final : public UCapsuleComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWeaponBladeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWeaponBladeComponent")
	}
	static class ULWeaponBladeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWeaponBladeComponent>();
	}
};
DUMPER7_ASSERTS_ULWeaponBladeComponent;

// Class ProjectP.LWeaponBrokenBladeComponent
// 0x0000 (0x0470 - 0x0470)
class ULWeaponBrokenBladeComponent final : public UCapsuleComponent
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWeaponBrokenBladeComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWeaponBrokenBladeComponent")
	}
	static class ULWeaponBrokenBladeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWeaponBrokenBladeComponent>();
	}
};
DUMPER7_ASSERTS_ULWeaponBrokenBladeComponent;

// Class ProjectP.LWeapon
// 0x0178 (0x0398 - 0x0220)
class ALWeapon : public AActor
{
public:
	uint8                                         Pad_220[0x70];                                     // 0x0220(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 HandleMeshComponent;                               // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 BladeMeshComponent;                                // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 BrokenBladeMeshComponent;                          // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   DebrisBladeMeshComponent;                          // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALWeaponDerbisBlade*                    DebrisMeshActor;                                   // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLBladeTrailType                       BladeTrailType;                                    // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ALWeaponDerbisBlade>        DefaultWeaponDerbisBladeClass;                     // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlwaysUpdateOnWeaponOff;                           // 0x02C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          DebrisSkeletalMesh;                                // 0x02D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULWeaponHandleComponent*                HandleCollisionComponent;                          // 0x02D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULWeaponBladeComponent*                 BladeCollisionComponent;                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULWeaponBrokenBladeComponent*           BrokenBladeCollisionComponent;                     // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F0[0x10];                                     // 0x02F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ULHitColMgrComponent*                   HitColMgrComponent;                                // 0x0300(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_308[0xD];                                      // 0x0308(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         BitPad_315_0 : 1;                                  // 0x0315(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bDropWeapon : 1;                                   // 0x0315(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bBrokenBlade : 1;                                  // 0x0315(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bReplaceBreakWeapon : 1;                           // 0x0315(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bBrokenImmediatelyHide : 1;                        // 0x0315(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_316[0x12];                                     // 0x0316(0x0012)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DestructionDurability;                             // 0x0328(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLDropPrimitive>                DropPrimitives;                                    // 0x0330(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLComponentDrop>                DropComponents;                                    // 0x0340(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	class ULWeaponItem*                           Item;                                              // 0x0350(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FItemWeaponMonsterPtr                  WeaponMonsterInfo;                                 // 0x0358(0x0008)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         BladeLength;                                       // 0x0360(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ALWeapon>                   HandleWeaponClass;                                 // 0x0368(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ALWeapon>                   BladeWeaponClass;                                  // 0x0370(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELWeaponAttachPointType                       WeaponAttachPointType;                             // 0x0378(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_379[0x3];                                      // 0x0379(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LastAppliedElementName;                            // 0x037C(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ALWeapon*>                       TransformWeapons;                                  // 0x0388(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void AddTransformWeapon(class ALWeapon* TransformWeapon);
	void ApplyElement(class FName ElementName);
	void ApplyFxParameter_BladeLength(struct FLAttachedEffectSet* EffectSet);
	void ApplyMaterialVarying(class FName MaterialFxCodename);
	void BreakBlade(const struct FVector& ImpulseDirection);
	void BrokenBladeOnBuild();
	void BuildEachCollision_AutoLocation(class UCapsuleComponent* CollisionComp, const struct FVector& CapsuleOffset);
	void BuildEachCollision_AutoSize(class UCapsuleComponent* CollisionComp, class USkeletalMeshComponent* MeshComp, float CapsuleRadius, float CapsuleHalfHeight);
	void BuildWeapon();
	void ChangeAnimState(ELWeaponPartType PartType, class FName AnimState);
	void ChangeAnimStateInner(ELWeaponPartType PartType, class FName InAnimState);
	void ClearAnimState(ELWeaponPartType PartType);
	TArray<class ALWeapon*> ClearTransformWeapons();
	void CreateDebrisMeshAndDrop();
	class ALWeapon* CreateHandleTemplate();
	void CreateSweepTracer();
	void DecreaseDestructionDurability(int32 Durability, bool bVictimGuard, bool* bEmptyDurabilityNow);
	void DoDropBrokenBlade();
	void DoDropBrokenBladeMeshes();
	void DoDropWeaponMeshes();
	void DropWeapon();
	class ULWeaponBladeComponent* GetBladeCollision();
	struct FItemCommonInfoPtr GetBladeCommonInfo();
	struct FItemBladeInfoPtr GetBladeInfo();
	bool GetBrokenBladeOnBuild();
	float GetHandleCapsuleRadius();
	class ULWeaponHandleComponent* GetHandleCollision();
	struct FItemCommonInfoPtr GetHandleCommonInfo();
	struct FItemHandleInfoPtr GetHandleInfo();
	class ULWeaponItem* GetItem();
	struct FItemWeaponMonsterPtr GetMonsterWeaponInfo();
	void GetSkillDist(int32* AddSkillDist, int32* SkillDistMin, int32* SkillDistMax, float* SkillDistRateMin, float* SkillDistRateMax);
	class FName GetSkillHitCodeName();
	void GetSkillRangeAfterBroken(int32* AddSkillRange, int32* SkillRangeMin, int32* SkillRangeMax);
	void JoinHandleAndBlade(bool bBrokenBladeBuild);
	void JoinHandleAndBladeMeshComponents();
	void OnApplyRunningAbnormal(bool IsApply, class FName AbnormalCodeName);
	void OnBreakBlade(const struct FVector& BreakPointLocation, const struct FVector& ImpulseDirection);
	void OnDropWeapon();
	void OnFxSocketTraceEvent(class ULActMgrComponent* ActMgrComponent, const struct FLFxSocketTracerInfo& SocketTraceInfo);
	void OnJoinHandleAndBlade();
	void OnWeaponChanged(class ALWeapon* From, class ALWeapon* To);
	void OnWeaponHitDamage();
	void OnWeaponOnOff(bool bOnOff);
	void OnWeaponRespawn();
	void PlayDurabilityConsumeFX();
	void PlayTrailElementFX();
	bool ProcessDestructionDurability(int32 ConsumeAmount, const struct FVector& ImpulseDirection);
	void RemoveDebrisMesh();
	void RemoveElement(class FName ElementName);
	void RemoveMaterialVarying(class FName MaterialFxCodename);
	void ReplaceBreakBlade(const struct FVector& ImpulseDirection);
	void RespawnWeapon();
	void SetAnimRateScale(ELWeaponPartType PartType, float ScaleRate);
	void SetMonsterWeapon(const class FName& ItemMonsterWeaponCodeName);
	void SetWeaponAttachmentInfo(ELWeaponAttachPointType InWeaponAttachPointType);
	void SetWeaponClass(TSubclassOf<class ALWeapon> InHandleWeaponClass, TSubclassOf<class ALWeapon> InBladeWeaponClass);
	void SetWeaponItem(class ULWeaponItem* Item_0);
	void StartHideDerbisBlade();
	void StopTrailElementFX();
	void WeaponOff();
	void WeaponOffBareHand();
	void WeaponOffOwnerHidden();
	void WeaponOn();
	void WeaponOnBareHand();
	void WeaponOnOwnerHidden();

	bool CanJoinHandleBlade() const;
	class FName GetAddtiveSkillHitCodeName() const;
	float GetAtkPowerRate() const;
	struct FVector GetAttachPointBlade() const;
	float GetBladeLength() const;
	int32 GetDestructionDurability() const;
	class FName GetEquipAbnormalCodeName() const;
	int32 GetMaxDestructionDurability() const;
	float GetMotionSpeedRate() const;
	float GetMulpleRateAtkPowerAfterBoken() const;
	ELWeaponAttachPointType GetWeaponAttachPointType() const;
	class AActor* GetWeaponOwner() const;
	bool HasBroken() const;
	bool HasCollisionComponent(class UPrimitiveComponent* Component) const;
	bool IsDroped() const;
	bool IsMonsterWeapon() const;
	bool IsNewBreakBlade() const;
	bool IsPickedWeapon() const;
	bool IsRemoveAbnormalStateAfterBroken() const;
	bool IsWeaponOn() const;
	bool IsWeaponOnOwnerHidden() const;
	float ToughRecoveryDelayTime() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWeapon")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWeapon")
	}
	static class ALWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALWeapon>();
	}
};
DUMPER7_ASSERTS_ALWeapon;

// Class ProjectP.LWeaponAnimInstance
// 0x0000 (0x02C0 - 0x02C0)
class ULWeaponAnimInstance final : public UAnimInstance
{
public:
	class FName                                   AnimState;                                         // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ChangeAnimState(class FName AnimState_0);
	void ClearAnimState();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWeaponAnimInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWeaponAnimInstance")
	}
	static class ULWeaponAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWeaponAnimInstance>();
	}
};
DUMPER7_ASSERTS_ULWeaponAnimInstance;

// Class ProjectP.LWetBodyAreaComponent
// 0x0000 (0x0480 - 0x0480)
class ULWetBodyAreaComponent final : public UBoxComponent
{
public:
	float                                         Wet_Amount;                                        // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWetBodyAreaComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWetBodyAreaComponent")
	}
	static class ULWetBodyAreaComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWetBodyAreaComponent>();
	}
};
DUMPER7_ASSERTS_ULWetBodyAreaComponent;

// Class ProjectP.LLoadingWidget
// 0x0008 (0x02A8 - 0x02A0)
class ULLoadingWidget final : public ULWidget
{
public:
	bool                                          bMainLoading;                                      // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsyncWorldLoading;                                // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoadingLevel;                                   // 0x02A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A3[0x5];                                      // 0x02A3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LLoadingWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LLoadingWidget")
	}
	static class ULLoadingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLoadingWidget>();
	}
};
DUMPER7_ASSERTS_ULLoadingWidget;

// Class ProjectP.LHeadTagWidget
// 0x0010 (0x02B0 - 0x02A0)
class ULHeadTagWidget : public ULWidget
{
public:
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HeadTagOwner;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnAttachToActor();
	void OnDetachFromActor();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LHeadTagWidget")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LHeadTagWidget")
	}
	static class ULHeadTagWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULHeadTagWidget>();
	}
};
DUMPER7_ASSERTS_ULHeadTagWidget;

// Class ProjectP.LWindSourceVolume
// 0x0020 (0x0278 - 0x0258)
class ALWindSourceVolume final : public ALVolume
{
public:
	int32                                         Priority;                                          // 0x0258(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x025C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinGustAmount;                                     // 0x0260(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGustAmount;                                     // 0x0264(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPointWind;                                        // 0x0268(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULWindSourceComponent*                  WindComponent;                                     // 0x0270(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWindSourceVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWindSourceVolume")
	}
	static class ALWindSourceVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALWindSourceVolume>();
	}
};
DUMPER7_ASSERTS_ALWindSourceVolume;

// Class ProjectP.LWireActor
// 0x0048 (0x0268 - 0x0220)
class ALWireActor final : public AActor
{
public:
	class FName                                   SpawnSocketName;                                   // 0x0220(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time_Pulling;                                      // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time_Fire;                                         // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time_Rewind;                                       // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeDelay_Before_Pulling_Animation;                // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeDelay_Before_Target_Pulling;                   // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeDelay_Before_Following;                        // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min_Pitch;                                         // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max_Pitch;                                         // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min_Yaw;                                           // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max_Yaw;                                           // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkillHitCodeName_Attach;                           // 0x0254(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkillHitCodeName_Pulling;                          // 0x025C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Initialize();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWireActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWireActor")
	}
	static class ALWireActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALWireActor>();
	}
};
DUMPER7_ASSERTS_ALWireActor;

// Class ProjectP.LWorldEventComponent
// 0x00C8 (0x0178 - 0x00B0)
class ULWorldEventComponent final : public UActorComponent
{
public:
	class FName                                   DefaultCodeName;                                   // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, struct FWorldEventInfoList> WorldEventMap;                                     // 0x00B8(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FWorldEventInfo>     DialogMonsterEventMap;                             // 0x0108(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<ELCallBackEventType>                   CallBackEventTypeList;                             // 0x0158(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLCallBackEventData>            ReserveEventList;                                  // 0x0168(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWorldEventComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWorldEventComponent")
	}
	static class ULWorldEventComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWorldEventComponent>();
	}
};
DUMPER7_ASSERTS_ULWorldEventComponent;

// Class ProjectP.LWorldLoadSystem
// 0x0010 (0x0088 - 0x0078)
class ULWorldLoadSystem final : public ULGameSubSystem
{
public:
	class ULWorldLoadManager*                     WorldLoadManager;                                  // 0x0078(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULWorldLoadScreenInfo*                  WorldLoadScreenInfo;                               // 0x0080(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AsyncLoadAfterOpenWorld(bool bCreateForPIE);
	void AsyncWaitLevel(class FName TeleportCodeName);
	float GetAsyncLoadPercentage();
	class ULWorldLoadScreenInfo* GetWorldLoadScreenInfo();
	void MakeLoadAlwaysLoadLevelStreaming(class UWorld* World);
	void OnGameDataCharacterSync(class ULCharacterSaveGame* CharacterSaveGame, bool bLoad);

	bool CanSpawnActors() const;
	void GetLoadingStats(TArray<class FString>* Stats) const;
	bool IsAsyncWorldLoading() const;
	bool IsAsyncWorldLoadMode() const;
	bool IsAsyncWorldLoadModeInCurrentWorld(class UWorld* World) const;
	bool IsStartAsyncLoadMap(class FName LevelName) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWorldLoadSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWorldLoadSystem")
	}
	static class ULWorldLoadSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWorldLoadSystem>();
	}
};
DUMPER7_ASSERTS_ULWorldLoadSystem;

// Class ProjectP.LWorldLoadScreenInfo
// 0x0070 (0x0098 - 0x0028)
class ULWorldLoadScreenInfo final : public UObject
{
public:
	struct FLoadingScreenInfoPtr                  ScreenInfo;                                        // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLoadingTipInfoPtr>             TipInfos;                                          // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x58];                                      // 0x0040(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWorldLoadScreenInfo")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWorldLoadScreenInfo")
	}
	static class ULWorldLoadScreenInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWorldLoadScreenInfo>();
	}
};
DUMPER7_ASSERTS_ULWorldLoadScreenInfo;

// Class ProjectP.LWorldLoadManager
// 0x0080 (0x00A8 - 0x0028)
class ULWorldLoadManager final : public UObject
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        KeepWorldObjectsInTask;                            // 0x0078(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UObject*>                        KeepLoadingObjectsInTask;                          // 0x0088(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class ULWorldLoadSystem*                      OwnerSystem;                                       // 0x0098(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A0[0x4];                                       // 0x00A0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AllOverDelayTime;                                  // 0x00A4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AddKeepLoadingObjectsInTask(const TArray<class UObject*>& Objects);
	void AddKeepWorldObjectsInTask(const TArray<class UObject*>& Objects);
	void AsyncLoadAfterOpenWorld();
	void AsyncWaitLevel(class FName TeleportCodeName);
	void EmptyKeepLoadingObjectsInTask();
	void EmptyKeepWorldObjectsInTask();
	float GetLoadPercentage();
	void MakeLoadAlwaysLoadLevelStreaming(class UWorld* World);
	void TickAsyncWorldLoading(float DeltaTime);

	void GetLoadingStats(TArray<class FString>* Stats) const;
	bool IsAsyncWorldLoading() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWorldLoadManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWorldLoadManager")
	}
	static class ULWorldLoadManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWorldLoadManager>();
	}
};
DUMPER7_ASSERTS_ULWorldLoadManager;

// Class ProjectP.LWorldSystem
// 0x0098 (0x0110 - 0x0078)
class ULWorldSystem final : public ULGameSubSystem
{
public:
	uint8                                         Pad_78[0x20];                                      // 0x0078(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShowLocationMsgDelayTime;                          // 0x0098(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELAppearanceType                              Cached_AppearanceType;                             // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLWorldMapInfo>                 WorldMapInfoList;                                  // 0x00A0(0x0010)(Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	float                                         ReservedLevelDelayTime;                            // 0x00B0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ShowLocationCodeName;                              // 0x00B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CurrentLevelName;                                  // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ALGlobalEnvActor>        GlobalEnvActor;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ALWorldSystemData*                      SystemData;                                        // 0x00D0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLWorldLoadingIndicateManager          WorldLoadingIndicateManager;                       // 0x00D8(0x0038)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	void ChangeWeather(class FName InWeatherCodeName, float CustomChangeTime);
	void FinishLoadingScreenSameLevel();
	class ALGlobalEnvActor* GetGlobalEnvActor();
	float GetWorldLoadingProgress(float DeltaTime, bool bCheckLevelLoadOnly);
	void GotoReservedLevel();
	bool IsShowControlGuide();
	void NewOpenWorld_Inner(const class FName& LevelName, bool bMainLoading);
	void NewOpenWorld_Outer(const class FName& LevelName, bool bShowLoadingScreen, bool bPlayStart);
	void OnGlobalVariableChange(class FName InGlobalVariable, int32 InValue);
	void OnLoadedStatRoom();
	void OnLoadingScreenFinished();
	void OpenWorldFromMapType(ELWorldMapType TargetMapType, bool bShowLoadingScreen);
	void ProcessMoveToTeleportSpotSameLevel(class FName TeleportCodeName, bool bInGameLoadingScreen);
	void ProcessStartOnLoadingScreenFinished();
	void SetGlobalDither(bool InFlag);
	void SetGlobalEnvActor(class ALGlobalEnvActor* InActor);
	void ShowLocationMsg();
	void TeleportToObject(class FName TeleportCodeName, bool bInGameLoadingScreen, bool bReservedLevel);

	class FName GetAppliedWeatherCodeName() const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LWorldSystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LWorldSystem")
	}
	static class ULWorldSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULWorldSystem>();
	}
};
DUMPER7_ASSERTS_ULWorldSystem;

// Class ProjectP.ProjectPGameModeBase
// 0x0000 (0x02C0 - 0x02C0)
class AProjectPGameModeBase final : public AGameModeBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ProjectPGameModeBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ProjectPGameModeBase")
	}
	static class AProjectPGameModeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProjectPGameModeBase>();
	}
};
DUMPER7_ASSERTS_AProjectPGameModeBase;

}

