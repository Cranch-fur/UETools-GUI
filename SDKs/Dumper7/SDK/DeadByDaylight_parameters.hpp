#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DeadByDaylight

#include "Basic.hpp"

#include "Competence_structs.hpp"
#include "ReversibleActionSystem_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "AnimationUtilities_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Customization_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "DBDUIViewsMobile_structs.hpp"
#include "AIModule_structs.hpp"
#include "Projectile_structs.hpp"
#include "NetworkUtilities_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayUtilities_structs.hpp"
#include "Niagara_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function DeadByDaylight.DBDPlayerControllerBase.CallConsoleCmdOnServer_Server
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_CallConsoleCmdOnServer_Server final
{
public:
	class FString                                 commandLine;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_CallConsoleCmdOnServer_Server) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_CallConsoleCmdOnServer_Server");
static_assert(sizeof(DBDPlayerControllerBase_CallConsoleCmdOnServer_Server) == 0x000010, "Wrong size on DBDPlayerControllerBase_CallConsoleCmdOnServer_Server");
static_assert(offsetof(DBDPlayerControllerBase_CallConsoleCmdOnServer_Server, commandLine) == 0x000000, "Member 'DBDPlayerControllerBase_CallConsoleCmdOnServer_Server::commandLine' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Client_EACMessageFromServer
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_Client_EACMessageFromServer final
{
public:
	TArray<uint8>                                 message;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Client_EACMessageFromServer) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Client_EACMessageFromServer");
static_assert(sizeof(DBDPlayerControllerBase_Client_EACMessageFromServer) == 0x000010, "Wrong size on DBDPlayerControllerBase_Client_EACMessageFromServer");
static_assert(offsetof(DBDPlayerControllerBase_Client_EACMessageFromServer, message) == 0x000000, "Member 'DBDPlayerControllerBase_Client_EACMessageFromServer::message' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Client_SendLogs
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_Client_SendLogs final
{
public:
	TArray<class FString>                         ensures;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Client_SendLogs) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Client_SendLogs");
static_assert(sizeof(DBDPlayerControllerBase_Client_SendLogs) == 0x000010, "Wrong size on DBDPlayerControllerBase_Client_SendLogs");
static_assert(offsetof(DBDPlayerControllerBase_Client_SendLogs, ensures) == 0x000000, "Member 'DBDPlayerControllerBase_Client_SendLogs::ensures' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Client_SendServerAuthentication
// 0x0020 (0x0020 - 0x0000)
struct DBDPlayerControllerBase_Client_SendServerAuthentication final
{
public:
	class FString                                 authServerTicket;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        steamID;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ticketLength;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerControllerBase_Client_SendServerAuthentication) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Client_SendServerAuthentication");
static_assert(sizeof(DBDPlayerControllerBase_Client_SendServerAuthentication) == 0x000020, "Wrong size on DBDPlayerControllerBase_Client_SendServerAuthentication");
static_assert(offsetof(DBDPlayerControllerBase_Client_SendServerAuthentication, authServerTicket) == 0x000000, "Member 'DBDPlayerControllerBase_Client_SendServerAuthentication::authServerTicket' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Client_SendServerAuthentication, steamID) == 0x000010, "Member 'DBDPlayerControllerBase_Client_SendServerAuthentication::steamID' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Client_SendServerAuthentication, ticketLength) == 0x000018, "Member 'DBDPlayerControllerBase_Client_SendServerAuthentication::ticketLength' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Client_SendWarning
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerControllerBase_Client_SendWarning final
{
public:
	bool                                          penaltyStarts;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         seconds;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Client_SendWarning) == 0x000004, "Wrong alignment on DBDPlayerControllerBase_Client_SendWarning");
static_assert(sizeof(DBDPlayerControllerBase_Client_SendWarning) == 0x000008, "Wrong size on DBDPlayerControllerBase_Client_SendWarning");
static_assert(offsetof(DBDPlayerControllerBase_Client_SendWarning, penaltyStarts) == 0x000000, "Member 'DBDPlayerControllerBase_Client_SendWarning::penaltyStarts' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Client_SendWarning, seconds) == 0x000004, "Member 'DBDPlayerControllerBase_Client_SendWarning::seconds' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_BuildFromMap
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_DBD_BuildFromMap final
{
public:
	class FString                                 map;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_BuildFromMap) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_DBD_BuildFromMap");
static_assert(sizeof(DBDPlayerControllerBase_DBD_BuildFromMap) == 0x000010, "Wrong size on DBDPlayerControllerBase_DBD_BuildFromMap");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromMap, map) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_BuildFromMap::map' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_BuildFromPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerControllerBase_DBD_BuildFromPlayerCount final
{
public:
	int32                                         count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_BuildFromPlayerCount) == 0x000004, "Wrong alignment on DBDPlayerControllerBase_DBD_BuildFromPlayerCount");
static_assert(sizeof(DBDPlayerControllerBase_DBD_BuildFromPlayerCount) == 0x000004, "Wrong size on DBDPlayerControllerBase_DBD_BuildFromPlayerCount");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromPlayerCount, count) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_BuildFromPlayerCount::count' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_BuildFromPremadeMap
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_DBD_BuildFromPremadeMap final
{
public:
	class FString                                 map;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_BuildFromPremadeMap) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_DBD_BuildFromPremadeMap");
static_assert(sizeof(DBDPlayerControllerBase_DBD_BuildFromPremadeMap) == 0x000010, "Wrong size on DBDPlayerControllerBase_DBD_BuildFromPremadeMap");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromPremadeMap, map) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_BuildFromPremadeMap::map' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_BuildFromSeed
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerControllerBase_DBD_BuildFromSeed final
{
public:
	int32                                         seed;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_BuildFromSeed) == 0x000004, "Wrong alignment on DBDPlayerControllerBase_DBD_BuildFromSeed");
static_assert(sizeof(DBDPlayerControllerBase_DBD_BuildFromSeed) == 0x000004, "Wrong size on DBDPlayerControllerBase_DBD_BuildFromSeed");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromSeed, seed) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_BuildFromSeed::seed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_BuildFromTile
// 0x0020 (0x0020 - 0x0000)
struct DBDPlayerControllerBase_DBD_BuildFromTile final
{
public:
	int32                                         matrixX;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         matrixY;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rotation;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 name;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_BuildFromTile) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_DBD_BuildFromTile");
static_assert(sizeof(DBDPlayerControllerBase_DBD_BuildFromTile) == 0x000020, "Wrong size on DBDPlayerControllerBase_DBD_BuildFromTile");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromTile, matrixX) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_BuildFromTile::matrixX' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromTile, matrixY) == 0x000004, "Member 'DBDPlayerControllerBase_DBD_BuildFromTile::matrixY' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromTile, rotation) == 0x000008, "Member 'DBDPlayerControllerBase_DBD_BuildFromTile::rotation' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromTile, name) == 0x000010, "Member 'DBDPlayerControllerBase_DBD_BuildFromTile::name' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_DebugSendChatMessage
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_DBD_DebugSendChatMessage final
{
public:
	class FString                                 msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_DebugSendChatMessage) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_DBD_DebugSendChatMessage");
static_assert(sizeof(DBDPlayerControllerBase_DBD_DebugSendChatMessage) == 0x000010, "Wrong size on DBDPlayerControllerBase_DBD_DebugSendChatMessage");
static_assert(offsetof(DBDPlayerControllerBase_DBD_DebugSendChatMessage, msg) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_DebugSendChatMessage::msg' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_FillScoreCategory
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerControllerBase_DBD_FillScoreCategory final
{
public:
	int32                                         category;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_FillScoreCategory) == 0x000004, "Wrong alignment on DBDPlayerControllerBase_DBD_FillScoreCategory");
static_assert(sizeof(DBDPlayerControllerBase_DBD_FillScoreCategory) == 0x000004, "Wrong size on DBDPlayerControllerBase_DBD_FillScoreCategory");
static_assert(offsetof(DBDPlayerControllerBase_DBD_FillScoreCategory, category) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_FillScoreCategory::category' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_FireTestScore
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerControllerBase_DBD_FireTestScore final
{
public:
	int32                                         category;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_FireTestScore) == 0x000004, "Wrong alignment on DBDPlayerControllerBase_DBD_FireTestScore");
static_assert(sizeof(DBDPlayerControllerBase_DBD_FireTestScore) == 0x000008, "Wrong size on DBDPlayerControllerBase_DBD_FireTestScore");
static_assert(offsetof(DBDPlayerControllerBase_DBD_FireTestScore, category) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_FireTestScore::category' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_DBD_FireTestScore, value) == 0x000004, "Member 'DBDPlayerControllerBase_DBD_FireTestScore::value' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_Server final
{
public:
	class FString                                 commandLine;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Server) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Server");
static_assert(sizeof(DBDPlayerControllerBase_Server) == 0x000010, "Wrong size on DBDPlayerControllerBase_Server");
static_assert(offsetof(DBDPlayerControllerBase_Server, commandLine) == 0x000000, "Member 'DBDPlayerControllerBase_Server::commandLine' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server_EACMessageFromClient
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_Server_EACMessageFromClient final
{
public:
	TArray<uint8>                                 message;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Server_EACMessageFromClient) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Server_EACMessageFromClient");
static_assert(sizeof(DBDPlayerControllerBase_Server_EACMessageFromClient) == 0x000010, "Wrong size on DBDPlayerControllerBase_Server_EACMessageFromClient");
static_assert(offsetof(DBDPlayerControllerBase_Server_EACMessageFromClient, message) == 0x000000, "Member 'DBDPlayerControllerBase_Server_EACMessageFromClient::message' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server_ReceivePlayerProfile
// 0x0100 (0x0100 - 0x0000)
struct DBDPlayerControllerBase_Server_ReceivePlayerProfile final
{
public:
	struct FPlayerSavedProfileDataShared          savedProfileData;                                  // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
	struct FPlayerLoadoutData                     playerLoadout;                                     // 0x0068(0x0098)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Server_ReceivePlayerProfile) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Server_ReceivePlayerProfile");
static_assert(sizeof(DBDPlayerControllerBase_Server_ReceivePlayerProfile) == 0x000100, "Wrong size on DBDPlayerControllerBase_Server_ReceivePlayerProfile");
static_assert(offsetof(DBDPlayerControllerBase_Server_ReceivePlayerProfile, savedProfileData) == 0x000000, "Member 'DBDPlayerControllerBase_Server_ReceivePlayerProfile::savedProfileData' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Server_ReceivePlayerProfile, playerLoadout) == 0x000068, "Member 'DBDPlayerControllerBase_Server_ReceivePlayerProfile::playerLoadout' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server_SendClientAuthentication
// 0x0020 (0x0020 - 0x0000)
struct DBDPlayerControllerBase_Server_SendClientAuthentication final
{
public:
	class FString                                 authClientTicket;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        steamID;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ticketLength;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerControllerBase_Server_SendClientAuthentication) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Server_SendClientAuthentication");
static_assert(sizeof(DBDPlayerControllerBase_Server_SendClientAuthentication) == 0x000020, "Wrong size on DBDPlayerControllerBase_Server_SendClientAuthentication");
static_assert(offsetof(DBDPlayerControllerBase_Server_SendClientAuthentication, authClientTicket) == 0x000000, "Member 'DBDPlayerControllerBase_Server_SendClientAuthentication::authClientTicket' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Server_SendClientAuthentication, steamID) == 0x000010, "Member 'DBDPlayerControllerBase_Server_SendClientAuthentication::steamID' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Server_SendClientAuthentication, ticketLength) == 0x000018, "Member 'DBDPlayerControllerBase_Server_SendClientAuthentication::ticketLength' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server_SendMessage
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_Server_SendMessage final
{
public:
	class FString                                 message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Server_SendMessage) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Server_SendMessage");
static_assert(sizeof(DBDPlayerControllerBase_Server_SendMessage) == 0x000010, "Wrong size on DBDPlayerControllerBase_Server_SendMessage");
static_assert(offsetof(DBDPlayerControllerBase_Server_SendMessage, message) == 0x000000, "Member 'DBDPlayerControllerBase_Server_SendMessage::message' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server_SetConsecutiveMatchStreak
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerControllerBase_Server_SetConsecutiveMatchStreak final
{
public:
	int32                                         consecutiveMatch;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Server_SetConsecutiveMatchStreak) == 0x000004, "Wrong alignment on DBDPlayerControllerBase_Server_SetConsecutiveMatchStreak");
static_assert(sizeof(DBDPlayerControllerBase_Server_SetConsecutiveMatchStreak) == 0x000004, "Wrong size on DBDPlayerControllerBase_Server_SetConsecutiveMatchStreak");
static_assert(offsetof(DBDPlayerControllerBase_Server_SetConsecutiveMatchStreak, consecutiveMatch) == 0x000000, "Member 'DBDPlayerControllerBase_Server_SetConsecutiveMatchStreak::consecutiveMatch' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server_UpdateReplicatedPips
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerControllerBase_Server_UpdateReplicatedPips final
{
public:
	int32                                         pipsToAdd;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Server_UpdateReplicatedPips) == 0x000004, "Wrong alignment on DBDPlayerControllerBase_Server_UpdateReplicatedPips");
static_assert(sizeof(DBDPlayerControllerBase_Server_UpdateReplicatedPips) == 0x000004, "Wrong size on DBDPlayerControllerBase_Server_UpdateReplicatedPips");
static_assert(offsetof(DBDPlayerControllerBase_Server_UpdateReplicatedPips, pipsToAdd) == 0x000000, "Member 'DBDPlayerControllerBase_Server_UpdateReplicatedPips::pipsToAdd' has a wrong offset!");

// Function DeadByDaylight.AICharacterBehaviour.SetEnable
// 0x0001 (0x0001 - 0x0000)
struct AICharacterBehaviour_SetEnable final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharacterBehaviour_SetEnable) == 0x000001, "Wrong alignment on AICharacterBehaviour_SetEnable");
static_assert(sizeof(AICharacterBehaviour_SetEnable) == 0x000001, "Wrong size on AICharacterBehaviour_SetEnable");
static_assert(offsetof(AICharacterBehaviour_SetEnable, enable) == 0x000000, "Member 'AICharacterBehaviour_SetEnable::enable' has a wrong offset!");

// Function DeadByDaylight.AICharacterBehaviour.Update
// 0x0004 (0x0004 - 0x0000)
struct AICharacterBehaviour_Update final
{
public:
	float                                         deltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharacterBehaviour_Update) == 0x000004, "Wrong alignment on AICharacterBehaviour_Update");
static_assert(sizeof(AICharacterBehaviour_Update) == 0x000004, "Wrong size on AICharacterBehaviour_Update");
static_assert(offsetof(AICharacterBehaviour_Update, deltaTime) == 0x000000, "Member 'AICharacterBehaviour_Update::deltaTime' has a wrong offset!");

// Function DeadByDaylight.AICharacterBehaviour.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct AICharacterBehaviour_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharacterBehaviour_IsEnabled) == 0x000001, "Wrong alignment on AICharacterBehaviour_IsEnabled");
static_assert(sizeof(AICharacterBehaviour_IsEnabled) == 0x000001, "Wrong size on AICharacterBehaviour_IsEnabled");
static_assert(offsetof(AICharacterBehaviour_IsEnabled, ReturnValue) == 0x000000, "Member 'AICharacterBehaviour_IsEnabled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.AddCondition
// 0x0010 (0x0010 - 0x0000)
struct GameplayModifierContainer_AddCondition final
{
public:
	TSubclassOf<class UBaseModifierCondition>     conditionType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBaseModifierCondition*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_AddCondition) == 0x000008, "Wrong alignment on GameplayModifierContainer_AddCondition");
static_assert(sizeof(GameplayModifierContainer_AddCondition) == 0x000010, "Wrong size on GameplayModifierContainer_AddCondition");
static_assert(offsetof(GameplayModifierContainer_AddCondition, conditionType) == 0x000000, "Member 'GameplayModifierContainer_AddCondition::conditionType' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_AddCondition, ReturnValue) == 0x000008, "Member 'GameplayModifierContainer_AddCondition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.Apply
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_Apply final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_Apply) == 0x000004, "Wrong alignment on GameplayModifierContainer_Apply");
static_assert(sizeof(GameplayModifierContainer_Apply) == 0x000004, "Wrong size on GameplayModifierContainer_Apply");
static_assert(offsetof(GameplayModifierContainer_Apply, DeltaTime) == 0x000000, "Member 'GameplayModifierContainer_Apply::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.Authority_SetActivationTimerPaused
// 0x0001 (0x0001 - 0x0000)
struct GameplayModifierContainer_Authority_SetActivationTimerPaused final
{
public:
	bool                                          paused;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_Authority_SetActivationTimerPaused) == 0x000001, "Wrong alignment on GameplayModifierContainer_Authority_SetActivationTimerPaused");
static_assert(sizeof(GameplayModifierContainer_Authority_SetActivationTimerPaused) == 0x000001, "Wrong size on GameplayModifierContainer_Authority_SetActivationTimerPaused");
static_assert(offsetof(GameplayModifierContainer_Authority_SetActivationTimerPaused, paused) == 0x000000, "Member 'GameplayModifierContainer_Authority_SetActivationTimerPaused::paused' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.Authority_TriggerActivationTimer
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_Authority_TriggerActivationTimer final
{
public:
	float                                         activationTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_Authority_TriggerActivationTimer) == 0x000004, "Wrong alignment on GameplayModifierContainer_Authority_TriggerActivationTimer");
static_assert(sizeof(GameplayModifierContainer_Authority_TriggerActivationTimer) == 0x000004, "Wrong size on GameplayModifierContainer_Authority_TriggerActivationTimer");
static_assert(offsetof(GameplayModifierContainer_Authority_TriggerActivationTimer, activationTime) == 0x000000, "Member 'GameplayModifierContainer_Authority_TriggerActivationTimer::activationTime' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.ListenToDispatcherGameEvent
// 0x000C (0x000C - 0x0000)
struct GameplayModifierContainer_ListenToDispatcherGameEvent final
{
public:
	struct FGameplayTag                           eventType;                                         // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_ListenToDispatcherGameEvent) == 0x000004, "Wrong alignment on GameplayModifierContainer_ListenToDispatcherGameEvent");
static_assert(sizeof(GameplayModifierContainer_ListenToDispatcherGameEvent) == 0x00000C, "Wrong size on GameplayModifierContainer_ListenToDispatcherGameEvent");
static_assert(offsetof(GameplayModifierContainer_ListenToDispatcherGameEvent, eventType) == 0x000000, "Member 'GameplayModifierContainer_ListenToDispatcherGameEvent::eventType' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.OnGameEventDispatched
// 0x0038 (0x0038 - 0x0000)
struct GameplayModifierContainer_OnGameEventDispatched final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_OnGameEventDispatched) == 0x000008, "Wrong alignment on GameplayModifierContainer_OnGameEventDispatched");
static_assert(sizeof(GameplayModifierContainer_OnGameEventDispatched) == 0x000038, "Wrong size on GameplayModifierContainer_OnGameEventDispatched");
static_assert(offsetof(GameplayModifierContainer_OnGameEventDispatched, gameEventType) == 0x000000, "Member 'GameplayModifierContainer_OnGameEventDispatched::gameEventType' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_OnGameEventDispatched, gameEventData) == 0x000010, "Member 'GameplayModifierContainer_OnGameEventDispatched::gameEventData' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.RemoveModifier
// 0x000C (0x000C - 0x0000)
struct GameplayModifierContainer_RemoveModifier final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_RemoveModifier) == 0x000004, "Wrong alignment on GameplayModifierContainer_RemoveModifier");
static_assert(sizeof(GameplayModifierContainer_RemoveModifier) == 0x00000C, "Wrong size on GameplayModifierContainer_RemoveModifier");
static_assert(offsetof(GameplayModifierContainer_RemoveModifier, type) == 0x000000, "Member 'GameplayModifierContainer_RemoveModifier::type' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.SetFlag
// 0x0010 (0x0010 - 0x0000)
struct GameplayModifierContainer_SetFlag final
{
public:
	struct FGameplayTag                           flag;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          flagValue;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModifierContainer_SetFlag) == 0x000004, "Wrong alignment on GameplayModifierContainer_SetFlag");
static_assert(sizeof(GameplayModifierContainer_SetFlag) == 0x000010, "Wrong size on GameplayModifierContainer_SetFlag");
static_assert(offsetof(GameplayModifierContainer_SetFlag, flag) == 0x000000, "Member 'GameplayModifierContainer_SetFlag::flag' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_SetFlag, flagValue) == 0x00000C, "Member 'GameplayModifierContainer_SetFlag::flagValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.SetModifierValue
// 0x0010 (0x0010 - 0x0000)
struct GameplayModifierContainer_SetModifierValue final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameplayModifierValue;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_SetModifierValue) == 0x000004, "Wrong alignment on GameplayModifierContainer_SetModifierValue");
static_assert(sizeof(GameplayModifierContainer_SetModifierValue) == 0x000010, "Wrong size on GameplayModifierContainer_SetModifierValue");
static_assert(offsetof(GameplayModifierContainer_SetModifierValue, type) == 0x000000, "Member 'GameplayModifierContainer_SetModifierValue::type' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_SetModifierValue, GameplayModifierValue) == 0x00000C, "Member 'GameplayModifierContainer_SetModifierValue::GameplayModifierValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.SetUseApplyFunction
// 0x0001 (0x0001 - 0x0000)
struct GameplayModifierContainer_SetUseApplyFunction final
{
public:
	bool                                          use;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_SetUseApplyFunction) == 0x000001, "Wrong alignment on GameplayModifierContainer_SetUseApplyFunction");
static_assert(sizeof(GameplayModifierContainer_SetUseApplyFunction) == 0x000001, "Wrong size on GameplayModifierContainer_SetUseApplyFunction");
static_assert(offsetof(GameplayModifierContainer_SetUseApplyFunction, use) == 0x000000, "Member 'GameplayModifierContainer_SetUseApplyFunction::use' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.UnlistenToDispatcherGameEvent
// 0x000C (0x000C - 0x0000)
struct GameplayModifierContainer_UnlistenToDispatcherGameEvent final
{
public:
	struct FGameplayTag                           eventType;                                         // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_UnlistenToDispatcherGameEvent) == 0x000004, "Wrong alignment on GameplayModifierContainer_UnlistenToDispatcherGameEvent");
static_assert(sizeof(GameplayModifierContainer_UnlistenToDispatcherGameEvent) == 0x00000C, "Wrong size on GameplayModifierContainer_UnlistenToDispatcherGameEvent");
static_assert(offsetof(GameplayModifierContainer_UnlistenToDispatcherGameEvent, eventType) == 0x000000, "Member 'GameplayModifierContainer_UnlistenToDispatcherGameEvent::eventType' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.FireActiveStatusViewEvent
// 0x0044 (0x0044 - 0x0000)
struct GameplayModifierContainer_FireActiveStatusViewEvent final
{
public:
	class FName                                   statusViewID;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   uniqueSourceID;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStatusViewSource                      statusViewSource;                                  // 0x0018(0x002C)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_FireActiveStatusViewEvent) == 0x000004, "Wrong alignment on GameplayModifierContainer_FireActiveStatusViewEvent");
static_assert(sizeof(GameplayModifierContainer_FireActiveStatusViewEvent) == 0x000044, "Wrong size on GameplayModifierContainer_FireActiveStatusViewEvent");
static_assert(offsetof(GameplayModifierContainer_FireActiveStatusViewEvent, statusViewID) == 0x000000, "Member 'GameplayModifierContainer_FireActiveStatusViewEvent::statusViewID' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_FireActiveStatusViewEvent, uniqueSourceID) == 0x00000C, "Member 'GameplayModifierContainer_FireActiveStatusViewEvent::uniqueSourceID' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_FireActiveStatusViewEvent, statusViewSource) == 0x000018, "Member 'GameplayModifierContainer_FireActiveStatusViewEvent::statusViewSource' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetActivationTimerDuration
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetActivationTimerDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetActivationTimerDuration) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetActivationTimerDuration");
static_assert(sizeof(GameplayModifierContainer_GetActivationTimerDuration) == 0x000004, "Wrong size on GameplayModifierContainer_GetActivationTimerDuration");
static_assert(offsetof(GameplayModifierContainer_GetActivationTimerDuration, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetActivationTimerDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetActivationTimerElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetActivationTimerElapsedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetActivationTimerElapsedTime) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetActivationTimerElapsedTime");
static_assert(sizeof(GameplayModifierContainer_GetActivationTimerElapsedTime) == 0x000004, "Wrong size on GameplayModifierContainer_GetActivationTimerElapsedTime");
static_assert(offsetof(GameplayModifierContainer_GetActivationTimerElapsedTime, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetActivationTimerElapsedTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetActivationTimerElapsedTimePercent
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetActivationTimerElapsedTimePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetActivationTimerElapsedTimePercent) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetActivationTimerElapsedTimePercent");
static_assert(sizeof(GameplayModifierContainer_GetActivationTimerElapsedTimePercent) == 0x000004, "Wrong size on GameplayModifierContainer_GetActivationTimerElapsedTimePercent");
static_assert(offsetof(GameplayModifierContainer_GetActivationTimerElapsedTimePercent, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetActivationTimerElapsedTimePercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetActivationTimerPercentRemaining
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetActivationTimerPercentRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetActivationTimerPercentRemaining) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetActivationTimerPercentRemaining");
static_assert(sizeof(GameplayModifierContainer_GetActivationTimerPercentRemaining) == 0x000004, "Wrong size on GameplayModifierContainer_GetActivationTimerPercentRemaining");
static_assert(offsetof(GameplayModifierContainer_GetActivationTimerPercentRemaining, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetActivationTimerPercentRemaining::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetActivationTimerRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetActivationTimerRemainingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetActivationTimerRemainingTime) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetActivationTimerRemainingTime");
static_assert(sizeof(GameplayModifierContainer_GetActivationTimerRemainingTime) == 0x000004, "Wrong size on GameplayModifierContainer_GetActivationTimerRemainingTime");
static_assert(offsetof(GameplayModifierContainer_GetActivationTimerRemainingTime, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetActivationTimerRemainingTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetIconFilePathIndex
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetIconFilePathIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetIconFilePathIndex) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetIconFilePathIndex");
static_assert(sizeof(GameplayModifierContainer_GetIconFilePathIndex) == 0x000004, "Wrong size on GameplayModifierContainer_GetIconFilePathIndex");
static_assert(offsetof(GameplayModifierContainer_GetIconFilePathIndex, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetIconFilePathIndex::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetInventoryItemType
// 0x0001 (0x0001 - 0x0000)
struct GameplayModifierContainer_GetInventoryItemType final
{
public:
	EInventoryItemType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetInventoryItemType) == 0x000001, "Wrong alignment on GameplayModifierContainer_GetInventoryItemType");
static_assert(sizeof(GameplayModifierContainer_GetInventoryItemType) == 0x000001, "Wrong size on GameplayModifierContainer_GetInventoryItemType");
static_assert(offsetof(GameplayModifierContainer_GetInventoryItemType, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetInventoryItemType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetLevelToDisplay
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetLevelToDisplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetLevelToDisplay) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetLevelToDisplay");
static_assert(sizeof(GameplayModifierContainer_GetLevelToDisplay) == 0x000004, "Wrong size on GameplayModifierContainer_GetLevelToDisplay");
static_assert(offsetof(GameplayModifierContainer_GetLevelToDisplay, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetLevelToDisplay::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetModifierValue
// 0x0010 (0x0010 - 0x0000)
struct GameplayModifierContainer_GetModifierValue final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetModifierValue) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetModifierValue");
static_assert(sizeof(GameplayModifierContainer_GetModifierValue) == 0x000010, "Wrong size on GameplayModifierContainer_GetModifierValue");
static_assert(offsetof(GameplayModifierContainer_GetModifierValue, type) == 0x000000, "Member 'GameplayModifierContainer_GetModifierValue::type' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_GetModifierValue, ReturnValue) == 0x00000C, "Member 'GameplayModifierContainer_GetModifierValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetOriginatingEffect
// 0x0008 (0x0008 - 0x0000)
struct GameplayModifierContainer_GetOriginatingEffect final
{
public:
	class UGameplayModifierContainer*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetOriginatingEffect) == 0x000008, "Wrong alignment on GameplayModifierContainer_GetOriginatingEffect");
static_assert(sizeof(GameplayModifierContainer_GetOriginatingEffect) == 0x000008, "Wrong size on GameplayModifierContainer_GetOriginatingEffect");
static_assert(offsetof(GameplayModifierContainer_GetOriginatingEffect, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetOriginatingEffect::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetOwningPlayer
// 0x0008 (0x0008 - 0x0000)
struct GameplayModifierContainer_GetOwningPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetOwningPlayer) == 0x000008, "Wrong alignment on GameplayModifierContainer_GetOwningPlayer");
static_assert(sizeof(GameplayModifierContainer_GetOwningPlayer) == 0x000008, "Wrong size on GameplayModifierContainer_GetOwningPlayer");
static_assert(offsetof(GameplayModifierContainer_GetOwningPlayer, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetOwningPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetPercentageFill
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetPercentageFill final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetPercentageFill) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetPercentageFill");
static_assert(sizeof(GameplayModifierContainer_GetPercentageFill) == 0x000004, "Wrong size on GameplayModifierContainer_GetPercentageFill");
static_assert(offsetof(GameplayModifierContainer_GetPercentageFill, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetPercentageFill::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetRemainingLifetime
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetRemainingLifetime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetRemainingLifetime) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetRemainingLifetime");
static_assert(sizeof(GameplayModifierContainer_GetRemainingLifetime) == 0x000004, "Wrong size on GameplayModifierContainer_GetRemainingLifetime");
static_assert(offsetof(GameplayModifierContainer_GetRemainingLifetime, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetRemainingLifetime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.HasFlag
// 0x0010 (0x0010 - 0x0000)
struct GameplayModifierContainer_HasFlag final
{
public:
	struct FGameplayTag                           flag;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModifierContainer_HasFlag) == 0x000004, "Wrong alignment on GameplayModifierContainer_HasFlag");
static_assert(sizeof(GameplayModifierContainer_HasFlag) == 0x000010, "Wrong size on GameplayModifierContainer_HasFlag");
static_assert(offsetof(GameplayModifierContainer_HasFlag, flag) == 0x000000, "Member 'GameplayModifierContainer_HasFlag::flag' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_HasFlag, ReturnValue) == 0x00000C, "Member 'GameplayModifierContainer_HasFlag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.HasModifierOfType
// 0x0010 (0x0010 - 0x0000)
struct GameplayModifierContainer_HasModifierOfType final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModifierContainer_HasModifierOfType) == 0x000004, "Wrong alignment on GameplayModifierContainer_HasModifierOfType");
static_assert(sizeof(GameplayModifierContainer_HasModifierOfType) == 0x000010, "Wrong size on GameplayModifierContainer_HasModifierOfType");
static_assert(offsetof(GameplayModifierContainer_HasModifierOfType, type) == 0x000000, "Member 'GameplayModifierContainer_HasModifierOfType::type' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_HasModifierOfType, ReturnValue) == 0x00000C, "Member 'GameplayModifierContainer_HasModifierOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.IsActivationTimerActive
// 0x0001 (0x0001 - 0x0000)
struct GameplayModifierContainer_IsActivationTimerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_IsActivationTimerActive) == 0x000001, "Wrong alignment on GameplayModifierContainer_IsActivationTimerActive");
static_assert(sizeof(GameplayModifierContainer_IsActivationTimerActive) == 0x000001, "Wrong size on GameplayModifierContainer_IsActivationTimerActive");
static_assert(offsetof(GameplayModifierContainer_IsActivationTimerActive, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_IsActivationTimerActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.IsActivationTimerDone
// 0x0001 (0x0001 - 0x0000)
struct GameplayModifierContainer_IsActivationTimerDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_IsActivationTimerDone) == 0x000001, "Wrong alignment on GameplayModifierContainer_IsActivationTimerDone");
static_assert(sizeof(GameplayModifierContainer_IsActivationTimerDone) == 0x000001, "Wrong size on GameplayModifierContainer_IsActivationTimerDone");
static_assert(offsetof(GameplayModifierContainer_IsActivationTimerDone, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_IsActivationTimerDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.IsStatusViewActive
// 0x0001 (0x0001 - 0x0000)
struct GameplayModifierContainer_IsStatusViewActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_IsStatusViewActive) == 0x000001, "Wrong alignment on GameplayModifierContainer_IsStatusViewActive");
static_assert(sizeof(GameplayModifierContainer_IsStatusViewActive) == 0x000001, "Wrong size on GameplayModifierContainer_IsStatusViewActive");
static_assert(offsetof(GameplayModifierContainer_IsStatusViewActive, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_IsStatusViewActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Perk.Authority_SetIsUsable
// 0x0001 (0x0001 - 0x0000)
struct Perk_Authority_SetIsUsable final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_Authority_SetIsUsable) == 0x000001, "Wrong alignment on Perk_Authority_SetIsUsable");
static_assert(sizeof(Perk_Authority_SetIsUsable) == 0x000001, "Wrong size on Perk_Authority_SetIsUsable");
static_assert(offsetof(Perk_Authority_SetIsUsable, value) == 0x000000, "Member 'Perk_Authority_SetIsUsable::value' has a wrong offset!");

// Function DeadByDaylight.Perk.Authority_SetMaxTokenCount
// 0x0004 (0x0004 - 0x0000)
struct Perk_Authority_SetMaxTokenCount final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_Authority_SetMaxTokenCount) == 0x000004, "Wrong alignment on Perk_Authority_SetMaxTokenCount");
static_assert(sizeof(Perk_Authority_SetMaxTokenCount) == 0x000004, "Wrong size on Perk_Authority_SetMaxTokenCount");
static_assert(offsetof(Perk_Authority_SetMaxTokenCount, value) == 0x000000, "Member 'Perk_Authority_SetMaxTokenCount::value' has a wrong offset!");

// Function DeadByDaylight.Perk.Authority_SetTokenCount
// 0x0004 (0x0004 - 0x0000)
struct Perk_Authority_SetTokenCount final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_Authority_SetTokenCount) == 0x000004, "Wrong alignment on Perk_Authority_SetTokenCount");
static_assert(sizeof(Perk_Authority_SetTokenCount) == 0x000004, "Wrong size on Perk_Authority_SetTokenCount");
static_assert(offsetof(Perk_Authority_SetTokenCount, value) == 0x000000, "Member 'Perk_Authority_SetTokenCount::value' has a wrong offset!");

// Function DeadByDaylight.Perk.Authority_TriggerCooldownTimer
// 0x0004 (0x0004 - 0x0000)
struct Perk_Authority_TriggerCooldownTimer final
{
public:
	float                                         coolddownTime;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_Authority_TriggerCooldownTimer) == 0x000004, "Wrong alignment on Perk_Authority_TriggerCooldownTimer");
static_assert(sizeof(Perk_Authority_TriggerCooldownTimer) == 0x000004, "Wrong size on Perk_Authority_TriggerCooldownTimer");
static_assert(offsetof(Perk_Authority_TriggerCooldownTimer, coolddownTime) == 0x000000, "Member 'Perk_Authority_TriggerCooldownTimer::coolddownTime' has a wrong offset!");

// Function DeadByDaylight.Perk.Authority_TriggerHudIconTimer
// 0x0004 (0x0004 - 0x0000)
struct Perk_Authority_TriggerHudIconTimer final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_Authority_TriggerHudIconTimer) == 0x000004, "Wrong alignment on Perk_Authority_TriggerHudIconTimer");
static_assert(sizeof(Perk_Authority_TriggerHudIconTimer) == 0x000004, "Wrong size on Perk_Authority_TriggerHudIconTimer");
static_assert(offsetof(Perk_Authority_TriggerHudIconTimer, duration) == 0x000000, "Member 'Perk_Authority_TriggerHudIconTimer::duration' has a wrong offset!");

// Function DeadByDaylight.Perk.FireActivePerkEvent
// 0x0008 (0x0008 - 0x0000)
struct Perk_FireActivePerkEvent final
{
public:
	float                                         percentage;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         chargeCount;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_FireActivePerkEvent) == 0x000004, "Wrong alignment on Perk_FireActivePerkEvent");
static_assert(sizeof(Perk_FireActivePerkEvent) == 0x000008, "Wrong size on Perk_FireActivePerkEvent");
static_assert(offsetof(Perk_FireActivePerkEvent, percentage) == 0x000000, "Member 'Perk_FireActivePerkEvent::percentage' has a wrong offset!");
static_assert(offsetof(Perk_FireActivePerkEvent, chargeCount) == 0x000004, "Member 'Perk_FireActivePerkEvent::chargeCount' has a wrong offset!");

// Function DeadByDaylight.Perk.GetGameplayModifierData
// 0x0030 (0x0030 - 0x0000)
struct Perk_GetGameplayModifierData final
{
public:
	struct FGameplayModifierData                  ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_GetGameplayModifierData) == 0x000008, "Wrong alignment on Perk_GetGameplayModifierData");
static_assert(sizeof(Perk_GetGameplayModifierData) == 0x000030, "Wrong size on Perk_GetGameplayModifierData");
static_assert(offsetof(Perk_GetGameplayModifierData, ReturnValue) == 0x000000, "Member 'Perk_GetGameplayModifierData::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Perk.OnRep_TokenCount
// 0x0004 (0x0004 - 0x0000)
struct Perk_OnRep_TokenCount final
{
public:
	int32                                         oldCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_OnRep_TokenCount) == 0x000004, "Wrong alignment on Perk_OnRep_TokenCount");
static_assert(sizeof(Perk_OnRep_TokenCount) == 0x000004, "Wrong size on Perk_OnRep_TokenCount");
static_assert(offsetof(Perk_OnRep_TokenCount, oldCount) == 0x000000, "Member 'Perk_OnRep_TokenCount::oldCount' has a wrong offset!");

// Function DeadByDaylight.Perk.SetIsUsable
// 0x0001 (0x0001 - 0x0000)
struct Perk_SetIsUsable final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_SetIsUsable) == 0x000001, "Wrong alignment on Perk_SetIsUsable");
static_assert(sizeof(Perk_SetIsUsable) == 0x000001, "Wrong size on Perk_SetIsUsable");
static_assert(offsetof(Perk_SetIsUsable, value) == 0x000000, "Member 'Perk_SetIsUsable::value' has a wrong offset!");

// Function DeadByDaylight.Perk.GetCooldownTimer
// 0x0008 (0x0008 - 0x0000)
struct Perk_GetCooldownTimer final
{
public:
	class UTimerObject*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_GetCooldownTimer) == 0x000008, "Wrong alignment on Perk_GetCooldownTimer");
static_assert(sizeof(Perk_GetCooldownTimer) == 0x000008, "Wrong size on Perk_GetCooldownTimer");
static_assert(offsetof(Perk_GetCooldownTimer, ReturnValue) == 0x000000, "Member 'Perk_GetCooldownTimer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Perk.GetHudIconTimerElapsedTimePercent
// 0x0004 (0x0004 - 0x0000)
struct Perk_GetHudIconTimerElapsedTimePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_GetHudIconTimerElapsedTimePercent) == 0x000004, "Wrong alignment on Perk_GetHudIconTimerElapsedTimePercent");
static_assert(sizeof(Perk_GetHudIconTimerElapsedTimePercent) == 0x000004, "Wrong size on Perk_GetHudIconTimerElapsedTimePercent");
static_assert(offsetof(Perk_GetHudIconTimerElapsedTimePercent, ReturnValue) == 0x000000, "Member 'Perk_GetHudIconTimerElapsedTimePercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Perk.GetIsUsable
// 0x0001 (0x0001 - 0x0000)
struct Perk_GetIsUsable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_GetIsUsable) == 0x000001, "Wrong alignment on Perk_GetIsUsable");
static_assert(sizeof(Perk_GetIsUsable) == 0x000001, "Wrong size on Perk_GetIsUsable");
static_assert(offsetof(Perk_GetIsUsable, ReturnValue) == 0x000000, "Member 'Perk_GetIsUsable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Perk.GetMaxTokenCount
// 0x0004 (0x0004 - 0x0000)
struct Perk_GetMaxTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_GetMaxTokenCount) == 0x000004, "Wrong alignment on Perk_GetMaxTokenCount");
static_assert(sizeof(Perk_GetMaxTokenCount) == 0x000004, "Wrong size on Perk_GetMaxTokenCount");
static_assert(offsetof(Perk_GetMaxTokenCount, ReturnValue) == 0x000000, "Member 'Perk_GetMaxTokenCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Perk.GetPerkIconStrategy
// 0x0008 (0x0008 - 0x0000)
struct Perk_GetPerkIconStrategy final
{
public:
	class UBasePerkIconStrategy*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_GetPerkIconStrategy) == 0x000008, "Wrong alignment on Perk_GetPerkIconStrategy");
static_assert(sizeof(Perk_GetPerkIconStrategy) == 0x000008, "Wrong size on Perk_GetPerkIconStrategy");
static_assert(offsetof(Perk_GetPerkIconStrategy, ReturnValue) == 0x000000, "Member 'Perk_GetPerkIconStrategy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Perk.GetPerkLevel
// 0x0004 (0x0004 - 0x0000)
struct Perk_GetPerkLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_GetPerkLevel) == 0x000004, "Wrong alignment on Perk_GetPerkLevel");
static_assert(sizeof(Perk_GetPerkLevel) == 0x000004, "Wrong size on Perk_GetPerkLevel");
static_assert(offsetof(Perk_GetPerkLevel, ReturnValue) == 0x000000, "Member 'Perk_GetPerkLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Perk.GetTokenCount
// 0x0004 (0x0004 - 0x0000)
struct Perk_GetTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_GetTokenCount) == 0x000004, "Wrong alignment on Perk_GetTokenCount");
static_assert(sizeof(Perk_GetTokenCount) == 0x000004, "Wrong size on Perk_GetTokenCount");
static_assert(offsetof(Perk_GetTokenCount, ReturnValue) == 0x000000, "Member 'Perk_GetTokenCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Perk.IsCooldownTimerDone
// 0x0001 (0x0001 - 0x0000)
struct Perk_IsCooldownTimerDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_IsCooldownTimerDone) == 0x000001, "Wrong alignment on Perk_IsCooldownTimerDone");
static_assert(sizeof(Perk_IsCooldownTimerDone) == 0x000001, "Wrong size on Perk_IsCooldownTimerDone");
static_assert(offsetof(Perk_IsCooldownTimerDone, ReturnValue) == 0x000000, "Member 'Perk_IsCooldownTimerDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Perk.IsHudIconTimerDone
// 0x0001 (0x0001 - 0x0000)
struct Perk_IsHudIconTimerDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_IsHudIconTimerDone) == 0x000001, "Wrong alignment on Perk_IsHudIconTimerDone");
static_assert(sizeof(Perk_IsHudIconTimerDone) == 0x000001, "Wrong size on Perk_IsHudIconTimerDone");
static_assert(offsetof(Perk_IsHudIconTimerDone, ReturnValue) == 0x000000, "Member 'Perk_IsHudIconTimerDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TotemBoundPerk.Authority_BindToDullTotems
// 0x0002 (0x0002 - 0x0000)
struct TotemBoundPerk_Authority_BindToDullTotems final
{
public:
	bool                                          allowAdditionalBoundTotems;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TotemBoundPerk_Authority_BindToDullTotems) == 0x000001, "Wrong alignment on TotemBoundPerk_Authority_BindToDullTotems");
static_assert(sizeof(TotemBoundPerk_Authority_BindToDullTotems) == 0x000002, "Wrong size on TotemBoundPerk_Authority_BindToDullTotems");
static_assert(offsetof(TotemBoundPerk_Authority_BindToDullTotems, allowAdditionalBoundTotems) == 0x000000, "Member 'TotemBoundPerk_Authority_BindToDullTotems::allowAdditionalBoundTotems' has a wrong offset!");
static_assert(offsetof(TotemBoundPerk_Authority_BindToDullTotems, ReturnValue) == 0x000001, "Member 'TotemBoundPerk_Authority_BindToDullTotems::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TotemBoundPerk.Authority_UnbindFromTotem
// 0x0008 (0x0008 - 0x0000)
struct TotemBoundPerk_Authority_UnbindFromTotem final
{
public:
	class ATotem*                                 aTotemActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TotemBoundPerk_Authority_UnbindFromTotem) == 0x000008, "Wrong alignment on TotemBoundPerk_Authority_UnbindFromTotem");
static_assert(sizeof(TotemBoundPerk_Authority_UnbindFromTotem) == 0x000008, "Wrong size on TotemBoundPerk_Authority_UnbindFromTotem");
static_assert(offsetof(TotemBoundPerk_Authority_UnbindFromTotem, aTotemActor) == 0x000000, "Member 'TotemBoundPerk_Authority_UnbindFromTotem::aTotemActor' has a wrong offset!");

// Function DeadByDaylight.TotemBoundPerk.GetBoundTotems
// 0x0010 (0x0010 - 0x0000)
struct TotemBoundPerk_GetBoundTotems final
{
public:
	TArray<class ATotem*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TotemBoundPerk_GetBoundTotems) == 0x000008, "Wrong alignment on TotemBoundPerk_GetBoundTotems");
static_assert(sizeof(TotemBoundPerk_GetBoundTotems) == 0x000010, "Wrong size on TotemBoundPerk_GetBoundTotems");
static_assert(offsetof(TotemBoundPerk_GetBoundTotems, ReturnValue) == 0x000000, "Member 'TotemBoundPerk_GetBoundTotems::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TotemBoundPerk.GetSquaredDistanceToOwner
// 0x0010 (0x0010 - 0x0000)
struct TotemBoundPerk_GetSquaredDistanceToOwner final
{
public:
	const class AActor*                           survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TotemBoundPerk_GetSquaredDistanceToOwner) == 0x000008, "Wrong alignment on TotemBoundPerk_GetSquaredDistanceToOwner");
static_assert(sizeof(TotemBoundPerk_GetSquaredDistanceToOwner) == 0x000010, "Wrong size on TotemBoundPerk_GetSquaredDistanceToOwner");
static_assert(offsetof(TotemBoundPerk_GetSquaredDistanceToOwner, survivor) == 0x000000, "Member 'TotemBoundPerk_GetSquaredDistanceToOwner::survivor' has a wrong offset!");
static_assert(offsetof(TotemBoundPerk_GetSquaredDistanceToOwner, ReturnValue) == 0x000008, "Member 'TotemBoundPerk_GetSquaredDistanceToOwner::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TotemBoundPerk.GetTotems
// 0x0010 (0x0010 - 0x0000)
struct TotemBoundPerk_GetTotems final
{
public:
	TArray<class ATotem*>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TotemBoundPerk_GetTotems) == 0x000008, "Wrong alignment on TotemBoundPerk_GetTotems");
static_assert(sizeof(TotemBoundPerk_GetTotems) == 0x000010, "Wrong size on TotemBoundPerk_GetTotems");
static_assert(offsetof(TotemBoundPerk_GetTotems, ReturnValue) == 0x000000, "Member 'TotemBoundPerk_GetTotems::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.AddDisablingTags
// 0x000C (0x000C - 0x0000)
struct InteractionDefinition_AddDisablingTags final
{
public:
	struct FGameplayTag                           tagToAdd;                                          // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_AddDisablingTags) == 0x000004, "Wrong alignment on InteractionDefinition_AddDisablingTags");
static_assert(sizeof(InteractionDefinition_AddDisablingTags) == 0x00000C, "Wrong size on InteractionDefinition_AddDisablingTags");
static_assert(offsetof(InteractionDefinition_AddDisablingTags, tagToAdd) == 0x000000, "Member 'InteractionDefinition_AddDisablingTags::tagToAdd' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.AddMutuallyExclusiveInteraction
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_AddMutuallyExclusiveInteraction final
{
public:
	class UInteractionDefinition*                 interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_AddMutuallyExclusiveInteraction) == 0x000008, "Wrong alignment on InteractionDefinition_AddMutuallyExclusiveInteraction");
static_assert(sizeof(InteractionDefinition_AddMutuallyExclusiveInteraction) == 0x000008, "Wrong size on InteractionDefinition_AddMutuallyExclusiveInteraction");
static_assert(offsetof(InteractionDefinition_AddMutuallyExclusiveInteraction, interaction) == 0x000000, "Member 'InteractionDefinition_AddMutuallyExclusiveInteraction::interaction' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.AttachToInteractor
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_AttachToInteractor final
{
public:
	class UInteractor*                            interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_AttachToInteractor) == 0x000008, "Wrong alignment on InteractionDefinition_AttachToInteractor");
static_assert(sizeof(InteractionDefinition_AttachToInteractor) == 0x000008, "Wrong size on InteractionDefinition_AttachToInteractor");
static_assert(offsetof(InteractionDefinition_AttachToInteractor, interactor) == 0x000000, "Member 'InteractionDefinition_AttachToInteractor::interactor' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.AttachToZone
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_AttachToZone final
{
public:
	class UPrimitiveComponent*                    zone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_AttachToZone) == 0x000008, "Wrong alignment on InteractionDefinition_AttachToZone");
static_assert(sizeof(InteractionDefinition_AttachToZone) == 0x000008, "Wrong size on InteractionDefinition_AttachToZone");
static_assert(offsetof(InteractionDefinition_AttachToZone, zone) == 0x000000, "Member 'InteractionDefinition_AttachToZone::zone' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.Authority_OnInteractionAuthorized
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_Authority_OnInteractionAuthorized final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_Authority_OnInteractionAuthorized) == 0x000008, "Wrong alignment on InteractionDefinition_Authority_OnInteractionAuthorized");
static_assert(sizeof(InteractionDefinition_Authority_OnInteractionAuthorized) == 0x000008, "Wrong size on InteractionDefinition_Authority_OnInteractionAuthorized");
static_assert(offsetof(InteractionDefinition_Authority_OnInteractionAuthorized, player) == 0x000000, "Member 'InteractionDefinition_Authority_OnInteractionAuthorized::player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.CompleteCharge
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_CompleteCharge final
{
public:
	class ADBDPlayer*                             character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_CompleteCharge) == 0x000008, "Wrong alignment on InteractionDefinition_CompleteCharge");
static_assert(sizeof(InteractionDefinition_CompleteCharge) == 0x000008, "Wrong size on InteractionDefinition_CompleteCharge");
static_assert(offsetof(InteractionDefinition_CompleteCharge, character) == 0x000000, "Member 'InteractionDefinition_CompleteCharge::character' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetPlayerDependency
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetPlayerDependency final
{
public:
	const class ADBDPlayer*                       interactingPlayer;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetPlayerDependency) == 0x000008, "Wrong alignment on InteractionDefinition_GetPlayerDependency");
static_assert(sizeof(InteractionDefinition_GetPlayerDependency) == 0x000010, "Wrong size on InteractionDefinition_GetPlayerDependency");
static_assert(offsetof(InteractionDefinition_GetPlayerDependency, interactingPlayer) == 0x000000, "Member 'InteractionDefinition_GetPlayerDependency::interactingPlayer' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetPlayerDependency, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetPlayerDependency::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionAnimNotifyEvent
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_OnInteractionAnimNotifyEvent final
{
public:
	class FName                                   notifyID;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             player;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionAnimNotifyEvent) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionAnimNotifyEvent");
static_assert(sizeof(InteractionDefinition_OnInteractionAnimNotifyEvent) == 0x000018, "Wrong size on InteractionDefinition_OnInteractionAnimNotifyEvent");
static_assert(offsetof(InteractionDefinition_OnInteractionAnimNotifyEvent, notifyID) == 0x000000, "Member 'InteractionDefinition_OnInteractionAnimNotifyEvent::notifyID' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionAnimNotifyEvent, player) == 0x000010, "Member 'InteractionDefinition_OnInteractionAnimNotifyEvent::player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionCancelled
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionCancelled final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionCancelled) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionCancelled");
static_assert(sizeof(InteractionDefinition_OnInteractionCancelled) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionCancelled");
static_assert(offsetof(InteractionDefinition_OnInteractionCancelled, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionCancelled::player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionEnterEnd
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionEnterEnd final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionEnterEnd) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionEnterEnd");
static_assert(sizeof(InteractionDefinition_OnInteractionEnterEnd) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionEnterEnd");
static_assert(offsetof(InteractionDefinition_OnInteractionEnterEnd, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionEnterEnd::player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionEnterStart
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_OnInteractionEnterStart final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         actualSnapTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_OnInteractionEnterStart) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionEnterStart");
static_assert(sizeof(InteractionDefinition_OnInteractionEnterStart) == 0x000010, "Wrong size on InteractionDefinition_OnInteractionEnterStart");
static_assert(offsetof(InteractionDefinition_OnInteractionEnterStart, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionEnterStart::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionEnterStart, actualSnapTime) == 0x000008, "Member 'InteractionDefinition_OnInteractionEnterStart::actualSnapTime' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionEnterTick
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_OnInteractionEnterTick final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         deltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_OnInteractionEnterTick) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionEnterTick");
static_assert(sizeof(InteractionDefinition_OnInteractionEnterTick) == 0x000010, "Wrong size on InteractionDefinition_OnInteractionEnterTick");
static_assert(offsetof(InteractionDefinition_OnInteractionEnterTick, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionEnterTick::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionEnterTick, deltaTime) == 0x000008, "Member 'InteractionDefinition_OnInteractionEnterTick::deltaTime' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionExitEnd
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionExitEnd final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionExitEnd) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionExitEnd");
static_assert(sizeof(InteractionDefinition_OnInteractionExitEnd) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionExitEnd");
static_assert(offsetof(InteractionDefinition_OnInteractionExitEnd, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionExitEnd::player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionExitStart
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionExitStart final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionExitStart) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionExitStart");
static_assert(sizeof(InteractionDefinition_OnInteractionExitStart) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionExitStart");
static_assert(offsetof(InteractionDefinition_OnInteractionExitStart, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionExitStart::player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionExitTick
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_OnInteractionExitTick final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         deltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_OnInteractionExitTick) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionExitTick");
static_assert(sizeof(InteractionDefinition_OnInteractionExitTick) == 0x000010, "Wrong size on InteractionDefinition_OnInteractionExitTick");
static_assert(offsetof(InteractionDefinition_OnInteractionExitTick, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionExitTick::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionExitTick, deltaTime) == 0x000008, "Member 'InteractionDefinition_OnInteractionExitTick::deltaTime' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionFinished
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_OnInteractionFinished final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hasInteractionStarted;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_OnInteractionFinished) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionFinished");
static_assert(sizeof(InteractionDefinition_OnInteractionFinished) == 0x000010, "Wrong size on InteractionDefinition_OnInteractionFinished");
static_assert(offsetof(InteractionDefinition_OnInteractionFinished, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionFinished::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionFinished, hasInteractionStarted) == 0x000008, "Member 'InteractionDefinition_OnInteractionFinished::hasInteractionStarted' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionInit
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionInit final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionInit) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionInit");
static_assert(sizeof(InteractionDefinition_OnInteractionInit) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionInit");
static_assert(offsetof(InteractionDefinition_OnInteractionInit, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionInit::player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionInterruptEnd
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_OnInteractionInterruptEnd final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterruptionDefinition*                currentInterruption;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             interruptingPlayer;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionInterruptEnd) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionInterruptEnd");
static_assert(sizeof(InteractionDefinition_OnInteractionInterruptEnd) == 0x000018, "Wrong size on InteractionDefinition_OnInteractionInterruptEnd");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptEnd, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionInterruptEnd::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptEnd, currentInterruption) == 0x000008, "Member 'InteractionDefinition_OnInteractionInterruptEnd::currentInterruption' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptEnd, interruptingPlayer) == 0x000010, "Member 'InteractionDefinition_OnInteractionInterruptEnd::interruptingPlayer' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionInterruptStart
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_OnInteractionInterruptStart final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterruptionDefinition*                currentInterruption;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             interruptingPlayer;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionInterruptStart) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionInterruptStart");
static_assert(sizeof(InteractionDefinition_OnInteractionInterruptStart) == 0x000018, "Wrong size on InteractionDefinition_OnInteractionInterruptStart");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptStart, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionInterruptStart::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptStart, currentInterruption) == 0x000008, "Member 'InteractionDefinition_OnInteractionInterruptStart::currentInterruption' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptStart, interruptingPlayer) == 0x000010, "Member 'InteractionDefinition_OnInteractionInterruptStart::interruptingPlayer' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionInterruptStarted
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_OnInteractionInterruptStarted final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterruptionDefinition*                currentInterruption;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             interruptingPlayer;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionInterruptStarted) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionInterruptStarted");
static_assert(sizeof(InteractionDefinition_OnInteractionInterruptStarted) == 0x000018, "Wrong size on InteractionDefinition_OnInteractionInterruptStarted");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptStarted, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionInterruptStarted::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptStarted, currentInterruption) == 0x000008, "Member 'InteractionDefinition_OnInteractionInterruptStarted::currentInterruption' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptStarted, interruptingPlayer) == 0x000010, "Member 'InteractionDefinition_OnInteractionInterruptStarted::interruptingPlayer' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionUpdateEnd
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionUpdateEnd final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionUpdateEnd) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionUpdateEnd");
static_assert(sizeof(InteractionDefinition_OnInteractionUpdateEnd) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionUpdateEnd");
static_assert(offsetof(InteractionDefinition_OnInteractionUpdateEnd, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionUpdateEnd::player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionUpdateMontageReachedMiddle
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionUpdateMontageReachedMiddle final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionUpdateMontageReachedMiddle) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionUpdateMontageReachedMiddle");
static_assert(sizeof(InteractionDefinition_OnInteractionUpdateMontageReachedMiddle) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionUpdateMontageReachedMiddle");
static_assert(offsetof(InteractionDefinition_OnInteractionUpdateMontageReachedMiddle, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionUpdateMontageReachedMiddle::player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionUpdateStart
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionUpdateStart final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionUpdateStart) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionUpdateStart");
static_assert(sizeof(InteractionDefinition_OnInteractionUpdateStart) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionUpdateStart");
static_assert(offsetof(InteractionDefinition_OnInteractionUpdateStart, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionUpdateStart::player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionUpdateTick
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_OnInteractionUpdateTick final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         deltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_OnInteractionUpdateTick) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionUpdateTick");
static_assert(sizeof(InteractionDefinition_OnInteractionUpdateTick) == 0x000010, "Wrong size on InteractionDefinition_OnInteractionUpdateTick");
static_assert(offsetof(InteractionDefinition_OnInteractionUpdateTick, player) == 0x000000, "Member 'InteractionDefinition_OnInteractionUpdateTick::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionUpdateTick, deltaTime) == 0x000008, "Member 'InteractionDefinition_OnInteractionUpdateTick::deltaTime' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInterruptorUpdateStart
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_OnInterruptorUpdateStart final
{
public:
	class UInterruptionDefinition*                currentInterruption;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             interruptor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             interruptee;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInterruptorUpdateStart) == 0x000008, "Wrong alignment on InteractionDefinition_OnInterruptorUpdateStart");
static_assert(sizeof(InteractionDefinition_OnInterruptorUpdateStart) == 0x000018, "Wrong size on InteractionDefinition_OnInterruptorUpdateStart");
static_assert(offsetof(InteractionDefinition_OnInterruptorUpdateStart, currentInterruption) == 0x000000, "Member 'InteractionDefinition_OnInterruptorUpdateStart::currentInterruption' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInterruptorUpdateStart, interruptor) == 0x000008, "Member 'InteractionDefinition_OnInterruptorUpdateStart::interruptor' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInterruptorUpdateStart, interruptee) == 0x000010, "Member 'InteractionDefinition_OnInterruptorUpdateStart::interruptee' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnUpdateMontageStart
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnUpdateMontageStart final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnUpdateMontageStart) == 0x000008, "Wrong alignment on InteractionDefinition_OnUpdateMontageStart");
static_assert(sizeof(InteractionDefinition_OnUpdateMontageStart) == 0x000008, "Wrong size on InteractionDefinition_OnUpdateMontageStart");
static_assert(offsetof(InteractionDefinition_OnUpdateMontageStart, player) == 0x000000, "Member 'InteractionDefinition_OnUpdateMontageStart::player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.RemoveDisablingTags
// 0x000C (0x000C - 0x0000)
struct InteractionDefinition_RemoveDisablingTags final
{
public:
	struct FGameplayTag                           tagToRemove;                                       // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_RemoveDisablingTags) == 0x000004, "Wrong alignment on InteractionDefinition_RemoveDisablingTags");
static_assert(sizeof(InteractionDefinition_RemoveDisablingTags) == 0x00000C, "Wrong size on InteractionDefinition_RemoveDisablingTags");
static_assert(offsetof(InteractionDefinition_RemoveDisablingTags, tagToRemove) == 0x000000, "Member 'InteractionDefinition_RemoveDisablingTags::tagToRemove' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.ResetSlashableLocation
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_ResetSlashableLocation final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_ResetSlashableLocation) == 0x000008, "Wrong alignment on InteractionDefinition_ResetSlashableLocation");
static_assert(sizeof(InteractionDefinition_ResetSlashableLocation) == 0x000008, "Wrong size on InteractionDefinition_ResetSlashableLocation");
static_assert(offsetof(InteractionDefinition_ResetSlashableLocation, player) == 0x000000, "Member 'InteractionDefinition_ResetSlashableLocation::player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.SetSecondaryActionInputType
// 0x0001 (0x0001 - 0x0000)
struct InteractionDefinition_SetSecondaryActionInputType final
{
public:
	EInputInteractionType                         inputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_SetSecondaryActionInputType) == 0x000001, "Wrong alignment on InteractionDefinition_SetSecondaryActionInputType");
static_assert(sizeof(InteractionDefinition_SetSecondaryActionInputType) == 0x000001, "Wrong size on InteractionDefinition_SetSecondaryActionInputType");
static_assert(offsetof(InteractionDefinition_SetSecondaryActionInputType, inputType) == 0x000000, "Member 'InteractionDefinition_SetSecondaryActionInputType::inputType' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.UpdateSlashableLocation
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_UpdateSlashableLocation final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_UpdateSlashableLocation) == 0x000008, "Wrong alignment on InteractionDefinition_UpdateSlashableLocation");
static_assert(sizeof(InteractionDefinition_UpdateSlashableLocation) == 0x000008, "Wrong size on InteractionDefinition_UpdateSlashableLocation");
static_assert(offsetof(InteractionDefinition_UpdateSlashableLocation, player) == 0x000000, "Member 'InteractionDefinition_UpdateSlashableLocation::player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.CalculateSnapTimeForConstantMaxNormalMovementSpeed
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         speedBoost;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed) == 0x000008, "Wrong alignment on InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed");
static_assert(sizeof(InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed) == 0x000010, "Wrong size on InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed");
static_assert(offsetof(InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed, player) == 0x000000, "Member 'InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed, speedBoost) == 0x000008, "Member 'InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed::speedBoost' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed, ReturnValue) == 0x00000C, "Member 'InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.CalculateSnapTimeForConstantSpeed
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_CalculateSnapTimeForConstantSpeed final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         speed;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_CalculateSnapTimeForConstantSpeed) == 0x000008, "Wrong alignment on InteractionDefinition_CalculateSnapTimeForConstantSpeed");
static_assert(sizeof(InteractionDefinition_CalculateSnapTimeForConstantSpeed) == 0x000010, "Wrong size on InteractionDefinition_CalculateSnapTimeForConstantSpeed");
static_assert(offsetof(InteractionDefinition_CalculateSnapTimeForConstantSpeed, player) == 0x000000, "Member 'InteractionDefinition_CalculateSnapTimeForConstantSpeed::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_CalculateSnapTimeForConstantSpeed, speed) == 0x000008, "Member 'InteractionDefinition_CalculateSnapTimeForConstantSpeed::speed' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_CalculateSnapTimeForConstantSpeed, ReturnValue) == 0x00000C, "Member 'InteractionDefinition_CalculateSnapTimeForConstantSpeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.CanOverrideInteraction
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_CanOverrideInteraction final
{
public:
	const class UInteractionDefinition*           interaction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_CanOverrideInteraction) == 0x000008, "Wrong alignment on InteractionDefinition_CanOverrideInteraction");
static_assert(sizeof(InteractionDefinition_CanOverrideInteraction) == 0x000010, "Wrong size on InteractionDefinition_CanOverrideInteraction");
static_assert(offsetof(InteractionDefinition_CanOverrideInteraction, interaction) == 0x000000, "Member 'InteractionDefinition_CanOverrideInteraction::interaction' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_CanOverrideInteraction, ReturnValue) == 0x000008, "Member 'InteractionDefinition_CanOverrideInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.ComparePriorityToInteraction
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_ComparePriorityToInteraction final
{
public:
	const class UInteractionDefinition*           interaction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionComparisonPriority                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_ComparePriorityToInteraction) == 0x000008, "Wrong alignment on InteractionDefinition_ComparePriorityToInteraction");
static_assert(sizeof(InteractionDefinition_ComparePriorityToInteraction) == 0x000010, "Wrong size on InteractionDefinition_ComparePriorityToInteraction");
static_assert(offsetof(InteractionDefinition_ComparePriorityToInteraction, interaction) == 0x000000, "Member 'InteractionDefinition_ComparePriorityToInteraction::interaction' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_ComparePriorityToInteraction, ReturnValue) == 0x000008, "Member 'InteractionDefinition_ComparePriorityToInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.DoesPlayerHaveClearPath
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_DoesPlayerHaveClearPath final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_DoesPlayerHaveClearPath) == 0x000008, "Wrong alignment on InteractionDefinition_DoesPlayerHaveClearPath");
static_assert(sizeof(InteractionDefinition_DoesPlayerHaveClearPath) == 0x000010, "Wrong size on InteractionDefinition_DoesPlayerHaveClearPath");
static_assert(offsetof(InteractionDefinition_DoesPlayerHaveClearPath, player) == 0x000000, "Member 'InteractionDefinition_DoesPlayerHaveClearPath::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_DoesPlayerHaveClearPath, ReturnValue) == 0x000008, "Member 'InteractionDefinition_DoesPlayerHaveClearPath::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetActionSpeedMultiplier
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetActionSpeedMultiplier final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetActionSpeedMultiplier) == 0x000008, "Wrong alignment on InteractionDefinition_GetActionSpeedMultiplier");
static_assert(sizeof(InteractionDefinition_GetActionSpeedMultiplier) == 0x000010, "Wrong size on InteractionDefinition_GetActionSpeedMultiplier");
static_assert(offsetof(InteractionDefinition_GetActionSpeedMultiplier, character) == 0x000000, "Member 'InteractionDefinition_GetActionSpeedMultiplier::character' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetActionSpeedMultiplier, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetActionSpeedMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetActorHeightDelta
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetActorHeightDelta final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetActorHeightDelta) == 0x000008, "Wrong alignment on InteractionDefinition_GetActorHeightDelta");
static_assert(sizeof(InteractionDefinition_GetActorHeightDelta) == 0x000010, "Wrong size on InteractionDefinition_GetActorHeightDelta");
static_assert(offsetof(InteractionDefinition_GetActorHeightDelta, player) == 0x000000, "Member 'InteractionDefinition_GetActorHeightDelta::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetActorHeightDelta, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetActorHeightDelta::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetActorsToIgnoreOverlap
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetActorsToIgnoreOverlap final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetActorsToIgnoreOverlap) == 0x000008, "Wrong alignment on InteractionDefinition_GetActorsToIgnoreOverlap");
static_assert(sizeof(InteractionDefinition_GetActorsToIgnoreOverlap) == 0x000010, "Wrong size on InteractionDefinition_GetActorsToIgnoreOverlap");
static_assert(offsetof(InteractionDefinition_GetActorsToIgnoreOverlap, ReturnValue) == 0x000000, "Member 'InteractionDefinition_GetActorsToIgnoreOverlap::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetActualSnapPointPosition
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_GetActualSnapPointPosition final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetActualSnapPointPosition) == 0x000008, "Wrong alignment on InteractionDefinition_GetActualSnapPointPosition");
static_assert(sizeof(InteractionDefinition_GetActualSnapPointPosition) == 0x000018, "Wrong size on InteractionDefinition_GetActualSnapPointPosition");
static_assert(offsetof(InteractionDefinition_GetActualSnapPointPosition, player) == 0x000000, "Member 'InteractionDefinition_GetActualSnapPointPosition::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetActualSnapPointPosition, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetActualSnapPointPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetActualSnapPointPositionAtStart
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_GetActualSnapPointPositionAtStart final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetActualSnapPointPositionAtStart) == 0x000008, "Wrong alignment on InteractionDefinition_GetActualSnapPointPositionAtStart");
static_assert(sizeof(InteractionDefinition_GetActualSnapPointPositionAtStart) == 0x000018, "Wrong size on InteractionDefinition_GetActualSnapPointPositionAtStart");
static_assert(offsetof(InteractionDefinition_GetActualSnapPointPositionAtStart, player) == 0x000000, "Member 'InteractionDefinition_GetActualSnapPointPositionAtStart::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetActualSnapPointPositionAtStart, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetActualSnapPointPositionAtStart::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetAllowNavigation
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetAllowNavigation final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetAllowNavigation) == 0x000008, "Wrong alignment on InteractionDefinition_GetAllowNavigation");
static_assert(sizeof(InteractionDefinition_GetAllowNavigation) == 0x000010, "Wrong size on InteractionDefinition_GetAllowNavigation");
static_assert(offsetof(InteractionDefinition_GetAllowNavigation, player) == 0x000000, "Member 'InteractionDefinition_GetAllowNavigation::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetAllowNavigation, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetAllowNavigation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetChargePercent
// 0x0004 (0x0004 - 0x0000)
struct InteractionDefinition_GetChargePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetChargePercent) == 0x000004, "Wrong alignment on InteractionDefinition_GetChargePercent");
static_assert(sizeof(InteractionDefinition_GetChargePercent) == 0x000004, "Wrong size on InteractionDefinition_GetChargePercent");
static_assert(offsetof(InteractionDefinition_GetChargePercent, ReturnValue) == 0x000000, "Member 'InteractionDefinition_GetChargePercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetEnterAnimationPlayBackDefinition
// 0x0038 (0x0038 - 0x0000)
struct InteractionDefinition_GetEnterAnimationPlayBackDefinition final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          follower;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMontagePlaybackDefinition             ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetEnterAnimationPlayBackDefinition) == 0x000008, "Wrong alignment on InteractionDefinition_GetEnterAnimationPlayBackDefinition");
static_assert(sizeof(InteractionDefinition_GetEnterAnimationPlayBackDefinition) == 0x000038, "Wrong size on InteractionDefinition_GetEnterAnimationPlayBackDefinition");
static_assert(offsetof(InteractionDefinition_GetEnterAnimationPlayBackDefinition, player) == 0x000000, "Member 'InteractionDefinition_GetEnterAnimationPlayBackDefinition::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetEnterAnimationPlayBackDefinition, follower) == 0x000008, "Member 'InteractionDefinition_GetEnterAnimationPlayBackDefinition::follower' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetEnterAnimationPlayBackDefinition, ReturnValue) == 0x000010, "Member 'InteractionDefinition_GetEnterAnimationPlayBackDefinition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetEnterMontage
// 0x0028 (0x0028 - 0x0000)
struct InteractionDefinition_GetEnterMontage final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimationMontageDescriptor            ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetEnterMontage) == 0x000008, "Wrong alignment on InteractionDefinition_GetEnterMontage");
static_assert(sizeof(InteractionDefinition_GetEnterMontage) == 0x000028, "Wrong size on InteractionDefinition_GetEnterMontage");
static_assert(offsetof(InteractionDefinition_GetEnterMontage, player) == 0x000000, "Member 'InteractionDefinition_GetEnterMontage::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetEnterMontage, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetEnterMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetExitAnimationPlayBackDefinition
// 0x0038 (0x0038 - 0x0000)
struct InteractionDefinition_GetExitAnimationPlayBackDefinition final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          follower;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMontagePlaybackDefinition             ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetExitAnimationPlayBackDefinition) == 0x000008, "Wrong alignment on InteractionDefinition_GetExitAnimationPlayBackDefinition");
static_assert(sizeof(InteractionDefinition_GetExitAnimationPlayBackDefinition) == 0x000038, "Wrong size on InteractionDefinition_GetExitAnimationPlayBackDefinition");
static_assert(offsetof(InteractionDefinition_GetExitAnimationPlayBackDefinition, player) == 0x000000, "Member 'InteractionDefinition_GetExitAnimationPlayBackDefinition::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetExitAnimationPlayBackDefinition, follower) == 0x000008, "Member 'InteractionDefinition_GetExitAnimationPlayBackDefinition::follower' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetExitAnimationPlayBackDefinition, ReturnValue) == 0x000010, "Member 'InteractionDefinition_GetExitAnimationPlayBackDefinition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetExitAnimationPlayRate
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetExitAnimationPlayRate final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetExitAnimationPlayRate) == 0x000008, "Wrong alignment on InteractionDefinition_GetExitAnimationPlayRate");
static_assert(sizeof(InteractionDefinition_GetExitAnimationPlayRate) == 0x000010, "Wrong size on InteractionDefinition_GetExitAnimationPlayRate");
static_assert(offsetof(InteractionDefinition_GetExitAnimationPlayRate, player) == 0x000000, "Member 'InteractionDefinition_GetExitAnimationPlayRate::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetExitAnimationPlayRate, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetExitAnimationPlayRate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetExitMontage
// 0x0028 (0x0028 - 0x0000)
struct InteractionDefinition_GetExitMontage final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimationMontageDescriptor            ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetExitMontage) == 0x000008, "Wrong alignment on InteractionDefinition_GetExitMontage");
static_assert(sizeof(InteractionDefinition_GetExitMontage) == 0x000028, "Wrong size on InteractionDefinition_GetExitMontage");
static_assert(offsetof(InteractionDefinition_GetExitMontage, player) == 0x000000, "Member 'InteractionDefinition_GetExitMontage::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetExitMontage, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetExitMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetFocalPointPosition
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_GetFocalPointPosition final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetFocalPointPosition) == 0x000008, "Wrong alignment on InteractionDefinition_GetFocalPointPosition");
static_assert(sizeof(InteractionDefinition_GetFocalPointPosition) == 0x000018, "Wrong size on InteractionDefinition_GetFocalPointPosition");
static_assert(offsetof(InteractionDefinition_GetFocalPointPosition, player) == 0x000000, "Member 'InteractionDefinition_GetFocalPointPosition::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetFocalPointPosition, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetFocalPointPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInteractable
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_GetInteractable final
{
public:
	class AInteractable*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetInteractable) == 0x000008, "Wrong alignment on InteractionDefinition_GetInteractable");
static_assert(sizeof(InteractionDefinition_GetInteractable) == 0x000008, "Wrong size on InteractionDefinition_GetInteractable");
static_assert(offsetof(InteractionDefinition_GetInteractable, ReturnValue) == 0x000000, "Member 'InteractionDefinition_GetInteractable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInteractionDescriptionText
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_GetInteractionDescriptionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetInteractionDescriptionText) == 0x000008, "Wrong alignment on InteractionDefinition_GetInteractionDescriptionText");
static_assert(sizeof(InteractionDefinition_GetInteractionDescriptionText) == 0x000018, "Wrong size on InteractionDefinition_GetInteractionDescriptionText");
static_assert(offsetof(InteractionDefinition_GetInteractionDescriptionText, ReturnValue) == 0x000000, "Member 'InteractionDefinition_GetInteractionDescriptionText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInteractionExitTime
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetInteractionExitTime final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetInteractionExitTime) == 0x000008, "Wrong alignment on InteractionDefinition_GetInteractionExitTime");
static_assert(sizeof(InteractionDefinition_GetInteractionExitTime) == 0x000010, "Wrong size on InteractionDefinition_GetInteractionExitTime");
static_assert(offsetof(InteractionDefinition_GetInteractionExitTime, character) == 0x000000, "Member 'InteractionDefinition_GetInteractionExitTime::character' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetInteractionExitTime, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetInteractionExitTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInteractionText
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_GetInteractionText final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetInteractionText) == 0x000008, "Wrong alignment on InteractionDefinition_GetInteractionText");
static_assert(sizeof(InteractionDefinition_GetInteractionText) == 0x000018, "Wrong size on InteractionDefinition_GetInteractionText");
static_assert(offsetof(InteractionDefinition_GetInteractionText, player) == 0x000000, "Member 'InteractionDefinition_GetInteractionText::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetInteractionText, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetInteractionText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInteractionTime
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetInteractionTime final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetInteractionTime) == 0x000008, "Wrong alignment on InteractionDefinition_GetInteractionTime");
static_assert(sizeof(InteractionDefinition_GetInteractionTime) == 0x000010, "Wrong size on InteractionDefinition_GetInteractionTime");
static_assert(offsetof(InteractionDefinition_GetInteractionTime, character) == 0x000000, "Member 'InteractionDefinition_GetInteractionTime::character' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetInteractionTime, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetInteractionTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInteractionTimeMultiplier
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetInteractionTimeMultiplier final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetInteractionTimeMultiplier) == 0x000008, "Wrong alignment on InteractionDefinition_GetInteractionTimeMultiplier");
static_assert(sizeof(InteractionDefinition_GetInteractionTimeMultiplier) == 0x000010, "Wrong size on InteractionDefinition_GetInteractionTimeMultiplier");
static_assert(offsetof(InteractionDefinition_GetInteractionTimeMultiplier, character) == 0x000000, "Member 'InteractionDefinition_GetInteractionTimeMultiplier::character' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetInteractionTimeMultiplier, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetInteractionTimeMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInteractor
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_GetInteractor final
{
public:
	class UInteractor*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetInteractor) == 0x000008, "Wrong alignment on InteractionDefinition_GetInteractor");
static_assert(sizeof(InteractionDefinition_GetInteractor) == 0x000008, "Wrong size on InteractionDefinition_GetInteractor");
static_assert(offsetof(InteractionDefinition_GetInteractor, ReturnValue) == 0x000000, "Member 'InteractionDefinition_GetInteractor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInterruptionDefinitions
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetInterruptionDefinitions final
{
public:
	TArray<class UInterruptionDefinition*>        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetInterruptionDefinitions) == 0x000008, "Wrong alignment on InteractionDefinition_GetInterruptionDefinitions");
static_assert(sizeof(InteractionDefinition_GetInterruptionDefinitions) == 0x000010, "Wrong size on InteractionDefinition_GetInterruptionDefinitions");
static_assert(offsetof(InteractionDefinition_GetInterruptionDefinitions, ReturnValue) == 0x000000, "Member 'InteractionDefinition_GetInterruptionDefinitions::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetRotationToSnapPoint
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_GetRotationToSnapPoint final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetRotationToSnapPoint) == 0x000008, "Wrong alignment on InteractionDefinition_GetRotationToSnapPoint");
static_assert(sizeof(InteractionDefinition_GetRotationToSnapPoint) == 0x000018, "Wrong size on InteractionDefinition_GetRotationToSnapPoint");
static_assert(offsetof(InteractionDefinition_GetRotationToSnapPoint, player) == 0x000000, "Member 'InteractionDefinition_GetRotationToSnapPoint::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetRotationToSnapPoint, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetRotationToSnapPoint::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetRotationToSnapPointAtStart
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_GetRotationToSnapPointAtStart final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetRotationToSnapPointAtStart) == 0x000008, "Wrong alignment on InteractionDefinition_GetRotationToSnapPointAtStart");
static_assert(sizeof(InteractionDefinition_GetRotationToSnapPointAtStart) == 0x000018, "Wrong size on InteractionDefinition_GetRotationToSnapPointAtStart");
static_assert(offsetof(InteractionDefinition_GetRotationToSnapPointAtStart, player) == 0x000000, "Member 'InteractionDefinition_GetRotationToSnapPointAtStart::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetRotationToSnapPointAtStart, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetRotationToSnapPointAtStart::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSecondaryActionInputType
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetSecondaryActionInputType final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetSecondaryActionInputType) == 0x000008, "Wrong alignment on InteractionDefinition_GetSecondaryActionInputType");
static_assert(sizeof(InteractionDefinition_GetSecondaryActionInputType) == 0x000010, "Wrong size on InteractionDefinition_GetSecondaryActionInputType");
static_assert(offsetof(InteractionDefinition_GetSecondaryActionInputType, worldContextObject) == 0x000000, "Member 'InteractionDefinition_GetSecondaryActionInputType::worldContextObject' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSecondaryActionInputType, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSecondaryActionInputType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSlashableRelativeLocation
// 0x000C (0x000C - 0x0000)
struct InteractionDefinition_GetSlashableRelativeLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetSlashableRelativeLocation) == 0x000004, "Wrong alignment on InteractionDefinition_GetSlashableRelativeLocation");
static_assert(sizeof(InteractionDefinition_GetSlashableRelativeLocation) == 0x00000C, "Wrong size on InteractionDefinition_GetSlashableRelativeLocation");
static_assert(offsetof(InteractionDefinition_GetSlashableRelativeLocation, ReturnValue) == 0x000000, "Member 'InteractionDefinition_GetSlashableRelativeLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSnapDistance
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetSnapDistance final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetSnapDistance) == 0x000008, "Wrong alignment on InteractionDefinition_GetSnapDistance");
static_assert(sizeof(InteractionDefinition_GetSnapDistance) == 0x000010, "Wrong size on InteractionDefinition_GetSnapDistance");
static_assert(offsetof(InteractionDefinition_GetSnapDistance, player) == 0x000000, "Member 'InteractionDefinition_GetSnapDistance::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSnapDistance, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSnapDistance::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSnapDistanceAtStart
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetSnapDistanceAtStart final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetSnapDistanceAtStart) == 0x000008, "Wrong alignment on InteractionDefinition_GetSnapDistanceAtStart");
static_assert(sizeof(InteractionDefinition_GetSnapDistanceAtStart) == 0x000010, "Wrong size on InteractionDefinition_GetSnapDistanceAtStart");
static_assert(offsetof(InteractionDefinition_GetSnapDistanceAtStart, player) == 0x000000, "Member 'InteractionDefinition_GetSnapDistanceAtStart::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSnapDistanceAtStart, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSnapDistanceAtStart::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSnapPointPosition
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_GetSnapPointPosition final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetSnapPointPosition) == 0x000008, "Wrong alignment on InteractionDefinition_GetSnapPointPosition");
static_assert(sizeof(InteractionDefinition_GetSnapPointPosition) == 0x000018, "Wrong size on InteractionDefinition_GetSnapPointPosition");
static_assert(offsetof(InteractionDefinition_GetSnapPointPosition, player) == 0x000000, "Member 'InteractionDefinition_GetSnapPointPosition::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSnapPointPosition, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSnapPointPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSnapPointPositionAtStart
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_GetSnapPointPositionAtStart final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetSnapPointPositionAtStart) == 0x000008, "Wrong alignment on InteractionDefinition_GetSnapPointPositionAtStart");
static_assert(sizeof(InteractionDefinition_GetSnapPointPositionAtStart) == 0x000018, "Wrong size on InteractionDefinition_GetSnapPointPositionAtStart");
static_assert(offsetof(InteractionDefinition_GetSnapPointPositionAtStart, player) == 0x000000, "Member 'InteractionDefinition_GetSnapPointPositionAtStart::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSnapPointPositionAtStart, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSnapPointPositionAtStart::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSnapSocketName
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_GetSnapSocketName final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetSnapSocketName) == 0x000008, "Wrong alignment on InteractionDefinition_GetSnapSocketName");
static_assert(sizeof(InteractionDefinition_GetSnapSocketName) == 0x000018, "Wrong size on InteractionDefinition_GetSnapSocketName");
static_assert(offsetof(InteractionDefinition_GetSnapSocketName, player) == 0x000000, "Member 'InteractionDefinition_GetSnapSocketName::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSnapSocketName, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSnapSocketName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSnapTime
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetSnapTime final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetSnapTime) == 0x000008, "Wrong alignment on InteractionDefinition_GetSnapTime");
static_assert(sizeof(InteractionDefinition_GetSnapTime) == 0x000010, "Wrong size on InteractionDefinition_GetSnapTime");
static_assert(offsetof(InteractionDefinition_GetSnapTime, player) == 0x000000, "Member 'InteractionDefinition_GetSnapTime::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSnapTime, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSnapTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSnapTimeAtStart
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetSnapTimeAtStart final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetSnapTimeAtStart) == 0x000008, "Wrong alignment on InteractionDefinition_GetSnapTimeAtStart");
static_assert(sizeof(InteractionDefinition_GetSnapTimeAtStart) == 0x000010, "Wrong size on InteractionDefinition_GetSnapTimeAtStart");
static_assert(offsetof(InteractionDefinition_GetSnapTimeAtStart, player) == 0x000000, "Member 'InteractionDefinition_GetSnapTimeAtStart::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSnapTimeAtStart, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSnapTimeAtStart::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetUpdateAnimationPlayBackDefinition
// 0x0038 (0x0038 - 0x0000)
struct InteractionDefinition_GetUpdateAnimationPlayBackDefinition final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          follower;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMontagePlaybackDefinition             ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetUpdateAnimationPlayBackDefinition) == 0x000008, "Wrong alignment on InteractionDefinition_GetUpdateAnimationPlayBackDefinition");
static_assert(sizeof(InteractionDefinition_GetUpdateAnimationPlayBackDefinition) == 0x000038, "Wrong size on InteractionDefinition_GetUpdateAnimationPlayBackDefinition");
static_assert(offsetof(InteractionDefinition_GetUpdateAnimationPlayBackDefinition, player) == 0x000000, "Member 'InteractionDefinition_GetUpdateAnimationPlayBackDefinition::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetUpdateAnimationPlayBackDefinition, follower) == 0x000008, "Member 'InteractionDefinition_GetUpdateAnimationPlayBackDefinition::follower' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetUpdateAnimationPlayBackDefinition, ReturnValue) == 0x000010, "Member 'InteractionDefinition_GetUpdateAnimationPlayBackDefinition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetUpdateAnimationPlayRate
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetUpdateAnimationPlayRate final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetUpdateAnimationPlayRate) == 0x000008, "Wrong alignment on InteractionDefinition_GetUpdateAnimationPlayRate");
static_assert(sizeof(InteractionDefinition_GetUpdateAnimationPlayRate) == 0x000010, "Wrong size on InteractionDefinition_GetUpdateAnimationPlayRate");
static_assert(offsetof(InteractionDefinition_GetUpdateAnimationPlayRate, player) == 0x000000, "Member 'InteractionDefinition_GetUpdateAnimationPlayRate::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetUpdateAnimationPlayRate, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetUpdateAnimationPlayRate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetUpdateMontage
// 0x0028 (0x0028 - 0x0000)
struct InteractionDefinition_GetUpdateMontage final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimationMontageDescriptor            ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetUpdateMontage) == 0x000008, "Wrong alignment on InteractionDefinition_GetUpdateMontage");
static_assert(sizeof(InteractionDefinition_GetUpdateMontage) == 0x000028, "Wrong size on InteractionDefinition_GetUpdateMontage");
static_assert(offsetof(InteractionDefinition_GetUpdateMontage, player) == 0x000000, "Member 'InteractionDefinition_GetUpdateMontage::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetUpdateMontage, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetUpdateMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsCancelable
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsCancelable final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsCancelable) == 0x000008, "Wrong alignment on InteractionDefinition_IsCancelable");
static_assert(sizeof(InteractionDefinition_IsCancelable) == 0x000010, "Wrong size on InteractionDefinition_IsCancelable");
static_assert(offsetof(InteractionDefinition_IsCancelable, player) == 0x000000, "Member 'InteractionDefinition_IsCancelable::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsCancelable, ReturnValue) == 0x000008, "Member 'InteractionDefinition_IsCancelable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsCharacterFacingInteractorDirection
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsCharacterFacingInteractorDirection final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsCharacterFacingInteractorDirection) == 0x000008, "Wrong alignment on InteractionDefinition_IsCharacterFacingInteractorDirection");
static_assert(sizeof(InteractionDefinition_IsCharacterFacingInteractorDirection) == 0x000010, "Wrong size on InteractionDefinition_IsCharacterFacingInteractorDirection");
static_assert(offsetof(InteractionDefinition_IsCharacterFacingInteractorDirection, player) == 0x000000, "Member 'InteractionDefinition_IsCharacterFacingInteractorDirection::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsCharacterFacingInteractorDirection, ReturnValue) == 0x000008, "Member 'InteractionDefinition_IsCharacterFacingInteractorDirection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInputPressed
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsInputPressed final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInputPressed) == 0x000008, "Wrong alignment on InteractionDefinition_IsInputPressed");
static_assert(sizeof(InteractionDefinition_IsInputPressed) == 0x000010, "Wrong size on InteractionDefinition_IsInputPressed");
static_assert(offsetof(InteractionDefinition_IsInputPressed, player) == 0x000000, "Member 'InteractionDefinition_IsInputPressed::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInputPressed, ReturnValue) == 0x000008, "Member 'InteractionDefinition_IsInputPressed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInteractableInPlayerView
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsInteractableInPlayerView final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInteractableInPlayerView) == 0x000008, "Wrong alignment on InteractionDefinition_IsInteractableInPlayerView");
static_assert(sizeof(InteractionDefinition_IsInteractableInPlayerView) == 0x000010, "Wrong size on InteractionDefinition_IsInteractableInPlayerView");
static_assert(offsetof(InteractionDefinition_IsInteractableInPlayerView, player) == 0x000000, "Member 'InteractionDefinition_IsInteractableInPlayerView::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractableInPlayerView, ReturnValue) == 0x000008, "Member 'InteractionDefinition_IsInteractableInPlayerView::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInteractionDone
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsInteractionDone final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         interactionType;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInteractionDone) == 0x000008, "Wrong alignment on InteractionDefinition_IsInteractionDone");
static_assert(sizeof(InteractionDefinition_IsInteractionDone) == 0x000010, "Wrong size on InteractionDefinition_IsInteractionDone");
static_assert(offsetof(InteractionDefinition_IsInteractionDone, player) == 0x000000, "Member 'InteractionDefinition_IsInteractionDone::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionDone, interactionType) == 0x000008, "Member 'InteractionDefinition_IsInteractionDone::interactionType' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionDone, ReturnValue) == 0x000009, "Member 'InteractionDefinition_IsInteractionDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInteractionPossible
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsInteractionPossible final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         interactionType;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          performClientCheck;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          performHeightCheck;                                // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000B(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInteractionPossible) == 0x000008, "Wrong alignment on InteractionDefinition_IsInteractionPossible");
static_assert(sizeof(InteractionDefinition_IsInteractionPossible) == 0x000010, "Wrong size on InteractionDefinition_IsInteractionPossible");
static_assert(offsetof(InteractionDefinition_IsInteractionPossible, player) == 0x000000, "Member 'InteractionDefinition_IsInteractionPossible::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossible, interactionType) == 0x000008, "Member 'InteractionDefinition_IsInteractionPossible::interactionType' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossible, performClientCheck) == 0x000009, "Member 'InteractionDefinition_IsInteractionPossible::performClientCheck' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossible, performHeightCheck) == 0x00000A, "Member 'InteractionDefinition_IsInteractionPossible::performHeightCheck' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossible, ReturnValue) == 0x00000B, "Member 'InteractionDefinition_IsInteractionPossible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInteractionPossibleBP
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsInteractionPossibleBP final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         interactionType;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInteractionPossibleBP) == 0x000008, "Wrong alignment on InteractionDefinition_IsInteractionPossibleBP");
static_assert(sizeof(InteractionDefinition_IsInteractionPossibleBP) == 0x000010, "Wrong size on InteractionDefinition_IsInteractionPossibleBP");
static_assert(offsetof(InteractionDefinition_IsInteractionPossibleBP, player) == 0x000000, "Member 'InteractionDefinition_IsInteractionPossibleBP::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossibleBP, interactionType) == 0x000008, "Member 'InteractionDefinition_IsInteractionPossibleBP::interactionType' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossibleBP, ReturnValue) == 0x000009, "Member 'InteractionDefinition_IsInteractionPossibleBP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInteractionPossibleClient
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsInteractionPossibleClient final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         interactionType;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInteractionPossibleClient) == 0x000008, "Wrong alignment on InteractionDefinition_IsInteractionPossibleClient");
static_assert(sizeof(InteractionDefinition_IsInteractionPossibleClient) == 0x000010, "Wrong size on InteractionDefinition_IsInteractionPossibleClient");
static_assert(offsetof(InteractionDefinition_IsInteractionPossibleClient, player) == 0x000000, "Member 'InteractionDefinition_IsInteractionPossibleClient::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossibleClient, interactionType) == 0x000008, "Member 'InteractionDefinition_IsInteractionPossibleClient::interactionType' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossibleClient, ReturnValue) == 0x000009, "Member 'InteractionDefinition_IsInteractionPossibleClient::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInteractionUsingOffering
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsInteractionUsingOffering final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInteractionUsingOffering) == 0x000008, "Wrong alignment on InteractionDefinition_IsInteractionUsingOffering");
static_assert(sizeof(InteractionDefinition_IsInteractionUsingOffering) == 0x000010, "Wrong size on InteractionDefinition_IsInteractionUsingOffering");
static_assert(offsetof(InteractionDefinition_IsInteractionUsingOffering, player) == 0x000000, "Member 'InteractionDefinition_IsInteractionUsingOffering::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionUsingOffering, ReturnValue) == 0x000008, "Member 'InteractionDefinition_IsInteractionUsingOffering::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInterruptionPossible
// 0x0020 (0x0020 - 0x0000)
struct InteractionDefinition_IsInterruptionPossible final
{
public:
	const class ADBDPlayer*                       interruptor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       interruptee;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInterruptionDefinition*          interruption;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInterruptionPossible) == 0x000008, "Wrong alignment on InteractionDefinition_IsInterruptionPossible");
static_assert(sizeof(InteractionDefinition_IsInterruptionPossible) == 0x000020, "Wrong size on InteractionDefinition_IsInterruptionPossible");
static_assert(offsetof(InteractionDefinition_IsInterruptionPossible, interruptor) == 0x000000, "Member 'InteractionDefinition_IsInterruptionPossible::interruptor' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInterruptionPossible, interruptee) == 0x000008, "Member 'InteractionDefinition_IsInterruptionPossible::interruptee' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInterruptionPossible, interruption) == 0x000010, "Member 'InteractionDefinition_IsInterruptionPossible::interruption' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInterruptionPossible, ReturnValue) == 0x000018, "Member 'InteractionDefinition_IsInterruptionPossible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsSupportedCharacterType
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsSupportedCharacterType final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsSupportedCharacterType) == 0x000008, "Wrong alignment on InteractionDefinition_IsSupportedCharacterType");
static_assert(sizeof(InteractionDefinition_IsSupportedCharacterType) == 0x000010, "Wrong size on InteractionDefinition_IsSupportedCharacterType");
static_assert(offsetof(InteractionDefinition_IsSupportedCharacterType, player) == 0x000000, "Member 'InteractionDefinition_IsSupportedCharacterType::player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsSupportedCharacterType, ReturnValue) == 0x000008, "Member 'InteractionDefinition_IsSupportedCharacterType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.ShouldStartUpdateMontageDuringEnter
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_ShouldStartUpdateMontageDuringEnter final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_ShouldStartUpdateMontageDuringEnter) == 0x000008, "Wrong alignment on InteractionDefinition_ShouldStartUpdateMontageDuringEnter");
static_assert(sizeof(InteractionDefinition_ShouldStartUpdateMontageDuringEnter) == 0x000010, "Wrong size on InteractionDefinition_ShouldStartUpdateMontageDuringEnter");
static_assert(offsetof(InteractionDefinition_ShouldStartUpdateMontageDuringEnter, character) == 0x000000, "Member 'InteractionDefinition_ShouldStartUpdateMontageDuringEnter::character' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_ShouldStartUpdateMontageDuringEnter, ReturnValue) == 0x000008, "Member 'InteractionDefinition_ShouldStartUpdateMontageDuringEnter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ScreenBase.BroadcastOnHighlightedElementClickedEvent
// 0x000C (0x000C - 0x0000)
struct ScreenBase_BroadcastOnHighlightedElementClickedEvent final
{
public:
	class FName                                   onBoardingID;                                      // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenBase_BroadcastOnHighlightedElementClickedEvent) == 0x000004, "Wrong alignment on ScreenBase_BroadcastOnHighlightedElementClickedEvent");
static_assert(sizeof(ScreenBase_BroadcastOnHighlightedElementClickedEvent) == 0x00000C, "Wrong size on ScreenBase_BroadcastOnHighlightedElementClickedEvent");
static_assert(offsetof(ScreenBase_BroadcastOnHighlightedElementClickedEvent, onBoardingID) == 0x000000, "Member 'ScreenBase_BroadcastOnHighlightedElementClickedEvent::onBoardingID' has a wrong offset!");

// Function DeadByDaylight.ScreenBase.OnAnimationUpdate
// 0x0004 (0x0004 - 0x0000)
struct ScreenBase_OnAnimationUpdate final
{
public:
	int32                                         isAnimationDone;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenBase_OnAnimationUpdate) == 0x000004, "Wrong alignment on ScreenBase_OnAnimationUpdate");
static_assert(sizeof(ScreenBase_OnAnimationUpdate) == 0x000004, "Wrong size on ScreenBase_OnAnimationUpdate");
static_assert(offsetof(ScreenBase_OnAnimationUpdate, isAnimationDone) == 0x000000, "Member 'ScreenBase_OnAnimationUpdate::isAnimationDone' has a wrong offset!");

// Function DeadByDaylight.ScreenBase.OnAnyKey
// 0x0004 (0x0004 - 0x0000)
struct ScreenBase_OnAnyKey final
{
public:
	float                                         code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenBase_OnAnyKey) == 0x000004, "Wrong alignment on ScreenBase_OnAnyKey");
static_assert(sizeof(ScreenBase_OnAnyKey) == 0x000004, "Wrong size on ScreenBase_OnAnyKey");
static_assert(offsetof(ScreenBase_OnAnyKey, code) == 0x000000, "Member 'ScreenBase_OnAnyKey::code' has a wrong offset!");

// Function DeadByDaylight.ScreenBase.OnNavKey
// 0x0010 (0x0010 - 0x0000)
struct ScreenBase_OnNavKey final
{
public:
	class FString                                 navKey;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenBase_OnNavKey) == 0x000008, "Wrong alignment on ScreenBase_OnNavKey");
static_assert(sizeof(ScreenBase_OnNavKey) == 0x000010, "Wrong size on ScreenBase_OnNavKey");
static_assert(offsetof(ScreenBase_OnNavKey, navKey) == 0x000000, "Member 'ScreenBase_OnNavKey::navKey' has a wrong offset!");

// Function DeadByDaylight.ScreenBase.OnTextInputMouseClicked
// 0x0001 (0x0001 - 0x0000)
struct ScreenBase_OnTextInputMouseClicked final
{
public:
	bool                                          isPassword;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenBase_OnTextInputMouseClicked) == 0x000001, "Wrong alignment on ScreenBase_OnTextInputMouseClicked");
static_assert(sizeof(ScreenBase_OnTextInputMouseClicked) == 0x000001, "Wrong size on ScreenBase_OnTextInputMouseClicked");
static_assert(offsetof(ScreenBase_OnTextInputMouseClicked, isPassword) == 0x000000, "Member 'ScreenBase_OnTextInputMouseClicked::isPassword' has a wrong offset!");

// Function DeadByDaylight.ScreenBase.SetFadesOut
// 0x0001 (0x0001 - 0x0000)
struct ScreenBase_SetFadesOut final
{
public:
	bool                                          fadesOut;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenBase_SetFadesOut) == 0x000001, "Wrong alignment on ScreenBase_SetFadesOut");
static_assert(sizeof(ScreenBase_SetFadesOut) == 0x000001, "Wrong size on ScreenBase_SetFadesOut");
static_assert(offsetof(ScreenBase_SetFadesOut, fadesOut) == 0x000000, "Member 'ScreenBase_SetFadesOut::fadesOut' has a wrong offset!");

// Function DeadByDaylight.AtlantaFriendsListScreenUMG.HandleResearchButtonClicked
// 0x0018 (0x0018 - 0x0000)
struct AtlantaFriendsListScreenUMG_HandleResearchButtonClicked final
{
public:
	class FText                                   searchInput;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaFriendsListScreenUMG_HandleResearchButtonClicked) == 0x000008, "Wrong alignment on AtlantaFriendsListScreenUMG_HandleResearchButtonClicked");
static_assert(sizeof(AtlantaFriendsListScreenUMG_HandleResearchButtonClicked) == 0x000018, "Wrong size on AtlantaFriendsListScreenUMG_HandleResearchButtonClicked");
static_assert(offsetof(AtlantaFriendsListScreenUMG_HandleResearchButtonClicked, searchInput) == 0x000000, "Member 'AtlantaFriendsListScreenUMG_HandleResearchButtonClicked::searchInput' has a wrong offset!");

// Function DeadByDaylight.SurveillancePerk.HandleGeneratorIsDamagedChanged
// 0x0010 (0x0010 - 0x0000)
struct SurveillancePerk_HandleGeneratorIsDamagedChanged final
{
public:
	class AGenerator*                             generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurveillancePerk_HandleGeneratorIsDamagedChanged) == 0x000008, "Wrong alignment on SurveillancePerk_HandleGeneratorIsDamagedChanged");
static_assert(sizeof(SurveillancePerk_HandleGeneratorIsDamagedChanged) == 0x000010, "Wrong size on SurveillancePerk_HandleGeneratorIsDamagedChanged");
static_assert(offsetof(SurveillancePerk_HandleGeneratorIsDamagedChanged, generator) == 0x000000, "Member 'SurveillancePerk_HandleGeneratorIsDamagedChanged::generator' has a wrong offset!");
static_assert(offsetof(SurveillancePerk_HandleGeneratorIsDamagedChanged, player) == 0x000008, "Member 'SurveillancePerk_HandleGeneratorIsDamagedChanged::player' has a wrong offset!");

// Function DeadByDaylight.BasePerkIconStrategy.GetDisplayPercent
// 0x0010 (0x0010 - 0x0000)
struct BasePerkIconStrategy_GetDisplayPercent final
{
public:
	const class UPerk*                            perk;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePerkIconStrategy_GetDisplayPercent) == 0x000008, "Wrong alignment on BasePerkIconStrategy_GetDisplayPercent");
static_assert(sizeof(BasePerkIconStrategy_GetDisplayPercent) == 0x000010, "Wrong size on BasePerkIconStrategy_GetDisplayPercent");
static_assert(offsetof(BasePerkIconStrategy_GetDisplayPercent, perk) == 0x000000, "Member 'BasePerkIconStrategy_GetDisplayPercent::perk' has a wrong offset!");
static_assert(offsetof(BasePerkIconStrategy_GetDisplayPercent, ReturnValue) == 0x000008, "Member 'BasePerkIconStrategy_GetDisplayPercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BasePerkIconStrategy.GetIsRechargeable
// 0x0010 (0x0010 - 0x0000)
struct BasePerkIconStrategy_GetIsRechargeable final
{
public:
	const class UPerk*                            perk;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePerkIconStrategy_GetIsRechargeable) == 0x000008, "Wrong alignment on BasePerkIconStrategy_GetIsRechargeable");
static_assert(sizeof(BasePerkIconStrategy_GetIsRechargeable) == 0x000010, "Wrong size on BasePerkIconStrategy_GetIsRechargeable");
static_assert(offsetof(BasePerkIconStrategy_GetIsRechargeable, perk) == 0x000000, "Member 'BasePerkIconStrategy_GetIsRechargeable::perk' has a wrong offset!");
static_assert(offsetof(BasePerkIconStrategy_GetIsRechargeable, ReturnValue) == 0x000008, "Member 'BasePerkIconStrategy_GetIsRechargeable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BasePerkIconStrategy.GetIsRechargeableActive
// 0x0010 (0x0010 - 0x0000)
struct BasePerkIconStrategy_GetIsRechargeableActive final
{
public:
	const class UPerk*                            perk;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePerkIconStrategy_GetIsRechargeableActive) == 0x000008, "Wrong alignment on BasePerkIconStrategy_GetIsRechargeableActive");
static_assert(sizeof(BasePerkIconStrategy_GetIsRechargeableActive) == 0x000010, "Wrong size on BasePerkIconStrategy_GetIsRechargeableActive");
static_assert(offsetof(BasePerkIconStrategy_GetIsRechargeableActive, perk) == 0x000000, "Member 'BasePerkIconStrategy_GetIsRechargeableActive::perk' has a wrong offset!");
static_assert(offsetof(BasePerkIconStrategy_GetIsRechargeableActive, ReturnValue) == 0x000008, "Member 'BasePerkIconStrategy_GetIsRechargeableActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SourceBasedOutlineUpdateStrategy.AddRangedReveal
// 0x0040 (0x0040 - 0x0000)
struct SourceBasedOutlineUpdateStrategy_AddRangedReveal final
{
public:
	const class UObject*                          source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           sourceActor;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           highlightColor;                                    // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         priority;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADBDPlayer*>                     affectedCharacters;                                // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         range;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SourceBasedOutlineUpdateStrategy_AddRangedReveal) == 0x000008, "Wrong alignment on SourceBasedOutlineUpdateStrategy_AddRangedReveal");
static_assert(sizeof(SourceBasedOutlineUpdateStrategy_AddRangedReveal) == 0x000040, "Wrong size on SourceBasedOutlineUpdateStrategy_AddRangedReveal");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddRangedReveal, source) == 0x000000, "Member 'SourceBasedOutlineUpdateStrategy_AddRangedReveal::source' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddRangedReveal, sourceActor) == 0x000008, "Member 'SourceBasedOutlineUpdateStrategy_AddRangedReveal::sourceActor' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddRangedReveal, highlightColor) == 0x000010, "Member 'SourceBasedOutlineUpdateStrategy_AddRangedReveal::highlightColor' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddRangedReveal, priority) == 0x000020, "Member 'SourceBasedOutlineUpdateStrategy_AddRangedReveal::priority' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddRangedReveal, affectedCharacters) == 0x000028, "Member 'SourceBasedOutlineUpdateStrategy_AddRangedReveal::affectedCharacters' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddRangedReveal, range) == 0x000038, "Member 'SourceBasedOutlineUpdateStrategy_AddRangedReveal::range' has a wrong offset!");

// Function DeadByDaylight.SourceBasedOutlineUpdateStrategy.AddReveal
// 0x0030 (0x0030 - 0x0000)
struct SourceBasedOutlineUpdateStrategy_AddReveal final
{
public:
	const class UObject*                          source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           highlightColor;                                    // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         priority;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADBDPlayer*>                     affectedCharacters;                                // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SourceBasedOutlineUpdateStrategy_AddReveal) == 0x000008, "Wrong alignment on SourceBasedOutlineUpdateStrategy_AddReveal");
static_assert(sizeof(SourceBasedOutlineUpdateStrategy_AddReveal) == 0x000030, "Wrong size on SourceBasedOutlineUpdateStrategy_AddReveal");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddReveal, source) == 0x000000, "Member 'SourceBasedOutlineUpdateStrategy_AddReveal::source' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddReveal, highlightColor) == 0x000008, "Member 'SourceBasedOutlineUpdateStrategy_AddReveal::highlightColor' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddReveal, priority) == 0x000018, "Member 'SourceBasedOutlineUpdateStrategy_AddReveal::priority' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddReveal, affectedCharacters) == 0x000020, "Member 'SourceBasedOutlineUpdateStrategy_AddReveal::affectedCharacters' has a wrong offset!");

// Function DeadByDaylight.SourceBasedOutlineUpdateStrategy.AddRevealWithOptions
// 0x0048 (0x0048 - 0x0000)
struct SourceBasedOutlineUpdateStrategy_AddRevealWithOptions final
{
public:
	const class UObject*                          source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           highlightColor;                                    // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         priority;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADBDPlayer*>                     affectedCharacters;                                // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRevealOptions                         options;                                           // 0x0030(0x0018)(Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(SourceBasedOutlineUpdateStrategy_AddRevealWithOptions) == 0x000008, "Wrong alignment on SourceBasedOutlineUpdateStrategy_AddRevealWithOptions");
static_assert(sizeof(SourceBasedOutlineUpdateStrategy_AddRevealWithOptions) == 0x000048, "Wrong size on SourceBasedOutlineUpdateStrategy_AddRevealWithOptions");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddRevealWithOptions, source) == 0x000000, "Member 'SourceBasedOutlineUpdateStrategy_AddRevealWithOptions::source' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddRevealWithOptions, highlightColor) == 0x000008, "Member 'SourceBasedOutlineUpdateStrategy_AddRevealWithOptions::highlightColor' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddRevealWithOptions, priority) == 0x000018, "Member 'SourceBasedOutlineUpdateStrategy_AddRevealWithOptions::priority' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddRevealWithOptions, affectedCharacters) == 0x000020, "Member 'SourceBasedOutlineUpdateStrategy_AddRevealWithOptions::affectedCharacters' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddRevealWithOptions, options) == 0x000030, "Member 'SourceBasedOutlineUpdateStrategy_AddRevealWithOptions::options' has a wrong offset!");

// Function DeadByDaylight.SourceBasedOutlineUpdateStrategy.AddTimedAndRangedReveal
// 0x0040 (0x0040 - 0x0000)
struct SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal final
{
public:
	const class UObject*                          source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           sourceActor;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           highlightColor;                                    // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         priority;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADBDPlayer*>                     affectedCharacters;                                // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         range;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal) == 0x000008, "Wrong alignment on SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal");
static_assert(sizeof(SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal) == 0x000040, "Wrong size on SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal, source) == 0x000000, "Member 'SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal::source' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal, sourceActor) == 0x000008, "Member 'SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal::sourceActor' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal, highlightColor) == 0x000010, "Member 'SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal::highlightColor' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal, priority) == 0x000020, "Member 'SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal::priority' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal, affectedCharacters) == 0x000028, "Member 'SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal::affectedCharacters' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal, duration) == 0x000038, "Member 'SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal::duration' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal, range) == 0x00003C, "Member 'SourceBasedOutlineUpdateStrategy_AddTimedAndRangedReveal::range' has a wrong offset!");

// Function DeadByDaylight.SourceBasedOutlineUpdateStrategy.AddTimedReveal
// 0x0038 (0x0038 - 0x0000)
struct SourceBasedOutlineUpdateStrategy_AddTimedReveal final
{
public:
	const class UObject*                          source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           highlightColor;                                    // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         priority;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADBDPlayer*>                     affectedCharacters;                                // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SourceBasedOutlineUpdateStrategy_AddTimedReveal) == 0x000008, "Wrong alignment on SourceBasedOutlineUpdateStrategy_AddTimedReveal");
static_assert(sizeof(SourceBasedOutlineUpdateStrategy_AddTimedReveal) == 0x000038, "Wrong size on SourceBasedOutlineUpdateStrategy_AddTimedReveal");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddTimedReveal, source) == 0x000000, "Member 'SourceBasedOutlineUpdateStrategy_AddTimedReveal::source' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddTimedReveal, highlightColor) == 0x000008, "Member 'SourceBasedOutlineUpdateStrategy_AddTimedReveal::highlightColor' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddTimedReveal, priority) == 0x000018, "Member 'SourceBasedOutlineUpdateStrategy_AddTimedReveal::priority' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddTimedReveal, affectedCharacters) == 0x000020, "Member 'SourceBasedOutlineUpdateStrategy_AddTimedReveal::affectedCharacters' has a wrong offset!");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_AddTimedReveal, duration) == 0x000030, "Member 'SourceBasedOutlineUpdateStrategy_AddTimedReveal::duration' has a wrong offset!");

// Function DeadByDaylight.SourceBasedOutlineUpdateStrategy.ChangeDefaultColorForSlasher
// 0x0010 (0x0010 - 0x0000)
struct SourceBasedOutlineUpdateStrategy_ChangeDefaultColorForSlasher final
{
public:
	struct FLinearColor                           newColor;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SourceBasedOutlineUpdateStrategy_ChangeDefaultColorForSlasher) == 0x000004, "Wrong alignment on SourceBasedOutlineUpdateStrategy_ChangeDefaultColorForSlasher");
static_assert(sizeof(SourceBasedOutlineUpdateStrategy_ChangeDefaultColorForSlasher) == 0x000010, "Wrong size on SourceBasedOutlineUpdateStrategy_ChangeDefaultColorForSlasher");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_ChangeDefaultColorForSlasher, newColor) == 0x000000, "Member 'SourceBasedOutlineUpdateStrategy_ChangeDefaultColorForSlasher::newColor' has a wrong offset!");

// Function DeadByDaylight.SourceBasedOutlineUpdateStrategy.ChangeDefaultColorForSurvivor
// 0x0010 (0x0010 - 0x0000)
struct SourceBasedOutlineUpdateStrategy_ChangeDefaultColorForSurvivor final
{
public:
	struct FLinearColor                           newColor;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SourceBasedOutlineUpdateStrategy_ChangeDefaultColorForSurvivor) == 0x000004, "Wrong alignment on SourceBasedOutlineUpdateStrategy_ChangeDefaultColorForSurvivor");
static_assert(sizeof(SourceBasedOutlineUpdateStrategy_ChangeDefaultColorForSurvivor) == 0x000010, "Wrong size on SourceBasedOutlineUpdateStrategy_ChangeDefaultColorForSurvivor");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_ChangeDefaultColorForSurvivor, newColor) == 0x000000, "Member 'SourceBasedOutlineUpdateStrategy_ChangeDefaultColorForSurvivor::newColor' has a wrong offset!");

// Function DeadByDaylight.SourceBasedOutlineUpdateStrategy.RemoveRevealSource
// 0x0008 (0x0008 - 0x0000)
struct SourceBasedOutlineUpdateStrategy_RemoveRevealSource final
{
public:
	const class UObject*                          source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SourceBasedOutlineUpdateStrategy_RemoveRevealSource) == 0x000008, "Wrong alignment on SourceBasedOutlineUpdateStrategy_RemoveRevealSource");
static_assert(sizeof(SourceBasedOutlineUpdateStrategy_RemoveRevealSource) == 0x000008, "Wrong size on SourceBasedOutlineUpdateStrategy_RemoveRevealSource");
static_assert(offsetof(SourceBasedOutlineUpdateStrategy_RemoveRevealSource, source) == 0x000000, "Member 'SourceBasedOutlineUpdateStrategy_RemoveRevealSource::source' has a wrong offset!");

// Function DeadByDaylight.UMGTallyListElementWidget.OnPageVisibilityChanged
// 0x0002 (0x0002 - 0x0000)
struct UMGTallyListElementWidget_OnPageVisibilityChanged final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          wasInAnimationPlayed;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyListElementWidget_OnPageVisibilityChanged) == 0x000001, "Wrong alignment on UMGTallyListElementWidget_OnPageVisibilityChanged");
static_assert(sizeof(UMGTallyListElementWidget_OnPageVisibilityChanged) == 0x000002, "Wrong size on UMGTallyListElementWidget_OnPageVisibilityChanged");
static_assert(offsetof(UMGTallyListElementWidget_OnPageVisibilityChanged, isVisible) == 0x000000, "Member 'UMGTallyListElementWidget_OnPageVisibilityChanged::isVisible' has a wrong offset!");
static_assert(offsetof(UMGTallyListElementWidget_OnPageVisibilityChanged, wasInAnimationPlayed) == 0x000001, "Member 'UMGTallyListElementWidget_OnPageVisibilityChanged::wasInAnimationPlayed' has a wrong offset!");

// Function DeadByDaylight.UMGTallyPlayerLevelWidget.OnSetFinalPlayerXp
// 0x0038 (0x0038 - 0x0000)
struct UMGTallyPlayerLevelWidget_OnSetFinalPlayerXp final
{
public:
	int32                                         finalXp;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlayerLevelData>               reachedLevels;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FXpBonusData>                   xpBonuses;                                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRewardItemData>                rewardsEarned;                                     // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyPlayerLevelWidget_OnSetFinalPlayerXp) == 0x000008, "Wrong alignment on UMGTallyPlayerLevelWidget_OnSetFinalPlayerXp");
static_assert(sizeof(UMGTallyPlayerLevelWidget_OnSetFinalPlayerXp) == 0x000038, "Wrong size on UMGTallyPlayerLevelWidget_OnSetFinalPlayerXp");
static_assert(offsetof(UMGTallyPlayerLevelWidget_OnSetFinalPlayerXp, finalXp) == 0x000000, "Member 'UMGTallyPlayerLevelWidget_OnSetFinalPlayerXp::finalXp' has a wrong offset!");
static_assert(offsetof(UMGTallyPlayerLevelWidget_OnSetFinalPlayerXp, reachedLevels) == 0x000008, "Member 'UMGTallyPlayerLevelWidget_OnSetFinalPlayerXp::reachedLevels' has a wrong offset!");
static_assert(offsetof(UMGTallyPlayerLevelWidget_OnSetFinalPlayerXp, xpBonuses) == 0x000018, "Member 'UMGTallyPlayerLevelWidget_OnSetFinalPlayerXp::xpBonuses' has a wrong offset!");
static_assert(offsetof(UMGTallyPlayerLevelWidget_OnSetFinalPlayerXp, rewardsEarned) == 0x000028, "Member 'UMGTallyPlayerLevelWidget_OnSetFinalPlayerXp::rewardsEarned' has a wrong offset!");

// Function DeadByDaylight.UMGTallyPlayerLevelWidget.OnSetInitialPlayerXp
// 0x0010 (0x0010 - 0x0000)
struct UMGTallyPlayerLevelWidget_OnSetInitialPlayerXp final
{
public:
	int32                                         initialXp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerLevelData                       initialLevelData;                                  // 0x0004(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyPlayerLevelWidget_OnSetInitialPlayerXp) == 0x000004, "Wrong alignment on UMGTallyPlayerLevelWidget_OnSetInitialPlayerXp");
static_assert(sizeof(UMGTallyPlayerLevelWidget_OnSetInitialPlayerXp) == 0x000010, "Wrong size on UMGTallyPlayerLevelWidget_OnSetInitialPlayerXp");
static_assert(offsetof(UMGTallyPlayerLevelWidget_OnSetInitialPlayerXp, initialXp) == 0x000000, "Member 'UMGTallyPlayerLevelWidget_OnSetInitialPlayerXp::initialXp' has a wrong offset!");
static_assert(offsetof(UMGTallyPlayerLevelWidget_OnSetInitialPlayerXp, initialLevelData) == 0x000004, "Member 'UMGTallyPlayerLevelWidget_OnSetInitialPlayerXp::initialLevelData' has a wrong offset!");

// Function DeadByDaylight.UMGTallyPlayerLevelWidget.GetFinalXp
// 0x0004 (0x0004 - 0x0000)
struct UMGTallyPlayerLevelWidget_GetFinalXp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyPlayerLevelWidget_GetFinalXp) == 0x000004, "Wrong alignment on UMGTallyPlayerLevelWidget_GetFinalXp");
static_assert(sizeof(UMGTallyPlayerLevelWidget_GetFinalXp) == 0x000004, "Wrong size on UMGTallyPlayerLevelWidget_GetFinalXp");
static_assert(offsetof(UMGTallyPlayerLevelWidget_GetFinalXp, ReturnValue) == 0x000000, "Member 'UMGTallyPlayerLevelWidget_GetFinalXp::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGTallyPlayerLevelWidget.GetInitialXp
// 0x0004 (0x0004 - 0x0000)
struct UMGTallyPlayerLevelWidget_GetInitialXp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyPlayerLevelWidget_GetInitialXp) == 0x000004, "Wrong alignment on UMGTallyPlayerLevelWidget_GetInitialXp");
static_assert(sizeof(UMGTallyPlayerLevelWidget_GetInitialXp) == 0x000004, "Wrong size on UMGTallyPlayerLevelWidget_GetInitialXp");
static_assert(offsetof(UMGTallyPlayerLevelWidget_GetInitialXp, ReturnValue) == 0x000000, "Member 'UMGTallyPlayerLevelWidget_GetInitialXp::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGTallyPlayerLevelWidget.GetReachedLevels
// 0x0010 (0x0010 - 0x0000)
struct UMGTallyPlayerLevelWidget_GetReachedLevels final
{
public:
	TArray<struct FPlayerLevelData>               ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyPlayerLevelWidget_GetReachedLevels) == 0x000008, "Wrong alignment on UMGTallyPlayerLevelWidget_GetReachedLevels");
static_assert(sizeof(UMGTallyPlayerLevelWidget_GetReachedLevels) == 0x000010, "Wrong size on UMGTallyPlayerLevelWidget_GetReachedLevels");
static_assert(offsetof(UMGTallyPlayerLevelWidget_GetReachedLevels, ReturnValue) == 0x000000, "Member 'UMGTallyPlayerLevelWidget_GetReachedLevels::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGTallyPlayerLevelWidget.GetRewardsEarned
// 0x0010 (0x0010 - 0x0000)
struct UMGTallyPlayerLevelWidget_GetRewardsEarned final
{
public:
	TArray<struct FRewardItemData>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyPlayerLevelWidget_GetRewardsEarned) == 0x000008, "Wrong alignment on UMGTallyPlayerLevelWidget_GetRewardsEarned");
static_assert(sizeof(UMGTallyPlayerLevelWidget_GetRewardsEarned) == 0x000010, "Wrong size on UMGTallyPlayerLevelWidget_GetRewardsEarned");
static_assert(offsetof(UMGTallyPlayerLevelWidget_GetRewardsEarned, ReturnValue) == 0x000000, "Member 'UMGTallyPlayerLevelWidget_GetRewardsEarned::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGTallyPlayerLevelWidget.GetXpBonuses
// 0x0010 (0x0010 - 0x0000)
struct UMGTallyPlayerLevelWidget_GetXpBonuses final
{
public:
	TArray<struct FXpBonusData>                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyPlayerLevelWidget_GetXpBonuses) == 0x000008, "Wrong alignment on UMGTallyPlayerLevelWidget_GetXpBonuses");
static_assert(sizeof(UMGTallyPlayerLevelWidget_GetXpBonuses) == 0x000010, "Wrong size on UMGTallyPlayerLevelWidget_GetXpBonuses");
static_assert(offsetof(UMGTallyPlayerLevelWidget_GetXpBonuses, ReturnValue) == 0x000000, "Member 'UMGTallyPlayerLevelWidget_GetXpBonuses::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.ComputeHookStrugglePercent
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_ComputeHookStrugglePercent final
{
public:
	const class ACamperPlayer*                    hookedCamper;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         hookStruggleThreshold;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDHookUtilities_ComputeHookStrugglePercent) == 0x000008, "Wrong alignment on DBDHookUtilities_ComputeHookStrugglePercent");
static_assert(sizeof(DBDHookUtilities_ComputeHookStrugglePercent) == 0x000010, "Wrong size on DBDHookUtilities_ComputeHookStrugglePercent");
static_assert(offsetof(DBDHookUtilities_ComputeHookStrugglePercent, hookedCamper) == 0x000000, "Member 'DBDHookUtilities_ComputeHookStrugglePercent::hookedCamper' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_ComputeHookStrugglePercent, hookStruggleThreshold) == 0x000008, "Member 'DBDHookUtilities_ComputeHookStrugglePercent::hookStruggleThreshold' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_ComputeHookStrugglePercent, ReturnValue) == 0x00000C, "Member 'DBDHookUtilities_ComputeHookStrugglePercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsFreddyHook
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_IsFreddyHook final
{
public:
	class AMeatHook*                              targetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsFreddyHook) == 0x000008, "Wrong alignment on DBDHookUtilities_IsFreddyHook");
static_assert(sizeof(DBDHookUtilities_IsFreddyHook) == 0x000010, "Wrong size on DBDHookUtilities_IsFreddyHook");
static_assert(offsetof(DBDHookUtilities_IsFreddyHook, targetHook) == 0x000000, "Member 'DBDHookUtilities_IsFreddyHook::targetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsFreddyHook, ReturnValue) == 0x000008, "Member 'DBDHookUtilities_IsFreddyHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsHagHook
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_IsHagHook final
{
public:
	class AMeatHook*                              targetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsHagHook) == 0x000008, "Wrong alignment on DBDHookUtilities_IsHagHook");
static_assert(sizeof(DBDHookUtilities_IsHagHook) == 0x000010, "Wrong size on DBDHookUtilities_IsHagHook");
static_assert(offsetof(DBDHookUtilities_IsHagHook, targetHook) == 0x000000, "Member 'DBDHookUtilities_IsHagHook::targetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsHagHook, ReturnValue) == 0x000008, "Member 'DBDHookUtilities_IsHagHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsHookOf
// 0x0018 (0x0018 - 0x0000)
struct DBDHookUtilities_IsHookOf final
{
public:
	class AMeatHook*                              targetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           hookTag;                                           // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsHookOf) == 0x000008, "Wrong alignment on DBDHookUtilities_IsHookOf");
static_assert(sizeof(DBDHookUtilities_IsHookOf) == 0x000018, "Wrong size on DBDHookUtilities_IsHookOf");
static_assert(offsetof(DBDHookUtilities_IsHookOf, targetHook) == 0x000000, "Member 'DBDHookUtilities_IsHookOf::targetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsHookOf, hookTag) == 0x000008, "Member 'DBDHookUtilities_IsHookOf::hookTag' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsHookOf, ReturnValue) == 0x000014, "Member 'DBDHookUtilities_IsHookOf::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsHuntressHook
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_IsHuntressHook final
{
public:
	class AMeatHook*                              targetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsHuntressHook) == 0x000008, "Wrong alignment on DBDHookUtilities_IsHuntressHook");
static_assert(sizeof(DBDHookUtilities_IsHuntressHook) == 0x000010, "Wrong size on DBDHookUtilities_IsHuntressHook");
static_assert(offsetof(DBDHookUtilities_IsHuntressHook, targetHook) == 0x000000, "Member 'DBDHookUtilities_IsHuntressHook::targetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsHuntressHook, ReturnValue) == 0x000008, "Member 'DBDHookUtilities_IsHuntressHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsLegionHook
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_IsLegionHook final
{
public:
	class AMeatHook*                              targetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsLegionHook) == 0x000008, "Wrong alignment on DBDHookUtilities_IsLegionHook");
static_assert(sizeof(DBDHookUtilities_IsLegionHook) == 0x000010, "Wrong size on DBDHookUtilities_IsLegionHook");
static_assert(offsetof(DBDHookUtilities_IsLegionHook, targetHook) == 0x000000, "Member 'DBDHookUtilities_IsLegionHook::targetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsLegionHook, ReturnValue) == 0x000008, "Member 'DBDHookUtilities_IsLegionHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsNurseHook
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_IsNurseHook final
{
public:
	class AMeatHook*                              targetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsNurseHook) == 0x000008, "Wrong alignment on DBDHookUtilities_IsNurseHook");
static_assert(sizeof(DBDHookUtilities_IsNurseHook) == 0x000010, "Wrong size on DBDHookUtilities_IsNurseHook");
static_assert(offsetof(DBDHookUtilities_IsNurseHook, targetHook) == 0x000000, "Member 'DBDHookUtilities_IsNurseHook::targetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsNurseHook, ReturnValue) == 0x000008, "Member 'DBDHookUtilities_IsNurseHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsPigHook
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_IsPigHook final
{
public:
	class AMeatHook*                              targetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsPigHook) == 0x000008, "Wrong alignment on DBDHookUtilities_IsPigHook");
static_assert(sizeof(DBDHookUtilities_IsPigHook) == 0x000010, "Wrong size on DBDHookUtilities_IsPigHook");
static_assert(offsetof(DBDHookUtilities_IsPigHook, targetHook) == 0x000000, "Member 'DBDHookUtilities_IsPigHook::targetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsPigHook, ReturnValue) == 0x000008, "Member 'DBDHookUtilities_IsPigHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsWraithHook
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_IsWraithHook final
{
public:
	class AMeatHook*                              targetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsWraithHook) == 0x000008, "Wrong alignment on DBDHookUtilities_IsWraithHook");
static_assert(sizeof(DBDHookUtilities_IsWraithHook) == 0x000010, "Wrong size on DBDHookUtilities_IsWraithHook");
static_assert(offsetof(DBDHookUtilities_IsWraithHook, targetHook) == 0x000000, "Member 'DBDHookUtilities_IsWraithHook::targetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsWraithHook, ReturnValue) == 0x000008, "Member 'DBDHookUtilities_IsWraithHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemModifier.AuthoritySetItemCount
// 0x0004 (0x0004 - 0x0000)
struct ItemModifier_AuthoritySetItemCount final
{
public:
	int32                                         itemCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemModifier_AuthoritySetItemCount) == 0x000004, "Wrong alignment on ItemModifier_AuthoritySetItemCount");
static_assert(sizeof(ItemModifier_AuthoritySetItemCount) == 0x000004, "Wrong size on ItemModifier_AuthoritySetItemCount");
static_assert(offsetof(ItemModifier_AuthoritySetItemCount, itemCount) == 0x000000, "Member 'ItemModifier_AuthoritySetItemCount::itemCount' has a wrong offset!");

// Function DeadByDaylight.ItemModifier.AuthoritySetItemEnergy
// 0x0004 (0x0004 - 0x0000)
struct ItemModifier_AuthoritySetItemEnergy final
{
public:
	float                                         energy;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemModifier_AuthoritySetItemEnergy) == 0x000004, "Wrong alignment on ItemModifier_AuthoritySetItemEnergy");
static_assert(sizeof(ItemModifier_AuthoritySetItemEnergy) == 0x000004, "Wrong size on ItemModifier_AuthoritySetItemEnergy");
static_assert(offsetof(ItemModifier_AuthoritySetItemEnergy, energy) == 0x000000, "Member 'ItemModifier_AuthoritySetItemEnergy::energy' has a wrong offset!");

// Function DeadByDaylight.ItemModifier.AuthoritySetItemMaxEnergy
// 0x0004 (0x0004 - 0x0000)
struct ItemModifier_AuthoritySetItemMaxEnergy final
{
public:
	float                                         energy;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemModifier_AuthoritySetItemMaxEnergy) == 0x000004, "Wrong alignment on ItemModifier_AuthoritySetItemMaxEnergy");
static_assert(sizeof(ItemModifier_AuthoritySetItemMaxEnergy) == 0x000004, "Wrong size on ItemModifier_AuthoritySetItemMaxEnergy");
static_assert(offsetof(ItemModifier_AuthoritySetItemMaxEnergy, energy) == 0x000000, "Member 'ItemModifier_AuthoritySetItemMaxEnergy::energy' has a wrong offset!");

// Function DeadByDaylight.ItemModifier.GetBaseItem
// 0x0008 (0x0008 - 0x0000)
struct ItemModifier_GetBaseItem final
{
public:
	class ACollectable*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemModifier_GetBaseItem) == 0x000008, "Wrong alignment on ItemModifier_GetBaseItem");
static_assert(sizeof(ItemModifier_GetBaseItem) == 0x000008, "Wrong size on ItemModifier_GetBaseItem");
static_assert(offsetof(ItemModifier_GetBaseItem, ReturnValue) == 0x000000, "Member 'ItemModifier_GetBaseItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemModifier.GetItemCount
// 0x0004 (0x0004 - 0x0000)
struct ItemModifier_GetItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemModifier_GetItemCount) == 0x000004, "Wrong alignment on ItemModifier_GetItemCount");
static_assert(sizeof(ItemModifier_GetItemCount) == 0x000004, "Wrong size on ItemModifier_GetItemCount");
static_assert(offsetof(ItemModifier_GetItemCount, ReturnValue) == 0x000000, "Member 'ItemModifier_GetItemCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemModifier.GetItemEnergy
// 0x0004 (0x0004 - 0x0000)
struct ItemModifier_GetItemEnergy final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemModifier_GetItemEnergy) == 0x000004, "Wrong alignment on ItemModifier_GetItemEnergy");
static_assert(sizeof(ItemModifier_GetItemEnergy) == 0x000004, "Wrong size on ItemModifier_GetItemEnergy");
static_assert(offsetof(ItemModifier_GetItemEnergy, ReturnValue) == 0x000000, "Member 'ItemModifier_GetItemEnergy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemModifier.GetItemMaxEnergy
// 0x0004 (0x0004 - 0x0000)
struct ItemModifier_GetItemMaxEnergy final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemModifier_GetItemMaxEnergy) == 0x000004, "Wrong alignment on ItemModifier_GetItemMaxEnergy");
static_assert(sizeof(ItemModifier_GetItemMaxEnergy) == 0x000004, "Wrong size on ItemModifier_GetItemMaxEnergy");
static_assert(offsetof(ItemModifier_GetItemMaxEnergy, ReturnValue) == 0x000000, "Member 'ItemModifier_GetItemMaxEnergy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.Authority_OnCollectableDropped
// 0x0008 (0x0008 - 0x0000)
struct ItemAddon_Authority_OnCollectableDropped final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_Authority_OnCollectableDropped) == 0x000008, "Wrong alignment on ItemAddon_Authority_OnCollectableDropped");
static_assert(sizeof(ItemAddon_Authority_OnCollectableDropped) == 0x000008, "Wrong size on ItemAddon_Authority_OnCollectableDropped");
static_assert(offsetof(ItemAddon_Authority_OnCollectableDropped, player) == 0x000000, "Member 'ItemAddon_Authority_OnCollectableDropped::player' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.Authority_OnCollectablePickedUp
// 0x0008 (0x0008 - 0x0000)
struct ItemAddon_Authority_OnCollectablePickedUp final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_Authority_OnCollectablePickedUp) == 0x000008, "Wrong alignment on ItemAddon_Authority_OnCollectablePickedUp");
static_assert(sizeof(ItemAddon_Authority_OnCollectablePickedUp) == 0x000008, "Wrong size on ItemAddon_Authority_OnCollectablePickedUp");
static_assert(offsetof(ItemAddon_Authority_OnCollectablePickedUp, player) == 0x000000, "Member 'ItemAddon_Authority_OnCollectablePickedUp::player' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.Authority_SetMaxTokenCount
// 0x0004 (0x0004 - 0x0000)
struct ItemAddon_Authority_SetMaxTokenCount final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_Authority_SetMaxTokenCount) == 0x000004, "Wrong alignment on ItemAddon_Authority_SetMaxTokenCount");
static_assert(sizeof(ItemAddon_Authority_SetMaxTokenCount) == 0x000004, "Wrong size on ItemAddon_Authority_SetMaxTokenCount");
static_assert(offsetof(ItemAddon_Authority_SetMaxTokenCount, value) == 0x000000, "Member 'ItemAddon_Authority_SetMaxTokenCount::value' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.Authority_SetTokenCount
// 0x0004 (0x0004 - 0x0000)
struct ItemAddon_Authority_SetTokenCount final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_Authority_SetTokenCount) == 0x000004, "Wrong alignment on ItemAddon_Authority_SetTokenCount");
static_assert(sizeof(ItemAddon_Authority_SetTokenCount) == 0x000004, "Wrong size on ItemAddon_Authority_SetTokenCount");
static_assert(offsetof(ItemAddon_Authority_SetTokenCount, value) == 0x000000, "Member 'ItemAddon_Authority_SetTokenCount::value' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.Multicast_AddAddonToItem
// 0x0008 (0x0008 - 0x0000)
struct ItemAddon_Multicast_AddAddonToItem final
{
public:
	class ACollectable*                           item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_Multicast_AddAddonToItem) == 0x000008, "Wrong alignment on ItemAddon_Multicast_AddAddonToItem");
static_assert(sizeof(ItemAddon_Multicast_AddAddonToItem) == 0x000008, "Wrong size on ItemAddon_Multicast_AddAddonToItem");
static_assert(offsetof(ItemAddon_Multicast_AddAddonToItem, item) == 0x000000, "Member 'ItemAddon_Multicast_AddAddonToItem::item' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.Multicast_SetBaseItem
// 0x0008 (0x0008 - 0x0000)
struct ItemAddon_Multicast_SetBaseItem final
{
public:
	class ACollectable*                           baseItem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_Multicast_SetBaseItem) == 0x000008, "Wrong alignment on ItemAddon_Multicast_SetBaseItem");
static_assert(sizeof(ItemAddon_Multicast_SetBaseItem) == 0x000008, "Wrong size on ItemAddon_Multicast_SetBaseItem");
static_assert(offsetof(ItemAddon_Multicast_SetBaseItem, baseItem) == 0x000000, "Member 'ItemAddon_Multicast_SetBaseItem::baseItem' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.OnPostItemAddonsCreation
// 0x0010 (0x0010 - 0x0000)
struct ItemAddon_OnPostItemAddonsCreation final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACollectable*                           item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_OnPostItemAddonsCreation) == 0x000008, "Wrong alignment on ItemAddon_OnPostItemAddonsCreation");
static_assert(sizeof(ItemAddon_OnPostItemAddonsCreation) == 0x000010, "Wrong size on ItemAddon_OnPostItemAddonsCreation");
static_assert(offsetof(ItemAddon_OnPostItemAddonsCreation, player) == 0x000000, "Member 'ItemAddon_OnPostItemAddonsCreation::player' has a wrong offset!");
static_assert(offsetof(ItemAddon_OnPostItemAddonsCreation, item) == 0x000008, "Member 'ItemAddon_OnPostItemAddonsCreation::item' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.OnRep_TokenCount
// 0x0004 (0x0004 - 0x0000)
struct ItemAddon_OnRep_TokenCount final
{
public:
	int32                                         oldCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_OnRep_TokenCount) == 0x000004, "Wrong alignment on ItemAddon_OnRep_TokenCount");
static_assert(sizeof(ItemAddon_OnRep_TokenCount) == 0x000004, "Wrong size on ItemAddon_OnRep_TokenCount");
static_assert(offsetof(ItemAddon_OnRep_TokenCount, oldCount) == 0x000000, "Member 'ItemAddon_OnRep_TokenCount::oldCount' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.GetMaxTokenCount
// 0x0004 (0x0004 - 0x0000)
struct ItemAddon_GetMaxTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_GetMaxTokenCount) == 0x000004, "Wrong alignment on ItemAddon_GetMaxTokenCount");
static_assert(sizeof(ItemAddon_GetMaxTokenCount) == 0x000004, "Wrong size on ItemAddon_GetMaxTokenCount");
static_assert(offsetof(ItemAddon_GetMaxTokenCount, ReturnValue) == 0x000000, "Member 'ItemAddon_GetMaxTokenCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.GetTokenCount
// 0x0004 (0x0004 - 0x0000)
struct ItemAddon_GetTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_GetTokenCount) == 0x000004, "Wrong alignment on ItemAddon_GetTokenCount");
static_assert(sizeof(ItemAddon_GetTokenCount) == 0x000004, "Wrong size on ItemAddon_GetTokenCount");
static_assert(offsetof(ItemAddon_GetTokenCount, ReturnValue) == 0x000000, "Member 'ItemAddon_GetTokenCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.IsReadyForSetUp
// 0x0001 (0x0001 - 0x0000)
struct ItemAddon_IsReadyForSetUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_IsReadyForSetUp) == 0x000001, "Wrong alignment on ItemAddon_IsReadyForSetUp");
static_assert(sizeof(ItemAddon_IsReadyForSetUp) == 0x000001, "Wrong size on ItemAddon_IsReadyForSetUp");
static_assert(offsetof(ItemAddon_IsReadyForSetUp, ReturnValue) == 0x000000, "Member 'ItemAddon_IsReadyForSetUp::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.IsSecondaryAction
// 0x0001 (0x0001 - 0x0000)
struct ItemAddon_IsSecondaryAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_IsSecondaryAction) == 0x000001, "Wrong alignment on ItemAddon_IsSecondaryAction");
static_assert(sizeof(ItemAddon_IsSecondaryAction) == 0x000001, "Wrong size on ItemAddon_IsSecondaryAction");
static_assert(offsetof(ItemAddon_IsSecondaryAction, ReturnValue) == 0x000000, "Member 'ItemAddon_IsSecondaryAction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StreamVideoPlayer.OnMediaOpened
// 0x0010 (0x0010 - 0x0000)
struct StreamVideoPlayer_OnMediaOpened final
{
public:
	class FString                                 openedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StreamVideoPlayer_OnMediaOpened) == 0x000008, "Wrong alignment on StreamVideoPlayer_OnMediaOpened");
static_assert(sizeof(StreamVideoPlayer_OnMediaOpened) == 0x000010, "Wrong size on StreamVideoPlayer_OnMediaOpened");
static_assert(offsetof(StreamVideoPlayer_OnMediaOpened, openedUrl) == 0x000000, "Member 'StreamVideoPlayer_OnMediaOpened::openedUrl' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.Authority_AddCharge
// 0x0018 (0x0018 - 0x0000)
struct ChargeableInteractionDefinition_Authority_AddCharge final
{
public:
	float                                         deltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isChargeFromItem;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_Authority_AddCharge) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_Authority_AddCharge");
static_assert(sizeof(ChargeableInteractionDefinition_Authority_AddCharge) == 0x000018, "Wrong size on ChargeableInteractionDefinition_Authority_AddCharge");
static_assert(offsetof(ChargeableInteractionDefinition_Authority_AddCharge, deltaSeconds) == 0x000000, "Member 'ChargeableInteractionDefinition_Authority_AddCharge::deltaSeconds' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_Authority_AddCharge, character) == 0x000008, "Member 'ChargeableInteractionDefinition_Authority_AddCharge::character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_Authority_AddCharge, isChargeFromItem) == 0x000010, "Member 'ChargeableInteractionDefinition_Authority_AddCharge::isChargeFromItem' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.Authority_ChargeWithItem
// 0x0018 (0x0018 - 0x0000)
struct ChargeableInteractionDefinition_Authority_ChargeWithItem final
{
public:
	float                                         deltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACollectable*                           item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             character;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_Authority_ChargeWithItem) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_Authority_ChargeWithItem");
static_assert(sizeof(ChargeableInteractionDefinition_Authority_ChargeWithItem) == 0x000018, "Wrong size on ChargeableInteractionDefinition_Authority_ChargeWithItem");
static_assert(offsetof(ChargeableInteractionDefinition_Authority_ChargeWithItem, deltaSeconds) == 0x000000, "Member 'ChargeableInteractionDefinition_Authority_ChargeWithItem::deltaSeconds' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_Authority_ChargeWithItem, item) == 0x000008, "Member 'ChargeableInteractionDefinition_Authority_ChargeWithItem::item' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_Authority_ChargeWithItem, character) == 0x000010, "Member 'ChargeableInteractionDefinition_Authority_ChargeWithItem::character' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.OnInteractionCompletionStateChanged
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_OnInteractionCompletionStateChanged final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          complete;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_OnInteractionCompletionStateChanged) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_OnInteractionCompletionStateChanged");
static_assert(sizeof(ChargeableInteractionDefinition_OnInteractionCompletionStateChanged) == 0x000010, "Wrong size on ChargeableInteractionDefinition_OnInteractionCompletionStateChanged");
static_assert(offsetof(ChargeableInteractionDefinition_OnInteractionCompletionStateChanged, player) == 0x000000, "Member 'ChargeableInteractionDefinition_OnInteractionCompletionStateChanged::player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnInteractionCompletionStateChanged, complete) == 0x000008, "Member 'ChargeableInteractionDefinition_OnInteractionCompletionStateChanged::complete' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.OnSkillCheckResponseAesthetic
// 0x0018 (0x0018 - 0x0000)
struct ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic final
{
public:
	bool                                          success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bonus;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          triggerLoudNoise;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hadInput;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         type;                                              // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic");
static_assert(sizeof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic) == 0x000018, "Wrong size on ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic, success) == 0x000000, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic::success' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic, bonus) == 0x000001, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic::bonus' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic, player) == 0x000008, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic::player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic, triggerLoudNoise) == 0x000010, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic::triggerLoudNoise' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic, hadInput) == 0x000011, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic::hadInput' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic, type) == 0x000012, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic::type' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.OnSkillCheckResponseAestheticBP
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bonus;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hadInput;                                          // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         type;                                              // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP");
static_assert(sizeof(ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP) == 0x000010, "Wrong size on ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP, player) == 0x000000, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP::player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP, success) == 0x000008, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP::success' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP, bonus) == 0x000009, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP::bonus' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP, hadInput) == 0x00000A, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP::hadInput' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP, type) == 0x00000B, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP::type' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.OnSkillCheckResponseAuthority
// 0x0018 (0x0018 - 0x0000)
struct ChargeableInteractionDefinition_OnSkillCheckResponseAuthority final
{
public:
	bool                                          success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bonus;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          triggerLoudNoise;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hadInput;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         type;                                              // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_OnSkillCheckResponseAuthority");
static_assert(sizeof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority) == 0x000018, "Wrong size on ChargeableInteractionDefinition_OnSkillCheckResponseAuthority");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority, success) == 0x000000, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthority::success' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority, bonus) == 0x000001, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthority::bonus' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority, player) == 0x000008, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthority::player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority, triggerLoudNoise) == 0x000010, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthority::triggerLoudNoise' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority, hadInput) == 0x000011, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthority::hadInput' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority, type) == 0x000012, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthority::type' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.OnSkillCheckResponseAuthorityBP
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bonus;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hadInput;                                          // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         type;                                              // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP");
static_assert(sizeof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP) == 0x000010, "Wrong size on ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP, player) == 0x000000, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP::player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP, success) == 0x000008, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP::success' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP, bonus) == 0x000009, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP::bonus' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP, hadInput) == 0x00000A, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP::hadInput' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP, type) == 0x00000B, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP::type' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.SetChargeableComponent
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_SetChargeableComponent final
{
public:
	class UChargeableComponent*                   chargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isNullAllowed;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_SetChargeableComponent) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_SetChargeableComponent");
static_assert(sizeof(ChargeableInteractionDefinition_SetChargeableComponent) == 0x000010, "Wrong size on ChargeableInteractionDefinition_SetChargeableComponent");
static_assert(offsetof(ChargeableInteractionDefinition_SetChargeableComponent, chargeableComponent) == 0x000000, "Member 'ChargeableInteractionDefinition_SetChargeableComponent::chargeableComponent' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_SetChargeableComponent, isNullAllowed) == 0x000008, "Member 'ChargeableInteractionDefinition_SetChargeableComponent::isNullAllowed' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.SetSpeedBase
// 0x0004 (0x0004 - 0x0000)
struct ChargeableInteractionDefinition_SetSpeedBase final
{
public:
	float                                         speedBase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_SetSpeedBase) == 0x000004, "Wrong alignment on ChargeableInteractionDefinition_SetSpeedBase");
static_assert(sizeof(ChargeableInteractionDefinition_SetSpeedBase) == 0x000004, "Wrong size on ChargeableInteractionDefinition_SetSpeedBase");
static_assert(offsetof(ChargeableInteractionDefinition_SetSpeedBase, speedBase) == 0x000000, "Member 'ChargeableInteractionDefinition_SetSpeedBase::speedBase' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.SetTutorialChargeableMultiplier
// 0x0004 (0x0004 - 0x0000)
struct ChargeableInteractionDefinition_SetTutorialChargeableMultiplier final
{
public:
	float                                         multiplierValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_SetTutorialChargeableMultiplier) == 0x000004, "Wrong alignment on ChargeableInteractionDefinition_SetTutorialChargeableMultiplier");
static_assert(sizeof(ChargeableInteractionDefinition_SetTutorialChargeableMultiplier) == 0x000004, "Wrong size on ChargeableInteractionDefinition_SetTutorialChargeableMultiplier");
static_assert(offsetof(ChargeableInteractionDefinition_SetTutorialChargeableMultiplier, multiplierValue) == 0x000000, "Member 'ChargeableInteractionDefinition_SetTutorialChargeableMultiplier::multiplierValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetAdditiveChargeTimeReductionAsMultiplier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier");
static_assert(sizeof(ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier");
static_assert(offsetof(ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier, character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier::character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetAdditiveLuckBonus
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetAdditiveLuckBonus final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetAdditiveLuckBonus) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetAdditiveLuckBonus");
static_assert(sizeof(ChargeableInteractionDefinition_GetAdditiveLuckBonus) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetAdditiveLuckBonus");
static_assert(offsetof(ChargeableInteractionDefinition_GetAdditiveLuckBonus, character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetAdditiveLuckBonus::character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetAdditiveLuckBonus, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetAdditiveLuckBonus::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetBonusSkillCheckSuccessPercentReward
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward");
static_assert(sizeof(ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward");
static_assert(offsetof(ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward, player) == 0x000000, "Member 'ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward::player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetBonusSkillCheckZoneSizeModifier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier");
static_assert(sizeof(ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier");
static_assert(offsetof(ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier, character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier::character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetChargeableComponent
// 0x0008 (0x0008 - 0x0000)
struct ChargeableInteractionDefinition_GetChargeableComponent final
{
public:
	class UChargeableComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_GetChargeableComponent) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetChargeableComponent");
static_assert(sizeof(ChargeableInteractionDefinition_GetChargeableComponent) == 0x000008, "Wrong size on ChargeableInteractionDefinition_GetChargeableComponent");
static_assert(offsetof(ChargeableInteractionDefinition_GetChargeableComponent, ReturnValue) == 0x000000, "Member 'ChargeableInteractionDefinition_GetChargeableComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetChargeAmountForTime
// 0x0018 (0x0018 - 0x0000)
struct ChargeableInteractionDefinition_GetChargeAmountForTime final
{
public:
	float                                         deltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetChargeAmountForTime) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetChargeAmountForTime");
static_assert(sizeof(ChargeableInteractionDefinition_GetChargeAmountForTime) == 0x000018, "Wrong size on ChargeableInteractionDefinition_GetChargeAmountForTime");
static_assert(offsetof(ChargeableInteractionDefinition_GetChargeAmountForTime, deltaSeconds) == 0x000000, "Member 'ChargeableInteractionDefinition_GetChargeAmountForTime::deltaSeconds' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetChargeAmountForTime, character) == 0x000008, "Member 'ChargeableInteractionDefinition_GetChargeAmountForTime::character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetChargeAmountForTime, ReturnValue) == 0x000010, "Member 'ChargeableInteractionDefinition_GetChargeAmountForTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetChargeSpeedModifier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetChargeSpeedModifier final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetChargeSpeedModifier) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetChargeSpeedModifier");
static_assert(sizeof(ChargeableInteractionDefinition_GetChargeSpeedModifier) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetChargeSpeedModifier");
static_assert(offsetof(ChargeableInteractionDefinition_GetChargeSpeedModifier, character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetChargeSpeedModifier::character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetChargeSpeedModifier, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetChargeSpeedModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetGoodSkillCheckSuccessPercentReward
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward");
static_assert(sizeof(ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward");
static_assert(offsetof(ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward, player) == 0x000000, "Member 'ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward::player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetInteractionChargeSpeedMultiplier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier");
static_assert(sizeof(ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier");
static_assert(offsetof(ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier, character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier::character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetItemEfficiencyModifier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetItemEfficiencyModifier final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetItemEfficiencyModifier) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetItemEfficiencyModifier");
static_assert(sizeof(ChargeableInteractionDefinition_GetItemEfficiencyModifier) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetItemEfficiencyModifier");
static_assert(offsetof(ChargeableInteractionDefinition_GetItemEfficiencyModifier, character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetItemEfficiencyModifier::character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetItemEfficiencyModifier, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetItemEfficiencyModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetMaxCharge
// 0x0004 (0x0004 - 0x0000)
struct ChargeableInteractionDefinition_GetMaxCharge final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_GetMaxCharge) == 0x000004, "Wrong alignment on ChargeableInteractionDefinition_GetMaxCharge");
static_assert(sizeof(ChargeableInteractionDefinition_GetMaxCharge) == 0x000004, "Wrong size on ChargeableInteractionDefinition_GetMaxCharge");
static_assert(offsetof(ChargeableInteractionDefinition_GetMaxCharge, ReturnValue) == 0x000000, "Member 'ChargeableInteractionDefinition_GetMaxCharge::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetMultiplicativeLuckBonus
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetMultiplicativeLuckBonus final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetMultiplicativeLuckBonus) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetMultiplicativeLuckBonus");
static_assert(sizeof(ChargeableInteractionDefinition_GetMultiplicativeLuckBonus) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetMultiplicativeLuckBonus");
static_assert(offsetof(ChargeableInteractionDefinition_GetMultiplicativeLuckBonus, character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetMultiplicativeLuckBonus::character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetMultiplicativeLuckBonus, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetMultiplicativeLuckBonus::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetPerkMultiplier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetPerkMultiplier final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetPerkMultiplier) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetPerkMultiplier");
static_assert(sizeof(ChargeableInteractionDefinition_GetPerkMultiplier) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetPerkMultiplier");
static_assert(offsetof(ChargeableInteractionDefinition_GetPerkMultiplier, character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetPerkMultiplier::character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetPerkMultiplier, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetPerkMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetPipsPassed
// 0x0004 (0x0004 - 0x0000)
struct ChargeableInteractionDefinition_GetPipsPassed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_GetPipsPassed) == 0x000004, "Wrong alignment on ChargeableInteractionDefinition_GetPipsPassed");
static_assert(sizeof(ChargeableInteractionDefinition_GetPipsPassed) == 0x000004, "Wrong size on ChargeableInteractionDefinition_GetPipsPassed");
static_assert(offsetof(ChargeableInteractionDefinition_GetPipsPassed, ReturnValue) == 0x000000, "Member 'ChargeableInteractionDefinition_GetPipsPassed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetSkillCheckCharge
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetSkillCheckCharge final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bonus;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         type;                                              // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_GetSkillCheckCharge) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetSkillCheckCharge");
static_assert(sizeof(ChargeableInteractionDefinition_GetSkillCheckCharge) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetSkillCheckCharge");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckCharge, player) == 0x000000, "Member 'ChargeableInteractionDefinition_GetSkillCheckCharge::player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckCharge, success) == 0x000008, "Member 'ChargeableInteractionDefinition_GetSkillCheckCharge::success' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckCharge, bonus) == 0x000009, "Member 'ChargeableInteractionDefinition_GetSkillCheckCharge::bonus' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckCharge, type) == 0x00000A, "Member 'ChargeableInteractionDefinition_GetSkillCheckCharge::type' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckCharge, ReturnValue) == 0x00000C, "Member 'ChargeableInteractionDefinition_GetSkillCheckCharge::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetSkillCheckDifficulityModifier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier");
static_assert(sizeof(ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier, character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier::character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetSkillCheckFailurePercentPenalty
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty");
static_assert(sizeof(ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty, player) == 0x000000, "Member 'ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty::player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetSkillCheckFailureTimePenalty
// 0x0004 (0x0004 - 0x0000)
struct ChargeableInteractionDefinition_GetSkillCheckFailureTimePenalty final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_GetSkillCheckFailureTimePenalty) == 0x000004, "Wrong alignment on ChargeableInteractionDefinition_GetSkillCheckFailureTimePenalty");
static_assert(sizeof(ChargeableInteractionDefinition_GetSkillCheckFailureTimePenalty) == 0x000004, "Wrong size on ChargeableInteractionDefinition_GetSkillCheckFailureTimePenalty");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckFailureTimePenalty, ReturnValue) == 0x000000, "Member 'ChargeableInteractionDefinition_GetSkillCheckFailureTimePenalty::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetSkillCheckProbability
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetSkillCheckProbability final
{
public:
	const class ADBDPlayer*                       interactingPlayer;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetSkillCheckProbability) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetSkillCheckProbability");
static_assert(sizeof(ChargeableInteractionDefinition_GetSkillCheckProbability) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetSkillCheckProbability");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckProbability, interactingPlayer) == 0x000000, "Member 'ChargeableInteractionDefinition_GetSkillCheckProbability::interactingPlayer' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckProbability, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetSkillCheckProbability::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetSuccessProbability
// 0x0004 (0x0004 - 0x0000)
struct ChargeableInteractionDefinition_GetSuccessProbability final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_GetSuccessProbability) == 0x000004, "Wrong alignment on ChargeableInteractionDefinition_GetSuccessProbability");
static_assert(sizeof(ChargeableInteractionDefinition_GetSuccessProbability) == 0x000004, "Wrong size on ChargeableInteractionDefinition_GetSuccessProbability");
static_assert(offsetof(ChargeableInteractionDefinition_GetSuccessProbability, ReturnValue) == 0x000000, "Member 'ChargeableInteractionDefinition_GetSuccessProbability::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetTunableValue
// 0x0014 (0x0014 - 0x0000)
struct ChargeableInteractionDefinition_GetTunableValue final
{
public:
	class FName                                   TunableValueID;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         defaultValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_GetTunableValue) == 0x000004, "Wrong alignment on ChargeableInteractionDefinition_GetTunableValue");
static_assert(sizeof(ChargeableInteractionDefinition_GetTunableValue) == 0x000014, "Wrong size on ChargeableInteractionDefinition_GetTunableValue");
static_assert(offsetof(ChargeableInteractionDefinition_GetTunableValue, TunableValueID) == 0x000000, "Member 'ChargeableInteractionDefinition_GetTunableValue::TunableValueID' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetTunableValue, defaultValue) == 0x00000C, "Member 'ChargeableInteractionDefinition_GetTunableValue::defaultValue' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetTunableValue, ReturnValue) == 0x000010, "Member 'ChargeableInteractionDefinition_GetTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.HasSkillCheckHappened
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_HasSkillCheckHappened final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_HasSkillCheckHappened) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_HasSkillCheckHappened");
static_assert(sizeof(ChargeableInteractionDefinition_HasSkillCheckHappened) == 0x000010, "Wrong size on ChargeableInteractionDefinition_HasSkillCheckHappened");
static_assert(offsetof(ChargeableInteractionDefinition_HasSkillCheckHappened, character) == 0x000000, "Member 'ChargeableInteractionDefinition_HasSkillCheckHappened::character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_HasSkillCheckHappened, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_HasSkillCheckHappened::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.IsChargeComplete
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_IsChargeComplete final
{
public:
	const class ADBDPlayer*                       currentlyInteractingPlayer;                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_IsChargeComplete) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_IsChargeComplete");
static_assert(sizeof(ChargeableInteractionDefinition_IsChargeComplete) == 0x000010, "Wrong size on ChargeableInteractionDefinition_IsChargeComplete");
static_assert(offsetof(ChargeableInteractionDefinition_IsChargeComplete, currentlyInteractingPlayer) == 0x000000, "Member 'ChargeableInteractionDefinition_IsChargeComplete::currentlyInteractingPlayer' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_IsChargeComplete, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_IsChargeComplete::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.ShouldShowSpeedProficiencyForMultipleInteractors
// 0x0001 (0x0001 - 0x0000)
struct ChargeableInteractionDefinition_ShouldShowSpeedProficiencyForMultipleInteractors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_ShouldShowSpeedProficiencyForMultipleInteractors) == 0x000001, "Wrong alignment on ChargeableInteractionDefinition_ShouldShowSpeedProficiencyForMultipleInteractors");
static_assert(sizeof(ChargeableInteractionDefinition_ShouldShowSpeedProficiencyForMultipleInteractors) == 0x000001, "Wrong size on ChargeableInteractionDefinition_ShouldShowSpeedProficiencyForMultipleInteractors");
static_assert(offsetof(ChargeableInteractionDefinition_ShouldShowSpeedProficiencyForMultipleInteractors, ReturnValue) == 0x000000, "Member 'ChargeableInteractionDefinition_ShouldShowSpeedProficiencyForMultipleInteractors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.AttachEveryInteractionToZone
// 0x0008 (0x0008 - 0x0000)
struct Interactable_AttachEveryInteractionToZone final
{
public:
	class UPrimitiveComponent*                    zone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_AttachEveryInteractionToZone) == 0x000008, "Wrong alignment on Interactable_AttachEveryInteractionToZone");
static_assert(sizeof(Interactable_AttachEveryInteractionToZone) == 0x000008, "Wrong size on Interactable_AttachEveryInteractionToZone");
static_assert(offsetof(Interactable_AttachEveryInteractionToZone, zone) == 0x000000, "Member 'Interactable_AttachEveryInteractionToZone::zone' has a wrong offset!");

// Function DeadByDaylight.Interactable.AuthorityRequestCancelOngoingInteractions
// 0x0001 (0x0001 - 0x0000)
struct Interactable_AuthorityRequestCancelOngoingInteractions final
{
public:
	bool                                          onlyOnHitCancelableInteractions;                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_AuthorityRequestCancelOngoingInteractions) == 0x000001, "Wrong alignment on Interactable_AuthorityRequestCancelOngoingInteractions");
static_assert(sizeof(Interactable_AuthorityRequestCancelOngoingInteractions) == 0x000001, "Wrong size on Interactable_AuthorityRequestCancelOngoingInteractions");
static_assert(offsetof(Interactable_AuthorityRequestCancelOngoingInteractions, onlyOnHitCancelableInteractions) == 0x000000, "Member 'Interactable_AuthorityRequestCancelOngoingInteractions::onlyOnHitCancelableInteractions' has a wrong offset!");

// Function DeadByDaylight.Interactable.OnInteractorLockChanged
// 0x0010 (0x0010 - 0x0000)
struct Interactable_OnInteractorLockChanged final
{
public:
	bool                                          locked;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             interactingPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_OnInteractorLockChanged) == 0x000008, "Wrong alignment on Interactable_OnInteractorLockChanged");
static_assert(sizeof(Interactable_OnInteractorLockChanged) == 0x000010, "Wrong size on Interactable_OnInteractorLockChanged");
static_assert(offsetof(Interactable_OnInteractorLockChanged, locked) == 0x000000, "Member 'Interactable_OnInteractorLockChanged::locked' has a wrong offset!");
static_assert(offsetof(Interactable_OnInteractorLockChanged, interactingPlayer) == 0x000008, "Member 'Interactable_OnInteractorLockChanged::interactingPlayer' has a wrong offset!");

// Function DeadByDaylight.Interactable.PreInterruptionEvent
// 0x0018 (0x0018 - 0x0000)
struct Interactable_PreInterruptionEvent final
{
public:
	class ADBDPlayer*                             interruptor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             interruptee;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterruptionDefinition*                interruption;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_PreInterruptionEvent) == 0x000008, "Wrong alignment on Interactable_PreInterruptionEvent");
static_assert(sizeof(Interactable_PreInterruptionEvent) == 0x000018, "Wrong size on Interactable_PreInterruptionEvent");
static_assert(offsetof(Interactable_PreInterruptionEvent, interruptor) == 0x000000, "Member 'Interactable_PreInterruptionEvent::interruptor' has a wrong offset!");
static_assert(offsetof(Interactable_PreInterruptionEvent, interruptee) == 0x000008, "Member 'Interactable_PreInterruptionEvent::interruptee' has a wrong offset!");
static_assert(offsetof(Interactable_PreInterruptionEvent, interruption) == 0x000010, "Member 'Interactable_PreInterruptionEvent::interruption' has a wrong offset!");

// Function DeadByDaylight.Interactable.SetInteractorsUsable
// 0x0010 (0x0010 - 0x0000)
struct Interactable_SetInteractorsUsable final
{
public:
	bool                                          usable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractor*                            exception;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_SetInteractorsUsable) == 0x000008, "Wrong alignment on Interactable_SetInteractorsUsable");
static_assert(sizeof(Interactable_SetInteractorsUsable) == 0x000010, "Wrong size on Interactable_SetInteractorsUsable");
static_assert(offsetof(Interactable_SetInteractorsUsable, usable) == 0x000000, "Member 'Interactable_SetInteractorsUsable::usable' has a wrong offset!");
static_assert(offsetof(Interactable_SetInteractorsUsable, exception) == 0x000008, "Member 'Interactable_SetInteractorsUsable::exception' has a wrong offset!");

// Function DeadByDaylight.Interactable.SetSingleZone
// 0x0008 (0x0008 - 0x0000)
struct Interactable_SetSingleZone final
{
public:
	class UPrimitiveComponent*                    zone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_SetSingleZone) == 0x000008, "Wrong alignment on Interactable_SetSingleZone");
static_assert(sizeof(Interactable_SetSingleZone) == 0x000008, "Wrong size on Interactable_SetSingleZone");
static_assert(offsetof(Interactable_SetSingleZone, zone) == 0x000000, "Member 'Interactable_SetSingleZone::zone' has a wrong offset!");

// Function DeadByDaylight.Interactable.Authority_GetInteractingPlayers
// 0x0010 (0x0010 - 0x0000)
struct Interactable_Authority_GetInteractingPlayers final
{
public:
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_Authority_GetInteractingPlayers) == 0x000008, "Wrong alignment on Interactable_Authority_GetInteractingPlayers");
static_assert(sizeof(Interactable_Authority_GetInteractingPlayers) == 0x000010, "Wrong size on Interactable_Authority_GetInteractingPlayers");
static_assert(offsetof(Interactable_Authority_GetInteractingPlayers, ReturnValue) == 0x000000, "Member 'Interactable_Authority_GetInteractingPlayers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.GetFocalPointPosition
// 0x0020 (0x0020 - 0x0000)
struct Interactable_GetFocalPointPosition final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInteractionDefinition*           definition;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactable_GetFocalPointPosition) == 0x000008, "Wrong alignment on Interactable_GetFocalPointPosition");
static_assert(sizeof(Interactable_GetFocalPointPosition) == 0x000020, "Wrong size on Interactable_GetFocalPointPosition");
static_assert(offsetof(Interactable_GetFocalPointPosition, player) == 0x000000, "Member 'Interactable_GetFocalPointPosition::player' has a wrong offset!");
static_assert(offsetof(Interactable_GetFocalPointPosition, definition) == 0x000008, "Member 'Interactable_GetFocalPointPosition::definition' has a wrong offset!");
static_assert(offsetof(Interactable_GetFocalPointPosition, ReturnValue) == 0x000010, "Member 'Interactable_GetFocalPointPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.GetInteractingPlayersRaw
// 0x0010 (0x0010 - 0x0000)
struct Interactable_GetInteractingPlayersRaw final
{
public:
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_GetInteractingPlayersRaw) == 0x000008, "Wrong alignment on Interactable_GetInteractingPlayersRaw");
static_assert(sizeof(Interactable_GetInteractingPlayersRaw) == 0x000010, "Wrong size on Interactable_GetInteractingPlayersRaw");
static_assert(offsetof(Interactable_GetInteractingPlayersRaw, ReturnValue) == 0x000000, "Member 'Interactable_GetInteractingPlayersRaw::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.GetInteractors
// 0x0010 (0x0010 - 0x0000)
struct Interactable_GetInteractors final
{
public:
	TArray<class UInteractor*>                    ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_GetInteractors) == 0x000008, "Wrong alignment on Interactable_GetInteractors");
static_assert(sizeof(Interactable_GetInteractors) == 0x000010, "Wrong size on Interactable_GetInteractors");
static_assert(offsetof(Interactable_GetInteractors, ReturnValue) == 0x000000, "Member 'Interactable_GetInteractors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.GetPlayerOwner
// 0x0008 (0x0008 - 0x0000)
struct Interactable_GetPlayerOwner final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_GetPlayerOwner) == 0x000008, "Wrong alignment on Interactable_GetPlayerOwner");
static_assert(sizeof(Interactable_GetPlayerOwner) == 0x000008, "Wrong size on Interactable_GetPlayerOwner");
static_assert(offsetof(Interactable_GetPlayerOwner, ReturnValue) == 0x000000, "Member 'Interactable_GetPlayerOwner::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.HasAnOngoingInteraction
// 0x0001 (0x0001 - 0x0000)
struct Interactable_HasAnOngoingInteraction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_HasAnOngoingInteraction) == 0x000001, "Wrong alignment on Interactable_HasAnOngoingInteraction");
static_assert(sizeof(Interactable_HasAnOngoingInteraction) == 0x000001, "Wrong size on Interactable_HasAnOngoingInteraction");
static_assert(offsetof(Interactable_HasAnOngoingInteraction, ReturnValue) == 0x000000, "Member 'Interactable_HasAnOngoingInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.IsInteractingWith
// 0x0010 (0x0010 - 0x0000)
struct Interactable_IsInteractingWith final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactable_IsInteractingWith) == 0x000008, "Wrong alignment on Interactable_IsInteractingWith");
static_assert(sizeof(Interactable_IsInteractingWith) == 0x000010, "Wrong size on Interactable_IsInteractingWith");
static_assert(offsetof(Interactable_IsInteractingWith, player) == 0x000000, "Member 'Interactable_IsInteractingWith::player' has a wrong offset!");
static_assert(offsetof(Interactable_IsInteractingWith, ReturnValue) == 0x000008, "Member 'Interactable_IsInteractingWith::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.IsInteractionDone
// 0x0020 (0x0020 - 0x0000)
struct Interactable_IsInteractionDone final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInteractor*                      interactor;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInteractionDefinition*           definition;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         interactionType;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactable_IsInteractionDone) == 0x000008, "Wrong alignment on Interactable_IsInteractionDone");
static_assert(sizeof(Interactable_IsInteractionDone) == 0x000020, "Wrong size on Interactable_IsInteractionDone");
static_assert(offsetof(Interactable_IsInteractionDone, player) == 0x000000, "Member 'Interactable_IsInteractionDone::player' has a wrong offset!");
static_assert(offsetof(Interactable_IsInteractionDone, interactor) == 0x000008, "Member 'Interactable_IsInteractionDone::interactor' has a wrong offset!");
static_assert(offsetof(Interactable_IsInteractionDone, definition) == 0x000010, "Member 'Interactable_IsInteractionDone::definition' has a wrong offset!");
static_assert(offsetof(Interactable_IsInteractionDone, interactionType) == 0x000018, "Member 'Interactable_IsInteractionDone::interactionType' has a wrong offset!");
static_assert(offsetof(Interactable_IsInteractionDone, ReturnValue) == 0x000019, "Member 'Interactable_IsInteractionDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.IsInterruptionPossible
// 0x0030 (0x0030 - 0x0000)
struct Interactable_IsInterruptionPossible final
{
public:
	const class ADBDPlayer*                       interruptor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       interruptee;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInteractor*                      interactor;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInteractionDefinition*           definition;                                        // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInterruptionDefinition*          interruption;                                      // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactable_IsInterruptionPossible) == 0x000008, "Wrong alignment on Interactable_IsInterruptionPossible");
static_assert(sizeof(Interactable_IsInterruptionPossible) == 0x000030, "Wrong size on Interactable_IsInterruptionPossible");
static_assert(offsetof(Interactable_IsInterruptionPossible, interruptor) == 0x000000, "Member 'Interactable_IsInterruptionPossible::interruptor' has a wrong offset!");
static_assert(offsetof(Interactable_IsInterruptionPossible, interruptee) == 0x000008, "Member 'Interactable_IsInterruptionPossible::interruptee' has a wrong offset!");
static_assert(offsetof(Interactable_IsInterruptionPossible, interactor) == 0x000010, "Member 'Interactable_IsInterruptionPossible::interactor' has a wrong offset!");
static_assert(offsetof(Interactable_IsInterruptionPossible, definition) == 0x000018, "Member 'Interactable_IsInterruptionPossible::definition' has a wrong offset!");
static_assert(offsetof(Interactable_IsInterruptionPossible, interruption) == 0x000020, "Member 'Interactable_IsInterruptionPossible::interruption' has a wrong offset!");
static_assert(offsetof(Interactable_IsInterruptionPossible, ReturnValue) == 0x000028, "Member 'Interactable_IsInterruptionPossible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGTooltipContentPlayerLevelWidget.SetInfo
// 0x0010 (0x0010 - 0x0000)
struct UMGTooltipContentPlayerLevelWidget_SetInfo final
{
public:
	int32                                         playerLevel;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         playerPrestige;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         currentExperience;                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         nextLevelExperience;                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTooltipContentPlayerLevelWidget_SetInfo) == 0x000004, "Wrong alignment on UMGTooltipContentPlayerLevelWidget_SetInfo");
static_assert(sizeof(UMGTooltipContentPlayerLevelWidget_SetInfo) == 0x000010, "Wrong size on UMGTooltipContentPlayerLevelWidget_SetInfo");
static_assert(offsetof(UMGTooltipContentPlayerLevelWidget_SetInfo, playerLevel) == 0x000000, "Member 'UMGTooltipContentPlayerLevelWidget_SetInfo::playerLevel' has a wrong offset!");
static_assert(offsetof(UMGTooltipContentPlayerLevelWidget_SetInfo, playerPrestige) == 0x000004, "Member 'UMGTooltipContentPlayerLevelWidget_SetInfo::playerPrestige' has a wrong offset!");
static_assert(offsetof(UMGTooltipContentPlayerLevelWidget_SetInfo, currentExperience) == 0x000008, "Member 'UMGTooltipContentPlayerLevelWidget_SetInfo::currentExperience' has a wrong offset!");
static_assert(offsetof(UMGTooltipContentPlayerLevelWidget_SetInfo, nextLevelExperience) == 0x00000C, "Member 'UMGTooltipContentPlayerLevelWidget_SetInfo::nextLevelExperience' has a wrong offset!");

// Function DeadByDaylight.QuestEventEvaluatorBase.OnGameEvent
// 0x0038 (0x0038 - 0x0000)
struct QuestEventEvaluatorBase_OnGameEvent final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestEventEvaluatorBase_OnGameEvent) == 0x000008, "Wrong alignment on QuestEventEvaluatorBase_OnGameEvent");
static_assert(sizeof(QuestEventEvaluatorBase_OnGameEvent) == 0x000038, "Wrong size on QuestEventEvaluatorBase_OnGameEvent");
static_assert(offsetof(QuestEventEvaluatorBase_OnGameEvent, gameEventType) == 0x000000, "Member 'QuestEventEvaluatorBase_OnGameEvent::gameEventType' has a wrong offset!");
static_assert(offsetof(QuestEventEvaluatorBase_OnGameEvent, gameEventData) == 0x000010, "Member 'QuestEventEvaluatorBase_OnGameEvent::gameEventData' has a wrong offset!");

// Function DeadByDaylight.CustomizedAudioComponent.GetAudioSwitchState
// 0x0018 (0x0018 - 0x0000)
struct CustomizedAudioComponent_GetAudioSwitchState final
{
public:
	EAudioCustomizationCategory                   audioCustomizationCategory;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedAudioComponent_GetAudioSwitchState) == 0x000008, "Wrong alignment on CustomizedAudioComponent_GetAudioSwitchState");
static_assert(sizeof(CustomizedAudioComponent_GetAudioSwitchState) == 0x000018, "Wrong size on CustomizedAudioComponent_GetAudioSwitchState");
static_assert(offsetof(CustomizedAudioComponent_GetAudioSwitchState, audioCustomizationCategory) == 0x000000, "Member 'CustomizedAudioComponent_GetAudioSwitchState::audioCustomizationCategory' has a wrong offset!");
static_assert(offsetof(CustomizedAudioComponent_GetAudioSwitchState, ReturnValue) == 0x000008, "Member 'CustomizedAudioComponent_GetAudioSwitchState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomizedAudioComponent.GetOutfitCustomizedAudioCollectionState
// 0x000C (0x000C - 0x0000)
struct CustomizedAudioComponent_GetOutfitCustomizedAudioCollectionState final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedAudioComponent_GetOutfitCustomizedAudioCollectionState) == 0x000004, "Wrong alignment on CustomizedAudioComponent_GetOutfitCustomizedAudioCollectionState");
static_assert(sizeof(CustomizedAudioComponent_GetOutfitCustomizedAudioCollectionState) == 0x00000C, "Wrong size on CustomizedAudioComponent_GetOutfitCustomizedAudioCollectionState");
static_assert(offsetof(CustomizedAudioComponent_GetOutfitCustomizedAudioCollectionState, ReturnValue) == 0x000000, "Member 'CustomizedAudioComponent_GetOutfitCustomizedAudioCollectionState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BaseSky.CopyComponentsSettingsFromSource
// 0x0038 (0x0038 - 0x0000)
struct BaseSky_CopyComponentsSettingsFromSource final
{
public:
	class UStaticMeshComponent*                   moonMesh;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             shadowLight;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             godRayLight;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     skylight;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         heightFog;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  postProcess;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 sourceBaseSkyClass;                                // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_CopyComponentsSettingsFromSource) == 0x000008, "Wrong alignment on BaseSky_CopyComponentsSettingsFromSource");
static_assert(sizeof(BaseSky_CopyComponentsSettingsFromSource) == 0x000038, "Wrong size on BaseSky_CopyComponentsSettingsFromSource");
static_assert(offsetof(BaseSky_CopyComponentsSettingsFromSource, moonMesh) == 0x000000, "Member 'BaseSky_CopyComponentsSettingsFromSource::moonMesh' has a wrong offset!");
static_assert(offsetof(BaseSky_CopyComponentsSettingsFromSource, shadowLight) == 0x000008, "Member 'BaseSky_CopyComponentsSettingsFromSource::shadowLight' has a wrong offset!");
static_assert(offsetof(BaseSky_CopyComponentsSettingsFromSource, godRayLight) == 0x000010, "Member 'BaseSky_CopyComponentsSettingsFromSource::godRayLight' has a wrong offset!");
static_assert(offsetof(BaseSky_CopyComponentsSettingsFromSource, skylight) == 0x000018, "Member 'BaseSky_CopyComponentsSettingsFromSource::skylight' has a wrong offset!");
static_assert(offsetof(BaseSky_CopyComponentsSettingsFromSource, heightFog) == 0x000020, "Member 'BaseSky_CopyComponentsSettingsFromSource::heightFog' has a wrong offset!");
static_assert(offsetof(BaseSky_CopyComponentsSettingsFromSource, postProcess) == 0x000028, "Member 'BaseSky_CopyComponentsSettingsFromSource::postProcess' has a wrong offset!");
static_assert(offsetof(BaseSky_CopyComponentsSettingsFromSource, sourceBaseSkyClass) == 0x000030, "Member 'BaseSky_CopyComponentsSettingsFromSource::sourceBaseSkyClass' has a wrong offset!");

// Function DeadByDaylight.BaseSky.GetPostprocessComponent
// 0x0008 (0x0008 - 0x0000)
struct BaseSky_GetPostprocessComponent final
{
public:
	class UPostProcessComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_GetPostprocessComponent) == 0x000008, "Wrong alignment on BaseSky_GetPostprocessComponent");
static_assert(sizeof(BaseSky_GetPostprocessComponent) == 0x000008, "Wrong size on BaseSky_GetPostprocessComponent");
static_assert(offsetof(BaseSky_GetPostprocessComponent, ReturnValue) == 0x000000, "Member 'BaseSky_GetPostprocessComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BaseSky.OnAlphaChanged
// 0x0010 (0x0010 - 0x0000)
struct BaseSky_OnAlphaChanged final
{
public:
	float                                         newAlpha;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_OnAlphaChanged) == 0x000008, "Wrong alignment on BaseSky_OnAlphaChanged");
static_assert(sizeof(BaseSky_OnAlphaChanged) == 0x000010, "Wrong size on BaseSky_OnAlphaChanged");
static_assert(offsetof(BaseSky_OnAlphaChanged, newAlpha) == 0x000000, "Member 'BaseSky_OnAlphaChanged::newAlpha' has a wrong offset!");
static_assert(offsetof(BaseSky_OnAlphaChanged, other) == 0x000008, "Member 'BaseSky_OnAlphaChanged::other' has a wrong offset!");

// Function DeadByDaylight.BaseSky.OnFadeBegin
// 0x0008 (0x0008 - 0x0000)
struct BaseSky_OnFadeBegin final
{
public:
	class AActor*                                 other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_OnFadeBegin) == 0x000008, "Wrong alignment on BaseSky_OnFadeBegin");
static_assert(sizeof(BaseSky_OnFadeBegin) == 0x000008, "Wrong size on BaseSky_OnFadeBegin");
static_assert(offsetof(BaseSky_OnFadeBegin, other) == 0x000000, "Member 'BaseSky_OnFadeBegin::other' has a wrong offset!");

// Function DeadByDaylight.BaseSky.OnFadeEnd
// 0x0008 (0x0008 - 0x0000)
struct BaseSky_OnFadeEnd final
{
public:
	class AActor*                                 other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_OnFadeEnd) == 0x000008, "Wrong alignment on BaseSky_OnFadeEnd");
static_assert(sizeof(BaseSky_OnFadeEnd) == 0x000008, "Wrong size on BaseSky_OnFadeEnd");
static_assert(offsetof(BaseSky_OnFadeEnd, other) == 0x000000, "Member 'BaseSky_OnFadeEnd::other' has a wrong offset!");

// Function DeadByDaylight.BaseSky.SetCullDistance
// 0x0004 (0x0004 - 0x0000)
struct BaseSky_SetCullDistance final
{
public:
	float                                         newCullDistance;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_SetCullDistance) == 0x000004, "Wrong alignment on BaseSky_SetCullDistance");
static_assert(sizeof(BaseSky_SetCullDistance) == 0x000004, "Wrong size on BaseSky_SetCullDistance");
static_assert(offsetof(BaseSky_SetCullDistance, newCullDistance) == 0x000000, "Member 'BaseSky_SetCullDistance::newCullDistance' has a wrong offset!");

// Function DeadByDaylight.BaseSky.SetProbesTint
// 0x0014 (0x0014 - 0x0000)
struct BaseSky_SetProbesTint final
{
public:
	struct FLinearColor                           inColor;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         inSaturation;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_SetProbesTint) == 0x000004, "Wrong alignment on BaseSky_SetProbesTint");
static_assert(sizeof(BaseSky_SetProbesTint) == 0x000014, "Wrong size on BaseSky_SetProbesTint");
static_assert(offsetof(BaseSky_SetProbesTint, inColor) == 0x000000, "Member 'BaseSky_SetProbesTint::inColor' has a wrong offset!");
static_assert(offsetof(BaseSky_SetProbesTint, inSaturation) == 0x000010, "Member 'BaseSky_SetProbesTint::inSaturation' has a wrong offset!");

// Function DeadByDaylight.BaseSky.ToggleDreamworldLighting
// 0x0001 (0x0001 - 0x0000)
struct BaseSky_ToggleDreamworldLighting final
{
public:
	bool                                          toggleOn;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_ToggleDreamworldLighting) == 0x000001, "Wrong alignment on BaseSky_ToggleDreamworldLighting");
static_assert(sizeof(BaseSky_ToggleDreamworldLighting) == 0x000001, "Wrong size on BaseSky_ToggleDreamworldLighting");
static_assert(offsetof(BaseSky_ToggleDreamworldLighting, toggleOn) == 0x000000, "Member 'BaseSky_ToggleDreamworldLighting::toggleOn' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.Authority_CheckActivation
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_Authority_CheckActivation final
{
public:
	bool                                          isAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         generatorId;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_Authority_CheckActivation) == 0x000004, "Wrong alignment on GeneratorDrivenActor_Authority_CheckActivation");
static_assert(sizeof(GeneratorDrivenActor_Authority_CheckActivation) == 0x000008, "Wrong size on GeneratorDrivenActor_Authority_CheckActivation");
static_assert(offsetof(GeneratorDrivenActor_Authority_CheckActivation, isAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_Authority_CheckActivation::isAutoCompleted' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_Authority_CheckActivation, generatorId) == 0x000004, "Member 'GeneratorDrivenActor_Authority_CheckActivation::generatorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.Authority_CheckGeneratorRepairedBySurvivor
// 0x0010 (0x0010 - 0x0000)
struct GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor final
{
public:
	class ADBDPlayer*                             repairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         generatorId;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor) == 0x000008, "Wrong alignment on GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor");
static_assert(sizeof(GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor) == 0x000010, "Wrong size on GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor");
static_assert(offsetof(GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor, repairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor::repairingSurvivor' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor, generatorId) == 0x000008, "Member 'GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor::generatorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.GetSharedTileRandomizer
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_GetSharedTileRandomizer final
{
public:
	struct FRandomStream                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_GetSharedTileRandomizer) == 0x000004, "Wrong alignment on GeneratorDrivenActor_GetSharedTileRandomizer");
static_assert(sizeof(GeneratorDrivenActor_GetSharedTileRandomizer) == 0x000008, "Wrong size on GeneratorDrivenActor_GetSharedTileRandomizer");
static_assert(offsetof(GeneratorDrivenActor_GetSharedTileRandomizer, ReturnValue) == 0x000000, "Member 'GeneratorDrivenActor_GetSharedTileRandomizer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.Multicast_ActivationChecked
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_Multicast_ActivationChecked final
{
public:
	bool                                          activated;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAutoCompleted;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         generatorId;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_Multicast_ActivationChecked) == 0x000004, "Wrong alignment on GeneratorDrivenActor_Multicast_ActivationChecked");
static_assert(sizeof(GeneratorDrivenActor_Multicast_ActivationChecked) == 0x000008, "Wrong size on GeneratorDrivenActor_Multicast_ActivationChecked");
static_assert(offsetof(GeneratorDrivenActor_Multicast_ActivationChecked, activated) == 0x000000, "Member 'GeneratorDrivenActor_Multicast_ActivationChecked::activated' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_Multicast_ActivationChecked, isAutoCompleted) == 0x000001, "Member 'GeneratorDrivenActor_Multicast_ActivationChecked::isAutoCompleted' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_Multicast_ActivationChecked, generatorId) == 0x000004, "Member 'GeneratorDrivenActor_Multicast_ActivationChecked::generatorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.Multicast_GeneratorRepairedBySurvivor
// 0x0010 (0x0010 - 0x0000)
struct GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor final
{
public:
	class ADBDPlayer*                             repairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         generatorId;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor) == 0x000008, "Wrong alignment on GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor");
static_assert(sizeof(GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor) == 0x000010, "Wrong size on GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor");
static_assert(offsetof(GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor, repairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor::repairingSurvivor' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor, generatorId) == 0x000008, "Member 'GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor::generatorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnActivateGeneratorDrivenActor
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnActivateGeneratorDrivenActor final
{
public:
	bool                                          isAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         generatorId;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnActivateGeneratorDrivenActor) == 0x000004, "Wrong alignment on GeneratorDrivenActor_OnActivateGeneratorDrivenActor");
static_assert(sizeof(GeneratorDrivenActor_OnActivateGeneratorDrivenActor) == 0x000008, "Wrong size on GeneratorDrivenActor_OnActivateGeneratorDrivenActor");
static_assert(offsetof(GeneratorDrivenActor_OnActivateGeneratorDrivenActor, isAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnActivateGeneratorDrivenActor::isAutoCompleted' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_OnActivateGeneratorDrivenActor, generatorId) == 0x000004, "Member 'GeneratorDrivenActor_OnActivateGeneratorDrivenActor::generatorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivor
// 0x0010 (0x0010 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivor final
{
public:
	class ADBDPlayer*                             repairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         generatorId;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivor) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivor");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivor) == 0x000010, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivor");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivor, repairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivor::repairingSurvivor' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivor, generatorId) == 0x000008, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivor::generatorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivorEvent0
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent0 final
{
public:
	class ADBDPlayer*                             repairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent0) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent0");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent0) == 0x000008, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent0");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent0, repairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent0::repairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivorEvent1
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent1 final
{
public:
	class ADBDPlayer*                             repairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent1) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent1");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent1) == 0x000008, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent1");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent1, repairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent1::repairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivorEvent2
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent2 final
{
public:
	class ADBDPlayer*                             repairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent2) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent2");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent2) == 0x000008, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent2");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent2, repairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent2::repairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivorEvent3
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent3 final
{
public:
	class ADBDPlayer*                             repairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent3) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent3");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent3) == 0x000008, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent3");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent3, repairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent3::repairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivorEvent4
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent4 final
{
public:
	class ADBDPlayer*                             repairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent4) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent4");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent4) == 0x000008, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent4");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent4, repairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent4::repairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivorEvent5
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent5 final
{
public:
	class ADBDPlayer*                             repairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent5) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent5");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent5) == 0x000008, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent5");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent5, repairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent5::repairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivorEvent6
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent6 final
{
public:
	class ADBDPlayer*                             repairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent6) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent6");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent6) == 0x000008, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent6");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent6, repairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent6::repairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedEvent0
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedEvent0 final
{
public:
	bool                                          isAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedEvent0) == 0x000001, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedEvent0");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedEvent0) == 0x000001, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedEvent0");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedEvent0, isAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedEvent0::isAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedEvent1
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedEvent1 final
{
public:
	bool                                          isAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedEvent1) == 0x000001, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedEvent1");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedEvent1) == 0x000001, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedEvent1");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedEvent1, isAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedEvent1::isAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedEvent2
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedEvent2 final
{
public:
	bool                                          isAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedEvent2) == 0x000001, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedEvent2");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedEvent2) == 0x000001, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedEvent2");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedEvent2, isAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedEvent2::isAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedEvent3
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedEvent3 final
{
public:
	bool                                          isAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedEvent3) == 0x000001, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedEvent3");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedEvent3) == 0x000001, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedEvent3");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedEvent3, isAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedEvent3::isAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedEvent4
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedEvent4 final
{
public:
	bool                                          isAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedEvent4) == 0x000001, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedEvent4");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedEvent4) == 0x000001, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedEvent4");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedEvent4, isAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedEvent4::isAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedEvent5
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedEvent5 final
{
public:
	bool                                          isAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedEvent5) == 0x000001, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedEvent5");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedEvent5) == 0x000001, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedEvent5");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedEvent5, isAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedEvent5::isAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedEvent6
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedEvent6 final
{
public:
	bool                                          isAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedEvent6) == 0x000001, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedEvent6");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedEvent6) == 0x000001, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedEvent6");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedEvent6, isAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedEvent6::isAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnInitGeneratorDrivenActor
// 0x0010 (0x0010 - 0x0000)
struct GeneratorDrivenActor_OnInitGeneratorDrivenActor final
{
public:
	class AGenerator*                             generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         generatorId;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorDrivenActor_OnInitGeneratorDrivenActor) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnInitGeneratorDrivenActor");
static_assert(sizeof(GeneratorDrivenActor_OnInitGeneratorDrivenActor) == 0x000010, "Wrong size on GeneratorDrivenActor_OnInitGeneratorDrivenActor");
static_assert(offsetof(GeneratorDrivenActor_OnInitGeneratorDrivenActor, generator) == 0x000000, "Member 'GeneratorDrivenActor_OnInitGeneratorDrivenActor::generator' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_OnInitGeneratorDrivenActor, generatorId) == 0x000008, "Member 'GeneratorDrivenActor_OnInitGeneratorDrivenActor::generatorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.SetSpawnedObject
// 0x0010 (0x0010 - 0x0000)
struct GeneratorDrivenActor_SetSpawnedObject final
{
public:
	class AGenerator*                             generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         generatorId;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorDrivenActor_SetSpawnedObject) == 0x000008, "Wrong alignment on GeneratorDrivenActor_SetSpawnedObject");
static_assert(sizeof(GeneratorDrivenActor_SetSpawnedObject) == 0x000010, "Wrong size on GeneratorDrivenActor_SetSpawnedObject");
static_assert(offsetof(GeneratorDrivenActor_SetSpawnedObject, generator) == 0x000000, "Member 'GeneratorDrivenActor_SetSpawnedObject::generator' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_SetSpawnedObject, generatorId) == 0x000008, "Member 'GeneratorDrivenActor_SetSpawnedObject::generatorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.IsActivated
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_IsActivated final
{
public:
	int32                                         generatorId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorDrivenActor_IsActivated) == 0x000004, "Wrong alignment on GeneratorDrivenActor_IsActivated");
static_assert(sizeof(GeneratorDrivenActor_IsActivated) == 0x000008, "Wrong size on GeneratorDrivenActor_IsActivated");
static_assert(offsetof(GeneratorDrivenActor_IsActivated, generatorId) == 0x000000, "Member 'GeneratorDrivenActor_IsActivated::generatorId' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_IsActivated, ReturnValue) == 0x000004, "Member 'GeneratorDrivenActor_IsActivated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.IsValidGeneratorId
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_IsValidGeneratorId final
{
public:
	int32                                         generatorId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorDrivenActor_IsValidGeneratorId) == 0x000004, "Wrong alignment on GeneratorDrivenActor_IsValidGeneratorId");
static_assert(sizeof(GeneratorDrivenActor_IsValidGeneratorId) == 0x000008, "Wrong size on GeneratorDrivenActor_IsValidGeneratorId");
static_assert(offsetof(GeneratorDrivenActor_IsValidGeneratorId, generatorId) == 0x000000, "Member 'GeneratorDrivenActor_IsValidGeneratorId::generatorId' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_IsValidGeneratorId, ReturnValue) == 0x000004, "Member 'GeneratorDrivenActor_IsValidGeneratorId::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CrowBomb.TriggerTakeOff
// 0x000C (0x000C - 0x0000)
struct CrowBomb_TriggerTakeOff final
{
public:
	struct FVector                                triggerLocation;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrowBomb_TriggerTakeOff) == 0x000004, "Wrong alignment on CrowBomb_TriggerTakeOff");
static_assert(sizeof(CrowBomb_TriggerTakeOff) == 0x00000C, "Wrong size on CrowBomb_TriggerTakeOff");
static_assert(offsetof(CrowBomb_TriggerTakeOff, triggerLocation) == 0x000000, "Member 'CrowBomb_TriggerTakeOff::triggerLocation' has a wrong offset!");

// Function DeadByDaylight.Collectable.Authority_AddItemAddon
// 0x0010 (0x0010 - 0x0000)
struct Collectable_Authority_AddItemAddon final
{
public:
	class UItemAddon*                             addon;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Collectable_Authority_AddItemAddon) == 0x000008, "Wrong alignment on Collectable_Authority_AddItemAddon");
static_assert(sizeof(Collectable_Authority_AddItemAddon) == 0x000010, "Wrong size on Collectable_Authority_AddItemAddon");
static_assert(offsetof(Collectable_Authority_AddItemAddon, addon) == 0x000000, "Member 'Collectable_Authority_AddItemAddon::addon' has a wrong offset!");
static_assert(offsetof(Collectable_Authority_AddItemAddon, ReturnValue) == 0x000008, "Member 'Collectable_Authority_AddItemAddon::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.Authority_OnConsumed
// 0x0001 (0x0001 - 0x0000)
struct Collectable_Authority_OnConsumed final
{
public:
	bool                                          forceDiscard;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_Authority_OnConsumed) == 0x000001, "Wrong alignment on Collectable_Authority_OnConsumed");
static_assert(sizeof(Collectable_Authority_OnConsumed) == 0x000001, "Wrong size on Collectable_Authority_OnConsumed");
static_assert(offsetof(Collectable_Authority_OnConsumed, forceDiscard) == 0x000000, "Member 'Collectable_Authority_OnConsumed::forceDiscard' has a wrong offset!");

// Function DeadByDaylight.Collectable.Authority_RemoveItemAddon
// 0x0008 (0x0008 - 0x0000)
struct Collectable_Authority_RemoveItemAddon final
{
public:
	class UItemAddon*                             addon;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_Authority_RemoveItemAddon) == 0x000008, "Wrong alignment on Collectable_Authority_RemoveItemAddon");
static_assert(sizeof(Collectable_Authority_RemoveItemAddon) == 0x000008, "Wrong size on Collectable_Authority_RemoveItemAddon");
static_assert(offsetof(Collectable_Authority_RemoveItemAddon, addon) == 0x000000, "Member 'Collectable_Authority_RemoveItemAddon::addon' has a wrong offset!");

// Function DeadByDaylight.Collectable.BP_OnSurvivorAdded
// 0x0008 (0x0008 - 0x0000)
struct Collectable_BP_OnSurvivorAdded final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_BP_OnSurvivorAdded) == 0x000008, "Wrong alignment on Collectable_BP_OnSurvivorAdded");
static_assert(sizeof(Collectable_BP_OnSurvivorAdded) == 0x000008, "Wrong size on Collectable_BP_OnSurvivorAdded");
static_assert(offsetof(Collectable_BP_OnSurvivorAdded, survivor) == 0x000000, "Member 'Collectable_BP_OnSurvivorAdded::survivor' has a wrong offset!");

// Function DeadByDaylight.Collectable.CallOnCollectorSetBP
// 0x0014 (0x0014 - 0x0000)
struct Collectable_CallOnCollectorSetBP final
{
public:
	TDelegate<void(class ADBDPlayer* player)>     callback;                                          // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_CallOnCollectorSetBP) == 0x000004, "Wrong alignment on Collectable_CallOnCollectorSetBP");
static_assert(sizeof(Collectable_CallOnCollectorSetBP) == 0x000014, "Wrong size on Collectable_CallOnCollectorSetBP");
static_assert(offsetof(Collectable_CallOnCollectorSetBP, callback) == 0x000000, "Member 'Collectable_CallOnCollectorSetBP::callback' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetItemAddons
// 0x0010 (0x0010 - 0x0000)
struct Collectable_GetItemAddons final
{
public:
	TArray<class UItemAddon*>                     ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetItemAddons) == 0x000008, "Wrong alignment on Collectable_GetItemAddons");
static_assert(sizeof(Collectable_GetItemAddons) == 0x000010, "Wrong size on Collectable_GetItemAddons");
static_assert(offsetof(Collectable_GetItemAddons, ReturnValue) == 0x000000, "Member 'Collectable_GetItemAddons::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.Local_Dropped_Location
// 0x0020 (0x0020 - 0x0000)
struct Collectable_Local_Dropped_Location final
{
public:
	class ADBDPlayer*                             droppedBy;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rotation;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_Local_Dropped_Location) == 0x000008, "Wrong alignment on Collectable_Local_Dropped_Location");
static_assert(sizeof(Collectable_Local_Dropped_Location) == 0x000020, "Wrong size on Collectable_Local_Dropped_Location");
static_assert(offsetof(Collectable_Local_Dropped_Location, droppedBy) == 0x000000, "Member 'Collectable_Local_Dropped_Location::droppedBy' has a wrong offset!");
static_assert(offsetof(Collectable_Local_Dropped_Location, location) == 0x000008, "Member 'Collectable_Local_Dropped_Location::location' has a wrong offset!");
static_assert(offsetof(Collectable_Local_Dropped_Location, rotation) == 0x000014, "Member 'Collectable_Local_Dropped_Location::rotation' has a wrong offset!");

// Function DeadByDaylight.Collectable.Multicast_Collected
// 0x0008 (0x0008 - 0x0000)
struct Collectable_Multicast_Collected final
{
public:
	class ADBDPlayer*                             collector;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_Multicast_Collected) == 0x000008, "Wrong alignment on Collectable_Multicast_Collected");
static_assert(sizeof(Collectable_Multicast_Collected) == 0x000008, "Wrong size on Collectable_Multicast_Collected");
static_assert(offsetof(Collectable_Multicast_Collected, collector) == 0x000000, "Member 'Collectable_Multicast_Collected::collector' has a wrong offset!");

// Function DeadByDaylight.Collectable.Multicast_Dropped
// 0x0020 (0x0020 - 0x0000)
struct Collectable_Multicast_Dropped final
{
public:
	class ADBDPlayer*                             droppedBy;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rotation;                                          // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_Multicast_Dropped) == 0x000008, "Wrong alignment on Collectable_Multicast_Dropped");
static_assert(sizeof(Collectable_Multicast_Dropped) == 0x000020, "Wrong size on Collectable_Multicast_Dropped");
static_assert(offsetof(Collectable_Multicast_Dropped, droppedBy) == 0x000000, "Member 'Collectable_Multicast_Dropped::droppedBy' has a wrong offset!");
static_assert(offsetof(Collectable_Multicast_Dropped, location) == 0x000008, "Member 'Collectable_Multicast_Dropped::location' has a wrong offset!");
static_assert(offsetof(Collectable_Multicast_Dropped, rotation) == 0x000014, "Member 'Collectable_Multicast_Dropped::rotation' has a wrong offset!");

// Function DeadByDaylight.Collectable.Multicast_RemoveItemAddon
// 0x0008 (0x0008 - 0x0000)
struct Collectable_Multicast_RemoveItemAddon final
{
public:
	class UItemAddon*                             addon;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_Multicast_RemoveItemAddon) == 0x000008, "Wrong alignment on Collectable_Multicast_RemoveItemAddon");
static_assert(sizeof(Collectable_Multicast_RemoveItemAddon) == 0x000008, "Wrong size on Collectable_Multicast_RemoveItemAddon");
static_assert(offsetof(Collectable_Multicast_RemoveItemAddon, addon) == 0x000000, "Member 'Collectable_Multicast_RemoveItemAddon::addon' has a wrong offset!");

// Function DeadByDaylight.Collectable.Multicast_UseReleased
// 0x0008 (0x0008 - 0x0000)
struct Collectable_Multicast_UseReleased final
{
public:
	class ADBDPlayer*                             collector;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_Multicast_UseReleased) == 0x000008, "Wrong alignment on Collectable_Multicast_UseReleased");
static_assert(sizeof(Collectable_Multicast_UseReleased) == 0x000008, "Wrong size on Collectable_Multicast_UseReleased");
static_assert(offsetof(Collectable_Multicast_UseReleased, collector) == 0x000000, "Member 'Collectable_Multicast_UseReleased::collector' has a wrong offset!");

// Function DeadByDaylight.Collectable.OnAddonsAdded
// 0x0010 (0x0010 - 0x0000)
struct Collectable_OnAddonsAdded final
{
public:
	TArray<class UItemAddon*>                     addons;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnAddonsAdded) == 0x000008, "Wrong alignment on Collectable_OnAddonsAdded");
static_assert(sizeof(Collectable_OnAddonsAdded) == 0x000010, "Wrong size on Collectable_OnAddonsAdded");
static_assert(offsetof(Collectable_OnAddonsAdded, addons) == 0x000000, "Member 'Collectable_OnAddonsAdded::addons' has a wrong offset!");

// Function DeadByDaylight.Collectable.OnAddonsRemoved
// 0x0010 (0x0010 - 0x0000)
struct Collectable_OnAddonsRemoved final
{
public:
	TArray<class UItemAddon*>                     addons;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnAddonsRemoved) == 0x000008, "Wrong alignment on Collectable_OnAddonsRemoved");
static_assert(sizeof(Collectable_OnAddonsRemoved) == 0x000010, "Wrong size on Collectable_OnAddonsRemoved");
static_assert(offsetof(Collectable_OnAddonsRemoved, addons) == 0x000000, "Member 'Collectable_OnAddonsRemoved::addons' has a wrong offset!");

// Function DeadByDaylight.Collectable.OnCollectorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct Collectable_OnCollectorEndPlay final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                endPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Collectable_OnCollectorEndPlay) == 0x000008, "Wrong alignment on Collectable_OnCollectorEndPlay");
static_assert(sizeof(Collectable_OnCollectorEndPlay) == 0x000010, "Wrong size on Collectable_OnCollectorEndPlay");
static_assert(offsetof(Collectable_OnCollectorEndPlay, actor) == 0x000000, "Member 'Collectable_OnCollectorEndPlay::actor' has a wrong offset!");
static_assert(offsetof(Collectable_OnCollectorEndPlay, endPlayReason) == 0x000008, "Member 'Collectable_OnCollectorEndPlay::endPlayReason' has a wrong offset!");

// Function DeadByDaylight.Collectable.OnCollectorSet
// 0x0008 (0x0008 - 0x0000)
struct Collectable_OnCollectorSet final
{
public:
	class ADBDPlayer*                             collector;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnCollectorSet) == 0x000008, "Wrong alignment on Collectable_OnCollectorSet");
static_assert(sizeof(Collectable_OnCollectorSet) == 0x000008, "Wrong size on Collectable_OnCollectorSet");
static_assert(offsetof(Collectable_OnCollectorSet, collector) == 0x000000, "Member 'Collectable_OnCollectorSet::collector' has a wrong offset!");

// Function DeadByDaylight.Collectable.OnDropped
// 0x0008 (0x0008 - 0x0000)
struct Collectable_OnDropped final
{
public:
	class ADBDPlayer*                             droppingPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnDropped) == 0x000008, "Wrong alignment on Collectable_OnDropped");
static_assert(sizeof(Collectable_OnDropped) == 0x000008, "Wrong size on Collectable_OnDropped");
static_assert(offsetof(Collectable_OnDropped, droppingPlayer) == 0x000000, "Member 'Collectable_OnDropped::droppingPlayer' has a wrong offset!");

// Function DeadByDaylight.Collectable.OnPostItemAddonsCreation
// 0x0008 (0x0008 - 0x0000)
struct Collectable_OnPostItemAddonsCreation final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnPostItemAddonsCreation) == 0x000008, "Wrong alignment on Collectable_OnPostItemAddonsCreation");
static_assert(sizeof(Collectable_OnPostItemAddonsCreation) == 0x000008, "Wrong size on Collectable_OnPostItemAddonsCreation");
static_assert(offsetof(Collectable_OnPostItemAddonsCreation, player) == 0x000000, "Member 'Collectable_OnPostItemAddonsCreation::player' has a wrong offset!");

// Function DeadByDaylight.Collectable.OnRep_Collector
// 0x0008 (0x0008 - 0x0000)
struct Collectable_OnRep_Collector final
{
public:
	class ADBDPlayer*                             oldCollector;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnRep_Collector) == 0x000008, "Wrong alignment on Collectable_OnRep_Collector");
static_assert(sizeof(Collectable_OnRep_Collector) == 0x000008, "Wrong size on Collectable_OnRep_Collector");
static_assert(offsetof(Collectable_OnRep_Collector, oldCollector) == 0x000000, "Member 'Collectable_OnRep_Collector::oldCollector' has a wrong offset!");

// Function DeadByDaylight.Collectable.OnUseReleased
// 0x0008 (0x0008 - 0x0000)
struct Collectable_OnUseReleased final
{
public:
	class ADBDPlayer*                             collector;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnUseReleased) == 0x000008, "Wrong alignment on Collectable_OnUseReleased");
static_assert(sizeof(Collectable_OnUseReleased) == 0x000008, "Wrong size on Collectable_OnUseReleased");
static_assert(offsetof(Collectable_OnUseReleased, collector) == 0x000000, "Member 'Collectable_OnUseReleased::collector' has a wrong offset!");

// Function DeadByDaylight.Collectable.SetCount
// 0x0004 (0x0004 - 0x0000)
struct Collectable_SetCount final
{
public:
	int32                                         count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_SetCount) == 0x000004, "Wrong alignment on Collectable_SetCount");
static_assert(sizeof(Collectable_SetCount) == 0x000004, "Wrong size on Collectable_SetCount");
static_assert(offsetof(Collectable_SetCount, count) == 0x000000, "Member 'Collectable_SetCount::count' has a wrong offset!");

// Function DeadByDaylight.Collectable.SetDisplayedInputType
// 0x0001 (0x0001 - 0x0000)
struct Collectable_SetDisplayedInputType final
{
public:
	EInputInteractionType                         displayedInputType;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_SetDisplayedInputType) == 0x000001, "Wrong alignment on Collectable_SetDisplayedInputType");
static_assert(sizeof(Collectable_SetDisplayedInputType) == 0x000001, "Wrong size on Collectable_SetDisplayedInputType");
static_assert(offsetof(Collectable_SetDisplayedInputType, displayedInputType) == 0x000000, "Member 'Collectable_SetDisplayedInputType::displayedInputType' has a wrong offset!");

// Function DeadByDaylight.Collectable.SetIsKeyPromptForceDisabled
// 0x0001 (0x0001 - 0x0000)
struct Collectable_SetIsKeyPromptForceDisabled final
{
public:
	bool                                          isKeyPromptForceDisabled;                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_SetIsKeyPromptForceDisabled) == 0x000001, "Wrong alignment on Collectable_SetIsKeyPromptForceDisabled");
static_assert(sizeof(Collectable_SetIsKeyPromptForceDisabled) == 0x000001, "Wrong size on Collectable_SetIsKeyPromptForceDisabled");
static_assert(offsetof(Collectable_SetIsKeyPromptForceDisabled, isKeyPromptForceDisabled) == 0x000000, "Member 'Collectable_SetIsKeyPromptForceDisabled::isKeyPromptForceDisabled' has a wrong offset!");

// Function DeadByDaylight.Collectable.SetItemInteractor
// 0x0008 (0x0008 - 0x0000)
struct Collectable_SetItemInteractor final
{
public:
	class UInteractor*                            interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_SetItemInteractor) == 0x000008, "Wrong alignment on Collectable_SetItemInteractor");
static_assert(sizeof(Collectable_SetItemInteractor) == 0x000008, "Wrong size on Collectable_SetItemInteractor");
static_assert(offsetof(Collectable_SetItemInteractor, interactor) == 0x000000, "Member 'Collectable_SetItemInteractor::interactor' has a wrong offset!");

// Function DeadByDaylight.Collectable.SetVisibilityEvent
// 0x0001 (0x0001 - 0x0000)
struct Collectable_SetVisibilityEvent final
{
public:
	bool                                          visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_SetVisibilityEvent) == 0x000001, "Wrong alignment on Collectable_SetVisibilityEvent");
static_assert(sizeof(Collectable_SetVisibilityEvent) == 0x000001, "Wrong size on Collectable_SetVisibilityEvent");
static_assert(offsetof(Collectable_SetVisibilityEvent, visibility) == 0x000000, "Member 'Collectable_SetVisibilityEvent::visibility' has a wrong offset!");

// Function DeadByDaylight.Collectable.CanBeCollected
// 0x0010 (0x0010 - 0x0000)
struct Collectable_CanBeCollected final
{
public:
	const class ADBDPlayer*                       collector;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Collectable_CanBeCollected) == 0x000008, "Wrong alignment on Collectable_CanBeCollected");
static_assert(sizeof(Collectable_CanBeCollected) == 0x000010, "Wrong size on Collectable_CanBeCollected");
static_assert(offsetof(Collectable_CanBeCollected, collector) == 0x000000, "Member 'Collectable_CanBeCollected::collector' has a wrong offset!");
static_assert(offsetof(Collectable_CanBeCollected, ReturnValue) == 0x000008, "Member 'Collectable_CanBeCollected::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.CanBeDropped
// 0x0010 (0x0010 - 0x0000)
struct Collectable_CanBeDropped final
{
public:
	const class ADBDPlayer*                       dropper;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Collectable_CanBeDropped) == 0x000008, "Wrong alignment on Collectable_CanBeDropped");
static_assert(sizeof(Collectable_CanBeDropped) == 0x000010, "Wrong size on Collectable_CanBeDropped");
static_assert(offsetof(Collectable_CanBeDropped, dropper) == 0x000000, "Member 'Collectable_CanBeDropped::dropper' has a wrong offset!");
static_assert(offsetof(Collectable_CanBeDropped, ReturnValue) == 0x000008, "Member 'Collectable_CanBeDropped::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.CanUse
// 0x0010 (0x0010 - 0x0000)
struct Collectable_CanUse final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Collectable_CanUse) == 0x000008, "Wrong alignment on Collectable_CanUse");
static_assert(sizeof(Collectable_CanUse) == 0x000010, "Wrong size on Collectable_CanUse");
static_assert(offsetof(Collectable_CanUse, player) == 0x000000, "Member 'Collectable_CanUse::player' has a wrong offset!");
static_assert(offsetof(Collectable_CanUse, ReturnValue) == 0x000008, "Member 'Collectable_CanUse::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetCollector
// 0x0008 (0x0008 - 0x0000)
struct Collectable_GetCollector final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetCollector) == 0x000008, "Wrong alignment on Collectable_GetCollector");
static_assert(sizeof(Collectable_GetCollector) == 0x000008, "Wrong size on Collectable_GetCollector");
static_assert(offsetof(Collectable_GetCollector, ReturnValue) == 0x000000, "Member 'Collectable_GetCollector::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetCount
// 0x0004 (0x0004 - 0x0000)
struct Collectable_GetCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetCount) == 0x000004, "Wrong alignment on Collectable_GetCount");
static_assert(sizeof(Collectable_GetCount) == 0x000004, "Wrong size on Collectable_GetCount");
static_assert(offsetof(Collectable_GetCount, ReturnValue) == 0x000000, "Member 'Collectable_GetCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetDisplayedInputType
// 0x0001 (0x0001 - 0x0000)
struct Collectable_GetDisplayedInputType final
{
public:
	EInputInteractionType                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetDisplayedInputType) == 0x000001, "Wrong alignment on Collectable_GetDisplayedInputType");
static_assert(sizeof(Collectable_GetDisplayedInputType) == 0x000001, "Wrong size on Collectable_GetDisplayedInputType");
static_assert(offsetof(Collectable_GetDisplayedInputType, ReturnValue) == 0x000000, "Member 'Collectable_GetDisplayedInputType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetIconFilePath
// 0x0010 (0x0010 - 0x0000)
struct Collectable_GetIconFilePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetIconFilePath) == 0x000008, "Wrong alignment on Collectable_GetIconFilePath");
static_assert(sizeof(Collectable_GetIconFilePath) == 0x000010, "Wrong size on Collectable_GetIconFilePath");
static_assert(offsetof(Collectable_GetIconFilePath, ReturnValue) == 0x000000, "Member 'Collectable_GetIconFilePath::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetItemIconIndex
// 0x0001 (0x0001 - 0x0000)
struct Collectable_GetItemIconIndex final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetItemIconIndex) == 0x000001, "Wrong alignment on Collectable_GetItemIconIndex");
static_assert(sizeof(Collectable_GetItemIconIndex) == 0x000001, "Wrong size on Collectable_GetItemIconIndex");
static_assert(offsetof(Collectable_GetItemIconIndex, ReturnValue) == 0x000000, "Member 'Collectable_GetItemIconIndex::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetItemInteractor
// 0x0008 (0x0008 - 0x0000)
struct Collectable_GetItemInteractor final
{
public:
	class UInteractor*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetItemInteractor) == 0x000008, "Wrong alignment on Collectable_GetItemInteractor");
static_assert(sizeof(Collectable_GetItemInteractor) == 0x000008, "Wrong size on Collectable_GetItemInteractor");
static_assert(offsetof(Collectable_GetItemInteractor, ReturnValue) == 0x000000, "Member 'Collectable_GetItemInteractor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetModifierMax
// 0x0014 (0x0014 - 0x0000)
struct Collectable_GetModifierMax final
{
public:
	struct FGameplayTag                           modifierType;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         defaultValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetModifierMax) == 0x000004, "Wrong alignment on Collectable_GetModifierMax");
static_assert(sizeof(Collectable_GetModifierMax) == 0x000014, "Wrong size on Collectable_GetModifierMax");
static_assert(offsetof(Collectable_GetModifierMax, modifierType) == 0x000000, "Member 'Collectable_GetModifierMax::modifierType' has a wrong offset!");
static_assert(offsetof(Collectable_GetModifierMax, defaultValue) == 0x00000C, "Member 'Collectable_GetModifierMax::defaultValue' has a wrong offset!");
static_assert(offsetof(Collectable_GetModifierMax, ReturnValue) == 0x000010, "Member 'Collectable_GetModifierMax::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetModifierSum
// 0x0014 (0x0014 - 0x0000)
struct Collectable_GetModifierSum final
{
public:
	struct FGameplayTag                           modifierType;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         defaultValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetModifierSum) == 0x000004, "Wrong alignment on Collectable_GetModifierSum");
static_assert(sizeof(Collectable_GetModifierSum) == 0x000014, "Wrong size on Collectable_GetModifierSum");
static_assert(offsetof(Collectable_GetModifierSum, modifierType) == 0x000000, "Member 'Collectable_GetModifierSum::modifierType' has a wrong offset!");
static_assert(offsetof(Collectable_GetModifierSum, defaultValue) == 0x00000C, "Member 'Collectable_GetModifierSum::defaultValue' has a wrong offset!");
static_assert(offsetof(Collectable_GetModifierSum, ReturnValue) == 0x000010, "Member 'Collectable_GetModifierSum::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetUsePercentLeft
// 0x0004 (0x0004 - 0x0000)
struct Collectable_GetUsePercentLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetUsePercentLeft) == 0x000004, "Wrong alignment on Collectable_GetUsePercentLeft");
static_assert(sizeof(Collectable_GetUsePercentLeft) == 0x000004, "Wrong size on Collectable_GetUsePercentLeft");
static_assert(offsetof(Collectable_GetUsePercentLeft, ReturnValue) == 0x000000, "Member 'Collectable_GetUsePercentLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.HasGameplayModifierFlag
// 0x0010 (0x0010 - 0x0000)
struct Collectable_HasGameplayModifierFlag final
{
public:
	struct FGameplayTag                           modifierFlag;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Collectable_HasGameplayModifierFlag) == 0x000004, "Wrong alignment on Collectable_HasGameplayModifierFlag");
static_assert(sizeof(Collectable_HasGameplayModifierFlag) == 0x000010, "Wrong size on Collectable_HasGameplayModifierFlag");
static_assert(offsetof(Collectable_HasGameplayModifierFlag, modifierFlag) == 0x000000, "Member 'Collectable_HasGameplayModifierFlag::modifierFlag' has a wrong offset!");
static_assert(offsetof(Collectable_HasGameplayModifierFlag, ReturnValue) == 0x00000C, "Member 'Collectable_HasGameplayModifierFlag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsCollected
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsCollected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsCollected) == 0x000001, "Wrong alignment on Collectable_IsCollected");
static_assert(sizeof(Collectable_IsCollected) == 0x000001, "Wrong size on Collectable_IsCollected");
static_assert(offsetof(Collectable_IsCollected, ReturnValue) == 0x000000, "Member 'Collectable_IsCollected::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsCountDisplayForced
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsCountDisplayForced final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsCountDisplayForced) == 0x000001, "Wrong alignment on Collectable_IsCountDisplayForced");
static_assert(sizeof(Collectable_IsCountDisplayForced) == 0x000001, "Wrong size on Collectable_IsCountDisplayForced");
static_assert(offsetof(Collectable_IsCountDisplayForced, ReturnValue) == 0x000000, "Member 'Collectable_IsCountDisplayForced::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsEquipped) == 0x000001, "Wrong alignment on Collectable_IsEquipped");
static_assert(sizeof(Collectable_IsEquipped) == 0x000001, "Wrong size on Collectable_IsEquipped");
static_assert(offsetof(Collectable_IsEquipped, ReturnValue) == 0x000000, "Member 'Collectable_IsEquipped::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsInSearchable
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsInSearchable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsInSearchable) == 0x000001, "Wrong alignment on Collectable_IsInSearchable");
static_assert(sizeof(Collectable_IsInSearchable) == 0x000001, "Wrong size on Collectable_IsInSearchable");
static_assert(offsetof(Collectable_IsInSearchable, ReturnValue) == 0x000000, "Member 'Collectable_IsInSearchable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsKeyPromptForceDisabled
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsKeyPromptForceDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsKeyPromptForceDisabled) == 0x000001, "Wrong alignment on Collectable_IsKeyPromptForceDisabled");
static_assert(sizeof(Collectable_IsKeyPromptForceDisabled) == 0x000001, "Wrong size on Collectable_IsKeyPromptForceDisabled");
static_assert(offsetof(Collectable_IsKeyPromptForceDisabled, ReturnValue) == 0x000000, "Member 'Collectable_IsKeyPromptForceDisabled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsLocallyControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsLocallyControlled) == 0x000001, "Wrong alignment on Collectable_IsLocallyControlled");
static_assert(sizeof(Collectable_IsLocallyControlled) == 0x000001, "Wrong size on Collectable_IsLocallyControlled");
static_assert(offsetof(Collectable_IsLocallyControlled, ReturnValue) == 0x000000, "Member 'Collectable_IsLocallyControlled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsOnGround
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsOnGround final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsOnGround) == 0x000001, "Wrong alignment on Collectable_IsOnGround");
static_assert(sizeof(Collectable_IsOnGround) == 0x000001, "Wrong size on Collectable_IsOnGround");
static_assert(offsetof(Collectable_IsOnGround, ReturnValue) == 0x000000, "Member 'Collectable_IsOnGround::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsPickable
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsPickable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsPickable) == 0x000001, "Wrong alignment on Collectable_IsPickable");
static_assert(sizeof(Collectable_IsPickable) == 0x000001, "Wrong size on Collectable_IsPickable");
static_assert(offsetof(Collectable_IsPickable, ReturnValue) == 0x000000, "Member 'Collectable_IsPickable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsRechargeable
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsRechargeable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsRechargeable) == 0x000001, "Wrong alignment on Collectable_IsRechargeable");
static_assert(sizeof(Collectable_IsRechargeable) == 0x000001, "Wrong size on Collectable_IsRechargeable");
static_assert(offsetof(Collectable_IsRechargeable, ReturnValue) == 0x000000, "Member 'Collectable_IsRechargeable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsStored
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsStored final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsStored) == 0x000001, "Wrong alignment on Collectable_IsStored");
static_assert(sizeof(Collectable_IsStored) == 0x000001, "Wrong size on Collectable_IsStored");
static_assert(offsetof(Collectable_IsStored, ReturnValue) == 0x000000, "Member 'Collectable_IsStored::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaNavigationScreen.ButtonClickEvent
// 0x0001 (0x0001 - 0x0000)
struct UMGAtlantaNavigationScreen_ButtonClickEvent final
{
public:
	ENavigationScreenButton                       buttonid;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaNavigationScreen_ButtonClickEvent) == 0x000001, "Wrong alignment on UMGAtlantaNavigationScreen_ButtonClickEvent");
static_assert(sizeof(UMGAtlantaNavigationScreen_ButtonClickEvent) == 0x000001, "Wrong size on UMGAtlantaNavigationScreen_ButtonClickEvent");
static_assert(offsetof(UMGAtlantaNavigationScreen_ButtonClickEvent, buttonid) == 0x000000, "Member 'UMGAtlantaNavigationScreen_ButtonClickEvent::buttonid' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaNavigationScreen.GetPartyMembersData
// 0x0018 (0x0018 - 0x0000)
struct UMGAtlantaNavigationScreen_GetPartyMembersData final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPartyMemberUIData>             ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaNavigationScreen_GetPartyMembersData) == 0x000008, "Wrong alignment on UMGAtlantaNavigationScreen_GetPartyMembersData");
static_assert(sizeof(UMGAtlantaNavigationScreen_GetPartyMembersData) == 0x000018, "Wrong size on UMGAtlantaNavigationScreen_GetPartyMembersData");
static_assert(offsetof(UMGAtlantaNavigationScreen_GetPartyMembersData, index) == 0x000000, "Member 'UMGAtlantaNavigationScreen_GetPartyMembersData::index' has a wrong offset!");
static_assert(offsetof(UMGAtlantaNavigationScreen_GetPartyMembersData, ReturnValue) == 0x000008, "Member 'UMGAtlantaNavigationScreen_GetPartyMembersData::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningCharacter
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningCharacter final
{
public:
	const class UActorComponent*                  actorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningCharacter) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningCharacter");
static_assert(sizeof(ActorComponentExt_GetOwningCharacter) == 0x000018, "Wrong size on ActorComponentExt_GetOwningCharacter");
static_assert(offsetof(ActorComponentExt_GetOwningCharacter, actorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningCharacter::actorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningCharacter, recursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningCharacter::recursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningCharacter, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningCharacter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningCharacterChecked
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningCharacterChecked final
{
public:
	const class UActorComponent*                  actorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningCharacterChecked) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningCharacterChecked");
static_assert(sizeof(ActorComponentExt_GetOwningCharacterChecked) == 0x000018, "Wrong size on ActorComponentExt_GetOwningCharacterChecked");
static_assert(offsetof(ActorComponentExt_GetOwningCharacterChecked, actorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningCharacterChecked::actorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningCharacterChecked, recursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningCharacterChecked::recursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningCharacterChecked, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningCharacterChecked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningKiller
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningKiller final
{
public:
	const class UActorComponent*                  actorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningKiller) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningKiller");
static_assert(sizeof(ActorComponentExt_GetOwningKiller) == 0x000018, "Wrong size on ActorComponentExt_GetOwningKiller");
static_assert(offsetof(ActorComponentExt_GetOwningKiller, actorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningKiller::actorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningKiller, recursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningKiller::recursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningKiller, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningPawn
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningPawn final
{
public:
	const class UActorComponent*                  actorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningPawn) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningPawn");
static_assert(sizeof(ActorComponentExt_GetOwningPawn) == 0x000018, "Wrong size on ActorComponentExt_GetOwningPawn");
static_assert(offsetof(ActorComponentExt_GetOwningPawn, actorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningPawn::actorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPawn, recursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningPawn::recursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPawn, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningPawn::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningPawnChecked
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningPawnChecked final
{
public:
	const class UActorComponent*                  actorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningPawnChecked) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningPawnChecked");
static_assert(sizeof(ActorComponentExt_GetOwningPawnChecked) == 0x000018, "Wrong size on ActorComponentExt_GetOwningPawnChecked");
static_assert(offsetof(ActorComponentExt_GetOwningPawnChecked, actorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningPawnChecked::actorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPawnChecked, recursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningPawnChecked::recursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPawnChecked, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningPawnChecked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningPlayer
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningPlayer final
{
public:
	const class UActorComponent*                  actorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningPlayer) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningPlayer");
static_assert(sizeof(ActorComponentExt_GetOwningPlayer) == 0x000018, "Wrong size on ActorComponentExt_GetOwningPlayer");
static_assert(offsetof(ActorComponentExt_GetOwningPlayer, actorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningPlayer::actorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPlayer, recursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningPlayer::recursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPlayer, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningPlayerChecked
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningPlayerChecked final
{
public:
	const class UActorComponent*                  actorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningPlayerChecked) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningPlayerChecked");
static_assert(sizeof(ActorComponentExt_GetOwningPlayerChecked) == 0x000018, "Wrong size on ActorComponentExt_GetOwningPlayerChecked");
static_assert(offsetof(ActorComponentExt_GetOwningPlayerChecked, actorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningPlayerChecked::actorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPlayerChecked, recursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningPlayerChecked::recursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPlayerChecked, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningPlayerChecked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningPlayerInHierarchy
// 0x0010 (0x0010 - 0x0000)
struct ActorComponentExt_GetOwningPlayerInHierarchy final
{
public:
	const class UActorComponent*                  actorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningPlayerInHierarchy) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningPlayerInHierarchy");
static_assert(sizeof(ActorComponentExt_GetOwningPlayerInHierarchy) == 0x000010, "Wrong size on ActorComponentExt_GetOwningPlayerInHierarchy");
static_assert(offsetof(ActorComponentExt_GetOwningPlayerInHierarchy, actorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningPlayerInHierarchy::actorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPlayerInHierarchy, ReturnValue) == 0x000008, "Member 'ActorComponentExt_GetOwningPlayerInHierarchy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningSurvivor
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningSurvivor final
{
public:
	const class UActorComponent*                  actorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACamperPlayer*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningSurvivor) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningSurvivor");
static_assert(sizeof(ActorComponentExt_GetOwningSurvivor) == 0x000018, "Wrong size on ActorComponentExt_GetOwningSurvivor");
static_assert(offsetof(ActorComponentExt_GetOwningSurvivor, actorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningSurvivor::actorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningSurvivor, recursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningSurvivor::recursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningSurvivor, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningSurvivorChecked
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningSurvivorChecked final
{
public:
	const class UActorComponent*                  actorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACamperPlayer*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningSurvivorChecked) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningSurvivorChecked");
static_assert(sizeof(ActorComponentExt_GetOwningSurvivorChecked) == 0x000018, "Wrong size on ActorComponentExt_GetOwningSurvivorChecked");
static_assert(offsetof(ActorComponentExt_GetOwningSurvivorChecked, actorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningSurvivorChecked::actorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningSurvivorChecked, recursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningSurvivorChecked::recursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningSurvivorChecked, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningSurvivorChecked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetValidatedOwner
// 0x0010 (0x0010 - 0x0000)
struct ActorComponentExt_GetValidatedOwner final
{
public:
	const class UActorComponent*                  actorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetValidatedOwner) == 0x000008, "Wrong alignment on ActorComponentExt_GetValidatedOwner");
static_assert(sizeof(ActorComponentExt_GetValidatedOwner) == 0x000010, "Wrong size on ActorComponentExt_GetValidatedOwner");
static_assert(offsetof(ActorComponentExt_GetValidatedOwner, actorComponent) == 0x000000, "Member 'ActorComponentExt_GetValidatedOwner::actorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetValidatedOwner, ReturnValue) == 0x000008, "Member 'ActorComponentExt_GetValidatedOwner::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.HasAuthority
// 0x0010 (0x0010 - 0x0000)
struct ActorComponentExt_HasAuthority final
{
public:
	const class UActorComponent*                  actorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorComponentExt_HasAuthority) == 0x000008, "Wrong alignment on ActorComponentExt_HasAuthority");
static_assert(sizeof(ActorComponentExt_HasAuthority) == 0x000010, "Wrong size on ActorComponentExt_HasAuthority");
static_assert(offsetof(ActorComponentExt_HasAuthority, actorComponent) == 0x000000, "Member 'ActorComponentExt_HasAuthority::actorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_HasAuthority, ReturnValue) == 0x000008, "Member 'ActorComponentExt_HasAuthority::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.IsLocallyControlled
// 0x0010 (0x0010 - 0x0000)
struct ActorComponentExt_IsLocallyControlled final
{
public:
	const class UActorComponent*                  actorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorComponentExt_IsLocallyControlled) == 0x000008, "Wrong alignment on ActorComponentExt_IsLocallyControlled");
static_assert(sizeof(ActorComponentExt_IsLocallyControlled) == 0x000010, "Wrong size on ActorComponentExt_IsLocallyControlled");
static_assert(offsetof(ActorComponentExt_IsLocallyControlled, actorComponent) == 0x000000, "Member 'ActorComponentExt_IsLocallyControlled::actorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_IsLocallyControlled, recursiveSearch) == 0x000008, "Member 'ActorComponentExt_IsLocallyControlled::recursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_IsLocallyControlled, ReturnValue) == 0x000009, "Member 'ActorComponentExt_IsLocallyControlled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.IsLocallyObserved
// 0x0010 (0x0010 - 0x0000)
struct ActorComponentExt_IsLocallyObserved final
{
public:
	const class UActorComponent*                  actorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          recursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorComponentExt_IsLocallyObserved) == 0x000008, "Wrong alignment on ActorComponentExt_IsLocallyObserved");
static_assert(sizeof(ActorComponentExt_IsLocallyObserved) == 0x000010, "Wrong size on ActorComponentExt_IsLocallyObserved");
static_assert(offsetof(ActorComponentExt_IsLocallyObserved, actorComponent) == 0x000000, "Member 'ActorComponentExt_IsLocallyObserved::actorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_IsLocallyObserved, recursiveSearch) == 0x000008, "Member 'ActorComponentExt_IsLocallyObserved::recursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_IsLocallyObserved, ReturnValue) == 0x000009, "Member 'ActorComponentExt_IsLocallyObserved::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Client_ReceiveAttackSubstateRequestResult
// 0x0003 (0x0003 - 0x0000)
struct DBDAttack_Client_ReceiveAttackSubstateRequestResult final
{
public:
	struct FAttackSubstateRequestResult           result;                                            // 0x0000(0x0003)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttack_Client_ReceiveAttackSubstateRequestResult) == 0x000001, "Wrong alignment on DBDAttack_Client_ReceiveAttackSubstateRequestResult");
static_assert(sizeof(DBDAttack_Client_ReceiveAttackSubstateRequestResult) == 0x000003, "Wrong size on DBDAttack_Client_ReceiveAttackSubstateRequestResult");
static_assert(offsetof(DBDAttack_Client_ReceiveAttackSubstateRequestResult, result) == 0x000000, "Member 'DBDAttack_Client_ReceiveAttackSubstateRequestResult::result' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Client_ReceiveHitResult
// 0x0010 (0x0010 - 0x0000)
struct DBDAttack_Client_ReceiveHitResult final
{
public:
	class ADBDPlayer*                             target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isValid;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActionPredictionKey                   predictionKey;                                     // 0x000C(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttack_Client_ReceiveHitResult) == 0x000008, "Wrong alignment on DBDAttack_Client_ReceiveHitResult");
static_assert(sizeof(DBDAttack_Client_ReceiveHitResult) == 0x000010, "Wrong size on DBDAttack_Client_ReceiveHitResult");
static_assert(offsetof(DBDAttack_Client_ReceiveHitResult, target) == 0x000000, "Member 'DBDAttack_Client_ReceiveHitResult::target' has a wrong offset!");
static_assert(offsetof(DBDAttack_Client_ReceiveHitResult, isValid) == 0x000008, "Member 'DBDAttack_Client_ReceiveHitResult::isValid' has a wrong offset!");
static_assert(offsetof(DBDAttack_Client_ReceiveHitResult, predictionKey) == 0x00000C, "Member 'DBDAttack_Client_ReceiveHitResult::predictionKey' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Local_OnMovementChanged
// 0x0010 (0x0010 - 0x0000)
struct DBDAttack_Local_OnMovementChanged final
{
public:
	class ACharacter*                             character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 prevMovementMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         previousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAttack_Local_OnMovementChanged) == 0x000008, "Wrong alignment on DBDAttack_Local_OnMovementChanged");
static_assert(sizeof(DBDAttack_Local_OnMovementChanged) == 0x000010, "Wrong size on DBDAttack_Local_OnMovementChanged");
static_assert(offsetof(DBDAttack_Local_OnMovementChanged, character) == 0x000000, "Member 'DBDAttack_Local_OnMovementChanged::character' has a wrong offset!");
static_assert(offsetof(DBDAttack_Local_OnMovementChanged, prevMovementMode) == 0x000008, "Member 'DBDAttack_Local_OnMovementChanged::prevMovementMode' has a wrong offset!");
static_assert(offsetof(DBDAttack_Local_OnMovementChanged, previousCustomMode) == 0x000009, "Member 'DBDAttack_Local_OnMovementChanged::previousCustomMode' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Multicast_HitAttackableComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDAttack_Multicast_HitAttackableComponent final
{
public:
	class UAttackableComponent*                   attackableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttack_Multicast_HitAttackableComponent) == 0x000008, "Wrong alignment on DBDAttack_Multicast_HitAttackableComponent");
static_assert(sizeof(DBDAttack_Multicast_HitAttackableComponent) == 0x000008, "Wrong size on DBDAttack_Multicast_HitAttackableComponent");
static_assert(offsetof(DBDAttack_Multicast_HitAttackableComponent, attackableComponent) == 0x000000, "Member 'DBDAttack_Multicast_HitAttackableComponent::attackableComponent' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Multicast_HitTarget
// 0x0010 (0x0010 - 0x0000)
struct DBDAttack_Multicast_HitTarget final
{
public:
	class ADBDPlayer*                             target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hitCosmeticOnly;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAttack_Multicast_HitTarget) == 0x000008, "Wrong alignment on DBDAttack_Multicast_HitTarget");
static_assert(sizeof(DBDAttack_Multicast_HitTarget) == 0x000010, "Wrong size on DBDAttack_Multicast_HitTarget");
static_assert(offsetof(DBDAttack_Multicast_HitTarget, target) == 0x000000, "Member 'DBDAttack_Multicast_HitTarget::target' has a wrong offset!");
static_assert(offsetof(DBDAttack_Multicast_HitTarget, hitCosmeticOnly) == 0x000008, "Member 'DBDAttack_Multicast_HitTarget::hitCosmeticOnly' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Multicast_RequestStateChange
// 0x0001 (0x0001 - 0x0000)
struct DBDAttack_Multicast_RequestStateChange final
{
public:
	EAttackSubstate                               state;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttack_Multicast_RequestStateChange) == 0x000001, "Wrong alignment on DBDAttack_Multicast_RequestStateChange");
static_assert(sizeof(DBDAttack_Multicast_RequestStateChange) == 0x000001, "Wrong size on DBDAttack_Multicast_RequestStateChange");
static_assert(offsetof(DBDAttack_Multicast_RequestStateChange, state) == 0x000000, "Member 'DBDAttack_Multicast_RequestStateChange::state' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Multicast_SendPostHitTargetData
// 0x0018 (0x0018 - 0x0000)
struct DBDAttack_Multicast_SendPostHitTargetData final
{
public:
	class ADBDPlayer*                             owningKiller;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPostAttackData                        attackData;                                        // 0x0010(0x0007)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAttack_Multicast_SendPostHitTargetData) == 0x000008, "Wrong alignment on DBDAttack_Multicast_SendPostHitTargetData");
static_assert(sizeof(DBDAttack_Multicast_SendPostHitTargetData) == 0x000018, "Wrong size on DBDAttack_Multicast_SendPostHitTargetData");
static_assert(offsetof(DBDAttack_Multicast_SendPostHitTargetData, owningKiller) == 0x000000, "Member 'DBDAttack_Multicast_SendPostHitTargetData::owningKiller' has a wrong offset!");
static_assert(offsetof(DBDAttack_Multicast_SendPostHitTargetData, target) == 0x000008, "Member 'DBDAttack_Multicast_SendPostHitTargetData::target' has a wrong offset!");
static_assert(offsetof(DBDAttack_Multicast_SendPostHitTargetData, attackData) == 0x000010, "Member 'DBDAttack_Multicast_SendPostHitTargetData::attackData' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Server_HitAttackableComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDAttack_Server_HitAttackableComponent final
{
public:
	class UAttackableComponent*                   attackableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttack_Server_HitAttackableComponent) == 0x000008, "Wrong alignment on DBDAttack_Server_HitAttackableComponent");
static_assert(sizeof(DBDAttack_Server_HitAttackableComponent) == 0x000008, "Wrong size on DBDAttack_Server_HitAttackableComponent");
static_assert(offsetof(DBDAttack_Server_HitAttackableComponent, attackableComponent) == 0x000000, "Member 'DBDAttack_Server_HitAttackableComponent::attackableComponent' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Server_HitTarget
// 0x0010 (0x0010 - 0x0000)
struct DBDAttack_Server_HitTarget final
{
public:
	class ADBDPlayer*                             target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         targetLocationTimestamp;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionPredictionKey                   predictionKey;                                     // 0x000C(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttack_Server_HitTarget) == 0x000008, "Wrong alignment on DBDAttack_Server_HitTarget");
static_assert(sizeof(DBDAttack_Server_HitTarget) == 0x000010, "Wrong size on DBDAttack_Server_HitTarget");
static_assert(offsetof(DBDAttack_Server_HitTarget, target) == 0x000000, "Member 'DBDAttack_Server_HitTarget::target' has a wrong offset!");
static_assert(offsetof(DBDAttack_Server_HitTarget, targetLocationTimestamp) == 0x000008, "Member 'DBDAttack_Server_HitTarget::targetLocationTimestamp' has a wrong offset!");
static_assert(offsetof(DBDAttack_Server_HitTarget, predictionKey) == 0x00000C, "Member 'DBDAttack_Server_HitTarget::predictionKey' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Server_RequestStateChange
// 0x0001 (0x0001 - 0x0000)
struct DBDAttack_Server_RequestStateChange final
{
public:
	EAttackSubstate                               state;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttack_Server_RequestStateChange) == 0x000001, "Wrong alignment on DBDAttack_Server_RequestStateChange");
static_assert(sizeof(DBDAttack_Server_RequestStateChange) == 0x000001, "Wrong size on DBDAttack_Server_RequestStateChange");
static_assert(offsetof(DBDAttack_Server_RequestStateChange, state) == 0x000000, "Member 'DBDAttack_Server_RequestStateChange::state' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.Authority_AddCharge
// 0x0018 (0x0018 - 0x0000)
struct ChargeableComponent_Authority_AddCharge final
{
public:
	float                                         chargeAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bypassSkillCheckFail;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isOneTimeIncrease;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isChargeWithItem;                                  // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableComponent_Authority_AddCharge) == 0x000008, "Wrong alignment on ChargeableComponent_Authority_AddCharge");
static_assert(sizeof(ChargeableComponent_Authority_AddCharge) == 0x000018, "Wrong size on ChargeableComponent_Authority_AddCharge");
static_assert(offsetof(ChargeableComponent_Authority_AddCharge, chargeAmount) == 0x000000, "Member 'ChargeableComponent_Authority_AddCharge::chargeAmount' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddCharge, instigator) == 0x000008, "Member 'ChargeableComponent_Authority_AddCharge::instigator' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddCharge, bypassSkillCheckFail) == 0x000010, "Member 'ChargeableComponent_Authority_AddCharge::bypassSkillCheckFail' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddCharge, isOneTimeIncrease) == 0x000011, "Member 'ChargeableComponent_Authority_AddCharge::isOneTimeIncrease' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddCharge, isChargeWithItem) == 0x000012, "Member 'ChargeableComponent_Authority_AddCharge::isChargeWithItem' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.Authority_AddChargePercent
// 0x0018 (0x0018 - 0x0000)
struct ChargeableComponent_Authority_AddChargePercent final
{
public:
	float                                         chargePercent;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bypassSkillCheckFail;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isOneTimeIncrease;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isChargeWithItem;                                  // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableComponent_Authority_AddChargePercent) == 0x000008, "Wrong alignment on ChargeableComponent_Authority_AddChargePercent");
static_assert(sizeof(ChargeableComponent_Authority_AddChargePercent) == 0x000018, "Wrong size on ChargeableComponent_Authority_AddChargePercent");
static_assert(offsetof(ChargeableComponent_Authority_AddChargePercent, chargePercent) == 0x000000, "Member 'ChargeableComponent_Authority_AddChargePercent::chargePercent' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddChargePercent, instigator) == 0x000008, "Member 'ChargeableComponent_Authority_AddChargePercent::instigator' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddChargePercent, bypassSkillCheckFail) == 0x000010, "Member 'ChargeableComponent_Authority_AddChargePercent::bypassSkillCheckFail' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddChargePercent, isOneTimeIncrease) == 0x000011, "Member 'ChargeableComponent_Authority_AddChargePercent::isOneTimeIncrease' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddChargePercent, isChargeWithItem) == 0x000012, "Member 'ChargeableComponent_Authority_AddChargePercent::isChargeWithItem' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.Authority_SetEnableAddCharge
// 0x0001 (0x0001 - 0x0000)
struct ChargeableComponent_Authority_SetEnableAddCharge final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_Authority_SetEnableAddCharge) == 0x000001, "Wrong alignment on ChargeableComponent_Authority_SetEnableAddCharge");
static_assert(sizeof(ChargeableComponent_Authority_SetEnableAddCharge) == 0x000001, "Wrong size on ChargeableComponent_Authority_SetEnableAddCharge");
static_assert(offsetof(ChargeableComponent_Authority_SetEnableAddCharge, enable) == 0x000000, "Member 'ChargeableComponent_Authority_SetEnableAddCharge::enable' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.Authority_SetEnableSkillCheckFailurePenalty
// 0x0001 (0x0001 - 0x0000)
struct ChargeableComponent_Authority_SetEnableSkillCheckFailurePenalty final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_Authority_SetEnableSkillCheckFailurePenalty) == 0x000001, "Wrong alignment on ChargeableComponent_Authority_SetEnableSkillCheckFailurePenalty");
static_assert(sizeof(ChargeableComponent_Authority_SetEnableSkillCheckFailurePenalty) == 0x000001, "Wrong size on ChargeableComponent_Authority_SetEnableSkillCheckFailurePenalty");
static_assert(offsetof(ChargeableComponent_Authority_SetEnableSkillCheckFailurePenalty, enable) == 0x000000, "Member 'ChargeableComponent_Authority_SetEnableSkillCheckFailurePenalty::enable' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.IncreaseMaxCharge
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_IncreaseMaxCharge final
{
public:
	float                                         percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_IncreaseMaxCharge) == 0x000004, "Wrong alignment on ChargeableComponent_IncreaseMaxCharge");
static_assert(sizeof(ChargeableComponent_IncreaseMaxCharge) == 0x000004, "Wrong size on ChargeableComponent_IncreaseMaxCharge");
static_assert(offsetof(ChargeableComponent_IncreaseMaxCharge, percent) == 0x000000, "Member 'ChargeableComponent_IncreaseMaxCharge::percent' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.IncreaseMaxChargeAdditive
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_IncreaseMaxChargeAdditive final
{
public:
	float                                         secondsToAdd;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_IncreaseMaxChargeAdditive) == 0x000004, "Wrong alignment on ChargeableComponent_IncreaseMaxChargeAdditive");
static_assert(sizeof(ChargeableComponent_IncreaseMaxChargeAdditive) == 0x000004, "Wrong size on ChargeableComponent_IncreaseMaxChargeAdditive");
static_assert(offsetof(ChargeableComponent_IncreaseMaxChargeAdditive, secondsToAdd) == 0x000000, "Member 'ChargeableComponent_IncreaseMaxChargeAdditive::secondsToAdd' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.OnCurrentChargeChanged
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_OnCurrentChargeChanged final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_OnCurrentChargeChanged) == 0x000004, "Wrong alignment on ChargeableComponent_OnCurrentChargeChanged");
static_assert(sizeof(ChargeableComponent_OnCurrentChargeChanged) == 0x000004, "Wrong size on ChargeableComponent_OnCurrentChargeChanged");
static_assert(offsetof(ChargeableComponent_OnCurrentChargeChanged, value) == 0x000000, "Member 'ChargeableComponent_OnCurrentChargeChanged::value' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.SetDechargeRate
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_SetDechargeRate final
{
public:
	float                                         dechargeRate;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_SetDechargeRate) == 0x000004, "Wrong alignment on ChargeableComponent_SetDechargeRate");
static_assert(sizeof(ChargeableComponent_SetDechargeRate) == 0x000004, "Wrong size on ChargeableComponent_SetDechargeRate");
static_assert(offsetof(ChargeableComponent_SetDechargeRate, dechargeRate) == 0x000000, "Member 'ChargeableComponent_SetDechargeRate::dechargeRate' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.SetSecondsToCharge
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_SetSecondsToCharge final
{
public:
	float                                         secondsToCharge;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_SetSecondsToCharge) == 0x000004, "Wrong alignment on ChargeableComponent_SetSecondsToCharge");
static_assert(sizeof(ChargeableComponent_SetSecondsToCharge) == 0x000004, "Wrong size on ChargeableComponent_SetSecondsToCharge");
static_assert(offsetof(ChargeableComponent_SetSecondsToCharge, secondsToCharge) == 0x000000, "Member 'ChargeableComponent_SetSecondsToCharge::secondsToCharge' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.GetChargeRemaining
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_GetChargeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_GetChargeRemaining) == 0x000004, "Wrong alignment on ChargeableComponent_GetChargeRemaining");
static_assert(sizeof(ChargeableComponent_GetChargeRemaining) == 0x000004, "Wrong size on ChargeableComponent_GetChargeRemaining");
static_assert(offsetof(ChargeableComponent_GetChargeRemaining, ReturnValue) == 0x000000, "Member 'ChargeableComponent_GetChargeRemaining::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.GetChargingSpeed
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_GetChargingSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_GetChargingSpeed) == 0x000004, "Wrong alignment on ChargeableComponent_GetChargingSpeed");
static_assert(sizeof(ChargeableComponent_GetChargingSpeed) == 0x000004, "Wrong size on ChargeableComponent_GetChargingSpeed");
static_assert(offsetof(ChargeableComponent_GetChargingSpeed, ReturnValue) == 0x000000, "Member 'ChargeableComponent_GetChargingSpeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.GetCurrentCharge
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_GetCurrentCharge final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_GetCurrentCharge) == 0x000004, "Wrong alignment on ChargeableComponent_GetCurrentCharge");
static_assert(sizeof(ChargeableComponent_GetCurrentCharge) == 0x000004, "Wrong size on ChargeableComponent_GetCurrentCharge");
static_assert(offsetof(ChargeableComponent_GetCurrentCharge, ReturnValue) == 0x000000, "Member 'ChargeableComponent_GetCurrentCharge::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.GetMaxCharge
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_GetMaxCharge final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_GetMaxCharge) == 0x000004, "Wrong alignment on ChargeableComponent_GetMaxCharge");
static_assert(sizeof(ChargeableComponent_GetMaxCharge) == 0x000004, "Wrong size on ChargeableComponent_GetMaxCharge");
static_assert(offsetof(ChargeableComponent_GetMaxCharge, ReturnValue) == 0x000000, "Member 'ChargeableComponent_GetMaxCharge::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.GetPercentComplete
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_GetPercentComplete final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_GetPercentComplete) == 0x000004, "Wrong alignment on ChargeableComponent_GetPercentComplete");
static_assert(sizeof(ChargeableComponent_GetPercentComplete) == 0x000004, "Wrong size on ChargeableComponent_GetPercentComplete");
static_assert(offsetof(ChargeableComponent_GetPercentComplete, ReturnValue) == 0x000000, "Member 'ChargeableComponent_GetPercentComplete::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.GetPlayerCountPenaltyModifier
// 0x0008 (0x0008 - 0x0000)
struct ChargeableComponent_GetPlayerCountPenaltyModifier final
{
public:
	int32                                         playerCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_GetPlayerCountPenaltyModifier) == 0x000004, "Wrong alignment on ChargeableComponent_GetPlayerCountPenaltyModifier");
static_assert(sizeof(ChargeableComponent_GetPlayerCountPenaltyModifier) == 0x000008, "Wrong size on ChargeableComponent_GetPlayerCountPenaltyModifier");
static_assert(offsetof(ChargeableComponent_GetPlayerCountPenaltyModifier, playerCount) == 0x000000, "Member 'ChargeableComponent_GetPlayerCountPenaltyModifier::playerCount' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_GetPlayerCountPenaltyModifier, ReturnValue) == 0x000004, "Member 'ChargeableComponent_GetPlayerCountPenaltyModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.GetTunableValue
// 0x0010 (0x0010 - 0x0000)
struct ChargeableComponent_GetTunableValue final
{
public:
	class FName                                   TunableValueID;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_GetTunableValue) == 0x000004, "Wrong alignment on ChargeableComponent_GetTunableValue");
static_assert(sizeof(ChargeableComponent_GetTunableValue) == 0x000010, "Wrong size on ChargeableComponent_GetTunableValue");
static_assert(offsetof(ChargeableComponent_GetTunableValue, TunableValueID) == 0x000000, "Member 'ChargeableComponent_GetTunableValue::TunableValueID' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_GetTunableValue, ReturnValue) == 0x00000C, "Member 'ChargeableComponent_GetTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.HasPlayerDoneSkillCheck
// 0x0008 (0x0008 - 0x0000)
struct ChargeableComponent_HasPlayerDoneSkillCheck final
{
public:
	int32                                         playerID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableComponent_HasPlayerDoneSkillCheck) == 0x000004, "Wrong alignment on ChargeableComponent_HasPlayerDoneSkillCheck");
static_assert(sizeof(ChargeableComponent_HasPlayerDoneSkillCheck) == 0x000008, "Wrong size on ChargeableComponent_HasPlayerDoneSkillCheck");
static_assert(offsetof(ChargeableComponent_HasPlayerDoneSkillCheck, playerID) == 0x000000, "Member 'ChargeableComponent_HasPlayerDoneSkillCheck::playerID' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_HasPlayerDoneSkillCheck, ReturnValue) == 0x000004, "Member 'ChargeableComponent_HasPlayerDoneSkillCheck::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.IsChargeComplete
// 0x0001 (0x0001 - 0x0000)
struct ChargeableComponent_IsChargeComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_IsChargeComplete) == 0x000001, "Wrong alignment on ChargeableComponent_IsChargeComplete");
static_assert(sizeof(ChargeableComponent_IsChargeComplete) == 0x000001, "Wrong size on ChargeableComponent_IsChargeComplete");
static_assert(offsetof(ChargeableComponent_IsChargeComplete, ReturnValue) == 0x000000, "Member 'ChargeableComponent_IsChargeComplete::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.IsSkillCheckTimePenaltyActive
// 0x0001 (0x0001 - 0x0000)
struct ChargeableComponent_IsSkillCheckTimePenaltyActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_IsSkillCheckTimePenaltyActive) == 0x000001, "Wrong alignment on ChargeableComponent_IsSkillCheckTimePenaltyActive");
static_assert(sizeof(ChargeableComponent_IsSkillCheckTimePenaltyActive) == 0x000001, "Wrong size on ChargeableComponent_IsSkillCheckTimePenaltyActive");
static_assert(offsetof(ChargeableComponent_IsSkillCheckTimePenaltyActive, ReturnValue) == 0x000000, "Member 'ChargeableComponent_IsSkillCheckTimePenaltyActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.Multicast_OnCompleteChanged
// 0x0001 (0x0001 - 0x0000)
struct ChargeableComponent_Multicast_OnCompleteChanged final
{
public:
	bool                                          completed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_Multicast_OnCompleteChanged) == 0x000001, "Wrong alignment on ChargeableComponent_Multicast_OnCompleteChanged");
static_assert(sizeof(ChargeableComponent_Multicast_OnCompleteChanged) == 0x000001, "Wrong size on ChargeableComponent_Multicast_OnCompleteChanged");
static_assert(offsetof(ChargeableComponent_Multicast_OnCompleteChanged, completed) == 0x000000, "Member 'ChargeableComponent_Multicast_OnCompleteChanged::completed' has a wrong offset!");

// Function DeadByDaylight.DBDAIUtilities.DrawDebugAINavigation
// 0x0001 (0x0001 - 0x0000)
struct DBDAIUtilities_DrawDebugAINavigation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIUtilities_DrawDebugAINavigation) == 0x000001, "Wrong alignment on DBDAIUtilities_DrawDebugAINavigation");
static_assert(sizeof(DBDAIUtilities_DrawDebugAINavigation) == 0x000001, "Wrong size on DBDAIUtilities_DrawDebugAINavigation");
static_assert(offsetof(DBDAIUtilities_DrawDebugAINavigation, ReturnValue) == 0x000000, "Member 'DBDAIUtilities_DrawDebugAINavigation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAIUtilities.DrawDebugAINavigationFilter
// 0x0001 (0x0001 - 0x0000)
struct DBDAIUtilities_DrawDebugAINavigationFilter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIUtilities_DrawDebugAINavigationFilter) == 0x000001, "Wrong alignment on DBDAIUtilities_DrawDebugAINavigationFilter");
static_assert(sizeof(DBDAIUtilities_DrawDebugAINavigationFilter) == 0x000001, "Wrong size on DBDAIUtilities_DrawDebugAINavigationFilter");
static_assert(offsetof(DBDAIUtilities_DrawDebugAINavigationFilter, ReturnValue) == 0x000000, "Member 'DBDAIUtilities_DrawDebugAINavigationFilter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAIUtilities.DrawDebugAIPerception
// 0x0001 (0x0001 - 0x0000)
struct DBDAIUtilities_DrawDebugAIPerception final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIUtilities_DrawDebugAIPerception) == 0x000001, "Wrong alignment on DBDAIUtilities_DrawDebugAIPerception");
static_assert(sizeof(DBDAIUtilities_DrawDebugAIPerception) == 0x000001, "Wrong size on DBDAIUtilities_DrawDebugAIPerception");
static_assert(offsetof(DBDAIUtilities_DrawDebugAIPerception, ReturnValue) == 0x000000, "Member 'DBDAIUtilities_DrawDebugAIPerception::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAIUtilities.FindPathWithAgentRadiusToActorSynchronously
// 0x0040 (0x0040 - 0x0000)
struct DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously final
{
public:
	class UObject*                                worldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                pathStart;                                         // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 goalActor;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         agentRadius;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         tetherDistance;                                    // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 pathfindingContext;                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     filterClass;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationPath*                        ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously) == 0x000008, "Wrong alignment on DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously");
static_assert(sizeof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously) == 0x000040, "Wrong size on DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, worldContextObject) == 0x000000, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, pathStart) == 0x000008, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::pathStart' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, goalActor) == 0x000018, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::goalActor' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, agentRadius) == 0x000020, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::agentRadius' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, tetherDistance) == 0x000024, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::tetherDistance' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, pathfindingContext) == 0x000028, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::pathfindingContext' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, filterClass) == 0x000030, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::filterClass' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, ReturnValue) == 0x000038, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAIUtilities.SetCanEverAffectNavigation
// 0x0010 (0x0010 - 0x0000)
struct DBDAIUtilities_SetCanEverAffectNavigation final
{
public:
	class UActorComponent*                        component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          affectNavigation;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAIUtilities_SetCanEverAffectNavigation) == 0x000008, "Wrong alignment on DBDAIUtilities_SetCanEverAffectNavigation");
static_assert(sizeof(DBDAIUtilities_SetCanEverAffectNavigation) == 0x000010, "Wrong size on DBDAIUtilities_SetCanEverAffectNavigation");
static_assert(offsetof(DBDAIUtilities_SetCanEverAffectNavigation, component) == 0x000000, "Member 'DBDAIUtilities_SetCanEverAffectNavigation::component' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_SetCanEverAffectNavigation, affectNavigation) == 0x000008, "Member 'DBDAIUtilities_SetCanEverAffectNavigation::affectNavigation' has a wrong offset!");

// Function DeadByDaylight.DBDNetworkUtilities.IsOnDedicatedServerNetwork
// 0x0010 (0x0010 - 0x0000)
struct DBDNetworkUtilities_IsOnDedicatedServerNetwork final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDNetworkUtilities_IsOnDedicatedServerNetwork) == 0x000008, "Wrong alignment on DBDNetworkUtilities_IsOnDedicatedServerNetwork");
static_assert(sizeof(DBDNetworkUtilities_IsOnDedicatedServerNetwork) == 0x000010, "Wrong size on DBDNetworkUtilities_IsOnDedicatedServerNetwork");
static_assert(offsetof(DBDNetworkUtilities_IsOnDedicatedServerNetwork, worldContextObject) == 0x000000, "Member 'DBDNetworkUtilities_IsOnDedicatedServerNetwork::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDNetworkUtilities_IsOnDedicatedServerNetwork, ReturnValue) == 0x000008, "Member 'DBDNetworkUtilities_IsOnDedicatedServerNetwork::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDNetworkUtilities.IsRunningDedicatedServerFlow
// 0x0001 (0x0001 - 0x0000)
struct DBDNetworkUtilities_IsRunningDedicatedServerFlow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDNetworkUtilities_IsRunningDedicatedServerFlow) == 0x000001, "Wrong alignment on DBDNetworkUtilities_IsRunningDedicatedServerFlow");
static_assert(sizeof(DBDNetworkUtilities_IsRunningDedicatedServerFlow) == 0x000001, "Wrong size on DBDNetworkUtilities_IsRunningDedicatedServerFlow");
static_assert(offsetof(DBDNetworkUtilities_IsRunningDedicatedServerFlow, ReturnValue) == 0x000000, "Member 'DBDNetworkUtilities_IsRunningDedicatedServerFlow::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LevelParadise.ParadiseEntered
// 0x0058 (0x0058 - 0x0000)
struct LevelParadise_ParadiseEntered final
{
public:
	struct FParadiseData                          playerData;                                        // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelParadise_ParadiseEntered) == 0x000008, "Wrong alignment on LevelParadise_ParadiseEntered");
static_assert(sizeof(LevelParadise_ParadiseEntered) == 0x000058, "Wrong size on LevelParadise_ParadiseEntered");
static_assert(offsetof(LevelParadise_ParadiseEntered, playerData) == 0x000000, "Member 'LevelParadise_ParadiseEntered::playerData' has a wrong offset!");

// Function DeadByDaylight.AICharacterBehaviourInteractWithActorData.Init
// 0x0010 (0x0010 - 0x0000)
struct AICharacterBehaviourInteractWithActorData_Init final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterMovementTypes                       characterMovementType;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          usePathfinding;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICharacterBehaviourInteractWithActorData_Init) == 0x000008, "Wrong alignment on AICharacterBehaviourInteractWithActorData_Init");
static_assert(sizeof(AICharacterBehaviourInteractWithActorData_Init) == 0x000010, "Wrong size on AICharacterBehaviourInteractWithActorData_Init");
static_assert(offsetof(AICharacterBehaviourInteractWithActorData_Init, actor) == 0x000000, "Member 'AICharacterBehaviourInteractWithActorData_Init::actor' has a wrong offset!");
static_assert(offsetof(AICharacterBehaviourInteractWithActorData_Init, characterMovementType) == 0x000008, "Member 'AICharacterBehaviourInteractWithActorData_Init::characterMovementType' has a wrong offset!");
static_assert(offsetof(AICharacterBehaviourInteractWithActorData_Init, usePathfinding) == 0x000009, "Member 'AICharacterBehaviourInteractWithActorData_Init::usePathfinding' has a wrong offset!");

// Function DeadByDaylight.AICharacterBehaviourInteractWithActorData.WatchGameEventType
// 0x000C (0x000C - 0x0000)
struct AICharacterBehaviourInteractWithActorData_WatchGameEventType final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharacterBehaviourInteractWithActorData_WatchGameEventType) == 0x000004, "Wrong alignment on AICharacterBehaviourInteractWithActorData_WatchGameEventType");
static_assert(sizeof(AICharacterBehaviourInteractWithActorData_WatchGameEventType) == 0x00000C, "Wrong size on AICharacterBehaviourInteractWithActorData_WatchGameEventType");
static_assert(offsetof(AICharacterBehaviourInteractWithActorData_WatchGameEventType, gameEventType) == 0x000000, "Member 'AICharacterBehaviourInteractWithActorData_WatchGameEventType::gameEventType' has a wrong offset!");

// Function DeadByDaylight.AICharacterBehaviourInteractWithActorData.WatchGameEventTypes
// 0x0010 (0x0010 - 0x0000)
struct AICharacterBehaviourInteractWithActorData_WatchGameEventTypes final
{
public:
	TArray<struct FGameplayTag>                   gameEventTypes;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharacterBehaviourInteractWithActorData_WatchGameEventTypes) == 0x000008, "Wrong alignment on AICharacterBehaviourInteractWithActorData_WatchGameEventTypes");
static_assert(sizeof(AICharacterBehaviourInteractWithActorData_WatchGameEventTypes) == 0x000010, "Wrong size on AICharacterBehaviourInteractWithActorData_WatchGameEventTypes");
static_assert(offsetof(AICharacterBehaviourInteractWithActorData_WatchGameEventTypes, gameEventTypes) == 0x000000, "Member 'AICharacterBehaviourInteractWithActorData_WatchGameEventTypes::gameEventTypes' has a wrong offset!");

// Function DeadByDaylight.GlyphNavMovementComponent.SetAcceleration
// 0x0004 (0x0004 - 0x0000)
struct GlyphNavMovementComponent_SetAcceleration final
{
public:
	float                                         acceleration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlyphNavMovementComponent_SetAcceleration) == 0x000004, "Wrong alignment on GlyphNavMovementComponent_SetAcceleration");
static_assert(sizeof(GlyphNavMovementComponent_SetAcceleration) == 0x000004, "Wrong size on GlyphNavMovementComponent_SetAcceleration");
static_assert(offsetof(GlyphNavMovementComponent_SetAcceleration, acceleration) == 0x000000, "Member 'GlyphNavMovementComponent_SetAcceleration::acceleration' has a wrong offset!");

// Function DeadByDaylight.GlyphNavMovementComponent.SetDeceleration
// 0x0004 (0x0004 - 0x0000)
struct GlyphNavMovementComponent_SetDeceleration final
{
public:
	float                                         deceleration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlyphNavMovementComponent_SetDeceleration) == 0x000004, "Wrong alignment on GlyphNavMovementComponent_SetDeceleration");
static_assert(sizeof(GlyphNavMovementComponent_SetDeceleration) == 0x000004, "Wrong size on GlyphNavMovementComponent_SetDeceleration");
static_assert(offsetof(GlyphNavMovementComponent_SetDeceleration, deceleration) == 0x000000, "Member 'GlyphNavMovementComponent_SetDeceleration::deceleration' has a wrong offset!");

// Function DeadByDaylight.GlyphNavMovementComponent.SetMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct GlyphNavMovementComponent_SetMaxSpeed final
{
public:
	float                                         maxSpeed;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlyphNavMovementComponent_SetMaxSpeed) == 0x000004, "Wrong alignment on GlyphNavMovementComponent_SetMaxSpeed");
static_assert(sizeof(GlyphNavMovementComponent_SetMaxSpeed) == 0x000004, "Wrong size on GlyphNavMovementComponent_SetMaxSpeed");
static_assert(offsetof(GlyphNavMovementComponent_SetMaxSpeed, maxSpeed) == 0x000000, "Member 'GlyphNavMovementComponent_SetMaxSpeed::maxSpeed' has a wrong offset!");

// Function DeadByDaylight.GlyphNavMovementComponent.GetGlyphOwner
// 0x0008 (0x0008 - 0x0000)
struct GlyphNavMovementComponent_GetGlyphOwner final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlyphNavMovementComponent_GetGlyphOwner) == 0x000008, "Wrong alignment on GlyphNavMovementComponent_GetGlyphOwner");
static_assert(sizeof(GlyphNavMovementComponent_GetGlyphOwner) == 0x000008, "Wrong size on GlyphNavMovementComponent_GetGlyphOwner");
static_assert(offsetof(GlyphNavMovementComponent_GetGlyphOwner, ReturnValue) == 0x000000, "Member 'GlyphNavMovementComponent_GetGlyphOwner::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DoctorPowerAnimStateComponent.SetCurrentAbilityPhase
// 0x0001 (0x0001 - 0x0000)
struct DoctorPowerAnimStateComponent_SetCurrentAbilityPhase final
{
public:
	EDoctorAbilityPhase                           abilityPhase;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoctorPowerAnimStateComponent_SetCurrentAbilityPhase) == 0x000001, "Wrong alignment on DoctorPowerAnimStateComponent_SetCurrentAbilityPhase");
static_assert(sizeof(DoctorPowerAnimStateComponent_SetCurrentAbilityPhase) == 0x000001, "Wrong size on DoctorPowerAnimStateComponent_SetCurrentAbilityPhase");
static_assert(offsetof(DoctorPowerAnimStateComponent_SetCurrentAbilityPhase, abilityPhase) == 0x000000, "Member 'DoctorPowerAnimStateComponent_SetCurrentAbilityPhase::abilityPhase' has a wrong offset!");

// Function DeadByDaylight.DoctorPowerAnimStateComponent.SetCurrentAbilityType
// 0x0001 (0x0001 - 0x0000)
struct DoctorPowerAnimStateComponent_SetCurrentAbilityType final
{
public:
	EDoctorAbilityType                            abilityType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoctorPowerAnimStateComponent_SetCurrentAbilityType) == 0x000001, "Wrong alignment on DoctorPowerAnimStateComponent_SetCurrentAbilityType");
static_assert(sizeof(DoctorPowerAnimStateComponent_SetCurrentAbilityType) == 0x000001, "Wrong size on DoctorPowerAnimStateComponent_SetCurrentAbilityType");
static_assert(offsetof(DoctorPowerAnimStateComponent_SetCurrentAbilityType, abilityType) == 0x000000, "Member 'DoctorPowerAnimStateComponent_SetCurrentAbilityType::abilityType' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.Authority_OnOriginatingPlayerEndPlay
// 0x0010 (0x0010 - 0x0000)
struct StatusEffect_Authority_OnOriginatingPlayerEndPlay final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                endPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StatusEffect_Authority_OnOriginatingPlayerEndPlay) == 0x000008, "Wrong alignment on StatusEffect_Authority_OnOriginatingPlayerEndPlay");
static_assert(sizeof(StatusEffect_Authority_OnOriginatingPlayerEndPlay) == 0x000010, "Wrong size on StatusEffect_Authority_OnOriginatingPlayerEndPlay");
static_assert(offsetof(StatusEffect_Authority_OnOriginatingPlayerEndPlay, actor) == 0x000000, "Member 'StatusEffect_Authority_OnOriginatingPlayerEndPlay::actor' has a wrong offset!");
static_assert(offsetof(StatusEffect_Authority_OnOriginatingPlayerEndPlay, endPlayReason) == 0x000008, "Member 'StatusEffect_Authority_OnOriginatingPlayerEndPlay::endPlayReason' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.Authority_SetRemainingLifetime
// 0x0004 (0x0004 - 0x0000)
struct StatusEffect_Authority_SetRemainingLifetime final
{
public:
	float                                         lifetime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_Authority_SetRemainingLifetime) == 0x000004, "Wrong alignment on StatusEffect_Authority_SetRemainingLifetime");
static_assert(sizeof(StatusEffect_Authority_SetRemainingLifetime) == 0x000004, "Wrong size on StatusEffect_Authority_SetRemainingLifetime");
static_assert(offsetof(StatusEffect_Authority_SetRemainingLifetime, lifetime) == 0x000000, "Member 'StatusEffect_Authority_SetRemainingLifetime::lifetime' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.BroadcastGameEventNotification
// 0x0060 (0x0060 - 0x0000)
struct StatusEffect_BroadcastGameEventNotification final
{
public:
	struct FGameplayNotificationData              notificationData;                                  // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	bool                                          addToHistory;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StatusEffect_BroadcastGameEventNotification) == 0x000008, "Wrong alignment on StatusEffect_BroadcastGameEventNotification");
static_assert(sizeof(StatusEffect_BroadcastGameEventNotification) == 0x000060, "Wrong size on StatusEffect_BroadcastGameEventNotification");
static_assert(offsetof(StatusEffect_BroadcastGameEventNotification, notificationData) == 0x000000, "Member 'StatusEffect_BroadcastGameEventNotification::notificationData' has a wrong offset!");
static_assert(offsetof(StatusEffect_BroadcastGameEventNotification, addToHistory) == 0x000058, "Member 'StatusEffect_BroadcastGameEventNotification::addToHistory' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.InitializeLifetime
// 0x0004 (0x0004 - 0x0000)
struct StatusEffect_InitializeLifetime final
{
public:
	float                                         lifetime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_InitializeLifetime) == 0x000004, "Wrong alignment on StatusEffect_InitializeLifetime");
static_assert(sizeof(StatusEffect_InitializeLifetime) == 0x000004, "Wrong size on StatusEffect_InitializeLifetime");
static_assert(offsetof(StatusEffect_InitializeLifetime, lifetime) == 0x000000, "Member 'StatusEffect_InitializeLifetime::lifetime' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.Multicast_SetRemainingLifetime
// 0x0004 (0x0004 - 0x0000)
struct StatusEffect_Multicast_SetRemainingLifetime final
{
public:
	float                                         lifetime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_Multicast_SetRemainingLifetime) == 0x000004, "Wrong alignment on StatusEffect_Multicast_SetRemainingLifetime");
static_assert(sizeof(StatusEffect_Multicast_SetRemainingLifetime) == 0x000004, "Wrong size on StatusEffect_Multicast_SetRemainingLifetime");
static_assert(offsetof(StatusEffect_Multicast_SetRemainingLifetime, lifetime) == 0x000000, "Member 'StatusEffect_Multicast_SetRemainingLifetime::lifetime' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.Multicast_SetRemainingLifetimeInitialized
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_Multicast_SetRemainingLifetimeInitialized final
{
public:
	bool                                          remainingLifetimeInitialized;                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_Multicast_SetRemainingLifetimeInitialized) == 0x000001, "Wrong alignment on StatusEffect_Multicast_SetRemainingLifetimeInitialized");
static_assert(sizeof(StatusEffect_Multicast_SetRemainingLifetimeInitialized) == 0x000001, "Wrong size on StatusEffect_Multicast_SetRemainingLifetimeInitialized");
static_assert(offsetof(StatusEffect_Multicast_SetRemainingLifetimeInitialized, remainingLifetimeInitialized) == 0x000000, "Member 'StatusEffect_Multicast_SetRemainingLifetimeInitialized::remainingLifetimeInitialized' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.OnShouldDisplayChanged
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_OnShouldDisplayChanged final
{
public:
	bool                                          currentValue;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_OnShouldDisplayChanged) == 0x000001, "Wrong alignment on StatusEffect_OnShouldDisplayChanged");
static_assert(sizeof(StatusEffect_OnShouldDisplayChanged) == 0x000001, "Wrong size on StatusEffect_OnShouldDisplayChanged");
static_assert(offsetof(StatusEffect_OnShouldDisplayChanged, currentValue) == 0x000000, "Member 'StatusEffect_OnShouldDisplayChanged::currentValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.SetShouldDisplay
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_SetShouldDisplay final
{
public:
	bool                                          on;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_SetShouldDisplay) == 0x000001, "Wrong alignment on StatusEffect_SetShouldDisplay");
static_assert(sizeof(StatusEffect_SetShouldDisplay) == 0x000001, "Wrong size on StatusEffect_SetShouldDisplay");
static_assert(offsetof(StatusEffect_SetShouldDisplay, on) == 0x000000, "Member 'StatusEffect_SetShouldDisplay::on' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.SetStatusEffectIconPercentage
// 0x0004 (0x0004 - 0x0000)
struct StatusEffect_SetStatusEffectIconPercentage final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_SetStatusEffectIconPercentage) == 0x000004, "Wrong alignment on StatusEffect_SetStatusEffectIconPercentage");
static_assert(sizeof(StatusEffect_SetStatusEffectIconPercentage) == 0x000004, "Wrong size on StatusEffect_SetStatusEffectIconPercentage");
static_assert(offsetof(StatusEffect_SetStatusEffectIconPercentage, value) == 0x000000, "Member 'StatusEffect_SetStatusEffectIconPercentage::value' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.FireActiveStatusEffectEvent
// 0x0008 (0x0008 - 0x0000)
struct StatusEffect_FireActiveStatusEffectEvent final
{
public:
	float                                         percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         levelToDisplay;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_FireActiveStatusEffectEvent) == 0x000004, "Wrong alignment on StatusEffect_FireActiveStatusEffectEvent");
static_assert(sizeof(StatusEffect_FireActiveStatusEffectEvent) == 0x000008, "Wrong size on StatusEffect_FireActiveStatusEffectEvent");
static_assert(offsetof(StatusEffect_FireActiveStatusEffectEvent, percentage) == 0x000000, "Member 'StatusEffect_FireActiveStatusEffectEvent::percentage' has a wrong offset!");
static_assert(offsetof(StatusEffect_FireActiveStatusEffectEvent, levelToDisplay) == 0x000004, "Member 'StatusEffect_FireActiveStatusEffectEvent::levelToDisplay' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.GetCustomParam
// 0x0004 (0x0004 - 0x0000)
struct StatusEffect_GetCustomParam final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_GetCustomParam) == 0x000004, "Wrong alignment on StatusEffect_GetCustomParam");
static_assert(sizeof(StatusEffect_GetCustomParam) == 0x000004, "Wrong size on StatusEffect_GetCustomParam");
static_assert(offsetof(StatusEffect_GetCustomParam, ReturnValue) == 0x000000, "Member 'StatusEffect_GetCustomParam::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.GetLifetimeDuration
// 0x0004 (0x0004 - 0x0000)
struct StatusEffect_GetLifetimeDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_GetLifetimeDuration) == 0x000004, "Wrong alignment on StatusEffect_GetLifetimeDuration");
static_assert(sizeof(StatusEffect_GetLifetimeDuration) == 0x000004, "Wrong size on StatusEffect_GetLifetimeDuration");
static_assert(offsetof(StatusEffect_GetLifetimeDuration, ReturnValue) == 0x000000, "Member 'StatusEffect_GetLifetimeDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.GetOriginatingPlayer
// 0x0008 (0x0008 - 0x0000)
struct StatusEffect_GetOriginatingPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_GetOriginatingPlayer) == 0x000008, "Wrong alignment on StatusEffect_GetOriginatingPlayer");
static_assert(sizeof(StatusEffect_GetOriginatingPlayer) == 0x000008, "Wrong size on StatusEffect_GetOriginatingPlayer");
static_assert(offsetof(StatusEffect_GetOriginatingPlayer, ReturnValue) == 0x000000, "Member 'StatusEffect_GetOriginatingPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.GetShouldDisplay
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_GetShouldDisplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_GetShouldDisplay) == 0x000001, "Wrong alignment on StatusEffect_GetShouldDisplay");
static_assert(sizeof(StatusEffect_GetShouldDisplay) == 0x000001, "Wrong size on StatusEffect_GetShouldDisplay");
static_assert(offsetof(StatusEffect_GetShouldDisplay, ReturnValue) == 0x000000, "Member 'StatusEffect_GetShouldDisplay::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.GetStatusEffectCooldownRate
// 0x0004 (0x0004 - 0x0000)
struct StatusEffect_GetStatusEffectCooldownRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_GetStatusEffectCooldownRate) == 0x000004, "Wrong alignment on StatusEffect_GetStatusEffectCooldownRate");
static_assert(sizeof(StatusEffect_GetStatusEffectCooldownRate) == 0x000004, "Wrong size on StatusEffect_GetStatusEffectCooldownRate");
static_assert(offsetof(StatusEffect_GetStatusEffectCooldownRate, ReturnValue) == 0x000000, "Member 'StatusEffect_GetStatusEffectCooldownRate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.GetStatusEffectType
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_GetStatusEffectType final
{
public:
	EStatusEffectType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_GetStatusEffectType) == 0x000001, "Wrong alignment on StatusEffect_GetStatusEffectType");
static_assert(sizeof(StatusEffect_GetStatusEffectType) == 0x000001, "Wrong size on StatusEffect_GetStatusEffectType");
static_assert(offsetof(StatusEffect_GetStatusEffectType, ReturnValue) == 0x000000, "Member 'StatusEffect_GetStatusEffectType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.IsInOriginatorRange
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_IsInOriginatorRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_IsInOriginatorRange) == 0x000001, "Wrong alignment on StatusEffect_IsInOriginatorRange");
static_assert(sizeof(StatusEffect_IsInOriginatorRange) == 0x000001, "Wrong size on StatusEffect_IsInOriginatorRange");
static_assert(offsetof(StatusEffect_IsInOriginatorRange, ReturnValue) == 0x000000, "Member 'StatusEffect_IsInOriginatorRange::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.IsKillerInOriginatorRange
// 0x0008 (0x0008 - 0x0000)
struct StatusEffect_IsKillerInOriginatorRange final
{
public:
	float                                         AdditiveRangeModifier;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StatusEffect_IsKillerInOriginatorRange) == 0x000004, "Wrong alignment on StatusEffect_IsKillerInOriginatorRange");
static_assert(sizeof(StatusEffect_IsKillerInOriginatorRange) == 0x000008, "Wrong size on StatusEffect_IsKillerInOriginatorRange");
static_assert(offsetof(StatusEffect_IsKillerInOriginatorRange, AdditiveRangeModifier) == 0x000000, "Member 'StatusEffect_IsKillerInOriginatorRange::AdditiveRangeModifier' has a wrong offset!");
static_assert(offsetof(StatusEffect_IsKillerInOriginatorRange, ReturnValue) == 0x000004, "Member 'StatusEffect_IsKillerInOriginatorRange::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.IsOriginatorAlive
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_IsOriginatorAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_IsOriginatorAlive) == 0x000001, "Wrong alignment on StatusEffect_IsOriginatorAlive");
static_assert(sizeof(StatusEffect_IsOriginatorAlive) == 0x000001, "Wrong size on StatusEffect_IsOriginatorAlive");
static_assert(offsetof(StatusEffect_IsOriginatorAlive, ReturnValue) == 0x000000, "Member 'StatusEffect_IsOriginatorAlive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.IsOriginatorHooked
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_IsOriginatorHooked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_IsOriginatorHooked) == 0x000001, "Wrong alignment on StatusEffect_IsOriginatorHooked");
static_assert(sizeof(StatusEffect_IsOriginatorHooked) == 0x000001, "Wrong size on StatusEffect_IsOriginatorHooked");
static_assert(offsetof(StatusEffect_IsOriginatorHooked, ReturnValue) == 0x000000, "Member 'StatusEffect_IsOriginatorHooked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.ShouldDisplayStatusEffectIcon
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_ShouldDisplayStatusEffectIcon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_ShouldDisplayStatusEffectIcon) == 0x000001, "Wrong alignment on StatusEffect_ShouldDisplayStatusEffectIcon");
static_assert(sizeof(StatusEffect_ShouldDisplayStatusEffectIcon) == 0x000001, "Wrong size on StatusEffect_ShouldDisplayStatusEffectIcon");
static_assert(offsetof(StatusEffect_ShouldDisplayStatusEffectIcon, ReturnValue) == 0x000000, "Member 'StatusEffect_ShouldDisplayStatusEffectIcon::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.HitValidatorComponent.Multicast_DrawDebugHit
// 0x0160 (0x0160 - 0x0000)
struct HitValidatorComponent_Multicast_DrawDebugHit final
{
public:
	struct FHitValidationReport                   report;                                            // 0x0000(0x0160)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitValidatorComponent_Multicast_DrawDebugHit) == 0x000010, "Wrong alignment on HitValidatorComponent_Multicast_DrawDebugHit");
static_assert(sizeof(HitValidatorComponent_Multicast_DrawDebugHit) == 0x000160, "Wrong size on HitValidatorComponent_Multicast_DrawDebugHit");
static_assert(offsetof(HitValidatorComponent_Multicast_DrawDebugHit, report) == 0x000000, "Member 'HitValidatorComponent_Multicast_DrawDebugHit::report' has a wrong offset!");

// Function DeadByDaylight.AICharacterBehaviourInteractWithActor.OnMovementFinished
// 0x0008 (0x0008 - 0x0000)
struct AICharacterBehaviourInteractWithActor_OnMovementFinished final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICharacterBehaviourInteractWithActor_OnMovementFinished) == 0x000004, "Wrong alignment on AICharacterBehaviourInteractWithActor_OnMovementFinished");
static_assert(sizeof(AICharacterBehaviourInteractWithActor_OnMovementFinished) == 0x000008, "Wrong size on AICharacterBehaviourInteractWithActor_OnMovementFinished");
static_assert(offsetof(AICharacterBehaviourInteractWithActor_OnMovementFinished, RequestID) == 0x000000, "Member 'AICharacterBehaviourInteractWithActor_OnMovementFinished::RequestID' has a wrong offset!");
static_assert(offsetof(AICharacterBehaviourInteractWithActor_OnMovementFinished, Result) == 0x000004, "Member 'AICharacterBehaviourInteractWithActor_OnMovementFinished::Result' has a wrong offset!");

// Function DeadByDaylight.TokenCounter.Authority_SetMaxTokenCount
// 0x0004 (0x0004 - 0x0000)
struct TokenCounter_Authority_SetMaxTokenCount final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TokenCounter_Authority_SetMaxTokenCount) == 0x000004, "Wrong alignment on TokenCounter_Authority_SetMaxTokenCount");
static_assert(sizeof(TokenCounter_Authority_SetMaxTokenCount) == 0x000004, "Wrong size on TokenCounter_Authority_SetMaxTokenCount");
static_assert(offsetof(TokenCounter_Authority_SetMaxTokenCount, value) == 0x000000, "Member 'TokenCounter_Authority_SetMaxTokenCount::value' has a wrong offset!");

// Function DeadByDaylight.TokenCounter.Authority_SetTokenCount
// 0x0004 (0x0004 - 0x0000)
struct TokenCounter_Authority_SetTokenCount final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TokenCounter_Authority_SetTokenCount) == 0x000004, "Wrong alignment on TokenCounter_Authority_SetTokenCount");
static_assert(sizeof(TokenCounter_Authority_SetTokenCount) == 0x000004, "Wrong size on TokenCounter_Authority_SetTokenCount");
static_assert(offsetof(TokenCounter_Authority_SetTokenCount, value) == 0x000000, "Member 'TokenCounter_Authority_SetTokenCount::value' has a wrong offset!");

// Function DeadByDaylight.TokenCounter.OnRep_TokenCount
// 0x0004 (0x0004 - 0x0000)
struct TokenCounter_OnRep_TokenCount final
{
public:
	int32                                         oldCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TokenCounter_OnRep_TokenCount) == 0x000004, "Wrong alignment on TokenCounter_OnRep_TokenCount");
static_assert(sizeof(TokenCounter_OnRep_TokenCount) == 0x000004, "Wrong size on TokenCounter_OnRep_TokenCount");
static_assert(offsetof(TokenCounter_OnRep_TokenCount, oldCount) == 0x000000, "Member 'TokenCounter_OnRep_TokenCount::oldCount' has a wrong offset!");

// Function DeadByDaylight.TokenCounter.GetMaxTokenCount
// 0x0004 (0x0004 - 0x0000)
struct TokenCounter_GetMaxTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TokenCounter_GetMaxTokenCount) == 0x000004, "Wrong alignment on TokenCounter_GetMaxTokenCount");
static_assert(sizeof(TokenCounter_GetMaxTokenCount) == 0x000004, "Wrong size on TokenCounter_GetMaxTokenCount");
static_assert(offsetof(TokenCounter_GetMaxTokenCount, ReturnValue) == 0x000000, "Member 'TokenCounter_GetMaxTokenCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TokenCounter.GetTokenCount
// 0x0004 (0x0004 - 0x0000)
struct TokenCounter_GetTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TokenCounter_GetTokenCount) == 0x000004, "Wrong alignment on TokenCounter_GetTokenCount");
static_assert(sizeof(TokenCounter_GetTokenCount) == 0x000004, "Wrong size on TokenCounter_GetTokenCount");
static_assert(offsetof(TokenCounter_GetTokenCount, ReturnValue) == 0x000000, "Member 'TokenCounter_GetTokenCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BlindableBaseComponent.Authority_AddBlindingEffector
// 0x0010 (0x0010 - 0x0000)
struct BlindableBaseComponent_Authority_AddBlindingEffector final
{
public:
	TScriptInterface<class IBlindingEffectorInterface> effector;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlindableBaseComponent_Authority_AddBlindingEffector) == 0x000008, "Wrong alignment on BlindableBaseComponent_Authority_AddBlindingEffector");
static_assert(sizeof(BlindableBaseComponent_Authority_AddBlindingEffector) == 0x000010, "Wrong size on BlindableBaseComponent_Authority_AddBlindingEffector");
static_assert(offsetof(BlindableBaseComponent_Authority_AddBlindingEffector, effector) == 0x000000, "Member 'BlindableBaseComponent_Authority_AddBlindingEffector::effector' has a wrong offset!");

// Function DeadByDaylight.BlindableBaseComponent.Authority_Blinded
// 0x0010 (0x0010 - 0x0000)
struct BlindableBaseComponent_Authority_Blinded final
{
public:
	EBlindType                                    blindType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         blindnessDuration;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 effectorActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlindableBaseComponent_Authority_Blinded) == 0x000008, "Wrong alignment on BlindableBaseComponent_Authority_Blinded");
static_assert(sizeof(BlindableBaseComponent_Authority_Blinded) == 0x000010, "Wrong size on BlindableBaseComponent_Authority_Blinded");
static_assert(offsetof(BlindableBaseComponent_Authority_Blinded, blindType) == 0x000000, "Member 'BlindableBaseComponent_Authority_Blinded::blindType' has a wrong offset!");
static_assert(offsetof(BlindableBaseComponent_Authority_Blinded, blindnessDuration) == 0x000004, "Member 'BlindableBaseComponent_Authority_Blinded::blindnessDuration' has a wrong offset!");
static_assert(offsetof(BlindableBaseComponent_Authority_Blinded, effectorActor) == 0x000008, "Member 'BlindableBaseComponent_Authority_Blinded::effectorActor' has a wrong offset!");

// Function DeadByDaylight.BlindableBaseComponent.Authority_RemoveBlindingEffector
// 0x0010 (0x0010 - 0x0000)
struct BlindableBaseComponent_Authority_RemoveBlindingEffector final
{
public:
	TScriptInterface<class IBlindingEffectorInterface> effector;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlindableBaseComponent_Authority_RemoveBlindingEffector) == 0x000008, "Wrong alignment on BlindableBaseComponent_Authority_RemoveBlindingEffector");
static_assert(sizeof(BlindableBaseComponent_Authority_RemoveBlindingEffector) == 0x000010, "Wrong size on BlindableBaseComponent_Authority_RemoveBlindingEffector");
static_assert(offsetof(BlindableBaseComponent_Authority_RemoveBlindingEffector, effector) == 0x000000, "Member 'BlindableBaseComponent_Authority_RemoveBlindingEffector::effector' has a wrong offset!");

// Function DeadByDaylight.BlindableBaseComponent.OnChargeableCompletionPercentChanged
// 0x0010 (0x0010 - 0x0000)
struct BlindableBaseComponent_OnChargeableCompletionPercentChanged final
{
public:
	class UChargeableComponent*                   chargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         totalPercentComplete;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlindableBaseComponent_OnChargeableCompletionPercentChanged) == 0x000008, "Wrong alignment on BlindableBaseComponent_OnChargeableCompletionPercentChanged");
static_assert(sizeof(BlindableBaseComponent_OnChargeableCompletionPercentChanged) == 0x000010, "Wrong size on BlindableBaseComponent_OnChargeableCompletionPercentChanged");
static_assert(offsetof(BlindableBaseComponent_OnChargeableCompletionPercentChanged, chargeableComponent) == 0x000000, "Member 'BlindableBaseComponent_OnChargeableCompletionPercentChanged::chargeableComponent' has a wrong offset!");
static_assert(offsetof(BlindableBaseComponent_OnChargeableCompletionPercentChanged, totalPercentComplete) == 0x000008, "Member 'BlindableBaseComponent_OnChargeableCompletionPercentChanged::totalPercentComplete' has a wrong offset!");

// Function DeadByDaylight.BlindableBaseComponent.SetChargeable
// 0x0008 (0x0008 - 0x0000)
struct BlindableBaseComponent_SetChargeable final
{
public:
	class UChargeableComponent*                   value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlindableBaseComponent_SetChargeable) == 0x000008, "Wrong alignment on BlindableBaseComponent_SetChargeable");
static_assert(sizeof(BlindableBaseComponent_SetChargeable) == 0x000008, "Wrong size on BlindableBaseComponent_SetChargeable");
static_assert(offsetof(BlindableBaseComponent_SetChargeable, value) == 0x000000, "Member 'BlindableBaseComponent_SetChargeable::value' has a wrong offset!");

// Function DeadByDaylight.BlindableBaseComponent.IsBlinded
// 0x0001 (0x0001 - 0x0000)
struct BlindableBaseComponent_IsBlinded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlindableBaseComponent_IsBlinded) == 0x000001, "Wrong alignment on BlindableBaseComponent_IsBlinded");
static_assert(sizeof(BlindableBaseComponent_IsBlinded) == 0x000001, "Wrong size on BlindableBaseComponent_IsBlinded");
static_assert(offsetof(BlindableBaseComponent_IsBlinded, ReturnValue) == 0x000000, "Member 'BlindableBaseComponent_IsBlinded::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DirectionalMinigameSurvivorComponent.Client_StopInteraction
// 0x0010 (0x0010 - 0x0000)
struct DirectionalMinigameSurvivorComponent_Client_StopInteraction final
{
public:
	class UDirectionalMinigameComponent*          directionalMinigame;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDirectionalMinigameResult                    result;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DirectionalMinigameSurvivorComponent_Client_StopInteraction) == 0x000008, "Wrong alignment on DirectionalMinigameSurvivorComponent_Client_StopInteraction");
static_assert(sizeof(DirectionalMinigameSurvivorComponent_Client_StopInteraction) == 0x000010, "Wrong size on DirectionalMinigameSurvivorComponent_Client_StopInteraction");
static_assert(offsetof(DirectionalMinigameSurvivorComponent_Client_StopInteraction, directionalMinigame) == 0x000000, "Member 'DirectionalMinigameSurvivorComponent_Client_StopInteraction::directionalMinigame' has a wrong offset!");
static_assert(offsetof(DirectionalMinigameSurvivorComponent_Client_StopInteraction, result) == 0x000008, "Member 'DirectionalMinigameSurvivorComponent_Client_StopInteraction::result' has a wrong offset!");

// Function DeadByDaylight.DirectionalMinigameSurvivorComponent.Server_CancelMinigame
// 0x0008 (0x0008 - 0x0000)
struct DirectionalMinigameSurvivorComponent_Server_CancelMinigame final
{
public:
	class UDirectionalMinigameComponent*          directionalMinigame;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionalMinigameSurvivorComponent_Server_CancelMinigame) == 0x000008, "Wrong alignment on DirectionalMinigameSurvivorComponent_Server_CancelMinigame");
static_assert(sizeof(DirectionalMinigameSurvivorComponent_Server_CancelMinigame) == 0x000008, "Wrong size on DirectionalMinigameSurvivorComponent_Server_CancelMinigame");
static_assert(offsetof(DirectionalMinigameSurvivorComponent_Server_CancelMinigame, directionalMinigame) == 0x000000, "Member 'DirectionalMinigameSurvivorComponent_Server_CancelMinigame::directionalMinigame' has a wrong offset!");

// Function DeadByDaylight.DirectionalMinigameSurvivorComponent.Server_EnterKey
// 0x0010 (0x0010 - 0x0000)
struct DirectionalMinigameSurvivorComponent_Server_EnterKey final
{
public:
	class UDirectionalMinigameComponent*          directionalMinigame;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDirectionalInputKey                          key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DirectionalMinigameSurvivorComponent_Server_EnterKey) == 0x000008, "Wrong alignment on DirectionalMinigameSurvivorComponent_Server_EnterKey");
static_assert(sizeof(DirectionalMinigameSurvivorComponent_Server_EnterKey) == 0x000010, "Wrong size on DirectionalMinigameSurvivorComponent_Server_EnterKey");
static_assert(offsetof(DirectionalMinigameSurvivorComponent_Server_EnterKey, directionalMinigame) == 0x000000, "Member 'DirectionalMinigameSurvivorComponent_Server_EnterKey::directionalMinigame' has a wrong offset!");
static_assert(offsetof(DirectionalMinigameSurvivorComponent_Server_EnterKey, key) == 0x000008, "Member 'DirectionalMinigameSurvivorComponent_Server_EnterKey::key' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.ActionRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_ActionRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_ActionRequest) == 0x000008, "Wrong alignment on DBDAIController_ActionRequest");
static_assert(sizeof(DBDAIController_ActionRequest) == 0x000008, "Wrong size on DBDAIController_ActionRequest");
static_assert(offsetof(DBDAIController_ActionRequest, requester) == 0x000000, "Member 'DBDAIController_ActionRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.AttackRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_AttackRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_AttackRequest) == 0x000008, "Wrong alignment on DBDAIController_AttackRequest");
static_assert(sizeof(DBDAIController_AttackRequest) == 0x000008, "Wrong size on DBDAIController_AttackRequest");
static_assert(offsetof(DBDAIController_AttackRequest, requester) == 0x000000, "Member 'DBDAIController_AttackRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.CancelMinigameRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_CancelMinigameRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_CancelMinigameRequest) == 0x000008, "Wrong alignment on DBDAIController_CancelMinigameRequest");
static_assert(sizeof(DBDAIController_CancelMinigameRequest) == 0x000008, "Wrong size on DBDAIController_CancelMinigameRequest");
static_assert(offsetof(DBDAIController_CancelMinigameRequest, requester) == 0x000000, "Member 'DBDAIController_CancelMinigameRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.DropItemRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_DropItemRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_DropItemRequest) == 0x000008, "Wrong alignment on DBDAIController_DropItemRequest");
static_assert(sizeof(DBDAIController_DropItemRequest) == 0x000008, "Wrong size on DBDAIController_DropItemRequest");
static_assert(offsetof(DBDAIController_DropItemRequest, requester) == 0x000000, "Member 'DBDAIController_DropItemRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndActionRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndActionRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndActionRequest) == 0x000008, "Wrong alignment on DBDAIController_EndActionRequest");
static_assert(sizeof(DBDAIController_EndActionRequest) == 0x000008, "Wrong size on DBDAIController_EndActionRequest");
static_assert(offsetof(DBDAIController_EndActionRequest, requester) == 0x000000, "Member 'DBDAIController_EndActionRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndDropItemRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndDropItemRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndDropItemRequest) == 0x000008, "Wrong alignment on DBDAIController_EndDropItemRequest");
static_assert(sizeof(DBDAIController_EndDropItemRequest) == 0x000008, "Wrong size on DBDAIController_EndDropItemRequest");
static_assert(offsetof(DBDAIController_EndDropItemRequest, requester) == 0x000000, "Member 'DBDAIController_EndDropItemRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndFastInteractRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndFastInteractRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndFastInteractRequest) == 0x000008, "Wrong alignment on DBDAIController_EndFastInteractRequest");
static_assert(sizeof(DBDAIController_EndFastInteractRequest) == 0x000008, "Wrong size on DBDAIController_EndFastInteractRequest");
static_assert(offsetof(DBDAIController_EndFastInteractRequest, requester) == 0x000000, "Member 'DBDAIController_EndFastInteractRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndInteractRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndInteractRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndInteractRequest) == 0x000008, "Wrong alignment on DBDAIController_EndInteractRequest");
static_assert(sizeof(DBDAIController_EndInteractRequest) == 0x000008, "Wrong size on DBDAIController_EndInteractRequest");
static_assert(offsetof(DBDAIController_EndInteractRequest, requester) == 0x000000, "Member 'DBDAIController_EndInteractRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndRunRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndRunRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndRunRequest) == 0x000008, "Wrong alignment on DBDAIController_EndRunRequest");
static_assert(sizeof(DBDAIController_EndRunRequest) == 0x000008, "Wrong size on DBDAIController_EndRunRequest");
static_assert(offsetof(DBDAIController_EndRunRequest, requester) == 0x000000, "Member 'DBDAIController_EndRunRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndSecondAttackRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndSecondAttackRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndSecondAttackRequest) == 0x000008, "Wrong alignment on DBDAIController_EndSecondAttackRequest");
static_assert(sizeof(DBDAIController_EndSecondAttackRequest) == 0x000008, "Wrong size on DBDAIController_EndSecondAttackRequest");
static_assert(offsetof(DBDAIController_EndSecondAttackRequest, requester) == 0x000000, "Member 'DBDAIController_EndSecondAttackRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndUseItemRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndUseItemRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndUseItemRequest) == 0x000008, "Wrong alignment on DBDAIController_EndUseItemRequest");
static_assert(sizeof(DBDAIController_EndUseItemRequest) == 0x000008, "Wrong size on DBDAIController_EndUseItemRequest");
static_assert(offsetof(DBDAIController_EndUseItemRequest, requester) == 0x000000, "Member 'DBDAIController_EndUseItemRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.FastInteractRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_FastInteractRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_FastInteractRequest) == 0x000008, "Wrong alignment on DBDAIController_FastInteractRequest");
static_assert(sizeof(DBDAIController_FastInteractRequest) == 0x000008, "Wrong size on DBDAIController_FastInteractRequest");
static_assert(offsetof(DBDAIController_FastInteractRequest, requester) == 0x000000, "Member 'DBDAIController_FastInteractRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.Gesture01Request
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_Gesture01Request final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_Gesture01Request) == 0x000008, "Wrong alignment on DBDAIController_Gesture01Request");
static_assert(sizeof(DBDAIController_Gesture01Request) == 0x000008, "Wrong size on DBDAIController_Gesture01Request");
static_assert(offsetof(DBDAIController_Gesture01Request, requester) == 0x000000, "Member 'DBDAIController_Gesture01Request::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.Gesture02Request
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_Gesture02Request final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_Gesture02Request) == 0x000008, "Wrong alignment on DBDAIController_Gesture02Request");
static_assert(sizeof(DBDAIController_Gesture02Request) == 0x000008, "Wrong size on DBDAIController_Gesture02Request");
static_assert(offsetof(DBDAIController_Gesture02Request, requester) == 0x000000, "Member 'DBDAIController_Gesture02Request::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.Gesture03Request
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_Gesture03Request final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_Gesture03Request) == 0x000008, "Wrong alignment on DBDAIController_Gesture03Request");
static_assert(sizeof(DBDAIController_Gesture03Request) == 0x000008, "Wrong size on DBDAIController_Gesture03Request");
static_assert(offsetof(DBDAIController_Gesture03Request, requester) == 0x000000, "Member 'DBDAIController_Gesture03Request::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.Gesture04Request
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_Gesture04Request final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_Gesture04Request) == 0x000008, "Wrong alignment on DBDAIController_Gesture04Request");
static_assert(sizeof(DBDAIController_Gesture04Request) == 0x000008, "Wrong size on DBDAIController_Gesture04Request");
static_assert(offsetof(DBDAIController_Gesture04Request, requester) == 0x000000, "Member 'DBDAIController_Gesture04Request::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.InteractRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_InteractRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_InteractRequest) == 0x000008, "Wrong alignment on DBDAIController_InteractRequest");
static_assert(sizeof(DBDAIController_InteractRequest) == 0x000008, "Wrong size on DBDAIController_InteractRequest");
static_assert(offsetof(DBDAIController_InteractRequest, requester) == 0x000000, "Member 'DBDAIController_InteractRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.InteractRequestRelease
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_InteractRequestRelease final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_InteractRequestRelease) == 0x000008, "Wrong alignment on DBDAIController_InteractRequestRelease");
static_assert(sizeof(DBDAIController_InteractRequestRelease) == 0x000008, "Wrong size on DBDAIController_InteractRequestRelease");
static_assert(offsetof(DBDAIController_InteractRequestRelease, requester) == 0x000000, "Member 'DBDAIController_InteractRequestRelease::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.RunRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_RunRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_RunRequest) == 0x000008, "Wrong alignment on DBDAIController_RunRequest");
static_assert(sizeof(DBDAIController_RunRequest) == 0x000008, "Wrong size on DBDAIController_RunRequest");
static_assert(offsetof(DBDAIController_RunRequest, requester) == 0x000000, "Member 'DBDAIController_RunRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.SecondaryActionRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_SecondaryActionRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_SecondaryActionRequest) == 0x000008, "Wrong alignment on DBDAIController_SecondaryActionRequest");
static_assert(sizeof(DBDAIController_SecondaryActionRequest) == 0x000008, "Wrong size on DBDAIController_SecondaryActionRequest");
static_assert(offsetof(DBDAIController_SecondaryActionRequest, requester) == 0x000000, "Member 'DBDAIController_SecondaryActionRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.SecondAttackRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_SecondAttackRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_SecondAttackRequest) == 0x000008, "Wrong alignment on DBDAIController_SecondAttackRequest");
static_assert(sizeof(DBDAIController_SecondAttackRequest) == 0x000008, "Wrong size on DBDAIController_SecondAttackRequest");
static_assert(offsetof(DBDAIController_SecondAttackRequest, requester) == 0x000000, "Member 'DBDAIController_SecondAttackRequest::requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.Server_SetAIPlayerRank
// 0x0004 (0x0004 - 0x0000)
struct DBDAIController_Server_SetAIPlayerRank final
{
public:
	int32                                         playerRank;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_Server_SetAIPlayerRank) == 0x000004, "Wrong alignment on DBDAIController_Server_SetAIPlayerRank");
static_assert(sizeof(DBDAIController_Server_SetAIPlayerRank) == 0x000004, "Wrong size on DBDAIController_Server_SetAIPlayerRank");
static_assert(offsetof(DBDAIController_Server_SetAIPlayerRank, playerRank) == 0x000000, "Member 'DBDAIController_Server_SetAIPlayerRank::playerRank' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.SetCharacterMovement
// 0x0018 (0x0018 - 0x0000)
struct DBDAIController_SetCharacterMovement final
{
public:
	ECharacterMovementTypes                       movementTypes;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          requester;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAIController_SetCharacterMovement) == 0x000008, "Wrong alignment on DBDAIController_SetCharacterMovement");
static_assert(sizeof(DBDAIController_SetCharacterMovement) == 0x000018, "Wrong size on DBDAIController_SetCharacterMovement");
static_assert(offsetof(DBDAIController_SetCharacterMovement, movementTypes) == 0x000000, "Member 'DBDAIController_SetCharacterMovement::movementTypes' has a wrong offset!");
static_assert(offsetof(DBDAIController_SetCharacterMovement, requester) == 0x000008, "Member 'DBDAIController_SetCharacterMovement::requester' has a wrong offset!");
static_assert(offsetof(DBDAIController_SetCharacterMovement, ReturnValue) == 0x000010, "Member 'DBDAIController_SetCharacterMovement::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.StruggleRequest
// 0x0010 (0x0010 - 0x0000)
struct DBDAIController_StruggleRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         input;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAIController_StruggleRequest) == 0x000008, "Wrong alignment on DBDAIController_StruggleRequest");
static_assert(sizeof(DBDAIController_StruggleRequest) == 0x000010, "Wrong size on DBDAIController_StruggleRequest");
static_assert(offsetof(DBDAIController_StruggleRequest, requester) == 0x000000, "Member 'DBDAIController_StruggleRequest::requester' has a wrong offset!");
static_assert(offsetof(DBDAIController_StruggleRequest, input) == 0x000008, "Member 'DBDAIController_StruggleRequest::input' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.UseItemRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_UseItemRequest final
{
public:
	const class UObject*                          requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_UseItemRequest) == 0x000008, "Wrong alignment on DBDAIController_UseItemRequest");
static_assert(sizeof(DBDAIController_UseItemRequest) == 0x000008, "Wrong size on DBDAIController_UseItemRequest");
static_assert(offsetof(DBDAIController_UseItemRequest, requester) == 0x000000, "Member 'DBDAIController_UseItemRequest::requester' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierCondition.SetOwningGameplayModifier
// 0x0008 (0x0008 - 0x0000)
struct GameplayModifierCondition_SetOwningGameplayModifier final
{
public:
	class UGameplayModifierContainer*             OwningGameplayModifier;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierCondition_SetOwningGameplayModifier) == 0x000008, "Wrong alignment on GameplayModifierCondition_SetOwningGameplayModifier");
static_assert(sizeof(GameplayModifierCondition_SetOwningGameplayModifier) == 0x000008, "Wrong size on GameplayModifierCondition_SetOwningGameplayModifier");
static_assert(offsetof(GameplayModifierCondition_SetOwningGameplayModifier, OwningGameplayModifier) == 0x000000, "Member 'GameplayModifierCondition_SetOwningGameplayModifier::OwningGameplayModifier' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierCondition.GetOwningGameplayModifier
// 0x0008 (0x0008 - 0x0000)
struct GameplayModifierCondition_GetOwningGameplayModifier final
{
public:
	class UGameplayModifierContainer*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierCondition_GetOwningGameplayModifier) == 0x000008, "Wrong alignment on GameplayModifierCondition_GetOwningGameplayModifier");
static_assert(sizeof(GameplayModifierCondition_GetOwningGameplayModifier) == 0x000008, "Wrong size on GameplayModifierCondition_GetOwningGameplayModifier");
static_assert(offsetof(GameplayModifierCondition_GetOwningGameplayModifier, ReturnValue) == 0x000000, "Member 'GameplayModifierCondition_GetOwningGameplayModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierCondition.GetOwningPlayer
// 0x0008 (0x0008 - 0x0000)
struct GameplayModifierCondition_GetOwningPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierCondition_GetOwningPlayer) == 0x000008, "Wrong alignment on GameplayModifierCondition_GetOwningPlayer");
static_assert(sizeof(GameplayModifierCondition_GetOwningPlayer) == 0x000008, "Wrong size on GameplayModifierCondition_GetOwningPlayer");
static_assert(offsetof(GameplayModifierCondition_GetOwningPlayer, ReturnValue) == 0x000000, "Member 'GameplayModifierCondition_GetOwningPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierCondition.IsApplicable
// 0x0001 (0x0001 - 0x0000)
struct GameplayModifierCondition_IsApplicable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierCondition_IsApplicable) == 0x000001, "Wrong alignment on GameplayModifierCondition_IsApplicable");
static_assert(sizeof(GameplayModifierCondition_IsApplicable) == 0x000001, "Wrong size on GameplayModifierCondition_IsApplicable");
static_assert(offsetof(GameplayModifierCondition_IsApplicable, ReturnValue) == 0x000000, "Member 'GameplayModifierCondition_IsApplicable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayNotificationManager.FireGameplayNotification
// 0x0060 (0x0060 - 0x0000)
struct GameplayNotificationManager_FireGameplayNotification final
{
public:
	struct FGameplayNotificationData              notificationData;                                  // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          addToHistory;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayNotificationManager_FireGameplayNotification) == 0x000008, "Wrong alignment on GameplayNotificationManager_FireGameplayNotification");
static_assert(sizeof(GameplayNotificationManager_FireGameplayNotification) == 0x000060, "Wrong size on GameplayNotificationManager_FireGameplayNotification");
static_assert(offsetof(GameplayNotificationManager_FireGameplayNotification, notificationData) == 0x000000, "Member 'GameplayNotificationManager_FireGameplayNotification::notificationData' has a wrong offset!");
static_assert(offsetof(GameplayNotificationManager_FireGameplayNotification, addToHistory) == 0x000058, "Member 'GameplayNotificationManager_FireGameplayNotification::addToHistory' has a wrong offset!");

// Function DeadByDaylight.GameplayNotificationManager.Multicast_FireGameplayNotification
// 0x0010 (0x0010 - 0x0000)
struct GameplayNotificationManager_Multicast_FireGameplayNotification final
{
public:
	const class UGameplayModifierContainer*       modifierContainer;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          addToHistory;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayNotificationManager_Multicast_FireGameplayNotification) == 0x000008, "Wrong alignment on GameplayNotificationManager_Multicast_FireGameplayNotification");
static_assert(sizeof(GameplayNotificationManager_Multicast_FireGameplayNotification) == 0x000010, "Wrong size on GameplayNotificationManager_Multicast_FireGameplayNotification");
static_assert(offsetof(GameplayNotificationManager_Multicast_FireGameplayNotification, modifierContainer) == 0x000000, "Member 'GameplayNotificationManager_Multicast_FireGameplayNotification::modifierContainer' has a wrong offset!");
static_assert(offsetof(GameplayNotificationManager_Multicast_FireGameplayNotification, addToHistory) == 0x000008, "Member 'GameplayNotificationManager_Multicast_FireGameplayNotification::addToHistory' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.AddDangerPredictionObject
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_AddDangerPredictionObject final
{
public:
	class UDBDDangerPredictionComponent*          toAdd;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_AddDangerPredictionObject) == 0x000008, "Wrong alignment on DBDGameState_AddDangerPredictionObject");
static_assert(sizeof(DBDGameState_AddDangerPredictionObject) == 0x000008, "Wrong size on DBDGameState_AddDangerPredictionObject");
static_assert(offsetof(DBDGameState_AddDangerPredictionObject, toAdd) == 0x000000, "Member 'DBDGameState_AddDangerPredictionObject::toAdd' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.AddTrap
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_AddTrap final
{
public:
	class AInteractable*                          toAdd;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_AddTrap) == 0x000008, "Wrong alignment on DBDGameState_AddTrap");
static_assert(sizeof(DBDGameState_AddTrap) == 0x000008, "Wrong size on DBDGameState_AddTrap");
static_assert(offsetof(DBDGameState_AddTrap, toAdd) == 0x000000, "Member 'DBDGameState_AddTrap::toAdd' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_EvaluateObsessionTarget
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_Authority_EvaluateObsessionTarget final
{
public:
	class ADBDPlayer*                             potentialTarget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_EvaluateObsessionTarget) == 0x000008, "Wrong alignment on DBDGameState_Authority_EvaluateObsessionTarget");
static_assert(sizeof(DBDGameState_Authority_EvaluateObsessionTarget) == 0x000008, "Wrong size on DBDGameState_Authority_EvaluateObsessionTarget");
static_assert(offsetof(DBDGameState_Authority_EvaluateObsessionTarget, potentialTarget) == 0x000000, "Member 'DBDGameState_Authority_EvaluateObsessionTarget::potentialTarget' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_SetEscapeDoorOpened
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Authority_SetEscapeDoorOpened final
{
public:
	bool                                          opened;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_SetEscapeDoorOpened) == 0x000001, "Wrong alignment on DBDGameState_Authority_SetEscapeDoorOpened");
static_assert(sizeof(DBDGameState_Authority_SetEscapeDoorOpened) == 0x000001, "Wrong size on DBDGameState_Authority_SetEscapeDoorOpened");
static_assert(offsetof(DBDGameState_Authority_SetEscapeDoorOpened, opened) == 0x000000, "Member 'DBDGameState_Authority_SetEscapeDoorOpened::opened' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_SetGameLevelEnded
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Authority_SetGameLevelEnded final
{
public:
	EEndGameReason                                endGameReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_SetGameLevelEnded) == 0x000001, "Wrong alignment on DBDGameState_Authority_SetGameLevelEnded");
static_assert(sizeof(DBDGameState_Authority_SetGameLevelEnded) == 0x000001, "Wrong size on DBDGameState_Authority_SetGameLevelEnded");
static_assert(offsetof(DBDGameState_Authority_SetGameLevelEnded, endGameReason) == 0x000000, "Member 'DBDGameState_Authority_SetGameLevelEnded::endGameReason' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_SetGameSelectedOffering
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_Authority_SetGameSelectedOffering final
{
public:
	TArray<struct FSelectedOffering>              offerings;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_SetGameSelectedOffering) == 0x000008, "Wrong alignment on DBDGameState_Authority_SetGameSelectedOffering");
static_assert(sizeof(DBDGameState_Authority_SetGameSelectedOffering) == 0x000010, "Wrong size on DBDGameState_Authority_SetGameSelectedOffering");
static_assert(offsetof(DBDGameState_Authority_SetGameSelectedOffering, offerings) == 0x000000, "Member 'DBDGameState_Authority_SetGameSelectedOffering::offerings' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_SetHatchOpen
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Authority_SetHatchOpen final
{
public:
	bool                                          opened;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_SetHatchOpen) == 0x000001, "Wrong alignment on DBDGameState_Authority_SetHatchOpen");
static_assert(sizeof(DBDGameState_Authority_SetHatchOpen) == 0x000001, "Wrong size on DBDGameState_Authority_SetHatchOpen");
static_assert(offsetof(DBDGameState_Authority_SetHatchOpen, opened) == 0x000000, "Member 'DBDGameState_Authority_SetHatchOpen::opened' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_SetObsessionTarget
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_Authority_SetObsessionTarget final
{
public:
	class ACamperPlayer*                          obsessionTarget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_SetObsessionTarget) == 0x000008, "Wrong alignment on DBDGameState_Authority_SetObsessionTarget");
static_assert(sizeof(DBDGameState_Authority_SetObsessionTarget) == 0x000008, "Wrong size on DBDGameState_Authority_SetObsessionTarget");
static_assert(offsetof(DBDGameState_Authority_SetObsessionTarget, obsessionTarget) == 0x000000, "Member 'DBDGameState_Authority_SetObsessionTarget::obsessionTarget' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_SetSurvivorLeft
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_Authority_SetSurvivorLeft final
{
public:
	int32                                         survivorRemaining;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_SetSurvivorLeft) == 0x000004, "Wrong alignment on DBDGameState_Authority_SetSurvivorLeft");
static_assert(sizeof(DBDGameState_Authority_SetSurvivorLeft) == 0x000004, "Wrong size on DBDGameState_Authority_SetSurvivorLeft");
static_assert(offsetof(DBDGameState_Authority_SetSurvivorLeft, survivorRemaining) == 0x000000, "Member 'DBDGameState_Authority_SetSurvivorLeft::survivorRemaining' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_SignalEscapeDoorActivated
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Authority_SignalEscapeDoorActivated final
{
public:
	bool                                          newEscapeDoorActivated;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_SignalEscapeDoorActivated) == 0x000001, "Wrong alignment on DBDGameState_Authority_SignalEscapeDoorActivated");
static_assert(sizeof(DBDGameState_Authority_SignalEscapeDoorActivated) == 0x000001, "Wrong size on DBDGameState_Authority_SignalEscapeDoorActivated");
static_assert(offsetof(DBDGameState_Authority_SignalEscapeDoorActivated, newEscapeDoorActivated) == 0x000000, "Member 'DBDGameState_Authority_SignalEscapeDoorActivated::newEscapeDoorActivated' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.CallOnIntroComplete
// 0x0014 (0x0014 - 0x0000)
struct DBDGameState_CallOnIntroComplete final
{
public:
	TDelegate<void()>                             callback;                                          // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_CallOnIntroComplete) == 0x000004, "Wrong alignment on DBDGameState_CallOnIntroComplete");
static_assert(sizeof(DBDGameState_CallOnIntroComplete) == 0x000014, "Wrong size on DBDGameState_CallOnIntroComplete");
static_assert(offsetof(DBDGameState_CallOnIntroComplete, callback) == 0x000000, "Member 'DBDGameState_CallOnIntroComplete::callback' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.CallOnLevelReadyToPlay
// 0x0014 (0x0014 - 0x0000)
struct DBDGameState_CallOnLevelReadyToPlay final
{
public:
	TDelegate<void()>                             callback;                                          // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_CallOnLevelReadyToPlay) == 0x000004, "Wrong alignment on DBDGameState_CallOnLevelReadyToPlay");
static_assert(sizeof(DBDGameState_CallOnLevelReadyToPlay) == 0x000014, "Wrong size on DBDGameState_CallOnLevelReadyToPlay");
static_assert(offsetof(DBDGameState_CallOnLevelReadyToPlay, callback) == 0x000000, "Member 'DBDGameState_CallOnLevelReadyToPlay::callback' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.CallOnSlasherSet
// 0x0014 (0x0014 - 0x0000)
struct DBDGameState_CallOnSlasherSet final
{
public:
	TDelegate<void(class ASlasherPlayer* slasher)> callback;                                         // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_CallOnSlasherSet) == 0x000004, "Wrong alignment on DBDGameState_CallOnSlasherSet");
static_assert(sizeof(DBDGameState_CallOnSlasherSet) == 0x000014, "Wrong size on DBDGameState_CallOnSlasherSet");
static_assert(offsetof(DBDGameState_CallOnSlasherSet, callback) == 0x000000, "Member 'DBDGameState_CallOnSlasherSet::callback' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetDangerPredictionObjects
// 0x0018 (0x0018 - 0x0000)
struct DBDGameState_GetDangerPredictionObjects final
{
public:
	bool                                          isObjectDynamic;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDBDDangerPredictionComponent*>  ReturnValue;                                       // 0x0008(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetDangerPredictionObjects) == 0x000008, "Wrong alignment on DBDGameState_GetDangerPredictionObjects");
static_assert(sizeof(DBDGameState_GetDangerPredictionObjects) == 0x000018, "Wrong size on DBDGameState_GetDangerPredictionObjects");
static_assert(offsetof(DBDGameState_GetDangerPredictionObjects, isObjectDynamic) == 0x000000, "Member 'DBDGameState_GetDangerPredictionObjects::isObjectDynamic' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetDangerPredictionObjects, ReturnValue) == 0x000008, "Member 'DBDGameState_GetDangerPredictionObjects::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsObsessionTargetAlive
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsObsessionTargetAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsObsessionTargetAlive) == 0x000001, "Wrong alignment on DBDGameState_IsObsessionTargetAlive");
static_assert(sizeof(DBDGameState_IsObsessionTargetAlive) == 0x000001, "Wrong size on DBDGameState_IsObsessionTargetAlive");
static_assert(offsetof(DBDGameState_IsObsessionTargetAlive, ReturnValue) == 0x000000, "Member 'DBDGameState_IsObsessionTargetAlive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsObsessionTargetAliveInLevel
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsObsessionTargetAliveInLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsObsessionTargetAliveInLevel) == 0x000001, "Wrong alignment on DBDGameState_IsObsessionTargetAliveInLevel");
static_assert(sizeof(DBDGameState_IsObsessionTargetAliveInLevel) == 0x000001, "Wrong size on DBDGameState_IsObsessionTargetAliveInLevel");
static_assert(offsetof(DBDGameState_IsObsessionTargetAliveInLevel, ReturnValue) == 0x000000, "Member 'DBDGameState_IsObsessionTargetAliveInLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SendEnsureToClients
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_Multicast_SendEnsureToClients final
{
public:
	class FString                                 ensure;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SendEnsureToClients) == 0x000008, "Wrong alignment on DBDGameState_Multicast_SendEnsureToClients");
static_assert(sizeof(DBDGameState_Multicast_SendEnsureToClients) == 0x000010, "Wrong size on DBDGameState_Multicast_SendEnsureToClients");
static_assert(offsetof(DBDGameState_Multicast_SendEnsureToClients, ensure) == 0x000000, "Member 'DBDGameState_Multicast_SendEnsureToClients::ensure' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SendHVSPlusState
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Multicast_SendHVSPlusState final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SendHVSPlusState) == 0x000001, "Wrong alignment on DBDGameState_Multicast_SendHVSPlusState");
static_assert(sizeof(DBDGameState_Multicast_SendHVSPlusState) == 0x000001, "Wrong size on DBDGameState_Multicast_SendHVSPlusState");
static_assert(offsetof(DBDGameState_Multicast_SendHVSPlusState, enabled) == 0x000000, "Member 'DBDGameState_Multicast_SendHVSPlusState::enabled' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SetBuiltLevelData
// 0x00B0 (0x00B0 - 0x0000)
struct DBDGameState_Multicast_SetBuiltLevelData final
{
public:
	struct FBuiltLevelData                        builtLevelData;                                    // 0x0000(0x00B0)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SetBuiltLevelData) == 0x000008, "Wrong alignment on DBDGameState_Multicast_SetBuiltLevelData");
static_assert(sizeof(DBDGameState_Multicast_SetBuiltLevelData) == 0x0000B0, "Wrong size on DBDGameState_Multicast_SetBuiltLevelData");
static_assert(offsetof(DBDGameState_Multicast_SetBuiltLevelData, builtLevelData) == 0x000000, "Member 'DBDGameState_Multicast_SetBuiltLevelData::builtLevelData' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SetGameEnded
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Multicast_SetGameEnded final
{
public:
	bool                                          hasServerLeftGame;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SetGameEnded) == 0x000001, "Wrong alignment on DBDGameState_Multicast_SetGameEnded");
static_assert(sizeof(DBDGameState_Multicast_SetGameEnded) == 0x000001, "Wrong size on DBDGameState_Multicast_SetGameEnded");
static_assert(offsetof(DBDGameState_Multicast_SetGameEnded, hasServerLeftGame) == 0x000000, "Member 'DBDGameState_Multicast_SetGameEnded::hasServerLeftGame' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SetGameLevelEnded
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Multicast_SetGameLevelEnded final
{
public:
	EEndGameReason                                endGameReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SetGameLevelEnded) == 0x000001, "Wrong alignment on DBDGameState_Multicast_SetGameLevelEnded");
static_assert(sizeof(DBDGameState_Multicast_SetGameLevelEnded) == 0x000001, "Wrong size on DBDGameState_Multicast_SetGameLevelEnded");
static_assert(offsetof(DBDGameState_Multicast_SetGameLevelEnded, endGameReason) == 0x000000, "Member 'DBDGameState_Multicast_SetGameLevelEnded::endGameReason' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SetGameLevelLoaded
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Multicast_SetGameLevelLoaded final
{
public:
	bool                                          gameLevelLoaded;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SetGameLevelLoaded) == 0x000001, "Wrong alignment on DBDGameState_Multicast_SetGameLevelLoaded");
static_assert(sizeof(DBDGameState_Multicast_SetGameLevelLoaded) == 0x000001, "Wrong size on DBDGameState_Multicast_SetGameLevelLoaded");
static_assert(offsetof(DBDGameState_Multicast_SetGameLevelLoaded, gameLevelLoaded) == 0x000000, "Member 'DBDGameState_Multicast_SetGameLevelLoaded::gameLevelLoaded' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SetLostServerConnection
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Multicast_SetLostServerConnection final
{
public:
	bool                                          hasLostServerConnection;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SetLostServerConnection) == 0x000001, "Wrong alignment on DBDGameState_Multicast_SetLostServerConnection");
static_assert(sizeof(DBDGameState_Multicast_SetLostServerConnection) == 0x000001, "Wrong size on DBDGameState_Multicast_SetLostServerConnection");
static_assert(offsetof(DBDGameState_Multicast_SetLostServerConnection, hasLostServerConnection) == 0x000000, "Member 'DBDGameState_Multicast_SetLostServerConnection::hasLostServerConnection' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SetServerLeftGame
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Multicast_SetServerLeftGame final
{
public:
	bool                                          hasServerLeftGame;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SetServerLeftGame) == 0x000001, "Wrong alignment on DBDGameState_Multicast_SetServerLeftGame");
static_assert(sizeof(DBDGameState_Multicast_SetServerLeftGame) == 0x000001, "Wrong size on DBDGameState_Multicast_SetServerLeftGame");
static_assert(offsetof(DBDGameState_Multicast_SetServerLeftGame, hasServerLeftGame) == 0x000000, "Member 'DBDGameState_Multicast_SetServerLeftGame::hasServerLeftGame' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_UpdateCharacterFromGamePreset
// 0x0098 (0x0098 - 0x0000)
struct DBDGameState_Multicast_UpdateCharacterFromGamePreset final
{
public:
	class ADBDPlayerState_Menu*                   playerState_Menu;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGamePresetData                        gamePresetData;                                    // 0x0008(0x0090)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_UpdateCharacterFromGamePreset) == 0x000008, "Wrong alignment on DBDGameState_Multicast_UpdateCharacterFromGamePreset");
static_assert(sizeof(DBDGameState_Multicast_UpdateCharacterFromGamePreset) == 0x000098, "Wrong size on DBDGameState_Multicast_UpdateCharacterFromGamePreset");
static_assert(offsetof(DBDGameState_Multicast_UpdateCharacterFromGamePreset, playerState_Menu) == 0x000000, "Member 'DBDGameState_Multicast_UpdateCharacterFromGamePreset::playerState_Menu' has a wrong offset!");
static_assert(offsetof(DBDGameState_Multicast_UpdateCharacterFromGamePreset, gamePresetData) == 0x000008, "Member 'DBDGameState_Multicast_UpdateCharacterFromGamePreset::gamePresetData' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnPlayerGameStateChangedAddIfKilled
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_OnPlayerGameStateChangedAddIfKilled final
{
public:
	class ADBDPlayerState*                        playerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameState                                    gameState;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameState_OnPlayerGameStateChangedAddIfKilled) == 0x000008, "Wrong alignment on DBDGameState_OnPlayerGameStateChangedAddIfKilled");
static_assert(sizeof(DBDGameState_OnPlayerGameStateChangedAddIfKilled) == 0x000010, "Wrong size on DBDGameState_OnPlayerGameStateChangedAddIfKilled");
static_assert(offsetof(DBDGameState_OnPlayerGameStateChangedAddIfKilled, playerState) == 0x000000, "Member 'DBDGameState_OnPlayerGameStateChangedAddIfKilled::playerState' has a wrong offset!");
static_assert(offsetof(DBDGameState_OnPlayerGameStateChangedAddIfKilled, gameState) == 0x000008, "Member 'DBDGameState_OnPlayerGameStateChangedAddIfKilled::gameState' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnRep_ActivatedGeneratorCount
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_OnRep_ActivatedGeneratorCount final
{
public:
	int32                                         oldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnRep_ActivatedGeneratorCount) == 0x000004, "Wrong alignment on DBDGameState_OnRep_ActivatedGeneratorCount");
static_assert(sizeof(DBDGameState_OnRep_ActivatedGeneratorCount) == 0x000004, "Wrong size on DBDGameState_OnRep_ActivatedGeneratorCount");
static_assert(offsetof(DBDGameState_OnRep_ActivatedGeneratorCount, oldValue) == 0x000000, "Member 'DBDGameState_OnRep_ActivatedGeneratorCount::oldValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnRep_EscapeDoorActivated
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_OnRep_EscapeDoorActivated final
{
public:
	bool                                          oldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnRep_EscapeDoorActivated) == 0x000001, "Wrong alignment on DBDGameState_OnRep_EscapeDoorActivated");
static_assert(sizeof(DBDGameState_OnRep_EscapeDoorActivated) == 0x000001, "Wrong size on DBDGameState_OnRep_EscapeDoorActivated");
static_assert(offsetof(DBDGameState_OnRep_EscapeDoorActivated, oldValue) == 0x000000, "Member 'DBDGameState_OnRep_EscapeDoorActivated::oldValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnRep_GameLevelLoadingStarted
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_OnRep_GameLevelLoadingStarted final
{
public:
	bool                                          oldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnRep_GameLevelLoadingStarted) == 0x000001, "Wrong alignment on DBDGameState_OnRep_GameLevelLoadingStarted");
static_assert(sizeof(DBDGameState_OnRep_GameLevelLoadingStarted) == 0x000001, "Wrong size on DBDGameState_OnRep_GameLevelLoadingStarted");
static_assert(offsetof(DBDGameState_OnRep_GameLevelLoadingStarted, oldValue) == 0x000000, "Member 'DBDGameState_OnRep_GameLevelLoadingStarted::oldValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnRep_HatchOpened
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_OnRep_HatchOpened final
{
public:
	bool                                          oldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnRep_HatchOpened) == 0x000001, "Wrong alignment on DBDGameState_OnRep_HatchOpened");
static_assert(sizeof(DBDGameState_OnRep_HatchOpened) == 0x000001, "Wrong size on DBDGameState_OnRep_HatchOpened");
static_assert(offsetof(DBDGameState_OnRep_HatchOpened, oldValue) == 0x000000, "Member 'DBDGameState_OnRep_HatchOpened::oldValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnRep_ObsessionTarget
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_OnRep_ObsessionTarget final
{
public:
	class ACamperPlayer*                          previousObsessionTarget;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnRep_ObsessionTarget) == 0x000008, "Wrong alignment on DBDGameState_OnRep_ObsessionTarget");
static_assert(sizeof(DBDGameState_OnRep_ObsessionTarget) == 0x000008, "Wrong size on DBDGameState_OnRep_ObsessionTarget");
static_assert(offsetof(DBDGameState_OnRep_ObsessionTarget, previousObsessionTarget) == 0x000000, "Member 'DBDGameState_OnRep_ObsessionTarget::previousObsessionTarget' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnRep_OnLevelReadyToPlay
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_OnRep_OnLevelReadyToPlay final
{
public:
	bool                                          oldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnRep_OnLevelReadyToPlay) == 0x000001, "Wrong alignment on DBDGameState_OnRep_OnLevelReadyToPlay");
static_assert(sizeof(DBDGameState_OnRep_OnLevelReadyToPlay) == 0x000001, "Wrong size on DBDGameState_OnRep_OnLevelReadyToPlay");
static_assert(offsetof(DBDGameState_OnRep_OnLevelReadyToPlay, oldValue) == 0x000000, "Member 'DBDGameState_OnRep_OnLevelReadyToPlay::oldValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnRep_RequiredActivatedGeneratorCount
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_OnRep_RequiredActivatedGeneratorCount final
{
public:
	int32                                         oldRequiredActivatedGeneratorCount;                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnRep_RequiredActivatedGeneratorCount) == 0x000004, "Wrong alignment on DBDGameState_OnRep_RequiredActivatedGeneratorCount");
static_assert(sizeof(DBDGameState_OnRep_RequiredActivatedGeneratorCount) == 0x000004, "Wrong size on DBDGameState_OnRep_RequiredActivatedGeneratorCount");
static_assert(offsetof(DBDGameState_OnRep_RequiredActivatedGeneratorCount, oldRequiredActivatedGeneratorCount) == 0x000000, "Member 'DBDGameState_OnRep_RequiredActivatedGeneratorCount::oldRequiredActivatedGeneratorCount' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnRep_SecondsLeftInLobby
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_OnRep_SecondsLeftInLobby final
{
public:
	int32                                         oldValue;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnRep_SecondsLeftInLobby) == 0x000004, "Wrong alignment on DBDGameState_OnRep_SecondsLeftInLobby");
static_assert(sizeof(DBDGameState_OnRep_SecondsLeftInLobby) == 0x000004, "Wrong size on DBDGameState_OnRep_SecondsLeftInLobby");
static_assert(offsetof(DBDGameState_OnRep_SecondsLeftInLobby, oldValue) == 0x000000, "Member 'DBDGameState_OnRep_SecondsLeftInLobby::oldValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnRep_SurvivorLeft
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_OnRep_SurvivorLeft final
{
public:
	int32                                         oldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnRep_SurvivorLeft) == 0x000004, "Wrong alignment on DBDGameState_OnRep_SurvivorLeft");
static_assert(sizeof(DBDGameState_OnRep_SurvivorLeft) == 0x000004, "Wrong size on DBDGameState_OnRep_SurvivorLeft");
static_assert(offsetof(DBDGameState_OnRep_SurvivorLeft, oldValue) == 0x000000, "Member 'DBDGameState_OnRep_SurvivorLeft::oldValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.RemoveDangerPredictionObject
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_RemoveDangerPredictionObject final
{
public:
	class UDBDDangerPredictionComponent*          toRemove;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_RemoveDangerPredictionObject) == 0x000008, "Wrong alignment on DBDGameState_RemoveDangerPredictionObject");
static_assert(sizeof(DBDGameState_RemoveDangerPredictionObject) == 0x000008, "Wrong size on DBDGameState_RemoveDangerPredictionObject");
static_assert(offsetof(DBDGameState_RemoveDangerPredictionObject, toRemove) == 0x000000, "Member 'DBDGameState_RemoveDangerPredictionObject::toRemove' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.RemoveTrap
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_RemoveTrap final
{
public:
	class AInteractable*                          toRemove;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_RemoveTrap) == 0x000008, "Wrong alignment on DBDGameState_RemoveTrap");
static_assert(sizeof(DBDGameState_RemoveTrap) == 0x000008, "Wrong size on DBDGameState_RemoveTrap");
static_assert(offsetof(DBDGameState_RemoveTrap, toRemove) == 0x000000, "Member 'DBDGameState_RemoveTrap::toRemove' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.SetBuiltLevelData
// 0x00B0 (0x00B0 - 0x0000)
struct DBDGameState_SetBuiltLevelData final
{
public:
	struct FBuiltLevelData                        builtLevelData;                                    // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_SetBuiltLevelData) == 0x000008, "Wrong alignment on DBDGameState_SetBuiltLevelData");
static_assert(sizeof(DBDGameState_SetBuiltLevelData) == 0x0000B0, "Wrong size on DBDGameState_SetBuiltLevelData");
static_assert(offsetof(DBDGameState_SetBuiltLevelData, builtLevelData) == 0x000000, "Member 'DBDGameState_SetBuiltLevelData::builtLevelData' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.SetDisplayMapName
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_SetDisplayMapName final
{
public:
	bool                                          display;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_SetDisplayMapName) == 0x000001, "Wrong alignment on DBDGameState_SetDisplayMapName");
static_assert(sizeof(DBDGameState_SetDisplayMapName) == 0x000001, "Wrong size on DBDGameState_SetDisplayMapName");
static_assert(offsetof(DBDGameState_SetDisplayMapName, display) == 0x000000, "Member 'DBDGameState_SetDisplayMapName::display' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.SetGameLevelEnded
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_SetGameLevelEnded final
{
public:
	EEndGameReason                                endGameReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_SetGameLevelEnded) == 0x000001, "Wrong alignment on DBDGameState_SetGameLevelEnded");
static_assert(sizeof(DBDGameState_SetGameLevelEnded) == 0x000001, "Wrong size on DBDGameState_SetGameLevelEnded");
static_assert(offsetof(DBDGameState_SetGameLevelEnded, endGameReason) == 0x000000, "Member 'DBDGameState_SetGameLevelEnded::endGameReason' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.SetKillerIntroCompletedNormalized
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_SetKillerIntroCompletedNormalized final
{
public:
	float                                         completedAmount;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_SetKillerIntroCompletedNormalized) == 0x000004, "Wrong alignment on DBDGameState_SetKillerIntroCompletedNormalized");
static_assert(sizeof(DBDGameState_SetKillerIntroCompletedNormalized) == 0x000004, "Wrong size on DBDGameState_SetKillerIntroCompletedNormalized");
static_assert(offsetof(DBDGameState_SetKillerIntroCompletedNormalized, completedAmount) == 0x000000, "Member 'DBDGameState_SetKillerIntroCompletedNormalized::completedAmount' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.SetPlayersReadyToStart
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_SetPlayersReadyToStart final
{
public:
	bool                                          playersReadyToStart;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_SetPlayersReadyToStart) == 0x000001, "Wrong alignment on DBDGameState_SetPlayersReadyToStart");
static_assert(sizeof(DBDGameState_SetPlayersReadyToStart) == 0x000001, "Wrong size on DBDGameState_SetPlayersReadyToStart");
static_assert(offsetof(DBDGameState_SetPlayersReadyToStart, playersReadyToStart) == 0x000000, "Member 'DBDGameState_SetPlayersReadyToStart::playersReadyToStart' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.UnregisterFromIntroCompleteAndLevelReadyToPlay
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_UnregisterFromIntroCompleteAndLevelReadyToPlay final
{
public:
	const class UObject*                          inObject;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_UnregisterFromIntroCompleteAndLevelReadyToPlay) == 0x000008, "Wrong alignment on DBDGameState_UnregisterFromIntroCompleteAndLevelReadyToPlay");
static_assert(sizeof(DBDGameState_UnregisterFromIntroCompleteAndLevelReadyToPlay) == 0x000008, "Wrong size on DBDGameState_UnregisterFromIntroCompleteAndLevelReadyToPlay");
static_assert(offsetof(DBDGameState_UnregisterFromIntroCompleteAndLevelReadyToPlay, inObject) == 0x000000, "Member 'DBDGameState_UnregisterFromIntroCompleteAndLevelReadyToPlay::inObject' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetAllDangerPredictionObjects
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetAllDangerPredictionObjects final
{
public:
	TArray<class UDBDDangerPredictionComponent*>  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetAllDangerPredictionObjects) == 0x000008, "Wrong alignment on DBDGameState_GetAllDangerPredictionObjects");
static_assert(sizeof(DBDGameState_GetAllDangerPredictionObjects) == 0x000010, "Wrong size on DBDGameState_GetAllDangerPredictionObjects");
static_assert(offsetof(DBDGameState_GetAllDangerPredictionObjects, ReturnValue) == 0x000000, "Member 'DBDGameState_GetAllDangerPredictionObjects::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetCharacterCollection
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetCharacterCollection final
{
public:
	class UCharacterCollection*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetCharacterCollection) == 0x000008, "Wrong alignment on DBDGameState_GetCharacterCollection");
static_assert(sizeof(DBDGameState_GetCharacterCollection) == 0x000008, "Wrong size on DBDGameState_GetCharacterCollection");
static_assert(offsetof(DBDGameState_GetCharacterCollection, ReturnValue) == 0x000000, "Member 'DBDGameState_GetCharacterCollection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetCollectableCollection
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetCollectableCollection final
{
public:
	class UCollectableCollection*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetCollectableCollection) == 0x000008, "Wrong alignment on DBDGameState_GetCollectableCollection");
static_assert(sizeof(DBDGameState_GetCollectableCollection) == 0x000008, "Wrong size on DBDGameState_GetCollectableCollection");
static_assert(offsetof(DBDGameState_GetCollectableCollection, ReturnValue) == 0x000000, "Member 'DBDGameState_GetCollectableCollection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetEndGameStateComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetEndGameStateComponent final
{
public:
	class UEndGameStateComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetEndGameStateComponent) == 0x000008, "Wrong alignment on DBDGameState_GetEndGameStateComponent");
static_assert(sizeof(DBDGameState_GetEndGameStateComponent) == 0x000008, "Wrong size on DBDGameState_GetEndGameStateComponent");
static_assert(offsetof(DBDGameState_GetEndGameStateComponent, ReturnValue) == 0x000000, "Member 'DBDGameState_GetEndGameStateComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetGameLevelLoaded
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_GetGameLevelLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetGameLevelLoaded) == 0x000001, "Wrong alignment on DBDGameState_GetGameLevelLoaded");
static_assert(sizeof(DBDGameState_GetGameLevelLoaded) == 0x000001, "Wrong size on DBDGameState_GetGameLevelLoaded");
static_assert(offsetof(DBDGameState_GetGameLevelLoaded, ReturnValue) == 0x000000, "Member 'DBDGameState_GetGameLevelLoaded::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetGameLevelLoadingStarted
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_GetGameLevelLoadingStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetGameLevelLoadingStarted) == 0x000001, "Wrong alignment on DBDGameState_GetGameLevelLoadingStarted");
static_assert(sizeof(DBDGameState_GetGameLevelLoadingStarted) == 0x000001, "Wrong size on DBDGameState_GetGameLevelLoadingStarted");
static_assert(offsetof(DBDGameState_GetGameLevelLoadingStarted, ReturnValue) == 0x000000, "Member 'DBDGameState_GetGameLevelLoadingStarted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameBaseTraps
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameBaseTraps final
{
public:
	TArray<class ABaseTrap*>                      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameBaseTraps) == 0x000008, "Wrong alignment on DBDGameState_GetInGameBaseTraps");
static_assert(sizeof(DBDGameState_GetInGameBaseTraps) == 0x000010, "Wrong size on DBDGameState_GetInGameBaseTraps");
static_assert(offsetof(DBDGameState_GetInGameBaseTraps, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameBaseTraps::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameEscapeDoors
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameEscapeDoors final
{
public:
	TArray<class AEscapeDoor*>                    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameEscapeDoors) == 0x000008, "Wrong alignment on DBDGameState_GetInGameEscapeDoors");
static_assert(sizeof(DBDGameState_GetInGameEscapeDoors) == 0x000010, "Wrong size on DBDGameState_GetInGameEscapeDoors");
static_assert(offsetof(DBDGameState_GetInGameEscapeDoors, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameEscapeDoors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameGenerators
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameGenerators final
{
public:
	TArray<class AGenerator*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameGenerators) == 0x000008, "Wrong alignment on DBDGameState_GetInGameGenerators");
static_assert(sizeof(DBDGameState_GetInGameGenerators) == 0x000010, "Wrong size on DBDGameState_GetInGameGenerators");
static_assert(offsetof(DBDGameState_GetInGameGenerators, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameGenerators::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameHatches
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameHatches final
{
public:
	TArray<class AHatch*>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameHatches) == 0x000008, "Wrong alignment on DBDGameState_GetInGameHatches");
static_assert(sizeof(DBDGameState_GetInGameHatches) == 0x000010, "Wrong size on DBDGameState_GetInGameHatches");
static_assert(offsetof(DBDGameState_GetInGameHatches, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameHatches::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameMeatHooks
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameMeatHooks final
{
public:
	TArray<class AMeatHook*>                      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameMeatHooks) == 0x000008, "Wrong alignment on DBDGameState_GetInGameMeatHooks");
static_assert(sizeof(DBDGameState_GetInGameMeatHooks) == 0x000010, "Wrong size on DBDGameState_GetInGameMeatHooks");
static_assert(offsetof(DBDGameState_GetInGameMeatHooks, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameMeatHooks::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGamePallets
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGamePallets final
{
public:
	TArray<class APallet*>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGamePallets) == 0x000008, "Wrong alignment on DBDGameState_GetInGamePallets");
static_assert(sizeof(DBDGameState_GetInGamePallets) == 0x000010, "Wrong size on DBDGameState_GetInGamePallets");
static_assert(offsetof(DBDGameState_GetInGamePallets, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGamePallets::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameReverseBearTrapRemovers
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameReverseBearTrapRemovers final
{
public:
	TArray<class AReverseBearTrapRemover*>        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameReverseBearTrapRemovers) == 0x000008, "Wrong alignment on DBDGameState_GetInGameReverseBearTrapRemovers");
static_assert(sizeof(DBDGameState_GetInGameReverseBearTrapRemovers) == 0x000010, "Wrong size on DBDGameState_GetInGameReverseBearTrapRemovers");
static_assert(offsetof(DBDGameState_GetInGameReverseBearTrapRemovers, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameReverseBearTrapRemovers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameSearchables
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameSearchables final
{
public:
	TArray<class ASearchable*>                    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameSearchables) == 0x000008, "Wrong alignment on DBDGameState_GetInGameSearchables");
static_assert(sizeof(DBDGameState_GetInGameSearchables) == 0x000010, "Wrong size on DBDGameState_GetInGameSearchables");
static_assert(offsetof(DBDGameState_GetInGameSearchables, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameSearchables::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameWindows
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameWindows final
{
public:
	TArray<class AWindow*>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameWindows) == 0x000008, "Wrong alignment on DBDGameState_GetInGameWindows");
static_assert(sizeof(DBDGameState_GetInGameWindows) == 0x000010, "Wrong size on DBDGameState_GetInGameWindows");
static_assert(offsetof(DBDGameState_GetInGameWindows, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameWindows::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetIsGameEnded
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_GetIsGameEnded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetIsGameEnded) == 0x000001, "Wrong alignment on DBDGameState_GetIsGameEnded");
static_assert(sizeof(DBDGameState_GetIsGameEnded) == 0x000001, "Wrong size on DBDGameState_GetIsGameEnded");
static_assert(offsetof(DBDGameState_GetIsGameEnded, ReturnValue) == 0x000000, "Member 'DBDGameState_GetIsGameEnded::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetKiller
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetKiller final
{
public:
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetKiller) == 0x000008, "Wrong alignment on DBDGameState_GetKiller");
static_assert(sizeof(DBDGameState_GetKiller) == 0x000008, "Wrong size on DBDGameState_GetKiller");
static_assert(offsetof(DBDGameState_GetKiller, ReturnValue) == 0x000000, "Member 'DBDGameState_GetKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetKillerIntroCompletedNormalized
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_GetKillerIntroCompletedNormalized final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetKillerIntroCompletedNormalized) == 0x000004, "Wrong alignment on DBDGameState_GetKillerIntroCompletedNormalized");
static_assert(sizeof(DBDGameState_GetKillerIntroCompletedNormalized) == 0x000004, "Wrong size on DBDGameState_GetKillerIntroCompletedNormalized");
static_assert(offsetof(DBDGameState_GetKillerIntroCompletedNormalized, ReturnValue) == 0x000000, "Member 'DBDGameState_GetKillerIntroCompletedNormalized::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetLevelData
// 0x00B0 (0x00B0 - 0x0000)
struct DBDGameState_GetLevelData final
{
public:
	struct FBuiltLevelData                        ReturnValue;                                       // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetLevelData) == 0x000008, "Wrong alignment on DBDGameState_GetLevelData");
static_assert(sizeof(DBDGameState_GetLevelData) == 0x0000B0, "Wrong size on DBDGameState_GetLevelData");
static_assert(offsetof(DBDGameState_GetLevelData, ReturnValue) == 0x000000, "Member 'DBDGameState_GetLevelData::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetLevelThemeAudioSoundBankAssetPtr
// 0x0030 (0x0030 - 0x0000)
struct DBDGameState_GetLevelThemeAudioSoundBankAssetPtr final
{
public:
	TSoftObjectPtr<class UAkAudioBank>            ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetLevelThemeAudioSoundBankAssetPtr) == 0x000008, "Wrong alignment on DBDGameState_GetLevelThemeAudioSoundBankAssetPtr");
static_assert(sizeof(DBDGameState_GetLevelThemeAudioSoundBankAssetPtr) == 0x000030, "Wrong size on DBDGameState_GetLevelThemeAudioSoundBankAssetPtr");
static_assert(offsetof(DBDGameState_GetLevelThemeAudioSoundBankAssetPtr, ReturnValue) == 0x000000, "Member 'DBDGameState_GetLevelThemeAudioSoundBankAssetPtr::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetLocalPlayerBasePawn
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetLocalPlayerBasePawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetLocalPlayerBasePawn) == 0x000008, "Wrong alignment on DBDGameState_GetLocalPlayerBasePawn");
static_assert(sizeof(DBDGameState_GetLocalPlayerBasePawn) == 0x000008, "Wrong size on DBDGameState_GetLocalPlayerBasePawn");
static_assert(offsetof(DBDGameState_GetLocalPlayerBasePawn, ReturnValue) == 0x000000, "Member 'DBDGameState_GetLocalPlayerBasePawn::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetLocalPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetLocalPlayerPawn final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetLocalPlayerPawn) == 0x000008, "Wrong alignment on DBDGameState_GetLocalPlayerPawn");
static_assert(sizeof(DBDGameState_GetLocalPlayerPawn) == 0x000008, "Wrong size on DBDGameState_GetLocalPlayerPawn");
static_assert(offsetof(DBDGameState_GetLocalPlayerPawn, ReturnValue) == 0x000000, "Member 'DBDGameState_GetLocalPlayerPawn::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetMapThemeName
// 0x000C (0x000C - 0x0000)
struct DBDGameState_GetMapThemeName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetMapThemeName) == 0x000004, "Wrong alignment on DBDGameState_GetMapThemeName");
static_assert(sizeof(DBDGameState_GetMapThemeName) == 0x00000C, "Wrong size on DBDGameState_GetMapThemeName");
static_assert(offsetof(DBDGameState_GetMapThemeName, ReturnValue) == 0x000000, "Member 'DBDGameState_GetMapThemeName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetNumberOfActiveSurvivors
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_GetNumberOfActiveSurvivors final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetNumberOfActiveSurvivors) == 0x000004, "Wrong alignment on DBDGameState_GetNumberOfActiveSurvivors");
static_assert(sizeof(DBDGameState_GetNumberOfActiveSurvivors) == 0x000004, "Wrong size on DBDGameState_GetNumberOfActiveSurvivors");
static_assert(offsetof(DBDGameState_GetNumberOfActiveSurvivors, ReturnValue) == 0x000000, "Member 'DBDGameState_GetNumberOfActiveSurvivors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetNumberOfOtherActiveSurvivors
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetNumberOfOtherActiveSurvivors final
{
public:
	class ADBDPlayer*                             exception;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameState_GetNumberOfOtherActiveSurvivors) == 0x000008, "Wrong alignment on DBDGameState_GetNumberOfOtherActiveSurvivors");
static_assert(sizeof(DBDGameState_GetNumberOfOtherActiveSurvivors) == 0x000010, "Wrong size on DBDGameState_GetNumberOfOtherActiveSurvivors");
static_assert(offsetof(DBDGameState_GetNumberOfOtherActiveSurvivors, exception) == 0x000000, "Member 'DBDGameState_GetNumberOfOtherActiveSurvivors::exception' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetNumberOfOtherActiveSurvivors, ReturnValue) == 0x000008, "Member 'DBDGameState_GetNumberOfOtherActiveSurvivors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetObsessionTarget
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetObsessionTarget final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetObsessionTarget) == 0x000008, "Wrong alignment on DBDGameState_GetObsessionTarget");
static_assert(sizeof(DBDGameState_GetObsessionTarget) == 0x000008, "Wrong size on DBDGameState_GetObsessionTarget");
static_assert(offsetof(DBDGameState_GetObsessionTarget, ReturnValue) == 0x000000, "Member 'DBDGameState_GetObsessionTarget::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetPlayerRoleCounts
// 0x000C (0x000C - 0x0000)
struct DBDGameState_GetPlayerRoleCounts final
{
public:
	int32                                         survivorCount;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         killerCount;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         spectatorCount;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetPlayerRoleCounts) == 0x000004, "Wrong alignment on DBDGameState_GetPlayerRoleCounts");
static_assert(sizeof(DBDGameState_GetPlayerRoleCounts) == 0x00000C, "Wrong size on DBDGameState_GetPlayerRoleCounts");
static_assert(offsetof(DBDGameState_GetPlayerRoleCounts, survivorCount) == 0x000000, "Member 'DBDGameState_GetPlayerRoleCounts::survivorCount' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetPlayerRoleCounts, killerCount) == 0x000004, "Member 'DBDGameState_GetPlayerRoleCounts::killerCount' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetPlayerRoleCounts, spectatorCount) == 0x000008, "Member 'DBDGameState_GetPlayerRoleCounts::spectatorCount' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetPlayersReadyToStart
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_GetPlayersReadyToStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetPlayersReadyToStart) == 0x000001, "Wrong alignment on DBDGameState_GetPlayersReadyToStart");
static_assert(sizeof(DBDGameState_GetPlayersReadyToStart) == 0x000001, "Wrong size on DBDGameState_GetPlayersReadyToStart");
static_assert(offsetof(DBDGameState_GetPlayersReadyToStart, ReturnValue) == 0x000000, "Member 'DBDGameState_GetPlayersReadyToStart::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetPlayerStateByIDString
// 0x0018 (0x0018 - 0x0000)
struct DBDGameState_GetPlayerStateByIDString final
{
public:
	class FString                                 id;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayerState*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetPlayerStateByIDString) == 0x000008, "Wrong alignment on DBDGameState_GetPlayerStateByIDString");
static_assert(sizeof(DBDGameState_GetPlayerStateByIDString) == 0x000018, "Wrong size on DBDGameState_GetPlayerStateByIDString");
static_assert(offsetof(DBDGameState_GetPlayerStateByIDString, id) == 0x000000, "Member 'DBDGameState_GetPlayerStateByIDString::id' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetPlayerStateByIDString, ReturnValue) == 0x000010, "Member 'DBDGameState_GetPlayerStateByIDString::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetPlayerStateByMirrorsID
// 0x0018 (0x0018 - 0x0000)
struct DBDGameState_GetPlayerStateByMirrorsID final
{
public:
	class FString                                 id;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayerState*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetPlayerStateByMirrorsID) == 0x000008, "Wrong alignment on DBDGameState_GetPlayerStateByMirrorsID");
static_assert(sizeof(DBDGameState_GetPlayerStateByMirrorsID) == 0x000018, "Wrong size on DBDGameState_GetPlayerStateByMirrorsID");
static_assert(offsetof(DBDGameState_GetPlayerStateByMirrorsID, id) == 0x000000, "Member 'DBDGameState_GetPlayerStateByMirrorsID::id' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetPlayerStateByMirrorsID, ReturnValue) == 0x000010, "Member 'DBDGameState_GetPlayerStateByMirrorsID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetRemainingGeneratorsNeeded
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_GetRemainingGeneratorsNeeded final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetRemainingGeneratorsNeeded) == 0x000004, "Wrong alignment on DBDGameState_GetRemainingGeneratorsNeeded");
static_assert(sizeof(DBDGameState_GetRemainingGeneratorsNeeded) == 0x000004, "Wrong size on DBDGameState_GetRemainingGeneratorsNeeded");
static_assert(offsetof(DBDGameState_GetRemainingGeneratorsNeeded, ReturnValue) == 0x000000, "Member 'DBDGameState_GetRemainingGeneratorsNeeded::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetRequiredActivatedGeneratorCount
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_GetRequiredActivatedGeneratorCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetRequiredActivatedGeneratorCount) == 0x000004, "Wrong alignment on DBDGameState_GetRequiredActivatedGeneratorCount");
static_assert(sizeof(DBDGameState_GetRequiredActivatedGeneratorCount) == 0x000004, "Wrong size on DBDGameState_GetRequiredActivatedGeneratorCount");
static_assert(offsetof(DBDGameState_GetRequiredActivatedGeneratorCount, ReturnValue) == 0x000000, "Member 'DBDGameState_GetRequiredActivatedGeneratorCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetSelectedOffering
// 0x0018 (0x0018 - 0x0000)
struct DBDGameState_GetSelectedOffering final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSelectedOffering                      selectedOffering;                                  // 0x0004(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameState_GetSelectedOffering) == 0x000004, "Wrong alignment on DBDGameState_GetSelectedOffering");
static_assert(sizeof(DBDGameState_GetSelectedOffering) == 0x000018, "Wrong size on DBDGameState_GetSelectedOffering");
static_assert(offsetof(DBDGameState_GetSelectedOffering, index) == 0x000000, "Member 'DBDGameState_GetSelectedOffering::index' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetSelectedOffering, selectedOffering) == 0x000004, "Member 'DBDGameState_GetSelectedOffering::selectedOffering' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetSelectedOffering, ReturnValue) == 0x000014, "Member 'DBDGameState_GetSelectedOffering::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetSelectedOfferings
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetSelectedOfferings final
{
public:
	TArray<struct FSelectedOffering>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetSelectedOfferings) == 0x000008, "Wrong alignment on DBDGameState_GetSelectedOfferings");
static_assert(sizeof(DBDGameState_GetSelectedOfferings) == 0x000010, "Wrong size on DBDGameState_GetSelectedOfferings");
static_assert(offsetof(DBDGameState_GetSelectedOfferings, ReturnValue) == 0x000000, "Member 'DBDGameState_GetSelectedOfferings::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetSpecialEventGameplaySpawnerComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetSpecialEventGameplaySpawnerComponent final
{
public:
	class USpecialEventGameplaySpawnerComponent*  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetSpecialEventGameplaySpawnerComponent) == 0x000008, "Wrong alignment on DBDGameState_GetSpecialEventGameplaySpawnerComponent");
static_assert(sizeof(DBDGameState_GetSpecialEventGameplaySpawnerComponent) == 0x000008, "Wrong size on DBDGameState_GetSpecialEventGameplaySpawnerComponent");
static_assert(offsetof(DBDGameState_GetSpecialEventGameplaySpawnerComponent, ReturnValue) == 0x000000, "Member 'DBDGameState_GetSpecialEventGameplaySpawnerComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetSurvivorLeft
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_GetSurvivorLeft final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetSurvivorLeft) == 0x000004, "Wrong alignment on DBDGameState_GetSurvivorLeft");
static_assert(sizeof(DBDGameState_GetSurvivorLeft) == 0x000004, "Wrong size on DBDGameState_GetSurvivorLeft");
static_assert(offsetof(DBDGameState_GetSurvivorLeft, ReturnValue) == 0x000000, "Member 'DBDGameState_GetSurvivorLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetTotems
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetTotems final
{
public:
	TArray<class ATotem*>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetTotems) == 0x000008, "Wrong alignment on DBDGameState_GetTotems");
static_assert(sizeof(DBDGameState_GetTotems) == 0x000010, "Wrong size on DBDGameState_GetTotems");
static_assert(offsetof(DBDGameState_GetTotems, ReturnValue) == 0x000000, "Member 'DBDGameState_GetTotems::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetTraps
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetTraps final
{
public:
	TArray<class AInteractable*>                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetTraps) == 0x000008, "Wrong alignment on DBDGameState_GetTraps");
static_assert(sizeof(DBDGameState_GetTraps) == 0x000010, "Wrong size on DBDGameState_GetTraps");
static_assert(offsetof(DBDGameState_GetTraps, ReturnValue) == 0x000000, "Member 'DBDGameState_GetTraps::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsEscapeDoorActivated
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsEscapeDoorActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsEscapeDoorActivated) == 0x000001, "Wrong alignment on DBDGameState_IsEscapeDoorActivated");
static_assert(sizeof(DBDGameState_IsEscapeDoorActivated) == 0x000001, "Wrong size on DBDGameState_IsEscapeDoorActivated");
static_assert(offsetof(DBDGameState_IsEscapeDoorActivated, ReturnValue) == 0x000000, "Member 'DBDGameState_IsEscapeDoorActivated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsEscapeDoorOpen
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsEscapeDoorOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsEscapeDoorOpen) == 0x000001, "Wrong alignment on DBDGameState_IsEscapeDoorOpen");
static_assert(sizeof(DBDGameState_IsEscapeDoorOpen) == 0x000001, "Wrong size on DBDGameState_IsEscapeDoorOpen");
static_assert(offsetof(DBDGameState_IsEscapeDoorOpen, ReturnValue) == 0x000000, "Member 'DBDGameState_IsEscapeDoorOpen::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsEscapeRequirementCompleted
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsEscapeRequirementCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsEscapeRequirementCompleted) == 0x000001, "Wrong alignment on DBDGameState_IsEscapeRequirementCompleted");
static_assert(sizeof(DBDGameState_IsEscapeRequirementCompleted) == 0x000001, "Wrong size on DBDGameState_IsEscapeRequirementCompleted");
static_assert(offsetof(DBDGameState_IsEscapeRequirementCompleted, ReturnValue) == 0x000000, "Member 'DBDGameState_IsEscapeRequirementCompleted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsHatchVisible
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsHatchVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsHatchVisible) == 0x000001, "Wrong alignment on DBDGameState_IsHatchVisible");
static_assert(sizeof(DBDGameState_IsHatchVisible) == 0x000001, "Wrong size on DBDGameState_IsHatchVisible");
static_assert(offsetof(DBDGameState_IsHatchVisible, ReturnValue) == 0x000000, "Member 'DBDGameState_IsHatchVisible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsIntroCompleted
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsIntroCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsIntroCompleted) == 0x000001, "Wrong alignment on DBDGameState_IsIntroCompleted");
static_assert(sizeof(DBDGameState_IsIntroCompleted) == 0x000001, "Wrong size on DBDGameState_IsIntroCompleted");
static_assert(offsetof(DBDGameState_IsIntroCompleted, ReturnValue) == 0x000000, "Member 'DBDGameState_IsIntroCompleted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsLevelReadyToPlay
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsLevelReadyToPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsLevelReadyToPlay) == 0x000001, "Wrong alignment on DBDGameState_IsLevelReadyToPlay");
static_assert(sizeof(DBDGameState_IsLevelReadyToPlay) == 0x000001, "Wrong size on DBDGameState_IsLevelReadyToPlay");
static_assert(offsetof(DBDGameState_IsLevelReadyToPlay, ReturnValue) == 0x000000, "Member 'DBDGameState_IsLevelReadyToPlay::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsLevelSetupDone
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsLevelSetupDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsLevelSetupDone) == 0x000001, "Wrong alignment on DBDGameState_IsLevelSetupDone");
static_assert(sizeof(DBDGameState_IsLevelSetupDone) == 0x000001, "Wrong size on DBDGameState_IsLevelSetupDone");
static_assert(offsetof(DBDGameState_IsLevelSetupDone, ReturnValue) == 0x000000, "Member 'DBDGameState_IsLevelSetupDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsLightingGenerated
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsLightingGenerated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsLightingGenerated) == 0x000001, "Wrong alignment on DBDGameState_IsLightingGenerated");
static_assert(sizeof(DBDGameState_IsLightingGenerated) == 0x000001, "Wrong size on DBDGameState_IsLightingGenerated");
static_assert(offsetof(DBDGameState_IsLightingGenerated, ReturnValue) == 0x000000, "Member 'DBDGameState_IsLightingGenerated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsOfferingReceived
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsOfferingReceived final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsOfferingReceived) == 0x000001, "Wrong alignment on DBDGameState_IsOfferingReceived");
static_assert(sizeof(DBDGameState_IsOfferingReceived) == 0x000001, "Wrong size on DBDGameState_IsOfferingReceived");
static_assert(offsetof(DBDGameState_IsOfferingReceived, ReturnValue) == 0x000000, "Member 'DBDGameState_IsOfferingReceived::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsOnePlayerLeft
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsOnePlayerLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsOnePlayerLeft) == 0x000001, "Wrong alignment on DBDGameState_IsOnePlayerLeft");
static_assert(sizeof(DBDGameState_IsOnePlayerLeft) == 0x000001, "Wrong size on DBDGameState_IsOnePlayerLeft");
static_assert(offsetof(DBDGameState_IsOnePlayerLeft, ReturnValue) == 0x000000, "Member 'DBDGameState_IsOnePlayerLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsPlayerDistributionReady
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsPlayerDistributionReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsPlayerDistributionReady) == 0x000001, "Wrong alignment on DBDGameState_IsPlayerDistributionReady");
static_assert(sizeof(DBDGameState_IsPlayerDistributionReady) == 0x000001, "Wrong size on DBDGameState_IsPlayerDistributionReady");
static_assert(offsetof(DBDGameState_IsPlayerDistributionReady, ReturnValue) == 0x000000, "Member 'DBDGameState_IsPlayerDistributionReady::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameEventListenerCollectionComponent.AttachGameEventDispatcher
// 0x0008 (0x0008 - 0x0000)
struct GameEventListenerCollectionComponent_AttachGameEventDispatcher final
{
public:
	class UGameEventDispatcher*                   gameEventDispatcher;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventListenerCollectionComponent_AttachGameEventDispatcher) == 0x000008, "Wrong alignment on GameEventListenerCollectionComponent_AttachGameEventDispatcher");
static_assert(sizeof(GameEventListenerCollectionComponent_AttachGameEventDispatcher) == 0x000008, "Wrong size on GameEventListenerCollectionComponent_AttachGameEventDispatcher");
static_assert(offsetof(GameEventListenerCollectionComponent_AttachGameEventDispatcher, gameEventDispatcher) == 0x000000, "Member 'GameEventListenerCollectionComponent_AttachGameEventDispatcher::gameEventDispatcher' has a wrong offset!");

// Function DeadByDaylight.GameEventListenerCollectionComponent.ListenToGameEvent
// 0x0020 (0x0020 - 0x0000)
struct GameEventListenerCollectionComponent_ListenToGameEvent final
{
public:
	struct FGameplayTag                           eventType;                                         // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FGameplayTag& gameEventType, const struct FGameEventData& gameEventData)> delegateToBind; // 0x000C(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventListenerCollectionComponent_ListenToGameEvent) == 0x000004, "Wrong alignment on GameEventListenerCollectionComponent_ListenToGameEvent");
static_assert(sizeof(GameEventListenerCollectionComponent_ListenToGameEvent) == 0x000020, "Wrong size on GameEventListenerCollectionComponent_ListenToGameEvent");
static_assert(offsetof(GameEventListenerCollectionComponent_ListenToGameEvent, eventType) == 0x000000, "Member 'GameEventListenerCollectionComponent_ListenToGameEvent::eventType' has a wrong offset!");
static_assert(offsetof(GameEventListenerCollectionComponent_ListenToGameEvent, delegateToBind) == 0x00000C, "Member 'GameEventListenerCollectionComponent_ListenToGameEvent::delegateToBind' has a wrong offset!");

// Function DeadByDaylight.GameEventListenerCollectionComponent.UnlistenToGameEvent
// 0x000C (0x000C - 0x0000)
struct GameEventListenerCollectionComponent_UnlistenToGameEvent final
{
public:
	struct FGameplayTag                           eventType;                                         // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventListenerCollectionComponent_UnlistenToGameEvent) == 0x000004, "Wrong alignment on GameEventListenerCollectionComponent_UnlistenToGameEvent");
static_assert(sizeof(GameEventListenerCollectionComponent_UnlistenToGameEvent) == 0x00000C, "Wrong size on GameEventListenerCollectionComponent_UnlistenToGameEvent");
static_assert(offsetof(GameEventListenerCollectionComponent_UnlistenToGameEvent, eventType) == 0x000000, "Member 'GameEventListenerCollectionComponent_UnlistenToGameEvent::eventType' has a wrong offset!");

// Function DeadByDaylight.StateMachine.Multicast_SetStateStack
// 0x0010 (0x0010 - 0x0000)
struct StateMachine_Multicast_SetStateStack final
{
public:
	TArray<uint16>                                netStateIDStack;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachine_Multicast_SetStateStack) == 0x000008, "Wrong alignment on StateMachine_Multicast_SetStateStack");
static_assert(sizeof(StateMachine_Multicast_SetStateStack) == 0x000010, "Wrong size on StateMachine_Multicast_SetStateStack");
static_assert(offsetof(StateMachine_Multicast_SetStateStack, netStateIDStack) == 0x000000, "Member 'StateMachine_Multicast_SetStateStack::netStateIDStack' has a wrong offset!");

// Function DeadByDaylight.StateMachine.Server_SetStateStack
// 0x0010 (0x0010 - 0x0000)
struct StateMachine_Server_SetStateStack final
{
public:
	TArray<uint16>                                netStateIDStack;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachine_Server_SetStateStack) == 0x000008, "Wrong alignment on StateMachine_Server_SetStateStack");
static_assert(sizeof(StateMachine_Server_SetStateStack) == 0x000010, "Wrong size on StateMachine_Server_SetStateStack");
static_assert(offsetof(StateMachine_Server_SetStateStack, netStateIDStack) == 0x000000, "Member 'StateMachine_Server_SetStateStack::netStateIDStack' has a wrong offset!");

// Function DeadByDaylight.DBDEmblem.Client_FinalizeReplication
// 0x0018 (0x0018 - 0x0000)
struct DBDEmblem_Client_FinalizeReplication final
{
public:
	float                                         points;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProgressionPoints>             progressionPoints;                                 // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDEmblem_Client_FinalizeReplication) == 0x000008, "Wrong alignment on DBDEmblem_Client_FinalizeReplication");
static_assert(sizeof(DBDEmblem_Client_FinalizeReplication) == 0x000018, "Wrong size on DBDEmblem_Client_FinalizeReplication");
static_assert(offsetof(DBDEmblem_Client_FinalizeReplication, points) == 0x000000, "Member 'DBDEmblem_Client_FinalizeReplication::points' has a wrong offset!");
static_assert(offsetof(DBDEmblem_Client_FinalizeReplication, progressionPoints) == 0x000008, "Member 'DBDEmblem_Client_FinalizeReplication::progressionPoints' has a wrong offset!");

// Function DeadByDaylight.ActionButton.SetIcon
// 0x0090 (0x0090 - 0x0000)
struct ActionButton_SetIcon final
{
public:
	struct FSlateBrush                            slateBrush;                                        // 0x0000(0x0090)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionButton_SetIcon) == 0x000008, "Wrong alignment on ActionButton_SetIcon");
static_assert(sizeof(ActionButton_SetIcon) == 0x000090, "Wrong size on ActionButton_SetIcon");
static_assert(offsetof(ActionButton_SetIcon, slateBrush) == 0x000000, "Member 'ActionButton_SetIcon::slateBrush' has a wrong offset!");

// Function DeadByDaylight.ActionButton.SetSlateBrush
// 0x0090 (0x0090 - 0x0000)
struct ActionButton_SetSlateBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionButton_SetSlateBrush) == 0x000008, "Wrong alignment on ActionButton_SetSlateBrush");
static_assert(sizeof(ActionButton_SetSlateBrush) == 0x000090, "Wrong size on ActionButton_SetSlateBrush");
static_assert(offsetof(ActionButton_SetSlateBrush, InBrush) == 0x000000, "Member 'ActionButton_SetSlateBrush::InBrush' has a wrong offset!");

// Function DeadByDaylight.ActionButton.SetState
// 0x0001 (0x0001 - 0x0000)
struct ActionButton_SetState final
{
public:
	EActionButtonState                            state;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionButton_SetState) == 0x000001, "Wrong alignment on ActionButton_SetState");
static_assert(sizeof(ActionButton_SetState) == 0x000001, "Wrong size on ActionButton_SetState");
static_assert(offsetof(ActionButton_SetState, state) == 0x000000, "Member 'ActionButton_SetState::state' has a wrong offset!");

// Function DeadByDaylight.WorldRunawayMeshComponent.SetShouldRunAway
// 0x0001 (0x0001 - 0x0000)
struct WorldRunawayMeshComponent_SetShouldRunAway final
{
public:
	bool                                          should;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldRunawayMeshComponent_SetShouldRunAway) == 0x000001, "Wrong alignment on WorldRunawayMeshComponent_SetShouldRunAway");
static_assert(sizeof(WorldRunawayMeshComponent_SetShouldRunAway) == 0x000001, "Wrong size on WorldRunawayMeshComponent_SetShouldRunAway");
static_assert(offsetof(WorldRunawayMeshComponent_SetShouldRunAway, should) == 0x000000, "Member 'WorldRunawayMeshComponent_SetShouldRunAway::should' has a wrong offset!");

// Function DeadByDaylight.WorldRunawayMeshComponent.SetShouldRunAwayWithDelay
// 0x0008 (0x0008 - 0x0000)
struct WorldRunawayMeshComponent_SetShouldRunAwayWithDelay final
{
public:
	bool                                          should;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         delay;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldRunawayMeshComponent_SetShouldRunAwayWithDelay) == 0x000004, "Wrong alignment on WorldRunawayMeshComponent_SetShouldRunAwayWithDelay");
static_assert(sizeof(WorldRunawayMeshComponent_SetShouldRunAwayWithDelay) == 0x000008, "Wrong size on WorldRunawayMeshComponent_SetShouldRunAwayWithDelay");
static_assert(offsetof(WorldRunawayMeshComponent_SetShouldRunAwayWithDelay, should) == 0x000000, "Member 'WorldRunawayMeshComponent_SetShouldRunAwayWithDelay::should' has a wrong offset!");
static_assert(offsetof(WorldRunawayMeshComponent_SetShouldRunAwayWithDelay, delay) == 0x000004, "Member 'WorldRunawayMeshComponent_SetShouldRunAwayWithDelay::delay' has a wrong offset!");

// Function DeadByDaylight.WorldRunawayMeshComponent.SetShouldRunAwayWithRandomDelay
// 0x0008 (0x0008 - 0x0000)
struct WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay final
{
public:
	bool                                          should;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         delayRange;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay) == 0x000004, "Wrong alignment on WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay");
static_assert(sizeof(WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay) == 0x000008, "Wrong size on WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay");
static_assert(offsetof(WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay, should) == 0x000000, "Member 'WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay::should' has a wrong offset!");
static_assert(offsetof(WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay, delayRange) == 0x000004, "Member 'WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay::delayRange' has a wrong offset!");

// Function DeadByDaylight.WorldRunawayMeshComponent.GetShouldRunAway
// 0x0001 (0x0001 - 0x0000)
struct WorldRunawayMeshComponent_GetShouldRunAway final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldRunawayMeshComponent_GetShouldRunAway) == 0x000001, "Wrong alignment on WorldRunawayMeshComponent_GetShouldRunAway");
static_assert(sizeof(WorldRunawayMeshComponent_GetShouldRunAway) == 0x000001, "Wrong size on WorldRunawayMeshComponent_GetShouldRunAway");
static_assert(offsetof(WorldRunawayMeshComponent_GetShouldRunAway, ReturnValue) == 0x000000, "Member 'WorldRunawayMeshComponent_GetShouldRunAway::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaCreditsPopup.SetCreditContent
// 0x0010 (0x0010 - 0x0000)
struct UMGAtlantaCreditsPopup_SetCreditContent final
{
public:
	class FString                                 content;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaCreditsPopup_SetCreditContent) == 0x000008, "Wrong alignment on UMGAtlantaCreditsPopup_SetCreditContent");
static_assert(sizeof(UMGAtlantaCreditsPopup_SetCreditContent) == 0x000010, "Wrong size on UMGAtlantaCreditsPopup_SetCreditContent");
static_assert(offsetof(UMGAtlantaCreditsPopup_SetCreditContent, content) == 0x000000, "Member 'UMGAtlantaCreditsPopup_SetCreditContent::content' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaCreditsPopup.SetCreditTitle
// 0x0010 (0x0010 - 0x0000)
struct UMGAtlantaCreditsPopup_SetCreditTitle final
{
public:
	class FString                                 title;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaCreditsPopup_SetCreditTitle) == 0x000008, "Wrong alignment on UMGAtlantaCreditsPopup_SetCreditTitle");
static_assert(sizeof(UMGAtlantaCreditsPopup_SetCreditTitle) == 0x000010, "Wrong size on UMGAtlantaCreditsPopup_SetCreditTitle");
static_assert(offsetof(UMGAtlantaCreditsPopup_SetCreditTitle, title) == 0x000000, "Member 'UMGAtlantaCreditsPopup_SetCreditTitle::title' has a wrong offset!");

// Function DeadByDaylight.KillerProjectile.SetActiveSlashable
// 0x0001 (0x0001 - 0x0000)
struct KillerProjectile_SetActiveSlashable final
{
public:
	bool                                          active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerProjectile_SetActiveSlashable) == 0x000001, "Wrong alignment on KillerProjectile_SetActiveSlashable");
static_assert(sizeof(KillerProjectile_SetActiveSlashable) == 0x000001, "Wrong size on KillerProjectile_SetActiveSlashable");
static_assert(offsetof(KillerProjectile_SetActiveSlashable, active) == 0x000000, "Member 'KillerProjectile_SetActiveSlashable::active' has a wrong offset!");

// Function DeadByDaylight.KillerProjectile.GetLaunchingKiller
// 0x0008 (0x0008 - 0x0000)
struct KillerProjectile_GetLaunchingKiller final
{
public:
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerProjectile_GetLaunchingKiller) == 0x000008, "Wrong alignment on KillerProjectile_GetLaunchingKiller");
static_assert(sizeof(KillerProjectile_GetLaunchingKiller) == 0x000008, "Wrong size on KillerProjectile_GetLaunchingKiller");
static_assert(offsetof(KillerProjectile_GetLaunchingKiller, ReturnValue) == 0x000000, "Member 'KillerProjectile_GetLaunchingKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.KillerProjectile.GetPlayerPrimitiveComponent
// 0x0008 (0x0008 - 0x0000)
struct KillerProjectile_GetPlayerPrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerProjectile_GetPlayerPrimitiveComponent) == 0x000008, "Wrong alignment on KillerProjectile_GetPlayerPrimitiveComponent");
static_assert(sizeof(KillerProjectile_GetPlayerPrimitiveComponent) == 0x000008, "Wrong size on KillerProjectile_GetPlayerPrimitiveComponent");
static_assert(offsetof(KillerProjectile_GetPlayerPrimitiveComponent, ReturnValue) == 0x000000, "Member 'KillerProjectile_GetPlayerPrimitiveComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BaseLinkedVomitProjectile.NativeExplode
// 0x0030 (0x0030 - 0x0000)
struct BaseLinkedVomitProjectile_NativeExplode final
{
public:
	struct FImpactInfo                            impactInfo;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseLinkedVomitProjectile_NativeExplode) == 0x000008, "Wrong alignment on BaseLinkedVomitProjectile_NativeExplode");
static_assert(sizeof(BaseLinkedVomitProjectile_NativeExplode) == 0x000030, "Wrong size on BaseLinkedVomitProjectile_NativeExplode");
static_assert(offsetof(BaseLinkedVomitProjectile_NativeExplode, impactInfo) == 0x000000, "Member 'BaseLinkedVomitProjectile_NativeExplode::impactInfo' has a wrong offset!");

// Function DeadByDaylight.BaseLinkedVomitProjectile.OnAffectInteractable
// 0x0010 (0x0010 - 0x0000)
struct BaseLinkedVomitProjectile_OnAffectInteractable final
{
public:
	class AInteractable*                          interactable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        hitComponent;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseLinkedVomitProjectile_OnAffectInteractable) == 0x000008, "Wrong alignment on BaseLinkedVomitProjectile_OnAffectInteractable");
static_assert(sizeof(BaseLinkedVomitProjectile_OnAffectInteractable) == 0x000010, "Wrong size on BaseLinkedVomitProjectile_OnAffectInteractable");
static_assert(offsetof(BaseLinkedVomitProjectile_OnAffectInteractable, interactable) == 0x000000, "Member 'BaseLinkedVomitProjectile_OnAffectInteractable::interactable' has a wrong offset!");
static_assert(offsetof(BaseLinkedVomitProjectile_OnAffectInteractable, hitComponent) == 0x000008, "Member 'BaseLinkedVomitProjectile_OnAffectInteractable::hitComponent' has a wrong offset!");

// Function DeadByDaylight.BaseLinkedVomitProjectile.OnAffectSurvivor
// 0x0008 (0x0008 - 0x0000)
struct BaseLinkedVomitProjectile_OnAffectSurvivor final
{
public:
	class ACamperPlayer*                          camperPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseLinkedVomitProjectile_OnAffectSurvivor) == 0x000008, "Wrong alignment on BaseLinkedVomitProjectile_OnAffectSurvivor");
static_assert(sizeof(BaseLinkedVomitProjectile_OnAffectSurvivor) == 0x000008, "Wrong size on BaseLinkedVomitProjectile_OnAffectSurvivor");
static_assert(offsetof(BaseLinkedVomitProjectile_OnAffectSurvivor, camperPlayer) == 0x000000, "Member 'BaseLinkedVomitProjectile_OnAffectSurvivor::camperPlayer' has a wrong offset!");

// Function DeadByDaylight.GateFactory.GetGate
// 0x0010 (0x0010 - 0x0000)
struct GateFactory_GetGate final
{
public:
	EGateType                                     gateType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGate*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GateFactory_GetGate) == 0x000008, "Wrong alignment on GateFactory_GetGate");
static_assert(sizeof(GateFactory_GetGate) == 0x000010, "Wrong size on GateFactory_GetGate");
static_assert(offsetof(GateFactory_GetGate, gateType) == 0x000000, "Member 'GateFactory_GetGate::gateType' has a wrong offset!");
static_assert(offsetof(GateFactory_GetGate, ReturnValue) == 0x000008, "Member 'GateFactory_GetGate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorClipperComponent.OnCameraChanged
// 0x0001 (0x0001 - 0x0000)
struct ActorClipperComponent_OnCameraChanged final
{
public:
	EDBDCameraSocketID                            socketId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorClipperComponent_OnCameraChanged) == 0x000001, "Wrong alignment on ActorClipperComponent_OnCameraChanged");
static_assert(sizeof(ActorClipperComponent_OnCameraChanged) == 0x000001, "Wrong size on ActorClipperComponent_OnCameraChanged");
static_assert(offsetof(ActorClipperComponent_OnCameraChanged, socketId) == 0x000000, "Member 'ActorClipperComponent_OnCameraChanged::socketId' has a wrong offset!");

// Function DeadByDaylight.ActorClipperComponent.OnOwnerLocallyObservedChanged
// 0x0001 (0x0001 - 0x0000)
struct ActorClipperComponent_OnOwnerLocallyObservedChanged final
{
public:
	bool                                          locallyObserved;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorClipperComponent_OnOwnerLocallyObservedChanged) == 0x000001, "Wrong alignment on ActorClipperComponent_OnOwnerLocallyObservedChanged");
static_assert(sizeof(ActorClipperComponent_OnOwnerLocallyObservedChanged) == 0x000001, "Wrong size on ActorClipperComponent_OnOwnerLocallyObservedChanged");
static_assert(offsetof(ActorClipperComponent_OnOwnerLocallyObservedChanged, locallyObserved) == 0x000000, "Member 'ActorClipperComponent_OnOwnerLocallyObservedChanged::locallyObserved' has a wrong offset!");

// Function DeadByDaylight.ActorClipperComponent.SetPrimitiveCollection
// 0x0008 (0x0008 - 0x0000)
struct ActorClipperComponent_SetPrimitiveCollection final
{
public:
	const class UPrimitiveCollection*             clippables;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorClipperComponent_SetPrimitiveCollection) == 0x000008, "Wrong alignment on ActorClipperComponent_SetPrimitiveCollection");
static_assert(sizeof(ActorClipperComponent_SetPrimitiveCollection) == 0x000008, "Wrong size on ActorClipperComponent_SetPrimitiveCollection");
static_assert(offsetof(ActorClipperComponent_SetPrimitiveCollection, clippables) == 0x000000, "Member 'ActorClipperComponent_SetPrimitiveCollection::clippables' has a wrong offset!");

// Function DeadByDaylight.ActorDetectorComponent.OnOverlapEnter
// 0x00B0 (0x00B0 - 0x0000)
struct ActorDetectorComponent_OnOverlapEnter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorDetectorComponent_OnOverlapEnter) == 0x000008, "Wrong alignment on ActorDetectorComponent_OnOverlapEnter");
static_assert(sizeof(ActorDetectorComponent_OnOverlapEnter) == 0x0000B0, "Wrong size on ActorDetectorComponent_OnOverlapEnter");
static_assert(offsetof(ActorDetectorComponent_OnOverlapEnter, HitComponent) == 0x000000, "Member 'ActorDetectorComponent_OnOverlapEnter::HitComponent' has a wrong offset!");
static_assert(offsetof(ActorDetectorComponent_OnOverlapEnter, OtherActor) == 0x000008, "Member 'ActorDetectorComponent_OnOverlapEnter::OtherActor' has a wrong offset!");
static_assert(offsetof(ActorDetectorComponent_OnOverlapEnter, OtherComp) == 0x000010, "Member 'ActorDetectorComponent_OnOverlapEnter::OtherComp' has a wrong offset!");
static_assert(offsetof(ActorDetectorComponent_OnOverlapEnter, OtherBodyIndex) == 0x000018, "Member 'ActorDetectorComponent_OnOverlapEnter::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ActorDetectorComponent_OnOverlapEnter, bFromSweep) == 0x00001C, "Member 'ActorDetectorComponent_OnOverlapEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(ActorDetectorComponent_OnOverlapEnter, SweepResult) == 0x000020, "Member 'ActorDetectorComponent_OnOverlapEnter::SweepResult' has a wrong offset!");

// Function DeadByDaylight.ActorDetectorComponent.SetDetectionPrimitive
// 0x0008 (0x0008 - 0x0000)
struct ActorDetectorComponent_SetDetectionPrimitive final
{
public:
	class UPrimitiveComponent*                    primitive;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorDetectorComponent_SetDetectionPrimitive) == 0x000008, "Wrong alignment on ActorDetectorComponent_SetDetectionPrimitive");
static_assert(sizeof(ActorDetectorComponent_SetDetectionPrimitive) == 0x000008, "Wrong size on ActorDetectorComponent_SetDetectionPrimitive");
static_assert(offsetof(ActorDetectorComponent_SetDetectionPrimitive, primitive) == 0x000000, "Member 'ActorDetectorComponent_SetDetectionPrimitive::primitive' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Authority_Add
// 0x0010 (0x0010 - 0x0000)
struct ActorKnowledgeCollection_Authority_Add final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorKnowledgeCollection_Authority_Add) == 0x000008, "Wrong alignment on ActorKnowledgeCollection_Authority_Add");
static_assert(sizeof(ActorKnowledgeCollection_Authority_Add) == 0x000010, "Wrong size on ActorKnowledgeCollection_Authority_Add");
static_assert(offsetof(ActorKnowledgeCollection_Authority_Add, actor) == 0x000000, "Member 'ActorKnowledgeCollection_Authority_Add::actor' has a wrong offset!");
static_assert(offsetof(ActorKnowledgeCollection_Authority_Add, ReturnValue) == 0x000008, "Member 'ActorKnowledgeCollection_Authority_Add::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Authority_Append
// 0x0010 (0x0010 - 0x0000)
struct ActorKnowledgeCollection_Authority_Append final
{
public:
	TArray<class AActor*>                         actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorKnowledgeCollection_Authority_Append) == 0x000008, "Wrong alignment on ActorKnowledgeCollection_Authority_Append");
static_assert(sizeof(ActorKnowledgeCollection_Authority_Append) == 0x000010, "Wrong size on ActorKnowledgeCollection_Authority_Append");
static_assert(offsetof(ActorKnowledgeCollection_Authority_Append, actors) == 0x000000, "Member 'ActorKnowledgeCollection_Authority_Append::actors' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Authority_Remove
// 0x0008 (0x0008 - 0x0000)
struct ActorKnowledgeCollection_Authority_Remove final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorKnowledgeCollection_Authority_Remove) == 0x000008, "Wrong alignment on ActorKnowledgeCollection_Authority_Remove");
static_assert(sizeof(ActorKnowledgeCollection_Authority_Remove) == 0x000008, "Wrong size on ActorKnowledgeCollection_Authority_Remove");
static_assert(offsetof(ActorKnowledgeCollection_Authority_Remove, actor) == 0x000000, "Member 'ActorKnowledgeCollection_Authority_Remove::actor' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Authority_SetAvailable
// 0x0001 (0x0001 - 0x0000)
struct ActorKnowledgeCollection_Authority_SetAvailable final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorKnowledgeCollection_Authority_SetAvailable) == 0x000001, "Wrong alignment on ActorKnowledgeCollection_Authority_SetAvailable");
static_assert(sizeof(ActorKnowledgeCollection_Authority_SetAvailable) == 0x000001, "Wrong size on ActorKnowledgeCollection_Authority_SetAvailable");
static_assert(offsetof(ActorKnowledgeCollection_Authority_SetAvailable, value) == 0x000000, "Member 'ActorKnowledgeCollection_Authority_SetAvailable::value' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Authority_SetPossessor
// 0x0008 (0x0008 - 0x0000)
struct ActorKnowledgeCollection_Authority_SetPossessor final
{
public:
	class ACharacter*                             possessor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorKnowledgeCollection_Authority_SetPossessor) == 0x000008, "Wrong alignment on ActorKnowledgeCollection_Authority_SetPossessor");
static_assert(sizeof(ActorKnowledgeCollection_Authority_SetPossessor) == 0x000008, "Wrong size on ActorKnowledgeCollection_Authority_SetPossessor");
static_assert(offsetof(ActorKnowledgeCollection_Authority_SetPossessor, possessor) == 0x000000, "Member 'ActorKnowledgeCollection_Authority_SetPossessor::possessor' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Authority_SetSharingType
// 0x0001 (0x0001 - 0x0000)
struct ActorKnowledgeCollection_Authority_SetSharingType final
{
public:
	EKnowledgeSharingType                         value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorKnowledgeCollection_Authority_SetSharingType) == 0x000001, "Wrong alignment on ActorKnowledgeCollection_Authority_SetSharingType");
static_assert(sizeof(ActorKnowledgeCollection_Authority_SetSharingType) == 0x000001, "Wrong size on ActorKnowledgeCollection_Authority_SetSharingType");
static_assert(offsetof(ActorKnowledgeCollection_Authority_SetSharingType, value) == 0x000000, "Member 'ActorKnowledgeCollection_Authority_SetSharingType::value' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Local_SetAvailable
// 0x0001 (0x0001 - 0x0000)
struct ActorKnowledgeCollection_Local_SetAvailable final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorKnowledgeCollection_Local_SetAvailable) == 0x000001, "Wrong alignment on ActorKnowledgeCollection_Local_SetAvailable");
static_assert(sizeof(ActorKnowledgeCollection_Local_SetAvailable) == 0x000001, "Wrong size on ActorKnowledgeCollection_Local_SetAvailable");
static_assert(offsetof(ActorKnowledgeCollection_Local_SetAvailable, value) == 0x000000, "Member 'ActorKnowledgeCollection_Local_SetAvailable::value' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Contains
// 0x0010 (0x0010 - 0x0000)
struct ActorKnowledgeCollection_Contains final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorKnowledgeCollection_Contains) == 0x000008, "Wrong alignment on ActorKnowledgeCollection_Contains");
static_assert(sizeof(ActorKnowledgeCollection_Contains) == 0x000010, "Wrong size on ActorKnowledgeCollection_Contains");
static_assert(offsetof(ActorKnowledgeCollection_Contains, actor) == 0x000000, "Member 'ActorKnowledgeCollection_Contains::actor' has a wrong offset!");
static_assert(offsetof(ActorKnowledgeCollection_Contains, ReturnValue) == 0x000008, "Member 'ActorKnowledgeCollection_Contains::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.IsAvailable
// 0x0010 (0x0010 - 0x0000)
struct ActorKnowledgeCollection_IsAvailable final
{
public:
	const class ACharacter*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorKnowledgeCollection_IsAvailable) == 0x000008, "Wrong alignment on ActorKnowledgeCollection_IsAvailable");
static_assert(sizeof(ActorKnowledgeCollection_IsAvailable) == 0x000010, "Wrong size on ActorKnowledgeCollection_IsAvailable");
static_assert(offsetof(ActorKnowledgeCollection_IsAvailable, character) == 0x000000, "Member 'ActorKnowledgeCollection_IsAvailable::character' has a wrong offset!");
static_assert(offsetof(ActorKnowledgeCollection_IsAvailable, ReturnValue) == 0x000008, "Member 'ActorKnowledgeCollection_IsAvailable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorSpawner.AuthoritySelect
// 0x0001 (0x0001 - 0x0000)
struct ActorSpawner_AuthoritySelect final
{
public:
	bool                                          selected;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorSpawner_AuthoritySelect) == 0x000001, "Wrong alignment on ActorSpawner_AuthoritySelect");
static_assert(sizeof(ActorSpawner_AuthoritySelect) == 0x000001, "Wrong size on ActorSpawner_AuthoritySelect");
static_assert(offsetof(ActorSpawner_AuthoritySelect, selected) == 0x000000, "Member 'ActorSpawner_AuthoritySelect::selected' has a wrong offset!");

// Function DeadByDaylight.ActorSpawner.AuthorityGetSpawnedActor
// 0x0008 (0x0008 - 0x0000)
struct ActorSpawner_AuthorityGetSpawnedActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorSpawner_AuthorityGetSpawnedActor) == 0x000008, "Wrong alignment on ActorSpawner_AuthorityGetSpawnedActor");
static_assert(sizeof(ActorSpawner_AuthorityGetSpawnedActor) == 0x000008, "Wrong size on ActorSpawner_AuthorityGetSpawnedActor");
static_assert(offsetof(ActorSpawner_AuthorityGetSpawnedActor, ReturnValue) == 0x000000, "Member 'ActorSpawner_AuthorityGetSpawnedActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorSpawner.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ActorSpawner_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorSpawner_IsEnabled) == 0x000001, "Wrong alignment on ActorSpawner_IsEnabled");
static_assert(sizeof(ActorSpawner_IsEnabled) == 0x000001, "Wrong size on ActorSpawner_IsEnabled");
static_assert(offsetof(ActorSpawner_IsEnabled, ReturnValue) == 0x000000, "Member 'ActorSpawner_IsEnabled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorSpawner.UseActivatedElement
// 0x0001 (0x0001 - 0x0000)
struct ActorSpawner_UseActivatedElement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorSpawner_UseActivatedElement) == 0x000001, "Wrong alignment on ActorSpawner_UseActivatedElement");
static_assert(sizeof(ActorSpawner_UseActivatedElement) == 0x000001, "Wrong size on ActorSpawner_UseActivatedElement");
static_assert(offsetof(ActorSpawner_UseActivatedElement, ReturnValue) == 0x000000, "Member 'ActorSpawner_UseActivatedElement::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Authority_SetPlayerReady
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Menu_Authority_SetPlayerReady final
{
public:
	bool                                          isReady;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Menu_Authority_SetPlayerReady) == 0x000001, "Wrong alignment on DBDPlayerController_Menu_Authority_SetPlayerReady");
static_assert(sizeof(DBDPlayerController_Menu_Authority_SetPlayerReady) == 0x000001, "Wrong size on DBDPlayerController_Menu_Authority_SetPlayerReady");
static_assert(offsetof(DBDPlayerController_Menu_Authority_SetPlayerReady, isReady) == 0x000000, "Member 'DBDPlayerController_Menu_Authority_SetPlayerReady::isReady' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_GamePresetDataFromClient
// 0x0090 (0x0090 - 0x0000)
struct DBDPlayerController_Menu_Server_GamePresetDataFromClient final
{
public:
	struct FGamePresetData                        gameState;                                         // 0x0000(0x0090)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Menu_Server_GamePresetDataFromClient) == 0x000008, "Wrong alignment on DBDPlayerController_Menu_Server_GamePresetDataFromClient");
static_assert(sizeof(DBDPlayerController_Menu_Server_GamePresetDataFromClient) == 0x000090, "Wrong size on DBDPlayerController_Menu_Server_GamePresetDataFromClient");
static_assert(offsetof(DBDPlayerController_Menu_Server_GamePresetDataFromClient, gameState) == 0x000000, "Member 'DBDPlayerController_Menu_Server_GamePresetDataFromClient::gameState' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_SetCharacterData
// 0x0098 (0x0098 - 0x0000)
struct DBDPlayerController_Menu_Server_SetCharacterData final
{
public:
	int32                                         characterIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerDataSync                        playerDataSync;                                    // 0x0008(0x0090)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Menu_Server_SetCharacterData) == 0x000008, "Wrong alignment on DBDPlayerController_Menu_Server_SetCharacterData");
static_assert(sizeof(DBDPlayerController_Menu_Server_SetCharacterData) == 0x000098, "Wrong size on DBDPlayerController_Menu_Server_SetCharacterData");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCharacterData, characterIndex) == 0x000000, "Member 'DBDPlayerController_Menu_Server_SetCharacterData::characterIndex' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCharacterData, playerDataSync) == 0x000008, "Member 'DBDPlayerController_Menu_Server_SetCharacterData::playerDataSync' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_SetCharacterLevel
// 0x000C (0x000C - 0x0000)
struct DBDPlayerController_Menu_Server_SetCharacterLevel final
{
public:
	int32                                         characterLevel;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         prestigeLevel;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          callOnRep;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerController_Menu_Server_SetCharacterLevel) == 0x000004, "Wrong alignment on DBDPlayerController_Menu_Server_SetCharacterLevel");
static_assert(sizeof(DBDPlayerController_Menu_Server_SetCharacterLevel) == 0x00000C, "Wrong size on DBDPlayerController_Menu_Server_SetCharacterLevel");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCharacterLevel, characterLevel) == 0x000000, "Member 'DBDPlayerController_Menu_Server_SetCharacterLevel::characterLevel' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCharacterLevel, prestigeLevel) == 0x000004, "Member 'DBDPlayerController_Menu_Server_SetCharacterLevel::prestigeLevel' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCharacterLevel, callOnRep) == 0x000008, "Member 'DBDPlayerController_Menu_Server_SetCharacterLevel::callOnRep' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_SetCustomizationCharm
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerController_Menu_Server_SetCustomizationCharm final
{
public:
	class FName                                   charmId;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          slotIndex;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerController_Menu_Server_SetCustomizationCharm) == 0x000004, "Wrong alignment on DBDPlayerController_Menu_Server_SetCustomizationCharm");
static_assert(sizeof(DBDPlayerController_Menu_Server_SetCustomizationCharm) == 0x000010, "Wrong size on DBDPlayerController_Menu_Server_SetCustomizationCharm");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCustomizationCharm, charmId) == 0x000000, "Member 'DBDPlayerController_Menu_Server_SetCustomizationCharm::charmId' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCustomizationCharm, slotIndex) == 0x00000C, "Member 'DBDPlayerController_Menu_Server_SetCustomizationCharm::slotIndex' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_SetCustomizationMeshes
// 0x0024 (0x0024 - 0x0000)
struct DBDPlayerController_Menu_Server_SetCustomizationMeshes final
{
public:
	struct FCharacterCustomization                customization;                                     // 0x0000(0x0024)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Menu_Server_SetCustomizationMeshes) == 0x000004, "Wrong alignment on DBDPlayerController_Menu_Server_SetCustomizationMeshes");
static_assert(sizeof(DBDPlayerController_Menu_Server_SetCustomizationMeshes) == 0x000024, "Wrong size on DBDPlayerController_Menu_Server_SetCustomizationMeshes");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCustomizationMeshes, customization) == 0x000000, "Member 'DBDPlayerController_Menu_Server_SetCustomizationMeshes::customization' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_SetEquipedPerks
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayerController_Menu_Server_SetEquipedPerks final
{
public:
	TArray<class FName>                           perkIds;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 perkLevels;                                        // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          callOnRep;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerController_Menu_Server_SetEquipedPerks) == 0x000008, "Wrong alignment on DBDPlayerController_Menu_Server_SetEquipedPerks");
static_assert(sizeof(DBDPlayerController_Menu_Server_SetEquipedPerks) == 0x000028, "Wrong size on DBDPlayerController_Menu_Server_SetEquipedPerks");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetEquipedPerks, perkIds) == 0x000000, "Member 'DBDPlayerController_Menu_Server_SetEquipedPerks::perkIds' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetEquipedPerks, perkLevels) == 0x000010, "Member 'DBDPlayerController_Menu_Server_SetEquipedPerks::perkLevels' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetEquipedPerks, callOnRep) == 0x000020, "Member 'DBDPlayerController_Menu_Server_SetEquipedPerks::callOnRep' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_SetPlayerLoadout
// 0x0098 (0x0098 - 0x0000)
struct DBDPlayerController_Menu_Server_SetPlayerLoadout final
{
public:
	struct FPlayerLoadoutData                     desiredLoadout;                                    // 0x0000(0x0098)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Menu_Server_SetPlayerLoadout) == 0x000008, "Wrong alignment on DBDPlayerController_Menu_Server_SetPlayerLoadout");
static_assert(sizeof(DBDPlayerController_Menu_Server_SetPlayerLoadout) == 0x000098, "Wrong size on DBDPlayerController_Menu_Server_SetPlayerLoadout");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetPlayerLoadout, desiredLoadout) == 0x000000, "Member 'DBDPlayerController_Menu_Server_SetPlayerLoadout::desiredLoadout' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_SetPlayerReady
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Menu_Server_SetPlayerReady final
{
public:
	bool                                          isReady;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Menu_Server_SetPlayerReady) == 0x000001, "Wrong alignment on DBDPlayerController_Menu_Server_SetPlayerReady");
static_assert(sizeof(DBDPlayerController_Menu_Server_SetPlayerReady) == 0x000001, "Wrong size on DBDPlayerController_Menu_Server_SetPlayerReady");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetPlayerReady, isReady) == 0x000000, "Member 'DBDPlayerController_Menu_Server_SetPlayerReady::isReady' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.SetPlayerReady
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Menu_SetPlayerReady final
{
public:
	bool                                          isReady;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Menu_SetPlayerReady) == 0x000001, "Wrong alignment on DBDPlayerController_Menu_SetPlayerReady");
static_assert(sizeof(DBDPlayerController_Menu_SetPlayerReady) == 0x000001, "Wrong size on DBDPlayerController_Menu_SetPlayerReady");
static_assert(offsetof(DBDPlayerController_Menu_SetPlayerReady, isReady) == 0x000000, "Member 'DBDPlayerController_Menu_SetPlayerReady::isReady' has a wrong offset!");

// Function DeadByDaylight.AICharacterEscapeCarriedData.Init
// 0x0001 (0x0001 - 0x0000)
struct AICharacterEscapeCarriedData_Init final
{
public:
	bool                                          preventWiggleSuccess;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharacterEscapeCarriedData_Init) == 0x000001, "Wrong alignment on AICharacterEscapeCarriedData_Init");
static_assert(sizeof(AICharacterEscapeCarriedData_Init) == 0x000001, "Wrong size on AICharacterEscapeCarriedData_Init");
static_assert(offsetof(AICharacterEscapeCarriedData_Init, preventWiggleSuccess) == 0x000000, "Member 'AICharacterEscapeCarriedData_Init::preventWiggleSuccess' has a wrong offset!");

// Function DeadByDaylight.CharacterEvasionBehaviourData.Init
// 0x0020 (0x0020 - 0x0000)
struct CharacterEvasionBehaviourData_Init final
{
public:
	class AActor*                                 hunter;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         escapePoints;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         minEscapeDist;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterEvasionBehaviourData_Init) == 0x000008, "Wrong alignment on CharacterEvasionBehaviourData_Init");
static_assert(sizeof(CharacterEvasionBehaviourData_Init) == 0x000020, "Wrong size on CharacterEvasionBehaviourData_Init");
static_assert(offsetof(CharacterEvasionBehaviourData_Init, hunter) == 0x000000, "Member 'CharacterEvasionBehaviourData_Init::hunter' has a wrong offset!");
static_assert(offsetof(CharacterEvasionBehaviourData_Init, escapePoints) == 0x000008, "Member 'CharacterEvasionBehaviourData_Init::escapePoints' has a wrong offset!");
static_assert(offsetof(CharacterEvasionBehaviourData_Init, minEscapeDist) == 0x000018, "Member 'CharacterEvasionBehaviourData_Init::minEscapeDist' has a wrong offset!");

// Function DeadByDaylight.AICharacterEvasionBehaviour.EscapeDestinationReached
// 0x0008 (0x0008 - 0x0000)
struct AICharacterEvasionBehaviour_EscapeDestinationReached final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICharacterEvasionBehaviour_EscapeDestinationReached) == 0x000004, "Wrong alignment on AICharacterEvasionBehaviour_EscapeDestinationReached");
static_assert(sizeof(AICharacterEvasionBehaviour_EscapeDestinationReached) == 0x000008, "Wrong size on AICharacterEvasionBehaviour_EscapeDestinationReached");
static_assert(offsetof(AICharacterEvasionBehaviour_EscapeDestinationReached, RequestID) == 0x000000, "Member 'AICharacterEvasionBehaviour_EscapeDestinationReached::RequestID' has a wrong offset!");
static_assert(offsetof(AICharacterEvasionBehaviour_EscapeDestinationReached, Result) == 0x000004, "Member 'AICharacterEvasionBehaviour_EscapeDestinationReached::Result' has a wrong offset!");

// Function DeadByDaylight.AICharacterHideInLockerBehaviourData.Init
// 0x0010 (0x0010 - 0x0000)
struct AICharacterHideInLockerBehaviourData_Init final
{
public:
	class ALocker*                                locker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterMovementTypes                       characterMovementType;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICharacterHideInLockerBehaviourData_Init) == 0x000008, "Wrong alignment on AICharacterHideInLockerBehaviourData_Init");
static_assert(sizeof(AICharacterHideInLockerBehaviourData_Init) == 0x000010, "Wrong size on AICharacterHideInLockerBehaviourData_Init");
static_assert(offsetof(AICharacterHideInLockerBehaviourData_Init, locker) == 0x000000, "Member 'AICharacterHideInLockerBehaviourData_Init::locker' has a wrong offset!");
static_assert(offsetof(AICharacterHideInLockerBehaviourData_Init, characterMovementType) == 0x000008, "Member 'AICharacterHideInLockerBehaviourData_Init::characterMovementType' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.Authority_ConditionalVolumeBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap");
static_assert(sizeof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap) == 0x0000B0, "Wrong size on TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap, OverlappedComponent) == 0x000000, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap, other) == 0x000008, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap::other' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap, OtherComp) == 0x000010, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap, bFromSweep) == 0x00001C, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap, HitResult) == 0x000020, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap::HitResult' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.Authority_ConditionalVolumeEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap");
static_assert(sizeof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap) == 0x000020, "Wrong size on TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap, OverlappedComponent) == 0x000000, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap, other) == 0x000008, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap::other' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap, OtherComp) == 0x000010, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap, OtherBodyIndex) == 0x000018, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.Authority_GuaranteedVolumeOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap");
static_assert(sizeof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap) == 0x0000B0, "Wrong size on TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap, OverlappedComponent) == 0x000000, "Member 'TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap, other) == 0x000008, "Member 'TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap::other' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap, OtherComp) == 0x000010, "Member 'TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap, OtherBodyIndex) == 0x000018, "Member 'TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap, bFromSweep) == 0x00001C, "Member 'TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap, HitResult) == 0x000020, "Member 'TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap::HitResult' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.Authority_Trigger
// 0x0018 (0x0018 - 0x0000)
struct TriggerableWorldObjectComponent_Authority_Trigger final
{
public:
	class AActor*                                 instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                triggerLocation;                                   // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TriggerableWorldObjectComponent_Authority_Trigger) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_Authority_Trigger");
static_assert(sizeof(TriggerableWorldObjectComponent_Authority_Trigger) == 0x000018, "Wrong size on TriggerableWorldObjectComponent_Authority_Trigger");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_Trigger, instigator) == 0x000000, "Member 'TriggerableWorldObjectComponent_Authority_Trigger::instigator' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_Trigger, triggerLocation) == 0x000008, "Member 'TriggerableWorldObjectComponent_Authority_Trigger::triggerLocation' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.CanPlayerTriggerConditional
// 0x0010 (0x0010 - 0x0000)
struct TriggerableWorldObjectComponent_CanPlayerTriggerConditional final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TriggerableWorldObjectComponent_CanPlayerTriggerConditional) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_CanPlayerTriggerConditional");
static_assert(sizeof(TriggerableWorldObjectComponent_CanPlayerTriggerConditional) == 0x000010, "Wrong size on TriggerableWorldObjectComponent_CanPlayerTriggerConditional");
static_assert(offsetof(TriggerableWorldObjectComponent_CanPlayerTriggerConditional, player) == 0x000000, "Member 'TriggerableWorldObjectComponent_CanPlayerTriggerConditional::player' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_CanPlayerTriggerConditional, ReturnValue) == 0x000008, "Member 'TriggerableWorldObjectComponent_CanPlayerTriggerConditional::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.CanPlayerTriggerGuaranteed
// 0x0010 (0x0010 - 0x0000)
struct TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed");
static_assert(sizeof(TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed) == 0x000010, "Wrong size on TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed");
static_assert(offsetof(TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed, player) == 0x000000, "Member 'TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed::player' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed, ReturnValue) == 0x000008, "Member 'TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.GetConditionalModifiers
// 0x0010 (0x0010 - 0x0000)
struct TriggerableWorldObjectComponent_GetConditionalModifiers final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         outAdditive;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         outMultiplicative;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerableWorldObjectComponent_GetConditionalModifiers) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_GetConditionalModifiers");
static_assert(sizeof(TriggerableWorldObjectComponent_GetConditionalModifiers) == 0x000010, "Wrong size on TriggerableWorldObjectComponent_GetConditionalModifiers");
static_assert(offsetof(TriggerableWorldObjectComponent_GetConditionalModifiers, player) == 0x000000, "Member 'TriggerableWorldObjectComponent_GetConditionalModifiers::player' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_GetConditionalModifiers, outAdditive) == 0x000008, "Member 'TriggerableWorldObjectComponent_GetConditionalModifiers::outAdditive' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_GetConditionalModifiers, outMultiplicative) == 0x00000C, "Member 'TriggerableWorldObjectComponent_GetConditionalModifiers::outMultiplicative' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.Multicast_OnTriggered
// 0x0018 (0x0018 - 0x0000)
struct TriggerableWorldObjectComponent_Multicast_OnTriggered final
{
public:
	class AActor*                                 instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                triggerLocation;                                   // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TriggerableWorldObjectComponent_Multicast_OnTriggered) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_Multicast_OnTriggered");
static_assert(sizeof(TriggerableWorldObjectComponent_Multicast_OnTriggered) == 0x000018, "Wrong size on TriggerableWorldObjectComponent_Multicast_OnTriggered");
static_assert(offsetof(TriggerableWorldObjectComponent_Multicast_OnTriggered, instigator) == 0x000000, "Member 'TriggerableWorldObjectComponent_Multicast_OnTriggered::instigator' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Multicast_OnTriggered, triggerLocation) == 0x000008, "Member 'TriggerableWorldObjectComponent_Multicast_OnTriggered::triggerLocation' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.SetConditionalTriggerVolume
// 0x0008 (0x0008 - 0x0000)
struct TriggerableWorldObjectComponent_SetConditionalTriggerVolume final
{
public:
	class UPrimitiveComponent*                    volume;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerableWorldObjectComponent_SetConditionalTriggerVolume) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_SetConditionalTriggerVolume");
static_assert(sizeof(TriggerableWorldObjectComponent_SetConditionalTriggerVolume) == 0x000008, "Wrong size on TriggerableWorldObjectComponent_SetConditionalTriggerVolume");
static_assert(offsetof(TriggerableWorldObjectComponent_SetConditionalTriggerVolume, volume) == 0x000000, "Member 'TriggerableWorldObjectComponent_SetConditionalTriggerVolume::volume' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.SetGuaranteedTriggerVolume
// 0x0008 (0x0008 - 0x0000)
struct TriggerableWorldObjectComponent_SetGuaranteedTriggerVolume final
{
public:
	class UPrimitiveComponent*                    volume;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerableWorldObjectComponent_SetGuaranteedTriggerVolume) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_SetGuaranteedTriggerVolume");
static_assert(sizeof(TriggerableWorldObjectComponent_SetGuaranteedTriggerVolume) == 0x000008, "Wrong size on TriggerableWorldObjectComponent_SetGuaranteedTriggerVolume");
static_assert(offsetof(TriggerableWorldObjectComponent_SetGuaranteedTriggerVolume, volume) == 0x000000, "Member 'TriggerableWorldObjectComponent_SetGuaranteedTriggerVolume::volume' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Authority_CancelOngoingScoreEvent
// 0x000C (0x000C - 0x0000)
struct DBDPlayerState_Authority_CancelOngoingScoreEvent final
{
public:
	struct FGameplayTag                           scoreTypeTag;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Authority_CancelOngoingScoreEvent) == 0x000004, "Wrong alignment on DBDPlayerState_Authority_CancelOngoingScoreEvent");
static_assert(sizeof(DBDPlayerState_Authority_CancelOngoingScoreEvent) == 0x00000C, "Wrong size on DBDPlayerState_Authority_CancelOngoingScoreEvent");
static_assert(offsetof(DBDPlayerState_Authority_CancelOngoingScoreEvent, scoreTypeTag) == 0x000000, "Member 'DBDPlayerState_Authority_CancelOngoingScoreEvent::scoreTypeTag' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Authority_EndOngoingScoreEvent
// 0x000C (0x000C - 0x0000)
struct DBDPlayerState_Authority_EndOngoingScoreEvent final
{
public:
	struct FGameplayTag                           scoreTypeTag;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Authority_EndOngoingScoreEvent) == 0x000004, "Wrong alignment on DBDPlayerState_Authority_EndOngoingScoreEvent");
static_assert(sizeof(DBDPlayerState_Authority_EndOngoingScoreEvent) == 0x00000C, "Wrong size on DBDPlayerState_Authority_EndOngoingScoreEvent");
static_assert(offsetof(DBDPlayerState_Authority_EndOngoingScoreEvent, scoreTypeTag) == 0x000000, "Member 'DBDPlayerState_Authority_EndOngoingScoreEvent::scoreTypeTag' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Authority_HandleScoreEvent
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayerState_Authority_HandleScoreEvent final
{
public:
	struct FGameplayTag                           scoreTypeTag;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScoreEventData                        scoreEventData;                                    // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Authority_HandleScoreEvent) == 0x000008, "Wrong alignment on DBDPlayerState_Authority_HandleScoreEvent");
static_assert(sizeof(DBDPlayerState_Authority_HandleScoreEvent) == 0x000028, "Wrong size on DBDPlayerState_Authority_HandleScoreEvent");
static_assert(offsetof(DBDPlayerState_Authority_HandleScoreEvent, scoreTypeTag) == 0x000000, "Member 'DBDPlayerState_Authority_HandleScoreEvent::scoreTypeTag' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Authority_HandleScoreEvent, scoreEventData) == 0x000010, "Member 'DBDPlayerState_Authority_HandleScoreEvent::scoreEventData' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Authority_SetPlayerGameState
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayerState_Authority_SetPlayerGameState final
{
public:
	EGameState                                    newGameState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isEscapeHatch;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Authority_SetPlayerGameState) == 0x000001, "Wrong alignment on DBDPlayerState_Authority_SetPlayerGameState");
static_assert(sizeof(DBDPlayerState_Authority_SetPlayerGameState) == 0x000002, "Wrong size on DBDPlayerState_Authority_SetPlayerGameState");
static_assert(offsetof(DBDPlayerState_Authority_SetPlayerGameState, newGameState) == 0x000000, "Member 'DBDPlayerState_Authority_SetPlayerGameState::newGameState' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Authority_SetPlayerGameState, isEscapeHatch) == 0x000001, "Member 'DBDPlayerState_Authority_SetPlayerGameState::isEscapeHatch' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.ChangeStartingGameRole
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_ChangeStartingGameRole final
{
public:
	EPlayerRole                                   gameRole;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_ChangeStartingGameRole) == 0x000001, "Wrong alignment on DBDPlayerState_ChangeStartingGameRole");
static_assert(sizeof(DBDPlayerState_ChangeStartingGameRole) == 0x000001, "Wrong size on DBDPlayerState_ChangeStartingGameRole");
static_assert(offsetof(DBDPlayerState_ChangeStartingGameRole, gameRole) == 0x000000, "Member 'DBDPlayerState_ChangeStartingGameRole::gameRole' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_AtlantaUpdateInventoryItem
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerState_Client_AtlantaUpdateInventoryItem final
{
public:
	class FName                                   itemid;                                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         newCount;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Client_AtlantaUpdateInventoryItem) == 0x000004, "Wrong alignment on DBDPlayerState_Client_AtlantaUpdateInventoryItem");
static_assert(sizeof(DBDPlayerState_Client_AtlantaUpdateInventoryItem) == 0x000010, "Wrong size on DBDPlayerState_Client_AtlantaUpdateInventoryItem");
static_assert(offsetof(DBDPlayerState_Client_AtlantaUpdateInventoryItem, itemid) == 0x000000, "Member 'DBDPlayerState_Client_AtlantaUpdateInventoryItem::itemid' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Client_AtlantaUpdateInventoryItem, newCount) == 0x00000C, "Member 'DBDPlayerState_Client_AtlantaUpdateInventoryItem::newCount' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_FetchCoreRituals
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_Client_FetchCoreRituals final
{
public:
	bool                                          hasClaimableRitual;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Client_FetchCoreRituals) == 0x000001, "Wrong alignment on DBDPlayerState_Client_FetchCoreRituals");
static_assert(sizeof(DBDPlayerState_Client_FetchCoreRituals) == 0x000001, "Wrong size on DBDPlayerState_Client_FetchCoreRituals");
static_assert(offsetof(DBDPlayerState_Client_FetchCoreRituals, hasClaimableRitual) == 0x000000, "Member 'DBDPlayerState_Client_FetchCoreRituals::hasClaimableRitual' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_HandleEndOfMatch
// 0x0020 (0x0020 - 0x0000)
struct DBDPlayerState_Client_HandleEndOfMatch final
{
public:
	bool                                          success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndOfMatchRPCData                     response;                                          // 0x0008(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Client_HandleEndOfMatch) == 0x000008, "Wrong alignment on DBDPlayerState_Client_HandleEndOfMatch");
static_assert(sizeof(DBDPlayerState_Client_HandleEndOfMatch) == 0x000020, "Wrong size on DBDPlayerState_Client_HandleEndOfMatch");
static_assert(offsetof(DBDPlayerState_Client_HandleEndOfMatch, success) == 0x000000, "Member 'DBDPlayerState_Client_HandleEndOfMatch::success' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Client_HandleEndOfMatch, response) == 0x000008, "Member 'DBDPlayerState_Client_HandleEndOfMatch::response' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_RemotelyDispatchGameEvent
// 0x0038 (0x0038 - 0x0000)
struct DBDPlayerState_Client_RemotelyDispatchGameEvent final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Client_RemotelyDispatchGameEvent) == 0x000008, "Wrong alignment on DBDPlayerState_Client_RemotelyDispatchGameEvent");
static_assert(sizeof(DBDPlayerState_Client_RemotelyDispatchGameEvent) == 0x000038, "Wrong size on DBDPlayerState_Client_RemotelyDispatchGameEvent");
static_assert(offsetof(DBDPlayerState_Client_RemotelyDispatchGameEvent, gameEventType) == 0x000000, "Member 'DBDPlayerState_Client_RemotelyDispatchGameEvent::gameEventType' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Client_RemotelyDispatchGameEvent, gameEventData) == 0x000010, "Member 'DBDPlayerState_Client_RemotelyDispatchGameEvent::gameEventData' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_RemotelyDispatchGameEventWithScore
// 0x0048 (0x0048 - 0x0000)
struct DBDPlayerState_Client_RemotelyDispatchGameEventWithScore final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FAwardedScore                          awardedScore;                                      // 0x0038(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Client_RemotelyDispatchGameEventWithScore) == 0x000008, "Wrong alignment on DBDPlayerState_Client_RemotelyDispatchGameEventWithScore");
static_assert(sizeof(DBDPlayerState_Client_RemotelyDispatchGameEventWithScore) == 0x000048, "Wrong size on DBDPlayerState_Client_RemotelyDispatchGameEventWithScore");
static_assert(offsetof(DBDPlayerState_Client_RemotelyDispatchGameEventWithScore, gameEventType) == 0x000000, "Member 'DBDPlayerState_Client_RemotelyDispatchGameEventWithScore::gameEventType' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Client_RemotelyDispatchGameEventWithScore, gameEventData) == 0x000010, "Member 'DBDPlayerState_Client_RemotelyDispatchGameEventWithScore::gameEventData' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Client_RemotelyDispatchGameEventWithScore, awardedScore) == 0x000038, "Member 'DBDPlayerState_Client_RemotelyDispatchGameEventWithScore::awardedScore' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_RemoveItemFromInventory
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerState_Client_RemoveItemFromInventory final
{
public:
	class FName                                   toRemove;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          updateLoadout;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerState_Client_RemoveItemFromInventory) == 0x000004, "Wrong alignment on DBDPlayerState_Client_RemoveItemFromInventory");
static_assert(sizeof(DBDPlayerState_Client_RemoveItemFromInventory) == 0x000010, "Wrong size on DBDPlayerState_Client_RemoveItemFromInventory");
static_assert(offsetof(DBDPlayerState_Client_RemoveItemFromInventory, toRemove) == 0x000000, "Member 'DBDPlayerState_Client_RemoveItemFromInventory::toRemove' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Client_RemoveItemFromInventory, updateLoadout) == 0x00000C, "Member 'DBDPlayerState_Client_RemoveItemFromInventory::updateLoadout' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_SetGameRole
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_Client_SetGameRole final
{
public:
	EPlayerRole                                   newRole;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Client_SetGameRole) == 0x000001, "Wrong alignment on DBDPlayerState_Client_SetGameRole");
static_assert(sizeof(DBDPlayerState_Client_SetGameRole) == 0x000001, "Wrong size on DBDPlayerState_Client_SetGameRole");
static_assert(offsetof(DBDPlayerState_Client_SetGameRole, newRole) == 0x000000, "Member 'DBDPlayerState_Client_SetGameRole::newRole' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_UpdateWallet
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayerState_Client_UpdateWallet final
{
public:
	class FString                                 currencyId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerState_Client_UpdateWallet) == 0x000008, "Wrong alignment on DBDPlayerState_Client_UpdateWallet");
static_assert(sizeof(DBDPlayerState_Client_UpdateWallet) == 0x000018, "Wrong size on DBDPlayerState_Client_UpdateWallet");
static_assert(offsetof(DBDPlayerState_Client_UpdateWallet, currencyId) == 0x000000, "Member 'DBDPlayerState_Client_UpdateWallet::currencyId' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Client_UpdateWallet, amount) == 0x000010, "Member 'DBDPlayerState_Client_UpdateWallet::amount' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.FireActiveStatusEffectEvent
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayerState_FireActiveStatusEffectEvent final
{
public:
	class FName                                   statusEffectID;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         percentage;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         iconFilePathIndex;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         levelToDisplay;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_FireActiveStatusEffectEvent) == 0x000004, "Wrong alignment on DBDPlayerState_FireActiveStatusEffectEvent");
static_assert(sizeof(DBDPlayerState_FireActiveStatusEffectEvent) == 0x000018, "Wrong size on DBDPlayerState_FireActiveStatusEffectEvent");
static_assert(offsetof(DBDPlayerState_FireActiveStatusEffectEvent, statusEffectID) == 0x000000, "Member 'DBDPlayerState_FireActiveStatusEffectEvent::statusEffectID' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_FireActiveStatusEffectEvent, percentage) == 0x00000C, "Member 'DBDPlayerState_FireActiveStatusEffectEvent::percentage' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_FireActiveStatusEffectEvent, iconFilePathIndex) == 0x000010, "Member 'DBDPlayerState_FireActiveStatusEffectEvent::iconFilePathIndex' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_FireActiveStatusEffectEvent, levelToDisplay) == 0x000014, "Member 'DBDPlayerState_FireActiveStatusEffectEvent::levelToDisplay' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.FireActiveStatusViewEvent
// 0x0044 (0x0044 - 0x0000)
struct DBDPlayerState_FireActiveStatusViewEvent final
{
public:
	class FName                                   statusViewID;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   uniqueSourceID;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStatusViewSource                      statusViewSource;                                  // 0x0018(0x002C)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_FireActiveStatusViewEvent) == 0x000004, "Wrong alignment on DBDPlayerState_FireActiveStatusViewEvent");
static_assert(sizeof(DBDPlayerState_FireActiveStatusViewEvent) == 0x000044, "Wrong size on DBDPlayerState_FireActiveStatusViewEvent");
static_assert(offsetof(DBDPlayerState_FireActiveStatusViewEvent, statusViewID) == 0x000000, "Member 'DBDPlayerState_FireActiveStatusViewEvent::statusViewID' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_FireActiveStatusViewEvent, uniqueSourceID) == 0x00000C, "Member 'DBDPlayerState_FireActiveStatusViewEvent::uniqueSourceID' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_FireActiveStatusViewEvent, statusViewSource) == 0x000018, "Member 'DBDPlayerState_FireActiveStatusViewEvent::statusViewSource' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.FireScoreEvent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerState_FireScoreEvent final
{
public:
	EDBDScoreTypes                                scoreType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         percentToAward;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_FireScoreEvent) == 0x000004, "Wrong alignment on DBDPlayerState_FireScoreEvent");
static_assert(sizeof(DBDPlayerState_FireScoreEvent) == 0x000008, "Wrong size on DBDPlayerState_FireScoreEvent");
static_assert(offsetof(DBDPlayerState_FireScoreEvent, scoreType) == 0x000000, "Member 'DBDPlayerState_FireScoreEvent::scoreType' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_FireScoreEvent, percentToAward) == 0x000004, "Member 'DBDPlayerState_FireScoreEvent::percentToAward' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Multicast_FireGameplayEvent
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayerState_Multicast_FireGameplayEvent final
{
public:
	EDBDScoreTypes                                playerGameplayEventType;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 effector;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Multicast_FireGameplayEvent) == 0x000008, "Wrong alignment on DBDPlayerState_Multicast_FireGameplayEvent");
static_assert(sizeof(DBDPlayerState_Multicast_FireGameplayEvent) == 0x000018, "Wrong size on DBDPlayerState_Multicast_FireGameplayEvent");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEvent, playerGameplayEventType) == 0x000000, "Member 'DBDPlayerState_Multicast_FireGameplayEvent::playerGameplayEventType' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEvent, amount) == 0x000004, "Member 'DBDPlayerState_Multicast_FireGameplayEvent::amount' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEvent, effector) == 0x000008, "Member 'DBDPlayerState_Multicast_FireGameplayEvent::effector' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEvent, target) == 0x000010, "Member 'DBDPlayerState_Multicast_FireGameplayEvent::target' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Multicast_FireGameplayEventWithScore
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayerState_Multicast_FireGameplayEventWithScore final
{
public:
	EDBDScoreTypes                                playerGameplayEventType;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 effector;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAwardedScore                          awardedScore;                                      // 0x0018(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Multicast_FireGameplayEventWithScore) == 0x000008, "Wrong alignment on DBDPlayerState_Multicast_FireGameplayEventWithScore");
static_assert(sizeof(DBDPlayerState_Multicast_FireGameplayEventWithScore) == 0x000028, "Wrong size on DBDPlayerState_Multicast_FireGameplayEventWithScore");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEventWithScore, playerGameplayEventType) == 0x000000, "Member 'DBDPlayerState_Multicast_FireGameplayEventWithScore::playerGameplayEventType' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEventWithScore, amount) == 0x000004, "Member 'DBDPlayerState_Multicast_FireGameplayEventWithScore::amount' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEventWithScore, effector) == 0x000008, "Member 'DBDPlayerState_Multicast_FireGameplayEventWithScore::effector' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEventWithScore, target) == 0x000010, "Member 'DBDPlayerState_Multicast_FireGameplayEventWithScore::target' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEventWithScore, awardedScore) == 0x000018, "Member 'DBDPlayerState_Multicast_FireGameplayEventWithScore::awardedScore' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Multicast_SetPlayerGameState
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayerState_Multicast_SetPlayerGameState final
{
public:
	EGameState                                    newGameState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isEscapeHatch;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Multicast_SetPlayerGameState) == 0x000001, "Wrong alignment on DBDPlayerState_Multicast_SetPlayerGameState");
static_assert(sizeof(DBDPlayerState_Multicast_SetPlayerGameState) == 0x000002, "Wrong size on DBDPlayerState_Multicast_SetPlayerGameState");
static_assert(offsetof(DBDPlayerState_Multicast_SetPlayerGameState, newGameState) == 0x000000, "Member 'DBDPlayerState_Multicast_SetPlayerGameState::newGameState' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_SetPlayerGameState, isEscapeHatch) == 0x000001, "Member 'DBDPlayerState_Multicast_SetPlayerGameState::isEscapeHatch' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Server_CheatSelectKiller
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerState_Server_CheatSelectKiller final
{
public:
	int32                                         slasherIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Server_CheatSelectKiller) == 0x000004, "Wrong alignment on DBDPlayerState_Server_CheatSelectKiller");
static_assert(sizeof(DBDPlayerState_Server_CheatSelectKiller) == 0x000004, "Wrong size on DBDPlayerState_Server_CheatSelectKiller");
static_assert(offsetof(DBDPlayerState_Server_CheatSelectKiller, slasherIndex) == 0x000000, "Member 'DBDPlayerState_Server_CheatSelectKiller::slasherIndex' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Server_CheatSelectSurvivor
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerState_Server_CheatSelectSurvivor final
{
public:
	int32                                         camperIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Server_CheatSelectSurvivor) == 0x000004, "Wrong alignment on DBDPlayerState_Server_CheatSelectSurvivor");
static_assert(sizeof(DBDPlayerState_Server_CheatSelectSurvivor) == 0x000004, "Wrong size on DBDPlayerState_Server_CheatSelectSurvivor");
static_assert(offsetof(DBDPlayerState_Server_CheatSelectSurvivor, camperIndex) == 0x000000, "Member 'DBDPlayerState_Server_CheatSelectSurvivor::camperIndex' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.GetGameplayNotificationManager
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerState_GetGameplayNotificationManager final
{
public:
	class UGameplayNotificationManager*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_GetGameplayNotificationManager) == 0x000008, "Wrong alignment on DBDPlayerState_GetGameplayNotificationManager");
static_assert(sizeof(DBDPlayerState_GetGameplayNotificationManager) == 0x000008, "Wrong size on DBDPlayerState_GetGameplayNotificationManager");
static_assert(offsetof(DBDPlayerState_GetGameplayNotificationManager, ReturnValue) == 0x000000, "Member 'DBDPlayerState_GetGameplayNotificationManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.GetGameRole
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_GetGameRole final
{
public:
	EPlayerRole                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_GetGameRole) == 0x000001, "Wrong alignment on DBDPlayerState_GetGameRole");
static_assert(sizeof(DBDPlayerState_GetGameRole) == 0x000001, "Wrong size on DBDPlayerState_GetGameRole");
static_assert(offsetof(DBDPlayerState_GetGameRole, ReturnValue) == 0x000000, "Member 'DBDPlayerState_GetGameRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.GetPlayerGameState
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_GetPlayerGameState final
{
public:
	EGameState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_GetPlayerGameState) == 0x000001, "Wrong alignment on DBDPlayerState_GetPlayerGameState");
static_assert(sizeof(DBDPlayerState_GetPlayerGameState) == 0x000001, "Wrong size on DBDPlayerState_GetPlayerGameState");
static_assert(offsetof(DBDPlayerState_GetPlayerGameState, ReturnValue) == 0x000000, "Member 'DBDPlayerState_GetPlayerGameState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.HasEscaped
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_HasEscaped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_HasEscaped) == 0x000001, "Wrong alignment on DBDPlayerState_HasEscaped");
static_assert(sizeof(DBDPlayerState_HasEscaped) == 0x000001, "Wrong size on DBDPlayerState_HasEscaped");
static_assert(offsetof(DBDPlayerState_HasEscaped, ReturnValue) == 0x000000, "Member 'DBDPlayerState_HasEscaped::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.IsInFinishedPlayingState
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_IsInFinishedPlayingState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_IsInFinishedPlayingState) == 0x000001, "Wrong alignment on DBDPlayerState_IsInFinishedPlayingState");
static_assert(sizeof(DBDPlayerState_IsInFinishedPlayingState) == 0x000001, "Wrong size on DBDPlayerState_IsInFinishedPlayingState");
static_assert(offsetof(DBDPlayerState_IsInFinishedPlayingState, ReturnValue) == 0x000000, "Member 'DBDPlayerState_IsInFinishedPlayingState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState_Menu.Multicast_SetSelectedCharacterCustomization
// 0x0040 (0x0040 - 0x0000)
struct DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization final
{
public:
	EPlayerRole                                   forRole;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         id;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEquippedPlayerCustomization           customization;                                     // 0x0008(0x0038)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization) == 0x000008, "Wrong alignment on DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization");
static_assert(sizeof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization) == 0x000040, "Wrong size on DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization");
static_assert(offsetof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization, forRole) == 0x000000, "Member 'DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization::forRole' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization, id) == 0x000004, "Member 'DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization::id' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization, customization) == 0x000008, "Member 'DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization::customization' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState_Menu.Multicast_SetSelectedCharacterId
// 0x000C (0x000C - 0x0000)
struct DBDPlayerState_Menu_Multicast_SetSelectedCharacterId final
{
public:
	EPlayerRole                                   forRole;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         id;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          updateDisplayData;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterId) == 0x000004, "Wrong alignment on DBDPlayerState_Menu_Multicast_SetSelectedCharacterId");
static_assert(sizeof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterId) == 0x00000C, "Wrong size on DBDPlayerState_Menu_Multicast_SetSelectedCharacterId");
static_assert(offsetof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterId, forRole) == 0x000000, "Member 'DBDPlayerState_Menu_Multicast_SetSelectedCharacterId::forRole' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterId, id) == 0x000004, "Member 'DBDPlayerState_Menu_Multicast_SetSelectedCharacterId::id' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterId, updateDisplayData) == 0x000008, "Member 'DBDPlayerState_Menu_Multicast_SetSelectedCharacterId::updateDisplayData' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState_Menu.Server_SetEquipment
// 0x0014 (0x0014 - 0x0000)
struct DBDPlayerState_Menu_Server_SetEquipment final
{
public:
	ELoadoutSlot                                  slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   itemId;                                            // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          callOnRep;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerState_Menu_Server_SetEquipment) == 0x000004, "Wrong alignment on DBDPlayerState_Menu_Server_SetEquipment");
static_assert(sizeof(DBDPlayerState_Menu_Server_SetEquipment) == 0x000014, "Wrong size on DBDPlayerState_Menu_Server_SetEquipment");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetEquipment, slot) == 0x000000, "Member 'DBDPlayerState_Menu_Server_SetEquipment::slot' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetEquipment, itemId) == 0x000004, "Member 'DBDPlayerState_Menu_Server_SetEquipment::itemId' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetEquipment, callOnRep) == 0x000010, "Member 'DBDPlayerState_Menu_Server_SetEquipment::callOnRep' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState_Menu.Server_SetEquipmentAddons
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayerState_Menu_Server_SetEquipmentAddons final
{
public:
	TArray<class FName>                           addonItemIds;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          callOnRep;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerState_Menu_Server_SetEquipmentAddons) == 0x000008, "Wrong alignment on DBDPlayerState_Menu_Server_SetEquipmentAddons");
static_assert(sizeof(DBDPlayerState_Menu_Server_SetEquipmentAddons) == 0x000018, "Wrong size on DBDPlayerState_Menu_Server_SetEquipmentAddons");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetEquipmentAddons, addonItemIds) == 0x000000, "Member 'DBDPlayerState_Menu_Server_SetEquipmentAddons::addonItemIds' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetEquipmentAddons, callOnRep) == 0x000010, "Member 'DBDPlayerState_Menu_Server_SetEquipmentAddons::callOnRep' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState_Menu.Server_SetSelectedCharacterCustomization
// 0x0040 (0x0040 - 0x0000)
struct DBDPlayerState_Menu_Server_SetSelectedCharacterCustomization final
{
public:
	EPlayerRole                                   forRole;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         id;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEquippedPlayerCustomization           customization;                                     // 0x0008(0x0038)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Menu_Server_SetSelectedCharacterCustomization) == 0x000008, "Wrong alignment on DBDPlayerState_Menu_Server_SetSelectedCharacterCustomization");
static_assert(sizeof(DBDPlayerState_Menu_Server_SetSelectedCharacterCustomization) == 0x000040, "Wrong size on DBDPlayerState_Menu_Server_SetSelectedCharacterCustomization");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetSelectedCharacterCustomization, forRole) == 0x000000, "Member 'DBDPlayerState_Menu_Server_SetSelectedCharacterCustomization::forRole' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetSelectedCharacterCustomization, id) == 0x000004, "Member 'DBDPlayerState_Menu_Server_SetSelectedCharacterCustomization::id' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetSelectedCharacterCustomization, customization) == 0x000008, "Member 'DBDPlayerState_Menu_Server_SetSelectedCharacterCustomization::customization' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState_Menu.Server_SetSelectedCharacterId
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerState_Menu_Server_SetSelectedCharacterId final
{
public:
	int32                                         id;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          updateDisplayData;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerState_Menu_Server_SetSelectedCharacterId) == 0x000004, "Wrong alignment on DBDPlayerState_Menu_Server_SetSelectedCharacterId");
static_assert(sizeof(DBDPlayerState_Menu_Server_SetSelectedCharacterId) == 0x000008, "Wrong size on DBDPlayerState_Menu_Server_SetSelectedCharacterId");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetSelectedCharacterId, id) == 0x000000, "Member 'DBDPlayerState_Menu_Server_SetSelectedCharacterId::id' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetSelectedCharacterId, updateDisplayData) == 0x000004, "Member 'DBDPlayerState_Menu_Server_SetSelectedCharacterId::updateDisplayData' has a wrong offset!");

// Function DeadByDaylight.AICharacterHideInLockerBehaviour.OnMovementFinished
// 0x0008 (0x0008 - 0x0000)
struct AICharacterHideInLockerBehaviour_OnMovementFinished final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICharacterHideInLockerBehaviour_OnMovementFinished) == 0x000004, "Wrong alignment on AICharacterHideInLockerBehaviour_OnMovementFinished");
static_assert(sizeof(AICharacterHideInLockerBehaviour_OnMovementFinished) == 0x000008, "Wrong size on AICharacterHideInLockerBehaviour_OnMovementFinished");
static_assert(offsetof(AICharacterHideInLockerBehaviour_OnMovementFinished, RequestID) == 0x000000, "Member 'AICharacterHideInLockerBehaviour_OnMovementFinished::RequestID' has a wrong offset!");
static_assert(offsetof(AICharacterHideInLockerBehaviour_OnMovementFinished, Result) == 0x000004, "Member 'AICharacterHideInLockerBehaviour_OnMovementFinished::Result' has a wrong offset!");

// Function DeadByDaylight.AICharacterRepairGeneratorBehaviourData.Init
// 0x0010 (0x0010 - 0x0000)
struct AICharacterRepairGeneratorBehaviourData_Init final
{
public:
	class AGenerator*                             generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterMovementTypes                       characterMovementType;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICharacterRepairGeneratorBehaviourData_Init) == 0x000008, "Wrong alignment on AICharacterRepairGeneratorBehaviourData_Init");
static_assert(sizeof(AICharacterRepairGeneratorBehaviourData_Init) == 0x000010, "Wrong size on AICharacterRepairGeneratorBehaviourData_Init");
static_assert(offsetof(AICharacterRepairGeneratorBehaviourData_Init, generator) == 0x000000, "Member 'AICharacterRepairGeneratorBehaviourData_Init::generator' has a wrong offset!");
static_assert(offsetof(AICharacterRepairGeneratorBehaviourData_Init, characterMovementType) == 0x000008, "Member 'AICharacterRepairGeneratorBehaviourData_Init::characterMovementType' has a wrong offset!");

// Function DeadByDaylight.AICharacterRepairGeneratorBehaviour.OnGeneratorRepairedEventHandler
// 0x0001 (0x0001 - 0x0000)
struct AICharacterRepairGeneratorBehaviour_OnGeneratorRepairedEventHandler final
{
public:
	bool                                          isAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharacterRepairGeneratorBehaviour_OnGeneratorRepairedEventHandler) == 0x000001, "Wrong alignment on AICharacterRepairGeneratorBehaviour_OnGeneratorRepairedEventHandler");
static_assert(sizeof(AICharacterRepairGeneratorBehaviour_OnGeneratorRepairedEventHandler) == 0x000001, "Wrong size on AICharacterRepairGeneratorBehaviour_OnGeneratorRepairedEventHandler");
static_assert(offsetof(AICharacterRepairGeneratorBehaviour_OnGeneratorRepairedEventHandler, isAutoCompleted) == 0x000000, "Member 'AICharacterRepairGeneratorBehaviour_OnGeneratorRepairedEventHandler::isAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.AICharacterRepairGeneratorBehaviour.OnMovementFinished
// 0x0008 (0x0008 - 0x0000)
struct AICharacterRepairGeneratorBehaviour_OnMovementFinished final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICharacterRepairGeneratorBehaviour_OnMovementFinished) == 0x000004, "Wrong alignment on AICharacterRepairGeneratorBehaviour_OnMovementFinished");
static_assert(sizeof(AICharacterRepairGeneratorBehaviour_OnMovementFinished) == 0x000008, "Wrong size on AICharacterRepairGeneratorBehaviour_OnMovementFinished");
static_assert(offsetof(AICharacterRepairGeneratorBehaviour_OnMovementFinished, RequestID) == 0x000000, "Member 'AICharacterRepairGeneratorBehaviour_OnMovementFinished::RequestID' has a wrong offset!");
static_assert(offsetof(AICharacterRepairGeneratorBehaviour_OnMovementFinished, Result) == 0x000004, "Member 'AICharacterRepairGeneratorBehaviour_OnMovementFinished::Result' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaStoreScreen.HandleOnClickedBuyAuricCell
// 0x0004 (0x0004 - 0x0000)
struct UMGAtlantaStoreScreen_HandleOnClickedBuyAuricCell final
{
public:
	int32                                         cellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaStoreScreen_HandleOnClickedBuyAuricCell) == 0x000004, "Wrong alignment on UMGAtlantaStoreScreen_HandleOnClickedBuyAuricCell");
static_assert(sizeof(UMGAtlantaStoreScreen_HandleOnClickedBuyAuricCell) == 0x000004, "Wrong size on UMGAtlantaStoreScreen_HandleOnClickedBuyAuricCell");
static_assert(offsetof(UMGAtlantaStoreScreen_HandleOnClickedBuyAuricCell, cellIndex) == 0x000000, "Member 'UMGAtlantaStoreScreen_HandleOnClickedBuyAuricCell::cellIndex' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaStoreScreen.SetBank
// 0x0008 (0x0008 - 0x0000)
struct UMGAtlantaStoreScreen_SetBank final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         bank;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaStoreScreen_SetBank) == 0x000004, "Wrong alignment on UMGAtlantaStoreScreen_SetBank");
static_assert(sizeof(UMGAtlantaStoreScreen_SetBank) == 0x000008, "Wrong size on UMGAtlantaStoreScreen_SetBank");
static_assert(offsetof(UMGAtlantaStoreScreen_SetBank, currencyType) == 0x000000, "Member 'UMGAtlantaStoreScreen_SetBank::currencyType' has a wrong offset!");
static_assert(offsetof(UMGAtlantaStoreScreen_SetBank, bank) == 0x000004, "Member 'UMGAtlantaStoreScreen_SetBank::bank' has a wrong offset!");

// Function DeadByDaylight.AIHealAllyBehaviourData.Init
// 0x0008 (0x0008 - 0x0000)
struct AIHealAllyBehaviourData_Init final
{
public:
	class ACamperPlayer*                          allyToHealTarget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHealAllyBehaviourData_Init) == 0x000008, "Wrong alignment on AIHealAllyBehaviourData_Init");
static_assert(sizeof(AIHealAllyBehaviourData_Init) == 0x000008, "Wrong size on AIHealAllyBehaviourData_Init");
static_assert(offsetof(AIHealAllyBehaviourData_Init, allyToHealTarget) == 0x000000, "Member 'AIHealAllyBehaviourData_Init::allyToHealTarget' has a wrong offset!");

// Function DeadByDaylight.UMGRitualClaimRewardButton.SetClaimedButtonStatus
// 0x0008 (0x0008 - 0x0000)
struct UMGRitualClaimRewardButton_SetClaimedButtonStatus final
{
public:
	bool                                          isClaimed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         percent;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGRitualClaimRewardButton_SetClaimedButtonStatus) == 0x000004, "Wrong alignment on UMGRitualClaimRewardButton_SetClaimedButtonStatus");
static_assert(sizeof(UMGRitualClaimRewardButton_SetClaimedButtonStatus) == 0x000008, "Wrong size on UMGRitualClaimRewardButton_SetClaimedButtonStatus");
static_assert(offsetof(UMGRitualClaimRewardButton_SetClaimedButtonStatus, isClaimed) == 0x000000, "Member 'UMGRitualClaimRewardButton_SetClaimedButtonStatus::isClaimed' has a wrong offset!");
static_assert(offsetof(UMGRitualClaimRewardButton_SetClaimedButtonStatus, percent) == 0x000004, "Member 'UMGRitualClaimRewardButton_SetClaimedButtonStatus::percent' has a wrong offset!");

// Function DeadByDaylight.AIHealAllyBehaviour.Init
// 0x0010 (0x0010 - 0x0000)
struct AIHealAllyBehaviour_Init final
{
public:
	class ADBDPlayer*                             character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAICharacterBehaviourData*              behaviourData;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHealAllyBehaviour_Init) == 0x000008, "Wrong alignment on AIHealAllyBehaviour_Init");
static_assert(sizeof(AIHealAllyBehaviour_Init) == 0x000010, "Wrong size on AIHealAllyBehaviour_Init");
static_assert(offsetof(AIHealAllyBehaviour_Init, character) == 0x000000, "Member 'AIHealAllyBehaviour_Init::character' has a wrong offset!");
static_assert(offsetof(AIHealAllyBehaviour_Init, behaviourData) == 0x000008, "Member 'AIHealAllyBehaviour_Init::behaviourData' has a wrong offset!");

// Function DeadByDaylight.AIHealAllyBehaviour.TargetPositionReached
// 0x0008 (0x0008 - 0x0000)
struct AIHealAllyBehaviour_TargetPositionReached final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHealAllyBehaviour_TargetPositionReached) == 0x000004, "Wrong alignment on AIHealAllyBehaviour_TargetPositionReached");
static_assert(sizeof(AIHealAllyBehaviour_TargetPositionReached) == 0x000008, "Wrong size on AIHealAllyBehaviour_TargetPositionReached");
static_assert(offsetof(AIHealAllyBehaviour_TargetPositionReached, RequestID) == 0x000000, "Member 'AIHealAllyBehaviour_TargetPositionReached::RequestID' has a wrong offset!");
static_assert(offsetof(AIHealAllyBehaviour_TargetPositionReached, Result) == 0x000004, "Member 'AIHealAllyBehaviour_TargetPositionReached::Result' has a wrong offset!");

// Function DeadByDaylight.UMGRoleSelectionScreen.ButtonClickEvent
// 0x0001 (0x0001 - 0x0000)
struct UMGRoleSelectionScreen_ButtonClickEvent final
{
public:
	ERoleSelectionScreenButton                    buttonId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGRoleSelectionScreen_ButtonClickEvent) == 0x000001, "Wrong alignment on UMGRoleSelectionScreen_ButtonClickEvent");
static_assert(sizeof(UMGRoleSelectionScreen_ButtonClickEvent) == 0x000001, "Wrong size on UMGRoleSelectionScreen_ButtonClickEvent");
static_assert(offsetof(UMGRoleSelectionScreen_ButtonClickEvent, buttonId) == 0x000000, "Member 'UMGRoleSelectionScreen_ButtonClickEvent::buttonId' has a wrong offset!");

// Function DeadByDaylight.AIMoveToInteractData.Init
// 0x0018 (0x0018 - 0x0000)
struct AIMoveToInteractData_Init final
{
public:
	class AActor*                                 interactActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterMovementTypes                       characterMovementTypes;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 targetPositionActor;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveToInteractData_Init) == 0x000008, "Wrong alignment on AIMoveToInteractData_Init");
static_assert(sizeof(AIMoveToInteractData_Init) == 0x000018, "Wrong size on AIMoveToInteractData_Init");
static_assert(offsetof(AIMoveToInteractData_Init, interactActor) == 0x000000, "Member 'AIMoveToInteractData_Init::interactActor' has a wrong offset!");
static_assert(offsetof(AIMoveToInteractData_Init, characterMovementTypes) == 0x000008, "Member 'AIMoveToInteractData_Init::characterMovementTypes' has a wrong offset!");
static_assert(offsetof(AIMoveToInteractData_Init, targetPositionActor) == 0x000010, "Member 'AIMoveToInteractData_Init::targetPositionActor' has a wrong offset!");

// Function DeadByDaylight.StatusView.FireNotification
// 0x002C (0x002C - 0x0000)
struct StatusView_FireNotification final
{
public:
	struct FStatusViewSource                      statusViewSource;                                  // 0x0000(0x002C)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusView_FireNotification) == 0x000004, "Wrong alignment on StatusView_FireNotification");
static_assert(sizeof(StatusView_FireNotification) == 0x00002C, "Wrong size on StatusView_FireNotification");
static_assert(offsetof(StatusView_FireNotification, statusViewSource) == 0x000000, "Member 'StatusView_FireNotification::statusViewSource' has a wrong offset!");

// Function DeadByDaylight.StatusView.ResetView
// 0x0008 (0x0008 - 0x0000)
struct StatusView_ResetView final
{
public:
	const class ADBDPlayer*                       dbdPlayer;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusView_ResetView) == 0x000008, "Wrong alignment on StatusView_ResetView");
static_assert(sizeof(StatusView_ResetView) == 0x000008, "Wrong size on StatusView_ResetView");
static_assert(offsetof(StatusView_ResetView, dbdPlayer) == 0x000000, "Member 'StatusView_ResetView::dbdPlayer' has a wrong offset!");

// Function DeadByDaylight.AIMoveToInteract.Init
// 0x0010 (0x0010 - 0x0000)
struct AIMoveToInteract_Init final
{
public:
	class ADBDPlayer*                             character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAICharacterBehaviourData*              behaviourData;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveToInteract_Init) == 0x000008, "Wrong alignment on AIMoveToInteract_Init");
static_assert(sizeof(AIMoveToInteract_Init) == 0x000010, "Wrong size on AIMoveToInteract_Init");
static_assert(offsetof(AIMoveToInteract_Init, character) == 0x000000, "Member 'AIMoveToInteract_Init::character' has a wrong offset!");
static_assert(offsetof(AIMoveToInteract_Init, behaviourData) == 0x000008, "Member 'AIMoveToInteract_Init::behaviourData' has a wrong offset!");

// Function DeadByDaylight.AIMoveToInteract.InteractionPointReached
// 0x0008 (0x0008 - 0x0000)
struct AIMoveToInteract_InteractionPointReached final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMoveToInteract_InteractionPointReached) == 0x000004, "Wrong alignment on AIMoveToInteract_InteractionPointReached");
static_assert(sizeof(AIMoveToInteract_InteractionPointReached) == 0x000008, "Wrong size on AIMoveToInteract_InteractionPointReached");
static_assert(offsetof(AIMoveToInteract_InteractionPointReached, RequestID) == 0x000000, "Member 'AIMoveToInteract_InteractionPointReached::RequestID' has a wrong offset!");
static_assert(offsetof(AIMoveToInteract_InteractionPointReached, Result) == 0x000004, "Member 'AIMoveToInteract_InteractionPointReached::Result' has a wrong offset!");

// Function DeadByDaylight.AIMoveToPositionData.Init
// 0x0010 (0x0010 - 0x0000)
struct AIMoveToPositionData_Init final
{
public:
	class AActor*                                 positionActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterMovementTypes                       movementType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          usePathfinding;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMoveToPositionData_Init) == 0x000008, "Wrong alignment on AIMoveToPositionData_Init");
static_assert(sizeof(AIMoveToPositionData_Init) == 0x000010, "Wrong size on AIMoveToPositionData_Init");
static_assert(offsetof(AIMoveToPositionData_Init, positionActor) == 0x000000, "Member 'AIMoveToPositionData_Init::positionActor' has a wrong offset!");
static_assert(offsetof(AIMoveToPositionData_Init, movementType) == 0x000008, "Member 'AIMoveToPositionData_Init::movementType' has a wrong offset!");
static_assert(offsetof(AIMoveToPositionData_Init, usePathfinding) == 0x000009, "Member 'AIMoveToPositionData_Init::usePathfinding' has a wrong offset!");

// Function DeadByDaylight.AIMoveToPosition.Init
// 0x0010 (0x0010 - 0x0000)
struct AIMoveToPosition_Init final
{
public:
	class ADBDPlayer*                             character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAICharacterBehaviourData*              behaviourData;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveToPosition_Init) == 0x000008, "Wrong alignment on AIMoveToPosition_Init");
static_assert(sizeof(AIMoveToPosition_Init) == 0x000010, "Wrong size on AIMoveToPosition_Init");
static_assert(offsetof(AIMoveToPosition_Init, character) == 0x000000, "Member 'AIMoveToPosition_Init::character' has a wrong offset!");
static_assert(offsetof(AIMoveToPosition_Init, behaviourData) == 0x000008, "Member 'AIMoveToPosition_Init::behaviourData' has a wrong offset!");

// Function DeadByDaylight.AIMoveToPosition.TargetPositionReached
// 0x0008 (0x0008 - 0x0000)
struct AIMoveToPosition_TargetPositionReached final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMoveToPosition_TargetPositionReached) == 0x000004, "Wrong alignment on AIMoveToPosition_TargetPositionReached");
static_assert(sizeof(AIMoveToPosition_TargetPositionReached) == 0x000008, "Wrong size on AIMoveToPosition_TargetPositionReached");
static_assert(offsetof(AIMoveToPosition_TargetPositionReached, RequestID) == 0x000000, "Member 'AIMoveToPosition_TargetPositionReached::RequestID' has a wrong offset!");
static_assert(offsetof(AIMoveToPosition_TargetPositionReached, Result) == 0x000004, "Member 'AIMoveToPosition_TargetPositionReached::Result' has a wrong offset!");

// Function DeadByDaylight.UMGBaseLandingPageStorefrontWidget.HandleTabSelected
// 0x0001 (0x0001 - 0x0000)
struct UMGBaseLandingPageStorefrontWidget_HandleTabSelected final
{
public:
	EStorefrontState                              tabId;                                             // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBaseLandingPageStorefrontWidget_HandleTabSelected) == 0x000001, "Wrong alignment on UMGBaseLandingPageStorefrontWidget_HandleTabSelected");
static_assert(sizeof(UMGBaseLandingPageStorefrontWidget_HandleTabSelected) == 0x000001, "Wrong size on UMGBaseLandingPageStorefrontWidget_HandleTabSelected");
static_assert(offsetof(UMGBaseLandingPageStorefrontWidget_HandleTabSelected, tabId) == 0x000000, "Member 'UMGBaseLandingPageStorefrontWidget_HandleTabSelected::tabId' has a wrong offset!");

// Function DeadByDaylight.UMGSettingContextButton.GetContextButtonData
// 0x0004 (0x0004 - 0x0000)
struct UMGSettingContextButton_GetContextButtonData final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingContextButton_GetContextButtonData) == 0x000004, "Wrong alignment on UMGSettingContextButton_GetContextButtonData");
static_assert(sizeof(UMGSettingContextButton_GetContextButtonData) == 0x000004, "Wrong size on UMGSettingContextButton_GetContextButtonData");
static_assert(offsetof(UMGSettingContextButton_GetContextButtonData, ReturnValue) == 0x000000, "Member 'UMGSettingContextButton_GetContextButtonData::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGSettingContextButton.SetButtonText
// 0x0010 (0x0010 - 0x0000)
struct UMGSettingContextButton_SetButtonText final
{
public:
	class FString                                 buttonText;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingContextButton_SetButtonText) == 0x000008, "Wrong alignment on UMGSettingContextButton_SetButtonText");
static_assert(sizeof(UMGSettingContextButton_SetButtonText) == 0x000010, "Wrong size on UMGSettingContextButton_SetButtonText");
static_assert(offsetof(UMGSettingContextButton_SetButtonText, buttonText) == 0x000000, "Member 'UMGSettingContextButton_SetButtonText::buttonText' has a wrong offset!");

// Function DeadByDaylight.UMGSettingContextButton.SetContextButtonData
// 0x0004 (0x0004 - 0x0000)
struct UMGSettingContextButton_SetContextButtonData final
{
public:
	int32                                         buttonID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingContextButton_SetContextButtonData) == 0x000004, "Wrong alignment on UMGSettingContextButton_SetContextButtonData");
static_assert(sizeof(UMGSettingContextButton_SetContextButtonData) == 0x000004, "Wrong size on UMGSettingContextButton_SetContextButtonData");
static_assert(offsetof(UMGSettingContextButton_SetContextButtonData, buttonID) == 0x000000, "Member 'UMGSettingContextButton_SetContextButtonData::buttonID' has a wrong offset!");

// Function DeadByDaylight.UMGSettingContextButton.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct UMGSettingContextButton_SetIsSelected final
{
public:
	bool                                          isSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingContextButton_SetIsSelected) == 0x000001, "Wrong alignment on UMGSettingContextButton_SetIsSelected");
static_assert(sizeof(UMGSettingContextButton_SetIsSelected) == 0x000001, "Wrong size on UMGSettingContextButton_SetIsSelected");
static_assert(offsetof(UMGSettingContextButton_SetIsSelected, isSelected) == 0x000000, "Member 'UMGSettingContextButton_SetIsSelected::isSelected' has a wrong offset!");

// Function DeadByDaylight.UMGSettingContextWidget.HandleContextButtonClickEvent
// 0x0004 (0x0004 - 0x0000)
struct UMGSettingContextWidget_HandleContextButtonClickEvent final
{
public:
	int32                                         buttonData;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingContextWidget_HandleContextButtonClickEvent) == 0x000004, "Wrong alignment on UMGSettingContextWidget_HandleContextButtonClickEvent");
static_assert(sizeof(UMGSettingContextWidget_HandleContextButtonClickEvent) == 0x000004, "Wrong size on UMGSettingContextWidget_HandleContextButtonClickEvent");
static_assert(offsetof(UMGSettingContextWidget_HandleContextButtonClickEvent, buttonData) == 0x000000, "Member 'UMGSettingContextWidget_HandleContextButtonClickEvent::buttonData' has a wrong offset!");

// Function DeadByDaylight.UMGSettingContextWidget.SetContextTitle
// 0x0018 (0x0018 - 0x0000)
struct UMGSettingContextWidget_SetContextTitle final
{
public:
	class FText                                   contextTitle;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingContextWidget_SetContextTitle) == 0x000008, "Wrong alignment on UMGSettingContextWidget_SetContextTitle");
static_assert(sizeof(UMGSettingContextWidget_SetContextTitle) == 0x000018, "Wrong size on UMGSettingContextWidget_SetContextTitle");
static_assert(offsetof(UMGSettingContextWidget_SetContextTitle, contextTitle) == 0x000000, "Member 'UMGSettingContextWidget_SetContextTitle::contextTitle' has a wrong offset!");

// Function DeadByDaylight.EscapeRequirementTracker.OnGameEventDispatched
// 0x0038 (0x0038 - 0x0000)
struct EscapeRequirementTracker_OnGameEventDispatched final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeRequirementTracker_OnGameEventDispatched) == 0x000008, "Wrong alignment on EscapeRequirementTracker_OnGameEventDispatched");
static_assert(sizeof(EscapeRequirementTracker_OnGameEventDispatched) == 0x000038, "Wrong size on EscapeRequirementTracker_OnGameEventDispatched");
static_assert(offsetof(EscapeRequirementTracker_OnGameEventDispatched, gameEventType) == 0x000000, "Member 'EscapeRequirementTracker_OnGameEventDispatched::gameEventType' has a wrong offset!");
static_assert(offsetof(EscapeRequirementTracker_OnGameEventDispatched, gameEventData) == 0x000010, "Member 'EscapeRequirementTracker_OnGameEventDispatched::gameEventData' has a wrong offset!");

// Function DeadByDaylight.AISense_Trail.ReportTrailEvent
// 0x0030 (0x0030 - 0x0000)
struct AISense_Trail_ReportTrailEvent final
{
public:
	class UObject*                                worldContextObj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 instigator;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ignoreOnPerkTag;                                   // 0x0020(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         lifeTime;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISense_Trail_ReportTrailEvent) == 0x000008, "Wrong alignment on AISense_Trail_ReportTrailEvent");
static_assert(sizeof(AISense_Trail_ReportTrailEvent) == 0x000030, "Wrong size on AISense_Trail_ReportTrailEvent");
static_assert(offsetof(AISense_Trail_ReportTrailEvent, worldContextObj) == 0x000000, "Member 'AISense_Trail_ReportTrailEvent::worldContextObj' has a wrong offset!");
static_assert(offsetof(AISense_Trail_ReportTrailEvent, location) == 0x000008, "Member 'AISense_Trail_ReportTrailEvent::location' has a wrong offset!");
static_assert(offsetof(AISense_Trail_ReportTrailEvent, instigator) == 0x000018, "Member 'AISense_Trail_ReportTrailEvent::instigator' has a wrong offset!");
static_assert(offsetof(AISense_Trail_ReportTrailEvent, ignoreOnPerkTag) == 0x000020, "Member 'AISense_Trail_ReportTrailEvent::ignoreOnPerkTag' has a wrong offset!");
static_assert(offsetof(AISense_Trail_ReportTrailEvent, lifeTime) == 0x00002C, "Member 'AISense_Trail_ReportTrailEvent::lifeTime' has a wrong offset!");

// Function DeadByDaylight.AISlasherChaseAndAttackBehaviourData.Init
// 0x0010 (0x0010 - 0x0000)
struct AISlasherChaseAndAttackBehaviourData_Init final
{
public:
	class ACamperPlayer*                          targetSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         attackRangeDistance;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         locationDistance;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISlasherChaseAndAttackBehaviourData_Init) == 0x000008, "Wrong alignment on AISlasherChaseAndAttackBehaviourData_Init");
static_assert(sizeof(AISlasherChaseAndAttackBehaviourData_Init) == 0x000010, "Wrong size on AISlasherChaseAndAttackBehaviourData_Init");
static_assert(offsetof(AISlasherChaseAndAttackBehaviourData_Init, targetSurvivor) == 0x000000, "Member 'AISlasherChaseAndAttackBehaviourData_Init::targetSurvivor' has a wrong offset!");
static_assert(offsetof(AISlasherChaseAndAttackBehaviourData_Init, attackRangeDistance) == 0x000008, "Member 'AISlasherChaseAndAttackBehaviourData_Init::attackRangeDistance' has a wrong offset!");
static_assert(offsetof(AISlasherChaseAndAttackBehaviourData_Init, locationDistance) == 0x00000C, "Member 'AISlasherChaseAndAttackBehaviourData_Init::locationDistance' has a wrong offset!");

// Function DeadByDaylight.AISlasherMoveToGrabSurvivorBehaviourData.Init
// 0x0008 (0x0008 - 0x0000)
struct AISlasherMoveToGrabSurvivorBehaviourData_Init final
{
public:
	class ACamperPlayer*                          targetSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISlasherMoveToGrabSurvivorBehaviourData_Init) == 0x000008, "Wrong alignment on AISlasherMoveToGrabSurvivorBehaviourData_Init");
static_assert(sizeof(AISlasherMoveToGrabSurvivorBehaviourData_Init) == 0x000008, "Wrong size on AISlasherMoveToGrabSurvivorBehaviourData_Init");
static_assert(offsetof(AISlasherMoveToGrabSurvivorBehaviourData_Init, targetSurvivor) == 0x000000, "Member 'AISlasherMoveToGrabSurvivorBehaviourData_Init::targetSurvivor' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutBaseWidget.SetDividerImageColor
// 0x0010 (0x0010 - 0x0000)
struct UMGLoadoutBaseWidget_SetDividerImageColor final
{
public:
	struct FLinearColor                           color;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutBaseWidget_SetDividerImageColor) == 0x000004, "Wrong alignment on UMGLoadoutBaseWidget_SetDividerImageColor");
static_assert(sizeof(UMGLoadoutBaseWidget_SetDividerImageColor) == 0x000010, "Wrong size on UMGLoadoutBaseWidget_SetDividerImageColor");
static_assert(offsetof(UMGLoadoutBaseWidget_SetDividerImageColor, color) == 0x000000, "Member 'UMGLoadoutBaseWidget_SetDividerImageColor::color' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutBaseWidget.SetIsSelectedLoadoutItemButton
// 0x0001 (0x0001 - 0x0000)
struct UMGLoadoutBaseWidget_SetIsSelectedLoadoutItemButton final
{
public:
	ELoadoutSlot                                  loadoutSlot;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutBaseWidget_SetIsSelectedLoadoutItemButton) == 0x000001, "Wrong alignment on UMGLoadoutBaseWidget_SetIsSelectedLoadoutItemButton");
static_assert(sizeof(UMGLoadoutBaseWidget_SetIsSelectedLoadoutItemButton) == 0x000001, "Wrong size on UMGLoadoutBaseWidget_SetIsSelectedLoadoutItemButton");
static_assert(offsetof(UMGLoadoutBaseWidget_SetIsSelectedLoadoutItemButton, loadoutSlot) == 0x000000, "Member 'UMGLoadoutBaseWidget_SetIsSelectedLoadoutItemButton::loadoutSlot' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutBaseWidget.SetLoadoutData
// 0x0018 (0x0018 - 0x0000)
struct UMGLoadoutBaseWidget_SetLoadoutData final
{
public:
	TArray<struct FInventorySlotData>             loadoutData;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          usingMatchRules;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          perkSlotsLockedByAdmin;                            // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoadoutSlot                                  loadoutSlot;                                       // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSlasher;                                         // 0x0013(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isClickable;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGLoadoutBaseWidget_SetLoadoutData) == 0x000008, "Wrong alignment on UMGLoadoutBaseWidget_SetLoadoutData");
static_assert(sizeof(UMGLoadoutBaseWidget_SetLoadoutData) == 0x000018, "Wrong size on UMGLoadoutBaseWidget_SetLoadoutData");
static_assert(offsetof(UMGLoadoutBaseWidget_SetLoadoutData, loadoutData) == 0x000000, "Member 'UMGLoadoutBaseWidget_SetLoadoutData::loadoutData' has a wrong offset!");
static_assert(offsetof(UMGLoadoutBaseWidget_SetLoadoutData, usingMatchRules) == 0x000010, "Member 'UMGLoadoutBaseWidget_SetLoadoutData::usingMatchRules' has a wrong offset!");
static_assert(offsetof(UMGLoadoutBaseWidget_SetLoadoutData, perkSlotsLockedByAdmin) == 0x000011, "Member 'UMGLoadoutBaseWidget_SetLoadoutData::perkSlotsLockedByAdmin' has a wrong offset!");
static_assert(offsetof(UMGLoadoutBaseWidget_SetLoadoutData, loadoutSlot) == 0x000012, "Member 'UMGLoadoutBaseWidget_SetLoadoutData::loadoutSlot' has a wrong offset!");
static_assert(offsetof(UMGLoadoutBaseWidget_SetLoadoutData, isSlasher) == 0x000013, "Member 'UMGLoadoutBaseWidget_SetLoadoutData::isSlasher' has a wrong offset!");
static_assert(offsetof(UMGLoadoutBaseWidget_SetLoadoutData, isClickable) == 0x000014, "Member 'UMGLoadoutBaseWidget_SetLoadoutData::isClickable' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutFilterWidget.InitFilterWidget
// 0x0050 (0x0050 - 0x0000)
struct UMGLoadoutFilterWidget_InitFilterWidget final
{
public:
	TMap<class FName, TSoftObjectPtr<class UTexture2D>> filtersInfo;                                 // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutFilterWidget_InitFilterWidget) == 0x000008, "Wrong alignment on UMGLoadoutFilterWidget_InitFilterWidget");
static_assert(sizeof(UMGLoadoutFilterWidget_InitFilterWidget) == 0x000050, "Wrong size on UMGLoadoutFilterWidget_InitFilterWidget");
static_assert(offsetof(UMGLoadoutFilterWidget_InitFilterWidget, filtersInfo) == 0x000000, "Member 'UMGLoadoutFilterWidget_InitFilterWidget::filtersInfo' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutFilterWidget.OnFilterButtonClicked
// 0x000C (0x000C - 0x0000)
struct UMGLoadoutFilterWidget_OnFilterButtonClicked final
{
public:
	class FName                                   filterName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutFilterWidget_OnFilterButtonClicked) == 0x000004, "Wrong alignment on UMGLoadoutFilterWidget_OnFilterButtonClicked");
static_assert(sizeof(UMGLoadoutFilterWidget_OnFilterButtonClicked) == 0x00000C, "Wrong size on UMGLoadoutFilterWidget_OnFilterButtonClicked");
static_assert(offsetof(UMGLoadoutFilterWidget_OnFilterButtonClicked, filterName) == 0x000000, "Member 'UMGLoadoutFilterWidget_OnFilterButtonClicked::filterName' has a wrong offset!");

// Function DeadByDaylight.DedicatedServerHandlerComponent.OnGameEvent
// 0x0038 (0x0038 - 0x0000)
struct DedicatedServerHandlerComponent_OnGameEvent final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DedicatedServerHandlerComponent_OnGameEvent) == 0x000008, "Wrong alignment on DedicatedServerHandlerComponent_OnGameEvent");
static_assert(sizeof(DedicatedServerHandlerComponent_OnGameEvent) == 0x000038, "Wrong size on DedicatedServerHandlerComponent_OnGameEvent");
static_assert(offsetof(DedicatedServerHandlerComponent_OnGameEvent, gameEventType) == 0x000000, "Member 'DedicatedServerHandlerComponent_OnGameEvent::gameEventType' has a wrong offset!");
static_assert(offsetof(DedicatedServerHandlerComponent_OnGameEvent, gameEventData) == 0x000010, "Member 'DedicatedServerHandlerComponent_OnGameEvent::gameEventData' has a wrong offset!");

// Function DeadByDaylight.DedicatedServerHandlerComponent.ReceiveGameEvent
// 0x0018 (0x0018 - 0x0000)
struct DedicatedServerHandlerComponent_ReceiveGameEvent final
{
public:
	EDBDScoreTypes                                scoreType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DedicatedServerHandlerComponent_ReceiveGameEvent) == 0x000008, "Wrong alignment on DedicatedServerHandlerComponent_ReceiveGameEvent");
static_assert(sizeof(DedicatedServerHandlerComponent_ReceiveGameEvent) == 0x000018, "Wrong size on DedicatedServerHandlerComponent_ReceiveGameEvent");
static_assert(offsetof(DedicatedServerHandlerComponent_ReceiveGameEvent, scoreType) == 0x000000, "Member 'DedicatedServerHandlerComponent_ReceiveGameEvent::scoreType' has a wrong offset!");
static_assert(offsetof(DedicatedServerHandlerComponent_ReceiveGameEvent, amount) == 0x000004, "Member 'DedicatedServerHandlerComponent_ReceiveGameEvent::amount' has a wrong offset!");
static_assert(offsetof(DedicatedServerHandlerComponent_ReceiveGameEvent, instigator) == 0x000008, "Member 'DedicatedServerHandlerComponent_ReceiveGameEvent::instigator' has a wrong offset!");
static_assert(offsetof(DedicatedServerHandlerComponent_ReceiveGameEvent, target) == 0x000010, "Member 'DedicatedServerHandlerComponent_ReceiveGameEvent::target' has a wrong offset!");

// Function DeadByDaylight.AnimationFollowerActor.NativeOnMontageEnded
// 0x0028 (0x0028 - 0x0000)
struct AnimationFollowerActor_NativeOnMontageEnded final
{
public:
	struct FAnimationMontageDescriptor            montage;                                           // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          interrupted;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationFollowerActor_NativeOnMontageEnded) == 0x000008, "Wrong alignment on AnimationFollowerActor_NativeOnMontageEnded");
static_assert(sizeof(AnimationFollowerActor_NativeOnMontageEnded) == 0x000028, "Wrong size on AnimationFollowerActor_NativeOnMontageEnded");
static_assert(offsetof(AnimationFollowerActor_NativeOnMontageEnded, montage) == 0x000000, "Member 'AnimationFollowerActor_NativeOnMontageEnded::montage' has a wrong offset!");
static_assert(offsetof(AnimationFollowerActor_NativeOnMontageEnded, interrupted) == 0x000020, "Member 'AnimationFollowerActor_NativeOnMontageEnded::interrupted' has a wrong offset!");

// Function DeadByDaylight.AnimationFollowerActor.NativeOnMontageStarted
// 0x0028 (0x0028 - 0x0000)
struct AnimationFollowerActor_NativeOnMontageStarted final
{
public:
	struct FAnimationMontageDescriptor            id;                                                // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         rate;                                              // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationFollowerActor_NativeOnMontageStarted) == 0x000008, "Wrong alignment on AnimationFollowerActor_NativeOnMontageStarted");
static_assert(sizeof(AnimationFollowerActor_NativeOnMontageStarted) == 0x000028, "Wrong size on AnimationFollowerActor_NativeOnMontageStarted");
static_assert(offsetof(AnimationFollowerActor_NativeOnMontageStarted, id) == 0x000000, "Member 'AnimationFollowerActor_NativeOnMontageStarted::id' has a wrong offset!");
static_assert(offsetof(AnimationFollowerActor_NativeOnMontageStarted, rate) == 0x000020, "Member 'AnimationFollowerActor_NativeOnMontageStarted::rate' has a wrong offset!");

// Function DeadByDaylight.AnimationFollowerActor.NativeOnMontageStopped
// 0x0020 (0x0020 - 0x0000)
struct AnimationFollowerActor_NativeOnMontageStopped final
{
public:
	struct FAnimationMontageDescriptor            id;                                                // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationFollowerActor_NativeOnMontageStopped) == 0x000008, "Wrong alignment on AnimationFollowerActor_NativeOnMontageStopped");
static_assert(sizeof(AnimationFollowerActor_NativeOnMontageStopped) == 0x000020, "Wrong size on AnimationFollowerActor_NativeOnMontageStopped");
static_assert(offsetof(AnimationFollowerActor_NativeOnMontageStopped, id) == 0x000000, "Member 'AnimationFollowerActor_NativeOnMontageStopped::id' has a wrong offset!");

// Function DeadByDaylight.AnimationFollowerActor.OnMontageEnd
// 0x0028 (0x0028 - 0x0000)
struct AnimationFollowerActor_OnMontageEnd final
{
public:
	struct FAnimationMontageDescriptor            montage;                                           // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          interrupted;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationFollowerActor_OnMontageEnd) == 0x000008, "Wrong alignment on AnimationFollowerActor_OnMontageEnd");
static_assert(sizeof(AnimationFollowerActor_OnMontageEnd) == 0x000028, "Wrong size on AnimationFollowerActor_OnMontageEnd");
static_assert(offsetof(AnimationFollowerActor_OnMontageEnd, montage) == 0x000000, "Member 'AnimationFollowerActor_OnMontageEnd::montage' has a wrong offset!");
static_assert(offsetof(AnimationFollowerActor_OnMontageEnd, interrupted) == 0x000020, "Member 'AnimationFollowerActor_OnMontageEnd::interrupted' has a wrong offset!");

// Function DeadByDaylight.AnimationFollowerActor.OnMontageStarted
// 0x0028 (0x0028 - 0x0000)
struct AnimationFollowerActor_OnMontageStarted final
{
public:
	struct FAnimationMontageDescriptor            id;                                                // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         rate;                                              // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationFollowerActor_OnMontageStarted) == 0x000008, "Wrong alignment on AnimationFollowerActor_OnMontageStarted");
static_assert(sizeof(AnimationFollowerActor_OnMontageStarted) == 0x000028, "Wrong size on AnimationFollowerActor_OnMontageStarted");
static_assert(offsetof(AnimationFollowerActor_OnMontageStarted, id) == 0x000000, "Member 'AnimationFollowerActor_OnMontageStarted::id' has a wrong offset!");
static_assert(offsetof(AnimationFollowerActor_OnMontageStarted, rate) == 0x000020, "Member 'AnimationFollowerActor_OnMontageStarted::rate' has a wrong offset!");

// Function DeadByDaylight.AnimationFollowerActor.OnMontageStopped
// 0x0020 (0x0020 - 0x0000)
struct AnimationFollowerActor_OnMontageStopped final
{
public:
	struct FAnimationMontageDescriptor            id;                                                // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationFollowerActor_OnMontageStopped) == 0x000008, "Wrong alignment on AnimationFollowerActor_OnMontageStopped");
static_assert(sizeof(AnimationFollowerActor_OnMontageStopped) == 0x000020, "Wrong size on AnimationFollowerActor_OnMontageStopped");
static_assert(offsetof(AnimationFollowerActor_OnMontageStopped, id) == 0x000000, "Member 'AnimationFollowerActor_OnMontageStopped::id' has a wrong offset!");

// Function DeadByDaylight.TutorialFunctionLibrary.GetTutorialGameMode
// 0x0010 (0x0010 - 0x0000)
struct TutorialFunctionLibrary_GetTutorialGameMode final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATutorialGameMode*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialFunctionLibrary_GetTutorialGameMode) == 0x000008, "Wrong alignment on TutorialFunctionLibrary_GetTutorialGameMode");
static_assert(sizeof(TutorialFunctionLibrary_GetTutorialGameMode) == 0x000010, "Wrong size on TutorialFunctionLibrary_GetTutorialGameMode");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialGameMode, WorldContextObject) == 0x000000, "Member 'TutorialFunctionLibrary_GetTutorialGameMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialGameMode, ReturnValue) == 0x000008, "Member 'TutorialFunctionLibrary_GetTutorialGameMode::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialFunctionLibrary.GetTutorialGameState
// 0x0010 (0x0010 - 0x0000)
struct TutorialFunctionLibrary_GetTutorialGameState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATutorialGameState*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialFunctionLibrary_GetTutorialGameState) == 0x000008, "Wrong alignment on TutorialFunctionLibrary_GetTutorialGameState");
static_assert(sizeof(TutorialFunctionLibrary_GetTutorialGameState) == 0x000010, "Wrong size on TutorialFunctionLibrary_GetTutorialGameState");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialGameState, WorldContextObject) == 0x000000, "Member 'TutorialFunctionLibrary_GetTutorialGameState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialGameState, ReturnValue) == 0x000008, "Member 'TutorialFunctionLibrary_GetTutorialGameState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialFunctionLibrary.GetTutorialHighlightController
// 0x0010 (0x0010 - 0x0000)
struct TutorialFunctionLibrary_GetTutorialHighlightController final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTutorialHighlightController*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialFunctionLibrary_GetTutorialHighlightController) == 0x000008, "Wrong alignment on TutorialFunctionLibrary_GetTutorialHighlightController");
static_assert(sizeof(TutorialFunctionLibrary_GetTutorialHighlightController) == 0x000010, "Wrong size on TutorialFunctionLibrary_GetTutorialHighlightController");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialHighlightController, WorldContextObject) == 0x000000, "Member 'TutorialFunctionLibrary_GetTutorialHighlightController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialHighlightController, ReturnValue) == 0x000008, "Member 'TutorialFunctionLibrary_GetTutorialHighlightController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialFunctionLibrary.GetTutorialNotificationController
// 0x0010 (0x0010 - 0x0000)
struct TutorialFunctionLibrary_GetTutorialNotificationController final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTutorialNotificationController*        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialFunctionLibrary_GetTutorialNotificationController) == 0x000008, "Wrong alignment on TutorialFunctionLibrary_GetTutorialNotificationController");
static_assert(sizeof(TutorialFunctionLibrary_GetTutorialNotificationController) == 0x000010, "Wrong size on TutorialFunctionLibrary_GetTutorialNotificationController");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialNotificationController, WorldContextObject) == 0x000000, "Member 'TutorialFunctionLibrary_GetTutorialNotificationController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialNotificationController, ReturnValue) == 0x000008, "Member 'TutorialFunctionLibrary_GetTutorialNotificationController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialFunctionLibrary.GetTutorialObjectiveController
// 0x0010 (0x0010 - 0x0000)
struct TutorialFunctionLibrary_GetTutorialObjectiveController final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTutorialObjectiveController*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialFunctionLibrary_GetTutorialObjectiveController) == 0x000008, "Wrong alignment on TutorialFunctionLibrary_GetTutorialObjectiveController");
static_assert(sizeof(TutorialFunctionLibrary_GetTutorialObjectiveController) == 0x000010, "Wrong size on TutorialFunctionLibrary_GetTutorialObjectiveController");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialObjectiveController, WorldContextObject) == 0x000000, "Member 'TutorialFunctionLibrary_GetTutorialObjectiveController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialObjectiveController, ReturnValue) == 0x000008, "Member 'TutorialFunctionLibrary_GetTutorialObjectiveController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialFunctionLibrary.IsInTutorial
// 0x0010 (0x0010 - 0x0000)
struct TutorialFunctionLibrary_IsInTutorial final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialFunctionLibrary_IsInTutorial) == 0x000008, "Wrong alignment on TutorialFunctionLibrary_IsInTutorial");
static_assert(sizeof(TutorialFunctionLibrary_IsInTutorial) == 0x000010, "Wrong size on TutorialFunctionLibrary_IsInTutorial");
static_assert(offsetof(TutorialFunctionLibrary_IsInTutorial, WorldContextObject) == 0x000000, "Member 'TutorialFunctionLibrary_IsInTutorial::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TutorialFunctionLibrary_IsInTutorial, ReturnValue) == 0x000008, "Member 'TutorialFunctionLibrary_IsInTutorial::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AnimationMontageSlave.OnMontageStarted
// 0x0028 (0x0028 - 0x0000)
struct AnimationMontageSlave_OnMontageStarted final
{
public:
	struct FAnimationMontageDescriptor            id;                                                // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         rate;                                              // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationMontageSlave_OnMontageStarted) == 0x000008, "Wrong alignment on AnimationMontageSlave_OnMontageStarted");
static_assert(sizeof(AnimationMontageSlave_OnMontageStarted) == 0x000028, "Wrong size on AnimationMontageSlave_OnMontageStarted");
static_assert(offsetof(AnimationMontageSlave_OnMontageStarted, id) == 0x000000, "Member 'AnimationMontageSlave_OnMontageStarted::id' has a wrong offset!");
static_assert(offsetof(AnimationMontageSlave_OnMontageStarted, rate) == 0x000020, "Member 'AnimationMontageSlave_OnMontageStarted::rate' has a wrong offset!");

// Function DeadByDaylight.AnimationMontageSlave.OnMontageStopped
// 0x0020 (0x0020 - 0x0000)
struct AnimationMontageSlave_OnMontageStopped final
{
public:
	struct FAnimationMontageDescriptor            id;                                                // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationMontageSlave_OnMontageStopped) == 0x000008, "Wrong alignment on AnimationMontageSlave_OnMontageStopped");
static_assert(sizeof(AnimationMontageSlave_OnMontageStopped) == 0x000020, "Wrong size on AnimationMontageSlave_OnMontageStopped");
static_assert(offsetof(AnimationMontageSlave_OnMontageStopped, id) == 0x000000, "Member 'AnimationMontageSlave_OnMontageStopped::id' has a wrong offset!");

// Function DeadByDaylight.AnimationMontageSlave.SetLeader
// 0x0008 (0x0008 - 0x0000)
struct AnimationMontageSlave_SetLeader final
{
public:
	class UMontagePlayer*                         leader;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationMontageSlave_SetLeader) == 0x000008, "Wrong alignment on AnimationMontageSlave_SetLeader");
static_assert(sizeof(AnimationMontageSlave_SetLeader) == 0x000008, "Wrong size on AnimationMontageSlave_SetLeader");
static_assert(offsetof(AnimationMontageSlave_SetLeader, leader) == 0x000000, "Member 'AnimationMontageSlave_SetLeader::leader' has a wrong offset!");

// Function DeadByDaylight.UMGBloodStoreWidget.SetFaction
// 0x0001 (0x0001 - 0x0000)
struct UMGBloodStoreWidget_SetFaction final
{
public:
	bool                                          isKiller;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBloodStoreWidget_SetFaction) == 0x000001, "Wrong alignment on UMGBloodStoreWidget_SetFaction");
static_assert(sizeof(UMGBloodStoreWidget_SetFaction) == 0x000001, "Wrong size on UMGBloodStoreWidget_SetFaction");
static_assert(offsetof(UMGBloodStoreWidget_SetFaction, isKiller) == 0x000000, "Member 'UMGBloodStoreWidget_SetFaction::isKiller' has a wrong offset!");

// Function DeadByDaylight.UMGBloodStoreWidget.SetSelectedNode
// 0x0010 (0x0010 - 0x0000)
struct UMGBloodStoreWidget_SetSelectedNode final
{
public:
	class FString                                 selectedId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBloodStoreWidget_SetSelectedNode) == 0x000008, "Wrong alignment on UMGBloodStoreWidget_SetSelectedNode");
static_assert(sizeof(UMGBloodStoreWidget_SetSelectedNode) == 0x000010, "Wrong size on UMGBloodStoreWidget_SetSelectedNode");
static_assert(offsetof(UMGBloodStoreWidget_SetSelectedNode, selectedId) == 0x000000, "Member 'UMGBloodStoreWidget_SetSelectedNode::selectedId' has a wrong offset!");

// Function DeadByDaylight.DiscordancePerk.Multicast_AddGeneratorAura
// 0x0008 (0x0008 - 0x0000)
struct DiscordancePerk_Multicast_AddGeneratorAura final
{
public:
	class AGenerator*                             generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscordancePerk_Multicast_AddGeneratorAura) == 0x000008, "Wrong alignment on DiscordancePerk_Multicast_AddGeneratorAura");
static_assert(sizeof(DiscordancePerk_Multicast_AddGeneratorAura) == 0x000008, "Wrong size on DiscordancePerk_Multicast_AddGeneratorAura");
static_assert(offsetof(DiscordancePerk_Multicast_AddGeneratorAura, generator) == 0x000000, "Member 'DiscordancePerk_Multicast_AddGeneratorAura::generator' has a wrong offset!");

// Function DeadByDaylight.DiscordancePerk.Multicast_AddLingeringGeneratorAura
// 0x0008 (0x0008 - 0x0000)
struct DiscordancePerk_Multicast_AddLingeringGeneratorAura final
{
public:
	class AGenerator*                             generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscordancePerk_Multicast_AddLingeringGeneratorAura) == 0x000008, "Wrong alignment on DiscordancePerk_Multicast_AddLingeringGeneratorAura");
static_assert(sizeof(DiscordancePerk_Multicast_AddLingeringGeneratorAura) == 0x000008, "Wrong size on DiscordancePerk_Multicast_AddLingeringGeneratorAura");
static_assert(offsetof(DiscordancePerk_Multicast_AddLingeringGeneratorAura, generator) == 0x000000, "Member 'DiscordancePerk_Multicast_AddLingeringGeneratorAura::generator' has a wrong offset!");

// Function DeadByDaylight.DestroyBreakableDefinition.GetBreakable
// 0x0008 (0x0008 - 0x0000)
struct DestroyBreakableDefinition_GetBreakable final
{
public:
	class ABreakableBase*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DestroyBreakableDefinition_GetBreakable) == 0x000008, "Wrong alignment on DestroyBreakableDefinition_GetBreakable");
static_assert(sizeof(DestroyBreakableDefinition_GetBreakable) == 0x000008, "Wrong size on DestroyBreakableDefinition_GetBreakable");
static_assert(offsetof(DestroyBreakableDefinition_GetBreakable, ReturnValue) == 0x000000, "Member 'DestroyBreakableDefinition_GetBreakable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SectionnedChargeableComponent.GetSectionChargeRemaining
// 0x0004 (0x0004 - 0x0000)
struct SectionnedChargeableComponent_GetSectionChargeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SectionnedChargeableComponent_GetSectionChargeRemaining) == 0x000004, "Wrong alignment on SectionnedChargeableComponent_GetSectionChargeRemaining");
static_assert(sizeof(SectionnedChargeableComponent_GetSectionChargeRemaining) == 0x000004, "Wrong size on SectionnedChargeableComponent_GetSectionChargeRemaining");
static_assert(offsetof(SectionnedChargeableComponent_GetSectionChargeRemaining, ReturnValue) == 0x000000, "Member 'SectionnedChargeableComponent_GetSectionChargeRemaining::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DecalSpawner.GetSpawnerStrategy
// 0x0008 (0x0008 - 0x0000)
struct DecalSpawner_GetSpawnerStrategy final
{
public:
	class USpawnerStrategy*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecalSpawner_GetSpawnerStrategy) == 0x000008, "Wrong alignment on DecalSpawner_GetSpawnerStrategy");
static_assert(sizeof(DecalSpawner_GetSpawnerStrategy) == 0x000008, "Wrong size on DecalSpawner_GetSpawnerStrategy");
static_assert(offsetof(DecalSpawner_GetSpawnerStrategy, ReturnValue) == 0x000000, "Member 'DecalSpawner_GetSpawnerStrategy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DirectionalMinigameComponent.Authority_StartMinigameForSurvivor
// 0x0008 (0x0008 - 0x0000)
struct DirectionalMinigameComponent_Authority_StartMinigameForSurvivor final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionalMinigameComponent_Authority_StartMinigameForSurvivor) == 0x000008, "Wrong alignment on DirectionalMinigameComponent_Authority_StartMinigameForSurvivor");
static_assert(sizeof(DirectionalMinigameComponent_Authority_StartMinigameForSurvivor) == 0x000008, "Wrong size on DirectionalMinigameComponent_Authority_StartMinigameForSurvivor");
static_assert(offsetof(DirectionalMinigameComponent_Authority_StartMinigameForSurvivor, survivor) == 0x000000, "Member 'DirectionalMinigameComponent_Authority_StartMinigameForSurvivor::survivor' has a wrong offset!");

// Function DeadByDaylight.DirectionalMinigameComponent.Server_EnterKey
// 0x0001 (0x0001 - 0x0000)
struct DirectionalMinigameComponent_Server_EnterKey final
{
public:
	EDirectionalInputKey                          enteredKey;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionalMinigameComponent_Server_EnterKey) == 0x000001, "Wrong alignment on DirectionalMinigameComponent_Server_EnterKey");
static_assert(sizeof(DirectionalMinigameComponent_Server_EnterKey) == 0x000001, "Wrong size on DirectionalMinigameComponent_Server_EnterKey");
static_assert(offsetof(DirectionalMinigameComponent_Server_EnterKey, enteredKey) == 0x000000, "Member 'DirectionalMinigameComponent_Server_EnterKey::enteredKey' has a wrong offset!");

// Function DeadByDaylight.GenericPopupScreen.OnChoiceSelected
// 0x0004 (0x0004 - 0x0000)
struct GenericPopupScreen_OnChoiceSelected final
{
public:
	int32                                         selectedButtonType;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericPopupScreen_OnChoiceSelected) == 0x000004, "Wrong alignment on GenericPopupScreen_OnChoiceSelected");
static_assert(sizeof(GenericPopupScreen_OnChoiceSelected) == 0x000004, "Wrong size on GenericPopupScreen_OnChoiceSelected");
static_assert(offsetof(GenericPopupScreen_OnChoiceSelected, selectedButtonType) == 0x000000, "Member 'GenericPopupScreen_OnChoiceSelected::selectedButtonType' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterPrice.SetCurrencyData
// 0x0020 (0x0020 - 0x0000)
struct UMGCharacterPrice_SetCurrencyData final
{
public:
	struct FPurchaseCurrencyData                  currencyData;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterPrice_SetCurrencyData) == 0x000008, "Wrong alignment on UMGCharacterPrice_SetCurrencyData");
static_assert(sizeof(UMGCharacterPrice_SetCurrencyData) == 0x000020, "Wrong size on UMGCharacterPrice_SetCurrencyData");
static_assert(offsetof(UMGCharacterPrice_SetCurrencyData, currencyData) == 0x000000, "Member 'UMGCharacterPrice_SetCurrencyData::currencyData' has a wrong offset!");

// Function DeadByDaylight.ArchiveTierPurchasePopupScreen.OnConfirmPurchase
// 0x0004 (0x0004 - 0x0000)
struct ArchiveTierPurchasePopupScreen_OnConfirmPurchase final
{
public:
	int32                                         tiersToPurchaseNumber;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTierPurchasePopupScreen_OnConfirmPurchase) == 0x000004, "Wrong alignment on ArchiveTierPurchasePopupScreen_OnConfirmPurchase");
static_assert(sizeof(ArchiveTierPurchasePopupScreen_OnConfirmPurchase) == 0x000004, "Wrong size on ArchiveTierPurchasePopupScreen_OnConfirmPurchase");
static_assert(offsetof(ArchiveTierPurchasePopupScreen_OnConfirmPurchase, tiersToPurchaseNumber) == 0x000000, "Member 'ArchiveTierPurchasePopupScreen_OnConfirmPurchase::tiersToPurchaseNumber' has a wrong offset!");

// Function DeadByDaylight.OfferingSequenceManager.HandleSequenceStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OfferingSequenceManager_HandleSequenceStateChanged final
{
public:
	EOfferingSequenceState                        state;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingSequenceManager_HandleSequenceStateChanged) == 0x000001, "Wrong alignment on OfferingSequenceManager_HandleSequenceStateChanged");
static_assert(sizeof(OfferingSequenceManager_HandleSequenceStateChanged) == 0x000001, "Wrong size on OfferingSequenceManager_HandleSequenceStateChanged");
static_assert(offsetof(OfferingSequenceManager_HandleSequenceStateChanged, state) == 0x000000, "Member 'OfferingSequenceManager_HandleSequenceStateChanged::state' has a wrong offset!");

// Function DeadByDaylight.OfferingSequenceManager.ContainsDefaultCard
// 0x0001 (0x0001 - 0x0000)
struct OfferingSequenceManager_ContainsDefaultCard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingSequenceManager_ContainsDefaultCard) == 0x000001, "Wrong alignment on OfferingSequenceManager_ContainsDefaultCard");
static_assert(sizeof(OfferingSequenceManager_ContainsDefaultCard) == 0x000001, "Wrong size on OfferingSequenceManager_ContainsDefaultCard");
static_assert(offsetof(OfferingSequenceManager_ContainsDefaultCard, ReturnValue) == 0x000000, "Member 'OfferingSequenceManager_ContainsDefaultCard::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingSequenceManager.ContainsEventCard
// 0x0001 (0x0001 - 0x0000)
struct OfferingSequenceManager_ContainsEventCard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingSequenceManager_ContainsEventCard) == 0x000001, "Wrong alignment on OfferingSequenceManager_ContainsEventCard");
static_assert(sizeof(OfferingSequenceManager_ContainsEventCard) == 0x000001, "Wrong size on OfferingSequenceManager_ContainsEventCard");
static_assert(offsetof(OfferingSequenceManager_ContainsEventCard, ReturnValue) == 0x000000, "Member 'OfferingSequenceManager_ContainsEventCard::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingSequenceManager.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct OfferingSequenceManager_GetCurrentState final
{
public:
	EOfferingSequenceState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingSequenceManager_GetCurrentState) == 0x000001, "Wrong alignment on OfferingSequenceManager_GetCurrentState");
static_assert(sizeof(OfferingSequenceManager_GetCurrentState) == 0x000001, "Wrong size on OfferingSequenceManager_GetCurrentState");
static_assert(offsetof(OfferingSequenceManager_GetCurrentState, ReturnValue) == 0x000000, "Member 'OfferingSequenceManager_GetCurrentState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaCustomGameUtilities.IsCustomGameEnabled
// 0x0001 (0x0001 - 0x0000)
struct AtlantaCustomGameUtilities_IsCustomGameEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaCustomGameUtilities_IsCustomGameEnabled) == 0x000001, "Wrong alignment on AtlantaCustomGameUtilities_IsCustomGameEnabled");
static_assert(sizeof(AtlantaCustomGameUtilities_IsCustomGameEnabled) == 0x000001, "Wrong size on AtlantaCustomGameUtilities_IsCustomGameEnabled");
static_assert(offsetof(AtlantaCustomGameUtilities_IsCustomGameEnabled, ReturnValue) == 0x000000, "Member 'AtlantaCustomGameUtilities_IsCustomGameEnabled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaCustomGameUtilities.IsInCustomGameLobby
// 0x0010 (0x0010 - 0x0000)
struct AtlantaCustomGameUtilities_IsInCustomGameLobby final
{
public:
	const class UDBDGameInstance*                 gameInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlantaCustomGameUtilities_IsInCustomGameLobby) == 0x000008, "Wrong alignment on AtlantaCustomGameUtilities_IsInCustomGameLobby");
static_assert(sizeof(AtlantaCustomGameUtilities_IsInCustomGameLobby) == 0x000010, "Wrong size on AtlantaCustomGameUtilities_IsInCustomGameLobby");
static_assert(offsetof(AtlantaCustomGameUtilities_IsInCustomGameLobby, gameInstance) == 0x000000, "Member 'AtlantaCustomGameUtilities_IsInCustomGameLobby::gameInstance' has a wrong offset!");
static_assert(offsetof(AtlantaCustomGameUtilities_IsInCustomGameLobby, ReturnValue) == 0x000008, "Member 'AtlantaCustomGameUtilities_IsInCustomGameLobby::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DisplayStandItemRequesterComponent.LoadItemsOnCharacter
// 0x0008 (0x0008 - 0x0000)
struct DisplayStandItemRequesterComponent_LoadItemsOnCharacter final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisplayStandItemRequesterComponent_LoadItemsOnCharacter) == 0x000008, "Wrong alignment on DisplayStandItemRequesterComponent_LoadItemsOnCharacter");
static_assert(sizeof(DisplayStandItemRequesterComponent_LoadItemsOnCharacter) == 0x000008, "Wrong size on DisplayStandItemRequesterComponent_LoadItemsOnCharacter");
static_assert(offsetof(DisplayStandItemRequesterComponent_LoadItemsOnCharacter, actor) == 0x000000, "Member 'DisplayStandItemRequesterComponent_LoadItemsOnCharacter::actor' has a wrong offset!");

// Function DeadByDaylight.OfferingUtilities.HasItemLossProtection
// 0x0010 (0x0010 - 0x0000)
struct OfferingUtilities_HasItemLossProtection final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OfferingUtilities_HasItemLossProtection) == 0x000008, "Wrong alignment on OfferingUtilities_HasItemLossProtection");
static_assert(sizeof(OfferingUtilities_HasItemLossProtection) == 0x000010, "Wrong size on OfferingUtilities_HasItemLossProtection");
static_assert(offsetof(OfferingUtilities_HasItemLossProtection, player) == 0x000000, "Member 'OfferingUtilities_HasItemLossProtection::player' has a wrong offset!");
static_assert(offsetof(OfferingUtilities_HasItemLossProtection, ReturnValue) == 0x000008, "Member 'OfferingUtilities_HasItemLossProtection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingUtilities.HasOfferingOfType
// 0x0018 (0x0018 - 0x0000)
struct OfferingUtilities_HasOfferingOfType final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOfferingEffectType                           offeringEffectType;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         playerId;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OfferingUtilities_HasOfferingOfType) == 0x000008, "Wrong alignment on OfferingUtilities_HasOfferingOfType");
static_assert(sizeof(OfferingUtilities_HasOfferingOfType) == 0x000018, "Wrong size on OfferingUtilities_HasOfferingOfType");
static_assert(offsetof(OfferingUtilities_HasOfferingOfType, worldContextObject) == 0x000000, "Member 'OfferingUtilities_HasOfferingOfType::worldContextObject' has a wrong offset!");
static_assert(offsetof(OfferingUtilities_HasOfferingOfType, offeringEffectType) == 0x000008, "Member 'OfferingUtilities_HasOfferingOfType::offeringEffectType' has a wrong offset!");
static_assert(offsetof(OfferingUtilities_HasOfferingOfType, playerId) == 0x00000C, "Member 'OfferingUtilities_HasOfferingOfType::playerId' has a wrong offset!");
static_assert(offsetof(OfferingUtilities_HasOfferingOfType, ReturnValue) == 0x000010, "Member 'OfferingUtilities_HasOfferingOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingUtilities.IsPlayerEquippedWithOfferingWithTag
// 0x0018 (0x0018 - 0x0000)
struct OfferingUtilities_IsPlayerEquippedWithOfferingWithTag final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   offeringTag;                                       // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OfferingUtilities_IsPlayerEquippedWithOfferingWithTag) == 0x000008, "Wrong alignment on OfferingUtilities_IsPlayerEquippedWithOfferingWithTag");
static_assert(sizeof(OfferingUtilities_IsPlayerEquippedWithOfferingWithTag) == 0x000018, "Wrong size on OfferingUtilities_IsPlayerEquippedWithOfferingWithTag");
static_assert(offsetof(OfferingUtilities_IsPlayerEquippedWithOfferingWithTag, player) == 0x000000, "Member 'OfferingUtilities_IsPlayerEquippedWithOfferingWithTag::player' has a wrong offset!");
static_assert(offsetof(OfferingUtilities_IsPlayerEquippedWithOfferingWithTag, offeringTag) == 0x000008, "Member 'OfferingUtilities_IsPlayerEquippedWithOfferingWithTag::offeringTag' has a wrong offset!");
static_assert(offsetof(OfferingUtilities_IsPlayerEquippedWithOfferingWithTag, ReturnValue) == 0x000014, "Member 'OfferingUtilities_IsPlayerEquippedWithOfferingWithTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.AddObjective
// 0x000C (0x000C - 0x0000)
struct TutorialLevel_AddObjective final
{
public:
	class FName                                   objectiveId;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_AddObjective) == 0x000004, "Wrong alignment on TutorialLevel_AddObjective");
static_assert(sizeof(TutorialLevel_AddObjective) == 0x00000C, "Wrong size on TutorialLevel_AddObjective");
static_assert(offsetof(TutorialLevel_AddObjective, objectiveId) == 0x000000, "Member 'TutorialLevel_AddObjective::objectiveId' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.CompleteObjective
// 0x000C (0x000C - 0x0000)
struct TutorialLevel_CompleteObjective final
{
public:
	class FName                                   objectiveId;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_CompleteObjective) == 0x000004, "Wrong alignment on TutorialLevel_CompleteObjective");
static_assert(sizeof(TutorialLevel_CompleteObjective) == 0x00000C, "Wrong size on TutorialLevel_CompleteObjective");
static_assert(offsetof(TutorialLevel_CompleteObjective, objectiveId) == 0x000000, "Member 'TutorialLevel_CompleteObjective::objectiveId' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.DisplayBlockingNotification
// 0x000C (0x000C - 0x0000)
struct TutorialLevel_DisplayBlockingNotification final
{
public:
	class FName                                   notificationId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_DisplayBlockingNotification) == 0x000004, "Wrong alignment on TutorialLevel_DisplayBlockingNotification");
static_assert(sizeof(TutorialLevel_DisplayBlockingNotification) == 0x00000C, "Wrong size on TutorialLevel_DisplayBlockingNotification");
static_assert(offsetof(TutorialLevel_DisplayBlockingNotification, notificationId) == 0x000000, "Member 'TutorialLevel_DisplayBlockingNotification::notificationId' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.DisplayNotification
// 0x0010 (0x0010 - 0x0000)
struct TutorialLevel_DisplayNotification final
{
public:
	class FName                                   notificationId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         time;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_DisplayNotification) == 0x000004, "Wrong alignment on TutorialLevel_DisplayNotification");
static_assert(sizeof(TutorialLevel_DisplayNotification) == 0x000010, "Wrong size on TutorialLevel_DisplayNotification");
static_assert(offsetof(TutorialLevel_DisplayNotification, notificationId) == 0x000000, "Member 'TutorialLevel_DisplayNotification::notificationId' has a wrong offset!");
static_assert(offsetof(TutorialLevel_DisplayNotification, time) == 0x00000C, "Member 'TutorialLevel_DisplayNotification::time' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.HandleNotificationDismissed
// 0x000C (0x000C - 0x0000)
struct TutorialLevel_HandleNotificationDismissed final
{
public:
	class FName                                   notificationId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_HandleNotificationDismissed) == 0x000004, "Wrong alignment on TutorialLevel_HandleNotificationDismissed");
static_assert(sizeof(TutorialLevel_HandleNotificationDismissed) == 0x00000C, "Wrong size on TutorialLevel_HandleNotificationDismissed");
static_assert(offsetof(TutorialLevel_HandleNotificationDismissed, notificationId) == 0x000000, "Member 'TutorialLevel_HandleNotificationDismissed::notificationId' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.OnNotificationDismissed
// 0x000C (0x000C - 0x0000)
struct TutorialLevel_OnNotificationDismissed final
{
public:
	class FName                                   notificationId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_OnNotificationDismissed) == 0x000004, "Wrong alignment on TutorialLevel_OnNotificationDismissed");
static_assert(sizeof(TutorialLevel_OnNotificationDismissed) == 0x00000C, "Wrong size on TutorialLevel_OnNotificationDismissed");
static_assert(offsetof(TutorialLevel_OnNotificationDismissed, notificationId) == 0x000000, "Member 'TutorialLevel_OnNotificationDismissed::notificationId' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.OnTutorialStepUpdated
// 0x0001 (0x0001 - 0x0000)
struct TutorialLevel_OnTutorialStepUpdated final
{
public:
	ETutorialStep                                 tutorialStep;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_OnTutorialStepUpdated) == 0x000001, "Wrong alignment on TutorialLevel_OnTutorialStepUpdated");
static_assert(sizeof(TutorialLevel_OnTutorialStepUpdated) == 0x000001, "Wrong size on TutorialLevel_OnTutorialStepUpdated");
static_assert(offsetof(TutorialLevel_OnTutorialStepUpdated, tutorialStep) == 0x000000, "Member 'TutorialLevel_OnTutorialStepUpdated::tutorialStep' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.RemoveObjective
// 0x000C (0x000C - 0x0000)
struct TutorialLevel_RemoveObjective final
{
public:
	class FName                                   objectiveId;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_RemoveObjective) == 0x000004, "Wrong alignment on TutorialLevel_RemoveObjective");
static_assert(sizeof(TutorialLevel_RemoveObjective) == 0x00000C, "Wrong size on TutorialLevel_RemoveObjective");
static_assert(offsetof(TutorialLevel_RemoveObjective, objectiveId) == 0x000000, "Member 'TutorialLevel_RemoveObjective::objectiveId' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.SetHandledTutorialStep
// 0x0001 (0x0001 - 0x0000)
struct TutorialLevel_SetHandledTutorialStep final
{
public:
	ETutorialStep                                 tutorialStep;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_SetHandledTutorialStep) == 0x000001, "Wrong alignment on TutorialLevel_SetHandledTutorialStep");
static_assert(sizeof(TutorialLevel_SetHandledTutorialStep) == 0x000001, "Wrong size on TutorialLevel_SetHandledTutorialStep");
static_assert(offsetof(TutorialLevel_SetHandledTutorialStep, tutorialStep) == 0x000000, "Member 'TutorialLevel_SetHandledTutorialStep::tutorialStep' has a wrong offset!");

// Function DeadByDaylight.AtlantaTutorialLevel.HandleCanStartTutorialChanged
// 0x0001 (0x0001 - 0x0000)
struct AtlantaTutorialLevel_HandleCanStartTutorialChanged final
{
public:
	bool                                          canStartTutorial;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaTutorialLevel_HandleCanStartTutorialChanged) == 0x000001, "Wrong alignment on AtlantaTutorialLevel_HandleCanStartTutorialChanged");
static_assert(sizeof(AtlantaTutorialLevel_HandleCanStartTutorialChanged) == 0x000001, "Wrong size on AtlantaTutorialLevel_HandleCanStartTutorialChanged");
static_assert(offsetof(AtlantaTutorialLevel_HandleCanStartTutorialChanged, canStartTutorial) == 0x000000, "Member 'AtlantaTutorialLevel_HandleCanStartTutorialChanged::canStartTutorial' has a wrong offset!");

// Function DeadByDaylight.AtlantaTutorialLevel.IsActorInLineOfSight
// 0x0018 (0x0018 - 0x0000)
struct AtlantaTutorialLevel_IsActorInLineOfSight final
{
public:
	class ADBDAIPlayerController*                 aiPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      playerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlantaTutorialLevel_IsActorInLineOfSight) == 0x000008, "Wrong alignment on AtlantaTutorialLevel_IsActorInLineOfSight");
static_assert(sizeof(AtlantaTutorialLevel_IsActorInLineOfSight) == 0x000018, "Wrong size on AtlantaTutorialLevel_IsActorInLineOfSight");
static_assert(offsetof(AtlantaTutorialLevel_IsActorInLineOfSight, aiPlayerController) == 0x000000, "Member 'AtlantaTutorialLevel_IsActorInLineOfSight::aiPlayerController' has a wrong offset!");
static_assert(offsetof(AtlantaTutorialLevel_IsActorInLineOfSight, playerController) == 0x000008, "Member 'AtlantaTutorialLevel_IsActorInLineOfSight::playerController' has a wrong offset!");
static_assert(offsetof(AtlantaTutorialLevel_IsActorInLineOfSight, ReturnValue) == 0x000010, "Member 'AtlantaTutorialLevel_IsActorInLineOfSight::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaTutorialLevel.OnTriggerBeginOverlapActor
// 0x0018 (0x0018 - 0x0000)
struct AtlantaTutorialLevel_OnTriggerBeginOverlapActor final
{
public:
	class FString                                 triggerID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 overlappingActor;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaTutorialLevel_OnTriggerBeginOverlapActor) == 0x000008, "Wrong alignment on AtlantaTutorialLevel_OnTriggerBeginOverlapActor");
static_assert(sizeof(AtlantaTutorialLevel_OnTriggerBeginOverlapActor) == 0x000018, "Wrong size on AtlantaTutorialLevel_OnTriggerBeginOverlapActor");
static_assert(offsetof(AtlantaTutorialLevel_OnTriggerBeginOverlapActor, triggerID) == 0x000000, "Member 'AtlantaTutorialLevel_OnTriggerBeginOverlapActor::triggerID' has a wrong offset!");
static_assert(offsetof(AtlantaTutorialLevel_OnTriggerBeginOverlapActor, overlappingActor) == 0x000010, "Member 'AtlantaTutorialLevel_OnTriggerBeginOverlapActor::overlappingActor' has a wrong offset!");

// Function DeadByDaylight.AtlantaTutorialLevel.SetAIEscapePoints
// 0x0010 (0x0010 - 0x0000)
struct AtlantaTutorialLevel_SetAIEscapePoints final
{
public:
	TArray<class AActor*>                         escapePoints;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaTutorialLevel_SetAIEscapePoints) == 0x000008, "Wrong alignment on AtlantaTutorialLevel_SetAIEscapePoints");
static_assert(sizeof(AtlantaTutorialLevel_SetAIEscapePoints) == 0x000010, "Wrong size on AtlantaTutorialLevel_SetAIEscapePoints");
static_assert(offsetof(AtlantaTutorialLevel_SetAIEscapePoints, escapePoints) == 0x000000, "Member 'AtlantaTutorialLevel_SetAIEscapePoints::escapePoints' has a wrong offset!");

// Function DeadByDaylight.AtlantaTutorialLevel.SetLocallyControlledPlayer
// 0x0008 (0x0008 - 0x0000)
struct AtlantaTutorialLevel_SetLocallyControlledPlayer final
{
public:
	class ADBDPlayer*                             locallyControllerPlayer;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaTutorialLevel_SetLocallyControlledPlayer) == 0x000008, "Wrong alignment on AtlantaTutorialLevel_SetLocallyControlledPlayer");
static_assert(sizeof(AtlantaTutorialLevel_SetLocallyControlledPlayer) == 0x000008, "Wrong size on AtlantaTutorialLevel_SetLocallyControlledPlayer");
static_assert(offsetof(AtlantaTutorialLevel_SetLocallyControlledPlayer, locallyControllerPlayer) == 0x000000, "Member 'AtlantaTutorialLevel_SetLocallyControlledPlayer::locallyControllerPlayer' has a wrong offset!");

// Function DeadByDaylight.AtlantaTutorialLevel.SetTutorialElement
// 0x0018 (0x0018 - 0x0000)
struct AtlantaTutorialLevel_SetTutorialElement final
{
public:
	class FString                                 elementKey;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 elementToSet;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaTutorialLevel_SetTutorialElement) == 0x000008, "Wrong alignment on AtlantaTutorialLevel_SetTutorialElement");
static_assert(sizeof(AtlantaTutorialLevel_SetTutorialElement) == 0x000018, "Wrong size on AtlantaTutorialLevel_SetTutorialElement");
static_assert(offsetof(AtlantaTutorialLevel_SetTutorialElement, elementKey) == 0x000000, "Member 'AtlantaTutorialLevel_SetTutorialElement::elementKey' has a wrong offset!");
static_assert(offsetof(AtlantaTutorialLevel_SetTutorialElement, elementToSet) == 0x000010, "Member 'AtlantaTutorialLevel_SetTutorialElement::elementToSet' has a wrong offset!");

// Function DeadByDaylight.AtlantaTutorialLevel.GetTutorialElement
// 0x0018 (0x0018 - 0x0000)
struct AtlantaTutorialLevel_GetTutorialElement final
{
public:
	class FString                                 elementKey;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaTutorialLevel_GetTutorialElement) == 0x000008, "Wrong alignment on AtlantaTutorialLevel_GetTutorialElement");
static_assert(sizeof(AtlantaTutorialLevel_GetTutorialElement) == 0x000018, "Wrong size on AtlantaTutorialLevel_GetTutorialElement");
static_assert(offsetof(AtlantaTutorialLevel_GetTutorialElement, elementKey) == 0x000000, "Member 'AtlantaTutorialLevel_GetTutorialElement::elementKey' has a wrong offset!");
static_assert(offsetof(AtlantaTutorialLevel_GetTutorialElement, ReturnValue) == 0x000010, "Member 'AtlantaTutorialLevel_GetTutorialElement::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorAtlantaTutorialLevel.SetSlasherPlayer
// 0x0008 (0x0008 - 0x0000)
struct SurvivorAtlantaTutorialLevel_SetSlasherPlayer final
{
public:
	class ASlasherPlayer*                         slasherPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorAtlantaTutorialLevel_SetSlasherPlayer) == 0x000008, "Wrong alignment on SurvivorAtlantaTutorialLevel_SetSlasherPlayer");
static_assert(sizeof(SurvivorAtlantaTutorialLevel_SetSlasherPlayer) == 0x000008, "Wrong size on SurvivorAtlantaTutorialLevel_SetSlasherPlayer");
static_assert(offsetof(SurvivorAtlantaTutorialLevel_SetSlasherPlayer, slasherPlayer) == 0x000000, "Member 'SurvivorAtlantaTutorialLevel_SetSlasherPlayer::slasherPlayer' has a wrong offset!");

// Function DeadByDaylight.SurvivorAtlantaTutorialLevel.GetCamperPlayer
// 0x0008 (0x0008 - 0x0000)
struct SurvivorAtlantaTutorialLevel_GetCamperPlayer final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorAtlantaTutorialLevel_GetCamperPlayer) == 0x000008, "Wrong alignment on SurvivorAtlantaTutorialLevel_GetCamperPlayer");
static_assert(sizeof(SurvivorAtlantaTutorialLevel_GetCamperPlayer) == 0x000008, "Wrong size on SurvivorAtlantaTutorialLevel_GetCamperPlayer");
static_assert(offsetof(SurvivorAtlantaTutorialLevel_GetCamperPlayer, ReturnValue) == 0x000000, "Member 'SurvivorAtlantaTutorialLevel_GetCamperPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorAtlantaTutorialLevel.GetSlasherAIPlayerController
// 0x0008 (0x0008 - 0x0000)
struct SurvivorAtlantaTutorialLevel_GetSlasherAIPlayerController final
{
public:
	class ADBDAIPlayerController*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorAtlantaTutorialLevel_GetSlasherAIPlayerController) == 0x000008, "Wrong alignment on SurvivorAtlantaTutorialLevel_GetSlasherAIPlayerController");
static_assert(sizeof(SurvivorAtlantaTutorialLevel_GetSlasherAIPlayerController) == 0x000008, "Wrong size on SurvivorAtlantaTutorialLevel_GetSlasherAIPlayerController");
static_assert(offsetof(SurvivorAtlantaTutorialLevel_GetSlasherAIPlayerController, ReturnValue) == 0x000000, "Member 'SurvivorAtlantaTutorialLevel_GetSlasherAIPlayerController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorAtlantaTutorialLevel.GetSlasherPlayer
// 0x0008 (0x0008 - 0x0000)
struct SurvivorAtlantaTutorialLevel_GetSlasherPlayer final
{
public:
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorAtlantaTutorialLevel_GetSlasherPlayer) == 0x000008, "Wrong alignment on SurvivorAtlantaTutorialLevel_GetSlasherPlayer");
static_assert(sizeof(SurvivorAtlantaTutorialLevel_GetSlasherPlayer) == 0x000008, "Wrong size on SurvivorAtlantaTutorialLevel_GetSlasherPlayer");
static_assert(offsetof(SurvivorAtlantaTutorialLevel_GetSlasherPlayer, ReturnValue) == 0x000000, "Member 'SurvivorAtlantaTutorialLevel_GetSlasherPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DisplayStand.BlockRotation
// 0x0001 (0x0001 - 0x0000)
struct DisplayStand_BlockRotation final
{
public:
	bool                                          shouldBlockRotation;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisplayStand_BlockRotation) == 0x000001, "Wrong alignment on DisplayStand_BlockRotation");
static_assert(sizeof(DisplayStand_BlockRotation) == 0x000001, "Wrong size on DisplayStand_BlockRotation");
static_assert(offsetof(DisplayStand_BlockRotation, shouldBlockRotation) == 0x000000, "Member 'DisplayStand_BlockRotation::shouldBlockRotation' has a wrong offset!");

// Function DeadByDaylight.DisplayStand.OnCurrentActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct DisplayStand_OnCurrentActorDestroyed final
{
public:
	class AActor*                                 destroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisplayStand_OnCurrentActorDestroyed) == 0x000008, "Wrong alignment on DisplayStand_OnCurrentActorDestroyed");
static_assert(sizeof(DisplayStand_OnCurrentActorDestroyed) == 0x000008, "Wrong size on DisplayStand_OnCurrentActorDestroyed");
static_assert(offsetof(DisplayStand_OnCurrentActorDestroyed, destroyedActor) == 0x000000, "Member 'DisplayStand_OnCurrentActorDestroyed::destroyedActor' has a wrong offset!");

// Function DeadByDaylight.AtlantaHudDirectionalStick.SetMovementLockAnimationStatus
// 0x0001 (0x0001 - 0x0000)
struct AtlantaHudDirectionalStick_SetMovementLockAnimationStatus final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaHudDirectionalStick_SetMovementLockAnimationStatus) == 0x000001, "Wrong alignment on AtlantaHudDirectionalStick_SetMovementLockAnimationStatus");
static_assert(sizeof(AtlantaHudDirectionalStick_SetMovementLockAnimationStatus) == 0x000001, "Wrong size on AtlantaHudDirectionalStick_SetMovementLockAnimationStatus");
static_assert(offsetof(AtlantaHudDirectionalStick_SetMovementLockAnimationStatus, value) == 0x000000, "Member 'AtlantaHudDirectionalStick_SetMovementLockAnimationStatus::value' has a wrong offset!");

// Function DeadByDaylight.UMGBaseRootStorefrontWidget.OnCurrencyButtonLongPressed
// 0x0020 (0x0020 - 0x0000)
struct UMGBaseRootStorefrontWidget_OnCurrencyButtonLongPressed final
{
public:
	struct FTooltipPressedData                    tooltipPressedData;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ECurrencyType                                 currencyType;                                      // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGBaseRootStorefrontWidget_OnCurrencyButtonLongPressed) == 0x000008, "Wrong alignment on UMGBaseRootStorefrontWidget_OnCurrencyButtonLongPressed");
static_assert(sizeof(UMGBaseRootStorefrontWidget_OnCurrencyButtonLongPressed) == 0x000020, "Wrong size on UMGBaseRootStorefrontWidget_OnCurrencyButtonLongPressed");
static_assert(offsetof(UMGBaseRootStorefrontWidget_OnCurrencyButtonLongPressed, tooltipPressedData) == 0x000000, "Member 'UMGBaseRootStorefrontWidget_OnCurrencyButtonLongPressed::tooltipPressedData' has a wrong offset!");
static_assert(offsetof(UMGBaseRootStorefrontWidget_OnCurrencyButtonLongPressed, currencyType) == 0x000018, "Member 'UMGBaseRootStorefrontWidget_OnCurrencyButtonLongPressed::currencyType' has a wrong offset!");

// Function DeadByDaylight.VaultableOutlineUpdateStrategy.SetCanBeRevealedToLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct VaultableOutlineUpdateStrategy_SetCanBeRevealedToLocalPlayer final
{
public:
	bool                                          canBeRevealedToLocalPlayer;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VaultableOutlineUpdateStrategy_SetCanBeRevealedToLocalPlayer) == 0x000001, "Wrong alignment on VaultableOutlineUpdateStrategy_SetCanBeRevealedToLocalPlayer");
static_assert(sizeof(VaultableOutlineUpdateStrategy_SetCanBeRevealedToLocalPlayer) == 0x000001, "Wrong size on VaultableOutlineUpdateStrategy_SetCanBeRevealedToLocalPlayer");
static_assert(offsetof(VaultableOutlineUpdateStrategy_SetCanBeRevealedToLocalPlayer, canBeRevealedToLocalPlayer) == 0x000000, "Member 'VaultableOutlineUpdateStrategy_SetCanBeRevealedToLocalPlayer::canBeRevealedToLocalPlayer' has a wrong offset!");

// Function DeadByDaylight.DreamPalletOutlineUpdateStrategy.InitializeTunableValues
// 0x0008 (0x0008 - 0x0000)
struct DreamPalletOutlineUpdateStrategy_InitializeTunableValues final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamPalletOutlineUpdateStrategy_InitializeTunableValues) == 0x000008, "Wrong alignment on DreamPalletOutlineUpdateStrategy_InitializeTunableValues");
static_assert(sizeof(DreamPalletOutlineUpdateStrategy_InitializeTunableValues) == 0x000008, "Wrong size on DreamPalletOutlineUpdateStrategy_InitializeTunableValues");
static_assert(offsetof(DreamPalletOutlineUpdateStrategy_InitializeTunableValues, killer) == 0x000000, "Member 'DreamPalletOutlineUpdateStrategy_InitializeTunableValues::killer' has a wrong offset!");

// Function DeadByDaylight.VaultableComponent.OnChaseEnded
// 0x0010 (0x0010 - 0x0000)
struct VaultableComponent_OnChaseEnded final
{
public:
	class ADBDPlayer*                             survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         chaseTimer;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VaultableComponent_OnChaseEnded) == 0x000008, "Wrong alignment on VaultableComponent_OnChaseEnded");
static_assert(sizeof(VaultableComponent_OnChaseEnded) == 0x000010, "Wrong size on VaultableComponent_OnChaseEnded");
static_assert(offsetof(VaultableComponent_OnChaseEnded, survivor) == 0x000000, "Member 'VaultableComponent_OnChaseEnded::survivor' has a wrong offset!");
static_assert(offsetof(VaultableComponent_OnChaseEnded, chaseTimer) == 0x000008, "Member 'VaultableComponent_OnChaseEnded::chaseTimer' has a wrong offset!");

// Function DeadByDaylight.VaultableComponent.SignalVault
// 0x0010 (0x0010 - 0x0000)
struct VaultableComponent_SignalVault final
{
public:
	class ADBDPlayer*                             survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         interactionTime;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VaultableComponent_SignalVault) == 0x000008, "Wrong alignment on VaultableComponent_SignalVault");
static_assert(sizeof(VaultableComponent_SignalVault) == 0x000010, "Wrong size on VaultableComponent_SignalVault");
static_assert(offsetof(VaultableComponent_SignalVault, survivor) == 0x000000, "Member 'VaultableComponent_SignalVault::survivor' has a wrong offset!");
static_assert(offsetof(VaultableComponent_SignalVault, interactionTime) == 0x000008, "Member 'VaultableComponent_SignalVault::interactionTime' has a wrong offset!");

// Function DeadByDaylight.AtlantaLobbyLevel.OnBackPawnSpawned
// 0x0008 (0x0008 - 0x0000)
struct AtlantaLobbyLevel_OnBackPawnSpawned final
{
public:
	class AActor*                                 backgroundPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaLobbyLevel_OnBackPawnSpawned) == 0x000008, "Wrong alignment on AtlantaLobbyLevel_OnBackPawnSpawned");
static_assert(sizeof(AtlantaLobbyLevel_OnBackPawnSpawned) == 0x000008, "Wrong size on AtlantaLobbyLevel_OnBackPawnSpawned");
static_assert(offsetof(AtlantaLobbyLevel_OnBackPawnSpawned, backgroundPawn) == 0x000000, "Member 'AtlantaLobbyLevel_OnBackPawnSpawned::backgroundPawn' has a wrong offset!");

// Function DeadByDaylight.AtlantaLobbyLevel.OnFrontPawnSpawned
// 0x0008 (0x0008 - 0x0000)
struct AtlantaLobbyLevel_OnFrontPawnSpawned final
{
public:
	class AActor*                                 forefrontPawn;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaLobbyLevel_OnFrontPawnSpawned) == 0x000008, "Wrong alignment on AtlantaLobbyLevel_OnFrontPawnSpawned");
static_assert(sizeof(AtlantaLobbyLevel_OnFrontPawnSpawned) == 0x000008, "Wrong size on AtlantaLobbyLevel_OnFrontPawnSpawned");
static_assert(offsetof(AtlantaLobbyLevel_OnFrontPawnSpawned, forefrontPawn) == 0x000000, "Member 'AtlantaLobbyLevel_OnFrontPawnSpawned::forefrontPawn' has a wrong offset!");

// Function DeadByDaylight.AtlantaOfflineLobbyCamera.SetCameraPosition
// 0x000C (0x000C - 0x0000)
struct AtlantaOfflineLobbyCamera_SetCameraPosition final
{
public:
	struct FVector                                positionVector;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaOfflineLobbyCamera_SetCameraPosition) == 0x000004, "Wrong alignment on AtlantaOfflineLobbyCamera_SetCameraPosition");
static_assert(sizeof(AtlantaOfflineLobbyCamera_SetCameraPosition) == 0x00000C, "Wrong size on AtlantaOfflineLobbyCamera_SetCameraPosition");
static_assert(offsetof(AtlantaOfflineLobbyCamera_SetCameraPosition, positionVector) == 0x000000, "Member 'AtlantaOfflineLobbyCamera_SetCameraPosition::positionVector' has a wrong offset!");

// Function DeadByDaylight.AtlantaOfflineLobbyCamera.SetCameraRotation
// 0x000C (0x000C - 0x0000)
struct AtlantaOfflineLobbyCamera_SetCameraRotation final
{
public:
	struct FRotator                               rotationVector;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaOfflineLobbyCamera_SetCameraRotation) == 0x000004, "Wrong alignment on AtlantaOfflineLobbyCamera_SetCameraRotation");
static_assert(sizeof(AtlantaOfflineLobbyCamera_SetCameraRotation) == 0x00000C, "Wrong size on AtlantaOfflineLobbyCamera_SetCameraRotation");
static_assert(offsetof(AtlantaOfflineLobbyCamera_SetCameraRotation, rotationVector) == 0x000000, "Member 'AtlantaOfflineLobbyCamera_SetCameraRotation::rotationVector' has a wrong offset!");

// Function DeadByDaylight.EndGameStateComponent.Multicast_SetIsInEndGameSimulation
// 0x0001 (0x0001 - 0x0000)
struct EndGameStateComponent_Multicast_SetIsInEndGameSimulation final
{
public:
	bool                                          endGameSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameStateComponent_Multicast_SetIsInEndGameSimulation) == 0x000001, "Wrong alignment on EndGameStateComponent_Multicast_SetIsInEndGameSimulation");
static_assert(sizeof(EndGameStateComponent_Multicast_SetIsInEndGameSimulation) == 0x000001, "Wrong size on EndGameStateComponent_Multicast_SetIsInEndGameSimulation");
static_assert(offsetof(EndGameStateComponent_Multicast_SetIsInEndGameSimulation, endGameSimulation) == 0x000000, "Member 'EndGameStateComponent_Multicast_SetIsInEndGameSimulation::endGameSimulation' has a wrong offset!");

// Function DeadByDaylight.EndGameStateComponent.GetElapsedTimePercent
// 0x0004 (0x0004 - 0x0000)
struct EndGameStateComponent_GetElapsedTimePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameStateComponent_GetElapsedTimePercent) == 0x000004, "Wrong alignment on EndGameStateComponent_GetElapsedTimePercent");
static_assert(sizeof(EndGameStateComponent_GetElapsedTimePercent) == 0x000004, "Wrong size on EndGameStateComponent_GetElapsedTimePercent");
static_assert(offsetof(EndGameStateComponent_GetElapsedTimePercent, ReturnValue) == 0x000000, "Member 'EndGameStateComponent_GetElapsedTimePercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EndGameStateComponent.HasEndGameBegun
// 0x0001 (0x0001 - 0x0000)
struct EndGameStateComponent_HasEndGameBegun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameStateComponent_HasEndGameBegun) == 0x000001, "Wrong alignment on EndGameStateComponent_HasEndGameBegun");
static_assert(sizeof(EndGameStateComponent_HasEndGameBegun) == 0x000001, "Wrong size on EndGameStateComponent_HasEndGameBegun");
static_assert(offsetof(EndGameStateComponent_HasEndGameBegun, ReturnValue) == 0x000000, "Member 'EndGameStateComponent_HasEndGameBegun::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EndGameStateComponent.IsEndGameOver
// 0x0001 (0x0001 - 0x0000)
struct EndGameStateComponent_IsEndGameOver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameStateComponent_IsEndGameOver) == 0x000001, "Wrong alignment on EndGameStateComponent_IsEndGameOver");
static_assert(sizeof(EndGameStateComponent_IsEndGameOver) == 0x000001, "Wrong size on EndGameStateComponent_IsEndGameOver");
static_assert(offsetof(EndGameStateComponent_IsEndGameOver, ReturnValue) == 0x000000, "Member 'EndGameStateComponent_IsEndGameOver::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EndGameStateComponent.IsTimerSlowedDown
// 0x0001 (0x0001 - 0x0000)
struct EndGameStateComponent_IsTimerSlowedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameStateComponent_IsTimerSlowedDown) == 0x000001, "Wrong alignment on EndGameStateComponent_IsTimerSlowedDown");
static_assert(sizeof(EndGameStateComponent_IsTimerSlowedDown) == 0x000001, "Wrong size on EndGameStateComponent_IsTimerSlowedDown");
static_assert(offsetof(EndGameStateComponent_IsTimerSlowedDown, ReturnValue) == 0x000000, "Member 'EndGameStateComponent_IsTimerSlowedDown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaPartyFlowUtilities.IsCurrentPlayerAloneInParty
// 0x0001 (0x0001 - 0x0000)
struct AtlantaPartyFlowUtilities_IsCurrentPlayerAloneInParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaPartyFlowUtilities_IsCurrentPlayerAloneInParty) == 0x000001, "Wrong alignment on AtlantaPartyFlowUtilities_IsCurrentPlayerAloneInParty");
static_assert(sizeof(AtlantaPartyFlowUtilities_IsCurrentPlayerAloneInParty) == 0x000001, "Wrong size on AtlantaPartyFlowUtilities_IsCurrentPlayerAloneInParty");
static_assert(offsetof(AtlantaPartyFlowUtilities_IsCurrentPlayerAloneInParty, ReturnValue) == 0x000000, "Member 'AtlantaPartyFlowUtilities_IsCurrentPlayerAloneInParty::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaPartyFlowUtilities.IsCurrentPlayerInParty
// 0x0001 (0x0001 - 0x0000)
struct AtlantaPartyFlowUtilities_IsCurrentPlayerInParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaPartyFlowUtilities_IsCurrentPlayerInParty) == 0x000001, "Wrong alignment on AtlantaPartyFlowUtilities_IsCurrentPlayerInParty");
static_assert(sizeof(AtlantaPartyFlowUtilities_IsCurrentPlayerInParty) == 0x000001, "Wrong size on AtlantaPartyFlowUtilities_IsCurrentPlayerInParty");
static_assert(offsetof(AtlantaPartyFlowUtilities_IsCurrentPlayerInParty, ReturnValue) == 0x000000, "Member 'AtlantaPartyFlowUtilities_IsCurrentPlayerInParty::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaInstalledContent.GetFreeDiskSpace
// 0x0004 (0x0004 - 0x0000)
struct AtlantaInstalledContent_GetFreeDiskSpace final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaInstalledContent_GetFreeDiskSpace) == 0x000004, "Wrong alignment on AtlantaInstalledContent_GetFreeDiskSpace");
static_assert(sizeof(AtlantaInstalledContent_GetFreeDiskSpace) == 0x000004, "Wrong size on AtlantaInstalledContent_GetFreeDiskSpace");
static_assert(offsetof(AtlantaInstalledContent_GetFreeDiskSpace, ReturnValue) == 0x000000, "Member 'AtlantaInstalledContent_GetFreeDiskSpace::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaInstalledContent.GetInstalledContentSize
// 0x0004 (0x0004 - 0x0000)
struct AtlantaInstalledContent_GetInstalledContentSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaInstalledContent_GetInstalledContentSize) == 0x000004, "Wrong alignment on AtlantaInstalledContent_GetInstalledContentSize");
static_assert(sizeof(AtlantaInstalledContent_GetInstalledContentSize) == 0x000004, "Wrong size on AtlantaInstalledContent_GetInstalledContentSize");
static_assert(offsetof(AtlantaInstalledContent_GetInstalledContentSize, ReturnValue) == 0x000000, "Member 'AtlantaInstalledContent_GetInstalledContentSize::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaInstalledContent.Mount
// 0x0020 (0x0020 - 0x0000)
struct AtlantaInstalledContent_Mount final
{
public:
	int32                                         PakOrder;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MountPoint;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlantaInstalledContent_Mount) == 0x000008, "Wrong alignment on AtlantaInstalledContent_Mount");
static_assert(sizeof(AtlantaInstalledContent_Mount) == 0x000020, "Wrong size on AtlantaInstalledContent_Mount");
static_assert(offsetof(AtlantaInstalledContent_Mount, PakOrder) == 0x000000, "Member 'AtlantaInstalledContent_Mount::PakOrder' has a wrong offset!");
static_assert(offsetof(AtlantaInstalledContent_Mount, MountPoint) == 0x000008, "Member 'AtlantaInstalledContent_Mount::MountPoint' has a wrong offset!");
static_assert(offsetof(AtlantaInstalledContent_Mount, ReturnValue) == 0x000018, "Member 'AtlantaInstalledContent_Mount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoorAnimInstance.PlaySound
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoorAnimInstance_PlaySound final
{
public:
	class UAkAudioEvent*                          akEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoorAnimInstance_PlaySound) == 0x000008, "Wrong alignment on EscapeDoorAnimInstance_PlaySound");
static_assert(sizeof(EscapeDoorAnimInstance_PlaySound) == 0x000008, "Wrong size on EscapeDoorAnimInstance_PlaySound");
static_assert(offsetof(EscapeDoorAnimInstance_PlaySound, akEvent) == 0x000000, "Member 'EscapeDoorAnimInstance_PlaySound::akEvent' has a wrong offset!");

// Function DeadByDaylight.EscapeDoorAnimInstance.SetIsOpen
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoorAnimInstance_SetIsOpen final
{
public:
	bool                                          isOpen;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoorAnimInstance_SetIsOpen) == 0x000001, "Wrong alignment on EscapeDoorAnimInstance_SetIsOpen");
static_assert(sizeof(EscapeDoorAnimInstance_SetIsOpen) == 0x000001, "Wrong size on EscapeDoorAnimInstance_SetIsOpen");
static_assert(offsetof(EscapeDoorAnimInstance_SetIsOpen, isOpen) == 0x000000, "Member 'EscapeDoorAnimInstance_SetIsOpen::isOpen' has a wrong offset!");

// Function DeadByDaylight.EscapeDoorAnimInstance.SetIsOpenByKiller
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoorAnimInstance_SetIsOpenByKiller final
{
public:
	bool                                          isOpenByKiller;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoorAnimInstance_SetIsOpenByKiller) == 0x000001, "Wrong alignment on EscapeDoorAnimInstance_SetIsOpenByKiller");
static_assert(sizeof(EscapeDoorAnimInstance_SetIsOpenByKiller) == 0x000001, "Wrong size on EscapeDoorAnimInstance_SetIsOpenByKiller");
static_assert(offsetof(EscapeDoorAnimInstance_SetIsOpenByKiller, isOpenByKiller) == 0x000000, "Member 'EscapeDoorAnimInstance_SetIsOpenByKiller::isOpenByKiller' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.AttachSurvivor
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_AttachSurvivor final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_AttachSurvivor) == 0x000008, "Wrong alignment on ReverseBearTrap_AttachSurvivor");
static_assert(sizeof(ReverseBearTrap_AttachSurvivor) == 0x000008, "Wrong size on ReverseBearTrap_AttachSurvivor");
static_assert(offsetof(ReverseBearTrap_AttachSurvivor, survivor) == 0x000000, "Member 'ReverseBearTrap_AttachSurvivor::survivor' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.Authority_GenerateAttemptsNeeded
// 0x000C (0x000C - 0x0000)
struct ReverseBearTrap_Authority_GenerateAttemptsNeeded final
{
public:
	int32                                         remainingAttemptsTotal;                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         remainingRBTs;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         numRemovers;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_Authority_GenerateAttemptsNeeded) == 0x000004, "Wrong alignment on ReverseBearTrap_Authority_GenerateAttemptsNeeded");
static_assert(sizeof(ReverseBearTrap_Authority_GenerateAttemptsNeeded) == 0x00000C, "Wrong size on ReverseBearTrap_Authority_GenerateAttemptsNeeded");
static_assert(offsetof(ReverseBearTrap_Authority_GenerateAttemptsNeeded, remainingAttemptsTotal) == 0x000000, "Member 'ReverseBearTrap_Authority_GenerateAttemptsNeeded::remainingAttemptsTotal' has a wrong offset!");
static_assert(offsetof(ReverseBearTrap_Authority_GenerateAttemptsNeeded, remainingRBTs) == 0x000004, "Member 'ReverseBearTrap_Authority_GenerateAttemptsNeeded::remainingRBTs' has a wrong offset!");
static_assert(offsetof(ReverseBearTrap_Authority_GenerateAttemptsNeeded, numRemovers) == 0x000008, "Member 'ReverseBearTrap_Authority_GenerateAttemptsNeeded::numRemovers' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.Authority_SetKeyID
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_Authority_SetKeyID final
{
public:
	int32                                         keyID;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_Authority_SetKeyID) == 0x000004, "Wrong alignment on ReverseBearTrap_Authority_SetKeyID");
static_assert(sizeof(ReverseBearTrap_Authority_SetKeyID) == 0x000004, "Wrong size on ReverseBearTrap_Authority_SetKeyID");
static_assert(offsetof(ReverseBearTrap_Authority_SetKeyID, keyID) == 0x000000, "Member 'ReverseBearTrap_Authority_SetKeyID::keyID' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.DetachSurvivor
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_DetachSurvivor final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_DetachSurvivor) == 0x000008, "Wrong alignment on ReverseBearTrap_DetachSurvivor");
static_assert(sizeof(ReverseBearTrap_DetachSurvivor) == 0x000008, "Wrong size on ReverseBearTrap_DetachSurvivor");
static_assert(offsetof(ReverseBearTrap_DetachSurvivor, survivor) == 0x000000, "Member 'ReverseBearTrap_DetachSurvivor::survivor' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.FastForwardExecutionTimer
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_FastForwardExecutionTimer final
{
public:
	float                                         deltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_FastForwardExecutionTimer) == 0x000004, "Wrong alignment on ReverseBearTrap_FastForwardExecutionTimer");
static_assert(sizeof(ReverseBearTrap_FastForwardExecutionTimer) == 0x000004, "Wrong size on ReverseBearTrap_FastForwardExecutionTimer");
static_assert(offsetof(ReverseBearTrap_FastForwardExecutionTimer, deltaTime) == 0x000000, "Member 'ReverseBearTrap_FastForwardExecutionTimer::deltaTime' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.NotifyDetachStarted
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_NotifyDetachStarted final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_NotifyDetachStarted) == 0x000008, "Wrong alignment on ReverseBearTrap_NotifyDetachStarted");
static_assert(sizeof(ReverseBearTrap_NotifyDetachStarted) == 0x000008, "Wrong size on ReverseBearTrap_NotifyDetachStarted");
static_assert(offsetof(ReverseBearTrap_NotifyDetachStarted, survivor) == 0x000000, "Member 'ReverseBearTrap_NotifyDetachStarted::survivor' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.NotifyOnAttachSurvivorBegin
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_NotifyOnAttachSurvivorBegin final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_NotifyOnAttachSurvivorBegin) == 0x000008, "Wrong alignment on ReverseBearTrap_NotifyOnAttachSurvivorBegin");
static_assert(sizeof(ReverseBearTrap_NotifyOnAttachSurvivorBegin) == 0x000008, "Wrong size on ReverseBearTrap_NotifyOnAttachSurvivorBegin");
static_assert(offsetof(ReverseBearTrap_NotifyOnAttachSurvivorBegin, survivor) == 0x000000, "Member 'ReverseBearTrap_NotifyOnAttachSurvivorBegin::survivor' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.OnAttachSurvivor
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_OnAttachSurvivor final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_OnAttachSurvivor) == 0x000008, "Wrong alignment on ReverseBearTrap_OnAttachSurvivor");
static_assert(sizeof(ReverseBearTrap_OnAttachSurvivor) == 0x000008, "Wrong size on ReverseBearTrap_OnAttachSurvivor");
static_assert(offsetof(ReverseBearTrap_OnAttachSurvivor, survivor) == 0x000000, "Member 'ReverseBearTrap_OnAttachSurvivor::survivor' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.OnAttachSurvivorBegin
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_OnAttachSurvivorBegin final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_OnAttachSurvivorBegin) == 0x000008, "Wrong alignment on ReverseBearTrap_OnAttachSurvivorBegin");
static_assert(sizeof(ReverseBearTrap_OnAttachSurvivorBegin) == 0x000008, "Wrong size on ReverseBearTrap_OnAttachSurvivorBegin");
static_assert(offsetof(ReverseBearTrap_OnAttachSurvivorBegin, survivor) == 0x000000, "Member 'ReverseBearTrap_OnAttachSurvivorBegin::survivor' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.OnDetachSurvivor
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_OnDetachSurvivor final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_OnDetachSurvivor) == 0x000008, "Wrong alignment on ReverseBearTrap_OnDetachSurvivor");
static_assert(sizeof(ReverseBearTrap_OnDetachSurvivor) == 0x000008, "Wrong size on ReverseBearTrap_OnDetachSurvivor");
static_assert(offsetof(ReverseBearTrap_OnDetachSurvivor, survivor) == 0x000000, "Member 'ReverseBearTrap_OnDetachSurvivor::survivor' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.OnGeneratorComplete
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_OnGeneratorComplete final
{
public:
	int32                                         activatedGeneratorCount;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_OnGeneratorComplete) == 0x000004, "Wrong alignment on ReverseBearTrap_OnGeneratorComplete");
static_assert(sizeof(ReverseBearTrap_OnGeneratorComplete) == 0x000004, "Wrong size on ReverseBearTrap_OnGeneratorComplete");
static_assert(offsetof(ReverseBearTrap_OnGeneratorComplete, activatedGeneratorCount) == 0x000000, "Member 'ReverseBearTrap_OnGeneratorComplete::activatedGeneratorCount' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.OnWarningLevelChanged
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_OnWarningLevelChanged final
{
public:
	int32                                         previousWarningLevel;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         currentWarningLevel;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_OnWarningLevelChanged) == 0x000004, "Wrong alignment on ReverseBearTrap_OnWarningLevelChanged");
static_assert(sizeof(ReverseBearTrap_OnWarningLevelChanged) == 0x000008, "Wrong size on ReverseBearTrap_OnWarningLevelChanged");
static_assert(offsetof(ReverseBearTrap_OnWarningLevelChanged, previousWarningLevel) == 0x000000, "Member 'ReverseBearTrap_OnWarningLevelChanged::previousWarningLevel' has a wrong offset!");
static_assert(offsetof(ReverseBearTrap_OnWarningLevelChanged, currentWarningLevel) == 0x000004, "Member 'ReverseBearTrap_OnWarningLevelChanged::currentWarningLevel' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.ResetExecutionTimer
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_ResetExecutionTimer final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_ResetExecutionTimer) == 0x000004, "Wrong alignment on ReverseBearTrap_ResetExecutionTimer");
static_assert(sizeof(ReverseBearTrap_ResetExecutionTimer) == 0x000004, "Wrong size on ReverseBearTrap_ResetExecutionTimer");
static_assert(offsetof(ReverseBearTrap_ResetExecutionTimer, time) == 0x000000, "Member 'ReverseBearTrap_ResetExecutionTimer::time' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.SetGateClosedAtAttachment
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_SetGateClosedAtAttachment final
{
public:
	bool                                          closed;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_SetGateClosedAtAttachment) == 0x000001, "Wrong alignment on ReverseBearTrap_SetGateClosedAtAttachment");
static_assert(sizeof(ReverseBearTrap_SetGateClosedAtAttachment) == 0x000001, "Wrong size on ReverseBearTrap_SetGateClosedAtAttachment");
static_assert(offsetof(ReverseBearTrap_SetGateClosedAtAttachment, closed) == 0x000000, "Member 'ReverseBearTrap_SetGateClosedAtAttachment::closed' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_SetVisible final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_SetVisible) == 0x000001, "Wrong alignment on ReverseBearTrap_SetVisible");
static_assert(sizeof(ReverseBearTrap_SetVisible) == 0x000001, "Wrong size on ReverseBearTrap_SetVisible");
static_assert(offsetof(ReverseBearTrap_SetVisible, visible) == 0x000000, "Member 'ReverseBearTrap_SetVisible::visible' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.CanExecute
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_CanExecute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_CanExecute) == 0x000001, "Wrong alignment on ReverseBearTrap_CanExecute");
static_assert(sizeof(ReverseBearTrap_CanExecute) == 0x000001, "Wrong size on ReverseBearTrap_CanExecute");
static_assert(offsetof(ReverseBearTrap_CanExecute, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_CanExecute::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetAttachedSurvivor
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_GetAttachedSurvivor final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetAttachedSurvivor) == 0x000008, "Wrong alignment on ReverseBearTrap_GetAttachedSurvivor");
static_assert(sizeof(ReverseBearTrap_GetAttachedSurvivor) == 0x000008, "Wrong size on ReverseBearTrap_GetAttachedSurvivor");
static_assert(offsetof(ReverseBearTrap_GetAttachedSurvivor, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetAttachedSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetAttemptsMade
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_GetAttemptsMade final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetAttemptsMade) == 0x000004, "Wrong alignment on ReverseBearTrap_GetAttemptsMade");
static_assert(sizeof(ReverseBearTrap_GetAttemptsMade) == 0x000004, "Wrong size on ReverseBearTrap_GetAttemptsMade");
static_assert(offsetof(ReverseBearTrap_GetAttemptsMade, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetAttemptsMade::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetAttemptsNeeded
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_GetAttemptsNeeded final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetAttemptsNeeded) == 0x000004, "Wrong alignment on ReverseBearTrap_GetAttemptsNeeded");
static_assert(sizeof(ReverseBearTrap_GetAttemptsNeeded) == 0x000004, "Wrong size on ReverseBearTrap_GetAttemptsNeeded");
static_assert(offsetof(ReverseBearTrap_GetAttemptsNeeded, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetAttemptsNeeded::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetExecutionTimerPercentTimeElapsed
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_GetExecutionTimerPercentTimeElapsed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetExecutionTimerPercentTimeElapsed) == 0x000004, "Wrong alignment on ReverseBearTrap_GetExecutionTimerPercentTimeElapsed");
static_assert(sizeof(ReverseBearTrap_GetExecutionTimerPercentTimeElapsed) == 0x000004, "Wrong size on ReverseBearTrap_GetExecutionTimerPercentTimeElapsed");
static_assert(offsetof(ReverseBearTrap_GetExecutionTimerPercentTimeElapsed, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetExecutionTimerPercentTimeElapsed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetExecutionTimerTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_GetExecutionTimerTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetExecutionTimerTimeLeft) == 0x000004, "Wrong alignment on ReverseBearTrap_GetExecutionTimerTimeLeft");
static_assert(sizeof(ReverseBearTrap_GetExecutionTimerTimeLeft) == 0x000004, "Wrong size on ReverseBearTrap_GetExecutionTimerTimeLeft");
static_assert(offsetof(ReverseBearTrap_GetExecutionTimerTimeLeft, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetExecutionTimerTimeLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetExitGatesPoweredAfterAttachment
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_GetExitGatesPoweredAfterAttachment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetExitGatesPoweredAfterAttachment) == 0x000001, "Wrong alignment on ReverseBearTrap_GetExitGatesPoweredAfterAttachment");
static_assert(sizeof(ReverseBearTrap_GetExitGatesPoweredAfterAttachment) == 0x000001, "Wrong size on ReverseBearTrap_GetExitGatesPoweredAfterAttachment");
static_assert(offsetof(ReverseBearTrap_GetExitGatesPoweredAfterAttachment, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetExitGatesPoweredAfterAttachment::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetGeneratorFixedAfterAttachment
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_GetGeneratorFixedAfterAttachment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetGeneratorFixedAfterAttachment) == 0x000001, "Wrong alignment on ReverseBearTrap_GetGeneratorFixedAfterAttachment");
static_assert(sizeof(ReverseBearTrap_GetGeneratorFixedAfterAttachment) == 0x000001, "Wrong size on ReverseBearTrap_GetGeneratorFixedAfterAttachment");
static_assert(offsetof(ReverseBearTrap_GetGeneratorFixedAfterAttachment, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetGeneratorFixedAfterAttachment::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetKeyID
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_GetKeyID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetKeyID) == 0x000004, "Wrong alignment on ReverseBearTrap_GetKeyID");
static_assert(sizeof(ReverseBearTrap_GetKeyID) == 0x000004, "Wrong size on ReverseBearTrap_GetKeyID");
static_assert(offsetof(ReverseBearTrap_GetKeyID, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetKeyID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetWarningLevel
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_GetWarningLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetWarningLevel) == 0x000004, "Wrong alignment on ReverseBearTrap_GetWarningLevel");
static_assert(sizeof(ReverseBearTrap_GetWarningLevel) == 0x000004, "Wrong size on ReverseBearTrap_GetWarningLevel");
static_assert(offsetof(ReverseBearTrap_GetWarningLevel, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetWarningLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetWasGateClosedAtAttachment
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_GetWasGateClosedAtAttachment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetWasGateClosedAtAttachment) == 0x000001, "Wrong alignment on ReverseBearTrap_GetWasGateClosedAtAttachment");
static_assert(sizeof(ReverseBearTrap_GetWasGateClosedAtAttachment) == 0x000001, "Wrong size on ReverseBearTrap_GetWasGateClosedAtAttachment");
static_assert(offsetof(ReverseBearTrap_GetWasGateClosedAtAttachment, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetWasGateClosedAtAttachment::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.HasDetachStarted
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_HasDetachStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_HasDetachStarted) == 0x000001, "Wrong alignment on ReverseBearTrap_HasDetachStarted");
static_assert(sizeof(ReverseBearTrap_HasDetachStarted) == 0x000001, "Wrong size on ReverseBearTrap_HasDetachStarted");
static_assert(offsetof(ReverseBearTrap_HasDetachStarted, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_HasDetachStarted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.IsExecutionTimerActive
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_IsExecutionTimerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_IsExecutionTimerActive) == 0x000001, "Wrong alignment on ReverseBearTrap_IsExecutionTimerActive");
static_assert(sizeof(ReverseBearTrap_IsExecutionTimerActive) == 0x000001, "Wrong size on ReverseBearTrap_IsExecutionTimerActive");
static_assert(offsetof(ReverseBearTrap_IsExecutionTimerActive, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_IsExecutionTimerActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.IsExecutionTimerDone
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_IsExecutionTimerDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_IsExecutionTimerDone) == 0x000001, "Wrong alignment on ReverseBearTrap_IsExecutionTimerDone");
static_assert(sizeof(ReverseBearTrap_IsExecutionTimerDone) == 0x000001, "Wrong size on ReverseBearTrap_IsExecutionTimerDone");
static_assert(offsetof(ReverseBearTrap_IsExecutionTimerDone, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_IsExecutionTimerDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.IsInWarningZone
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_IsInWarningZone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_IsInWarningZone) == 0x000001, "Wrong alignment on ReverseBearTrap_IsInWarningZone");
static_assert(sizeof(ReverseBearTrap_IsInWarningZone) == 0x000001, "Wrong size on ReverseBearTrap_IsInWarningZone");
static_assert(offsetof(ReverseBearTrap_IsInWarningZone, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_IsInWarningZone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.IsRBTActivated
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_IsRBTActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_IsRBTActivated) == 0x000001, "Wrong alignment on ReverseBearTrap_IsRBTActivated");
static_assert(sizeof(ReverseBearTrap_IsRBTActivated) == 0x000001, "Wrong size on ReverseBearTrap_IsRBTActivated");
static_assert(offsetof(ReverseBearTrap_IsRBTActivated, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_IsRBTActivated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.ShouldUpdateExecutionTimer
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_ShouldUpdateExecutionTimer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_ShouldUpdateExecutionTimer) == 0x000001, "Wrong alignment on ReverseBearTrap_ShouldUpdateExecutionTimer");
static_assert(sizeof(ReverseBearTrap_ShouldUpdateExecutionTimer) == 0x000001, "Wrong size on ReverseBearTrap_ShouldUpdateExecutionTimer");
static_assert(offsetof(ReverseBearTrap_ShouldUpdateExecutionTimer, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_ShouldUpdateExecutionTimer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaPendingContent.GetDownloadSize
// 0x0004 (0x0004 - 0x0000)
struct AtlantaPendingContent_GetDownloadSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaPendingContent_GetDownloadSize) == 0x000004, "Wrong alignment on AtlantaPendingContent_GetDownloadSize");
static_assert(sizeof(AtlantaPendingContent_GetDownloadSize) == 0x000004, "Wrong size on AtlantaPendingContent_GetDownloadSize");
static_assert(offsetof(AtlantaPendingContent_GetDownloadSize, ReturnValue) == 0x000000, "Member 'AtlantaPendingContent_GetDownloadSize::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaPendingContent.GetDownloadSpeed
// 0x0004 (0x0004 - 0x0000)
struct AtlantaPendingContent_GetDownloadSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaPendingContent_GetDownloadSpeed) == 0x000004, "Wrong alignment on AtlantaPendingContent_GetDownloadSpeed");
static_assert(sizeof(AtlantaPendingContent_GetDownloadSpeed) == 0x000004, "Wrong size on AtlantaPendingContent_GetDownloadSpeed");
static_assert(offsetof(AtlantaPendingContent_GetDownloadSpeed, ReturnValue) == 0x000000, "Member 'AtlantaPendingContent_GetDownloadSpeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaPendingContent.GetDownloadStatusText
// 0x0018 (0x0018 - 0x0000)
struct AtlantaPendingContent_GetDownloadStatusText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaPendingContent_GetDownloadStatusText) == 0x000008, "Wrong alignment on AtlantaPendingContent_GetDownloadStatusText");
static_assert(sizeof(AtlantaPendingContent_GetDownloadStatusText) == 0x000018, "Wrong size on AtlantaPendingContent_GetDownloadStatusText");
static_assert(offsetof(AtlantaPendingContent_GetDownloadStatusText, ReturnValue) == 0x000000, "Member 'AtlantaPendingContent_GetDownloadStatusText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaPendingContent.GetInstallProgress
// 0x0004 (0x0004 - 0x0000)
struct AtlantaPendingContent_GetInstallProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaPendingContent_GetInstallProgress) == 0x000004, "Wrong alignment on AtlantaPendingContent_GetInstallProgress");
static_assert(sizeof(AtlantaPendingContent_GetInstallProgress) == 0x000004, "Wrong size on AtlantaPendingContent_GetInstallProgress");
static_assert(offsetof(AtlantaPendingContent_GetInstallProgress, ReturnValue) == 0x000000, "Member 'AtlantaPendingContent_GetInstallProgress::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaPendingContent.GetIsDownloading
// 0x0001 (0x0001 - 0x0000)
struct AtlantaPendingContent_GetIsDownloading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaPendingContent_GetIsDownloading) == 0x000001, "Wrong alignment on AtlantaPendingContent_GetIsDownloading");
static_assert(sizeof(AtlantaPendingContent_GetIsDownloading) == 0x000001, "Wrong size on AtlantaPendingContent_GetIsDownloading");
static_assert(offsetof(AtlantaPendingContent_GetIsDownloading, ReturnValue) == 0x000000, "Member 'AtlantaPendingContent_GetIsDownloading::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaPendingContent.GetRequiredDiskSpace
// 0x0004 (0x0004 - 0x0000)
struct AtlantaPendingContent_GetRequiredDiskSpace final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaPendingContent_GetRequiredDiskSpace) == 0x000004, "Wrong alignment on AtlantaPendingContent_GetRequiredDiskSpace");
static_assert(sizeof(AtlantaPendingContent_GetRequiredDiskSpace) == 0x000004, "Wrong size on AtlantaPendingContent_GetRequiredDiskSpace");
static_assert(offsetof(AtlantaPendingContent_GetRequiredDiskSpace, ReturnValue) == 0x000000, "Member 'AtlantaPendingContent_GetRequiredDiskSpace::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaPendingContent.GetTotalDownloadedSize
// 0x0004 (0x0004 - 0x0000)
struct AtlantaPendingContent_GetTotalDownloadedSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaPendingContent_GetTotalDownloadedSize) == 0x000004, "Wrong alignment on AtlantaPendingContent_GetTotalDownloadedSize");
static_assert(sizeof(AtlantaPendingContent_GetTotalDownloadedSize) == 0x000004, "Wrong size on AtlantaPendingContent_GetTotalDownloadedSize");
static_assert(offsetof(AtlantaPendingContent_GetTotalDownloadedSize, ReturnValue) == 0x000000, "Member 'AtlantaPendingContent_GetTotalDownloadedSize::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaPendingContent.StartInstall
// 0x0028 (0x0028 - 0x0000)
struct AtlantaPendingContent_StartInstall final
{
public:
	TDelegate<void()>                             OnSucceeded;                                       // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class FText ErrorText, int32 ErrorCode)> OnFailed;                                // 0x0014(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaPendingContent_StartInstall) == 0x000004, "Wrong alignment on AtlantaPendingContent_StartInstall");
static_assert(sizeof(AtlantaPendingContent_StartInstall) == 0x000028, "Wrong size on AtlantaPendingContent_StartInstall");
static_assert(offsetof(AtlantaPendingContent_StartInstall, OnSucceeded) == 0x000000, "Member 'AtlantaPendingContent_StartInstall::OnSucceeded' has a wrong offset!");
static_assert(offsetof(AtlantaPendingContent_StartInstall, OnFailed) == 0x000014, "Member 'AtlantaPendingContent_StartInstall::OnFailed' has a wrong offset!");

// Function DeadByDaylight.AtlantaPatchingLibrary.GetActiveDeviceProfileName
// 0x0010 (0x0010 - 0x0000)
struct AtlantaPatchingLibrary_GetActiveDeviceProfileName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaPatchingLibrary_GetActiveDeviceProfileName) == 0x000008, "Wrong alignment on AtlantaPatchingLibrary_GetActiveDeviceProfileName");
static_assert(sizeof(AtlantaPatchingLibrary_GetActiveDeviceProfileName) == 0x000010, "Wrong size on AtlantaPatchingLibrary_GetActiveDeviceProfileName");
static_assert(offsetof(AtlantaPatchingLibrary_GetActiveDeviceProfileName, ReturnValue) == 0x000000, "Member 'AtlantaPatchingLibrary_GetActiveDeviceProfileName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaPatchingLibrary.GetInstalledContent
// 0x0028 (0x0028 - 0x0000)
struct AtlantaPatchingLibrary_GetInstalledContent final
{
public:
	class FString                                 InstallDirectory;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ManifestFilename;                                  // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtlantaInstalledContent*               ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaPatchingLibrary_GetInstalledContent) == 0x000008, "Wrong alignment on AtlantaPatchingLibrary_GetInstalledContent");
static_assert(sizeof(AtlantaPatchingLibrary_GetInstalledContent) == 0x000028, "Wrong size on AtlantaPatchingLibrary_GetInstalledContent");
static_assert(offsetof(AtlantaPatchingLibrary_GetInstalledContent, InstallDirectory) == 0x000000, "Member 'AtlantaPatchingLibrary_GetInstalledContent::InstallDirectory' has a wrong offset!");
static_assert(offsetof(AtlantaPatchingLibrary_GetInstalledContent, ManifestFilename) == 0x000010, "Member 'AtlantaPatchingLibrary_GetInstalledContent::ManifestFilename' has a wrong offset!");
static_assert(offsetof(AtlantaPatchingLibrary_GetInstalledContent, ReturnValue) == 0x000020, "Member 'AtlantaPatchingLibrary_GetInstalledContent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaPatchingLibrary.GetSupportedPlatformNames
// 0x0010 (0x0010 - 0x0000)
struct AtlantaPatchingLibrary_GetSupportedPlatformNames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaPatchingLibrary_GetSupportedPlatformNames) == 0x000008, "Wrong alignment on AtlantaPatchingLibrary_GetSupportedPlatformNames");
static_assert(sizeof(AtlantaPatchingLibrary_GetSupportedPlatformNames) == 0x000010, "Wrong size on AtlantaPatchingLibrary_GetSupportedPlatformNames");
static_assert(offsetof(AtlantaPatchingLibrary_GetSupportedPlatformNames, ReturnValue) == 0x000000, "Member 'AtlantaPatchingLibrary_GetSupportedPlatformNames::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaPatchingLibrary.HasActiveWiFiConnection
// 0x0001 (0x0001 - 0x0000)
struct AtlantaPatchingLibrary_HasActiveWiFiConnection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaPatchingLibrary_HasActiveWiFiConnection) == 0x000001, "Wrong alignment on AtlantaPatchingLibrary_HasActiveWiFiConnection");
static_assert(sizeof(AtlantaPatchingLibrary_HasActiveWiFiConnection) == 0x000001, "Wrong size on AtlantaPatchingLibrary_HasActiveWiFiConnection");
static_assert(offsetof(AtlantaPatchingLibrary_HasActiveWiFiConnection, ReturnValue) == 0x000000, "Member 'AtlantaPatchingLibrary_HasActiveWiFiConnection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaPatchingLibrary.RequestContent
// 0x0060 (0x0060 - 0x0000)
struct AtlantaPatchingLibrary_RequestContent final
{
public:
	class FString                                 RemoteManifestURL;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CloudURL;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstallDirectory;                                  // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UAtlantaPendingContent* MobilePendingContent)> OnSucceeded;                 // 0x0030(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(class FText ErrorText, int32 ErrorCode)> OnFailed;                                // 0x0044(0x0014)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class UAtlantaPendingContent*                 MobilePendingContent;                              // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaPatchingLibrary_RequestContent) == 0x000008, "Wrong alignment on AtlantaPatchingLibrary_RequestContent");
static_assert(sizeof(AtlantaPatchingLibrary_RequestContent) == 0x000060, "Wrong size on AtlantaPatchingLibrary_RequestContent");
static_assert(offsetof(AtlantaPatchingLibrary_RequestContent, RemoteManifestURL) == 0x000000, "Member 'AtlantaPatchingLibrary_RequestContent::RemoteManifestURL' has a wrong offset!");
static_assert(offsetof(AtlantaPatchingLibrary_RequestContent, CloudURL) == 0x000010, "Member 'AtlantaPatchingLibrary_RequestContent::CloudURL' has a wrong offset!");
static_assert(offsetof(AtlantaPatchingLibrary_RequestContent, InstallDirectory) == 0x000020, "Member 'AtlantaPatchingLibrary_RequestContent::InstallDirectory' has a wrong offset!");
static_assert(offsetof(AtlantaPatchingLibrary_RequestContent, OnSucceeded) == 0x000030, "Member 'AtlantaPatchingLibrary_RequestContent::OnSucceeded' has a wrong offset!");
static_assert(offsetof(AtlantaPatchingLibrary_RequestContent, OnFailed) == 0x000044, "Member 'AtlantaPatchingLibrary_RequestContent::OnFailed' has a wrong offset!");
static_assert(offsetof(AtlantaPatchingLibrary_RequestContent, MobilePendingContent) == 0x000058, "Member 'AtlantaPatchingLibrary_RequestContent::MobilePendingContent' has a wrong offset!");

// Function DeadByDaylight.Entity.CompleteSacrifice
// 0x0001 (0x0001 - 0x0000)
struct Entity_CompleteSacrifice final
{
public:
	bool                                          isBasementHook;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Entity_CompleteSacrifice) == 0x000001, "Wrong alignment on Entity_CompleteSacrifice");
static_assert(sizeof(Entity_CompleteSacrifice) == 0x000001, "Wrong size on Entity_CompleteSacrifice");
static_assert(offsetof(Entity_CompleteSacrifice, isBasementHook) == 0x000000, "Member 'Entity_CompleteSacrifice::isBasementHook' has a wrong offset!");

// Function DeadByDaylight.Entity.InitEntity
// 0x0008 (0x0008 - 0x0000)
struct Entity_InitEntity final
{
public:
	class AMeatHook*                              meatHook;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Entity_InitEntity) == 0x000008, "Wrong alignment on Entity_InitEntity");
static_assert(sizeof(Entity_InitEntity) == 0x000008, "Wrong size on Entity_InitEntity");
static_assert(offsetof(Entity_InitEntity, meatHook) == 0x000000, "Member 'Entity_InitEntity::meatHook' has a wrong offset!");

// Function DeadByDaylight.Entity.SetAnimationIsStruggling
// 0x0001 (0x0001 - 0x0000)
struct Entity_SetAnimationIsStruggling final
{
public:
	bool                                          isStruggling;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Entity_SetAnimationIsStruggling) == 0x000001, "Wrong alignment on Entity_SetAnimationIsStruggling");
static_assert(sizeof(Entity_SetAnimationIsStruggling) == 0x000001, "Wrong size on Entity_SetAnimationIsStruggling");
static_assert(offsetof(Entity_SetAnimationIsStruggling, isStruggling) == 0x000000, "Member 'Entity_SetAnimationIsStruggling::isStruggling' has a wrong offset!");

// Function DeadByDaylight.Entity.SetAnimationStrugglePercent
// 0x0004 (0x0004 - 0x0000)
struct Entity_SetAnimationStrugglePercent final
{
public:
	float                                         percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Entity_SetAnimationStrugglePercent) == 0x000004, "Wrong alignment on Entity_SetAnimationStrugglePercent");
static_assert(sizeof(Entity_SetAnimationStrugglePercent) == 0x000004, "Wrong size on Entity_SetAnimationStrugglePercent");
static_assert(offsetof(Entity_SetAnimationStrugglePercent, percent) == 0x000000, "Member 'Entity_SetAnimationStrugglePercent::percent' has a wrong offset!");

// Function DeadByDaylight.TutorialNotificationController.HideNotification
// 0x0001 (0x0001 - 0x0000)
struct TutorialNotificationController_HideNotification final
{
public:
	bool                                          removeAllCachedNotifs;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialNotificationController_HideNotification) == 0x000001, "Wrong alignment on TutorialNotificationController_HideNotification");
static_assert(sizeof(TutorialNotificationController_HideNotification) == 0x000001, "Wrong size on TutorialNotificationController_HideNotification");
static_assert(offsetof(TutorialNotificationController_HideNotification, removeAllCachedNotifs) == 0x000000, "Member 'TutorialNotificationController_HideNotification::removeAllCachedNotifs' has a wrong offset!");

// Function DeadByDaylight.TutorialNotificationController.ShowBlockingNotification
// 0x000C (0x000C - 0x0000)
struct TutorialNotificationController_ShowBlockingNotification final
{
public:
	class FName                                   tutorialNotificationId;                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialNotificationController_ShowBlockingNotification) == 0x000004, "Wrong alignment on TutorialNotificationController_ShowBlockingNotification");
static_assert(sizeof(TutorialNotificationController_ShowBlockingNotification) == 0x00000C, "Wrong size on TutorialNotificationController_ShowBlockingNotification");
static_assert(offsetof(TutorialNotificationController_ShowBlockingNotification, tutorialNotificationId) == 0x000000, "Member 'TutorialNotificationController_ShowBlockingNotification::tutorialNotificationId' has a wrong offset!");

// Function DeadByDaylight.TutorialNotificationController.ShowNotification
// 0x0010 (0x0010 - 0x0000)
struct TutorialNotificationController_ShowNotification final
{
public:
	class FName                                   tutorialNotificationId;                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialNotificationController_ShowNotification) == 0x000004, "Wrong alignment on TutorialNotificationController_ShowNotification");
static_assert(sizeof(TutorialNotificationController_ShowNotification) == 0x000010, "Wrong size on TutorialNotificationController_ShowNotification");
static_assert(offsetof(TutorialNotificationController_ShowNotification, tutorialNotificationId) == 0x000000, "Member 'TutorialNotificationController_ShowNotification::tutorialNotificationId' has a wrong offset!");
static_assert(offsetof(TutorialNotificationController_ShowNotification, duration) == 0x00000C, "Member 'TutorialNotificationController_ShowNotification::duration' has a wrong offset!");

// Function DeadByDaylight.AtlantaRitualsScreen.OnClaimRewards
// 0x0004 (0x0004 - 0x0000)
struct AtlantaRitualsScreen_OnClaimRewards final
{
public:
	int32                                         ritualId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaRitualsScreen_OnClaimRewards) == 0x000004, "Wrong alignment on AtlantaRitualsScreen_OnClaimRewards");
static_assert(sizeof(AtlantaRitualsScreen_OnClaimRewards) == 0x000004, "Wrong size on AtlantaRitualsScreen_OnClaimRewards");
static_assert(offsetof(AtlantaRitualsScreen_OnClaimRewards, ritualId) == 0x000000, "Member 'AtlantaRitualsScreen_OnClaimRewards::ritualId' has a wrong offset!");

// Function DeadByDaylight.AtlantaSkillCheckWidget.OnIsActiveChanged
// 0x0001 (0x0001 - 0x0000)
struct AtlantaSkillCheckWidget_OnIsActiveChanged final
{
public:
	bool                                          isActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaSkillCheckWidget_OnIsActiveChanged) == 0x000001, "Wrong alignment on AtlantaSkillCheckWidget_OnIsActiveChanged");
static_assert(sizeof(AtlantaSkillCheckWidget_OnIsActiveChanged) == 0x000001, "Wrong size on AtlantaSkillCheckWidget_OnIsActiveChanged");
static_assert(offsetof(AtlantaSkillCheckWidget_OnIsActiveChanged, isActive) == 0x000000, "Member 'AtlantaSkillCheckWidget_OnIsActiveChanged::isActive' has a wrong offset!");

// Function DeadByDaylight.AtlantaSkillCheckWidget.SetActive
// 0x0001 (0x0001 - 0x0000)
struct AtlantaSkillCheckWidget_SetActive final
{
public:
	bool                                          active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaSkillCheckWidget_SetActive) == 0x000001, "Wrong alignment on AtlantaSkillCheckWidget_SetActive");
static_assert(sizeof(AtlantaSkillCheckWidget_SetActive) == 0x000001, "Wrong size on AtlantaSkillCheckWidget_SetActive");
static_assert(offsetof(AtlantaSkillCheckWidget_SetActive, active) == 0x000000, "Member 'AtlantaSkillCheckWidget_SetActive::active' has a wrong offset!");

// Function DeadByDaylight.AtlantaSkillCheckWidget.SetHexed
// 0x0001 (0x0001 - 0x0000)
struct AtlantaSkillCheckWidget_SetHexed final
{
public:
	bool                                          isHexed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaSkillCheckWidget_SetHexed) == 0x000001, "Wrong alignment on AtlantaSkillCheckWidget_SetHexed");
static_assert(sizeof(AtlantaSkillCheckWidget_SetHexed) == 0x000001, "Wrong size on AtlantaSkillCheckWidget_SetHexed");
static_assert(offsetof(AtlantaSkillCheckWidget_SetHexed, isHexed) == 0x000000, "Member 'AtlantaSkillCheckWidget_SetHexed::isHexed' has a wrong offset!");

// Function DeadByDaylight.AtlantaSkillCheckWidget.IsActive
// 0x0001 (0x0001 - 0x0000)
struct AtlantaSkillCheckWidget_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaSkillCheckWidget_IsActive) == 0x000001, "Wrong alignment on AtlantaSkillCheckWidget_IsActive");
static_assert(sizeof(AtlantaSkillCheckWidget_IsActive) == 0x000001, "Wrong size on AtlantaSkillCheckWidget_IsActive");
static_assert(offsetof(AtlantaSkillCheckWidget_IsActive, ReturnValue) == 0x000000, "Member 'AtlantaSkillCheckWidget_IsActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaTooltipManager.TryCloseActiveTooltip
// 0x0001 (0x0001 - 0x0000)
struct AtlantaTooltipManager_TryCloseActiveTooltip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaTooltipManager_TryCloseActiveTooltip) == 0x000001, "Wrong alignment on AtlantaTooltipManager_TryCloseActiveTooltip");
static_assert(sizeof(AtlantaTooltipManager_TryCloseActiveTooltip) == 0x000001, "Wrong size on AtlantaTooltipManager_TryCloseActiveTooltip");
static_assert(offsetof(AtlantaTooltipManager_TryCloseActiveTooltip, ReturnValue) == 0x000000, "Member 'AtlantaTooltipManager_TryCloseActiveTooltip::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaTooltipUtilities.TryCloseActiveTooltip
// 0x0001 (0x0001 - 0x0000)
struct AtlantaTooltipUtilities_TryCloseActiveTooltip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaTooltipUtilities_TryCloseActiveTooltip) == 0x000001, "Wrong alignment on AtlantaTooltipUtilities_TryCloseActiveTooltip");
static_assert(sizeof(AtlantaTooltipUtilities_TryCloseActiveTooltip) == 0x000001, "Wrong size on AtlantaTooltipUtilities_TryCloseActiveTooltip");
static_assert(offsetof(AtlantaTooltipUtilities_TryCloseActiveTooltip, ReturnValue) == 0x000000, "Member 'AtlantaTooltipUtilities_TryCloseActiveTooltip::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaTutorialPlayerHudController.HideHudComponent
// 0x0001 (0x0001 - 0x0000)
struct AtlantaTutorialPlayerHudController_HideHudComponent final
{
public:
	EHudComponent                                 hudComponentToHide;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaTutorialPlayerHudController_HideHudComponent) == 0x000001, "Wrong alignment on AtlantaTutorialPlayerHudController_HideHudComponent");
static_assert(sizeof(AtlantaTutorialPlayerHudController_HideHudComponent) == 0x000001, "Wrong size on AtlantaTutorialPlayerHudController_HideHudComponent");
static_assert(offsetof(AtlantaTutorialPlayerHudController_HideHudComponent, hudComponentToHide) == 0x000000, "Member 'AtlantaTutorialPlayerHudController_HideHudComponent::hudComponentToHide' has a wrong offset!");

// Function DeadByDaylight.AtlantaTutorialPlayerHudController.SetVirtualJoystickInputEnabled
// 0x0001 (0x0001 - 0x0000)
struct AtlantaTutorialPlayerHudController_SetVirtualJoystickInputEnabled final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaTutorialPlayerHudController_SetVirtualJoystickInputEnabled) == 0x000001, "Wrong alignment on AtlantaTutorialPlayerHudController_SetVirtualJoystickInputEnabled");
static_assert(sizeof(AtlantaTutorialPlayerHudController_SetVirtualJoystickInputEnabled) == 0x000001, "Wrong size on AtlantaTutorialPlayerHudController_SetVirtualJoystickInputEnabled");
static_assert(offsetof(AtlantaTutorialPlayerHudController_SetVirtualJoystickInputEnabled, enable) == 0x000000, "Member 'AtlantaTutorialPlayerHudController_SetVirtualJoystickInputEnabled::enable' has a wrong offset!");

// Function DeadByDaylight.AtlantaTutorialPlayerHudController.ShowHudComponent
// 0x0001 (0x0001 - 0x0000)
struct AtlantaTutorialPlayerHudController_ShowHudComponent final
{
public:
	EHudComponent                                 hudComponentToShow;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaTutorialPlayerHudController_ShowHudComponent) == 0x000001, "Wrong alignment on AtlantaTutorialPlayerHudController_ShowHudComponent");
static_assert(sizeof(AtlantaTutorialPlayerHudController_ShowHudComponent) == 0x000001, "Wrong size on AtlantaTutorialPlayerHudController_ShowHudComponent");
static_assert(offsetof(AtlantaTutorialPlayerHudController_ShowHudComponent, hudComponentToShow) == 0x000000, "Member 'AtlantaTutorialPlayerHudController_ShowHudComponent::hudComponentToShow' has a wrong offset!");

// Function DeadByDaylight.AtlantaTutorialStateMachine.OnBlockingNotificationDismissed
// 0x000C (0x000C - 0x0000)
struct AtlantaTutorialStateMachine_OnBlockingNotificationDismissed final
{
public:
	class FName                                   blockingNotificationID;                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaTutorialStateMachine_OnBlockingNotificationDismissed) == 0x000004, "Wrong alignment on AtlantaTutorialStateMachine_OnBlockingNotificationDismissed");
static_assert(sizeof(AtlantaTutorialStateMachine_OnBlockingNotificationDismissed) == 0x00000C, "Wrong size on AtlantaTutorialStateMachine_OnBlockingNotificationDismissed");
static_assert(offsetof(AtlantaTutorialStateMachine_OnBlockingNotificationDismissed, blockingNotificationID) == 0x000000, "Member 'AtlantaTutorialStateMachine_OnBlockingNotificationDismissed::blockingNotificationID' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetAlantaInteractionDescriptionText
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetAlantaInteractionDescriptionText final
{
public:
	class UInteractionDefinition*                 interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetAlantaInteractionDescriptionText) == 0x000008, "Wrong alignment on AtlantaUtilities_GetAlantaInteractionDescriptionText");
static_assert(sizeof(AtlantaUtilities_GetAlantaInteractionDescriptionText) == 0x000020, "Wrong size on AtlantaUtilities_GetAlantaInteractionDescriptionText");
static_assert(offsetof(AtlantaUtilities_GetAlantaInteractionDescriptionText, interaction) == 0x000000, "Member 'AtlantaUtilities_GetAlantaInteractionDescriptionText::interaction' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetAlantaInteractionDescriptionText, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetAlantaInteractionDescriptionText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetAvailableInteractionOfType
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_GetAvailableInteractionOfType final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         interactionInputType;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetAvailableInteractionOfType) == 0x000008, "Wrong alignment on AtlantaUtilities_GetAvailableInteractionOfType");
static_assert(sizeof(AtlantaUtilities_GetAvailableInteractionOfType) == 0x000018, "Wrong size on AtlantaUtilities_GetAvailableInteractionOfType");
static_assert(offsetof(AtlantaUtilities_GetAvailableInteractionOfType, player) == 0x000000, "Member 'AtlantaUtilities_GetAvailableInteractionOfType::player' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetAvailableInteractionOfType, interactionInputType) == 0x000008, "Member 'AtlantaUtilities_GetAvailableInteractionOfType::interactionInputType' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetAvailableInteractionOfType, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_GetAvailableInteractionOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetBackgroundColorByRarity
// 0x0008 (0x0008 - 0x0000)
struct AtlantaUtilities_GetBackgroundColorByRarity final
{
public:
	EItemRarity                                   rarity;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetBackgroundColorByRarity) == 0x000004, "Wrong alignment on AtlantaUtilities_GetBackgroundColorByRarity");
static_assert(sizeof(AtlantaUtilities_GetBackgroundColorByRarity) == 0x000008, "Wrong size on AtlantaUtilities_GetBackgroundColorByRarity");
static_assert(offsetof(AtlantaUtilities_GetBackgroundColorByRarity, rarity) == 0x000000, "Member 'AtlantaUtilities_GetBackgroundColorByRarity::rarity' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetBackgroundColorByRarity, ReturnValue) == 0x000004, "Member 'AtlantaUtilities_GetBackgroundColorByRarity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetControlsTunable
// 0x0010 (0x0010 - 0x0000)
struct AtlantaUtilities_GetControlsTunable final
{
public:
	class FName                                   tunableValueName;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetControlsTunable) == 0x000004, "Wrong alignment on AtlantaUtilities_GetControlsTunable");
static_assert(sizeof(AtlantaUtilities_GetControlsTunable) == 0x000010, "Wrong size on AtlantaUtilities_GetControlsTunable");
static_assert(offsetof(AtlantaUtilities_GetControlsTunable, tunableValueName) == 0x000000, "Member 'AtlantaUtilities_GetControlsTunable::tunableValueName' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetControlsTunable, ReturnValue) == 0x00000C, "Member 'AtlantaUtilities_GetControlsTunable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetControlsTunableByRole
// 0x0014 (0x0014 - 0x0000)
struct AtlantaUtilities_GetControlsTunableByRole final
{
public:
	EPlayerRole                                   playerRole;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   tunableValueName;                                  // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetControlsTunableByRole) == 0x000004, "Wrong alignment on AtlantaUtilities_GetControlsTunableByRole");
static_assert(sizeof(AtlantaUtilities_GetControlsTunableByRole) == 0x000014, "Wrong size on AtlantaUtilities_GetControlsTunableByRole");
static_assert(offsetof(AtlantaUtilities_GetControlsTunableByRole, playerRole) == 0x000000, "Member 'AtlantaUtilities_GetControlsTunableByRole::playerRole' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetControlsTunableByRole, tunableValueName) == 0x000004, "Member 'AtlantaUtilities_GetControlsTunableByRole::tunableValueName' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetControlsTunableByRole, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_GetControlsTunableByRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetCurrencyColor
// 0x0030 (0x0030 - 0x0000)
struct AtlantaUtilities_GetCurrencyColor final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetCurrencyColor) == 0x000008, "Wrong alignment on AtlantaUtilities_GetCurrencyColor");
static_assert(sizeof(AtlantaUtilities_GetCurrencyColor) == 0x000030, "Wrong size on AtlantaUtilities_GetCurrencyColor");
static_assert(offsetof(AtlantaUtilities_GetCurrencyColor, currencyType) == 0x000000, "Member 'AtlantaUtilities_GetCurrencyColor::currencyType' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetCurrencyColor, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetCurrencyColor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetCurrencyUITexturePath
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_GetCurrencyUITexturePath final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetCurrencyUITexturePath) == 0x000008, "Wrong alignment on AtlantaUtilities_GetCurrencyUITexturePath");
static_assert(sizeof(AtlantaUtilities_GetCurrencyUITexturePath) == 0x000018, "Wrong size on AtlantaUtilities_GetCurrencyUITexturePath");
static_assert(offsetof(AtlantaUtilities_GetCurrencyUITexturePath, currencyType) == 0x000000, "Member 'AtlantaUtilities_GetCurrencyUITexturePath::currencyType' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetCurrencyUITexturePath, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetCurrencyUITexturePath::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetCurrentInteraction
// 0x0010 (0x0010 - 0x0000)
struct AtlantaUtilities_GetCurrentInteraction final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetCurrentInteraction) == 0x000008, "Wrong alignment on AtlantaUtilities_GetCurrentInteraction");
static_assert(sizeof(AtlantaUtilities_GetCurrentInteraction) == 0x000010, "Wrong size on AtlantaUtilities_GetCurrentInteraction");
static_assert(offsetof(AtlantaUtilities_GetCurrentInteraction, player) == 0x000000, "Member 'AtlantaUtilities_GetCurrentInteraction::player' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetCurrentInteraction, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetCurrentInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetCurrentInteractionOfType
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_GetCurrentInteractionOfType final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         interactionInputType;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetCurrentInteractionOfType) == 0x000008, "Wrong alignment on AtlantaUtilities_GetCurrentInteractionOfType");
static_assert(sizeof(AtlantaUtilities_GetCurrentInteractionOfType) == 0x000018, "Wrong size on AtlantaUtilities_GetCurrentInteractionOfType");
static_assert(offsetof(AtlantaUtilities_GetCurrentInteractionOfType, player) == 0x000000, "Member 'AtlantaUtilities_GetCurrentInteractionOfType::player' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetCurrentInteractionOfType, interactionInputType) == 0x000008, "Member 'AtlantaUtilities_GetCurrentInteractionOfType::interactionInputType' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetCurrentInteractionOfType, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_GetCurrentInteractionOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetCurrentOrAvailableInteractionOfType
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_GetCurrentOrAvailableInteractionOfType final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         interactionInputType;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetCurrentOrAvailableInteractionOfType) == 0x000008, "Wrong alignment on AtlantaUtilities_GetCurrentOrAvailableInteractionOfType");
static_assert(sizeof(AtlantaUtilities_GetCurrentOrAvailableInteractionOfType) == 0x000018, "Wrong size on AtlantaUtilities_GetCurrentOrAvailableInteractionOfType");
static_assert(offsetof(AtlantaUtilities_GetCurrentOrAvailableInteractionOfType, player) == 0x000000, "Member 'AtlantaUtilities_GetCurrentOrAvailableInteractionOfType::player' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetCurrentOrAvailableInteractionOfType, interactionInputType) == 0x000008, "Member 'AtlantaUtilities_GetCurrentOrAvailableInteractionOfType::interactionInputType' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetCurrentOrAvailableInteractionOfType, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_GetCurrentOrAvailableInteractionOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetDifficultyLevelText
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetDifficultyLevelText final
{
public:
	EAIDifficultyLevel                            difficultyLevel;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetDifficultyLevelText) == 0x000008, "Wrong alignment on AtlantaUtilities_GetDifficultyLevelText");
static_assert(sizeof(AtlantaUtilities_GetDifficultyLevelText) == 0x000020, "Wrong size on AtlantaUtilities_GetDifficultyLevelText");
static_assert(offsetof(AtlantaUtilities_GetDifficultyLevelText, difficultyLevel) == 0x000000, "Member 'AtlantaUtilities_GetDifficultyLevelText::difficultyLevel' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetDifficultyLevelText, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetDifficultyLevelText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetEmblemColorByQuality
// 0x0008 (0x0008 - 0x0000)
struct AtlantaUtilities_GetEmblemColorByQuality final
{
public:
	EEmblemQuality                                emblemQuality;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetEmblemColorByQuality) == 0x000004, "Wrong alignment on AtlantaUtilities_GetEmblemColorByQuality");
static_assert(sizeof(AtlantaUtilities_GetEmblemColorByQuality) == 0x000008, "Wrong size on AtlantaUtilities_GetEmblemColorByQuality");
static_assert(offsetof(AtlantaUtilities_GetEmblemColorByQuality, emblemQuality) == 0x000000, "Member 'AtlantaUtilities_GetEmblemColorByQuality::emblemQuality' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetEmblemColorByQuality, ReturnValue) == 0x000004, "Member 'AtlantaUtilities_GetEmblemColorByQuality::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetEmblemQualityText
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetEmblemQualityText final
{
public:
	EEmblemQuality                                emblemQuality;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetEmblemQualityText) == 0x000008, "Wrong alignment on AtlantaUtilities_GetEmblemQualityText");
static_assert(sizeof(AtlantaUtilities_GetEmblemQualityText) == 0x000020, "Wrong size on AtlantaUtilities_GetEmblemQualityText");
static_assert(offsetof(AtlantaUtilities_GetEmblemQualityText, emblemQuality) == 0x000000, "Member 'AtlantaUtilities_GetEmblemQualityText::emblemQuality' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetEmblemQualityText, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetEmblemQualityText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetIconImageByPath
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_GetIconImageByPath final
{
public:
	class FString                                 iconPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetIconImageByPath) == 0x000008, "Wrong alignment on AtlantaUtilities_GetIconImageByPath");
static_assert(sizeof(AtlantaUtilities_GetIconImageByPath) == 0x000018, "Wrong size on AtlantaUtilities_GetIconImageByPath");
static_assert(offsetof(AtlantaUtilities_GetIconImageByPath, iconPath) == 0x000000, "Member 'AtlantaUtilities_GetIconImageByPath::iconPath' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetIconImageByPath, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_GetIconImageByPath::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetItemAvailabilityText
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetItemAvailabilityText final
{
public:
	EItemAvailability                             availability;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetItemAvailabilityText) == 0x000008, "Wrong alignment on AtlantaUtilities_GetItemAvailabilityText");
static_assert(sizeof(AtlantaUtilities_GetItemAvailabilityText) == 0x000020, "Wrong size on AtlantaUtilities_GetItemAvailabilityText");
static_assert(offsetof(AtlantaUtilities_GetItemAvailabilityText, availability) == 0x000000, "Member 'AtlantaUtilities_GetItemAvailabilityText::availability' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetItemAvailabilityText, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetItemAvailabilityText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetItemRarityText
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetItemRarityText final
{
public:
	EItemRarity                                   rarity;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetItemRarityText) == 0x000008, "Wrong alignment on AtlantaUtilities_GetItemRarityText");
static_assert(sizeof(AtlantaUtilities_GetItemRarityText) == 0x000020, "Wrong size on AtlantaUtilities_GetItemRarityText");
static_assert(offsetof(AtlantaUtilities_GetItemRarityText, rarity) == 0x000000, "Member 'AtlantaUtilities_GetItemRarityText::rarity' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetItemRarityText, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetItemRarityText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetMapSpriteFromPath
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_GetMapSpriteFromPath final
{
public:
	class FString                                 mapSpritePath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetMapSpriteFromPath) == 0x000008, "Wrong alignment on AtlantaUtilities_GetMapSpriteFromPath");
static_assert(sizeof(AtlantaUtilities_GetMapSpriteFromPath) == 0x000018, "Wrong size on AtlantaUtilities_GetMapSpriteFromPath");
static_assert(offsetof(AtlantaUtilities_GetMapSpriteFromPath, mapSpritePath) == 0x000000, "Member 'AtlantaUtilities_GetMapSpriteFromPath::mapSpritePath' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetMapSpriteFromPath, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_GetMapSpriteFromPath::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetOfferingCategoryText
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetOfferingCategoryText final
{
public:
	EOfferingCategory                             offeringCategory;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetOfferingCategoryText) == 0x000008, "Wrong alignment on AtlantaUtilities_GetOfferingCategoryText");
static_assert(sizeof(AtlantaUtilities_GetOfferingCategoryText) == 0x000020, "Wrong size on AtlantaUtilities_GetOfferingCategoryText");
static_assert(offsetof(AtlantaUtilities_GetOfferingCategoryText, offeringCategory) == 0x000000, "Member 'AtlantaUtilities_GetOfferingCategoryText::offeringCategory' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetOfferingCategoryText, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetOfferingCategoryText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetPaintColorByRarity
// 0x0008 (0x0008 - 0x0000)
struct AtlantaUtilities_GetPaintColorByRarity final
{
public:
	EItemRarity                                   rarity;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetPaintColorByRarity) == 0x000004, "Wrong alignment on AtlantaUtilities_GetPaintColorByRarity");
static_assert(sizeof(AtlantaUtilities_GetPaintColorByRarity) == 0x000008, "Wrong size on AtlantaUtilities_GetPaintColorByRarity");
static_assert(offsetof(AtlantaUtilities_GetPaintColorByRarity, rarity) == 0x000000, "Member 'AtlantaUtilities_GetPaintColorByRarity::rarity' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetPaintColorByRarity, ReturnValue) == 0x000004, "Member 'AtlantaUtilities_GetPaintColorByRarity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetPlayerRoleText
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetPlayerRoleText final
{
public:
	EPlayerRole                                   playerRole;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetPlayerRoleText) == 0x000008, "Wrong alignment on AtlantaUtilities_GetPlayerRoleText");
static_assert(sizeof(AtlantaUtilities_GetPlayerRoleText) == 0x000020, "Wrong size on AtlantaUtilities_GetPlayerRoleText");
static_assert(offsetof(AtlantaUtilities_GetPlayerRoleText, playerRole) == 0x000000, "Member 'AtlantaUtilities_GetPlayerRoleText::playerRole' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetPlayerRoleText, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetPlayerRoleText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetPlayerRoleTextUppercase
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetPlayerRoleTextUppercase final
{
public:
	EPlayerRole                                   playerRole;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetPlayerRoleTextUppercase) == 0x000008, "Wrong alignment on AtlantaUtilities_GetPlayerRoleTextUppercase");
static_assert(sizeof(AtlantaUtilities_GetPlayerRoleTextUppercase) == 0x000020, "Wrong size on AtlantaUtilities_GetPlayerRoleTextUppercase");
static_assert(offsetof(AtlantaUtilities_GetPlayerRoleTextUppercase, playerRole) == 0x000000, "Member 'AtlantaUtilities_GetPlayerRoleTextUppercase::playerRole' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetPlayerRoleTextUppercase, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetPlayerRoleTextUppercase::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetSpriteFromFullPath
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_GetSpriteFromFullPath final
{
public:
	class FString                                 fullSpritePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetSpriteFromFullPath) == 0x000008, "Wrong alignment on AtlantaUtilities_GetSpriteFromFullPath");
static_assert(sizeof(AtlantaUtilities_GetSpriteFromFullPath) == 0x000018, "Wrong size on AtlantaUtilities_GetSpriteFromFullPath");
static_assert(offsetof(AtlantaUtilities_GetSpriteFromFullPath, fullSpritePath) == 0x000000, "Member 'AtlantaUtilities_GetSpriteFromFullPath::fullSpritePath' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetSpriteFromFullPath, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_GetSpriteFromFullPath::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetSpriteFromPath
// 0x0038 (0x0038 - 0x0000)
struct AtlantaUtilities_GetSpriteFromPath final
{
public:
	class FString                                 fullDbPathToImage;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 constantDbPathToImageFolder;                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 constantPathToSpriteFolder;                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetSpriteFromPath) == 0x000008, "Wrong alignment on AtlantaUtilities_GetSpriteFromPath");
static_assert(sizeof(AtlantaUtilities_GetSpriteFromPath) == 0x000038, "Wrong size on AtlantaUtilities_GetSpriteFromPath");
static_assert(offsetof(AtlantaUtilities_GetSpriteFromPath, fullDbPathToImage) == 0x000000, "Member 'AtlantaUtilities_GetSpriteFromPath::fullDbPathToImage' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetSpriteFromPath, constantDbPathToImageFolder) == 0x000010, "Member 'AtlantaUtilities_GetSpriteFromPath::constantDbPathToImageFolder' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetSpriteFromPath, constantPathToSpriteFolder) == 0x000020, "Member 'AtlantaUtilities_GetSpriteFromPath::constantPathToSpriteFolder' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetSpriteFromPath, ReturnValue) == 0x000030, "Member 'AtlantaUtilities_GetSpriteFromPath::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetStoreVersion
// 0x0010 (0x0010 - 0x0000)
struct AtlantaUtilities_GetStoreVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetStoreVersion) == 0x000008, "Wrong alignment on AtlantaUtilities_GetStoreVersion");
static_assert(sizeof(AtlantaUtilities_GetStoreVersion) == 0x000010, "Wrong size on AtlantaUtilities_GetStoreVersion");
static_assert(offsetof(AtlantaUtilities_GetStoreVersion, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_GetStoreVersion::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.IsInAtlantaTutorialLevel
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_IsInAtlantaTutorialLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_IsInAtlantaTutorialLevel) == 0x000001, "Wrong alignment on AtlantaUtilities_IsInAtlantaTutorialLevel");
static_assert(sizeof(AtlantaUtilities_IsInAtlantaTutorialLevel) == 0x000001, "Wrong size on AtlantaUtilities_IsInAtlantaTutorialLevel");
static_assert(offsetof(AtlantaUtilities_IsInAtlantaTutorialLevel, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_IsInAtlantaTutorialLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.IsPlayerInteractingWithActor
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_IsPlayerInteractingWithActor final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           actor;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlantaUtilities_IsPlayerInteractingWithActor) == 0x000008, "Wrong alignment on AtlantaUtilities_IsPlayerInteractingWithActor");
static_assert(sizeof(AtlantaUtilities_IsPlayerInteractingWithActor) == 0x000018, "Wrong size on AtlantaUtilities_IsPlayerInteractingWithActor");
static_assert(offsetof(AtlantaUtilities_IsPlayerInteractingWithActor, player) == 0x000000, "Member 'AtlantaUtilities_IsPlayerInteractingWithActor::player' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_IsPlayerInteractingWithActor, actor) == 0x000008, "Member 'AtlantaUtilities_IsPlayerInteractingWithActor::actor' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_IsPlayerInteractingWithActor, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_IsPlayerInteractingWithActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.IsTutorialEditorDebuggingEnabled
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_IsTutorialEditorDebuggingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_IsTutorialEditorDebuggingEnabled) == 0x000001, "Wrong alignment on AtlantaUtilities_IsTutorialEditorDebuggingEnabled");
static_assert(sizeof(AtlantaUtilities_IsTutorialEditorDebuggingEnabled) == 0x000001, "Wrong size on AtlantaUtilities_IsTutorialEditorDebuggingEnabled");
static_assert(offsetof(AtlantaUtilities_IsTutorialEditorDebuggingEnabled, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_IsTutorialEditorDebuggingEnabled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.LoadTextureByAsset
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_LoadTextureByAsset final
{
public:
	class FString                                 path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_LoadTextureByAsset) == 0x000008, "Wrong alignment on AtlantaUtilities_LoadTextureByAsset");
static_assert(sizeof(AtlantaUtilities_LoadTextureByAsset) == 0x000018, "Wrong size on AtlantaUtilities_LoadTextureByAsset");
static_assert(offsetof(AtlantaUtilities_LoadTextureByAsset, path) == 0x000000, "Member 'AtlantaUtilities_LoadTextureByAsset::path' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_LoadTextureByAsset, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_LoadTextureByAsset::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.MakeBrushFromSprite
// 0x0098 (0x0098 - 0x0000)
struct AtlantaUtilities_MakeBrushFromSprite final
{
public:
	class UPaperSprite*                           sprite;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ReturnValue;                                       // 0x0008(0x0090)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_MakeBrushFromSprite) == 0x000008, "Wrong alignment on AtlantaUtilities_MakeBrushFromSprite");
static_assert(sizeof(AtlantaUtilities_MakeBrushFromSprite) == 0x000098, "Wrong size on AtlantaUtilities_MakeBrushFromSprite");
static_assert(offsetof(AtlantaUtilities_MakeBrushFromSprite, sprite) == 0x000000, "Member 'AtlantaUtilities_MakeBrushFromSprite::sprite' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_MakeBrushFromSprite, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_MakeBrushFromSprite::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.MakeBrushFromTexture
// 0x0098 (0x0098 - 0x0000)
struct AtlantaUtilities_MakeBrushFromTexture final
{
public:
	class UTexture2D*                             texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ReturnValue;                                       // 0x0008(0x0090)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_MakeBrushFromTexture) == 0x000008, "Wrong alignment on AtlantaUtilities_MakeBrushFromTexture");
static_assert(sizeof(AtlantaUtilities_MakeBrushFromTexture) == 0x000098, "Wrong size on AtlantaUtilities_MakeBrushFromTexture");
static_assert(offsetof(AtlantaUtilities_MakeBrushFromTexture, texture) == 0x000000, "Member 'AtlantaUtilities_MakeBrushFromTexture::texture' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_MakeBrushFromTexture, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_MakeBrushFromTexture::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.SecondsToStringWithoutDecimals
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_SecondsToStringWithoutDecimals final
{
public:
	int32                                         seconds;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_SecondsToStringWithoutDecimals) == 0x000008, "Wrong alignment on AtlantaUtilities_SecondsToStringWithoutDecimals");
static_assert(sizeof(AtlantaUtilities_SecondsToStringWithoutDecimals) == 0x000018, "Wrong size on AtlantaUtilities_SecondsToStringWithoutDecimals");
static_assert(offsetof(AtlantaUtilities_SecondsToStringWithoutDecimals, seconds) == 0x000000, "Member 'AtlantaUtilities_SecondsToStringWithoutDecimals::seconds' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SecondsToStringWithoutDecimals, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_SecondsToStringWithoutDecimals::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.SetButtonStyle
// 0x0098 (0x0098 - 0x0000)
struct AtlantaUtilities_SetButtonStyle final
{
public:
	class UButton*                                button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            brush;                                             // 0x0008(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_SetButtonStyle) == 0x000008, "Wrong alignment on AtlantaUtilities_SetButtonStyle");
static_assert(sizeof(AtlantaUtilities_SetButtonStyle) == 0x000098, "Wrong size on AtlantaUtilities_SetButtonStyle");
static_assert(offsetof(AtlantaUtilities_SetButtonStyle, button) == 0x000000, "Member 'AtlantaUtilities_SetButtonStyle::button' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetButtonStyle, brush) == 0x000008, "Member 'AtlantaUtilities_SetButtonStyle::brush' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.SetImageBrush
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_SetImageBrush final
{
public:
	class UImage*                                 image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             asset;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlantaUtilities_SetImageBrush) == 0x000008, "Wrong alignment on AtlantaUtilities_SetImageBrush");
static_assert(sizeof(AtlantaUtilities_SetImageBrush) == 0x000018, "Wrong size on AtlantaUtilities_SetImageBrush");
static_assert(offsetof(AtlantaUtilities_SetImageBrush, image) == 0x000000, "Member 'AtlantaUtilities_SetImageBrush::image' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageBrush, asset) == 0x000008, "Member 'AtlantaUtilities_SetImageBrush::asset' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageBrush, bMatchSize) == 0x000010, "Member 'AtlantaUtilities_SetImageBrush::bMatchSize' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.SetImageBrushFromPath
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_SetImageBrushFromPath final
{
public:
	class UImage*                                 image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 path;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlantaUtilities_SetImageBrushFromPath) == 0x000008, "Wrong alignment on AtlantaUtilities_SetImageBrushFromPath");
static_assert(sizeof(AtlantaUtilities_SetImageBrushFromPath) == 0x000020, "Wrong size on AtlantaUtilities_SetImageBrushFromPath");
static_assert(offsetof(AtlantaUtilities_SetImageBrushFromPath, image) == 0x000000, "Member 'AtlantaUtilities_SetImageBrushFromPath::image' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageBrushFromPath, path) == 0x000008, "Member 'AtlantaUtilities_SetImageBrushFromPath::path' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageBrushFromPath, bMatchSize) == 0x000018, "Member 'AtlantaUtilities_SetImageBrushFromPath::bMatchSize' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.SetImageBrushFromSpritePath
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_SetImageBrushFromSpritePath final
{
public:
	class UImage*                                 image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 path;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_SetImageBrushFromSpritePath) == 0x000008, "Wrong alignment on AtlantaUtilities_SetImageBrushFromSpritePath");
static_assert(sizeof(AtlantaUtilities_SetImageBrushFromSpritePath) == 0x000018, "Wrong size on AtlantaUtilities_SetImageBrushFromSpritePath");
static_assert(offsetof(AtlantaUtilities_SetImageBrushFromSpritePath, image) == 0x000000, "Member 'AtlantaUtilities_SetImageBrushFromSpritePath::image' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageBrushFromSpritePath, path) == 0x000008, "Member 'AtlantaUtilities_SetImageBrushFromSpritePath::path' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.SetImageSlateBrush
// 0x00A0 (0x00A0 - 0x0000)
struct AtlantaUtilities_SetImageSlateBrush final
{
public:
	class UImage*                                 image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            brush;                                             // 0x0008(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0098(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0099(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlantaUtilities_SetImageSlateBrush) == 0x000008, "Wrong alignment on AtlantaUtilities_SetImageSlateBrush");
static_assert(sizeof(AtlantaUtilities_SetImageSlateBrush) == 0x0000A0, "Wrong size on AtlantaUtilities_SetImageSlateBrush");
static_assert(offsetof(AtlantaUtilities_SetImageSlateBrush, image) == 0x000000, "Member 'AtlantaUtilities_SetImageSlateBrush::image' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageSlateBrush, brush) == 0x000008, "Member 'AtlantaUtilities_SetImageSlateBrush::brush' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageSlateBrush, bMatchSize) == 0x000098, "Member 'AtlantaUtilities_SetImageSlateBrush::bMatchSize' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageSlateBrush, ReturnValue) == 0x000099, "Member 'AtlantaUtilities_SetImageSlateBrush::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldSupportMultipleActiveActivatablePerks
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldSupportMultipleActiveActivatablePerks final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldSupportMultipleActiveActivatablePerks) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldSupportMultipleActiveActivatablePerks");
static_assert(sizeof(AtlantaUtilities_ShouldSupportMultipleActiveActivatablePerks) == 0x000001, "Wrong size on AtlantaUtilities_ShouldSupportMultipleActiveActivatablePerks");
static_assert(offsetof(AtlantaUtilities_ShouldSupportMultipleActiveActivatablePerks, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldSupportMultipleActiveActivatablePerks::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaBackendBloodMarketData
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaBackendBloodMarketData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaBackendBloodMarketData) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaBackendBloodMarketData");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaBackendBloodMarketData) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaBackendBloodMarketData");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaBackendBloodMarketData, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaBackendBloodMarketData::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaBloodweb
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaBloodweb final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaBloodweb) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaBloodweb");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaBloodweb) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaBloodweb");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaBloodweb, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaBloodweb::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaBundleFilterRules
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaBundleFilterRules final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaBundleFilterRules) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaBundleFilterRules");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaBundleFilterRules) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaBundleFilterRules");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaBundleFilterRules, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaBundleFilterRules::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaCatalog
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaCatalog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaCatalog) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaCatalog");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaCatalog) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaCatalog");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaCatalog, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaCatalog::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaCDNBucketChangelist
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaCDNBucketChangelist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaCDNBucketChangelist) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaCDNBucketChangelist");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaCDNBucketChangelist) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaCDNBucketChangelist");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaCDNBucketChangelist, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaCDNBucketChangelist::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaCDNPatching
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaCDNPatching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaCDNPatching) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaCDNPatching");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaCDNPatching) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaCDNPatching");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaCDNPatching, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaCDNPatching::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaCharacterProgression
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaCharacterProgression final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaCharacterProgression) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaCharacterProgression");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaCharacterProgression) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaCharacterProgression");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaCharacterProgression, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaCharacterProgression::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaContent
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaContent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaContent) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaContent");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaContent) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaContent");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaContent, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaContent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaCurrencies
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaCurrencies final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaCurrencies) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaCurrencies");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaCurrencies) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaCurrencies");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaCurrencies, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaCurrencies::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaCustomizedHudSettings
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaCustomizedHudSettings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaCustomizedHudSettings) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaCustomizedHudSettings");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaCustomizedHudSettings) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaCustomizedHudSettings");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaCustomizedHudSettings, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaCustomizedHudSettings::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaDailyRewards
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaDailyRewards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaDailyRewards) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaDailyRewards");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaDailyRewards) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaDailyRewards");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaDailyRewards, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaDailyRewards::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaDreamworldFX
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaDreamworldFX final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaDreamworldFX) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaDreamworldFX");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaDreamworldFX) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaDreamworldFX");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaDreamworldFX, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaDreamworldFX::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaEntity
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaEntity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaEntity) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaEntity");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaEntity) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaEntity");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaEntity, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaEntity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaFearMarket
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaFearMarket final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaFearMarket) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaFearMarket");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaFearMarket) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaFearMarket");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaFearMarket, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaFearMarket::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaFixedMaps
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaFixedMaps final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaFixedMaps) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaFixedMaps");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaFixedMaps) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaFixedMaps");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaFixedMaps, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaFixedMaps::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaFreeTickets
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaFreeTickets final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaFreeTickets) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaFreeTickets");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaFreeTickets) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaFreeTickets");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaFreeTickets, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaFreeTickets::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaFriendList
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaFriendList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaFriendList) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaFriendList");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaFriendList) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaFriendList");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaFriendList, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaFriendList::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaGameplayValues
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaGameplayValues final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaGameplayValues) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaGameplayValues");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaGameplayValues) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaGameplayValues");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaGameplayValues, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaGameplayValues::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaHudAttackJoystick
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaHudAttackJoystick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaHudAttackJoystick) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaHudAttackJoystick");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaHudAttackJoystick) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaHudAttackJoystick");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaHudAttackJoystick, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaHudAttackJoystick::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaHudEditor
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaHudEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaHudEditor) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaHudEditor");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaHudEditor) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaHudEditor");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaHudEditor, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaHudEditor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaItemAvailability
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaItemAvailability final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaItemAvailability) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaItemAvailability");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaItemAvailability) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaItemAvailability");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaItemAvailability, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaItemAvailability::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaKrakenContentVersion
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaKrakenContentVersion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaKrakenContentVersion) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaKrakenContentVersion");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaKrakenContentVersion) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaKrakenContentVersion");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaKrakenContentVersion, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaKrakenContentVersion::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaLighting
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaLighting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaLighting) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaLighting");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaLighting) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaLighting");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaLighting, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaLighting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaMatchmaking
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaMatchmaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaMatchmaking) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaMatchmaking");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaMatchmaking) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaMatchmaking");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaMatchmaking, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaMatchmaking::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaOutlines
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaOutlines final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaOutlines) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaOutlines");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaOutlines) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaOutlines");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaOutlines, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaOutlines::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaPurchasableOperations
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaPurchasableOperations final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaPurchasableOperations) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaPurchasableOperations");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaPurchasableOperations) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaPurchasableOperations");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaPurchasableOperations, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaPurchasableOperations::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaQualitySettings
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaQualitySettings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaQualitySettings) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaQualitySettings");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaQualitySettings) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaQualitySettings");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaQualitySettings, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaQualitySettings::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaRank
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaRank final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaRank) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaRank");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaRank) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaRank");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaRank, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaRank::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaRituals
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaRituals final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaRituals) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaRituals");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaRituals) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaRituals");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaRituals, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaRituals::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaStreamVideo
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaStreamVideo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaStreamVideo) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaStreamVideo");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaStreamVideo) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaStreamVideo");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaStreamVideo, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaStreamVideo::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseAtlantaUI
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseAtlantaUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseAtlantaUI) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseAtlantaUI");
static_assert(sizeof(AtlantaUtilities_ShouldUseAtlantaUI) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseAtlantaUI");
static_assert(offsetof(AtlantaUtilities_ShouldUseAtlantaUI, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseAtlantaUI::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseOfflineMatchHistory
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseOfflineMatchHistory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseOfflineMatchHistory) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseOfflineMatchHistory");
static_assert(sizeof(AtlantaUtilities_ShouldUseOfflineMatchHistory) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseOfflineMatchHistory");
static_assert(offsetof(AtlantaUtilities_ShouldUseOfflineMatchHistory, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseOfflineMatchHistory::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.ShouldUseQuickRoleSwitch
// 0x0001 (0x0001 - 0x0000)
struct AtlantaUtilities_ShouldUseQuickRoleSwitch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_ShouldUseQuickRoleSwitch) == 0x000001, "Wrong alignment on AtlantaUtilities_ShouldUseQuickRoleSwitch");
static_assert(sizeof(AtlantaUtilities_ShouldUseQuickRoleSwitch) == 0x000001, "Wrong size on AtlantaUtilities_ShouldUseQuickRoleSwitch");
static_assert(offsetof(AtlantaUtilities_ShouldUseQuickRoleSwitch, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_ShouldUseQuickRoleSwitch::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.Authority_NotifyKill
// 0x0008 (0x0008 - 0x0000)
struct EvilWithinComponent_Authority_NotifyKill final
{
public:
	class ADBDPlayer*                             killedPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_Authority_NotifyKill) == 0x000008, "Wrong alignment on EvilWithinComponent_Authority_NotifyKill");
static_assert(sizeof(EvilWithinComponent_Authority_NotifyKill) == 0x000008, "Wrong size on EvilWithinComponent_Authority_NotifyKill");
static_assert(offsetof(EvilWithinComponent_Authority_NotifyKill, killedPlayer) == 0x000000, "Member 'EvilWithinComponent_Authority_NotifyKill::killedPlayer' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.Authority_OnPlayerDisconnect
// 0x0008 (0x0008 - 0x0000)
struct EvilWithinComponent_Authority_OnPlayerDisconnect final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_Authority_OnPlayerDisconnect) == 0x000008, "Wrong alignment on EvilWithinComponent_Authority_OnPlayerDisconnect");
static_assert(sizeof(EvilWithinComponent_Authority_OnPlayerDisconnect) == 0x000008, "Wrong size on EvilWithinComponent_Authority_OnPlayerDisconnect");
static_assert(offsetof(EvilWithinComponent_Authority_OnPlayerDisconnect, player) == 0x000000, "Member 'EvilWithinComponent_Authority_OnPlayerDisconnect::player' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.Authority_OnStalkPointsAdded
// 0x0004 (0x0004 - 0x0000)
struct EvilWithinComponent_Authority_OnStalkPointsAdded final
{
public:
	float                                         stalkPoints;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_Authority_OnStalkPointsAdded) == 0x000004, "Wrong alignment on EvilWithinComponent_Authority_OnStalkPointsAdded");
static_assert(sizeof(EvilWithinComponent_Authority_OnStalkPointsAdded) == 0x000004, "Wrong size on EvilWithinComponent_Authority_OnStalkPointsAdded");
static_assert(offsetof(EvilWithinComponent_Authority_OnStalkPointsAdded, stalkPoints) == 0x000000, "Member 'EvilWithinComponent_Authority_OnStalkPointsAdded::stalkPoints' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.OnRep_CurrentTier
// 0x0004 (0x0004 - 0x0000)
struct EvilWithinComponent_OnRep_CurrentTier final
{
public:
	int32                                         previousTier;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_OnRep_CurrentTier) == 0x000004, "Wrong alignment on EvilWithinComponent_OnRep_CurrentTier");
static_assert(sizeof(EvilWithinComponent_OnRep_CurrentTier) == 0x000004, "Wrong size on EvilWithinComponent_OnRep_CurrentTier");
static_assert(offsetof(EvilWithinComponent_OnRep_CurrentTier, previousTier) == 0x000000, "Member 'EvilWithinComponent_OnRep_CurrentTier::previousTier' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.CanBeStandingKilled
// 0x0010 (0x0010 - 0x0000)
struct EvilWithinComponent_CanBeStandingKilled final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EvilWithinComponent_CanBeStandingKilled) == 0x000008, "Wrong alignment on EvilWithinComponent_CanBeStandingKilled");
static_assert(sizeof(EvilWithinComponent_CanBeStandingKilled) == 0x000010, "Wrong size on EvilWithinComponent_CanBeStandingKilled");
static_assert(offsetof(EvilWithinComponent_CanBeStandingKilled, player) == 0x000000, "Member 'EvilWithinComponent_CanBeStandingKilled::player' has a wrong offset!");
static_assert(offsetof(EvilWithinComponent_CanBeStandingKilled, ReturnValue) == 0x000008, "Member 'EvilWithinComponent_CanBeStandingKilled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.CanStandKill
// 0x0010 (0x0010 - 0x0000)
struct EvilWithinComponent_CanStandKill final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EvilWithinComponent_CanStandKill) == 0x000008, "Wrong alignment on EvilWithinComponent_CanStandKill");
static_assert(sizeof(EvilWithinComponent_CanStandKill) == 0x000010, "Wrong size on EvilWithinComponent_CanStandKill");
static_assert(offsetof(EvilWithinComponent_CanStandKill, player) == 0x000000, "Member 'EvilWithinComponent_CanStandKill::player' has a wrong offset!");
static_assert(offsetof(EvilWithinComponent_CanStandKill, ReturnValue) == 0x000008, "Member 'EvilWithinComponent_CanStandKill::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.GetCurrentTier
// 0x0004 (0x0004 - 0x0000)
struct EvilWithinComponent_GetCurrentTier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_GetCurrentTier) == 0x000004, "Wrong alignment on EvilWithinComponent_GetCurrentTier");
static_assert(sizeof(EvilWithinComponent_GetCurrentTier) == 0x000004, "Wrong size on EvilWithinComponent_GetCurrentTier");
static_assert(offsetof(EvilWithinComponent_GetCurrentTier, ReturnValue) == 0x000000, "Member 'EvilWithinComponent_GetCurrentTier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.GetMaxTier
// 0x0004 (0x0004 - 0x0000)
struct EvilWithinComponent_GetMaxTier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_GetMaxTier) == 0x000004, "Wrong alignment on EvilWithinComponent_GetMaxTier");
static_assert(sizeof(EvilWithinComponent_GetMaxTier) == 0x000004, "Wrong size on EvilWithinComponent_GetMaxTier");
static_assert(offsetof(EvilWithinComponent_GetMaxTier, ReturnValue) == 0x000000, "Member 'EvilWithinComponent_GetMaxTier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.GetPercentStalkingPointsInCurrentTier
// 0x0004 (0x0004 - 0x0000)
struct EvilWithinComponent_GetPercentStalkingPointsInCurrentTier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_GetPercentStalkingPointsInCurrentTier) == 0x000004, "Wrong alignment on EvilWithinComponent_GetPercentStalkingPointsInCurrentTier");
static_assert(sizeof(EvilWithinComponent_GetPercentStalkingPointsInCurrentTier) == 0x000004, "Wrong size on EvilWithinComponent_GetPercentStalkingPointsInCurrentTier");
static_assert(offsetof(EvilWithinComponent_GetPercentStalkingPointsInCurrentTier, ReturnValue) == 0x000000, "Member 'EvilWithinComponent_GetPercentStalkingPointsInCurrentTier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.GetRequirementForTier
// 0x0008 (0x0008 - 0x0000)
struct EvilWithinComponent_GetRequirementForTier final
{
public:
	int32                                         tier;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_GetRequirementForTier) == 0x000004, "Wrong alignment on EvilWithinComponent_GetRequirementForTier");
static_assert(sizeof(EvilWithinComponent_GetRequirementForTier) == 0x000008, "Wrong size on EvilWithinComponent_GetRequirementForTier");
static_assert(offsetof(EvilWithinComponent_GetRequirementForTier, tier) == 0x000000, "Member 'EvilWithinComponent_GetRequirementForTier::tier' has a wrong offset!");
static_assert(offsetof(EvilWithinComponent_GetRequirementForTier, ReturnValue) == 0x000004, "Member 'EvilWithinComponent_GetRequirementForTier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.IsAtLastTier
// 0x0001 (0x0001 - 0x0000)
struct EvilWithinComponent_IsAtLastTier final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_IsAtLastTier) == 0x000001, "Wrong alignment on EvilWithinComponent_IsAtLastTier");
static_assert(sizeof(EvilWithinComponent_IsAtLastTier) == 0x000001, "Wrong size on EvilWithinComponent_IsAtLastTier");
static_assert(offsetof(EvilWithinComponent_IsAtLastTier, ReturnValue) == 0x000000, "Member 'EvilWithinComponent_IsAtLastTier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Tile.OnRep_Initialized
// 0x0001 (0x0001 - 0x0000)
struct Tile_OnRep_Initialized final
{
public:
	bool                                          oldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tile_OnRep_Initialized) == 0x000001, "Wrong alignment on Tile_OnRep_Initialized");
static_assert(sizeof(Tile_OnRep_Initialized) == 0x000001, "Wrong size on Tile_OnRep_Initialized");
static_assert(offsetof(Tile_OnRep_Initialized, oldValue) == 0x000000, "Member 'Tile_OnRep_Initialized::oldValue' has a wrong offset!");

// Function DeadByDaylight.Tile.OnSetSpawnObject
// 0x0010 (0x0010 - 0x0000)
struct Tile_OnSetSpawnObject final
{
public:
	class UTileSpawnPoint*                        tileSpawnPoint;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 spawnedObject;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tile_OnSetSpawnObject) == 0x000008, "Wrong alignment on Tile_OnSetSpawnObject");
static_assert(sizeof(Tile_OnSetSpawnObject) == 0x000010, "Wrong size on Tile_OnSetSpawnObject");
static_assert(offsetof(Tile_OnSetSpawnObject, tileSpawnPoint) == 0x000000, "Member 'Tile_OnSetSpawnObject::tileSpawnPoint' has a wrong offset!");
static_assert(offsetof(Tile_OnSetSpawnObject, spawnedObject) == 0x000008, "Member 'Tile_OnSetSpawnObject::spawnedObject' has a wrong offset!");

// Function DeadByDaylight.AudioFXComponent.Authority_Deafen
// 0x0004 (0x0004 - 0x0000)
struct AudioFXComponent_Authority_Deafen final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFXComponent_Authority_Deafen) == 0x000004, "Wrong alignment on AudioFXComponent_Authority_Deafen");
static_assert(sizeof(AudioFXComponent_Authority_Deafen) == 0x000004, "Wrong size on AudioFXComponent_Authority_Deafen");
static_assert(offsetof(AudioFXComponent_Authority_Deafen, duration) == 0x000000, "Member 'AudioFXComponent_Authority_Deafen::duration' has a wrong offset!");

// Function DeadByDaylight.AudioFXComponent.Multicast_Deafen
// 0x0004 (0x0004 - 0x0000)
struct AudioFXComponent_Multicast_Deafen final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFXComponent_Multicast_Deafen) == 0x000004, "Wrong alignment on AudioFXComponent_Multicast_Deafen");
static_assert(sizeof(AudioFXComponent_Multicast_Deafen) == 0x000004, "Wrong size on AudioFXComponent_Multicast_Deafen");
static_assert(offsetof(AudioFXComponent_Multicast_Deafen, duration) == 0x000000, "Member 'AudioFXComponent_Multicast_Deafen::duration' has a wrong offset!");

// Function DeadByDaylight.AudioFXComponent.OnLocallyObservedChanged
// 0x0001 (0x0001 - 0x0000)
struct AudioFXComponent_OnLocallyObservedChanged final
{
public:
	bool                                          locallyObserved;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFXComponent_OnLocallyObservedChanged) == 0x000001, "Wrong alignment on AudioFXComponent_OnLocallyObservedChanged");
static_assert(sizeof(AudioFXComponent_OnLocallyObservedChanged) == 0x000001, "Wrong size on AudioFXComponent_OnLocallyObservedChanged");
static_assert(offsetof(AudioFXComponent_OnLocallyObservedChanged, locallyObserved) == 0x000000, "Member 'AudioFXComponent_OnLocallyObservedChanged::locallyObserved' has a wrong offset!");

// Function DeadByDaylight.AudioFXComponent.SetAudioAmbientDetector
// 0x0008 (0x0008 - 0x0000)
struct AudioFXComponent_SetAudioAmbientDetector final
{
public:
	class UPrimitiveComponent*                    audioAmbientDetector;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFXComponent_SetAudioAmbientDetector) == 0x000008, "Wrong alignment on AudioFXComponent_SetAudioAmbientDetector");
static_assert(sizeof(AudioFXComponent_SetAudioAmbientDetector) == 0x000008, "Wrong size on AudioFXComponent_SetAudioAmbientDetector");
static_assert(offsetof(AudioFXComponent_SetAudioAmbientDetector, audioAmbientDetector) == 0x000000, "Member 'AudioFXComponent_SetAudioAmbientDetector::audioAmbientDetector' has a wrong offset!");

// Function DeadByDaylight.ExposerCirclingComponent.SetIsCircling
// 0x0001 (0x0001 - 0x0000)
struct ExposerCirclingComponent_SetIsCircling final
{
public:
	bool                                          circling;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExposerCirclingComponent_SetIsCircling) == 0x000001, "Wrong alignment on ExposerCirclingComponent_SetIsCircling");
static_assert(sizeof(ExposerCirclingComponent_SetIsCircling) == 0x000001, "Wrong size on ExposerCirclingComponent_SetIsCircling");
static_assert(offsetof(ExposerCirclingComponent_SetIsCircling, circling) == 0x000000, "Member 'ExposerCirclingComponent_SetIsCircling::circling' has a wrong offset!");

// Function DeadByDaylight.AuthoritativeMovementComponent.OnPawnDetectorOverlapEnter
// 0x00B0 (0x00B0 - 0x0000)
struct AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter) == 0x000008, "Wrong alignment on AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter");
static_assert(sizeof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter) == 0x0000B0, "Wrong size on AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter, HitComponent) == 0x000000, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter::HitComponent' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter, OtherActor) == 0x000008, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter::OtherActor' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter, OtherComp) == 0x000010, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter::OtherComp' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter, OtherBodyIndex) == 0x000018, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter, bFromSweep) == 0x00001C, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter, SweepResult) == 0x000020, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter::SweepResult' has a wrong offset!");

// Function DeadByDaylight.AuthoritativeMovementComponent.OnPawnDetectorOverlapExit
// 0x0020 (0x0020 - 0x0000)
struct AuthoritativeMovementComponent_OnPawnDetectorOverlapExit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AuthoritativeMovementComponent_OnPawnDetectorOverlapExit) == 0x000008, "Wrong alignment on AuthoritativeMovementComponent_OnPawnDetectorOverlapExit");
static_assert(sizeof(AuthoritativeMovementComponent_OnPawnDetectorOverlapExit) == 0x000020, "Wrong size on AuthoritativeMovementComponent_OnPawnDetectorOverlapExit");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapExit, HitComponent) == 0x000000, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapExit::HitComponent' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapExit, OtherActor) == 0x000008, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapExit::OtherActor' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapExit, OtherComp) == 0x000010, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapExit::OtherComp' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapExit, OtherBodyIndex) == 0x000018, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapExit::OtherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.AuthoritativeMovementComponent.SetPawnDetector
// 0x0008 (0x0008 - 0x0000)
struct AuthoritativeMovementComponent_SetPawnDetector final
{
public:
	class UCapsuleComponent*                      pawnDetector;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AuthoritativeMovementComponent_SetPawnDetector) == 0x000008, "Wrong alignment on AuthoritativeMovementComponent_SetPawnDetector");
static_assert(sizeof(AuthoritativeMovementComponent_SetPawnDetector) == 0x000008, "Wrong size on AuthoritativeMovementComponent_SetPawnDetector");
static_assert(offsetof(AuthoritativeMovementComponent_SetPawnDetector, pawnDetector) == 0x000000, "Member 'AuthoritativeMovementComponent_SetPawnDetector::pawnDetector' has a wrong offset!");

// Function DeadByDaylight.AutomaticLeanComponent.Server_SetLeanState
// 0x0001 (0x0001 - 0x0000)
struct AutomaticLeanComponent_Server_SetLeanState final
{
public:
	ELeanState                                    leanState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticLeanComponent_Server_SetLeanState) == 0x000001, "Wrong alignment on AutomaticLeanComponent_Server_SetLeanState");
static_assert(sizeof(AutomaticLeanComponent_Server_SetLeanState) == 0x000001, "Wrong size on AutomaticLeanComponent_Server_SetLeanState");
static_assert(offsetof(AutomaticLeanComponent_Server_SetLeanState, leanState) == 0x000000, "Member 'AutomaticLeanComponent_Server_SetLeanState::leanState' has a wrong offset!");

// Function DeadByDaylight.AutomaticLeanComponent.CanInitiateLean
// 0x0001 (0x0001 - 0x0000)
struct AutomaticLeanComponent_CanInitiateLean final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticLeanComponent_CanInitiateLean) == 0x000001, "Wrong alignment on AutomaticLeanComponent_CanInitiateLean");
static_assert(sizeof(AutomaticLeanComponent_CanInitiateLean) == 0x000001, "Wrong size on AutomaticLeanComponent_CanInitiateLean");
static_assert(offsetof(AutomaticLeanComponent_CanInitiateLean, ReturnValue) == 0x000000, "Member 'AutomaticLeanComponent_CanInitiateLean::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AutomaticLeanComponent.GetAvailableDistanceInFrontOfCamera
// 0x0004 (0x0004 - 0x0000)
struct AutomaticLeanComponent_GetAvailableDistanceInFrontOfCamera final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticLeanComponent_GetAvailableDistanceInFrontOfCamera) == 0x000004, "Wrong alignment on AutomaticLeanComponent_GetAvailableDistanceInFrontOfCamera");
static_assert(sizeof(AutomaticLeanComponent_GetAvailableDistanceInFrontOfCamera) == 0x000004, "Wrong size on AutomaticLeanComponent_GetAvailableDistanceInFrontOfCamera");
static_assert(offsetof(AutomaticLeanComponent_GetAvailableDistanceInFrontOfCamera, ReturnValue) == 0x000000, "Member 'AutomaticLeanComponent_GetAvailableDistanceInFrontOfCamera::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AutomaticLeanComponent.GetLeanState
// 0x0001 (0x0001 - 0x0000)
struct AutomaticLeanComponent_GetLeanState final
{
public:
	ELeanState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticLeanComponent_GetLeanState) == 0x000001, "Wrong alignment on AutomaticLeanComponent_GetLeanState");
static_assert(sizeof(AutomaticLeanComponent_GetLeanState) == 0x000001, "Wrong size on AutomaticLeanComponent_GetLeanState");
static_assert(offsetof(AutomaticLeanComponent_GetLeanState, ReturnValue) == 0x000000, "Member 'AutomaticLeanComponent_GetLeanState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AutomaticLeanComponent.GetPotentialLeanState
// 0x0001 (0x0001 - 0x0000)
struct AutomaticLeanComponent_GetPotentialLeanState final
{
public:
	ELeanState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticLeanComponent_GetPotentialLeanState) == 0x000001, "Wrong alignment on AutomaticLeanComponent_GetPotentialLeanState");
static_assert(sizeof(AutomaticLeanComponent_GetPotentialLeanState) == 0x000001, "Wrong size on AutomaticLeanComponent_GetPotentialLeanState");
static_assert(offsetof(AutomaticLeanComponent_GetPotentialLeanState, ReturnValue) == 0x000000, "Member 'AutomaticLeanComponent_GetPotentialLeanState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AutomaticLeanComponent.IsLeaning
// 0x0001 (0x0001 - 0x0000)
struct AutomaticLeanComponent_IsLeaning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticLeanComponent_IsLeaning) == 0x000001, "Wrong alignment on AutomaticLeanComponent_IsLeaning");
static_assert(sizeof(AutomaticLeanComponent_IsLeaning) == 0x000001, "Wrong size on AutomaticLeanComponent_IsLeaning");
static_assert(offsetof(AutomaticLeanComponent_IsLeaning, ReturnValue) == 0x000000, "Member 'AutomaticLeanComponent_IsLeaning::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BaseEscapeThroughHatch.GetHatch
// 0x0008 (0x0008 - 0x0000)
struct BaseEscapeThroughHatch_GetHatch final
{
public:
	class AHatch*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseEscapeThroughHatch_GetHatch) == 0x000008, "Wrong alignment on BaseEscapeThroughHatch_GetHatch");
static_assert(sizeof(BaseEscapeThroughHatch_GetHatch) == 0x000008, "Wrong size on BaseEscapeThroughHatch_GetHatch");
static_assert(offsetof(BaseEscapeThroughHatch_GetHatch, ReturnValue) == 0x000000, "Member 'BaseEscapeThroughHatch_GetHatch::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGPartySlotsWidget.HandleBotEditButtonClickEvent
// 0x0004 (0x0004 - 0x0000)
struct UMGPartySlotsWidget_HandleBotEditButtonClickEvent final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGPartySlotsWidget_HandleBotEditButtonClickEvent) == 0x000004, "Wrong alignment on UMGPartySlotsWidget_HandleBotEditButtonClickEvent");
static_assert(sizeof(UMGPartySlotsWidget_HandleBotEditButtonClickEvent) == 0x000004, "Wrong size on UMGPartySlotsWidget_HandleBotEditButtonClickEvent");
static_assert(offsetof(UMGPartySlotsWidget_HandleBotEditButtonClickEvent, index) == 0x000000, "Member 'UMGPartySlotsWidget_HandleBotEditButtonClickEvent::index' has a wrong offset!");

// Function DeadByDaylight.UMGPartySlotsWidget.HandleKickPlayerButtonClickEvent
// 0x0010 (0x0010 - 0x0000)
struct UMGPartySlotsWidget_HandleKickPlayerButtonClickEvent final
{
public:
	class FString                                 friendKrakenId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGPartySlotsWidget_HandleKickPlayerButtonClickEvent) == 0x000008, "Wrong alignment on UMGPartySlotsWidget_HandleKickPlayerButtonClickEvent");
static_assert(sizeof(UMGPartySlotsWidget_HandleKickPlayerButtonClickEvent) == 0x000010, "Wrong size on UMGPartySlotsWidget_HandleKickPlayerButtonClickEvent");
static_assert(offsetof(UMGPartySlotsWidget_HandleKickPlayerButtonClickEvent, friendKrakenId) == 0x000000, "Member 'UMGPartySlotsWidget_HandleKickPlayerButtonClickEvent::friendKrakenId' has a wrong offset!");

// Function DeadByDaylight.UMGPartySlotsWidget.SetWidgetState
// 0x0008 (0x0008 - 0x0000)
struct UMGPartySlotsWidget_SetWidgetState final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyPlayerSlotWidgetState                   state;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGPartySlotsWidget_SetWidgetState) == 0x000004, "Wrong alignment on UMGPartySlotsWidget_SetWidgetState");
static_assert(sizeof(UMGPartySlotsWidget_SetWidgetState) == 0x000008, "Wrong size on UMGPartySlotsWidget_SetWidgetState");
static_assert(offsetof(UMGPartySlotsWidget_SetWidgetState, index) == 0x000000, "Member 'UMGPartySlotsWidget_SetWidgetState::index' has a wrong offset!");
static_assert(offsetof(UMGPartySlotsWidget_SetWidgetState, state) == 0x000004, "Member 'UMGPartySlotsWidget_SetWidgetState::state' has a wrong offset!");

// Function DeadByDaylight.UMGPartySlotsWidget.SwapWidgets
// 0x0008 (0x0008 - 0x0000)
struct UMGPartySlotsWidget_SwapWidgets final
{
public:
	int32                                         first;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         second;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGPartySlotsWidget_SwapWidgets) == 0x000004, "Wrong alignment on UMGPartySlotsWidget_SwapWidgets");
static_assert(sizeof(UMGPartySlotsWidget_SwapWidgets) == 0x000008, "Wrong size on UMGPartySlotsWidget_SwapWidgets");
static_assert(offsetof(UMGPartySlotsWidget_SwapWidgets, first) == 0x000000, "Member 'UMGPartySlotsWidget_SwapWidgets::first' has a wrong offset!");
static_assert(offsetof(UMGPartySlotsWidget_SwapWidgets, second) == 0x000004, "Member 'UMGPartySlotsWidget_SwapWidgets::second' has a wrong offset!");

// Function DeadByDaylight.UMGPlayersStatusWidget.OnPlayerStatusClicked
// 0x0008 (0x0008 - 0x0000)
struct UMGPlayersStatusWidget_OnPlayerStatusClicked final
{
public:
	class UUMGPlayerStatusIcon*                   playerStatusIcon;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGPlayersStatusWidget_OnPlayerStatusClicked) == 0x000008, "Wrong alignment on UMGPlayersStatusWidget_OnPlayerStatusClicked");
static_assert(sizeof(UMGPlayersStatusWidget_OnPlayerStatusClicked) == 0x000008, "Wrong size on UMGPlayersStatusWidget_OnPlayerStatusClicked");
static_assert(offsetof(UMGPlayersStatusWidget_OnPlayerStatusClicked, playerStatusIcon) == 0x000000, "Member 'UMGPlayersStatusWidget_OnPlayerStatusClicked::playerStatusIcon' has a wrong offset!");

// Function DeadByDaylight.BaseTrap.SetIsTrapSet
// 0x0001 (0x0001 - 0x0000)
struct BaseTrap_SetIsTrapSet final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTrap_SetIsTrapSet) == 0x000001, "Wrong alignment on BaseTrap_SetIsTrapSet");
static_assert(sizeof(BaseTrap_SetIsTrapSet) == 0x000001, "Wrong size on BaseTrap_SetIsTrapSet");
static_assert(offsetof(BaseTrap_SetIsTrapSet, value) == 0x000000, "Member 'BaseTrap_SetIsTrapSet::value' has a wrong offset!");

// Function DeadByDaylight.BaseTrap.IsTrapSet
// 0x0001 (0x0001 - 0x0000)
struct BaseTrap_IsTrapSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTrap_IsTrapSet) == 0x000001, "Wrong alignment on BaseTrap_IsTrapSet");
static_assert(sizeof(BaseTrap_IsTrapSet) == 0x000001, "Wrong size on BaseTrap_IsTrapSet");
static_assert(offsetof(BaseTrap_IsTrapSet, ReturnValue) == 0x000000, "Member 'BaseTrap_IsTrapSet::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BearTrapOutlineUpdateStrategy.SetOwningBearTrapMapActorComponent
// 0x0008 (0x0008 - 0x0000)
struct BearTrapOutlineUpdateStrategy_SetOwningBearTrapMapActorComponent final
{
public:
	class UMapActorComponent*                     mapActorComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BearTrapOutlineUpdateStrategy_SetOwningBearTrapMapActorComponent) == 0x000008, "Wrong alignment on BearTrapOutlineUpdateStrategy_SetOwningBearTrapMapActorComponent");
static_assert(sizeof(BearTrapOutlineUpdateStrategy_SetOwningBearTrapMapActorComponent) == 0x000008, "Wrong size on BearTrapOutlineUpdateStrategy_SetOwningBearTrapMapActorComponent");
static_assert(offsetof(BearTrapOutlineUpdateStrategy_SetOwningBearTrapMapActorComponent, mapActorComponent) == 0x000000, "Member 'BearTrapOutlineUpdateStrategy_SetOwningBearTrapMapActorComponent::mapActorComponent' has a wrong offset!");

// Function DeadByDaylight.UMGBaseCurrencyStorefrontWidget.BroadcastOnAuricCellButtonClicked
// 0x0004 (0x0004 - 0x0000)
struct UMGBaseCurrencyStorefrontWidget_BroadcastOnAuricCellButtonClicked final
{
public:
	int32                                         cellIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBaseCurrencyStorefrontWidget_BroadcastOnAuricCellButtonClicked) == 0x000004, "Wrong alignment on UMGBaseCurrencyStorefrontWidget_BroadcastOnAuricCellButtonClicked");
static_assert(sizeof(UMGBaseCurrencyStorefrontWidget_BroadcastOnAuricCellButtonClicked) == 0x000004, "Wrong size on UMGBaseCurrencyStorefrontWidget_BroadcastOnAuricCellButtonClicked");
static_assert(offsetof(UMGBaseCurrencyStorefrontWidget_BroadcastOnAuricCellButtonClicked, cellIndex) == 0x000000, "Member 'UMGBaseCurrencyStorefrontWidget_BroadcastOnAuricCellButtonClicked::cellIndex' has a wrong offset!");

// Function DeadByDaylight.UMGAtlCurrencyStorefrontWidget.UpdateFirstPurchaseForAllAuricCellsEndInUI
// 0x0010 (0x0010 - 0x0000)
struct UMGAtlCurrencyStorefrontWidget_UpdateFirstPurchaseForAllAuricCellsEndInUI final
{
public:
	class FString                                 endInText;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlCurrencyStorefrontWidget_UpdateFirstPurchaseForAllAuricCellsEndInUI) == 0x000008, "Wrong alignment on UMGAtlCurrencyStorefrontWidget_UpdateFirstPurchaseForAllAuricCellsEndInUI");
static_assert(sizeof(UMGAtlCurrencyStorefrontWidget_UpdateFirstPurchaseForAllAuricCellsEndInUI) == 0x000010, "Wrong size on UMGAtlCurrencyStorefrontWidget_UpdateFirstPurchaseForAllAuricCellsEndInUI");
static_assert(offsetof(UMGAtlCurrencyStorefrontWidget_UpdateFirstPurchaseForAllAuricCellsEndInUI, endInText) == 0x000000, "Member 'UMGAtlCurrencyStorefrontWidget_UpdateFirstPurchaseForAllAuricCellsEndInUI::endInText' has a wrong offset!");

// Function DeadByDaylight.BlindingFXComponent.SetPostProcess
// 0x0008 (0x0008 - 0x0000)
struct BlindingFXComponent_SetPostProcess final
{
public:
	class UPostProcessComponent*                  value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlindingFXComponent_SetPostProcess) == 0x000008, "Wrong alignment on BlindingFXComponent_SetPostProcess");
static_assert(sizeof(BlindingFXComponent_SetPostProcess) == 0x000008, "Wrong size on BlindingFXComponent_SetPostProcess");
static_assert(offsetof(BlindingFXComponent_SetPostProcess, value) == 0x000000, "Member 'BlindingFXComponent_SetPostProcess::value' has a wrong offset!");

// Function DeadByDaylight.BlindingFXComponent.SetPostProcessMaterial
// 0x0008 (0x0008 - 0x0000)
struct BlindingFXComponent_SetPostProcessMaterial final
{
public:
	class UMaterialInstanceDynamic*               value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlindingFXComponent_SetPostProcessMaterial) == 0x000008, "Wrong alignment on BlindingFXComponent_SetPostProcessMaterial");
static_assert(sizeof(BlindingFXComponent_SetPostProcessMaterial) == 0x000008, "Wrong size on BlindingFXComponent_SetPostProcessMaterial");
static_assert(offsetof(BlindingFXComponent_SetPostProcessMaterial, value) == 0x000000, "Member 'BlindingFXComponent_SetPostProcessMaterial::value' has a wrong offset!");

// Function DeadByDaylight.BlockableComponent.Authority_AddBlock
// 0x0058 (0x0058 - 0x0000)
struct BlockableComponent_Authority_AddBlock final
{
public:
	const class UObject*                          source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class ADBDPlayer*>                       affectedPlayers;                                   // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlockableComponent_Authority_AddBlock) == 0x000008, "Wrong alignment on BlockableComponent_Authority_AddBlock");
static_assert(sizeof(BlockableComponent_Authority_AddBlock) == 0x000058, "Wrong size on BlockableComponent_Authority_AddBlock");
static_assert(offsetof(BlockableComponent_Authority_AddBlock, source) == 0x000000, "Member 'BlockableComponent_Authority_AddBlock::source' has a wrong offset!");
static_assert(offsetof(BlockableComponent_Authority_AddBlock, affectedPlayers) == 0x000008, "Member 'BlockableComponent_Authority_AddBlock::affectedPlayers' has a wrong offset!");

// Function DeadByDaylight.BlockableComponent.Authority_AddTimedBlock
// 0x0060 (0x0060 - 0x0000)
struct BlockableComponent_Authority_AddTimedBlock final
{
public:
	const class UObject*                          source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class ADBDPlayer*>                       affectedPlayers;                                   // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlockableComponent_Authority_AddTimedBlock) == 0x000008, "Wrong alignment on BlockableComponent_Authority_AddTimedBlock");
static_assert(sizeof(BlockableComponent_Authority_AddTimedBlock) == 0x000060, "Wrong size on BlockableComponent_Authority_AddTimedBlock");
static_assert(offsetof(BlockableComponent_Authority_AddTimedBlock, source) == 0x000000, "Member 'BlockableComponent_Authority_AddTimedBlock::source' has a wrong offset!");
static_assert(offsetof(BlockableComponent_Authority_AddTimedBlock, duration) == 0x000008, "Member 'BlockableComponent_Authority_AddTimedBlock::duration' has a wrong offset!");
static_assert(offsetof(BlockableComponent_Authority_AddTimedBlock, affectedPlayers) == 0x000010, "Member 'BlockableComponent_Authority_AddTimedBlock::affectedPlayers' has a wrong offset!");

// Function DeadByDaylight.BlockableComponent.Authority_RemoveBlock
// 0x0008 (0x0008 - 0x0000)
struct BlockableComponent_Authority_RemoveBlock final
{
public:
	const class UObject*                          source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlockableComponent_Authority_RemoveBlock) == 0x000008, "Wrong alignment on BlockableComponent_Authority_RemoveBlock");
static_assert(sizeof(BlockableComponent_Authority_RemoveBlock) == 0x000008, "Wrong size on BlockableComponent_Authority_RemoveBlock");
static_assert(offsetof(BlockableComponent_Authority_RemoveBlock, source) == 0x000000, "Member 'BlockableComponent_Authority_RemoveBlock::source' has a wrong offset!");

// Function DeadByDaylight.WakerObject.BindToCamperDreamStateChanged
// 0x0008 (0x0008 - 0x0000)
struct WakerObject_BindToCamperDreamStateChanged final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_BindToCamperDreamStateChanged) == 0x000008, "Wrong alignment on WakerObject_BindToCamperDreamStateChanged");
static_assert(sizeof(WakerObject_BindToCamperDreamStateChanged) == 0x000008, "Wrong size on WakerObject_BindToCamperDreamStateChanged");
static_assert(offsetof(WakerObject_BindToCamperDreamStateChanged, player) == 0x000000, "Member 'WakerObject_BindToCamperDreamStateChanged::player' has a wrong offset!");

// Function DeadByDaylight.WakerObject.OnAnyCamperDreamStateChanged
// 0x0002 (0x0002 - 0x0000)
struct WakerObject_OnAnyCamperDreamStateChanged final
{
public:
	bool                                          isInDreamworld;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          locallyObservedChanged;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_OnAnyCamperDreamStateChanged) == 0x000001, "Wrong alignment on WakerObject_OnAnyCamperDreamStateChanged");
static_assert(sizeof(WakerObject_OnAnyCamperDreamStateChanged) == 0x000002, "Wrong size on WakerObject_OnAnyCamperDreamStateChanged");
static_assert(offsetof(WakerObject_OnAnyCamperDreamStateChanged, isInDreamworld) == 0x000000, "Member 'WakerObject_OnAnyCamperDreamStateChanged::isInDreamworld' has a wrong offset!");
static_assert(offsetof(WakerObject_OnAnyCamperDreamStateChanged, locallyObservedChanged) == 0x000001, "Member 'WakerObject_OnAnyCamperDreamStateChanged::locallyObservedChanged' has a wrong offset!");

// Function DeadByDaylight.WakerObject.OnLinkedCamperDreamStateChanged
// 0x0002 (0x0002 - 0x0000)
struct WakerObject_OnLinkedCamperDreamStateChanged final
{
public:
	bool                                          isInDreamworld;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          locallyObservedChanged;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_OnLinkedCamperDreamStateChanged) == 0x000001, "Wrong alignment on WakerObject_OnLinkedCamperDreamStateChanged");
static_assert(sizeof(WakerObject_OnLinkedCamperDreamStateChanged) == 0x000002, "Wrong size on WakerObject_OnLinkedCamperDreamStateChanged");
static_assert(offsetof(WakerObject_OnLinkedCamperDreamStateChanged, isInDreamworld) == 0x000000, "Member 'WakerObject_OnLinkedCamperDreamStateChanged::isInDreamworld' has a wrong offset!");
static_assert(offsetof(WakerObject_OnLinkedCamperDreamStateChanged, locallyObservedChanged) == 0x000001, "Member 'WakerObject_OnLinkedCamperDreamStateChanged::locallyObservedChanged' has a wrong offset!");

// Function DeadByDaylight.WakerObject.OnNewLinkedCamper
// 0x0008 (0x0008 - 0x0000)
struct WakerObject_OnNewLinkedCamper final
{
public:
	class UCamperDreamworldComponent*             dreamworldComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_OnNewLinkedCamper) == 0x000008, "Wrong alignment on WakerObject_OnNewLinkedCamper");
static_assert(sizeof(WakerObject_OnNewLinkedCamper) == 0x000008, "Wrong size on WakerObject_OnNewLinkedCamper");
static_assert(offsetof(WakerObject_OnNewLinkedCamper, dreamworldComponent) == 0x000000, "Member 'WakerObject_OnNewLinkedCamper::dreamworldComponent' has a wrong offset!");

// Function DeadByDaylight.WakerObject.OnRep_LinkedCamperChanged
// 0x0008 (0x0008 - 0x0000)
struct WakerObject_OnRep_LinkedCamperChanged final
{
public:
	class UCamperDreamworldComponent*             previous;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_OnRep_LinkedCamperChanged) == 0x000008, "Wrong alignment on WakerObject_OnRep_LinkedCamperChanged");
static_assert(sizeof(WakerObject_OnRep_LinkedCamperChanged) == 0x000008, "Wrong size on WakerObject_OnRep_LinkedCamperChanged");
static_assert(offsetof(WakerObject_OnRep_LinkedCamperChanged, previous) == 0x000000, "Member 'WakerObject_OnRep_LinkedCamperChanged::previous' has a wrong offset!");

// Function DeadByDaylight.WakerObject.SetChargeComplete
// 0x0001 (0x0001 - 0x0000)
struct WakerObject_SetChargeComplete final
{
public:
	bool                                          complete;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_SetChargeComplete) == 0x000001, "Wrong alignment on WakerObject_SetChargeComplete");
static_assert(sizeof(WakerObject_SetChargeComplete) == 0x000001, "Wrong size on WakerObject_SetChargeComplete");
static_assert(offsetof(WakerObject_SetChargeComplete, complete) == 0x000000, "Member 'WakerObject_SetChargeComplete::complete' has a wrong offset!");

// Function DeadByDaylight.WakerObject.CanWakeUpCamper
// 0x0010 (0x0010 - 0x0000)
struct WakerObject_CanWakeUpCamper final
{
public:
	const class ADBDPlayer*                       camper;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WakerObject_CanWakeUpCamper) == 0x000008, "Wrong alignment on WakerObject_CanWakeUpCamper");
static_assert(sizeof(WakerObject_CanWakeUpCamper) == 0x000010, "Wrong size on WakerObject_CanWakeUpCamper");
static_assert(offsetof(WakerObject_CanWakeUpCamper, camper) == 0x000000, "Member 'WakerObject_CanWakeUpCamper::camper' has a wrong offset!");
static_assert(offsetof(WakerObject_CanWakeUpCamper, ReturnValue) == 0x000008, "Member 'WakerObject_CanWakeUpCamper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.WakerObject.GetChargeComplete
// 0x0001 (0x0001 - 0x0000)
struct WakerObject_GetChargeComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_GetChargeComplete) == 0x000001, "Wrong alignment on WakerObject_GetChargeComplete");
static_assert(sizeof(WakerObject_GetChargeComplete) == 0x000001, "Wrong size on WakerObject_GetChargeComplete");
static_assert(offsetof(WakerObject_GetChargeComplete, ReturnValue) == 0x000000, "Member 'WakerObject_GetChargeComplete::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.WakerObject.GetInteractionPercentComplete
// 0x0004 (0x0004 - 0x0000)
struct WakerObject_GetInteractionPercentComplete final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_GetInteractionPercentComplete) == 0x000004, "Wrong alignment on WakerObject_GetInteractionPercentComplete");
static_assert(sizeof(WakerObject_GetInteractionPercentComplete) == 0x000004, "Wrong size on WakerObject_GetInteractionPercentComplete");
static_assert(offsetof(WakerObject_GetInteractionPercentComplete, ReturnValue) == 0x000000, "Member 'WakerObject_GetInteractionPercentComplete::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.WakerObject.GetInteractorPrimitiveComponent
// 0x0008 (0x0008 - 0x0000)
struct WakerObject_GetInteractorPrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_GetInteractorPrimitiveComponent) == 0x000008, "Wrong alignment on WakerObject_GetInteractorPrimitiveComponent");
static_assert(sizeof(WakerObject_GetInteractorPrimitiveComponent) == 0x000008, "Wrong size on WakerObject_GetInteractorPrimitiveComponent");
static_assert(offsetof(WakerObject_GetInteractorPrimitiveComponent, ReturnValue) == 0x000000, "Member 'WakerObject_GetInteractorPrimitiveComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.WakerObject.GetIsInteracting
// 0x0001 (0x0001 - 0x0000)
struct WakerObject_GetIsInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_GetIsInteracting) == 0x000001, "Wrong alignment on WakerObject_GetIsInteracting");
static_assert(sizeof(WakerObject_GetIsInteracting) == 0x000001, "Wrong size on WakerObject_GetIsInteracting");
static_assert(offsetof(WakerObject_GetIsInteracting, ReturnValue) == 0x000000, "Member 'WakerObject_GetIsInteracting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.WakerObject.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct WakerObject_GetMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_GetMesh) == 0x000008, "Wrong alignment on WakerObject_GetMesh");
static_assert(sizeof(WakerObject_GetMesh) == 0x000008, "Wrong size on WakerObject_GetMesh");
static_assert(offsetof(WakerObject_GetMesh, ReturnValue) == 0x000000, "Member 'WakerObject_GetMesh::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.WakerObject.HasLinkedCamper
// 0x0001 (0x0001 - 0x0000)
struct WakerObject_HasLinkedCamper final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_HasLinkedCamper) == 0x000001, "Wrong alignment on WakerObject_HasLinkedCamper");
static_assert(sizeof(WakerObject_HasLinkedCamper) == 0x000001, "Wrong size on WakerObject_HasLinkedCamper");
static_assert(offsetof(WakerObject_HasLinkedCamper, ReturnValue) == 0x000000, "Member 'WakerObject_HasLinkedCamper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.WakerObject.IsLinkedToCamper
// 0x0010 (0x0010 - 0x0000)
struct WakerObject_IsLinkedToCamper final
{
public:
	const class ADBDPlayer*                       camper;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WakerObject_IsLinkedToCamper) == 0x000008, "Wrong alignment on WakerObject_IsLinkedToCamper");
static_assert(sizeof(WakerObject_IsLinkedToCamper) == 0x000010, "Wrong size on WakerObject_IsLinkedToCamper");
static_assert(offsetof(WakerObject_IsLinkedToCamper, camper) == 0x000000, "Member 'WakerObject_IsLinkedToCamper::camper' has a wrong offset!");
static_assert(offsetof(WakerObject_IsLinkedToCamper, ReturnValue) == 0x000008, "Member 'WakerObject_IsLinkedToCamper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDiceRoller.CalculateOverTimeRollResult
// 0x0020 (0x0020 - 0x0000)
struct DBDDiceRoller_CalculateOverTimeRollResult final
{
public:
	const class AActor*                           RollingActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseProbability;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpectedTime;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiplicativeModifier;                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveModifier;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDDiceRoller_CalculateOverTimeRollResult) == 0x000008, "Wrong alignment on DBDDiceRoller_CalculateOverTimeRollResult");
static_assert(sizeof(DBDDiceRoller_CalculateOverTimeRollResult) == 0x000020, "Wrong size on DBDDiceRoller_CalculateOverTimeRollResult");
static_assert(offsetof(DBDDiceRoller_CalculateOverTimeRollResult, RollingActor) == 0x000000, "Member 'DBDDiceRoller_CalculateOverTimeRollResult::RollingActor' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateOverTimeRollResult, BaseProbability) == 0x000008, "Member 'DBDDiceRoller_CalculateOverTimeRollResult::BaseProbability' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateOverTimeRollResult, DeltaTime) == 0x00000C, "Member 'DBDDiceRoller_CalculateOverTimeRollResult::DeltaTime' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateOverTimeRollResult, ExpectedTime) == 0x000010, "Member 'DBDDiceRoller_CalculateOverTimeRollResult::ExpectedTime' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateOverTimeRollResult, MultiplicativeModifier) == 0x000014, "Member 'DBDDiceRoller_CalculateOverTimeRollResult::MultiplicativeModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateOverTimeRollResult, AdditiveModifier) == 0x000018, "Member 'DBDDiceRoller_CalculateOverTimeRollResult::AdditiveModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateOverTimeRollResult, ReturnValue) == 0x00001C, "Member 'DBDDiceRoller_CalculateOverTimeRollResult::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDiceRoller.CalculateRollResult
// 0x0018 (0x0018 - 0x0000)
struct DBDDiceRoller_CalculateRollResult final
{
public:
	const class AActor*                           RollingActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseProbability;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiplicativeModifier;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveModifier;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDDiceRoller_CalculateRollResult) == 0x000008, "Wrong alignment on DBDDiceRoller_CalculateRollResult");
static_assert(sizeof(DBDDiceRoller_CalculateRollResult) == 0x000018, "Wrong size on DBDDiceRoller_CalculateRollResult");
static_assert(offsetof(DBDDiceRoller_CalculateRollResult, RollingActor) == 0x000000, "Member 'DBDDiceRoller_CalculateRollResult::RollingActor' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateRollResult, BaseProbability) == 0x000008, "Member 'DBDDiceRoller_CalculateRollResult::BaseProbability' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateRollResult, MultiplicativeModifier) == 0x00000C, "Member 'DBDDiceRoller_CalculateRollResult::MultiplicativeModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateRollResult, AdditiveModifier) == 0x000010, "Member 'DBDDiceRoller_CalculateRollResult::AdditiveModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateRollResult, ReturnValue) == 0x000014, "Member 'DBDDiceRoller_CalculateRollResult::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDiceRoller.CalculateTickedRollResult
// 0x0020 (0x0020 - 0x0000)
struct DBDDiceRoller_CalculateTickedRollResult final
{
public:
	const class AActor*                           RollingActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseProbability;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ticks;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiplicativeModifier;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveModifier;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDDiceRoller_CalculateTickedRollResult) == 0x000008, "Wrong alignment on DBDDiceRoller_CalculateTickedRollResult");
static_assert(sizeof(DBDDiceRoller_CalculateTickedRollResult) == 0x000020, "Wrong size on DBDDiceRoller_CalculateTickedRollResult");
static_assert(offsetof(DBDDiceRoller_CalculateTickedRollResult, RollingActor) == 0x000000, "Member 'DBDDiceRoller_CalculateTickedRollResult::RollingActor' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateTickedRollResult, BaseProbability) == 0x000008, "Member 'DBDDiceRoller_CalculateTickedRollResult::BaseProbability' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateTickedRollResult, ticks) == 0x00000C, "Member 'DBDDiceRoller_CalculateTickedRollResult::ticks' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateTickedRollResult, MultiplicativeModifier) == 0x000010, "Member 'DBDDiceRoller_CalculateTickedRollResult::MultiplicativeModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateTickedRollResult, AdditiveModifier) == 0x000014, "Member 'DBDDiceRoller_CalculateTickedRollResult::AdditiveModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateTickedRollResult, ReturnValue) == 0x000018, "Member 'DBDDiceRoller_CalculateTickedRollResult::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDiceRoller.GetInteractionRollSuccessPercentageByDiceRollType
// 0x0018 (0x0018 - 0x0000)
struct DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType final
{
public:
	const class UInteractionDefinition*           interaction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       RollingPlayer;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDiceRollType                                 DiceRollType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType) == 0x000008, "Wrong alignment on DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType");
static_assert(sizeof(DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType) == 0x000018, "Wrong size on DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType");
static_assert(offsetof(DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType, interaction) == 0x000000, "Member 'DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType::interaction' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType, RollingPlayer) == 0x000008, "Member 'DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType::RollingPlayer' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType, DiceRollType) == 0x000010, "Member 'DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType::DiceRollType' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType, ReturnValue) == 0x000014, "Member 'DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDiceRoller.GetRollResultByDiceRollType
// 0x0010 (0x0010 - 0x0000)
struct DBDDiceRoller_GetRollResultByDiceRollType final
{
public:
	const class ADBDPlayer*                       RollingPlayer;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDiceRollType                                 DiceRollType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDDiceRoller_GetRollResultByDiceRollType) == 0x000008, "Wrong alignment on DBDDiceRoller_GetRollResultByDiceRollType");
static_assert(sizeof(DBDDiceRoller_GetRollResultByDiceRollType) == 0x000010, "Wrong size on DBDDiceRoller_GetRollResultByDiceRollType");
static_assert(offsetof(DBDDiceRoller_GetRollResultByDiceRollType, RollingPlayer) == 0x000000, "Member 'DBDDiceRoller_GetRollResultByDiceRollType::RollingPlayer' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetRollResultByDiceRollType, DiceRollType) == 0x000008, "Member 'DBDDiceRoller_GetRollResultByDiceRollType::DiceRollType' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetRollResultByDiceRollType, ReturnValue) == 0x000009, "Member 'DBDDiceRoller_GetRollResultByDiceRollType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDiceRoller.GetRollResultByTunableValue
// 0x0020 (0x0020 - 0x0000)
struct DBDDiceRoller_GetRollResultByTunableValue final
{
public:
	const class AActor*                           RollingActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TunableValueName;                                  // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiplicativeModifier;                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveModifier;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDDiceRoller_GetRollResultByTunableValue) == 0x000008, "Wrong alignment on DBDDiceRoller_GetRollResultByTunableValue");
static_assert(sizeof(DBDDiceRoller_GetRollResultByTunableValue) == 0x000020, "Wrong size on DBDDiceRoller_GetRollResultByTunableValue");
static_assert(offsetof(DBDDiceRoller_GetRollResultByTunableValue, RollingActor) == 0x000000, "Member 'DBDDiceRoller_GetRollResultByTunableValue::RollingActor' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetRollResultByTunableValue, TunableValueName) == 0x000008, "Member 'DBDDiceRoller_GetRollResultByTunableValue::TunableValueName' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetRollResultByTunableValue, MultiplicativeModifier) == 0x000014, "Member 'DBDDiceRoller_GetRollResultByTunableValue::MultiplicativeModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetRollResultByTunableValue, AdditiveModifier) == 0x000018, "Member 'DBDDiceRoller_GetRollResultByTunableValue::AdditiveModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetRollResultByTunableValue, ReturnValue) == 0x00001C, "Member 'DBDDiceRoller_GetRollResultByTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaFriendListScreen.HandleContextualMenuAction
// 0x0001 (0x0001 - 0x0000)
struct UMGAtlantaFriendListScreen_HandleContextualMenuAction final
{
public:
	EActionOnFriendType                           action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaFriendListScreen_HandleContextualMenuAction) == 0x000001, "Wrong alignment on UMGAtlantaFriendListScreen_HandleContextualMenuAction");
static_assert(sizeof(UMGAtlantaFriendListScreen_HandleContextualMenuAction) == 0x000001, "Wrong size on UMGAtlantaFriendListScreen_HandleContextualMenuAction");
static_assert(offsetof(UMGAtlantaFriendListScreen_HandleContextualMenuAction, action) == 0x000000, "Member 'UMGAtlantaFriendListScreen_HandleContextualMenuAction::action' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaFriendListScreen.HandleOnActionOnFriend
// 0x0078 (0x0078 - 0x0000)
struct UMGAtlantaFriendListScreen_HandleOnActionOnFriend final
{
public:
	struct FActionOnFriend                        actionOnFriend;                                    // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaFriendListScreen_HandleOnActionOnFriend) == 0x000008, "Wrong alignment on UMGAtlantaFriendListScreen_HandleOnActionOnFriend");
static_assert(sizeof(UMGAtlantaFriendListScreen_HandleOnActionOnFriend) == 0x000078, "Wrong size on UMGAtlantaFriendListScreen_HandleOnActionOnFriend");
static_assert(offsetof(UMGAtlantaFriendListScreen_HandleOnActionOnFriend, actionOnFriend) == 0x000000, "Member 'UMGAtlantaFriendListScreen_HandleOnActionOnFriend::actionOnFriend' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaFriendListScreen.HandleSearchInputChanged
// 0x0018 (0x0018 - 0x0000)
struct UMGAtlantaFriendListScreen_HandleSearchInputChanged final
{
public:
	class FText                                   inputText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaFriendListScreen_HandleSearchInputChanged) == 0x000008, "Wrong alignment on UMGAtlantaFriendListScreen_HandleSearchInputChanged");
static_assert(sizeof(UMGAtlantaFriendListScreen_HandleSearchInputChanged) == 0x000018, "Wrong size on UMGAtlantaFriendListScreen_HandleSearchInputChanged");
static_assert(offsetof(UMGAtlantaFriendListScreen_HandleSearchInputChanged, inputText) == 0x000000, "Member 'UMGAtlantaFriendListScreen_HandleSearchInputChanged::inputText' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaFriendListScreen.HandleTabButtonClicked
// 0x0001 (0x0001 - 0x0000)
struct UMGAtlantaFriendListScreen_HandleTabButtonClicked final
{
public:
	uint8                                         tabIndex;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaFriendListScreen_HandleTabButtonClicked) == 0x000001, "Wrong alignment on UMGAtlantaFriendListScreen_HandleTabButtonClicked");
static_assert(sizeof(UMGAtlantaFriendListScreen_HandleTabButtonClicked) == 0x000001, "Wrong size on UMGAtlantaFriendListScreen_HandleTabButtonClicked");
static_assert(offsetof(UMGAtlantaFriendListScreen_HandleTabButtonClicked, tabIndex) == 0x000000, "Member 'UMGAtlantaFriendListScreen_HandleTabButtonClicked::tabIndex' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaFriendListScreen.VerifyReceivedFriendRequestFocus
// 0x0010 (0x0010 - 0x0000)
struct UMGAtlantaFriendListScreen_VerifyReceivedFriendRequestFocus final
{
public:
	class UExpandableArea*                        expandableArea;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExpanded;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGAtlantaFriendListScreen_VerifyReceivedFriendRequestFocus) == 0x000008, "Wrong alignment on UMGAtlantaFriendListScreen_VerifyReceivedFriendRequestFocus");
static_assert(sizeof(UMGAtlantaFriendListScreen_VerifyReceivedFriendRequestFocus) == 0x000010, "Wrong size on UMGAtlantaFriendListScreen_VerifyReceivedFriendRequestFocus");
static_assert(offsetof(UMGAtlantaFriendListScreen_VerifyReceivedFriendRequestFocus, expandableArea) == 0x000000, "Member 'UMGAtlantaFriendListScreen_VerifyReceivedFriendRequestFocus::expandableArea' has a wrong offset!");
static_assert(offsetof(UMGAtlantaFriendListScreen_VerifyReceivedFriendRequestFocus, bIsExpanded) == 0x000008, "Member 'UMGAtlantaFriendListScreen_VerifyReceivedFriendRequestFocus::bIsExpanded' has a wrong offset!");

// Function DeadByDaylight.Bloodlust.DBD_SetBloodlust
// 0x0008 (0x0008 - 0x0000)
struct Bloodlust_DBD_SetBloodlust final
{
public:
	int32                                         amount;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          enableDecay;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Bloodlust_DBD_SetBloodlust) == 0x000004, "Wrong alignment on Bloodlust_DBD_SetBloodlust");
static_assert(sizeof(Bloodlust_DBD_SetBloodlust) == 0x000008, "Wrong size on Bloodlust_DBD_SetBloodlust");
static_assert(offsetof(Bloodlust_DBD_SetBloodlust, amount) == 0x000000, "Member 'Bloodlust_DBD_SetBloodlust::amount' has a wrong offset!");
static_assert(offsetof(Bloodlust_DBD_SetBloodlust, enableDecay) == 0x000004, "Member 'Bloodlust_DBD_SetBloodlust::enableDecay' has a wrong offset!");

// Function DeadByDaylight.Bloodlust.OnChaseStartedEvent
// 0x0008 (0x0008 - 0x0000)
struct Bloodlust_OnChaseStartedEvent final
{
public:
	class ADBDPlayer*                             chasedPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bloodlust_OnChaseStartedEvent) == 0x000008, "Wrong alignment on Bloodlust_OnChaseStartedEvent");
static_assert(sizeof(Bloodlust_OnChaseStartedEvent) == 0x000008, "Wrong size on Bloodlust_OnChaseStartedEvent");
static_assert(offsetof(Bloodlust_OnChaseStartedEvent, chasedPlayer) == 0x000000, "Member 'Bloodlust_OnChaseStartedEvent::chasedPlayer' has a wrong offset!");

// Function DeadByDaylight.Bloodlust.OnRep_BloodlustTime
// 0x0004 (0x0004 - 0x0000)
struct Bloodlust_OnRep_BloodlustTime final
{
public:
	float                                         oldBloodlustTime;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bloodlust_OnRep_BloodlustTime) == 0x000004, "Wrong alignment on Bloodlust_OnRep_BloodlustTime");
static_assert(sizeof(Bloodlust_OnRep_BloodlustTime) == 0x000004, "Wrong size on Bloodlust_OnRep_BloodlustTime");
static_assert(offsetof(Bloodlust_OnRep_BloodlustTime, oldBloodlustTime) == 0x000000, "Member 'Bloodlust_OnRep_BloodlustTime::oldBloodlustTime' has a wrong offset!");

// Function DeadByDaylight.Bloodlust.GetBloodlustTime
// 0x0004 (0x0004 - 0x0000)
struct Bloodlust_GetBloodlustTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bloodlust_GetBloodlustTime) == 0x000004, "Wrong alignment on Bloodlust_GetBloodlustTime");
static_assert(sizeof(Bloodlust_GetBloodlustTime) == 0x000004, "Wrong size on Bloodlust_GetBloodlustTime");
static_assert(offsetof(Bloodlust_GetBloodlustTime, ReturnValue) == 0x000000, "Member 'Bloodlust_GetBloodlustTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBaseMatchGameMode.GetEndGameComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDBaseMatchGameMode_GetEndGameComponent final
{
public:
	class UEndGameComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBaseMatchGameMode_GetEndGameComponent) == 0x000008, "Wrong alignment on DBDBaseMatchGameMode_GetEndGameComponent");
static_assert(sizeof(DBDBaseMatchGameMode_GetEndGameComponent) == 0x000008, "Wrong size on DBDBaseMatchGameMode_GetEndGameComponent");
static_assert(offsetof(DBDBaseMatchGameMode_GetEndGameComponent, ReturnValue) == 0x000000, "Member 'DBDBaseMatchGameMode_GetEndGameComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameMode.DBD_BlockCamperEscape
// 0x0001 (0x0001 - 0x0000)
struct DBDGameMode_DBD_BlockCamperEscape final
{
public:
	bool                                          shouldBlock;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameMode_DBD_BlockCamperEscape) == 0x000001, "Wrong alignment on DBDGameMode_DBD_BlockCamperEscape");
static_assert(sizeof(DBDGameMode_DBD_BlockCamperEscape) == 0x000001, "Wrong size on DBDGameMode_DBD_BlockCamperEscape");
static_assert(offsetof(DBDGameMode_DBD_BlockCamperEscape, shouldBlock) == 0x000000, "Member 'DBDGameMode_DBD_BlockCamperEscape::shouldBlock' has a wrong offset!");

// Function DeadByDaylight.DBDGameMode.LevelLoaded
// 0x0010 (0x0010 - 0x0000)
struct DBDGameMode_LevelLoaded final
{
public:
	class FString                                 levelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameMode_LevelLoaded) == 0x000008, "Wrong alignment on DBDGameMode_LevelLoaded");
static_assert(sizeof(DBDGameMode_LevelLoaded) == 0x000010, "Wrong size on DBDGameMode_LevelLoaded");
static_assert(offsetof(DBDGameMode_LevelLoaded, levelName) == 0x000000, "Member 'DBDGameMode_LevelLoaded::levelName' has a wrong offset!");

// Function DeadByDaylight.DBDGameMode.OnPlayerGameStateChanged
// 0x0010 (0x0010 - 0x0000)
struct DBDGameMode_OnPlayerGameStateChanged final
{
public:
	class ADBDPlayerState*                        playerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameState                                    playerGameState;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameMode_OnPlayerGameStateChanged) == 0x000008, "Wrong alignment on DBDGameMode_OnPlayerGameStateChanged");
static_assert(sizeof(DBDGameMode_OnPlayerGameStateChanged) == 0x000010, "Wrong size on DBDGameMode_OnPlayerGameStateChanged");
static_assert(offsetof(DBDGameMode_OnPlayerGameStateChanged, playerState) == 0x000000, "Member 'DBDGameMode_OnPlayerGameStateChanged::playerState' has a wrong offset!");
static_assert(offsetof(DBDGameMode_OnPlayerGameStateChanged, playerGameState) == 0x000008, "Member 'DBDGameMode_OnPlayerGameStateChanged::playerGameState' has a wrong offset!");

// Function DeadByDaylight.DBDGameMode.RegisterOnPlayerStateChanged
// 0x0008 (0x0008 - 0x0000)
struct DBDGameMode_RegisterOnPlayerStateChanged final
{
public:
	class APlayerState*                           playerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameMode_RegisterOnPlayerStateChanged) == 0x000008, "Wrong alignment on DBDGameMode_RegisterOnPlayerStateChanged");
static_assert(sizeof(DBDGameMode_RegisterOnPlayerStateChanged) == 0x000008, "Wrong size on DBDGameMode_RegisterOnPlayerStateChanged");
static_assert(offsetof(DBDGameMode_RegisterOnPlayerStateChanged, playerState) == 0x000000, "Member 'DBDGameMode_RegisterOnPlayerStateChanged::playerState' has a wrong offset!");

// Function DeadByDaylight.DBDGameMode.SetEscapeOpened
// 0x0001 (0x0001 - 0x0000)
struct DBDGameMode_SetEscapeOpened final
{
public:
	bool                                          val;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameMode_SetEscapeOpened) == 0x000001, "Wrong alignment on DBDGameMode_SetEscapeOpened");
static_assert(sizeof(DBDGameMode_SetEscapeOpened) == 0x000001, "Wrong size on DBDGameMode_SetEscapeOpened");
static_assert(offsetof(DBDGameMode_SetEscapeOpened, val) == 0x000000, "Member 'DBDGameMode_SetEscapeOpened::val' has a wrong offset!");

// Function DeadByDaylight.DBDGameMode.SetPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct DBDGameMode_SetPlayerCount final
{
public:
	int32                                         playerAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameMode_SetPlayerCount) == 0x000004, "Wrong alignment on DBDGameMode_SetPlayerCount");
static_assert(sizeof(DBDGameMode_SetPlayerCount) == 0x000004, "Wrong size on DBDGameMode_SetPlayerCount");
static_assert(offsetof(DBDGameMode_SetPlayerCount, playerAmount) == 0x000000, "Member 'DBDGameMode_SetPlayerCount::playerAmount' has a wrong offset!");

// Function DeadByDaylight.DBDGameMode.AreLoadoutsCreated
// 0x0001 (0x0001 - 0x0000)
struct DBDGameMode_AreLoadoutsCreated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameMode_AreLoadoutsCreated) == 0x000001, "Wrong alignment on DBDGameMode_AreLoadoutsCreated");
static_assert(sizeof(DBDGameMode_AreLoadoutsCreated) == 0x000001, "Wrong size on DBDGameMode_AreLoadoutsCreated");
static_assert(offsetof(DBDGameMode_AreLoadoutsCreated, ReturnValue) == 0x000000, "Member 'DBDGameMode_AreLoadoutsCreated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameMode.IsEscapeOpen
// 0x0001 (0x0001 - 0x0000)
struct DBDGameMode_IsEscapeOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameMode_IsEscapeOpen) == 0x000001, "Wrong alignment on DBDGameMode_IsEscapeOpen");
static_assert(sizeof(DBDGameMode_IsEscapeOpen) == 0x000001, "Wrong size on DBDGameMode_IsEscapeOpen");
static_assert(offsetof(DBDGameMode_IsEscapeOpen, ReturnValue) == 0x000000, "Member 'DBDGameMode_IsEscapeOpen::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBD_SoundClipUtil.Cosmetic_OnSoundTriggered
// 0x0008 (0x0008 - 0x0000)
struct DBD_SoundClipUtil_Cosmetic_OnSoundTriggered final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBD_SoundClipUtil_Cosmetic_OnSoundTriggered) == 0x000008, "Wrong alignment on DBD_SoundClipUtil_Cosmetic_OnSoundTriggered");
static_assert(sizeof(DBD_SoundClipUtil_Cosmetic_OnSoundTriggered) == 0x000008, "Wrong size on DBD_SoundClipUtil_Cosmetic_OnSoundTriggered");
static_assert(offsetof(DBD_SoundClipUtil_Cosmetic_OnSoundTriggered, actor) == 0x000000, "Member 'DBD_SoundClipUtil_Cosmetic_OnSoundTriggered::actor' has a wrong offset!");

// Function DeadByDaylight.DBD_SoundClipUtil.GetAudioEventForMesh
// 0x0010 (0x0010 - 0x0000)
struct DBD_SoundClipUtil_GetAudioEventForMesh final
{
public:
	class UStaticMeshComponent*                   usm;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBD_SoundClipUtil_GetAudioEventForMesh) == 0x000008, "Wrong alignment on DBD_SoundClipUtil_GetAudioEventForMesh");
static_assert(sizeof(DBD_SoundClipUtil_GetAudioEventForMesh) == 0x000010, "Wrong size on DBD_SoundClipUtil_GetAudioEventForMesh");
static_assert(offsetof(DBD_SoundClipUtil_GetAudioEventForMesh, usm) == 0x000000, "Member 'DBD_SoundClipUtil_GetAudioEventForMesh::usm' has a wrong offset!");
static_assert(offsetof(DBD_SoundClipUtil_GetAudioEventForMesh, ReturnValue) == 0x000008, "Member 'DBD_SoundClipUtil_GetAudioEventForMesh::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBD_SoundClipUtil.OnCharacterEnterSoundRegion
// 0x00B0 (0x00B0 - 0x0000)
struct DBD_SoundClipUtil_OnCharacterEnterSoundRegion final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion) == 0x000008, "Wrong alignment on DBD_SoundClipUtil_OnCharacterEnterSoundRegion");
static_assert(sizeof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion) == 0x0000B0, "Wrong size on DBD_SoundClipUtil_OnCharacterEnterSoundRegion");
static_assert(offsetof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion, HitComponent) == 0x000000, "Member 'DBD_SoundClipUtil_OnCharacterEnterSoundRegion::HitComponent' has a wrong offset!");
static_assert(offsetof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion, OtherActor) == 0x000008, "Member 'DBD_SoundClipUtil_OnCharacterEnterSoundRegion::OtherActor' has a wrong offset!");
static_assert(offsetof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion, OtherComp) == 0x000010, "Member 'DBD_SoundClipUtil_OnCharacterEnterSoundRegion::OtherComp' has a wrong offset!");
static_assert(offsetof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion, OtherBodyIndex) == 0x000018, "Member 'DBD_SoundClipUtil_OnCharacterEnterSoundRegion::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion, bFromSweep) == 0x00001C, "Member 'DBD_SoundClipUtil_OnCharacterEnterSoundRegion::bFromSweep' has a wrong offset!");
static_assert(offsetof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion, SweepResult) == 0x000020, "Member 'DBD_SoundClipUtil_OnCharacterEnterSoundRegion::SweepResult' has a wrong offset!");

// Function DeadByDaylight.DailyRitualsScreen.OnClaimRitual
// 0x0010 (0x0010 - 0x0000)
struct DailyRitualsScreen_OnClaimRitual final
{
public:
	class FString                                 id;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsScreen_OnClaimRitual) == 0x000008, "Wrong alignment on DailyRitualsScreen_OnClaimRitual");
static_assert(sizeof(DailyRitualsScreen_OnClaimRitual) == 0x000010, "Wrong size on DailyRitualsScreen_OnClaimRitual");
static_assert(offsetof(DailyRitualsScreen_OnClaimRitual, id) == 0x000000, "Member 'DailyRitualsScreen_OnClaimRitual::id' has a wrong offset!");

// Function DeadByDaylight.DailyRitualsScreen.OnRemoveRitual
// 0x0010 (0x0010 - 0x0000)
struct DailyRitualsScreen_OnRemoveRitual final
{
public:
	class FString                                 id;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsScreen_OnRemoveRitual) == 0x000008, "Wrong alignment on DailyRitualsScreen_OnRemoveRitual");
static_assert(sizeof(DailyRitualsScreen_OnRemoveRitual) == 0x000010, "Wrong size on DailyRitualsScreen_OnRemoveRitual");
static_assert(offsetof(DailyRitualsScreen_OnRemoveRitual, id) == 0x000000, "Member 'DailyRitualsScreen_OnRemoveRitual::id' has a wrong offset!");

// Function DeadByDaylight.BloodwebManager.Init
// 0x0010 (0x0010 - 0x0000)
struct BloodwebManager_Init final
{
public:
	class UDBDGameInstance*                       gameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDDesignTunables*                     tunables;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodwebManager_Init) == 0x000008, "Wrong alignment on BloodwebManager_Init");
static_assert(sizeof(BloodwebManager_Init) == 0x000010, "Wrong size on BloodwebManager_Init");
static_assert(offsetof(BloodwebManager_Init, gameInstance) == 0x000000, "Member 'BloodwebManager_Init::gameInstance' has a wrong offset!");
static_assert(offsetof(BloodwebManager_Init, tunables) == 0x000008, "Member 'BloodwebManager_Init::tunables' has a wrong offset!");

// Function DeadByDaylight.DBDAIPlayerController.MovePlayerToActor
// 0x0010 (0x0010 - 0x0000)
struct DBDAIPlayerController_MovePlayerToActor final
{
public:
	class AActor*                                 goal;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         acceptanceRadius;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAIPlayerController_MovePlayerToActor) == 0x000008, "Wrong alignment on DBDAIPlayerController_MovePlayerToActor");
static_assert(sizeof(DBDAIPlayerController_MovePlayerToActor) == 0x000010, "Wrong size on DBDAIPlayerController_MovePlayerToActor");
static_assert(offsetof(DBDAIPlayerController_MovePlayerToActor, goal) == 0x000000, "Member 'DBDAIPlayerController_MovePlayerToActor::goal' has a wrong offset!");
static_assert(offsetof(DBDAIPlayerController_MovePlayerToActor, acceptanceRadius) == 0x000008, "Member 'DBDAIPlayerController_MovePlayerToActor::acceptanceRadius' has a wrong offset!");

// Function DeadByDaylight.DBDAIPlayerController.OnBehaviourEndedHandler
// 0x0008 (0x0008 - 0x0000)
struct DBDAIPlayerController_OnBehaviourEndedHandler final
{
public:
	class UAICharacterBehaviour*                  behaviourEnded;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIPlayerController_OnBehaviourEndedHandler) == 0x000008, "Wrong alignment on DBDAIPlayerController_OnBehaviourEndedHandler");
static_assert(sizeof(DBDAIPlayerController_OnBehaviourEndedHandler) == 0x000008, "Wrong size on DBDAIPlayerController_OnBehaviourEndedHandler");
static_assert(offsetof(DBDAIPlayerController_OnBehaviourEndedHandler, behaviourEnded) == 0x000000, "Member 'DBDAIPlayerController_OnBehaviourEndedHandler::behaviourEnded' has a wrong offset!");

// Function DeadByDaylight.DBDAIPlayerController.PauseCharacterBehaviour
// 0x0008 (0x0008 - 0x0000)
struct DBDAIPlayerController_PauseCharacterBehaviour final
{
public:
	const class UClass*                           behaviourClass;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIPlayerController_PauseCharacterBehaviour) == 0x000008, "Wrong alignment on DBDAIPlayerController_PauseCharacterBehaviour");
static_assert(sizeof(DBDAIPlayerController_PauseCharacterBehaviour) == 0x000008, "Wrong size on DBDAIPlayerController_PauseCharacterBehaviour");
static_assert(offsetof(DBDAIPlayerController_PauseCharacterBehaviour, behaviourClass) == 0x000000, "Member 'DBDAIPlayerController_PauseCharacterBehaviour::behaviourClass' has a wrong offset!");

// Function DeadByDaylight.DBDAIPlayerController.ResumeCharacterBehaviour
// 0x0008 (0x0008 - 0x0000)
struct DBDAIPlayerController_ResumeCharacterBehaviour final
{
public:
	const class UClass*                           behaviourClass;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIPlayerController_ResumeCharacterBehaviour) == 0x000008, "Wrong alignment on DBDAIPlayerController_ResumeCharacterBehaviour");
static_assert(sizeof(DBDAIPlayerController_ResumeCharacterBehaviour) == 0x000008, "Wrong size on DBDAIPlayerController_ResumeCharacterBehaviour");
static_assert(offsetof(DBDAIPlayerController_ResumeCharacterBehaviour, behaviourClass) == 0x000000, "Member 'DBDAIPlayerController_ResumeCharacterBehaviour::behaviourClass' has a wrong offset!");

// Function DeadByDaylight.DBDAIPlayerController.StartCharacterBehaviour
// 0x0010 (0x0010 - 0x0000)
struct DBDAIPlayerController_StartCharacterBehaviour final
{
public:
	class UClass*                                 behaviourClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAICharacterBehaviourData*              characterBehaviourData;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIPlayerController_StartCharacterBehaviour) == 0x000008, "Wrong alignment on DBDAIPlayerController_StartCharacterBehaviour");
static_assert(sizeof(DBDAIPlayerController_StartCharacterBehaviour) == 0x000010, "Wrong size on DBDAIPlayerController_StartCharacterBehaviour");
static_assert(offsetof(DBDAIPlayerController_StartCharacterBehaviour, behaviourClass) == 0x000000, "Member 'DBDAIPlayerController_StartCharacterBehaviour::behaviourClass' has a wrong offset!");
static_assert(offsetof(DBDAIPlayerController_StartCharacterBehaviour, characterBehaviourData) == 0x000008, "Member 'DBDAIPlayerController_StartCharacterBehaviour::characterBehaviourData' has a wrong offset!");

// Function DeadByDaylight.DBDAIPlayerController.StopCharacterBehaviour
// 0x0008 (0x0008 - 0x0000)
struct DBDAIPlayerController_StopCharacterBehaviour final
{
public:
	const class UClass*                           behaviourClass;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIPlayerController_StopCharacterBehaviour) == 0x000008, "Wrong alignment on DBDAIPlayerController_StopCharacterBehaviour");
static_assert(sizeof(DBDAIPlayerController_StopCharacterBehaviour) == 0x000008, "Wrong size on DBDAIPlayerController_StopCharacterBehaviour");
static_assert(offsetof(DBDAIPlayerController_StopCharacterBehaviour, behaviourClass) == 0x000000, "Member 'DBDAIPlayerController_StopCharacterBehaviour::behaviourClass' has a wrong offset!");

// Function DeadByDaylight.BlueprintDebugUtilities.EnsureFalseWithMessage
// 0x0010 (0x0010 - 0x0000)
struct BlueprintDebugUtilities_EnsureFalseWithMessage final
{
public:
	class FString                                 ensureMessage;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintDebugUtilities_EnsureFalseWithMessage) == 0x000008, "Wrong alignment on BlueprintDebugUtilities_EnsureFalseWithMessage");
static_assert(sizeof(BlueprintDebugUtilities_EnsureFalseWithMessage) == 0x000010, "Wrong size on BlueprintDebugUtilities_EnsureFalseWithMessage");
static_assert(offsetof(BlueprintDebugUtilities_EnsureFalseWithMessage, ensureMessage) == 0x000000, "Member 'BlueprintDebugUtilities_EnsureFalseWithMessage::ensureMessage' has a wrong offset!");

// Function DeadByDaylight.BlueprintDebugUtilities.EnsureOnConditionWithMessage
// 0x0018 (0x0018 - 0x0000)
struct BlueprintDebugUtilities_EnsureOnConditionWithMessage final
{
public:
	bool                                          condition;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ensureMessage;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintDebugUtilities_EnsureOnConditionWithMessage) == 0x000008, "Wrong alignment on BlueprintDebugUtilities_EnsureOnConditionWithMessage");
static_assert(sizeof(BlueprintDebugUtilities_EnsureOnConditionWithMessage) == 0x000018, "Wrong size on BlueprintDebugUtilities_EnsureOnConditionWithMessage");
static_assert(offsetof(BlueprintDebugUtilities_EnsureOnConditionWithMessage, condition) == 0x000000, "Member 'BlueprintDebugUtilities_EnsureOnConditionWithMessage::condition' has a wrong offset!");
static_assert(offsetof(BlueprintDebugUtilities_EnsureOnConditionWithMessage, ensureMessage) == 0x000008, "Member 'BlueprintDebugUtilities_EnsureOnConditionWithMessage::ensureMessage' has a wrong offset!");

// Function DeadByDaylight.SlasherHitsWhileCarryingTrackerComponent.OnAttack
// 0x0038 (0x0038 - 0x0000)
struct SlasherHitsWhileCarryingTrackerComponent_OnAttack final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherHitsWhileCarryingTrackerComponent_OnAttack) == 0x000008, "Wrong alignment on SlasherHitsWhileCarryingTrackerComponent_OnAttack");
static_assert(sizeof(SlasherHitsWhileCarryingTrackerComponent_OnAttack) == 0x000038, "Wrong size on SlasherHitsWhileCarryingTrackerComponent_OnAttack");
static_assert(offsetof(SlasherHitsWhileCarryingTrackerComponent_OnAttack, gameEventType) == 0x000000, "Member 'SlasherHitsWhileCarryingTrackerComponent_OnAttack::gameEventType' has a wrong offset!");
static_assert(offsetof(SlasherHitsWhileCarryingTrackerComponent_OnAttack, gameEventData) == 0x000010, "Member 'SlasherHitsWhileCarryingTrackerComponent_OnAttack::gameEventData' has a wrong offset!");

// Function DeadByDaylight.SlasherHitsWhileCarryingTrackerComponent.OnPickup
// 0x0038 (0x0038 - 0x0000)
struct SlasherHitsWhileCarryingTrackerComponent_OnPickup final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherHitsWhileCarryingTrackerComponent_OnPickup) == 0x000008, "Wrong alignment on SlasherHitsWhileCarryingTrackerComponent_OnPickup");
static_assert(sizeof(SlasherHitsWhileCarryingTrackerComponent_OnPickup) == 0x000038, "Wrong size on SlasherHitsWhileCarryingTrackerComponent_OnPickup");
static_assert(offsetof(SlasherHitsWhileCarryingTrackerComponent_OnPickup, gameEventType) == 0x000000, "Member 'SlasherHitsWhileCarryingTrackerComponent_OnPickup::gameEventType' has a wrong offset!");
static_assert(offsetof(SlasherHitsWhileCarryingTrackerComponent_OnPickup, gameEventData) == 0x000010, "Member 'SlasherHitsWhileCarryingTrackerComponent_OnPickup::gameEventData' has a wrong offset!");

// Function DeadByDaylight.SlasherHitsWhileCarryingTrackerComponent.OnPostAttack
// 0x0038 (0x0038 - 0x0000)
struct SlasherHitsWhileCarryingTrackerComponent_OnPostAttack final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherHitsWhileCarryingTrackerComponent_OnPostAttack) == 0x000008, "Wrong alignment on SlasherHitsWhileCarryingTrackerComponent_OnPostAttack");
static_assert(sizeof(SlasherHitsWhileCarryingTrackerComponent_OnPostAttack) == 0x000038, "Wrong size on SlasherHitsWhileCarryingTrackerComponent_OnPostAttack");
static_assert(offsetof(SlasherHitsWhileCarryingTrackerComponent_OnPostAttack, gameEventType) == 0x000000, "Member 'SlasherHitsWhileCarryingTrackerComponent_OnPostAttack::gameEventType' has a wrong offset!");
static_assert(offsetof(SlasherHitsWhileCarryingTrackerComponent_OnPostAttack, gameEventData) == 0x000010, "Member 'SlasherHitsWhileCarryingTrackerComponent_OnPostAttack::gameEventData' has a wrong offset!");

// Function DeadByDaylight.UmgPlayerHud.OnInteractionEnded
// 0x0008 (0x0008 - 0x0000)
struct UmgPlayerHud_OnInteractionEnded final
{
public:
	class UInteractionDefinition*                 interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgPlayerHud_OnInteractionEnded) == 0x000008, "Wrong alignment on UmgPlayerHud_OnInteractionEnded");
static_assert(sizeof(UmgPlayerHud_OnInteractionEnded) == 0x000008, "Wrong size on UmgPlayerHud_OnInteractionEnded");
static_assert(offsetof(UmgPlayerHud_OnInteractionEnded, interaction) == 0x000000, "Member 'UmgPlayerHud_OnInteractionEnded::interaction' has a wrong offset!");

// Function DeadByDaylight.UmgPlayerHud.OnInteractionStarted
// 0x0008 (0x0008 - 0x0000)
struct UmgPlayerHud_OnInteractionStarted final
{
public:
	class UInteractionDefinition*                 interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgPlayerHud_OnInteractionStarted) == 0x000008, "Wrong alignment on UmgPlayerHud_OnInteractionStarted");
static_assert(sizeof(UmgPlayerHud_OnInteractionStarted) == 0x000008, "Wrong size on UmgPlayerHud_OnInteractionStarted");
static_assert(offsetof(UmgPlayerHud_OnInteractionStarted, interaction) == 0x000000, "Member 'UmgPlayerHud_OnInteractionStarted::interaction' has a wrong offset!");

// Function DeadByDaylight.UmgPlayerHud.OnPerkClicked
// 0x0010 (0x0010 - 0x0000)
struct UmgPlayerHud_OnPerkClicked final
{
public:
	class FName                                   perkID;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          clickedOnPerksWidget;                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UmgPlayerHud_OnPerkClicked) == 0x000004, "Wrong alignment on UmgPlayerHud_OnPerkClicked");
static_assert(sizeof(UmgPlayerHud_OnPerkClicked) == 0x000010, "Wrong size on UmgPlayerHud_OnPerkClicked");
static_assert(offsetof(UmgPlayerHud_OnPerkClicked, perkID) == 0x000000, "Member 'UmgPlayerHud_OnPerkClicked::perkID' has a wrong offset!");
static_assert(offsetof(UmgPlayerHud_OnPerkClicked, clickedOnPerksWidget) == 0x00000C, "Member 'UmgPlayerHud_OnPerkClicked::clickedOnPerksWidget' has a wrong offset!");

// Function DeadByDaylight.UmgPlayerHud.SetVirtualJoystickThumbImage
// 0x0001 (0x0001 - 0x0000)
struct UmgPlayerHud_SetVirtualJoystickThumbImage final
{
public:
	bool                                          locked;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgPlayerHud_SetVirtualJoystickThumbImage) == 0x000001, "Wrong alignment on UmgPlayerHud_SetVirtualJoystickThumbImage");
static_assert(sizeof(UmgPlayerHud_SetVirtualJoystickThumbImage) == 0x000001, "Wrong size on UmgPlayerHud_SetVirtualJoystickThumbImage");
static_assert(offsetof(UmgPlayerHud_SetVirtualJoystickThumbImage, locked) == 0x000000, "Member 'UmgPlayerHud_SetVirtualJoystickThumbImage::locked' has a wrong offset!");

// Function DeadByDaylight.UmgPlayerHud.GetCurrentOrAvailableInteractionOfType
// 0x0010 (0x0010 - 0x0000)
struct UmgPlayerHud_GetCurrentOrAvailableInteractionOfType final
{
public:
	EInputInteractionType                         interactionInputType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgPlayerHud_GetCurrentOrAvailableInteractionOfType) == 0x000008, "Wrong alignment on UmgPlayerHud_GetCurrentOrAvailableInteractionOfType");
static_assert(sizeof(UmgPlayerHud_GetCurrentOrAvailableInteractionOfType) == 0x000010, "Wrong size on UmgPlayerHud_GetCurrentOrAvailableInteractionOfType");
static_assert(offsetof(UmgPlayerHud_GetCurrentOrAvailableInteractionOfType, interactionInputType) == 0x000000, "Member 'UmgPlayerHud_GetCurrentOrAvailableInteractionOfType::interactionInputType' has a wrong offset!");
static_assert(offsetof(UmgPlayerHud_GetCurrentOrAvailableInteractionOfType, ReturnValue) == 0x000008, "Member 'UmgPlayerHud_GetCurrentOrAvailableInteractionOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UmgPlayerHud.GetInteractionIconByType
// 0x0098 (0x0098 - 0x0000)
struct UmgPlayerHud_GetInteractionIconByType final
{
public:
	EInputInteractionType                         interactionInputType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ReturnValue;                                       // 0x0008(0x0090)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgPlayerHud_GetInteractionIconByType) == 0x000008, "Wrong alignment on UmgPlayerHud_GetInteractionIconByType");
static_assert(sizeof(UmgPlayerHud_GetInteractionIconByType) == 0x000098, "Wrong size on UmgPlayerHud_GetInteractionIconByType");
static_assert(offsetof(UmgPlayerHud_GetInteractionIconByType, interactionInputType) == 0x000000, "Member 'UmgPlayerHud_GetInteractionIconByType::interactionInputType' has a wrong offset!");
static_assert(offsetof(UmgPlayerHud_GetInteractionIconByType, ReturnValue) == 0x000008, "Member 'UmgPlayerHud_GetInteractionIconByType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UmgPlayerHud.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct UmgPlayerHud_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgPlayerHud_IsInitialized) == 0x000001, "Wrong alignment on UmgPlayerHud_IsInitialized");
static_assert(sizeof(UmgPlayerHud_IsInitialized) == 0x000001, "Wrong size on UmgPlayerHud_IsInitialized");
static_assert(offsetof(UmgPlayerHud_IsInitialized, ReturnValue) == 0x000000, "Member 'UmgPlayerHud_IsInitialized::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UmgPlayerHud.IsInteractionAllowed
// 0x0010 (0x0010 - 0x0000)
struct UmgPlayerHud_IsInteractionAllowed final
{
public:
	class UInteractionDefinition*                 interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UmgPlayerHud_IsInteractionAllowed) == 0x000008, "Wrong alignment on UmgPlayerHud_IsInteractionAllowed");
static_assert(sizeof(UmgPlayerHud_IsInteractionAllowed) == 0x000010, "Wrong size on UmgPlayerHud_IsInteractionAllowed");
static_assert(offsetof(UmgPlayerHud_IsInteractionAllowed, interaction) == 0x000000, "Member 'UmgPlayerHud_IsInteractionAllowed::interaction' has a wrong offset!");
static_assert(offsetof(UmgPlayerHud_IsInteractionAllowed, ReturnValue) == 0x000008, "Member 'UmgPlayerHud_IsInteractionAllowed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UmgPlayerHud.IsInteractionAvailable
// 0x0002 (0x0002 - 0x0000)
struct UmgPlayerHud_IsInteractionAvailable final
{
public:
	EInputInteractionType                         interactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgPlayerHud_IsInteractionAvailable) == 0x000001, "Wrong alignment on UmgPlayerHud_IsInteractionAvailable");
static_assert(sizeof(UmgPlayerHud_IsInteractionAvailable) == 0x000002, "Wrong size on UmgPlayerHud_IsInteractionAvailable");
static_assert(offsetof(UmgPlayerHud_IsInteractionAvailable, interactionType) == 0x000000, "Member 'UmgPlayerHud_IsInteractionAvailable::interactionType' has a wrong offset!");
static_assert(offsetof(UmgPlayerHud_IsInteractionAvailable, ReturnValue) == 0x000001, "Member 'UmgPlayerHud_IsInteractionAvailable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UmgSurvivorHud.CenterItemClicked
// 0x0001 (0x0001 - 0x0000)
struct UmgSurvivorHud_CenterItemClicked final
{
public:
	bool                                          fromCancelRequest;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgSurvivorHud_CenterItemClicked) == 0x000001, "Wrong alignment on UmgSurvivorHud_CenterItemClicked");
static_assert(sizeof(UmgSurvivorHud_CenterItemClicked) == 0x000001, "Wrong size on UmgSurvivorHud_CenterItemClicked");
static_assert(offsetof(UmgSurvivorHud_CenterItemClicked, fromCancelRequest) == 0x000000, "Member 'UmgSurvivorHud_CenterItemClicked::fromCancelRequest' has a wrong offset!");

// Function DeadByDaylight.UmgSurvivorHud.GetLookBackJoystickIsPressed
// 0x0001 (0x0001 - 0x0000)
struct UmgSurvivorHud_GetLookBackJoystickIsPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgSurvivorHud_GetLookBackJoystickIsPressed) == 0x000001, "Wrong alignment on UmgSurvivorHud_GetLookBackJoystickIsPressed");
static_assert(sizeof(UmgSurvivorHud_GetLookBackJoystickIsPressed) == 0x000001, "Wrong size on UmgSurvivorHud_GetLookBackJoystickIsPressed");
static_assert(offsetof(UmgSurvivorHud_GetLookBackJoystickIsPressed, ReturnValue) == 0x000000, "Member 'UmgSurvivorHud_GetLookBackJoystickIsPressed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UmgSurvivorHud.GetLookBackJoystickNormalizedOffset
// 0x0008 (0x0008 - 0x0000)
struct UmgSurvivorHud_GetLookBackJoystickNormalizedOffset final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgSurvivorHud_GetLookBackJoystickNormalizedOffset) == 0x000004, "Wrong alignment on UmgSurvivorHud_GetLookBackJoystickNormalizedOffset");
static_assert(sizeof(UmgSurvivorHud_GetLookBackJoystickNormalizedOffset) == 0x000008, "Wrong size on UmgSurvivorHud_GetLookBackJoystickNormalizedOffset");
static_assert(offsetof(UmgSurvivorHud_GetLookBackJoystickNormalizedOffset, ReturnValue) == 0x000000, "Member 'UmgSurvivorHud_GetLookBackJoystickNormalizedOffset::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UmgSurvivorHud.RespondToVirtualJoystickPressChanged
// 0x0008 (0x0008 - 0x0000)
struct UmgSurvivorHud_RespondToVirtualJoystickPressChanged final
{
public:
	int32                                         controlIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          pressed;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UmgSurvivorHud_RespondToVirtualJoystickPressChanged) == 0x000004, "Wrong alignment on UmgSurvivorHud_RespondToVirtualJoystickPressChanged");
static_assert(sizeof(UmgSurvivorHud_RespondToVirtualJoystickPressChanged) == 0x000008, "Wrong size on UmgSurvivorHud_RespondToVirtualJoystickPressChanged");
static_assert(offsetof(UmgSurvivorHud_RespondToVirtualJoystickPressChanged, controlIndex) == 0x000000, "Member 'UmgSurvivorHud_RespondToVirtualJoystickPressChanged::controlIndex' has a wrong offset!");
static_assert(offsetof(UmgSurvivorHud_RespondToVirtualJoystickPressChanged, pressed) == 0x000004, "Member 'UmgSurvivorHud_RespondToVirtualJoystickPressChanged::pressed' has a wrong offset!");

// Function DeadByDaylight.UmgSurvivorHud.SetLookBackJoystickImage
// 0x0001 (0x0001 - 0x0000)
struct UmgSurvivorHud_SetLookBackJoystickImage final
{
public:
	bool                                          pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgSurvivorHud_SetLookBackJoystickImage) == 0x000001, "Wrong alignment on UmgSurvivorHud_SetLookBackJoystickImage");
static_assert(sizeof(UmgSurvivorHud_SetLookBackJoystickImage) == 0x000001, "Wrong size on UmgSurvivorHud_SetLookBackJoystickImage");
static_assert(offsetof(UmgSurvivorHud_SetLookBackJoystickImage, pressed) == 0x000000, "Member 'UmgSurvivorHud_SetLookBackJoystickImage::pressed' has a wrong offset!");

// Function DeadByDaylight.UmgSurvivorHud.SetLookBackJoystickPosition
// 0x0008 (0x0008 - 0x0000)
struct UmgSurvivorHud_SetLookBackJoystickPosition final
{
public:
	struct FVector2D                              position;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgSurvivorHud_SetLookBackJoystickPosition) == 0x000004, "Wrong alignment on UmgSurvivorHud_SetLookBackJoystickPosition");
static_assert(sizeof(UmgSurvivorHud_SetLookBackJoystickPosition) == 0x000008, "Wrong size on UmgSurvivorHud_SetLookBackJoystickPosition");
static_assert(offsetof(UmgSurvivorHud_SetLookBackJoystickPosition, position) == 0x000000, "Member 'UmgSurvivorHud_SetLookBackJoystickPosition::position' has a wrong offset!");

// Function DeadByDaylight.UmgSurvivorHud.SetNonRestrictedControlsVisibility
// 0x0001 (0x0001 - 0x0000)
struct UmgSurvivorHud_SetNonRestrictedControlsVisibility final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgSurvivorHud_SetNonRestrictedControlsVisibility) == 0x000001, "Wrong alignment on UmgSurvivorHud_SetNonRestrictedControlsVisibility");
static_assert(sizeof(UmgSurvivorHud_SetNonRestrictedControlsVisibility) == 0x000001, "Wrong size on UmgSurvivorHud_SetNonRestrictedControlsVisibility");
static_assert(offsetof(UmgSurvivorHud_SetNonRestrictedControlsVisibility, visible) == 0x000000, "Member 'UmgSurvivorHud_SetNonRestrictedControlsVisibility::visible' has a wrong offset!");

// Function DeadByDaylight.UmgSurvivorHud.SetSkillCheckButtonPosition
// 0x0001 (0x0001 - 0x0000)
struct UmgSurvivorHud_SetSkillCheckButtonPosition final
{
public:
	bool                                          isInsane;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgSurvivorHud_SetSkillCheckButtonPosition) == 0x000001, "Wrong alignment on UmgSurvivorHud_SetSkillCheckButtonPosition");
static_assert(sizeof(UmgSurvivorHud_SetSkillCheckButtonPosition) == 0x000001, "Wrong size on UmgSurvivorHud_SetSkillCheckButtonPosition");
static_assert(offsetof(UmgSurvivorHud_SetSkillCheckButtonPosition, isInsane) == 0x000000, "Member 'UmgSurvivorHud_SetSkillCheckButtonPosition::isInsane' has a wrong offset!");

// Function DeadByDaylight.UmgSurvivorHud.GetCenterItemIcon
// 0x0008 (0x0008 - 0x0000)
struct UmgSurvivorHud_GetCenterItemIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgSurvivorHud_GetCenterItemIcon) == 0x000008, "Wrong alignment on UmgSurvivorHud_GetCenterItemIcon");
static_assert(sizeof(UmgSurvivorHud_GetCenterItemIcon) == 0x000008, "Wrong size on UmgSurvivorHud_GetCenterItemIcon");
static_assert(offsetof(UmgSurvivorHud_GetCenterItemIcon, ReturnValue) == 0x000000, "Member 'UmgSurvivorHud_GetCenterItemIcon::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UmgSurvivorHud.GetCenterItemText
// 0x0018 (0x0018 - 0x0000)
struct UmgSurvivorHud_GetCenterItemText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgSurvivorHud_GetCenterItemText) == 0x000008, "Wrong alignment on UmgSurvivorHud_GetCenterItemText");
static_assert(sizeof(UmgSurvivorHud_GetCenterItemText) == 0x000018, "Wrong size on UmgSurvivorHud_GetCenterItemText");
static_assert(offsetof(UmgSurvivorHud_GetCenterItemText, ReturnValue) == 0x000000, "Member 'UmgSurvivorHud_GetCenterItemText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UmgSurvivorHud.HasSecondaryActionAvailable
// 0x0001 (0x0001 - 0x0000)
struct UmgSurvivorHud_HasSecondaryActionAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgSurvivorHud_HasSecondaryActionAvailable) == 0x000001, "Wrong alignment on UmgSurvivorHud_HasSecondaryActionAvailable");
static_assert(sizeof(UmgSurvivorHud_HasSecondaryActionAvailable) == 0x000001, "Wrong size on UmgSurvivorHud_HasSecondaryActionAvailable");
static_assert(offsetof(UmgSurvivorHud_HasSecondaryActionAvailable, ReturnValue) == 0x000000, "Member 'UmgSurvivorHud_HasSecondaryActionAvailable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UmgSurvivorHud.ShouldUseContextualItemButton
// 0x0001 (0x0001 - 0x0000)
struct UmgSurvivorHud_ShouldUseContextualItemButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgSurvivorHud_ShouldUseContextualItemButton) == 0x000001, "Wrong alignment on UmgSurvivorHud_ShouldUseContextualItemButton");
static_assert(sizeof(UmgSurvivorHud_ShouldUseContextualItemButton) == 0x000001, "Wrong size on UmgSurvivorHud_ShouldUseContextualItemButton");
static_assert(offsetof(UmgSurvivorHud_ShouldUseContextualItemButton, ReturnValue) == 0x000000, "Member 'UmgSurvivorHud_ShouldUseContextualItemButton::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BlueprintPlatformUtilities.ToFloat
// 0x0018 (0x0018 - 0x0000)
struct BlueprintPlatformUtilities_ToFloat final
{
public:
	struct FDBDPerPlatformFloat                   perPlatformFloat;                                  // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          objectInWorld;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintPlatformUtilities_ToFloat) == 0x000008, "Wrong alignment on BlueprintPlatformUtilities_ToFloat");
static_assert(sizeof(BlueprintPlatformUtilities_ToFloat) == 0x000018, "Wrong size on BlueprintPlatformUtilities_ToFloat");
static_assert(offsetof(BlueprintPlatformUtilities_ToFloat, perPlatformFloat) == 0x000000, "Member 'BlueprintPlatformUtilities_ToFloat::perPlatformFloat' has a wrong offset!");
static_assert(offsetof(BlueprintPlatformUtilities_ToFloat, objectInWorld) == 0x000008, "Member 'BlueprintPlatformUtilities_ToFloat::objectInWorld' has a wrong offset!");
static_assert(offsetof(BlueprintPlatformUtilities_ToFloat, ReturnValue) == 0x000010, "Member 'BlueprintPlatformUtilities_ToFloat::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BlueprintPlatformUtilities.ToInteger
// 0x0018 (0x0018 - 0x0000)
struct BlueprintPlatformUtilities_ToInteger final
{
public:
	struct FDBDPerPlatformInt                     perPlatformInt;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          objectInWorld;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintPlatformUtilities_ToInteger) == 0x000008, "Wrong alignment on BlueprintPlatformUtilities_ToInteger");
static_assert(sizeof(BlueprintPlatformUtilities_ToInteger) == 0x000018, "Wrong size on BlueprintPlatformUtilities_ToInteger");
static_assert(offsetof(BlueprintPlatformUtilities_ToInteger, perPlatformInt) == 0x000000, "Member 'BlueprintPlatformUtilities_ToInteger::perPlatformInt' has a wrong offset!");
static_assert(offsetof(BlueprintPlatformUtilities_ToInteger, objectInWorld) == 0x000008, "Member 'BlueprintPlatformUtilities_ToInteger::objectInWorld' has a wrong offset!");
static_assert(offsetof(BlueprintPlatformUtilities_ToInteger, ReturnValue) == 0x000010, "Member 'BlueprintPlatformUtilities_ToInteger::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapUtilities.GetAttachedRBT
// 0x0010 (0x0010 - 0x0000)
struct ReverseBearTrapUtilities_GetAttachedRBT final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReverseBearTrap*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrapUtilities_GetAttachedRBT) == 0x000008, "Wrong alignment on ReverseBearTrapUtilities_GetAttachedRBT");
static_assert(sizeof(ReverseBearTrapUtilities_GetAttachedRBT) == 0x000010, "Wrong size on ReverseBearTrapUtilities_GetAttachedRBT");
static_assert(offsetof(ReverseBearTrapUtilities_GetAttachedRBT, player) == 0x000000, "Member 'ReverseBearTrapUtilities_GetAttachedRBT::player' has a wrong offset!");
static_assert(offsetof(ReverseBearTrapUtilities_GetAttachedRBT, ReturnValue) == 0x000008, "Member 'ReverseBearTrapUtilities_GetAttachedRBT::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BreakableBase.Explode
// 0x0008 (0x0008 - 0x0000)
struct BreakableBase_Explode final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BreakableBase_Explode) == 0x000008, "Wrong alignment on BreakableBase_Explode");
static_assert(sizeof(BreakableBase_Explode) == 0x000008, "Wrong size on BreakableBase_Explode");
static_assert(offsetof(BreakableBase_Explode, player) == 0x000000, "Member 'BreakableBase_Explode::player' has a wrong offset!");

// Function DeadByDaylight.BreakableBase.ExplodeVfxSfx
// 0x000C (0x000C - 0x0000)
struct BreakableBase_ExplodeVfxSfx final
{
public:
	struct FVector                                impulseDir;                                        // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BreakableBase_ExplodeVfxSfx) == 0x000004, "Wrong alignment on BreakableBase_ExplodeVfxSfx");
static_assert(sizeof(BreakableBase_ExplodeVfxSfx) == 0x00000C, "Wrong size on BreakableBase_ExplodeVfxSfx");
static_assert(offsetof(BreakableBase_ExplodeVfxSfx, impulseDir) == 0x000000, "Member 'BreakableBase_ExplodeVfxSfx::impulseDir' has a wrong offset!");

// Function DeadByDaylight.BreakableBase.IsUnbroken
// 0x0001 (0x0001 - 0x0000)
struct BreakableBase_IsUnbroken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BreakableBase_IsUnbroken) == 0x000001, "Wrong alignment on BreakableBase_IsUnbroken");
static_assert(sizeof(BreakableBase_IsUnbroken) == 0x000001, "Wrong size on BreakableBase_IsUnbroken");
static_assert(offsetof(BreakableBase_IsUnbroken, ReturnValue) == 0x000000, "Member 'BreakableBase_IsUnbroken::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BubbleIndicator.ActivateBubbleFX
// 0x0004 (0x0004 - 0x0000)
struct BubbleIndicator_ActivateBubbleFX final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleIndicator_ActivateBubbleFX) == 0x000004, "Wrong alignment on BubbleIndicator_ActivateBubbleFX");
static_assert(sizeof(BubbleIndicator_ActivateBubbleFX) == 0x000004, "Wrong size on BubbleIndicator_ActivateBubbleFX");
static_assert(offsetof(BubbleIndicator_ActivateBubbleFX, duration) == 0x000000, "Member 'BubbleIndicator_ActivateBubbleFX::duration' has a wrong offset!");

// Function DeadByDaylight.BubbleIndicator.SetSilhouette
// 0x0008 (0x0008 - 0x0000)
struct BubbleIndicator_SetSilhouette final
{
public:
	class UStaticMesh*                            staticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleIndicator_SetSilhouette) == 0x000008, "Wrong alignment on BubbleIndicator_SetSilhouette");
static_assert(sizeof(BubbleIndicator_SetSilhouette) == 0x000008, "Wrong size on BubbleIndicator_SetSilhouette");
static_assert(offsetof(BubbleIndicator_SetSilhouette, staticMesh) == 0x000000, "Member 'BubbleIndicator_SetSilhouette::staticMesh' has a wrong offset!");

// Function DeadByDaylight.BubbleIndicatorNotifier.ActivateBubbleIndicator
// 0x0050 (0x0050 - 0x0000)
struct BubbleIndicatorNotifier_ActivateBubbleIndicator final
{
public:
	class UObject*                                worldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABubbleIndicator*                       bubbleIndicator;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             transform;                                         // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          triggerLoudNoise;                                  // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         lifetime;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         audibleRange;                                      // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BubbleIndicatorNotifier_ActivateBubbleIndicator) == 0x000010, "Wrong alignment on BubbleIndicatorNotifier_ActivateBubbleIndicator");
static_assert(sizeof(BubbleIndicatorNotifier_ActivateBubbleIndicator) == 0x000050, "Wrong size on BubbleIndicatorNotifier_ActivateBubbleIndicator");
static_assert(offsetof(BubbleIndicatorNotifier_ActivateBubbleIndicator, worldContextObject) == 0x000000, "Member 'BubbleIndicatorNotifier_ActivateBubbleIndicator::worldContextObject' has a wrong offset!");
static_assert(offsetof(BubbleIndicatorNotifier_ActivateBubbleIndicator, bubbleIndicator) == 0x000008, "Member 'BubbleIndicatorNotifier_ActivateBubbleIndicator::bubbleIndicator' has a wrong offset!");
static_assert(offsetof(BubbleIndicatorNotifier_ActivateBubbleIndicator, transform) == 0x000010, "Member 'BubbleIndicatorNotifier_ActivateBubbleIndicator::transform' has a wrong offset!");
static_assert(offsetof(BubbleIndicatorNotifier_ActivateBubbleIndicator, triggerLoudNoise) == 0x000040, "Member 'BubbleIndicatorNotifier_ActivateBubbleIndicator::triggerLoudNoise' has a wrong offset!");
static_assert(offsetof(BubbleIndicatorNotifier_ActivateBubbleIndicator, lifetime) == 0x000044, "Member 'BubbleIndicatorNotifier_ActivateBubbleIndicator::lifetime' has a wrong offset!");
static_assert(offsetof(BubbleIndicatorNotifier_ActivateBubbleIndicator, audibleRange) == 0x000048, "Member 'BubbleIndicatorNotifier_ActivateBubbleIndicator::audibleRange' has a wrong offset!");

// Function DeadByDaylight.BubbleIndicatorNotifier.PreSpawnBubbleIndicator
// 0x0020 (0x0020 - 0x0000)
struct BubbleIndicatorNotifier_PreSpawnBubbleIndicator final
{
public:
	class UObject*                                worldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABubbleIndicator>           bubbleIndicatorBP;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            silhouetteStaticMesh;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABubbleIndicator*                       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BubbleIndicatorNotifier_PreSpawnBubbleIndicator) == 0x000008, "Wrong alignment on BubbleIndicatorNotifier_PreSpawnBubbleIndicator");
static_assert(sizeof(BubbleIndicatorNotifier_PreSpawnBubbleIndicator) == 0x000020, "Wrong size on BubbleIndicatorNotifier_PreSpawnBubbleIndicator");
static_assert(offsetof(BubbleIndicatorNotifier_PreSpawnBubbleIndicator, worldContextObject) == 0x000000, "Member 'BubbleIndicatorNotifier_PreSpawnBubbleIndicator::worldContextObject' has a wrong offset!");
static_assert(offsetof(BubbleIndicatorNotifier_PreSpawnBubbleIndicator, bubbleIndicatorBP) == 0x000008, "Member 'BubbleIndicatorNotifier_PreSpawnBubbleIndicator::bubbleIndicatorBP' has a wrong offset!");
static_assert(offsetof(BubbleIndicatorNotifier_PreSpawnBubbleIndicator, silhouetteStaticMesh) == 0x000010, "Member 'BubbleIndicatorNotifier_PreSpawnBubbleIndicator::silhouetteStaticMesh' has a wrong offset!");
static_assert(offsetof(BubbleIndicatorNotifier_PreSpawnBubbleIndicator, ReturnValue) == 0x000018, "Member 'BubbleIndicatorNotifier_PreSpawnBubbleIndicator::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BubbleIndicatorNotifier.SpawnBubbleIndicator
// 0x0060 (0x0060 - 0x0000)
struct BubbleIndicatorNotifier_SpawnBubbleIndicator final
{
public:
	class UObject*                                worldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABubbleIndicator>           bubbleIndicatorBP;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             transform;                                         // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          triggerLoudNoise;                                  // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          spawnOnKillerSideOnly;                             // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         lifetime;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            silhouetteStaticMesh;                              // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         audibleRange;                                      // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BubbleIndicatorNotifier_SpawnBubbleIndicator) == 0x000010, "Wrong alignment on BubbleIndicatorNotifier_SpawnBubbleIndicator");
static_assert(sizeof(BubbleIndicatorNotifier_SpawnBubbleIndicator) == 0x000060, "Wrong size on BubbleIndicatorNotifier_SpawnBubbleIndicator");
static_assert(offsetof(BubbleIndicatorNotifier_SpawnBubbleIndicator, worldContextObject) == 0x000000, "Member 'BubbleIndicatorNotifier_SpawnBubbleIndicator::worldContextObject' has a wrong offset!");
static_assert(offsetof(BubbleIndicatorNotifier_SpawnBubbleIndicator, bubbleIndicatorBP) == 0x000008, "Member 'BubbleIndicatorNotifier_SpawnBubbleIndicator::bubbleIndicatorBP' has a wrong offset!");
static_assert(offsetof(BubbleIndicatorNotifier_SpawnBubbleIndicator, transform) == 0x000010, "Member 'BubbleIndicatorNotifier_SpawnBubbleIndicator::transform' has a wrong offset!");
static_assert(offsetof(BubbleIndicatorNotifier_SpawnBubbleIndicator, triggerLoudNoise) == 0x000040, "Member 'BubbleIndicatorNotifier_SpawnBubbleIndicator::triggerLoudNoise' has a wrong offset!");
static_assert(offsetof(BubbleIndicatorNotifier_SpawnBubbleIndicator, spawnOnKillerSideOnly) == 0x000041, "Member 'BubbleIndicatorNotifier_SpawnBubbleIndicator::spawnOnKillerSideOnly' has a wrong offset!");
static_assert(offsetof(BubbleIndicatorNotifier_SpawnBubbleIndicator, lifetime) == 0x000044, "Member 'BubbleIndicatorNotifier_SpawnBubbleIndicator::lifetime' has a wrong offset!");
static_assert(offsetof(BubbleIndicatorNotifier_SpawnBubbleIndicator, silhouetteStaticMesh) == 0x000048, "Member 'BubbleIndicatorNotifier_SpawnBubbleIndicator::silhouetteStaticMesh' has a wrong offset!");
static_assert(offsetof(BubbleIndicatorNotifier_SpawnBubbleIndicator, audibleRange) == 0x000050, "Member 'BubbleIndicatorNotifier_SpawnBubbleIndicator::audibleRange' has a wrong offset!");

// Function DeadByDaylight.CameraAttachmentComponent.IsAttached
// 0x0001 (0x0001 - 0x0000)
struct CameraAttachmentComponent_IsAttached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraAttachmentComponent_IsAttached) == 0x000001, "Wrong alignment on CameraAttachmentComponent_IsAttached");
static_assert(sizeof(CameraAttachmentComponent_IsAttached) == 0x000001, "Wrong size on CameraAttachmentComponent_IsAttached");
static_assert(offsetof(CameraAttachmentComponent_IsAttached, ReturnValue) == 0x000000, "Member 'CameraAttachmentComponent_IsAttached::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CameraFadeComponent.GetCameraFadeState
// 0x0001 (0x0001 - 0x0000)
struct CameraFadeComponent_GetCameraFadeState final
{
public:
	ECameraFadeState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraFadeComponent_GetCameraFadeState) == 0x000001, "Wrong alignment on CameraFadeComponent_GetCameraFadeState");
static_assert(sizeof(CameraFadeComponent_GetCameraFadeState) == 0x000001, "Wrong size on CameraFadeComponent_GetCameraFadeState");
static_assert(offsetof(CameraFadeComponent_GetCameraFadeState, ReturnValue) == 0x000000, "Member 'CameraFadeComponent_GetCameraFadeState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGStoreAuricCellButton.HasBonusExpired
// 0x0010 (0x0010 - 0x0000)
struct UMGStoreAuricCellButton_HasBonusExpired final
{
public:
	struct FDateTime                              endDate;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGStoreAuricCellButton_HasBonusExpired) == 0x000008, "Wrong alignment on UMGStoreAuricCellButton_HasBonusExpired");
static_assert(sizeof(UMGStoreAuricCellButton_HasBonusExpired) == 0x000010, "Wrong size on UMGStoreAuricCellButton_HasBonusExpired");
static_assert(offsetof(UMGStoreAuricCellButton_HasBonusExpired, endDate) == 0x000000, "Member 'UMGStoreAuricCellButton_HasBonusExpired::endDate' has a wrong offset!");
static_assert(offsetof(UMGStoreAuricCellButton_HasBonusExpired, ReturnValue) == 0x000008, "Member 'UMGStoreAuricCellButton_HasBonusExpired::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGStoreAuricCellButton.ReportInvalidPercentage
// 0x0004 (0x0004 - 0x0000)
struct UMGStoreAuricCellButton_ReportInvalidPercentage final
{
public:
	float                                         percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGStoreAuricCellButton_ReportInvalidPercentage) == 0x000004, "Wrong alignment on UMGStoreAuricCellButton_ReportInvalidPercentage");
static_assert(sizeof(UMGStoreAuricCellButton_ReportInvalidPercentage) == 0x000004, "Wrong size on UMGStoreAuricCellButton_ReportInvalidPercentage");
static_assert(offsetof(UMGStoreAuricCellButton_ReportInvalidPercentage, percentage) == 0x000000, "Member 'UMGStoreAuricCellButton_ReportInvalidPercentage::percentage' has a wrong offset!");

// Function DeadByDaylight.UMGStoreAuricCellButton.UpdateFirstPurchaseEndInUI
// 0x0010 (0x0010 - 0x0000)
struct UMGStoreAuricCellButton_UpdateFirstPurchaseEndInUI final
{
public:
	class FString                                 endInString;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGStoreAuricCellButton_UpdateFirstPurchaseEndInUI) == 0x000008, "Wrong alignment on UMGStoreAuricCellButton_UpdateFirstPurchaseEndInUI");
static_assert(sizeof(UMGStoreAuricCellButton_UpdateFirstPurchaseEndInUI) == 0x000010, "Wrong size on UMGStoreAuricCellButton_UpdateFirstPurchaseEndInUI");
static_assert(offsetof(UMGStoreAuricCellButton_UpdateFirstPurchaseEndInUI, endInString) == 0x000000, "Member 'UMGStoreAuricCellButton_UpdateFirstPurchaseEndInUI::endInString' has a wrong offset!");

// Function DeadByDaylight.UMGStoreAuricCellButton.UpdateWidget
// 0x0010 (0x0010 - 0x0000)
struct UMGStoreAuricCellButton_UpdateWidget final
{
public:
	int32                                         multiplier;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              endDate;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGStoreAuricCellButton_UpdateWidget) == 0x000008, "Wrong alignment on UMGStoreAuricCellButton_UpdateWidget");
static_assert(sizeof(UMGStoreAuricCellButton_UpdateWidget) == 0x000010, "Wrong size on UMGStoreAuricCellButton_UpdateWidget");
static_assert(offsetof(UMGStoreAuricCellButton_UpdateWidget, multiplier) == 0x000000, "Member 'UMGStoreAuricCellButton_UpdateWidget::multiplier' has a wrong offset!");
static_assert(offsetof(UMGStoreAuricCellButton_UpdateWidget, endDate) == 0x000008, "Member 'UMGStoreAuricCellButton_UpdateWidget::endDate' has a wrong offset!");

// Function DeadByDaylight.DBDAttackUtilities.GetCurrentAttackSubstateRemainingTime
// 0x0010 (0x0010 - 0x0000)
struct DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime final
{
public:
	const class AActor*                           attacker;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime) == 0x000008, "Wrong alignment on DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime");
static_assert(sizeof(DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime) == 0x000010, "Wrong size on DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime");
static_assert(offsetof(DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime, attacker) == 0x000000, "Member 'DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime::attacker' has a wrong offset!");
static_assert(offsetof(DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime, ReturnValue) == 0x000008, "Member 'DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAttackUtilities.GetCurrentAttackType
// 0x0010 (0x0010 - 0x0000)
struct DBDAttackUtilities_GetCurrentAttackType final
{
public:
	const class AActor*                           attacker;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackType                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAttackUtilities_GetCurrentAttackType) == 0x000008, "Wrong alignment on DBDAttackUtilities_GetCurrentAttackType");
static_assert(sizeof(DBDAttackUtilities_GetCurrentAttackType) == 0x000010, "Wrong size on DBDAttackUtilities_GetCurrentAttackType");
static_assert(offsetof(DBDAttackUtilities_GetCurrentAttackType, attacker) == 0x000000, "Member 'DBDAttackUtilities_GetCurrentAttackType::attacker' has a wrong offset!");
static_assert(offsetof(DBDAttackUtilities_GetCurrentAttackType, ReturnValue) == 0x000008, "Member 'DBDAttackUtilities_GetCurrentAttackType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.AddCameraToSocket
// 0x0010 (0x0010 - 0x0000)
struct CameraHandlerComponent_AddCameraToSocket final
{
public:
	EDBDCameraSocketID                            mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 camera;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_AddCameraToSocket) == 0x000008, "Wrong alignment on CameraHandlerComponent_AddCameraToSocket");
static_assert(sizeof(CameraHandlerComponent_AddCameraToSocket) == 0x000010, "Wrong size on CameraHandlerComponent_AddCameraToSocket");
static_assert(offsetof(CameraHandlerComponent_AddCameraToSocket, mode) == 0x000000, "Member 'CameraHandlerComponent_AddCameraToSocket::mode' has a wrong offset!");
static_assert(offsetof(CameraHandlerComponent_AddCameraToSocket, camera) == 0x000008, "Member 'CameraHandlerComponent_AddCameraToSocket::camera' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.GetCurrentCamera
// 0x0008 (0x0008 - 0x0000)
struct CameraHandlerComponent_GetCurrentCamera final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_GetCurrentCamera) == 0x000008, "Wrong alignment on CameraHandlerComponent_GetCurrentCamera");
static_assert(sizeof(CameraHandlerComponent_GetCurrentCamera) == 0x000008, "Wrong size on CameraHandlerComponent_GetCurrentCamera");
static_assert(offsetof(CameraHandlerComponent_GetCurrentCamera, ReturnValue) == 0x000000, "Member 'CameraHandlerComponent_GetCurrentCamera::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.GetSocketID
// 0x0001 (0x0001 - 0x0000)
struct CameraHandlerComponent_GetSocketID final
{
public:
	EDBDCameraSocketID                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_GetSocketID) == 0x000001, "Wrong alignment on CameraHandlerComponent_GetSocketID");
static_assert(sizeof(CameraHandlerComponent_GetSocketID) == 0x000001, "Wrong size on CameraHandlerComponent_GetSocketID");
static_assert(offsetof(CameraHandlerComponent_GetSocketID, ReturnValue) == 0x000000, "Member 'CameraHandlerComponent_GetSocketID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.PlayVFXOnCurrentCamera
// 0x0008 (0x0008 - 0x0000)
struct CameraHandlerComponent_PlayVFXOnCurrentCamera final
{
public:
	class UParticleSystemComponent*               component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_PlayVFXOnCurrentCamera) == 0x000008, "Wrong alignment on CameraHandlerComponent_PlayVFXOnCurrentCamera");
static_assert(sizeof(CameraHandlerComponent_PlayVFXOnCurrentCamera) == 0x000008, "Wrong size on CameraHandlerComponent_PlayVFXOnCurrentCamera");
static_assert(offsetof(CameraHandlerComponent_PlayVFXOnCurrentCamera, component) == 0x000000, "Member 'CameraHandlerComponent_PlayVFXOnCurrentCamera::component' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.SetAttachmentComponent
// 0x0008 (0x0008 - 0x0000)
struct CameraHandlerComponent_SetAttachmentComponent final
{
public:
	class USceneComponent*                        attachmentComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_SetAttachmentComponent) == 0x000008, "Wrong alignment on CameraHandlerComponent_SetAttachmentComponent");
static_assert(sizeof(CameraHandlerComponent_SetAttachmentComponent) == 0x000008, "Wrong size on CameraHandlerComponent_SetAttachmentComponent");
static_assert(offsetof(CameraHandlerComponent_SetAttachmentComponent, attachmentComponent) == 0x000000, "Member 'CameraHandlerComponent_SetAttachmentComponent::attachmentComponent' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.SetSocketID
// 0x0001 (0x0001 - 0x0000)
struct CameraHandlerComponent_SetSocketID final
{
public:
	EDBDCameraSocketID                            mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_SetSocketID) == 0x000001, "Wrong alignment on CameraHandlerComponent_SetSocketID");
static_assert(sizeof(CameraHandlerComponent_SetSocketID) == 0x000001, "Wrong size on CameraHandlerComponent_SetSocketID");
static_assert(offsetof(CameraHandlerComponent_SetSocketID, mode) == 0x000000, "Member 'CameraHandlerComponent_SetSocketID::mode' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.GetDesiredFOV
// 0x0004 (0x0004 - 0x0000)
struct CameraHandlerComponent_GetDesiredFOV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_GetDesiredFOV) == 0x000004, "Wrong alignment on CameraHandlerComponent_GetDesiredFOV");
static_assert(sizeof(CameraHandlerComponent_GetDesiredFOV) == 0x000004, "Wrong size on CameraHandlerComponent_GetDesiredFOV");
static_assert(offsetof(CameraHandlerComponent_GetDesiredFOV, ReturnValue) == 0x000000, "Member 'CameraHandlerComponent_GetDesiredFOV::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAtlantaInputHandler.SetVirtualJoystickCenter
// 0x000C (0x000C - 0x0000)
struct DBDAtlantaInputHandler_SetVirtualJoystickCenter final
{
public:
	int32                                         controlIndex;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              controlCenter;                                     // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAtlantaInputHandler_SetVirtualJoystickCenter) == 0x000004, "Wrong alignment on DBDAtlantaInputHandler_SetVirtualJoystickCenter");
static_assert(sizeof(DBDAtlantaInputHandler_SetVirtualJoystickCenter) == 0x00000C, "Wrong size on DBDAtlantaInputHandler_SetVirtualJoystickCenter");
static_assert(offsetof(DBDAtlantaInputHandler_SetVirtualJoystickCenter, controlIndex) == 0x000000, "Member 'DBDAtlantaInputHandler_SetVirtualJoystickCenter::controlIndex' has a wrong offset!");
static_assert(offsetof(DBDAtlantaInputHandler_SetVirtualJoystickCenter, controlCenter) == 0x000004, "Member 'DBDAtlantaInputHandler_SetVirtualJoystickCenter::controlCenter' has a wrong offset!");

// Function DeadByDaylight.DBDAtlantaInputHandler.GetVirtualJoystickNormalizedOffset
// 0x000C (0x000C - 0x0000)
struct DBDAtlantaInputHandler_GetVirtualJoystickNormalizedOffset final
{
public:
	int32                                         controlIndex;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAtlantaInputHandler_GetVirtualJoystickNormalizedOffset) == 0x000004, "Wrong alignment on DBDAtlantaInputHandler_GetVirtualJoystickNormalizedOffset");
static_assert(sizeof(DBDAtlantaInputHandler_GetVirtualJoystickNormalizedOffset) == 0x00000C, "Wrong size on DBDAtlantaInputHandler_GetVirtualJoystickNormalizedOffset");
static_assert(offsetof(DBDAtlantaInputHandler_GetVirtualJoystickNormalizedOffset, controlIndex) == 0x000000, "Member 'DBDAtlantaInputHandler_GetVirtualJoystickNormalizedOffset::controlIndex' has a wrong offset!");
static_assert(offsetof(DBDAtlantaInputHandler_GetVirtualJoystickNormalizedOffset, ReturnValue) == 0x000004, "Member 'DBDAtlantaInputHandler_GetVirtualJoystickNormalizedOffset::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAtlantaInputHandler.GetVirtualJoystickPosition
// 0x000C (0x000C - 0x0000)
struct DBDAtlantaInputHandler_GetVirtualJoystickPosition final
{
public:
	int32                                         controlIndex;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAtlantaInputHandler_GetVirtualJoystickPosition) == 0x000004, "Wrong alignment on DBDAtlantaInputHandler_GetVirtualJoystickPosition");
static_assert(sizeof(DBDAtlantaInputHandler_GetVirtualJoystickPosition) == 0x00000C, "Wrong size on DBDAtlantaInputHandler_GetVirtualJoystickPosition");
static_assert(offsetof(DBDAtlantaInputHandler_GetVirtualJoystickPosition, controlIndex) == 0x000000, "Member 'DBDAtlantaInputHandler_GetVirtualJoystickPosition::controlIndex' has a wrong offset!");
static_assert(offsetof(DBDAtlantaInputHandler_GetVirtualJoystickPosition, ReturnValue) == 0x000004, "Member 'DBDAtlantaInputHandler_GetVirtualJoystickPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAtlantaInputHandler.GetVirtualJoystickVisualCenter
// 0x000C (0x000C - 0x0000)
struct DBDAtlantaInputHandler_GetVirtualJoystickVisualCenter final
{
public:
	int32                                         controlIndex;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAtlantaInputHandler_GetVirtualJoystickVisualCenter) == 0x000004, "Wrong alignment on DBDAtlantaInputHandler_GetVirtualJoystickVisualCenter");
static_assert(sizeof(DBDAtlantaInputHandler_GetVirtualJoystickVisualCenter) == 0x00000C, "Wrong size on DBDAtlantaInputHandler_GetVirtualJoystickVisualCenter");
static_assert(offsetof(DBDAtlantaInputHandler_GetVirtualJoystickVisualCenter, controlIndex) == 0x000000, "Member 'DBDAtlantaInputHandler_GetVirtualJoystickVisualCenter::controlIndex' has a wrong offset!");
static_assert(offsetof(DBDAtlantaInputHandler_GetVirtualJoystickVisualCenter, ReturnValue) == 0x000004, "Member 'DBDAtlantaInputHandler_GetVirtualJoystickVisualCenter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAtlantaInputHandler.GetVirtualJoystickVisualSize
// 0x000C (0x000C - 0x0000)
struct DBDAtlantaInputHandler_GetVirtualJoystickVisualSize final
{
public:
	int32                                         controlIndex;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAtlantaInputHandler_GetVirtualJoystickVisualSize) == 0x000004, "Wrong alignment on DBDAtlantaInputHandler_GetVirtualJoystickVisualSize");
static_assert(sizeof(DBDAtlantaInputHandler_GetVirtualJoystickVisualSize) == 0x00000C, "Wrong size on DBDAtlantaInputHandler_GetVirtualJoystickVisualSize");
static_assert(offsetof(DBDAtlantaInputHandler_GetVirtualJoystickVisualSize, controlIndex) == 0x000000, "Member 'DBDAtlantaInputHandler_GetVirtualJoystickVisualSize::controlIndex' has a wrong offset!");
static_assert(offsetof(DBDAtlantaInputHandler_GetVirtualJoystickVisualSize, ReturnValue) == 0x000004, "Member 'DBDAtlantaInputHandler_GetVirtualJoystickVisualSize::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperBloodTrailComponent.OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct CamperBloodTrailComponent_OnDamageStateChanged final
{
public:
	ECamperDamageState                            oldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            currentDamageState;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperBloodTrailComponent_OnDamageStateChanged) == 0x000001, "Wrong alignment on CamperBloodTrailComponent_OnDamageStateChanged");
static_assert(sizeof(CamperBloodTrailComponent_OnDamageStateChanged) == 0x000002, "Wrong size on CamperBloodTrailComponent_OnDamageStateChanged");
static_assert(offsetof(CamperBloodTrailComponent_OnDamageStateChanged, oldDamageState) == 0x000000, "Member 'CamperBloodTrailComponent_OnDamageStateChanged::oldDamageState' has a wrong offset!");
static_assert(offsetof(CamperBloodTrailComponent_OnDamageStateChanged, currentDamageState) == 0x000001, "Member 'CamperBloodTrailComponent_OnDamageStateChanged::currentDamageState' has a wrong offset!");

// Function DeadByDaylight.CharacterDreamworldComponent.GetLocallyObservedOrLocalCharacter
// 0x0010 (0x0010 - 0x0000)
struct CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter) == 0x000008, "Wrong alignment on CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter");
static_assert(sizeof(CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter) == 0x000010, "Wrong size on CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter");
static_assert(offsetof(CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter, WorldContextObject) == 0x000000, "Member 'CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter, ReturnValue) == 0x000008, "Member 'CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterDreamworldComponent.Authority_SetIsInDreamworld
// 0x0002 (0x0002 - 0x0000)
struct CharacterDreamworldComponent_Authority_SetIsInDreamworld final
{
public:
	bool                                          newValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isScripted;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_Authority_SetIsInDreamworld) == 0x000001, "Wrong alignment on CharacterDreamworldComponent_Authority_SetIsInDreamworld");
static_assert(sizeof(CharacterDreamworldComponent_Authority_SetIsInDreamworld) == 0x000002, "Wrong size on CharacterDreamworldComponent_Authority_SetIsInDreamworld");
static_assert(offsetof(CharacterDreamworldComponent_Authority_SetIsInDreamworld, newValue) == 0x000000, "Member 'CharacterDreamworldComponent_Authority_SetIsInDreamworld::newValue' has a wrong offset!");
static_assert(offsetof(CharacterDreamworldComponent_Authority_SetIsInDreamworld, isScripted) == 0x000001, "Member 'CharacterDreamworldComponent_Authority_SetIsInDreamworld::isScripted' has a wrong offset!");

// Function DeadByDaylight.CharacterDreamworldComponent.FireWakeUpScoreEvent
// 0x0008 (0x0008 - 0x0000)
struct CharacterDreamworldComponent_FireWakeUpScoreEvent final
{
public:
	class ADBDPlayer*                             instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_FireWakeUpScoreEvent) == 0x000008, "Wrong alignment on CharacterDreamworldComponent_FireWakeUpScoreEvent");
static_assert(sizeof(CharacterDreamworldComponent_FireWakeUpScoreEvent) == 0x000008, "Wrong size on CharacterDreamworldComponent_FireWakeUpScoreEvent");
static_assert(offsetof(CharacterDreamworldComponent_FireWakeUpScoreEvent, instigator) == 0x000000, "Member 'CharacterDreamworldComponent_FireWakeUpScoreEvent::instigator' has a wrong offset!");

// Function DeadByDaylight.CharacterDreamworldComponent.OnRep_IsInDreamworld
// 0x0001 (0x0001 - 0x0000)
struct CharacterDreamworldComponent_OnRep_IsInDreamworld final
{
public:
	bool                                          previous;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_OnRep_IsInDreamworld) == 0x000001, "Wrong alignment on CharacterDreamworldComponent_OnRep_IsInDreamworld");
static_assert(sizeof(CharacterDreamworldComponent_OnRep_IsInDreamworld) == 0x000001, "Wrong size on CharacterDreamworldComponent_OnRep_IsInDreamworld");
static_assert(offsetof(CharacterDreamworldComponent_OnRep_IsInDreamworld, previous) == 0x000000, "Member 'CharacterDreamworldComponent_OnRep_IsInDreamworld::previous' has a wrong offset!");

// Function DeadByDaylight.CharacterDreamworldComponent.IsInDreamworld
// 0x0001 (0x0001 - 0x0000)
struct CharacterDreamworldComponent_IsInDreamworld final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_IsInDreamworld) == 0x000001, "Wrong alignment on CharacterDreamworldComponent_IsInDreamworld");
static_assert(sizeof(CharacterDreamworldComponent_IsInDreamworld) == 0x000001, "Wrong size on CharacterDreamworldComponent_IsInDreamworld");
static_assert(offsetof(CharacterDreamworldComponent_IsInDreamworld, ReturnValue) == 0x000000, "Member 'CharacterDreamworldComponent_IsInDreamworld::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterDreamworldComponent.ShouldShowVignette
// 0x0001 (0x0001 - 0x0000)
struct CharacterDreamworldComponent_ShouldShowVignette final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_ShouldShowVignette) == 0x000001, "Wrong alignment on CharacterDreamworldComponent_ShouldShowVignette");
static_assert(sizeof(CharacterDreamworldComponent_ShouldShowVignette) == 0x000001, "Wrong size on CharacterDreamworldComponent_ShouldShowVignette");
static_assert(offsetof(CharacterDreamworldComponent_ShouldShowVignette, ReturnValue) == 0x000000, "Member 'CharacterDreamworldComponent_ShouldShowVignette::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.Authority_HandleSkillCheckFailure
// 0x0010 (0x0010 - 0x0000)
struct CamperDreamworldComponent_Authority_HandleSkillCheckFailure final
{
public:
	bool                                          wakeUpEveryoneInteracting;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_Authority_HandleSkillCheckFailure) == 0x000008, "Wrong alignment on CamperDreamworldComponent_Authority_HandleSkillCheckFailure");
static_assert(sizeof(CamperDreamworldComponent_Authority_HandleSkillCheckFailure) == 0x000010, "Wrong size on CamperDreamworldComponent_Authority_HandleSkillCheckFailure");
static_assert(offsetof(CamperDreamworldComponent_Authority_HandleSkillCheckFailure, wakeUpEveryoneInteracting) == 0x000000, "Member 'CamperDreamworldComponent_Authority_HandleSkillCheckFailure::wakeUpEveryoneInteracting' has a wrong offset!");
static_assert(offsetof(CamperDreamworldComponent_Authority_HandleSkillCheckFailure, instigator) == 0x000008, "Member 'CamperDreamworldComponent_Authority_HandleSkillCheckFailure::instigator' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.Authority_WakeUpByOther
// 0x0008 (0x0008 - 0x0000)
struct CamperDreamworldComponent_Authority_WakeUpByOther final
{
public:
	class ADBDPlayer*                             instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_Authority_WakeUpByOther) == 0x000008, "Wrong alignment on CamperDreamworldComponent_Authority_WakeUpByOther");
static_assert(sizeof(CamperDreamworldComponent_Authority_WakeUpByOther) == 0x000008, "Wrong size on CamperDreamworldComponent_Authority_WakeUpByOther");
static_assert(offsetof(CamperDreamworldComponent_Authority_WakeUpByOther, instigator) == 0x000000, "Member 'CamperDreamworldComponent_Authority_WakeUpByOther::instigator' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.BroadcastCamperTriggeredDreamTrap
// 0x0008 (0x0008 - 0x0000)
struct CamperDreamworldComponent_BroadcastCamperTriggeredDreamTrap final
{
public:
	class AActor*                                 dreamObject;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_BroadcastCamperTriggeredDreamTrap) == 0x000008, "Wrong alignment on CamperDreamworldComponent_BroadcastCamperTriggeredDreamTrap");
static_assert(sizeof(CamperDreamworldComponent_BroadcastCamperTriggeredDreamTrap) == 0x000008, "Wrong size on CamperDreamworldComponent_BroadcastCamperTriggeredDreamTrap");
static_assert(offsetof(CamperDreamworldComponent_BroadcastCamperTriggeredDreamTrap, dreamObject) == 0x000000, "Member 'CamperDreamworldComponent_BroadcastCamperTriggeredDreamTrap::dreamObject' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.HandleShowKillerChanged
// 0x0002 (0x0002 - 0x0000)
struct CamperDreamworldComponent_HandleShowKillerChanged final
{
public:
	bool                                          showKiller;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          instantly;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_HandleShowKillerChanged) == 0x000001, "Wrong alignment on CamperDreamworldComponent_HandleShowKillerChanged");
static_assert(sizeof(CamperDreamworldComponent_HandleShowKillerChanged) == 0x000002, "Wrong size on CamperDreamworldComponent_HandleShowKillerChanged");
static_assert(offsetof(CamperDreamworldComponent_HandleShowKillerChanged, showKiller) == 0x000000, "Member 'CamperDreamworldComponent_HandleShowKillerChanged::showKiller' has a wrong offset!");
static_assert(offsetof(CamperDreamworldComponent_HandleShowKillerChanged, instantly) == 0x000001, "Member 'CamperDreamworldComponent_HandleShowKillerChanged::instantly' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.InitializeTunableValues
// 0x0008 (0x0008 - 0x0000)
struct CamperDreamworldComponent_InitializeTunableValues final
{
public:
	class ASlasherPlayer*                         killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_InitializeTunableValues) == 0x000008, "Wrong alignment on CamperDreamworldComponent_InitializeTunableValues");
static_assert(sizeof(CamperDreamworldComponent_InitializeTunableValues) == 0x000008, "Wrong size on CamperDreamworldComponent_InitializeTunableValues");
static_assert(offsetof(CamperDreamworldComponent_InitializeTunableValues, killer) == 0x000000, "Member 'CamperDreamworldComponent_InitializeTunableValues::killer' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.Local_SetShowKiller
// 0x0002 (0x0002 - 0x0000)
struct CamperDreamworldComponent_Local_SetShowKiller final
{
public:
	bool                                          showKiller;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          instantly;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_Local_SetShowKiller) == 0x000001, "Wrong alignment on CamperDreamworldComponent_Local_SetShowKiller");
static_assert(sizeof(CamperDreamworldComponent_Local_SetShowKiller) == 0x000002, "Wrong size on CamperDreamworldComponent_Local_SetShowKiller");
static_assert(offsetof(CamperDreamworldComponent_Local_SetShowKiller, showKiller) == 0x000000, "Member 'CamperDreamworldComponent_Local_SetShowKiller::showKiller' has a wrong offset!");
static_assert(offsetof(CamperDreamworldComponent_Local_SetShowKiller, instantly) == 0x000001, "Member 'CamperDreamworldComponent_Local_SetShowKiller::instantly' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.SetScriptedKillerVisibility
// 0x0001 (0x0001 - 0x0000)
struct CamperDreamworldComponent_SetScriptedKillerVisibility final
{
public:
	bool                                          useScriptedKillerVisibility;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_SetScriptedKillerVisibility) == 0x000001, "Wrong alignment on CamperDreamworldComponent_SetScriptedKillerVisibility");
static_assert(sizeof(CamperDreamworldComponent_SetScriptedKillerVisibility) == 0x000001, "Wrong size on CamperDreamworldComponent_SetScriptedKillerVisibility");
static_assert(offsetof(CamperDreamworldComponent_SetScriptedKillerVisibility, useScriptedKillerVisibility) == 0x000000, "Member 'CamperDreamworldComponent_SetScriptedKillerVisibility::useScriptedKillerVisibility' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.Authority_GetFellAsleepCount
// 0x0004 (0x0004 - 0x0000)
struct CamperDreamworldComponent_Authority_GetFellAsleepCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_Authority_GetFellAsleepCount) == 0x000004, "Wrong alignment on CamperDreamworldComponent_Authority_GetFellAsleepCount");
static_assert(sizeof(CamperDreamworldComponent_Authority_GetFellAsleepCount) == 0x000004, "Wrong size on CamperDreamworldComponent_Authority_GetFellAsleepCount");
static_assert(offsetof(CamperDreamworldComponent_Authority_GetFellAsleepCount, ReturnValue) == 0x000000, "Member 'CamperDreamworldComponent_Authority_GetFellAsleepCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.Authority_GetWakeUpBySkillCheckCount
// 0x0004 (0x0004 - 0x0000)
struct CamperDreamworldComponent_Authority_GetWakeUpBySkillCheckCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_Authority_GetWakeUpBySkillCheckCount) == 0x000004, "Wrong alignment on CamperDreamworldComponent_Authority_GetWakeUpBySkillCheckCount");
static_assert(sizeof(CamperDreamworldComponent_Authority_GetWakeUpBySkillCheckCount) == 0x000004, "Wrong size on CamperDreamworldComponent_Authority_GetWakeUpBySkillCheckCount");
static_assert(offsetof(CamperDreamworldComponent_Authority_GetWakeUpBySkillCheckCount, ReturnValue) == 0x000000, "Member 'CamperDreamworldComponent_Authority_GetWakeUpBySkillCheckCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.CanWakeUp
// 0x0001 (0x0001 - 0x0000)
struct CamperDreamworldComponent_CanWakeUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_CanWakeUp) == 0x000001, "Wrong alignment on CamperDreamworldComponent_CanWakeUp");
static_assert(sizeof(CamperDreamworldComponent_CanWakeUp) == 0x000001, "Wrong size on CamperDreamworldComponent_CanWakeUp");
static_assert(offsetof(CamperDreamworldComponent_CanWakeUp, ReturnValue) == 0x000000, "Member 'CamperDreamworldComponent_CanWakeUp::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.CanWakeUpBySkillCheck
// 0x0001 (0x0001 - 0x0000)
struct CamperDreamworldComponent_CanWakeUpBySkillCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_CanWakeUpBySkillCheck) == 0x000001, "Wrong alignment on CamperDreamworldComponent_CanWakeUpBySkillCheck");
static_assert(sizeof(CamperDreamworldComponent_CanWakeUpBySkillCheck) == 0x000001, "Wrong size on CamperDreamworldComponent_CanWakeUpBySkillCheck");
static_assert(offsetof(CamperDreamworldComponent_CanWakeUpBySkillCheck, ReturnValue) == 0x000000, "Member 'CamperDreamworldComponent_CanWakeUpBySkillCheck::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.GetWakeUpByOtherCount
// 0x0004 (0x0004 - 0x0000)
struct CamperDreamworldComponent_GetWakeUpByOtherCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_GetWakeUpByOtherCount) == 0x000004, "Wrong alignment on CamperDreamworldComponent_GetWakeUpByOtherCount");
static_assert(sizeof(CamperDreamworldComponent_GetWakeUpByOtherCount) == 0x000004, "Wrong size on CamperDreamworldComponent_GetWakeUpByOtherCount");
static_assert(offsetof(CamperDreamworldComponent_GetWakeUpByOtherCount, ReturnValue) == 0x000000, "Member 'CamperDreamworldComponent_GetWakeUpByOtherCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.ShouldLookSleepyToLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct CamperDreamworldComponent_ShouldLookSleepyToLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_ShouldLookSleepyToLocalPlayer) == 0x000001, "Wrong alignment on CamperDreamworldComponent_ShouldLookSleepyToLocalPlayer");
static_assert(sizeof(CamperDreamworldComponent_ShouldLookSleepyToLocalPlayer) == 0x000001, "Wrong size on CamperDreamworldComponent_ShouldLookSleepyToLocalPlayer");
static_assert(offsetof(CamperDreamworldComponent_ShouldLookSleepyToLocalPlayer, ReturnValue) == 0x000000, "Member 'CamperDreamworldComponent_ShouldLookSleepyToLocalPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperEndGameComponent.GetSacrificedByEndGame
// 0x0001 (0x0001 - 0x0000)
struct CamperEndGameComponent_GetSacrificedByEndGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperEndGameComponent_GetSacrificedByEndGame) == 0x000001, "Wrong alignment on CamperEndGameComponent_GetSacrificedByEndGame");
static_assert(sizeof(CamperEndGameComponent_GetSacrificedByEndGame) == 0x000001, "Wrong size on CamperEndGameComponent_GetSacrificedByEndGame");
static_assert(offsetof(CamperEndGameComponent_GetSacrificedByEndGame, ReturnValue) == 0x000000, "Member 'CamperEndGameComponent_GetSacrificedByEndGame::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGPlayerStatusIcon.SetReverseTrapProgressionTimer
// 0x0004 (0x0004 - 0x0000)
struct UMGPlayerStatusIcon_SetReverseTrapProgressionTimer final
{
public:
	float                                         seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGPlayerStatusIcon_SetReverseTrapProgressionTimer) == 0x000004, "Wrong alignment on UMGPlayerStatusIcon_SetReverseTrapProgressionTimer");
static_assert(sizeof(UMGPlayerStatusIcon_SetReverseTrapProgressionTimer) == 0x000004, "Wrong size on UMGPlayerStatusIcon_SetReverseTrapProgressionTimer");
static_assert(offsetof(UMGPlayerStatusIcon_SetReverseTrapProgressionTimer, seconds) == 0x000000, "Member 'UMGPlayerStatusIcon_SetReverseTrapProgressionTimer::seconds' has a wrong offset!");

// Function DeadByDaylight.UMGPlayerStatusIcon.SetSleepingTimer
// 0x0004 (0x0004 - 0x0000)
struct UMGPlayerStatusIcon_SetSleepingTimer final
{
public:
	float                                         progress;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGPlayerStatusIcon_SetSleepingTimer) == 0x000004, "Wrong alignment on UMGPlayerStatusIcon_SetSleepingTimer");
static_assert(sizeof(UMGPlayerStatusIcon_SetSleepingTimer) == 0x000004, "Wrong size on UMGPlayerStatusIcon_SetSleepingTimer");
static_assert(offsetof(UMGPlayerStatusIcon_SetSleepingTimer, progress) == 0x000000, "Member 'UMGPlayerStatusIcon_SetSleepingTimer::progress' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementUtilities.Local_AddMaxSpeedMultiplierCurve
// 0x0018 (0x0018 - 0x0000)
struct DBDCharacterMovementUtilities_Local_AddMaxSpeedMultiplierCurve final
{
public:
	class ACharacter*                             character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UCurveFloat*                      curve;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          autoReset;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterMovementUtilities_Local_AddMaxSpeedMultiplierCurve) == 0x000008, "Wrong alignment on DBDCharacterMovementUtilities_Local_AddMaxSpeedMultiplierCurve");
static_assert(sizeof(DBDCharacterMovementUtilities_Local_AddMaxSpeedMultiplierCurve) == 0x000018, "Wrong size on DBDCharacterMovementUtilities_Local_AddMaxSpeedMultiplierCurve");
static_assert(offsetof(DBDCharacterMovementUtilities_Local_AddMaxSpeedMultiplierCurve, character) == 0x000000, "Member 'DBDCharacterMovementUtilities_Local_AddMaxSpeedMultiplierCurve::character' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementUtilities_Local_AddMaxSpeedMultiplierCurve, curve) == 0x000008, "Member 'DBDCharacterMovementUtilities_Local_AddMaxSpeedMultiplierCurve::curve' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementUtilities_Local_AddMaxSpeedMultiplierCurve, duration) == 0x000010, "Member 'DBDCharacterMovementUtilities_Local_AddMaxSpeedMultiplierCurve::duration' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementUtilities_Local_AddMaxSpeedMultiplierCurve, autoReset) == 0x000014, "Member 'DBDCharacterMovementUtilities_Local_AddMaxSpeedMultiplierCurve::autoReset' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementUtilities.Local_RemoveMaxSpeedMultiplierCurve
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterMovementUtilities_Local_RemoveMaxSpeedMultiplierCurve final
{
public:
	class ACharacter*                             character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UCurveFloat*                      curveToReset;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementUtilities_Local_RemoveMaxSpeedMultiplierCurve) == 0x000008, "Wrong alignment on DBDCharacterMovementUtilities_Local_RemoveMaxSpeedMultiplierCurve");
static_assert(sizeof(DBDCharacterMovementUtilities_Local_RemoveMaxSpeedMultiplierCurve) == 0x000010, "Wrong size on DBDCharacterMovementUtilities_Local_RemoveMaxSpeedMultiplierCurve");
static_assert(offsetof(DBDCharacterMovementUtilities_Local_RemoveMaxSpeedMultiplierCurve, character) == 0x000000, "Member 'DBDCharacterMovementUtilities_Local_RemoveMaxSpeedMultiplierCurve::character' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementUtilities_Local_RemoveMaxSpeedMultiplierCurve, curveToReset) == 0x000008, "Member 'DBDCharacterMovementUtilities_Local_RemoveMaxSpeedMultiplierCurve::curveToReset' has a wrong offset!");

// Function DeadByDaylight.CamperExposerInstance.SetIsInteriorBP
// 0x0001 (0x0001 - 0x0000)
struct CamperExposerInstance_SetIsInteriorBP final
{
public:
	bool                                          interior;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperExposerInstance_SetIsInteriorBP) == 0x000001, "Wrong alignment on CamperExposerInstance_SetIsInteriorBP");
static_assert(sizeof(CamperExposerInstance_SetIsInteriorBP) == 0x000001, "Wrong size on CamperExposerInstance_SetIsInteriorBP");
static_assert(offsetof(CamperExposerInstance_SetIsInteriorBP, interior) == 0x000000, "Member 'CamperExposerInstance_SetIsInteriorBP::interior' has a wrong offset!");

// Function DeadByDaylight.CamperExposerInstance.StartExitSequence
// 0x0001 (0x0001 - 0x0000)
struct CamperExposerInstance_StartExitSequence final
{
public:
	bool                                          withRandomDelay;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperExposerInstance_StartExitSequence) == 0x000001, "Wrong alignment on CamperExposerInstance_StartExitSequence");
static_assert(sizeof(CamperExposerInstance_StartExitSequence) == 0x000001, "Wrong size on CamperExposerInstance_StartExitSequence");
static_assert(offsetof(CamperExposerInstance_StartExitSequence, withRandomDelay) == 0x000000, "Member 'CamperExposerInstance_StartExitSequence::withRandomDelay' has a wrong offset!");

// Function DeadByDaylight.CamperExposerInstance.StartSpawnSequence
// 0x0001 (0x0001 - 0x0000)
struct CamperExposerInstance_StartSpawnSequence final
{
public:
	bool                                          withRandomDelay;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperExposerInstance_StartSpawnSequence) == 0x000001, "Wrong alignment on CamperExposerInstance_StartSpawnSequence");
static_assert(sizeof(CamperExposerInstance_StartSpawnSequence) == 0x000001, "Wrong size on CamperExposerInstance_StartSpawnSequence");
static_assert(offsetof(CamperExposerInstance_StartSpawnSequence, withRandomDelay) == 0x000000, "Member 'CamperExposerInstance_StartSpawnSequence::withRandomDelay' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_ApplyDamage
// 0x0010 (0x0010 - 0x0000)
struct CamperHealthComponent_Authority_ApplyDamage final
{
public:
	class AActor*                                 damageSource;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             damagePlayerOwner;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_ApplyDamage) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_ApplyDamage");
static_assert(sizeof(CamperHealthComponent_Authority_ApplyDamage) == 0x000010, "Wrong size on CamperHealthComponent_Authority_ApplyDamage");
static_assert(offsetof(CamperHealthComponent_Authority_ApplyDamage, damageSource) == 0x000000, "Member 'CamperHealthComponent_Authority_ApplyDamage::damageSource' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_ApplyDamage, damagePlayerOwner) == 0x000008, "Member 'CamperHealthComponent_Authority_ApplyDamage::damagePlayerOwner' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_ApplyDeepWound
// 0x0010 (0x0010 - 0x0000)
struct CamperHealthComponent_Authority_ApplyDeepWound final
{
public:
	class AActor*                                 damageSource;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             damagePlayerOwner;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_ApplyDeepWound) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_ApplyDeepWound");
static_assert(sizeof(CamperHealthComponent_Authority_ApplyDeepWound) == 0x000010, "Wrong size on CamperHealthComponent_Authority_ApplyDeepWound");
static_assert(offsetof(CamperHealthComponent_Authority_ApplyDeepWound, damageSource) == 0x000000, "Member 'CamperHealthComponent_Authority_ApplyDeepWound::damageSource' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_ApplyDeepWound, damagePlayerOwner) == 0x000008, "Member 'CamperHealthComponent_Authority_ApplyDeepWound::damagePlayerOwner' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_ApplyDoubleDamage
// 0x0010 (0x0010 - 0x0000)
struct CamperHealthComponent_Authority_ApplyDoubleDamage final
{
public:
	class AActor*                                 damageSource;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             damagePlayerOwner;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_ApplyDoubleDamage) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_ApplyDoubleDamage");
static_assert(sizeof(CamperHealthComponent_Authority_ApplyDoubleDamage) == 0x000010, "Wrong size on CamperHealthComponent_Authority_ApplyDoubleDamage");
static_assert(offsetof(CamperHealthComponent_Authority_ApplyDoubleDamage, damageSource) == 0x000000, "Member 'CamperHealthComponent_Authority_ApplyDoubleDamage::damageSource' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_ApplyDoubleDamage, damagePlayerOwner) == 0x000008, "Member 'CamperHealthComponent_Authority_ApplyDoubleDamage::damagePlayerOwner' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_HealTryGrantScoresOnChargeApplied
// 0x0018 (0x0018 - 0x0000)
struct CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied final
{
public:
	float                                         individualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         totalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 chargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          wasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         deltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied");
static_assert(sizeof(CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied) == 0x000018, "Wrong size on CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied");
static_assert(offsetof(CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied, individualChargeAmount) == 0x000000, "Member 'CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied::individualChargeAmount' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied, totalChargeAmount) == 0x000004, "Member 'CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied::totalChargeAmount' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied, chargeInstigator) == 0x000008, "Member 'CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied::chargeInstigator' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied, wasCoop) == 0x000010, "Member 'CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied::wasCoop' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied, deltaTime) == 0x000014, "Member 'CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied::deltaTime' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_MendTryGrantScoresOnChargeApplied
// 0x0018 (0x0018 - 0x0000)
struct CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied final
{
public:
	float                                         individualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         totalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 chargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          wasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         deltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied");
static_assert(sizeof(CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied) == 0x000018, "Wrong size on CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied");
static_assert(offsetof(CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied, individualChargeAmount) == 0x000000, "Member 'CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied::individualChargeAmount' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied, totalChargeAmount) == 0x000004, "Member 'CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied::totalChargeAmount' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied, chargeInstigator) == 0x000008, "Member 'CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied::chargeInstigator' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied, wasCoop) == 0x000010, "Member 'CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied::wasCoop' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied, deltaTime) == 0x000014, "Member 'CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied::deltaTime' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_OnHealthBarCharged
// 0x0018 (0x0018 - 0x0000)
struct CamperHealthComponent_Authority_OnHealthBarCharged final
{
public:
	bool                                          complete;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         instigators;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_OnHealthBarCharged) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_OnHealthBarCharged");
static_assert(sizeof(CamperHealthComponent_Authority_OnHealthBarCharged) == 0x000018, "Wrong size on CamperHealthComponent_Authority_OnHealthBarCharged");
static_assert(offsetof(CamperHealthComponent_Authority_OnHealthBarCharged, complete) == 0x000000, "Member 'CamperHealthComponent_Authority_OnHealthBarCharged::complete' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_OnHealthBarCharged, instigators) == 0x000008, "Member 'CamperHealthComponent_Authority_OnHealthBarCharged::instigators' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_OnMendChargeCompletionStateChanged
// 0x0018 (0x0018 - 0x0000)
struct CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged final
{
public:
	bool                                          complete;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         instigators;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged");
static_assert(sizeof(CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged) == 0x000018, "Wrong size on CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged");
static_assert(offsetof(CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged, complete) == 0x000000, "Member 'CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged::complete' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged, instigators) == 0x000008, "Member 'CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged::instigators' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_OnSurvivorRemoved
// 0x0008 (0x0008 - 0x0000)
struct CamperHealthComponent_Authority_OnSurvivorRemoved final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_OnSurvivorRemoved) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_OnSurvivorRemoved");
static_assert(sizeof(CamperHealthComponent_Authority_OnSurvivorRemoved) == 0x000008, "Wrong size on CamperHealthComponent_Authority_OnSurvivorRemoved");
static_assert(offsetof(CamperHealthComponent_Authority_OnSurvivorRemoved, survivor) == 0x000000, "Member 'CamperHealthComponent_Authority_OnSurvivorRemoved::survivor' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_SetDamageState
// 0x0003 (0x0003 - 0x0000)
struct CamperHealthComponent_Authority_SetDamageState final
{
public:
	ECamperDamageState                            damageState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fireScoreEvent;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          sacrificed;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_SetDamageState) == 0x000001, "Wrong alignment on CamperHealthComponent_Authority_SetDamageState");
static_assert(sizeof(CamperHealthComponent_Authority_SetDamageState) == 0x000003, "Wrong size on CamperHealthComponent_Authority_SetDamageState");
static_assert(offsetof(CamperHealthComponent_Authority_SetDamageState, damageState) == 0x000000, "Member 'CamperHealthComponent_Authority_SetDamageState::damageState' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_SetDamageState, fireScoreEvent) == 0x000001, "Member 'CamperHealthComponent_Authority_SetDamageState::fireScoreEvent' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_SetDamageState, sacrificed) == 0x000002, "Member 'CamperHealthComponent_Authority_SetDamageState::sacrificed' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.GetCurrentHPSlot
// 0x0008 (0x0008 - 0x0000)
struct CamperHealthComponent_GetCurrentHPSlot final
{
public:
	class UChargeableComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_GetCurrentHPSlot) == 0x000008, "Wrong alignment on CamperHealthComponent_GetCurrentHPSlot");
static_assert(sizeof(CamperHealthComponent_GetCurrentHPSlot) == 0x000008, "Wrong size on CamperHealthComponent_GetCurrentHPSlot");
static_assert(offsetof(CamperHealthComponent_GetCurrentHPSlot, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_GetCurrentHPSlot::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IncreaseHPSlotSize
// 0x0004 (0x0004 - 0x0000)
struct CamperHealthComponent_IncreaseHPSlotSize final
{
public:
	float                                         percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IncreaseHPSlotSize) == 0x000004, "Wrong alignment on CamperHealthComponent_IncreaseHPSlotSize");
static_assert(sizeof(CamperHealthComponent_IncreaseHPSlotSize) == 0x000004, "Wrong size on CamperHealthComponent_IncreaseHPSlotSize");
static_assert(offsetof(CamperHealthComponent_IncreaseHPSlotSize, percent) == 0x000000, "Member 'CamperHealthComponent_IncreaseHPSlotSize::percent' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Multicast_OnHealed
// 0x0018 (0x0018 - 0x0000)
struct CamperHealthComponent_Multicast_OnHealed final
{
public:
	struct FCamperHealResult                      healResult;                                        // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Multicast_OnHealed) == 0x000008, "Wrong alignment on CamperHealthComponent_Multicast_OnHealed");
static_assert(sizeof(CamperHealthComponent_Multicast_OnHealed) == 0x000018, "Wrong size on CamperHealthComponent_Multicast_OnHealed");
static_assert(offsetof(CamperHealthComponent_Multicast_OnHealed, healResult) == 0x000000, "Member 'CamperHealthComponent_Multicast_OnHealed::healResult' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Multicast_OnInjuredBleedoutKO
// 0x0008 (0x0008 - 0x0000)
struct CamperHealthComponent_Multicast_OnInjuredBleedoutKO final
{
public:
	class ADBDPlayer*                             injuredBleedoutInstigator;                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Multicast_OnInjuredBleedoutKO) == 0x000008, "Wrong alignment on CamperHealthComponent_Multicast_OnInjuredBleedoutKO");
static_assert(sizeof(CamperHealthComponent_Multicast_OnInjuredBleedoutKO) == 0x000008, "Wrong size on CamperHealthComponent_Multicast_OnInjuredBleedoutKO");
static_assert(offsetof(CamperHealthComponent_Multicast_OnInjuredBleedoutKO, injuredBleedoutInstigator) == 0x000000, "Member 'CamperHealthComponent_Multicast_OnInjuredBleedoutKO::injuredBleedoutInstigator' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Multicast_OnSurvivorGainedHealthStateByOthersEvents
// 0x0030 (0x0030 - 0x0000)
struct CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents final
{
public:
	bool                                          healedFromKO;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             healedSurvivor;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ADBDPlayer*>                     healers;                                           // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<bool>                                  healedSurvivorFarEnoughAway;                       // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents) == 0x000008, "Wrong alignment on CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents");
static_assert(sizeof(CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents) == 0x000030, "Wrong size on CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents");
static_assert(offsetof(CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents, healedFromKO) == 0x000000, "Member 'CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents::healedFromKO' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents, healedSurvivor) == 0x000008, "Member 'CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents::healedSurvivor' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents, healers) == 0x000010, "Member 'CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents::healers' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents, healedSurvivorFarEnoughAway) == 0x000020, "Member 'CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents::healedSurvivorFarEnoughAway' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Multicast_SetCurrentHealthStateCount
// 0x0008 (0x0008 - 0x0000)
struct CamperHealthComponent_Multicast_SetCurrentHealthStateCount final
{
public:
	int32                                         newHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fireScoreEvent;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CamperHealthComponent_Multicast_SetCurrentHealthStateCount) == 0x000004, "Wrong alignment on CamperHealthComponent_Multicast_SetCurrentHealthStateCount");
static_assert(sizeof(CamperHealthComponent_Multicast_SetCurrentHealthStateCount) == 0x000008, "Wrong size on CamperHealthComponent_Multicast_SetCurrentHealthStateCount");
static_assert(offsetof(CamperHealthComponent_Multicast_SetCurrentHealthStateCount, newHealth) == 0x000000, "Member 'CamperHealthComponent_Multicast_SetCurrentHealthStateCount::newHealth' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Multicast_SetCurrentHealthStateCount, fireScoreEvent) == 0x000004, "Member 'CamperHealthComponent_Multicast_SetCurrentHealthStateCount::fireScoreEvent' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Multicast_SetDamageState
// 0x0003 (0x0003 - 0x0000)
struct CamperHealthComponent_Multicast_SetDamageState final
{
public:
	ECamperDamageState                            damageState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fireScoreEvent;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          sacrificed;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Multicast_SetDamageState) == 0x000001, "Wrong alignment on CamperHealthComponent_Multicast_SetDamageState");
static_assert(sizeof(CamperHealthComponent_Multicast_SetDamageState) == 0x000003, "Wrong size on CamperHealthComponent_Multicast_SetDamageState");
static_assert(offsetof(CamperHealthComponent_Multicast_SetDamageState, damageState) == 0x000000, "Member 'CamperHealthComponent_Multicast_SetDamageState::damageState' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Multicast_SetDamageState, fireScoreEvent) == 0x000001, "Member 'CamperHealthComponent_Multicast_SetDamageState::fireScoreEvent' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Multicast_SetDamageState, sacrificed) == 0x000002, "Member 'CamperHealthComponent_Multicast_SetDamageState::sacrificed' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Multicast_SetHealthStateFromDamageState
// 0x0002 (0x0002 - 0x0000)
struct CamperHealthComponent_Multicast_SetHealthStateFromDamageState final
{
public:
	ECamperDamageState                            damageState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fireScoreEvent;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Multicast_SetHealthStateFromDamageState) == 0x000001, "Wrong alignment on CamperHealthComponent_Multicast_SetHealthStateFromDamageState");
static_assert(sizeof(CamperHealthComponent_Multicast_SetHealthStateFromDamageState) == 0x000002, "Wrong size on CamperHealthComponent_Multicast_SetHealthStateFromDamageState");
static_assert(offsetof(CamperHealthComponent_Multicast_SetHealthStateFromDamageState, damageState) == 0x000000, "Member 'CamperHealthComponent_Multicast_SetHealthStateFromDamageState::damageState' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Multicast_SetHealthStateFromDamageState, fireScoreEvent) == 0x000001, "Member 'CamperHealthComponent_Multicast_SetHealthStateFromDamageState::fireScoreEvent' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Multicast_SetHealthType
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_Multicast_SetHealthType final
{
public:
	EHealthType                                   healthType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Multicast_SetHealthType) == 0x000001, "Wrong alignment on CamperHealthComponent_Multicast_SetHealthType");
static_assert(sizeof(CamperHealthComponent_Multicast_SetHealthType) == 0x000001, "Wrong size on CamperHealthComponent_Multicast_SetHealthType");
static_assert(offsetof(CamperHealthComponent_Multicast_SetHealthType, healthType) == 0x000000, "Member 'CamperHealthComponent_Multicast_SetHealthType::healthType' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.OnImmobilizedStateChanged
// 0x0002 (0x0002 - 0x0000)
struct CamperHealthComponent_OnImmobilizedStateChanged final
{
public:
	ECamperImmobilizeState                        oldImmobilizeState;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperImmobilizeState                        newImmobilizeState;                                // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_OnImmobilizedStateChanged) == 0x000001, "Wrong alignment on CamperHealthComponent_OnImmobilizedStateChanged");
static_assert(sizeof(CamperHealthComponent_OnImmobilizedStateChanged) == 0x000002, "Wrong size on CamperHealthComponent_OnImmobilizedStateChanged");
static_assert(offsetof(CamperHealthComponent_OnImmobilizedStateChanged, oldImmobilizeState) == 0x000000, "Member 'CamperHealthComponent_OnImmobilizedStateChanged::oldImmobilizeState' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_OnImmobilizedStateChanged, newImmobilizeState) == 0x000001, "Member 'CamperHealthComponent_OnImmobilizedStateChanged::newImmobilizeState' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.SetCanBleedout
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_SetCanBleedout final
{
public:
	bool                                          canBleedout;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_SetCanBleedout) == 0x000001, "Wrong alignment on CamperHealthComponent_SetCanBleedout");
static_assert(sizeof(CamperHealthComponent_SetCanBleedout) == 0x000001, "Wrong size on CamperHealthComponent_SetCanBleedout");
static_assert(offsetof(CamperHealthComponent_SetCanBleedout, canBleedout) == 0x000000, "Member 'CamperHealthComponent_SetCanBleedout::canBleedout' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.CanBecomeHealthy
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_CanBecomeHealthy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_CanBecomeHealthy) == 0x000001, "Wrong alignment on CamperHealthComponent_CanBecomeHealthy");
static_assert(sizeof(CamperHealthComponent_CanBecomeHealthy) == 0x000001, "Wrong size on CamperHealthComponent_CanBecomeHealthy");
static_assert(offsetof(CamperHealthComponent_CanBecomeHealthy, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_CanBecomeHealthy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.CanBeHealed
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_CanBeHealed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_CanBeHealed) == 0x000001, "Wrong alignment on CamperHealthComponent_CanBeHealed");
static_assert(sizeof(CamperHealthComponent_CanBeHealed) == 0x000001, "Wrong size on CamperHealthComponent_CanBeHealed");
static_assert(offsetof(CamperHealthComponent_CanBeHealed, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_CanBeHealed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.CanBeHealedFromInjured
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_CanBeHealedFromInjured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_CanBeHealedFromInjured) == 0x000001, "Wrong alignment on CamperHealthComponent_CanBeHealedFromInjured");
static_assert(sizeof(CamperHealthComponent_CanBeHealedFromInjured) == 0x000001, "Wrong size on CamperHealthComponent_CanBeHealedFromInjured");
static_assert(offsetof(CamperHealthComponent_CanBeHealedFromInjured, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_CanBeHealedFromInjured::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.CanHealSelf
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_CanHealSelf final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_CanHealSelf) == 0x000001, "Wrong alignment on CamperHealthComponent_CanHealSelf");
static_assert(sizeof(CamperHealthComponent_CanHealSelf) == 0x000001, "Wrong size on CamperHealthComponent_CanHealSelf");
static_assert(offsetof(CamperHealthComponent_CanHealSelf, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_CanHealSelf::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.GetCurrentTotalHealthBarPercent
// 0x0004 (0x0004 - 0x0000)
struct CamperHealthComponent_GetCurrentTotalHealthBarPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_GetCurrentTotalHealthBarPercent) == 0x000004, "Wrong alignment on CamperHealthComponent_GetCurrentTotalHealthBarPercent");
static_assert(sizeof(CamperHealthComponent_GetCurrentTotalHealthBarPercent) == 0x000004, "Wrong size on CamperHealthComponent_GetCurrentTotalHealthBarPercent");
static_assert(offsetof(CamperHealthComponent_GetCurrentTotalHealthBarPercent, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_GetCurrentTotalHealthBarPercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.GetDamageState
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_GetDamageState final
{
public:
	ECamperDamageState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_GetDamageState) == 0x000001, "Wrong alignment on CamperHealthComponent_GetDamageState");
static_assert(sizeof(CamperHealthComponent_GetDamageState) == 0x000001, "Wrong size on CamperHealthComponent_GetDamageState");
static_assert(offsetof(CamperHealthComponent_GetDamageState, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_GetDamageState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.GetPercentDyingTimer
// 0x0004 (0x0004 - 0x0000)
struct CamperHealthComponent_GetPercentDyingTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_GetPercentDyingTimer) == 0x000004, "Wrong alignment on CamperHealthComponent_GetPercentDyingTimer");
static_assert(sizeof(CamperHealthComponent_GetPercentDyingTimer) == 0x000004, "Wrong size on CamperHealthComponent_GetPercentDyingTimer");
static_assert(offsetof(CamperHealthComponent_GetPercentDyingTimer, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_GetPercentDyingTimer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.GetPercentInjuredBleedoutTimer
// 0x0004 (0x0004 - 0x0000)
struct CamperHealthComponent_GetPercentInjuredBleedoutTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_GetPercentInjuredBleedoutTimer) == 0x000004, "Wrong alignment on CamperHealthComponent_GetPercentInjuredBleedoutTimer");
static_assert(sizeof(CamperHealthComponent_GetPercentInjuredBleedoutTimer) == 0x000004, "Wrong size on CamperHealthComponent_GetPercentInjuredBleedoutTimer");
static_assert(offsetof(CamperHealthComponent_GetPercentInjuredBleedoutTimer, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_GetPercentInjuredBleedoutTimer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IsDead
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IsDead) == 0x000001, "Wrong alignment on CamperHealthComponent_IsDead");
static_assert(sizeof(CamperHealthComponent_IsDead) == 0x000001, "Wrong size on CamperHealthComponent_IsDead");
static_assert(offsetof(CamperHealthComponent_IsDead, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_IsDead::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IsDyingTimerExpired
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_IsDyingTimerExpired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IsDyingTimerExpired) == 0x000001, "Wrong alignment on CamperHealthComponent_IsDyingTimerExpired");
static_assert(sizeof(CamperHealthComponent_IsDyingTimerExpired) == 0x000001, "Wrong size on CamperHealthComponent_IsDyingTimerExpired");
static_assert(offsetof(CamperHealthComponent_IsDyingTimerExpired, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_IsDyingTimerExpired::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IsHealthy
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_IsHealthy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IsHealthy) == 0x000001, "Wrong alignment on CamperHealthComponent_IsHealthy");
static_assert(sizeof(CamperHealthComponent_IsHealthy) == 0x000001, "Wrong size on CamperHealthComponent_IsHealthy");
static_assert(offsetof(CamperHealthComponent_IsHealthy, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_IsHealthy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IsInInjuredBleedout
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_IsInInjuredBleedout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IsInInjuredBleedout) == 0x000001, "Wrong alignment on CamperHealthComponent_IsInInjuredBleedout");
static_assert(sizeof(CamperHealthComponent_IsInInjuredBleedout) == 0x000001, "Wrong size on CamperHealthComponent_IsInInjuredBleedout");
static_assert(offsetof(CamperHealthComponent_IsInInjuredBleedout, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_IsInInjuredBleedout::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IsInjured
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_IsInjured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IsInjured) == 0x000001, "Wrong alignment on CamperHealthComponent_IsInjured");
static_assert(sizeof(CamperHealthComponent_IsInjured) == 0x000001, "Wrong size on CamperHealthComponent_IsInjured");
static_assert(offsetof(CamperHealthComponent_IsInjured, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_IsInjured::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IsInjuredBleedoutTimerExpired
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_IsInjuredBleedoutTimerExpired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IsInjuredBleedoutTimerExpired) == 0x000001, "Wrong alignment on CamperHealthComponent_IsInjuredBleedoutTimerExpired");
static_assert(sizeof(CamperHealthComponent_IsInjuredBleedoutTimerExpired) == 0x000001, "Wrong size on CamperHealthComponent_IsInjuredBleedoutTimerExpired");
static_assert(offsetof(CamperHealthComponent_IsInjuredBleedoutTimerExpired, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_IsInjuredBleedoutTimerExpired::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IsKO
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_IsKO final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IsKO) == 0x000001, "Wrong alignment on CamperHealthComponent_IsKO");
static_assert(sizeof(CamperHealthComponent_IsKO) == 0x000001, "Wrong size on CamperHealthComponent_IsKO");
static_assert(offsetof(CamperHealthComponent_IsKO, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_IsKO::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractable.InitInteractable
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractable_InitInteractable final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractable_InitInteractable) == 0x000008, "Wrong alignment on PlayerInteractable_InitInteractable");
static_assert(sizeof(PlayerInteractable_InitInteractable) == 0x000008, "Wrong size on PlayerInteractable_InitInteractable");
static_assert(offsetof(PlayerInteractable_InitInteractable, player) == 0x000000, "Member 'PlayerInteractable_InitInteractable::player' has a wrong offset!");

// Function DeadByDaylight.CamperInteractable.SetKillInteraction
// 0x0008 (0x0008 - 0x0000)
struct CamperInteractable_SetKillInteraction final
{
public:
	class UInteractionDefinition*                 killInteraction;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperInteractable_SetKillInteraction) == 0x000008, "Wrong alignment on CamperInteractable_SetKillInteraction");
static_assert(sizeof(CamperInteractable_SetKillInteraction) == 0x000008, "Wrong size on CamperInteractable_SetKillInteraction");
static_assert(offsetof(CamperInteractable_SetKillInteraction, killInteraction) == 0x000000, "Member 'CamperInteractable_SetKillInteraction::killInteraction' has a wrong offset!");

// Function DeadByDaylight.CamperInteractable.GetOwningSurvivor
// 0x0008 (0x0008 - 0x0000)
struct CamperInteractable_GetOwningSurvivor final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperInteractable_GetOwningSurvivor) == 0x000008, "Wrong alignment on CamperInteractable_GetOwningSurvivor");
static_assert(sizeof(CamperInteractable_GetOwningSurvivor) == 0x000008, "Wrong size on CamperInteractable_GetOwningSurvivor");
static_assert(offsetof(CamperInteractable_GetOwningSurvivor, ReturnValue) == 0x000000, "Member 'CamperInteractable_GetOwningSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperInteractable.GetSlasherInteractor
// 0x0008 (0x0008 - 0x0000)
struct CamperInteractable_GetSlasherInteractor final
{
public:
	class UInteractor*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperInteractable_GetSlasherInteractor) == 0x000008, "Wrong alignment on CamperInteractable_GetSlasherInteractor");
static_assert(sizeof(CamperInteractable_GetSlasherInteractor) == 0x000008, "Wrong size on CamperInteractable_GetSlasherInteractor");
static_assert(offsetof(CamperInteractable_GetSlasherInteractor, ReturnValue) == 0x000000, "Member 'CamperInteractable_GetSlasherInteractor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperMaterialHelperController.AddManagedGroup
// 0x0018 (0x0018 - 0x0000)
struct CamperMaterialHelperController_AddManagedGroup final
{
public:
	class UObject*                                source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 group;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperMaterialHelperController_AddManagedGroup) == 0x000008, "Wrong alignment on CamperMaterialHelperController_AddManagedGroup");
static_assert(sizeof(CamperMaterialHelperController_AddManagedGroup) == 0x000018, "Wrong size on CamperMaterialHelperController_AddManagedGroup");
static_assert(offsetof(CamperMaterialHelperController_AddManagedGroup, source) == 0x000000, "Member 'CamperMaterialHelperController_AddManagedGroup::source' has a wrong offset!");
static_assert(offsetof(CamperMaterialHelperController_AddManagedGroup, group) == 0x000008, "Member 'CamperMaterialHelperController_AddManagedGroup::group' has a wrong offset!");

// Function DeadByDaylight.CamperMaterialHelperController.AddManagedWithCondition
// 0x0030 (0x0030 - 0x0000)
struct CamperMaterialHelperController_AddManagedWithCondition final
{
public:
	class UObject*                                source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 group;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             condition;                                         // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CamperMaterialHelperController_AddManagedWithCondition) == 0x000008, "Wrong alignment on CamperMaterialHelperController_AddManagedWithCondition");
static_assert(sizeof(CamperMaterialHelperController_AddManagedWithCondition) == 0x000030, "Wrong size on CamperMaterialHelperController_AddManagedWithCondition");
static_assert(offsetof(CamperMaterialHelperController_AddManagedWithCondition, source) == 0x000000, "Member 'CamperMaterialHelperController_AddManagedWithCondition::source' has a wrong offset!");
static_assert(offsetof(CamperMaterialHelperController_AddManagedWithCondition, group) == 0x000008, "Member 'CamperMaterialHelperController_AddManagedWithCondition::group' has a wrong offset!");
static_assert(offsetof(CamperMaterialHelperController_AddManagedWithCondition, condition) == 0x000018, "Member 'CamperMaterialHelperController_AddManagedWithCondition::condition' has a wrong offset!");

// Function DeadByDaylight.CamperMaterialHelperController.RemoveGroupsBySource
// 0x0008 (0x0008 - 0x0000)
struct CamperMaterialHelperController_RemoveGroupsBySource final
{
public:
	class UObject*                                source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperMaterialHelperController_RemoveGroupsBySource) == 0x000008, "Wrong alignment on CamperMaterialHelperController_RemoveGroupsBySource");
static_assert(sizeof(CamperMaterialHelperController_RemoveGroupsBySource) == 0x000008, "Wrong size on CamperMaterialHelperController_RemoveGroupsBySource");
static_assert(offsetof(CamperMaterialHelperController_RemoveGroupsBySource, source) == 0x000000, "Member 'CamperMaterialHelperController_RemoveGroupsBySource::source' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerData.GetControlRotation
// 0x000C (0x000C - 0x0000)
struct DBDPlayerData_GetControlRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerData_GetControlRotation) == 0x000004, "Wrong alignment on DBDPlayerData_GetControlRotation");
static_assert(sizeof(DBDPlayerData_GetControlRotation) == 0x00000C, "Wrong size on DBDPlayerData_GetControlRotation");
static_assert(offsetof(DBDPlayerData_GetControlRotation, ReturnValue) == 0x000000, "Member 'DBDPlayerData_GetControlRotation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerData.GetUseInputPressed
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerData_GetUseInputPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerData_GetUseInputPressed) == 0x000001, "Wrong alignment on DBDPlayerData_GetUseInputPressed");
static_assert(sizeof(DBDPlayerData_GetUseInputPressed) == 0x000001, "Wrong size on DBDPlayerData_GetUseInputPressed");
static_assert(offsetof(DBDPlayerData_GetUseInputPressed, ReturnValue) == 0x000000, "Member 'DBDPlayerData_GetUseInputPressed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerData.IsInteractionInputPressed
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayerData_IsInteractionInputPressed final
{
public:
	EInputInteractionType                         interactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerData_IsInteractionInputPressed) == 0x000001, "Wrong alignment on DBDPlayerData_IsInteractionInputPressed");
static_assert(sizeof(DBDPlayerData_IsInteractionInputPressed) == 0x000002, "Wrong size on DBDPlayerData_IsInteractionInputPressed");
static_assert(offsetof(DBDPlayerData_IsInteractionInputPressed, interactionType) == 0x000000, "Member 'DBDPlayerData_IsInteractionInputPressed::interactionType' has a wrong offset!");
static_assert(offsetof(DBDPlayerData_IsInteractionInputPressed, ReturnValue) == 0x000001, "Member 'DBDPlayerData_IsInteractionInputPressed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Client_PreventMovement
// 0x0001 (0x0001 - 0x0000)
struct DBDCharacterMovementComponent_Client_PreventMovement final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Client_PreventMovement) == 0x000001, "Wrong alignment on DBDCharacterMovementComponent_Client_PreventMovement");
static_assert(sizeof(DBDCharacterMovementComponent_Client_PreventMovement) == 0x000001, "Wrong size on DBDCharacterMovementComponent_Client_PreventMovement");
static_assert(offsetof(DBDCharacterMovementComponent_Client_PreventMovement, value) == 0x000000, "Member 'DBDCharacterMovementComponent_Client_PreventMovement::value' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Client_TeleportTo
// 0x0018 (0x0018 - 0x0000)
struct DBDCharacterMovementComponent_Client_TeleportTo final
{
public:
	struct FVector_NetQuantize100                 location;                                          // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYawAndPitchRotator_NetQuantize32      rotation;                                          // 0x000C(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Client_TeleportTo) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Client_TeleportTo");
static_assert(sizeof(DBDCharacterMovementComponent_Client_TeleportTo) == 0x000018, "Wrong size on DBDCharacterMovementComponent_Client_TeleportTo");
static_assert(offsetof(DBDCharacterMovementComponent_Client_TeleportTo, location) == 0x000000, "Member 'DBDCharacterMovementComponent_Client_TeleportTo::location' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Client_TeleportTo, rotation) == 0x00000C, "Member 'DBDCharacterMovementComponent_Client_TeleportTo::rotation' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.DBD_SimulateHack_LocalLaunch
// 0x000C (0x000C - 0x0000)
struct DBDCharacterMovementComponent_DBD_SimulateHack_LocalLaunch final
{
public:
	float                                         xVelocity;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         yVelocity;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         zVelocity;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_DBD_SimulateHack_LocalLaunch) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_DBD_SimulateHack_LocalLaunch");
static_assert(sizeof(DBDCharacterMovementComponent_DBD_SimulateHack_LocalLaunch) == 0x00000C, "Wrong size on DBDCharacterMovementComponent_DBD_SimulateHack_LocalLaunch");
static_assert(offsetof(DBDCharacterMovementComponent_DBD_SimulateHack_LocalLaunch, xVelocity) == 0x000000, "Member 'DBDCharacterMovementComponent_DBD_SimulateHack_LocalLaunch::xVelocity' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_DBD_SimulateHack_LocalLaunch, yVelocity) == 0x000004, "Member 'DBDCharacterMovementComponent_DBD_SimulateHack_LocalLaunch::yVelocity' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_DBD_SimulateHack_LocalLaunch, zVelocity) == 0x000008, "Member 'DBDCharacterMovementComponent_DBD_SimulateHack_LocalLaunch::zVelocity' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplierUsingServerRPC
// 0x0004 (0x0004 - 0x0000)
struct DBDCharacterMovementComponent_DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplierUsingServerRPC final
{
public:
	float                                         maxSpeedMultiplier;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplierUsingServerRPC) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplierUsingServerRPC");
static_assert(sizeof(DBDCharacterMovementComponent_DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplierUsingServerRPC) == 0x000004, "Wrong size on DBDCharacterMovementComponent_DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplierUsingServerRPC");
static_assert(offsetof(DBDCharacterMovementComponent_DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplierUsingServerRPC, maxSpeedMultiplier) == 0x000000, "Member 'DBDCharacterMovementComponent_DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplierUsingServerRPC::maxSpeedMultiplier' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.OnMontageStarted
// 0x0030 (0x0030 - 0x0000)
struct DBDCharacterMovementComponent_OnMontageStarted final
{
public:
	struct FMontagePlaybackDefinition             montageDefinition;                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UAnimMontage*                     montage;                                           // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_OnMontageStarted) == 0x000008, "Wrong alignment on DBDCharacterMovementComponent_OnMontageStarted");
static_assert(sizeof(DBDCharacterMovementComponent_OnMontageStarted) == 0x000030, "Wrong size on DBDCharacterMovementComponent_OnMontageStarted");
static_assert(offsetof(DBDCharacterMovementComponent_OnMontageStarted, montageDefinition) == 0x000000, "Member 'DBDCharacterMovementComponent_OnMontageStarted::montageDefinition' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_OnMontageStarted, montage) == 0x000028, "Member 'DBDCharacterMovementComponent_OnMontageStarted::montage' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.OnPreMontageStop
// 0x0030 (0x0030 - 0x0000)
struct DBDCharacterMovementComponent_OnPreMontageStop final
{
public:
	struct FMontageStopDefinition                 montageDefinition;                                 // 0x0000(0x0028)(ConstParm, Parm, NativeAccessSpecifierPublic)
	const class UAnimMontage*                     montage;                                           // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_OnPreMontageStop) == 0x000008, "Wrong alignment on DBDCharacterMovementComponent_OnPreMontageStop");
static_assert(sizeof(DBDCharacterMovementComponent_OnPreMontageStop) == 0x000030, "Wrong size on DBDCharacterMovementComponent_OnPreMontageStop");
static_assert(offsetof(DBDCharacterMovementComponent_OnPreMontageStop, montageDefinition) == 0x000000, "Member 'DBDCharacterMovementComponent_OnPreMontageStop::montageDefinition' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_OnPreMontageStop, montage) == 0x000028, "Member 'DBDCharacterMovementComponent_OnPreMontageStop::montage' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_AddMaxSpeedMovementCurve
// 0x0014 (0x0014 - 0x0000)
struct DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve final
{
public:
	float                                         timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        curveNetId;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         startOffset;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementCurveType                            movementCurveType;                                 // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve");
static_assert(sizeof(DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve) == 0x000014, "Wrong size on DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve");
static_assert(offsetof(DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve, timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve::timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve, curveNetId) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve::curveNetId' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve, duration) == 0x000008, "Member 'DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve::duration' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve, startOffset) == 0x00000C, "Member 'DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve::startOffset' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve, movementCurveType) == 0x000010, "Member 'DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve::movementCurveType' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_Launch
// 0x0014 (0x0014 - 0x0000)
struct DBDCharacterMovementComponent_Server_Launch final
{
public:
	float                                         timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                launchVelocity;                                    // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         launchCallCount;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Server_Launch) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_Launch");
static_assert(sizeof(DBDCharacterMovementComponent_Server_Launch) == 0x000014, "Wrong size on DBDCharacterMovementComponent_Server_Launch");
static_assert(offsetof(DBDCharacterMovementComponent_Server_Launch, timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_Launch::timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_Launch, launchVelocity) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_Launch::launchVelocity' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_Launch, launchCallCount) == 0x000010, "Member 'DBDCharacterMovementComponent_Server_Launch::launchCallCount' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_PlayMontage
// 0x0030 (0x0030 - 0x0000)
struct DBDCharacterMovementComponent_Server_PlayMontage final
{
public:
	float                                         timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMontagePlaybackDefinition             montagePlaybackDefinition;                         // 0x0008(0x0028)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Server_PlayMontage) == 0x000008, "Wrong alignment on DBDCharacterMovementComponent_Server_PlayMontage");
static_assert(sizeof(DBDCharacterMovementComponent_Server_PlayMontage) == 0x000030, "Wrong size on DBDCharacterMovementComponent_Server_PlayMontage");
static_assert(offsetof(DBDCharacterMovementComponent_Server_PlayMontage, timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_PlayMontage::timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_PlayMontage, montagePlaybackDefinition) == 0x000008, "Member 'DBDCharacterMovementComponent_Server_PlayMontage::montagePlaybackDefinition' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_RemoveMaxSpeedMovementCurve
// 0x000C (0x000C - 0x0000)
struct DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve final
{
public:
	float                                         timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        curveNetId;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementCurveType                            movementCurveType;                                 // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve");
static_assert(sizeof(DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve) == 0x00000C, "Wrong size on DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve");
static_assert(offsetof(DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve, timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve::timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve, curveNetId) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve::curveNetId' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve, movementCurveType) == 0x000008, "Member 'DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve::movementCurveType' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_ReplicateControlRotation
// 0x0008 (0x0008 - 0x0000)
struct DBDCharacterMovementComponent_Server_ReplicateControlRotation final
{
public:
	uint8                                         clientRoll;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        view;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Server_ReplicateControlRotation) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_ReplicateControlRotation");
static_assert(sizeof(DBDCharacterMovementComponent_Server_ReplicateControlRotation) == 0x000008, "Wrong size on DBDCharacterMovementComponent_Server_ReplicateControlRotation");
static_assert(offsetof(DBDCharacterMovementComponent_Server_ReplicateControlRotation, clientRoll) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_ReplicateControlRotation::clientRoll' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_ReplicateControlRotation, view) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_ReplicateControlRotation::view' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_SetAdditiveMaxSpeedScalar
// 0x0008 (0x0008 - 0x0000)
struct DBDCharacterMovementComponent_Server_SetAdditiveMaxSpeedScalar final
{
public:
	float                                         timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Server_SetAdditiveMaxSpeedScalar) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_SetAdditiveMaxSpeedScalar");
static_assert(sizeof(DBDCharacterMovementComponent_Server_SetAdditiveMaxSpeedScalar) == 0x000008, "Wrong size on DBDCharacterMovementComponent_Server_SetAdditiveMaxSpeedScalar");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetAdditiveMaxSpeedScalar, timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_SetAdditiveMaxSpeedScalar::timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetAdditiveMaxSpeedScalar, value) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_SetAdditiveMaxSpeedScalar::value' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_SetGroundFriction
// 0x0008 (0x0008 - 0x0000)
struct DBDCharacterMovementComponent_Server_SetGroundFriction final
{
public:
	float                                         timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Server_SetGroundFriction) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_SetGroundFriction");
static_assert(sizeof(DBDCharacterMovementComponent_Server_SetGroundFriction) == 0x000008, "Wrong size on DBDCharacterMovementComponent_Server_SetGroundFriction");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetGroundFriction, timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_SetGroundFriction::timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetGroundFriction, value) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_SetGroundFriction::value' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_SetIgnorePawnCollisionOverride
// 0x0008 (0x0008 - 0x0000)
struct DBDCharacterMovementComponent_Server_SetIgnorePawnCollisionOverride final
{
public:
	float                                         timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isIgnoringPawnCollision;                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterMovementComponent_Server_SetIgnorePawnCollisionOverride) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_SetIgnorePawnCollisionOverride");
static_assert(sizeof(DBDCharacterMovementComponent_Server_SetIgnorePawnCollisionOverride) == 0x000008, "Wrong size on DBDCharacterMovementComponent_Server_SetIgnorePawnCollisionOverride");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetIgnorePawnCollisionOverride, timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_SetIgnorePawnCollisionOverride::timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetIgnorePawnCollisionOverride, isIgnoringPawnCollision) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_SetIgnorePawnCollisionOverride::isIgnoringPawnCollision' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_SetMaxAcceleration
// 0x0008 (0x0008 - 0x0000)
struct DBDCharacterMovementComponent_Server_SetMaxAcceleration final
{
public:
	float                                         timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Server_SetMaxAcceleration) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_SetMaxAcceleration");
static_assert(sizeof(DBDCharacterMovementComponent_Server_SetMaxAcceleration) == 0x000008, "Wrong size on DBDCharacterMovementComponent_Server_SetMaxAcceleration");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetMaxAcceleration, timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_SetMaxAcceleration::timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetMaxAcceleration, value) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_SetMaxAcceleration::value' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_SetMaxSpeedMultiplierScalar
// 0x0008 (0x0008 - 0x0000)
struct DBDCharacterMovementComponent_Server_SetMaxSpeedMultiplierScalar final
{
public:
	float                                         timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Server_SetMaxSpeedMultiplierScalar) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_SetMaxSpeedMultiplierScalar");
static_assert(sizeof(DBDCharacterMovementComponent_Server_SetMaxSpeedMultiplierScalar) == 0x000008, "Wrong size on DBDCharacterMovementComponent_Server_SetMaxSpeedMultiplierScalar");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetMaxSpeedMultiplierScalar, timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_SetMaxSpeedMultiplierScalar::timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetMaxSpeedMultiplierScalar, value) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_SetMaxSpeedMultiplierScalar::value' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_SetMaxSpeedOverride
// 0x000C (0x000C - 0x0000)
struct DBDCharacterMovementComponent_Server_SetMaxSpeedOverride final
{
public:
	float                                         timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSet;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterMovementComponent_Server_SetMaxSpeedOverride) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_SetMaxSpeedOverride");
static_assert(sizeof(DBDCharacterMovementComponent_Server_SetMaxSpeedOverride) == 0x00000C, "Wrong size on DBDCharacterMovementComponent_Server_SetMaxSpeedOverride");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetMaxSpeedOverride, timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_SetMaxSpeedOverride::timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetMaxSpeedOverride, value) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_SetMaxSpeedOverride::value' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetMaxSpeedOverride, isSet) == 0x000008, "Member 'DBDCharacterMovementComponent_Server_SetMaxSpeedOverride::isSet' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_SetStopSnapping
// 0x0008 (0x0008 - 0x0000)
struct DBDCharacterMovementComponent_Server_SetStopSnapping final
{
public:
	float                                         timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          snapToFinalDestination;                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterMovementComponent_Server_SetStopSnapping) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_SetStopSnapping");
static_assert(sizeof(DBDCharacterMovementComponent_Server_SetStopSnapping) == 0x000008, "Wrong size on DBDCharacterMovementComponent_Server_SetStopSnapping");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetStopSnapping, timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_SetStopSnapping::timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetStopSnapping, snapToFinalDestination) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_SetStopSnapping::snapToFinalDestination' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_StartSnapping
// 0x002C (0x002C - 0x0000)
struct DBDCharacterMovementComponent_Server_StartSnapping final
{
public:
	float                                         timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSnappingData                          data;                                              // 0x0004(0x0024)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         snappingCallCount;                                 // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Server_StartSnapping) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_StartSnapping");
static_assert(sizeof(DBDCharacterMovementComponent_Server_StartSnapping) == 0x00002C, "Wrong size on DBDCharacterMovementComponent_Server_StartSnapping");
static_assert(offsetof(DBDCharacterMovementComponent_Server_StartSnapping, timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_StartSnapping::timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_StartSnapping, data) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_StartSnapping::data' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_StartSnapping, snappingCallCount) == 0x000028, "Member 'DBDCharacterMovementComponent_Server_StartSnapping::snappingCallCount' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_StopMontage
// 0x0030 (0x0030 - 0x0000)
struct DBDCharacterMovementComponent_Server_StopMontage final
{
public:
	float                                         timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMontageStopDefinition                 montageStopDefinition;                             // 0x0008(0x0028)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Server_StopMontage) == 0x000008, "Wrong alignment on DBDCharacterMovementComponent_Server_StopMontage");
static_assert(sizeof(DBDCharacterMovementComponent_Server_StopMontage) == 0x000030, "Wrong size on DBDCharacterMovementComponent_Server_StopMontage");
static_assert(offsetof(DBDCharacterMovementComponent_Server_StopMontage, timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_StopMontage::timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_StopMontage, montageStopDefinition) == 0x000008, "Member 'DBDCharacterMovementComponent_Server_StopMontage::montageStopDefinition' has a wrong offset!");

// Function DeadByDaylight.CamperMovementComponent.Client_Debug_SetSurvivorMaxSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct CamperMovementComponent_Client_Debug_SetSurvivorMaxSpeedMultiplier final
{
public:
	float                                         maxSpeedMultiplier;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperMovementComponent_Client_Debug_SetSurvivorMaxSpeedMultiplier) == 0x000004, "Wrong alignment on CamperMovementComponent_Client_Debug_SetSurvivorMaxSpeedMultiplier");
static_assert(sizeof(CamperMovementComponent_Client_Debug_SetSurvivorMaxSpeedMultiplier) == 0x000004, "Wrong size on CamperMovementComponent_Client_Debug_SetSurvivorMaxSpeedMultiplier");
static_assert(offsetof(CamperMovementComponent_Client_Debug_SetSurvivorMaxSpeedMultiplier, maxSpeedMultiplier) == 0x000000, "Member 'CamperMovementComponent_Client_Debug_SetSurvivorMaxSpeedMultiplier::maxSpeedMultiplier' has a wrong offset!");

// Function DeadByDaylight.CamperMovementComponent.DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct CamperMovementComponent_DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplier final
{
public:
	float                                         maxSpeedMultiplier;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperMovementComponent_DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplier) == 0x000004, "Wrong alignment on CamperMovementComponent_DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplier");
static_assert(sizeof(CamperMovementComponent_DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplier) == 0x000004, "Wrong size on CamperMovementComponent_DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplier");
static_assert(offsetof(CamperMovementComponent_DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplier, maxSpeedMultiplier) == 0x000000, "Member 'CamperMovementComponent_DBD_SimulateHack_LocalSurvivorMaxSpeedMultiplier::maxSpeedMultiplier' has a wrong offset!");

// Function DeadByDaylight.CamperMovementComponent.DBD_SurvivorMaxSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct CamperMovementComponent_DBD_SurvivorMaxSpeedMultiplier final
{
public:
	float                                         maxSpeedMultiplier;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperMovementComponent_DBD_SurvivorMaxSpeedMultiplier) == 0x000004, "Wrong alignment on CamperMovementComponent_DBD_SurvivorMaxSpeedMultiplier");
static_assert(sizeof(CamperMovementComponent_DBD_SurvivorMaxSpeedMultiplier) == 0x000004, "Wrong size on CamperMovementComponent_DBD_SurvivorMaxSpeedMultiplier");
static_assert(offsetof(CamperMovementComponent_DBD_SurvivorMaxSpeedMultiplier, maxSpeedMultiplier) == 0x000000, "Member 'CamperMovementComponent_DBD_SurvivorMaxSpeedMultiplier::maxSpeedMultiplier' has a wrong offset!");

// Function DeadByDaylight.CamperMovementComponent.OnCamperHealthStateChanged
// 0x0002 (0x0002 - 0x0000)
struct CamperMovementComponent_OnCamperHealthStateChanged final
{
public:
	ECamperDamageState                            oldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            currentDamageState;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperMovementComponent_OnCamperHealthStateChanged) == 0x000001, "Wrong alignment on CamperMovementComponent_OnCamperHealthStateChanged");
static_assert(sizeof(CamperMovementComponent_OnCamperHealthStateChanged) == 0x000002, "Wrong size on CamperMovementComponent_OnCamperHealthStateChanged");
static_assert(offsetof(CamperMovementComponent_OnCamperHealthStateChanged, oldDamageState) == 0x000000, "Member 'CamperMovementComponent_OnCamperHealthStateChanged::oldDamageState' has a wrong offset!");
static_assert(offsetof(CamperMovementComponent_OnCamperHealthStateChanged, currentDamageState) == 0x000001, "Member 'CamperMovementComponent_OnCamperHealthStateChanged::currentDamageState' has a wrong offset!");

// Function DeadByDaylight.CamperMovementComponent.GetDefaultRotationRate
// 0x000C (0x000C - 0x0000)
struct CamperMovementComponent_GetDefaultRotationRate final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperMovementComponent_GetDefaultRotationRate) == 0x000004, "Wrong alignment on CamperMovementComponent_GetDefaultRotationRate");
static_assert(sizeof(CamperMovementComponent_GetDefaultRotationRate) == 0x00000C, "Wrong size on CamperMovementComponent_GetDefaultRotationRate");
static_assert(offsetof(CamperMovementComponent_GetDefaultRotationRate, ReturnValue) == 0x000000, "Member 'CamperMovementComponent_GetDefaultRotationRate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperMovementComponent.GetDropStaggerTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct CamperMovementComponent_GetDropStaggerTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperMovementComponent_GetDropStaggerTimeLeft) == 0x000004, "Wrong alignment on CamperMovementComponent_GetDropStaggerTimeLeft");
static_assert(sizeof(CamperMovementComponent_GetDropStaggerTimeLeft) == 0x000004, "Wrong size on CamperMovementComponent_GetDropStaggerTimeLeft");
static_assert(offsetof(CamperMovementComponent_GetDropStaggerTimeLeft, ReturnValue) == 0x000000, "Member 'CamperMovementComponent_GetDropStaggerTimeLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperMovementComponent.GetRotationRateWhileCrawling
// 0x000C (0x000C - 0x0000)
struct CamperMovementComponent_GetRotationRateWhileCrawling final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperMovementComponent_GetRotationRateWhileCrawling) == 0x000004, "Wrong alignment on CamperMovementComponent_GetRotationRateWhileCrawling");
static_assert(sizeof(CamperMovementComponent_GetRotationRateWhileCrawling) == 0x00000C, "Wrong size on CamperMovementComponent_GetRotationRateWhileCrawling");
static_assert(offsetof(CamperMovementComponent_GetRotationRateWhileCrawling, ReturnValue) == 0x000000, "Member 'CamperMovementComponent_GetRotationRateWhileCrawling::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReportPlayerPopupScreen.OnConfirmReportPlayer
// 0x0020 (0x0020 - 0x0000)
struct ReportPlayerPopupScreen_OnConfirmReportPlayer final
{
public:
	class FString                                 category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 comment;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReportPlayerPopupScreen_OnConfirmReportPlayer) == 0x000008, "Wrong alignment on ReportPlayerPopupScreen_OnConfirmReportPlayer");
static_assert(sizeof(ReportPlayerPopupScreen_OnConfirmReportPlayer) == 0x000020, "Wrong size on ReportPlayerPopupScreen_OnConfirmReportPlayer");
static_assert(offsetof(ReportPlayerPopupScreen_OnConfirmReportPlayer, category) == 0x000000, "Member 'ReportPlayerPopupScreen_OnConfirmReportPlayer::category' has a wrong offset!");
static_assert(offsetof(ReportPlayerPopupScreen_OnConfirmReportPlayer, comment) == 0x000010, "Member 'ReportPlayerPopupScreen_OnConfirmReportPlayer::comment' has a wrong offset!");

// Function DeadByDaylight.ReportPlayerPopupScreen.OnTextInputMouseOver
// 0x0001 (0x0001 - 0x0000)
struct ReportPlayerPopupScreen_OnTextInputMouseOver final
{
public:
	bool                                          isMouseOver;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReportPlayerPopupScreen_OnTextInputMouseOver) == 0x000001, "Wrong alignment on ReportPlayerPopupScreen_OnTextInputMouseOver");
static_assert(sizeof(ReportPlayerPopupScreen_OnTextInputMouseOver) == 0x000001, "Wrong size on ReportPlayerPopupScreen_OnTextInputMouseOver");
static_assert(offsetof(ReportPlayerPopupScreen_OnTextInputMouseOver, isMouseOver) == 0x000000, "Member 'ReportPlayerPopupScreen_OnTextInputMouseOver::isMouseOver' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.DBD_SwapCosmetics
// 0x000C (0x000C - 0x0000)
struct DBDBasePlayer_DBD_SwapCosmetics final
{
public:
	class FName                                   cosmeticId;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_DBD_SwapCosmetics) == 0x000004, "Wrong alignment on DBDBasePlayer_DBD_SwapCosmetics");
static_assert(sizeof(DBDBasePlayer_DBD_SwapCosmetics) == 0x00000C, "Wrong size on DBDBasePlayer_DBD_SwapCosmetics");
static_assert(offsetof(DBDBasePlayer_DBD_SwapCosmetics, cosmeticId) == 0x000000, "Member 'DBDBasePlayer_DBD_SwapCosmetics::cosmeticId' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.Multicast_SwapCosmetics
// 0x000C (0x000C - 0x0000)
struct DBDBasePlayer_Multicast_SwapCosmetics final
{
public:
	class FName                                   cosmeticId;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_Multicast_SwapCosmetics) == 0x000004, "Wrong alignment on DBDBasePlayer_Multicast_SwapCosmetics");
static_assert(sizeof(DBDBasePlayer_Multicast_SwapCosmetics) == 0x00000C, "Wrong size on DBDBasePlayer_Multicast_SwapCosmetics");
static_assert(offsetof(DBDBasePlayer_Multicast_SwapCosmetics, cosmeticId) == 0x000000, "Member 'DBDBasePlayer_Multicast_SwapCosmetics::cosmeticId' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.TeleportWithClothHandling
// 0x001C (0x001C - 0x0000)
struct DBDBasePlayer_TeleportWithClothHandling final
{
public:
	struct FVector                                location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rotation;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          checkCollisions;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDBasePlayer_TeleportWithClothHandling) == 0x000004, "Wrong alignment on DBDBasePlayer_TeleportWithClothHandling");
static_assert(sizeof(DBDBasePlayer_TeleportWithClothHandling) == 0x00001C, "Wrong size on DBDBasePlayer_TeleportWithClothHandling");
static_assert(offsetof(DBDBasePlayer_TeleportWithClothHandling, location) == 0x000000, "Member 'DBDBasePlayer_TeleportWithClothHandling::location' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_TeleportWithClothHandling, rotation) == 0x00000C, "Member 'DBDBasePlayer_TeleportWithClothHandling::rotation' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_TeleportWithClothHandling, checkCollisions) == 0x000018, "Member 'DBDBasePlayer_TeleportWithClothHandling::checkCollisions' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_TeleportWithClothHandling, ReturnValue) == 0x000019, "Member 'DBDBasePlayer_TeleportWithClothHandling::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDBasePlayer_GetAudioComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetAudioComponent) == 0x000008, "Wrong alignment on DBDBasePlayer_GetAudioComponent");
static_assert(sizeof(DBDBasePlayer_GetAudioComponent) == 0x000008, "Wrong size on DBDBasePlayer_GetAudioComponent");
static_assert(offsetof(DBDBasePlayer_GetAudioComponent, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetAudioComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetCharacterIndex
// 0x0004 (0x0004 - 0x0000)
struct DBDBasePlayer_GetCharacterIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetCharacterIndex) == 0x000004, "Wrong alignment on DBDBasePlayer_GetCharacterIndex");
static_assert(sizeof(DBDBasePlayer_GetCharacterIndex) == 0x000004, "Wrong size on DBDBasePlayer_GetCharacterIndex");
static_assert(offsetof(DBDBasePlayer_GetCharacterIndex, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetCharacterIndex::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetCharacterName
// 0x000C (0x000C - 0x0000)
struct DBDBasePlayer_GetCharacterName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetCharacterName) == 0x000004, "Wrong alignment on DBDBasePlayer_GetCharacterName");
static_assert(sizeof(DBDBasePlayer_GetCharacterName) == 0x00000C, "Wrong size on DBDBasePlayer_GetCharacterName");
static_assert(offsetof(DBDBasePlayer_GetCharacterName, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetCharacterName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetCustomizedAudio
// 0x0008 (0x0008 - 0x0000)
struct DBDBasePlayer_GetCustomizedAudio final
{
public:
	class UCustomizedAudioComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetCustomizedAudio) == 0x000008, "Wrong alignment on DBDBasePlayer_GetCustomizedAudio");
static_assert(sizeof(DBDBasePlayer_GetCustomizedAudio) == 0x000008, "Wrong size on DBDBasePlayer_GetCustomizedAudio");
static_assert(offsetof(DBDBasePlayer_GetCustomizedAudio, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetCustomizedAudio::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetCustomizedSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct DBDBasePlayer_GetCustomizedSkeletalMesh final
{
public:
	class UCustomizedSkeletalMesh*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetCustomizedSkeletalMesh) == 0x000008, "Wrong alignment on DBDBasePlayer_GetCustomizedSkeletalMesh");
static_assert(sizeof(DBDBasePlayer_GetCustomizedSkeletalMesh) == 0x000008, "Wrong size on DBDBasePlayer_GetCustomizedSkeletalMesh");
static_assert(offsetof(DBDBasePlayer_GetCustomizedSkeletalMesh, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetCustomizedSkeletalMesh::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetLeftFootAudioSurfaceName
// 0x0010 (0x0010 - 0x0000)
struct DBDBasePlayer_GetLeftFootAudioSurfaceName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetLeftFootAudioSurfaceName) == 0x000008, "Wrong alignment on DBDBasePlayer_GetLeftFootAudioSurfaceName");
static_assert(sizeof(DBDBasePlayer_GetLeftFootAudioSurfaceName) == 0x000010, "Wrong size on DBDBasePlayer_GetLeftFootAudioSurfaceName");
static_assert(offsetof(DBDBasePlayer_GetLeftFootAudioSurfaceName, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetLeftFootAudioSurfaceName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetLeftFootSurfaceType
// 0x0001 (0x0001 - 0x0000)
struct DBDBasePlayer_GetLeftFootSurfaceType final
{
public:
	EPhysicalSurface                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetLeftFootSurfaceType) == 0x000001, "Wrong alignment on DBDBasePlayer_GetLeftFootSurfaceType");
static_assert(sizeof(DBDBasePlayer_GetLeftFootSurfaceType) == 0x000001, "Wrong size on DBDBasePlayer_GetLeftFootSurfaceType");
static_assert(offsetof(DBDBasePlayer_GetLeftFootSurfaceType, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetLeftFootSurfaceType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetRightFootAudioSurfaceName
// 0x0010 (0x0010 - 0x0000)
struct DBDBasePlayer_GetRightFootAudioSurfaceName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetRightFootAudioSurfaceName) == 0x000008, "Wrong alignment on DBDBasePlayer_GetRightFootAudioSurfaceName");
static_assert(sizeof(DBDBasePlayer_GetRightFootAudioSurfaceName) == 0x000010, "Wrong size on DBDBasePlayer_GetRightFootAudioSurfaceName");
static_assert(offsetof(DBDBasePlayer_GetRightFootAudioSurfaceName, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetRightFootAudioSurfaceName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetRightFootSurfaceType
// 0x0001 (0x0001 - 0x0000)
struct DBDBasePlayer_GetRightFootSurfaceType final
{
public:
	EPhysicalSurface                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetRightFootSurfaceType) == 0x000001, "Wrong alignment on DBDBasePlayer_GetRightFootSurfaceType");
static_assert(sizeof(DBDBasePlayer_GetRightFootSurfaceType) == 0x000001, "Wrong size on DBDBasePlayer_GetRightFootSurfaceType");
static_assert(offsetof(DBDBasePlayer_GetRightFootSurfaceType, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetRightFootSurfaceType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetSemanticTag
// 0x0020 (0x0020 - 0x0000)
struct DBDBasePlayer_GetSemanticTag final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetSemanticTag) == 0x000008, "Wrong alignment on DBDBasePlayer_GetSemanticTag");
static_assert(sizeof(DBDBasePlayer_GetSemanticTag) == 0x000020, "Wrong size on DBDBasePlayer_GetSemanticTag");
static_assert(offsetof(DBDBasePlayer_GetSemanticTag, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetSemanticTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetShowBlindDebugInfo
// 0x0001 (0x0001 - 0x0000)
struct DBDBasePlayer_GetShowBlindDebugInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetShowBlindDebugInfo) == 0x000001, "Wrong alignment on DBDBasePlayer_GetShowBlindDebugInfo");
static_assert(sizeof(DBDBasePlayer_GetShowBlindDebugInfo) == 0x000001, "Wrong size on DBDBasePlayer_GetShowBlindDebugInfo");
static_assert(offsetof(DBDBasePlayer_GetShowBlindDebugInfo, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetShowBlindDebugInfo::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaLegalMenuScreen.HandleMenuButtonClickEvent
// 0x0001 (0x0001 - 0x0000)
struct UMGAtlantaLegalMenuScreen_HandleMenuButtonClickEvent final
{
public:
	bool                                          isAccept;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaLegalMenuScreen_HandleMenuButtonClickEvent) == 0x000001, "Wrong alignment on UMGAtlantaLegalMenuScreen_HandleMenuButtonClickEvent");
static_assert(sizeof(UMGAtlantaLegalMenuScreen_HandleMenuButtonClickEvent) == 0x000001, "Wrong size on UMGAtlantaLegalMenuScreen_HandleMenuButtonClickEvent");
static_assert(offsetof(UMGAtlantaLegalMenuScreen_HandleMenuButtonClickEvent, isAccept) == 0x000000, "Member 'UMGAtlantaLegalMenuScreen_HandleMenuButtonClickEvent::isAccept' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaLegalMenuScreen.SetButtonText
// 0x0030 (0x0030 - 0x0000)
struct UMGAtlantaLegalMenuScreen_SetButtonText final
{
public:
	class FText                                   acceptText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   declineText;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaLegalMenuScreen_SetButtonText) == 0x000008, "Wrong alignment on UMGAtlantaLegalMenuScreen_SetButtonText");
static_assert(sizeof(UMGAtlantaLegalMenuScreen_SetButtonText) == 0x000030, "Wrong size on UMGAtlantaLegalMenuScreen_SetButtonText");
static_assert(offsetof(UMGAtlantaLegalMenuScreen_SetButtonText, acceptText) == 0x000000, "Member 'UMGAtlantaLegalMenuScreen_SetButtonText::acceptText' has a wrong offset!");
static_assert(offsetof(UMGAtlantaLegalMenuScreen_SetButtonText, declineText) == 0x000018, "Member 'UMGAtlantaLegalMenuScreen_SetButtonText::declineText' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaLegalMenuScreen.SetLegalText
// 0x0020 (0x0020 - 0x0000)
struct UMGAtlantaLegalMenuScreen_SetLegalText final
{
public:
	class FString                                 title;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 legalText;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaLegalMenuScreen_SetLegalText) == 0x000008, "Wrong alignment on UMGAtlantaLegalMenuScreen_SetLegalText");
static_assert(sizeof(UMGAtlantaLegalMenuScreen_SetLegalText) == 0x000020, "Wrong size on UMGAtlantaLegalMenuScreen_SetLegalText");
static_assert(offsetof(UMGAtlantaLegalMenuScreen_SetLegalText, title) == 0x000000, "Member 'UMGAtlantaLegalMenuScreen_SetLegalText::title' has a wrong offset!");
static_assert(offsetof(UMGAtlantaLegalMenuScreen_SetLegalText, legalText) == 0x000010, "Member 'UMGAtlantaLegalMenuScreen_SetLegalText::legalText' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.AddDetectionZone
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_AddDetectionZone final
{
public:
	EDetectionZone                                detectionZoneID;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    zone;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_AddDetectionZone) == 0x000008, "Wrong alignment on DBDPlayer_AddDetectionZone");
static_assert(sizeof(DBDPlayer_AddDetectionZone) == 0x000010, "Wrong size on DBDPlayer_AddDetectionZone");
static_assert(offsetof(DBDPlayer_AddDetectionZone, detectionZoneID) == 0x000000, "Member 'DBDPlayer_AddDetectionZone::detectionZoneID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_AddDetectionZone, zone) == 0x000008, "Member 'DBDPlayer_AddDetectionZone::zone' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.AttachInteractor
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_AttachInteractor final
{
public:
	class UInteractor*                            interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_AttachInteractor) == 0x000008, "Wrong alignment on DBDPlayer_AttachInteractor");
static_assert(sizeof(DBDPlayer_AttachInteractor) == 0x000008, "Wrong size on DBDPlayer_AttachInteractor");
static_assert(offsetof(DBDPlayer_AttachInteractor, interactor) == 0x000000, "Member 'DBDPlayer_AttachInteractor::interactor' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Authority_HandleScoreEvent
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayer_Authority_HandleScoreEvent final
{
public:
	struct FGameplayTag                           scoreTypeTag;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScoreEventData                        scoreEventData;                                    // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Authority_HandleScoreEvent) == 0x000008, "Wrong alignment on DBDPlayer_Authority_HandleScoreEvent");
static_assert(sizeof(DBDPlayer_Authority_HandleScoreEvent) == 0x000028, "Wrong size on DBDPlayer_Authority_HandleScoreEvent");
static_assert(offsetof(DBDPlayer_Authority_HandleScoreEvent, scoreTypeTag) == 0x000000, "Member 'DBDPlayer_Authority_HandleScoreEvent::scoreTypeTag' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Authority_HandleScoreEvent, scoreEventData) == 0x000010, "Member 'DBDPlayer_Authority_HandleScoreEvent::scoreEventData' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Authority_ImposeDynamicStatusEffect_DEPRECATED
// 0x0030 (0x0030 - 0x0000)
struct DBDPlayer_Authority_ImposeDynamicStatusEffect_DEPRECATED final
{
public:
	class FName                                   statusEffectID;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             originatingPlayer;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         customParam;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayModifierContainer*             originatingEffect;                                 // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Authority_ImposeDynamicStatusEffect_DEPRECATED) == 0x000008, "Wrong alignment on DBDPlayer_Authority_ImposeDynamicStatusEffect_DEPRECATED");
static_assert(sizeof(DBDPlayer_Authority_ImposeDynamicStatusEffect_DEPRECATED) == 0x000030, "Wrong size on DBDPlayer_Authority_ImposeDynamicStatusEffect_DEPRECATED");
static_assert(offsetof(DBDPlayer_Authority_ImposeDynamicStatusEffect_DEPRECATED, statusEffectID) == 0x000000, "Member 'DBDPlayer_Authority_ImposeDynamicStatusEffect_DEPRECATED::statusEffectID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Authority_ImposeDynamicStatusEffect_DEPRECATED, originatingPlayer) == 0x000010, "Member 'DBDPlayer_Authority_ImposeDynamicStatusEffect_DEPRECATED::originatingPlayer' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Authority_ImposeDynamicStatusEffect_DEPRECATED, customParam) == 0x000018, "Member 'DBDPlayer_Authority_ImposeDynamicStatusEffect_DEPRECATED::customParam' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Authority_ImposeDynamicStatusEffect_DEPRECATED, originatingEffect) == 0x000020, "Member 'DBDPlayer_Authority_ImposeDynamicStatusEffect_DEPRECATED::originatingEffect' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Authority_ImposeDynamicStatusEffect_DEPRECATED, ReturnValue) == 0x000028, "Member 'DBDPlayer_Authority_ImposeDynamicStatusEffect_DEPRECATED::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Authority_ImposeStatusEffect_DEPRECATED
// 0x0038 (0x0038 - 0x0000)
struct DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED final
{
public:
	class FName                                   statusEffectID;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             originatingPlayer;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         customParam;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayModifierContainer*             originatingEffect;                                 // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          shouldDisplay;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         lifetime;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED) == 0x000008, "Wrong alignment on DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED");
static_assert(sizeof(DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED) == 0x000038, "Wrong size on DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED");
static_assert(offsetof(DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED, statusEffectID) == 0x000000, "Member 'DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED::statusEffectID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED, originatingPlayer) == 0x000010, "Member 'DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED::originatingPlayer' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED, customParam) == 0x000018, "Member 'DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED::customParam' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED, originatingEffect) == 0x000020, "Member 'DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED::originatingEffect' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED, shouldDisplay) == 0x000028, "Member 'DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED::shouldDisplay' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED, lifetime) == 0x00002C, "Member 'DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED::lifetime' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED, ReturnValue) == 0x000030, "Member 'DBDPlayer_Authority_ImposeStatusEffect_DEPRECATED::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Authority_RemoveStatusEffectByID
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_Authority_RemoveStatusEffectByID final
{
public:
	class FName                                   statusEffectId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveAllWithID;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_Authority_RemoveStatusEffectByID) == 0x000004, "Wrong alignment on DBDPlayer_Authority_RemoveStatusEffectByID");
static_assert(sizeof(DBDPlayer_Authority_RemoveStatusEffectByID) == 0x000010, "Wrong size on DBDPlayer_Authority_RemoveStatusEffectByID");
static_assert(offsetof(DBDPlayer_Authority_RemoveStatusEffectByID, statusEffectId) == 0x000000, "Member 'DBDPlayer_Authority_RemoveStatusEffectByID::statusEffectId' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Authority_RemoveStatusEffectByID, bRemoveAllWithID) == 0x00000C, "Member 'DBDPlayer_Authority_RemoveStatusEffectByID::bRemoveAllWithID' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Authority_RequestStun
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_Authority_RequestStun final
{
public:
	EStunType                                     stunType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             stunner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Authority_RequestStun) == 0x000008, "Wrong alignment on DBDPlayer_Authority_RequestStun");
static_assert(sizeof(DBDPlayer_Authority_RequestStun) == 0x000010, "Wrong size on DBDPlayer_Authority_RequestStun");
static_assert(offsetof(DBDPlayer_Authority_RequestStun, stunType) == 0x000000, "Member 'DBDPlayer_Authority_RequestStun::stunType' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Authority_RequestStun, stunner) == 0x000008, "Member 'DBDPlayer_Authority_RequestStun::stunner' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Authority_SetDreamworldComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_Authority_SetDreamworldComponent final
{
public:
	class UCharacterDreamworldComponent*          component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Authority_SetDreamworldComponent) == 0x000008, "Wrong alignment on DBDPlayer_Authority_SetDreamworldComponent");
static_assert(sizeof(DBDPlayer_Authority_SetDreamworldComponent) == 0x000008, "Wrong size on DBDPlayer_Authority_SetDreamworldComponent");
static_assert(offsetof(DBDPlayer_Authority_SetDreamworldComponent, component) == 0x000000, "Member 'DBDPlayer_Authority_SetDreamworldComponent::component' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.CancelCarry
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_CancelCarry final
{
public:
	bool                                          alsoCancelForOtherPlayer;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_CancelCarry) == 0x000001, "Wrong alignment on DBDPlayer_CancelCarry");
static_assert(sizeof(DBDPlayer_CancelCarry) == 0x000001, "Wrong size on DBDPlayer_CancelCarry");
static_assert(offsetof(DBDPlayer_CancelCarry, alsoCancelForOtherPlayer) == 0x000000, "Member 'DBDPlayer_CancelCarry::alsoCancelForOtherPlayer' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Client_Debug_PlayerStartSnapping
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_Client_Debug_PlayerStartSnapping final
{
public:
	struct FVector                                location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Client_Debug_PlayerStartSnapping) == 0x000004, "Wrong alignment on DBDPlayer_Client_Debug_PlayerStartSnapping");
static_assert(sizeof(DBDPlayer_Client_Debug_PlayerStartSnapping) == 0x000010, "Wrong size on DBDPlayer_Client_Debug_PlayerStartSnapping");
static_assert(offsetof(DBDPlayer_Client_Debug_PlayerStartSnapping, location) == 0x000000, "Member 'DBDPlayer_Client_Debug_PlayerStartSnapping::location' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Client_Debug_PlayerStartSnapping, duration) == 0x00000C, "Member 'DBDPlayer_Client_Debug_PlayerStartSnapping::duration' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Client_SendCancelInteraction
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_Client_SendCancelInteraction final
{
public:
	const class UInteractionDefinition*           interactionDefinition;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Client_SendCancelInteraction) == 0x000008, "Wrong alignment on DBDPlayer_Client_SendCancelInteraction");
static_assert(sizeof(DBDPlayer_Client_SendCancelInteraction) == 0x000008, "Wrong size on DBDPlayer_Client_SendCancelInteraction");
static_assert(offsetof(DBDPlayer_Client_SendCancelInteraction, interactionDefinition) == 0x000000, "Member 'DBDPlayer_Client_SendCancelInteraction::interactionDefinition' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Client_TryInteraction
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_Client_TryInteraction final
{
public:
	class UInteractionDefinition*                 interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             requester;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          force;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          usingInputPersistence;                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_Client_TryInteraction) == 0x000008, "Wrong alignment on DBDPlayer_Client_TryInteraction");
static_assert(sizeof(DBDPlayer_Client_TryInteraction) == 0x000018, "Wrong size on DBDPlayer_Client_TryInteraction");
static_assert(offsetof(DBDPlayer_Client_TryInteraction, interaction) == 0x000000, "Member 'DBDPlayer_Client_TryInteraction::interaction' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Client_TryInteraction, requester) == 0x000008, "Member 'DBDPlayer_Client_TryInteraction::requester' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Client_TryInteraction, force) == 0x000010, "Member 'DBDPlayer_Client_TryInteraction::force' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Client_TryInteraction, usingInputPersistence) == 0x000011, "Member 'DBDPlayer_Client_TryInteraction::usingInputPersistence' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Client_TryInteractionType
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_Client_TryInteractionType final
{
public:
	EInputInteractionType                         interactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             requester;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Client_TryInteractionType) == 0x000008, "Wrong alignment on DBDPlayer_Client_TryInteractionType");
static_assert(sizeof(DBDPlayer_Client_TryInteractionType) == 0x000010, "Wrong size on DBDPlayer_Client_TryInteractionType");
static_assert(offsetof(DBDPlayer_Client_TryInteractionType, interactionType) == 0x000000, "Member 'DBDPlayer_Client_TryInteractionType::interactionType' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Client_TryInteractionType, requester) == 0x000008, "Member 'DBDPlayer_Client_TryInteractionType::requester' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.DBD_SetMouseLookUpSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_DBD_SetMouseLookUpSpeedMultiplier final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_DBD_SetMouseLookUpSpeedMultiplier) == 0x000004, "Wrong alignment on DBDPlayer_DBD_SetMouseLookUpSpeedMultiplier");
static_assert(sizeof(DBDPlayer_DBD_SetMouseLookUpSpeedMultiplier) == 0x000004, "Wrong size on DBDPlayer_DBD_SetMouseLookUpSpeedMultiplier");
static_assert(offsetof(DBDPlayer_DBD_SetMouseLookUpSpeedMultiplier, value) == 0x000000, "Member 'DBDPlayer_DBD_SetMouseLookUpSpeedMultiplier::value' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.DBD_SetMouseTurnSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_DBD_SetMouseTurnSpeedMultiplier final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_DBD_SetMouseTurnSpeedMultiplier) == 0x000004, "Wrong alignment on DBDPlayer_DBD_SetMouseTurnSpeedMultiplier");
static_assert(sizeof(DBDPlayer_DBD_SetMouseTurnSpeedMultiplier) == 0x000004, "Wrong size on DBDPlayer_DBD_SetMouseTurnSpeedMultiplier");
static_assert(offsetof(DBDPlayer_DBD_SetMouseTurnSpeedMultiplier, value) == 0x000000, "Member 'DBDPlayer_DBD_SetMouseTurnSpeedMultiplier::value' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Dissolve
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Dissolve final
{
public:
	bool                                          dissolve;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Dissolve) == 0x000001, "Wrong alignment on DBDPlayer_Dissolve");
static_assert(sizeof(DBDPlayer_Dissolve) == 0x000001, "Wrong size on DBDPlayer_Dissolve");
static_assert(offsetof(DBDPlayer_Dissolve, dissolve) == 0x000000, "Member 'DBDPlayer_Dissolve::dissolve' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetInteractionPlayerProperties
// 0x0050 (0x0050 - 0x0000)
struct DBDPlayer_GetInteractionPlayerProperties final
{
public:
	struct FInteractionPlayerProperties           ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetInteractionPlayerProperties) == 0x000004, "Wrong alignment on DBDPlayer_GetInteractionPlayerProperties");
static_assert(sizeof(DBDPlayer_GetInteractionPlayerProperties) == 0x000050, "Wrong size on DBDPlayer_GetInteractionPlayerProperties");
static_assert(offsetof(DBDPlayer_GetInteractionPlayerProperties, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetInteractionPlayerProperties::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.K2_SetActorLocationByBottomCapsule
// 0x00A4 (0x00A4 - 0x0000)
struct DBDPlayer_K2_SetActorLocationByBottomCapsule final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSweep;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepHitResult;                                    // 0x0010(0x0090)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_K2_SetActorLocationByBottomCapsule) == 0x000004, "Wrong alignment on DBDPlayer_K2_SetActorLocationByBottomCapsule");
static_assert(sizeof(DBDPlayer_K2_SetActorLocationByBottomCapsule) == 0x0000A4, "Wrong size on DBDPlayer_K2_SetActorLocationByBottomCapsule");
static_assert(offsetof(DBDPlayer_K2_SetActorLocationByBottomCapsule, NewLocation) == 0x000000, "Member 'DBDPlayer_K2_SetActorLocationByBottomCapsule::NewLocation' has a wrong offset!");
static_assert(offsetof(DBDPlayer_K2_SetActorLocationByBottomCapsule, bSweep) == 0x00000C, "Member 'DBDPlayer_K2_SetActorLocationByBottomCapsule::bSweep' has a wrong offset!");
static_assert(offsetof(DBDPlayer_K2_SetActorLocationByBottomCapsule, SweepHitResult) == 0x000010, "Member 'DBDPlayer_K2_SetActorLocationByBottomCapsule::SweepHitResult' has a wrong offset!");
static_assert(offsetof(DBDPlayer_K2_SetActorLocationByBottomCapsule, ReturnValue) == 0x0000A0, "Member 'DBDPlayer_K2_SetActorLocationByBottomCapsule::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_Broadcast_DebugPlayMontage
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayer_Multicast_Broadcast_DebugPlayMontage final
{
public:
	struct FAnimationMontageDescriptor            animMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         playRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_Multicast_Broadcast_DebugPlayMontage) == 0x000008, "Wrong alignment on DBDPlayer_Multicast_Broadcast_DebugPlayMontage");
static_assert(sizeof(DBDPlayer_Multicast_Broadcast_DebugPlayMontage) == 0x000028, "Wrong size on DBDPlayer_Multicast_Broadcast_DebugPlayMontage");
static_assert(offsetof(DBDPlayer_Multicast_Broadcast_DebugPlayMontage, animMontageID) == 0x000000, "Member 'DBDPlayer_Multicast_Broadcast_DebugPlayMontage::animMontageID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Multicast_Broadcast_DebugPlayMontage, playRate) == 0x000020, "Member 'DBDPlayer_Multicast_Broadcast_DebugPlayMontage::playRate' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_ConfirmItemDrop
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_ConfirmItemDrop final
{
public:
	bool                                          pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_ConfirmItemDrop) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_ConfirmItemDrop");
static_assert(sizeof(DBDPlayer_Multicast_ConfirmItemDrop) == 0x000001, "Wrong size on DBDPlayer_Multicast_ConfirmItemDrop");
static_assert(offsetof(DBDPlayer_Multicast_ConfirmItemDrop, pressed) == 0x000000, "Member 'DBDPlayer_Multicast_ConfirmItemDrop::pressed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_Debug_SetMaxWalkSpeed
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_Multicast_Debug_SetMaxWalkSpeed final
{
public:
	float                                         maxWalkSpeed;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_Debug_SetMaxWalkSpeed) == 0x000004, "Wrong alignment on DBDPlayer_Multicast_Debug_SetMaxWalkSpeed");
static_assert(sizeof(DBDPlayer_Multicast_Debug_SetMaxWalkSpeed) == 0x000004, "Wrong size on DBDPlayer_Multicast_Debug_SetMaxWalkSpeed");
static_assert(offsetof(DBDPlayer_Multicast_Debug_SetMaxWalkSpeed, maxWalkSpeed) == 0x000000, "Member 'DBDPlayer_Multicast_Debug_SetMaxWalkSpeed::maxWalkSpeed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_LeaveGame
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_Multicast_LeaveGame final
{
public:
	struct FGuid                                  uniqueLeavingPlayerId;                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_LeaveGame) == 0x000004, "Wrong alignment on DBDPlayer_Multicast_LeaveGame");
static_assert(sizeof(DBDPlayer_Multicast_LeaveGame) == 0x000010, "Wrong size on DBDPlayer_Multicast_LeaveGame");
static_assert(offsetof(DBDPlayer_Multicast_LeaveGame, uniqueLeavingPlayerId) == 0x000000, "Member 'DBDPlayer_Multicast_LeaveGame::uniqueLeavingPlayerId' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_ReplicateController
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_Multicast_ReplicateController final
{
public:
	class AController*                            newController;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_ReplicateController) == 0x000008, "Wrong alignment on DBDPlayer_Multicast_ReplicateController");
static_assert(sizeof(DBDPlayer_Multicast_ReplicateController) == 0x000008, "Wrong size on DBDPlayer_Multicast_ReplicateController");
static_assert(offsetof(DBDPlayer_Multicast_ReplicateController, newController) == 0x000000, "Member 'DBDPlayer_Multicast_ReplicateController::newController' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetAuthoritativeMovement
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetAuthoritativeMovement final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetAuthoritativeMovement) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetAuthoritativeMovement");
static_assert(sizeof(DBDPlayer_Multicast_SetAuthoritativeMovement) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetAuthoritativeMovement");
static_assert(offsetof(DBDPlayer_Multicast_SetAuthoritativeMovement, enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetAuthoritativeMovement::enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetContinuousPrintDebug
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetContinuousPrintDebug final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetContinuousPrintDebug) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetContinuousPrintDebug");
static_assert(sizeof(DBDPlayer_Multicast_SetContinuousPrintDebug) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetContinuousPrintDebug");
static_assert(offsetof(DBDPlayer_Multicast_SetContinuousPrintDebug, enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetContinuousPrintDebug::enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetCustomization
// 0x0038 (0x0038 - 0x0000)
struct DBDPlayer_Multicast_SetCustomization final
{
public:
	struct FEquippedPlayerCustomization           customization;                                     // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetCustomization) == 0x000008, "Wrong alignment on DBDPlayer_Multicast_SetCustomization");
static_assert(sizeof(DBDPlayer_Multicast_SetCustomization) == 0x000038, "Wrong size on DBDPlayer_Multicast_SetCustomization");
static_assert(offsetof(DBDPlayer_Multicast_SetCustomization, customization) == 0x000000, "Member 'DBDPlayer_Multicast_SetCustomization::customization' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetDebugCarry
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetDebugCarry final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetDebugCarry) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetDebugCarry");
static_assert(sizeof(DBDPlayer_Multicast_SetDebugCarry) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetDebugCarry");
static_assert(offsetof(DBDPlayer_Multicast_SetDebugCarry, enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetDebugCarry::enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetDebugPrintAvailableInteractions
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetDebugPrintAvailableInteractions final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetDebugPrintAvailableInteractions) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetDebugPrintAvailableInteractions");
static_assert(sizeof(DBDPlayer_Multicast_SetDebugPrintAvailableInteractions) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetDebugPrintAvailableInteractions");
static_assert(offsetof(DBDPlayer_Multicast_SetDebugPrintAvailableInteractions, enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetDebugPrintAvailableInteractions::enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetDebugSnapPoint
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetDebugSnapPoint final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetDebugSnapPoint) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetDebugSnapPoint");
static_assert(sizeof(DBDPlayer_Multicast_SetDebugSnapPoint) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetDebugSnapPoint");
static_assert(offsetof(DBDPlayer_Multicast_SetDebugSnapPoint, enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetDebugSnapPoint::enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetEnableCapsuleDynamicResize
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetEnableCapsuleDynamicResize final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetEnableCapsuleDynamicResize) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetEnableCapsuleDynamicResize");
static_assert(sizeof(DBDPlayer_Multicast_SetEnableCapsuleDynamicResize) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetEnableCapsuleDynamicResize");
static_assert(offsetof(DBDPlayer_Multicast_SetEnableCapsuleDynamicResize, enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetEnableCapsuleDynamicResize::enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetForceAuthoritativeMovement
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetForceAuthoritativeMovement final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetForceAuthoritativeMovement) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetForceAuthoritativeMovement");
static_assert(sizeof(DBDPlayer_Multicast_SetForceAuthoritativeMovement) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetForceAuthoritativeMovement");
static_assert(offsetof(DBDPlayer_Multicast_SetForceAuthoritativeMovement, value) == 0x000000, "Member 'DBDPlayer_Multicast_SetForceAuthoritativeMovement::value' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetInteractingPlayer
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_Multicast_SetInteractingPlayer final
{
public:
	class ADBDPlayer*                             interactingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetInteractingPlayer) == 0x000008, "Wrong alignment on DBDPlayer_Multicast_SetInteractingPlayer");
static_assert(sizeof(DBDPlayer_Multicast_SetInteractingPlayer) == 0x000008, "Wrong size on DBDPlayer_Multicast_SetInteractingPlayer");
static_assert(offsetof(DBDPlayer_Multicast_SetInteractingPlayer, interactingPlayer) == 0x000000, "Member 'DBDPlayer_Multicast_SetInteractingPlayer::interactingPlayer' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetReverseTraverseEnabled
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetReverseTraverseEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetReverseTraverseEnabled) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetReverseTraverseEnabled");
static_assert(sizeof(DBDPlayer_Multicast_SetReverseTraverseEnabled) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetReverseTraverseEnabled");
static_assert(offsetof(DBDPlayer_Multicast_SetReverseTraverseEnabled, enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetReverseTraverseEnabled::enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetRunVaultEnabled
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetRunVaultEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetRunVaultEnabled) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetRunVaultEnabled");
static_assert(sizeof(DBDPlayer_Multicast_SetRunVaultEnabled) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetRunVaultEnabled");
static_assert(offsetof(DBDPlayer_Multicast_SetRunVaultEnabled, enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetRunVaultEnabled::enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.OnControllerChanged
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_OnControllerChanged final
{
public:
	class APawn*                                  pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            oldController;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            newController;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_OnControllerChanged) == 0x000008, "Wrong alignment on DBDPlayer_OnControllerChanged");
static_assert(sizeof(DBDPlayer_OnControllerChanged) == 0x000018, "Wrong size on DBDPlayer_OnControllerChanged");
static_assert(offsetof(DBDPlayer_OnControllerChanged, pawn) == 0x000000, "Member 'DBDPlayer_OnControllerChanged::pawn' has a wrong offset!");
static_assert(offsetof(DBDPlayer_OnControllerChanged, oldController) == 0x000008, "Member 'DBDPlayer_OnControllerChanged::oldController' has a wrong offset!");
static_assert(offsetof(DBDPlayer_OnControllerChanged, newController) == 0x000010, "Member 'DBDPlayer_OnControllerChanged::newController' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.OnCurrentMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_OnCurrentMontageBlendingOut final
{
public:
	class UAnimMontage*                           MontageAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          interrupted;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_OnCurrentMontageBlendingOut) == 0x000008, "Wrong alignment on DBDPlayer_OnCurrentMontageBlendingOut");
static_assert(sizeof(DBDPlayer_OnCurrentMontageBlendingOut) == 0x000010, "Wrong size on DBDPlayer_OnCurrentMontageBlendingOut");
static_assert(offsetof(DBDPlayer_OnCurrentMontageBlendingOut, MontageAsset) == 0x000000, "Member 'DBDPlayer_OnCurrentMontageBlendingOut::MontageAsset' has a wrong offset!");
static_assert(offsetof(DBDPlayer_OnCurrentMontageBlendingOut, interrupted) == 0x000008, "Member 'DBDPlayer_OnCurrentMontageBlendingOut::interrupted' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.OnCurrentMontageComplete
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_OnCurrentMontageComplete final
{
public:
	class UAnimMontage*                           MontageAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          interrupted;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_OnCurrentMontageComplete) == 0x000008, "Wrong alignment on DBDPlayer_OnCurrentMontageComplete");
static_assert(sizeof(DBDPlayer_OnCurrentMontageComplete) == 0x000010, "Wrong size on DBDPlayer_OnCurrentMontageComplete");
static_assert(offsetof(DBDPlayer_OnCurrentMontageComplete, MontageAsset) == 0x000000, "Member 'DBDPlayer_OnCurrentMontageComplete::MontageAsset' has a wrong offset!");
static_assert(offsetof(DBDPlayer_OnCurrentMontageComplete, interrupted) == 0x000008, "Member 'DBDPlayer_OnCurrentMontageComplete::interrupted' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.OnHudVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_OnHudVisibilityChanged final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_OnHudVisibilityChanged) == 0x000001, "Wrong alignment on DBDPlayer_OnHudVisibilityChanged");
static_assert(sizeof(DBDPlayer_OnHudVisibilityChanged) == 0x000001, "Wrong size on DBDPlayer_OnHudVisibilityChanged");
static_assert(offsetof(DBDPlayer_OnHudVisibilityChanged, isVisible) == 0x000000, "Member 'DBDPlayer_OnHudVisibilityChanged::isVisible' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.OnHudVisibilityChangedNative
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_OnHudVisibilityChangedNative final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_OnHudVisibilityChangedNative) == 0x000001, "Wrong alignment on DBDPlayer_OnHudVisibilityChangedNative");
static_assert(sizeof(DBDPlayer_OnHudVisibilityChangedNative) == 0x000001, "Wrong size on DBDPlayer_OnHudVisibilityChangedNative");
static_assert(offsetof(DBDPlayer_OnHudVisibilityChangedNative, isVisible) == 0x000000, "Member 'DBDPlayer_OnHudVisibilityChangedNative::isVisible' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.OnPickupEnd
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_OnPickupEnd final
{
public:
	class ADBDPlayer*                             target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_OnPickupEnd) == 0x000008, "Wrong alignment on DBDPlayer_OnPickupEnd");
static_assert(sizeof(DBDPlayer_OnPickupEnd) == 0x000008, "Wrong size on DBDPlayer_OnPickupEnd");
static_assert(offsetof(DBDPlayer_OnPickupEnd, target) == 0x000000, "Member 'DBDPlayer_OnPickupEnd::target' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.OnPickupStart
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_OnPickupStart final
{
public:
	class ADBDPlayer*                             target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_OnPickupStart) == 0x000008, "Wrong alignment on DBDPlayer_OnPickupStart");
static_assert(sizeof(DBDPlayer_OnPickupStart) == 0x000008, "Wrong size on DBDPlayer_OnPickupStart");
static_assert(offsetof(DBDPlayer_OnPickupStart, target) == 0x000000, "Member 'DBDPlayer_OnPickupStart::target' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.PlayMontage
// 0x0030 (0x0030 - 0x0000)
struct DBDPlayer_PlayMontage final
{
public:
	struct FAnimationMontageDescriptor            animMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         playRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isFollower;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_PlayMontage) == 0x000008, "Wrong alignment on DBDPlayer_PlayMontage");
static_assert(sizeof(DBDPlayer_PlayMontage) == 0x000030, "Wrong size on DBDPlayer_PlayMontage");
static_assert(offsetof(DBDPlayer_PlayMontage, animMontageID) == 0x000000, "Member 'DBDPlayer_PlayMontage::animMontageID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_PlayMontage, playRate) == 0x000020, "Member 'DBDPlayer_PlayMontage::playRate' has a wrong offset!");
static_assert(offsetof(DBDPlayer_PlayMontage, isFollower) == 0x000024, "Member 'DBDPlayer_PlayMontage::isFollower' has a wrong offset!");
static_assert(offsetof(DBDPlayer_PlayMontage, ReturnValue) == 0x000028, "Member 'DBDPlayer_PlayMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.RemoveStatusEffect
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_RemoveStatusEffect final
{
public:
	class UStatusEffect*                          statusEffect;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_RemoveStatusEffect) == 0x000008, "Wrong alignment on DBDPlayer_RemoveStatusEffect");
static_assert(sizeof(DBDPlayer_RemoveStatusEffect) == 0x000008, "Wrong size on DBDPlayer_RemoveStatusEffect");
static_assert(offsetof(DBDPlayer_RemoveStatusEffect, statusEffect) == 0x000000, "Member 'DBDPlayer_RemoveStatusEffect::statusEffect' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.ResetPitchScale
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_ResetPitchScale final
{
public:
	float                                         adjustTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_ResetPitchScale) == 0x000004, "Wrong alignment on DBDPlayer_ResetPitchScale");
static_assert(sizeof(DBDPlayer_ResetPitchScale) == 0x000004, "Wrong size on DBDPlayer_ResetPitchScale");
static_assert(offsetof(DBDPlayer_ResetPitchScale, adjustTime) == 0x000000, "Member 'DBDPlayer_ResetPitchScale::adjustTime' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_Broadcast_DebugPlayMontage
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayer_Server_Broadcast_DebugPlayMontage final
{
public:
	struct FAnimationMontageDescriptor            animMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         playRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_Server_Broadcast_DebugPlayMontage) == 0x000008, "Wrong alignment on DBDPlayer_Server_Broadcast_DebugPlayMontage");
static_assert(sizeof(DBDPlayer_Server_Broadcast_DebugPlayMontage) == 0x000028, "Wrong size on DBDPlayer_Server_Broadcast_DebugPlayMontage");
static_assert(offsetof(DBDPlayer_Server_Broadcast_DebugPlayMontage, animMontageID) == 0x000000, "Member 'DBDPlayer_Server_Broadcast_DebugPlayMontage::animMontageID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Server_Broadcast_DebugPlayMontage, playRate) == 0x000020, "Member 'DBDPlayer_Server_Broadcast_DebugPlayMontage::playRate' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_DebugSetCustomization
// 0x0038 (0x0038 - 0x0000)
struct DBDPlayer_Server_DebugSetCustomization final
{
public:
	struct FEquippedPlayerCustomization           customization;                                     // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_DebugSetCustomization) == 0x000008, "Wrong alignment on DBDPlayer_Server_DebugSetCustomization");
static_assert(sizeof(DBDPlayer_Server_DebugSetCustomization) == 0x000038, "Wrong size on DBDPlayer_Server_DebugSetCustomization");
static_assert(offsetof(DBDPlayer_Server_DebugSetCustomization, customization) == 0x000000, "Member 'DBDPlayer_Server_DebugSetCustomization::customization' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_Drop
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayer_Server_Drop final
{
public:
	class ACollectable*                           item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rotation;                                          // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          onDeath;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_Server_Drop) == 0x000008, "Wrong alignment on DBDPlayer_Server_Drop");
static_assert(sizeof(DBDPlayer_Server_Drop) == 0x000028, "Wrong size on DBDPlayer_Server_Drop");
static_assert(offsetof(DBDPlayer_Server_Drop, item) == 0x000000, "Member 'DBDPlayer_Server_Drop::item' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Server_Drop, location) == 0x000008, "Member 'DBDPlayer_Server_Drop::location' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Server_Drop, rotation) == 0x000014, "Member 'DBDPlayer_Server_Drop::rotation' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Server_Drop, onDeath) == 0x000020, "Member 'DBDPlayer_Server_Drop::onDeath' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_SendAbilityInput
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Server_SendAbilityInput final
{
public:
	bool                                          pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_SendAbilityInput) == 0x000001, "Wrong alignment on DBDPlayer_Server_SendAbilityInput");
static_assert(sizeof(DBDPlayer_Server_SendAbilityInput) == 0x000001, "Wrong size on DBDPlayer_Server_SendAbilityInput");
static_assert(offsetof(DBDPlayer_Server_SendAbilityInput, pressed) == 0x000000, "Member 'DBDPlayer_Server_SendAbilityInput::pressed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_SendAbilityTwoInput
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Server_SendAbilityTwoInput final
{
public:
	bool                                          pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_SendAbilityTwoInput) == 0x000001, "Wrong alignment on DBDPlayer_Server_SendAbilityTwoInput");
static_assert(sizeof(DBDPlayer_Server_SendAbilityTwoInput) == 0x000001, "Wrong size on DBDPlayer_Server_SendAbilityTwoInput");
static_assert(offsetof(DBDPlayer_Server_SendAbilityTwoInput, pressed) == 0x000000, "Member 'DBDPlayer_Server_SendAbilityTwoInput::pressed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_SendFastInteractionInput
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Server_SendFastInteractionInput final
{
public:
	bool                                          pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_SendFastInteractionInput) == 0x000001, "Wrong alignment on DBDPlayer_Server_SendFastInteractionInput");
static_assert(sizeof(DBDPlayer_Server_SendFastInteractionInput) == 0x000001, "Wrong size on DBDPlayer_Server_SendFastInteractionInput");
static_assert(offsetof(DBDPlayer_Server_SendFastInteractionInput, pressed) == 0x000000, "Member 'DBDPlayer_Server_SendFastInteractionInput::pressed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_SendInteractionInput
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Server_SendInteractionInput final
{
public:
	bool                                          pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_SendInteractionInput) == 0x000001, "Wrong alignment on DBDPlayer_Server_SendInteractionInput");
static_assert(sizeof(DBDPlayer_Server_SendInteractionInput) == 0x000001, "Wrong size on DBDPlayer_Server_SendInteractionInput");
static_assert(offsetof(DBDPlayer_Server_SendInteractionInput, pressed) == 0x000000, "Member 'DBDPlayer_Server_SendInteractionInput::pressed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_SendItemDropInput
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Server_SendItemDropInput final
{
public:
	bool                                          pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_SendItemDropInput) == 0x000001, "Wrong alignment on DBDPlayer_Server_SendItemDropInput");
static_assert(sizeof(DBDPlayer_Server_SendItemDropInput) == 0x000001, "Wrong size on DBDPlayer_Server_SendItemDropInput");
static_assert(offsetof(DBDPlayer_Server_SendItemDropInput, pressed) == 0x000000, "Member 'DBDPlayer_Server_SendItemDropInput::pressed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_SendItemUseInput
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayer_Server_SendItemUseInput final
{
public:
	bool                                          pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          requestItemUse;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_SendItemUseInput) == 0x000001, "Wrong alignment on DBDPlayer_Server_SendItemUseInput");
static_assert(sizeof(DBDPlayer_Server_SendItemUseInput) == 0x000002, "Wrong size on DBDPlayer_Server_SendItemUseInput");
static_assert(offsetof(DBDPlayer_Server_SendItemUseInput, pressed) == 0x000000, "Member 'DBDPlayer_Server_SendItemUseInput::pressed' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Server_SendItemUseInput, requestItemUse) == 0x000001, "Member 'DBDPlayer_Server_SendItemUseInput::requestItemUse' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_SendSecondaryActionPressed
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Server_SendSecondaryActionPressed final
{
public:
	bool                                          fromCancelRequest;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_SendSecondaryActionPressed) == 0x000001, "Wrong alignment on DBDPlayer_Server_SendSecondaryActionPressed");
static_assert(sizeof(DBDPlayer_Server_SendSecondaryActionPressed) == 0x000001, "Wrong size on DBDPlayer_Server_SendSecondaryActionPressed");
static_assert(offsetof(DBDPlayer_Server_SendSecondaryActionPressed, fromCancelRequest) == 0x000000, "Member 'DBDPlayer_Server_SendSecondaryActionPressed::fromCancelRequest' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_UpdateScreenAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_Server_UpdateScreenAspectRatio final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_UpdateScreenAspectRatio) == 0x000004, "Wrong alignment on DBDPlayer_Server_UpdateScreenAspectRatio");
static_assert(sizeof(DBDPlayer_Server_UpdateScreenAspectRatio) == 0x000004, "Wrong size on DBDPlayer_Server_UpdateScreenAspectRatio");
static_assert(offsetof(DBDPlayer_Server_UpdateScreenAspectRatio, value) == 0x000000, "Member 'DBDPlayer_Server_UpdateScreenAspectRatio::value' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetAllDetectionZonesEnabled
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetAllDetectionZonesEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetAllDetectionZonesEnabled) == 0x000001, "Wrong alignment on DBDPlayer_SetAllDetectionZonesEnabled");
static_assert(sizeof(DBDPlayer_SetAllDetectionZonesEnabled) == 0x000001, "Wrong size on DBDPlayer_SetAllDetectionZonesEnabled");
static_assert(offsetof(DBDPlayer_SetAllDetectionZonesEnabled, enabled) == 0x000000, "Member 'DBDPlayer_SetAllDetectionZonesEnabled::enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetAllowNavigation
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetAllowNavigation final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetAllowNavigation) == 0x000001, "Wrong alignment on DBDPlayer_SetAllowNavigation");
static_assert(sizeof(DBDPlayer_SetAllowNavigation) == 0x000001, "Wrong size on DBDPlayer_SetAllowNavigation");
static_assert(offsetof(DBDPlayer_SetAllowNavigation, enable) == 0x000000, "Member 'DBDPlayer_SetAllowNavigation::enable' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetAnimationCrouchState
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetAnimationCrouchState final
{
public:
	bool                                          crouched;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetAnimationCrouchState) == 0x000001, "Wrong alignment on DBDPlayer_SetAnimationCrouchState");
static_assert(sizeof(DBDPlayer_SetAnimationCrouchState) == 0x000001, "Wrong size on DBDPlayer_SetAnimationCrouchState");
static_assert(offsetof(DBDPlayer_SetAnimationCrouchState, crouched) == 0x000000, "Member 'DBDPlayer_SetAnimationCrouchState::crouched' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetDetectionZoneEnabled
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayer_SetDetectionZoneEnabled final
{
public:
	EDetectionZone                                detectionZoneID;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          enabled;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetDetectionZoneEnabled) == 0x000001, "Wrong alignment on DBDPlayer_SetDetectionZoneEnabled");
static_assert(sizeof(DBDPlayer_SetDetectionZoneEnabled) == 0x000002, "Wrong size on DBDPlayer_SetDetectionZoneEnabled");
static_assert(offsetof(DBDPlayer_SetDetectionZoneEnabled, detectionZoneID) == 0x000000, "Member 'DBDPlayer_SetDetectionZoneEnabled::detectionZoneID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_SetDetectionZoneEnabled, enabled) == 0x000001, "Member 'DBDPlayer_SetDetectionZoneEnabled::enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetFeetOnGround
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetFeetOnGround final
{
public:
	bool                                          feetOnGround;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetFeetOnGround) == 0x000001, "Wrong alignment on DBDPlayer_SetFeetOnGround");
static_assert(sizeof(DBDPlayer_SetFeetOnGround) == 0x000001, "Wrong size on DBDPlayer_SetFeetOnGround");
static_assert(offsetof(DBDPlayer_SetFeetOnGround, feetOnGround) == 0x000000, "Member 'DBDPlayer_SetFeetOnGround::feetOnGround' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetFirstPersonModelEnabled
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayer_SetFirstPersonModelEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          force;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetFirstPersonModelEnabled) == 0x000001, "Wrong alignment on DBDPlayer_SetFirstPersonModelEnabled");
static_assert(sizeof(DBDPlayer_SetFirstPersonModelEnabled) == 0x000002, "Wrong size on DBDPlayer_SetFirstPersonModelEnabled");
static_assert(offsetof(DBDPlayer_SetFirstPersonModelEnabled, enabled) == 0x000000, "Member 'DBDPlayer_SetFirstPersonModelEnabled::enabled' has a wrong offset!");
static_assert(offsetof(DBDPlayer_SetFirstPersonModelEnabled, force) == 0x000001, "Member 'DBDPlayer_SetFirstPersonModelEnabled::force' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetFirstPersonVfxsVisibility
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetFirstPersonVfxsVisibility final
{
public:
	bool                                          isFirstPerson;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetFirstPersonVfxsVisibility) == 0x000001, "Wrong alignment on DBDPlayer_SetFirstPersonVfxsVisibility");
static_assert(sizeof(DBDPlayer_SetFirstPersonVfxsVisibility) == 0x000001, "Wrong size on DBDPlayer_SetFirstPersonVfxsVisibility");
static_assert(offsetof(DBDPlayer_SetFirstPersonVfxsVisibility, isFirstPerson) == 0x000000, "Member 'DBDPlayer_SetFirstPersonVfxsVisibility::isFirstPerson' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetForceDisableSkillChecks
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetForceDisableSkillChecks final
{
public:
	bool                                          isEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetForceDisableSkillChecks) == 0x000001, "Wrong alignment on DBDPlayer_SetForceDisableSkillChecks");
static_assert(sizeof(DBDPlayer_SetForceDisableSkillChecks) == 0x000001, "Wrong size on DBDPlayer_SetForceDisableSkillChecks");
static_assert(offsetof(DBDPlayer_SetForceDisableSkillChecks, isEnabled) == 0x000000, "Member 'DBDPlayer_SetForceDisableSkillChecks::isEnabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetIsCloaked
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayer_SetIsCloaked final
{
public:
	bool                                          isCloaked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          forced;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetIsCloaked) == 0x000001, "Wrong alignment on DBDPlayer_SetIsCloaked");
static_assert(sizeof(DBDPlayer_SetIsCloaked) == 0x000002, "Wrong size on DBDPlayer_SetIsCloaked");
static_assert(offsetof(DBDPlayer_SetIsCloaked, isCloaked) == 0x000000, "Member 'DBDPlayer_SetIsCloaked::isCloaked' has a wrong offset!");
static_assert(offsetof(DBDPlayer_SetIsCloaked, forced) == 0x000001, "Member 'DBDPlayer_SetIsCloaked::forced' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetItemUseAsToggle
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetItemUseAsToggle final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetItemUseAsToggle) == 0x000001, "Wrong alignment on DBDPlayer_SetItemUseAsToggle");
static_assert(sizeof(DBDPlayer_SetItemUseAsToggle) == 0x000001, "Wrong size on DBDPlayer_SetItemUseAsToggle");
static_assert(offsetof(DBDPlayer_SetItemUseAsToggle, value) == 0x000000, "Member 'DBDPlayer_SetItemUseAsToggle::value' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetQuestEventHandlerComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_SetQuestEventHandlerComponent final
{
public:
	class UActorComponent*                        component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetQuestEventHandlerComponent) == 0x000008, "Wrong alignment on DBDPlayer_SetQuestEventHandlerComponent");
static_assert(sizeof(DBDPlayer_SetQuestEventHandlerComponent) == 0x000008, "Wrong size on DBDPlayer_SetQuestEventHandlerComponent");
static_assert(offsetof(DBDPlayer_SetQuestEventHandlerComponent, component) == 0x000000, "Member 'DBDPlayer_SetQuestEventHandlerComponent::component' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetReverseMontage
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetReverseMontage final
{
public:
	bool                                          reverse;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetReverseMontage) == 0x000001, "Wrong alignment on DBDPlayer_SetReverseMontage");
static_assert(sizeof(DBDPlayer_SetReverseMontage) == 0x000001, "Wrong size on DBDPlayer_SetReverseMontage");
static_assert(offsetof(DBDPlayer_SetReverseMontage, reverse) == 0x000000, "Member 'DBDPlayer_SetReverseMontage::reverse' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetShouldPlayCarryAnim
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetShouldPlayCarryAnim final
{
public:
	bool                                          shouldPlayCarryAnim;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetShouldPlayCarryAnim) == 0x000001, "Wrong alignment on DBDPlayer_SetShouldPlayCarryAnim");
static_assert(sizeof(DBDPlayer_SetShouldPlayCarryAnim) == 0x000001, "Wrong size on DBDPlayer_SetShouldPlayCarryAnim");
static_assert(offsetof(DBDPlayer_SetShouldPlayCarryAnim, shouldPlayCarryAnim) == 0x000000, "Member 'DBDPlayer_SetShouldPlayCarryAnim::shouldPlayCarryAnim' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SnapCharacter
// 0x002C (0x002C - 0x0000)
struct DBDPlayer_SnapCharacter final
{
public:
	bool                                          snapPosition;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                position;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         stopSnapDistance;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          snapRotation;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               rotation;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         time;                                              // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useZCoord;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          sweepOnFinalSnap;                                  // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          snapRoll;                                          // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_SnapCharacter) == 0x000004, "Wrong alignment on DBDPlayer_SnapCharacter");
static_assert(sizeof(DBDPlayer_SnapCharacter) == 0x00002C, "Wrong size on DBDPlayer_SnapCharacter");
static_assert(offsetof(DBDPlayer_SnapCharacter, snapPosition) == 0x000000, "Member 'DBDPlayer_SnapCharacter::snapPosition' has a wrong offset!");
static_assert(offsetof(DBDPlayer_SnapCharacter, position) == 0x000004, "Member 'DBDPlayer_SnapCharacter::position' has a wrong offset!");
static_assert(offsetof(DBDPlayer_SnapCharacter, stopSnapDistance) == 0x000010, "Member 'DBDPlayer_SnapCharacter::stopSnapDistance' has a wrong offset!");
static_assert(offsetof(DBDPlayer_SnapCharacter, snapRotation) == 0x000014, "Member 'DBDPlayer_SnapCharacter::snapRotation' has a wrong offset!");
static_assert(offsetof(DBDPlayer_SnapCharacter, rotation) == 0x000018, "Member 'DBDPlayer_SnapCharacter::rotation' has a wrong offset!");
static_assert(offsetof(DBDPlayer_SnapCharacter, time) == 0x000024, "Member 'DBDPlayer_SnapCharacter::time' has a wrong offset!");
static_assert(offsetof(DBDPlayer_SnapCharacter, useZCoord) == 0x000028, "Member 'DBDPlayer_SnapCharacter::useZCoord' has a wrong offset!");
static_assert(offsetof(DBDPlayer_SnapCharacter, sweepOnFinalSnap) == 0x000029, "Member 'DBDPlayer_SnapCharacter::sweepOnFinalSnap' has a wrong offset!");
static_assert(offsetof(DBDPlayer_SnapCharacter, snapRoll) == 0x00002A, "Member 'DBDPlayer_SnapCharacter::snapRoll' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.TriggerAnimNotify
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_TriggerAnimNotify final
{
public:
	EAnimNotifyType                               animNotifyType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_TriggerAnimNotify) == 0x000001, "Wrong alignment on DBDPlayer_TriggerAnimNotify");
static_assert(sizeof(DBDPlayer_TriggerAnimNotify) == 0x000001, "Wrong size on DBDPlayer_TriggerAnimNotify");
static_assert(offsetof(DBDPlayer_TriggerAnimNotify, animNotifyType) == 0x000000, "Member 'DBDPlayer_TriggerAnimNotify::animNotifyType' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.TryFireScoreEvent
// 0x000C (0x000C - 0x0000)
struct DBDPlayer_TryFireScoreEvent final
{
public:
	EDBDScoreTypes                                scoreType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         percentToAward;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_TryFireScoreEvent) == 0x000004, "Wrong alignment on DBDPlayer_TryFireScoreEvent");
static_assert(sizeof(DBDPlayer_TryFireScoreEvent) == 0x00000C, "Wrong size on DBDPlayer_TryFireScoreEvent");
static_assert(offsetof(DBDPlayer_TryFireScoreEvent, scoreType) == 0x000000, "Member 'DBDPlayer_TryFireScoreEvent::scoreType' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryFireScoreEvent, percentToAward) == 0x000004, "Member 'DBDPlayer_TryFireScoreEvent::percentToAward' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryFireScoreEvent, ReturnValue) == 0x000008, "Member 'DBDPlayer_TryFireScoreEvent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.TryInteraction
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_TryInteraction final
{
public:
	class UInteractionDefinition*                 interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             requester;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          force;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          usingInputPersistence;                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_TryInteraction) == 0x000008, "Wrong alignment on DBDPlayer_TryInteraction");
static_assert(sizeof(DBDPlayer_TryInteraction) == 0x000018, "Wrong size on DBDPlayer_TryInteraction");
static_assert(offsetof(DBDPlayer_TryInteraction, interaction) == 0x000000, "Member 'DBDPlayer_TryInteraction::interaction' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteraction, requester) == 0x000008, "Member 'DBDPlayer_TryInteraction::requester' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteraction, force) == 0x000010, "Member 'DBDPlayer_TryInteraction::force' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteraction, usingInputPersistence) == 0x000011, "Member 'DBDPlayer_TryInteraction::usingInputPersistence' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteraction, ReturnValue) == 0x000012, "Member 'DBDPlayer_TryInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.TryInteractionType
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_TryInteractionType final
{
public:
	EInputInteractionType                         interactionInputType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             requester;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          usingInputPersistence;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          force;                                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_TryInteractionType) == 0x000008, "Wrong alignment on DBDPlayer_TryInteractionType");
static_assert(sizeof(DBDPlayer_TryInteractionType) == 0x000018, "Wrong size on DBDPlayer_TryInteractionType");
static_assert(offsetof(DBDPlayer_TryInteractionType, interactionInputType) == 0x000000, "Member 'DBDPlayer_TryInteractionType::interactionInputType' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteractionType, requester) == 0x000008, "Member 'DBDPlayer_TryInteractionType::requester' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteractionType, usingInputPersistence) == 0x000010, "Member 'DBDPlayer_TryInteractionType::usingInputPersistence' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteractionType, force) == 0x000011, "Member 'DBDPlayer_TryInteractionType::force' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteractionType, ReturnValue) == 0x000012, "Member 'DBDPlayer_TryInteractionType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.CanInterrupt_BP
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_CanInterrupt_BP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_CanInterrupt_BP) == 0x000001, "Wrong alignment on DBDPlayer_CanInterrupt_BP");
static_assert(sizeof(DBDPlayer_CanInterrupt_BP) == 0x000001, "Wrong size on DBDPlayer_CanInterrupt_BP");
static_assert(offsetof(DBDPlayer_CanInterrupt_BP, ReturnValue) == 0x000000, "Member 'DBDPlayer_CanInterrupt_BP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.FindClosestSlashablePlayerInDetectionZone
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_FindClosestSlashablePlayerInDetectionZone final
{
public:
	EDetectionZone                                detectionZoneID;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_FindClosestSlashablePlayerInDetectionZone) == 0x000008, "Wrong alignment on DBDPlayer_FindClosestSlashablePlayerInDetectionZone");
static_assert(sizeof(DBDPlayer_FindClosestSlashablePlayerInDetectionZone) == 0x000010, "Wrong size on DBDPlayer_FindClosestSlashablePlayerInDetectionZone");
static_assert(offsetof(DBDPlayer_FindClosestSlashablePlayerInDetectionZone, detectionZoneID) == 0x000000, "Member 'DBDPlayer_FindClosestSlashablePlayerInDetectionZone::detectionZoneID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_FindClosestSlashablePlayerInDetectionZone, ReturnValue) == 0x000008, "Member 'DBDPlayer_FindClosestSlashablePlayerInDetectionZone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetActorLocationFromFeetLocation
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_GetActorLocationFromFeetLocation final
{
public:
	struct FVector                                FeetLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetActorLocationFromFeetLocation) == 0x000004, "Wrong alignment on DBDPlayer_GetActorLocationFromFeetLocation");
static_assert(sizeof(DBDPlayer_GetActorLocationFromFeetLocation) == 0x000018, "Wrong size on DBDPlayer_GetActorLocationFromFeetLocation");
static_assert(offsetof(DBDPlayer_GetActorLocationFromFeetLocation, FeetLocation) == 0x000000, "Member 'DBDPlayer_GetActorLocationFromFeetLocation::FeetLocation' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetActorLocationFromFeetLocation, ReturnValue) == 0x00000C, "Member 'DBDPlayer_GetActorLocationFromFeetLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetAnimInstance final
{
public:
	class UAnimInstance*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetAnimInstance) == 0x000008, "Wrong alignment on DBDPlayer_GetAnimInstance");
static_assert(sizeof(DBDPlayer_GetAnimInstance) == 0x000008, "Wrong size on DBDPlayer_GetAnimInstance");
static_assert(offsetof(DBDPlayer_GetAnimInstance, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetAnimInstance::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetAnimTags
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_GetAnimTags final
{
public:
	TArray<class FName>                           outTags;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetAnimTags) == 0x000008, "Wrong alignment on DBDPlayer_GetAnimTags");
static_assert(sizeof(DBDPlayer_GetAnimTags) == 0x000010, "Wrong size on DBDPlayer_GetAnimTags");
static_assert(offsetof(DBDPlayer_GetAnimTags, outTags) == 0x000000, "Member 'DBDPlayer_GetAnimTags::outTags' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetAssociatedPlayerState
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetAssociatedPlayerState final
{
public:
	class APlayerState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetAssociatedPlayerState) == 0x000008, "Wrong alignment on DBDPlayer_GetAssociatedPlayerState");
static_assert(sizeof(DBDPlayer_GetAssociatedPlayerState) == 0x000008, "Wrong size on DBDPlayer_GetAssociatedPlayerState");
static_assert(offsetof(DBDPlayer_GetAssociatedPlayerState, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetAssociatedPlayerState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetAttachPoint
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_GetAttachPoint final
{
public:
	class FName                                   attachPointName;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetAttachPoint) == 0x000008, "Wrong alignment on DBDPlayer_GetAttachPoint");
static_assert(sizeof(DBDPlayer_GetAttachPoint) == 0x000018, "Wrong size on DBDPlayer_GetAttachPoint");
static_assert(offsetof(DBDPlayer_GetAttachPoint, attachPointName) == 0x000000, "Member 'DBDPlayer_GetAttachPoint::attachPointName' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetAttachPoint, ReturnValue) == 0x000010, "Member 'DBDPlayer_GetAttachPoint::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetAuthoritativeMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetAuthoritativeMovementComponent final
{
public:
	class UAuthoritativeMovementComponent*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetAuthoritativeMovementComponent) == 0x000008, "Wrong alignment on DBDPlayer_GetAuthoritativeMovementComponent");
static_assert(sizeof(DBDPlayer_GetAuthoritativeMovementComponent) == 0x000008, "Wrong size on DBDPlayer_GetAuthoritativeMovementComponent");
static_assert(offsetof(DBDPlayer_GetAuthoritativeMovementComponent, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetAuthoritativeMovementComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetAverageVelocity
// 0x000C (0x000C - 0x0000)
struct DBDPlayer_GetAverageVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetAverageVelocity) == 0x000004, "Wrong alignment on DBDPlayer_GetAverageVelocity");
static_assert(sizeof(DBDPlayer_GetAverageVelocity) == 0x00000C, "Wrong size on DBDPlayer_GetAverageVelocity");
static_assert(offsetof(DBDPlayer_GetAverageVelocity, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetAverageVelocity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetBlindableComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetBlindableComponent final
{
public:
	class UBlindableComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetBlindableComponent) == 0x000008, "Wrong alignment on DBDPlayer_GetBlindableComponent");
static_assert(sizeof(DBDPlayer_GetBlindableComponent) == 0x000008, "Wrong size on DBDPlayer_GetBlindableComponent");
static_assert(offsetof(DBDPlayer_GetBlindableComponent, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetBlindableComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetBoneLocation
// 0x001C (0x001C - 0x0000)
struct DBDPlayer_GetBoneLocation final
{
public:
	class FName                                   name;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneSpaces                                   space;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetBoneLocation) == 0x000004, "Wrong alignment on DBDPlayer_GetBoneLocation");
static_assert(sizeof(DBDPlayer_GetBoneLocation) == 0x00001C, "Wrong size on DBDPlayer_GetBoneLocation");
static_assert(offsetof(DBDPlayer_GetBoneLocation, name) == 0x000000, "Member 'DBDPlayer_GetBoneLocation::name' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetBoneLocation, space) == 0x00000C, "Member 'DBDPlayer_GetBoneLocation::space' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetBoneLocation, ReturnValue) == 0x000010, "Member 'DBDPlayer_GetBoneLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetCameraManager
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetCameraManager final
{
public:
	class ADBDPlayerCameraManager*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetCameraManager) == 0x000008, "Wrong alignment on DBDPlayer_GetCameraManager");
static_assert(sizeof(DBDPlayer_GetCameraManager) == 0x000008, "Wrong size on DBDPlayer_GetCameraManager");
static_assert(offsetof(DBDPlayer_GetCameraManager, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetCameraManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetCharacterInventoryComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetCharacterInventoryComponent final
{
public:
	class UCharacterInventoryComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetCharacterInventoryComponent) == 0x000008, "Wrong alignment on DBDPlayer_GetCharacterInventoryComponent");
static_assert(sizeof(DBDPlayer_GetCharacterInventoryComponent) == 0x000008, "Wrong size on DBDPlayer_GetCharacterInventoryComponent");
static_assert(offsetof(DBDPlayer_GetCharacterInventoryComponent, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetCharacterInventoryComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetChaseComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetChaseComponent final
{
public:
	class UChaseComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetChaseComponent) == 0x000008, "Wrong alignment on DBDPlayer_GetChaseComponent");
static_assert(sizeof(DBDPlayer_GetChaseComponent) == 0x000008, "Wrong size on DBDPlayer_GetChaseComponent");
static_assert(offsetof(DBDPlayer_GetChaseComponent, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetChaseComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetCurrentInteraction
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetCurrentInteraction final
{
public:
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetCurrentInteraction) == 0x000008, "Wrong alignment on DBDPlayer_GetCurrentInteraction");
static_assert(sizeof(DBDPlayer_GetCurrentInteraction) == 0x000008, "Wrong size on DBDPlayer_GetCurrentInteraction");
static_assert(offsetof(DBDPlayer_GetCurrentInteraction, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetCurrentInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetCurrentInteractionAnimation
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetCurrentInteractionAnimation final
{
public:
	EInteractionAnimation                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetCurrentInteractionAnimation) == 0x000001, "Wrong alignment on DBDPlayer_GetCurrentInteractionAnimation");
static_assert(sizeof(DBDPlayer_GetCurrentInteractionAnimation) == 0x000001, "Wrong size on DBDPlayer_GetCurrentInteractionAnimation");
static_assert(offsetof(DBDPlayer_GetCurrentInteractionAnimation, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetCurrentInteractionAnimation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetDBDPlayerState
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetDBDPlayerState final
{
public:
	class ADBDPlayerState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetDBDPlayerState) == 0x000008, "Wrong alignment on DBDPlayer_GetDBDPlayerState");
static_assert(sizeof(DBDPlayer_GetDBDPlayerState) == 0x000008, "Wrong size on DBDPlayer_GetDBDPlayerState");
static_assert(offsetof(DBDPlayer_GetDBDPlayerState, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetDBDPlayerState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetDetectionZone
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_GetDetectionZone final
{
public:
	EDetectionZone                                detectionZoneID;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetDetectionZone) == 0x000008, "Wrong alignment on DBDPlayer_GetDetectionZone");
static_assert(sizeof(DBDPlayer_GetDetectionZone) == 0x000010, "Wrong size on DBDPlayer_GetDetectionZone");
static_assert(offsetof(DBDPlayer_GetDetectionZone, detectionZoneID) == 0x000000, "Member 'DBDPlayer_GetDetectionZone::detectionZoneID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetDetectionZone, ReturnValue) == 0x000008, "Member 'DBDPlayer_GetDetectionZone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetDreamworldComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetDreamworldComponent final
{
public:
	class UCharacterDreamworldComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetDreamworldComponent) == 0x000008, "Wrong alignment on DBDPlayer_GetDreamworldComponent");
static_assert(sizeof(DBDPlayer_GetDreamworldComponent) == 0x000008, "Wrong size on DBDPlayer_GetDreamworldComponent");
static_assert(offsetof(DBDPlayer_GetDreamworldComponent, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetDreamworldComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetFeetPosition
// 0x000C (0x000C - 0x0000)
struct DBDPlayer_GetFeetPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetFeetPosition) == 0x000004, "Wrong alignment on DBDPlayer_GetFeetPosition");
static_assert(sizeof(DBDPlayer_GetFeetPosition) == 0x00000C, "Wrong size on DBDPlayer_GetFeetPosition");
static_assert(offsetof(DBDPlayer_GetFeetPosition, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetFeetPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetFirstComponentByClass
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_GetFirstComponentByClass final
{
public:
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetFirstComponentByClass) == 0x000008, "Wrong alignment on DBDPlayer_GetFirstComponentByClass");
static_assert(sizeof(DBDPlayer_GetFirstComponentByClass) == 0x000010, "Wrong size on DBDPlayer_GetFirstComponentByClass");
static_assert(offsetof(DBDPlayer_GetFirstComponentByClass, ComponentClass) == 0x000000, "Member 'DBDPlayer_GetFirstComponentByClass::ComponentClass' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetFirstComponentByClass, ReturnValue) == 0x000008, "Member 'DBDPlayer_GetFirstComponentByClass::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetGrassEffectRadiusMultiplier
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_GetGrassEffectRadiusMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetGrassEffectRadiusMultiplier) == 0x000004, "Wrong alignment on DBDPlayer_GetGrassEffectRadiusMultiplier");
static_assert(sizeof(DBDPlayer_GetGrassEffectRadiusMultiplier) == 0x000004, "Wrong size on DBDPlayer_GetGrassEffectRadiusMultiplier");
static_assert(offsetof(DBDPlayer_GetGrassEffectRadiusMultiplier, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetGrassEffectRadiusMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetGuidingPlayer
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetGuidingPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetGuidingPlayer) == 0x000008, "Wrong alignment on DBDPlayer_GetGuidingPlayer");
static_assert(sizeof(DBDPlayer_GetGuidingPlayer) == 0x000008, "Wrong size on DBDPlayer_GetGuidingPlayer");
static_assert(offsetof(DBDPlayer_GetGuidingPlayer, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetGuidingPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetInteractable
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetInteractable final
{
public:
	class AInteractable*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetInteractable) == 0x000008, "Wrong alignment on DBDPlayer_GetInteractable");
static_assert(sizeof(DBDPlayer_GetInteractable) == 0x000008, "Wrong size on DBDPlayer_GetInteractable");
static_assert(offsetof(DBDPlayer_GetInteractable, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetInteractable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetInteractionDetectorComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetInteractionDetectorComponent final
{
public:
	class UInteractionDetectorComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetInteractionDetectorComponent) == 0x000008, "Wrong alignment on DBDPlayer_GetInteractionDetectorComponent");
static_assert(sizeof(DBDPlayer_GetInteractionDetectorComponent) == 0x000008, "Wrong size on DBDPlayer_GetInteractionDetectorComponent");
static_assert(offsetof(DBDPlayer_GetInteractionDetectorComponent, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetInteractionDetectorComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetIsInFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetIsInFirstPerson final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetIsInFirstPerson) == 0x000001, "Wrong alignment on DBDPlayer_GetIsInFirstPerson");
static_assert(sizeof(DBDPlayer_GetIsInFirstPerson) == 0x000001, "Wrong size on DBDPlayer_GetIsInFirstPerson");
static_assert(offsetof(DBDPlayer_GetIsInFirstPerson, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetIsInFirstPerson::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetIsInteracting
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetIsInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetIsInteracting) == 0x000001, "Wrong alignment on DBDPlayer_GetIsInteracting");
static_assert(sizeof(DBDPlayer_GetIsInteracting) == 0x000001, "Wrong size on DBDPlayer_GetIsInteracting");
static_assert(offsetof(DBDPlayer_GetIsInteracting, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetIsInteracting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetIsInterrupting
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetIsInterrupting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetIsInterrupting) == 0x000001, "Wrong alignment on DBDPlayer_GetIsInterrupting");
static_assert(sizeof(DBDPlayer_GetIsInterrupting) == 0x000001, "Wrong size on DBDPlayer_GetIsInterrupting");
static_assert(offsetof(DBDPlayer_GetIsInterrupting, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetIsInterrupting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetItemAddons
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_GetItemAddons final
{
public:
	TArray<class UItemAddon*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetItemAddons) == 0x000008, "Wrong alignment on DBDPlayer_GetItemAddons");
static_assert(sizeof(DBDPlayer_GetItemAddons) == 0x000010, "Wrong size on DBDPlayer_GetItemAddons");
static_assert(offsetof(DBDPlayer_GetItemAddons, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetItemAddons::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetItemModifiers
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_GetItemModifiers final
{
public:
	TArray<class UItemModifier*>                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetItemModifiers) == 0x000008, "Wrong alignment on DBDPlayer_GetItemModifiers");
static_assert(sizeof(DBDPlayer_GetItemModifiers) == 0x000010, "Wrong size on DBDPlayer_GetItemModifiers");
static_assert(offsetof(DBDPlayer_GetItemModifiers, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetItemModifiers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetLuck
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_GetLuck final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetLuck) == 0x000004, "Wrong alignment on DBDPlayer_GetLuck");
static_assert(sizeof(DBDPlayer_GetLuck) == 0x000004, "Wrong size on DBDPlayer_GetLuck");
static_assert(offsetof(DBDPlayer_GetLuck, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetLuck::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_GetMaxSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetMaxSpeed) == 0x000004, "Wrong alignment on DBDPlayer_GetMaxSpeed");
static_assert(sizeof(DBDPlayer_GetMaxSpeed) == 0x000004, "Wrong size on DBDPlayer_GetMaxSpeed");
static_assert(offsetof(DBDPlayer_GetMaxSpeed, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetMaxSpeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetMontage
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayer_GetMontage final
{
public:
	struct FAnimationMontageDescriptor            animMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetMontage) == 0x000008, "Wrong alignment on DBDPlayer_GetMontage");
static_assert(sizeof(DBDPlayer_GetMontage) == 0x000028, "Wrong size on DBDPlayer_GetMontage");
static_assert(offsetof(DBDPlayer_GetMontage, animMontageID) == 0x000000, "Member 'DBDPlayer_GetMontage::animMontageID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetMontage, ReturnValue) == 0x000020, "Member 'DBDPlayer_GetMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetMontageLength
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayer_GetMontageLength final
{
public:
	struct FAnimationMontageDescriptor            animMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_GetMontageLength) == 0x000008, "Wrong alignment on DBDPlayer_GetMontageLength");
static_assert(sizeof(DBDPlayer_GetMontageLength) == 0x000028, "Wrong size on DBDPlayer_GetMontageLength");
static_assert(offsetof(DBDPlayer_GetMontageLength, animMontageID) == 0x000000, "Member 'DBDPlayer_GetMontageLength::animMontageID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetMontageLength, ReturnValue) == 0x000020, "Member 'DBDPlayer_GetMontageLength::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetMontagePlaybackDefinition
// 0x0050 (0x0050 - 0x0000)
struct DBDPlayer_GetMontagePlaybackDefinition final
{
public:
	struct FAnimationMontageDescriptor            animMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         playRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isFollower;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMontagePlaybackDefinition             ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetMontagePlaybackDefinition) == 0x000008, "Wrong alignment on DBDPlayer_GetMontagePlaybackDefinition");
static_assert(sizeof(DBDPlayer_GetMontagePlaybackDefinition) == 0x000050, "Wrong size on DBDPlayer_GetMontagePlaybackDefinition");
static_assert(offsetof(DBDPlayer_GetMontagePlaybackDefinition, animMontageID) == 0x000000, "Member 'DBDPlayer_GetMontagePlaybackDefinition::animMontageID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetMontagePlaybackDefinition, playRate) == 0x000020, "Member 'DBDPlayer_GetMontagePlaybackDefinition::playRate' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetMontagePlaybackDefinition, isFollower) == 0x000024, "Member 'DBDPlayer_GetMontagePlaybackDefinition::isFollower' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetMontagePlaybackDefinition, ReturnValue) == 0x000028, "Member 'DBDPlayer_GetMontagePlaybackDefinition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetMontagePlayer
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetMontagePlayer final
{
public:
	class UMontagePlayer*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetMontagePlayer) == 0x000008, "Wrong alignment on DBDPlayer_GetMontagePlayer");
static_assert(sizeof(DBDPlayer_GetMontagePlayer) == 0x000008, "Wrong size on DBDPlayer_GetMontagePlayer");
static_assert(offsetof(DBDPlayer_GetMontagePlayer, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetMontagePlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetNameDebugString
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_GetNameDebugString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetNameDebugString) == 0x000008, "Wrong alignment on DBDPlayer_GetNameDebugString");
static_assert(sizeof(DBDPlayer_GetNameDebugString) == 0x000010, "Wrong size on DBDPlayer_GetNameDebugString");
static_assert(offsetof(DBDPlayer_GetNameDebugString, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetNameDebugString::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetObjectState
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetObjectState final
{
public:
	class UGameplayTagContainerComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetObjectState) == 0x000008, "Wrong alignment on DBDPlayer_GetObjectState");
static_assert(sizeof(DBDPlayer_GetObjectState) == 0x000008, "Wrong size on DBDPlayer_GetObjectState");
static_assert(offsetof(DBDPlayer_GetObjectState, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetObjectState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetOtherCharactersVerticalCollisionsHandler
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetOtherCharactersVerticalCollisionsHandler final
{
public:
	class UOtherCharactersVerticalCollisionsHandler* ReturnValue;                                    // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetOtherCharactersVerticalCollisionsHandler) == 0x000008, "Wrong alignment on DBDPlayer_GetOtherCharactersVerticalCollisionsHandler");
static_assert(sizeof(DBDPlayer_GetOtherCharactersVerticalCollisionsHandler) == 0x000008, "Wrong size on DBDPlayer_GetOtherCharactersVerticalCollisionsHandler");
static_assert(offsetof(DBDPlayer_GetOtherCharactersVerticalCollisionsHandler, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetOtherCharactersVerticalCollisionsHandler::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPawnType
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetPawnType final
{
public:
	EPawnType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPawnType) == 0x000001, "Wrong alignment on DBDPlayer_GetPawnType");
static_assert(sizeof(DBDPlayer_GetPawnType) == 0x000001, "Wrong size on DBDPlayer_GetPawnType");
static_assert(offsetof(DBDPlayer_GetPawnType, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPawnType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPercentMovementSpeed
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_GetPercentMovementSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPercentMovementSpeed) == 0x000004, "Wrong alignment on DBDPlayer_GetPercentMovementSpeed");
static_assert(sizeof(DBDPlayer_GetPercentMovementSpeed) == 0x000004, "Wrong size on DBDPlayer_GetPercentMovementSpeed");
static_assert(offsetof(DBDPlayer_GetPercentMovementSpeed, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPercentMovementSpeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPerkManager
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetPerkManager final
{
public:
	class UPerkManager*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPerkManager) == 0x000008, "Wrong alignment on DBDPlayer_GetPerkManager");
static_assert(sizeof(DBDPlayer_GetPerkManager) == 0x000008, "Wrong size on DBDPlayer_GetPerkManager");
static_assert(offsetof(DBDPlayer_GetPerkManager, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPerkManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPlayerCamera
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetPlayerCamera final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPlayerCamera) == 0x000008, "Wrong alignment on DBDPlayer_GetPlayerCamera");
static_assert(sizeof(DBDPlayer_GetPlayerCamera) == 0x000008, "Wrong size on DBDPlayer_GetPlayerCamera");
static_assert(offsetof(DBDPlayer_GetPlayerCamera, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPlayerCamera::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPlayerController
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetPlayerController final
{
public:
	class ADBDPlayerController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPlayerController) == 0x000008, "Wrong alignment on DBDPlayer_GetPlayerController");
static_assert(sizeof(DBDPlayer_GetPlayerController) == 0x000008, "Wrong size on DBDPlayer_GetPlayerController");
static_assert(offsetof(DBDPlayer_GetPlayerController, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPlayerController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPlayerDirection
// 0x000C (0x000C - 0x0000)
struct DBDPlayer_GetPlayerDirection final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPlayerDirection) == 0x000004, "Wrong alignment on DBDPlayer_GetPlayerDirection");
static_assert(sizeof(DBDPlayer_GetPlayerDirection) == 0x00000C, "Wrong size on DBDPlayer_GetPlayerDirection");
static_assert(offsetof(DBDPlayer_GetPlayerDirection, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPlayerDirection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPlayerInteractionHandler
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetPlayerInteractionHandler final
{
public:
	class UPlayerInteractionHandler*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPlayerInteractionHandler) == 0x000008, "Wrong alignment on DBDPlayer_GetPlayerInteractionHandler");
static_assert(sizeof(DBDPlayer_GetPlayerInteractionHandler) == 0x000008, "Wrong size on DBDPlayer_GetPlayerInteractionHandler");
static_assert(offsetof(DBDPlayer_GetPlayerInteractionHandler, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPlayerInteractionHandler::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPlayerRole
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetPlayerRole final
{
public:
	EPlayerRole                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPlayerRole) == 0x000001, "Wrong alignment on DBDPlayer_GetPlayerRole");
static_assert(sizeof(DBDPlayer_GetPlayerRole) == 0x000001, "Wrong size on DBDPlayer_GetPlayerRole");
static_assert(offsetof(DBDPlayer_GetPlayerRole, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPlayerRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPlayerTeam
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetPlayerTeam final
{
public:
	EPlayerTeam                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPlayerTeam) == 0x000001, "Wrong alignment on DBDPlayer_GetPlayerTeam");
static_assert(sizeof(DBDPlayer_GetPlayerTeam) == 0x000001, "Wrong size on DBDPlayer_GetPlayerTeam");
static_assert(offsetof(DBDPlayer_GetPlayerTeam, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPlayerTeam::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetRepControlRotation
// 0x000C (0x000C - 0x0000)
struct DBDPlayer_GetRepControlRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetRepControlRotation) == 0x000004, "Wrong alignment on DBDPlayer_GetRepControlRotation");
static_assert(sizeof(DBDPlayer_GetRepControlRotation) == 0x00000C, "Wrong size on DBDPlayer_GetRepControlRotation");
static_assert(offsetof(DBDPlayer_GetRepControlRotation, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetRepControlRotation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetReverseTraverseEnabled
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetReverseTraverseEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetReverseTraverseEnabled) == 0x000001, "Wrong alignment on DBDPlayer_GetReverseTraverseEnabled");
static_assert(sizeof(DBDPlayer_GetReverseTraverseEnabled) == 0x000001, "Wrong size on DBDPlayer_GetReverseTraverseEnabled");
static_assert(offsetof(DBDPlayer_GetReverseTraverseEnabled, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetReverseTraverseEnabled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetRunVaultEnabled
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetRunVaultEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetRunVaultEnabled) == 0x000001, "Wrong alignment on DBDPlayer_GetRunVaultEnabled");
static_assert(sizeof(DBDPlayer_GetRunVaultEnabled) == 0x000001, "Wrong size on DBDPlayer_GetRunVaultEnabled");
static_assert(offsetof(DBDPlayer_GetRunVaultEnabled, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetRunVaultEnabled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetSharedPlayerController
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetSharedPlayerController final
{
public:
	class ADBDPlayerController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetSharedPlayerController) == 0x000008, "Wrong alignment on DBDPlayer_GetSharedPlayerController");
static_assert(sizeof(DBDPlayer_GetSharedPlayerController) == 0x000008, "Wrong size on DBDPlayer_GetSharedPlayerController");
static_assert(offsetof(DBDPlayer_GetSharedPlayerController, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetSharedPlayerController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetTunableValue
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_GetTunableValue final
{
public:
	class FName                                   key;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         defaultValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          warnIfRowMissing;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetTunableValue) == 0x000004, "Wrong alignment on DBDPlayer_GetTunableValue");
static_assert(sizeof(DBDPlayer_GetTunableValue) == 0x000018, "Wrong size on DBDPlayer_GetTunableValue");
static_assert(offsetof(DBDPlayer_GetTunableValue, key) == 0x000000, "Member 'DBDPlayer_GetTunableValue::key' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetTunableValue, defaultValue) == 0x00000C, "Member 'DBDPlayer_GetTunableValue::defaultValue' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetTunableValue, warnIfRowMissing) == 0x000010, "Member 'DBDPlayer_GetTunableValue::warnIfRowMissing' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetTunableValue, ReturnValue) == 0x000014, "Member 'DBDPlayer_GetTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.HasClearPathToTarget
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_HasClearPathToTarget final
{
public:
	struct FVector                                targetPosition;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_HasClearPathToTarget) == 0x000004, "Wrong alignment on DBDPlayer_HasClearPathToTarget");
static_assert(sizeof(DBDPlayer_HasClearPathToTarget) == 0x000010, "Wrong size on DBDPlayer_HasClearPathToTarget");
static_assert(offsetof(DBDPlayer_HasClearPathToTarget, targetPosition) == 0x000000, "Member 'DBDPlayer_HasClearPathToTarget::targetPosition' has a wrong offset!");
static_assert(offsetof(DBDPlayer_HasClearPathToTarget, ReturnValue) == 0x00000C, "Member 'DBDPlayer_HasClearPathToTarget::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.HasClearPathToTargetWithIgnore
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayer_HasClearPathToTargetWithIgnore final
{
public:
	struct FVector                                targetPosition;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ignoreActors;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_HasClearPathToTargetWithIgnore) == 0x000008, "Wrong alignment on DBDPlayer_HasClearPathToTargetWithIgnore");
static_assert(sizeof(DBDPlayer_HasClearPathToTargetWithIgnore) == 0x000028, "Wrong size on DBDPlayer_HasClearPathToTargetWithIgnore");
static_assert(offsetof(DBDPlayer_HasClearPathToTargetWithIgnore, targetPosition) == 0x000000, "Member 'DBDPlayer_HasClearPathToTargetWithIgnore::targetPosition' has a wrong offset!");
static_assert(offsetof(DBDPlayer_HasClearPathToTargetWithIgnore, ignoreActors) == 0x000010, "Member 'DBDPlayer_HasClearPathToTargetWithIgnore::ignoreActors' has a wrong offset!");
static_assert(offsetof(DBDPlayer_HasClearPathToTargetWithIgnore, ReturnValue) == 0x000020, "Member 'DBDPlayer_HasClearPathToTargetWithIgnore::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.HasDamageImmunity
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_HasDamageImmunity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_HasDamageImmunity) == 0x000001, "Wrong alignment on DBDPlayer_HasDamageImmunity");
static_assert(sizeof(DBDPlayer_HasDamageImmunity) == 0x000001, "Wrong size on DBDPlayer_HasDamageImmunity");
static_assert(offsetof(DBDPlayer_HasDamageImmunity, ReturnValue) == 0x000000, "Member 'DBDPlayer_HasDamageImmunity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.HasMoveInput
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_HasMoveInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_HasMoveInput) == 0x000001, "Wrong alignment on DBDPlayer_HasMoveInput");
static_assert(sizeof(DBDPlayer_HasMoveInput) == 0x000001, "Wrong size on DBDPlayer_HasMoveInput");
static_assert(offsetof(DBDPlayer_HasMoveInput, ReturnValue) == 0x000000, "Member 'DBDPlayer_HasMoveInput::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsAllowedNavigation
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsAllowedNavigation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsAllowedNavigation) == 0x000001, "Wrong alignment on DBDPlayer_IsAllowedNavigation");
static_assert(sizeof(DBDPlayer_IsAllowedNavigation) == 0x000001, "Wrong size on DBDPlayer_IsAllowedNavigation");
static_assert(offsetof(DBDPlayer_IsAllowedNavigation, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsAllowedNavigation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsBeingInterrupted
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsBeingInterrupted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsBeingInterrupted) == 0x000001, "Wrong alignment on DBDPlayer_IsBeingInterrupted");
static_assert(sizeof(DBDPlayer_IsBeingInterrupted) == 0x000001, "Wrong size on DBDPlayer_IsBeingInterrupted");
static_assert(offsetof(DBDPlayer_IsBeingInterrupted, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsBeingInterrupted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsCloaked
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsCloaked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsCloaked) == 0x000001, "Wrong alignment on DBDPlayer_IsCloaked");
static_assert(sizeof(DBDPlayer_IsCloaked) == 0x000001, "Wrong size on DBDPlayer_IsCloaked");
static_assert(offsetof(DBDPlayer_IsCloaked, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsCloaked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsCrouching
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsCrouching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsCrouching) == 0x000001, "Wrong alignment on DBDPlayer_IsCrouching");
static_assert(sizeof(DBDPlayer_IsCrouching) == 0x000001, "Wrong size on DBDPlayer_IsCrouching");
static_assert(offsetof(DBDPlayer_IsCrouching, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsCrouching::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsCrouchPressed
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsCrouchPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsCrouchPressed) == 0x000001, "Wrong alignment on DBDPlayer_IsCrouchPressed");
static_assert(sizeof(DBDPlayer_IsCrouchPressed) == 0x000001, "Wrong size on DBDPlayer_IsCrouchPressed");
static_assert(offsetof(DBDPlayer_IsCrouchPressed, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsCrouchPressed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsExhausted
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsExhausted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsExhausted) == 0x000001, "Wrong alignment on DBDPlayer_IsExhausted");
static_assert(sizeof(DBDPlayer_IsExhausted) == 0x000001, "Wrong size on DBDPlayer_IsExhausted");
static_assert(offsetof(DBDPlayer_IsExhausted, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsExhausted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsHeadHidden
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsHeadHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsHeadHidden) == 0x000001, "Wrong alignment on DBDPlayer_IsHeadHidden");
static_assert(sizeof(DBDPlayer_IsHeadHidden) == 0x000001, "Wrong size on DBDPlayer_IsHeadHidden");
static_assert(offsetof(DBDPlayer_IsHeadHidden, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsHeadHidden::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsIncapacitated
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsIncapacitated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsIncapacitated) == 0x000001, "Wrong alignment on DBDPlayer_IsIncapacitated");
static_assert(sizeof(DBDPlayer_IsIncapacitated) == 0x000001, "Wrong size on DBDPlayer_IsIncapacitated");
static_assert(offsetof(DBDPlayer_IsIncapacitated, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsIncapacitated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsInMeathookZone
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsInMeathookZone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsInMeathookZone) == 0x000001, "Wrong alignment on DBDPlayer_IsInMeathookZone");
static_assert(sizeof(DBDPlayer_IsInMeathookZone) == 0x000001, "Wrong size on DBDPlayer_IsInMeathookZone");
static_assert(offsetof(DBDPlayer_IsInMeathookZone, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsInMeathookZone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsInParadise
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsInParadise final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsInParadise) == 0x000001, "Wrong alignment on DBDPlayer_IsInParadise");
static_assert(sizeof(DBDPlayer_IsInParadise) == 0x000001, "Wrong size on DBDPlayer_IsInParadise");
static_assert(offsetof(DBDPlayer_IsInParadise, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsInParadise::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsInsideCloset
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsInsideCloset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsInsideCloset) == 0x000001, "Wrong alignment on DBDPlayer_IsInsideCloset");
static_assert(sizeof(DBDPlayer_IsInsideCloset) == 0x000001, "Wrong size on DBDPlayer_IsInsideCloset");
static_assert(offsetof(DBDPlayer_IsInsideCloset, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsInsideCloset::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsInStalkMode
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsInStalkMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsInStalkMode) == 0x000001, "Wrong alignment on DBDPlayer_IsInStalkMode");
static_assert(sizeof(DBDPlayer_IsInStalkMode) == 0x000001, "Wrong size on DBDPlayer_IsInStalkMode");
static_assert(offsetof(DBDPlayer_IsInStalkMode, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsInStalkMode::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsInteractionInputPressed
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayer_IsInteractionInputPressed final
{
public:
	EInputInteractionType                         interactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsInteractionInputPressed) == 0x000001, "Wrong alignment on DBDPlayer_IsInteractionInputPressed");
static_assert(sizeof(DBDPlayer_IsInteractionInputPressed) == 0x000002, "Wrong size on DBDPlayer_IsInteractionInputPressed");
static_assert(offsetof(DBDPlayer_IsInteractionInputPressed, interactionType) == 0x000000, "Member 'DBDPlayer_IsInteractionInputPressed::interactionType' has a wrong offset!");
static_assert(offsetof(DBDPlayer_IsInteractionInputPressed, ReturnValue) == 0x000001, "Member 'DBDPlayer_IsInteractionInputPressed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsInTerrorRadius
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsInTerrorRadius final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsInTerrorRadius) == 0x000001, "Wrong alignment on DBDPlayer_IsInTerrorRadius");
static_assert(sizeof(DBDPlayer_IsInTerrorRadius) == 0x000001, "Wrong size on DBDPlayer_IsInTerrorRadius");
static_assert(offsetof(DBDPlayer_IsInTerrorRadius, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsInTerrorRadius::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsLocallyObserved
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsLocallyObserved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsLocallyObserved) == 0x000001, "Wrong alignment on DBDPlayer_IsLocallyObserved");
static_assert(sizeof(DBDPlayer_IsLocallyObserved) == 0x000001, "Wrong size on DBDPlayer_IsLocallyObserved");
static_assert(offsetof(DBDPlayer_IsLocallyObserved, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsLocallyObserved::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsMoving) == 0x000001, "Wrong alignment on DBDPlayer_IsMoving");
static_assert(sizeof(DBDPlayer_IsMoving) == 0x000001, "Wrong size on DBDPlayer_IsMoving");
static_assert(offsetof(DBDPlayer_IsMoving, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsMoving::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsPlayingAnyMontage
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsPlayingAnyMontage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsPlayingAnyMontage) == 0x000001, "Wrong alignment on DBDPlayer_IsPlayingAnyMontage");
static_assert(sizeof(DBDPlayer_IsPlayingAnyMontage) == 0x000001, "Wrong size on DBDPlayer_IsPlayingAnyMontage");
static_assert(offsetof(DBDPlayer_IsPlayingAnyMontage, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsPlayingAnyMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsPlayingMontage
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayer_IsPlayingMontage final
{
public:
	struct FAnimationMontageDescriptor            animMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_IsPlayingMontage) == 0x000008, "Wrong alignment on DBDPlayer_IsPlayingMontage");
static_assert(sizeof(DBDPlayer_IsPlayingMontage) == 0x000028, "Wrong size on DBDPlayer_IsPlayingMontage");
static_assert(offsetof(DBDPlayer_IsPlayingMontage, animMontageID) == 0x000000, "Member 'DBDPlayer_IsPlayingMontage::animMontageID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_IsPlayingMontage, ReturnValue) == 0x000020, "Member 'DBDPlayer_IsPlayingMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsRunning) == 0x000001, "Wrong alignment on DBDPlayer_IsRunning");
static_assert(sizeof(DBDPlayer_IsRunning) == 0x000001, "Wrong size on DBDPlayer_IsRunning");
static_assert(offsetof(DBDPlayer_IsRunning, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsRunning::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Local_IsInteractionInputPressed
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayer_Local_IsInteractionInputPressed final
{
public:
	EInputInteractionType                         interactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Local_IsInteractionInputPressed) == 0x000001, "Wrong alignment on DBDPlayer_Local_IsInteractionInputPressed");
static_assert(sizeof(DBDPlayer_Local_IsInteractionInputPressed) == 0x000002, "Wrong size on DBDPlayer_Local_IsInteractionInputPressed");
static_assert(offsetof(DBDPlayer_Local_IsInteractionInputPressed, interactionType) == 0x000000, "Member 'DBDPlayer_Local_IsInteractionInputPressed::interactionType' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Local_IsInteractionInputPressed, ReturnValue) == 0x000001, "Member 'DBDPlayer_Local_IsInteractionInputPressed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.OnGetCharacterName
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_OnGetCharacterName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_OnGetCharacterName) == 0x000008, "Wrong alignment on DBDPlayer_OnGetCharacterName");
static_assert(sizeof(DBDPlayer_OnGetCharacterName) == 0x000010, "Wrong size on DBDPlayer_OnGetCharacterName");
static_assert(offsetof(DBDPlayer_OnGetCharacterName, ReturnValue) == 0x000000, "Member 'DBDPlayer_OnGetCharacterName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.ShouldFall
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_ShouldFall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_ShouldFall) == 0x000001, "Wrong alignment on DBDPlayer_ShouldFall");
static_assert(sizeof(DBDPlayer_ShouldFall) == 0x000001, "Wrong size on DBDPlayer_ShouldFall");
static_assert(offsetof(DBDPlayer_ShouldFall, ReturnValue) == 0x000000, "Member 'DBDPlayer_ShouldFall::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.ShouldPlayCarryAnim
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_ShouldPlayCarryAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_ShouldPlayCarryAnim) == 0x000001, "Wrong alignment on DBDPlayer_ShouldPlayCarryAnim");
static_assert(sizeof(DBDPlayer_ShouldPlayCarryAnim) == 0x000001, "Wrong size on DBDPlayer_ShouldPlayCarryAnim");
static_assert(offsetof(DBDPlayer_ShouldPlayCarryAnim, ReturnValue) == 0x000000, "Member 'DBDPlayer_ShouldPlayCarryAnim::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialGameState.SetCurrentTutorialStep
// 0x0001 (0x0001 - 0x0000)
struct TutorialGameState_SetCurrentTutorialStep final
{
public:
	ETutorialStep                                 step;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameState_SetCurrentTutorialStep) == 0x000001, "Wrong alignment on TutorialGameState_SetCurrentTutorialStep");
static_assert(sizeof(TutorialGameState_SetCurrentTutorialStep) == 0x000001, "Wrong size on TutorialGameState_SetCurrentTutorialStep");
static_assert(offsetof(TutorialGameState_SetCurrentTutorialStep, step) == 0x000000, "Member 'TutorialGameState_SetCurrentTutorialStep::step' has a wrong offset!");

// Function DeadByDaylight.TutorialGameState.SetForcedHatchVisibility
// 0x0001 (0x0001 - 0x0000)
struct TutorialGameState_SetForcedHatchVisibility final
{
public:
	bool                                          isHatchVisible;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameState_SetForcedHatchVisibility) == 0x000001, "Wrong alignment on TutorialGameState_SetForcedHatchVisibility");
static_assert(sizeof(TutorialGameState_SetForcedHatchVisibility) == 0x000001, "Wrong size on TutorialGameState_SetForcedHatchVisibility");
static_assert(offsetof(TutorialGameState_SetForcedHatchVisibility, isHatchVisible) == 0x000000, "Member 'TutorialGameState_SetForcedHatchVisibility::isHatchVisible' has a wrong offset!");

// Function DeadByDaylight.TutorialGameState.GetCurrentTutorialStep
// 0x0001 (0x0001 - 0x0000)
struct TutorialGameState_GetCurrentTutorialStep final
{
public:
	ETutorialStep                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameState_GetCurrentTutorialStep) == 0x000001, "Wrong alignment on TutorialGameState_GetCurrentTutorialStep");
static_assert(sizeof(TutorialGameState_GetCurrentTutorialStep) == 0x000001, "Wrong size on TutorialGameState_GetCurrentTutorialStep");
static_assert(offsetof(TutorialGameState_GetCurrentTutorialStep, ReturnValue) == 0x000000, "Member 'TutorialGameState_GetCurrentTutorialStep::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialGameState.IsTutorialStarted
// 0x0001 (0x0001 - 0x0000)
struct TutorialGameState_IsTutorialStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameState_IsTutorialStarted) == 0x000001, "Wrong alignment on TutorialGameState_IsTutorialStarted");
static_assert(sizeof(TutorialGameState_IsTutorialStarted) == 0x000001, "Wrong size on TutorialGameState_IsTutorialStarted");
static_assert(offsetof(TutorialGameState_IsTutorialStarted, ReturnValue) == 0x000000, "Member 'TutorialGameState_IsTutorialStarted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialGameState.SetEscapeRequirementsVisibility
// 0x0001 (0x0001 - 0x0000)
struct TutorialGameState_SetEscapeRequirementsVisibility final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameState_SetEscapeRequirementsVisibility) == 0x000001, "Wrong alignment on TutorialGameState_SetEscapeRequirementsVisibility");
static_assert(sizeof(TutorialGameState_SetEscapeRequirementsVisibility) == 0x000001, "Wrong size on TutorialGameState_SetEscapeRequirementsVisibility");
static_assert(offsetof(TutorialGameState_SetEscapeRequirementsVisibility, isVisible) == 0x000000, "Member 'TutorialGameState_SetEscapeRequirementsVisibility::isVisible' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Authority_OnSlashed
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_Authority_OnSlashed final
{
public:
	class ADBDPlayer*                             attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Authority_OnSlashed) == 0x000008, "Wrong alignment on CamperPlayer_Authority_OnSlashed");
static_assert(sizeof(CamperPlayer_Authority_OnSlashed) == 0x000008, "Wrong size on CamperPlayer_Authority_OnSlashed");
static_assert(offsetof(CamperPlayer_Authority_OnSlashed, attacker) == 0x000000, "Member 'CamperPlayer_Authority_OnSlashed::attacker' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Authority_SetImmobilized
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_Authority_SetImmobilized final
{
public:
	ECamperImmobilizeState                        state;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Authority_SetImmobilized) == 0x000001, "Wrong alignment on CamperPlayer_Authority_SetImmobilized");
static_assert(sizeof(CamperPlayer_Authority_SetImmobilized) == 0x000001, "Wrong size on CamperPlayer_Authority_SetImmobilized");
static_assert(offsetof(CamperPlayer_Authority_SetImmobilized, state) == 0x000000, "Member 'CamperPlayer_Authority_SetImmobilized::state' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Client_OnSlashedOutOfTrap
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_Client_OnSlashedOutOfTrap final
{
public:
	class ADBDPlayer*                             requester;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Client_OnSlashedOutOfTrap) == 0x000008, "Wrong alignment on CamperPlayer_Client_OnSlashedOutOfTrap");
static_assert(sizeof(CamperPlayer_Client_OnSlashedOutOfTrap) == 0x000008, "Wrong size on CamperPlayer_Client_OnSlashedOutOfTrap");
static_assert(offsetof(CamperPlayer_Client_OnSlashedOutOfTrap, requester) == 0x000000, "Member 'CamperPlayer_Client_OnSlashedOutOfTrap::requester' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.ComputeBeartrapEscapeResult
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_ComputeBeartrapEscapeResult final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_ComputeBeartrapEscapeResult) == 0x000001, "Wrong alignment on CamperPlayer_ComputeBeartrapEscapeResult");
static_assert(sizeof(CamperPlayer_ComputeBeartrapEscapeResult) == 0x000001, "Wrong size on CamperPlayer_ComputeBeartrapEscapeResult");
static_assert(offsetof(CamperPlayer_ComputeBeartrapEscapeResult, ReturnValue) == 0x000000, "Member 'CamperPlayer_ComputeBeartrapEscapeResult::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.ComputeHookEscapeResult
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_ComputeHookEscapeResult final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_ComputeHookEscapeResult) == 0x000001, "Wrong alignment on CamperPlayer_ComputeHookEscapeResult");
static_assert(sizeof(CamperPlayer_ComputeHookEscapeResult) == 0x000001, "Wrong size on CamperPlayer_ComputeHookEscapeResult");
static_assert(offsetof(CamperPlayer_ComputeHookEscapeResult, ReturnValue) == 0x000000, "Member 'CamperPlayer_ComputeHookEscapeResult::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.ComputeInteractionSuccessPercentage
// 0x0010 (0x0010 - 0x0000)
struct CamperPlayer_ComputeInteractionSuccessPercentage final
{
public:
	const class UInteractionDefinition*           interaction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CamperPlayer_ComputeInteractionSuccessPercentage) == 0x000008, "Wrong alignment on CamperPlayer_ComputeInteractionSuccessPercentage");
static_assert(sizeof(CamperPlayer_ComputeInteractionSuccessPercentage) == 0x000010, "Wrong size on CamperPlayer_ComputeInteractionSuccessPercentage");
static_assert(offsetof(CamperPlayer_ComputeInteractionSuccessPercentage, interaction) == 0x000000, "Member 'CamperPlayer_ComputeInteractionSuccessPercentage::interaction' has a wrong offset!");
static_assert(offsetof(CamperPlayer_ComputeInteractionSuccessPercentage, ReturnValue) == 0x000008, "Member 'CamperPlayer_ComputeInteractionSuccessPercentage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.DBD_ForceRun
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_DBD_ForceRun final
{
public:
	bool                                          forced;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_DBD_ForceRun) == 0x000001, "Wrong alignment on CamperPlayer_DBD_ForceRun");
static_assert(sizeof(CamperPlayer_DBD_ForceRun) == 0x000001, "Wrong size on CamperPlayer_DBD_ForceRun");
static_assert(offsetof(CamperPlayer_DBD_ForceRun, forced) == 0x000000, "Member 'CamperPlayer_DBD_ForceRun::forced' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.DBD_SetImmobilized
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_DBD_SetImmobilized final
{
public:
	ECamperImmobilizeState                        state;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_DBD_SetImmobilized) == 0x000001, "Wrong alignment on CamperPlayer_DBD_SetImmobilized");
static_assert(sizeof(CamperPlayer_DBD_SetImmobilized) == 0x000001, "Wrong size on CamperPlayer_DBD_SetImmobilized");
static_assert(offsetof(CamperPlayer_DBD_SetImmobilized, state) == 0x000000, "Member 'CamperPlayer_DBD_SetImmobilized::state' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.DBD_SetSurvivorCameraArmLength
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_DBD_SetSurvivorCameraArmLength final
{
public:
	float                                         cameraArmLength;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_DBD_SetSurvivorCameraArmLength) == 0x000004, "Wrong alignment on CamperPlayer_DBD_SetSurvivorCameraArmLength");
static_assert(sizeof(CamperPlayer_DBD_SetSurvivorCameraArmLength) == 0x000004, "Wrong size on CamperPlayer_DBD_SetSurvivorCameraArmLength");
static_assert(offsetof(CamperPlayer_DBD_SetSurvivorCameraArmLength, cameraArmLength) == 0x000000, "Member 'CamperPlayer_DBD_SetSurvivorCameraArmLength::cameraArmLength' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.DBD_SetSurvivorCameraArmLengthCommand
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_DBD_SetSurvivorCameraArmLengthCommand final
{
public:
	float                                         cameraArmLength;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_DBD_SetSurvivorCameraArmLengthCommand) == 0x000004, "Wrong alignment on CamperPlayer_DBD_SetSurvivorCameraArmLengthCommand");
static_assert(sizeof(CamperPlayer_DBD_SetSurvivorCameraArmLengthCommand) == 0x000004, "Wrong size on CamperPlayer_DBD_SetSurvivorCameraArmLengthCommand");
static_assert(offsetof(CamperPlayer_DBD_SetSurvivorCameraArmLengthCommand, cameraArmLength) == 0x000000, "Member 'CamperPlayer_DBD_SetSurvivorCameraArmLengthCommand::cameraArmLength' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetCamperStillnessComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetCamperStillnessComponent final
{
public:
	class UCamperStillnessTrackerComponent*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetCamperStillnessComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetCamperStillnessComponent");
static_assert(sizeof(CamperPlayer_GetCamperStillnessComponent) == 0x000008, "Wrong size on CamperPlayer_GetCamperStillnessComponent");
static_assert(offsetof(CamperPlayer_GetCamperStillnessComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetCamperStillnessComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetIsHealingKOCamper
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_GetIsHealingKOCamper final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetIsHealingKOCamper) == 0x000001, "Wrong alignment on CamperPlayer_GetIsHealingKOCamper");
static_assert(sizeof(CamperPlayer_GetIsHealingKOCamper) == 0x000001, "Wrong size on CamperPlayer_GetIsHealingKOCamper");
static_assert(offsetof(CamperPlayer_GetIsHealingKOCamper, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetIsHealingKOCamper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetIsSkillCheckFailed
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_GetIsSkillCheckFailed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetIsSkillCheckFailed) == 0x000001, "Wrong alignment on CamperPlayer_GetIsSkillCheckFailed");
static_assert(sizeof(CamperPlayer_GetIsSkillCheckFailed) == 0x000001, "Wrong size on CamperPlayer_GetIsSkillCheckFailed");
static_assert(offsetof(CamperPlayer_GetIsSkillCheckFailed, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetIsSkillCheckFailed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetMontageFollower
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetMontageFollower final
{
public:
	class UAnimationMontageSlave*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetMontageFollower) == 0x000008, "Wrong alignment on CamperPlayer_GetMontageFollower");
static_assert(sizeof(CamperPlayer_GetMontageFollower) == 0x000008, "Wrong size on CamperPlayer_GetMontageFollower");
static_assert(offsetof(CamperPlayer_GetMontageFollower, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetMontageFollower::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.HatchEscapeZoneEntered
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_HatchEscapeZoneEntered final
{
public:
	class AActor*                                 escape;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_HatchEscapeZoneEntered) == 0x000008, "Wrong alignment on CamperPlayer_HatchEscapeZoneEntered");
static_assert(sizeof(CamperPlayer_HatchEscapeZoneEntered) == 0x000008, "Wrong size on CamperPlayer_HatchEscapeZoneEntered");
static_assert(offsetof(CamperPlayer_HatchEscapeZoneEntered, escape) == 0x000000, "Member 'CamperPlayer_HatchEscapeZoneEntered::escape' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsRunLocked
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsRunLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsRunLocked) == 0x000001, "Wrong alignment on CamperPlayer_IsRunLocked");
static_assert(sizeof(CamperPlayer_IsRunLocked) == 0x000001, "Wrong size on CamperPlayer_IsRunLocked");
static_assert(offsetof(CamperPlayer_IsRunLocked, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsRunLocked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Kill
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_Kill final
{
public:
	EHealthType                                   healthType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Kill) == 0x000001, "Wrong alignment on CamperPlayer_Kill");
static_assert(sizeof(CamperPlayer_Kill) == 0x000001, "Wrong size on CamperPlayer_Kill");
static_assert(offsetof(CamperPlayer_Kill, healthType) == 0x000000, "Member 'CamperPlayer_Kill::healthType' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Local_SetImmobilized
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_Local_SetImmobilized final
{
public:
	ECamperImmobilizeState                        state;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Local_SetImmobilized) == 0x000001, "Wrong alignment on CamperPlayer_Local_SetImmobilized");
static_assert(sizeof(CamperPlayer_Local_SetImmobilized) == 0x000001, "Wrong size on CamperPlayer_Local_SetImmobilized");
static_assert(offsetof(CamperPlayer_Local_SetImmobilized, state) == 0x000000, "Member 'CamperPlayer_Local_SetImmobilized::state' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Multicast_EscapeItemEvents
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_Multicast_EscapeItemEvents final
{
public:
	bool                                          isItemFromSpawn;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Multicast_EscapeItemEvents) == 0x000001, "Wrong alignment on CamperPlayer_Multicast_EscapeItemEvents");
static_assert(sizeof(CamperPlayer_Multicast_EscapeItemEvents) == 0x000001, "Wrong size on CamperPlayer_Multicast_EscapeItemEvents");
static_assert(offsetof(CamperPlayer_Multicast_EscapeItemEvents, isItemFromSpawn) == 0x000000, "Member 'CamperPlayer_Multicast_EscapeItemEvents::isItemFromSpawn' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Multicast_SetAuthoritativeMovementFlag
// 0x0002 (0x0002 - 0x0000)
struct CamperPlayer_Multicast_SetAuthoritativeMovementFlag final
{
public:
	EAuthoritativeMovementFlag                    flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          value;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Multicast_SetAuthoritativeMovementFlag) == 0x000001, "Wrong alignment on CamperPlayer_Multicast_SetAuthoritativeMovementFlag");
static_assert(sizeof(CamperPlayer_Multicast_SetAuthoritativeMovementFlag) == 0x000002, "Wrong size on CamperPlayer_Multicast_SetAuthoritativeMovementFlag");
static_assert(offsetof(CamperPlayer_Multicast_SetAuthoritativeMovementFlag, flag) == 0x000000, "Member 'CamperPlayer_Multicast_SetAuthoritativeMovementFlag::flag' has a wrong offset!");
static_assert(offsetof(CamperPlayer_Multicast_SetAuthoritativeMovementFlag, value) == 0x000001, "Member 'CamperPlayer_Multicast_SetAuthoritativeMovementFlag::value' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Multicast_SetGuidedAction
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_Multicast_SetGuidedAction final
{
public:
	ECamperGuidedAction                           action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Multicast_SetGuidedAction) == 0x000001, "Wrong alignment on CamperPlayer_Multicast_SetGuidedAction");
static_assert(sizeof(CamperPlayer_Multicast_SetGuidedAction) == 0x000001, "Wrong size on CamperPlayer_Multicast_SetGuidedAction");
static_assert(offsetof(CamperPlayer_Multicast_SetGuidedAction, action) == 0x000000, "Member 'CamperPlayer_Multicast_SetGuidedAction::action' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Multicast_SetHookEscapeAutoFail
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_Multicast_SetHookEscapeAutoFail final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Multicast_SetHookEscapeAutoFail) == 0x000001, "Wrong alignment on CamperPlayer_Multicast_SetHookEscapeAutoFail");
static_assert(sizeof(CamperPlayer_Multicast_SetHookEscapeAutoFail) == 0x000001, "Wrong size on CamperPlayer_Multicast_SetHookEscapeAutoFail");
static_assert(offsetof(CamperPlayer_Multicast_SetHookEscapeAutoFail, enabled) == 0x000000, "Member 'CamperPlayer_Multicast_SetHookEscapeAutoFail::enabled' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Multicast_SetImmobilized
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_Multicast_SetImmobilized final
{
public:
	ECamperImmobilizeState                        state;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Multicast_SetImmobilized) == 0x000001, "Wrong alignment on CamperPlayer_Multicast_SetImmobilized");
static_assert(sizeof(CamperPlayer_Multicast_SetImmobilized) == 0x000001, "Wrong size on CamperPlayer_Multicast_SetImmobilized");
static_assert(offsetof(CamperPlayer_Multicast_SetImmobilized, state) == 0x000000, "Member 'CamperPlayer_Multicast_SetImmobilized::state' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Multicast_SetOverlappingEscape
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_Multicast_SetOverlappingEscape final
{
public:
	class AActor*                                 escape;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Multicast_SetOverlappingEscape) == 0x000008, "Wrong alignment on CamperPlayer_Multicast_SetOverlappingEscape");
static_assert(sizeof(CamperPlayer_Multicast_SetOverlappingEscape) == 0x000008, "Wrong size on CamperPlayer_Multicast_SetOverlappingEscape");
static_assert(offsetof(CamperPlayer_Multicast_SetOverlappingEscape, escape) == 0x000000, "Member 'CamperPlayer_Multicast_SetOverlappingEscape::escape' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.OnDroppedEnd
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_OnDroppedEnd final
{
public:
	bool                                          clearLeader;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_OnDroppedEnd) == 0x000001, "Wrong alignment on CamperPlayer_OnDroppedEnd");
static_assert(sizeof(CamperPlayer_OnDroppedEnd) == 0x000001, "Wrong size on CamperPlayer_OnDroppedEnd");
static_assert(offsetof(CamperPlayer_OnDroppedEnd, clearLeader) == 0x000000, "Member 'CamperPlayer_OnDroppedEnd::clearLeader' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.OnHookedStateChangedCosmetic
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_OnHookedStateChangedCosmetic final
{
public:
	bool                                          hooked;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_OnHookedStateChangedCosmetic) == 0x000001, "Wrong alignment on CamperPlayer_OnHookedStateChangedCosmetic");
static_assert(sizeof(CamperPlayer_OnHookedStateChangedCosmetic) == 0x000001, "Wrong size on CamperPlayer_OnHookedStateChangedCosmetic");
static_assert(offsetof(CamperPlayer_OnHookedStateChangedCosmetic, hooked) == 0x000000, "Member 'CamperPlayer_OnHookedStateChangedCosmetic::hooked' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.OnHpSlotSkillCheckResponseAesthetic
// 0x0018 (0x0018 - 0x0000)
struct CamperPlayer_OnHpSlotSkillCheckResponseAesthetic final
{
public:
	bool                                          success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bonus;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          triggerLoudNoise;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hadInput;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         type;                                              // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         chargeChange;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic) == 0x000008, "Wrong alignment on CamperPlayer_OnHpSlotSkillCheckResponseAesthetic");
static_assert(sizeof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic) == 0x000018, "Wrong size on CamperPlayer_OnHpSlotSkillCheckResponseAesthetic");
static_assert(offsetof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic, success) == 0x000000, "Member 'CamperPlayer_OnHpSlotSkillCheckResponseAesthetic::success' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic, bonus) == 0x000001, "Member 'CamperPlayer_OnHpSlotSkillCheckResponseAesthetic::bonus' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic, player) == 0x000008, "Member 'CamperPlayer_OnHpSlotSkillCheckResponseAesthetic::player' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic, triggerLoudNoise) == 0x000010, "Member 'CamperPlayer_OnHpSlotSkillCheckResponseAesthetic::triggerLoudNoise' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic, hadInput) == 0x000011, "Member 'CamperPlayer_OnHpSlotSkillCheckResponseAesthetic::hadInput' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic, type) == 0x000012, "Member 'CamperPlayer_OnHpSlotSkillCheckResponseAesthetic::type' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic, chargeChange) == 0x000014, "Member 'CamperPlayer_OnHpSlotSkillCheckResponseAesthetic::chargeChange' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.OnObsessionChanged
// 0x0010 (0x0010 - 0x0000)
struct CamperPlayer_OnObsessionChanged final
{
public:
	class ACamperPlayer*                          newObsession;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          previousObsession;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_OnObsessionChanged) == 0x000008, "Wrong alignment on CamperPlayer_OnObsessionChanged");
static_assert(sizeof(CamperPlayer_OnObsessionChanged) == 0x000010, "Wrong size on CamperPlayer_OnObsessionChanged");
static_assert(offsetof(CamperPlayer_OnObsessionChanged, newObsession) == 0x000000, "Member 'CamperPlayer_OnObsessionChanged::newObsession' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnObsessionChanged, previousObsession) == 0x000008, "Member 'CamperPlayer_OnObsessionChanged::previousObsession' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.OnPawnSensed
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_OnPawnSensed final
{
public:
	class APawn*                                  pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_OnPawnSensed) == 0x000008, "Wrong alignment on CamperPlayer_OnPawnSensed");
static_assert(sizeof(CamperPlayer_OnPawnSensed) == 0x000008, "Wrong size on CamperPlayer_OnPawnSensed");
static_assert(offsetof(CamperPlayer_OnPawnSensed, pawn) == 0x000000, "Member 'CamperPlayer_OnPawnSensed::pawn' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.OnPickUpEnter
// 0x0010 (0x0010 - 0x0000)
struct CamperPlayer_OnPickUpEnter final
{
public:
	class ADBDPlayer*                             picker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         transitionTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CamperPlayer_OnPickUpEnter) == 0x000008, "Wrong alignment on CamperPlayer_OnPickUpEnter");
static_assert(sizeof(CamperPlayer_OnPickUpEnter) == 0x000010, "Wrong size on CamperPlayer_OnPickUpEnter");
static_assert(offsetof(CamperPlayer_OnPickUpEnter, picker) == 0x000000, "Member 'CamperPlayer_OnPickUpEnter::picker' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnPickUpEnter, transitionTime) == 0x000008, "Member 'CamperPlayer_OnPickUpEnter::transitionTime' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.OnProximityEntered
// 0x00B0 (0x00B0 - 0x0000)
struct CamperPlayer_OnProximityEntered final
{
public:
	class UPrimitiveComponent*                    hitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_OnProximityEntered) == 0x000008, "Wrong alignment on CamperPlayer_OnProximityEntered");
static_assert(sizeof(CamperPlayer_OnProximityEntered) == 0x0000B0, "Wrong size on CamperPlayer_OnProximityEntered");
static_assert(offsetof(CamperPlayer_OnProximityEntered, hitComponent) == 0x000000, "Member 'CamperPlayer_OnProximityEntered::hitComponent' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnProximityEntered, otherActor) == 0x000008, "Member 'CamperPlayer_OnProximityEntered::otherActor' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnProximityEntered, otherComp) == 0x000010, "Member 'CamperPlayer_OnProximityEntered::otherComp' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnProximityEntered, otherBodyIndex) == 0x000018, "Member 'CamperPlayer_OnProximityEntered::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnProximityEntered, bFromSweep) == 0x00001C, "Member 'CamperPlayer_OnProximityEntered::bFromSweep' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnProximityEntered, sweepResult) == 0x000020, "Member 'CamperPlayer_OnProximityEntered::sweepResult' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.RunLocked
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_RunLocked final
{
public:
	bool                                          lock;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_RunLocked) == 0x000001, "Wrong alignment on CamperPlayer_RunLocked");
static_assert(sizeof(CamperPlayer_RunLocked) == 0x000001, "Wrong size on CamperPlayer_RunLocked");
static_assert(offsetof(CamperPlayer_RunLocked, lock) == 0x000000, "Member 'CamperPlayer_RunLocked::lock' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Server_SetOverlappingEscape
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_Server_SetOverlappingEscape final
{
public:
	class AActor*                                 escape;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Server_SetOverlappingEscape) == 0x000008, "Wrong alignment on CamperPlayer_Server_SetOverlappingEscape");
static_assert(sizeof(CamperPlayer_Server_SetOverlappingEscape) == 0x000008, "Wrong size on CamperPlayer_Server_SetOverlappingEscape");
static_assert(offsetof(CamperPlayer_Server_SetOverlappingEscape, escape) == 0x000000, "Member 'CamperPlayer_Server_SetOverlappingEscape::escape' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Server_SetRunInput
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_Server_SetRunInput final
{
public:
	bool                                          pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Server_SetRunInput) == 0x000001, "Wrong alignment on CamperPlayer_Server_SetRunInput");
static_assert(sizeof(CamperPlayer_Server_SetRunInput) == 0x000001, "Wrong size on CamperPlayer_Server_SetRunInput");
static_assert(offsetof(CamperPlayer_Server_SetRunInput, pressed) == 0x000000, "Member 'CamperPlayer_Server_SetRunInput::pressed' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.SetBeingCarried
// 0x0010 (0x0010 - 0x0000)
struct CamperPlayer_SetBeingCarried final
{
public:
	bool                                          isBeingCarried;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             carrier;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_SetBeingCarried) == 0x000008, "Wrong alignment on CamperPlayer_SetBeingCarried");
static_assert(sizeof(CamperPlayer_SetBeingCarried) == 0x000010, "Wrong size on CamperPlayer_SetBeingCarried");
static_assert(offsetof(CamperPlayer_SetBeingCarried, isBeingCarried) == 0x000000, "Member 'CamperPlayer_SetBeingCarried::isBeingCarried' has a wrong offset!");
static_assert(offsetof(CamperPlayer_SetBeingCarried, carrier) == 0x000008, "Member 'CamperPlayer_SetBeingCarried::carrier' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.SetGuidedAction
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_SetGuidedAction final
{
public:
	ECamperGuidedAction                           action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_SetGuidedAction) == 0x000001, "Wrong alignment on CamperPlayer_SetGuidedAction");
static_assert(sizeof(CamperPlayer_SetGuidedAction) == 0x000001, "Wrong size on CamperPlayer_SetGuidedAction");
static_assert(offsetof(CamperPlayer_SetGuidedAction, action) == 0x000000, "Member 'CamperPlayer_SetGuidedAction::action' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.SetGuidedActionLocal
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_SetGuidedActionLocal final
{
public:
	ECamperGuidedAction                           action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_SetGuidedActionLocal) == 0x000001, "Wrong alignment on CamperPlayer_SetGuidedActionLocal");
static_assert(sizeof(CamperPlayer_SetGuidedActionLocal) == 0x000001, "Wrong size on CamperPlayer_SetGuidedActionLocal");
static_assert(offsetof(CamperPlayer_SetGuidedActionLocal, action) == 0x000000, "Member 'CamperPlayer_SetGuidedActionLocal::action' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.SetIsHealingKOCamper
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_SetIsHealingKOCamper final
{
public:
	bool                                          isHealingKOCamper;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_SetIsHealingKOCamper) == 0x000001, "Wrong alignment on CamperPlayer_SetIsHealingKOCamper");
static_assert(sizeof(CamperPlayer_SetIsHealingKOCamper) == 0x000001, "Wrong size on CamperPlayer_SetIsHealingKOCamper");
static_assert(offsetof(CamperPlayer_SetIsHealingKOCamper, isHealingKOCamper) == 0x000000, "Member 'CamperPlayer_SetIsHealingKOCamper::isHealingKOCamper' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.SetIsSkillCheckFailed
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_SetIsSkillCheckFailed final
{
public:
	bool                                          isSkillCheckFailed;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_SetIsSkillCheckFailed) == 0x000001, "Wrong alignment on CamperPlayer_SetIsSkillCheckFailed");
static_assert(sizeof(CamperPlayer_SetIsSkillCheckFailed) == 0x000001, "Wrong size on CamperPlayer_SetIsSkillCheckFailed");
static_assert(offsetof(CamperPlayer_SetIsSkillCheckFailed, isSkillCheckFailed) == 0x000000, "Member 'CamperPlayer_SetIsSkillCheckFailed::isSkillCheckFailed' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.SetVignetteVisible
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_SetVignetteVisible final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_SetVignetteVisible) == 0x000001, "Wrong alignment on CamperPlayer_SetVignetteVisible");
static_assert(sizeof(CamperPlayer_SetVignetteVisible) == 0x000001, "Wrong size on CamperPlayer_SetVignetteVisible");
static_assert(offsetof(CamperPlayer_SetVignetteVisible, visible) == 0x000000, "Member 'CamperPlayer_SetVignetteVisible::visible' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.StartHealingTimer
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_StartHealingTimer final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_StartHealingTimer) == 0x000004, "Wrong alignment on CamperPlayer_StartHealingTimer");
static_assert(sizeof(CamperPlayer_StartHealingTimer) == 0x000004, "Wrong size on CamperPlayer_StartHealingTimer");
static_assert(offsetof(CamperPlayer_StartHealingTimer, time) == 0x000000, "Member 'CamperPlayer_StartHealingTimer::time' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.UpdateHealingTimer
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_UpdateHealingTimer final
{
public:
	float                                         deltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_UpdateHealingTimer) == 0x000004, "Wrong alignment on CamperPlayer_UpdateHealingTimer");
static_assert(sizeof(CamperPlayer_UpdateHealingTimer) == 0x000004, "Wrong size on CamperPlayer_UpdateHealingTimer");
static_assert(offsetof(CamperPlayer_UpdateHealingTimer, deltaTime) == 0x000000, "Member 'CamperPlayer_UpdateHealingTimer::deltaTime' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.AcceptsHealing
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_AcceptsHealing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_AcceptsHealing) == 0x000001, "Wrong alignment on CamperPlayer_AcceptsHealing");
static_assert(sizeof(CamperPlayer_AcceptsHealing) == 0x000001, "Wrong size on CamperPlayer_AcceptsHealing");
static_assert(offsetof(CamperPlayer_AcceptsHealing, ReturnValue) == 0x000000, "Member 'CamperPlayer_AcceptsHealing::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.CanBeKilled
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_CanBeKilled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_CanBeKilled) == 0x000001, "Wrong alignment on CamperPlayer_CanBeKilled");
static_assert(sizeof(CamperPlayer_CanBeKilled) == 0x000001, "Wrong size on CamperPlayer_CanBeKilled");
static_assert(offsetof(CamperPlayer_CanBeKilled, ReturnValue) == 0x000000, "Member 'CamperPlayer_CanBeKilled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.CanBePickedUp
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_CanBePickedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_CanBePickedUp) == 0x000001, "Wrong alignment on CamperPlayer_CanBePickedUp");
static_assert(sizeof(CamperPlayer_CanBePickedUp) == 0x000001, "Wrong size on CamperPlayer_CanBePickedUp");
static_assert(offsetof(CamperPlayer_CanBePickedUp, ReturnValue) == 0x000000, "Member 'CamperPlayer_CanBePickedUp::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.CanBeShocked
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_CanBeShocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_CanBeShocked) == 0x000001, "Wrong alignment on CamperPlayer_CanBeShocked");
static_assert(sizeof(CamperPlayer_CanBeShocked) == 0x000001, "Wrong size on CamperPlayer_CanBeShocked");
static_assert(offsetof(CamperPlayer_CanBeShocked, ReturnValue) == 0x000000, "Member 'CamperPlayer_CanBeShocked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.CanRushQuietly
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_CanRushQuietly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_CanRushQuietly) == 0x000001, "Wrong alignment on CamperPlayer_CanRushQuietly");
static_assert(sizeof(CamperPlayer_CanRushQuietly) == 0x000001, "Wrong size on CamperPlayer_CanRushQuietly");
static_assert(offsetof(CamperPlayer_CanRushQuietly, ReturnValue) == 0x000000, "Member 'CamperPlayer_CanRushQuietly::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetAimPoint
// 0x000C (0x000C - 0x0000)
struct CamperPlayer_GetAimPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetAimPoint) == 0x000004, "Wrong alignment on CamperPlayer_GetAimPoint");
static_assert(sizeof(CamperPlayer_GetAimPoint) == 0x00000C, "Wrong size on CamperPlayer_GetAimPoint");
static_assert(offsetof(CamperPlayer_GetAimPoint, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetAimPoint::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetAllEntityRenderRegions
// 0x0010 (0x0010 - 0x0000)
struct CamperPlayer_GetAllEntityRenderRegions final
{
public:
	TArray<class UDBDClipRegionComponent*>        ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetAllEntityRenderRegions) == 0x000008, "Wrong alignment on CamperPlayer_GetAllEntityRenderRegions");
static_assert(sizeof(CamperPlayer_GetAllEntityRenderRegions) == 0x000010, "Wrong size on CamperPlayer_GetAllEntityRenderRegions");
static_assert(offsetof(CamperPlayer_GetAllEntityRenderRegions, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetAllEntityRenderRegions::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetAttenuationAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetAttenuationAudioComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetAttenuationAudioComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetAttenuationAudioComponent");
static_assert(sizeof(CamperPlayer_GetAttenuationAudioComponent) == 0x000008, "Wrong size on CamperPlayer_GetAttenuationAudioComponent");
static_assert(offsetof(CamperPlayer_GetAttenuationAudioComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetAttenuationAudioComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetBloodTrailComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetBloodTrailComponent final
{
public:
	class UCamperBloodTrailComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetBloodTrailComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetBloodTrailComponent");
static_assert(sizeof(CamperPlayer_GetBloodTrailComponent) == 0x000008, "Wrong size on CamperPlayer_GetBloodTrailComponent");
static_assert(offsetof(CamperPlayer_GetBloodTrailComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetBloodTrailComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetCameraAttachmentComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetCameraAttachmentComponent final
{
public:
	class UCameraAttachmentComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetCameraAttachmentComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetCameraAttachmentComponent");
static_assert(sizeof(CamperPlayer_GetCameraAttachmentComponent) == 0x000008, "Wrong size on CamperPlayer_GetCameraAttachmentComponent");
static_assert(offsetof(CamperPlayer_GetCameraAttachmentComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetCameraAttachmentComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetCamperData
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetCamperData final
{
public:
	class UDBDCamperData*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetCamperData) == 0x000008, "Wrong alignment on CamperPlayer_GetCamperData");
static_assert(sizeof(CamperPlayer_GetCamperData) == 0x000008, "Wrong size on CamperPlayer_GetCamperData");
static_assert(offsetof(CamperPlayer_GetCamperData, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetCamperData::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetChaseeCharacterComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetChaseeCharacterComponent final
{
public:
	class UChaseeCharacterComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetChaseeCharacterComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetChaseeCharacterComponent");
static_assert(sizeof(CamperPlayer_GetChaseeCharacterComponent) == 0x000008, "Wrong size on CamperPlayer_GetChaseeCharacterComponent");
static_assert(offsetof(CamperPlayer_GetChaseeCharacterComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetChaseeCharacterComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetEntityRenderRegionAtIndex
// 0x0010 (0x0010 - 0x0000)
struct CamperPlayer_GetEntityRenderRegionAtIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDClipRegionComponent*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetEntityRenderRegionAtIndex) == 0x000008, "Wrong alignment on CamperPlayer_GetEntityRenderRegionAtIndex");
static_assert(sizeof(CamperPlayer_GetEntityRenderRegionAtIndex) == 0x000010, "Wrong size on CamperPlayer_GetEntityRenderRegionAtIndex");
static_assert(offsetof(CamperPlayer_GetEntityRenderRegionAtIndex, InIndex) == 0x000000, "Member 'CamperPlayer_GetEntityRenderRegionAtIndex::InIndex' has a wrong offset!");
static_assert(offsetof(CamperPlayer_GetEntityRenderRegionAtIndex, ReturnValue) == 0x000008, "Member 'CamperPlayer_GetEntityRenderRegionAtIndex::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetGuidedAction
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_GetGuidedAction final
{
public:
	ECamperGuidedAction                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetGuidedAction) == 0x000001, "Wrong alignment on CamperPlayer_GetGuidedAction");
static_assert(sizeof(CamperPlayer_GetGuidedAction) == 0x000001, "Wrong size on CamperPlayer_GetGuidedAction");
static_assert(offsetof(CamperPlayer_GetGuidedAction, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetGuidedAction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetHealthComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetHealthComponent final
{
public:
	class UCamperHealthComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetHealthComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetHealthComponent");
static_assert(sizeof(CamperPlayer_GetHealthComponent) == 0x000008, "Wrong size on CamperPlayer_GetHealthComponent");
static_assert(offsetof(CamperPlayer_GetHealthComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetHealthComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetHookableComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetHookableComponent final
{
public:
	class UHookableComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetHookableComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetHookableComponent");
static_assert(sizeof(CamperPlayer_GetHookableComponent) == 0x000008, "Wrong size on CamperPlayer_GetHookableComponent");
static_assert(offsetof(CamperPlayer_GetHookableComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetHookableComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetHookAntiCampingComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetHookAntiCampingComponent final
{
public:
	class UHookAntiCampingComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetHookAntiCampingComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetHookAntiCampingComponent");
static_assert(sizeof(CamperPlayer_GetHookAntiCampingComponent) == 0x000008, "Wrong size on CamperPlayer_GetHookAntiCampingComponent");
static_assert(offsetof(CamperPlayer_GetHookAntiCampingComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetHookAntiCampingComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetImmobilizedState
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_GetImmobilizedState final
{
public:
	ECamperImmobilizeState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetImmobilizedState) == 0x000001, "Wrong alignment on CamperPlayer_GetImmobilizedState");
static_assert(sizeof(CamperPlayer_GetImmobilizedState) == 0x000001, "Wrong size on CamperPlayer_GetImmobilizedState");
static_assert(offsetof(CamperPlayer_GetImmobilizedState, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetImmobilizedState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetIsBeingDissolved
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_GetIsBeingDissolved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetIsBeingDissolved) == 0x000001, "Wrong alignment on CamperPlayer_GetIsBeingDissolved");
static_assert(sizeof(CamperPlayer_GetIsBeingDissolved) == 0x000001, "Wrong size on CamperPlayer_GetIsBeingDissolved");
static_assert(offsetof(CamperPlayer_GetIsBeingDissolved, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetIsBeingDissolved::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetIsWiggleProgressionAllowed
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_GetIsWiggleProgressionAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetIsWiggleProgressionAllowed) == 0x000001, "Wrong alignment on CamperPlayer_GetIsWiggleProgressionAllowed");
static_assert(sizeof(CamperPlayer_GetIsWiggleProgressionAllowed) == 0x000001, "Wrong size on CamperPlayer_GetIsWiggleProgressionAllowed");
static_assert(offsetof(CamperPlayer_GetIsWiggleProgressionAllowed, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetIsWiggleProgressionAllowed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetMaxGruntDistance
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetMaxGruntDistance final
{
public:
	bool                                          isLocalPlayerKiller;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetMaxGruntDistance) == 0x000004, "Wrong alignment on CamperPlayer_GetMaxGruntDistance");
static_assert(sizeof(CamperPlayer_GetMaxGruntDistance) == 0x000008, "Wrong size on CamperPlayer_GetMaxGruntDistance");
static_assert(offsetof(CamperPlayer_GetMaxGruntDistance, isLocalPlayerKiller) == 0x000000, "Member 'CamperPlayer_GetMaxGruntDistance::isLocalPlayerKiller' has a wrong offset!");
static_assert(offsetof(CamperPlayer_GetMaxGruntDistance, ReturnValue) == 0x000004, "Member 'CamperPlayer_GetMaxGruntDistance::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetMeshMover
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetMeshMover final
{
public:
	class UMoveComponentToComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetMeshMover) == 0x000008, "Wrong alignment on CamperPlayer_GetMeshMover");
static_assert(sizeof(CamperPlayer_GetMeshMover) == 0x000008, "Wrong size on CamperPlayer_GetMeshMover");
static_assert(offsetof(CamperPlayer_GetMeshMover, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetMeshMover::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetNoOcclusionAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetNoOcclusionAudioComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetNoOcclusionAudioComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetNoOcclusionAudioComponent");
static_assert(sizeof(CamperPlayer_GetNoOcclusionAudioComponent) == 0x000008, "Wrong size on CamperPlayer_GetNoOcclusionAudioComponent");
static_assert(offsetof(CamperPlayer_GetNoOcclusionAudioComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetNoOcclusionAudioComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetNumberOfEntityRenderRegions
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_GetNumberOfEntityRenderRegions final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetNumberOfEntityRenderRegions) == 0x000004, "Wrong alignment on CamperPlayer_GetNumberOfEntityRenderRegions");
static_assert(sizeof(CamperPlayer_GetNumberOfEntityRenderRegions) == 0x000004, "Wrong size on CamperPlayer_GetNumberOfEntityRenderRegions");
static_assert(offsetof(CamperPlayer_GetNumberOfEntityRenderRegions, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetNumberOfEntityRenderRegions::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetObsessionTargetWeight
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_GetObsessionTargetWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetObsessionTargetWeight) == 0x000004, "Wrong alignment on CamperPlayer_GetObsessionTargetWeight");
static_assert(sizeof(CamperPlayer_GetObsessionTargetWeight) == 0x000004, "Wrong size on CamperPlayer_GetObsessionTargetWeight");
static_assert(offsetof(CamperPlayer_GetObsessionTargetWeight, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetObsessionTargetWeight::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetOverlappingEscape
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetOverlappingEscape final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetOverlappingEscape) == 0x000008, "Wrong alignment on CamperPlayer_GetOverlappingEscape");
static_assert(sizeof(CamperPlayer_GetOverlappingEscape) == 0x000008, "Wrong size on CamperPlayer_GetOverlappingEscape");
static_assert(offsetof(CamperPlayer_GetOverlappingEscape, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetOverlappingEscape::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetPercentHealingTimer
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_GetPercentHealingTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetPercentHealingTimer) == 0x000004, "Wrong alignment on CamperPlayer_GetPercentHealingTimer");
static_assert(sizeof(CamperPlayer_GetPercentHealingTimer) == 0x000004, "Wrong size on CamperPlayer_GetPercentHealingTimer");
static_assert(offsetof(CamperPlayer_GetPercentHealingTimer, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetPercentHealingTimer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetReverseBearTrap
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetReverseBearTrap final
{
public:
	class AReverseBearTrap*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetReverseBearTrap) == 0x000008, "Wrong alignment on CamperPlayer_GetReverseBearTrap");
static_assert(sizeof(CamperPlayer_GetReverseBearTrap) == 0x000008, "Wrong size on CamperPlayer_GetReverseBearTrap");
static_assert(offsetof(CamperPlayer_GetReverseBearTrap, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetReverseBearTrap::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetStillness
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_GetStillness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetStillness) == 0x000004, "Wrong alignment on CamperPlayer_GetStillness");
static_assert(sizeof(CamperPlayer_GetStillness) == 0x000004, "Wrong size on CamperPlayer_GetStillness");
static_assert(offsetof(CamperPlayer_GetStillness, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetStillness::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetToAimPointRotation
// 0x000C (0x000C - 0x0000)
struct CamperPlayer_GetToAimPointRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetToAimPointRotation) == 0x000004, "Wrong alignment on CamperPlayer_GetToAimPointRotation");
static_assert(sizeof(CamperPlayer_GetToAimPointRotation) == 0x00000C, "Wrong size on CamperPlayer_GetToAimPointRotation");
static_assert(offsetof(CamperPlayer_GetToAimPointRotation, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetToAimPointRotation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetWiggleChargeable
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetWiggleChargeable final
{
public:
	class UChargeableComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetWiggleChargeable) == 0x000008, "Wrong alignment on CamperPlayer_GetWiggleChargeable");
static_assert(sizeof(CamperPlayer_GetWiggleChargeable) == 0x000008, "Wrong size on CamperPlayer_GetWiggleChargeable");
static_assert(offsetof(CamperPlayer_GetWiggleChargeable, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetWiggleChargeable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.HasGuidedAction
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_HasGuidedAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_HasGuidedAction) == 0x000001, "Wrong alignment on CamperPlayer_HasGuidedAction");
static_assert(sizeof(CamperPlayer_HasGuidedAction) == 0x000001, "Wrong size on CamperPlayer_HasGuidedAction");
static_assert(offsetof(CamperPlayer_HasGuidedAction, ReturnValue) == 0x000000, "Member 'CamperPlayer_HasGuidedAction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.HasHitEvents
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_HasHitEvents final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_HasHitEvents) == 0x000001, "Wrong alignment on CamperPlayer_HasHitEvents");
static_assert(sizeof(CamperPlayer_HasHitEvents) == 0x000001, "Wrong size on CamperPlayer_HasHitEvents");
static_assert(offsetof(CamperPlayer_HasHitEvents, ReturnValue) == 0x000000, "Member 'CamperPlayer_HasHitEvents::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.HasReverseBearTrap
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_HasReverseBearTrap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_HasReverseBearTrap) == 0x000001, "Wrong alignment on CamperPlayer_HasReverseBearTrap");
static_assert(sizeof(CamperPlayer_HasReverseBearTrap) == 0x000001, "Wrong size on CamperPlayer_HasReverseBearTrap");
static_assert(offsetof(CamperPlayer_HasReverseBearTrap, ReturnValue) == 0x000000, "Member 'CamperPlayer_HasReverseBearTrap::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingCarried
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingCarried final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingCarried) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingCarried");
static_assert(sizeof(CamperPlayer_IsBeingCarried) == 0x000001, "Wrong size on CamperPlayer_IsBeingCarried");
static_assert(offsetof(CamperPlayer_IsBeingCarried, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingCarried::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingEndGameSacrificed
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingEndGameSacrificed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingEndGameSacrificed) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingEndGameSacrificed");
static_assert(sizeof(CamperPlayer_IsBeingEndGameSacrificed) == 0x000001, "Wrong size on CamperPlayer_IsBeingEndGameSacrificed");
static_assert(offsetof(CamperPlayer_IsBeingEndGameSacrificed, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingEndGameSacrificed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingHealed
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingHealed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingHealed) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingHealed");
static_assert(sizeof(CamperPlayer_IsBeingHealed) == 0x000001, "Wrong size on CamperPlayer_IsBeingHealed");
static_assert(offsetof(CamperPlayer_IsBeingHealed, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingHealed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingInteractedWith
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingInteractedWith final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingInteractedWith) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingInteractedWith");
static_assert(sizeof(CamperPlayer_IsBeingInteractedWith) == 0x000001, "Wrong size on CamperPlayer_IsBeingInteractedWith");
static_assert(offsetof(CamperPlayer_IsBeingInteractedWith, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingInteractedWith::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingKilled
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingKilled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingKilled) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingKilled");
static_assert(sizeof(CamperPlayer_IsBeingKilled) == 0x000001, "Wrong size on CamperPlayer_IsBeingKilled");
static_assert(offsetof(CamperPlayer_IsBeingKilled, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingKilled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingMended
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingMended final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingMended) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingMended");
static_assert(sizeof(CamperPlayer_IsBeingMended) == 0x000001, "Wrong size on CamperPlayer_IsBeingMended");
static_assert(offsetof(CamperPlayer_IsBeingMended, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingMended::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingPickedUp
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingPickedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingPickedUp) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingPickedUp");
static_assert(sizeof(CamperPlayer_IsBeingPickedUp) == 0x000001, "Wrong size on CamperPlayer_IsBeingPickedUp");
static_assert(offsetof(CamperPlayer_IsBeingPickedUp, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingPickedUp::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingPulledFromCloset
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingPulledFromCloset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingPulledFromCloset) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingPulledFromCloset");
static_assert(sizeof(CamperPlayer_IsBeingPulledFromCloset) == 0x000001, "Wrong size on CamperPlayer_IsBeingPulledFromCloset");
static_assert(offsetof(CamperPlayer_IsBeingPulledFromCloset, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingPulledFromCloset::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingPutDown
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingPutDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingPutDown) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingPutDown");
static_assert(sizeof(CamperPlayer_IsBeingPutDown) == 0x000001, "Wrong size on CamperPlayer_IsBeingPutDown");
static_assert(offsetof(CamperPlayer_IsBeingPutDown, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingPutDown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingPutOnHook
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingPutOnHook final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingPutOnHook) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingPutOnHook");
static_assert(sizeof(CamperPlayer_IsBeingPutOnHook) == 0x000001, "Wrong size on CamperPlayer_IsBeingPutOnHook");
static_assert(offsetof(CamperPlayer_IsBeingPutOnHook, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingPutOnHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingUnhooked
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingUnhooked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingUnhooked) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingUnhooked");
static_assert(sizeof(CamperPlayer_IsBeingUnhooked) == 0x000001, "Wrong size on CamperPlayer_IsBeingUnhooked");
static_assert(offsetof(CamperPlayer_IsBeingUnhooked, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingUnhooked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsCrawling
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsCrawling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsCrawling) == 0x000001, "Wrong alignment on CamperPlayer_IsCrawling");
static_assert(sizeof(CamperPlayer_IsCrawling) == 0x000001, "Wrong size on CamperPlayer_IsCrawling");
static_assert(offsetof(CamperPlayer_IsCrawling, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsCrawling::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsDeadOrInParadise
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsDeadOrInParadise final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsDeadOrInParadise) == 0x000001, "Wrong alignment on CamperPlayer_IsDeadOrInParadise");
static_assert(sizeof(CamperPlayer_IsDeadOrInParadise) == 0x000001, "Wrong size on CamperPlayer_IsDeadOrInParadise");
static_assert(offsetof(CamperPlayer_IsDeadOrInParadise, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsDeadOrInParadise::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsEscaped
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsEscaped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsEscaped) == 0x000001, "Wrong alignment on CamperPlayer_IsEscaped");
static_assert(sizeof(CamperPlayer_IsEscaped) == 0x000001, "Wrong size on CamperPlayer_IsEscaped");
static_assert(offsetof(CamperPlayer_IsEscaped, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsEscaped::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsGuidedBySlasher
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsGuidedBySlasher final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsGuidedBySlasher) == 0x000001, "Wrong alignment on CamperPlayer_IsGuidedBySlasher");
static_assert(sizeof(CamperPlayer_IsGuidedBySlasher) == 0x000001, "Wrong size on CamperPlayer_IsGuidedBySlasher");
static_assert(offsetof(CamperPlayer_IsGuidedBySlasher, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsGuidedBySlasher::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsHealingTimerExpired
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsHealingTimerExpired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsHealingTimerExpired) == 0x000001, "Wrong alignment on CamperPlayer_IsHealingTimerExpired");
static_assert(sizeof(CamperPlayer_IsHealingTimerExpired) == 0x000001, "Wrong size on CamperPlayer_IsHealingTimerExpired");
static_assert(offsetof(CamperPlayer_IsHealingTimerExpired, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsHealingTimerExpired::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsHooked
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsHooked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsHooked) == 0x000001, "Wrong alignment on CamperPlayer_IsHooked");
static_assert(sizeof(CamperPlayer_IsHooked) == 0x000001, "Wrong size on CamperPlayer_IsHooked");
static_assert(offsetof(CamperPlayer_IsHooked, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsHooked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsImmobilized
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsImmobilized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsImmobilized) == 0x000001, "Wrong alignment on CamperPlayer_IsImmobilized");
static_assert(sizeof(CamperPlayer_IsImmobilized) == 0x000001, "Wrong size on CamperPlayer_IsImmobilized");
static_assert(offsetof(CamperPlayer_IsImmobilized, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsImmobilized::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsInDeathBed
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsInDeathBed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsInDeathBed) == 0x000001, "Wrong alignment on CamperPlayer_IsInDeathBed");
static_assert(sizeof(CamperPlayer_IsInDeathBed) == 0x000001, "Wrong size on CamperPlayer_IsInDeathBed");
static_assert(offsetof(CamperPlayer_IsInDeathBed, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsInDeathBed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsInNeed
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsInNeed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsInNeed) == 0x000001, "Wrong alignment on CamperPlayer_IsInNeed");
static_assert(sizeof(CamperPlayer_IsInNeed) == 0x000001, "Wrong size on CamperPlayer_IsInNeed");
static_assert(offsetof(CamperPlayer_IsInNeed, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsInNeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsMovementGuided
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsMovementGuided final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsMovementGuided) == 0x000001, "Wrong alignment on CamperPlayer_IsMovementGuided");
static_assert(sizeof(CamperPlayer_IsMovementGuided) == 0x000001, "Wrong size on CamperPlayer_IsMovementGuided");
static_assert(offsetof(CamperPlayer_IsMovementGuided, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsMovementGuided::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsObsessionTarget
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsObsessionTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsObsessionTarget) == 0x000001, "Wrong alignment on CamperPlayer_IsObsessionTarget");
static_assert(sizeof(CamperPlayer_IsObsessionTarget) == 0x000001, "Wrong size on CamperPlayer_IsObsessionTarget");
static_assert(offsetof(CamperPlayer_IsObsessionTarget, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsObsessionTarget::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsSacrificed
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsSacrificed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsSacrificed) == 0x000001, "Wrong alignment on CamperPlayer_IsSacrificed");
static_assert(sizeof(CamperPlayer_IsSacrificed) == 0x000001, "Wrong size on CamperPlayer_IsSacrificed");
static_assert(offsetof(CamperPlayer_IsSacrificed, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsSacrificed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsTrapped
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsTrapped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsTrapped) == 0x000001, "Wrong alignment on CamperPlayer_IsTrapped");
static_assert(sizeof(CamperPlayer_IsTrapped) == 0x000001, "Wrong size on CamperPlayer_IsTrapped");
static_assert(offsetof(CamperPlayer_IsTrapped, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsTrapped::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsUnhookingSelf
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsUnhookingSelf final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsUnhookingSelf) == 0x000001, "Wrong alignment on CamperPlayer_IsUnhookingSelf");
static_assert(sizeof(CamperPlayer_IsUnhookingSelf) == 0x000001, "Wrong size on CamperPlayer_IsUnhookingSelf");
static_assert(offsetof(CamperPlayer_IsUnhookingSelf, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsUnhookingSelf::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsUnintentionallyImmobilized
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsUnintentionallyImmobilized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsUnintentionallyImmobilized) == 0x000001, "Wrong alignment on CamperPlayer_IsUnintentionallyImmobilized");
static_assert(sizeof(CamperPlayer_IsUnintentionallyImmobilized) == 0x000001, "Wrong size on CamperPlayer_IsUnintentionallyImmobilized");
static_assert(offsetof(CamperPlayer_IsUnintentionallyImmobilized, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsUnintentionallyImmobilized::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsVaulting
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsVaulting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsVaulting) == 0x000001, "Wrong alignment on CamperPlayer_IsVaulting");
static_assert(sizeof(CamperPlayer_IsVaulting) == 0x000001, "Wrong size on CamperPlayer_IsVaulting");
static_assert(offsetof(CamperPlayer_IsVaulting, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsVaulting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperSlashableComponent.SetCrouchCapsuleHalfHeight
// 0x0004 (0x0004 - 0x0000)
struct CamperSlashableComponent_SetCrouchCapsuleHalfHeight final
{
public:
	float                                         height;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperSlashableComponent_SetCrouchCapsuleHalfHeight) == 0x000004, "Wrong alignment on CamperSlashableComponent_SetCrouchCapsuleHalfHeight");
static_assert(sizeof(CamperSlashableComponent_SetCrouchCapsuleHalfHeight) == 0x000004, "Wrong size on CamperSlashableComponent_SetCrouchCapsuleHalfHeight");
static_assert(offsetof(CamperSlashableComponent_SetCrouchCapsuleHalfHeight, height) == 0x000000, "Member 'CamperSlashableComponent_SetCrouchCapsuleHalfHeight::height' has a wrong offset!");

// Function DeadByDaylight.CamperSlashableComponent.SetHookSlashableZone
// 0x0008 (0x0008 - 0x0000)
struct CamperSlashableComponent_SetHookSlashableZone final
{
public:
	class UCapsuleComponent*                      zone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperSlashableComponent_SetHookSlashableZone) == 0x000008, "Wrong alignment on CamperSlashableComponent_SetHookSlashableZone");
static_assert(sizeof(CamperSlashableComponent_SetHookSlashableZone) == 0x000008, "Wrong size on CamperSlashableComponent_SetHookSlashableZone");
static_assert(offsetof(CamperSlashableComponent_SetHookSlashableZone, zone) == 0x000000, "Member 'CamperSlashableComponent_SetHookSlashableZone::zone' has a wrong offset!");

// Function DeadByDaylight.CamperSlashableComponent.SetSlashableZone
// 0x0008 (0x0008 - 0x0000)
struct CamperSlashableComponent_SetSlashableZone final
{
public:
	class UCapsuleComponent*                      zone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperSlashableComponent_SetSlashableZone) == 0x000008, "Wrong alignment on CamperSlashableComponent_SetSlashableZone");
static_assert(sizeof(CamperSlashableComponent_SetSlashableZone) == 0x000008, "Wrong size on CamperSlashableComponent_SetSlashableZone");
static_assert(offsetof(CamperSlashableComponent_SetSlashableZone, zone) == 0x000000, "Member 'CamperSlashableComponent_SetSlashableZone::zone' has a wrong offset!");

// Function DeadByDaylight.CamperSlashableComponent.SetStandingCapsuleHalfHeight
// 0x0004 (0x0004 - 0x0000)
struct CamperSlashableComponent_SetStandingCapsuleHalfHeight final
{
public:
	float                                         height;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperSlashableComponent_SetStandingCapsuleHalfHeight) == 0x000004, "Wrong alignment on CamperSlashableComponent_SetStandingCapsuleHalfHeight");
static_assert(sizeof(CamperSlashableComponent_SetStandingCapsuleHalfHeight) == 0x000004, "Wrong size on CamperSlashableComponent_SetStandingCapsuleHalfHeight");
static_assert(offsetof(CamperSlashableComponent_SetStandingCapsuleHalfHeight, height) == 0x000000, "Member 'CamperSlashableComponent_SetStandingCapsuleHalfHeight::height' has a wrong offset!");

// Function DeadByDaylight.CamperSlashableComponent.SetUseCrouchSlashableCapsule
// 0x0001 (0x0001 - 0x0000)
struct CamperSlashableComponent_SetUseCrouchSlashableCapsule final
{
public:
	bool                                          useCrouchCapsule;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperSlashableComponent_SetUseCrouchSlashableCapsule) == 0x000001, "Wrong alignment on CamperSlashableComponent_SetUseCrouchSlashableCapsule");
static_assert(sizeof(CamperSlashableComponent_SetUseCrouchSlashableCapsule) == 0x000001, "Wrong size on CamperSlashableComponent_SetUseCrouchSlashableCapsule");
static_assert(offsetof(CamperSlashableComponent_SetUseCrouchSlashableCapsule, useCrouchCapsule) == 0x000000, "Member 'CamperSlashableComponent_SetUseCrouchSlashableCapsule::useCrouchCapsule' has a wrong offset!");

// Function DeadByDaylight.ColorBlindSettingsListenerInterface.OnColorBlindSettingsChange
// 0x0008 (0x0008 - 0x0000)
struct ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange final
{
public:
	EColorVisionDeficiency                        colorBlindMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         colorBlindIntensity;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange) == 0x000004, "Wrong alignment on ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange");
static_assert(sizeof(ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange) == 0x000008, "Wrong size on ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange");
static_assert(offsetof(ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange, colorBlindMode) == 0x000000, "Member 'ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange::colorBlindMode' has a wrong offset!");
static_assert(offsetof(ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange, colorBlindIntensity) == 0x000004, "Member 'ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange::colorBlindIntensity' has a wrong offset!");

// Function DeadByDaylight.CamperStillnessTrackerComponent.EnterInteriorZone
// 0x0008 (0x0008 - 0x0000)
struct CamperStillnessTrackerComponent_EnterInteriorZone final
{
public:
	class UExposerInteriorZoneComponent*          zone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperStillnessTrackerComponent_EnterInteriorZone) == 0x000008, "Wrong alignment on CamperStillnessTrackerComponent_EnterInteriorZone");
static_assert(sizeof(CamperStillnessTrackerComponent_EnterInteriorZone) == 0x000008, "Wrong size on CamperStillnessTrackerComponent_EnterInteriorZone");
static_assert(offsetof(CamperStillnessTrackerComponent_EnterInteriorZone, zone) == 0x000000, "Member 'CamperStillnessTrackerComponent_EnterInteriorZone::zone' has a wrong offset!");

// Function DeadByDaylight.CamperStillnessTrackerComponent.ExitInteriorZone
// 0x0008 (0x0008 - 0x0000)
struct CamperStillnessTrackerComponent_ExitInteriorZone final
{
public:
	class UExposerInteriorZoneComponent*          zone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperStillnessTrackerComponent_ExitInteriorZone) == 0x000008, "Wrong alignment on CamperStillnessTrackerComponent_ExitInteriorZone");
static_assert(sizeof(CamperStillnessTrackerComponent_ExitInteriorZone) == 0x000008, "Wrong size on CamperStillnessTrackerComponent_ExitInteriorZone");
static_assert(offsetof(CamperStillnessTrackerComponent_ExitInteriorZone, zone) == 0x000000, "Member 'CamperStillnessTrackerComponent_ExitInteriorZone::zone' has a wrong offset!");

// Function DeadByDaylight.CamperStillnessTrackerComponent.OnOverlapEnter
// 0x00B0 (0x00B0 - 0x0000)
struct CamperStillnessTrackerComponent_OnOverlapEnter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperStillnessTrackerComponent_OnOverlapEnter) == 0x000008, "Wrong alignment on CamperStillnessTrackerComponent_OnOverlapEnter");
static_assert(sizeof(CamperStillnessTrackerComponent_OnOverlapEnter) == 0x0000B0, "Wrong size on CamperStillnessTrackerComponent_OnOverlapEnter");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapEnter, HitComponent) == 0x000000, "Member 'CamperStillnessTrackerComponent_OnOverlapEnter::HitComponent' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapEnter, OtherActor) == 0x000008, "Member 'CamperStillnessTrackerComponent_OnOverlapEnter::OtherActor' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapEnter, OtherComp) == 0x000010, "Member 'CamperStillnessTrackerComponent_OnOverlapEnter::OtherComp' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapEnter, OtherBodyIndex) == 0x000018, "Member 'CamperStillnessTrackerComponent_OnOverlapEnter::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapEnter, bFromSweep) == 0x00001C, "Member 'CamperStillnessTrackerComponent_OnOverlapEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapEnter, SweepResult) == 0x000020, "Member 'CamperStillnessTrackerComponent_OnOverlapEnter::SweepResult' has a wrong offset!");

// Function DeadByDaylight.CamperStillnessTrackerComponent.OnOverlapExit
// 0x0020 (0x0020 - 0x0000)
struct CamperStillnessTrackerComponent_OnOverlapExit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CamperStillnessTrackerComponent_OnOverlapExit) == 0x000008, "Wrong alignment on CamperStillnessTrackerComponent_OnOverlapExit");
static_assert(sizeof(CamperStillnessTrackerComponent_OnOverlapExit) == 0x000020, "Wrong size on CamperStillnessTrackerComponent_OnOverlapExit");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapExit, HitComponent) == 0x000000, "Member 'CamperStillnessTrackerComponent_OnOverlapExit::HitComponent' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapExit, OtherActor) == 0x000008, "Member 'CamperStillnessTrackerComponent_OnOverlapExit::OtherActor' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapExit, OtherComp) == 0x000010, "Member 'CamperStillnessTrackerComponent_OnOverlapExit::OtherComp' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapExit, OtherBodyIndex) == 0x000018, "Member 'CamperStillnessTrackerComponent_OnOverlapExit::OtherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.PlayerInGameAssetPreloadState.Server_SetPreloadCompleted
// 0x0010 (0x0010 - 0x0000)
struct PlayerInGameAssetPreloadState_Server_SetPreloadCompleted final
{
public:
	class FString                                 preloadInfo;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInGameAssetPreloadState_Server_SetPreloadCompleted) == 0x000008, "Wrong alignment on PlayerInGameAssetPreloadState_Server_SetPreloadCompleted");
static_assert(sizeof(PlayerInGameAssetPreloadState_Server_SetPreloadCompleted) == 0x000010, "Wrong size on PlayerInGameAssetPreloadState_Server_SetPreloadCompleted");
static_assert(offsetof(PlayerInGameAssetPreloadState_Server_SetPreloadCompleted, preloadInfo) == 0x000000, "Member 'PlayerInGameAssetPreloadState_Server_SetPreloadCompleted::preloadInfo' has a wrong offset!");

// Function DeadByDaylight.CartersSparkComponent.Authority_AddTotallyInsaneSurvivor
// 0x0008 (0x0008 - 0x0000)
struct CartersSparkComponent_Authority_AddTotallyInsaneSurvivor final
{
public:
	class ADBDPlayer*                             insaneSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CartersSparkComponent_Authority_AddTotallyInsaneSurvivor) == 0x000008, "Wrong alignment on CartersSparkComponent_Authority_AddTotallyInsaneSurvivor");
static_assert(sizeof(CartersSparkComponent_Authority_AddTotallyInsaneSurvivor) == 0x000008, "Wrong size on CartersSparkComponent_Authority_AddTotallyInsaneSurvivor");
static_assert(offsetof(CartersSparkComponent_Authority_AddTotallyInsaneSurvivor, insaneSurvivor) == 0x000000, "Member 'CartersSparkComponent_Authority_AddTotallyInsaneSurvivor::insaneSurvivor' has a wrong offset!");

// Function DeadByDaylight.CartersSparkComponent.OnRequestAndBeginInteraction
// 0x0008 (0x0008 - 0x0000)
struct CartersSparkComponent_OnRequestAndBeginInteraction final
{
public:
	class UInteractionDefinition*                 interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CartersSparkComponent_OnRequestAndBeginInteraction) == 0x000008, "Wrong alignment on CartersSparkComponent_OnRequestAndBeginInteraction");
static_assert(sizeof(CartersSparkComponent_OnRequestAndBeginInteraction) == 0x000008, "Wrong size on CartersSparkComponent_OnRequestAndBeginInteraction");
static_assert(offsetof(CartersSparkComponent_OnRequestAndBeginInteraction, interaction) == 0x000000, "Member 'CartersSparkComponent_OnRequestAndBeginInteraction::interaction' has a wrong offset!");

// Function DeadByDaylight.CartersSparkComponent.GetStaticBlastCooldownPercentElapsed
// 0x0004 (0x0004 - 0x0000)
struct CartersSparkComponent_GetStaticBlastCooldownPercentElapsed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CartersSparkComponent_GetStaticBlastCooldownPercentElapsed) == 0x000004, "Wrong alignment on CartersSparkComponent_GetStaticBlastCooldownPercentElapsed");
static_assert(sizeof(CartersSparkComponent_GetStaticBlastCooldownPercentElapsed) == 0x000004, "Wrong size on CartersSparkComponent_GetStaticBlastCooldownPercentElapsed");
static_assert(offsetof(CartersSparkComponent_GetStaticBlastCooldownPercentElapsed, ReturnValue) == 0x000000, "Member 'CartersSparkComponent_GetStaticBlastCooldownPercentElapsed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CartersSparkComponent.IsShockTherapyOnCooldown
// 0x0001 (0x0001 - 0x0000)
struct CartersSparkComponent_IsShockTherapyOnCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CartersSparkComponent_IsShockTherapyOnCooldown) == 0x000001, "Wrong alignment on CartersSparkComponent_IsShockTherapyOnCooldown");
static_assert(sizeof(CartersSparkComponent_IsShockTherapyOnCooldown) == 0x000001, "Wrong size on CartersSparkComponent_IsShockTherapyOnCooldown");
static_assert(offsetof(CartersSparkComponent_IsShockTherapyOnCooldown, ReturnValue) == 0x000000, "Member 'CartersSparkComponent_IsShockTherapyOnCooldown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CartersSparkComponent.IsStaticBlastOnCooldown
// 0x0001 (0x0001 - 0x0000)
struct CartersSparkComponent_IsStaticBlastOnCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CartersSparkComponent_IsStaticBlastOnCooldown) == 0x000001, "Wrong alignment on CartersSparkComponent_IsStaticBlastOnCooldown");
static_assert(sizeof(CartersSparkComponent_IsStaticBlastOnCooldown) == 0x000001, "Wrong size on CartersSparkComponent_IsStaticBlastOnCooldown");
static_assert(offsetof(CartersSparkComponent_IsStaticBlastOnCooldown, ReturnValue) == 0x000000, "Member 'CartersSparkComponent_IsStaticBlastOnCooldown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutItemButton.BroadcastClickedEvent
// 0x000C (0x000C - 0x0000)
struct UMGLoadoutItemButton_BroadcastClickedEvent final
{
public:
	class FName                                   itemID;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutItemButton_BroadcastClickedEvent) == 0x000004, "Wrong alignment on UMGLoadoutItemButton_BroadcastClickedEvent");
static_assert(sizeof(UMGLoadoutItemButton_BroadcastClickedEvent) == 0x00000C, "Wrong size on UMGLoadoutItemButton_BroadcastClickedEvent");
static_assert(offsetof(UMGLoadoutItemButton_BroadcastClickedEvent, itemID) == 0x000000, "Member 'UMGLoadoutItemButton_BroadcastClickedEvent::itemID' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutItemButton.BroadcastLongPressEvent
// 0x000C (0x000C - 0x0000)
struct UMGLoadoutItemButton_BroadcastLongPressEvent final
{
public:
	class FName                                   itemID;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutItemButton_BroadcastLongPressEvent) == 0x000004, "Wrong alignment on UMGLoadoutItemButton_BroadcastLongPressEvent");
static_assert(sizeof(UMGLoadoutItemButton_BroadcastLongPressEvent) == 0x00000C, "Wrong size on UMGLoadoutItemButton_BroadcastLongPressEvent");
static_assert(offsetof(UMGLoadoutItemButton_BroadcastLongPressEvent, itemID) == 0x000000, "Member 'UMGLoadoutItemButton_BroadcastLongPressEvent::itemID' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutItemButton.GetLoadoutItemID
// 0x000C (0x000C - 0x0000)
struct UMGLoadoutItemButton_GetLoadoutItemID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutItemButton_GetLoadoutItemID) == 0x000004, "Wrong alignment on UMGLoadoutItemButton_GetLoadoutItemID");
static_assert(sizeof(UMGLoadoutItemButton_GetLoadoutItemID) == 0x00000C, "Wrong size on UMGLoadoutItemButton_GetLoadoutItemID");
static_assert(offsetof(UMGLoadoutItemButton_GetLoadoutItemID, ReturnValue) == 0x000000, "Member 'UMGLoadoutItemButton_GetLoadoutItemID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutItemButton.SetIconImageByPath
// 0x0010 (0x0010 - 0x0000)
struct UMGLoadoutItemButton_SetIconImageByPath final
{
public:
	class FString                                 iconPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutItemButton_SetIconImageByPath) == 0x000008, "Wrong alignment on UMGLoadoutItemButton_SetIconImageByPath");
static_assert(sizeof(UMGLoadoutItemButton_SetIconImageByPath) == 0x000010, "Wrong size on UMGLoadoutItemButton_SetIconImageByPath");
static_assert(offsetof(UMGLoadoutItemButton_SetIconImageByPath, iconPath) == 0x000000, "Member 'UMGLoadoutItemButton_SetIconImageByPath::iconPath' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutItemButton.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct UMGLoadoutItemButton_SetIsSelected final
{
public:
	bool                                          isSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutItemButton_SetIsSelected) == 0x000001, "Wrong alignment on UMGLoadoutItemButton_SetIsSelected");
static_assert(sizeof(UMGLoadoutItemButton_SetIsSelected) == 0x000001, "Wrong size on UMGLoadoutItemButton_SetIsSelected");
static_assert(offsetof(UMGLoadoutItemButton_SetIsSelected, isSelected) == 0x000000, "Member 'UMGLoadoutItemButton_SetIsSelected::isSelected' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutItemButton.ShowClickableOutline
// 0x0001 (0x0001 - 0x0000)
struct UMGLoadoutItemButton_ShowClickableOutline final
{
public:
	bool                                          clickable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutItemButton_ShowClickableOutline) == 0x000001, "Wrong alignment on UMGLoadoutItemButton_ShowClickableOutline");
static_assert(sizeof(UMGLoadoutItemButton_ShowClickableOutline) == 0x000001, "Wrong size on UMGLoadoutItemButton_ShowClickableOutline");
static_assert(offsetof(UMGLoadoutItemButton_ShowClickableOutline, clickable) == 0x000000, "Member 'UMGLoadoutItemButton_ShowClickableOutline::clickable' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutItemButton.UpdateImageColor
// 0x0002 (0x0002 - 0x0000)
struct UMGLoadoutItemButton_UpdateImageColor final
{
public:
	EItemRarity                                   rarity;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusEffectType                             effectType;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutItemButton_UpdateImageColor) == 0x000001, "Wrong alignment on UMGLoadoutItemButton_UpdateImageColor");
static_assert(sizeof(UMGLoadoutItemButton_UpdateImageColor) == 0x000002, "Wrong size on UMGLoadoutItemButton_UpdateImageColor");
static_assert(offsetof(UMGLoadoutItemButton_UpdateImageColor, rarity) == 0x000000, "Member 'UMGLoadoutItemButton_UpdateImageColor::rarity' has a wrong offset!");
static_assert(offsetof(UMGLoadoutItemButton_UpdateImageColor, effectType) == 0x000001, "Member 'UMGLoadoutItemButton_UpdateImageColor::effectType' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutItemButton.UpdateStackCount
// 0x0004 (0x0004 - 0x0000)
struct UMGLoadoutItemButton_UpdateStackCount final
{
public:
	int32                                         stackCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutItemButton_UpdateStackCount) == 0x000004, "Wrong alignment on UMGLoadoutItemButton_UpdateStackCount");
static_assert(sizeof(UMGLoadoutItemButton_UpdateStackCount) == 0x000004, "Wrong size on UMGLoadoutItemButton_UpdateStackCount");
static_assert(offsetof(UMGLoadoutItemButton_UpdateStackCount, stackCount) == 0x000000, "Member 'UMGLoadoutItemButton_UpdateStackCount::stackCount' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutItemButton.UpdateUnlockable
// 0x0018 (0x0018 - 0x0000)
struct UMGLoadoutItemButton_UpdateUnlockable final
{
public:
	class FString                                 nameToDisplay;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unlockableLevel;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGLoadoutItemButton_UpdateUnlockable) == 0x000008, "Wrong alignment on UMGLoadoutItemButton_UpdateUnlockable");
static_assert(sizeof(UMGLoadoutItemButton_UpdateUnlockable) == 0x000018, "Wrong size on UMGLoadoutItemButton_UpdateUnlockable");
static_assert(offsetof(UMGLoadoutItemButton_UpdateUnlockable, nameToDisplay) == 0x000000, "Member 'UMGLoadoutItemButton_UpdateUnlockable::nameToDisplay' has a wrong offset!");
static_assert(offsetof(UMGLoadoutItemButton_UpdateUnlockable, unlockableLevel) == 0x000010, "Member 'UMGLoadoutItemButton_UpdateUnlockable::unlockableLevel' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutItemButton.UpdateWidgetByData
// 0x0128 (0x0128 - 0x0000)
struct UMGLoadoutItemButton_UpdateWidgetByData final
{
public:
	struct FInventorySlotData                     slotData;                                          // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutItemButton_UpdateWidgetByData) == 0x000008, "Wrong alignment on UMGLoadoutItemButton_UpdateWidgetByData");
static_assert(sizeof(UMGLoadoutItemButton_UpdateWidgetByData) == 0x000128, "Wrong size on UMGLoadoutItemButton_UpdateWidgetByData");
static_assert(offsetof(UMGLoadoutItemButton_UpdateWidgetByData, slotData) == 0x000000, "Member 'UMGLoadoutItemButton_UpdateWidgetByData::slotData' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutItemButton.UpdateWidgetByDataBP
// 0x0128 (0x0128 - 0x0000)
struct UMGLoadoutItemButton_UpdateWidgetByDataBP final
{
public:
	struct FInventorySlotData                     slotData;                                          // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutItemButton_UpdateWidgetByDataBP) == 0x000008, "Wrong alignment on UMGLoadoutItemButton_UpdateWidgetByDataBP");
static_assert(sizeof(UMGLoadoutItemButton_UpdateWidgetByDataBP) == 0x000128, "Wrong size on UMGLoadoutItemButton_UpdateWidgetByDataBP");
static_assert(offsetof(UMGLoadoutItemButton_UpdateWidgetByDataBP, slotData) == 0x000000, "Member 'UMGLoadoutItemButton_UpdateWidgetByDataBP::slotData' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutItemButton.UpdateWidgetByState
// 0x0001 (0x0001 - 0x0000)
struct UMGLoadoutItemButton_UpdateWidgetByState final
{
public:
	EInventoryButtonState                         state;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutItemButton_UpdateWidgetByState) == 0x000001, "Wrong alignment on UMGLoadoutItemButton_UpdateWidgetByState");
static_assert(sizeof(UMGLoadoutItemButton_UpdateWidgetByState) == 0x000001, "Wrong size on UMGLoadoutItemButton_UpdateWidgetByState");
static_assert(offsetof(UMGLoadoutItemButton_UpdateWidgetByState, state) == 0x000000, "Member 'UMGLoadoutItemButton_UpdateWidgetByState::state' has a wrong offset!");

// Function DeadByDaylight.UMGInventoryItemButton.UpdateItemButton
// 0x0008 (0x0008 - 0x0000)
struct UMGInventoryItemButton_UpdateItemButton final
{
public:
	class ACollectable*                           item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInventoryItemButton_UpdateItemButton) == 0x000008, "Wrong alignment on UMGInventoryItemButton_UpdateItemButton");
static_assert(sizeof(UMGInventoryItemButton_UpdateItemButton) == 0x000008, "Wrong size on UMGInventoryItemButton_UpdateItemButton");
static_assert(offsetof(UMGInventoryItemButton_UpdateItemButton, item) == 0x000000, "Member 'UMGInventoryItemButton_UpdateItemButton::item' has a wrong offset!");

// Function DeadByDaylight.UMGInventoryItemButton.UpdateItemButtonProgressBar
// 0x0010 (0x0010 - 0x0000)
struct UMGInventoryItemButton_UpdateItemButtonProgressBar final
{
public:
	class ACollectable*                           item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProgressBar*                           itemProgressBar;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInventoryItemButton_UpdateItemButtonProgressBar) == 0x000008, "Wrong alignment on UMGInventoryItemButton_UpdateItemButtonProgressBar");
static_assert(sizeof(UMGInventoryItemButton_UpdateItemButtonProgressBar) == 0x000010, "Wrong size on UMGInventoryItemButton_UpdateItemButtonProgressBar");
static_assert(offsetof(UMGInventoryItemButton_UpdateItemButtonProgressBar, item) == 0x000000, "Member 'UMGInventoryItemButton_UpdateItemButtonProgressBar::item' has a wrong offset!");
static_assert(offsetof(UMGInventoryItemButton_UpdateItemButtonProgressBar, itemProgressBar) == 0x000008, "Member 'UMGInventoryItemButton_UpdateItemButtonProgressBar::itemProgressBar' has a wrong offset!");

// Function DeadByDaylight.CDNPatchManager.OnInstallFailed
// 0x0020 (0x0020 - 0x0000)
struct CDNPatchManager_OnInstallFailed final
{
public:
	class FText                                   errorText;                                         // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         errorCode;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CDNPatchManager_OnInstallFailed) == 0x000008, "Wrong alignment on CDNPatchManager_OnInstallFailed");
static_assert(sizeof(CDNPatchManager_OnInstallFailed) == 0x000020, "Wrong size on CDNPatchManager_OnInstallFailed");
static_assert(offsetof(CDNPatchManager_OnInstallFailed, errorText) == 0x000000, "Member 'CDNPatchManager_OnInstallFailed::errorText' has a wrong offset!");
static_assert(offsetof(CDNPatchManager_OnInstallFailed, errorCode) == 0x000018, "Member 'CDNPatchManager_OnInstallFailed::errorCode' has a wrong offset!");

// Function DeadByDaylight.CDNPatchManager.OnRequestFailed
// 0x0020 (0x0020 - 0x0000)
struct CDNPatchManager_OnRequestFailed final
{
public:
	class FText                                   errorText;                                         // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         errorCode;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CDNPatchManager_OnRequestFailed) == 0x000008, "Wrong alignment on CDNPatchManager_OnRequestFailed");
static_assert(sizeof(CDNPatchManager_OnRequestFailed) == 0x000020, "Wrong size on CDNPatchManager_OnRequestFailed");
static_assert(offsetof(CDNPatchManager_OnRequestFailed, errorText) == 0x000000, "Member 'CDNPatchManager_OnRequestFailed::errorText' has a wrong offset!");
static_assert(offsetof(CDNPatchManager_OnRequestFailed, errorCode) == 0x000018, "Member 'CDNPatchManager_OnRequestFailed::errorCode' has a wrong offset!");

// Function DeadByDaylight.CDNPatchManager.OnRequestSucceeded
// 0x0008 (0x0008 - 0x0000)
struct CDNPatchManager_OnRequestSucceeded final
{
public:
	class UAtlantaPendingContent*                 pendingContent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CDNPatchManager_OnRequestSucceeded) == 0x000008, "Wrong alignment on CDNPatchManager_OnRequestSucceeded");
static_assert(sizeof(CDNPatchManager_OnRequestSucceeded) == 0x000008, "Wrong size on CDNPatchManager_OnRequestSucceeded");
static_assert(offsetof(CDNPatchManager_OnRequestSucceeded, pendingContent) == 0x000000, "Member 'CDNPatchManager_OnRequestSucceeded::pendingContent' has a wrong offset!");

// Function DeadByDaylight.CharacterChaseVisualComponent.OnObservedCharacterChange
// 0x0008 (0x0008 - 0x0000)
struct CharacterChaseVisualComponent_OnObservedCharacterChange final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterChaseVisualComponent_OnObservedCharacterChange) == 0x000008, "Wrong alignment on CharacterChaseVisualComponent_OnObservedCharacterChange");
static_assert(sizeof(CharacterChaseVisualComponent_OnObservedCharacterChange) == 0x000008, "Wrong size on CharacterChaseVisualComponent_OnObservedCharacterChange");
static_assert(offsetof(CharacterChaseVisualComponent_OnObservedCharacterChange, player) == 0x000000, "Member 'CharacterChaseVisualComponent_OnObservedCharacterChange::player' has a wrong offset!");

// Function DeadByDaylight.DBDClipRegionComponent.ApplyArrayOfClipsToDynamicMaterial
// 0x0018 (0x0018 - 0x0000)
struct DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial final
{
public:
	TArray<class UDBDClipRegionComponent*>        InRegions;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               dynamicInstanceToClip;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial) == 0x000008, "Wrong alignment on DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial");
static_assert(sizeof(DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial) == 0x000018, "Wrong size on DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial");
static_assert(offsetof(DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial, InRegions) == 0x000000, "Member 'DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial::InRegions' has a wrong offset!");
static_assert(offsetof(DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial, dynamicInstanceToClip) == 0x000010, "Member 'DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial::dynamicInstanceToClip' has a wrong offset!");

// Function DeadByDaylight.DBDClipRegionComponent.ApplyClip
// 0x0010 (0x0010 - 0x0000)
struct DBDClipRegionComponent_ApplyClip final
{
public:
	class UMaterialInstanceDynamic*               InMaterial2clip;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRegionID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDClipRegionComponent_ApplyClip) == 0x000008, "Wrong alignment on DBDClipRegionComponent_ApplyClip");
static_assert(sizeof(DBDClipRegionComponent_ApplyClip) == 0x000010, "Wrong size on DBDClipRegionComponent_ApplyClip");
static_assert(offsetof(DBDClipRegionComponent_ApplyClip, InMaterial2clip) == 0x000000, "Member 'DBDClipRegionComponent_ApplyClip::InMaterial2clip' has a wrong offset!");
static_assert(offsetof(DBDClipRegionComponent_ApplyClip, InRegionID) == 0x000008, "Member 'DBDClipRegionComponent_ApplyClip::InRegionID' has a wrong offset!");

// Function DeadByDaylight.DBDClipRegionComponent.ApplyClipToDynamicMaterial
// 0x0010 (0x0010 - 0x0000)
struct DBDClipRegionComponent_ApplyClipToDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               dynamicInstanceToClip;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRegionID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDClipRegionComponent_ApplyClipToDynamicMaterial) == 0x000008, "Wrong alignment on DBDClipRegionComponent_ApplyClipToDynamicMaterial");
static_assert(sizeof(DBDClipRegionComponent_ApplyClipToDynamicMaterial) == 0x000010, "Wrong size on DBDClipRegionComponent_ApplyClipToDynamicMaterial");
static_assert(offsetof(DBDClipRegionComponent_ApplyClipToDynamicMaterial, dynamicInstanceToClip) == 0x000000, "Member 'DBDClipRegionComponent_ApplyClipToDynamicMaterial::dynamicInstanceToClip' has a wrong offset!");
static_assert(offsetof(DBDClipRegionComponent_ApplyClipToDynamicMaterial, InRegionID) == 0x000008, "Member 'DBDClipRegionComponent_ApplyClipToDynamicMaterial::InRegionID' has a wrong offset!");

// Function DeadByDaylight.DBDClipRegionComponent.ClipDistance
// 0x0010 (0x0010 - 0x0000)
struct DBDClipRegionComponent_ClipDistance final
{
public:
	class UMeshComponent*                         InMeshComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDClipRegionComponent_ClipDistance) == 0x000008, "Wrong alignment on DBDClipRegionComponent_ClipDistance");
static_assert(sizeof(DBDClipRegionComponent_ClipDistance) == 0x000010, "Wrong size on DBDClipRegionComponent_ClipDistance");
static_assert(offsetof(DBDClipRegionComponent_ClipDistance, InMeshComponent) == 0x000000, "Member 'DBDClipRegionComponent_ClipDistance::InMeshComponent' has a wrong offset!");
static_assert(offsetof(DBDClipRegionComponent_ClipDistance, ReturnValue) == 0x000008, "Member 'DBDClipRegionComponent_ClipDistance::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDClipRegionComponent.NotifyShouldClipComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDClipRegionComponent_NotifyShouldClipComponent final
{
public:
	class UMeshComponent*                         InMeshComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDClipRegionComponent_NotifyShouldClipComponent) == 0x000008, "Wrong alignment on DBDClipRegionComponent_NotifyShouldClipComponent");
static_assert(sizeof(DBDClipRegionComponent_NotifyShouldClipComponent) == 0x000008, "Wrong size on DBDClipRegionComponent_NotifyShouldClipComponent");
static_assert(offsetof(DBDClipRegionComponent_NotifyShouldClipComponent, InMeshComponent) == 0x000000, "Member 'DBDClipRegionComponent_NotifyShouldClipComponent::InMeshComponent' has a wrong offset!");

// Function DeadByDaylight.CharacterCollection.GetAllDBDPlayers
// 0x0010 (0x0010 - 0x0000)
struct CharacterCollection_GetAllDBDPlayers final
{
public:
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollection_GetAllDBDPlayers) == 0x000008, "Wrong alignment on CharacterCollection_GetAllDBDPlayers");
static_assert(sizeof(CharacterCollection_GetAllDBDPlayers) == 0x000010, "Wrong size on CharacterCollection_GetAllDBDPlayers");
static_assert(offsetof(CharacterCollection_GetAllDBDPlayers, ReturnValue) == 0x000000, "Member 'CharacterCollection_GetAllDBDPlayers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollection.GetKiller
// 0x0008 (0x0008 - 0x0000)
struct CharacterCollection_GetKiller final
{
public:
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollection_GetKiller) == 0x000008, "Wrong alignment on CharacterCollection_GetKiller");
static_assert(sizeof(CharacterCollection_GetKiller) == 0x000008, "Wrong size on CharacterCollection_GetKiller");
static_assert(offsetof(CharacterCollection_GetKiller, ReturnValue) == 0x000000, "Member 'CharacterCollection_GetKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollection.GetMainDBDPlayers
// 0x0050 (0x0050 - 0x0000)
struct CharacterCollection_GetMainDBDPlayers final
{
public:
	TSet<class ADBDPlayer*>                       ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollection_GetMainDBDPlayers) == 0x000008, "Wrong alignment on CharacterCollection_GetMainDBDPlayers");
static_assert(sizeof(CharacterCollection_GetMainDBDPlayers) == 0x000050, "Wrong size on CharacterCollection_GetMainDBDPlayers");
static_assert(offsetof(CharacterCollection_GetMainDBDPlayers, ReturnValue) == 0x000000, "Member 'CharacterCollection_GetMainDBDPlayers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollection.GetSurvivors
// 0x0050 (0x0050 - 0x0000)
struct CharacterCollection_GetSurvivors final
{
public:
	TSet<class ACamperPlayer*>                    ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollection_GetSurvivors) == 0x000008, "Wrong alignment on CharacterCollection_GetSurvivors");
static_assert(sizeof(CharacterCollection_GetSurvivors) == 0x000050, "Wrong size on CharacterCollection_GetSurvivors");
static_assert(offsetof(CharacterCollection_GetSurvivors, ReturnValue) == 0x000000, "Member 'CharacterCollection_GetSurvivors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetAllCharacters
// 0x0058 (0x0058 - 0x0000)
struct CharacterCollectionUtilities_GetAllCharacters final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class ACharacter*>                       ReturnValue;                                       // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetAllCharacters) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetAllCharacters");
static_assert(sizeof(CharacterCollectionUtilities_GetAllCharacters) == 0x000058, "Wrong size on CharacterCollectionUtilities_GetAllCharacters");
static_assert(offsetof(CharacterCollectionUtilities_GetAllCharacters, worldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetAllCharacters::worldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetAllCharacters, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetAllCharacters::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetAllDBDPlayers
// 0x0018 (0x0018 - 0x0000)
struct CharacterCollectionUtilities_GetAllDBDPlayers final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetAllDBDPlayers) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetAllDBDPlayers");
static_assert(sizeof(CharacterCollectionUtilities_GetAllDBDPlayers) == 0x000018, "Wrong size on CharacterCollectionUtilities_GetAllDBDPlayers");
static_assert(offsetof(CharacterCollectionUtilities_GetAllDBDPlayers, worldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetAllDBDPlayers::worldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetAllDBDPlayers, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetAllDBDPlayers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetCharactersByPlayerTeam
// 0x0020 (0x0020 - 0x0000)
struct CharacterCollectionUtilities_GetCharactersByPlayerTeam final
{
public:
	EPlayerTeam                                   playerTeam;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          worldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetCharactersByPlayerTeam) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetCharactersByPlayerTeam");
static_assert(sizeof(CharacterCollectionUtilities_GetCharactersByPlayerTeam) == 0x000020, "Wrong size on CharacterCollectionUtilities_GetCharactersByPlayerTeam");
static_assert(offsetof(CharacterCollectionUtilities_GetCharactersByPlayerTeam, playerTeam) == 0x000000, "Member 'CharacterCollectionUtilities_GetCharactersByPlayerTeam::playerTeam' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetCharactersByPlayerTeam, worldContextObject) == 0x000008, "Member 'CharacterCollectionUtilities_GetCharactersByPlayerTeam::worldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetCharactersByPlayerTeam, ReturnValue) == 0x000010, "Member 'CharacterCollectionUtilities_GetCharactersByPlayerTeam::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetInGamePlayers
// 0x0018 (0x0018 - 0x0000)
struct CharacterCollectionUtilities_GetInGamePlayers final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetInGamePlayers) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetInGamePlayers");
static_assert(sizeof(CharacterCollectionUtilities_GetInGamePlayers) == 0x000018, "Wrong size on CharacterCollectionUtilities_GetInGamePlayers");
static_assert(offsetof(CharacterCollectionUtilities_GetInGamePlayers, worldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetInGamePlayers::worldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetInGamePlayers, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetInGamePlayers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetInGameSurvivors
// 0x0018 (0x0018 - 0x0000)
struct CharacterCollectionUtilities_GetInGameSurvivors final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ACamperPlayer*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetInGameSurvivors) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetInGameSurvivors");
static_assert(sizeof(CharacterCollectionUtilities_GetInGameSurvivors) == 0x000018, "Wrong size on CharacterCollectionUtilities_GetInGameSurvivors");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameSurvivors, worldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetInGameSurvivors::worldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameSurvivors, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetInGameSurvivors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetInGameSurvivorsAsPlayers
// 0x0018 (0x0018 - 0x0000)
struct CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers");
static_assert(sizeof(CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers) == 0x000018, "Wrong size on CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers, worldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers::worldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetInGameSurvivorsByRef
// 0x0058 (0x0058 - 0x0000)
struct CharacterCollectionUtilities_GetInGameSurvivorsByRef final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class ACamperPlayer*>                    ReturnValue;                                       // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetInGameSurvivorsByRef) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetInGameSurvivorsByRef");
static_assert(sizeof(CharacterCollectionUtilities_GetInGameSurvivorsByRef) == 0x000058, "Wrong size on CharacterCollectionUtilities_GetInGameSurvivorsByRef");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameSurvivorsByRef, worldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetInGameSurvivorsByRef::worldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameSurvivorsByRef, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetInGameSurvivorsByRef::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetKiller
// 0x0010 (0x0010 - 0x0000)
struct CharacterCollectionUtilities_GetKiller final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetKiller) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetKiller");
static_assert(sizeof(CharacterCollectionUtilities_GetKiller) == 0x000010, "Wrong size on CharacterCollectionUtilities_GetKiller");
static_assert(offsetof(CharacterCollectionUtilities_GetKiller, worldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetKiller::worldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetKiller, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetNumberOfInjuredHookedOrDyingSurvivors
// 0x0010 (0x0010 - 0x0000)
struct CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors");
static_assert(sizeof(CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors) == 0x000010, "Wrong size on CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors");
static_assert(offsetof(CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors, worldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors::worldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDesignTunables.GetTunableValue
// 0x0014 (0x0014 - 0x0000)
struct DBDDesignTunables_GetTunableValue final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          warnIfRowMissing;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDesignTunables_GetTunableValue) == 0x000004, "Wrong alignment on DBDDesignTunables_GetTunableValue");
static_assert(sizeof(DBDDesignTunables_GetTunableValue) == 0x000014, "Wrong size on DBDDesignTunables_GetTunableValue");
static_assert(offsetof(DBDDesignTunables_GetTunableValue, ID) == 0x000000, "Member 'DBDDesignTunables_GetTunableValue::ID' has a wrong offset!");
static_assert(offsetof(DBDDesignTunables_GetTunableValue, warnIfRowMissing) == 0x00000C, "Member 'DBDDesignTunables_GetTunableValue::warnIfRowMissing' has a wrong offset!");
static_assert(offsetof(DBDDesignTunables_GetTunableValue, ReturnValue) == 0x000010, "Member 'DBDDesignTunables_GetTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterHelper.GetAllEnabledCharms
// 0x0010 (0x0010 - 0x0000)
struct CharacterHelper_GetAllEnabledCharms final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHelper_GetAllEnabledCharms) == 0x000008, "Wrong alignment on CharacterHelper_GetAllEnabledCharms");
static_assert(sizeof(CharacterHelper_GetAllEnabledCharms) == 0x000010, "Wrong size on CharacterHelper_GetAllEnabledCharms");
static_assert(offsetof(CharacterHelper_GetAllEnabledCharms, ReturnValue) == 0x000000, "Member 'CharacterHelper_GetAllEnabledCharms::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterHelper.GetAllOutfitComponentsOfCharacter
// 0x0040 (0x0040 - 0x0000)
struct CharacterHelper_GetAllOutfitComponentsOfCharacter final
{
public:
	TArray<struct FCustomizationItemData>         returnHeads;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomizationItemData>         returnTorsos;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomizationItemData>         returnLegsWeapons;                                 // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 characterId;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHelper_GetAllOutfitComponentsOfCharacter) == 0x000008, "Wrong alignment on CharacterHelper_GetAllOutfitComponentsOfCharacter");
static_assert(sizeof(CharacterHelper_GetAllOutfitComponentsOfCharacter) == 0x000040, "Wrong size on CharacterHelper_GetAllOutfitComponentsOfCharacter");
static_assert(offsetof(CharacterHelper_GetAllOutfitComponentsOfCharacter, returnHeads) == 0x000000, "Member 'CharacterHelper_GetAllOutfitComponentsOfCharacter::returnHeads' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetAllOutfitComponentsOfCharacter, returnTorsos) == 0x000010, "Member 'CharacterHelper_GetAllOutfitComponentsOfCharacter::returnTorsos' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetAllOutfitComponentsOfCharacter, returnLegsWeapons) == 0x000020, "Member 'CharacterHelper_GetAllOutfitComponentsOfCharacter::returnLegsWeapons' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetAllOutfitComponentsOfCharacter, characterId) == 0x000030, "Member 'CharacterHelper_GetAllOutfitComponentsOfCharacter::characterId' has a wrong offset!");

// Function DeadByDaylight.CharacterHelper.GetCharactersByRole
// 0x0018 (0x0018 - 0x0000)
struct CharacterHelper_GetCharactersByRole final
{
public:
	EPlayerRole                                   role;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCharacterDescription>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHelper_GetCharactersByRole) == 0x000008, "Wrong alignment on CharacterHelper_GetCharactersByRole");
static_assert(sizeof(CharacterHelper_GetCharactersByRole) == 0x000018, "Wrong size on CharacterHelper_GetCharactersByRole");
static_assert(offsetof(CharacterHelper_GetCharactersByRole, role) == 0x000000, "Member 'CharacterHelper_GetCharactersByRole::role' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetCharactersByRole, ReturnValue) == 0x000008, "Member 'CharacterHelper_GetCharactersByRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterHelper.GetOutfitComposition
// 0x0A48 (0x0A48 - 0x0000)
struct CharacterHelper_GetOutfitComposition final
{
public:
	struct FCustomizationItemData                 returnHead;                                        // 0x0000(0x0368)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FCustomizationItemData                 returnTorso;                                       // 0x0368(0x0368)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FCustomizationItemData                 returnLegsWeapon;                                  // 0x06D0(0x0368)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 outfitId;                                          // 0x0A38(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHelper_GetOutfitComposition) == 0x000008, "Wrong alignment on CharacterHelper_GetOutfitComposition");
static_assert(sizeof(CharacterHelper_GetOutfitComposition) == 0x000A48, "Wrong size on CharacterHelper_GetOutfitComposition");
static_assert(offsetof(CharacterHelper_GetOutfitComposition, returnHead) == 0x000000, "Member 'CharacterHelper_GetOutfitComposition::returnHead' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetOutfitComposition, returnTorso) == 0x000368, "Member 'CharacterHelper_GetOutfitComposition::returnTorso' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetOutfitComposition, returnLegsWeapon) == 0x0006D0, "Member 'CharacterHelper_GetOutfitComposition::returnLegsWeapon' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetOutfitComposition, outfitId) == 0x000A38, "Member 'CharacterHelper_GetOutfitComposition::outfitId' has a wrong offset!");

// Function DeadByDaylight.CharacterHelper.GetOutfitsByCharacterID
// 0x0020 (0x0020 - 0x0000)
struct CharacterHelper_GetOutfitsByCharacterID final
{
public:
	class FString                                 characterId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOutfitData>                    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHelper_GetOutfitsByCharacterID) == 0x000008, "Wrong alignment on CharacterHelper_GetOutfitsByCharacterID");
static_assert(sizeof(CharacterHelper_GetOutfitsByCharacterID) == 0x000020, "Wrong size on CharacterHelper_GetOutfitsByCharacterID");
static_assert(offsetof(CharacterHelper_GetOutfitsByCharacterID, characterId) == 0x000000, "Member 'CharacterHelper_GetOutfitsByCharacterID::characterId' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetOutfitsByCharacterID, ReturnValue) == 0x000010, "Member 'CharacterHelper_GetOutfitsByCharacterID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterHelper.SetCharmSlot
// 0x0028 (0x0028 - 0x0000)
struct CharacterHelper_SetCharmSlot final
{
public:
	class ADBDPlayerState*                        playerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   charmId;                                           // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         slotIndex;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharmIdSlot                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHelper_SetCharmSlot) == 0x000008, "Wrong alignment on CharacterHelper_SetCharmSlot");
static_assert(sizeof(CharacterHelper_SetCharmSlot) == 0x000028, "Wrong size on CharacterHelper_SetCharmSlot");
static_assert(offsetof(CharacterHelper_SetCharmSlot, playerState) == 0x000000, "Member 'CharacterHelper_SetCharmSlot::playerState' has a wrong offset!");
static_assert(offsetof(CharacterHelper_SetCharmSlot, charmId) == 0x000008, "Member 'CharacterHelper_SetCharmSlot::charmId' has a wrong offset!");
static_assert(offsetof(CharacterHelper_SetCharmSlot, slotIndex) == 0x000014, "Member 'CharacterHelper_SetCharmSlot::slotIndex' has a wrong offset!");
static_assert(offsetof(CharacterHelper_SetCharmSlot, ReturnValue) == 0x000018, "Member 'CharacterHelper_SetCharmSlot::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaDailyRewardsScreen.HandleCurrentActiveDailyRewardStateChanged
// 0x0008 (0x0008 - 0x0000)
struct UMGAtlantaDailyRewardsScreen_HandleCurrentActiveDailyRewardStateChanged final
{
public:
	int32                                         dailyRewardIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         dailyRewardNewState;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaDailyRewardsScreen_HandleCurrentActiveDailyRewardStateChanged) == 0x000004, "Wrong alignment on UMGAtlantaDailyRewardsScreen_HandleCurrentActiveDailyRewardStateChanged");
static_assert(sizeof(UMGAtlantaDailyRewardsScreen_HandleCurrentActiveDailyRewardStateChanged) == 0x000008, "Wrong size on UMGAtlantaDailyRewardsScreen_HandleCurrentActiveDailyRewardStateChanged");
static_assert(offsetof(UMGAtlantaDailyRewardsScreen_HandleCurrentActiveDailyRewardStateChanged, dailyRewardIndex) == 0x000000, "Member 'UMGAtlantaDailyRewardsScreen_HandleCurrentActiveDailyRewardStateChanged::dailyRewardIndex' has a wrong offset!");
static_assert(offsetof(UMGAtlantaDailyRewardsScreen_HandleCurrentActiveDailyRewardStateChanged, dailyRewardNewState) == 0x000004, "Member 'UMGAtlantaDailyRewardsScreen_HandleCurrentActiveDailyRewardStateChanged::dailyRewardNewState' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.AddToInventory
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_AddToInventory final
{
public:
	class ACollectable*                           item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                inventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInventoryComponent_AddToInventory) == 0x000008, "Wrong alignment on CharacterInventoryComponent_AddToInventory");
static_assert(sizeof(CharacterInventoryComponent_AddToInventory) == 0x000010, "Wrong size on CharacterInventoryComponent_AddToInventory");
static_assert(offsetof(CharacterInventoryComponent_AddToInventory, item) == 0x000000, "Member 'CharacterInventoryComponent_AddToInventory::item' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_AddToInventory, inventoryType) == 0x000008, "Member 'CharacterInventoryComponent_AddToInventory::inventoryType' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.Authority_Drop
// 0x0028 (0x0028 - 0x0000)
struct CharacterInventoryComponent_Authority_Drop final
{
public:
	class ACollectable*                           item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rotation;                                          // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          onDeath;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          adjustToGround;                                    // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          dropInChest;                                       // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInventoryComponent_Authority_Drop) == 0x000008, "Wrong alignment on CharacterInventoryComponent_Authority_Drop");
static_assert(sizeof(CharacterInventoryComponent_Authority_Drop) == 0x000028, "Wrong size on CharacterInventoryComponent_Authority_Drop");
static_assert(offsetof(CharacterInventoryComponent_Authority_Drop, item) == 0x000000, "Member 'CharacterInventoryComponent_Authority_Drop::item' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_Authority_Drop, location) == 0x000008, "Member 'CharacterInventoryComponent_Authority_Drop::location' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_Authority_Drop, rotation) == 0x000014, "Member 'CharacterInventoryComponent_Authority_Drop::rotation' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_Authority_Drop, onDeath) == 0x000020, "Member 'CharacterInventoryComponent_Authority_Drop::onDeath' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_Authority_Drop, adjustToGround) == 0x000021, "Member 'CharacterInventoryComponent_Authority_Drop::adjustToGround' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_Authority_Drop, dropInChest) == 0x000022, "Member 'CharacterInventoryComponent_Authority_Drop::dropInChest' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.Collect
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_Collect final
{
public:
	class ACollectable*                           item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                inventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInventoryComponent_Collect) == 0x000008, "Wrong alignment on CharacterInventoryComponent_Collect");
static_assert(sizeof(CharacterInventoryComponent_Collect) == 0x000010, "Wrong size on CharacterInventoryComponent_Collect");
static_assert(offsetof(CharacterInventoryComponent_Collect, item) == 0x000000, "Member 'CharacterInventoryComponent_Collect::item' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_Collect, inventoryType) == 0x000008, "Member 'CharacterInventoryComponent_Collect::inventoryType' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.GetAddons
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_GetAddons final
{
public:
	TArray<class UItemAddon*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_GetAddons) == 0x000008, "Wrong alignment on CharacterInventoryComponent_GetAddons");
static_assert(sizeof(CharacterInventoryComponent_GetAddons) == 0x000010, "Wrong size on CharacterInventoryComponent_GetAddons");
static_assert(offsetof(CharacterInventoryComponent_GetAddons, ReturnValue) == 0x000000, "Member 'CharacterInventoryComponent_GetAddons::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.GetFirstItemFromInventory
// 0x0018 (0x0018 - 0x0000)
struct CharacterInventoryComponent_GetFirstItemFromInventory final
{
public:
	TSubclassOf<class ACollectable>               item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                inventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACollectable*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_GetFirstItemFromInventory) == 0x000008, "Wrong alignment on CharacterInventoryComponent_GetFirstItemFromInventory");
static_assert(sizeof(CharacterInventoryComponent_GetFirstItemFromInventory) == 0x000018, "Wrong size on CharacterInventoryComponent_GetFirstItemFromInventory");
static_assert(offsetof(CharacterInventoryComponent_GetFirstItemFromInventory, item) == 0x000000, "Member 'CharacterInventoryComponent_GetFirstItemFromInventory::item' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_GetFirstItemFromInventory, inventoryType) == 0x000008, "Member 'CharacterInventoryComponent_GetFirstItemFromInventory::inventoryType' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_GetFirstItemFromInventory, ReturnValue) == 0x000010, "Member 'CharacterInventoryComponent_GetFirstItemFromInventory::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.HasInInventory
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_HasInInventory final
{
public:
	TSubclassOf<class ACollectable>               item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                inventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInventoryComponent_HasInInventory) == 0x000008, "Wrong alignment on CharacterInventoryComponent_HasInInventory");
static_assert(sizeof(CharacterInventoryComponent_HasInInventory) == 0x000010, "Wrong size on CharacterInventoryComponent_HasInInventory");
static_assert(offsetof(CharacterInventoryComponent_HasInInventory, item) == 0x000000, "Member 'CharacterInventoryComponent_HasInInventory::item' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_HasInInventory, inventoryType) == 0x000008, "Member 'CharacterInventoryComponent_HasInInventory::inventoryType' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_HasInInventory, ReturnValue) == 0x000009, "Member 'CharacterInventoryComponent_HasInInventory::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.Multicast_AddToInventory
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_Multicast_AddToInventory final
{
public:
	class ACollectable*                           item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                inventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInventoryComponent_Multicast_AddToInventory) == 0x000008, "Wrong alignment on CharacterInventoryComponent_Multicast_AddToInventory");
static_assert(sizeof(CharacterInventoryComponent_Multicast_AddToInventory) == 0x000010, "Wrong size on CharacterInventoryComponent_Multicast_AddToInventory");
static_assert(offsetof(CharacterInventoryComponent_Multicast_AddToInventory, item) == 0x000000, "Member 'CharacterInventoryComponent_Multicast_AddToInventory::item' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_Multicast_AddToInventory, inventoryType) == 0x000008, "Member 'CharacterInventoryComponent_Multicast_AddToInventory::inventoryType' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.Multicast_RemoveFromInventory
// 0x0008 (0x0008 - 0x0000)
struct CharacterInventoryComponent_Multicast_RemoveFromInventory final
{
public:
	class ACollectable*                           item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_Multicast_RemoveFromInventory) == 0x000008, "Wrong alignment on CharacterInventoryComponent_Multicast_RemoveFromInventory");
static_assert(sizeof(CharacterInventoryComponent_Multicast_RemoveFromInventory) == 0x000008, "Wrong size on CharacterInventoryComponent_Multicast_RemoveFromInventory");
static_assert(offsetof(CharacterInventoryComponent_Multicast_RemoveFromInventory, item) == 0x000000, "Member 'CharacterInventoryComponent_Multicast_RemoveFromInventory::item' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.RemoveFromInventory
// 0x0008 (0x0008 - 0x0000)
struct CharacterInventoryComponent_RemoveFromInventory final
{
public:
	class ACollectable*                           item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_RemoveFromInventory) == 0x000008, "Wrong alignment on CharacterInventoryComponent_RemoveFromInventory");
static_assert(sizeof(CharacterInventoryComponent_RemoveFromInventory) == 0x000008, "Wrong size on CharacterInventoryComponent_RemoveFromInventory");
static_assert(offsetof(CharacterInventoryComponent_RemoveFromInventory, item) == 0x000000, "Member 'CharacterInventoryComponent_RemoveFromInventory::item' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.SpawnAndCollectItem
// 0x0018 (0x0018 - 0x0000)
struct CharacterInventoryComponent_SpawnAndCollectItem final
{
public:
	class FName                                   itemID;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACollectable*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_SpawnAndCollectItem) == 0x000008, "Wrong alignment on CharacterInventoryComponent_SpawnAndCollectItem");
static_assert(sizeof(CharacterInventoryComponent_SpawnAndCollectItem) == 0x000018, "Wrong size on CharacterInventoryComponent_SpawnAndCollectItem");
static_assert(offsetof(CharacterInventoryComponent_SpawnAndCollectItem, itemID) == 0x000000, "Member 'CharacterInventoryComponent_SpawnAndCollectItem::itemID' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_SpawnAndCollectItem, ReturnValue) == 0x000010, "Member 'CharacterInventoryComponent_SpawnAndCollectItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.GetItem
// 0x0008 (0x0008 - 0x0000)
struct CharacterInventoryComponent_GetItem final
{
public:
	class ACollectable*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_GetItem) == 0x000008, "Wrong alignment on CharacterInventoryComponent_GetItem");
static_assert(sizeof(CharacterInventoryComponent_GetItem) == 0x000008, "Wrong size on CharacterInventoryComponent_GetItem");
static_assert(offsetof(CharacterInventoryComponent_GetItem, ReturnValue) == 0x000000, "Member 'CharacterInventoryComponent_GetItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.GetItemCount
// 0x0004 (0x0004 - 0x0000)
struct CharacterInventoryComponent_GetItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_GetItemCount) == 0x000004, "Wrong alignment on CharacterInventoryComponent_GetItemCount");
static_assert(sizeof(CharacterInventoryComponent_GetItemCount) == 0x000004, "Wrong size on CharacterInventoryComponent_GetItemCount");
static_assert(offsetof(CharacterInventoryComponent_GetItemCount, ReturnValue) == 0x000000, "Member 'CharacterInventoryComponent_GetItemCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.GetItemCountByID
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_GetItemCountByID final
{
public:
	class FName                                   itemID;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_GetItemCountByID) == 0x000004, "Wrong alignment on CharacterInventoryComponent_GetItemCountByID");
static_assert(sizeof(CharacterInventoryComponent_GetItemCountByID) == 0x000010, "Wrong size on CharacterInventoryComponent_GetItemCountByID");
static_assert(offsetof(CharacterInventoryComponent_GetItemCountByID, itemID) == 0x000000, "Member 'CharacterInventoryComponent_GetItemCountByID::itemID' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_GetItemCountByID, ReturnValue) == 0x00000C, "Member 'CharacterInventoryComponent_GetItemCountByID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.GetItemID
// 0x000C (0x000C - 0x0000)
struct CharacterInventoryComponent_GetItemID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_GetItemID) == 0x000004, "Wrong alignment on CharacterInventoryComponent_GetItemID");
static_assert(sizeof(CharacterInventoryComponent_GetItemID) == 0x00000C, "Wrong size on CharacterInventoryComponent_GetItemID");
static_assert(offsetof(CharacterInventoryComponent_GetItemID, ReturnValue) == 0x000000, "Member 'CharacterInventoryComponent_GetItemID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.HasEquippedItem
// 0x0001 (0x0001 - 0x0000)
struct CharacterInventoryComponent_HasEquippedItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_HasEquippedItem) == 0x000001, "Wrong alignment on CharacterInventoryComponent_HasEquippedItem");
static_assert(sizeof(CharacterInventoryComponent_HasEquippedItem) == 0x000001, "Wrong size on CharacterInventoryComponent_HasEquippedItem");
static_assert(offsetof(CharacterInventoryComponent_HasEquippedItem, ReturnValue) == 0x000000, "Member 'CharacterInventoryComponent_HasEquippedItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.HasItem
// 0x0001 (0x0001 - 0x0000)
struct CharacterInventoryComponent_HasItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_HasItem) == 0x000001, "Wrong alignment on CharacterInventoryComponent_HasItem");
static_assert(sizeof(CharacterInventoryComponent_HasItem) == 0x000001, "Wrong size on CharacterInventoryComponent_HasItem");
static_assert(offsetof(CharacterInventoryComponent_HasItem, ReturnValue) == 0x000000, "Member 'CharacterInventoryComponent_HasItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.HasMaximumItemCount
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_HasMaximumItemCount final
{
public:
	const class ACollectable*                     item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInventoryComponent_HasMaximumItemCount) == 0x000008, "Wrong alignment on CharacterInventoryComponent_HasMaximumItemCount");
static_assert(sizeof(CharacterInventoryComponent_HasMaximumItemCount) == 0x000010, "Wrong size on CharacterInventoryComponent_HasMaximumItemCount");
static_assert(offsetof(CharacterInventoryComponent_HasMaximumItemCount, item) == 0x000000, "Member 'CharacterInventoryComponent_HasMaximumItemCount::item' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_HasMaximumItemCount, ReturnValue) == 0x000008, "Member 'CharacterInventoryComponent_HasMaximumItemCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.HasStoredItem
// 0x0001 (0x0001 - 0x0000)
struct CharacterInventoryComponent_HasStoredItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_HasStoredItem) == 0x000001, "Wrong alignment on CharacterInventoryComponent_HasStoredItem");
static_assert(sizeof(CharacterInventoryComponent_HasStoredItem) == 0x000001, "Wrong size on CharacterInventoryComponent_HasStoredItem");
static_assert(offsetof(CharacterInventoryComponent_HasStoredItem, ReturnValue) == 0x000000, "Member 'CharacterInventoryComponent_HasStoredItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.IsUsingAimItem
// 0x0001 (0x0001 - 0x0000)
struct CharacterInventoryComponent_IsUsingAimItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_IsUsingAimItem) == 0x000001, "Wrong alignment on CharacterInventoryComponent_IsUsingAimItem");
static_assert(sizeof(CharacterInventoryComponent_IsUsingAimItem) == 0x000001, "Wrong size on CharacterInventoryComponent_IsUsingAimItem");
static_assert(offsetof(CharacterInventoryComponent_IsUsingAimItem, ReturnValue) == 0x000000, "Member 'CharacterInventoryComponent_IsUsingAimItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterStatsHandlerComponent.OnGameEvent
// 0x0038 (0x0038 - 0x0000)
struct CharacterStatsHandlerComponent_OnGameEvent final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStatsHandlerComponent_OnGameEvent) == 0x000008, "Wrong alignment on CharacterStatsHandlerComponent_OnGameEvent");
static_assert(sizeof(CharacterStatsHandlerComponent_OnGameEvent) == 0x000038, "Wrong size on CharacterStatsHandlerComponent_OnGameEvent");
static_assert(offsetof(CharacterStatsHandlerComponent_OnGameEvent, gameEventType) == 0x000000, "Member 'CharacterStatsHandlerComponent_OnGameEvent::gameEventType' has a wrong offset!");
static_assert(offsetof(CharacterStatsHandlerComponent_OnGameEvent, gameEventData) == 0x000010, "Member 'CharacterStatsHandlerComponent_OnGameEvent::gameEventData' has a wrong offset!");

// Function DeadByDaylight.CharacterStatsHandlerComponent.ReceiveGameEvent
// 0x0018 (0x0018 - 0x0000)
struct CharacterStatsHandlerComponent_ReceiveGameEvent final
{
public:
	EDBDScoreTypes                                scoreType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStatsHandlerComponent_ReceiveGameEvent) == 0x000008, "Wrong alignment on CharacterStatsHandlerComponent_ReceiveGameEvent");
static_assert(sizeof(CharacterStatsHandlerComponent_ReceiveGameEvent) == 0x000018, "Wrong size on CharacterStatsHandlerComponent_ReceiveGameEvent");
static_assert(offsetof(CharacterStatsHandlerComponent_ReceiveGameEvent, scoreType) == 0x000000, "Member 'CharacterStatsHandlerComponent_ReceiveGameEvent::scoreType' has a wrong offset!");
static_assert(offsetof(CharacterStatsHandlerComponent_ReceiveGameEvent, amount) == 0x000004, "Member 'CharacterStatsHandlerComponent_ReceiveGameEvent::amount' has a wrong offset!");
static_assert(offsetof(CharacterStatsHandlerComponent_ReceiveGameEvent, instigator) == 0x000008, "Member 'CharacterStatsHandlerComponent_ReceiveGameEvent::instigator' has a wrong offset!");
static_assert(offsetof(CharacterStatsHandlerComponent_ReceiveGameEvent, target) == 0x000010, "Member 'CharacterStatsHandlerComponent_ReceiveGameEvent::target' has a wrong offset!");

// Function DeadByDaylight.ScreenSpaceLocationComponent.GetCurrentResolution
// 0x0008 (0x0008 - 0x0000)
struct ScreenSpaceLocationComponent_GetCurrentResolution final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenSpaceLocationComponent_GetCurrentResolution) == 0x000004, "Wrong alignment on ScreenSpaceLocationComponent_GetCurrentResolution");
static_assert(sizeof(ScreenSpaceLocationComponent_GetCurrentResolution) == 0x000008, "Wrong size on ScreenSpaceLocationComponent_GetCurrentResolution");
static_assert(offsetof(ScreenSpaceLocationComponent_GetCurrentResolution, ReturnValue) == 0x000000, "Member 'ScreenSpaceLocationComponent_GetCurrentResolution::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ScreenSpaceLocationComponent.HasValidPosition
// 0x0001 (0x0001 - 0x0000)
struct ScreenSpaceLocationComponent_HasValidPosition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenSpaceLocationComponent_HasValidPosition) == 0x000001, "Wrong alignment on ScreenSpaceLocationComponent_HasValidPosition");
static_assert(sizeof(ScreenSpaceLocationComponent_HasValidPosition) == 0x000001, "Wrong size on ScreenSpaceLocationComponent_HasValidPosition");
static_assert(offsetof(ScreenSpaceLocationComponent_HasValidPosition, ReturnValue) == 0x000000, "Member 'ScreenSpaceLocationComponent_HasValidPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGame_Lobby.DBD_AddBotToLobby
// 0x0090 (0x0090 - 0x0000)
struct DBDGame_Lobby_DBD_AddBotToLobby final
{
public:
	int32                                         selectedCharacter;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 item;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 addon1;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 addon2;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 offering;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 perk1;                                             // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 perk2;                                             // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 perk3;                                             // 0x0068(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 perk4;                                             // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rank;                                              // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGame_Lobby_DBD_AddBotToLobby) == 0x000008, "Wrong alignment on DBDGame_Lobby_DBD_AddBotToLobby");
static_assert(sizeof(DBDGame_Lobby_DBD_AddBotToLobby) == 0x000090, "Wrong size on DBDGame_Lobby_DBD_AddBotToLobby");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, selectedCharacter) == 0x000000, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::selectedCharacter' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, item) == 0x000008, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::item' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, addon1) == 0x000018, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::addon1' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, addon2) == 0x000028, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::addon2' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, offering) == 0x000038, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::offering' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, perk1) == 0x000048, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::perk1' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, perk2) == 0x000058, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::perk2' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, perk3) == 0x000068, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::perk3' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, perk4) == 0x000078, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::perk4' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, rank) == 0x000088, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::rank' has a wrong offset!");

// Function DeadByDaylight.DBDGame_Lobby.DBD_AddBotToLobbyByName
// 0x0098 (0x0098 - 0x0000)
struct DBDGame_Lobby_DBD_AddBotToLobbyByName final
{
public:
	class FString                                 selectedCharacter;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 item;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 addon1;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 addon2;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 offering;                                          // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 perk1;                                             // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 perk2;                                             // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 perk3;                                             // 0x0070(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 perk4;                                             // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rank;                                              // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGame_Lobby_DBD_AddBotToLobbyByName) == 0x000008, "Wrong alignment on DBDGame_Lobby_DBD_AddBotToLobbyByName");
static_assert(sizeof(DBDGame_Lobby_DBD_AddBotToLobbyByName) == 0x000098, "Wrong size on DBDGame_Lobby_DBD_AddBotToLobbyByName");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, selectedCharacter) == 0x000000, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::selectedCharacter' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, item) == 0x000010, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::item' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, addon1) == 0x000020, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::addon1' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, addon2) == 0x000030, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::addon2' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, offering) == 0x000040, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::offering' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, perk1) == 0x000050, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::perk1' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, perk2) == 0x000060, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::perk2' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, perk3) == 0x000070, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::perk3' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, perk4) == 0x000080, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::perk4' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, rank) == 0x000090, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::rank' has a wrong offset!");

// Function DeadByDaylight.DBDGame_Lobby.DBD_AddBotToLobbyNoLoadout
// 0x0004 (0x0004 - 0x0000)
struct DBDGame_Lobby_DBD_AddBotToLobbyNoLoadout final
{
public:
	int32                                         selectedCharacter;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGame_Lobby_DBD_AddBotToLobbyNoLoadout) == 0x000004, "Wrong alignment on DBDGame_Lobby_DBD_AddBotToLobbyNoLoadout");
static_assert(sizeof(DBDGame_Lobby_DBD_AddBotToLobbyNoLoadout) == 0x000004, "Wrong size on DBDGame_Lobby_DBD_AddBotToLobbyNoLoadout");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyNoLoadout, selectedCharacter) == 0x000000, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyNoLoadout::selectedCharacter' has a wrong offset!");

// Function DeadByDaylight.DBDGame_Lobby.DBD_AddBotToLobbyNoLoadoutByName
// 0x0010 (0x0010 - 0x0000)
struct DBDGame_Lobby_DBD_AddBotToLobbyNoLoadoutByName final
{
public:
	class FString                                 selectedCharacter;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGame_Lobby_DBD_AddBotToLobbyNoLoadoutByName) == 0x000008, "Wrong alignment on DBDGame_Lobby_DBD_AddBotToLobbyNoLoadoutByName");
static_assert(sizeof(DBDGame_Lobby_DBD_AddBotToLobbyNoLoadoutByName) == 0x000010, "Wrong size on DBDGame_Lobby_DBD_AddBotToLobbyNoLoadoutByName");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyNoLoadoutByName, selectedCharacter) == 0x000000, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyNoLoadoutByName::selectedCharacter' has a wrong offset!");

// Function DeadByDaylight.DBDGame_Lobby.DBD_FillLobbyWithBotsByName
// 0x0018 (0x0018 - 0x0000)
struct DBDGame_Lobby_DBD_FillLobbyWithBotsByName final
{
public:
	class FString                                 selectedKiller;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rank;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGame_Lobby_DBD_FillLobbyWithBotsByName) == 0x000008, "Wrong alignment on DBDGame_Lobby_DBD_FillLobbyWithBotsByName");
static_assert(sizeof(DBDGame_Lobby_DBD_FillLobbyWithBotsByName) == 0x000018, "Wrong size on DBDGame_Lobby_DBD_FillLobbyWithBotsByName");
static_assert(offsetof(DBDGame_Lobby_DBD_FillLobbyWithBotsByName, selectedKiller) == 0x000000, "Member 'DBDGame_Lobby_DBD_FillLobbyWithBotsByName::selectedKiller' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_FillLobbyWithBotsByName, rank) == 0x000010, "Member 'DBDGame_Lobby_DBD_FillLobbyWithBotsByName::rank' has a wrong offset!");

// Function DeadByDaylight.DBDGame_Lobby.DBD_RemoveBotByIndex
// 0x0004 (0x0004 - 0x0000)
struct DBDGame_Lobby_DBD_RemoveBotByIndex final
{
public:
	int32                                         botIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGame_Lobby_DBD_RemoveBotByIndex) == 0x000004, "Wrong alignment on DBDGame_Lobby_DBD_RemoveBotByIndex");
static_assert(sizeof(DBDGame_Lobby_DBD_RemoveBotByIndex) == 0x000004, "Wrong size on DBDGame_Lobby_DBD_RemoveBotByIndex");
static_assert(offsetof(DBDGame_Lobby_DBD_RemoveBotByIndex, botIndex) == 0x000000, "Member 'DBDGame_Lobby_DBD_RemoveBotByIndex::botIndex' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetCurrentMainSpecialEvent
// 0x0300 (0x0300 - 0x0000)
struct SpecialEventManager_GetCurrentMainSpecialEvent final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCombinedSpecialEventData              outSpecialEventData;                               // 0x0008(0x02F0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x02F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpecialEventManager_GetCurrentMainSpecialEvent) == 0x000008, "Wrong alignment on SpecialEventManager_GetCurrentMainSpecialEvent");
static_assert(sizeof(SpecialEventManager_GetCurrentMainSpecialEvent) == 0x000300, "Wrong size on SpecialEventManager_GetCurrentMainSpecialEvent");
static_assert(offsetof(SpecialEventManager_GetCurrentMainSpecialEvent, worldContextObject) == 0x000000, "Member 'SpecialEventManager_GetCurrentMainSpecialEvent::worldContextObject' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetCurrentMainSpecialEvent, outSpecialEventData) == 0x000008, "Member 'SpecialEventManager_GetCurrentMainSpecialEvent::outSpecialEventData' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetCurrentMainSpecialEvent, ReturnValue) == 0x0002F8, "Member 'SpecialEventManager_GetCurrentMainSpecialEvent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetCurrentSpecialEvent
// 0x0300 (0x0300 - 0x0000)
struct SpecialEventManager_GetCurrentSpecialEvent final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCombinedSpecialEventData              outSpecialEventData;                               // 0x0008(0x02F0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x02F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpecialEventManager_GetCurrentSpecialEvent) == 0x000008, "Wrong alignment on SpecialEventManager_GetCurrentSpecialEvent");
static_assert(sizeof(SpecialEventManager_GetCurrentSpecialEvent) == 0x000300, "Wrong size on SpecialEventManager_GetCurrentSpecialEvent");
static_assert(offsetof(SpecialEventManager_GetCurrentSpecialEvent, worldContextObject) == 0x000000, "Member 'SpecialEventManager_GetCurrentSpecialEvent::worldContextObject' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetCurrentSpecialEvent, outSpecialEventData) == 0x000008, "Member 'SpecialEventManager_GetCurrentSpecialEvent::outSpecialEventData' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetCurrentSpecialEvent, ReturnValue) == 0x0002F8, "Member 'SpecialEventManager_GetCurrentSpecialEvent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetEventMainEndDate
// 0x0020 (0x0020 - 0x0000)
struct SpecialEventManager_GetEventMainEndDate final
{
public:
	class FString                                 eventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              outDate;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpecialEventManager_GetEventMainEndDate) == 0x000008, "Wrong alignment on SpecialEventManager_GetEventMainEndDate");
static_assert(sizeof(SpecialEventManager_GetEventMainEndDate) == 0x000020, "Wrong size on SpecialEventManager_GetEventMainEndDate");
static_assert(offsetof(SpecialEventManager_GetEventMainEndDate, eventId) == 0x000000, "Member 'SpecialEventManager_GetEventMainEndDate::eventId' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetEventMainEndDate, outDate) == 0x000010, "Member 'SpecialEventManager_GetEventMainEndDate::outDate' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetEventMainEndDate, ReturnValue) == 0x000018, "Member 'SpecialEventManager_GetEventMainEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetEventPostEndDate
// 0x0020 (0x0020 - 0x0000)
struct SpecialEventManager_GetEventPostEndDate final
{
public:
	class FString                                 eventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              outDate;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpecialEventManager_GetEventPostEndDate) == 0x000008, "Wrong alignment on SpecialEventManager_GetEventPostEndDate");
static_assert(sizeof(SpecialEventManager_GetEventPostEndDate) == 0x000020, "Wrong size on SpecialEventManager_GetEventPostEndDate");
static_assert(offsetof(SpecialEventManager_GetEventPostEndDate, eventId) == 0x000000, "Member 'SpecialEventManager_GetEventPostEndDate::eventId' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetEventPostEndDate, outDate) == 0x000010, "Member 'SpecialEventManager_GetEventPostEndDate::outDate' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetEventPostEndDate, ReturnValue) == 0x000018, "Member 'SpecialEventManager_GetEventPostEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetEventStartDate
// 0x0020 (0x0020 - 0x0000)
struct SpecialEventManager_GetEventStartDate final
{
public:
	class FString                                 eventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              outDate;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpecialEventManager_GetEventStartDate) == 0x000008, "Wrong alignment on SpecialEventManager_GetEventStartDate");
static_assert(sizeof(SpecialEventManager_GetEventStartDate) == 0x000020, "Wrong size on SpecialEventManager_GetEventStartDate");
static_assert(offsetof(SpecialEventManager_GetEventStartDate, eventId) == 0x000000, "Member 'SpecialEventManager_GetEventStartDate::eventId' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetEventStartDate, outDate) == 0x000010, "Member 'SpecialEventManager_GetEventStartDate::outDate' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetEventStartDate, ReturnValue) == 0x000018, "Member 'SpecialEventManager_GetEventStartDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetEventTimeSinceStartDate
// 0x0020 (0x0020 - 0x0000)
struct SpecialEventManager_GetEventTimeSinceStartDate final
{
public:
	class FString                                 eventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              outDate;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpecialEventManager_GetEventTimeSinceStartDate) == 0x000008, "Wrong alignment on SpecialEventManager_GetEventTimeSinceStartDate");
static_assert(sizeof(SpecialEventManager_GetEventTimeSinceStartDate) == 0x000020, "Wrong size on SpecialEventManager_GetEventTimeSinceStartDate");
static_assert(offsetof(SpecialEventManager_GetEventTimeSinceStartDate, eventId) == 0x000000, "Member 'SpecialEventManager_GetEventTimeSinceStartDate::eventId' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetEventTimeSinceStartDate, outDate) == 0x000010, "Member 'SpecialEventManager_GetEventTimeSinceStartDate::outDate' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetEventTimeSinceStartDate, ReturnValue) == 0x000018, "Member 'SpecialEventManager_GetEventTimeSinceStartDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetEventTimeTillMainEndDate
// 0x0020 (0x0020 - 0x0000)
struct SpecialEventManager_GetEventTimeTillMainEndDate final
{
public:
	class FString                                 eventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              outDate;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpecialEventManager_GetEventTimeTillMainEndDate) == 0x000008, "Wrong alignment on SpecialEventManager_GetEventTimeTillMainEndDate");
static_assert(sizeof(SpecialEventManager_GetEventTimeTillMainEndDate) == 0x000020, "Wrong size on SpecialEventManager_GetEventTimeTillMainEndDate");
static_assert(offsetof(SpecialEventManager_GetEventTimeTillMainEndDate, eventId) == 0x000000, "Member 'SpecialEventManager_GetEventTimeTillMainEndDate::eventId' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetEventTimeTillMainEndDate, outDate) == 0x000010, "Member 'SpecialEventManager_GetEventTimeTillMainEndDate::outDate' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetEventTimeTillMainEndDate, ReturnValue) == 0x000018, "Member 'SpecialEventManager_GetEventTimeTillMainEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetEventTimeTillPostEndDate
// 0x0020 (0x0020 - 0x0000)
struct SpecialEventManager_GetEventTimeTillPostEndDate final
{
public:
	class FString                                 eventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              outDate;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpecialEventManager_GetEventTimeTillPostEndDate) == 0x000008, "Wrong alignment on SpecialEventManager_GetEventTimeTillPostEndDate");
static_assert(sizeof(SpecialEventManager_GetEventTimeTillPostEndDate) == 0x000020, "Wrong size on SpecialEventManager_GetEventTimeTillPostEndDate");
static_assert(offsetof(SpecialEventManager_GetEventTimeTillPostEndDate, eventId) == 0x000000, "Member 'SpecialEventManager_GetEventTimeTillPostEndDate::eventId' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetEventTimeTillPostEndDate, outDate) == 0x000010, "Member 'SpecialEventManager_GetEventTimeTillPostEndDate::outDate' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetEventTimeTillPostEndDate, ReturnValue) == 0x000018, "Member 'SpecialEventManager_GetEventTimeTillPostEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetMainEndDate
// 0x02F8 (0x02F8 - 0x0000)
struct SpecialEventManager_GetMainEndDate final
{
public:
	struct FCombinedSpecialEventData              specialEventData;                                  // 0x0000(0x02F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x02F0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecialEventManager_GetMainEndDate) == 0x000008, "Wrong alignment on SpecialEventManager_GetMainEndDate");
static_assert(sizeof(SpecialEventManager_GetMainEndDate) == 0x0002F8, "Wrong size on SpecialEventManager_GetMainEndDate");
static_assert(offsetof(SpecialEventManager_GetMainEndDate, specialEventData) == 0x000000, "Member 'SpecialEventManager_GetMainEndDate::specialEventData' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetMainEndDate, ReturnValue) == 0x0002F0, "Member 'SpecialEventManager_GetMainEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetPostEndDate
// 0x02F8 (0x02F8 - 0x0000)
struct SpecialEventManager_GetPostEndDate final
{
public:
	struct FCombinedSpecialEventData              specialEventData;                                  // 0x0000(0x02F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x02F0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecialEventManager_GetPostEndDate) == 0x000008, "Wrong alignment on SpecialEventManager_GetPostEndDate");
static_assert(sizeof(SpecialEventManager_GetPostEndDate) == 0x0002F8, "Wrong size on SpecialEventManager_GetPostEndDate");
static_assert(offsetof(SpecialEventManager_GetPostEndDate, specialEventData) == 0x000000, "Member 'SpecialEventManager_GetPostEndDate::specialEventData' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetPostEndDate, ReturnValue) == 0x0002F0, "Member 'SpecialEventManager_GetPostEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetSpecialEvent
// 0x0310 (0x0310 - 0x0000)
struct SpecialEventManager_GetSpecialEvent final
{
public:
	class UObject*                                worldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   eventId;                                           // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCombinedSpecialEventData              outSpecialEventData;                               // 0x0018(0x02F0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0308(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpecialEventManager_GetSpecialEvent) == 0x000008, "Wrong alignment on SpecialEventManager_GetSpecialEvent");
static_assert(sizeof(SpecialEventManager_GetSpecialEvent) == 0x000310, "Wrong size on SpecialEventManager_GetSpecialEvent");
static_assert(offsetof(SpecialEventManager_GetSpecialEvent, worldContextObject) == 0x000000, "Member 'SpecialEventManager_GetSpecialEvent::worldContextObject' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetSpecialEvent, eventId) == 0x000008, "Member 'SpecialEventManager_GetSpecialEvent::eventId' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetSpecialEvent, outSpecialEventData) == 0x000018, "Member 'SpecialEventManager_GetSpecialEvent::outSpecialEventData' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetSpecialEvent, ReturnValue) == 0x000308, "Member 'SpecialEventManager_GetSpecialEvent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetStartDate
// 0x02F8 (0x02F8 - 0x0000)
struct SpecialEventManager_GetStartDate final
{
public:
	struct FCombinedSpecialEventData              specialEventData;                                  // 0x0000(0x02F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x02F0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecialEventManager_GetStartDate) == 0x000008, "Wrong alignment on SpecialEventManager_GetStartDate");
static_assert(sizeof(SpecialEventManager_GetStartDate) == 0x0002F8, "Wrong size on SpecialEventManager_GetStartDate");
static_assert(offsetof(SpecialEventManager_GetStartDate, specialEventData) == 0x000000, "Member 'SpecialEventManager_GetStartDate::specialEventData' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetStartDate, ReturnValue) == 0x0002F0, "Member 'SpecialEventManager_GetStartDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetStatus
// 0x02F8 (0x02F8 - 0x0000)
struct SpecialEventManager_GetStatus final
{
public:
	struct FCombinedSpecialEventData              specialEventData;                                  // 0x0000(0x02F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ESpecialEventStatus                           ReturnValue;                                       // 0x02F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpecialEventManager_GetStatus) == 0x000008, "Wrong alignment on SpecialEventManager_GetStatus");
static_assert(sizeof(SpecialEventManager_GetStatus) == 0x0002F8, "Wrong size on SpecialEventManager_GetStatus");
static_assert(offsetof(SpecialEventManager_GetStatus, specialEventData) == 0x000000, "Member 'SpecialEventManager_GetStatus::specialEventData' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetStatus, ReturnValue) == 0x0002F0, "Member 'SpecialEventManager_GetStatus::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetTimeSinceStartDate
// 0x02F8 (0x02F8 - 0x0000)
struct SpecialEventManager_GetTimeSinceStartDate final
{
public:
	struct FCombinedSpecialEventData              specialEventData;                                  // 0x0000(0x02F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x02F0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecialEventManager_GetTimeSinceStartDate) == 0x000008, "Wrong alignment on SpecialEventManager_GetTimeSinceStartDate");
static_assert(sizeof(SpecialEventManager_GetTimeSinceStartDate) == 0x0002F8, "Wrong size on SpecialEventManager_GetTimeSinceStartDate");
static_assert(offsetof(SpecialEventManager_GetTimeSinceStartDate, specialEventData) == 0x000000, "Member 'SpecialEventManager_GetTimeSinceStartDate::specialEventData' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetTimeSinceStartDate, ReturnValue) == 0x0002F0, "Member 'SpecialEventManager_GetTimeSinceStartDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetTimeTillMainEndDate
// 0x02F8 (0x02F8 - 0x0000)
struct SpecialEventManager_GetTimeTillMainEndDate final
{
public:
	struct FCombinedSpecialEventData              specialEventData;                                  // 0x0000(0x02F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x02F0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecialEventManager_GetTimeTillMainEndDate) == 0x000008, "Wrong alignment on SpecialEventManager_GetTimeTillMainEndDate");
static_assert(sizeof(SpecialEventManager_GetTimeTillMainEndDate) == 0x0002F8, "Wrong size on SpecialEventManager_GetTimeTillMainEndDate");
static_assert(offsetof(SpecialEventManager_GetTimeTillMainEndDate, specialEventData) == 0x000000, "Member 'SpecialEventManager_GetTimeTillMainEndDate::specialEventData' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetTimeTillMainEndDate, ReturnValue) == 0x0002F0, "Member 'SpecialEventManager_GetTimeTillMainEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SpecialEventManager.GetTimeTillPostEndDate
// 0x02F8 (0x02F8 - 0x0000)
struct SpecialEventManager_GetTimeTillPostEndDate final
{
public:
	struct FCombinedSpecialEventData              specialEventData;                                  // 0x0000(0x02F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x02F0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpecialEventManager_GetTimeTillPostEndDate) == 0x000008, "Wrong alignment on SpecialEventManager_GetTimeTillPostEndDate");
static_assert(sizeof(SpecialEventManager_GetTimeTillPostEndDate) == 0x0002F8, "Wrong size on SpecialEventManager_GetTimeTillPostEndDate");
static_assert(offsetof(SpecialEventManager_GetTimeTillPostEndDate, specialEventData) == 0x000000, "Member 'SpecialEventManager_GetTimeTillPostEndDate::specialEventData' has a wrong offset!");
static_assert(offsetof(SpecialEventManager_GetTimeTillPostEndDate, ReturnValue) == 0x0002F0, "Member 'SpecialEventManager_GetTimeTillPostEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterUtilities.GetActorLocationFromFeetLocation
// 0x0020 (0x0020 - 0x0000)
struct CharacterUtilities_GetActorLocationFromFeetLocation final
{
public:
	const class ACharacter*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                feetLocation;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterUtilities_GetActorLocationFromFeetLocation) == 0x000008, "Wrong alignment on CharacterUtilities_GetActorLocationFromFeetLocation");
static_assert(sizeof(CharacterUtilities_GetActorLocationFromFeetLocation) == 0x000020, "Wrong size on CharacterUtilities_GetActorLocationFromFeetLocation");
static_assert(offsetof(CharacterUtilities_GetActorLocationFromFeetLocation, character) == 0x000000, "Member 'CharacterUtilities_GetActorLocationFromFeetLocation::character' has a wrong offset!");
static_assert(offsetof(CharacterUtilities_GetActorLocationFromFeetLocation, feetLocation) == 0x000008, "Member 'CharacterUtilities_GetActorLocationFromFeetLocation::feetLocation' has a wrong offset!");
static_assert(offsetof(CharacterUtilities_GetActorLocationFromFeetLocation, ReturnValue) == 0x000014, "Member 'CharacterUtilities_GetActorLocationFromFeetLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterUtilities.GetFeetPosition
// 0x0018 (0x0018 - 0x0000)
struct CharacterUtilities_GetFeetPosition final
{
public:
	const class ACharacter*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterUtilities_GetFeetPosition) == 0x000008, "Wrong alignment on CharacterUtilities_GetFeetPosition");
static_assert(sizeof(CharacterUtilities_GetFeetPosition) == 0x000018, "Wrong size on CharacterUtilities_GetFeetPosition");
static_assert(offsetof(CharacterUtilities_GetFeetPosition, character) == 0x000000, "Member 'CharacterUtilities_GetFeetPosition::character' has a wrong offset!");
static_assert(offsetof(CharacterUtilities_GetFeetPosition, ReturnValue) == 0x000008, "Member 'CharacterUtilities_GetFeetPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterUtilities.GetFeetPositionAtTargetLocation
// 0x0020 (0x0020 - 0x0000)
struct CharacterUtilities_GetFeetPositionAtTargetLocation final
{
public:
	const class ACharacter*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterUtilities_GetFeetPositionAtTargetLocation) == 0x000008, "Wrong alignment on CharacterUtilities_GetFeetPositionAtTargetLocation");
static_assert(sizeof(CharacterUtilities_GetFeetPositionAtTargetLocation) == 0x000020, "Wrong size on CharacterUtilities_GetFeetPositionAtTargetLocation");
static_assert(offsetof(CharacterUtilities_GetFeetPositionAtTargetLocation, character) == 0x000000, "Member 'CharacterUtilities_GetFeetPositionAtTargetLocation::character' has a wrong offset!");
static_assert(offsetof(CharacterUtilities_GetFeetPositionAtTargetLocation, location) == 0x000008, "Member 'CharacterUtilities_GetFeetPositionAtTargetLocation::location' has a wrong offset!");
static_assert(offsetof(CharacterUtilities_GetFeetPositionAtTargetLocation, ReturnValue) == 0x000014, "Member 'CharacterUtilities_GetFeetPositionAtTargetLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SelectiveVisibilityComponent.Local_SetVisibility
// 0x0002 (0x0002 - 0x0000)
struct SelectiveVisibilityComponent_Local_SetVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectiveVisibilityComponent_Local_SetVisibility) == 0x000001, "Wrong alignment on SelectiveVisibilityComponent_Local_SetVisibility");
static_assert(sizeof(SelectiveVisibilityComponent_Local_SetVisibility) == 0x000002, "Wrong size on SelectiveVisibilityComponent_Local_SetVisibility");
static_assert(offsetof(SelectiveVisibilityComponent_Local_SetVisibility, bNewVisibility) == 0x000000, "Member 'SelectiveVisibilityComponent_Local_SetVisibility::bNewVisibility' has a wrong offset!");
static_assert(offsetof(SelectiveVisibilityComponent_Local_SetVisibility, bPropagateToChildren) == 0x000001, "Member 'SelectiveVisibilityComponent_Local_SetVisibility::bPropagateToChildren' has a wrong offset!");

// Function DeadByDaylight.DBDGameFlowUtilities.TriggerUIFlowEvent
// 0x0010 (0x0010 - 0x0000)
struct DBDGameFlowUtilities_TriggerUIFlowEvent final
{
public:
	class UObject*                                worldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIFlowEvent                                  uiFlowEvent;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameFlowUtilities_TriggerUIFlowEvent) == 0x000008, "Wrong alignment on DBDGameFlowUtilities_TriggerUIFlowEvent");
static_assert(sizeof(DBDGameFlowUtilities_TriggerUIFlowEvent) == 0x000010, "Wrong size on DBDGameFlowUtilities_TriggerUIFlowEvent");
static_assert(offsetof(DBDGameFlowUtilities_TriggerUIFlowEvent, worldContextObject) == 0x000000, "Member 'DBDGameFlowUtilities_TriggerUIFlowEvent::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDGameFlowUtilities_TriggerUIFlowEvent, uiFlowEvent) == 0x000008, "Member 'DBDGameFlowUtilities_TriggerUIFlowEvent::uiFlowEvent' has a wrong offset!");

// Function DeadByDaylight.DBDGameFlowUtilities.TriggerWorldFlowEvent
// 0x0010 (0x0010 - 0x0000)
struct DBDGameFlowUtilities_TriggerWorldFlowEvent final
{
public:
	class UObject*                                worldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorldFlowEvent                               worldFlowEvent;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameFlowUtilities_TriggerWorldFlowEvent) == 0x000008, "Wrong alignment on DBDGameFlowUtilities_TriggerWorldFlowEvent");
static_assert(sizeof(DBDGameFlowUtilities_TriggerWorldFlowEvent) == 0x000010, "Wrong size on DBDGameFlowUtilities_TriggerWorldFlowEvent");
static_assert(offsetof(DBDGameFlowUtilities_TriggerWorldFlowEvent, worldContextObject) == 0x000000, "Member 'DBDGameFlowUtilities_TriggerWorldFlowEvent::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDGameFlowUtilities_TriggerWorldFlowEvent, worldFlowEvent) == 0x000008, "Member 'DBDGameFlowUtilities_TriggerWorldFlowEvent::worldFlowEvent' has a wrong offset!");

// Function DeadByDaylight.ChargedAttackStateComponent.SetChargingPercent
// 0x0004 (0x0004 - 0x0000)
struct ChargedAttackStateComponent_SetChargingPercent final
{
public:
	float                                         chargePercent;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargedAttackStateComponent_SetChargingPercent) == 0x000004, "Wrong alignment on ChargedAttackStateComponent_SetChargingPercent");
static_assert(sizeof(ChargedAttackStateComponent_SetChargingPercent) == 0x000004, "Wrong size on ChargedAttackStateComponent_SetChargingPercent");
static_assert(offsetof(ChargedAttackStateComponent_SetChargingPercent, chargePercent) == 0x000000, "Member 'ChargedAttackStateComponent_SetChargingPercent::chargePercent' has a wrong offset!");

// Function DeadByDaylight.ChargedAttackStateComponent.SetIsCharging
// 0x0001 (0x0001 - 0x0000)
struct ChargedAttackStateComponent_SetIsCharging final
{
public:
	bool                                          isCharging;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargedAttackStateComponent_SetIsCharging) == 0x000001, "Wrong alignment on ChargedAttackStateComponent_SetIsCharging");
static_assert(sizeof(ChargedAttackStateComponent_SetIsCharging) == 0x000001, "Wrong size on ChargedAttackStateComponent_SetIsCharging");
static_assert(offsetof(ChargedAttackStateComponent_SetIsCharging, isCharging) == 0x000000, "Member 'ChargedAttackStateComponent_SetIsCharging::isCharging' has a wrong offset!");

// Function DeadByDaylight.ChargedAttackStateComponent.GetChargingPercent
// 0x0004 (0x0004 - 0x0000)
struct ChargedAttackStateComponent_GetChargingPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargedAttackStateComponent_GetChargingPercent) == 0x000004, "Wrong alignment on ChargedAttackStateComponent_GetChargingPercent");
static_assert(sizeof(ChargedAttackStateComponent_GetChargingPercent) == 0x000004, "Wrong size on ChargedAttackStateComponent_GetChargingPercent");
static_assert(offsetof(ChargedAttackStateComponent_GetChargingPercent, ReturnValue) == 0x000000, "Member 'ChargedAttackStateComponent_GetChargingPercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargedAttackStateComponent.GetIsCharging
// 0x0001 (0x0001 - 0x0000)
struct ChargedAttackStateComponent_GetIsCharging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargedAttackStateComponent_GetIsCharging) == 0x000001, "Wrong alignment on ChargedAttackStateComponent_GetIsCharging");
static_assert(sizeof(ChargedAttackStateComponent_GetIsCharging) == 0x000001, "Wrong size on ChargedAttackStateComponent_GetIsCharging");
static_assert(offsetof(ChargedAttackStateComponent_GetIsCharging, ReturnValue) == 0x000000, "Member 'ChargedAttackStateComponent_GetIsCharging::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.OnRep_EnergyLevel
// 0x0004 (0x0004 - 0x0000)
struct ChargerComponent_OnRep_EnergyLevel final
{
public:
	float                                         previousEnergyLevel;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_OnRep_EnergyLevel) == 0x000004, "Wrong alignment on ChargerComponent_OnRep_EnergyLevel");
static_assert(sizeof(ChargerComponent_OnRep_EnergyLevel) == 0x000004, "Wrong size on ChargerComponent_OnRep_EnergyLevel");
static_assert(offsetof(ChargerComponent_OnRep_EnergyLevel, previousEnergyLevel) == 0x000000, "Member 'ChargerComponent_OnRep_EnergyLevel::previousEnergyLevel' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.SetEnergyLevel
// 0x0004 (0x0004 - 0x0000)
struct ChargerComponent_SetEnergyLevel final
{
public:
	float                                         energyLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_SetEnergyLevel) == 0x000004, "Wrong alignment on ChargerComponent_SetEnergyLevel");
static_assert(sizeof(ChargerComponent_SetEnergyLevel) == 0x000004, "Wrong size on ChargerComponent_SetEnergyLevel");
static_assert(offsetof(ChargerComponent_SetEnergyLevel, energyLevel) == 0x000000, "Member 'ChargerComponent_SetEnergyLevel::energyLevel' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.SetMaxEnergyLevel
// 0x0004 (0x0004 - 0x0000)
struct ChargerComponent_SetMaxEnergyLevel final
{
public:
	float                                         energyLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_SetMaxEnergyLevel) == 0x000004, "Wrong alignment on ChargerComponent_SetMaxEnergyLevel");
static_assert(sizeof(ChargerComponent_SetMaxEnergyLevel) == 0x000004, "Wrong size on ChargerComponent_SetMaxEnergyLevel");
static_assert(offsetof(ChargerComponent_SetMaxEnergyLevel, energyLevel) == 0x000000, "Member 'ChargerComponent_SetMaxEnergyLevel::energyLevel' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.SetNormalizedEnergyLevel
// 0x0004 (0x0004 - 0x0000)
struct ChargerComponent_SetNormalizedEnergyLevel final
{
public:
	float                                         energyLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_SetNormalizedEnergyLevel) == 0x000004, "Wrong alignment on ChargerComponent_SetNormalizedEnergyLevel");
static_assert(sizeof(ChargerComponent_SetNormalizedEnergyLevel) == 0x000004, "Wrong size on ChargerComponent_SetNormalizedEnergyLevel");
static_assert(offsetof(ChargerComponent_SetNormalizedEnergyLevel, energyLevel) == 0x000000, "Member 'ChargerComponent_SetNormalizedEnergyLevel::energyLevel' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.UseEnergy
// 0x0008 (0x0008 - 0x0000)
struct ChargerComponent_UseEnergy final
{
public:
	float                                         seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         energyUseModifier;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_UseEnergy) == 0x000004, "Wrong alignment on ChargerComponent_UseEnergy");
static_assert(sizeof(ChargerComponent_UseEnergy) == 0x000008, "Wrong size on ChargerComponent_UseEnergy");
static_assert(offsetof(ChargerComponent_UseEnergy, seconds) == 0x000000, "Member 'ChargerComponent_UseEnergy::seconds' has a wrong offset!");
static_assert(offsetof(ChargerComponent_UseEnergy, energyUseModifier) == 0x000004, "Member 'ChargerComponent_UseEnergy::energyUseModifier' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.GetEnergyLevel
// 0x0004 (0x0004 - 0x0000)
struct ChargerComponent_GetEnergyLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_GetEnergyLevel) == 0x000004, "Wrong alignment on ChargerComponent_GetEnergyLevel");
static_assert(sizeof(ChargerComponent_GetEnergyLevel) == 0x000004, "Wrong size on ChargerComponent_GetEnergyLevel");
static_assert(offsetof(ChargerComponent_GetEnergyLevel, ReturnValue) == 0x000000, "Member 'ChargerComponent_GetEnergyLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.GetMaxEnergyLevel
// 0x0004 (0x0004 - 0x0000)
struct ChargerComponent_GetMaxEnergyLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_GetMaxEnergyLevel) == 0x000004, "Wrong alignment on ChargerComponent_GetMaxEnergyLevel");
static_assert(sizeof(ChargerComponent_GetMaxEnergyLevel) == 0x000004, "Wrong size on ChargerComponent_GetMaxEnergyLevel");
static_assert(offsetof(ChargerComponent_GetMaxEnergyLevel, ReturnValue) == 0x000000, "Member 'ChargerComponent_GetMaxEnergyLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.GetNormalizedEnergyLevel
// 0x0004 (0x0004 - 0x0000)
struct ChargerComponent_GetNormalizedEnergyLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_GetNormalizedEnergyLevel) == 0x000004, "Wrong alignment on ChargerComponent_GetNormalizedEnergyLevel");
static_assert(sizeof(ChargerComponent_GetNormalizedEnergyLevel) == 0x000004, "Wrong size on ChargerComponent_GetNormalizedEnergyLevel");
static_assert(offsetof(ChargerComponent_GetNormalizedEnergyLevel, ReturnValue) == 0x000000, "Member 'ChargerComponent_GetNormalizedEnergyLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.HasCharge
// 0x0001 (0x0001 - 0x0000)
struct ChargerComponent_HasCharge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_HasCharge) == 0x000001, "Wrong alignment on ChargerComponent_HasCharge");
static_assert(sizeof(ChargerComponent_HasCharge) == 0x000001, "Wrong size on ChargerComponent_HasCharge");
static_assert(offsetof(ChargerComponent_HasCharge, ReturnValue) == 0x000000, "Member 'ChargerComponent_HasCharge::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharmAttacher.GetActorAttachedOn
// 0x0008 (0x0008 - 0x0000)
struct CharmAttacher_GetActorAttachedOn final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharmAttacher_GetActorAttachedOn) == 0x000008, "Wrong alignment on CharmAttacher_GetActorAttachedOn");
static_assert(sizeof(CharmAttacher_GetActorAttachedOn) == 0x000008, "Wrong size on CharmAttacher_GetActorAttachedOn");
static_assert(offsetof(CharmAttacher_GetActorAttachedOn, ReturnValue) == 0x000000, "Member 'CharmAttacher_GetActorAttachedOn::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharmAttacher.GetAnimationTweak
// 0x0020 (0x0020 - 0x0000)
struct CharmAttacher_GetAnimationTweak final
{
public:
	struct FCharmAttacherAnimationTweak           ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharmAttacher_GetAnimationTweak) == 0x000004, "Wrong alignment on CharmAttacher_GetAnimationTweak");
static_assert(sizeof(CharmAttacher_GetAnimationTweak) == 0x000020, "Wrong size on CharmAttacher_GetAnimationTweak");
static_assert(offsetof(CharmAttacher_GetAnimationTweak, ReturnValue) == 0x000000, "Member 'CharmAttacher_GetAnimationTweak::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharmAttacher.GetAttachedCharm
// 0x0008 (0x0008 - 0x0000)
struct CharmAttacher_GetAttachedCharm final
{
public:
	class ACharm*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharmAttacher_GetAttachedCharm) == 0x000008, "Wrong alignment on CharmAttacher_GetAttachedCharm");
static_assert(sizeof(CharmAttacher_GetAttachedCharm) == 0x000008, "Wrong size on CharmAttacher_GetAttachedCharm");
static_assert(offsetof(CharmAttacher_GetAttachedCharm, ReturnValue) == 0x000000, "Member 'CharmAttacher_GetAttachedCharm::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharmAttacher.GetSkeletalMeshComponentAttachedOn
// 0x0008 (0x0008 - 0x0000)
struct CharmAttacher_GetSkeletalMeshComponentAttachedOn final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharmAttacher_GetSkeletalMeshComponentAttachedOn) == 0x000008, "Wrong alignment on CharmAttacher_GetSkeletalMeshComponentAttachedOn");
static_assert(sizeof(CharmAttacher_GetSkeletalMeshComponentAttachedOn) == 0x000008, "Wrong size on CharmAttacher_GetSkeletalMeshComponentAttachedOn");
static_assert(offsetof(CharmAttacher_GetSkeletalMeshComponentAttachedOn, ReturnValue) == 0x000000, "Member 'CharmAttacher_GetSkeletalMeshComponentAttachedOn::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharmSpawnerComponent.ReplaceCharmTextures
// 0x0010 (0x0010 - 0x0000)
struct CharmSpawnerComponent_ReplaceCharmTextures final
{
public:
	TArray<struct FCharmIdSlot>                   customization;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharmSpawnerComponent_ReplaceCharmTextures) == 0x000008, "Wrong alignment on CharmSpawnerComponent_ReplaceCharmTextures");
static_assert(sizeof(CharmSpawnerComponent_ReplaceCharmTextures) == 0x000010, "Wrong size on CharmSpawnerComponent_ReplaceCharmTextures");
static_assert(offsetof(CharmSpawnerComponent_ReplaceCharmTextures, customization) == 0x000000, "Member 'CharmSpawnerComponent_ReplaceCharmTextures::customization' has a wrong offset!");

// Function DeadByDaylight.ChaseComponent.IsInChase
// 0x0001 (0x0001 - 0x0000)
struct ChaseComponent_IsInChase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaseComponent_IsInChase) == 0x000001, "Wrong alignment on ChaseComponent_IsInChase");
static_assert(sizeof(ChaseComponent_IsInChase) == 0x000001, "Wrong size on ChaseComponent_IsInChase");
static_assert(offsetof(ChaseComponent_IsInChase, ReturnValue) == 0x000000, "Member 'ChaseComponent_IsInChase::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TallyScreen.OnPlayerInfoClick
// 0x0010 (0x0010 - 0x0000)
struct TallyScreen_OnPlayerInfoClick final
{
public:
	class FString                                 playerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyScreen_OnPlayerInfoClick) == 0x000008, "Wrong alignment on TallyScreen_OnPlayerInfoClick");
static_assert(sizeof(TallyScreen_OnPlayerInfoClick) == 0x000010, "Wrong size on TallyScreen_OnPlayerInfoClick");
static_assert(offsetof(TallyScreen_OnPlayerInfoClick, playerId) == 0x000000, "Member 'TallyScreen_OnPlayerInfoClick::playerId' has a wrong offset!");

// Function DeadByDaylight.TallyScreen.OnPlayerOptionClick
// 0x0028 (0x0028 - 0x0000)
struct TallyScreen_OnPlayerOptionClick final
{
public:
	class FString                                 krakenId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 playerId;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         option;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TallyScreen_OnPlayerOptionClick) == 0x000008, "Wrong alignment on TallyScreen_OnPlayerOptionClick");
static_assert(sizeof(TallyScreen_OnPlayerOptionClick) == 0x000028, "Wrong size on TallyScreen_OnPlayerOptionClick");
static_assert(offsetof(TallyScreen_OnPlayerOptionClick, krakenId) == 0x000000, "Member 'TallyScreen_OnPlayerOptionClick::krakenId' has a wrong offset!");
static_assert(offsetof(TallyScreen_OnPlayerOptionClick, playerId) == 0x000010, "Member 'TallyScreen_OnPlayerOptionClick::playerId' has a wrong offset!");
static_assert(offsetof(TallyScreen_OnPlayerOptionClick, option) == 0x000020, "Member 'TallyScreen_OnPlayerOptionClick::option' has a wrong offset!");

// Function DeadByDaylight.TallyScreen.OnRateMatch
// 0x0004 (0x0004 - 0x0000)
struct TallyScreen_OnRateMatch final
{
public:
	int32                                         rateValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyScreen_OnRateMatch) == 0x000004, "Wrong alignment on TallyScreen_OnRateMatch");
static_assert(sizeof(TallyScreen_OnRateMatch) == 0x000004, "Wrong size on TallyScreen_OnRateMatch");
static_assert(offsetof(TallyScreen_OnRateMatch, rateValue) == 0x000000, "Member 'TallyScreen_OnRateMatch::rateValue' has a wrong offset!");

// Function DeadByDaylight.TallyScreen.OnReportPlayerButtonClick
// 0x0010 (0x0010 - 0x0000)
struct TallyScreen_OnReportPlayerButtonClick final
{
public:
	class FString                                 playerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyScreen_OnReportPlayerButtonClick) == 0x000008, "Wrong alignment on TallyScreen_OnReportPlayerButtonClick");
static_assert(sizeof(TallyScreen_OnReportPlayerButtonClick) == 0x000010, "Wrong size on TallyScreen_OnReportPlayerButtonClick");
static_assert(offsetof(TallyScreen_OnReportPlayerButtonClick, playerId) == 0x000000, "Member 'TallyScreen_OnReportPlayerButtonClick::playerId' has a wrong offset!");

// Function DeadByDaylight.ChaseeCharacterComponent.Authority_OnGeneratorPercentChanged
// 0x0010 (0x0010 - 0x0000)
struct ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged final
{
public:
	class UChargeableComponent*                   chargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         percentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         totalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged) == 0x000008, "Wrong alignment on ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged");
static_assert(sizeof(ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged) == 0x000010, "Wrong size on ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged");
static_assert(offsetof(ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged, chargeableComponent) == 0x000000, "Member 'ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged::chargeableComponent' has a wrong offset!");
static_assert(offsetof(ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged, percentCompletionChange) == 0x000008, "Member 'ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged::percentCompletionChange' has a wrong offset!");
static_assert(offsetof(ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged, totalPercentComplete) == 0x00000C, "Member 'ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged::totalPercentComplete' has a wrong offset!");

// Function DeadByDaylight.ChaserCharacterComponent.Authority_OnChaseTargetFound
// 0x0008 (0x0008 - 0x0000)
struct ChaserCharacterComponent_Authority_OnChaseTargetFound final
{
public:
	class APawn*                                  pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaserCharacterComponent_Authority_OnChaseTargetFound) == 0x000008, "Wrong alignment on ChaserCharacterComponent_Authority_OnChaseTargetFound");
static_assert(sizeof(ChaserCharacterComponent_Authority_OnChaseTargetFound) == 0x000008, "Wrong size on ChaserCharacterComponent_Authority_OnChaseTargetFound");
static_assert(offsetof(ChaserCharacterComponent_Authority_OnChaseTargetFound, pawn) == 0x000000, "Member 'ChaserCharacterComponent_Authority_OnChaseTargetFound::pawn' has a wrong offset!");

// Function DeadByDaylight.ChaserCharacterComponent.Multicast_OnChaseEnd
// 0x0050 (0x0050 - 0x0000)
struct ChaserCharacterComponent_Multicast_OnChaseEnd final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChaseUpdateInfo                       chaseUpdateInfo;                                   // 0x0008(0x0048)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaserCharacterComponent_Multicast_OnChaseEnd) == 0x000008, "Wrong alignment on ChaserCharacterComponent_Multicast_OnChaseEnd");
static_assert(sizeof(ChaserCharacterComponent_Multicast_OnChaseEnd) == 0x000050, "Wrong size on ChaserCharacterComponent_Multicast_OnChaseEnd");
static_assert(offsetof(ChaserCharacterComponent_Multicast_OnChaseEnd, survivor) == 0x000000, "Member 'ChaserCharacterComponent_Multicast_OnChaseEnd::survivor' has a wrong offset!");
static_assert(offsetof(ChaserCharacterComponent_Multicast_OnChaseEnd, chaseUpdateInfo) == 0x000008, "Member 'ChaserCharacterComponent_Multicast_OnChaseEnd::chaseUpdateInfo' has a wrong offset!");

// Function DeadByDaylight.ChaserCharacterComponent.Multicast_OnChaseStart
// 0x0008 (0x0008 - 0x0000)
struct ChaserCharacterComponent_Multicast_OnChaseStart final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaserCharacterComponent_Multicast_OnChaseStart) == 0x000008, "Wrong alignment on ChaserCharacterComponent_Multicast_OnChaseStart");
static_assert(sizeof(ChaserCharacterComponent_Multicast_OnChaseStart) == 0x000008, "Wrong size on ChaserCharacterComponent_Multicast_OnChaseStart");
static_assert(offsetof(ChaserCharacterComponent_Multicast_OnChaseStart, survivor) == 0x000000, "Member 'ChaserCharacterComponent_Multicast_OnChaseStart::survivor' has a wrong offset!");

// Function DeadByDaylight.ChaserCharacterComponent.OnKillerLocallyObservedChanged
// 0x0001 (0x0001 - 0x0000)
struct ChaserCharacterComponent_OnKillerLocallyObservedChanged final
{
public:
	bool                                          locallyObserved;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaserCharacterComponent_OnKillerLocallyObservedChanged) == 0x000001, "Wrong alignment on ChaserCharacterComponent_OnKillerLocallyObservedChanged");
static_assert(sizeof(ChaserCharacterComponent_OnKillerLocallyObservedChanged) == 0x000001, "Wrong size on ChaserCharacterComponent_OnKillerLocallyObservedChanged");
static_assert(offsetof(ChaserCharacterComponent_OnKillerLocallyObservedChanged, locallyObserved) == 0x000000, "Member 'ChaserCharacterComponent_OnKillerLocallyObservedChanged::locallyObserved' has a wrong offset!");

// Function DeadByDaylight.ChatManager.Multicast_DisplayMessage
// 0x0038 (0x0038 - 0x0000)
struct ChatManager_Multicast_DisplayMessage final
{
public:
	class FString                                 chatIdentifier;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         playerIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 mirrorsId;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 msg;                                               // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatManager_Multicast_DisplayMessage) == 0x000008, "Wrong alignment on ChatManager_Multicast_DisplayMessage");
static_assert(sizeof(ChatManager_Multicast_DisplayMessage) == 0x000038, "Wrong size on ChatManager_Multicast_DisplayMessage");
static_assert(offsetof(ChatManager_Multicast_DisplayMessage, chatIdentifier) == 0x000000, "Member 'ChatManager_Multicast_DisplayMessage::chatIdentifier' has a wrong offset!");
static_assert(offsetof(ChatManager_Multicast_DisplayMessage, playerIndex) == 0x000010, "Member 'ChatManager_Multicast_DisplayMessage::playerIndex' has a wrong offset!");
static_assert(offsetof(ChatManager_Multicast_DisplayMessage, mirrorsId) == 0x000018, "Member 'ChatManager_Multicast_DisplayMessage::mirrorsId' has a wrong offset!");
static_assert(offsetof(ChatManager_Multicast_DisplayMessage, msg) == 0x000028, "Member 'ChatManager_Multicast_DisplayMessage::msg' has a wrong offset!");

// Function DeadByDaylight.CinematicManager.GetNextCinematicToPlay
// 0x0058 (0x0058 - 0x0000)
struct CinematicManager_GetNextCinematicToPlay final
{
public:
	struct FCinematic                             ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicManager_GetNextCinematicToPlay) == 0x000008, "Wrong alignment on CinematicManager_GetNextCinematicToPlay");
static_assert(sizeof(CinematicManager_GetNextCinematicToPlay) == 0x000058, "Wrong size on CinematicManager_GetNextCinematicToPlay");
static_assert(offsetof(CinematicManager_GetNextCinematicToPlay, ReturnValue) == 0x000000, "Member 'CinematicManager_GetNextCinematicToPlay::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CinematicManager.PlayMultiple
// 0x0010 (0x0010 - 0x0000)
struct CinematicManager_PlayMultiple final
{
public:
	TArray<struct FCinematic>                     cinematics;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicManager_PlayMultiple) == 0x000008, "Wrong alignment on CinematicManager_PlayMultiple");
static_assert(sizeof(CinematicManager_PlayMultiple) == 0x000010, "Wrong size on CinematicManager_PlayMultiple");
static_assert(offsetof(CinematicManager_PlayMultiple, cinematics) == 0x000000, "Member 'CinematicManager_PlayMultiple::cinematics' has a wrong offset!");

// Function DeadByDaylight.CinematicManager.PlaySingle
// 0x0058 (0x0058 - 0x0000)
struct CinematicManager_PlaySingle final
{
public:
	struct FCinematic                             cinematic;                                         // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicManager_PlaySingle) == 0x000008, "Wrong alignment on CinematicManager_PlaySingle");
static_assert(sizeof(CinematicManager_PlaySingle) == 0x000058, "Wrong size on CinematicManager_PlaySingle");
static_assert(offsetof(CinematicManager_PlaySingle, cinematic) == 0x000000, "Member 'CinematicManager_PlaySingle::cinematic' has a wrong offset!");

// Function DeadByDaylight.CinematicManager.HasCinematicToPlay
// 0x0001 (0x0001 - 0x0000)
struct CinematicManager_HasCinematicToPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicManager_HasCinematicToPlay) == 0x000001, "Wrong alignment on CinematicManager_HasCinematicToPlay");
static_assert(sizeof(CinematicManager_HasCinematicToPlay) == 0x000001, "Wrong size on CinematicManager_HasCinematicToPlay");
static_assert(offsetof(CinematicManager_HasCinematicToPlay, ReturnValue) == 0x000000, "Member 'CinematicManager_HasCinematicToPlay::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ClipManager.SphericalDissolveAt
// 0x0010 (0x0010 - 0x0000)
struct ClipManager_SphericalDissolveAt final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClipManager_SphericalDissolveAt) == 0x000004, "Wrong alignment on ClipManager_SphericalDissolveAt");
static_assert(sizeof(ClipManager_SphericalDissolveAt) == 0x000010, "Wrong size on ClipManager_SphericalDissolveAt");
static_assert(offsetof(ClipManager_SphericalDissolveAt, Location) == 0x000000, "Member 'ClipManager_SphericalDissolveAt::Location' has a wrong offset!");
static_assert(offsetof(ClipManager_SphericalDissolveAt, radius) == 0x00000C, "Member 'ClipManager_SphericalDissolveAt::radius' has a wrong offset!");

// Function DeadByDaylight.CombinedSpecialEventDataUtilities.GetObjectOutlineColour
// 0x02F8 (0x02F8 - 0x0000)
struct CombinedSpecialEventDataUtilities_GetObjectOutlineColour final
{
public:
	struct FCombinedSpecialEventData              data;                                              // 0x0000(0x02F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x02F0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CombinedSpecialEventDataUtilities_GetObjectOutlineColour) == 0x000008, "Wrong alignment on CombinedSpecialEventDataUtilities_GetObjectOutlineColour");
static_assert(sizeof(CombinedSpecialEventDataUtilities_GetObjectOutlineColour) == 0x0002F8, "Wrong size on CombinedSpecialEventDataUtilities_GetObjectOutlineColour");
static_assert(offsetof(CombinedSpecialEventDataUtilities_GetObjectOutlineColour, data) == 0x000000, "Member 'CombinedSpecialEventDataUtilities_GetObjectOutlineColour::data' has a wrong offset!");
static_assert(offsetof(CombinedSpecialEventDataUtilities_GetObjectOutlineColour, ReturnValue) == 0x0002F0, "Member 'CombinedSpecialEventDataUtilities_GetObjectOutlineColour::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CombinedSpecialEventDataUtilities.GetSpecialMusicState
// 0x0300 (0x0300 - 0x0000)
struct CombinedSpecialEventDataUtilities_GetSpecialMusicState final
{
public:
	struct FCombinedSpecialEventData              data;                                              // 0x0000(0x02F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x02F0(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CombinedSpecialEventDataUtilities_GetSpecialMusicState) == 0x000008, "Wrong alignment on CombinedSpecialEventDataUtilities_GetSpecialMusicState");
static_assert(sizeof(CombinedSpecialEventDataUtilities_GetSpecialMusicState) == 0x000300, "Wrong size on CombinedSpecialEventDataUtilities_GetSpecialMusicState");
static_assert(offsetof(CombinedSpecialEventDataUtilities_GetSpecialMusicState, data) == 0x000000, "Member 'CombinedSpecialEventDataUtilities_GetSpecialMusicState::data' has a wrong offset!");
static_assert(offsetof(CombinedSpecialEventDataUtilities_GetSpecialMusicState, ReturnValue) == 0x0002F0, "Member 'CombinedSpecialEventDataUtilities_GetSpecialMusicState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ConstrainAspectRatioComponent.DBD_ToggleBlackBars
// 0x0004 (0x0004 - 0x0000)
struct ConstrainAspectRatioComponent_DBD_ToggleBlackBars final
{
public:
	int32                                         option;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConstrainAspectRatioComponent_DBD_ToggleBlackBars) == 0x000004, "Wrong alignment on ConstrainAspectRatioComponent_DBD_ToggleBlackBars");
static_assert(sizeof(ConstrainAspectRatioComponent_DBD_ToggleBlackBars) == 0x000004, "Wrong size on ConstrainAspectRatioComponent_DBD_ToggleBlackBars");
static_assert(offsetof(ConstrainAspectRatioComponent_DBD_ToggleBlackBars, option) == 0x000000, "Member 'ConstrainAspectRatioComponent_DBD_ToggleBlackBars::option' has a wrong offset!");

// Function DeadByDaylight.ConstrainAspectRatioComponent.SetCinematicMode
// 0x0001 (0x0001 - 0x0000)
struct ConstrainAspectRatioComponent_SetCinematicMode final
{
public:
	bool                                          cinematicMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConstrainAspectRatioComponent_SetCinematicMode) == 0x000001, "Wrong alignment on ConstrainAspectRatioComponent_SetCinematicMode");
static_assert(sizeof(ConstrainAspectRatioComponent_SetCinematicMode) == 0x000001, "Wrong size on ConstrainAspectRatioComponent_SetCinematicMode");
static_assert(offsetof(ConstrainAspectRatioComponent_SetCinematicMode, cinematicMode) == 0x000000, "Member 'ConstrainAspectRatioComponent_SetCinematicMode::cinematicMode' has a wrong offset!");

// Function DeadByDaylight.ConstrainAspectRatioComponent.GetCameraConstrainedViewSize
// 0x0008 (0x0008 - 0x0000)
struct ConstrainAspectRatioComponent_GetCameraConstrainedViewSize final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConstrainAspectRatioComponent_GetCameraConstrainedViewSize) == 0x000004, "Wrong alignment on ConstrainAspectRatioComponent_GetCameraConstrainedViewSize");
static_assert(sizeof(ConstrainAspectRatioComponent_GetCameraConstrainedViewSize) == 0x000008, "Wrong size on ConstrainAspectRatioComponent_GetCameraConstrainedViewSize");
static_assert(offsetof(ConstrainAspectRatioComponent_GetCameraConstrainedViewSize, ReturnValue) == 0x000000, "Member 'ConstrainAspectRatioComponent_GetCameraConstrainedViewSize::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGTallyBloodpointsScoreWidget.UpdateWidgetByScoreData
// 0x0028 (0x0028 - 0x0000)
struct UMGTallyBloodpointsScoreWidget_UpdateWidgetByScoreData final
{
public:
	class FText                                   title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UTexture2D*                       asset;                                             // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         scoreValue;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGTallyBloodpointsScoreWidget_UpdateWidgetByScoreData) == 0x000008, "Wrong alignment on UMGTallyBloodpointsScoreWidget_UpdateWidgetByScoreData");
static_assert(sizeof(UMGTallyBloodpointsScoreWidget_UpdateWidgetByScoreData) == 0x000028, "Wrong size on UMGTallyBloodpointsScoreWidget_UpdateWidgetByScoreData");
static_assert(offsetof(UMGTallyBloodpointsScoreWidget_UpdateWidgetByScoreData, title) == 0x000000, "Member 'UMGTallyBloodpointsScoreWidget_UpdateWidgetByScoreData::title' has a wrong offset!");
static_assert(offsetof(UMGTallyBloodpointsScoreWidget_UpdateWidgetByScoreData, asset) == 0x000018, "Member 'UMGTallyBloodpointsScoreWidget_UpdateWidgetByScoreData::asset' has a wrong offset!");
static_assert(offsetof(UMGTallyBloodpointsScoreWidget_UpdateWidgetByScoreData, scoreValue) == 0x000020, "Member 'UMGTallyBloodpointsScoreWidget_UpdateWidgetByScoreData::scoreValue' has a wrong offset!");

// Function DeadByDaylight.ContextualQuestComponent.Authority_DebugAddSpecialBehaviour
// 0x0010 (0x0010 - 0x0000)
struct ContextualQuestComponent_Authority_DebugAddSpecialBehaviour final
{
public:
	class FName                                   id;                                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         amountRequired;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualQuestComponent_Authority_DebugAddSpecialBehaviour) == 0x000004, "Wrong alignment on ContextualQuestComponent_Authority_DebugAddSpecialBehaviour");
static_assert(sizeof(ContextualQuestComponent_Authority_DebugAddSpecialBehaviour) == 0x000010, "Wrong size on ContextualQuestComponent_Authority_DebugAddSpecialBehaviour");
static_assert(offsetof(ContextualQuestComponent_Authority_DebugAddSpecialBehaviour, id) == 0x000000, "Member 'ContextualQuestComponent_Authority_DebugAddSpecialBehaviour::id' has a wrong offset!");
static_assert(offsetof(ContextualQuestComponent_Authority_DebugAddSpecialBehaviour, amountRequired) == 0x00000C, "Member 'ContextualQuestComponent_Authority_DebugAddSpecialBehaviour::amountRequired' has a wrong offset!");

// Function DeadByDaylight.ContextualQuestComponent.Authority_DebugRemoveSpecialBehaviour
// 0x000C (0x000C - 0x0000)
struct ContextualQuestComponent_Authority_DebugRemoveSpecialBehaviour final
{
public:
	class FName                                   id;                                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualQuestComponent_Authority_DebugRemoveSpecialBehaviour) == 0x000004, "Wrong alignment on ContextualQuestComponent_Authority_DebugRemoveSpecialBehaviour");
static_assert(sizeof(ContextualQuestComponent_Authority_DebugRemoveSpecialBehaviour) == 0x00000C, "Wrong size on ContextualQuestComponent_Authority_DebugRemoveSpecialBehaviour");
static_assert(offsetof(ContextualQuestComponent_Authority_DebugRemoveSpecialBehaviour, id) == 0x000000, "Member 'ContextualQuestComponent_Authority_DebugRemoveSpecialBehaviour::id' has a wrong offset!");

// Function DeadByDaylight.DBDMaterialBlueprintLibrary.CreateDynamicMaterialInstanceForParticleSystem
// 0x0018 (0x0018 - 0x0000)
struct DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem final
{
public:
	class UParticleSystemComponent*               System;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem) == 0x000008, "Wrong alignment on DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem");
static_assert(sizeof(DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem) == 0x000018, "Wrong size on DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem");
static_assert(offsetof(DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem, System) == 0x000000, "Member 'DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem::System' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem, ReturnValue) == 0x000008, "Member 'DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMaterialBlueprintLibrary.SetTransformParameterInverseValueOnMaterialDynamic
// 0x0050 (0x0050 - 0x0000)
struct DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic final
{
public:
	class UMaterialInstanceDynamic*               Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0020(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic) == 0x000010, "Wrong alignment on DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic");
static_assert(sizeof(DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic) == 0x000050, "Wrong size on DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic, Material) == 0x000000, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic::Material' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic, ParameterName) == 0x000008, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic::ParameterName' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic, Value) == 0x000020, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic::Value' has a wrong offset!");

// Function DeadByDaylight.DBDMaterialBlueprintLibrary.SetTransformParameterValueOnMaterialDynamic
// 0x0050 (0x0050 - 0x0000)
struct DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic final
{
public:
	class UMaterialInstanceDynamic*               Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0020(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic) == 0x000010, "Wrong alignment on DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic");
static_assert(sizeof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic) == 0x000050, "Wrong size on DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic, Material) == 0x000000, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic::Material' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic, ParameterName) == 0x000008, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic::ParameterName' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic, Value) == 0x000020, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic::Value' has a wrong offset!");

// Function DeadByDaylight.DBDMaterialBlueprintLibrary.SetTransformParameterValueOnMeshComponent
// 0x0050 (0x0050 - 0x0000)
struct DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0020(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent) == 0x000010, "Wrong alignment on DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent");
static_assert(sizeof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent) == 0x000050, "Wrong size on DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent, Mesh) == 0x000000, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent::Mesh' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent, ParameterName) == 0x000008, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent::ParameterName' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent, Value) == 0x000020, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent::Value' has a wrong offset!");

// Function DeadByDaylight.DBDMaterialBlueprintLibrary.SetVectorParameterValueOnMeshComponent
// 0x0028 (0x0028 - 0x0000)
struct DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent) == 0x000008, "Wrong alignment on DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent");
static_assert(sizeof(DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent) == 0x000028, "Wrong size on DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent, Mesh) == 0x000000, "Member 'DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent::Mesh' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent, ParameterName) == 0x000008, "Member 'DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent::ParameterName' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent, Value) == 0x000014, "Member 'DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent::Value' has a wrong offset!");

// Function DeadByDaylight.UMGToastNotificationScreen.HandleOnButtonSelected
// 0x0008 (0x0008 - 0x0000)
struct UMGToastNotificationScreen_HandleOnButtonSelected final
{
public:
	int32                                         buttonId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         notificationId;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGToastNotificationScreen_HandleOnButtonSelected) == 0x000004, "Wrong alignment on UMGToastNotificationScreen_HandleOnButtonSelected");
static_assert(sizeof(UMGToastNotificationScreen_HandleOnButtonSelected) == 0x000008, "Wrong size on UMGToastNotificationScreen_HandleOnButtonSelected");
static_assert(offsetof(UMGToastNotificationScreen_HandleOnButtonSelected, buttonId) == 0x000000, "Member 'UMGToastNotificationScreen_HandleOnButtonSelected::buttonId' has a wrong offset!");
static_assert(offsetof(UMGToastNotificationScreen_HandleOnButtonSelected, notificationId) == 0x000004, "Member 'UMGToastNotificationScreen_HandleOnButtonSelected::notificationId' has a wrong offset!");

// Function DeadByDaylight.UMGToastNotificationScreen.HandleOnNotificationDisplayEnd
// 0x0004 (0x0004 - 0x0000)
struct UMGToastNotificationScreen_HandleOnNotificationDisplayEnd final
{
public:
	int32                                         notificationId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGToastNotificationScreen_HandleOnNotificationDisplayEnd) == 0x000004, "Wrong alignment on UMGToastNotificationScreen_HandleOnNotificationDisplayEnd");
static_assert(sizeof(UMGToastNotificationScreen_HandleOnNotificationDisplayEnd) == 0x000004, "Wrong size on UMGToastNotificationScreen_HandleOnNotificationDisplayEnd");
static_assert(offsetof(UMGToastNotificationScreen_HandleOnNotificationDisplayEnd, notificationId) == 0x000000, "Member 'UMGToastNotificationScreen_HandleOnNotificationDisplayEnd::notificationId' has a wrong offset!");

// Function DeadByDaylight.UMGToastNotificationScreen.HandleOnPromptSelected
// 0x0004 (0x0004 - 0x0000)
struct UMGToastNotificationScreen_HandleOnPromptSelected final
{
public:
	int32                                         notificationId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGToastNotificationScreen_HandleOnPromptSelected) == 0x000004, "Wrong alignment on UMGToastNotificationScreen_HandleOnPromptSelected");
static_assert(sizeof(UMGToastNotificationScreen_HandleOnPromptSelected) == 0x000004, "Wrong size on UMGToastNotificationScreen_HandleOnPromptSelected");
static_assert(offsetof(UMGToastNotificationScreen_HandleOnPromptSelected, notificationId) == 0x000000, "Member 'UMGToastNotificationScreen_HandleOnPromptSelected::notificationId' has a wrong offset!");

// Function DeadByDaylight.CoreHudRootWidget.ApplyConstrainedAspectRatio
// 0x0008 (0x0008 - 0x0000)
struct CoreHudRootWidget_ApplyConstrainedAspectRatio final
{
public:
	bool                                          isConstrained;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         aspectRatio;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudRootWidget_ApplyConstrainedAspectRatio) == 0x000004, "Wrong alignment on CoreHudRootWidget_ApplyConstrainedAspectRatio");
static_assert(sizeof(CoreHudRootWidget_ApplyConstrainedAspectRatio) == 0x000008, "Wrong size on CoreHudRootWidget_ApplyConstrainedAspectRatio");
static_assert(offsetof(CoreHudRootWidget_ApplyConstrainedAspectRatio, isConstrained) == 0x000000, "Member 'CoreHudRootWidget_ApplyConstrainedAspectRatio::isConstrained' has a wrong offset!");
static_assert(offsetof(CoreHudRootWidget_ApplyConstrainedAspectRatio, aspectRatio) == 0x000004, "Member 'CoreHudRootWidget_ApplyConstrainedAspectRatio::aspectRatio' has a wrong offset!");

// Function DeadByDaylight.CoreHudRootWidget.SetWidgetsVisibility
// 0x0001 (0x0001 - 0x0000)
struct CoreHudRootWidget_SetWidgetsVisibility final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudRootWidget_SetWidgetsVisibility) == 0x000001, "Wrong alignment on CoreHudRootWidget_SetWidgetsVisibility");
static_assert(sizeof(CoreHudRootWidget_SetWidgetsVisibility) == 0x000001, "Wrong size on CoreHudRootWidget_SetWidgetsVisibility");
static_assert(offsetof(CoreHudRootWidget_SetWidgetsVisibility, visible) == 0x000000, "Member 'CoreHudRootWidget_SetWidgetsVisibility::visible' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.BlockCharacterRotation
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_BlockCharacterRotation final
{
public:
	bool                                          shouldBlock;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_BlockCharacterRotation) == 0x000001, "Wrong alignment on DBDMenuPlayer_BlockCharacterRotation");
static_assert(sizeof(DBDMenuPlayer_BlockCharacterRotation) == 0x000001, "Wrong size on DBDMenuPlayer_BlockCharacterRotation");
static_assert(offsetof(DBDMenuPlayer_BlockCharacterRotation, shouldBlock) == 0x000000, "Member 'DBDMenuPlayer_BlockCharacterRotation::shouldBlock' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.GetCharmSpawnerComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDMenuPlayer_GetCharmSpawnerComponent final
{
public:
	class UCharmSpawnerComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_GetCharmSpawnerComponent) == 0x000008, "Wrong alignment on DBDMenuPlayer_GetCharmSpawnerComponent");
static_assert(sizeof(DBDMenuPlayer_GetCharmSpawnerComponent) == 0x000008, "Wrong size on DBDMenuPlayer_GetCharmSpawnerComponent");
static_assert(offsetof(DBDMenuPlayer_GetCharmSpawnerComponent, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_GetCharmSpawnerComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.IsInMenuPlayer
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_IsInMenuPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_IsInMenuPlayer) == 0x000001, "Wrong alignment on DBDMenuPlayer_IsInMenuPlayer");
static_assert(sizeof(DBDMenuPlayer_IsInMenuPlayer) == 0x000001, "Wrong size on DBDMenuPlayer_IsInMenuPlayer");
static_assert(offsetof(DBDMenuPlayer_IsInMenuPlayer, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_IsInMenuPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.OnCustomizationTransactionCompleted
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_OnCustomizationTransactionCompleted final
{
public:
	ECustomizationCategory                        category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_OnCustomizationTransactionCompleted) == 0x000001, "Wrong alignment on DBDMenuPlayer_OnCustomizationTransactionCompleted");
static_assert(sizeof(DBDMenuPlayer_OnCustomizationTransactionCompleted) == 0x000001, "Wrong size on DBDMenuPlayer_OnCustomizationTransactionCompleted");
static_assert(offsetof(DBDMenuPlayer_OnCustomizationTransactionCompleted, category) == 0x000000, "Member 'DBDMenuPlayer_OnCustomizationTransactionCompleted::category' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.OnGuestPlayerDespawned
// 0x0008 (0x0008 - 0x0000)
struct DBDMenuPlayer_OnGuestPlayerDespawned final
{
public:
	class ADBDMenuPlayer*                         player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_OnGuestPlayerDespawned) == 0x000008, "Wrong alignment on DBDMenuPlayer_OnGuestPlayerDespawned");
static_assert(sizeof(DBDMenuPlayer_OnGuestPlayerDespawned) == 0x000008, "Wrong size on DBDMenuPlayer_OnGuestPlayerDespawned");
static_assert(offsetof(DBDMenuPlayer_OnGuestPlayerDespawned, player) == 0x000000, "Member 'DBDMenuPlayer_OnGuestPlayerDespawned::player' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.OnGuestPlayerReadyChanged
// 0x0010 (0x0010 - 0x0000)
struct DBDMenuPlayer_OnGuestPlayerReadyChanged final
{
public:
	class ADBDMenuPlayer*                         player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isReady;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDMenuPlayer_OnGuestPlayerReadyChanged) == 0x000008, "Wrong alignment on DBDMenuPlayer_OnGuestPlayerReadyChanged");
static_assert(sizeof(DBDMenuPlayer_OnGuestPlayerReadyChanged) == 0x000010, "Wrong size on DBDMenuPlayer_OnGuestPlayerReadyChanged");
static_assert(offsetof(DBDMenuPlayer_OnGuestPlayerReadyChanged, player) == 0x000000, "Member 'DBDMenuPlayer_OnGuestPlayerReadyChanged::player' has a wrong offset!");
static_assert(offsetof(DBDMenuPlayer_OnGuestPlayerReadyChanged, isReady) == 0x000008, "Member 'DBDMenuPlayer_OnGuestPlayerReadyChanged::isReady' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.OnGuestPlayerSpawned
// 0x0008 (0x0008 - 0x0000)
struct DBDMenuPlayer_OnGuestPlayerSpawned final
{
public:
	class ADBDMenuPlayer*                         player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_OnGuestPlayerSpawned) == 0x000008, "Wrong alignment on DBDMenuPlayer_OnGuestPlayerSpawned");
static_assert(sizeof(DBDMenuPlayer_OnGuestPlayerSpawned) == 0x000008, "Wrong size on DBDMenuPlayer_OnGuestPlayerSpawned");
static_assert(offsetof(DBDMenuPlayer_OnGuestPlayerSpawned, player) == 0x000000, "Member 'DBDMenuPlayer_OnGuestPlayerSpawned::player' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.OnIsReadyChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_OnIsReadyChanged final
{
public:
	bool                                          isReady;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_OnIsReadyChanged) == 0x000001, "Wrong alignment on DBDMenuPlayer_OnIsReadyChanged");
static_assert(sizeof(DBDMenuPlayer_OnIsReadyChanged) == 0x000001, "Wrong size on DBDMenuPlayer_OnIsReadyChanged");
static_assert(offsetof(DBDMenuPlayer_OnIsReadyChanged, isReady) == 0x000000, "Member 'DBDMenuPlayer_OnIsReadyChanged::isReady' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.OnLocalPlayerReadyChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_OnLocalPlayerReadyChanged final
{
public:
	bool                                          isReady;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_OnLocalPlayerReadyChanged) == 0x000001, "Wrong alignment on DBDMenuPlayer_OnLocalPlayerReadyChanged");
static_assert(sizeof(DBDMenuPlayer_OnLocalPlayerReadyChanged) == 0x000001, "Wrong size on DBDMenuPlayer_OnLocalPlayerReadyChanged");
static_assert(offsetof(DBDMenuPlayer_OnLocalPlayerReadyChanged, isReady) == 0x000000, "Member 'DBDMenuPlayer_OnLocalPlayerReadyChanged::isReady' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.WrappedOnDestroyed
// 0x0008 (0x0008 - 0x0000)
struct DBDMenuPlayer_WrappedOnDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_WrappedOnDestroyed) == 0x000008, "Wrong alignment on DBDMenuPlayer_WrappedOnDestroyed");
static_assert(sizeof(DBDMenuPlayer_WrappedOnDestroyed) == 0x000008, "Wrong size on DBDMenuPlayer_WrappedOnDestroyed");
static_assert(offsetof(DBDMenuPlayer_WrappedOnDestroyed, DestroyedActor) == 0x000000, "Member 'DBDMenuPlayer_WrappedOnDestroyed::DestroyedActor' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.GetBlockRotationAfterSpawningTime
// 0x0004 (0x0004 - 0x0000)
struct DBDMenuPlayer_GetBlockRotationAfterSpawningTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_GetBlockRotationAfterSpawningTime) == 0x000004, "Wrong alignment on DBDMenuPlayer_GetBlockRotationAfterSpawningTime");
static_assert(sizeof(DBDMenuPlayer_GetBlockRotationAfterSpawningTime) == 0x000004, "Wrong size on DBDMenuPlayer_GetBlockRotationAfterSpawningTime");
static_assert(offsetof(DBDMenuPlayer_GetBlockRotationAfterSpawningTime, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_GetBlockRotationAfterSpawningTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.GetCurrentMenu
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_GetCurrentMenu final
{
public:
	EGameFlowStep                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_GetCurrentMenu) == 0x000001, "Wrong alignment on DBDMenuPlayer_GetCurrentMenu");
static_assert(sizeof(DBDMenuPlayer_GetCurrentMenu) == 0x000001, "Wrong size on DBDMenuPlayer_GetCurrentMenu");
static_assert(offsetof(DBDMenuPlayer_GetCurrentMenu, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_GetCurrentMenu::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.GetHandPosition
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_GetHandPosition final
{
public:
	EItemHandPosition                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_GetHandPosition) == 0x000001, "Wrong alignment on DBDMenuPlayer_GetHandPosition");
static_assert(sizeof(DBDMenuPlayer_GetHandPosition) == 0x000001, "Wrong size on DBDMenuPlayer_GetHandPosition");
static_assert(offsetof(DBDMenuPlayer_GetHandPosition, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_GetHandPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.GetIsLocalPlayerCharacter
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_GetIsLocalPlayerCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_GetIsLocalPlayerCharacter) == 0x000001, "Wrong alignment on DBDMenuPlayer_GetIsLocalPlayerCharacter");
static_assert(sizeof(DBDMenuPlayer_GetIsLocalPlayerCharacter) == 0x000001, "Wrong size on DBDMenuPlayer_GetIsLocalPlayerCharacter");
static_assert(offsetof(DBDMenuPlayer_GetIsLocalPlayerCharacter, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_GetIsLocalPlayerCharacter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.GetIsReady
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_GetIsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_GetIsReady) == 0x000001, "Wrong alignment on DBDMenuPlayer_GetIsReady");
static_assert(sizeof(DBDMenuPlayer_GetIsReady) == 0x000001, "Wrong size on DBDMenuPlayer_GetIsReady");
static_assert(offsetof(DBDMenuPlayer_GetIsReady, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_GetIsReady::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.ShouldApplyPositionOffset
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_ShouldApplyPositionOffset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_ShouldApplyPositionOffset) == 0x000001, "Wrong alignment on DBDMenuPlayer_ShouldApplyPositionOffset");
static_assert(sizeof(DBDMenuPlayer_ShouldApplyPositionOffset) == 0x000001, "Wrong size on DBDMenuPlayer_ShouldApplyPositionOffset");
static_assert(offsetof(DBDMenuPlayer_ShouldApplyPositionOffset, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_ShouldApplyPositionOffset::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.ShouldShowSpawnAnimation
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_ShouldShowSpawnAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_ShouldShowSpawnAnimation) == 0x000001, "Wrong alignment on DBDMenuPlayer_ShouldShowSpawnAnimation");
static_assert(sizeof(DBDMenuPlayer_ShouldShowSpawnAnimation) == 0x000001, "Wrong size on DBDMenuPlayer_ShouldShowSpawnAnimation");
static_assert(offsetof(DBDMenuPlayer_ShouldShowSpawnAnimation, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_ShouldShowSpawnAnimation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CurrencyDisplayable.FinishSpawningCurrency
// 0x0001 (0x0001 - 0x0000)
struct CurrencyDisplayable_FinishSpawningCurrency final
{
public:
	ECurrencyType                                 currencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurrencyDisplayable_FinishSpawningCurrency) == 0x000001, "Wrong alignment on CurrencyDisplayable_FinishSpawningCurrency");
static_assert(sizeof(CurrencyDisplayable_FinishSpawningCurrency) == 0x000001, "Wrong size on CurrencyDisplayable_FinishSpawningCurrency");
static_assert(offsetof(CurrencyDisplayable_FinishSpawningCurrency, currencyType) == 0x000000, "Member 'CurrencyDisplayable_FinishSpawningCurrency::currencyType' has a wrong offset!");

// Function DeadByDaylight.RoleSelectionScreen.OnButtonSelected
// 0x0004 (0x0004 - 0x0000)
struct RoleSelectionScreen_OnButtonSelected final
{
public:
	int32                                         buttonId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RoleSelectionScreen_OnButtonSelected) == 0x000004, "Wrong alignment on RoleSelectionScreen_OnButtonSelected");
static_assert(sizeof(RoleSelectionScreen_OnButtonSelected) == 0x000004, "Wrong size on RoleSelectionScreen_OnButtonSelected");
static_assert(offsetof(RoleSelectionScreen_OnButtonSelected, buttonId) == 0x000000, "Member 'RoleSelectionScreen_OnButtonSelected::buttonId' has a wrong offset!");

// Function DeadByDaylight.UMGTallyRankBanner.SetAsLocked
// 0x0001 (0x0001 - 0x0000)
struct UMGTallyRankBanner_SetAsLocked final
{
public:
	bool                                          locked;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyRankBanner_SetAsLocked) == 0x000001, "Wrong alignment on UMGTallyRankBanner_SetAsLocked");
static_assert(sizeof(UMGTallyRankBanner_SetAsLocked) == 0x000001, "Wrong size on UMGTallyRankBanner_SetAsLocked");
static_assert(offsetof(UMGTallyRankBanner_SetAsLocked, locked) == 0x000000, "Member 'UMGTallyRankBanner_SetAsLocked::locked' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.SetFadeIntensity
// 0x0004 (0x0004 - 0x0000)
struct DBDOutlineComponent_SetFadeIntensity final
{
public:
	float                                         fadeIntensity;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_SetFadeIntensity) == 0x000004, "Wrong alignment on DBDOutlineComponent_SetFadeIntensity");
static_assert(sizeof(DBDOutlineComponent_SetFadeIntensity) == 0x000004, "Wrong size on DBDOutlineComponent_SetFadeIntensity");
static_assert(offsetof(DBDOutlineComponent_SetFadeIntensity, fadeIntensity) == 0x000000, "Member 'DBDOutlineComponent_SetFadeIntensity::fadeIntensity' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.SetFadeTexture
// 0x0008 (0x0008 - 0x0000)
struct DBDOutlineComponent_SetFadeTexture final
{
public:
	class UTexture*                               inFadeTexture;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_SetFadeTexture) == 0x000008, "Wrong alignment on DBDOutlineComponent_SetFadeTexture");
static_assert(sizeof(DBDOutlineComponent_SetFadeTexture) == 0x000008, "Wrong size on DBDOutlineComponent_SetFadeTexture");
static_assert(offsetof(DBDOutlineComponent_SetFadeTexture, inFadeTexture) == 0x000000, "Member 'DBDOutlineComponent_SetFadeTexture::inFadeTexture' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.SetIsOccludingOutlines
// 0x0001 (0x0001 - 0x0000)
struct DBDOutlineComponent_SetIsOccludingOutlines final
{
public:
	bool                                          isOccluding;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_SetIsOccludingOutlines) == 0x000001, "Wrong alignment on DBDOutlineComponent_SetIsOccludingOutlines");
static_assert(sizeof(DBDOutlineComponent_SetIsOccludingOutlines) == 0x000001, "Wrong size on DBDOutlineComponent_SetIsOccludingOutlines");
static_assert(offsetof(DBDOutlineComponent_SetIsOccludingOutlines, isOccluding) == 0x000000, "Member 'DBDOutlineComponent_SetIsOccludingOutlines::isOccluding' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.SetMaterialCopyTarget
// 0x0008 (0x0008 - 0x0000)
struct DBDOutlineComponent_SetMaterialCopyTarget final
{
public:
	class UMaterialInterface*                     inMaterialToCopy;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_SetMaterialCopyTarget) == 0x000008, "Wrong alignment on DBDOutlineComponent_SetMaterialCopyTarget");
static_assert(sizeof(DBDOutlineComponent_SetMaterialCopyTarget) == 0x000008, "Wrong size on DBDOutlineComponent_SetMaterialCopyTarget");
static_assert(offsetof(DBDOutlineComponent_SetMaterialCopyTarget, inMaterialToCopy) == 0x000000, "Member 'DBDOutlineComponent_SetMaterialCopyTarget::inMaterialToCopy' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.SetMinimumOutlineDistance
// 0x0004 (0x0004 - 0x0000)
struct DBDOutlineComponent_SetMinimumOutlineDistance final
{
public:
	float                                         distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_SetMinimumOutlineDistance) == 0x000004, "Wrong alignment on DBDOutlineComponent_SetMinimumOutlineDistance");
static_assert(sizeof(DBDOutlineComponent_SetMinimumOutlineDistance) == 0x000004, "Wrong size on DBDOutlineComponent_SetMinimumOutlineDistance");
static_assert(offsetof(DBDOutlineComponent_SetMinimumOutlineDistance, distance) == 0x000000, "Member 'DBDOutlineComponent_SetMinimumOutlineDistance::distance' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.SetOutlineIntensity
// 0x0004 (0x0004 - 0x0000)
struct DBDOutlineComponent_SetOutlineIntensity final
{
public:
	float                                         outlineIntensity;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_SetOutlineIntensity) == 0x000004, "Wrong alignment on DBDOutlineComponent_SetOutlineIntensity");
static_assert(sizeof(DBDOutlineComponent_SetOutlineIntensity) == 0x000004, "Wrong size on DBDOutlineComponent_SetOutlineIntensity");
static_assert(offsetof(DBDOutlineComponent_SetOutlineIntensity, outlineIntensity) == 0x000000, "Member 'DBDOutlineComponent_SetOutlineIntensity::outlineIntensity' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.SetTargetColor
// 0x0010 (0x0010 - 0x0000)
struct DBDOutlineComponent_SetTargetColor final
{
public:
	struct FLinearColor                           color;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_SetTargetColor) == 0x000004, "Wrong alignment on DBDOutlineComponent_SetTargetColor");
static_assert(sizeof(DBDOutlineComponent_SetTargetColor) == 0x000010, "Wrong size on DBDOutlineComponent_SetTargetColor");
static_assert(offsetof(DBDOutlineComponent_SetTargetColor, color) == 0x000000, "Member 'DBDOutlineComponent_SetTargetColor::color' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.GetTargetColor
// 0x0010 (0x0010 - 0x0000)
struct DBDOutlineComponent_GetTargetColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_GetTargetColor) == 0x000004, "Wrong alignment on DBDOutlineComponent_GetTargetColor");
static_assert(sizeof(DBDOutlineComponent_GetTargetColor) == 0x000010, "Wrong size on DBDOutlineComponent_GetTargetColor");
static_assert(offsetof(DBDOutlineComponent_GetTargetColor, ReturnValue) == 0x000000, "Member 'DBDOutlineComponent_GetTargetColor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.CopyCustomization
// 0x0008 (0x0008 - 0x0000)
struct CustomizedSkeletalMesh_CopyCustomization final
{
public:
	const class UCustomizedSkeletalMesh*          copyFrom;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_CopyCustomization) == 0x000008, "Wrong alignment on CustomizedSkeletalMesh_CopyCustomization");
static_assert(sizeof(CustomizedSkeletalMesh_CopyCustomization) == 0x000008, "Wrong size on CustomizedSkeletalMesh_CopyCustomization");
static_assert(offsetof(CustomizedSkeletalMesh_CopyCustomization, copyFrom) == 0x000000, "Member 'CustomizedSkeletalMesh_CopyCustomization::copyFrom' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.GetMeshOwner
// 0x0008 (0x0008 - 0x0000)
struct CustomizedSkeletalMesh_GetMeshOwner final
{
public:
	class USkinnedMeshComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_GetMeshOwner) == 0x000008, "Wrong alignment on CustomizedSkeletalMesh_GetMeshOwner");
static_assert(sizeof(CustomizedSkeletalMesh_GetMeshOwner) == 0x000008, "Wrong size on CustomizedSkeletalMesh_GetMeshOwner");
static_assert(offsetof(CustomizedSkeletalMesh_GetMeshOwner, ReturnValue) == 0x000000, "Member 'CustomizedSkeletalMesh_GetMeshOwner::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.SetAllAccessoriesVisibility
// 0x0001 (0x0001 - 0x0000)
struct CustomizedSkeletalMesh_SetAllAccessoriesVisibility final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_SetAllAccessoriesVisibility) == 0x000001, "Wrong alignment on CustomizedSkeletalMesh_SetAllAccessoriesVisibility");
static_assert(sizeof(CustomizedSkeletalMesh_SetAllAccessoriesVisibility) == 0x000001, "Wrong size on CustomizedSkeletalMesh_SetAllAccessoriesVisibility");
static_assert(offsetof(CustomizedSkeletalMesh_SetAllAccessoriesVisibility, visible) == 0x000000, "Member 'CustomizedSkeletalMesh_SetAllAccessoriesVisibility::visible' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.SetAllVfxsVisibility
// 0x0001 (0x0001 - 0x0000)
struct CustomizedSkeletalMesh_SetAllVfxsVisibility final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_SetAllVfxsVisibility) == 0x000001, "Wrong alignment on CustomizedSkeletalMesh_SetAllVfxsVisibility");
static_assert(sizeof(CustomizedSkeletalMesh_SetAllVfxsVisibility) == 0x000001, "Wrong size on CustomizedSkeletalMesh_SetAllVfxsVisibility");
static_assert(offsetof(CustomizedSkeletalMesh_SetAllVfxsVisibility, visible) == 0x000000, "Member 'CustomizedSkeletalMesh_SetAllVfxsVisibility::visible' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.SetCastShadow
// 0x0001 (0x0001 - 0x0000)
struct CustomizedSkeletalMesh_SetCastShadow final
{
public:
	bool                                          castShadow;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_SetCastShadow) == 0x000001, "Wrong alignment on CustomizedSkeletalMesh_SetCastShadow");
static_assert(sizeof(CustomizedSkeletalMesh_SetCastShadow) == 0x000001, "Wrong size on CustomizedSkeletalMesh_SetCastShadow");
static_assert(offsetof(CustomizedSkeletalMesh_SetCastShadow, castShadow) == 0x000000, "Member 'CustomizedSkeletalMesh_SetCastShadow::castShadow' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.SetMeshOwner
// 0x0008 (0x0008 - 0x0000)
struct CustomizedSkeletalMesh_SetMeshOwner final
{
public:
	class USkinnedMeshComponent*                  mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_SetMeshOwner) == 0x000008, "Wrong alignment on CustomizedSkeletalMesh_SetMeshOwner");
static_assert(sizeof(CustomizedSkeletalMesh_SetMeshOwner) == 0x000008, "Wrong size on CustomizedSkeletalMesh_SetMeshOwner");
static_assert(offsetof(CustomizedSkeletalMesh_SetMeshOwner, mesh) == 0x000000, "Member 'CustomizedSkeletalMesh_SetMeshOwner::mesh' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.SetMeshVisibility
// 0x0001 (0x0001 - 0x0000)
struct CustomizedSkeletalMesh_SetMeshVisibility final
{
public:
	bool                                          visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_SetMeshVisibility) == 0x000001, "Wrong alignment on CustomizedSkeletalMesh_SetMeshVisibility");
static_assert(sizeof(CustomizedSkeletalMesh_SetMeshVisibility) == 0x000001, "Wrong size on CustomizedSkeletalMesh_SetMeshVisibility");
static_assert(offsetof(CustomizedSkeletalMesh_SetMeshVisibility, visible) == 0x000000, "Member 'CustomizedSkeletalMesh_SetMeshVisibility::visible' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.SetVfxsVisibility
// 0x0002 (0x0002 - 0x0000)
struct CustomizedSkeletalMesh_SetVfxsVisibility final
{
public:
	ECustomizationCategory                        category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          visible;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_SetVfxsVisibility) == 0x000001, "Wrong alignment on CustomizedSkeletalMesh_SetVfxsVisibility");
static_assert(sizeof(CustomizedSkeletalMesh_SetVfxsVisibility) == 0x000002, "Wrong size on CustomizedSkeletalMesh_SetVfxsVisibility");
static_assert(offsetof(CustomizedSkeletalMesh_SetVfxsVisibility, category) == 0x000000, "Member 'CustomizedSkeletalMesh_SetVfxsVisibility::category' has a wrong offset!");
static_assert(offsetof(CustomizedSkeletalMesh_SetVfxsVisibility, visible) == 0x000001, "Member 'CustomizedSkeletalMesh_SetVfxsVisibility::visible' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.Contains
// 0x0018 (0x0018 - 0x0000)
struct CustomizedSkeletalMesh_Contains final
{
public:
	TArray<class FName>                           itemIds;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizedSkeletalMesh_Contains) == 0x000008, "Wrong alignment on CustomizedSkeletalMesh_Contains");
static_assert(sizeof(CustomizedSkeletalMesh_Contains) == 0x000018, "Wrong size on CustomizedSkeletalMesh_Contains");
static_assert(offsetof(CustomizedSkeletalMesh_Contains, itemIds) == 0x000000, "Member 'CustomizedSkeletalMesh_Contains::itemIds' has a wrong offset!");
static_assert(offsetof(CustomizedSkeletalMesh_Contains, ReturnValue) == 0x000010, "Member 'CustomizedSkeletalMesh_Contains::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.GetComponents
// 0x0010 (0x0010 - 0x0000)
struct CustomizedSkeletalMesh_GetComponents final
{
public:
	TArray<class USkeletalMeshComponent*>         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_GetComponents) == 0x000008, "Wrong alignment on CustomizedSkeletalMesh_GetComponents");
static_assert(sizeof(CustomizedSkeletalMesh_GetComponents) == 0x000010, "Wrong size on CustomizedSkeletalMesh_GetComponents");
static_assert(offsetof(CustomizedSkeletalMesh_GetComponents, ReturnValue) == 0x000000, "Member 'CustomizedSkeletalMesh_GetComponents::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.GetCurrentCustomizationItems
// 0x0010 (0x0010 - 0x0000)
struct CustomizedSkeletalMesh_GetCurrentCustomizationItems final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_GetCurrentCustomizationItems) == 0x000008, "Wrong alignment on CustomizedSkeletalMesh_GetCurrentCustomizationItems");
static_assert(sizeof(CustomizedSkeletalMesh_GetCurrentCustomizationItems) == 0x000010, "Wrong size on CustomizedSkeletalMesh_GetCurrentCustomizationItems");
static_assert(offsetof(CustomizedSkeletalMesh_GetCurrentCustomizationItems, ReturnValue) == 0x000000, "Member 'CustomizedSkeletalMesh_GetCurrentCustomizationItems::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.GetSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct CustomizedSkeletalMesh_GetSkeletalMesh final
{
public:
	ECustomizationCategory                        category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_GetSkeletalMesh) == 0x000008, "Wrong alignment on CustomizedSkeletalMesh_GetSkeletalMesh");
static_assert(sizeof(CustomizedSkeletalMesh_GetSkeletalMesh) == 0x000010, "Wrong size on CustomizedSkeletalMesh_GetSkeletalMesh");
static_assert(offsetof(CustomizedSkeletalMesh_GetSkeletalMesh, category) == 0x000000, "Member 'CustomizedSkeletalMesh_GetSkeletalMesh::category' has a wrong offset!");
static_assert(offsetof(CustomizedSkeletalMesh_GetSkeletalMesh, ReturnValue) == 0x000008, "Member 'CustomizedSkeletalMesh_GetSkeletalMesh::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.HasValidCustomization
// 0x0001 (0x0001 - 0x0000)
struct CustomizedSkeletalMesh_HasValidCustomization final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_HasValidCustomization) == 0x000001, "Wrong alignment on CustomizedSkeletalMesh_HasValidCustomization");
static_assert(sizeof(CustomizedSkeletalMesh_HasValidCustomization) == 0x000001, "Wrong size on CustomizedSkeletalMesh_HasValidCustomization");
static_assert(offsetof(CustomizedSkeletalMesh_HasValidCustomization, ReturnValue) == 0x000000, "Member 'CustomizedSkeletalMesh_HasValidCustomization::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper.ApplyOpacity
// 0x0004 (0x0004 - 0x0000)
struct CustomWidgetWrapper_ApplyOpacity final
{
public:
	float                                         opacity;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_ApplyOpacity) == 0x000004, "Wrong alignment on CustomWidgetWrapper_ApplyOpacity");
static_assert(sizeof(CustomWidgetWrapper_ApplyOpacity) == 0x000004, "Wrong size on CustomWidgetWrapper_ApplyOpacity");
static_assert(offsetof(CustomWidgetWrapper_ApplyOpacity, opacity) == 0x000000, "Member 'CustomWidgetWrapper_ApplyOpacity::opacity' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper.ApplyScale
// 0x0004 (0x0004 - 0x0000)
struct CustomWidgetWrapper_ApplyScale final
{
public:
	float                                         scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_ApplyScale) == 0x000004, "Wrong alignment on CustomWidgetWrapper_ApplyScale");
static_assert(sizeof(CustomWidgetWrapper_ApplyScale) == 0x000004, "Wrong size on CustomWidgetWrapper_ApplyScale");
static_assert(offsetof(CustomWidgetWrapper_ApplyScale, scale) == 0x000000, "Member 'CustomWidgetWrapper_ApplyScale::scale' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper.ApplyVersion
// 0x0004 (0x0004 - 0x0000)
struct CustomWidgetWrapper_ApplyVersion final
{
public:
	int32                                         version;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_ApplyVersion) == 0x000004, "Wrong alignment on CustomWidgetWrapper_ApplyVersion");
static_assert(sizeof(CustomWidgetWrapper_ApplyVersion) == 0x000004, "Wrong size on CustomWidgetWrapper_ApplyVersion");
static_assert(offsetof(CustomWidgetWrapper_ApplyVersion, version) == 0x000000, "Member 'CustomWidgetWrapper_ApplyVersion::version' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper_HudEditor.AddToTranslation
// 0x0008 (0x0008 - 0x0000)
struct CustomWidgetWrapper_HudEditor_AddToTranslation final
{
public:
	struct FVector2D                              translation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_HudEditor_AddToTranslation) == 0x000004, "Wrong alignment on CustomWidgetWrapper_HudEditor_AddToTranslation");
static_assert(sizeof(CustomWidgetWrapper_HudEditor_AddToTranslation) == 0x000008, "Wrong size on CustomWidgetWrapper_HudEditor_AddToTranslation");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_AddToTranslation, translation) == 0x000000, "Member 'CustomWidgetWrapper_HudEditor_AddToTranslation::translation' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper_HudEditor.ApplyScaleWithOverlappingWrappers
// 0x0028 (0x0028 - 0x0000)
struct CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers final
{
public:
	float                                         scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UCustomWidgetWrapper_HudEditor*> allEditableWrappers;                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          needDetectOverlapping;                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers) == 0x000008, "Wrong alignment on CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers");
static_assert(sizeof(CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers) == 0x000028, "Wrong size on CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers, scale) == 0x000000, "Member 'CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers::scale' has a wrong offset!");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers, widget) == 0x000008, "Member 'CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers::widget' has a wrong offset!");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers, allEditableWrappers) == 0x000010, "Member 'CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers::allEditableWrappers' has a wrong offset!");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers, needDetectOverlapping) == 0x000020, "Member 'CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers::needDetectOverlapping' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper_HudEditor.CanEditOpacity
// 0x0001 (0x0001 - 0x0000)
struct CustomWidgetWrapper_HudEditor_CanEditOpacity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_HudEditor_CanEditOpacity) == 0x000001, "Wrong alignment on CustomWidgetWrapper_HudEditor_CanEditOpacity");
static_assert(sizeof(CustomWidgetWrapper_HudEditor_CanEditOpacity) == 0x000001, "Wrong size on CustomWidgetWrapper_HudEditor_CanEditOpacity");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_CanEditOpacity, ReturnValue) == 0x000000, "Member 'CustomWidgetWrapper_HudEditor_CanEditOpacity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper_HudEditor.CanEditScale
// 0x0001 (0x0001 - 0x0000)
struct CustomWidgetWrapper_HudEditor_CanEditScale final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_HudEditor_CanEditScale) == 0x000001, "Wrong alignment on CustomWidgetWrapper_HudEditor_CanEditScale");
static_assert(sizeof(CustomWidgetWrapper_HudEditor_CanEditScale) == 0x000001, "Wrong size on CustomWidgetWrapper_HudEditor_CanEditScale");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_CanEditScale, ReturnValue) == 0x000000, "Member 'CustomWidgetWrapper_HudEditor_CanEditScale::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper_HudEditor.GetOpacity
// 0x0004 (0x0004 - 0x0000)
struct CustomWidgetWrapper_HudEditor_GetOpacity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_HudEditor_GetOpacity) == 0x000004, "Wrong alignment on CustomWidgetWrapper_HudEditor_GetOpacity");
static_assert(sizeof(CustomWidgetWrapper_HudEditor_GetOpacity) == 0x000004, "Wrong size on CustomWidgetWrapper_HudEditor_GetOpacity");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_GetOpacity, ReturnValue) == 0x000000, "Member 'CustomWidgetWrapper_HudEditor_GetOpacity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper_HudEditor.GetScale
// 0x0004 (0x0004 - 0x0000)
struct CustomWidgetWrapper_HudEditor_GetScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_HudEditor_GetScale) == 0x000004, "Wrong alignment on CustomWidgetWrapper_HudEditor_GetScale");
static_assert(sizeof(CustomWidgetWrapper_HudEditor_GetScale) == 0x000004, "Wrong size on CustomWidgetWrapper_HudEditor_GetScale");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_GetScale, ReturnValue) == 0x000000, "Member 'CustomWidgetWrapper_HudEditor_GetScale::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBD_SoundEventSpawner.OnLoudNoiseTriggered
// 0x0028 (0x0028 - 0x0000)
struct DBD_SoundEventSpawner_OnLoudNoiseTriggered final
{
public:
	class AActor*                                 originator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 instigatingActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          shouldTrack;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         audibleRange;                                      // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isQuickAction;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isDeceivingNoise;                                  // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBD_SoundEventSpawner_OnLoudNoiseTriggered) == 0x000008, "Wrong alignment on DBD_SoundEventSpawner_OnLoudNoiseTriggered");
static_assert(sizeof(DBD_SoundEventSpawner_OnLoudNoiseTriggered) == 0x000028, "Wrong size on DBD_SoundEventSpawner_OnLoudNoiseTriggered");
static_assert(offsetof(DBD_SoundEventSpawner_OnLoudNoiseTriggered, originator) == 0x000000, "Member 'DBD_SoundEventSpawner_OnLoudNoiseTriggered::originator' has a wrong offset!");
static_assert(offsetof(DBD_SoundEventSpawner_OnLoudNoiseTriggered, instigatingActor) == 0x000008, "Member 'DBD_SoundEventSpawner_OnLoudNoiseTriggered::instigatingActor' has a wrong offset!");
static_assert(offsetof(DBD_SoundEventSpawner_OnLoudNoiseTriggered, location) == 0x000010, "Member 'DBD_SoundEventSpawner_OnLoudNoiseTriggered::location' has a wrong offset!");
static_assert(offsetof(DBD_SoundEventSpawner_OnLoudNoiseTriggered, shouldTrack) == 0x00001C, "Member 'DBD_SoundEventSpawner_OnLoudNoiseTriggered::shouldTrack' has a wrong offset!");
static_assert(offsetof(DBD_SoundEventSpawner_OnLoudNoiseTriggered, audibleRange) == 0x000020, "Member 'DBD_SoundEventSpawner_OnLoudNoiseTriggered::audibleRange' has a wrong offset!");
static_assert(offsetof(DBD_SoundEventSpawner_OnLoudNoiseTriggered, isQuickAction) == 0x000024, "Member 'DBD_SoundEventSpawner_OnLoudNoiseTriggered::isQuickAction' has a wrong offset!");
static_assert(offsetof(DBD_SoundEventSpawner_OnLoudNoiseTriggered, isDeceivingNoise) == 0x000025, "Member 'DBD_SoundEventSpawner_OnLoudNoiseTriggered::isDeceivingNoise' has a wrong offset!");

// Function DeadByDaylight.LightFollower.AddFollower
// 0x0008 (0x0008 - 0x0000)
struct LightFollower_AddFollower final
{
public:
	class ULightComponent*                        follower;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightFollower_AddFollower) == 0x000008, "Wrong alignment on LightFollower_AddFollower");
static_assert(sizeof(LightFollower_AddFollower) == 0x000008, "Wrong size on LightFollower_AddFollower");
static_assert(offsetof(LightFollower_AddFollower, follower) == 0x000000, "Member 'LightFollower_AddFollower::follower' has a wrong offset!");

// Function DeadByDaylight.LightFollower.SetLeader
// 0x0010 (0x0010 - 0x0000)
struct LightFollower_SetLeader final
{
public:
	class ULightComponent*                        leader;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         maxIntensity;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LightFollower_SetLeader) == 0x000008, "Wrong alignment on LightFollower_SetLeader");
static_assert(sizeof(LightFollower_SetLeader) == 0x000010, "Wrong size on LightFollower_SetLeader");
static_assert(offsetof(LightFollower_SetLeader, leader) == 0x000000, "Member 'LightFollower_SetLeader::leader' has a wrong offset!");
static_assert(offsetof(LightFollower_SetLeader, maxIntensity) == 0x000008, "Member 'LightFollower_SetLeader::maxIntensity' has a wrong offset!");

// Function DeadByDaylight.DBDAttackerComponent.Local_RequestAttack
// 0x0001 (0x0001 - 0x0000)
struct DBDAttackerComponent_Local_RequestAttack final
{
public:
	EAttackType                                   attackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttackerComponent_Local_RequestAttack) == 0x000001, "Wrong alignment on DBDAttackerComponent_Local_RequestAttack");
static_assert(sizeof(DBDAttackerComponent_Local_RequestAttack) == 0x000001, "Wrong size on DBDAttackerComponent_Local_RequestAttack");
static_assert(offsetof(DBDAttackerComponent_Local_RequestAttack, attackType) == 0x000000, "Member 'DBDAttackerComponent_Local_RequestAttack::attackType' has a wrong offset!");

// Function DeadByDaylight.DBDAttackerComponent.Multicast_StoreAttack
// 0x0001 (0x0001 - 0x0000)
struct DBDAttackerComponent_Multicast_StoreAttack final
{
public:
	EAttackType                                   attackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttackerComponent_Multicast_StoreAttack) == 0x000001, "Wrong alignment on DBDAttackerComponent_Multicast_StoreAttack");
static_assert(sizeof(DBDAttackerComponent_Multicast_StoreAttack) == 0x000001, "Wrong size on DBDAttackerComponent_Multicast_StoreAttack");
static_assert(offsetof(DBDAttackerComponent_Multicast_StoreAttack, attackType) == 0x000000, "Member 'DBDAttackerComponent_Multicast_StoreAttack::attackType' has a wrong offset!");

// Function DeadByDaylight.DBDAttackerComponent.Server_StoreAttack
// 0x0001 (0x0001 - 0x0000)
struct DBDAttackerComponent_Server_StoreAttack final
{
public:
	EAttackType                                   attackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttackerComponent_Server_StoreAttack) == 0x000001, "Wrong alignment on DBDAttackerComponent_Server_StoreAttack");
static_assert(sizeof(DBDAttackerComponent_Server_StoreAttack) == 0x000001, "Wrong size on DBDAttackerComponent_Server_StoreAttack");
static_assert(offsetof(DBDAttackerComponent_Server_StoreAttack, attackType) == 0x000000, "Member 'DBDAttackerComponent_Server_StoreAttack::attackType' has a wrong offset!");

// Function DeadByDaylight.DBDAttackerComponent.IsAnyAttackTransitionRequested
// 0x0001 (0x0001 - 0x0000)
struct DBDAttackerComponent_IsAnyAttackTransitionRequested final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttackerComponent_IsAnyAttackTransitionRequested) == 0x000001, "Wrong alignment on DBDAttackerComponent_IsAnyAttackTransitionRequested");
static_assert(sizeof(DBDAttackerComponent_IsAnyAttackTransitionRequested) == 0x000001, "Wrong size on DBDAttackerComponent_IsAnyAttackTransitionRequested");
static_assert(offsetof(DBDAttackerComponent_IsAnyAttackTransitionRequested, ReturnValue) == 0x000000, "Member 'DBDAttackerComponent_IsAnyAttackTransitionRequested::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAttackerComponent.IsAttacking
// 0x0001 (0x0001 - 0x0000)
struct DBDAttackerComponent_IsAttacking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttackerComponent_IsAttacking) == 0x000001, "Wrong alignment on DBDAttackerComponent_IsAttacking");
static_assert(sizeof(DBDAttackerComponent_IsAttacking) == 0x000001, "Wrong size on DBDAttackerComponent_IsAttacking");
static_assert(offsetof(DBDAttackerComponent_IsAttacking, ReturnValue) == 0x000000, "Member 'DBDAttackerComponent_IsAttacking::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAttackerComponent.IsAttackTransitionRequested
// 0x0002 (0x0002 - 0x0000)
struct DBDAttackerComponent_IsAttackTransitionRequested final
{
public:
	EAttackType                                   attackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttackerComponent_IsAttackTransitionRequested) == 0x000001, "Wrong alignment on DBDAttackerComponent_IsAttackTransitionRequested");
static_assert(sizeof(DBDAttackerComponent_IsAttackTransitionRequested) == 0x000002, "Wrong size on DBDAttackerComponent_IsAttackTransitionRequested");
static_assert(offsetof(DBDAttackerComponent_IsAttackTransitionRequested, attackType) == 0x000000, "Member 'DBDAttackerComponent_IsAttackTransitionRequested::attackType' has a wrong offset!");
static_assert(offsetof(DBDAttackerComponent_IsAttackTransitionRequested, ReturnValue) == 0x000001, "Member 'DBDAttackerComponent_IsAttackTransitionRequested::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBaseHud.DBD_ShowAnimHud
// 0x0001 (0x0001 - 0x0000)
struct DBDBaseHud_DBD_ShowAnimHud final
{
public:
	bool                                          show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBaseHud_DBD_ShowAnimHud) == 0x000001, "Wrong alignment on DBDBaseHud_DBD_ShowAnimHud");
static_assert(sizeof(DBDBaseHud_DBD_ShowAnimHud) == 0x000001, "Wrong size on DBDBaseHud_DBD_ShowAnimHud");
static_assert(offsetof(DBDBaseHud_DBD_ShowAnimHud, show) == 0x000000, "Member 'DBDBaseHud_DBD_ShowAnimHud::show' has a wrong offset!");

// Function DeadByDaylight.DBDBaseHud.ShouldDrawAnimHud
// 0x0001 (0x0001 - 0x0000)
struct DBDBaseHud_ShouldDrawAnimHud final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBaseHud_ShouldDrawAnimHud) == 0x000001, "Wrong alignment on DBDBaseHud_ShouldDrawAnimHud");
static_assert(sizeof(DBDBaseHud_ShouldDrawAnimHud) == 0x000001, "Wrong size on DBDBaseHud_ShouldDrawAnimHud");
static_assert(offsetof(DBDBaseHud_ShouldDrawAnimHud, ReturnValue) == 0x000000, "Member 'DBDBaseHud_ShouldDrawAnimHud::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionProficiency.GetIsActive
// 0x0018 (0x0018 - 0x0000)
struct InteractionProficiency_GetIsActive final
{
public:
	const class UChargeableInteractionDefinition* chargeableInteraction;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       player;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionProficiency_GetIsActive) == 0x000008, "Wrong alignment on InteractionProficiency_GetIsActive");
static_assert(sizeof(InteractionProficiency_GetIsActive) == 0x000018, "Wrong size on InteractionProficiency_GetIsActive");
static_assert(offsetof(InteractionProficiency_GetIsActive, chargeableInteraction) == 0x000000, "Member 'InteractionProficiency_GetIsActive::chargeableInteraction' has a wrong offset!");
static_assert(offsetof(InteractionProficiency_GetIsActive, player) == 0x000008, "Member 'InteractionProficiency_GetIsActive::player' has a wrong offset!");
static_assert(offsetof(InteractionProficiency_GetIsActive, ReturnValue) == 0x000010, "Member 'InteractionProficiency_GetIsActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionProficiency.GetLevel
// 0x0018 (0x0018 - 0x0000)
struct InteractionProficiency_GetLevel final
{
public:
	const class UChargeableInteractionDefinition* chargeableInteraction;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       player;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionProficiency_GetLevel) == 0x000008, "Wrong alignment on InteractionProficiency_GetLevel");
static_assert(sizeof(InteractionProficiency_GetLevel) == 0x000018, "Wrong size on InteractionProficiency_GetLevel");
static_assert(offsetof(InteractionProficiency_GetLevel, chargeableInteraction) == 0x000000, "Member 'InteractionProficiency_GetLevel::chargeableInteraction' has a wrong offset!");
static_assert(offsetof(InteractionProficiency_GetLevel, player) == 0x000008, "Member 'InteractionProficiency_GetLevel::player' has a wrong offset!");
static_assert(offsetof(InteractionProficiency_GetLevel, ReturnValue) == 0x000010, "Member 'InteractionProficiency_GetLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionProficiency.GetType
// 0x0008 (0x0008 - 0x0000)
struct InteractionProficiency_GetType final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusEffectType                             ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionProficiency_GetType) == 0x000004, "Wrong alignment on InteractionProficiency_GetType");
static_assert(sizeof(InteractionProficiency_GetType) == 0x000008, "Wrong size on InteractionProficiency_GetType");
static_assert(offsetof(InteractionProficiency_GetType, value) == 0x000000, "Member 'InteractionProficiency_GetType::value' has a wrong offset!");
static_assert(offsetof(InteractionProficiency_GetType, ReturnValue) == 0x000004, "Member 'InteractionProficiency_GetType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionProficiency.GetValue
// 0x0018 (0x0018 - 0x0000)
struct InteractionProficiency_GetValue final
{
public:
	const class UChargeableInteractionDefinition* chargeableInteraction;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       player;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionProficiency_GetValue) == 0x000008, "Wrong alignment on InteractionProficiency_GetValue");
static_assert(sizeof(InteractionProficiency_GetValue) == 0x000018, "Wrong size on InteractionProficiency_GetValue");
static_assert(offsetof(InteractionProficiency_GetValue, chargeableInteraction) == 0x000000, "Member 'InteractionProficiency_GetValue::chargeableInteraction' has a wrong offset!");
static_assert(offsetof(InteractionProficiency_GetValue, player) == 0x000008, "Member 'InteractionProficiency_GetValue::player' has a wrong offset!");
static_assert(offsetof(InteractionProficiency_GetValue, ReturnValue) == 0x000010, "Member 'InteractionProficiency_GetValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.GetLocallyObservedPlayerRole
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_GetLocallyObservedPlayerRole final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_GetLocallyObservedPlayerRole) == 0x000008, "Wrong alignment on DBDCharacterUtilities_GetLocallyObservedPlayerRole");
static_assert(sizeof(DBDCharacterUtilities_GetLocallyObservedPlayerRole) == 0x000010, "Wrong size on DBDCharacterUtilities_GetLocallyObservedPlayerRole");
static_assert(offsetof(DBDCharacterUtilities_GetLocallyObservedPlayerRole, worldContextObject) == 0x000000, "Member 'DBDCharacterUtilities_GetLocallyObservedPlayerRole::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_GetLocallyObservedPlayerRole, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_GetLocallyObservedPlayerRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsAceVisconti
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsAceVisconti final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsAceVisconti) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsAceVisconti");
static_assert(sizeof(DBDCharacterUtilities_IsAceVisconti) == 0x000010, "Wrong size on DBDCharacterUtilities_IsAceVisconti");
static_assert(offsetof(DBDCharacterUtilities_IsAceVisconti, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsAceVisconti::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsAceVisconti, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsAceVisconti::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsAdamFrancis
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsAdamFrancis final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsAdamFrancis) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsAdamFrancis");
static_assert(sizeof(DBDCharacterUtilities_IsAdamFrancis) == 0x000010, "Wrong size on DBDCharacterUtilities_IsAdamFrancis");
static_assert(offsetof(DBDCharacterUtilities_IsAdamFrancis, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsAdamFrancis::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsAdamFrancis, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsAdamFrancis::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsAshleyWilliams
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsAshleyWilliams final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsAshleyWilliams) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsAshleyWilliams");
static_assert(sizeof(DBDCharacterUtilities_IsAshleyWilliams) == 0x000010, "Wrong size on DBDCharacterUtilities_IsAshleyWilliams");
static_assert(offsetof(DBDCharacterUtilities_IsAshleyWilliams, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsAshleyWilliams::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsAshleyWilliams, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsAshleyWilliams::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsClaudetteMorel
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsClaudetteMorel final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsClaudetteMorel) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsClaudetteMorel");
static_assert(sizeof(DBDCharacterUtilities_IsClaudetteMorel) == 0x000010, "Wrong size on DBDCharacterUtilities_IsClaudetteMorel");
static_assert(offsetof(DBDCharacterUtilities_IsClaudetteMorel, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsClaudetteMorel::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsClaudetteMorel, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsClaudetteMorel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsDavidKing
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsDavidKing final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsDavidKing) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsDavidKing");
static_assert(sizeof(DBDCharacterUtilities_IsDavidKing) == 0x000010, "Wrong size on DBDCharacterUtilities_IsDavidKing");
static_assert(offsetof(DBDCharacterUtilities_IsDavidKing, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsDavidKing::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsDavidKing, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsDavidKing::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsDavidTapp
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsDavidTapp final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsDavidTapp) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsDavidTapp");
static_assert(sizeof(DBDCharacterUtilities_IsDavidTapp) == 0x000010, "Wrong size on DBDCharacterUtilities_IsDavidTapp");
static_assert(offsetof(DBDCharacterUtilities_IsDavidTapp, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsDavidTapp::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsDavidTapp, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsDavidTapp::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsDwightFairfield
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsDwightFairfield final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsDwightFairfield) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsDwightFairfield");
static_assert(sizeof(DBDCharacterUtilities_IsDwightFairfield) == 0x000010, "Wrong size on DBDCharacterUtilities_IsDwightFairfield");
static_assert(offsetof(DBDCharacterUtilities_IsDwightFairfield, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsDwightFairfield::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsDwightFairfield, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsDwightFairfield::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsFengMin
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsFengMin final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsFengMin) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsFengMin");
static_assert(sizeof(DBDCharacterUtilities_IsFengMin) == 0x000010, "Wrong size on DBDCharacterUtilities_IsFengMin");
static_assert(offsetof(DBDCharacterUtilities_IsFengMin, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsFengMin::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsFengMin, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsFengMin::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsInDreamworld
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsInDreamworld final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsInDreamworld) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsInDreamworld");
static_assert(sizeof(DBDCharacterUtilities_IsInDreamworld) == 0x000010, "Wrong size on DBDCharacterUtilities_IsInDreamworld");
static_assert(offsetof(DBDCharacterUtilities_IsInDreamworld, player) == 0x000000, "Member 'DBDCharacterUtilities_IsInDreamworld::player' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsInDreamworld, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsInDreamworld::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsJakePark
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsJakePark final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsJakePark) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsJakePark");
static_assert(sizeof(DBDCharacterUtilities_IsJakePark) == 0x000010, "Wrong size on DBDCharacterUtilities_IsJakePark");
static_assert(offsetof(DBDCharacterUtilities_IsJakePark, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsJakePark::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsJakePark, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsJakePark::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsJaneRomero
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsJaneRomero final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsJaneRomero) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsJaneRomero");
static_assert(sizeof(DBDCharacterUtilities_IsJaneRomero) == 0x000010, "Wrong size on DBDCharacterUtilities_IsJaneRomero");
static_assert(offsetof(DBDCharacterUtilities_IsJaneRomero, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsJaneRomero::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsJaneRomero, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsJaneRomero::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsJeffJohansen
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsJeffJohansen final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsJeffJohansen) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsJeffJohansen");
static_assert(sizeof(DBDCharacterUtilities_IsJeffJohansen) == 0x000010, "Wrong size on DBDCharacterUtilities_IsJeffJohansen");
static_assert(offsetof(DBDCharacterUtilities_IsJeffJohansen, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsJeffJohansen::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsJeffJohansen, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsJeffJohansen::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsKateDenson
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsKateDenson final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsKateDenson) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsKateDenson");
static_assert(sizeof(DBDCharacterUtilities_IsKateDenson) == 0x000010, "Wrong size on DBDCharacterUtilities_IsKateDenson");
static_assert(offsetof(DBDCharacterUtilities_IsKateDenson, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsKateDenson::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsKateDenson, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsKateDenson::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsLaurieStrode
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsLaurieStrode final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsLaurieStrode) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsLaurieStrode");
static_assert(sizeof(DBDCharacterUtilities_IsLaurieStrode) == 0x000010, "Wrong size on DBDCharacterUtilities_IsLaurieStrode");
static_assert(offsetof(DBDCharacterUtilities_IsLaurieStrode, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsLaurieStrode::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsLaurieStrode, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsLaurieStrode::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsMegThomas
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsMegThomas final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsMegThomas) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsMegThomas");
static_assert(sizeof(DBDCharacterUtilities_IsMegThomas) == 0x000010, "Wrong size on DBDCharacterUtilities_IsMegThomas");
static_assert(offsetof(DBDCharacterUtilities_IsMegThomas, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsMegThomas::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsMegThomas, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsMegThomas::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsNancyWheeler
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsNancyWheeler final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsNancyWheeler) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsNancyWheeler");
static_assert(sizeof(DBDCharacterUtilities_IsNancyWheeler) == 0x000010, "Wrong size on DBDCharacterUtilities_IsNancyWheeler");
static_assert(offsetof(DBDCharacterUtilities_IsNancyWheeler, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsNancyWheeler::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsNancyWheeler, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsNancyWheeler::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsNeaKarlsson
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsNeaKarlsson final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsNeaKarlsson) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsNeaKarlsson");
static_assert(sizeof(DBDCharacterUtilities_IsNeaKarlsson) == 0x000010, "Wrong size on DBDCharacterUtilities_IsNeaKarlsson");
static_assert(offsetof(DBDCharacterUtilities_IsNeaKarlsson, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsNeaKarlsson::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsNeaKarlsson, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsNeaKarlsson::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsPlague
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsPlague final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsPlague) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsPlague");
static_assert(sizeof(DBDCharacterUtilities_IsPlague) == 0x000010, "Wrong size on DBDCharacterUtilities_IsPlague");
static_assert(offsetof(DBDCharacterUtilities_IsPlague, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsPlague::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsPlague, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsPlague::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsQuentinSmith
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsQuentinSmith final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsQuentinSmith) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsQuentinSmith");
static_assert(sizeof(DBDCharacterUtilities_IsQuentinSmith) == 0x000010, "Wrong size on DBDCharacterUtilities_IsQuentinSmith");
static_assert(offsetof(DBDCharacterUtilities_IsQuentinSmith, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsQuentinSmith::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsQuentinSmith, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsQuentinSmith::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsSlasherLocallyObserved
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsSlasherLocallyObserved final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsSlasherLocallyObserved) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsSlasherLocallyObserved");
static_assert(sizeof(DBDCharacterUtilities_IsSlasherLocallyObserved) == 0x000010, "Wrong size on DBDCharacterUtilities_IsSlasherLocallyObserved");
static_assert(offsetof(DBDCharacterUtilities_IsSlasherLocallyObserved, worldContextObject) == 0x000000, "Member 'DBDCharacterUtilities_IsSlasherLocallyObserved::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsSlasherLocallyObserved, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsSlasherLocallyObserved::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsSteveHarrington
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsSteveHarrington final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsSteveHarrington) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsSteveHarrington");
static_assert(sizeof(DBDCharacterUtilities_IsSteveHarrington) == 0x000010, "Wrong size on DBDCharacterUtilities_IsSteveHarrington");
static_assert(offsetof(DBDCharacterUtilities_IsSteveHarrington, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsSteveHarrington::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsSteveHarrington, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsSteveHarrington::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheBlight
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheBlight final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheBlight) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheBlight");
static_assert(sizeof(DBDCharacterUtilities_IsTheBlight) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheBlight");
static_assert(offsetof(DBDCharacterUtilities_IsTheBlight, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheBlight::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheBlight, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheBlight::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheCannibal
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheCannibal final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheCannibal) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheCannibal");
static_assert(sizeof(DBDCharacterUtilities_IsTheCannibal) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheCannibal");
static_assert(offsetof(DBDCharacterUtilities_IsTheCannibal, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheCannibal::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheCannibal, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheCannibal::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheClown
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheClown final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheClown) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheClown");
static_assert(sizeof(DBDCharacterUtilities_IsTheClown) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheClown");
static_assert(offsetof(DBDCharacterUtilities_IsTheClown, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheClown::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheClown, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheClown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheDemogorgon
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheDemogorgon final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheDemogorgon) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheDemogorgon");
static_assert(sizeof(DBDCharacterUtilities_IsTheDemogorgon) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheDemogorgon");
static_assert(offsetof(DBDCharacterUtilities_IsTheDemogorgon, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheDemogorgon::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheDemogorgon, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheDemogorgon::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheDoctor
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheDoctor final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheDoctor) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheDoctor");
static_assert(sizeof(DBDCharacterUtilities_IsTheDoctor) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheDoctor");
static_assert(offsetof(DBDCharacterUtilities_IsTheDoctor, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheDoctor::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheDoctor, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheDoctor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheExecutioner
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheExecutioner final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheExecutioner) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheExecutioner");
static_assert(sizeof(DBDCharacterUtilities_IsTheExecutioner) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheExecutioner");
static_assert(offsetof(DBDCharacterUtilities_IsTheExecutioner, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheExecutioner::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheExecutioner, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheExecutioner::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheGhost
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheGhost final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheGhost) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheGhost");
static_assert(sizeof(DBDCharacterUtilities_IsTheGhost) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheGhost");
static_assert(offsetof(DBDCharacterUtilities_IsTheGhost, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheGhost::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheGhost, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheGhost::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheHag
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheHag final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheHag) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheHag");
static_assert(sizeof(DBDCharacterUtilities_IsTheHag) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheHag");
static_assert(offsetof(DBDCharacterUtilities_IsTheHag, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheHag::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheHag, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheHag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheHillBilly
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheHillBilly final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheHillBilly) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheHillBilly");
static_assert(sizeof(DBDCharacterUtilities_IsTheHillBilly) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheHillBilly");
static_assert(offsetof(DBDCharacterUtilities_IsTheHillBilly, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheHillBilly::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheHillBilly, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheHillBilly::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheHuntress
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheHuntress final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheHuntress) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheHuntress");
static_assert(sizeof(DBDCharacterUtilities_IsTheHuntress) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheHuntress");
static_assert(offsetof(DBDCharacterUtilities_IsTheHuntress, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheHuntress::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheHuntress, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheHuntress::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheLegion
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheLegion final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheLegion) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheLegion");
static_assert(sizeof(DBDCharacterUtilities_IsTheLegion) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheLegion");
static_assert(offsetof(DBDCharacterUtilities_IsTheLegion, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheLegion::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheLegion, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheLegion::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheNightmare
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheNightmare final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheNightmare) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheNightmare");
static_assert(sizeof(DBDCharacterUtilities_IsTheNightmare) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheNightmare");
static_assert(offsetof(DBDCharacterUtilities_IsTheNightmare, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheNightmare::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheNightmare, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheNightmare::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheNurse
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheNurse final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheNurse) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheNurse");
static_assert(sizeof(DBDCharacterUtilities_IsTheNurse) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheNurse");
static_assert(offsetof(DBDCharacterUtilities_IsTheNurse, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheNurse::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheNurse, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheNurse::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheOni
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheOni final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheOni) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheOni");
static_assert(sizeof(DBDCharacterUtilities_IsTheOni) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheOni");
static_assert(offsetof(DBDCharacterUtilities_IsTheOni, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheOni::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheOni, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheOni::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsThePig
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsThePig final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsThePig) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsThePig");
static_assert(sizeof(DBDCharacterUtilities_IsThePig) == 0x000010, "Wrong size on DBDCharacterUtilities_IsThePig");
static_assert(offsetof(DBDCharacterUtilities_IsThePig, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsThePig::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsThePig, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsThePig::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheShape
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheShape final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheShape) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheShape");
static_assert(sizeof(DBDCharacterUtilities_IsTheShape) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheShape");
static_assert(offsetof(DBDCharacterUtilities_IsTheShape, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheShape::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheShape, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheShape::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheSpirit
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheSpirit final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheSpirit) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheSpirit");
static_assert(sizeof(DBDCharacterUtilities_IsTheSpirit) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheSpirit");
static_assert(offsetof(DBDCharacterUtilities_IsTheSpirit, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheSpirit::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheSpirit, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheSpirit::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheTrapper
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheTrapper final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheTrapper) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheTrapper");
static_assert(sizeof(DBDCharacterUtilities_IsTheTrapper) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheTrapper");
static_assert(offsetof(DBDCharacterUtilities_IsTheTrapper, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheTrapper::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheTrapper, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheTrapper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheTrickster
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheTrickster final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheTrickster) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheTrickster");
static_assert(sizeof(DBDCharacterUtilities_IsTheTrickster) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheTrickster");
static_assert(offsetof(DBDCharacterUtilities_IsTheTrickster, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheTrickster::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheTrickster, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheTrickster::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheTwins
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheTwins final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheTwins) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheTwins");
static_assert(sizeof(DBDCharacterUtilities_IsTheTwins) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheTwins");
static_assert(offsetof(DBDCharacterUtilities_IsTheTwins, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheTwins::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheTwins, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheTwins::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheTwins_Brother
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheTwins_Brother final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheTwins_Brother) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheTwins_Brother");
static_assert(sizeof(DBDCharacterUtilities_IsTheTwins_Brother) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheTwins_Brother");
static_assert(offsetof(DBDCharacterUtilities_IsTheTwins_Brother, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheTwins_Brother::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheTwins_Brother, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheTwins_Brother::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheTwins_Sister
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheTwins_Sister final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheTwins_Sister) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheTwins_Sister");
static_assert(sizeof(DBDCharacterUtilities_IsTheTwins_Sister) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheTwins_Sister");
static_assert(offsetof(DBDCharacterUtilities_IsTheTwins_Sister, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheTwins_Sister::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheTwins_Sister, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheTwins_Sister::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheWraith
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheWraith final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheWraith) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheWraith");
static_assert(sizeof(DBDCharacterUtilities_IsTheWraith) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheWraith");
static_assert(offsetof(DBDCharacterUtilities_IsTheWraith, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheWraith::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheWraith, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheWraith::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsWilliamBillOverbeck
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsWilliamBillOverbeck final
{
public:
	const class ADBDBasePlayer*                   targetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsWilliamBillOverbeck) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsWilliamBillOverbeck");
static_assert(sizeof(DBDCharacterUtilities_IsWilliamBillOverbeck) == 0x000010, "Wrong size on DBDCharacterUtilities_IsWilliamBillOverbeck");
static_assert(offsetof(DBDCharacterUtilities_IsWilliamBillOverbeck, targetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsWilliamBillOverbeck::targetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsWilliamBillOverbeck, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsWilliamBillOverbeck::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.NatAudioCustomMesh.OnBeginOverlapAudioMesh
// 0x00B0 (0x00B0 - 0x0000)
struct NatAudioCustomMesh_OnBeginOverlapAudioMesh final
{
public:
	class UPrimitiveComponent*                    overlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NatAudioCustomMesh_OnBeginOverlapAudioMesh) == 0x000008, "Wrong alignment on NatAudioCustomMesh_OnBeginOverlapAudioMesh");
static_assert(sizeof(NatAudioCustomMesh_OnBeginOverlapAudioMesh) == 0x0000B0, "Wrong size on NatAudioCustomMesh_OnBeginOverlapAudioMesh");
static_assert(offsetof(NatAudioCustomMesh_OnBeginOverlapAudioMesh, overlappedComponent) == 0x000000, "Member 'NatAudioCustomMesh_OnBeginOverlapAudioMesh::overlappedComponent' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnBeginOverlapAudioMesh, otherActor) == 0x000008, "Member 'NatAudioCustomMesh_OnBeginOverlapAudioMesh::otherActor' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnBeginOverlapAudioMesh, otherComp) == 0x000010, "Member 'NatAudioCustomMesh_OnBeginOverlapAudioMesh::otherComp' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnBeginOverlapAudioMesh, otherBodyIndex) == 0x000018, "Member 'NatAudioCustomMesh_OnBeginOverlapAudioMesh::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnBeginOverlapAudioMesh, bFromSweep) == 0x00001C, "Member 'NatAudioCustomMesh_OnBeginOverlapAudioMesh::bFromSweep' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnBeginOverlapAudioMesh, sweepResult) == 0x000020, "Member 'NatAudioCustomMesh_OnBeginOverlapAudioMesh::sweepResult' has a wrong offset!");

// Function DeadByDaylight.NatAudioCustomMesh.OnEndOverlapAudioMesh
// 0x0020 (0x0020 - 0x0000)
struct NatAudioCustomMesh_OnEndOverlapAudioMesh final
{
public:
	class UPrimitiveComponent*                    overlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NatAudioCustomMesh_OnEndOverlapAudioMesh) == 0x000008, "Wrong alignment on NatAudioCustomMesh_OnEndOverlapAudioMesh");
static_assert(sizeof(NatAudioCustomMesh_OnEndOverlapAudioMesh) == 0x000020, "Wrong size on NatAudioCustomMesh_OnEndOverlapAudioMesh");
static_assert(offsetof(NatAudioCustomMesh_OnEndOverlapAudioMesh, overlappedComponent) == 0x000000, "Member 'NatAudioCustomMesh_OnEndOverlapAudioMesh::overlappedComponent' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnEndOverlapAudioMesh, otherActor) == 0x000008, "Member 'NatAudioCustomMesh_OnEndOverlapAudioMesh::otherActor' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnEndOverlapAudioMesh, otherComp) == 0x000010, "Member 'NatAudioCustomMesh_OnEndOverlapAudioMesh::otherComp' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnEndOverlapAudioMesh, otherBodyIndex) == 0x000018, "Member 'NatAudioCustomMesh_OnEndOverlapAudioMesh::otherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.DBDClientSyncer.Multicast_SyncActorToSpawnLocally
// 0x0018 (0x0018 - 0x0000)
struct DBDClientSyncer_Multicast_SyncActorToSpawnLocally final
{
public:
	TArray<struct FSpawnInfo>                     spawnInfos;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         startIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDClientSyncer_Multicast_SyncActorToSpawnLocally) == 0x000008, "Wrong alignment on DBDClientSyncer_Multicast_SyncActorToSpawnLocally");
static_assert(sizeof(DBDClientSyncer_Multicast_SyncActorToSpawnLocally) == 0x000018, "Wrong size on DBDClientSyncer_Multicast_SyncActorToSpawnLocally");
static_assert(offsetof(DBDClientSyncer_Multicast_SyncActorToSpawnLocally, spawnInfos) == 0x000000, "Member 'DBDClientSyncer_Multicast_SyncActorToSpawnLocally::spawnInfos' has a wrong offset!");
static_assert(offsetof(DBDClientSyncer_Multicast_SyncActorToSpawnLocally, startIndex) == 0x000010, "Member 'DBDClientSyncer_Multicast_SyncActorToSpawnLocally::startIndex' has a wrong offset!");

// Function DeadByDaylight.DBDClientSyncer.Multicast_SyncFinalLocallySpawnCount
// 0x0004 (0x0004 - 0x0000)
struct DBDClientSyncer_Multicast_SyncFinalLocallySpawnCount final
{
public:
	int32                                         numLocal;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDClientSyncer_Multicast_SyncFinalLocallySpawnCount) == 0x000004, "Wrong alignment on DBDClientSyncer_Multicast_SyncFinalLocallySpawnCount");
static_assert(sizeof(DBDClientSyncer_Multicast_SyncFinalLocallySpawnCount) == 0x000004, "Wrong size on DBDClientSyncer_Multicast_SyncFinalLocallySpawnCount");
static_assert(offsetof(DBDClientSyncer_Multicast_SyncFinalLocallySpawnCount, numLocal) == 0x000000, "Member 'DBDClientSyncer_Multicast_SyncFinalLocallySpawnCount::numLocal' has a wrong offset!");

// Function DeadByDaylight.DBDClientSyncer.Multicast_SyncSeed
// 0x0028 (0x0028 - 0x0000)
struct DBDClientSyncer_Multicast_SyncSeed final
{
public:
	int32                                         seed;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperTileMap*                          tileMap;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         generationPlayerCount;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 premadeMap;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDClientSyncer_Multicast_SyncSeed) == 0x000008, "Wrong alignment on DBDClientSyncer_Multicast_SyncSeed");
static_assert(sizeof(DBDClientSyncer_Multicast_SyncSeed) == 0x000028, "Wrong size on DBDClientSyncer_Multicast_SyncSeed");
static_assert(offsetof(DBDClientSyncer_Multicast_SyncSeed, seed) == 0x000000, "Member 'DBDClientSyncer_Multicast_SyncSeed::seed' has a wrong offset!");
static_assert(offsetof(DBDClientSyncer_Multicast_SyncSeed, tileMap) == 0x000008, "Member 'DBDClientSyncer_Multicast_SyncSeed::tileMap' has a wrong offset!");
static_assert(offsetof(DBDClientSyncer_Multicast_SyncSeed, generationPlayerCount) == 0x000010, "Member 'DBDClientSyncer_Multicast_SyncSeed::generationPlayerCount' has a wrong offset!");
static_assert(offsetof(DBDClientSyncer_Multicast_SyncSeed, premadeMap) == 0x000018, "Member 'DBDClientSyncer_Multicast_SyncSeed::premadeMap' has a wrong offset!");

// Function DeadByDaylight.ColorBlindFunctionLibrary.CallOnColorBlindSettingsChange
// 0x0008 (0x0008 - 0x0000)
struct ColorBlindFunctionLibrary_CallOnColorBlindSettingsChange final
{
public:
	class AActor*                                 callingActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColorBlindFunctionLibrary_CallOnColorBlindSettingsChange) == 0x000008, "Wrong alignment on ColorBlindFunctionLibrary_CallOnColorBlindSettingsChange");
static_assert(sizeof(ColorBlindFunctionLibrary_CallOnColorBlindSettingsChange) == 0x000008, "Wrong size on ColorBlindFunctionLibrary_CallOnColorBlindSettingsChange");
static_assert(offsetof(ColorBlindFunctionLibrary_CallOnColorBlindSettingsChange, callingActor) == 0x000000, "Member 'ColorBlindFunctionLibrary_CallOnColorBlindSettingsChange::callingActor' has a wrong offset!");

// Function DeadByDaylight.LightingHelper.DBD_ModifyExposure
// 0x0004 (0x0004 - 0x0000)
struct LightingHelper_DBD_ModifyExposure final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingHelper_DBD_ModifyExposure) == 0x000004, "Wrong alignment on LightingHelper_DBD_ModifyExposure");
static_assert(sizeof(LightingHelper_DBD_ModifyExposure) == 0x000004, "Wrong size on LightingHelper_DBD_ModifyExposure");
static_assert(offsetof(LightingHelper_DBD_ModifyExposure, value) == 0x000000, "Member 'LightingHelper_DBD_ModifyExposure::value' has a wrong offset!");

// Function DeadByDaylight.LightingHelper.GetInitialComponentState
// 0x0018 (0x0018 - 0x0000)
struct LightingHelper_GetInitialComponentState final
{
public:
	class FName                                   componentName;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingHelper_GetInitialComponentState) == 0x000008, "Wrong alignment on LightingHelper_GetInitialComponentState");
static_assert(sizeof(LightingHelper_GetInitialComponentState) == 0x000018, "Wrong size on LightingHelper_GetInitialComponentState");
static_assert(offsetof(LightingHelper_GetInitialComponentState, componentName) == 0x000000, "Member 'LightingHelper_GetInitialComponentState::componentName' has a wrong offset!");
static_assert(offsetof(LightingHelper_GetInitialComponentState, ReturnValue) == 0x000010, "Member 'LightingHelper_GetInitialComponentState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LightingHelper.GetSourceLevelLightingClass
// 0x0008 (0x0008 - 0x0000)
struct LightingHelper_GetSourceLevelLightingClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingHelper_GetSourceLevelLightingClass) == 0x000008, "Wrong alignment on LightingHelper_GetSourceLevelLightingClass");
static_assert(sizeof(LightingHelper_GetSourceLevelLightingClass) == 0x000008, "Wrong size on LightingHelper_GetSourceLevelLightingClass");
static_assert(offsetof(LightingHelper_GetSourceLevelLightingClass, ReturnValue) == 0x000000, "Member 'LightingHelper_GetSourceLevelLightingClass::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LightingHelper.GetTextureCube
// 0x0018 (0x0018 - 0x0000)
struct LightingHelper_GetTextureCube final
{
public:
	class FName                                   mapTheme;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingHelper_GetTextureCube) == 0x000008, "Wrong alignment on LightingHelper_GetTextureCube");
static_assert(sizeof(LightingHelper_GetTextureCube) == 0x000018, "Wrong size on LightingHelper_GetTextureCube");
static_assert(offsetof(LightingHelper_GetTextureCube, mapTheme) == 0x000000, "Member 'LightingHelper_GetTextureCube::mapTheme' has a wrong offset!");
static_assert(offsetof(LightingHelper_GetTextureCube, ReturnValue) == 0x000010, "Member 'LightingHelper_GetTextureCube::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LightingHelper.ToggleDreamworldLighting
// 0x0001 (0x0001 - 0x0000)
struct LightingHelper_ToggleDreamworldLighting final
{
public:
	bool                                          bActivateDreamworld;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingHelper_ToggleDreamworldLighting) == 0x000001, "Wrong alignment on LightingHelper_ToggleDreamworldLighting");
static_assert(sizeof(LightingHelper_ToggleDreamworldLighting) == 0x000001, "Wrong size on LightingHelper_ToggleDreamworldLighting");
static_assert(offsetof(LightingHelper_ToggleDreamworldLighting, bActivateDreamworld) == 0x000000, "Member 'LightingHelper_ToggleDreamworldLighting::bActivateDreamworld' has a wrong offset!");

// Function DeadByDaylight.RitualEvaluatorBase.EvaluateEvent
// 0x0038 (0x0038 - 0x0000)
struct RitualEvaluatorBase_EvaluateEvent final
{
public:
	struct FRitualEvent                           ritualEvent;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RitualEvaluatorBase_EvaluateEvent) == 0x000008, "Wrong alignment on RitualEvaluatorBase_EvaluateEvent");
static_assert(sizeof(RitualEvaluatorBase_EvaluateEvent) == 0x000038, "Wrong size on RitualEvaluatorBase_EvaluateEvent");
static_assert(offsetof(RitualEvaluatorBase_EvaluateEvent, ritualEvent) == 0x000000, "Member 'RitualEvaluatorBase_EvaluateEvent::ritualEvent' has a wrong offset!");
static_assert(offsetof(RitualEvaluatorBase_EvaluateEvent, ReturnValue) == 0x000030, "Member 'RitualEvaluatorBase_EvaluateEvent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDebugInputComponent.DBD_ItsAlive
// 0x0001 (0x0001 - 0x0000)
struct DBDDebugInputComponent_DBD_ItsAlive final
{
public:
	bool                                          aliveEnabled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDebugInputComponent_DBD_ItsAlive) == 0x000001, "Wrong alignment on DBDDebugInputComponent_DBD_ItsAlive");
static_assert(sizeof(DBDDebugInputComponent_DBD_ItsAlive) == 0x000001, "Wrong size on DBDDebugInputComponent_DBD_ItsAlive");
static_assert(offsetof(DBDDebugInputComponent_DBD_ItsAlive, aliveEnabled) == 0x000000, "Member 'DBDDebugInputComponent_DBD_ItsAlive::aliveEnabled' has a wrong offset!");

// Function DeadByDaylight.Locker.Authority_EnableOtherInteractors
// 0x0010 (0x0010 - 0x0000)
struct Locker_Authority_EnableOtherInteractors final
{
public:
	const class UInteractor*                      usableInteractor;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          usable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Locker_Authority_EnableOtherInteractors) == 0x000008, "Wrong alignment on Locker_Authority_EnableOtherInteractors");
static_assert(sizeof(Locker_Authority_EnableOtherInteractors) == 0x000010, "Wrong size on Locker_Authority_EnableOtherInteractors");
static_assert(offsetof(Locker_Authority_EnableOtherInteractors, usableInteractor) == 0x000000, "Member 'Locker_Authority_EnableOtherInteractors::usableInteractor' has a wrong offset!");
static_assert(offsetof(Locker_Authority_EnableOtherInteractors, usable) == 0x000008, "Member 'Locker_Authority_EnableOtherInteractors::usable' has a wrong offset!");

// Function DeadByDaylight.Locker.Authority_ReportOpenLockerNoiseEventToAI
// 0x0001 (0x0001 - 0x0000)
struct Locker_Authority_ReportOpenLockerNoiseEventToAI final
{
public:
	bool                                          fastActivation;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_Authority_ReportOpenLockerNoiseEventToAI) == 0x000001, "Wrong alignment on Locker_Authority_ReportOpenLockerNoiseEventToAI");
static_assert(sizeof(Locker_Authority_ReportOpenLockerNoiseEventToAI) == 0x000001, "Wrong size on Locker_Authority_ReportOpenLockerNoiseEventToAI");
static_assert(offsetof(Locker_Authority_ReportOpenLockerNoiseEventToAI, fastActivation) == 0x000000, "Member 'Locker_Authority_ReportOpenLockerNoiseEventToAI::fastActivation' has a wrong offset!");

// Function DeadByDaylight.Locker.OnSurvivorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct Locker_OnSurvivorEndPlay final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                endPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Locker_OnSurvivorEndPlay) == 0x000008, "Wrong alignment on Locker_OnSurvivorEndPlay");
static_assert(sizeof(Locker_OnSurvivorEndPlay) == 0x000010, "Wrong size on Locker_OnSurvivorEndPlay");
static_assert(offsetof(Locker_OnSurvivorEndPlay, actor) == 0x000000, "Member 'Locker_OnSurvivorEndPlay::actor' has a wrong offset!");
static_assert(offsetof(Locker_OnSurvivorEndPlay, endPlayReason) == 0x000008, "Member 'Locker_OnSurvivorEndPlay::endPlayReason' has a wrong offset!");

// Function DeadByDaylight.Locker.OnSurvivorHealthChanged
// 0x0002 (0x0002 - 0x0000)
struct Locker_OnSurvivorHealthChanged final
{
public:
	ECamperDamageState                            before;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            after;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_OnSurvivorHealthChanged) == 0x000001, "Wrong alignment on Locker_OnSurvivorHealthChanged");
static_assert(sizeof(Locker_OnSurvivorHealthChanged) == 0x000002, "Wrong size on Locker_OnSurvivorHealthChanged");
static_assert(offsetof(Locker_OnSurvivorHealthChanged, before) == 0x000000, "Member 'Locker_OnSurvivorHealthChanged::before' has a wrong offset!");
static_assert(offsetof(Locker_OnSurvivorHealthChanged, after) == 0x000001, "Member 'Locker_OnSurvivorHealthChanged::after' has a wrong offset!");

// Function DeadByDaylight.Locker.SetPlayerOpeningLocker
// 0x0008 (0x0008 - 0x0000)
struct Locker_SetPlayerOpeningLocker final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_SetPlayerOpeningLocker) == 0x000008, "Wrong alignment on Locker_SetPlayerOpeningLocker");
static_assert(sizeof(Locker_SetPlayerOpeningLocker) == 0x000008, "Wrong size on Locker_SetPlayerOpeningLocker");
static_assert(offsetof(Locker_SetPlayerOpeningLocker, player) == 0x000000, "Member 'Locker_SetPlayerOpeningLocker::player' has a wrong offset!");

// Function DeadByDaylight.Locker.SetSurvivorInLocker
// 0x0008 (0x0008 - 0x0000)
struct Locker_SetSurvivorInLocker final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_SetSurvivorInLocker) == 0x000008, "Wrong alignment on Locker_SetSurvivorInLocker");
static_assert(sizeof(Locker_SetSurvivorInLocker) == 0x000008, "Wrong size on Locker_SetSurvivorInLocker");
static_assert(offsetof(Locker_SetSurvivorInLocker, survivor) == 0x000000, "Member 'Locker_SetSurvivorInLocker::survivor' has a wrong offset!");

// Function DeadByDaylight.Locker.StopMinNearOutlineDistLerp
// 0x0008 (0x0008 - 0x0000)
struct Locker_StopMinNearOutlineDistLerp final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_StopMinNearOutlineDistLerp) == 0x000008, "Wrong alignment on Locker_StopMinNearOutlineDistLerp");
static_assert(sizeof(Locker_StopMinNearOutlineDistLerp) == 0x000008, "Wrong size on Locker_StopMinNearOutlineDistLerp");
static_assert(offsetof(Locker_StopMinNearOutlineDistLerp, player) == 0x000000, "Member 'Locker_StopMinNearOutlineDistLerp::player' has a wrong offset!");

// Function DeadByDaylight.Locker.GetChildInteractionActor
// 0x0008 (0x0008 - 0x0000)
struct Locker_GetChildInteractionActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_GetChildInteractionActor) == 0x000008, "Wrong alignment on Locker_GetChildInteractionActor");
static_assert(sizeof(Locker_GetChildInteractionActor) == 0x000008, "Wrong size on Locker_GetChildInteractionActor");
static_assert(offsetof(Locker_GetChildInteractionActor, ReturnValue) == 0x000000, "Member 'Locker_GetChildInteractionActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.GetInteractor
// 0x0008 (0x0008 - 0x0000)
struct Locker_GetInteractor final
{
public:
	class UInteractor*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_GetInteractor) == 0x000008, "Wrong alignment on Locker_GetInteractor");
static_assert(sizeof(Locker_GetInteractor) == 0x000008, "Wrong size on Locker_GetInteractor");
static_assert(offsetof(Locker_GetInteractor, ReturnValue) == 0x000000, "Member 'Locker_GetInteractor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.GetObjectState
// 0x0008 (0x0008 - 0x0000)
struct Locker_GetObjectState final
{
public:
	class UGameplayTagContainerComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_GetObjectState) == 0x000008, "Wrong alignment on Locker_GetObjectState");
static_assert(sizeof(Locker_GetObjectState) == 0x000008, "Wrong size on Locker_GetObjectState");
static_assert(offsetof(Locker_GetObjectState, ReturnValue) == 0x000000, "Member 'Locker_GetObjectState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.GetPlayerInLocker
// 0x0008 (0x0008 - 0x0000)
struct Locker_GetPlayerInLocker final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_GetPlayerInLocker) == 0x000008, "Wrong alignment on Locker_GetPlayerInLocker");
static_assert(sizeof(Locker_GetPlayerInLocker) == 0x000008, "Wrong size on Locker_GetPlayerInLocker");
static_assert(offsetof(Locker_GetPlayerInLocker, ReturnValue) == 0x000000, "Member 'Locker_GetPlayerInLocker::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.GetStunZone
// 0x0008 (0x0008 - 0x0000)
struct Locker_GetStunZone final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_GetStunZone) == 0x000008, "Wrong alignment on Locker_GetStunZone");
static_assert(sizeof(Locker_GetStunZone) == 0x000008, "Wrong size on Locker_GetStunZone");
static_assert(offsetof(Locker_GetStunZone, ReturnValue) == 0x000000, "Member 'Locker_GetStunZone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.GetSurvivorInLocker
// 0x0008 (0x0008 - 0x0000)
struct Locker_GetSurvivorInLocker final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_GetSurvivorInLocker) == 0x000008, "Wrong alignment on Locker_GetSurvivorInLocker");
static_assert(sizeof(Locker_GetSurvivorInLocker) == 0x000008, "Wrong size on Locker_GetSurvivorInLocker");
static_assert(offsetof(Locker_GetSurvivorInLocker, ReturnValue) == 0x000000, "Member 'Locker_GetSurvivorInLocker::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.IsFacingLocker
// 0x0010 (0x0010 - 0x0000)
struct Locker_IsFacingLocker final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         toleranceDegreeAngle;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Locker_IsFacingLocker) == 0x000008, "Wrong alignment on Locker_IsFacingLocker");
static_assert(sizeof(Locker_IsFacingLocker) == 0x000010, "Wrong size on Locker_IsFacingLocker");
static_assert(offsetof(Locker_IsFacingLocker, player) == 0x000000, "Member 'Locker_IsFacingLocker::player' has a wrong offset!");
static_assert(offsetof(Locker_IsFacingLocker, toleranceDegreeAngle) == 0x000008, "Member 'Locker_IsFacingLocker::toleranceDegreeAngle' has a wrong offset!");
static_assert(offsetof(Locker_IsFacingLocker, ReturnValue) == 0x00000C, "Member 'Locker_IsFacingLocker::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.IsOccupied
// 0x0001 (0x0001 - 0x0000)
struct Locker_IsOccupied final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_IsOccupied) == 0x000001, "Wrong alignment on Locker_IsOccupied");
static_assert(sizeof(Locker_IsOccupied) == 0x000001, "Wrong size on Locker_IsOccupied");
static_assert(offsetof(Locker_IsOccupied, ReturnValue) == 0x000000, "Member 'Locker_IsOccupied::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkCollectionComponent.OnRep_Array
// 0x0010 (0x0010 - 0x0000)
struct PerkCollectionComponent_OnRep_Array final
{
public:
	TArray<class UPerk*>                          oldArray;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkCollectionComponent_OnRep_Array) == 0x000008, "Wrong alignment on PerkCollectionComponent_OnRep_Array");
static_assert(sizeof(PerkCollectionComponent_OnRep_Array) == 0x000010, "Wrong size on PerkCollectionComponent_OnRep_Array");
static_assert(offsetof(PerkCollectionComponent_OnRep_Array, oldArray) == 0x000000, "Member 'PerkCollectionComponent_OnRep_Array::oldArray' has a wrong offset!");

// Function DeadByDaylight.DBDGameEventUtilities.Authority_AccumulateOngoingGameEvent
// 0x0040 (0x0040 - 0x0000)
struct DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           gameEventType;                                     // 0x0008(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             instigator;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 target;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         customValue;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ongoingWaitTime;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                customObjectParameter;                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         customIntValue;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent) == 0x000008, "Wrong alignment on DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent");
static_assert(sizeof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent) == 0x000040, "Wrong size on DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, worldContextObject) == 0x000000, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, gameEventType) == 0x000008, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::gameEventType' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, instigator) == 0x000018, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::instigator' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, target) == 0x000020, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::target' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, customValue) == 0x000028, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::customValue' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, ongoingWaitTime) == 0x00002C, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::ongoingWaitTime' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, customObjectParameter) == 0x000030, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::customObjectParameter' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, customIntValue) == 0x000038, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::customIntValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameEventUtilities.Authority_DispatcherFireGameEvent
// 0x0040 (0x0040 - 0x0000)
struct DBDGameEventUtilities_Authority_DispatcherFireGameEvent final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           gameEventType;                                     // 0x0008(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          broadcastOverNetwork;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             instigator;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 target;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         customValue;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                customObjectParameter;                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         customIntValue;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent) == 0x000008, "Wrong alignment on DBDGameEventUtilities_Authority_DispatcherFireGameEvent");
static_assert(sizeof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent) == 0x000040, "Wrong size on DBDGameEventUtilities_Authority_DispatcherFireGameEvent");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, worldContextObject) == 0x000000, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, gameEventType) == 0x000008, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::gameEventType' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, broadcastOverNetwork) == 0x000014, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::broadcastOverNetwork' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, instigator) == 0x000018, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::instigator' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, target) == 0x000020, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::target' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, customValue) == 0x000028, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::customValue' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, customObjectParameter) == 0x000030, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::customObjectParameter' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, customIntValue) == 0x000038, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::customIntValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameEventUtilities.DispatcherFireGameEvent
// 0x0040 (0x0040 - 0x0000)
struct DBDGameEventUtilities_DispatcherFireGameEvent final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           gameEventType;                                     // 0x0008(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          broadcastOverNetwork;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             instigator;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 target;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         customValue;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                customObjectParameter;                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         customIntValue;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameEventUtilities_DispatcherFireGameEvent) == 0x000008, "Wrong alignment on DBDGameEventUtilities_DispatcherFireGameEvent");
static_assert(sizeof(DBDGameEventUtilities_DispatcherFireGameEvent) == 0x000040, "Wrong size on DBDGameEventUtilities_DispatcherFireGameEvent");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, worldContextObject) == 0x000000, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, gameEventType) == 0x000008, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::gameEventType' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, broadcastOverNetwork) == 0x000014, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::broadcastOverNetwork' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, instigator) == 0x000018, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::instigator' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, target) == 0x000020, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::target' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, customValue) == 0x000028, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::customValue' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, customObjectParameter) == 0x000030, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::customObjectParameter' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, customIntValue) == 0x000038, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::customIntValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameEventUtilities.LocallyDispatchGameEvent
// 0x0040 (0x0040 - 0x0000)
struct DBDGameEventUtilities_LocallyDispatchGameEvent final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           gameEventType;                                     // 0x0008(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             instigator;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 target;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         customValue;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                customObjectParameter;                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         customIntValue;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameEventUtilities_LocallyDispatchGameEvent) == 0x000008, "Wrong alignment on DBDGameEventUtilities_LocallyDispatchGameEvent");
static_assert(sizeof(DBDGameEventUtilities_LocallyDispatchGameEvent) == 0x000040, "Wrong size on DBDGameEventUtilities_LocallyDispatchGameEvent");
static_assert(offsetof(DBDGameEventUtilities_LocallyDispatchGameEvent, worldContextObject) == 0x000000, "Member 'DBDGameEventUtilities_LocallyDispatchGameEvent::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_LocallyDispatchGameEvent, gameEventType) == 0x000008, "Member 'DBDGameEventUtilities_LocallyDispatchGameEvent::gameEventType' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_LocallyDispatchGameEvent, instigator) == 0x000018, "Member 'DBDGameEventUtilities_LocallyDispatchGameEvent::instigator' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_LocallyDispatchGameEvent, target) == 0x000020, "Member 'DBDGameEventUtilities_LocallyDispatchGameEvent::target' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_LocallyDispatchGameEvent, customValue) == 0x000028, "Member 'DBDGameEventUtilities_LocallyDispatchGameEvent::customValue' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_LocallyDispatchGameEvent, customObjectParameter) == 0x000030, "Member 'DBDGameEventUtilities_LocallyDispatchGameEvent::customObjectParameter' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_LocallyDispatchGameEvent, customIntValue) == 0x000038, "Member 'DBDGameEventUtilities_LocallyDispatchGameEvent::customIntValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameEventUtilities.RemotelyDispatchGameEvent
// 0x0040 (0x0040 - 0x0000)
struct DBDGameEventUtilities_RemotelyDispatchGameEvent final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           gameEventType;                                     // 0x0008(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             instigator;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 target;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         customValue;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                customObjectParameter;                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         customIntValue;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameEventUtilities_RemotelyDispatchGameEvent) == 0x000008, "Wrong alignment on DBDGameEventUtilities_RemotelyDispatchGameEvent");
static_assert(sizeof(DBDGameEventUtilities_RemotelyDispatchGameEvent) == 0x000040, "Wrong size on DBDGameEventUtilities_RemotelyDispatchGameEvent");
static_assert(offsetof(DBDGameEventUtilities_RemotelyDispatchGameEvent, worldContextObject) == 0x000000, "Member 'DBDGameEventUtilities_RemotelyDispatchGameEvent::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_RemotelyDispatchGameEvent, gameEventType) == 0x000008, "Member 'DBDGameEventUtilities_RemotelyDispatchGameEvent::gameEventType' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_RemotelyDispatchGameEvent, instigator) == 0x000018, "Member 'DBDGameEventUtilities_RemotelyDispatchGameEvent::instigator' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_RemotelyDispatchGameEvent, target) == 0x000020, "Member 'DBDGameEventUtilities_RemotelyDispatchGameEvent::target' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_RemotelyDispatchGameEvent, customValue) == 0x000028, "Member 'DBDGameEventUtilities_RemotelyDispatchGameEvent::customValue' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_RemotelyDispatchGameEvent, customObjectParameter) == 0x000030, "Member 'DBDGameEventUtilities_RemotelyDispatchGameEvent::customObjectParameter' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_RemotelyDispatchGameEvent, customIntValue) == 0x000038, "Member 'DBDGameEventUtilities_RemotelyDispatchGameEvent::customIntValue' has a wrong offset!");

// Function DeadByDaylight.PerkSoundHudIcon.ActivatePerk
// 0x0004 (0x0004 - 0x0000)
struct PerkSoundHudIcon_ActivatePerk final
{
public:
	float                                         percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkSoundHudIcon_ActivatePerk) == 0x000004, "Wrong alignment on PerkSoundHudIcon_ActivatePerk");
static_assert(sizeof(PerkSoundHudIcon_ActivatePerk) == 0x000004, "Wrong size on PerkSoundHudIcon_ActivatePerk");
static_assert(offsetof(PerkSoundHudIcon_ActivatePerk, percentage) == 0x000000, "Member 'PerkSoundHudIcon_ActivatePerk::percentage' has a wrong offset!");

// Function DeadByDaylight.PerkSoundHudIconSporadic.NativeTick
// 0x003C (0x003C - 0x0000)
struct PerkSoundHudIconSporadic_NativeTick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkSoundHudIconSporadic_NativeTick) == 0x000004, "Wrong alignment on PerkSoundHudIconSporadic_NativeTick");
static_assert(sizeof(PerkSoundHudIconSporadic_NativeTick) == 0x00003C, "Wrong size on PerkSoundHudIconSporadic_NativeTick");
static_assert(offsetof(PerkSoundHudIconSporadic_NativeTick, MyGeometry) == 0x000000, "Member 'PerkSoundHudIconSporadic_NativeTick::MyGeometry' has a wrong offset!");
static_assert(offsetof(PerkSoundHudIconSporadic_NativeTick, DeltaTime) == 0x000038, "Member 'PerkSoundHudIconSporadic_NativeTick::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.AddActorKnowledgeCollection
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_AddActorKnowledgeCollection final
{
public:
	class UActorKnowledgeCollection*              collection;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_AddActorKnowledgeCollection) == 0x000008, "Wrong alignment on DBDGameInstance_AddActorKnowledgeCollection");
static_assert(sizeof(DBDGameInstance_AddActorKnowledgeCollection) == 0x000008, "Wrong size on DBDGameInstance_AddActorKnowledgeCollection");
static_assert(offsetof(DBDGameInstance_AddActorKnowledgeCollection, collection) == 0x000000, "Member 'DBDGameInstance_AddActorKnowledgeCollection::collection' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.Authority_SimulatePerks
// 0x0018 (0x0018 - 0x0000)
struct DBDGameInstance_Authority_SimulatePerks final
{
public:
	TArray<class FName>                           perks;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameInstance_Authority_SimulatePerks) == 0x000008, "Wrong alignment on DBDGameInstance_Authority_SimulatePerks");
static_assert(sizeof(DBDGameInstance_Authority_SimulatePerks) == 0x000018, "Wrong size on DBDGameInstance_Authority_SimulatePerks");
static_assert(offsetof(DBDGameInstance_Authority_SimulatePerks, perks) == 0x000000, "Member 'DBDGameInstance_Authority_SimulatePerks::perks' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_Authority_SimulatePerks, level) == 0x000010, "Member 'DBDGameInstance_Authority_SimulatePerks::level' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.BeginLoadingScreen
// 0x0010 (0x0010 - 0x0000)
struct DBDGameInstance_BeginLoadingScreen final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_BeginLoadingScreen) == 0x000008, "Wrong alignment on DBDGameInstance_BeginLoadingScreen");
static_assert(sizeof(DBDGameInstance_BeginLoadingScreen) == 0x000010, "Wrong size on DBDGameInstance_BeginLoadingScreen");
static_assert(offsetof(DBDGameInstance_BeginLoadingScreen, MapName) == 0x000000, "Member 'DBDGameInstance_BeginLoadingScreen::MapName' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_ApplyMist
// 0x0004 (0x0004 - 0x0000)
struct DBDGameInstance_DBD_ApplyMist final
{
public:
	float                                         fogModifier;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_ApplyMist) == 0x000004, "Wrong alignment on DBDGameInstance_DBD_ApplyMist");
static_assert(sizeof(DBDGameInstance_DBD_ApplyMist) == 0x000004, "Wrong size on DBDGameInstance_DBD_ApplyMist");
static_assert(offsetof(DBDGameInstance_DBD_ApplyMist, fogModifier) == 0x000000, "Member 'DBDGameInstance_DBD_ApplyMist::fogModifier' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_ChangeSteamOverlayPosition
// 0x000C (0x000C - 0x0000)
struct DBDGameInstance_DBD_ChangeSteamOverlayPosition final
{
public:
	int32                                         position;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         verticalOffset;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         horizontalOffset;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_ChangeSteamOverlayPosition) == 0x000004, "Wrong alignment on DBDGameInstance_DBD_ChangeSteamOverlayPosition");
static_assert(sizeof(DBDGameInstance_DBD_ChangeSteamOverlayPosition) == 0x00000C, "Wrong size on DBDGameInstance_DBD_ChangeSteamOverlayPosition");
static_assert(offsetof(DBDGameInstance_DBD_ChangeSteamOverlayPosition, position) == 0x000000, "Member 'DBDGameInstance_DBD_ChangeSteamOverlayPosition::position' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_ChangeSteamOverlayPosition, verticalOffset) == 0x000004, "Member 'DBDGameInstance_DBD_ChangeSteamOverlayPosition::verticalOffset' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_ChangeSteamOverlayPosition, horizontalOffset) == 0x000008, "Member 'DBDGameInstance_DBD_ChangeSteamOverlayPosition::horizontalOffset' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_CheckForNewContent
// 0x0018 (0x0018 - 0x0000)
struct DBDGameInstance_DBD_CheckForNewContent final
{
public:
	class FString                                 debugGameVersion;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          forceDisplay;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameInstance_DBD_CheckForNewContent) == 0x000008, "Wrong alignment on DBDGameInstance_DBD_CheckForNewContent");
static_assert(sizeof(DBDGameInstance_DBD_CheckForNewContent) == 0x000018, "Wrong size on DBDGameInstance_DBD_CheckForNewContent");
static_assert(offsetof(DBDGameInstance_DBD_CheckForNewContent, debugGameVersion) == 0x000000, "Member 'DBDGameInstance_DBD_CheckForNewContent::debugGameVersion' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_CheckForNewContent, forceDisplay) == 0x000010, "Member 'DBDGameInstance_DBD_CheckForNewContent::forceDisplay' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_DisplayCurrentAchievementStat
// 0x000C (0x000C - 0x0000)
struct DBDGameInstance_DBD_DisplayCurrentAchievementStat final
{
public:
	class FName                                   statName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_DisplayCurrentAchievementStat) == 0x000004, "Wrong alignment on DBDGameInstance_DBD_DisplayCurrentAchievementStat");
static_assert(sizeof(DBDGameInstance_DBD_DisplayCurrentAchievementStat) == 0x00000C, "Wrong size on DBDGameInstance_DBD_DisplayCurrentAchievementStat");
static_assert(offsetof(DBDGameInstance_DBD_DisplayCurrentAchievementStat, statName) == 0x000000, "Member 'DBDGameInstance_DBD_DisplayCurrentAchievementStat::statName' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_ResetCurrentAchievementStat
// 0x0010 (0x0010 - 0x0000)
struct DBDGameInstance_DBD_ResetCurrentAchievementStat final
{
public:
	class FName                                   statName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          andUpload;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameInstance_DBD_ResetCurrentAchievementStat) == 0x000004, "Wrong alignment on DBDGameInstance_DBD_ResetCurrentAchievementStat");
static_assert(sizeof(DBDGameInstance_DBD_ResetCurrentAchievementStat) == 0x000010, "Wrong size on DBDGameInstance_DBD_ResetCurrentAchievementStat");
static_assert(offsetof(DBDGameInstance_DBD_ResetCurrentAchievementStat, statName) == 0x000000, "Member 'DBDGameInstance_DBD_ResetCurrentAchievementStat::statName' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_ResetCurrentAchievementStat, andUpload) == 0x00000C, "Member 'DBDGameInstance_DBD_ResetCurrentAchievementStat::andUpload' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_ResetCurrentAchievementStats
// 0x0002 (0x0002 - 0x0000)
struct DBDGameInstance_DBD_ResetCurrentAchievementStats final
{
public:
	bool                                          andUpload;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          andUpdateData;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_ResetCurrentAchievementStats) == 0x000001, "Wrong alignment on DBDGameInstance_DBD_ResetCurrentAchievementStats");
static_assert(sizeof(DBDGameInstance_DBD_ResetCurrentAchievementStats) == 0x000002, "Wrong size on DBDGameInstance_DBD_ResetCurrentAchievementStats");
static_assert(offsetof(DBDGameInstance_DBD_ResetCurrentAchievementStats, andUpload) == 0x000000, "Member 'DBDGameInstance_DBD_ResetCurrentAchievementStats::andUpload' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_ResetCurrentAchievementStats, andUpdateData) == 0x000001, "Member 'DBDGameInstance_DBD_ResetCurrentAchievementStats::andUpdateData' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_SetFearMarketDate
// 0x0010 (0x0010 - 0x0000)
struct DBDGameInstance_DBD_SetFearMarketDate final
{
public:
	class FString                                 dateString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_SetFearMarketDate) == 0x000008, "Wrong alignment on DBDGameInstance_DBD_SetFearMarketDate");
static_assert(sizeof(DBDGameInstance_DBD_SetFearMarketDate) == 0x000010, "Wrong size on DBDGameInstance_DBD_SetFearMarketDate");
static_assert(offsetof(DBDGameInstance_DBD_SetFearMarketDate, dateString) == 0x000000, "Member 'DBDGameInstance_DBD_SetFearMarketDate::dateString' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_SetStatsUploadEnabled
// 0x0001 (0x0001 - 0x0000)
struct DBDGameInstance_DBD_SetStatsUploadEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_SetStatsUploadEnabled) == 0x000001, "Wrong alignment on DBDGameInstance_DBD_SetStatsUploadEnabled");
static_assert(sizeof(DBDGameInstance_DBD_SetStatsUploadEnabled) == 0x000001, "Wrong size on DBDGameInstance_DBD_SetStatsUploadEnabled");
static_assert(offsetof(DBDGameInstance_DBD_SetStatsUploadEnabled, enabled) == 0x000000, "Member 'DBDGameInstance_DBD_SetStatsUploadEnabled::enabled' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_TestDiceRoll
// 0x000C (0x000C - 0x0000)
struct DBDGameInstance_DBD_TestDiceRoll final
{
public:
	float                                         BaseProbability;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiplicativeModifier;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveModifier;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_TestDiceRoll) == 0x000004, "Wrong alignment on DBDGameInstance_DBD_TestDiceRoll");
static_assert(sizeof(DBDGameInstance_DBD_TestDiceRoll) == 0x00000C, "Wrong size on DBDGameInstance_DBD_TestDiceRoll");
static_assert(offsetof(DBDGameInstance_DBD_TestDiceRoll, BaseProbability) == 0x000000, "Member 'DBDGameInstance_DBD_TestDiceRoll::BaseProbability' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_TestDiceRoll, MultiplicativeModifier) == 0x000004, "Member 'DBDGameInstance_DBD_TestDiceRoll::MultiplicativeModifier' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_TestDiceRoll, AdditiveModifier) == 0x000008, "Member 'DBDGameInstance_DBD_TestDiceRoll::AdditiveModifier' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_TestSaveFile
// 0x0010 (0x0010 - 0x0000)
struct DBDGameInstance_DBD_TestSaveFile final
{
public:
	class FString                                 name;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_TestSaveFile) == 0x000008, "Wrong alignment on DBDGameInstance_DBD_TestSaveFile");
static_assert(sizeof(DBDGameInstance_DBD_TestSaveFile) == 0x000010, "Wrong size on DBDGameInstance_DBD_TestSaveFile");
static_assert(offsetof(DBDGameInstance_DBD_TestSaveFile, name) == 0x000000, "Member 'DBDGameInstance_DBD_TestSaveFile::name' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_TestTickedDiceRoll
// 0x0010 (0x0010 - 0x0000)
struct DBDGameInstance_DBD_TestTickedDiceRoll final
{
public:
	float                                         BaseProbability;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ticks;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiplicativeModifier;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveModifier;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_TestTickedDiceRoll) == 0x000004, "Wrong alignment on DBDGameInstance_DBD_TestTickedDiceRoll");
static_assert(sizeof(DBDGameInstance_DBD_TestTickedDiceRoll) == 0x000010, "Wrong size on DBDGameInstance_DBD_TestTickedDiceRoll");
static_assert(offsetof(DBDGameInstance_DBD_TestTickedDiceRoll, BaseProbability) == 0x000000, "Member 'DBDGameInstance_DBD_TestTickedDiceRoll::BaseProbability' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_TestTickedDiceRoll, ticks) == 0x000004, "Member 'DBDGameInstance_DBD_TestTickedDiceRoll::ticks' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_TestTickedDiceRoll, MultiplicativeModifier) == 0x000008, "Member 'DBDGameInstance_DBD_TestTickedDiceRoll::MultiplicativeModifier' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_TestTickedDiceRoll, AdditiveModifier) == 0x00000C, "Member 'DBDGameInstance_DBD_TestTickedDiceRoll::AdditiveModifier' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.EndLoadingScreen
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_EndLoadingScreen final
{
public:
	class UWorld*                                 loadedWorld;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_EndLoadingScreen) == 0x000008, "Wrong alignment on DBDGameInstance_EndLoadingScreen");
static_assert(sizeof(DBDGameInstance_EndLoadingScreen) == 0x000008, "Wrong size on DBDGameInstance_EndLoadingScreen");
static_assert(offsetof(DBDGameInstance_EndLoadingScreen, loadedWorld) == 0x000000, "Member 'DBDGameInstance_EndLoadingScreen::loadedWorld' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetCharacterDefaultItem
// 0x0010 (0x0010 - 0x0000)
struct DBDGameInstance_GetCharacterDefaultItem final
{
public:
	int32                                         inCharacterIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetCharacterDefaultItem) == 0x000004, "Wrong alignment on DBDGameInstance_GetCharacterDefaultItem");
static_assert(sizeof(DBDGameInstance_GetCharacterDefaultItem) == 0x000010, "Wrong size on DBDGameInstance_GetCharacterDefaultItem");
static_assert(offsetof(DBDGameInstance_GetCharacterDefaultItem, inCharacterIndex) == 0x000000, "Member 'DBDGameInstance_GetCharacterDefaultItem::inCharacterIndex' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_GetCharacterDefaultItem, ReturnValue) == 0x000004, "Member 'DBDGameInstance_GetCharacterDefaultItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetLevelLighting
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetLevelLighting final
{
public:
	class ABaseSky*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetLevelLighting) == 0x000008, "Wrong alignment on DBDGameInstance_GetLevelLighting");
static_assert(sizeof(DBDGameInstance_GetLevelLighting) == 0x000008, "Wrong size on DBDGameInstance_GetLevelLighting");
static_assert(offsetof(DBDGameInstance_GetLevelLighting, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetLevelLighting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetLightingHelper
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetLightingHelper final
{
public:
	class ULightingHelper*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetLightingHelper) == 0x000008, "Wrong alignment on DBDGameInstance_GetLightingHelper");
static_assert(sizeof(DBDGameInstance_GetLightingHelper) == 0x000008, "Wrong size on DBDGameInstance_GetLightingHelper");
static_assert(offsetof(DBDGameInstance_GetLightingHelper, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetLightingHelper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetLightInterpolator
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetLightInterpolator final
{
public:
	class ULightingInterpolator*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetLightInterpolator) == 0x000008, "Wrong alignment on DBDGameInstance_GetLightInterpolator");
static_assert(sizeof(DBDGameInstance_GetLightInterpolator) == 0x000008, "Wrong size on DBDGameInstance_GetLightInterpolator");
static_assert(offsetof(DBDGameInstance_GetLightInterpolator, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetLightInterpolator::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GotoSplashScreen
// 0x0001 (0x0001 - 0x0000)
struct DBDGameInstance_GotoSplashScreen final
{
public:
	bool                                          showDefaultDialogueOnSplashScreen;                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GotoSplashScreen) == 0x000001, "Wrong alignment on DBDGameInstance_GotoSplashScreen");
static_assert(sizeof(DBDGameInstance_GotoSplashScreen) == 0x000001, "Wrong size on DBDGameInstance_GotoSplashScreen");
static_assert(offsetof(DBDGameInstance_GotoSplashScreen, showDefaultDialogueOnSplashScreen) == 0x000000, "Member 'DBDGameInstance_GotoSplashScreen::showDefaultDialogueOnSplashScreen' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.RemoveActorKnowledgeCollection
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_RemoveActorKnowledgeCollection final
{
public:
	class UActorKnowledgeCollection*              collection;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_RemoveActorKnowledgeCollection) == 0x000008, "Wrong alignment on DBDGameInstance_RemoveActorKnowledgeCollection");
static_assert(sizeof(DBDGameInstance_RemoveActorKnowledgeCollection) == 0x000008, "Wrong size on DBDGameInstance_RemoveActorKnowledgeCollection");
static_assert(offsetof(DBDGameInstance_RemoveActorKnowledgeCollection, collection) == 0x000000, "Member 'DBDGameInstance_RemoveActorKnowledgeCollection::collection' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.SimulateOfferingSequence
// 0x0018 (0x0018 - 0x0000)
struct DBDGameInstance_SimulateOfferingSequence final
{
public:
	TArray<class FName>                           offerings;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          playSequence;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameInstance_SimulateOfferingSequence) == 0x000008, "Wrong alignment on DBDGameInstance_SimulateOfferingSequence");
static_assert(sizeof(DBDGameInstance_SimulateOfferingSequence) == 0x000018, "Wrong size on DBDGameInstance_SimulateOfferingSequence");
static_assert(offsetof(DBDGameInstance_SimulateOfferingSequence, offerings) == 0x000000, "Member 'DBDGameInstance_SimulateOfferingSequence::offerings' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_SimulateOfferingSequence, playSequence) == 0x000010, "Member 'DBDGameInstance_SimulateOfferingSequence::playSequence' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetBonusPointEventsManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetBonusPointEventsManager final
{
public:
	class UBonusPointEventsManager*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetBonusPointEventsManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetBonusPointEventsManager");
static_assert(sizeof(DBDGameInstance_GetBonusPointEventsManager) == 0x000008, "Wrong size on DBDGameInstance_GetBonusPointEventsManager");
static_assert(offsetof(DBDGameInstance_GetBonusPointEventsManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetBonusPointEventsManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetCharacterClippingPrimitiveCollection
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetCharacterClippingPrimitiveCollection final
{
public:
	class UPrimitiveCollection*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetCharacterClippingPrimitiveCollection) == 0x000008, "Wrong alignment on DBDGameInstance_GetCharacterClippingPrimitiveCollection");
static_assert(sizeof(DBDGameInstance_GetCharacterClippingPrimitiveCollection) == 0x000008, "Wrong size on DBDGameInstance_GetCharacterClippingPrimitiveCollection");
static_assert(offsetof(DBDGameInstance_GetCharacterClippingPrimitiveCollection, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetCharacterClippingPrimitiveCollection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetCinematicManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetCinematicManager final
{
public:
	class UCinematicManager*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetCinematicManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetCinematicManager");
static_assert(sizeof(DBDGameInstance_GetCinematicManager) == 0x000008, "Wrong size on DBDGameInstance_GetCinematicManager");
static_assert(offsetof(DBDGameInstance_GetCinematicManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetCinematicManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetConsentManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetConsentManager final
{
public:
	class UConsentManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetConsentManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetConsentManager");
static_assert(sizeof(DBDGameInstance_GetConsentManager) == 0x000008, "Wrong size on DBDGameInstance_GetConsentManager");
static_assert(offsetof(DBDGameInstance_GetConsentManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetConsentManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetDeadOrDisconnectedCampersCount
// 0x0010 (0x0010 - 0x0000)
struct DBDGameInstance_GetDeadOrDisconnectedCampersCount final
{
public:
	class ADBDPlayerState*                        exception;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameInstance_GetDeadOrDisconnectedCampersCount) == 0x000008, "Wrong alignment on DBDGameInstance_GetDeadOrDisconnectedCampersCount");
static_assert(sizeof(DBDGameInstance_GetDeadOrDisconnectedCampersCount) == 0x000010, "Wrong size on DBDGameInstance_GetDeadOrDisconnectedCampersCount");
static_assert(offsetof(DBDGameInstance_GetDeadOrDisconnectedCampersCount, exception) == 0x000000, "Member 'DBDGameInstance_GetDeadOrDisconnectedCampersCount::exception' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_GetDeadOrDisconnectedCampersCount, ReturnValue) == 0x000008, "Member 'DBDGameInstance_GetDeadOrDisconnectedCampersCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetDecalSpawnerCollection
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetDecalSpawnerCollection final
{
public:
	class UDecalSpawnerCollection*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetDecalSpawnerCollection) == 0x000008, "Wrong alignment on DBDGameInstance_GetDecalSpawnerCollection");
static_assert(sizeof(DBDGameInstance_GetDecalSpawnerCollection) == 0x000008, "Wrong size on DBDGameInstance_GetDecalSpawnerCollection");
static_assert(offsetof(DBDGameInstance_GetDecalSpawnerCollection, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetDecalSpawnerCollection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetDedicatedServerManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetDedicatedServerManager final
{
public:
	class UDedicatedServerManager*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetDedicatedServerManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetDedicatedServerManager");
static_assert(sizeof(DBDGameInstance_GetDedicatedServerManager) == 0x000008, "Wrong size on DBDGameInstance_GetDedicatedServerManager");
static_assert(offsetof(DBDGameInstance_GetDedicatedServerManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetDedicatedServerManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetInventoryHandler
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetInventoryHandler final
{
public:
	class UInventoryHandler*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetInventoryHandler) == 0x000008, "Wrong alignment on DBDGameInstance_GetInventoryHandler");
static_assert(sizeof(DBDGameInstance_GetInventoryHandler) == 0x000008, "Wrong size on DBDGameInstance_GetInventoryHandler");
static_assert(offsetof(DBDGameInstance_GetInventoryHandler, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetInventoryHandler::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetLocalEventManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetLocalEventManager final
{
public:
	class ULocalEventManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetLocalEventManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetLocalEventManager");
static_assert(sizeof(DBDGameInstance_GetLocalEventManager) == 0x000008, "Wrong size on DBDGameInstance_GetLocalEventManager");
static_assert(offsetof(DBDGameInstance_GetLocalEventManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetLocalEventManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetLocallyControlledCharacter
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetLocallyControlledCharacter final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetLocallyControlledCharacter) == 0x000008, "Wrong alignment on DBDGameInstance_GetLocallyControlledCharacter");
static_assert(sizeof(DBDGameInstance_GetLocallyControlledCharacter) == 0x000008, "Wrong size on DBDGameInstance_GetLocallyControlledCharacter");
static_assert(offsetof(DBDGameInstance_GetLocallyControlledCharacter, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetLocallyControlledCharacter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetLocalPlayer
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetLocalPlayer final
{
public:
	class ULocalPlayer*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetLocalPlayer) == 0x000008, "Wrong alignment on DBDGameInstance_GetLocalPlayer");
static_assert(sizeof(DBDGameInstance_GetLocalPlayer) == 0x000008, "Wrong size on DBDGameInstance_GetLocalPlayer");
static_assert(offsetof(DBDGameInstance_GetLocalPlayer, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetLocalPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetLocalPlayerController
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetLocalPlayerController final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetLocalPlayerController) == 0x000008, "Wrong alignment on DBDGameInstance_GetLocalPlayerController");
static_assert(sizeof(DBDGameInstance_GetLocalPlayerController) == 0x000008, "Wrong size on DBDGameInstance_GetLocalPlayerController");
static_assert(offsetof(DBDGameInstance_GetLocalPlayerController, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetLocalPlayerController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetMapActorDB
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetMapActorDB final
{
public:
	class UMapActorDB*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetMapActorDB) == 0x000008, "Wrong alignment on DBDGameInstance_GetMapActorDB");
static_assert(sizeof(DBDGameInstance_GetMapActorDB) == 0x000008, "Wrong size on DBDGameInstance_GetMapActorDB");
static_assert(offsetof(DBDGameInstance_GetMapActorDB, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetMapActorDB::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetMaxSurvivorCount
// 0x0004 (0x0004 - 0x0000)
struct DBDGameInstance_GetMaxSurvivorCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetMaxSurvivorCount) == 0x000004, "Wrong alignment on DBDGameInstance_GetMaxSurvivorCount");
static_assert(sizeof(DBDGameInstance_GetMaxSurvivorCount) == 0x000004, "Wrong size on DBDGameInstance_GetMaxSurvivorCount");
static_assert(offsetof(DBDGameInstance_GetMaxSurvivorCount, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetMaxSurvivorCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetPlayerLevelManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetPlayerLevelManager final
{
public:
	class UDBDPlayerLevelManager*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetPlayerLevelManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetPlayerLevelManager");
static_assert(sizeof(DBDGameInstance_GetPlayerLevelManager) == 0x000008, "Wrong size on DBDGameInstance_GetPlayerLevelManager");
static_assert(offsetof(DBDGameInstance_GetPlayerLevelManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetPlayerLevelManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetPlayerNameRegistration
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetPlayerNameRegistration final
{
public:
	class UPlayerNameRegistration*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetPlayerNameRegistration) == 0x000008, "Wrong alignment on DBDGameInstance_GetPlayerNameRegistration");
static_assert(sizeof(DBDGameInstance_GetPlayerNameRegistration) == 0x000008, "Wrong size on DBDGameInstance_GetPlayerNameRegistration");
static_assert(offsetof(DBDGameInstance_GetPlayerNameRegistration, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetPlayerNameRegistration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetRankManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetRankManager final
{
public:
	class URankManager*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetRankManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetRankManager");
static_assert(sizeof(DBDGameInstance_GetRankManager) == 0x000008, "Wrong size on DBDGameInstance_GetRankManager");
static_assert(offsetof(DBDGameInstance_GetRankManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetRankManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetSoftBanManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetSoftBanManager final
{
public:
	class USoftBanManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetSoftBanManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetSoftBanManager");
static_assert(sizeof(DBDGameInstance_GetSoftBanManager) == 0x000008, "Wrong size on DBDGameInstance_GetSoftBanManager");
static_assert(offsetof(DBDGameInstance_GetSoftBanManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetSoftBanManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetSpecialEventManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetSpecialEventManager final
{
public:
	class USpecialEventManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetSpecialEventManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetSpecialEventManager");
static_assert(sizeof(DBDGameInstance_GetSpecialEventManager) == 0x000008, "Wrong size on DBDGameInstance_GetSpecialEventManager");
static_assert(offsetof(DBDGameInstance_GetSpecialEventManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetSpecialEventManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetTimeUtils
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetTimeUtils final
{
public:
	class UDBDTimeUtilities*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetTimeUtils) == 0x000008, "Wrong alignment on DBDGameInstance_GetTimeUtils");
static_assert(sizeof(DBDGameInstance_GetTimeUtils) == 0x000008, "Wrong size on DBDGameInstance_GetTimeUtils");
static_assert(offsetof(DBDGameInstance_GetTimeUtils, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetTimeUtils::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.HasOfferingByType
// 0x0002 (0x0002 - 0x0000)
struct DBDGameInstance_HasOfferingByType final
{
public:
	EOfferingEffectType                           type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_HasOfferingByType) == 0x000001, "Wrong alignment on DBDGameInstance_HasOfferingByType");
static_assert(sizeof(DBDGameInstance_HasOfferingByType) == 0x000002, "Wrong size on DBDGameInstance_HasOfferingByType");
static_assert(offsetof(DBDGameInstance_HasOfferingByType, type) == 0x000000, "Member 'DBDGameInstance_HasOfferingByType::type' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_HasOfferingByType, ReturnValue) == 0x000001, "Member 'DBDGameInstance_HasOfferingByType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.HasOfferingOfType
// 0x0018 (0x0018 - 0x0000)
struct DBDGameInstance_HasOfferingOfType final
{
public:
	EOfferingEffectType                           type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         playerId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   tag;                                               // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameInstance_HasOfferingOfType) == 0x000004, "Wrong alignment on DBDGameInstance_HasOfferingOfType");
static_assert(sizeof(DBDGameInstance_HasOfferingOfType) == 0x000018, "Wrong size on DBDGameInstance_HasOfferingOfType");
static_assert(offsetof(DBDGameInstance_HasOfferingOfType, type) == 0x000000, "Member 'DBDGameInstance_HasOfferingOfType::type' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_HasOfferingOfType, playerId) == 0x000004, "Member 'DBDGameInstance_HasOfferingOfType::playerId' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_HasOfferingOfType, tag) == 0x000008, "Member 'DBDGameInstance_HasOfferingOfType::tag' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_HasOfferingOfType, ReturnValue) == 0x000014, "Member 'DBDGameInstance_HasOfferingOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.IsActorKnown
// 0x0018 (0x0018 - 0x0000)
struct DBDGameInstance_IsActorKnown final
{
public:
	const class ADBDPlayer*                       knowledgePossessor;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 possiblyKnownActor;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameInstance_IsActorKnown) == 0x000008, "Wrong alignment on DBDGameInstance_IsActorKnown");
static_assert(sizeof(DBDGameInstance_IsActorKnown) == 0x000018, "Wrong size on DBDGameInstance_IsActorKnown");
static_assert(offsetof(DBDGameInstance_IsActorKnown, knowledgePossessor) == 0x000000, "Member 'DBDGameInstance_IsActorKnown::knowledgePossessor' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_IsActorKnown, possiblyKnownActor) == 0x000008, "Member 'DBDGameInstance_IsActorKnown::possiblyKnownActor' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_IsActorKnown, ReturnValue) == 0x000010, "Member 'DBDGameInstance_IsActorKnown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.OnTimeTravelComplete
// 0x0018 (0x0018 - 0x0000)
struct DBDGameInstance_OnTimeTravelComplete final
{
public:
	bool                                          success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 date;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_OnTimeTravelComplete) == 0x000008, "Wrong alignment on DBDGameInstance_OnTimeTravelComplete");
static_assert(sizeof(DBDGameInstance_OnTimeTravelComplete) == 0x000018, "Wrong size on DBDGameInstance_OnTimeTravelComplete");
static_assert(offsetof(DBDGameInstance_OnTimeTravelComplete, success) == 0x000000, "Member 'DBDGameInstance_OnTimeTravelComplete::success' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_OnTimeTravelComplete, date) == 0x000008, "Member 'DBDGameInstance_OnTimeTravelComplete::date' has a wrong offset!");

// Function DeadByDaylight.UMGDragWidget.GetAllEditableWidgets
// 0x0010 (0x0010 - 0x0000)
struct UMGDragWidget_GetAllEditableWidgets final
{
public:
	TArray<class UCustomWidgetWrapper_HudEditor*> ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGDragWidget_GetAllEditableWidgets) == 0x000008, "Wrong alignment on UMGDragWidget_GetAllEditableWidgets");
static_assert(sizeof(UMGDragWidget_GetAllEditableWidgets) == 0x000010, "Wrong size on UMGDragWidget_GetAllEditableWidgets");
static_assert(offsetof(UMGDragWidget_GetAllEditableWidgets, ReturnValue) == 0x000000, "Member 'UMGDragWidget_GetAllEditableWidgets::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGDragWidget_HudEditor.SetOnSelection
// 0x0001 (0x0001 - 0x0000)
struct UMGDragWidget_HudEditor_SetOnSelection final
{
public:
	bool                                          isSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGDragWidget_HudEditor_SetOnSelection) == 0x000001, "Wrong alignment on UMGDragWidget_HudEditor_SetOnSelection");
static_assert(sizeof(UMGDragWidget_HudEditor_SetOnSelection) == 0x000001, "Wrong size on UMGDragWidget_HudEditor_SetOnSelection");
static_assert(offsetof(UMGDragWidget_HudEditor_SetOnSelection, isSelected) == 0x000000, "Member 'UMGDragWidget_HudEditor_SetOnSelection::isSelected' has a wrong offset!");

// Function DeadByDaylight.UMGDragWidget_HudEditor.GetCustomWrapper
// 0x0008 (0x0008 - 0x0000)
struct UMGDragWidget_HudEditor_GetCustomWrapper final
{
public:
	class UCustomWidgetWrapper_HudEditor*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGDragWidget_HudEditor_GetCustomWrapper) == 0x000008, "Wrong alignment on UMGDragWidget_HudEditor_GetCustomWrapper");
static_assert(sizeof(UMGDragWidget_HudEditor_GetCustomWrapper) == 0x000008, "Wrong size on UMGDragWidget_HudEditor_GetCustomWrapper");
static_assert(offsetof(UMGDragWidget_HudEditor_GetCustomWrapper, ReturnValue) == 0x000000, "Member 'UMGDragWidget_HudEditor_GetCustomWrapper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetDBDGameUserSettings
// 0x0008 (0x0008 - 0x0000)
struct DBDGameUserSettings_GetDBDGameUserSettings final
{
public:
	class UDBDGameUserSettings*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetDBDGameUserSettings) == 0x000008, "Wrong alignment on DBDGameUserSettings_GetDBDGameUserSettings");
static_assert(sizeof(DBDGameUserSettings_GetDBDGameUserSettings) == 0x000008, "Wrong size on DBDGameUserSettings_GetDBDGameUserSettings");
static_assert(offsetof(DBDGameUserSettings_GetDBDGameUserSettings, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetDBDGameUserSettings::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetBloodwebInteractionBehaviour
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetBloodwebInteractionBehaviour final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetBloodwebInteractionBehaviour) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetBloodwebInteractionBehaviour");
static_assert(sizeof(DBDGameUserSettings_GetBloodwebInteractionBehaviour) == 0x000001, "Wrong size on DBDGameUserSettings_GetBloodwebInteractionBehaviour");
static_assert(offsetof(DBDGameUserSettings_GetBloodwebInteractionBehaviour, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetBloodwebInteractionBehaviour::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetChallengeCompletion
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetChallengeCompletion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetChallengeCompletion) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetChallengeCompletion");
static_assert(sizeof(DBDGameUserSettings_GetChallengeCompletion) == 0x000001, "Wrong size on DBDGameUserSettings_GetChallengeCompletion");
static_assert(offsetof(DBDGameUserSettings_GetChallengeCompletion, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetChallengeCompletion::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetChallengeProgression
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetChallengeProgression final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetChallengeProgression) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetChallengeProgression");
static_assert(sizeof(DBDGameUserSettings_GetChallengeProgression) == 0x000001, "Wrong size on DBDGameUserSettings_GetChallengeProgression");
static_assert(offsetof(DBDGameUserSettings_GetChallengeProgression, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetChallengeProgression::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetColorBlindMode
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetColorBlindMode final
{
public:
	EColorVisionDeficiency                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetColorBlindMode) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetColorBlindMode");
static_assert(sizeof(DBDGameUserSettings_GetColorBlindMode) == 0x000001, "Wrong size on DBDGameUserSettings_GetColorBlindMode");
static_assert(offsetof(DBDGameUserSettings_GetColorBlindMode, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetColorBlindMode::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetColorBlindModeIntensity
// 0x0004 (0x0004 - 0x0000)
struct DBDGameUserSettings_GetColorBlindModeIntensity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetColorBlindModeIntensity) == 0x000004, "Wrong alignment on DBDGameUserSettings_GetColorBlindModeIntensity");
static_assert(sizeof(DBDGameUserSettings_GetColorBlindModeIntensity) == 0x000004, "Wrong size on DBDGameUserSettings_GetColorBlindModeIntensity");
static_assert(offsetof(DBDGameUserSettings_GetColorBlindModeIntensity, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetColorBlindModeIntensity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetHUDKillerHookCountVisibility
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetHUDKillerHookCountVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetHUDKillerHookCountVisibility) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetHUDKillerHookCountVisibility");
static_assert(sizeof(DBDGameUserSettings_GetHUDKillerHookCountVisibility) == 0x000001, "Wrong size on DBDGameUserSettings_GetHUDKillerHookCountVisibility");
static_assert(offsetof(DBDGameUserSettings_GetHUDKillerHookCountVisibility, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetHUDKillerHookCountVisibility::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetHUDPlayerNamesVisibility
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetHUDPlayerNamesVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetHUDPlayerNamesVisibility) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetHUDPlayerNamesVisibility");
static_assert(sizeof(DBDGameUserSettings_GetHUDPlayerNamesVisibility) == 0x000001, "Wrong size on DBDGameUserSettings_GetHUDPlayerNamesVisibility");
static_assert(offsetof(DBDGameUserSettings_GetHUDPlayerNamesVisibility, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetHUDPlayerNamesVisibility::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetHudScaleFactor
// 0x0004 (0x0004 - 0x0000)
struct DBDGameUserSettings_GetHudScaleFactor final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetHudScaleFactor) == 0x000004, "Wrong alignment on DBDGameUserSettings_GetHudScaleFactor");
static_assert(sizeof(DBDGameUserSettings_GetHudScaleFactor) == 0x000004, "Wrong size on DBDGameUserSettings_GetHudScaleFactor");
static_assert(offsetof(DBDGameUserSettings_GetHudScaleFactor, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetHudScaleFactor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetHUDScoreEventsVisibility
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetHUDScoreEventsVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetHUDScoreEventsVisibility) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetHUDScoreEventsVisibility");
static_assert(sizeof(DBDGameUserSettings_GetHUDScoreEventsVisibility) == 0x000001, "Wrong size on DBDGameUserSettings_GetHUDScoreEventsVisibility");
static_assert(offsetof(DBDGameUserSettings_GetHUDScoreEventsVisibility, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetHUDScoreEventsVisibility::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetLargeText
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetLargeText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetLargeText) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetLargeText");
static_assert(sizeof(DBDGameUserSettings_GetLargeText) == 0x000001, "Wrong size on DBDGameUserSettings_GetLargeText");
static_assert(offsetof(DBDGameUserSettings_GetLargeText, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetLargeText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetLegacyPrestigePortraits
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetLegacyPrestigePortraits final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetLegacyPrestigePortraits) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetLegacyPrestigePortraits");
static_assert(sizeof(DBDGameUserSettings_GetLegacyPrestigePortraits) == 0x000001, "Wrong size on DBDGameUserSettings_GetLegacyPrestigePortraits");
static_assert(offsetof(DBDGameUserSettings_GetLegacyPrestigePortraits, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetLegacyPrestigePortraits::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetMenuScaleFactor
// 0x0004 (0x0004 - 0x0000)
struct DBDGameUserSettings_GetMenuScaleFactor final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetMenuScaleFactor) == 0x000004, "Wrong alignment on DBDGameUserSettings_GetMenuScaleFactor");
static_assert(sizeof(DBDGameUserSettings_GetMenuScaleFactor) == 0x000004, "Wrong size on DBDGameUserSettings_GetMenuScaleFactor");
static_assert(offsetof(DBDGameUserSettings_GetMenuScaleFactor, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetMenuScaleFactor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetSkillCheckScaleFactor
// 0x0004 (0x0004 - 0x0000)
struct DBDGameUserSettings_GetSkillCheckScaleFactor final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetSkillCheckScaleFactor) == 0x000004, "Wrong alignment on DBDGameUserSettings_GetSkillCheckScaleFactor");
static_assert(sizeof(DBDGameUserSettings_GetSkillCheckScaleFactor) == 0x000004, "Wrong size on DBDGameUserSettings_GetSkillCheckScaleFactor");
static_assert(offsetof(DBDGameUserSettings_GetSkillCheckScaleFactor, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetSkillCheckScaleFactor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetTerrorRadiusVisualFeedback
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetTerrorRadiusVisualFeedback final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetTerrorRadiusVisualFeedback) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetTerrorRadiusVisualFeedback");
static_assert(sizeof(DBDGameUserSettings_GetTerrorRadiusVisualFeedback) == 0x000001, "Wrong size on DBDGameUserSettings_GetTerrorRadiusVisualFeedback");
static_assert(offsetof(DBDGameUserSettings_GetTerrorRadiusVisualFeedback, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetTerrorRadiusVisualFeedback::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGDownloadProgressionWidget.UpdateProgression
// 0x0030 (0x0030 - 0x0000)
struct UMGDownloadProgressionWidget_UpdateProgression final
{
public:
	struct FDownloadProgression                   downloadProgression;                               // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGDownloadProgressionWidget_UpdateProgression) == 0x000008, "Wrong alignment on UMGDownloadProgressionWidget_UpdateProgression");
static_assert(sizeof(UMGDownloadProgressionWidget_UpdateProgression) == 0x000030, "Wrong size on UMGDownloadProgressionWidget_UpdateProgression");
static_assert(offsetof(UMGDownloadProgressionWidget_UpdateProgression, downloadProgression) == 0x000000, "Member 'UMGDownloadProgressionWidget_UpdateProgression::downloadProgression' has a wrong offset!");

// Function DeadByDaylight.DBDHud.RemoveStatusViewOnDestroy
// 0x0008 (0x0008 - 0x0000)
struct DBDHud_RemoveStatusViewOnDestroy final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDHud_RemoveStatusViewOnDestroy) == 0x000008, "Wrong alignment on DBDHud_RemoveStatusViewOnDestroy");
static_assert(sizeof(DBDHud_RemoveStatusViewOnDestroy) == 0x000008, "Wrong size on DBDHud_RemoveStatusViewOnDestroy");
static_assert(offsetof(DBDHud_RemoveStatusViewOnDestroy, actor) == 0x000000, "Member 'DBDHud_RemoveStatusViewOnDestroy::actor' has a wrong offset!");

// Function DeadByDaylight.DBDKeyDisplayInfo.GetActionForInteractionType
// 0x0010 (0x0010 - 0x0000)
struct DBDKeyDisplayInfo_GetActionForInteractionType final
{
public:
	EPlayerRole                                   playerRole;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         inputInteractionType;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useGamePad;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ignoreInteractMash;                                // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDKeyDisplayInfo_GetActionForInteractionType) == 0x000004, "Wrong alignment on DBDKeyDisplayInfo_GetActionForInteractionType");
static_assert(sizeof(DBDKeyDisplayInfo_GetActionForInteractionType) == 0x000010, "Wrong size on DBDKeyDisplayInfo_GetActionForInteractionType");
static_assert(offsetof(DBDKeyDisplayInfo_GetActionForInteractionType, playerRole) == 0x000000, "Member 'DBDKeyDisplayInfo_GetActionForInteractionType::playerRole' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetActionForInteractionType, inputInteractionType) == 0x000001, "Member 'DBDKeyDisplayInfo_GetActionForInteractionType::inputInteractionType' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetActionForInteractionType, useGamePad) == 0x000002, "Member 'DBDKeyDisplayInfo_GetActionForInteractionType::useGamePad' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetActionForInteractionType, ignoreInteractMash) == 0x000003, "Member 'DBDKeyDisplayInfo_GetActionForInteractionType::ignoreInteractMash' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetActionForInteractionType, ReturnValue) == 0x000004, "Member 'DBDKeyDisplayInfo_GetActionForInteractionType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDKeyDisplayInfo.GetFirstKeyForAction
// 0x0038 (0x0038 - 0x0000)
struct DBDKeyDisplayInfo_GetFirstKeyForAction final
{
public:
	class UPlayerInput*                           playerInput;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   actionName;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useGamePad;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   ReturnValue;                                       // 0x0018(0x0020)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDKeyDisplayInfo_GetFirstKeyForAction) == 0x000008, "Wrong alignment on DBDKeyDisplayInfo_GetFirstKeyForAction");
static_assert(sizeof(DBDKeyDisplayInfo_GetFirstKeyForAction) == 0x000038, "Wrong size on DBDKeyDisplayInfo_GetFirstKeyForAction");
static_assert(offsetof(DBDKeyDisplayInfo_GetFirstKeyForAction, playerInput) == 0x000000, "Member 'DBDKeyDisplayInfo_GetFirstKeyForAction::playerInput' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetFirstKeyForAction, actionName) == 0x000008, "Member 'DBDKeyDisplayInfo_GetFirstKeyForAction::actionName' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetFirstKeyForAction, useGamePad) == 0x000014, "Member 'DBDKeyDisplayInfo_GetFirstKeyForAction::useGamePad' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetFirstKeyForAction, ReturnValue) == 0x000018, "Member 'DBDKeyDisplayInfo_GetFirstKeyForAction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDKeyDisplayInfo.GetKeyDisplayInfo
// 0x0060 (0x0060 - 0x0000)
struct DBDKeyDisplayInfo_GetKeyDisplayInfo final
{
public:
	struct FKey                                   key;                                               // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKeyDisplayInfo                        ReturnValue;                                       // 0x0020(0x0040)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDKeyDisplayInfo_GetKeyDisplayInfo) == 0x000008, "Wrong alignment on DBDKeyDisplayInfo_GetKeyDisplayInfo");
static_assert(sizeof(DBDKeyDisplayInfo_GetKeyDisplayInfo) == 0x000060, "Wrong size on DBDKeyDisplayInfo_GetKeyDisplayInfo");
static_assert(offsetof(DBDKeyDisplayInfo_GetKeyDisplayInfo, key) == 0x000000, "Member 'DBDKeyDisplayInfo_GetKeyDisplayInfo::key' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetKeyDisplayInfo, ReturnValue) == 0x000020, "Member 'DBDKeyDisplayInfo_GetKeyDisplayInfo::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDKeyDisplayInfo.GetKeyDisplayInfoForInteractionType
// 0x0050 (0x0050 - 0x0000)
struct DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType final
{
public:
	class UPlayerInput*                           playerInput;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   playerRole;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         interactionType;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useGamePad;                                        // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKeyDisplayInfo                        ReturnValue;                                       // 0x0010(0x0040)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType) == 0x000008, "Wrong alignment on DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType");
static_assert(sizeof(DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType) == 0x000050, "Wrong size on DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType");
static_assert(offsetof(DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType, playerInput) == 0x000000, "Member 'DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType::playerInput' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType, playerRole) == 0x000008, "Member 'DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType::playerRole' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType, interactionType) == 0x000009, "Member 'DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType::interactionType' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType, useGamePad) == 0x00000A, "Member 'DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType::useGamePad' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType, ReturnValue) == 0x000010, "Member 'DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDKeyDisplayInfo.IsExcludedKey
// 0x0028 (0x0028 - 0x0000)
struct DBDKeyDisplayInfo_IsExcludedKey final
{
public:
	struct FKey                                   key;                                               // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDKeyDisplayInfo_IsExcludedKey) == 0x000008, "Wrong alignment on DBDKeyDisplayInfo_IsExcludedKey");
static_assert(sizeof(DBDKeyDisplayInfo_IsExcludedKey) == 0x000028, "Wrong size on DBDKeyDisplayInfo_IsExcludedKey");
static_assert(offsetof(DBDKeyDisplayInfo_IsExcludedKey, key) == 0x000000, "Member 'DBDKeyDisplayInfo_IsExcludedKey::key' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_IsExcludedKey, ReturnValue) == 0x000020, "Member 'DBDKeyDisplayInfo_IsExcludedKey::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMathBlueprintLibrary.TransformToMatrix
// 0x0040 (0x0040 - 0x0000)
struct DBDMathBlueprintLibrary_TransformToMatrix final
{
public:
	struct FTransform                             A;                                                 // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMathBlueprintLibrary_TransformToMatrix) == 0x000010, "Wrong alignment on DBDMathBlueprintLibrary_TransformToMatrix");
static_assert(sizeof(DBDMathBlueprintLibrary_TransformToMatrix) == 0x000040, "Wrong size on DBDMathBlueprintLibrary_TransformToMatrix");
static_assert(offsetof(DBDMathBlueprintLibrary_TransformToMatrix, A) == 0x000000, "Member 'DBDMathBlueprintLibrary_TransformToMatrix::A' has a wrong offset!");
static_assert(offsetof(DBDMathBlueprintLibrary_TransformToMatrix, ReturnValue) == 0x000030, "Member 'DBDMathBlueprintLibrary_TransformToMatrix::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMathBlueprintLibrary.VectorAbsoluteValue
// 0x0018 (0x0018 - 0x0000)
struct DBDMathBlueprintLibrary_VectorAbsoluteValue final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMathBlueprintLibrary_VectorAbsoluteValue) == 0x000004, "Wrong alignment on DBDMathBlueprintLibrary_VectorAbsoluteValue");
static_assert(sizeof(DBDMathBlueprintLibrary_VectorAbsoluteValue) == 0x000018, "Wrong size on DBDMathBlueprintLibrary_VectorAbsoluteValue");
static_assert(offsetof(DBDMathBlueprintLibrary_VectorAbsoluteValue, A) == 0x000000, "Member 'DBDMathBlueprintLibrary_VectorAbsoluteValue::A' has a wrong offset!");
static_assert(offsetof(DBDMathBlueprintLibrary_VectorAbsoluteValue, ReturnValue) == 0x00000C, "Member 'DBDMathBlueprintLibrary_VectorAbsoluteValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMathBlueprintLibrary.VectorIntersect
// 0x0034 (0x0034 - 0x0000)
struct DBDMathBlueprintLibrary_VectorIntersect final
{
public:
	struct FVector                                OriginA;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExtentA;                                           // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OriginB;                                           // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExtentB;                                           // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDMathBlueprintLibrary_VectorIntersect) == 0x000004, "Wrong alignment on DBDMathBlueprintLibrary_VectorIntersect");
static_assert(sizeof(DBDMathBlueprintLibrary_VectorIntersect) == 0x000034, "Wrong size on DBDMathBlueprintLibrary_VectorIntersect");
static_assert(offsetof(DBDMathBlueprintLibrary_VectorIntersect, OriginA) == 0x000000, "Member 'DBDMathBlueprintLibrary_VectorIntersect::OriginA' has a wrong offset!");
static_assert(offsetof(DBDMathBlueprintLibrary_VectorIntersect, ExtentA) == 0x00000C, "Member 'DBDMathBlueprintLibrary_VectorIntersect::ExtentA' has a wrong offset!");
static_assert(offsetof(DBDMathBlueprintLibrary_VectorIntersect, OriginB) == 0x000018, "Member 'DBDMathBlueprintLibrary_VectorIntersect::OriginB' has a wrong offset!");
static_assert(offsetof(DBDMathBlueprintLibrary_VectorIntersect, ExtentB) == 0x000024, "Member 'DBDMathBlueprintLibrary_VectorIntersect::ExtentB' has a wrong offset!");
static_assert(offsetof(DBDMathBlueprintLibrary_VectorIntersect, ReturnValue) == 0x000030, "Member 'DBDMathBlueprintLibrary_VectorIntersect::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerCameraManager.StartFadeInTimeline
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerCameraManager_StartFadeInTimeline final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerCameraManager_StartFadeInTimeline) == 0x000004, "Wrong alignment on DBDPlayerCameraManager_StartFadeInTimeline");
static_assert(sizeof(DBDPlayerCameraManager_StartFadeInTimeline) == 0x000004, "Wrong size on DBDPlayerCameraManager_StartFadeInTimeline");
static_assert(offsetof(DBDPlayerCameraManager_StartFadeInTimeline, duration) == 0x000000, "Member 'DBDPlayerCameraManager_StartFadeInTimeline::duration' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerCameraManager.StartFadeOutTimeline
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerCameraManager_StartFadeOutTimeline final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerCameraManager_StartFadeOutTimeline) == 0x000004, "Wrong alignment on DBDPlayerCameraManager_StartFadeOutTimeline");
static_assert(sizeof(DBDPlayerCameraManager_StartFadeOutTimeline) == 0x000004, "Wrong size on DBDPlayerCameraManager_StartFadeOutTimeline");
static_assert(offsetof(DBDPlayerCameraManager_StartFadeOutTimeline, duration) == 0x000000, "Member 'DBDPlayerCameraManager_StartFadeOutTimeline::duration' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.ActivateAI
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerController_ActivateAI final
{
public:
	bool                                          activate;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         playerRank;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_ActivateAI) == 0x000004, "Wrong alignment on DBDPlayerController_ActivateAI");
static_assert(sizeof(DBDPlayerController_ActivateAI) == 0x000008, "Wrong size on DBDPlayerController_ActivateAI");
static_assert(offsetof(DBDPlayerController_ActivateAI, activate) == 0x000000, "Member 'DBDPlayerController_ActivateAI::activate' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_ActivateAI, playerRank) == 0x000004, "Member 'DBDPlayerController_ActivateAI::playerRank' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Client_SetPlayerFinishStats
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Client_SetPlayerFinishStats final
{
public:
	struct FPlayerFinishStats                     stats;                                             // 0x0000(0x0001)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Client_SetPlayerFinishStats) == 0x000001, "Wrong alignment on DBDPlayerController_Client_SetPlayerFinishStats");
static_assert(sizeof(DBDPlayerController_Client_SetPlayerFinishStats) == 0x000001, "Wrong size on DBDPlayerController_Client_SetPlayerFinishStats");
static_assert(offsetof(DBDPlayerController_Client_SetPlayerFinishStats, stats) == 0x000000, "Member 'DBDPlayerController_Client_SetPlayerFinishStats::stats' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Client_SetSpectatorMode
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Client_SetSpectatorMode final
{
public:
	bool                                          on;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Client_SetSpectatorMode) == 0x000001, "Wrong alignment on DBDPlayerController_Client_SetSpectatorMode");
static_assert(sizeof(DBDPlayerController_Client_SetSpectatorMode) == 0x000001, "Wrong size on DBDPlayerController_Client_SetSpectatorMode");
static_assert(offsetof(DBDPlayerController_Client_SetSpectatorMode, on) == 0x000000, "Member 'DBDPlayerController_Client_SetSpectatorMode::on' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Client_SetSpectatorModeInEditor
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerController_Client_SetSpectatorModeInEditor final
{
public:
	bool                                          on;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayerState*                        spectatingPlayerState;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Client_SetSpectatorModeInEditor) == 0x000008, "Wrong alignment on DBDPlayerController_Client_SetSpectatorModeInEditor");
static_assert(sizeof(DBDPlayerController_Client_SetSpectatorModeInEditor) == 0x000010, "Wrong size on DBDPlayerController_Client_SetSpectatorModeInEditor");
static_assert(offsetof(DBDPlayerController_Client_SetSpectatorModeInEditor, on) == 0x000000, "Member 'DBDPlayerController_Client_SetSpectatorModeInEditor::on' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Client_SetSpectatorModeInEditor, spectatingPlayerState) == 0x000008, "Member 'DBDPlayerController_Client_SetSpectatorModeInEditor::spectatingPlayerState' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Client_SpectateAI
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerController_Client_SpectateAI final
{
public:
	class APawn*                                  aiPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Client_SpectateAI) == 0x000008, "Wrong alignment on DBDPlayerController_Client_SpectateAI");
static_assert(sizeof(DBDPlayerController_Client_SpectateAI) == 0x000008, "Wrong size on DBDPlayerController_Client_SpectateAI");
static_assert(offsetof(DBDPlayerController_Client_SpectateAI, aiPawn) == 0x000000, "Member 'DBDPlayerController_Client_SpectateAI::aiPawn' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Server_ActivateAI
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerController_Server_ActivateAI final
{
public:
	bool                                          activate;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         playerRank;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Server_ActivateAI) == 0x000004, "Wrong alignment on DBDPlayerController_Server_ActivateAI");
static_assert(sizeof(DBDPlayerController_Server_ActivateAI) == 0x000008, "Wrong size on DBDPlayerController_Server_ActivateAI");
static_assert(offsetof(DBDPlayerController_Server_ActivateAI, activate) == 0x000000, "Member 'DBDPlayerController_Server_ActivateAI::activate' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Server_ActivateAI, playerRank) == 0x000004, "Member 'DBDPlayerController_Server_ActivateAI::playerRank' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Server_ActivateAIAll
// 0x000C (0x000C - 0x0000)
struct DBDPlayerController_Server_ActivateAIAll final
{
public:
	bool                                          activate;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         playerRank;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          playerRole;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerController_Server_ActivateAIAll) == 0x000004, "Wrong alignment on DBDPlayerController_Server_ActivateAIAll");
static_assert(sizeof(DBDPlayerController_Server_ActivateAIAll) == 0x00000C, "Wrong size on DBDPlayerController_Server_ActivateAIAll");
static_assert(offsetof(DBDPlayerController_Server_ActivateAIAll, activate) == 0x000000, "Member 'DBDPlayerController_Server_ActivateAIAll::activate' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Server_ActivateAIAll, playerRank) == 0x000004, "Member 'DBDPlayerController_Server_ActivateAIAll::playerRank' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Server_ActivateAIAll, playerRole) == 0x000008, "Member 'DBDPlayerController_Server_ActivateAIAll::playerRole' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Server_ClientTimeSinceLastLoadingProgress
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerController_Server_ClientTimeSinceLastLoadingProgress final
{
public:
	float                                         lastProgression;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Server_ClientTimeSinceLastLoadingProgress) == 0x000004, "Wrong alignment on DBDPlayerController_Server_ClientTimeSinceLastLoadingProgress");
static_assert(sizeof(DBDPlayerController_Server_ClientTimeSinceLastLoadingProgress) == 0x000004, "Wrong size on DBDPlayerController_Server_ClientTimeSinceLastLoadingProgress");
static_assert(offsetof(DBDPlayerController_Server_ClientTimeSinceLastLoadingProgress, lastProgression) == 0x000000, "Member 'DBDPlayerController_Server_ClientTimeSinceLastLoadingProgress::lastProgression' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Server_DebugSend
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerController_Server_DebugSend final
{
public:
	class FString                                 data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Server_DebugSend) == 0x000008, "Wrong alignment on DBDPlayerController_Server_DebugSend");
static_assert(sizeof(DBDPlayerController_Server_DebugSend) == 0x000010, "Wrong size on DBDPlayerController_Server_DebugSend");
static_assert(offsetof(DBDPlayerController_Server_DebugSend, data) == 0x000000, "Member 'DBDPlayerController_Server_DebugSend::data' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Server_LeaveGame
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Server_LeaveGame final
{
public:
	bool                                          joiningLobby;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Server_LeaveGame) == 0x000001, "Wrong alignment on DBDPlayerController_Server_LeaveGame");
static_assert(sizeof(DBDPlayerController_Server_LeaveGame) == 0x000001, "Wrong size on DBDPlayerController_Server_LeaveGame");
static_assert(offsetof(DBDPlayerController_Server_LeaveGame, joiningLobby) == 0x000000, "Member 'DBDPlayerController_Server_LeaveGame::joiningLobby' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Server_SetHasMoveInputThisFrame
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Server_SetHasMoveInputThisFrame final
{
public:
	bool                                          hasMoveInputThisFrame;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Server_SetHasMoveInputThisFrame) == 0x000001, "Wrong alignment on DBDPlayerController_Server_SetHasMoveInputThisFrame");
static_assert(sizeof(DBDPlayerController_Server_SetHasMoveInputThisFrame) == 0x000001, "Wrong size on DBDPlayerController_Server_SetHasMoveInputThisFrame");
static_assert(offsetof(DBDPlayerController_Server_SetHasMoveInputThisFrame, hasMoveInputThisFrame) == 0x000000, "Member 'DBDPlayerController_Server_SetHasMoveInputThisFrame::hasMoveInputThisFrame' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Server_SetSpectatorMode
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Server_SetSpectatorMode final
{
public:
	bool                                          on;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Server_SetSpectatorMode) == 0x000001, "Wrong alignment on DBDPlayerController_Server_SetSpectatorMode");
static_assert(sizeof(DBDPlayerController_Server_SetSpectatorMode) == 0x000001, "Wrong size on DBDPlayerController_Server_SetSpectatorMode");
static_assert(offsetof(DBDPlayerController_Server_SetSpectatorMode, on) == 0x000000, "Member 'DBDPlayerController_Server_SetSpectatorMode::on' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Server_SetSpectatorModeInEditor
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerController_Server_SetSpectatorModeInEditor final
{
public:
	bool                                          on;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayerState*                        spectatingPlayerState;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Server_SetSpectatorModeInEditor) == 0x000008, "Wrong alignment on DBDPlayerController_Server_SetSpectatorModeInEditor");
static_assert(sizeof(DBDPlayerController_Server_SetSpectatorModeInEditor) == 0x000010, "Wrong size on DBDPlayerController_Server_SetSpectatorModeInEditor");
static_assert(offsetof(DBDPlayerController_Server_SetSpectatorModeInEditor, on) == 0x000000, "Member 'DBDPlayerController_Server_SetSpectatorModeInEditor::on' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Server_SetSpectatorModeInEditor, spectatingPlayerState) == 0x000008, "Member 'DBDPlayerController_Server_SetSpectatorModeInEditor::spectatingPlayerState' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.ServerViewPlayer
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerController_ServerViewPlayer final
{
public:
	class FString                                 playerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_ServerViewPlayer) == 0x000008, "Wrong alignment on DBDPlayerController_ServerViewPlayer");
static_assert(sizeof(DBDPlayerController_ServerViewPlayer) == 0x000010, "Wrong size on DBDPlayerController_ServerViewPlayer");
static_assert(offsetof(DBDPlayerController_ServerViewPlayer, playerName) == 0x000000, "Member 'DBDPlayerController_ServerViewPlayer::playerName' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.SetShouldMoveInputReplicateToServer
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_SetShouldMoveInputReplicateToServer final
{
public:
	bool                                          shouldReplicate;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_SetShouldMoveInputReplicateToServer) == 0x000001, "Wrong alignment on DBDPlayerController_SetShouldMoveInputReplicateToServer");
static_assert(sizeof(DBDPlayerController_SetShouldMoveInputReplicateToServer) == 0x000001, "Wrong size on DBDPlayerController_SetShouldMoveInputReplicateToServer");
static_assert(offsetof(DBDPlayerController_SetShouldMoveInputReplicateToServer, shouldReplicate) == 0x000000, "Member 'DBDPlayerController_SetShouldMoveInputReplicateToServer::shouldReplicate' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.GetAIPawn
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerController_GetAIPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_GetAIPawn) == 0x000008, "Wrong alignment on DBDPlayerController_GetAIPawn");
static_assert(sizeof(DBDPlayerController_GetAIPawn) == 0x000008, "Wrong size on DBDPlayerController_GetAIPawn");
static_assert(offsetof(DBDPlayerController_GetAIPawn, ReturnValue) == 0x000000, "Member 'DBDPlayerController_GetAIPawn::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.GetControlledPlayer
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerController_GetControlledPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_GetControlledPlayer) == 0x000008, "Wrong alignment on DBDPlayerController_GetControlledPlayer");
static_assert(sizeof(DBDPlayerController_GetControlledPlayer) == 0x000008, "Wrong size on DBDPlayerController_GetControlledPlayer");
static_assert(offsetof(DBDPlayerController_GetControlledPlayer, ReturnValue) == 0x000000, "Member 'DBDPlayerController_GetControlledPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.GetSpectatedPlayer
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerController_GetSpectatedPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_GetSpectatedPlayer) == 0x000008, "Wrong alignment on DBDPlayerController_GetSpectatedPlayer");
static_assert(sizeof(DBDPlayerController_GetSpectatedPlayer) == 0x000008, "Wrong size on DBDPlayerController_GetSpectatedPlayer");
static_assert(offsetof(DBDPlayerController_GetSpectatedPlayer, ReturnValue) == 0x000000, "Member 'DBDPlayerController_GetSpectatedPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.GetSpectatedPlayerState
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerController_GetSpectatedPlayerState final
{
public:
	class ADBDPlayerState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_GetSpectatedPlayerState) == 0x000008, "Wrong alignment on DBDPlayerController_GetSpectatedPlayerState");
static_assert(sizeof(DBDPlayerController_GetSpectatedPlayerState) == 0x000008, "Wrong size on DBDPlayerController_GetSpectatedPlayerState");
static_assert(offsetof(DBDPlayerController_GetSpectatedPlayerState, ReturnValue) == 0x000000, "Member 'DBDPlayerController_GetSpectatedPlayerState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.IsSpectating
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_IsSpectating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_IsSpectating) == 0x000001, "Wrong alignment on DBDPlayerController_IsSpectating");
static_assert(sizeof(DBDPlayerController_IsSpectating) == 0x000001, "Wrong size on DBDPlayerController_IsSpectating");
static_assert(offsetof(DBDPlayerController_IsSpectating, ReturnValue) == 0x000000, "Member 'DBDPlayerController_IsSpectating::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.MobileJoystickInput_Pressed
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerController_MobileJoystickInput_Pressed final
{
public:
	int32                                         joystickIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerController_MobileJoystickInput_Pressed) == 0x000004, "Wrong alignment on DBDPlayerController_MobileJoystickInput_Pressed");
static_assert(sizeof(DBDPlayerController_MobileJoystickInput_Pressed) == 0x000008, "Wrong size on DBDPlayerController_MobileJoystickInput_Pressed");
static_assert(offsetof(DBDPlayerController_MobileJoystickInput_Pressed, joystickIndex) == 0x000000, "Member 'DBDPlayerController_MobileJoystickInput_Pressed::joystickIndex' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_MobileJoystickInput_Pressed, ReturnValue) == 0x000004, "Member 'DBDPlayerController_MobileJoystickInput_Pressed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CoopRepairTracker.SetHasEverCoopRepaired
// 0x0008 (0x0008 - 0x0000)
struct CoopRepairTracker_SetHasEverCoopRepaired final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoopRepairTracker_SetHasEverCoopRepaired) == 0x000008, "Wrong alignment on CoopRepairTracker_SetHasEverCoopRepaired");
static_assert(sizeof(CoopRepairTracker_SetHasEverCoopRepaired) == 0x000008, "Wrong size on CoopRepairTracker_SetHasEverCoopRepaired");
static_assert(offsetof(CoopRepairTracker_SetHasEverCoopRepaired, player) == 0x000000, "Member 'CoopRepairTracker_SetHasEverCoopRepaired::player' has a wrong offset!");

// Function DeadByDaylight.CoopRepairTracker.HasEverCoopRepaired
// 0x0010 (0x0010 - 0x0000)
struct CoopRepairTracker_HasEverCoopRepaired final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoopRepairTracker_HasEverCoopRepaired) == 0x000008, "Wrong alignment on CoopRepairTracker_HasEverCoopRepaired");
static_assert(sizeof(CoopRepairTracker_HasEverCoopRepaired) == 0x000010, "Wrong size on CoopRepairTracker_HasEverCoopRepaired");
static_assert(offsetof(CoopRepairTracker_HasEverCoopRepaired, player) == 0x000000, "Member 'CoopRepairTracker_HasEverCoopRepaired::player' has a wrong offset!");
static_assert(offsetof(CoopRepairTracker_HasEverCoopRepaired, ReturnValue) == 0x000008, "Member 'CoopRepairTracker_HasEverCoopRepaired::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.Authority_DebugSetHookDrainStage
// 0x0004 (0x0004 - 0x0000)
struct HookableComponent_Authority_DebugSetHookDrainStage final
{
public:
	int32                                         drainStage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_Authority_DebugSetHookDrainStage) == 0x000004, "Wrong alignment on HookableComponent_Authority_DebugSetHookDrainStage");
static_assert(sizeof(HookableComponent_Authority_DebugSetHookDrainStage) == 0x000004, "Wrong size on HookableComponent_Authority_DebugSetHookDrainStage");
static_assert(offsetof(HookableComponent_Authority_DebugSetHookDrainStage, drainStage) == 0x000000, "Member 'HookableComponent_Authority_DebugSetHookDrainStage::drainStage' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.Authority_DebugSetHookEscapeAutoFail
// 0x0001 (0x0001 - 0x0000)
struct HookableComponent_Authority_DebugSetHookEscapeAutoFail final
{
public:
	bool                                          fail;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_Authority_DebugSetHookEscapeAutoFail) == 0x000001, "Wrong alignment on HookableComponent_Authority_DebugSetHookEscapeAutoFail");
static_assert(sizeof(HookableComponent_Authority_DebugSetHookEscapeAutoFail) == 0x000001, "Wrong size on HookableComponent_Authority_DebugSetHookEscapeAutoFail");
static_assert(offsetof(HookableComponent_Authority_DebugSetHookEscapeAutoFail, fail) == 0x000000, "Member 'HookableComponent_Authority_DebugSetHookEscapeAutoFail::fail' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.Authority_DebugSetHookEscapeAutoSuccess
// 0x0001 (0x0001 - 0x0000)
struct HookableComponent_Authority_DebugSetHookEscapeAutoSuccess final
{
public:
	bool                                          success;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_Authority_DebugSetHookEscapeAutoSuccess) == 0x000001, "Wrong alignment on HookableComponent_Authority_DebugSetHookEscapeAutoSuccess");
static_assert(sizeof(HookableComponent_Authority_DebugSetHookEscapeAutoSuccess) == 0x000001, "Wrong size on HookableComponent_Authority_DebugSetHookEscapeAutoSuccess");
static_assert(offsetof(HookableComponent_Authority_DebugSetHookEscapeAutoSuccess, success) == 0x000000, "Member 'HookableComponent_Authority_DebugSetHookEscapeAutoSuccess::success' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.Authority_SetDrainTimerPercentLeft
// 0x0004 (0x0004 - 0x0000)
struct HookableComponent_Authority_SetDrainTimerPercentLeft final
{
public:
	float                                         percentTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_Authority_SetDrainTimerPercentLeft) == 0x000004, "Wrong alignment on HookableComponent_Authority_SetDrainTimerPercentLeft");
static_assert(sizeof(HookableComponent_Authority_SetDrainTimerPercentLeft) == 0x000004, "Wrong size on HookableComponent_Authority_SetDrainTimerPercentLeft");
static_assert(offsetof(HookableComponent_Authority_SetDrainTimerPercentLeft, percentTime) == 0x000000, "Member 'HookableComponent_Authority_SetDrainTimerPercentLeft::percentTime' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.Multicast_DebugSetHookDrainStage
// 0x0004 (0x0004 - 0x0000)
struct HookableComponent_Multicast_DebugSetHookDrainStage final
{
public:
	int32                                         drainStage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_Multicast_DebugSetHookDrainStage) == 0x000004, "Wrong alignment on HookableComponent_Multicast_DebugSetHookDrainStage");
static_assert(sizeof(HookableComponent_Multicast_DebugSetHookDrainStage) == 0x000004, "Wrong size on HookableComponent_Multicast_DebugSetHookDrainStage");
static_assert(offsetof(HookableComponent_Multicast_DebugSetHookDrainStage, drainStage) == 0x000000, "Member 'HookableComponent_Multicast_DebugSetHookDrainStage::drainStage' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.Multicast_SetDrainTimerPercentLeft
// 0x0004 (0x0004 - 0x0000)
struct HookableComponent_Multicast_SetDrainTimerPercentLeft final
{
public:
	float                                         percentTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_Multicast_SetDrainTimerPercentLeft) == 0x000004, "Wrong alignment on HookableComponent_Multicast_SetDrainTimerPercentLeft");
static_assert(sizeof(HookableComponent_Multicast_SetDrainTimerPercentLeft) == 0x000004, "Wrong size on HookableComponent_Multicast_SetDrainTimerPercentLeft");
static_assert(offsetof(HookableComponent_Multicast_SetDrainTimerPercentLeft, percentTime) == 0x000000, "Member 'HookableComponent_Multicast_SetDrainTimerPercentLeft::percentTime' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.GetDrainTimerPercentLeft
// 0x0004 (0x0004 - 0x0000)
struct HookableComponent_GetDrainTimerPercentLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_GetDrainTimerPercentLeft) == 0x000004, "Wrong alignment on HookableComponent_GetDrainTimerPercentLeft");
static_assert(sizeof(HookableComponent_GetDrainTimerPercentLeft) == 0x000004, "Wrong size on HookableComponent_GetDrainTimerPercentLeft");
static_assert(offsetof(HookableComponent_GetDrainTimerPercentLeft, ReturnValue) == 0x000000, "Member 'HookableComponent_GetDrainTimerPercentLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.GetHookedCount
// 0x0004 (0x0004 - 0x0000)
struct HookableComponent_GetHookedCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_GetHookedCount) == 0x000004, "Wrong alignment on HookableComponent_GetHookedCount");
static_assert(sizeof(HookableComponent_GetHookedCount) == 0x000004, "Wrong size on HookableComponent_GetHookedCount");
static_assert(offsetof(HookableComponent_GetHookedCount, ReturnValue) == 0x000000, "Member 'HookableComponent_GetHookedCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDProjectileUtilities.CreateProjectilePoolAdapter
// 0x0018 (0x0018 - 0x0000)
struct DBDProjectileUtilities_CreateProjectilePoolAdapter final
{
public:
	class UObject*                                outer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAuthoritativeActorPoolComponent*       pool;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAuthoritativePoolProjectileProviderAdapter* ReturnValue;                                  // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDProjectileUtilities_CreateProjectilePoolAdapter) == 0x000008, "Wrong alignment on DBDProjectileUtilities_CreateProjectilePoolAdapter");
static_assert(sizeof(DBDProjectileUtilities_CreateProjectilePoolAdapter) == 0x000018, "Wrong size on DBDProjectileUtilities_CreateProjectilePoolAdapter");
static_assert(offsetof(DBDProjectileUtilities_CreateProjectilePoolAdapter, outer) == 0x000000, "Member 'DBDProjectileUtilities_CreateProjectilePoolAdapter::outer' has a wrong offset!");
static_assert(offsetof(DBDProjectileUtilities_CreateProjectilePoolAdapter, pool) == 0x000008, "Member 'DBDProjectileUtilities_CreateProjectilePoolAdapter::pool' has a wrong offset!");
static_assert(offsetof(DBDProjectileUtilities_CreateProjectilePoolAdapter, ReturnValue) == 0x000010, "Member 'DBDProjectileUtilities_CreateProjectilePoolAdapter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDSpecialEventUtilities.DoesPlayerHasEventOffering
// 0x0010 (0x0010 - 0x0000)
struct DBDSpecialEventUtilities_DoesPlayerHasEventOffering final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOfferingEffectType                           offeringEffectType;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDSpecialEventUtilities_DoesPlayerHasEventOffering) == 0x000008, "Wrong alignment on DBDSpecialEventUtilities_DoesPlayerHasEventOffering");
static_assert(sizeof(DBDSpecialEventUtilities_DoesPlayerHasEventOffering) == 0x000010, "Wrong size on DBDSpecialEventUtilities_DoesPlayerHasEventOffering");
static_assert(offsetof(DBDSpecialEventUtilities_DoesPlayerHasEventOffering, player) == 0x000000, "Member 'DBDSpecialEventUtilities_DoesPlayerHasEventOffering::player' has a wrong offset!");
static_assert(offsetof(DBDSpecialEventUtilities_DoesPlayerHasEventOffering, offeringEffectType) == 0x000008, "Member 'DBDSpecialEventUtilities_DoesPlayerHasEventOffering::offeringEffectType' has a wrong offset!");
static_assert(offsetof(DBDSpecialEventUtilities_DoesPlayerHasEventOffering, ReturnValue) == 0x000009, "Member 'DBDSpecialEventUtilities_DoesPlayerHasEventOffering::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDSpringArmComponent.IgnoreActor
// 0x0010 (0x0010 - 0x0000)
struct DBDSpringArmComponent_IgnoreActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldIgnore;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDSpringArmComponent_IgnoreActor) == 0x000008, "Wrong alignment on DBDSpringArmComponent_IgnoreActor");
static_assert(sizeof(DBDSpringArmComponent_IgnoreActor) == 0x000010, "Wrong size on DBDSpringArmComponent_IgnoreActor");
static_assert(offsetof(DBDSpringArmComponent_IgnoreActor, Actor) == 0x000000, "Member 'DBDSpringArmComponent_IgnoreActor::Actor' has a wrong offset!");
static_assert(offsetof(DBDSpringArmComponent_IgnoreActor, bShouldIgnore) == 0x000008, "Member 'DBDSpringArmComponent_IgnoreActor::bShouldIgnore' has a wrong offset!");

// Function DeadByDaylight.DBDSurfaceTypeName.Convert
// 0x0010 (0x0010 - 0x0000)
struct DBDSurfaceTypeName_Convert final
{
public:
	EPhysicalSurface                              surfaceType;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDSurfaceTypeName_Convert) == 0x000004, "Wrong alignment on DBDSurfaceTypeName_Convert");
static_assert(sizeof(DBDSurfaceTypeName_Convert) == 0x000010, "Wrong size on DBDSurfaceTypeName_Convert");
static_assert(offsetof(DBDSurfaceTypeName_Convert, surfaceType) == 0x000000, "Member 'DBDSurfaceTypeName_Convert::surfaceType' has a wrong offset!");
static_assert(offsetof(DBDSurfaceTypeName_Convert, ReturnValue) == 0x000004, "Member 'DBDSurfaceTypeName_Convert::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDSurfaceTypeName.ConvertFromPhysicalMaterial
// 0x0018 (0x0018 - 0x0000)
struct DBDSurfaceTypeName_ConvertFromPhysicalMaterial final
{
public:
	const class UPhysicalMaterial*                material;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDSurfaceTypeName_ConvertFromPhysicalMaterial) == 0x000008, "Wrong alignment on DBDSurfaceTypeName_ConvertFromPhysicalMaterial");
static_assert(sizeof(DBDSurfaceTypeName_ConvertFromPhysicalMaterial) == 0x000018, "Wrong size on DBDSurfaceTypeName_ConvertFromPhysicalMaterial");
static_assert(offsetof(DBDSurfaceTypeName_ConvertFromPhysicalMaterial, material) == 0x000000, "Member 'DBDSurfaceTypeName_ConvertFromPhysicalMaterial::material' has a wrong offset!");
static_assert(offsetof(DBDSurfaceTypeName_ConvertFromPhysicalMaterial, ReturnValue) == 0x000008, "Member 'DBDSurfaceTypeName_ConvertFromPhysicalMaterial::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDSurfaceTypeName.GetSurfaceName
// 0x0018 (0x0018 - 0x0000)
struct DBDSurfaceTypeName_GetSurfaceName final
{
public:
	const class UPhysicalMaterial*                physicalMaterial;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDSurfaceTypeName_GetSurfaceName) == 0x000008, "Wrong alignment on DBDSurfaceTypeName_GetSurfaceName");
static_assert(sizeof(DBDSurfaceTypeName_GetSurfaceName) == 0x000018, "Wrong size on DBDSurfaceTypeName_GetSurfaceName");
static_assert(offsetof(DBDSurfaceTypeName_GetSurfaceName, physicalMaterial) == 0x000000, "Member 'DBDSurfaceTypeName_GetSurfaceName::physicalMaterial' has a wrong offset!");
static_assert(offsetof(DBDSurfaceTypeName_GetSurfaceName, ReturnValue) == 0x000008, "Member 'DBDSurfaceTypeName_GetSurfaceName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDSurfaceTypeName.GetSurfaceType
// 0x0010 (0x0010 - 0x0000)
struct DBDSurfaceTypeName_GetSurfaceType final
{
public:
	const class UPhysicalMaterial*                physicalMaterial;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDSurfaceTypeName_GetSurfaceType) == 0x000008, "Wrong alignment on DBDSurfaceTypeName_GetSurfaceType");
static_assert(sizeof(DBDSurfaceTypeName_GetSurfaceType) == 0x000010, "Wrong size on DBDSurfaceTypeName_GetSurfaceType");
static_assert(offsetof(DBDSurfaceTypeName_GetSurfaceType, physicalMaterial) == 0x000000, "Member 'DBDSurfaceTypeName_GetSurfaceType::physicalMaterial' has a wrong offset!");
static_assert(offsetof(DBDSurfaceTypeName_GetSurfaceType, ReturnValue) == 0x000008, "Member 'DBDSurfaceTypeName_GetSurfaceType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.ResetTo
// 0x0004 (0x0004 - 0x0000)
struct DBDTimerComponent_ResetTo final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_ResetTo) == 0x000004, "Wrong alignment on DBDTimerComponent_ResetTo");
static_assert(sizeof(DBDTimerComponent_ResetTo) == 0x000004, "Wrong size on DBDTimerComponent_ResetTo");
static_assert(offsetof(DBDTimerComponent_ResetTo, time) == 0x000000, "Member 'DBDTimerComponent_ResetTo::time' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.Update
// 0x0004 (0x0004 - 0x0000)
struct DBDTimerComponent_Update final
{
public:
	float                                         deltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_Update) == 0x000004, "Wrong alignment on DBDTimerComponent_Update");
static_assert(sizeof(DBDTimerComponent_Update) == 0x000004, "Wrong size on DBDTimerComponent_Update");
static_assert(offsetof(DBDTimerComponent_Update, deltaTime) == 0x000000, "Member 'DBDTimerComponent_Update::deltaTime' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.GetPercentTimeElapsed
// 0x0004 (0x0004 - 0x0000)
struct DBDTimerComponent_GetPercentTimeElapsed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_GetPercentTimeElapsed) == 0x000004, "Wrong alignment on DBDTimerComponent_GetPercentTimeElapsed");
static_assert(sizeof(DBDTimerComponent_GetPercentTimeElapsed) == 0x000004, "Wrong size on DBDTimerComponent_GetPercentTimeElapsed");
static_assert(offsetof(DBDTimerComponent_GetPercentTimeElapsed, ReturnValue) == 0x000000, "Member 'DBDTimerComponent_GetPercentTimeElapsed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.GetPercentTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct DBDTimerComponent_GetPercentTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_GetPercentTimeLeft) == 0x000004, "Wrong alignment on DBDTimerComponent_GetPercentTimeLeft");
static_assert(sizeof(DBDTimerComponent_GetPercentTimeLeft) == 0x000004, "Wrong size on DBDTimerComponent_GetPercentTimeLeft");
static_assert(offsetof(DBDTimerComponent_GetPercentTimeLeft, ReturnValue) == 0x000000, "Member 'DBDTimerComponent_GetPercentTimeLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.GetStartTime
// 0x0004 (0x0004 - 0x0000)
struct DBDTimerComponent_GetStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_GetStartTime) == 0x000004, "Wrong alignment on DBDTimerComponent_GetStartTime");
static_assert(sizeof(DBDTimerComponent_GetStartTime) == 0x000004, "Wrong size on DBDTimerComponent_GetStartTime");
static_assert(offsetof(DBDTimerComponent_GetStartTime, ReturnValue) == 0x000000, "Member 'DBDTimerComponent_GetStartTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.GetTimeElapsed
// 0x0004 (0x0004 - 0x0000)
struct DBDTimerComponent_GetTimeElapsed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_GetTimeElapsed) == 0x000004, "Wrong alignment on DBDTimerComponent_GetTimeElapsed");
static_assert(sizeof(DBDTimerComponent_GetTimeElapsed) == 0x000004, "Wrong size on DBDTimerComponent_GetTimeElapsed");
static_assert(offsetof(DBDTimerComponent_GetTimeElapsed, ReturnValue) == 0x000000, "Member 'DBDTimerComponent_GetTimeElapsed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.GetTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct DBDTimerComponent_GetTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_GetTimeLeft) == 0x000004, "Wrong alignment on DBDTimerComponent_GetTimeLeft");
static_assert(sizeof(DBDTimerComponent_GetTimeLeft) == 0x000004, "Wrong size on DBDTimerComponent_GetTimeLeft");
static_assert(offsetof(DBDTimerComponent_GetTimeLeft, ReturnValue) == 0x000000, "Member 'DBDTimerComponent_GetTimeLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.IsDone
// 0x0001 (0x0001 - 0x0000)
struct DBDTimerComponent_IsDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_IsDone) == 0x000001, "Wrong alignment on DBDTimerComponent_IsDone");
static_assert(sizeof(DBDTimerComponent_IsDone) == 0x000001, "Wrong size on DBDTimerComponent_IsDone");
static_assert(offsetof(DBDTimerComponent_IsDone, ReturnValue) == 0x000000, "Member 'DBDTimerComponent_IsDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.IsOnPause
// 0x0001 (0x0001 - 0x0000)
struct DBDTimerComponent_IsOnPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_IsOnPause) == 0x000001, "Wrong alignment on DBDTimerComponent_IsOnPause");
static_assert(sizeof(DBDTimerComponent_IsOnPause) == 0x000001, "Wrong size on DBDTimerComponent_IsOnPause");
static_assert(offsetof(DBDTimerComponent_IsOnPause, ReturnValue) == 0x000000, "Member 'DBDTimerComponent_IsOnPause::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTunableUtilities.GetEndGameTunableValue
// 0x0018 (0x0018 - 0x0000)
struct DBDTunableUtilities_GetEndGameTunableValue final
{
public:
	class UObject*                                worldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   valueName;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTunableUtilities_GetEndGameTunableValue) == 0x000008, "Wrong alignment on DBDTunableUtilities_GetEndGameTunableValue");
static_assert(sizeof(DBDTunableUtilities_GetEndGameTunableValue) == 0x000018, "Wrong size on DBDTunableUtilities_GetEndGameTunableValue");
static_assert(offsetof(DBDTunableUtilities_GetEndGameTunableValue, worldContextObject) == 0x000000, "Member 'DBDTunableUtilities_GetEndGameTunableValue::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDTunableUtilities_GetEndGameTunableValue, valueName) == 0x000008, "Member 'DBDTunableUtilities_GetEndGameTunableValue::valueName' has a wrong offset!");
static_assert(offsetof(DBDTunableUtilities_GetEndGameTunableValue, ReturnValue) == 0x000014, "Member 'DBDTunableUtilities_GetEndGameTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTunableUtilities.GetSlasherTunableValue
// 0x0018 (0x0018 - 0x0000)
struct DBDTunableUtilities_GetSlasherTunableValue final
{
public:
	class UObject*                                worldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   valueName;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTunableUtilities_GetSlasherTunableValue) == 0x000008, "Wrong alignment on DBDTunableUtilities_GetSlasherTunableValue");
static_assert(sizeof(DBDTunableUtilities_GetSlasherTunableValue) == 0x000018, "Wrong size on DBDTunableUtilities_GetSlasherTunableValue");
static_assert(offsetof(DBDTunableUtilities_GetSlasherTunableValue, worldContextObject) == 0x000000, "Member 'DBDTunableUtilities_GetSlasherTunableValue::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDTunableUtilities_GetSlasherTunableValue, valueName) == 0x000008, "Member 'DBDTunableUtilities_GetSlasherTunableValue::valueName' has a wrong offset!");
static_assert(offsetof(DBDTunableUtilities_GetSlasherTunableValue, ReturnValue) == 0x000014, "Member 'DBDTunableUtilities_GetSlasherTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTunableUtilities.GetTunableRowHandleValue
// 0x0030 (0x0030 - 0x0000)
struct DBDTunableUtilities_GetTunableRowHandleValue final
{
public:
	struct FDBDTunableRowHandle                   rowHandle;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTunableUtilities_GetTunableRowHandleValue) == 0x000008, "Wrong alignment on DBDTunableUtilities_GetTunableRowHandleValue");
static_assert(sizeof(DBDTunableUtilities_GetTunableRowHandleValue) == 0x000030, "Wrong size on DBDTunableUtilities_GetTunableRowHandleValue");
static_assert(offsetof(DBDTunableUtilities_GetTunableRowHandleValue, rowHandle) == 0x000000, "Member 'DBDTunableUtilities_GetTunableRowHandleValue::rowHandle' has a wrong offset!");
static_assert(offsetof(DBDTunableUtilities_GetTunableRowHandleValue, ReturnValue) == 0x000028, "Member 'DBDTunableUtilities_GetTunableRowHandleValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTunableUtilities.GetTunableValue
// 0x0018 (0x0018 - 0x0000)
struct DBDTunableUtilities_GetTunableValue final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   valueName;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTunableUtilities_GetTunableValue) == 0x000008, "Wrong alignment on DBDTunableUtilities_GetTunableValue");
static_assert(sizeof(DBDTunableUtilities_GetTunableValue) == 0x000018, "Wrong size on DBDTunableUtilities_GetTunableValue");
static_assert(offsetof(DBDTunableUtilities_GetTunableValue, worldContextObject) == 0x000000, "Member 'DBDTunableUtilities_GetTunableValue::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDTunableUtilities_GetTunableValue, valueName) == 0x000008, "Member 'DBDTunableUtilities_GetTunableValue::valueName' has a wrong offset!");
static_assert(offsetof(DBDTunableUtilities_GetTunableValue, ReturnValue) == 0x000014, "Member 'DBDTunableUtilities_GetTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.AddComponentToActor
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilities_AddComponentToActor final
{
public:
	class UClass*                                 compClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   compName;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 actor;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_AddComponentToActor) == 0x000008, "Wrong alignment on DBDUtilities_AddComponentToActor");
static_assert(sizeof(DBDUtilities_AddComponentToActor) == 0x000028, "Wrong size on DBDUtilities_AddComponentToActor");
static_assert(offsetof(DBDUtilities_AddComponentToActor, compClass) == 0x000000, "Member 'DBDUtilities_AddComponentToActor::compClass' has a wrong offset!");
static_assert(offsetof(DBDUtilities_AddComponentToActor, compName) == 0x000008, "Member 'DBDUtilities_AddComponentToActor::compName' has a wrong offset!");
static_assert(offsetof(DBDUtilities_AddComponentToActor, actor) == 0x000018, "Member 'DBDUtilities_AddComponentToActor::actor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_AddComponentToActor, ReturnValue) == 0x000020, "Member 'DBDUtilities_AddComponentToActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.BoxTraceAgainstActor
// 0x00C0 (0x00C0 - 0x0000)
struct DBDUtilities_BoxTraceAgainstActor final
{
public:
	struct FVector                                start;                                             // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                end;                                               // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UBoxComponent*                    box;                                               // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           actor;                                             // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             outHitResult;                                      // 0x0028(0x0090)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_BoxTraceAgainstActor) == 0x000008, "Wrong alignment on DBDUtilities_BoxTraceAgainstActor");
static_assert(sizeof(DBDUtilities_BoxTraceAgainstActor) == 0x0000C0, "Wrong size on DBDUtilities_BoxTraceAgainstActor");
static_assert(offsetof(DBDUtilities_BoxTraceAgainstActor, start) == 0x000000, "Member 'DBDUtilities_BoxTraceAgainstActor::start' has a wrong offset!");
static_assert(offsetof(DBDUtilities_BoxTraceAgainstActor, end) == 0x00000C, "Member 'DBDUtilities_BoxTraceAgainstActor::end' has a wrong offset!");
static_assert(offsetof(DBDUtilities_BoxTraceAgainstActor, box) == 0x000018, "Member 'DBDUtilities_BoxTraceAgainstActor::box' has a wrong offset!");
static_assert(offsetof(DBDUtilities_BoxTraceAgainstActor, actor) == 0x000020, "Member 'DBDUtilities_BoxTraceAgainstActor::actor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_BoxTraceAgainstActor, outHitResult) == 0x000028, "Member 'DBDUtilities_BoxTraceAgainstActor::outHitResult' has a wrong offset!");
static_assert(offsetof(DBDUtilities_BoxTraceAgainstActor, ReturnValue) == 0x0000B8, "Member 'DBDUtilities_BoxTraceAgainstActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.DBDCapsuleTraceSingle
// 0x00D8 (0x00D8 - 0x0000)
struct DBDUtilities_DBDCapsuleTraceSingle final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OutHit;                                            // 0x0044(0x0090)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x00D4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D5(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_DBDCapsuleTraceSingle) == 0x000008, "Wrong alignment on DBDUtilities_DBDCapsuleTraceSingle");
static_assert(sizeof(DBDUtilities_DBDCapsuleTraceSingle) == 0x0000D8, "Wrong size on DBDUtilities_DBDCapsuleTraceSingle");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, WorldContextObject) == 0x000000, "Member 'DBDUtilities_DBDCapsuleTraceSingle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, Start) == 0x000008, "Member 'DBDUtilities_DBDCapsuleTraceSingle::Start' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, End) == 0x000014, "Member 'DBDUtilities_DBDCapsuleTraceSingle::End' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, Radius) == 0x000020, "Member 'DBDUtilities_DBDCapsuleTraceSingle::Radius' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, HalfHeight) == 0x000024, "Member 'DBDUtilities_DBDCapsuleTraceSingle::HalfHeight' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, TraceChannel) == 0x000028, "Member 'DBDUtilities_DBDCapsuleTraceSingle::TraceChannel' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, bTraceComplex) == 0x000029, "Member 'DBDUtilities_DBDCapsuleTraceSingle::bTraceComplex' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, ActorsToIgnore) == 0x000030, "Member 'DBDUtilities_DBDCapsuleTraceSingle::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, DrawDebugType) == 0x000040, "Member 'DBDUtilities_DBDCapsuleTraceSingle::DrawDebugType' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, OutHit) == 0x000044, "Member 'DBDUtilities_DBDCapsuleTraceSingle::OutHit' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, bIgnoreSelf) == 0x0000D4, "Member 'DBDUtilities_DBDCapsuleTraceSingle::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, ReturnValue) == 0x0000D5, "Member 'DBDUtilities_DBDCapsuleTraceSingle::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.DBDLoadAudioBank
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_DBDLoadAudioBank final
{
public:
	class UAkAudioBank*                           bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 caller;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_DBDLoadAudioBank) == 0x000008, "Wrong alignment on DBDUtilities_DBDLoadAudioBank");
static_assert(sizeof(DBDUtilities_DBDLoadAudioBank) == 0x000010, "Wrong size on DBDUtilities_DBDLoadAudioBank");
static_assert(offsetof(DBDUtilities_DBDLoadAudioBank, bank) == 0x000000, "Member 'DBDUtilities_DBDLoadAudioBank::bank' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDLoadAudioBank, caller) == 0x000008, "Member 'DBDUtilities_DBDLoadAudioBank::caller' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.DBDLoadAudioBankAsync
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_DBDLoadAudioBankAsync final
{
public:
	class UAkAudioBank*                           bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 caller;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_DBDLoadAudioBankAsync) == 0x000008, "Wrong alignment on DBDUtilities_DBDLoadAudioBankAsync");
static_assert(sizeof(DBDUtilities_DBDLoadAudioBankAsync) == 0x000010, "Wrong size on DBDUtilities_DBDLoadAudioBankAsync");
static_assert(offsetof(DBDUtilities_DBDLoadAudioBankAsync, bank) == 0x000000, "Member 'DBDUtilities_DBDLoadAudioBankAsync::bank' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDLoadAudioBankAsync, caller) == 0x000008, "Member 'DBDUtilities_DBDLoadAudioBankAsync::caller' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.DBDLoadAudioBankByAssetPtr
// 0x0040 (0x0040 - 0x0000)
struct DBDUtilities_DBDLoadAudioBankByAssetPtr final
{
public:
	TSoftObjectPtr<class UAkAudioBank>            bank;                                              // 0x0000(0x0030)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 caller;                                            // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_DBDLoadAudioBankByAssetPtr) == 0x000008, "Wrong alignment on DBDUtilities_DBDLoadAudioBankByAssetPtr");
static_assert(sizeof(DBDUtilities_DBDLoadAudioBankByAssetPtr) == 0x000040, "Wrong size on DBDUtilities_DBDLoadAudioBankByAssetPtr");
static_assert(offsetof(DBDUtilities_DBDLoadAudioBankByAssetPtr, bank) == 0x000000, "Member 'DBDUtilities_DBDLoadAudioBankByAssetPtr::bank' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDLoadAudioBankByAssetPtr, caller) == 0x000030, "Member 'DBDUtilities_DBDLoadAudioBankByAssetPtr::caller' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDLoadAudioBankByAssetPtr, ReturnValue) == 0x000038, "Member 'DBDUtilities_DBDLoadAudioBankByAssetPtr::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.DistanceFromPointToPane
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilities_DistanceFromPointToPane final
{
public:
	struct FVector                                point;                                             // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlane                                 plane;                                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_DistanceFromPointToPane) == 0x000010, "Wrong alignment on DBDUtilities_DistanceFromPointToPane");
static_assert(sizeof(DBDUtilities_DistanceFromPointToPane) == 0x000030, "Wrong size on DBDUtilities_DistanceFromPointToPane");
static_assert(offsetof(DBDUtilities_DistanceFromPointToPane, point) == 0x000000, "Member 'DBDUtilities_DistanceFromPointToPane::point' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DistanceFromPointToPane, plane) == 0x000010, "Member 'DBDUtilities_DistanceFromPointToPane::plane' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DistanceFromPointToPane, ReturnValue) == 0x000020, "Member 'DBDUtilities_DistanceFromPointToPane::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.FindFloorSingle
// 0x00B0 (0x00B0 - 0x0000)
struct DBDUtilities_FindFloorSingle final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         raycastLength;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             outHit;                                            // 0x0018(0x0090)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_FindFloorSingle) == 0x000008, "Wrong alignment on DBDUtilities_FindFloorSingle");
static_assert(sizeof(DBDUtilities_FindFloorSingle) == 0x0000B0, "Wrong size on DBDUtilities_FindFloorSingle");
static_assert(offsetof(DBDUtilities_FindFloorSingle, WorldContextObject) == 0x000000, "Member 'DBDUtilities_FindFloorSingle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_FindFloorSingle, location) == 0x000008, "Member 'DBDUtilities_FindFloorSingle::location' has a wrong offset!");
static_assert(offsetof(DBDUtilities_FindFloorSingle, raycastLength) == 0x000014, "Member 'DBDUtilities_FindFloorSingle::raycastLength' has a wrong offset!");
static_assert(offsetof(DBDUtilities_FindFloorSingle, outHit) == 0x000018, "Member 'DBDUtilities_FindFloorSingle::outHit' has a wrong offset!");
static_assert(offsetof(DBDUtilities_FindFloorSingle, ReturnValue) == 0x0000A8, "Member 'DBDUtilities_FindFloorSingle::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.FindParentOfClass
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_FindParentOfClass final
{
public:
	class AActor*                                 InChild;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 InClass;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_FindParentOfClass) == 0x000008, "Wrong alignment on DBDUtilities_FindParentOfClass");
static_assert(sizeof(DBDUtilities_FindParentOfClass) == 0x000018, "Wrong size on DBDUtilities_FindParentOfClass");
static_assert(offsetof(DBDUtilities_FindParentOfClass, InChild) == 0x000000, "Member 'DBDUtilities_FindParentOfClass::InChild' has a wrong offset!");
static_assert(offsetof(DBDUtilities_FindParentOfClass, InClass) == 0x000008, "Member 'DBDUtilities_FindParentOfClass::InClass' has a wrong offset!");
static_assert(offsetof(DBDUtilities_FindParentOfClass, ReturnValue) == 0x000010, "Member 'DBDUtilities_FindParentOfClass::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetActiveShadowSystem
// 0x0001 (0x0001 - 0x0000)
struct DBDUtilities_GetActiveShadowSystem final
{
public:
	EShadowSystem                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetActiveShadowSystem) == 0x000001, "Wrong alignment on DBDUtilities_GetActiveShadowSystem");
static_assert(sizeof(DBDUtilities_GetActiveShadowSystem) == 0x000001, "Wrong size on DBDUtilities_GetActiveShadowSystem");
static_assert(offsetof(DBDUtilities_GetActiveShadowSystem, ReturnValue) == 0x000000, "Member 'DBDUtilities_GetActiveShadowSystem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetActorOwnerName
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_GetActorOwnerName final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetActorOwnerName) == 0x000008, "Wrong alignment on DBDUtilities_GetActorOwnerName");
static_assert(sizeof(DBDUtilities_GetActorOwnerName) == 0x000018, "Wrong size on DBDUtilities_GetActorOwnerName");
static_assert(offsetof(DBDUtilities_GetActorOwnerName, actor) == 0x000000, "Member 'DBDUtilities_GetActorOwnerName::actor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetActorOwnerName, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetActorOwnerName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetActorSpawners
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetActorSpawners final
{
public:
	TArray<class UActorSpawner*>                  actorSpawners;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetActorSpawners) == 0x000008, "Wrong alignment on DBDUtilities_GetActorSpawners");
static_assert(sizeof(DBDUtilities_GetActorSpawners) == 0x000010, "Wrong size on DBDUtilities_GetActorSpawners");
static_assert(offsetof(DBDUtilities_GetActorSpawners, actorSpawners) == 0x000000, "Member 'DBDUtilities_GetActorSpawners::actorSpawners' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetAnimSequenceLength
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetAnimSequenceLength final
{
public:
	const class UAnimSequence*                    sequence;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetAnimSequenceLength) == 0x000008, "Wrong alignment on DBDUtilities_GetAnimSequenceLength");
static_assert(sizeof(DBDUtilities_GetAnimSequenceLength) == 0x000010, "Wrong size on DBDUtilities_GetAnimSequenceLength");
static_assert(offsetof(DBDUtilities_GetAnimSequenceLength, sequence) == 0x000000, "Member 'DBDUtilities_GetAnimSequenceLength::sequence' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetAnimSequenceLength, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetAnimSequenceLength::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetBuilder
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetBuilder final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AProceduralLevelBuilder*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetBuilder) == 0x000008, "Wrong alignment on DBDUtilities_GetBuilder");
static_assert(sizeof(DBDUtilities_GetBuilder) == 0x000010, "Wrong size on DBDUtilities_GetBuilder");
static_assert(offsetof(DBDUtilities_GetBuilder, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetBuilder::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetBuilder, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetBuilder::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetClosestPointOnOrbit
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilities_GetClosestPointOnOrbit final
{
public:
	struct FVector                                centerPoint;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                orbitterPosition;                                  // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         distance;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetClosestPointOnOrbit) == 0x000004, "Wrong alignment on DBDUtilities_GetClosestPointOnOrbit");
static_assert(sizeof(DBDUtilities_GetClosestPointOnOrbit) == 0x000028, "Wrong size on DBDUtilities_GetClosestPointOnOrbit");
static_assert(offsetof(DBDUtilities_GetClosestPointOnOrbit, centerPoint) == 0x000000, "Member 'DBDUtilities_GetClosestPointOnOrbit::centerPoint' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetClosestPointOnOrbit, orbitterPosition) == 0x00000C, "Member 'DBDUtilities_GetClosestPointOnOrbit::orbitterPosition' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetClosestPointOnOrbit, distance) == 0x000018, "Member 'DBDUtilities_GetClosestPointOnOrbit::distance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetClosestPointOnOrbit, ReturnValue) == 0x00001C, "Member 'DBDUtilities_GetClosestPointOnOrbit::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetClosestSnapTransformOnOrbit
// 0x0050 (0x0050 - 0x0000)
struct DBDUtilities_GetClosestSnapTransformOnOrbit final
{
public:
	struct FVector                                centerPoint;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                orbitterPosition;                                  // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         distance;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetClosestSnapTransformOnOrbit) == 0x000010, "Wrong alignment on DBDUtilities_GetClosestSnapTransformOnOrbit");
static_assert(sizeof(DBDUtilities_GetClosestSnapTransformOnOrbit) == 0x000050, "Wrong size on DBDUtilities_GetClosestSnapTransformOnOrbit");
static_assert(offsetof(DBDUtilities_GetClosestSnapTransformOnOrbit, centerPoint) == 0x000000, "Member 'DBDUtilities_GetClosestSnapTransformOnOrbit::centerPoint' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetClosestSnapTransformOnOrbit, orbitterPosition) == 0x00000C, "Member 'DBDUtilities_GetClosestSnapTransformOnOrbit::orbitterPosition' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetClosestSnapTransformOnOrbit, distance) == 0x000018, "Member 'DBDUtilities_GetClosestSnapTransformOnOrbit::distance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetClosestSnapTransformOnOrbit, ReturnValue) == 0x000020, "Member 'DBDUtilities_GetClosestSnapTransformOnOrbit::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetComponentOwnerName
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_GetComponentOwnerName final
{
public:
	class UActorComponent*                        actorComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetComponentOwnerName) == 0x000008, "Wrong alignment on DBDUtilities_GetComponentOwnerName");
static_assert(sizeof(DBDUtilities_GetComponentOwnerName) == 0x000018, "Wrong size on DBDUtilities_GetComponentOwnerName");
static_assert(offsetof(DBDUtilities_GetComponentOwnerName, actorComponent) == 0x000000, "Member 'DBDUtilities_GetComponentOwnerName::actorComponent' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetComponentOwnerName, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetComponentOwnerName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetDBDAIPlayerController
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetDBDAIPlayerController final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDAIPlayerController*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetDBDAIPlayerController) == 0x000008, "Wrong alignment on DBDUtilities_GetDBDAIPlayerController");
static_assert(sizeof(DBDUtilities_GetDBDAIPlayerController) == 0x000010, "Wrong size on DBDUtilities_GetDBDAIPlayerController");
static_assert(offsetof(DBDUtilities_GetDBDAIPlayerController, player) == 0x000000, "Member 'DBDUtilities_GetDBDAIPlayerController::player' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetDBDAIPlayerController, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetDBDAIPlayerController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetDBDGameInstance
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetDBDGameInstance final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDGameInstance*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetDBDGameInstance) == 0x000008, "Wrong alignment on DBDUtilities_GetDBDGameInstance");
static_assert(sizeof(DBDUtilities_GetDBDGameInstance) == 0x000010, "Wrong size on DBDUtilities_GetDBDGameInstance");
static_assert(offsetof(DBDUtilities_GetDBDGameInstance, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetDBDGameInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetDBDGameInstance, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetDBDGameInstance::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetDBDGameMode
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetDBDGameMode final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDGameMode*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetDBDGameMode) == 0x000008, "Wrong alignment on DBDUtilities_GetDBDGameMode");
static_assert(sizeof(DBDUtilities_GetDBDGameMode) == 0x000010, "Wrong size on DBDUtilities_GetDBDGameMode");
static_assert(offsetof(DBDUtilities_GetDBDGameMode, worldContextObject) == 0x000000, "Member 'DBDUtilities_GetDBDGameMode::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetDBDGameMode, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetDBDGameMode::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetDBDGameState
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetDBDGameState final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDGameState*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetDBDGameState) == 0x000008, "Wrong alignment on DBDUtilities_GetDBDGameState");
static_assert(sizeof(DBDUtilities_GetDBDGameState) == 0x000010, "Wrong size on DBDUtilities_GetDBDGameState");
static_assert(offsetof(DBDUtilities_GetDBDGameState, worldContextObject) == 0x000000, "Member 'DBDUtilities_GetDBDGameState::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetDBDGameState, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetDBDGameState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetDistanceToNearestHookedSurvivor
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetDistanceToNearestHookedSurvivor final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetDistanceToNearestHookedSurvivor) == 0x000008, "Wrong alignment on DBDUtilities_GetDistanceToNearestHookedSurvivor");
static_assert(sizeof(DBDUtilities_GetDistanceToNearestHookedSurvivor) == 0x000010, "Wrong size on DBDUtilities_GetDistanceToNearestHookedSurvivor");
static_assert(offsetof(DBDUtilities_GetDistanceToNearestHookedSurvivor, player) == 0x000000, "Member 'DBDUtilities_GetDistanceToNearestHookedSurvivor::player' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetDistanceToNearestHookedSurvivor, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetDistanceToNearestHookedSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetEndGameTunableValue
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_GetEndGameTunableValue final
{
public:
	class UObject*                                worldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   valueName;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetEndGameTunableValue) == 0x000008, "Wrong alignment on DBDUtilities_GetEndGameTunableValue");
static_assert(sizeof(DBDUtilities_GetEndGameTunableValue) == 0x000018, "Wrong size on DBDUtilities_GetEndGameTunableValue");
static_assert(offsetof(DBDUtilities_GetEndGameTunableValue, worldContextObject) == 0x000000, "Member 'DBDUtilities_GetEndGameTunableValue::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetEndGameTunableValue, valueName) == 0x000008, "Member 'DBDUtilities_GetEndGameTunableValue::valueName' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetEndGameTunableValue, ReturnValue) == 0x000014, "Member 'DBDUtilities_GetEndGameTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetFirstActorWithTag
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilities_GetFirstActorWithTag final
{
public:
	class FName                                   tag;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         actorsArray;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetFirstActorWithTag) == 0x000008, "Wrong alignment on DBDUtilities_GetFirstActorWithTag");
static_assert(sizeof(DBDUtilities_GetFirstActorWithTag) == 0x000028, "Wrong size on DBDUtilities_GetFirstActorWithTag");
static_assert(offsetof(DBDUtilities_GetFirstActorWithTag, tag) == 0x000000, "Member 'DBDUtilities_GetFirstActorWithTag::tag' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFirstActorWithTag, actorsArray) == 0x000010, "Member 'DBDUtilities_GetFirstActorWithTag::actorsArray' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFirstActorWithTag, ReturnValue) == 0x000020, "Member 'DBDUtilities_GetFirstActorWithTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetFloorLocationAt
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilities_GetFloorLocationAt final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         raycastStartHeight;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         raycastEndHeight;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useComplex;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetFloorLocationAt) == 0x000008, "Wrong alignment on DBDUtilities_GetFloorLocationAt");
static_assert(sizeof(DBDUtilities_GetFloorLocationAt) == 0x000030, "Wrong size on DBDUtilities_GetFloorLocationAt");
static_assert(offsetof(DBDUtilities_GetFloorLocationAt, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetFloorLocationAt::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFloorLocationAt, location) == 0x000008, "Member 'DBDUtilities_GetFloorLocationAt::location' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFloorLocationAt, raycastStartHeight) == 0x000014, "Member 'DBDUtilities_GetFloorLocationAt::raycastStartHeight' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFloorLocationAt, raycastEndHeight) == 0x000018, "Member 'DBDUtilities_GetFloorLocationAt::raycastEndHeight' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFloorLocationAt, useComplex) == 0x00001C, "Member 'DBDUtilities_GetFloorLocationAt::useComplex' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFloorLocationAt, ReturnValue) == 0x000020, "Member 'DBDUtilities_GetFloorLocationAt::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetFormattedNumberString
// 0x0020 (0x0020 - 0x0000)
struct DBDUtilities_GetFormattedNumberString final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxDecimals;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         minDecimals;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          leadingZero;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetFormattedNumberString) == 0x000008, "Wrong alignment on DBDUtilities_GetFormattedNumberString");
static_assert(sizeof(DBDUtilities_GetFormattedNumberString) == 0x000020, "Wrong size on DBDUtilities_GetFormattedNumberString");
static_assert(offsetof(DBDUtilities_GetFormattedNumberString, value) == 0x000000, "Member 'DBDUtilities_GetFormattedNumberString::value' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberString, maxDecimals) == 0x000004, "Member 'DBDUtilities_GetFormattedNumberString::maxDecimals' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberString, minDecimals) == 0x000008, "Member 'DBDUtilities_GetFormattedNumberString::minDecimals' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberString, leadingZero) == 0x00000C, "Member 'DBDUtilities_GetFormattedNumberString::leadingZero' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberString, ReturnValue) == 0x000010, "Member 'DBDUtilities_GetFormattedNumberString::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetFormattedNumberText
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilities_GetFormattedNumberText final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxDecimals;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         minDecimals;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          leadingZero;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetFormattedNumberText) == 0x000008, "Wrong alignment on DBDUtilities_GetFormattedNumberText");
static_assert(sizeof(DBDUtilities_GetFormattedNumberText) == 0x000028, "Wrong size on DBDUtilities_GetFormattedNumberText");
static_assert(offsetof(DBDUtilities_GetFormattedNumberText, value) == 0x000000, "Member 'DBDUtilities_GetFormattedNumberText::value' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberText, maxDecimals) == 0x000004, "Member 'DBDUtilities_GetFormattedNumberText::maxDecimals' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberText, minDecimals) == 0x000008, "Member 'DBDUtilities_GetFormattedNumberText::minDecimals' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberText, leadingZero) == 0x00000C, "Member 'DBDUtilities_GetFormattedNumberText::leadingZero' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberText, ReturnValue) == 0x000010, "Member 'DBDUtilities_GetFormattedNumberText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetImpactCollisionObjectType
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetImpactCollisionObjectType final
{
public:
	const class UPrimitiveComponent*              primitive;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetImpactCollisionObjectType) == 0x000008, "Wrong alignment on DBDUtilities_GetImpactCollisionObjectType");
static_assert(sizeof(DBDUtilities_GetImpactCollisionObjectType) == 0x000010, "Wrong size on DBDUtilities_GetImpactCollisionObjectType");
static_assert(offsetof(DBDUtilities_GetImpactCollisionObjectType, primitive) == 0x000000, "Member 'DBDUtilities_GetImpactCollisionObjectType::primitive' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetImpactCollisionObjectType, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetImpactCollisionObjectType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetImpactCollisionResponseContainer
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilities_GetImpactCollisionResponseContainer final
{
public:
	const class UPrimitiveComponent*              primitive;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionResponseContainer            ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetImpactCollisionResponseContainer) == 0x000008, "Wrong alignment on DBDUtilities_GetImpactCollisionResponseContainer");
static_assert(sizeof(DBDUtilities_GetImpactCollisionResponseContainer) == 0x000028, "Wrong size on DBDUtilities_GetImpactCollisionResponseContainer");
static_assert(offsetof(DBDUtilities_GetImpactCollisionResponseContainer, primitive) == 0x000000, "Member 'DBDUtilities_GetImpactCollisionResponseContainer::primitive' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetImpactCollisionResponseContainer, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetImpactCollisionResponseContainer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetInventoryCount
// 0x0020 (0x0020 - 0x0000)
struct DBDUtilities_GetInventoryCount final
{
public:
	class UObject*                                worldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         characterIndex;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   itemID;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetInventoryCount) == 0x000008, "Wrong alignment on DBDUtilities_GetInventoryCount");
static_assert(sizeof(DBDUtilities_GetInventoryCount) == 0x000020, "Wrong size on DBDUtilities_GetInventoryCount");
static_assert(offsetof(DBDUtilities_GetInventoryCount, worldContextObject) == 0x000000, "Member 'DBDUtilities_GetInventoryCount::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetInventoryCount, characterIndex) == 0x000008, "Member 'DBDUtilities_GetInventoryCount::characterIndex' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetInventoryCount, itemID) == 0x00000C, "Member 'DBDUtilities_GetInventoryCount::itemID' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetInventoryCount, ReturnValue) == 0x000018, "Member 'DBDUtilities_GetInventoryCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetInventoryCountForMultipleCharacters
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilities_GetInventoryCountForMultipleCharacters final
{
public:
	class UObject*                                worldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 characterIndexes;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   itemID;                                            // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetInventoryCountForMultipleCharacters) == 0x000008, "Wrong alignment on DBDUtilities_GetInventoryCountForMultipleCharacters");
static_assert(sizeof(DBDUtilities_GetInventoryCountForMultipleCharacters) == 0x000028, "Wrong size on DBDUtilities_GetInventoryCountForMultipleCharacters");
static_assert(offsetof(DBDUtilities_GetInventoryCountForMultipleCharacters, worldContextObject) == 0x000000, "Member 'DBDUtilities_GetInventoryCountForMultipleCharacters::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetInventoryCountForMultipleCharacters, characterIndexes) == 0x000008, "Member 'DBDUtilities_GetInventoryCountForMultipleCharacters::characterIndexes' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetInventoryCountForMultipleCharacters, itemID) == 0x000018, "Member 'DBDUtilities_GetInventoryCountForMultipleCharacters::itemID' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetInventoryCountForMultipleCharacters, ReturnValue) == 0x000024, "Member 'DBDUtilities_GetInventoryCountForMultipleCharacters::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocalDBDCameraManager
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocalDBDCameraManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayerCameraManager*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetLocalDBDCameraManager) == 0x000008, "Wrong alignment on DBDUtilities_GetLocalDBDCameraManager");
static_assert(sizeof(DBDUtilities_GetLocalDBDCameraManager) == 0x000010, "Wrong size on DBDUtilities_GetLocalDBDCameraManager");
static_assert(offsetof(DBDUtilities_GetLocalDBDCameraManager, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocalDBDCameraManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocalDBDCameraManager, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocalDBDCameraManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocalDBDPlayerController
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocalDBDPlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayerControllerBase*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetLocalDBDPlayerController) == 0x000008, "Wrong alignment on DBDUtilities_GetLocalDBDPlayerController");
static_assert(sizeof(DBDUtilities_GetLocalDBDPlayerController) == 0x000010, "Wrong size on DBDUtilities_GetLocalDBDPlayerController");
static_assert(offsetof(DBDUtilities_GetLocalDBDPlayerController, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocalDBDPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocalDBDPlayerController, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocalDBDPlayerController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocallyControlledCharacter
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocallyControlledCharacter final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetLocallyControlledCharacter) == 0x000008, "Wrong alignment on DBDUtilities_GetLocallyControlledCharacter");
static_assert(sizeof(DBDUtilities_GetLocallyControlledCharacter) == 0x000010, "Wrong size on DBDUtilities_GetLocallyControlledCharacter");
static_assert(offsetof(DBDUtilities_GetLocallyControlledCharacter, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocallyControlledCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocallyControlledCharacter, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocallyControlledCharacter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocallyControlledCharacterRole
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocallyControlledCharacterRole final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetLocallyControlledCharacterRole) == 0x000008, "Wrong alignment on DBDUtilities_GetLocallyControlledCharacterRole");
static_assert(sizeof(DBDUtilities_GetLocallyControlledCharacterRole) == 0x000010, "Wrong size on DBDUtilities_GetLocallyControlledCharacterRole");
static_assert(offsetof(DBDUtilities_GetLocallyControlledCharacterRole, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocallyControlledCharacterRole::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocallyControlledCharacterRole, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocallyControlledCharacterRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocallyControlledKiller
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocallyControlledKiller final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetLocallyControlledKiller) == 0x000008, "Wrong alignment on DBDUtilities_GetLocallyControlledKiller");
static_assert(sizeof(DBDUtilities_GetLocallyControlledKiller) == 0x000010, "Wrong size on DBDUtilities_GetLocallyControlledKiller");
static_assert(offsetof(DBDUtilities_GetLocallyControlledKiller, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocallyControlledKiller::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocallyControlledKiller, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocallyControlledKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocallyControlledSurvivor
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocallyControlledSurvivor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetLocallyControlledSurvivor) == 0x000008, "Wrong alignment on DBDUtilities_GetLocallyControlledSurvivor");
static_assert(sizeof(DBDUtilities_GetLocallyControlledSurvivor) == 0x000010, "Wrong size on DBDUtilities_GetLocallyControlledSurvivor");
static_assert(offsetof(DBDUtilities_GetLocallyControlledSurvivor, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocallyControlledSurvivor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocallyControlledSurvivor, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocallyControlledSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocallyObservedCharacter
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocallyObservedCharacter final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetLocallyObservedCharacter) == 0x000008, "Wrong alignment on DBDUtilities_GetLocallyObservedCharacter");
static_assert(sizeof(DBDUtilities_GetLocallyObservedCharacter) == 0x000010, "Wrong size on DBDUtilities_GetLocallyObservedCharacter");
static_assert(offsetof(DBDUtilities_GetLocallyObservedCharacter, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocallyObservedCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocallyObservedCharacter, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocallyObservedCharacter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocallyObservedCharacterRole
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocallyObservedCharacterRole final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetLocallyObservedCharacterRole) == 0x000008, "Wrong alignment on DBDUtilities_GetLocallyObservedCharacterRole");
static_assert(sizeof(DBDUtilities_GetLocallyObservedCharacterRole) == 0x000010, "Wrong size on DBDUtilities_GetLocallyObservedCharacterRole");
static_assert(offsetof(DBDUtilities_GetLocallyObservedCharacterRole, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocallyObservedCharacterRole::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocallyObservedCharacterRole, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocallyObservedCharacterRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLogStringMaterialInfo
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilities_GetLogStringMaterialInfo final
{
public:
	class FString                                 inStr;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMaterialInterface*               root;                                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetLogStringMaterialInfo) == 0x000008, "Wrong alignment on DBDUtilities_GetLogStringMaterialInfo");
static_assert(sizeof(DBDUtilities_GetLogStringMaterialInfo) == 0x000028, "Wrong size on DBDUtilities_GetLogStringMaterialInfo");
static_assert(offsetof(DBDUtilities_GetLogStringMaterialInfo, inStr) == 0x000000, "Member 'DBDUtilities_GetLogStringMaterialInfo::inStr' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLogStringMaterialInfo, root) == 0x000010, "Member 'DBDUtilities_GetLogStringMaterialInfo::root' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLogStringMaterialInfo, ReturnValue) == 0x000018, "Member 'DBDUtilities_GetLogStringMaterialInfo::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetMaterialHelpersAttachedToPlayerMesh
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialHelper*>                ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh) == 0x000008, "Wrong alignment on DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh");
static_assert(sizeof(DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh) == 0x000018, "Wrong size on DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh");
static_assert(offsetof(DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh, player) == 0x000000, "Member 'DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh::player' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetMontageLength
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetMontageLength final
{
public:
	class UAnimMontage*                           montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetMontageLength) == 0x000008, "Wrong alignment on DBDUtilities_GetMontageLength");
static_assert(sizeof(DBDUtilities_GetMontageLength) == 0x000010, "Wrong size on DBDUtilities_GetMontageLength");
static_assert(offsetof(DBDUtilities_GetMontageLength, montage) == 0x000000, "Member 'DBDUtilities_GetMontageLength::montage' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetMontageLength, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetMontageLength::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetNearbyActorsOfType
// 0x0048 (0x0048 - 0x0000)
struct DBDUtilities_GetNearbyActorsOfType final
{
public:
	class UWorld*                                 world;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                center;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         outNearbyActors;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UClass*                                 actorClassType;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             collisionChannel;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ignoreActor;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetNearbyActorsOfType) == 0x000008, "Wrong alignment on DBDUtilities_GetNearbyActorsOfType");
static_assert(sizeof(DBDUtilities_GetNearbyActorsOfType) == 0x000048, "Wrong size on DBDUtilities_GetNearbyActorsOfType");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, world) == 0x000000, "Member 'DBDUtilities_GetNearbyActorsOfType::world' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, center) == 0x000008, "Member 'DBDUtilities_GetNearbyActorsOfType::center' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, radius) == 0x000014, "Member 'DBDUtilities_GetNearbyActorsOfType::radius' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, outNearbyActors) == 0x000018, "Member 'DBDUtilities_GetNearbyActorsOfType::outNearbyActors' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, actorClassType) == 0x000028, "Member 'DBDUtilities_GetNearbyActorsOfType::actorClassType' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, collisionChannel) == 0x000030, "Member 'DBDUtilities_GetNearbyActorsOfType::collisionChannel' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, ignoreActor) == 0x000038, "Member 'DBDUtilities_GetNearbyActorsOfType::ignoreActor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, ReturnValue) == 0x000040, "Member 'DBDUtilities_GetNearbyActorsOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetNearbyCampers
// 0x0038 (0x0038 - 0x0000)
struct DBDUtilities_GetNearbyCampers final
{
public:
	class UWorld*                                 world;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                center;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ACamperPlayer*>                  outNearbyCampers;                                  // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ignoredCampers;                                    // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetNearbyCampers) == 0x000008, "Wrong alignment on DBDUtilities_GetNearbyCampers");
static_assert(sizeof(DBDUtilities_GetNearbyCampers) == 0x000038, "Wrong size on DBDUtilities_GetNearbyCampers");
static_assert(offsetof(DBDUtilities_GetNearbyCampers, world) == 0x000000, "Member 'DBDUtilities_GetNearbyCampers::world' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyCampers, center) == 0x000008, "Member 'DBDUtilities_GetNearbyCampers::center' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyCampers, radius) == 0x000014, "Member 'DBDUtilities_GetNearbyCampers::radius' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyCampers, outNearbyCampers) == 0x000018, "Member 'DBDUtilities_GetNearbyCampers::outNearbyCampers' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyCampers, ignoredCampers) == 0x000028, "Member 'DBDUtilities_GetNearbyCampers::ignoredCampers' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetOuterMostActor
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetOuterMostActor final
{
public:
	const class UAnimInstance*                    animInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetOuterMostActor) == 0x000008, "Wrong alignment on DBDUtilities_GetOuterMostActor");
static_assert(sizeof(DBDUtilities_GetOuterMostActor) == 0x000010, "Wrong size on DBDUtilities_GetOuterMostActor");
static_assert(offsetof(DBDUtilities_GetOuterMostActor, animInstance) == 0x000000, "Member 'DBDUtilities_GetOuterMostActor::animInstance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetOuterMostActor, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetOuterMostActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetOwningCamper
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetOwningCamper final
{
public:
	const class UAnimInstance*                    animInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetOwningCamper) == 0x000008, "Wrong alignment on DBDUtilities_GetOwningCamper");
static_assert(sizeof(DBDUtilities_GetOwningCamper) == 0x000010, "Wrong size on DBDUtilities_GetOwningCamper");
static_assert(offsetof(DBDUtilities_GetOwningCamper, animInstance) == 0x000000, "Member 'DBDUtilities_GetOwningCamper::animInstance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetOwningCamper, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetOwningCamper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetOwningDBDBasePlayer
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetOwningDBDBasePlayer final
{
public:
	const class UAnimInstance*                    animInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDBasePlayer*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetOwningDBDBasePlayer) == 0x000008, "Wrong alignment on DBDUtilities_GetOwningDBDBasePlayer");
static_assert(sizeof(DBDUtilities_GetOwningDBDBasePlayer) == 0x000010, "Wrong size on DBDUtilities_GetOwningDBDBasePlayer");
static_assert(offsetof(DBDUtilities_GetOwningDBDBasePlayer, animInstance) == 0x000000, "Member 'DBDUtilities_GetOwningDBDBasePlayer::animInstance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetOwningDBDBasePlayer, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetOwningDBDBasePlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetOwningSlasher
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetOwningSlasher final
{
public:
	const class UAnimInstance*                    animInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetOwningSlasher) == 0x000008, "Wrong alignment on DBDUtilities_GetOwningSlasher");
static_assert(sizeof(DBDUtilities_GetOwningSlasher) == 0x000010, "Wrong size on DBDUtilities_GetOwningSlasher");
static_assert(offsetof(DBDUtilities_GetOwningSlasher, animInstance) == 0x000000, "Member 'DBDUtilities_GetOwningSlasher::animInstance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetOwningSlasher, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetOwningSlasher::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetPercentOfRange
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetPercentOfRange final
{
public:
	float                                         val;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         min_0;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         max_0;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetPercentOfRange) == 0x000004, "Wrong alignment on DBDUtilities_GetPercentOfRange");
static_assert(sizeof(DBDUtilities_GetPercentOfRange) == 0x000010, "Wrong size on DBDUtilities_GetPercentOfRange");
static_assert(offsetof(DBDUtilities_GetPercentOfRange, val) == 0x000000, "Member 'DBDUtilities_GetPercentOfRange::val' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetPercentOfRange, min_0) == 0x000004, "Member 'DBDUtilities_GetPercentOfRange::min_0' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetPercentOfRange, max_0) == 0x000008, "Member 'DBDUtilities_GetPercentOfRange::max_0' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetPercentOfRange, ReturnValue) == 0x00000C, "Member 'DBDUtilities_GetPercentOfRange::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetPlayRateForMontage
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetPlayRateForMontage final
{
public:
	class UAnimMontage*                           montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetPlayRateForMontage) == 0x000008, "Wrong alignment on DBDUtilities_GetPlayRateForMontage");
static_assert(sizeof(DBDUtilities_GetPlayRateForMontage) == 0x000010, "Wrong size on DBDUtilities_GetPlayRateForMontage");
static_assert(offsetof(DBDUtilities_GetPlayRateForMontage, montage) == 0x000000, "Member 'DBDUtilities_GetPlayRateForMontage::montage' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetPlayRateForMontage, time) == 0x000008, "Member 'DBDUtilities_GetPlayRateForMontage::time' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetPlayRateForMontage, ReturnValue) == 0x00000C, "Member 'DBDUtilities_GetPlayRateForMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetSimilarVector
// 0x001C (0x001C - 0x0000)
struct DBDUtilities_GetSimilarVector final
{
public:
	struct FVector                                vector;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         maximumDeviation;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetSimilarVector) == 0x000004, "Wrong alignment on DBDUtilities_GetSimilarVector");
static_assert(sizeof(DBDUtilities_GetSimilarVector) == 0x00001C, "Wrong size on DBDUtilities_GetSimilarVector");
static_assert(offsetof(DBDUtilities_GetSimilarVector, vector) == 0x000000, "Member 'DBDUtilities_GetSimilarVector::vector' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetSimilarVector, maximumDeviation) == 0x00000C, "Member 'DBDUtilities_GetSimilarVector::maximumDeviation' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetSimilarVector, ReturnValue) == 0x000010, "Member 'DBDUtilities_GetSimilarVector::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetSlasherTunableValue
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_GetSlasherTunableValue final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   valueName;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetSlasherTunableValue) == 0x000008, "Wrong alignment on DBDUtilities_GetSlasherTunableValue");
static_assert(sizeof(DBDUtilities_GetSlasherTunableValue) == 0x000018, "Wrong size on DBDUtilities_GetSlasherTunableValue");
static_assert(offsetof(DBDUtilities_GetSlasherTunableValue, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetSlasherTunableValue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetSlasherTunableValue, valueName) == 0x000008, "Member 'DBDUtilities_GetSlasherTunableValue::valueName' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetSlasherTunableValue, ReturnValue) == 0x000014, "Member 'DBDUtilities_GetSlasherTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetSquaredDistanceToKiller
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetSquaredDistanceToKiller final
{
public:
	const class AActor*                           survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetSquaredDistanceToKiller) == 0x000008, "Wrong alignment on DBDUtilities_GetSquaredDistanceToKiller");
static_assert(sizeof(DBDUtilities_GetSquaredDistanceToKiller) == 0x000010, "Wrong size on DBDUtilities_GetSquaredDistanceToKiller");
static_assert(offsetof(DBDUtilities_GetSquaredDistanceToKiller, survivor) == 0x000000, "Member 'DBDUtilities_GetSquaredDistanceToKiller::survivor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetSquaredDistanceToKiller, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetSquaredDistanceToKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetThreeClosestGenerators
// 0x0020 (0x0020 - 0x0000)
struct DBDUtilities_GetThreeClosestGenerators final
{
public:
	TArray<class AGenerator*>                     unrevealedGenerators;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AGenerator*>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetThreeClosestGenerators) == 0x000008, "Wrong alignment on DBDUtilities_GetThreeClosestGenerators");
static_assert(sizeof(DBDUtilities_GetThreeClosestGenerators) == 0x000020, "Wrong size on DBDUtilities_GetThreeClosestGenerators");
static_assert(offsetof(DBDUtilities_GetThreeClosestGenerators, unrevealedGenerators) == 0x000000, "Member 'DBDUtilities_GetThreeClosestGenerators::unrevealedGenerators' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetThreeClosestGenerators, ReturnValue) == 0x000010, "Member 'DBDUtilities_GetThreeClosestGenerators::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetTileSpawnPoints
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetTileSpawnPoints final
{
public:
	TArray<class UTileSpawnPoint*>                tileSpawnPoints;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetTileSpawnPoints) == 0x000008, "Wrong alignment on DBDUtilities_GetTileSpawnPoints");
static_assert(sizeof(DBDUtilities_GetTileSpawnPoints) == 0x000010, "Wrong size on DBDUtilities_GetTileSpawnPoints");
static_assert(offsetof(DBDUtilities_GetTileSpawnPoints, tileSpawnPoints) == 0x000000, "Member 'DBDUtilities_GetTileSpawnPoints::tileSpawnPoints' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetTotalPlaytime
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_GetTotalPlaytime final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          update;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetTotalPlaytime) == 0x000008, "Wrong alignment on DBDUtilities_GetTotalPlaytime");
static_assert(sizeof(DBDUtilities_GetTotalPlaytime) == 0x000018, "Wrong size on DBDUtilities_GetTotalPlaytime");
static_assert(offsetof(DBDUtilities_GetTotalPlaytime, worldContextObject) == 0x000000, "Member 'DBDUtilities_GetTotalPlaytime::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetTotalPlaytime, update) == 0x000008, "Member 'DBDUtilities_GetTotalPlaytime::update' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetTotalPlaytime, ReturnValue) == 0x000010, "Member 'DBDUtilities_GetTotalPlaytime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetVelocityXYAngleDegrees
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetVelocityXYAngleDegrees final
{
public:
	const class AActor*                           actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetVelocityXYAngleDegrees) == 0x000008, "Wrong alignment on DBDUtilities_GetVelocityXYAngleDegrees");
static_assert(sizeof(DBDUtilities_GetVelocityXYAngleDegrees) == 0x000010, "Wrong size on DBDUtilities_GetVelocityXYAngleDegrees");
static_assert(offsetof(DBDUtilities_GetVelocityXYAngleDegrees, actor) == 0x000000, "Member 'DBDUtilities_GetVelocityXYAngleDegrees::actor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetVelocityXYAngleDegrees, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetVelocityXYAngleDegrees::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetXYVector
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_GetXYVector final
{
public:
	struct FVector                                vector;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetXYVector) == 0x000004, "Wrong alignment on DBDUtilities_GetXYVector");
static_assert(sizeof(DBDUtilities_GetXYVector) == 0x000018, "Wrong size on DBDUtilities_GetXYVector");
static_assert(offsetof(DBDUtilities_GetXYVector, vector) == 0x000000, "Member 'DBDUtilities_GetXYVector::vector' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetXYVector, ReturnValue) == 0x00000C, "Member 'DBDUtilities_GetXYVector::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetYawOnly
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_GetYawOnly final
{
public:
	struct FRotator                               rotation;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetYawOnly) == 0x000004, "Wrong alignment on DBDUtilities_GetYawOnly");
static_assert(sizeof(DBDUtilities_GetYawOnly) == 0x000018, "Wrong size on DBDUtilities_GetYawOnly");
static_assert(offsetof(DBDUtilities_GetYawOnly, rotation) == 0x000000, "Member 'DBDUtilities_GetYawOnly::rotation' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetYawOnly, ReturnValue) == 0x00000C, "Member 'DBDUtilities_GetYawOnly::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.HasFloorForward
// 0x0050 (0x0050 - 0x0000)
struct DBDUtilities_HasFloorForward final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                fowardVector;                                      // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         distance;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         raycastStartHeight;                                // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         raycastEndHeight;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     outHits;                                           // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                raycastStart;                                      // 0x0040(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_HasFloorForward) == 0x000008, "Wrong alignment on DBDUtilities_HasFloorForward");
static_assert(sizeof(DBDUtilities_HasFloorForward) == 0x000050, "Wrong size on DBDUtilities_HasFloorForward");
static_assert(offsetof(DBDUtilities_HasFloorForward, WorldContextObject) == 0x000000, "Member 'DBDUtilities_HasFloorForward::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, location) == 0x000008, "Member 'DBDUtilities_HasFloorForward::location' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, fowardVector) == 0x000014, "Member 'DBDUtilities_HasFloorForward::fowardVector' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, distance) == 0x000020, "Member 'DBDUtilities_HasFloorForward::distance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, raycastStartHeight) == 0x000024, "Member 'DBDUtilities_HasFloorForward::raycastStartHeight' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, raycastEndHeight) == 0x000028, "Member 'DBDUtilities_HasFloorForward::raycastEndHeight' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, outHits) == 0x000030, "Member 'DBDUtilities_HasFloorForward::outHits' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, raycastStart) == 0x000040, "Member 'DBDUtilities_HasFloorForward::raycastStart' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, ReturnValue) == 0x00004C, "Member 'DBDUtilities_HasFloorForward::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.HasLineOfSightToTarget
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilities_HasLineOfSightToTarget final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                startPosition;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                targetPosition;                                    // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ignoredActor;                                      // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useComplex;                                        // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useDebugLogs;                                      // 0x0029(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_HasLineOfSightToTarget) == 0x000008, "Wrong alignment on DBDUtilities_HasLineOfSightToTarget");
static_assert(sizeof(DBDUtilities_HasLineOfSightToTarget) == 0x000030, "Wrong size on DBDUtilities_HasLineOfSightToTarget");
static_assert(offsetof(DBDUtilities_HasLineOfSightToTarget, WorldContextObject) == 0x000000, "Member 'DBDUtilities_HasLineOfSightToTarget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasLineOfSightToTarget, startPosition) == 0x000008, "Member 'DBDUtilities_HasLineOfSightToTarget::startPosition' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasLineOfSightToTarget, targetPosition) == 0x000014, "Member 'DBDUtilities_HasLineOfSightToTarget::targetPosition' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasLineOfSightToTarget, ignoredActor) == 0x000020, "Member 'DBDUtilities_HasLineOfSightToTarget::ignoredActor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasLineOfSightToTarget, useComplex) == 0x000028, "Member 'DBDUtilities_HasLineOfSightToTarget::useComplex' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasLineOfSightToTarget, useDebugLogs) == 0x000029, "Member 'DBDUtilities_HasLineOfSightToTarget::useDebugLogs' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasLineOfSightToTarget, ReturnValue) == 0x00002A, "Member 'DBDUtilities_HasLineOfSightToTarget::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.HasWalkableSurfaceForward
// 0x0050 (0x0050 - 0x0000)
struct DBDUtilities_HasWalkableSurfaceForward final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                fowardVector;                                      // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         distance;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         raycastStartHeight;                                // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         raycastEndHeight;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     outHits;                                           // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                raycastStart;                                      // 0x0040(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_HasWalkableSurfaceForward) == 0x000008, "Wrong alignment on DBDUtilities_HasWalkableSurfaceForward");
static_assert(sizeof(DBDUtilities_HasWalkableSurfaceForward) == 0x000050, "Wrong size on DBDUtilities_HasWalkableSurfaceForward");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, WorldContextObject) == 0x000000, "Member 'DBDUtilities_HasWalkableSurfaceForward::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, location) == 0x000008, "Member 'DBDUtilities_HasWalkableSurfaceForward::location' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, fowardVector) == 0x000014, "Member 'DBDUtilities_HasWalkableSurfaceForward::fowardVector' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, distance) == 0x000020, "Member 'DBDUtilities_HasWalkableSurfaceForward::distance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, raycastStartHeight) == 0x000024, "Member 'DBDUtilities_HasWalkableSurfaceForward::raycastStartHeight' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, raycastEndHeight) == 0x000028, "Member 'DBDUtilities_HasWalkableSurfaceForward::raycastEndHeight' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, outHits) == 0x000030, "Member 'DBDUtilities_HasWalkableSurfaceForward::outHits' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, raycastStart) == 0x000040, "Member 'DBDUtilities_HasWalkableSurfaceForward::raycastStart' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, ReturnValue) == 0x00004C, "Member 'DBDUtilities_HasWalkableSurfaceForward::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsInKillerTeam
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_IsInKillerTeam final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_IsInKillerTeam) == 0x000008, "Wrong alignment on DBDUtilities_IsInKillerTeam");
static_assert(sizeof(DBDUtilities_IsInKillerTeam) == 0x000010, "Wrong size on DBDUtilities_IsInKillerTeam");
static_assert(offsetof(DBDUtilities_IsInKillerTeam, WorldContextObject) == 0x000000, "Member 'DBDUtilities_IsInKillerTeam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_IsInKillerTeam, ReturnValue) == 0x000008, "Member 'DBDUtilities_IsInKillerTeam::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsInSurvivorTeam
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_IsInSurvivorTeam final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_IsInSurvivorTeam) == 0x000008, "Wrong alignment on DBDUtilities_IsInSurvivorTeam");
static_assert(sizeof(DBDUtilities_IsInSurvivorTeam) == 0x000010, "Wrong size on DBDUtilities_IsInSurvivorTeam");
static_assert(offsetof(DBDUtilities_IsInSurvivorTeam, WorldContextObject) == 0x000000, "Member 'DBDUtilities_IsInSurvivorTeam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_IsInSurvivorTeam, ReturnValue) == 0x000008, "Member 'DBDUtilities_IsInSurvivorTeam::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsInTutorialLevel
// 0x0001 (0x0001 - 0x0000)
struct DBDUtilities_IsInTutorialLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_IsInTutorialLevel) == 0x000001, "Wrong alignment on DBDUtilities_IsInTutorialLevel");
static_assert(sizeof(DBDUtilities_IsInTutorialLevel) == 0x000001, "Wrong size on DBDUtilities_IsInTutorialLevel");
static_assert(offsetof(DBDUtilities_IsInTutorialLevel, ReturnValue) == 0x000000, "Member 'DBDUtilities_IsInTutorialLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsLocallyObservingAKiller
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_IsLocallyObservingAKiller final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_IsLocallyObservingAKiller) == 0x000008, "Wrong alignment on DBDUtilities_IsLocallyObservingAKiller");
static_assert(sizeof(DBDUtilities_IsLocallyObservingAKiller) == 0x000010, "Wrong size on DBDUtilities_IsLocallyObservingAKiller");
static_assert(offsetof(DBDUtilities_IsLocallyObservingAKiller, WorldContextObject) == 0x000000, "Member 'DBDUtilities_IsLocallyObservingAKiller::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_IsLocallyObservingAKiller, ReturnValue) == 0x000008, "Member 'DBDUtilities_IsLocallyObservingAKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsLocallyObservingASurvivor
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_IsLocallyObservingASurvivor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_IsLocallyObservingASurvivor) == 0x000008, "Wrong alignment on DBDUtilities_IsLocallyObservingASurvivor");
static_assert(sizeof(DBDUtilities_IsLocallyObservingASurvivor) == 0x000010, "Wrong size on DBDUtilities_IsLocallyObservingASurvivor");
static_assert(offsetof(DBDUtilities_IsLocallyObservingASurvivor, WorldContextObject) == 0x000000, "Member 'DBDUtilities_IsLocallyObservingASurvivor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_IsLocallyObservingASurvivor, ReturnValue) == 0x000008, "Member 'DBDUtilities_IsLocallyObservingASurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsNonViolent
// 0x0001 (0x0001 - 0x0000)
struct DBDUtilities_IsNonViolent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_IsNonViolent) == 0x000001, "Wrong alignment on DBDUtilities_IsNonViolent");
static_assert(sizeof(DBDUtilities_IsNonViolent) == 0x000001, "Wrong size on DBDUtilities_IsNonViolent");
static_assert(offsetof(DBDUtilities_IsNonViolent, ReturnValue) == 0x000000, "Member 'DBDUtilities_IsNonViolent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsReplaceDisconnectedPlayersWithBotsActive
// 0x0001 (0x0001 - 0x0000)
struct DBDUtilities_IsReplaceDisconnectedPlayersWithBotsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_IsReplaceDisconnectedPlayersWithBotsActive) == 0x000001, "Wrong alignment on DBDUtilities_IsReplaceDisconnectedPlayersWithBotsActive");
static_assert(sizeof(DBDUtilities_IsReplaceDisconnectedPlayersWithBotsActive) == 0x000001, "Wrong size on DBDUtilities_IsReplaceDisconnectedPlayersWithBotsActive");
static_assert(offsetof(DBDUtilities_IsReplaceDisconnectedPlayersWithBotsActive, ReturnValue) == 0x000000, "Member 'DBDUtilities_IsReplaceDisconnectedPlayersWithBotsActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsServer
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_IsServer final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_IsServer) == 0x000008, "Wrong alignment on DBDUtilities_IsServer");
static_assert(sizeof(DBDUtilities_IsServer) == 0x000010, "Wrong size on DBDUtilities_IsServer");
static_assert(offsetof(DBDUtilities_IsServer, worldContextObject) == 0x000000, "Member 'DBDUtilities_IsServer::worldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_IsServer, ReturnValue) == 0x000008, "Member 'DBDUtilities_IsServer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsSteamPIEGame
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_IsSteamPIEGame final
{
public:
	const class UObject*                          contextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_IsSteamPIEGame) == 0x000008, "Wrong alignment on DBDUtilities_IsSteamPIEGame");
static_assert(sizeof(DBDUtilities_IsSteamPIEGame) == 0x000010, "Wrong size on DBDUtilities_IsSteamPIEGame");
static_assert(offsetof(DBDUtilities_IsSteamPIEGame, contextObject) == 0x000000, "Member 'DBDUtilities_IsSteamPIEGame::contextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_IsSteamPIEGame, ReturnValue) == 0x000008, "Member 'DBDUtilities_IsSteamPIEGame::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.LogMeshMaterialInfo
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_LogMeshMaterialInfo final
{
public:
	class FString                                 inStr;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMeshComponent*                   root;                                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_LogMeshMaterialInfo) == 0x000008, "Wrong alignment on DBDUtilities_LogMeshMaterialInfo");
static_assert(sizeof(DBDUtilities_LogMeshMaterialInfo) == 0x000018, "Wrong size on DBDUtilities_LogMeshMaterialInfo");
static_assert(offsetof(DBDUtilities_LogMeshMaterialInfo, inStr) == 0x000000, "Member 'DBDUtilities_LogMeshMaterialInfo::inStr' has a wrong offset!");
static_assert(offsetof(DBDUtilities_LogMeshMaterialInfo, root) == 0x000010, "Member 'DBDUtilities_LogMeshMaterialInfo::root' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.LogString
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_LogString final
{
public:
	class FString                                 inStr;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_LogString) == 0x000008, "Wrong alignment on DBDUtilities_LogString");
static_assert(sizeof(DBDUtilities_LogString) == 0x000010, "Wrong size on DBDUtilities_LogString");
static_assert(offsetof(DBDUtilities_LogString, inStr) == 0x000000, "Member 'DBDUtilities_LogString::inStr' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.NormalizeXY
// 0x0014 (0x0014 - 0x0000)
struct DBDUtilities_NormalizeXY final
{
public:
	struct FVector                                vector;                                            // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         tolerance;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_NormalizeXY) == 0x000004, "Wrong alignment on DBDUtilities_NormalizeXY");
static_assert(sizeof(DBDUtilities_NormalizeXY) == 0x000014, "Wrong size on DBDUtilities_NormalizeXY");
static_assert(offsetof(DBDUtilities_NormalizeXY, vector) == 0x000000, "Member 'DBDUtilities_NormalizeXY::vector' has a wrong offset!");
static_assert(offsetof(DBDUtilities_NormalizeXY, tolerance) == 0x00000C, "Member 'DBDUtilities_NormalizeXY::tolerance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_NormalizeXY, ReturnValue) == 0x000010, "Member 'DBDUtilities_NormalizeXY::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.PointerToInt
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_PointerToInt final
{
public:
	class UObject*                                obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_PointerToInt) == 0x000008, "Wrong alignment on DBDUtilities_PointerToInt");
static_assert(sizeof(DBDUtilities_PointerToInt) == 0x000010, "Wrong size on DBDUtilities_PointerToInt");
static_assert(offsetof(DBDUtilities_PointerToInt, obj) == 0x000000, "Member 'DBDUtilities_PointerToInt::obj' has a wrong offset!");
static_assert(offsetof(DBDUtilities_PointerToInt, ReturnValue) == 0x000008, "Member 'DBDUtilities_PointerToInt::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.PrintStringEmbiggened
// 0x0038 (0x0038 - 0x0000)
struct DBDUtilities_PrintStringEmbiggened final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InString;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Key;                                               // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_PrintStringEmbiggened) == 0x000008, "Wrong alignment on DBDUtilities_PrintStringEmbiggened");
static_assert(sizeof(DBDUtilities_PrintStringEmbiggened) == 0x000038, "Wrong size on DBDUtilities_PrintStringEmbiggened");
static_assert(offsetof(DBDUtilities_PrintStringEmbiggened, WorldContextObject) == 0x000000, "Member 'DBDUtilities_PrintStringEmbiggened::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_PrintStringEmbiggened, InString) == 0x000008, "Member 'DBDUtilities_PrintStringEmbiggened::InString' has a wrong offset!");
static_assert(offsetof(DBDUtilities_PrintStringEmbiggened, TextColor) == 0x000018, "Member 'DBDUtilities_PrintStringEmbiggened::TextColor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_PrintStringEmbiggened, Duration) == 0x000028, "Member 'DBDUtilities_PrintStringEmbiggened::Duration' has a wrong offset!");
static_assert(offsetof(DBDUtilities_PrintStringEmbiggened, Key) == 0x00002C, "Member 'DBDUtilities_PrintStringEmbiggened::Key' has a wrong offset!");
static_assert(offsetof(DBDUtilities_PrintStringEmbiggened, Scale) == 0x000030, "Member 'DBDUtilities_PrintStringEmbiggened::Scale' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.ResolveCharacterIdFromPlayerState
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_ResolveCharacterIdFromPlayerState final
{
public:
	const class ADBDPlayerState*                  playerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_ResolveCharacterIdFromPlayerState) == 0x000008, "Wrong alignment on DBDUtilities_ResolveCharacterIdFromPlayerState");
static_assert(sizeof(DBDUtilities_ResolveCharacterIdFromPlayerState) == 0x000010, "Wrong size on DBDUtilities_ResolveCharacterIdFromPlayerState");
static_assert(offsetof(DBDUtilities_ResolveCharacterIdFromPlayerState, playerState) == 0x000000, "Member 'DBDUtilities_ResolveCharacterIdFromPlayerState::playerState' has a wrong offset!");
static_assert(offsetof(DBDUtilities_ResolveCharacterIdFromPlayerState, ReturnValue) == 0x000008, "Member 'DBDUtilities_ResolveCharacterIdFromPlayerState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.SetComponentCastHiddenShadow
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_SetComponentCastHiddenShadow final
{
public:
	class UPrimitiveComponent*                    component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          castShadow;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_SetComponentCastHiddenShadow) == 0x000008, "Wrong alignment on DBDUtilities_SetComponentCastHiddenShadow");
static_assert(sizeof(DBDUtilities_SetComponentCastHiddenShadow) == 0x000010, "Wrong size on DBDUtilities_SetComponentCastHiddenShadow");
static_assert(offsetof(DBDUtilities_SetComponentCastHiddenShadow, component) == 0x000000, "Member 'DBDUtilities_SetComponentCastHiddenShadow::component' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SetComponentCastHiddenShadow, castShadow) == 0x000008, "Member 'DBDUtilities_SetComponentCastHiddenShadow::castShadow' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.SphereTraceAgainstActor
// 0x00C0 (0x00C0 - 0x0000)
struct DBDUtilities_SphereTraceAgainstActor final
{
public:
	struct FVector                                start;                                             // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                end;                                               // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USphereComponent*                 sphere;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           actor;                                             // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             outHitResult;                                      // 0x0028(0x0090)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_SphereTraceAgainstActor) == 0x000008, "Wrong alignment on DBDUtilities_SphereTraceAgainstActor");
static_assert(sizeof(DBDUtilities_SphereTraceAgainstActor) == 0x0000C0, "Wrong size on DBDUtilities_SphereTraceAgainstActor");
static_assert(offsetof(DBDUtilities_SphereTraceAgainstActor, start) == 0x000000, "Member 'DBDUtilities_SphereTraceAgainstActor::start' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceAgainstActor, end) == 0x00000C, "Member 'DBDUtilities_SphereTraceAgainstActor::end' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceAgainstActor, sphere) == 0x000018, "Member 'DBDUtilities_SphereTraceAgainstActor::sphere' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceAgainstActor, actor) == 0x000020, "Member 'DBDUtilities_SphereTraceAgainstActor::actor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceAgainstActor, outHitResult) == 0x000028, "Member 'DBDUtilities_SphereTraceAgainstActor::outHitResult' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceAgainstActor, ReturnValue) == 0x0000B8, "Member 'DBDUtilities_SphereTraceAgainstActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.SphereTraceSingle
// 0x00C8 (0x00C8 - 0x0000)
struct DBDUtilities_SphereTraceSingle final
{
public:
	struct FVector                                start;                                             // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                end;                                               // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USphereComponent*                 sphere;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             outHitResult;                                      // 0x0020(0x0090)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ignoredActors;                                     // 0x00B0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_SphereTraceSingle) == 0x000008, "Wrong alignment on DBDUtilities_SphereTraceSingle");
static_assert(sizeof(DBDUtilities_SphereTraceSingle) == 0x0000C8, "Wrong size on DBDUtilities_SphereTraceSingle");
static_assert(offsetof(DBDUtilities_SphereTraceSingle, start) == 0x000000, "Member 'DBDUtilities_SphereTraceSingle::start' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceSingle, end) == 0x00000C, "Member 'DBDUtilities_SphereTraceSingle::end' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceSingle, sphere) == 0x000018, "Member 'DBDUtilities_SphereTraceSingle::sphere' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceSingle, outHitResult) == 0x000020, "Member 'DBDUtilities_SphereTraceSingle::outHitResult' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceSingle, ignoredActors) == 0x0000B0, "Member 'DBDUtilities_SphereTraceSingle::ignoredActors' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceSingle, ReturnValue) == 0x0000C0, "Member 'DBDUtilities_SphereTraceSingle::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.ToAngle_negative180to180
// 0x0008 (0x0008 - 0x0000)
struct DBDUtilities_ToAngle_negative180to180 final
{
public:
	float                                         angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_ToAngle_negative180to180) == 0x000004, "Wrong alignment on DBDUtilities_ToAngle_negative180to180");
static_assert(sizeof(DBDUtilities_ToAngle_negative180to180) == 0x000008, "Wrong size on DBDUtilities_ToAngle_negative180to180");
static_assert(offsetof(DBDUtilities_ToAngle_negative180to180, angle) == 0x000000, "Member 'DBDUtilities_ToAngle_negative180to180::angle' has a wrong offset!");
static_assert(offsetof(DBDUtilities_ToAngle_negative180to180, ReturnValue) == 0x000004, "Member 'DBDUtilities_ToAngle_negative180to180::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.WithinRange
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_WithinRange final
{
public:
	float                                         min_0;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         max_0;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_WithinRange) == 0x000004, "Wrong alignment on DBDUtilities_WithinRange");
static_assert(sizeof(DBDUtilities_WithinRange) == 0x000010, "Wrong size on DBDUtilities_WithinRange");
static_assert(offsetof(DBDUtilities_WithinRange, min_0) == 0x000000, "Member 'DBDUtilities_WithinRange::min_0' has a wrong offset!");
static_assert(offsetof(DBDUtilities_WithinRange, max_0) == 0x000004, "Member 'DBDUtilities_WithinRange::max_0' has a wrong offset!");
static_assert(offsetof(DBDUtilities_WithinRange, value) == 0x000008, "Member 'DBDUtilities_WithinRange::value' has a wrong offset!");
static_assert(offsetof(DBDUtilities_WithinRange, ReturnValue) == 0x00000C, "Member 'DBDUtilities_WithinRange::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.WithinRangeExclusive
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_WithinRangeExclusive final
{
public:
	float                                         min_0;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         max_0;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_WithinRangeExclusive) == 0x000004, "Wrong alignment on DBDUtilities_WithinRangeExclusive");
static_assert(sizeof(DBDUtilities_WithinRangeExclusive) == 0x000010, "Wrong size on DBDUtilities_WithinRangeExclusive");
static_assert(offsetof(DBDUtilities_WithinRangeExclusive, min_0) == 0x000000, "Member 'DBDUtilities_WithinRangeExclusive::min_0' has a wrong offset!");
static_assert(offsetof(DBDUtilities_WithinRangeExclusive, max_0) == 0x000004, "Member 'DBDUtilities_WithinRangeExclusive::max_0' has a wrong offset!");
static_assert(offsetof(DBDUtilities_WithinRangeExclusive, value) == 0x000008, "Member 'DBDUtilities_WithinRangeExclusive::value' has a wrong offset!");
static_assert(offsetof(DBDUtilities_WithinRangeExclusive, ReturnValue) == 0x00000C, "Member 'DBDUtilities_WithinRangeExclusive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.ButtonClickEvent
// 0x0001 (0x0001 - 0x0000)
struct UMGInboxScreen_ButtonClickEvent final
{
public:
	EInboxScreenButton                            buttonid;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxScreen_ButtonClickEvent) == 0x000001, "Wrong alignment on UMGInboxScreen_ButtonClickEvent");
static_assert(sizeof(UMGInboxScreen_ButtonClickEvent) == 0x000001, "Wrong size on UMGInboxScreen_ButtonClickEvent");
static_assert(offsetof(UMGInboxScreen_ButtonClickEvent, buttonid) == 0x000000, "Member 'UMGInboxScreen_ButtonClickEvent::buttonid' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.ClaimAllMessagesEvent
// 0x0001 (0x0001 - 0x0000)
struct UMGInboxScreen_ClaimAllMessagesEvent final
{
public:
	EInboxMessageUIType                           messageType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxScreen_ClaimAllMessagesEvent) == 0x000001, "Wrong alignment on UMGInboxScreen_ClaimAllMessagesEvent");
static_assert(sizeof(UMGInboxScreen_ClaimAllMessagesEvent) == 0x000001, "Wrong size on UMGInboxScreen_ClaimAllMessagesEvent");
static_assert(offsetof(UMGInboxScreen_ClaimAllMessagesEvent, messageType) == 0x000000, "Member 'UMGInboxScreen_ClaimAllMessagesEvent::messageType' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.ClaimMessageEvent
// 0x0010 (0x0010 - 0x0000)
struct UMGInboxScreen_ClaimMessageEvent final
{
public:
	class FString                                 messageId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxScreen_ClaimMessageEvent) == 0x000008, "Wrong alignment on UMGInboxScreen_ClaimMessageEvent");
static_assert(sizeof(UMGInboxScreen_ClaimMessageEvent) == 0x000010, "Wrong size on UMGInboxScreen_ClaimMessageEvent");
static_assert(offsetof(UMGInboxScreen_ClaimMessageEvent, messageId) == 0x000000, "Member 'UMGInboxScreen_ClaimMessageEvent::messageId' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.CleanAllMessagesEvent
// 0x0001 (0x0001 - 0x0000)
struct UMGInboxScreen_CleanAllMessagesEvent final
{
public:
	EInboxMessageUIType                           messageType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxScreen_CleanAllMessagesEvent) == 0x000001, "Wrong alignment on UMGInboxScreen_CleanAllMessagesEvent");
static_assert(sizeof(UMGInboxScreen_CleanAllMessagesEvent) == 0x000001, "Wrong size on UMGInboxScreen_CleanAllMessagesEvent");
static_assert(offsetof(UMGInboxScreen_CleanAllMessagesEvent, messageType) == 0x000000, "Member 'UMGInboxScreen_CleanAllMessagesEvent::messageType' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.CleanMessageEvent
// 0x0010 (0x0010 - 0x0000)
struct UMGInboxScreen_CleanMessageEvent final
{
public:
	class FString                                 messageId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxScreen_CleanMessageEvent) == 0x000008, "Wrong alignment on UMGInboxScreen_CleanMessageEvent");
static_assert(sizeof(UMGInboxScreen_CleanMessageEvent) == 0x000010, "Wrong size on UMGInboxScreen_CleanMessageEvent");
static_assert(offsetof(UMGInboxScreen_CleanMessageEvent, messageId) == 0x000000, "Member 'UMGInboxScreen_CleanMessageEvent::messageId' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.FindMessageWidgetById
// 0x0020 (0x0020 - 0x0000)
struct UMGInboxScreen_FindMessageWidgetById final
{
public:
	class UPanelWidget*                           containingPanel;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 messageId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUMGInboxMessageEntryWidget*            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxScreen_FindMessageWidgetById) == 0x000008, "Wrong alignment on UMGInboxScreen_FindMessageWidgetById");
static_assert(sizeof(UMGInboxScreen_FindMessageWidgetById) == 0x000020, "Wrong size on UMGInboxScreen_FindMessageWidgetById");
static_assert(offsetof(UMGInboxScreen_FindMessageWidgetById, containingPanel) == 0x000000, "Member 'UMGInboxScreen_FindMessageWidgetById::containingPanel' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_FindMessageWidgetById, messageId) == 0x000008, "Member 'UMGInboxScreen_FindMessageWidgetById::messageId' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_FindMessageWidgetById, ReturnValue) == 0x000018, "Member 'UMGInboxScreen_FindMessageWidgetById::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.FindWidgetIndexByMessageId
// 0x0020 (0x0020 - 0x0000)
struct UMGInboxScreen_FindWidgetIndexByMessageId final
{
public:
	class UPanelWidget*                           containingPanel;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 messageId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGInboxScreen_FindWidgetIndexByMessageId) == 0x000008, "Wrong alignment on UMGInboxScreen_FindWidgetIndexByMessageId");
static_assert(sizeof(UMGInboxScreen_FindWidgetIndexByMessageId) == 0x000020, "Wrong size on UMGInboxScreen_FindWidgetIndexByMessageId");
static_assert(offsetof(UMGInboxScreen_FindWidgetIndexByMessageId, containingPanel) == 0x000000, "Member 'UMGInboxScreen_FindWidgetIndexByMessageId::containingPanel' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_FindWidgetIndexByMessageId, messageId) == 0x000008, "Member 'UMGInboxScreen_FindWidgetIndexByMessageId::messageId' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_FindWidgetIndexByMessageId, ReturnValue) == 0x000018, "Member 'UMGInboxScreen_FindWidgetIndexByMessageId::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.ReadAllMessagesEvent
// 0x0001 (0x0001 - 0x0000)
struct UMGInboxScreen_ReadAllMessagesEvent final
{
public:
	EInboxMessageUIType                           messageType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxScreen_ReadAllMessagesEvent) == 0x000001, "Wrong alignment on UMGInboxScreen_ReadAllMessagesEvent");
static_assert(sizeof(UMGInboxScreen_ReadAllMessagesEvent) == 0x000001, "Wrong size on UMGInboxScreen_ReadAllMessagesEvent");
static_assert(offsetof(UMGInboxScreen_ReadAllMessagesEvent, messageType) == 0x000000, "Member 'UMGInboxScreen_ReadAllMessagesEvent::messageType' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.ReadMessageEvent
// 0x0010 (0x0010 - 0x0000)
struct UMGInboxScreen_ReadMessageEvent final
{
public:
	class FString                                 messageId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxScreen_ReadMessageEvent) == 0x000008, "Wrong alignment on UMGInboxScreen_ReadMessageEvent");
static_assert(sizeof(UMGInboxScreen_ReadMessageEvent) == 0x000010, "Wrong size on UMGInboxScreen_ReadMessageEvent");
static_assert(offsetof(UMGInboxScreen_ReadMessageEvent, messageId) == 0x000000, "Member 'UMGInboxScreen_ReadMessageEvent::messageId' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.RemoveMessage
// 0x0010 (0x0010 - 0x0000)
struct UMGInboxScreen_RemoveMessage final
{
public:
	class FString                                 messageId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxScreen_RemoveMessage) == 0x000008, "Wrong alignment on UMGInboxScreen_RemoveMessage");
static_assert(sizeof(UMGInboxScreen_RemoveMessage) == 0x000010, "Wrong size on UMGInboxScreen_RemoveMessage");
static_assert(offsetof(UMGInboxScreen_RemoveMessage, messageId) == 0x000000, "Member 'UMGInboxScreen_RemoveMessage::messageId' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.RemoveMessageFromPanel
// 0x0020 (0x0020 - 0x0000)
struct UMGInboxScreen_RemoveMessageFromPanel final
{
public:
	class UPanelWidget*                           containingPanel;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 messageId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hasSeparator;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGInboxScreen_RemoveMessageFromPanel) == 0x000008, "Wrong alignment on UMGInboxScreen_RemoveMessageFromPanel");
static_assert(sizeof(UMGInboxScreen_RemoveMessageFromPanel) == 0x000020, "Wrong size on UMGInboxScreen_RemoveMessageFromPanel");
static_assert(offsetof(UMGInboxScreen_RemoveMessageFromPanel, containingPanel) == 0x000000, "Member 'UMGInboxScreen_RemoveMessageFromPanel::containingPanel' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_RemoveMessageFromPanel, messageId) == 0x000008, "Member 'UMGInboxScreen_RemoveMessageFromPanel::messageId' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_RemoveMessageFromPanel, hasSeparator) == 0x000018, "Member 'UMGInboxScreen_RemoveMessageFromPanel::hasSeparator' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_RemoveMessageFromPanel, ReturnValue) == 0x000019, "Member 'UMGInboxScreen_RemoveMessageFromPanel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.SetNewsMessages
// 0x0018 (0x0018 - 0x0000)
struct UMGInboxScreen_SetNewsMessages final
{
public:
	TArray<struct FInboxMessageUIData>            messages;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         unreadCount;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         totalCount;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxScreen_SetNewsMessages) == 0x000008, "Wrong alignment on UMGInboxScreen_SetNewsMessages");
static_assert(sizeof(UMGInboxScreen_SetNewsMessages) == 0x000018, "Wrong size on UMGInboxScreen_SetNewsMessages");
static_assert(offsetof(UMGInboxScreen_SetNewsMessages, messages) == 0x000000, "Member 'UMGInboxScreen_SetNewsMessages::messages' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_SetNewsMessages, unreadCount) == 0x000010, "Member 'UMGInboxScreen_SetNewsMessages::unreadCount' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_SetNewsMessages, totalCount) == 0x000014, "Member 'UMGInboxScreen_SetNewsMessages::totalCount' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.SetRewardsMessages
// 0x0020 (0x0020 - 0x0000)
struct UMGInboxScreen_SetRewardsMessages final
{
public:
	TArray<struct FInboxMessageUIData>            messages;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         unclaimedCount;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unreadCount;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         totalCount;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGInboxScreen_SetRewardsMessages) == 0x000008, "Wrong alignment on UMGInboxScreen_SetRewardsMessages");
static_assert(sizeof(UMGInboxScreen_SetRewardsMessages) == 0x000020, "Wrong size on UMGInboxScreen_SetRewardsMessages");
static_assert(offsetof(UMGInboxScreen_SetRewardsMessages, messages) == 0x000000, "Member 'UMGInboxScreen_SetRewardsMessages::messages' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_SetRewardsMessages, unclaimedCount) == 0x000010, "Member 'UMGInboxScreen_SetRewardsMessages::unclaimedCount' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_SetRewardsMessages, unreadCount) == 0x000014, "Member 'UMGInboxScreen_SetRewardsMessages::unreadCount' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_SetRewardsMessages, totalCount) == 0x000018, "Member 'UMGInboxScreen_SetRewardsMessages::totalCount' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.SetSocialMessages
// 0x0018 (0x0018 - 0x0000)
struct UMGInboxScreen_SetSocialMessages final
{
public:
	TArray<struct FInboxMessageUIData>            messages;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         unreadCount;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         totalCount;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxScreen_SetSocialMessages) == 0x000008, "Wrong alignment on UMGInboxScreen_SetSocialMessages");
static_assert(sizeof(UMGInboxScreen_SetSocialMessages) == 0x000018, "Wrong size on UMGInboxScreen_SetSocialMessages");
static_assert(offsetof(UMGInboxScreen_SetSocialMessages, messages) == 0x000000, "Member 'UMGInboxScreen_SetSocialMessages::messages' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_SetSocialMessages, unreadCount) == 0x000010, "Member 'UMGInboxScreen_SetSocialMessages::unreadCount' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_SetSocialMessages, totalCount) == 0x000014, "Member 'UMGInboxScreen_SetSocialMessages::totalCount' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.UpdateMessage
// 0x0060 (0x0060 - 0x0000)
struct UMGInboxScreen_UpdateMessage final
{
public:
	struct FInboxMessageUIData                    message;                                           // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxScreen_UpdateMessage) == 0x000008, "Wrong alignment on UMGInboxScreen_UpdateMessage");
static_assert(sizeof(UMGInboxScreen_UpdateMessage) == 0x000060, "Wrong size on UMGInboxScreen_UpdateMessage");
static_assert(offsetof(UMGInboxScreen_UpdateMessage, message) == 0x000000, "Member 'UMGInboxScreen_UpdateMessage::message' has a wrong offset!");

// Function DeadByDaylight.UMGInboxScreen.UpdateMessagesCount
// 0x0010 (0x0010 - 0x0000)
struct UMGInboxScreen_UpdateMessagesCount final
{
public:
	EInboxMessageUIType                           messageType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         unclaimedCount;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unreadCount;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         totalCount;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxScreen_UpdateMessagesCount) == 0x000004, "Wrong alignment on UMGInboxScreen_UpdateMessagesCount");
static_assert(sizeof(UMGInboxScreen_UpdateMessagesCount) == 0x000010, "Wrong size on UMGInboxScreen_UpdateMessagesCount");
static_assert(offsetof(UMGInboxScreen_UpdateMessagesCount, messageType) == 0x000000, "Member 'UMGInboxScreen_UpdateMessagesCount::messageType' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_UpdateMessagesCount, unclaimedCount) == 0x000004, "Member 'UMGInboxScreen_UpdateMessagesCount::unclaimedCount' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_UpdateMessagesCount, unreadCount) == 0x000008, "Member 'UMGInboxScreen_UpdateMessagesCount::unreadCount' has a wrong offset!");
static_assert(offsetof(UMGInboxScreen_UpdateMessagesCount, totalCount) == 0x00000C, "Member 'UMGInboxScreen_UpdateMessagesCount::totalCount' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.GetPercentTimeElapsed
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_GetPercentTimeElapsed final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_GetPercentTimeElapsed) == 0x000008, "Wrong alignment on DBDUtilTimer_GetPercentTimeElapsed");
static_assert(sizeof(DBDUtilTimer_GetPercentTimeElapsed) == 0x000030, "Wrong size on DBDUtilTimer_GetPercentTimeElapsed");
static_assert(offsetof(DBDUtilTimer_GetPercentTimeElapsed, Timer) == 0x000000, "Member 'DBDUtilTimer_GetPercentTimeElapsed::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_GetPercentTimeElapsed, ReturnValue) == 0x000028, "Member 'DBDUtilTimer_GetPercentTimeElapsed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.GetPercentTimeLeft
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_GetPercentTimeLeft final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_GetPercentTimeLeft) == 0x000008, "Wrong alignment on DBDUtilTimer_GetPercentTimeLeft");
static_assert(sizeof(DBDUtilTimer_GetPercentTimeLeft) == 0x000030, "Wrong size on DBDUtilTimer_GetPercentTimeLeft");
static_assert(offsetof(DBDUtilTimer_GetPercentTimeLeft, Timer) == 0x000000, "Member 'DBDUtilTimer_GetPercentTimeLeft::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_GetPercentTimeLeft, ReturnValue) == 0x000028, "Member 'DBDUtilTimer_GetPercentTimeLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.GetStartTime
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_GetStartTime final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_GetStartTime) == 0x000008, "Wrong alignment on DBDUtilTimer_GetStartTime");
static_assert(sizeof(DBDUtilTimer_GetStartTime) == 0x000030, "Wrong size on DBDUtilTimer_GetStartTime");
static_assert(offsetof(DBDUtilTimer_GetStartTime, Timer) == 0x000000, "Member 'DBDUtilTimer_GetStartTime::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_GetStartTime, ReturnValue) == 0x000028, "Member 'DBDUtilTimer_GetStartTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.GetTimeElapsed
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_GetTimeElapsed final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_GetTimeElapsed) == 0x000008, "Wrong alignment on DBDUtilTimer_GetTimeElapsed");
static_assert(sizeof(DBDUtilTimer_GetTimeElapsed) == 0x000030, "Wrong size on DBDUtilTimer_GetTimeElapsed");
static_assert(offsetof(DBDUtilTimer_GetTimeElapsed, Timer) == 0x000000, "Member 'DBDUtilTimer_GetTimeElapsed::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_GetTimeElapsed, ReturnValue) == 0x000028, "Member 'DBDUtilTimer_GetTimeElapsed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.GetTimeLeft
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_GetTimeLeft final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_GetTimeLeft) == 0x000008, "Wrong alignment on DBDUtilTimer_GetTimeLeft");
static_assert(sizeof(DBDUtilTimer_GetTimeLeft) == 0x000030, "Wrong size on DBDUtilTimer_GetTimeLeft");
static_assert(offsetof(DBDUtilTimer_GetTimeLeft, Timer) == 0x000000, "Member 'DBDUtilTimer_GetTimeLeft::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_GetTimeLeft, ReturnValue) == 0x000028, "Member 'DBDUtilTimer_GetTimeLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.IsDone
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_IsDone final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_IsDone) == 0x000008, "Wrong alignment on DBDUtilTimer_IsDone");
static_assert(sizeof(DBDUtilTimer_IsDone) == 0x000030, "Wrong size on DBDUtilTimer_IsDone");
static_assert(offsetof(DBDUtilTimer_IsDone, Timer) == 0x000000, "Member 'DBDUtilTimer_IsDone::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_IsDone, ReturnValue) == 0x000028, "Member 'DBDUtilTimer_IsDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.Reset
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilTimer_Reset final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilTimer_Reset) == 0x000008, "Wrong alignment on DBDUtilTimer_Reset");
static_assert(sizeof(DBDUtilTimer_Reset) == 0x000028, "Wrong size on DBDUtilTimer_Reset");
static_assert(offsetof(DBDUtilTimer_Reset, Timer) == 0x000000, "Member 'DBDUtilTimer_Reset::Timer' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.ResetTo
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_ResetTo final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         time;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_ResetTo) == 0x000008, "Wrong alignment on DBDUtilTimer_ResetTo");
static_assert(sizeof(DBDUtilTimer_ResetTo) == 0x000030, "Wrong size on DBDUtilTimer_ResetTo");
static_assert(offsetof(DBDUtilTimer_ResetTo, Timer) == 0x000000, "Member 'DBDUtilTimer_ResetTo::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_ResetTo, time) == 0x000028, "Member 'DBDUtilTimer_ResetTo::time' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.Stop
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilTimer_Stop final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilTimer_Stop) == 0x000008, "Wrong alignment on DBDUtilTimer_Stop");
static_assert(sizeof(DBDUtilTimer_Stop) == 0x000028, "Wrong size on DBDUtilTimer_Stop");
static_assert(offsetof(DBDUtilTimer_Stop, Timer) == 0x000000, "Member 'DBDUtilTimer_Stop::Timer' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.Update
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_Update final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         deltaTime;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_Update) == 0x000008, "Wrong alignment on DBDUtilTimer_Update");
static_assert(sizeof(DBDUtilTimer_Update) == 0x000030, "Wrong size on DBDUtilTimer_Update");
static_assert(offsetof(DBDUtilTimer_Update, Timer) == 0x000000, "Member 'DBDUtilTimer_Update::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_Update, deltaTime) == 0x000028, "Member 'DBDUtilTimer_Update::deltaTime' has a wrong offset!");

// Function DeadByDaylight.DecalSpawnerCollection.CreateDecalSpawner
// 0x0030 (0x0030 - 0x0000)
struct DecalSpawnerCollection_CreateDecalSpawner final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   decalSpawnerName;                                  // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     decalMaterial;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         poolSize;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnerStrategyType                          spawnerStrateryType;                               // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDecalSpawner*                          ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecalSpawnerCollection_CreateDecalSpawner) == 0x000008, "Wrong alignment on DecalSpawnerCollection_CreateDecalSpawner");
static_assert(sizeof(DecalSpawnerCollection_CreateDecalSpawner) == 0x000030, "Wrong size on DecalSpawnerCollection_CreateDecalSpawner");
static_assert(offsetof(DecalSpawnerCollection_CreateDecalSpawner, worldContextObject) == 0x000000, "Member 'DecalSpawnerCollection_CreateDecalSpawner::worldContextObject' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_CreateDecalSpawner, decalSpawnerName) == 0x000008, "Member 'DecalSpawnerCollection_CreateDecalSpawner::decalSpawnerName' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_CreateDecalSpawner, decalMaterial) == 0x000018, "Member 'DecalSpawnerCollection_CreateDecalSpawner::decalMaterial' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_CreateDecalSpawner, poolSize) == 0x000020, "Member 'DecalSpawnerCollection_CreateDecalSpawner::poolSize' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_CreateDecalSpawner, spawnerStrateryType) == 0x000024, "Member 'DecalSpawnerCollection_CreateDecalSpawner::spawnerStrateryType' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_CreateDecalSpawner, ReturnValue) == 0x000028, "Member 'DecalSpawnerCollection_CreateDecalSpawner::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DecalSpawnerCollection.ReleaseDecalSpawner
// 0x000C (0x000C - 0x0000)
struct DecalSpawnerCollection_ReleaseDecalSpawner final
{
public:
	class FName                                   decalSpawnerName;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecalSpawnerCollection_ReleaseDecalSpawner) == 0x000004, "Wrong alignment on DecalSpawnerCollection_ReleaseDecalSpawner");
static_assert(sizeof(DecalSpawnerCollection_ReleaseDecalSpawner) == 0x00000C, "Wrong size on DecalSpawnerCollection_ReleaseDecalSpawner");
static_assert(offsetof(DecalSpawnerCollection_ReleaseDecalSpawner, decalSpawnerName) == 0x000000, "Member 'DecalSpawnerCollection_ReleaseDecalSpawner::decalSpawnerName' has a wrong offset!");

// Function DeadByDaylight.DecalSpawnerCollection.SpawnDecalAtLocation
// 0x0050 (0x0050 - 0x0000)
struct DecalSpawnerCollection_SpawnDecalAtLocation final
{
public:
	class FName                                   decalSpawnerName;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                decalSize;                                         // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rotation;                                          // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         lifeSpan;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   decalType;                                         // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         sortOrder;                                         // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDDecalComponent*                     ReturnValue;                                       // 0x0048(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecalSpawnerCollection_SpawnDecalAtLocation) == 0x000008, "Wrong alignment on DecalSpawnerCollection_SpawnDecalAtLocation");
static_assert(sizeof(DecalSpawnerCollection_SpawnDecalAtLocation) == 0x000050, "Wrong size on DecalSpawnerCollection_SpawnDecalAtLocation");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, decalSpawnerName) == 0x000000, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::decalSpawnerName' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, decalSize) == 0x00000C, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::decalSize' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, location) == 0x000018, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::location' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, rotation) == 0x000024, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::rotation' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, lifeSpan) == 0x000030, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::lifeSpan' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, decalType) == 0x000034, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::decalType' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, sortOrder) == 0x000040, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::sortOrder' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, ReturnValue) == 0x000048, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DetectionZoneUtilities.DetectObstruction
// 0x0038 (0x0038 - 0x0000)
struct DetectionZoneUtilities_DetectObstruction final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetectionZone                                detectionZoneID;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      physicalMaterialOut;                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                positionOut;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                normalOut;                                         // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DetectionZoneUtilities_DetectObstruction) == 0x000008, "Wrong alignment on DetectionZoneUtilities_DetectObstruction");
static_assert(sizeof(DetectionZoneUtilities_DetectObstruction) == 0x000038, "Wrong size on DetectionZoneUtilities_DetectObstruction");
static_assert(offsetof(DetectionZoneUtilities_DetectObstruction, player) == 0x000000, "Member 'DetectionZoneUtilities_DetectObstruction::player' has a wrong offset!");
static_assert(offsetof(DetectionZoneUtilities_DetectObstruction, detectionZoneID) == 0x000008, "Member 'DetectionZoneUtilities_DetectObstruction::detectionZoneID' has a wrong offset!");
static_assert(offsetof(DetectionZoneUtilities_DetectObstruction, physicalMaterialOut) == 0x000010, "Member 'DetectionZoneUtilities_DetectObstruction::physicalMaterialOut' has a wrong offset!");
static_assert(offsetof(DetectionZoneUtilities_DetectObstruction, positionOut) == 0x000018, "Member 'DetectionZoneUtilities_DetectObstruction::positionOut' has a wrong offset!");
static_assert(offsetof(DetectionZoneUtilities_DetectObstruction, normalOut) == 0x000024, "Member 'DetectionZoneUtilities_DetectObstruction::normalOut' has a wrong offset!");
static_assert(offsetof(DetectionZoneUtilities_DetectObstruction, ReturnValue) == 0x000030, "Member 'DetectionZoneUtilities_DetectObstruction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DialogHandlerCondition.IsTrue
// 0x0040 (0x0040 - 0x0000)
struct DialogHandlerCondition_IsTrue final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DialogHandlerCondition_IsTrue) == 0x000008, "Wrong alignment on DialogHandlerCondition_IsTrue");
static_assert(sizeof(DialogHandlerCondition_IsTrue) == 0x000040, "Wrong size on DialogHandlerCondition_IsTrue");
static_assert(offsetof(DialogHandlerCondition_IsTrue, gameEventType) == 0x000000, "Member 'DialogHandlerCondition_IsTrue::gameEventType' has a wrong offset!");
static_assert(offsetof(DialogHandlerCondition_IsTrue, gameEventData) == 0x000010, "Member 'DialogHandlerCondition_IsTrue::gameEventData' has a wrong offset!");
static_assert(offsetof(DialogHandlerCondition_IsTrue, ReturnValue) == 0x000038, "Member 'DialogHandlerCondition_IsTrue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DisplayStandCharmRequesterComponent.OnCharmDisplayed
// 0x0008 (0x0008 - 0x0000)
struct DisplayStandCharmRequesterComponent_OnCharmDisplayed final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisplayStandCharmRequesterComponent_OnCharmDisplayed) == 0x000008, "Wrong alignment on DisplayStandCharmRequesterComponent_OnCharmDisplayed");
static_assert(sizeof(DisplayStandCharmRequesterComponent_OnCharmDisplayed) == 0x000008, "Wrong size on DisplayStandCharmRequesterComponent_OnCharmDisplayed");
static_assert(offsetof(DisplayStandCharmRequesterComponent_OnCharmDisplayed, actor) == 0x000000, "Member 'DisplayStandCharmRequesterComponent_OnCharmDisplayed::actor' has a wrong offset!");

// Function DeadByDaylight.GameEventTracker.FireGameEvent
// 0x0018 (0x0018 - 0x0000)
struct GameEventTracker_FireGameEvent final
{
public:
	EDBDScoreTypes                                eventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventTracker_FireGameEvent) == 0x000008, "Wrong alignment on GameEventTracker_FireGameEvent");
static_assert(sizeof(GameEventTracker_FireGameEvent) == 0x000018, "Wrong size on GameEventTracker_FireGameEvent");
static_assert(offsetof(GameEventTracker_FireGameEvent, eventType) == 0x000000, "Member 'GameEventTracker_FireGameEvent::eventType' has a wrong offset!");
static_assert(offsetof(GameEventTracker_FireGameEvent, amount) == 0x000004, "Member 'GameEventTracker_FireGameEvent::amount' has a wrong offset!");
static_assert(offsetof(GameEventTracker_FireGameEvent, instigator) == 0x000008, "Member 'GameEventTracker_FireGameEvent::instigator' has a wrong offset!");
static_assert(offsetof(GameEventTracker_FireGameEvent, target) == 0x000010, "Member 'GameEventTracker_FireGameEvent::target' has a wrong offset!");

// Function DeadByDaylight.GameEventTracker.FireGameflowEvent
// 0x0020 (0x0020 - 0x0000)
struct GameEventTracker_FireGameflowEvent final
{
public:
	EDBDScoreTypes                                eventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayerState*                  instigator;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   data;                                              // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameEventTracker_FireGameflowEvent) == 0x000008, "Wrong alignment on GameEventTracker_FireGameflowEvent");
static_assert(sizeof(GameEventTracker_FireGameflowEvent) == 0x000020, "Wrong size on GameEventTracker_FireGameflowEvent");
static_assert(offsetof(GameEventTracker_FireGameflowEvent, eventType) == 0x000000, "Member 'GameEventTracker_FireGameflowEvent::eventType' has a wrong offset!");
static_assert(offsetof(GameEventTracker_FireGameflowEvent, amount) == 0x000004, "Member 'GameEventTracker_FireGameflowEvent::amount' has a wrong offset!");
static_assert(offsetof(GameEventTracker_FireGameflowEvent, instigator) == 0x000008, "Member 'GameEventTracker_FireGameflowEvent::instigator' has a wrong offset!");
static_assert(offsetof(GameEventTracker_FireGameflowEvent, data) == 0x000010, "Member 'GameEventTracker_FireGameflowEvent::data' has a wrong offset!");

// Function DeadByDaylight.PromoPackPurchaseUIDataUtility.SetRemainingTimeFromHours
// 0x0060 (0x0060 - 0x0000)
struct PromoPackPurchaseUIDataUtility_SetRemainingTimeFromHours final
{
public:
	struct FPromoPackPurchaseUIData               data;                                              // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         remainHours;                                       // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PromoPackPurchaseUIDataUtility_SetRemainingTimeFromHours) == 0x000008, "Wrong alignment on PromoPackPurchaseUIDataUtility_SetRemainingTimeFromHours");
static_assert(sizeof(PromoPackPurchaseUIDataUtility_SetRemainingTimeFromHours) == 0x000060, "Wrong size on PromoPackPurchaseUIDataUtility_SetRemainingTimeFromHours");
static_assert(offsetof(PromoPackPurchaseUIDataUtility_SetRemainingTimeFromHours, data) == 0x000000, "Member 'PromoPackPurchaseUIDataUtility_SetRemainingTimeFromHours::data' has a wrong offset!");
static_assert(offsetof(PromoPackPurchaseUIDataUtility_SetRemainingTimeFromHours, remainHours) == 0x000058, "Member 'PromoPackPurchaseUIDataUtility_SetRemainingTimeFromHours::remainHours' has a wrong offset!");

// Function DeadByDaylight.Interactor.Multicast_LockStatus
// 0x0018 (0x0018 - 0x0000)
struct Interactor_Multicast_LockStatus final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractionDefinition*                 currentInteraction;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          lock;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactor_Multicast_LockStatus) == 0x000008, "Wrong alignment on Interactor_Multicast_LockStatus");
static_assert(sizeof(Interactor_Multicast_LockStatus) == 0x000018, "Wrong size on Interactor_Multicast_LockStatus");
static_assert(offsetof(Interactor_Multicast_LockStatus, player) == 0x000000, "Member 'Interactor_Multicast_LockStatus::player' has a wrong offset!");
static_assert(offsetof(Interactor_Multicast_LockStatus, currentInteraction) == 0x000008, "Member 'Interactor_Multicast_LockStatus::currentInteraction' has a wrong offset!");
static_assert(offsetof(Interactor_Multicast_LockStatus, lock) == 0x000010, "Member 'Interactor_Multicast_LockStatus::lock' has a wrong offset!");

// Function DeadByDaylight.Interactor.Multicast_ReservationStatus
// 0x0010 (0x0010 - 0x0000)
struct Interactor_Multicast_ReservationStatus final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          lock;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactor_Multicast_ReservationStatus) == 0x000008, "Wrong alignment on Interactor_Multicast_ReservationStatus");
static_assert(sizeof(Interactor_Multicast_ReservationStatus) == 0x000010, "Wrong size on Interactor_Multicast_ReservationStatus");
static_assert(offsetof(Interactor_Multicast_ReservationStatus, player) == 0x000000, "Member 'Interactor_Multicast_ReservationStatus::player' has a wrong offset!");
static_assert(offsetof(Interactor_Multicast_ReservationStatus, lock) == 0x000008, "Member 'Interactor_Multicast_ReservationStatus::lock' has a wrong offset!");

// Function DeadByDaylight.Interactor.SetIsUsable
// 0x0001 (0x0001 - 0x0000)
struct Interactor_SetIsUsable final
{
public:
	bool                                          isUsableParam;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_SetIsUsable) == 0x000001, "Wrong alignment on Interactor_SetIsUsable");
static_assert(sizeof(Interactor_SetIsUsable) == 0x000001, "Wrong size on Interactor_SetIsUsable");
static_assert(offsetof(Interactor_SetIsUsable, isUsableParam) == 0x000000, "Member 'Interactor_SetIsUsable::isUsableParam' has a wrong offset!");

// Function DeadByDaylight.Interactor.Authority_GetInteractingPlayer
// 0x0008 (0x0008 - 0x0000)
struct Interactor_Authority_GetInteractingPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_Authority_GetInteractingPlayer) == 0x000008, "Wrong alignment on Interactor_Authority_GetInteractingPlayer");
static_assert(sizeof(Interactor_Authority_GetInteractingPlayer) == 0x000008, "Wrong size on Interactor_Authority_GetInteractingPlayer");
static_assert(offsetof(Interactor_Authority_GetInteractingPlayer, ReturnValue) == 0x000000, "Member 'Interactor_Authority_GetInteractingPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.CanPerformInteraction
// 0x0018 (0x0018 - 0x0000)
struct Interactor_CanPerformInteraction final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInteractionDefinition*           definition;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactor_CanPerformInteraction) == 0x000008, "Wrong alignment on Interactor_CanPerformInteraction");
static_assert(sizeof(Interactor_CanPerformInteraction) == 0x000018, "Wrong size on Interactor_CanPerformInteraction");
static_assert(offsetof(Interactor_CanPerformInteraction, player) == 0x000000, "Member 'Interactor_CanPerformInteraction::player' has a wrong offset!");
static_assert(offsetof(Interactor_CanPerformInteraction, definition) == 0x000008, "Member 'Interactor_CanPerformInteraction::definition' has a wrong offset!");
static_assert(offsetof(Interactor_CanPerformInteraction, ReturnValue) == 0x000010, "Member 'Interactor_CanPerformInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.GetCurrentInteraction
// 0x0008 (0x0008 - 0x0000)
struct Interactor_GetCurrentInteraction final
{
public:
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_GetCurrentInteraction) == 0x000008, "Wrong alignment on Interactor_GetCurrentInteraction");
static_assert(sizeof(Interactor_GetCurrentInteraction) == 0x000008, "Wrong size on Interactor_GetCurrentInteraction");
static_assert(offsetof(Interactor_GetCurrentInteraction, ReturnValue) == 0x000000, "Member 'Interactor_GetCurrentInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.GetInteractable
// 0x0008 (0x0008 - 0x0000)
struct Interactor_GetInteractable final
{
public:
	class AInteractable*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_GetInteractable) == 0x000008, "Wrong alignment on Interactor_GetInteractable");
static_assert(sizeof(Interactor_GetInteractable) == 0x000008, "Wrong size on Interactor_GetInteractable");
static_assert(offsetof(Interactor_GetInteractable, ReturnValue) == 0x000000, "Member 'Interactor_GetInteractable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.GetInteractingPlayerRaw
// 0x0008 (0x0008 - 0x0000)
struct Interactor_GetInteractingPlayerRaw final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_GetInteractingPlayerRaw) == 0x000008, "Wrong alignment on Interactor_GetInteractingPlayerRaw");
static_assert(sizeof(Interactor_GetInteractingPlayerRaw) == 0x000008, "Wrong size on Interactor_GetInteractingPlayerRaw");
static_assert(offsetof(Interactor_GetInteractingPlayerRaw, ReturnValue) == 0x000000, "Member 'Interactor_GetInteractingPlayerRaw::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.GetInteractionDefinitions
// 0x0010 (0x0010 - 0x0000)
struct Interactor_GetInteractionDefinitions final
{
public:
	TArray<class UInteractionDefinition*>         ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_GetInteractionDefinitions) == 0x000008, "Wrong alignment on Interactor_GetInteractionDefinitions");
static_assert(sizeof(Interactor_GetInteractionDefinitions) == 0x000010, "Wrong size on Interactor_GetInteractionDefinitions");
static_assert(offsetof(Interactor_GetInteractionDefinitions, ReturnValue) == 0x000000, "Member 'Interactor_GetInteractionDefinitions::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.GetIsUsable
// 0x0001 (0x0001 - 0x0000)
struct Interactor_GetIsUsable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_GetIsUsable) == 0x000001, "Wrong alignment on Interactor_GetIsUsable");
static_assert(sizeof(Interactor_GetIsUsable) == 0x000001, "Wrong size on Interactor_GetIsUsable");
static_assert(offsetof(Interactor_GetIsUsable, ReturnValue) == 0x000000, "Member 'Interactor_GetIsUsable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.IsInteracting
// 0x0001 (0x0001 - 0x0000)
struct Interactor_IsInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_IsInteracting) == 0x000001, "Wrong alignment on Interactor_IsInteracting");
static_assert(sizeof(Interactor_IsInteracting) == 0x000001, "Wrong size on Interactor_IsInteracting");
static_assert(offsetof(Interactor_IsInteracting, ReturnValue) == 0x000000, "Member 'Interactor_IsInteracting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.IsInterruptionPossible
// 0x0028 (0x0028 - 0x0000)
struct Interactor_IsInterruptionPossible final
{
public:
	const class ADBDPlayer*                       interruptor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       interruptee;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInteractionDefinition*           definition;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInterruptionDefinition*          interruption;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactor_IsInterruptionPossible) == 0x000008, "Wrong alignment on Interactor_IsInterruptionPossible");
static_assert(sizeof(Interactor_IsInterruptionPossible) == 0x000028, "Wrong size on Interactor_IsInterruptionPossible");
static_assert(offsetof(Interactor_IsInterruptionPossible, interruptor) == 0x000000, "Member 'Interactor_IsInterruptionPossible::interruptor' has a wrong offset!");
static_assert(offsetof(Interactor_IsInterruptionPossible, interruptee) == 0x000008, "Member 'Interactor_IsInterruptionPossible::interruptee' has a wrong offset!");
static_assert(offsetof(Interactor_IsInterruptionPossible, definition) == 0x000010, "Member 'Interactor_IsInterruptionPossible::definition' has a wrong offset!");
static_assert(offsetof(Interactor_IsInterruptionPossible, interruption) == 0x000018, "Member 'Interactor_IsInterruptionPossible::interruption' has a wrong offset!");
static_assert(offsetof(Interactor_IsInterruptionPossible, ReturnValue) == 0x000020, "Member 'Interactor_IsInterruptionPossible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.NoiseIndicatorWidget.SetIndicatorPanel
// 0x0008 (0x0008 - 0x0000)
struct NoiseIndicatorWidget_SetIndicatorPanel final
{
public:
	class UCanvasPanel*                           panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoiseIndicatorWidget_SetIndicatorPanel) == 0x000008, "Wrong alignment on NoiseIndicatorWidget_SetIndicatorPanel");
static_assert(sizeof(NoiseIndicatorWidget_SetIndicatorPanel) == 0x000008, "Wrong size on NoiseIndicatorWidget_SetIndicatorPanel");
static_assert(offsetof(NoiseIndicatorWidget_SetIndicatorPanel, panel) == 0x000000, "Member 'NoiseIndicatorWidget_SetIndicatorPanel::panel' has a wrong offset!");

// Function DeadByDaylight.KillInteractionDefinition.OnKillAudioActivation
// 0x0010 (0x0010 - 0x0000)
struct KillInteractionDefinition_OnKillAudioActivation final
{
public:
	bool                                          active;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             interactingPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillInteractionDefinition_OnKillAudioActivation) == 0x000008, "Wrong alignment on KillInteractionDefinition_OnKillAudioActivation");
static_assert(sizeof(KillInteractionDefinition_OnKillAudioActivation) == 0x000010, "Wrong size on KillInteractionDefinition_OnKillAudioActivation");
static_assert(offsetof(KillInteractionDefinition_OnKillAudioActivation, active) == 0x000000, "Member 'KillInteractionDefinition_OnKillAudioActivation::active' has a wrong offset!");
static_assert(offsetof(KillInteractionDefinition_OnKillAudioActivation, interactingPlayer) == 0x000008, "Member 'KillInteractionDefinition_OnKillAudioActivation::interactingPlayer' has a wrong offset!");

// Function DeadByDaylight.KillInteractionDefinition.GetChargeCompleted
// 0x0001 (0x0001 - 0x0000)
struct KillInteractionDefinition_GetChargeCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillInteractionDefinition_GetChargeCompleted) == 0x000001, "Wrong alignment on KillInteractionDefinition_GetChargeCompleted");
static_assert(sizeof(KillInteractionDefinition_GetChargeCompleted) == 0x000001, "Wrong size on KillInteractionDefinition_GetChargeCompleted");
static_assert(offsetof(KillInteractionDefinition_GetChargeCompleted, ReturnValue) == 0x000000, "Member 'KillInteractionDefinition_GetChargeCompleted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.KillInteractionDefinition.GetExitAnimationMontage
// 0x0020 (0x0020 - 0x0000)
struct KillInteractionDefinition_GetExitAnimationMontage final
{
public:
	struct FAnimationMontageDescriptor            ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillInteractionDefinition_GetExitAnimationMontage) == 0x000008, "Wrong alignment on KillInteractionDefinition_GetExitAnimationMontage");
static_assert(sizeof(KillInteractionDefinition_GetExitAnimationMontage) == 0x000020, "Wrong size on KillInteractionDefinition_GetExitAnimationMontage");
static_assert(offsetof(KillInteractionDefinition_GetExitAnimationMontage, ReturnValue) == 0x000000, "Member 'KillInteractionDefinition_GetExitAnimationMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.KillInteractionDefinition.GetOwningSurvivor
// 0x0008 (0x0008 - 0x0000)
struct KillInteractionDefinition_GetOwningSurvivor final
{
public:
	const class ACamperPlayer*                    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillInteractionDefinition_GetOwningSurvivor) == 0x000008, "Wrong alignment on KillInteractionDefinition_GetOwningSurvivor");
static_assert(sizeof(KillInteractionDefinition_GetOwningSurvivor) == 0x000008, "Wrong size on KillInteractionDefinition_GetOwningSurvivor");
static_assert(offsetof(KillInteractionDefinition_GetOwningSurvivor, ReturnValue) == 0x000000, "Member 'KillInteractionDefinition_GetOwningSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EffectsLocator.OnActorTick
// 0x0008 (0x0008 - 0x0000)
struct EffectsLocator_OnActorTick final
{
public:
	class UMaterialInstanceDynamic*               actorMaterialInstanceDynamic;                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectsLocator_OnActorTick) == 0x000008, "Wrong alignment on EffectsLocator_OnActorTick");
static_assert(sizeof(EffectsLocator_OnActorTick) == 0x000008, "Wrong size on EffectsLocator_OnActorTick");
static_assert(offsetof(EffectsLocator_OnActorTick, actorMaterialInstanceDynamic) == 0x000000, "Member 'EffectsLocator_OnActorTick::actorMaterialInstanceDynamic' has a wrong offset!");

// Function DeadByDaylight.EffectsLocator.OnEnterCollisionArea
// 0x0010 (0x0010 - 0x0000)
struct EffectsLocator_OnEnterCollisionArea final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectsLocator_OnEnterCollisionArea) == 0x000008, "Wrong alignment on EffectsLocator_OnEnterCollisionArea");
static_assert(sizeof(EffectsLocator_OnEnterCollisionArea) == 0x000010, "Wrong size on EffectsLocator_OnEnterCollisionArea");
static_assert(offsetof(EffectsLocator_OnEnterCollisionArea, OverlappedActor) == 0x000000, "Member 'EffectsLocator_OnEnterCollisionArea::OverlappedActor' has a wrong offset!");
static_assert(offsetof(EffectsLocator_OnEnterCollisionArea, OtherActor) == 0x000008, "Member 'EffectsLocator_OnEnterCollisionArea::OtherActor' has a wrong offset!");

// Function DeadByDaylight.EffectsLocator.OnFoundActor
// 0x0008 (0x0008 - 0x0000)
struct EffectsLocator_OnFoundActor final
{
public:
	class AActor*                                 foundActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectsLocator_OnFoundActor) == 0x000008, "Wrong alignment on EffectsLocator_OnFoundActor");
static_assert(sizeof(EffectsLocator_OnFoundActor) == 0x000008, "Wrong size on EffectsLocator_OnFoundActor");
static_assert(offsetof(EffectsLocator_OnFoundActor, foundActor) == 0x000000, "Member 'EffectsLocator_OnFoundActor::foundActor' has a wrong offset!");

// Function DeadByDaylight.EffectsLocator.OnLeaveCollisionArea
// 0x0010 (0x0010 - 0x0000)
struct EffectsLocator_OnLeaveCollisionArea final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectsLocator_OnLeaveCollisionArea) == 0x000008, "Wrong alignment on EffectsLocator_OnLeaveCollisionArea");
static_assert(sizeof(EffectsLocator_OnLeaveCollisionArea) == 0x000010, "Wrong size on EffectsLocator_OnLeaveCollisionArea");
static_assert(offsetof(EffectsLocator_OnLeaveCollisionArea, OverlappedActor) == 0x000000, "Member 'EffectsLocator_OnLeaveCollisionArea::OverlappedActor' has a wrong offset!");
static_assert(offsetof(EffectsLocator_OnLeaveCollisionArea, OtherActor) == 0x000008, "Member 'EffectsLocator_OnLeaveCollisionArea::OtherActor' has a wrong offset!");

// Function DeadByDaylight.EffectsLocator.OnLostActor
// 0x0008 (0x0008 - 0x0000)
struct EffectsLocator_OnLostActor final
{
public:
	class AActor*                                 lostActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectsLocator_OnLostActor) == 0x000008, "Wrong alignment on EffectsLocator_OnLostActor");
static_assert(sizeof(EffectsLocator_OnLostActor) == 0x000008, "Wrong size on EffectsLocator_OnLostActor");
static_assert(offsetof(EffectsLocator_OnLostActor, lostActor) == 0x000000, "Member 'EffectsLocator_OnLostActor::lostActor' has a wrong offset!");

// Function DeadByDaylight.EndGameComponent.FireEndGameSacrificeScoreEvent
// 0x0028 (0x0028 - 0x0000)
struct EndGameComponent_FireEndGameSacrificeScoreEvent final
{
public:
	struct FGameEventData                         gameEventData;                                     // 0x0000(0x0028)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameComponent_FireEndGameSacrificeScoreEvent) == 0x000008, "Wrong alignment on EndGameComponent_FireEndGameSacrificeScoreEvent");
static_assert(sizeof(EndGameComponent_FireEndGameSacrificeScoreEvent) == 0x000028, "Wrong size on EndGameComponent_FireEndGameSacrificeScoreEvent");
static_assert(offsetof(EndGameComponent_FireEndGameSacrificeScoreEvent, gameEventData) == 0x000000, "Member 'EndGameComponent_FireEndGameSacrificeScoreEvent::gameEventData' has a wrong offset!");

// Function DeadByDaylight.EndGameComponent.GetHasEndGameBegun
// 0x0001 (0x0001 - 0x0000)
struct EndGameComponent_GetHasEndGameBegun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameComponent_GetHasEndGameBegun) == 0x000001, "Wrong alignment on EndGameComponent_GetHasEndGameBegun");
static_assert(sizeof(EndGameComponent_GetHasEndGameBegun) == 0x000001, "Wrong size on EndGameComponent_GetHasEndGameBegun");
static_assert(offsetof(EndGameComponent_GetHasEndGameBegun, ReturnValue) == 0x000000, "Member 'EndGameComponent_GetHasEndGameBegun::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MapActorComponent.Multicast_SetDetectionEnabled
// 0x0001 (0x0001 - 0x0000)
struct MapActorComponent_Multicast_SetDetectionEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapActorComponent_Multicast_SetDetectionEnabled) == 0x000001, "Wrong alignment on MapActorComponent_Multicast_SetDetectionEnabled");
static_assert(sizeof(MapActorComponent_Multicast_SetDetectionEnabled) == 0x000001, "Wrong size on MapActorComponent_Multicast_SetDetectionEnabled");
static_assert(offsetof(MapActorComponent_Multicast_SetDetectionEnabled, enabled) == 0x000000, "Member 'MapActorComponent_Multicast_SetDetectionEnabled::enabled' has a wrong offset!");

// Function DeadByDaylight.MapActorComponent.GetDetectionEnabled
// 0x0001 (0x0001 - 0x0000)
struct MapActorComponent_GetDetectionEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapActorComponent_GetDetectionEnabled) == 0x000001, "Wrong alignment on MapActorComponent_GetDetectionEnabled");
static_assert(sizeof(MapActorComponent_GetDetectionEnabled) == 0x000001, "Wrong size on MapActorComponent_GetDetectionEnabled");
static_assert(offsetof(MapActorComponent_GetDetectionEnabled, ReturnValue) == 0x000000, "Member 'MapActorComponent_GetDetectionEnabled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MapActorComponent.IsKnownBy
// 0x0010 (0x0010 - 0x0000)
struct MapActorComponent_IsKnownBy final
{
public:
	const class ADBDPlayer*                       character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapActorComponent_IsKnownBy) == 0x000008, "Wrong alignment on MapActorComponent_IsKnownBy");
static_assert(sizeof(MapActorComponent_IsKnownBy) == 0x000010, "Wrong size on MapActorComponent_IsKnownBy");
static_assert(offsetof(MapActorComponent_IsKnownBy, character) == 0x000000, "Member 'MapActorComponent_IsKnownBy::character' has a wrong offset!");
static_assert(offsetof(MapActorComponent_IsKnownBy, ReturnValue) == 0x000008, "Member 'MapActorComponent_IsKnownBy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EnduranceVFXComponent.ShowHighlight
// 0x0008 (0x0008 - 0x0000)
struct EnduranceVFXComponent_ShowHighlight final
{
public:
	class UGameplayModifierContainer*             preventKOSource;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnduranceVFXComponent_ShowHighlight) == 0x000008, "Wrong alignment on EnduranceVFXComponent_ShowHighlight");
static_assert(sizeof(EnduranceVFXComponent_ShowHighlight) == 0x000008, "Wrong size on EnduranceVFXComponent_ShowHighlight");
static_assert(offsetof(EnduranceVFXComponent_ShowHighlight, preventKOSource) == 0x000000, "Member 'EnduranceVFXComponent_ShowHighlight::preventKOSource' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapRemover.AddKey
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrapRemover_AddKey final
{
public:
	int32                                         keyId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrapRemover_AddKey) == 0x000004, "Wrong alignment on ReverseBearTrapRemover_AddKey");
static_assert(sizeof(ReverseBearTrapRemover_AddKey) == 0x000004, "Wrong size on ReverseBearTrapRemover_AddKey");
static_assert(offsetof(ReverseBearTrapRemover_AddKey, keyId) == 0x000000, "Member 'ReverseBearTrapRemover_AddKey::keyId' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapRemover.AddSearchedKey
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrapRemover_AddSearchedKey final
{
public:
	int32                                         keyId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrapRemover_AddSearchedKey) == 0x000004, "Wrong alignment on ReverseBearTrapRemover_AddSearchedKey");
static_assert(sizeof(ReverseBearTrapRemover_AddSearchedKey) == 0x000004, "Wrong size on ReverseBearTrapRemover_AddSearchedKey");
static_assert(offsetof(ReverseBearTrapRemover_AddSearchedKey, keyId) == 0x000000, "Member 'ReverseBearTrapRemover_AddSearchedKey::keyId' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapRemover.GetAttachedRBT
// 0x0010 (0x0010 - 0x0000)
struct ReverseBearTrapRemover_GetAttachedRBT final
{
public:
	class AActor*                                 player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReverseBearTrap*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrapRemover_GetAttachedRBT) == 0x000008, "Wrong alignment on ReverseBearTrapRemover_GetAttachedRBT");
static_assert(sizeof(ReverseBearTrapRemover_GetAttachedRBT) == 0x000010, "Wrong size on ReverseBearTrapRemover_GetAttachedRBT");
static_assert(offsetof(ReverseBearTrapRemover_GetAttachedRBT, player) == 0x000000, "Member 'ReverseBearTrapRemover_GetAttachedRBT::player' has a wrong offset!");
static_assert(offsetof(ReverseBearTrapRemover_GetAttachedRBT, ReturnValue) == 0x000008, "Member 'ReverseBearTrapRemover_GetAttachedRBT::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapRemover.GetInteractorPrimitiveComponent
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrapRemover_GetInteractorPrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrapRemover_GetInteractorPrimitiveComponent) == 0x000008, "Wrong alignment on ReverseBearTrapRemover_GetInteractorPrimitiveComponent");
static_assert(sizeof(ReverseBearTrapRemover_GetInteractorPrimitiveComponent) == 0x000008, "Wrong size on ReverseBearTrapRemover_GetInteractorPrimitiveComponent");
static_assert(offsetof(ReverseBearTrapRemover_GetInteractorPrimitiveComponent, ReturnValue) == 0x000000, "Member 'ReverseBearTrapRemover_GetInteractorPrimitiveComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapRemover.GetMapActor
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrapRemover_GetMapActor final
{
public:
	class UMapActorComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrapRemover_GetMapActor) == 0x000008, "Wrong alignment on ReverseBearTrapRemover_GetMapActor");
static_assert(sizeof(ReverseBearTrapRemover_GetMapActor) == 0x000008, "Wrong size on ReverseBearTrapRemover_GetMapActor");
static_assert(offsetof(ReverseBearTrapRemover_GetMapActor, ReturnValue) == 0x000000, "Member 'ReverseBearTrapRemover_GetMapActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapRemover.HasKey
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrapRemover_HasKey final
{
public:
	int32                                         keyId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ReverseBearTrapRemover_HasKey) == 0x000004, "Wrong alignment on ReverseBearTrapRemover_HasKey");
static_assert(sizeof(ReverseBearTrapRemover_HasKey) == 0x000008, "Wrong size on ReverseBearTrapRemover_HasKey");
static_assert(offsetof(ReverseBearTrapRemover_HasKey, keyId) == 0x000000, "Member 'ReverseBearTrapRemover_HasKey::keyId' has a wrong offset!");
static_assert(offsetof(ReverseBearTrapRemover_HasKey, ReturnValue) == 0x000004, "Member 'ReverseBearTrapRemover_HasKey::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapRemover.HasSearchedForKey
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrapRemover_HasSearchedForKey final
{
public:
	int32                                         keyId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ReverseBearTrapRemover_HasSearchedForKey) == 0x000004, "Wrong alignment on ReverseBearTrapRemover_HasSearchedForKey");
static_assert(sizeof(ReverseBearTrapRemover_HasSearchedForKey) == 0x000008, "Wrong size on ReverseBearTrapRemover_HasSearchedForKey");
static_assert(offsetof(ReverseBearTrapRemover_HasSearchedForKey, keyId) == 0x000000, "Member 'ReverseBearTrapRemover_HasSearchedForKey::keyId' has a wrong offset!");
static_assert(offsetof(ReverseBearTrapRemover_HasSearchedForKey, ReturnValue) == 0x000004, "Member 'ReverseBearTrapRemover_HasSearchedForKey::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MatchManagementScreen.OnAddMap
// 0x0010 (0x0010 - 0x0000)
struct MatchManagementScreen_OnAddMap final
{
public:
	class FString                                 mapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchManagementScreen_OnAddMap) == 0x000008, "Wrong alignment on MatchManagementScreen_OnAddMap");
static_assert(sizeof(MatchManagementScreen_OnAddMap) == 0x000010, "Wrong size on MatchManagementScreen_OnAddMap");
static_assert(offsetof(MatchManagementScreen_OnAddMap, mapId) == 0x000000, "Member 'MatchManagementScreen_OnAddMap::mapId' has a wrong offset!");

// Function DeadByDaylight.MatchManagementScreen.OnItemsAndAddonsSettingsChange
// 0x0004 (0x0004 - 0x0000)
struct MatchManagementScreen_OnItemsAndAddonsSettingsChange final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchManagementScreen_OnItemsAndAddonsSettingsChange) == 0x000004, "Wrong alignment on MatchManagementScreen_OnItemsAndAddonsSettingsChange");
static_assert(sizeof(MatchManagementScreen_OnItemsAndAddonsSettingsChange) == 0x000004, "Wrong size on MatchManagementScreen_OnItemsAndAddonsSettingsChange");
static_assert(offsetof(MatchManagementScreen_OnItemsAndAddonsSettingsChange, value) == 0x000000, "Member 'MatchManagementScreen_OnItemsAndAddonsSettingsChange::value' has a wrong offset!");

// Function DeadByDaylight.MatchManagementScreen.OnOfferingsSettingsChange
// 0x0004 (0x0004 - 0x0000)
struct MatchManagementScreen_OnOfferingsSettingsChange final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchManagementScreen_OnOfferingsSettingsChange) == 0x000004, "Wrong alignment on MatchManagementScreen_OnOfferingsSettingsChange");
static_assert(sizeof(MatchManagementScreen_OnOfferingsSettingsChange) == 0x000004, "Wrong size on MatchManagementScreen_OnOfferingsSettingsChange");
static_assert(offsetof(MatchManagementScreen_OnOfferingsSettingsChange, value) == 0x000000, "Member 'MatchManagementScreen_OnOfferingsSettingsChange::value' has a wrong offset!");

// Function DeadByDaylight.MatchManagementScreen.OnPerksSettingsChange
// 0x0004 (0x0004 - 0x0000)
struct MatchManagementScreen_OnPerksSettingsChange final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchManagementScreen_OnPerksSettingsChange) == 0x000004, "Wrong alignment on MatchManagementScreen_OnPerksSettingsChange");
static_assert(sizeof(MatchManagementScreen_OnPerksSettingsChange) == 0x000004, "Wrong size on MatchManagementScreen_OnPerksSettingsChange");
static_assert(offsetof(MatchManagementScreen_OnPerksSettingsChange, value) == 0x000000, "Member 'MatchManagementScreen_OnPerksSettingsChange::value' has a wrong offset!");

// Function DeadByDaylight.MatchManagementScreen.OnRemoveMap
// 0x0010 (0x0010 - 0x0000)
struct MatchManagementScreen_OnRemoveMap final
{
public:
	class FString                                 mapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchManagementScreen_OnRemoveMap) == 0x000008, "Wrong alignment on MatchManagementScreen_OnRemoveMap");
static_assert(sizeof(MatchManagementScreen_OnRemoveMap) == 0x000010, "Wrong size on MatchManagementScreen_OnRemoveMap");
static_assert(offsetof(MatchManagementScreen_OnRemoveMap, mapId) == 0x000000, "Member 'MatchManagementScreen_OnRemoveMap::mapId' has a wrong offset!");

// Function DeadByDaylight.EscapeBlocker.OnPlayerDetectionZoneBeginOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct EscapeBlocker_OnPlayerDetectionZoneBeginOverlap final
{
public:
	class UPrimitiveComponent*                    hitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap) == 0x000008, "Wrong alignment on EscapeBlocker_OnPlayerDetectionZoneBeginOverlap");
static_assert(sizeof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap) == 0x0000B0, "Wrong size on EscapeBlocker_OnPlayerDetectionZoneBeginOverlap");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap, hitComponent) == 0x000000, "Member 'EscapeBlocker_OnPlayerDetectionZoneBeginOverlap::hitComponent' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap, otherActor) == 0x000008, "Member 'EscapeBlocker_OnPlayerDetectionZoneBeginOverlap::otherActor' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap, otherComp) == 0x000010, "Member 'EscapeBlocker_OnPlayerDetectionZoneBeginOverlap::otherComp' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap, otherBodyIndex) == 0x000018, "Member 'EscapeBlocker_OnPlayerDetectionZoneBeginOverlap::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap, bFromSweep) == 0x00001C, "Member 'EscapeBlocker_OnPlayerDetectionZoneBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap, sweepResult) == 0x000020, "Member 'EscapeBlocker_OnPlayerDetectionZoneBeginOverlap::sweepResult' has a wrong offset!");

// Function DeadByDaylight.EscapeBlocker.OnPlayerDetectionZoneEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct EscapeBlocker_OnPlayerDetectionZoneEndOverlap final
{
public:
	class UPrimitiveComponent*                    hitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EscapeBlocker_OnPlayerDetectionZoneEndOverlap) == 0x000008, "Wrong alignment on EscapeBlocker_OnPlayerDetectionZoneEndOverlap");
static_assert(sizeof(EscapeBlocker_OnPlayerDetectionZoneEndOverlap) == 0x000020, "Wrong size on EscapeBlocker_OnPlayerDetectionZoneEndOverlap");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneEndOverlap, hitComponent) == 0x000000, "Member 'EscapeBlocker_OnPlayerDetectionZoneEndOverlap::hitComponent' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneEndOverlap, otherActor) == 0x000008, "Member 'EscapeBlocker_OnPlayerDetectionZoneEndOverlap::otherActor' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneEndOverlap, otherComp) == 0x000010, "Member 'EscapeBlocker_OnPlayerDetectionZoneEndOverlap::otherComp' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneEndOverlap, otherBodyIndex) == 0x000018, "Member 'EscapeBlocker_OnPlayerDetectionZoneEndOverlap::otherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.EscapeBlocker.SetCamperBlocker
// 0x0008 (0x0008 - 0x0000)
struct EscapeBlocker_SetCamperBlocker final
{
public:
	class UBoxComponent*                          camperBlocker;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeBlocker_SetCamperBlocker) == 0x000008, "Wrong alignment on EscapeBlocker_SetCamperBlocker");
static_assert(sizeof(EscapeBlocker_SetCamperBlocker) == 0x000008, "Wrong size on EscapeBlocker_SetCamperBlocker");
static_assert(offsetof(EscapeBlocker_SetCamperBlocker, camperBlocker) == 0x000000, "Member 'EscapeBlocker_SetCamperBlocker::camperBlocker' has a wrong offset!");

// Function DeadByDaylight.EscapeBlocker.SetPlayerDetectionZone
// 0x0008 (0x0008 - 0x0000)
struct EscapeBlocker_SetPlayerDetectionZone final
{
public:
	class UBoxComponent*                          playerDetectionZone;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeBlocker_SetPlayerDetectionZone) == 0x000008, "Wrong alignment on EscapeBlocker_SetPlayerDetectionZone");
static_assert(sizeof(EscapeBlocker_SetPlayerDetectionZone) == 0x000008, "Wrong size on EscapeBlocker_SetPlayerDetectionZone");
static_assert(offsetof(EscapeBlocker_SetPlayerDetectionZone, playerDetectionZone) == 0x000000, "Member 'EscapeBlocker_SetPlayerDetectionZone::playerDetectionZone' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetOpenEscapeInteraction
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_GetOpenEscapeInteraction final
{
public:
	class UChargeableInteractionDefinition*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetOpenEscapeInteraction) == 0x000008, "Wrong alignment on EscapeDoor_GetOpenEscapeInteraction");
static_assert(sizeof(EscapeDoor_GetOpenEscapeInteraction) == 0x000008, "Wrong size on EscapeDoor_GetOpenEscapeInteraction");
static_assert(offsetof(EscapeDoor_GetOpenEscapeInteraction, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetOpenEscapeInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnCamperStartOpeningExitGate
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_OnCamperStartOpeningExitGate final
{
public:
	class ACamperPlayer*                          player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnCamperStartOpeningExitGate) == 0x000008, "Wrong alignment on EscapeDoor_OnCamperStartOpeningExitGate");
static_assert(sizeof(EscapeDoor_OnCamperStartOpeningExitGate) == 0x000008, "Wrong size on EscapeDoor_OnCamperStartOpeningExitGate");
static_assert(offsetof(EscapeDoor_OnCamperStartOpeningExitGate, player) == 0x000000, "Member 'EscapeDoor_OnCamperStartOpeningExitGate::player' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnEscapeZoneBeginOverlap
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_OnEscapeZoneBeginOverlap final
{
public:
	class AActor*                                 overlappingActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnEscapeZoneBeginOverlap) == 0x000008, "Wrong alignment on EscapeDoor_OnEscapeZoneBeginOverlap");
static_assert(sizeof(EscapeDoor_OnEscapeZoneBeginOverlap) == 0x000008, "Wrong size on EscapeDoor_OnEscapeZoneBeginOverlap");
static_assert(offsetof(EscapeDoor_OnEscapeZoneBeginOverlap, overlappingActor) == 0x000000, "Member 'EscapeDoor_OnEscapeZoneBeginOverlap::overlappingActor' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnEscapeZoneEndOverlap
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_OnEscapeZoneEndOverlap final
{
public:
	class AActor*                                 overlappingActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnEscapeZoneEndOverlap) == 0x000008, "Wrong alignment on EscapeDoor_OnEscapeZoneEndOverlap");
static_assert(sizeof(EscapeDoor_OnEscapeZoneEndOverlap) == 0x000008, "Wrong size on EscapeDoor_OnEscapeZoneEndOverlap");
static_assert(offsetof(EscapeDoor_OnEscapeZoneEndOverlap, overlappingActor) == 0x000000, "Member 'EscapeDoor_OnEscapeZoneEndOverlap::overlappingActor' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnExitActivationChanged
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoor_OnExitActivationChanged final
{
public:
	bool                                          activated;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnExitActivationChanged) == 0x000001, "Wrong alignment on EscapeDoor_OnExitActivationChanged");
static_assert(sizeof(EscapeDoor_OnExitActivationChanged) == 0x000001, "Wrong size on EscapeDoor_OnExitActivationChanged");
static_assert(offsetof(EscapeDoor_OnExitActivationChanged, activated) == 0x000000, "Member 'EscapeDoor_OnExitActivationChanged::activated' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnExitGateOpened
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_OnExitGateOpened final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnExitGateOpened) == 0x000008, "Wrong alignment on EscapeDoor_OnExitGateOpened");
static_assert(sizeof(EscapeDoor_OnExitGateOpened) == 0x000008, "Wrong size on EscapeDoor_OnExitGateOpened");
static_assert(offsetof(EscapeDoor_OnExitGateOpened, player) == 0x000000, "Member 'EscapeDoor_OnExitGateOpened::player' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnExitOpenChanged
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoor_OnExitOpenChanged final
{
public:
	bool                                          opened;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnExitOpenChanged) == 0x000001, "Wrong alignment on EscapeDoor_OnExitOpenChanged");
static_assert(sizeof(EscapeDoor_OnExitOpenChanged) == 0x000001, "Wrong size on EscapeDoor_OnExitOpenChanged");
static_assert(offsetof(EscapeDoor_OnExitOpenChanged, opened) == 0x000000, "Member 'EscapeDoor_OnExitOpenChanged::opened' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnPlayerEnterExitArea
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_OnPlayerEnterExitArea final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnPlayerEnterExitArea) == 0x000008, "Wrong alignment on EscapeDoor_OnPlayerEnterExitArea");
static_assert(sizeof(EscapeDoor_OnPlayerEnterExitArea) == 0x000008, "Wrong size on EscapeDoor_OnPlayerEnterExitArea");
static_assert(offsetof(EscapeDoor_OnPlayerEnterExitArea, player) == 0x000000, "Member 'EscapeDoor_OnPlayerEnterExitArea::player' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnPlayerExitExitArea
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_OnPlayerExitExitArea final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnPlayerExitExitArea) == 0x000008, "Wrong alignment on EscapeDoor_OnPlayerExitExitArea");
static_assert(sizeof(EscapeDoor_OnPlayerExitExitArea) == 0x000008, "Wrong size on EscapeDoor_OnPlayerExitExitArea");
static_assert(offsetof(EscapeDoor_OnPlayerExitExitArea, player) == 0x000000, "Member 'EscapeDoor_OnPlayerExitExitArea::player' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnRep_Activated
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoor_OnRep_Activated final
{
public:
	bool                                          oldActivated;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnRep_Activated) == 0x000001, "Wrong alignment on EscapeDoor_OnRep_Activated");
static_assert(sizeof(EscapeDoor_OnRep_Activated) == 0x000001, "Wrong size on EscapeDoor_OnRep_Activated");
static_assert(offsetof(EscapeDoor_OnRep_Activated, oldActivated) == 0x000000, "Member 'EscapeDoor_OnRep_Activated::oldActivated' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.SetIsActivated
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoor_SetIsActivated final
{
public:
	bool                                          isActivated;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_SetIsActivated) == 0x000001, "Wrong alignment on EscapeDoor_SetIsActivated");
static_assert(sizeof(EscapeDoor_SetIsActivated) == 0x000001, "Wrong size on EscapeDoor_SetIsActivated");
static_assert(offsetof(EscapeDoor_SetIsActivated, isActivated) == 0x000000, "Member 'EscapeDoor_SetIsActivated::isActivated' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetAtlantaExitOpeningIndicatorVisibility
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoor_GetAtlantaExitOpeningIndicatorVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetAtlantaExitOpeningIndicatorVisibility) == 0x000001, "Wrong alignment on EscapeDoor_GetAtlantaExitOpeningIndicatorVisibility");
static_assert(sizeof(EscapeDoor_GetAtlantaExitOpeningIndicatorVisibility) == 0x000001, "Wrong size on EscapeDoor_GetAtlantaExitOpeningIndicatorVisibility");
static_assert(offsetof(EscapeDoor_GetAtlantaExitOpeningIndicatorVisibility, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetAtlantaExitOpeningIndicatorVisibility::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetDoorSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_GetDoorSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetDoorSkeletalMeshComponent) == 0x000008, "Wrong alignment on EscapeDoor_GetDoorSkeletalMeshComponent");
static_assert(sizeof(EscapeDoor_GetDoorSkeletalMeshComponent) == 0x000008, "Wrong size on EscapeDoor_GetDoorSkeletalMeshComponent");
static_assert(offsetof(EscapeDoor_GetDoorSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetDoorSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetEscapeSwitchFloorLocation
// 0x000C (0x000C - 0x0000)
struct EscapeDoor_GetEscapeSwitchFloorLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetEscapeSwitchFloorLocation) == 0x000004, "Wrong alignment on EscapeDoor_GetEscapeSwitchFloorLocation");
static_assert(sizeof(EscapeDoor_GetEscapeSwitchFloorLocation) == 0x00000C, "Wrong size on EscapeDoor_GetEscapeSwitchFloorLocation");
static_assert(offsetof(EscapeDoor_GetEscapeSwitchFloorLocation, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetEscapeSwitchFloorLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetExitArea
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_GetExitArea final
{
public:
	class UBoxComponent*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetExitArea) == 0x000008, "Wrong alignment on EscapeDoor_GetExitArea");
static_assert(sizeof(EscapeDoor_GetExitArea) == 0x000008, "Wrong size on EscapeDoor_GetExitArea");
static_assert(offsetof(EscapeDoor_GetExitArea, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetExitArea::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetIsOpen
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoor_GetIsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetIsOpen) == 0x000001, "Wrong alignment on EscapeDoor_GetIsOpen");
static_assert(sizeof(EscapeDoor_GetIsOpen) == 0x000001, "Wrong size on EscapeDoor_GetIsOpen");
static_assert(offsetof(EscapeDoor_GetIsOpen, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetIsOpen::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetOpenTime
// 0x0004 (0x0004 - 0x0000)
struct EscapeDoor_GetOpenTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetOpenTime) == 0x000004, "Wrong alignment on EscapeDoor_GetOpenTime");
static_assert(sizeof(EscapeDoor_GetOpenTime) == 0x000004, "Wrong size on EscapeDoor_GetOpenTime");
static_assert(offsetof(EscapeDoor_GetOpenTime, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetOpenTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetParadiseServerLocation
// 0x000C (0x000C - 0x0000)
struct EscapeDoor_GetParadiseServerLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetParadiseServerLocation) == 0x000004, "Wrong alignment on EscapeDoor_GetParadiseServerLocation");
static_assert(sizeof(EscapeDoor_GetParadiseServerLocation) == 0x00000C, "Wrong size on EscapeDoor_GetParadiseServerLocation");
static_assert(offsetof(EscapeDoor_GetParadiseServerLocation, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetParadiseServerLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetSwitchSceneComponent
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_GetSwitchSceneComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetSwitchSceneComponent) == 0x000008, "Wrong alignment on EscapeDoor_GetSwitchSceneComponent");
static_assert(sizeof(EscapeDoor_GetSwitchSceneComponent) == 0x000008, "Wrong size on EscapeDoor_GetSwitchSceneComponent");
static_assert(offsetof(EscapeDoor_GetSwitchSceneComponent, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetSwitchSceneComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.IsActivated
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoor_IsActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_IsActivated) == 0x000001, "Wrong alignment on EscapeDoor_IsActivated");
static_assert(sizeof(EscapeDoor_IsActivated) == 0x000001, "Wrong size on EscapeDoor_IsActivated");
static_assert(offsetof(EscapeDoor_IsActivated, ReturnValue) == 0x000000, "Member 'EscapeDoor_IsActivated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.IsDoorSwitchBlocked
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoor_IsDoorSwitchBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_IsDoorSwitchBlocked) == 0x000001, "Wrong alignment on EscapeDoor_IsDoorSwitchBlocked");
static_assert(sizeof(EscapeDoor_IsDoorSwitchBlocked) == 0x000001, "Wrong size on EscapeDoor_IsDoorSwitchBlocked");
static_assert(offsetof(EscapeDoor_IsDoorSwitchBlocked, ReturnValue) == 0x000000, "Member 'EscapeDoor_IsDoorSwitchBlocked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeThroughHatch.OnCamperEscapeThroughHatch
// 0x0008 (0x0008 - 0x0000)
struct EscapeThroughHatch_OnCamperEscapeThroughHatch final
{
public:
	class ACamperPlayer*                          player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeThroughHatch_OnCamperEscapeThroughHatch) == 0x000008, "Wrong alignment on EscapeThroughHatch_OnCamperEscapeThroughHatch");
static_assert(sizeof(EscapeThroughHatch_OnCamperEscapeThroughHatch) == 0x000008, "Wrong size on EscapeThroughHatch_OnCamperEscapeThroughHatch");
static_assert(offsetof(EscapeThroughHatch_OnCamperEscapeThroughHatch, player) == 0x000000, "Member 'EscapeThroughHatch_OnCamperEscapeThroughHatch::player' has a wrong offset!");

// Function DeadByDaylight.EventGeneratorComponent.Authority_FireGenCompletedEventScore
// 0x0001 (0x0001 - 0x0000)
struct EventGeneratorComponent_Authority_FireGenCompletedEventScore final
{
public:
	bool                                          isAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventGeneratorComponent_Authority_FireGenCompletedEventScore) == 0x000001, "Wrong alignment on EventGeneratorComponent_Authority_FireGenCompletedEventScore");
static_assert(sizeof(EventGeneratorComponent_Authority_FireGenCompletedEventScore) == 0x000001, "Wrong size on EventGeneratorComponent_Authority_FireGenCompletedEventScore");
static_assert(offsetof(EventGeneratorComponent_Authority_FireGenCompletedEventScore, isAutoCompleted) == 0x000000, "Member 'EventGeneratorComponent_Authority_FireGenCompletedEventScore::isAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.LanternLightCollectable.SetParentLantern
// 0x0008 (0x0008 - 0x0000)
struct LanternLightCollectable_SetParentLantern final
{
public:
	class ALanternInteractable*                   parentLantern;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternLightCollectable_SetParentLantern) == 0x000008, "Wrong alignment on LanternLightCollectable_SetParentLantern");
static_assert(sizeof(LanternLightCollectable_SetParentLantern) == 0x000008, "Wrong size on LanternLightCollectable_SetParentLantern");
static_assert(offsetof(LanternLightCollectable_SetParentLantern, parentLantern) == 0x000000, "Member 'LanternLightCollectable_SetParentLantern::parentLantern' has a wrong offset!");

// Function DeadByDaylight.ExposerInteriorZoneComponent.AddExposerSpawnPoint
// 0x0008 (0x0008 - 0x0000)
struct ExposerInteriorZoneComponent_AddExposerSpawnPoint final
{
public:
	class USceneComponent*                        point;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExposerInteriorZoneComponent_AddExposerSpawnPoint) == 0x000008, "Wrong alignment on ExposerInteriorZoneComponent_AddExposerSpawnPoint");
static_assert(sizeof(ExposerInteriorZoneComponent_AddExposerSpawnPoint) == 0x000008, "Wrong size on ExposerInteriorZoneComponent_AddExposerSpawnPoint");
static_assert(offsetof(ExposerInteriorZoneComponent_AddExposerSpawnPoint, point) == 0x000000, "Member 'ExposerInteriorZoneComponent_AddExposerSpawnPoint::point' has a wrong offset!");

// Function DeadByDaylight.UmgSpectatorHud.OnPlayerStatusSelected
// 0x0010 (0x0010 - 0x0000)
struct UmgSpectatorHud_OnPlayerStatusSelected final
{
public:
	class FString                                 playerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgSpectatorHud_OnPlayerStatusSelected) == 0x000008, "Wrong alignment on UmgSpectatorHud_OnPlayerStatusSelected");
static_assert(sizeof(UmgSpectatorHud_OnPlayerStatusSelected) == 0x000010, "Wrong size on UmgSpectatorHud_OnPlayerStatusSelected");
static_assert(offsetof(UmgSpectatorHud_OnPlayerStatusSelected, playerName) == 0x000000, "Member 'UmgSpectatorHud_OnPlayerStatusSelected::playerName' has a wrong offset!");

// Function DeadByDaylight.Fadeable.OnAlphaChanged
// 0x0010 (0x0010 - 0x0000)
struct Fadeable_OnAlphaChanged final
{
public:
	float                                         newAlpha;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Fadeable_OnAlphaChanged) == 0x000008, "Wrong alignment on Fadeable_OnAlphaChanged");
static_assert(sizeof(Fadeable_OnAlphaChanged) == 0x000010, "Wrong size on Fadeable_OnAlphaChanged");
static_assert(offsetof(Fadeable_OnAlphaChanged, newAlpha) == 0x000000, "Member 'Fadeable_OnAlphaChanged::newAlpha' has a wrong offset!");
static_assert(offsetof(Fadeable_OnAlphaChanged, other) == 0x000008, "Member 'Fadeable_OnAlphaChanged::other' has a wrong offset!");

// Function DeadByDaylight.Fadeable.OnFadeBegin
// 0x0008 (0x0008 - 0x0000)
struct Fadeable_OnFadeBegin final
{
public:
	class AActor*                                 other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Fadeable_OnFadeBegin) == 0x000008, "Wrong alignment on Fadeable_OnFadeBegin");
static_assert(sizeof(Fadeable_OnFadeBegin) == 0x000008, "Wrong size on Fadeable_OnFadeBegin");
static_assert(offsetof(Fadeable_OnFadeBegin, other) == 0x000000, "Member 'Fadeable_OnFadeBegin::other' has a wrong offset!");

// Function DeadByDaylight.Fadeable.OnFadeEnd
// 0x0008 (0x0008 - 0x0000)
struct Fadeable_OnFadeEnd final
{
public:
	class AActor*                                 other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Fadeable_OnFadeEnd) == 0x000008, "Wrong alignment on Fadeable_OnFadeEnd");
static_assert(sizeof(Fadeable_OnFadeEnd) == 0x000008, "Wrong size on Fadeable_OnFadeEnd");
static_assert(offsetof(Fadeable_OnFadeEnd, other) == 0x000000, "Member 'Fadeable_OnFadeEnd::other' has a wrong offset!");

// Function DeadByDaylight.UMGLoginPopup.ChooseProvider
// 0x0001 (0x0001 - 0x0000)
struct UMGLoginPopup_ChooseProvider final
{
public:
	uint8                                         provider;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoginPopup_ChooseProvider) == 0x000001, "Wrong alignment on UMGLoginPopup_ChooseProvider");
static_assert(sizeof(UMGLoginPopup_ChooseProvider) == 0x000001, "Wrong size on UMGLoginPopup_ChooseProvider");
static_assert(offsetof(UMGLoginPopup_ChooseProvider, provider) == 0x000000, "Member 'UMGLoginPopup_ChooseProvider::provider' has a wrong offset!");

// Function DeadByDaylight.FearMarketManager.ReceivedFearMarketData
// 0x0001 (0x0001 - 0x0000)
struct FearMarketManager_ReceivedFearMarketData final
{
public:
	bool                                          success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FearMarketManager_ReceivedFearMarketData) == 0x000001, "Wrong alignment on FearMarketManager_ReceivedFearMarketData");
static_assert(sizeof(FearMarketManager_ReceivedFearMarketData) == 0x000001, "Wrong size on FearMarketManager_ReceivedFearMarketData");
static_assert(offsetof(FearMarketManager_ReceivedFearMarketData, success) == 0x000000, "Member 'FearMarketManager_ReceivedFearMarketData::success' has a wrong offset!");

// Function DeadByDaylight.Firecracker.Multicast_InitFromSpawner
// 0x0008 (0x0008 - 0x0000)
struct Firecracker_Multicast_InitFromSpawner final
{
public:
	class ACollectable*                           spawner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firecracker_Multicast_InitFromSpawner) == 0x000008, "Wrong alignment on Firecracker_Multicast_InitFromSpawner");
static_assert(sizeof(Firecracker_Multicast_InitFromSpawner) == 0x000008, "Wrong size on Firecracker_Multicast_InitFromSpawner");
static_assert(offsetof(Firecracker_Multicast_InitFromSpawner, spawner) == 0x000000, "Member 'Firecracker_Multicast_InitFromSpawner::spawner' has a wrong offset!");

// Function DeadByDaylight.Firecracker.OnFuseBurnUpdate
// 0x0008 (0x0008 - 0x0000)
struct Firecracker_OnFuseBurnUpdate final
{
public:
	float                                         deltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         fuseTimeLeftPercent;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firecracker_OnFuseBurnUpdate) == 0x000004, "Wrong alignment on Firecracker_OnFuseBurnUpdate");
static_assert(sizeof(Firecracker_OnFuseBurnUpdate) == 0x000008, "Wrong size on Firecracker_OnFuseBurnUpdate");
static_assert(offsetof(Firecracker_OnFuseBurnUpdate, deltaSeconds) == 0x000000, "Member 'Firecracker_OnFuseBurnUpdate::deltaSeconds' has a wrong offset!");
static_assert(offsetof(Firecracker_OnFuseBurnUpdate, fuseTimeLeftPercent) == 0x000004, "Member 'Firecracker_OnFuseBurnUpdate::fuseTimeLeftPercent' has a wrong offset!");

// Function DeadByDaylight.Firecracker.GetBlindnessEffectDuration
// 0x0010 (0x0010 - 0x0000)
struct Firecracker_GetBlindnessEffectDuration final
{
public:
	const class AActor*                           player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Firecracker_GetBlindnessEffectDuration) == 0x000008, "Wrong alignment on Firecracker_GetBlindnessEffectDuration");
static_assert(sizeof(Firecracker_GetBlindnessEffectDuration) == 0x000010, "Wrong size on Firecracker_GetBlindnessEffectDuration");
static_assert(offsetof(Firecracker_GetBlindnessEffectDuration, player) == 0x000000, "Member 'Firecracker_GetBlindnessEffectDuration::player' has a wrong offset!");
static_assert(offsetof(Firecracker_GetBlindnessEffectDuration, ReturnValue) == 0x000008, "Member 'Firecracker_GetBlindnessEffectDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Firecracker.GetDeafnessEffectDuration
// 0x0010 (0x0010 - 0x0000)
struct Firecracker_GetDeafnessEffectDuration final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Firecracker_GetDeafnessEffectDuration) == 0x000008, "Wrong alignment on Firecracker_GetDeafnessEffectDuration");
static_assert(sizeof(Firecracker_GetDeafnessEffectDuration) == 0x000010, "Wrong size on Firecracker_GetDeafnessEffectDuration");
static_assert(offsetof(Firecracker_GetDeafnessEffectDuration, player) == 0x000000, "Member 'Firecracker_GetDeafnessEffectDuration::player' has a wrong offset!");
static_assert(offsetof(Firecracker_GetDeafnessEffectDuration, ReturnValue) == 0x000008, "Member 'Firecracker_GetDeafnessEffectDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Firecracker.GetEffects
// 0x0010 (0x0010 - 0x0000)
struct Firecracker_GetEffects final
{
public:
	TArray<class UGameplayModifierContainer*>     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firecracker_GetEffects) == 0x000008, "Wrong alignment on Firecracker_GetEffects");
static_assert(sizeof(Firecracker_GetEffects) == 0x000010, "Wrong size on Firecracker_GetEffects");
static_assert(offsetof(Firecracker_GetEffects, ReturnValue) == 0x000000, "Member 'Firecracker_GetEffects::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Firecracker.GetExploded
// 0x0001 (0x0001 - 0x0000)
struct Firecracker_GetExploded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firecracker_GetExploded) == 0x000001, "Wrong alignment on Firecracker_GetExploded");
static_assert(sizeof(Firecracker_GetExploded) == 0x000001, "Wrong size on Firecracker_GetExploded");
static_assert(offsetof(Firecracker_GetExploded, ReturnValue) == 0x000000, "Member 'Firecracker_GetExploded::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Firecracker.GetExplosionDelay
// 0x0004 (0x0004 - 0x0000)
struct Firecracker_GetExplosionDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firecracker_GetExplosionDelay) == 0x000004, "Wrong alignment on Firecracker_GetExplosionDelay");
static_assert(sizeof(Firecracker_GetExplosionDelay) == 0x000004, "Wrong size on Firecracker_GetExplosionDelay");
static_assert(offsetof(Firecracker_GetExplosionDelay, ReturnValue) == 0x000000, "Member 'Firecracker_GetExplosionDelay::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Firecracker.GetExplosionEffectDuration
// 0x0004 (0x0004 - 0x0000)
struct Firecracker_GetExplosionEffectDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firecracker_GetExplosionEffectDuration) == 0x000004, "Wrong alignment on Firecracker_GetExplosionEffectDuration");
static_assert(sizeof(Firecracker_GetExplosionEffectDuration) == 0x000004, "Wrong size on Firecracker_GetExplosionEffectDuration");
static_assert(offsetof(Firecracker_GetExplosionEffectDuration, ReturnValue) == 0x000000, "Member 'Firecracker_GetExplosionEffectDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Firecracker.GetExplosionRange
// 0x0004 (0x0004 - 0x0000)
struct Firecracker_GetExplosionRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firecracker_GetExplosionRange) == 0x000004, "Wrong alignment on Firecracker_GetExplosionRange");
static_assert(sizeof(Firecracker_GetExplosionRange) == 0x000004, "Wrong size on Firecracker_GetExplosionRange");
static_assert(offsetof(Firecracker_GetExplosionRange, ReturnValue) == 0x000000, "Member 'Firecracker_GetExplosionRange::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Firecracker.GetModifierValue
// 0x0010 (0x0010 - 0x0000)
struct Firecracker_GetModifierValue final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Firecracker_GetModifierValue) == 0x000004, "Wrong alignment on Firecracker_GetModifierValue");
static_assert(sizeof(Firecracker_GetModifierValue) == 0x000010, "Wrong size on Firecracker_GetModifierValue");
static_assert(offsetof(Firecracker_GetModifierValue, type) == 0x000000, "Member 'Firecracker_GetModifierValue::type' has a wrong offset!");
static_assert(offsetof(Firecracker_GetModifierValue, ReturnValue) == 0x00000C, "Member 'Firecracker_GetModifierValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Firecracker.HasFlag
// 0x0010 (0x0010 - 0x0000)
struct Firecracker_HasFlag final
{
public:
	struct FGameplayTag                           flag;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Firecracker_HasFlag) == 0x000004, "Wrong alignment on Firecracker_HasFlag");
static_assert(sizeof(Firecracker_HasFlag) == 0x000010, "Wrong size on Firecracker_HasFlag");
static_assert(offsetof(Firecracker_HasFlag, flag) == 0x000000, "Member 'Firecracker_HasFlag::flag' has a wrong offset!");
static_assert(offsetof(Firecracker_HasFlag, ReturnValue) == 0x00000C, "Member 'Firecracker_HasFlag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Firecracker.HasModifierOfType
// 0x0010 (0x0010 - 0x0000)
struct Firecracker_HasModifierOfType final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Firecracker_HasModifierOfType) == 0x000004, "Wrong alignment on Firecracker_HasModifierOfType");
static_assert(sizeof(Firecracker_HasModifierOfType) == 0x000010, "Wrong size on Firecracker_HasModifierOfType");
static_assert(offsetof(Firecracker_HasModifierOfType, type) == 0x000000, "Member 'Firecracker_HasModifierOfType::type' has a wrong offset!");
static_assert(offsetof(Firecracker_HasModifierOfType, ReturnValue) == 0x00000C, "Member 'Firecracker_HasModifierOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Firecracker.ShouldBlind
// 0x0010 (0x0010 - 0x0000)
struct Firecracker_ShouldBlind final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         outDuration;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Firecracker_ShouldBlind) == 0x000008, "Wrong alignment on Firecracker_ShouldBlind");
static_assert(sizeof(Firecracker_ShouldBlind) == 0x000010, "Wrong size on Firecracker_ShouldBlind");
static_assert(offsetof(Firecracker_ShouldBlind, player) == 0x000000, "Member 'Firecracker_ShouldBlind::player' has a wrong offset!");
static_assert(offsetof(Firecracker_ShouldBlind, outDuration) == 0x000008, "Member 'Firecracker_ShouldBlind::outDuration' has a wrong offset!");
static_assert(offsetof(Firecracker_ShouldBlind, ReturnValue) == 0x00000C, "Member 'Firecracker_ShouldBlind::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Firecracker.ShouldDeafen
// 0x0010 (0x0010 - 0x0000)
struct Firecracker_ShouldDeafen final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         outDuration;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Firecracker_ShouldDeafen) == 0x000008, "Wrong alignment on Firecracker_ShouldDeafen");
static_assert(sizeof(Firecracker_ShouldDeafen) == 0x000010, "Wrong size on Firecracker_ShouldDeafen");
static_assert(offsetof(Firecracker_ShouldDeafen, player) == 0x000000, "Member 'Firecracker_ShouldDeafen::player' has a wrong offset!");
static_assert(offsetof(Firecracker_ShouldDeafen, outDuration) == 0x000008, "Member 'Firecracker_ShouldDeafen::outDuration' has a wrong offset!");
static_assert(offsetof(Firecracker_ShouldDeafen, ReturnValue) == 0x00000C, "Member 'Firecracker_ShouldDeafen::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GenericTextInputPopupScreen.OnTextInputChoiceSelected
// 0x0018 (0x0018 - 0x0000)
struct GenericTextInputPopupScreen_OnTextInputChoiceSelected final
{
public:
	int32                                         selectedButtonType;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 inputText;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericTextInputPopupScreen_OnTextInputChoiceSelected) == 0x000008, "Wrong alignment on GenericTextInputPopupScreen_OnTextInputChoiceSelected");
static_assert(sizeof(GenericTextInputPopupScreen_OnTextInputChoiceSelected) == 0x000018, "Wrong size on GenericTextInputPopupScreen_OnTextInputChoiceSelected");
static_assert(offsetof(GenericTextInputPopupScreen_OnTextInputChoiceSelected, selectedButtonType) == 0x000000, "Member 'GenericTextInputPopupScreen_OnTextInputChoiceSelected::selectedButtonType' has a wrong offset!");
static_assert(offsetof(GenericTextInputPopupScreen_OnTextInputChoiceSelected, inputText) == 0x000008, "Member 'GenericTextInputPopupScreen_OnTextInputChoiceSelected::inputText' has a wrong offset!");

// Function DeadByDaylight.FirecrackerEffectHandlerComponent.OnFirecrackerDestroyed
// 0x0008 (0x0008 - 0x0000)
struct FirecrackerEffectHandlerComponent_OnFirecrackerDestroyed final
{
public:
	class AActor*                                 destroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FirecrackerEffectHandlerComponent_OnFirecrackerDestroyed) == 0x000008, "Wrong alignment on FirecrackerEffectHandlerComponent_OnFirecrackerDestroyed");
static_assert(sizeof(FirecrackerEffectHandlerComponent_OnFirecrackerDestroyed) == 0x000008, "Wrong size on FirecrackerEffectHandlerComponent_OnFirecrackerDestroyed");
static_assert(offsetof(FirecrackerEffectHandlerComponent_OnFirecrackerDestroyed, destroyedActor) == 0x000000, "Member 'FirecrackerEffectHandlerComponent_OnFirecrackerDestroyed::destroyedActor' has a wrong offset!");

// Function DeadByDaylight.FlickeringLight.GetActiveLightComponent
// 0x0008 (0x0008 - 0x0000)
struct FlickeringLight_GetActiveLightComponent final
{
public:
	class ULocalLightComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlickeringLight_GetActiveLightComponent) == 0x000008, "Wrong alignment on FlickeringLight_GetActiveLightComponent");
static_assert(sizeof(FlickeringLight_GetActiveLightComponent) == 0x000008, "Wrong size on FlickeringLight_GetActiveLightComponent");
static_assert(offsetof(FlickeringLight_GetActiveLightComponent, ReturnValue) == 0x000000, "Member 'FlickeringLight_GetActiveLightComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.FlickeringLight.GetSecondaryLightComponent
// 0x0008 (0x0008 - 0x0000)
struct FlickeringLight_GetSecondaryLightComponent final
{
public:
	class ULocalLightComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlickeringLight_GetSecondaryLightComponent) == 0x000008, "Wrong alignment on FlickeringLight_GetSecondaryLightComponent");
static_assert(sizeof(FlickeringLight_GetSecondaryLightComponent) == 0x000008, "Wrong size on FlickeringLight_GetSecondaryLightComponent");
static_assert(offsetof(FlickeringLight_GetSecondaryLightComponent, ReturnValue) == 0x000000, "Member 'FlickeringLight_GetSecondaryLightComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.FlickeringLight.GetSecondaryLightVisibilty
// 0x0001 (0x0001 - 0x0000)
struct FlickeringLight_GetSecondaryLightVisibilty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlickeringLight_GetSecondaryLightVisibilty) == 0x000001, "Wrong alignment on FlickeringLight_GetSecondaryLightVisibilty");
static_assert(sizeof(FlickeringLight_GetSecondaryLightVisibilty) == 0x000001, "Wrong size on FlickeringLight_GetSecondaryLightVisibilty");
static_assert(offsetof(FlickeringLight_GetSecondaryLightVisibilty, ReturnValue) == 0x000000, "Member 'FlickeringLight_GetSecondaryLightVisibilty::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.FranklinsDemiseConsumedByEntityComponent.Authority_StartConsume
// 0x0018 (0x0018 - 0x0000)
struct FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             previousOwner;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             slasher;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume) == 0x000008, "Wrong alignment on FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume");
static_assert(sizeof(FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume) == 0x000018, "Wrong size on FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume");
static_assert(offsetof(FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume, duration) == 0x000000, "Member 'FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume::duration' has a wrong offset!");
static_assert(offsetof(FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume, previousOwner) == 0x000008, "Member 'FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume::previousOwner' has a wrong offset!");
static_assert(offsetof(FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume, slasher) == 0x000010, "Member 'FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume::slasher' has a wrong offset!");

// Function DeadByDaylight.FriendSearchPopupScreen.OnAcceptFriendInvite
// 0x0010 (0x0010 - 0x0000)
struct FriendSearchPopupScreen_OnAcceptFriendInvite final
{
public:
	class FString                                 friendKrakenID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendSearchPopupScreen_OnAcceptFriendInvite) == 0x000008, "Wrong alignment on FriendSearchPopupScreen_OnAcceptFriendInvite");
static_assert(sizeof(FriendSearchPopupScreen_OnAcceptFriendInvite) == 0x000010, "Wrong size on FriendSearchPopupScreen_OnAcceptFriendInvite");
static_assert(offsetof(FriendSearchPopupScreen_OnAcceptFriendInvite, friendKrakenID) == 0x000000, "Member 'FriendSearchPopupScreen_OnAcceptFriendInvite::friendKrakenID' has a wrong offset!");

// Function DeadByDaylight.FriendSearchPopupScreen.OnFriendSearchStart
// 0x0010 (0x0010 - 0x0000)
struct FriendSearchPopupScreen_OnFriendSearchStart final
{
public:
	class FString                                 searchText;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendSearchPopupScreen_OnFriendSearchStart) == 0x000008, "Wrong alignment on FriendSearchPopupScreen_OnFriendSearchStart");
static_assert(sizeof(FriendSearchPopupScreen_OnFriendSearchStart) == 0x000010, "Wrong size on FriendSearchPopupScreen_OnFriendSearchStart");
static_assert(offsetof(FriendSearchPopupScreen_OnFriendSearchStart, searchText) == 0x000000, "Member 'FriendSearchPopupScreen_OnFriendSearchStart::searchText' has a wrong offset!");

// Function DeadByDaylight.FriendSearchPopupScreen.OnInviteFriend
// 0x0018 (0x0018 - 0x0000)
struct FriendSearchPopupScreen_OnInviteFriend final
{
public:
	class FString                                 friendKrakenID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isOffNetwork;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendSearchPopupScreen_OnInviteFriend) == 0x000008, "Wrong alignment on FriendSearchPopupScreen_OnInviteFriend");
static_assert(sizeof(FriendSearchPopupScreen_OnInviteFriend) == 0x000018, "Wrong size on FriendSearchPopupScreen_OnInviteFriend");
static_assert(offsetof(FriendSearchPopupScreen_OnInviteFriend, friendKrakenID) == 0x000000, "Member 'FriendSearchPopupScreen_OnInviteFriend::friendKrakenID' has a wrong offset!");
static_assert(offsetof(FriendSearchPopupScreen_OnInviteFriend, isOffNetwork) == 0x000010, "Member 'FriendSearchPopupScreen_OnInviteFriend::isOffNetwork' has a wrong offset!");

// Function DeadByDaylight.FriendSearchPopupScreen.OnUnblockPlayer
// 0x0010 (0x0010 - 0x0000)
struct FriendSearchPopupScreen_OnUnblockPlayer final
{
public:
	class FString                                 friendKrakenID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendSearchPopupScreen_OnUnblockPlayer) == 0x000008, "Wrong alignment on FriendSearchPopupScreen_OnUnblockPlayer");
static_assert(sizeof(FriendSearchPopupScreen_OnUnblockPlayer) == 0x000010, "Wrong size on FriendSearchPopupScreen_OnUnblockPlayer");
static_assert(offsetof(FriendSearchPopupScreen_OnUnblockPlayer, friendKrakenID) == 0x000000, "Member 'FriendSearchPopupScreen_OnUnblockPlayer::friendKrakenID' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnAcceptFriendInvite
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnAcceptFriendInvite final
{
public:
	class FString                                 friendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnAcceptFriendInvite) == 0x000008, "Wrong alignment on FriendsListScreen_OnAcceptFriendInvite");
static_assert(sizeof(FriendsListScreen_OnAcceptFriendInvite) == 0x000010, "Wrong size on FriendsListScreen_OnAcceptFriendInvite");
static_assert(offsetof(FriendsListScreen_OnAcceptFriendInvite, friendId) == 0x000000, "Member 'FriendsListScreen_OnAcceptFriendInvite::friendId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnBlockPlayer
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnBlockPlayer final
{
public:
	class FString                                 playerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnBlockPlayer) == 0x000008, "Wrong alignment on FriendsListScreen_OnBlockPlayer");
static_assert(sizeof(FriendsListScreen_OnBlockPlayer) == 0x000010, "Wrong size on FriendsListScreen_OnBlockPlayer");
static_assert(offsetof(FriendsListScreen_OnBlockPlayer, playerId) == 0x000000, "Member 'FriendsListScreen_OnBlockPlayer::playerId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnCancelFriendInvite
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnCancelFriendInvite final
{
public:
	class FString                                 friendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnCancelFriendInvite) == 0x000008, "Wrong alignment on FriendsListScreen_OnCancelFriendInvite");
static_assert(sizeof(FriendsListScreen_OnCancelFriendInvite) == 0x000010, "Wrong size on FriendsListScreen_OnCancelFriendInvite");
static_assert(offsetof(FriendsListScreen_OnCancelFriendInvite, friendId) == 0x000000, "Member 'FriendsListScreen_OnCancelFriendInvite::friendId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnDeclineFriendInvite
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnDeclineFriendInvite final
{
public:
	class FString                                 friendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnDeclineFriendInvite) == 0x000008, "Wrong alignment on FriendsListScreen_OnDeclineFriendInvite");
static_assert(sizeof(FriendsListScreen_OnDeclineFriendInvite) == 0x000010, "Wrong size on FriendsListScreen_OnDeclineFriendInvite");
static_assert(offsetof(FriendsListScreen_OnDeclineFriendInvite, friendId) == 0x000000, "Member 'FriendsListScreen_OnDeclineFriendInvite::friendId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnPartyJoinRequest
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnPartyJoinRequest final
{
public:
	class FString                                 friendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnPartyJoinRequest) == 0x000008, "Wrong alignment on FriendsListScreen_OnPartyJoinRequest");
static_assert(sizeof(FriendsListScreen_OnPartyJoinRequest) == 0x000010, "Wrong size on FriendsListScreen_OnPartyJoinRequest");
static_assert(offsetof(FriendsListScreen_OnPartyJoinRequest, friendId) == 0x000000, "Member 'FriendsListScreen_OnPartyJoinRequest::friendId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnRemoveFriend
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnRemoveFriend final
{
public:
	class FString                                 friendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnRemoveFriend) == 0x000008, "Wrong alignment on FriendsListScreen_OnRemoveFriend");
static_assert(sizeof(FriendsListScreen_OnRemoveFriend) == 0x000010, "Wrong size on FriendsListScreen_OnRemoveFriend");
static_assert(offsetof(FriendsListScreen_OnRemoveFriend, friendId) == 0x000000, "Member 'FriendsListScreen_OnRemoveFriend::friendId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnSendPartyInvite
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnSendPartyInvite final
{
public:
	class FString                                 friendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnSendPartyInvite) == 0x000008, "Wrong alignment on FriendsListScreen_OnSendPartyInvite");
static_assert(sizeof(FriendsListScreen_OnSendPartyInvite) == 0x000010, "Wrong size on FriendsListScreen_OnSendPartyInvite");
static_assert(offsetof(FriendsListScreen_OnSendPartyInvite, friendId) == 0x000000, "Member 'FriendsListScreen_OnSendPartyInvite::friendId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnShowNameSelected
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnShowNameSelected final
{
public:
	class FString                                 playerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnShowNameSelected) == 0x000008, "Wrong alignment on FriendsListScreen_OnShowNameSelected");
static_assert(sizeof(FriendsListScreen_OnShowNameSelected) == 0x000010, "Wrong size on FriendsListScreen_OnShowNameSelected");
static_assert(offsetof(FriendsListScreen_OnShowNameSelected, playerId) == 0x000000, "Member 'FriendsListScreen_OnShowNameSelected::playerId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnUnblockPlayer
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnUnblockPlayer final
{
public:
	class FString                                 playerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnUnblockPlayer) == 0x000008, "Wrong alignment on FriendsListScreen_OnUnblockPlayer");
static_assert(sizeof(FriendsListScreen_OnUnblockPlayer) == 0x000010, "Wrong size on FriendsListScreen_OnUnblockPlayer");
static_assert(offsetof(FriendsListScreen_OnUnblockPlayer, playerId) == 0x000000, "Member 'FriendsListScreen_OnUnblockPlayer::playerId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnViewProfile
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnViewProfile final
{
public:
	class FString                                 friendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnViewProfile) == 0x000008, "Wrong alignment on FriendsListScreen_OnViewProfile");
static_assert(sizeof(FriendsListScreen_OnViewProfile) == 0x000010, "Wrong size on FriendsListScreen_OnViewProfile");
static_assert(offsetof(FriendsListScreen_OnViewProfile, friendId) == 0x000000, "Member 'FriendsListScreen_OnViewProfile::friendId' has a wrong offset!");

// Function DeadByDaylight.GameEventDispatcher.Authority_AccumulateOngoingGameEvent
// 0x0040 (0x0040 - 0x0000)
struct GameEventDispatcher_Authority_AccumulateOngoingGameEvent final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ongoingWaitTime;                                   // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameEventDispatcher_Authority_AccumulateOngoingGameEvent) == 0x000008, "Wrong alignment on GameEventDispatcher_Authority_AccumulateOngoingGameEvent");
static_assert(sizeof(GameEventDispatcher_Authority_AccumulateOngoingGameEvent) == 0x000040, "Wrong size on GameEventDispatcher_Authority_AccumulateOngoingGameEvent");
static_assert(offsetof(GameEventDispatcher_Authority_AccumulateOngoingGameEvent, gameEventType) == 0x000000, "Member 'GameEventDispatcher_Authority_AccumulateOngoingGameEvent::gameEventType' has a wrong offset!");
static_assert(offsetof(GameEventDispatcher_Authority_AccumulateOngoingGameEvent, gameEventData) == 0x000010, "Member 'GameEventDispatcher_Authority_AccumulateOngoingGameEvent::gameEventData' has a wrong offset!");
static_assert(offsetof(GameEventDispatcher_Authority_AccumulateOngoingGameEvent, ongoingWaitTime) == 0x000038, "Member 'GameEventDispatcher_Authority_AccumulateOngoingGameEvent::ongoingWaitTime' has a wrong offset!");

// Function DeadByDaylight.GameEventDispatcher.Authority_RemotelyDispatch
// 0x0038 (0x0038 - 0x0000)
struct GameEventDispatcher_Authority_RemotelyDispatch final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventDispatcher_Authority_RemotelyDispatch) == 0x000008, "Wrong alignment on GameEventDispatcher_Authority_RemotelyDispatch");
static_assert(sizeof(GameEventDispatcher_Authority_RemotelyDispatch) == 0x000038, "Wrong size on GameEventDispatcher_Authority_RemotelyDispatch");
static_assert(offsetof(GameEventDispatcher_Authority_RemotelyDispatch, gameEventType) == 0x000000, "Member 'GameEventDispatcher_Authority_RemotelyDispatch::gameEventType' has a wrong offset!");
static_assert(offsetof(GameEventDispatcher_Authority_RemotelyDispatch, gameEventData) == 0x000010, "Member 'GameEventDispatcher_Authority_RemotelyDispatch::gameEventData' has a wrong offset!");

// Function DeadByDaylight.GameEventDispatcher.LocallyDispatch
// 0x0038 (0x0038 - 0x0000)
struct GameEventDispatcher_LocallyDispatch final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventDispatcher_LocallyDispatch) == 0x000008, "Wrong alignment on GameEventDispatcher_LocallyDispatch");
static_assert(sizeof(GameEventDispatcher_LocallyDispatch) == 0x000038, "Wrong size on GameEventDispatcher_LocallyDispatch");
static_assert(offsetof(GameEventDispatcher_LocallyDispatch, gameEventType) == 0x000000, "Member 'GameEventDispatcher_LocallyDispatch::gameEventType' has a wrong offset!");
static_assert(offsetof(GameEventDispatcher_LocallyDispatch, gameEventData) == 0x000010, "Member 'GameEventDispatcher_LocallyDispatch::gameEventData' has a wrong offset!");

// Function DeadByDaylight.GameEventDispatcher.RegisterListener
// 0x0020 (0x0020 - 0x0000)
struct GameEventDispatcher_RegisterListener final
{
public:
	struct FGameEventDispatcherHandleBP           gameEventDispatcherHandle;                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventDispatcher_RegisterListener) == 0x000004, "Wrong alignment on GameEventDispatcher_RegisterListener");
static_assert(sizeof(GameEventDispatcher_RegisterListener) == 0x000020, "Wrong size on GameEventDispatcher_RegisterListener");
static_assert(offsetof(GameEventDispatcher_RegisterListener, gameEventDispatcherHandle) == 0x000000, "Member 'GameEventDispatcher_RegisterListener::gameEventDispatcherHandle' has a wrong offset!");

// Function DeadByDaylight.GameEventDispatcher.RemotelyDispatch
// 0x0038 (0x0038 - 0x0000)
struct GameEventDispatcher_RemotelyDispatch final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventDispatcher_RemotelyDispatch) == 0x000008, "Wrong alignment on GameEventDispatcher_RemotelyDispatch");
static_assert(sizeof(GameEventDispatcher_RemotelyDispatch) == 0x000038, "Wrong size on GameEventDispatcher_RemotelyDispatch");
static_assert(offsetof(GameEventDispatcher_RemotelyDispatch, gameEventType) == 0x000000, "Member 'GameEventDispatcher_RemotelyDispatch::gameEventType' has a wrong offset!");
static_assert(offsetof(GameEventDispatcher_RemotelyDispatch, gameEventData) == 0x000010, "Member 'GameEventDispatcher_RemotelyDispatch::gameEventData' has a wrong offset!");

// Function DeadByDaylight.GameEventDispatcher.UnregisterListener
// 0x0020 (0x0020 - 0x0000)
struct GameEventDispatcher_UnregisterListener final
{
public:
	struct FGameEventDispatcherHandleBP           gameEventDispatcherHandle;                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventDispatcher_UnregisterListener) == 0x000004, "Wrong alignment on GameEventDispatcher_UnregisterListener");
static_assert(sizeof(GameEventDispatcher_UnregisterListener) == 0x000020, "Wrong size on GameEventDispatcher_UnregisterListener");
static_assert(offsetof(GameEventDispatcher_UnregisterListener, gameEventDispatcherHandle) == 0x000000, "Member 'GameEventDispatcher_UnregisterListener::gameEventDispatcherHandle' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierFunctionLibrary.Authority_ClearAllPlayerGameplayFlags
// 0x0008 (0x0008 - 0x0000)
struct GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayFlags final
{
public:
	class ADBDPlayer*                             targetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayFlags) == 0x000008, "Wrong alignment on GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayFlags");
static_assert(sizeof(GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayFlags) == 0x000008, "Wrong size on GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayFlags");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayFlags, targetPlayer) == 0x000000, "Member 'GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayFlags::targetPlayer' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierFunctionLibrary.Authority_ClearAllPlayerGameplayModifiers
// 0x0008 (0x0008 - 0x0000)
struct GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayModifiers final
{
public:
	class ADBDPlayer*                             targetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayModifiers) == 0x000008, "Wrong alignment on GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayModifiers");
static_assert(sizeof(GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayModifiers) == 0x000008, "Wrong size on GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayModifiers");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayModifiers, targetPlayer) == 0x000000, "Member 'GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayModifiers::targetPlayer' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierFunctionLibrary.Authority_ClearPlayerGameplayFlag
// 0x0018 (0x0018 - 0x0000)
struct GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag final
{
public:
	class ADBDPlayer*                             targetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           flagType;                                          // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag) == 0x000008, "Wrong alignment on GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag");
static_assert(sizeof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag) == 0x000018, "Wrong size on GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag, targetPlayer) == 0x000000, "Member 'GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag::targetPlayer' has a wrong offset!");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag, flagType) == 0x000008, "Member 'GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag::flagType' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierFunctionLibrary.Authority_ClearPlayerGameplayModifier
// 0x0018 (0x0018 - 0x0000)
struct GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier final
{
public:
	class ADBDPlayer*                             targetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           modifierType;                                      // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier) == 0x000008, "Wrong alignment on GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier");
static_assert(sizeof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier) == 0x000018, "Wrong size on GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier, targetPlayer) == 0x000000, "Member 'GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier::targetPlayer' has a wrong offset!");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier, modifierType) == 0x000008, "Member 'GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier::modifierType' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierFunctionLibrary.Authority_SetPlayerGameplayFlag
// 0x0018 (0x0018 - 0x0000)
struct GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag final
{
public:
	class ADBDPlayer*                             targetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           flagType;                                          // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag) == 0x000008, "Wrong alignment on GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag");
static_assert(sizeof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag) == 0x000018, "Wrong size on GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag, targetPlayer) == 0x000000, "Member 'GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag::targetPlayer' has a wrong offset!");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag, flagType) == 0x000008, "Member 'GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag::flagType' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierFunctionLibrary.Authority_SetPlayerGameplayModifier
// 0x0018 (0x0018 - 0x0000)
struct GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier final
{
public:
	class ADBDPlayer*                             targetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           modifierType;                                      // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         modifierValue;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier) == 0x000008, "Wrong alignment on GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier");
static_assert(sizeof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier) == 0x000018, "Wrong size on GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier, targetPlayer) == 0x000000, "Member 'GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier::targetPlayer' has a wrong offset!");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier, modifierType) == 0x000008, "Member 'GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier::modifierType' has a wrong offset!");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier, modifierValue) == 0x000014, "Member 'GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier::modifierValue' has a wrong offset!");

// Function DeadByDaylight.Generator.AddDamagingInteraction
// 0x0008 (0x0008 - 0x0000)
struct Generator_AddDamagingInteraction final
{
public:
	class UInteractionDefinition*                 interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_AddDamagingInteraction) == 0x000008, "Wrong alignment on Generator_AddDamagingInteraction");
static_assert(sizeof(Generator_AddDamagingInteraction) == 0x000008, "Wrong size on Generator_AddDamagingInteraction");
static_assert(offsetof(Generator_AddDamagingInteraction, interaction) == 0x000000, "Member 'Generator_AddDamagingInteraction::interaction' has a wrong offset!");

// Function DeadByDaylight.Generator.AddPlayerStartTime
// 0x0010 (0x0010 - 0x0000)
struct Generator_AddPlayerStartTime final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         startTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_AddPlayerStartTime) == 0x000008, "Wrong alignment on Generator_AddPlayerStartTime");
static_assert(sizeof(Generator_AddPlayerStartTime) == 0x000010, "Wrong size on Generator_AddPlayerStartTime");
static_assert(offsetof(Generator_AddPlayerStartTime, player) == 0x000000, "Member 'Generator_AddPlayerStartTime::player' has a wrong offset!");
static_assert(offsetof(Generator_AddPlayerStartTime, startTime) == 0x000008, "Member 'Generator_AddPlayerStartTime::startTime' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_AddBlockingSource
// 0x0008 (0x0008 - 0x0000)
struct Generator_Authority_AddBlockingSource final
{
public:
	const class UObject*                          source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Authority_AddBlockingSource) == 0x000008, "Wrong alignment on Generator_Authority_AddBlockingSource");
static_assert(sizeof(Generator_Authority_AddBlockingSource) == 0x000008, "Wrong size on Generator_Authority_AddBlockingSource");
static_assert(offsetof(Generator_Authority_AddBlockingSource, source) == 0x000000, "Member 'Generator_Authority_AddBlockingSource::source' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_AddTimedBlockingSource
// 0x0010 (0x0010 - 0x0000)
struct Generator_Authority_AddTimedBlockingSource final
{
public:
	const class UObject*                          source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         blockingTime;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_Authority_AddTimedBlockingSource) == 0x000008, "Wrong alignment on Generator_Authority_AddTimedBlockingSource");
static_assert(sizeof(Generator_Authority_AddTimedBlockingSource) == 0x000010, "Wrong size on Generator_Authority_AddTimedBlockingSource");
static_assert(offsetof(Generator_Authority_AddTimedBlockingSource, source) == 0x000000, "Member 'Generator_Authority_AddTimedBlockingSource::source' has a wrong offset!");
static_assert(offsetof(Generator_Authority_AddTimedBlockingSource, blockingTime) == 0x000008, "Member 'Generator_Authority_AddTimedBlockingSource::blockingTime' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_Damage
// 0x0010 (0x0010 - 0x0000)
struct Generator_Authority_Damage final
{
public:
	class ADBDPlayer*                             damagedBy;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         immediateRegressionPercent;                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ignoreBlocked;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_Authority_Damage) == 0x000008, "Wrong alignment on Generator_Authority_Damage");
static_assert(sizeof(Generator_Authority_Damage) == 0x000010, "Wrong size on Generator_Authority_Damage");
static_assert(offsetof(Generator_Authority_Damage, damagedBy) == 0x000000, "Member 'Generator_Authority_Damage::damagedBy' has a wrong offset!");
static_assert(offsetof(Generator_Authority_Damage, immediateRegressionPercent) == 0x000008, "Member 'Generator_Authority_Damage::immediateRegressionPercent' has a wrong offset!");
static_assert(offsetof(Generator_Authority_Damage, ignoreBlocked) == 0x00000C, "Member 'Generator_Authority_Damage::ignoreBlocked' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_OnChargeApplied
// 0x0018 (0x0018 - 0x0000)
struct Generator_Authority_OnChargeApplied final
{
public:
	float                                         individualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         totalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 chargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          wasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         deltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Authority_OnChargeApplied) == 0x000008, "Wrong alignment on Generator_Authority_OnChargeApplied");
static_assert(sizeof(Generator_Authority_OnChargeApplied) == 0x000018, "Wrong size on Generator_Authority_OnChargeApplied");
static_assert(offsetof(Generator_Authority_OnChargeApplied, individualChargeAmount) == 0x000000, "Member 'Generator_Authority_OnChargeApplied::individualChargeAmount' has a wrong offset!");
static_assert(offsetof(Generator_Authority_OnChargeApplied, totalChargeAmount) == 0x000004, "Member 'Generator_Authority_OnChargeApplied::totalChargeAmount' has a wrong offset!");
static_assert(offsetof(Generator_Authority_OnChargeApplied, chargeInstigator) == 0x000008, "Member 'Generator_Authority_OnChargeApplied::chargeInstigator' has a wrong offset!");
static_assert(offsetof(Generator_Authority_OnChargeApplied, wasCoop) == 0x000010, "Member 'Generator_Authority_OnChargeApplied::wasCoop' has a wrong offset!");
static_assert(offsetof(Generator_Authority_OnChargeApplied, deltaTime) == 0x000014, "Member 'Generator_Authority_OnChargeApplied::deltaTime' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_OnChargeChanged
// 0x0010 (0x0010 - 0x0000)
struct Generator_Authority_OnChargeChanged final
{
public:
	class UChargeableComponent*                   chargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         percentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         totalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Authority_OnChargeChanged) == 0x000008, "Wrong alignment on Generator_Authority_OnChargeChanged");
static_assert(sizeof(Generator_Authority_OnChargeChanged) == 0x000010, "Wrong size on Generator_Authority_OnChargeChanged");
static_assert(offsetof(Generator_Authority_OnChargeChanged, chargeableComponent) == 0x000000, "Member 'Generator_Authority_OnChargeChanged::chargeableComponent' has a wrong offset!");
static_assert(offsetof(Generator_Authority_OnChargeChanged, percentCompletionChange) == 0x000008, "Member 'Generator_Authority_OnChargeChanged::percentCompletionChange' has a wrong offset!");
static_assert(offsetof(Generator_Authority_OnChargeChanged, totalPercentComplete) == 0x00000C, "Member 'Generator_Authority_OnChargeChanged::totalPercentComplete' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_RemoveBlockingSource
// 0x0008 (0x0008 - 0x0000)
struct Generator_Authority_RemoveBlockingSource final
{
public:
	const class UObject*                          source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Authority_RemoveBlockingSource) == 0x000008, "Wrong alignment on Generator_Authority_RemoveBlockingSource");
static_assert(sizeof(Generator_Authority_RemoveBlockingSource) == 0x000008, "Wrong size on Generator_Authority_RemoveBlockingSource");
static_assert(offsetof(Generator_Authority_RemoveBlockingSource, source) == 0x000000, "Member 'Generator_Authority_RemoveBlockingSource::source' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_RepairDamage
// 0x0008 (0x0008 - 0x0000)
struct Generator_Authority_RepairDamage final
{
public:
	class ADBDPlayer*                             repairedBy;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Authority_RepairDamage) == 0x000008, "Wrong alignment on Generator_Authority_RepairDamage");
static_assert(sizeof(Generator_Authority_RepairDamage) == 0x000008, "Wrong size on Generator_Authority_RepairDamage");
static_assert(offsetof(Generator_Authority_RepairDamage, repairedBy) == 0x000000, "Member 'Generator_Authority_RepairDamage::repairedBy' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_SetRepaired
// 0x0002 (0x0002 - 0x0000)
struct Generator_Authority_SetRepaired final
{
public:
	bool                                          showGeneratorCloneLoudNoise;                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAutoCompleted;                                   // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Authority_SetRepaired) == 0x000001, "Wrong alignment on Generator_Authority_SetRepaired");
static_assert(sizeof(Generator_Authority_SetRepaired) == 0x000002, "Wrong size on Generator_Authority_SetRepaired");
static_assert(offsetof(Generator_Authority_SetRepaired, showGeneratorCloneLoudNoise) == 0x000000, "Member 'Generator_Authority_SetRepaired::showGeneratorCloneLoudNoise' has a wrong offset!");
static_assert(offsetof(Generator_Authority_SetRepaired, isAutoCompleted) == 0x000001, "Member 'Generator_Authority_SetRepaired::isAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.Generator.BroadcastIsDamagedChangedEvent
// 0x0008 (0x0008 - 0x0000)
struct Generator_BroadcastIsDamagedChangedEvent final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_BroadcastIsDamagedChangedEvent) == 0x000008, "Wrong alignment on Generator_BroadcastIsDamagedChangedEvent");
static_assert(sizeof(Generator_BroadcastIsDamagedChangedEvent) == 0x000008, "Wrong size on Generator_BroadcastIsDamagedChangedEvent");
static_assert(offsetof(Generator_BroadcastIsDamagedChangedEvent, player) == 0x000000, "Member 'Generator_BroadcastIsDamagedChangedEvent::player' has a wrong offset!");

// Function DeadByDaylight.Generator.GetIsBlockedFromCharging
// 0x0001 (0x0001 - 0x0000)
struct Generator_GetIsBlockedFromCharging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetIsBlockedFromCharging) == 0x000001, "Wrong alignment on Generator_GetIsBlockedFromCharging");
static_assert(sizeof(Generator_GetIsBlockedFromCharging) == 0x000001, "Wrong size on Generator_GetIsBlockedFromCharging");
static_assert(offsetof(Generator_GetIsBlockedFromCharging, ReturnValue) == 0x000000, "Member 'Generator_GetIsBlockedFromCharging::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.Multicast_DamageCosmetic
// 0x0001 (0x0001 - 0x0000)
struct Generator_Multicast_DamageCosmetic final
{
public:
	bool                                          intense;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Multicast_DamageCosmetic) == 0x000001, "Wrong alignment on Generator_Multicast_DamageCosmetic");
static_assert(sizeof(Generator_Multicast_DamageCosmetic) == 0x000001, "Wrong size on Generator_Multicast_DamageCosmetic");
static_assert(offsetof(Generator_Multicast_DamageCosmetic, intense) == 0x000000, "Member 'Generator_Multicast_DamageCosmetic::intense' has a wrong offset!");

// Function DeadByDaylight.Generator.Multicast_OnRepaired
// 0x0008 (0x0008 - 0x0000)
struct Generator_Multicast_OnRepaired final
{
public:
	bool                                          showGeneratorCloneLoudNoise;                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAutoCompleted;                                   // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         updatedRemainingGeneratorCount;                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Multicast_OnRepaired) == 0x000004, "Wrong alignment on Generator_Multicast_OnRepaired");
static_assert(sizeof(Generator_Multicast_OnRepaired) == 0x000008, "Wrong size on Generator_Multicast_OnRepaired");
static_assert(offsetof(Generator_Multicast_OnRepaired, showGeneratorCloneLoudNoise) == 0x000000, "Member 'Generator_Multicast_OnRepaired::showGeneratorCloneLoudNoise' has a wrong offset!");
static_assert(offsetof(Generator_Multicast_OnRepaired, isAutoCompleted) == 0x000001, "Member 'Generator_Multicast_OnRepaired::isAutoCompleted' has a wrong offset!");
static_assert(offsetof(Generator_Multicast_OnRepaired, updatedRemainingGeneratorCount) == 0x000004, "Member 'Generator_Multicast_OnRepaired::updatedRemainingGeneratorCount' has a wrong offset!");

// Function DeadByDaylight.Generator.Multicast_PlayFailSparksFX
// 0x0010 (0x0010 - 0x0000)
struct Generator_Multicast_PlayFailSparksFX final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          explode;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_Multicast_PlayFailSparksFX) == 0x000008, "Wrong alignment on Generator_Multicast_PlayFailSparksFX");
static_assert(sizeof(Generator_Multicast_PlayFailSparksFX) == 0x000010, "Wrong size on Generator_Multicast_PlayFailSparksFX");
static_assert(offsetof(Generator_Multicast_PlayFailSparksFX, player) == 0x000000, "Member 'Generator_Multicast_PlayFailSparksFX::player' has a wrong offset!");
static_assert(offsetof(Generator_Multicast_PlayFailSparksFX, explode) == 0x000008, "Member 'Generator_Multicast_PlayFailSparksFX::explode' has a wrong offset!");

// Function DeadByDaylight.Generator.NotifyRepairFinish
// 0x0010 (0x0010 - 0x0000)
struct Generator_NotifyRepairFinish final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractor*                            interactor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_NotifyRepairFinish) == 0x000008, "Wrong alignment on Generator_NotifyRepairFinish");
static_assert(sizeof(Generator_NotifyRepairFinish) == 0x000010, "Wrong size on Generator_NotifyRepairFinish");
static_assert(offsetof(Generator_NotifyRepairFinish, player) == 0x000000, "Member 'Generator_NotifyRepairFinish::player' has a wrong offset!");
static_assert(offsetof(Generator_NotifyRepairFinish, interactor) == 0x000008, "Member 'Generator_NotifyRepairFinish::interactor' has a wrong offset!");

// Function DeadByDaylight.Generator.NotifyRepairStart
// 0x0008 (0x0008 - 0x0000)
struct Generator_NotifyRepairStart final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_NotifyRepairStart) == 0x000008, "Wrong alignment on Generator_NotifyRepairStart");
static_assert(sizeof(Generator_NotifyRepairStart) == 0x000008, "Wrong size on Generator_NotifyRepairStart");
static_assert(offsetof(Generator_NotifyRepairStart, player) == 0x000000, "Member 'Generator_NotifyRepairStart::player' has a wrong offset!");

// Function DeadByDaylight.Generator.OnBlockingStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct Generator_OnBlockingStatusChanged final
{
public:
	bool                                          isBlocked;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_OnBlockingStatusChanged) == 0x000001, "Wrong alignment on Generator_OnBlockingStatusChanged");
static_assert(sizeof(Generator_OnBlockingStatusChanged) == 0x000001, "Wrong size on Generator_OnBlockingStatusChanged");
static_assert(offsetof(Generator_OnBlockingStatusChanged, isBlocked) == 0x000000, "Member 'Generator_OnBlockingStatusChanged::isBlocked' has a wrong offset!");

// Function DeadByDaylight.Generator.OnChargeApplied
// 0x0018 (0x0018 - 0x0000)
struct Generator_OnChargeApplied final
{
public:
	float                                         individualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         totalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 chargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          wasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         deltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_OnChargeApplied) == 0x000008, "Wrong alignment on Generator_OnChargeApplied");
static_assert(sizeof(Generator_OnChargeApplied) == 0x000018, "Wrong size on Generator_OnChargeApplied");
static_assert(offsetof(Generator_OnChargeApplied, individualChargeAmount) == 0x000000, "Member 'Generator_OnChargeApplied::individualChargeAmount' has a wrong offset!");
static_assert(offsetof(Generator_OnChargeApplied, totalChargeAmount) == 0x000004, "Member 'Generator_OnChargeApplied::totalChargeAmount' has a wrong offset!");
static_assert(offsetof(Generator_OnChargeApplied, chargeInstigator) == 0x000008, "Member 'Generator_OnChargeApplied::chargeInstigator' has a wrong offset!");
static_assert(offsetof(Generator_OnChargeApplied, wasCoop) == 0x000010, "Member 'Generator_OnChargeApplied::wasCoop' has a wrong offset!");
static_assert(offsetof(Generator_OnChargeApplied, deltaTime) == 0x000014, "Member 'Generator_OnChargeApplied::deltaTime' has a wrong offset!");

// Function DeadByDaylight.Generator.OnChargeChanged
// 0x0010 (0x0010 - 0x0000)
struct Generator_OnChargeChanged final
{
public:
	class UChargeableComponent*                   chargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         percent;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_OnChargeChanged) == 0x000008, "Wrong alignment on Generator_OnChargeChanged");
static_assert(sizeof(Generator_OnChargeChanged) == 0x000010, "Wrong size on Generator_OnChargeChanged");
static_assert(offsetof(Generator_OnChargeChanged, chargeableComponent) == 0x000000, "Member 'Generator_OnChargeChanged::chargeableComponent' has a wrong offset!");
static_assert(offsetof(Generator_OnChargeChanged, percent) == 0x000008, "Member 'Generator_OnChargeChanged::percent' has a wrong offset!");

// Function DeadByDaylight.Generator.OnDamageCosmetic
// 0x0001 (0x0001 - 0x0000)
struct Generator_OnDamageCosmetic final
{
public:
	bool                                          intense;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_OnDamageCosmetic) == 0x000001, "Wrong alignment on Generator_OnDamageCosmetic");
static_assert(sizeof(Generator_OnDamageCosmetic) == 0x000001, "Wrong size on Generator_OnDamageCosmetic");
static_assert(offsetof(Generator_OnDamageCosmetic, intense) == 0x000000, "Member 'Generator_OnDamageCosmetic::intense' has a wrong offset!");

// Function DeadByDaylight.Generator.OnRepairedBP
// 0x0002 (0x0002 - 0x0000)
struct Generator_OnRepairedBP final
{
public:
	bool                                          showGeneratorCloneLoudNoise;                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAutoCompleted;                                   // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_OnRepairedBP) == 0x000001, "Wrong alignment on Generator_OnRepairedBP");
static_assert(sizeof(Generator_OnRepairedBP) == 0x000002, "Wrong size on Generator_OnRepairedBP");
static_assert(offsetof(Generator_OnRepairedBP, showGeneratorCloneLoudNoise) == 0x000000, "Member 'Generator_OnRepairedBP::showGeneratorCloneLoudNoise' has a wrong offset!");
static_assert(offsetof(Generator_OnRepairedBP, isAutoCompleted) == 0x000001, "Member 'Generator_OnRepairedBP::isAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.Generator.OnUpdateChargeProgress
// 0x0004 (0x0004 - 0x0000)
struct Generator_OnUpdateChargeProgress final
{
public:
	float                                         newPercentComplete;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_OnUpdateChargeProgress) == 0x000004, "Wrong alignment on Generator_OnUpdateChargeProgress");
static_assert(sizeof(Generator_OnUpdateChargeProgress) == 0x000004, "Wrong size on Generator_OnUpdateChargeProgress");
static_assert(offsetof(Generator_OnUpdateChargeProgress, newPercentComplete) == 0x000000, "Member 'Generator_OnUpdateChargeProgress::newPercentComplete' has a wrong offset!");

// Function DeadByDaylight.Generator.PlayFailSparksFX
// 0x0010 (0x0010 - 0x0000)
struct Generator_PlayFailSparksFX final
{
public:
	class ADBDPlayer*                             interactingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          explode;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_PlayFailSparksFX) == 0x000008, "Wrong alignment on Generator_PlayFailSparksFX");
static_assert(sizeof(Generator_PlayFailSparksFX) == 0x000010, "Wrong size on Generator_PlayFailSparksFX");
static_assert(offsetof(Generator_PlayFailSparksFX, interactingPlayer) == 0x000000, "Member 'Generator_PlayFailSparksFX::interactingPlayer' has a wrong offset!");
static_assert(offsetof(Generator_PlayFailSparksFX, explode) == 0x000008, "Member 'Generator_PlayFailSparksFX::explode' has a wrong offset!");

// Function DeadByDaylight.Generator.PostAkEvent
// 0x0048 (0x0048 - 0x0000)
struct Generator_PostAkEvent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback; // 0x000C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FAkExternalSourceInfo>          ExternalSources;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FString                                 in_EventName;                                      // 0x0030(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_PostAkEvent) == 0x000008, "Wrong alignment on Generator_PostAkEvent");
static_assert(sizeof(Generator_PostAkEvent) == 0x000048, "Wrong size on Generator_PostAkEvent");
static_assert(offsetof(Generator_PostAkEvent, AkEvent) == 0x000000, "Member 'Generator_PostAkEvent::AkEvent' has a wrong offset!");
static_assert(offsetof(Generator_PostAkEvent, CallbackMask) == 0x000008, "Member 'Generator_PostAkEvent::CallbackMask' has a wrong offset!");
static_assert(offsetof(Generator_PostAkEvent, PostEventCallback) == 0x00000C, "Member 'Generator_PostAkEvent::PostEventCallback' has a wrong offset!");
static_assert(offsetof(Generator_PostAkEvent, ExternalSources) == 0x000020, "Member 'Generator_PostAkEvent::ExternalSources' has a wrong offset!");
static_assert(offsetof(Generator_PostAkEvent, in_EventName) == 0x000030, "Member 'Generator_PostAkEvent::in_EventName' has a wrong offset!");
static_assert(offsetof(Generator_PostAkEvent, ReturnValue) == 0x000040, "Member 'Generator_PostAkEvent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.RemovePlayerStartTime
// 0x0008 (0x0008 - 0x0000)
struct Generator_RemovePlayerStartTime final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_RemovePlayerStartTime) == 0x000008, "Wrong alignment on Generator_RemovePlayerStartTime");
static_assert(sizeof(Generator_RemovePlayerStartTime) == 0x000008, "Wrong size on Generator_RemovePlayerStartTime");
static_assert(offsetof(Generator_RemovePlayerStartTime, player) == 0x000000, "Member 'Generator_RemovePlayerStartTime::player' has a wrong offset!");

// Function DeadByDaylight.Generator.SetComplete
// 0x0001 (0x0001 - 0x0000)
struct Generator_SetComplete final
{
public:
	bool                                          complete;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_SetComplete) == 0x000001, "Wrong alignment on Generator_SetComplete");
static_assert(sizeof(Generator_SetComplete) == 0x000001, "Wrong size on Generator_SetComplete");
static_assert(offsetof(Generator_SetComplete, complete) == 0x000000, "Member 'Generator_SetComplete::complete' has a wrong offset!");

// Function DeadByDaylight.Generator.SetIsAutoCompleted
// 0x0001 (0x0001 - 0x0000)
struct Generator_SetIsAutoCompleted final
{
public:
	bool                                          isAutoCompleted;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_SetIsAutoCompleted) == 0x000001, "Wrong alignment on Generator_SetIsAutoCompleted");
static_assert(sizeof(Generator_SetIsAutoCompleted) == 0x000001, "Wrong size on Generator_SetIsAutoCompleted");
static_assert(offsetof(Generator_SetIsAutoCompleted, isAutoCompleted) == 0x000000, "Member 'Generator_SetIsAutoCompleted::isAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.Generator.SetIsBlockedFromCharging
// 0x0001 (0x0001 - 0x0000)
struct Generator_SetIsBlockedFromCharging final
{
public:
	bool                                          isBlockedFromCharging;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_SetIsBlockedFromCharging) == 0x000001, "Wrong alignment on Generator_SetIsBlockedFromCharging");
static_assert(sizeof(Generator_SetIsBlockedFromCharging) == 0x000001, "Wrong size on Generator_SetIsBlockedFromCharging");
static_assert(offsetof(Generator_SetIsBlockedFromCharging, isBlockedFromCharging) == 0x000000, "Member 'Generator_SetIsBlockedFromCharging::isBlockedFromCharging' has a wrong offset!");

// Function DeadByDaylight.Generator.SetIsOvercharged
// 0x0001 (0x0001 - 0x0000)
struct Generator_SetIsOvercharged final
{
public:
	bool                                          overcharged;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_SetIsOvercharged) == 0x000001, "Wrong alignment on Generator_SetIsOvercharged");
static_assert(sizeof(Generator_SetIsOvercharged) == 0x000001, "Wrong size on Generator_SetIsOvercharged");
static_assert(offsetof(Generator_SetIsOvercharged, overcharged) == 0x000000, "Member 'Generator_SetIsOvercharged::overcharged' has a wrong offset!");

// Function DeadByDaylight.Generator.SpawnBloodEffectToSocket
// 0x000C (0x000C - 0x0000)
struct Generator_SpawnBloodEffectToSocket final
{
public:
	class FName                                   name;                                              // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_SpawnBloodEffectToSocket) == 0x000004, "Wrong alignment on Generator_SpawnBloodEffectToSocket");
static_assert(sizeof(Generator_SpawnBloodEffectToSocket) == 0x00000C, "Wrong size on Generator_SpawnBloodEffectToSocket");
static_assert(offsetof(Generator_SpawnBloodEffectToSocket, name) == 0x000000, "Member 'Generator_SpawnBloodEffectToSocket::name' has a wrong offset!");

// Function DeadByDaylight.Generator.TriggerSkillCheck
// 0x0008 (0x0008 - 0x0000)
struct Generator_TriggerSkillCheck final
{
public:
	class ADBDPlayer*                             instigatingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_TriggerSkillCheck) == 0x000008, "Wrong alignment on Generator_TriggerSkillCheck");
static_assert(sizeof(Generator_TriggerSkillCheck) == 0x000008, "Wrong size on Generator_TriggerSkillCheck");
static_assert(offsetof(Generator_TriggerSkillCheck, instigatingPlayer) == 0x000000, "Member 'Generator_TriggerSkillCheck::instigatingPlayer' has a wrong offset!");

// Function DeadByDaylight.Generator.TriggerSkillCheckFailureLoudNoise
// 0x0008 (0x0008 - 0x0000)
struct Generator_TriggerSkillCheckFailureLoudNoise final
{
public:
	class ADBDPlayer*                             instigatingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_TriggerSkillCheckFailureLoudNoise) == 0x000008, "Wrong alignment on Generator_TriggerSkillCheckFailureLoudNoise");
static_assert(sizeof(Generator_TriggerSkillCheckFailureLoudNoise) == 0x000008, "Wrong size on Generator_TriggerSkillCheckFailureLoudNoise");
static_assert(offsetof(Generator_TriggerSkillCheckFailureLoudNoise, instigatingPlayer) == 0x000000, "Member 'Generator_TriggerSkillCheckFailureLoudNoise::instigatingPlayer' has a wrong offset!");

// Function DeadByDaylight.Generator.VFXClampTopActivationSingleLight
// 0x0010 (0x0010 - 0x0000)
struct Generator_VFXClampTopActivationSingleLight final
{
public:
	float                                         distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   parameterName;                                     // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_VFXClampTopActivationSingleLight) == 0x000004, "Wrong alignment on Generator_VFXClampTopActivationSingleLight");
static_assert(sizeof(Generator_VFXClampTopActivationSingleLight) == 0x000010, "Wrong size on Generator_VFXClampTopActivationSingleLight");
static_assert(offsetof(Generator_VFXClampTopActivationSingleLight, distance) == 0x000000, "Member 'Generator_VFXClampTopActivationSingleLight::distance' has a wrong offset!");
static_assert(offsetof(Generator_VFXClampTopActivationSingleLight, parameterName) == 0x000004, "Member 'Generator_VFXClampTopActivationSingleLight::parameterName' has a wrong offset!");

// Function DeadByDaylight.Generator.ActivateTeleportGeneratorIndicator
// 0x0001 (0x0001 - 0x0000)
struct Generator_ActivateTeleportGeneratorIndicator final
{
public:
	bool                                          activate;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_ActivateTeleportGeneratorIndicator) == 0x000001, "Wrong alignment on Generator_ActivateTeleportGeneratorIndicator");
static_assert(sizeof(Generator_ActivateTeleportGeneratorIndicator) == 0x000001, "Wrong size on Generator_ActivateTeleportGeneratorIndicator");
static_assert(offsetof(Generator_ActivateTeleportGeneratorIndicator, activate) == 0x000000, "Member 'Generator_ActivateTeleportGeneratorIndicator::activate' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_GetRepairingCampers
// 0x0010 (0x0010 - 0x0000)
struct Generator_Authority_GetRepairingCampers final
{
public:
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Authority_GetRepairingCampers) == 0x000008, "Wrong alignment on Generator_Authority_GetRepairingCampers");
static_assert(sizeof(Generator_Authority_GetRepairingCampers) == 0x000010, "Wrong size on Generator_Authority_GetRepairingCampers");
static_assert(offsetof(Generator_Authority_GetRepairingCampers, ReturnValue) == 0x000000, "Member 'Generator_Authority_GetRepairingCampers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_HasRepairedDamage
// 0x0010 (0x0010 - 0x0000)
struct Generator_Authority_HasRepairedDamage final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_Authority_HasRepairedDamage) == 0x000008, "Wrong alignment on Generator_Authority_HasRepairedDamage");
static_assert(sizeof(Generator_Authority_HasRepairedDamage) == 0x000010, "Wrong size on Generator_Authority_HasRepairedDamage");
static_assert(offsetof(Generator_Authority_HasRepairedDamage, player) == 0x000000, "Member 'Generator_Authority_HasRepairedDamage::player' has a wrong offset!");
static_assert(offsetof(Generator_Authority_HasRepairedDamage, ReturnValue) == 0x000008, "Member 'Generator_Authority_HasRepairedDamage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.BroadcastGeneratorRepairedBySurvivor
// 0x0008 (0x0008 - 0x0000)
struct Generator_BroadcastGeneratorRepairedBySurvivor final
{
public:
	class ADBDPlayer*                             repairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_BroadcastGeneratorRepairedBySurvivor) == 0x000008, "Wrong alignment on Generator_BroadcastGeneratorRepairedBySurvivor");
static_assert(sizeof(Generator_BroadcastGeneratorRepairedBySurvivor) == 0x000008, "Wrong size on Generator_BroadcastGeneratorRepairedBySurvivor");
static_assert(offsetof(Generator_BroadcastGeneratorRepairedBySurvivor, repairingSurvivor) == 0x000000, "Member 'Generator_BroadcastGeneratorRepairedBySurvivor::repairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.Generator.CanSurvivorReactToBlockingEntity
// 0x0010 (0x0010 - 0x0000)
struct Generator_CanSurvivorReactToBlockingEntity final
{
public:
	const class ACamperPlayer*                    survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_CanSurvivorReactToBlockingEntity) == 0x000008, "Wrong alignment on Generator_CanSurvivorReactToBlockingEntity");
static_assert(sizeof(Generator_CanSurvivorReactToBlockingEntity) == 0x000010, "Wrong size on Generator_CanSurvivorReactToBlockingEntity");
static_assert(offsetof(Generator_CanSurvivorReactToBlockingEntity, survivor) == 0x000000, "Member 'Generator_CanSurvivorReactToBlockingEntity::survivor' has a wrong offset!");
static_assert(offsetof(Generator_CanSurvivorReactToBlockingEntity, ReturnValue) == 0x000008, "Member 'Generator_CanSurvivorReactToBlockingEntity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetChargePercentComplete
// 0x0004 (0x0004 - 0x0000)
struct Generator_GetChargePercentComplete final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetChargePercentComplete) == 0x000004, "Wrong alignment on Generator_GetChargePercentComplete");
static_assert(sizeof(Generator_GetChargePercentComplete) == 0x000004, "Wrong size on Generator_GetChargePercentComplete");
static_assert(offsetof(Generator_GetChargePercentComplete, ReturnValue) == 0x000000, "Member 'Generator_GetChargePercentComplete::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetGeneratorChargeComponent
// 0x0008 (0x0008 - 0x0000)
struct Generator_GetGeneratorChargeComponent final
{
public:
	class UChargeableComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetGeneratorChargeComponent) == 0x000008, "Wrong alignment on Generator_GetGeneratorChargeComponent");
static_assert(sizeof(Generator_GetGeneratorChargeComponent) == 0x000008, "Wrong size on Generator_GetGeneratorChargeComponent");
static_assert(offsetof(Generator_GetGeneratorChargeComponent, ReturnValue) == 0x000000, "Member 'Generator_GetGeneratorChargeComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetIsAutoCompleted
// 0x0001 (0x0001 - 0x0000)
struct Generator_GetIsAutoCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetIsAutoCompleted) == 0x000001, "Wrong alignment on Generator_GetIsAutoCompleted");
static_assert(sizeof(Generator_GetIsAutoCompleted) == 0x000001, "Wrong size on Generator_GetIsAutoCompleted");
static_assert(offsetof(Generator_GetIsAutoCompleted, ReturnValue) == 0x000000, "Member 'Generator_GetIsAutoCompleted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetPlayerStartTime
// 0x0010 (0x0010 - 0x0000)
struct Generator_GetPlayerStartTime final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_GetPlayerStartTime) == 0x000008, "Wrong alignment on Generator_GetPlayerStartTime");
static_assert(sizeof(Generator_GetPlayerStartTime) == 0x000010, "Wrong size on Generator_GetPlayerStartTime");
static_assert(offsetof(Generator_GetPlayerStartTime, player) == 0x000000, "Member 'Generator_GetPlayerStartTime::player' has a wrong offset!");
static_assert(offsetof(Generator_GetPlayerStartTime, ReturnValue) == 0x000008, "Member 'Generator_GetPlayerStartTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetPlayerStartTimes
// 0x0010 (0x0010 - 0x0000)
struct Generator_GetPlayerStartTimes final
{
public:
	TArray<struct FPlayerFloatTuple>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetPlayerStartTimes) == 0x000008, "Wrong alignment on Generator_GetPlayerStartTimes");
static_assert(sizeof(Generator_GetPlayerStartTimes) == 0x000010, "Wrong size on Generator_GetPlayerStartTimes");
static_assert(offsetof(Generator_GetPlayerStartTimes, ReturnValue) == 0x000000, "Member 'Generator_GetPlayerStartTimes::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetRepairers
// 0x0010 (0x0010 - 0x0000)
struct Generator_GetRepairers final
{
public:
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetRepairers) == 0x000008, "Wrong alignment on Generator_GetRepairers");
static_assert(sizeof(Generator_GetRepairers) == 0x000010, "Wrong size on Generator_GetRepairers");
static_assert(offsetof(Generator_GetRepairers, ReturnValue) == 0x000000, "Member 'Generator_GetRepairers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetRepairPercentComplete
// 0x0004 (0x0004 - 0x0000)
struct Generator_GetRepairPercentComplete final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetRepairPercentComplete) == 0x000004, "Wrong alignment on Generator_GetRepairPercentComplete");
static_assert(sizeof(Generator_GetRepairPercentComplete) == 0x000004, "Wrong size on Generator_GetRepairPercentComplete");
static_assert(offsetof(Generator_GetRepairPercentComplete, ReturnValue) == 0x000000, "Member 'Generator_GetRepairPercentComplete::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct Generator_GetSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetSkeletalMesh) == 0x000008, "Wrong alignment on Generator_GetSkeletalMesh");
static_assert(sizeof(Generator_GetSkeletalMesh) == 0x000008, "Wrong size on Generator_GetSkeletalMesh");
static_assert(offsetof(Generator_GetSkeletalMesh, ReturnValue) == 0x000000, "Member 'Generator_GetSkeletalMesh::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.IsBeingDamagedByKiller
// 0x0001 (0x0001 - 0x0000)
struct Generator_IsBeingDamagedByKiller final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_IsBeingDamagedByKiller) == 0x000001, "Wrong alignment on Generator_IsBeingDamagedByKiller");
static_assert(sizeof(Generator_IsBeingDamagedByKiller) == 0x000001, "Wrong size on Generator_IsBeingDamagedByKiller");
static_assert(offsetof(Generator_IsBeingDamagedByKiller, ReturnValue) == 0x000000, "Member 'Generator_IsBeingDamagedByKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.IsBeingRepaired
// 0x0001 (0x0001 - 0x0000)
struct Generator_IsBeingRepaired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_IsBeingRepaired) == 0x000001, "Wrong alignment on Generator_IsBeingRepaired");
static_assert(sizeof(Generator_IsBeingRepaired) == 0x000001, "Wrong size on Generator_IsBeingRepaired");
static_assert(offsetof(Generator_IsBeingRepaired, ReturnValue) == 0x000000, "Member 'Generator_IsBeingRepaired::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.IsBlocked
// 0x0001 (0x0001 - 0x0000)
struct Generator_IsBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_IsBlocked) == 0x000001, "Wrong alignment on Generator_IsBlocked");
static_assert(sizeof(Generator_IsBlocked) == 0x000001, "Wrong size on Generator_IsBlocked");
static_assert(offsetof(Generator_IsBlocked, ReturnValue) == 0x000000, "Member 'Generator_IsBlocked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.IsIntenseDamage
// 0x0001 (0x0001 - 0x0000)
struct Generator_IsIntenseDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_IsIntenseDamage) == 0x000001, "Wrong alignment on Generator_IsIntenseDamage");
static_assert(sizeof(Generator_IsIntenseDamage) == 0x000001, "Wrong size on Generator_IsIntenseDamage");
static_assert(offsetof(Generator_IsIntenseDamage, ReturnValue) == 0x000000, "Member 'Generator_IsIntenseDamage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.IsRegressing
// 0x0001 (0x0001 - 0x0000)
struct Generator_IsRegressing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_IsRegressing) == 0x000001, "Wrong alignment on Generator_IsRegressing");
static_assert(sizeof(Generator_IsRegressing) == 0x000001, "Wrong size on Generator_IsRegressing");
static_assert(offsetof(Generator_IsRegressing, ReturnValue) == 0x000000, "Member 'Generator_IsRegressing::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.ShouldDoOverchargeSkillcheck
// 0x0001 (0x0001 - 0x0000)
struct Generator_ShouldDoOverchargeSkillcheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_ShouldDoOverchargeSkillcheck) == 0x000001, "Wrong alignment on Generator_ShouldDoOverchargeSkillcheck");
static_assert(sizeof(Generator_ShouldDoOverchargeSkillcheck) == 0x000001, "Wrong size on Generator_ShouldDoOverchargeSkillcheck");
static_assert(offsetof(Generator_ShouldDoOverchargeSkillcheck, ReturnValue) == 0x000000, "Member 'Generator_ShouldDoOverchargeSkillcheck::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorEntity.PlayMontage
// 0x0028 (0x0028 - 0x0000)
struct GeneratorEntity_PlayMontage final
{
public:
	struct FAnimationMontageDescriptor            animMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         playRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isFollower;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorEntity_PlayMontage) == 0x000008, "Wrong alignment on GeneratorEntity_PlayMontage");
static_assert(sizeof(GeneratorEntity_PlayMontage) == 0x000028, "Wrong size on GeneratorEntity_PlayMontage");
static_assert(offsetof(GeneratorEntity_PlayMontage, animMontageID) == 0x000000, "Member 'GeneratorEntity_PlayMontage::animMontageID' has a wrong offset!");
static_assert(offsetof(GeneratorEntity_PlayMontage, playRate) == 0x000020, "Member 'GeneratorEntity_PlayMontage::playRate' has a wrong offset!");
static_assert(offsetof(GeneratorEntity_PlayMontage, isFollower) == 0x000024, "Member 'GeneratorEntity_PlayMontage::isFollower' has a wrong offset!");

// Function DeadByDaylight.GeneratorEntity.SetAssociatedGenerator
// 0x0008 (0x0008 - 0x0000)
struct GeneratorEntity_SetAssociatedGenerator final
{
public:
	class AGenerator*                             generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorEntity_SetAssociatedGenerator) == 0x000008, "Wrong alignment on GeneratorEntity_SetAssociatedGenerator");
static_assert(sizeof(GeneratorEntity_SetAssociatedGenerator) == 0x000008, "Wrong size on GeneratorEntity_SetAssociatedGenerator");
static_assert(offsetof(GeneratorEntity_SetAssociatedGenerator, generator) == 0x000000, "Member 'GeneratorEntity_SetAssociatedGenerator::generator' has a wrong offset!");

// Function DeadByDaylight.GeneratorEntity.SetSkeletalMeshActive
// 0x0001 (0x0001 - 0x0000)
struct GeneratorEntity_SetSkeletalMeshActive final
{
public:
	bool                                          active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorEntity_SetSkeletalMeshActive) == 0x000001, "Wrong alignment on GeneratorEntity_SetSkeletalMeshActive");
static_assert(sizeof(GeneratorEntity_SetSkeletalMeshActive) == 0x000001, "Wrong size on GeneratorEntity_SetSkeletalMeshActive");
static_assert(offsetof(GeneratorEntity_SetSkeletalMeshActive, active) == 0x000000, "Member 'GeneratorEntity_SetSkeletalMeshActive::active' has a wrong offset!");

// Function DeadByDaylight.GeneratorEntity.GetMontagePlayer
// 0x0008 (0x0008 - 0x0000)
struct GeneratorEntity_GetMontagePlayer final
{
public:
	class UMontagePlayer*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorEntity_GetMontagePlayer) == 0x000008, "Wrong alignment on GeneratorEntity_GetMontagePlayer");
static_assert(sizeof(GeneratorEntity_GetMontagePlayer) == 0x000008, "Wrong size on GeneratorEntity_GetMontagePlayer");
static_assert(offsetof(GeneratorEntity_GetMontagePlayer, ReturnValue) == 0x000000, "Member 'GeneratorEntity_GetMontagePlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorOutlineUpdateStrategy.GetWhiteColor
// 0x0010 (0x0010 - 0x0000)
struct GeneratorOutlineUpdateStrategy_GetWhiteColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorOutlineUpdateStrategy_GetWhiteColor) == 0x000004, "Wrong alignment on GeneratorOutlineUpdateStrategy_GetWhiteColor");
static_assert(sizeof(GeneratorOutlineUpdateStrategy_GetWhiteColor) == 0x000010, "Wrong size on GeneratorOutlineUpdateStrategy_GetWhiteColor");
static_assert(offsetof(GeneratorOutlineUpdateStrategy_GetWhiteColor, ReturnValue) == 0x000000, "Member 'GeneratorOutlineUpdateStrategy_GetWhiteColor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorOutlineUpdateStrategy.GetYellowColor
// 0x0010 (0x0010 - 0x0000)
struct GeneratorOutlineUpdateStrategy_GetYellowColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorOutlineUpdateStrategy_GetYellowColor) == 0x000004, "Wrong alignment on GeneratorOutlineUpdateStrategy_GetYellowColor");
static_assert(sizeof(GeneratorOutlineUpdateStrategy_GetYellowColor) == 0x000010, "Wrong size on GeneratorOutlineUpdateStrategy_GetYellowColor");
static_assert(offsetof(GeneratorOutlineUpdateStrategy_GetYellowColor, ReturnValue) == 0x000000, "Member 'GeneratorOutlineUpdateStrategy_GetYellowColor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrappableComponent.GetHasAnyTrap
// 0x0001 (0x0001 - 0x0000)
struct GeneratorTrappableComponent_GetHasAnyTrap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrappableComponent_GetHasAnyTrap) == 0x000001, "Wrong alignment on GeneratorTrappableComponent_GetHasAnyTrap");
static_assert(sizeof(GeneratorTrappableComponent_GetHasAnyTrap) == 0x000001, "Wrong size on GeneratorTrappableComponent_GetHasAnyTrap");
static_assert(offsetof(GeneratorTrappableComponent_GetHasAnyTrap, ReturnValue) == 0x000000, "Member 'GeneratorTrappableComponent_GetHasAnyTrap::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrappableComponent.GetHasTrap
// 0x0002 (0x0002 - 0x0000)
struct GeneratorTrappableComponent_GetHasTrap final
{
public:
	EGeneratorTrapType                            trapType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrappableComponent_GetHasTrap) == 0x000001, "Wrong alignment on GeneratorTrappableComponent_GetHasTrap");
static_assert(sizeof(GeneratorTrappableComponent_GetHasTrap) == 0x000002, "Wrong size on GeneratorTrappableComponent_GetHasTrap");
static_assert(offsetof(GeneratorTrappableComponent_GetHasTrap, trapType) == 0x000000, "Member 'GeneratorTrappableComponent_GetHasTrap::trapType' has a wrong offset!");
static_assert(offsetof(GeneratorTrappableComponent_GetHasTrap, ReturnValue) == 0x000001, "Member 'GeneratorTrappableComponent_GetHasTrap::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.Authority_OnExitGatesPowered
// 0x0038 (0x0038 - 0x0000)
struct GeneratorTrapPerk_Authority_OnExitGatesPowered final
{
public:
	struct FGameplayTag                           gameEventTag;                                      // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_Authority_OnExitGatesPowered) == 0x000008, "Wrong alignment on GeneratorTrapPerk_Authority_OnExitGatesPowered");
static_assert(sizeof(GeneratorTrapPerk_Authority_OnExitGatesPowered) == 0x000038, "Wrong size on GeneratorTrapPerk_Authority_OnExitGatesPowered");
static_assert(offsetof(GeneratorTrapPerk_Authority_OnExitGatesPowered, gameEventTag) == 0x000000, "Member 'GeneratorTrapPerk_Authority_OnExitGatesPowered::gameEventTag' has a wrong offset!");
static_assert(offsetof(GeneratorTrapPerk_Authority_OnExitGatesPowered, gameEventData) == 0x000010, "Member 'GeneratorTrapPerk_Authority_OnExitGatesPowered::gameEventData' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.Authority_OnGeneratorCompleted
// 0x0001 (0x0001 - 0x0000)
struct GeneratorTrapPerk_Authority_OnGeneratorCompleted final
{
public:
	bool                                          isAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_Authority_OnGeneratorCompleted) == 0x000001, "Wrong alignment on GeneratorTrapPerk_Authority_OnGeneratorCompleted");
static_assert(sizeof(GeneratorTrapPerk_Authority_OnGeneratorCompleted) == 0x000001, "Wrong size on GeneratorTrapPerk_Authority_OnGeneratorCompleted");
static_assert(offsetof(GeneratorTrapPerk_Authority_OnGeneratorCompleted, isAutoCompleted) == 0x000000, "Member 'GeneratorTrapPerk_Authority_OnGeneratorCompleted::isAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.Authority_OnRepairProgress
// 0x0018 (0x0018 - 0x0000)
struct GeneratorTrapPerk_Authority_OnRepairProgress final
{
public:
	float                                         individualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         totalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 chargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          wasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         deltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_Authority_OnRepairProgress) == 0x000008, "Wrong alignment on GeneratorTrapPerk_Authority_OnRepairProgress");
static_assert(sizeof(GeneratorTrapPerk_Authority_OnRepairProgress) == 0x000018, "Wrong size on GeneratorTrapPerk_Authority_OnRepairProgress");
static_assert(offsetof(GeneratorTrapPerk_Authority_OnRepairProgress, individualChargeAmount) == 0x000000, "Member 'GeneratorTrapPerk_Authority_OnRepairProgress::individualChargeAmount' has a wrong offset!");
static_assert(offsetof(GeneratorTrapPerk_Authority_OnRepairProgress, totalChargeAmount) == 0x000004, "Member 'GeneratorTrapPerk_Authority_OnRepairProgress::totalChargeAmount' has a wrong offset!");
static_assert(offsetof(GeneratorTrapPerk_Authority_OnRepairProgress, chargeInstigator) == 0x000008, "Member 'GeneratorTrapPerk_Authority_OnRepairProgress::chargeInstigator' has a wrong offset!");
static_assert(offsetof(GeneratorTrapPerk_Authority_OnRepairProgress, wasCoop) == 0x000010, "Member 'GeneratorTrapPerk_Authority_OnRepairProgress::wasCoop' has a wrong offset!");
static_assert(offsetof(GeneratorTrapPerk_Authority_OnRepairProgress, deltaTime) == 0x000014, "Member 'GeneratorTrapPerk_Authority_OnRepairProgress::deltaTime' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.Authority_OnTrapDamaged
// 0x0038 (0x0038 - 0x0000)
struct GeneratorTrapPerk_Authority_OnTrapDamaged final
{
public:
	struct FGameplayTag                           gameEventTag;                                      // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_Authority_OnTrapDamaged) == 0x000008, "Wrong alignment on GeneratorTrapPerk_Authority_OnTrapDamaged");
static_assert(sizeof(GeneratorTrapPerk_Authority_OnTrapDamaged) == 0x000038, "Wrong size on GeneratorTrapPerk_Authority_OnTrapDamaged");
static_assert(offsetof(GeneratorTrapPerk_Authority_OnTrapDamaged, gameEventTag) == 0x000000, "Member 'GeneratorTrapPerk_Authority_OnTrapDamaged::gameEventTag' has a wrong offset!");
static_assert(offsetof(GeneratorTrapPerk_Authority_OnTrapDamaged, gameEventData) == 0x000010, "Member 'GeneratorTrapPerk_Authority_OnTrapDamaged::gameEventData' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.Client_OnTrapActivated
// 0x0008 (0x0008 - 0x0000)
struct GeneratorTrapPerk_Client_OnTrapActivated final
{
public:
	const class AGenerator*                       generator;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_Client_OnTrapActivated) == 0x000008, "Wrong alignment on GeneratorTrapPerk_Client_OnTrapActivated");
static_assert(sizeof(GeneratorTrapPerk_Client_OnTrapActivated) == 0x000008, "Wrong size on GeneratorTrapPerk_Client_OnTrapActivated");
static_assert(offsetof(GeneratorTrapPerk_Client_OnTrapActivated, generator) == 0x000000, "Member 'GeneratorTrapPerk_Client_OnTrapActivated::generator' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.Client_OnTrapDestroyed
// 0x0010 (0x0010 - 0x0000)
struct GeneratorTrapPerk_Client_OnTrapDestroyed final
{
public:
	const class AGenerator*                       generator;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrapRemovedReason                            reason;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorTrapPerk_Client_OnTrapDestroyed) == 0x000008, "Wrong alignment on GeneratorTrapPerk_Client_OnTrapDestroyed");
static_assert(sizeof(GeneratorTrapPerk_Client_OnTrapDestroyed) == 0x000010, "Wrong size on GeneratorTrapPerk_Client_OnTrapDestroyed");
static_assert(offsetof(GeneratorTrapPerk_Client_OnTrapDestroyed, generator) == 0x000000, "Member 'GeneratorTrapPerk_Client_OnTrapDestroyed::generator' has a wrong offset!");
static_assert(offsetof(GeneratorTrapPerk_Client_OnTrapDestroyed, reason) == 0x000008, "Member 'GeneratorTrapPerk_Client_OnTrapDestroyed::reason' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.Local_TrapActivated
// 0x0008 (0x0008 - 0x0000)
struct GeneratorTrapPerk_Local_TrapActivated final
{
public:
	const class AGenerator*                       generator;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_Local_TrapActivated) == 0x000008, "Wrong alignment on GeneratorTrapPerk_Local_TrapActivated");
static_assert(sizeof(GeneratorTrapPerk_Local_TrapActivated) == 0x000008, "Wrong size on GeneratorTrapPerk_Local_TrapActivated");
static_assert(offsetof(GeneratorTrapPerk_Local_TrapActivated, generator) == 0x000000, "Member 'GeneratorTrapPerk_Local_TrapActivated::generator' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.Local_TrapDestroyed
// 0x0010 (0x0010 - 0x0000)
struct GeneratorTrapPerk_Local_TrapDestroyed final
{
public:
	const class AGenerator*                       generator;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrapRemovedReason                            reason;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorTrapPerk_Local_TrapDestroyed) == 0x000008, "Wrong alignment on GeneratorTrapPerk_Local_TrapDestroyed");
static_assert(sizeof(GeneratorTrapPerk_Local_TrapDestroyed) == 0x000010, "Wrong size on GeneratorTrapPerk_Local_TrapDestroyed");
static_assert(offsetof(GeneratorTrapPerk_Local_TrapDestroyed, generator) == 0x000000, "Member 'GeneratorTrapPerk_Local_TrapDestroyed::generator' has a wrong offset!");
static_assert(offsetof(GeneratorTrapPerk_Local_TrapDestroyed, reason) == 0x000008, "Member 'GeneratorTrapPerk_Local_TrapDestroyed::reason' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.OnRep_CurrentRepairInteractionWithAbility
// 0x0008 (0x0008 - 0x0000)
struct GeneratorTrapPerk_OnRep_CurrentRepairInteractionWithAbility final
{
public:
	class UInteractionDefinition*                 oldRepairInteraction;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_OnRep_CurrentRepairInteractionWithAbility) == 0x000008, "Wrong alignment on GeneratorTrapPerk_OnRep_CurrentRepairInteractionWithAbility");
static_assert(sizeof(GeneratorTrapPerk_OnRep_CurrentRepairInteractionWithAbility) == 0x000008, "Wrong size on GeneratorTrapPerk_OnRep_CurrentRepairInteractionWithAbility");
static_assert(offsetof(GeneratorTrapPerk_OnRep_CurrentRepairInteractionWithAbility, oldRepairInteraction) == 0x000000, "Member 'GeneratorTrapPerk_OnRep_CurrentRepairInteractionWithAbility::oldRepairInteraction' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.OnRep_TrappedGenerator
// 0x0008 (0x0008 - 0x0000)
struct GeneratorTrapPerk_OnRep_TrappedGenerator final
{
public:
	class AGenerator*                             oldGenerator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_OnRep_TrappedGenerator) == 0x000008, "Wrong alignment on GeneratorTrapPerk_OnRep_TrappedGenerator");
static_assert(sizeof(GeneratorTrapPerk_OnRep_TrappedGenerator) == 0x000008, "Wrong size on GeneratorTrapPerk_OnRep_TrappedGenerator");
static_assert(offsetof(GeneratorTrapPerk_OnRep_TrappedGenerator, oldGenerator) == 0x000000, "Member 'GeneratorTrapPerk_OnRep_TrappedGenerator::oldGenerator' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.GetGeneratorTrapDuration
// 0x0004 (0x0004 - 0x0000)
struct GeneratorTrapPerk_GetGeneratorTrapDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_GetGeneratorTrapDuration) == 0x000004, "Wrong alignment on GeneratorTrapPerk_GetGeneratorTrapDuration");
static_assert(sizeof(GeneratorTrapPerk_GetGeneratorTrapDuration) == 0x000004, "Wrong size on GeneratorTrapPerk_GetGeneratorTrapDuration");
static_assert(offsetof(GeneratorTrapPerk_GetGeneratorTrapDuration, ReturnValue) == 0x000000, "Member 'GeneratorTrapPerk_GetGeneratorTrapDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.GetRepairProgressPercent
// 0x0004 (0x0004 - 0x0000)
struct GeneratorTrapPerk_GetRepairProgressPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_GetRepairProgressPercent) == 0x000004, "Wrong alignment on GeneratorTrapPerk_GetRepairProgressPercent");
static_assert(sizeof(GeneratorTrapPerk_GetRepairProgressPercent) == 0x000004, "Wrong size on GeneratorTrapPerk_GetRepairProgressPercent");
static_assert(offsetof(GeneratorTrapPerk_GetRepairProgressPercent, ReturnValue) == 0x000000, "Member 'GeneratorTrapPerk_GetRepairProgressPercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.GetRequiredRepairProgressForSettingTrap
// 0x0004 (0x0004 - 0x0000)
struct GeneratorTrapPerk_GetRequiredRepairProgressForSettingTrap final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_GetRequiredRepairProgressForSettingTrap) == 0x000004, "Wrong alignment on GeneratorTrapPerk_GetRequiredRepairProgressForSettingTrap");
static_assert(sizeof(GeneratorTrapPerk_GetRequiredRepairProgressForSettingTrap) == 0x000004, "Wrong size on GeneratorTrapPerk_GetRequiredRepairProgressForSettingTrap");
static_assert(offsetof(GeneratorTrapPerk_GetRequiredRepairProgressForSettingTrap, ReturnValue) == 0x000000, "Member 'GeneratorTrapPerk_GetRequiredRepairProgressForSettingTrap::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.GetSecondsToActivatePerk
// 0x0004 (0x0004 - 0x0000)
struct GeneratorTrapPerk_GetSecondsToActivatePerk final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_GetSecondsToActivatePerk) == 0x000004, "Wrong alignment on GeneratorTrapPerk_GetSecondsToActivatePerk");
static_assert(sizeof(GeneratorTrapPerk_GetSecondsToActivatePerk) == 0x000004, "Wrong size on GeneratorTrapPerk_GetSecondsToActivatePerk");
static_assert(offsetof(GeneratorTrapPerk_GetSecondsToActivatePerk, ReturnValue) == 0x000000, "Member 'GeneratorTrapPerk_GetSecondsToActivatePerk::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.HalloweenEventComponent.OnFinishedPlaying
// 0x0038 (0x0038 - 0x0000)
struct HalloweenEventComponent_OnFinishedPlaying final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenEventComponent_OnFinishedPlaying) == 0x000008, "Wrong alignment on HalloweenEventComponent_OnFinishedPlaying");
static_assert(sizeof(HalloweenEventComponent_OnFinishedPlaying) == 0x000038, "Wrong size on HalloweenEventComponent_OnFinishedPlaying");
static_assert(offsetof(HalloweenEventComponent_OnFinishedPlaying, gameEventType) == 0x000000, "Member 'HalloweenEventComponent_OnFinishedPlaying::gameEventType' has a wrong offset!");
static_assert(offsetof(HalloweenEventComponent_OnFinishedPlaying, gameEventData) == 0x000010, "Member 'HalloweenEventComponent_OnFinishedPlaying::gameEventData' has a wrong offset!");

// Function DeadByDaylight.HalloweenEventComponent.Server_SpawnVial
// 0x0004 (0x0004 - 0x0000)
struct HalloweenEventComponent_Server_SpawnVial final
{
public:
	float                                         initialCharge;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenEventComponent_Server_SpawnVial) == 0x000004, "Wrong alignment on HalloweenEventComponent_Server_SpawnVial");
static_assert(sizeof(HalloweenEventComponent_Server_SpawnVial) == 0x000004, "Wrong size on HalloweenEventComponent_Server_SpawnVial");
static_assert(offsetof(HalloweenEventComponent_Server_SpawnVial, initialCharge) == 0x000000, "Member 'HalloweenEventComponent_Server_SpawnVial::initialCharge' has a wrong offset!");

// Function DeadByDaylight.HalloweenEventComponent.GetVial
// 0x0008 (0x0008 - 0x0000)
struct HalloweenEventComponent_GetVial final
{
public:
	class USectionnedChargeableComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenEventComponent_GetVial) == 0x000008, "Wrong alignment on HalloweenEventComponent_GetVial");
static_assert(sizeof(HalloweenEventComponent_GetVial) == 0x000008, "Wrong size on HalloweenEventComponent_GetVial");
static_assert(offsetof(HalloweenEventComponent_GetVial, ReturnValue) == 0x000000, "Member 'HalloweenEventComponent_GetVial::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.HalloweenEventComponent.IsVialFull
// 0x0001 (0x0001 - 0x0000)
struct HalloweenEventComponent_IsVialFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenEventComponent_IsVialFull) == 0x000001, "Wrong alignment on HalloweenEventComponent_IsVialFull");
static_assert(sizeof(HalloweenEventComponent_IsVialFull) == 0x000001, "Wrong size on HalloweenEventComponent_IsVialFull");
static_assert(offsetof(HalloweenEventComponent_IsVialFull, ReturnValue) == 0x000000, "Member 'HalloweenEventComponent_IsVialFull::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Hatch.Authority_OnEndGameOver
// 0x0038 (0x0038 - 0x0000)
struct Hatch_Authority_OnEndGameOver final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_Authority_OnEndGameOver) == 0x000008, "Wrong alignment on Hatch_Authority_OnEndGameOver");
static_assert(sizeof(Hatch_Authority_OnEndGameOver) == 0x000038, "Wrong size on Hatch_Authority_OnEndGameOver");
static_assert(offsetof(Hatch_Authority_OnEndGameOver, gameEventType) == 0x000000, "Member 'Hatch_Authority_OnEndGameOver::gameEventType' has a wrong offset!");
static_assert(offsetof(Hatch_Authority_OnEndGameOver, gameEventData) == 0x000010, "Member 'Hatch_Authority_OnEndGameOver::gameEventData' has a wrong offset!");

// Function DeadByDaylight.Hatch.Authority_OnHatchVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct Hatch_Authority_OnHatchVisibilityChanged final
{
public:
	bool                                          isVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_Authority_OnHatchVisibilityChanged) == 0x000001, "Wrong alignment on Hatch_Authority_OnHatchVisibilityChanged");
static_assert(sizeof(Hatch_Authority_OnHatchVisibilityChanged) == 0x000001, "Wrong size on Hatch_Authority_OnHatchVisibilityChanged");
static_assert(offsetof(Hatch_Authority_OnHatchVisibilityChanged, isVisible) == 0x000000, "Member 'Hatch_Authority_OnHatchVisibilityChanged::isVisible' has a wrong offset!");

// Function DeadByDaylight.Hatch.Authority_OnSurvivorsLeftChanged
// 0x0004 (0x0004 - 0x0000)
struct Hatch_Authority_OnSurvivorsLeftChanged final
{
public:
	int32                                         survivorRemaining;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_Authority_OnSurvivorsLeftChanged) == 0x000004, "Wrong alignment on Hatch_Authority_OnSurvivorsLeftChanged");
static_assert(sizeof(Hatch_Authority_OnSurvivorsLeftChanged) == 0x000004, "Wrong size on Hatch_Authority_OnSurvivorsLeftChanged");
static_assert(offsetof(Hatch_Authority_OnSurvivorsLeftChanged, survivorRemaining) == 0x000000, "Member 'Hatch_Authority_OnSurvivorsLeftChanged::survivorRemaining' has a wrong offset!");

// Function DeadByDaylight.Hatch.Authority_ResetTimer
// 0x0004 (0x0004 - 0x0000)
struct Hatch_Authority_ResetTimer final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_Authority_ResetTimer) == 0x000004, "Wrong alignment on Hatch_Authority_ResetTimer");
static_assert(sizeof(Hatch_Authority_ResetTimer) == 0x000004, "Wrong size on Hatch_Authority_ResetTimer");
static_assert(offsetof(Hatch_Authority_ResetTimer, duration) == 0x000000, "Member 'Hatch_Authority_ResetTimer::duration' has a wrong offset!");

// Function DeadByDaylight.Hatch.Authority_SetHatchState
// 0x0001 (0x0001 - 0x0000)
struct Hatch_Authority_SetHatchState final
{
public:
	EHatchState                                   newState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_Authority_SetHatchState) == 0x000001, "Wrong alignment on Hatch_Authority_SetHatchState");
static_assert(sizeof(Hatch_Authority_SetHatchState) == 0x000001, "Wrong size on Hatch_Authority_SetHatchState");
static_assert(offsetof(Hatch_Authority_SetHatchState, newState) == 0x000000, "Member 'Hatch_Authority_SetHatchState::newState' has a wrong offset!");

// Function DeadByDaylight.Hatch.Authority_SetIsForceOpen
// 0x0001 (0x0001 - 0x0000)
struct Hatch_Authority_SetIsForceOpen final
{
public:
	bool                                          isForcedOpen;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_Authority_SetIsForceOpen) == 0x000001, "Wrong alignment on Hatch_Authority_SetIsForceOpen");
static_assert(sizeof(Hatch_Authority_SetIsForceOpen) == 0x000001, "Wrong size on Hatch_Authority_SetIsForceOpen");
static_assert(offsetof(Hatch_Authority_SetIsForceOpen, isForcedOpen) == 0x000000, "Member 'Hatch_Authority_SetIsForceOpen::isForcedOpen' has a wrong offset!");

// Function DeadByDaylight.Hatch.OnHatchStateModified
// 0x0002 (0x0002 - 0x0000)
struct Hatch_OnHatchStateModified final
{
public:
	EHatchState                                   oldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHatchState                                   newState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_OnHatchStateModified) == 0x000001, "Wrong alignment on Hatch_OnHatchStateModified");
static_assert(sizeof(Hatch_OnHatchStateModified) == 0x000002, "Wrong size on Hatch_OnHatchStateModified");
static_assert(offsetof(Hatch_OnHatchStateModified, oldState) == 0x000000, "Member 'Hatch_OnHatchStateModified::oldState' has a wrong offset!");
static_assert(offsetof(Hatch_OnHatchStateModified, newState) == 0x000001, "Member 'Hatch_OnHatchStateModified::newState' has a wrong offset!");

// Function DeadByDaylight.Hatch.OnRep_HatchState
// 0x0001 (0x0001 - 0x0000)
struct Hatch_OnRep_HatchState final
{
public:
	EHatchState                                   oldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_OnRep_HatchState) == 0x000001, "Wrong alignment on Hatch_OnRep_HatchState");
static_assert(sizeof(Hatch_OnRep_HatchState) == 0x000001, "Wrong size on Hatch_OnRep_HatchState");
static_assert(offsetof(Hatch_OnRep_HatchState, oldState) == 0x000000, "Member 'Hatch_OnRep_HatchState::oldState' has a wrong offset!");

// Function DeadByDaylight.Hatch.GetAnimationMontageSlave
// 0x0008 (0x0008 - 0x0000)
struct Hatch_GetAnimationMontageSlave final
{
public:
	class UAnimationMontageSlave*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_GetAnimationMontageSlave) == 0x000008, "Wrong alignment on Hatch_GetAnimationMontageSlave");
static_assert(sizeof(Hatch_GetAnimationMontageSlave) == 0x000008, "Wrong size on Hatch_GetAnimationMontageSlave");
static_assert(offsetof(Hatch_GetAnimationMontageSlave, ReturnValue) == 0x000000, "Member 'Hatch_GetAnimationMontageSlave::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Hatch.GetEscapeFocalPoint
// 0x0008 (0x0008 - 0x0000)
struct Hatch_GetEscapeFocalPoint final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_GetEscapeFocalPoint) == 0x000008, "Wrong alignment on Hatch_GetEscapeFocalPoint");
static_assert(sizeof(Hatch_GetEscapeFocalPoint) == 0x000008, "Wrong size on Hatch_GetEscapeFocalPoint");
static_assert(offsetof(Hatch_GetEscapeFocalPoint, ReturnValue) == 0x000000, "Member 'Hatch_GetEscapeFocalPoint::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Hatch.GetHatchCenter
// 0x0008 (0x0008 - 0x0000)
struct Hatch_GetHatchCenter final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_GetHatchCenter) == 0x000008, "Wrong alignment on Hatch_GetHatchCenter");
static_assert(sizeof(Hatch_GetHatchCenter) == 0x000008, "Wrong size on Hatch_GetHatchCenter");
static_assert(offsetof(Hatch_GetHatchCenter, ReturnValue) == 0x000000, "Member 'Hatch_GetHatchCenter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Hatch.GetHatchState
// 0x0001 (0x0001 - 0x0000)
struct Hatch_GetHatchState final
{
public:
	EHatchState                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_GetHatchState) == 0x000001, "Wrong alignment on Hatch_GetHatchState");
static_assert(sizeof(Hatch_GetHatchState) == 0x000001, "Wrong size on Hatch_GetHatchState");
static_assert(offsetof(Hatch_GetHatchState, ReturnValue) == 0x000000, "Member 'Hatch_GetHatchState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Hatch.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct Hatch_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_IsOpen) == 0x000001, "Wrong alignment on Hatch_IsOpen");
static_assert(sizeof(Hatch_IsOpen) == 0x000001, "Wrong size on Hatch_IsOpen");
static_assert(offsetof(Hatch_IsOpen, ReturnValue) == 0x000000, "Member 'Hatch_IsOpen::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.HookAntiCampingComponent.CanUnhookWithAutoSuccess
// 0x0001 (0x0001 - 0x0000)
struct HookAntiCampingComponent_CanUnhookWithAutoSuccess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookAntiCampingComponent_CanUnhookWithAutoSuccess) == 0x000001, "Wrong alignment on HookAntiCampingComponent_CanUnhookWithAutoSuccess");
static_assert(sizeof(HookAntiCampingComponent_CanUnhookWithAutoSuccess) == 0x000001, "Wrong size on HookAntiCampingComponent_CanUnhookWithAutoSuccess");
static_assert(offsetof(HookAntiCampingComponent_CanUnhookWithAutoSuccess, ReturnValue) == 0x000000, "Member 'HookAntiCampingComponent_CanUnhookWithAutoSuccess::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.HookAntiCampingComponent.GetCampTimerCompletionPercent
// 0x0004 (0x0004 - 0x0000)
struct HookAntiCampingComponent_GetCampTimerCompletionPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookAntiCampingComponent_GetCampTimerCompletionPercent) == 0x000004, "Wrong alignment on HookAntiCampingComponent_GetCampTimerCompletionPercent");
static_assert(sizeof(HookAntiCampingComponent_GetCampTimerCompletionPercent) == 0x000004, "Wrong size on HookAntiCampingComponent_GetCampTimerCompletionPercent");
static_assert(offsetof(HookAntiCampingComponent_GetCampTimerCompletionPercent, ReturnValue) == 0x000000, "Member 'HookAntiCampingComponent_GetCampTimerCompletionPercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.HookAntiCampingComponent.GetCurrentChargeSpeed
// 0x0004 (0x0004 - 0x0000)
struct HookAntiCampingComponent_GetCurrentChargeSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookAntiCampingComponent_GetCurrentChargeSpeed) == 0x000004, "Wrong alignment on HookAntiCampingComponent_GetCurrentChargeSpeed");
static_assert(sizeof(HookAntiCampingComponent_GetCurrentChargeSpeed) == 0x000004, "Wrong size on HookAntiCampingComponent_GetCurrentChargeSpeed");
static_assert(offsetof(HookAntiCampingComponent_GetCurrentChargeSpeed, ReturnValue) == 0x000000, "Member 'HookAntiCampingComponent_GetCurrentChargeSpeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InfectedInteractableComponent.Authority_OnOwningInteractableBeginOrEndUse
// 0x0010 (0x0010 - 0x0000)
struct InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse final
{
public:
	bool                                          inUse;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             interactingPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse) == 0x000008, "Wrong alignment on InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse");
static_assert(sizeof(InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse) == 0x000010, "Wrong size on InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse");
static_assert(offsetof(InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse, inUse) == 0x000000, "Member 'InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse::inUse' has a wrong offset!");
static_assert(offsetof(InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse, interactingPlayer) == 0x000008, "Member 'InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse::interactingPlayer' has a wrong offset!");

// Function DeadByDaylight.InfectedInteractableComponent.Multicast_DebugDisplayLifetime
// 0x0004 (0x0004 - 0x0000)
struct InfectedInteractableComponent_Multicast_DebugDisplayLifetime final
{
public:
	float                                         remainingLifetime;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectedInteractableComponent_Multicast_DebugDisplayLifetime) == 0x000004, "Wrong alignment on InfectedInteractableComponent_Multicast_DebugDisplayLifetime");
static_assert(sizeof(InfectedInteractableComponent_Multicast_DebugDisplayLifetime) == 0x000004, "Wrong size on InfectedInteractableComponent_Multicast_DebugDisplayLifetime");
static_assert(offsetof(InfectedInteractableComponent_Multicast_DebugDisplayLifetime, remainingLifetime) == 0x000000, "Member 'InfectedInteractableComponent_Multicast_DebugDisplayLifetime::remainingLifetime' has a wrong offset!");

// Function DeadByDaylight.InfectedInteractableComponent.OnVomitAlphaUpdate
// 0x0004 (0x0004 - 0x0000)
struct InfectedInteractableComponent_OnVomitAlphaUpdate final
{
public:
	float                                         alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectedInteractableComponent_OnVomitAlphaUpdate) == 0x000004, "Wrong alignment on InfectedInteractableComponent_OnVomitAlphaUpdate");
static_assert(sizeof(InfectedInteractableComponent_OnVomitAlphaUpdate) == 0x000004, "Wrong size on InfectedInteractableComponent_OnVomitAlphaUpdate");
static_assert(offsetof(InfectedInteractableComponent_OnVomitAlphaUpdate, alpha) == 0x000000, "Member 'InfectedInteractableComponent_OnVomitAlphaUpdate::alpha' has a wrong offset!");

// Function DeadByDaylight.InfectedInteractableComponent.SetInteractableMeshAlpha
// 0x0004 (0x0004 - 0x0000)
struct InfectedInteractableComponent_SetInteractableMeshAlpha final
{
public:
	float                                         alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectedInteractableComponent_SetInteractableMeshAlpha) == 0x000004, "Wrong alignment on InfectedInteractableComponent_SetInteractableMeshAlpha");
static_assert(sizeof(InfectedInteractableComponent_SetInteractableMeshAlpha) == 0x000004, "Wrong size on InfectedInteractableComponent_SetInteractableMeshAlpha");
static_assert(offsetof(InfectedInteractableComponent_SetInteractableMeshAlpha, alpha) == 0x000000, "Member 'InfectedInteractableComponent_SetInteractableMeshAlpha::alpha' has a wrong offset!");

// Function DeadByDaylight.InfectedInteractableComponent.Authority_GetEquippingPlayer
// 0x0008 (0x0008 - 0x0000)
struct InfectedInteractableComponent_Authority_GetEquippingPlayer final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectedInteractableComponent_Authority_GetEquippingPlayer) == 0x000008, "Wrong alignment on InfectedInteractableComponent_Authority_GetEquippingPlayer");
static_assert(sizeof(InfectedInteractableComponent_Authority_GetEquippingPlayer) == 0x000008, "Wrong size on InfectedInteractableComponent_Authority_GetEquippingPlayer");
static_assert(offsetof(InfectedInteractableComponent_Authority_GetEquippingPlayer, ReturnValue) == 0x000000, "Member 'InfectedInteractableComponent_Authority_GetEquippingPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InfectedInteractableComponent.Authority_IsAMaxSicknessSurvivorInteracting
// 0x0001 (0x0001 - 0x0000)
struct InfectedInteractableComponent_Authority_IsAMaxSicknessSurvivorInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectedInteractableComponent_Authority_IsAMaxSicknessSurvivorInteracting) == 0x000001, "Wrong alignment on InfectedInteractableComponent_Authority_IsAMaxSicknessSurvivorInteracting");
static_assert(sizeof(InfectedInteractableComponent_Authority_IsAMaxSicknessSurvivorInteracting) == 0x000001, "Wrong size on InfectedInteractableComponent_Authority_IsAMaxSicknessSurvivorInteracting");
static_assert(offsetof(InfectedInteractableComponent_Authority_IsAMaxSicknessSurvivorInteracting, ReturnValue) == 0x000000, "Member 'InfectedInteractableComponent_Authority_IsAMaxSicknessSurvivorInteracting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InfectedInteractableComponent.GetOwningInteractable
// 0x0008 (0x0008 - 0x0000)
struct InfectedInteractableComponent_GetOwningInteractable final
{
public:
	class AInteractable*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectedInteractableComponent_GetOwningInteractable) == 0x000008, "Wrong alignment on InfectedInteractableComponent_GetOwningInteractable");
static_assert(sizeof(InfectedInteractableComponent_GetOwningInteractable) == 0x000008, "Wrong size on InfectedInteractableComponent_GetOwningInteractable");
static_assert(offsetof(InfectedInteractableComponent_GetOwningInteractable, ReturnValue) == 0x000000, "Member 'InfectedInteractableComponent_GetOwningInteractable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDetectorComponent.AddIgnoredActor
// 0x0008 (0x0008 - 0x0000)
struct InteractionDetectorComponent_AddIgnoredActor final
{
public:
	class AActor*                                 ignored;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDetectorComponent_AddIgnoredActor) == 0x000008, "Wrong alignment on InteractionDetectorComponent_AddIgnoredActor");
static_assert(sizeof(InteractionDetectorComponent_AddIgnoredActor) == 0x000008, "Wrong size on InteractionDetectorComponent_AddIgnoredActor");
static_assert(offsetof(InteractionDetectorComponent_AddIgnoredActor, ignored) == 0x000000, "Member 'InteractionDetectorComponent_AddIgnoredActor::ignored' has a wrong offset!");

// Function DeadByDaylight.InteractionDetectorComponent.BeginOverlapCallback
// 0x00B0 (0x00B0 - 0x0000)
struct InteractionDetectorComponent_BeginOverlapCallback final
{
public:
	class UPrimitiveComponent*                    hitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDetectorComponent_BeginOverlapCallback) == 0x000008, "Wrong alignment on InteractionDetectorComponent_BeginOverlapCallback");
static_assert(sizeof(InteractionDetectorComponent_BeginOverlapCallback) == 0x0000B0, "Wrong size on InteractionDetectorComponent_BeginOverlapCallback");
static_assert(offsetof(InteractionDetectorComponent_BeginOverlapCallback, hitComponent) == 0x000000, "Member 'InteractionDetectorComponent_BeginOverlapCallback::hitComponent' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_BeginOverlapCallback, otherActor) == 0x000008, "Member 'InteractionDetectorComponent_BeginOverlapCallback::otherActor' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_BeginOverlapCallback, otherComp) == 0x000010, "Member 'InteractionDetectorComponent_BeginOverlapCallback::otherComp' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_BeginOverlapCallback, otherBodyIndex) == 0x000018, "Member 'InteractionDetectorComponent_BeginOverlapCallback::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_BeginOverlapCallback, fromSweep) == 0x00001C, "Member 'InteractionDetectorComponent_BeginOverlapCallback::fromSweep' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_BeginOverlapCallback, sweepResult) == 0x000020, "Member 'InteractionDetectorComponent_BeginOverlapCallback::sweepResult' has a wrong offset!");

// Function DeadByDaylight.InteractionDetectorComponent.EndOverlapCallback
// 0x0020 (0x0020 - 0x0000)
struct InteractionDetectorComponent_EndOverlapCallback final
{
public:
	class UPrimitiveComponent*                    hitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDetectorComponent_EndOverlapCallback) == 0x000008, "Wrong alignment on InteractionDetectorComponent_EndOverlapCallback");
static_assert(sizeof(InteractionDetectorComponent_EndOverlapCallback) == 0x000020, "Wrong size on InteractionDetectorComponent_EndOverlapCallback");
static_assert(offsetof(InteractionDetectorComponent_EndOverlapCallback, hitComponent) == 0x000000, "Member 'InteractionDetectorComponent_EndOverlapCallback::hitComponent' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_EndOverlapCallback, otherActor) == 0x000008, "Member 'InteractionDetectorComponent_EndOverlapCallback::otherActor' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_EndOverlapCallback, otherComp) == 0x000010, "Member 'InteractionDetectorComponent_EndOverlapCallback::otherComp' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_EndOverlapCallback, otherBodyIndex) == 0x000018, "Member 'InteractionDetectorComponent_EndOverlapCallback::otherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.InteractionDetectorComponent.OnLocallyObservedChanged
// 0x0008 (0x0008 - 0x0000)
struct InteractionDetectorComponent_OnLocallyObservedChanged final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDetectorComponent_OnLocallyObservedChanged) == 0x000008, "Wrong alignment on InteractionDetectorComponent_OnLocallyObservedChanged");
static_assert(sizeof(InteractionDetectorComponent_OnLocallyObservedChanged) == 0x000008, "Wrong size on InteractionDetectorComponent_OnLocallyObservedChanged");
static_assert(offsetof(InteractionDetectorComponent_OnLocallyObservedChanged, player) == 0x000000, "Member 'InteractionDetectorComponent_OnLocallyObservedChanged::player' has a wrong offset!");

// Function DeadByDaylight.InteractionDetectorComponent.SetDetectionPrimitive
// 0x0008 (0x0008 - 0x0000)
struct InteractionDetectorComponent_SetDetectionPrimitive final
{
public:
	class UPrimitiveComponent*                    detectionPrimitive;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDetectorComponent_SetDetectionPrimitive) == 0x000008, "Wrong alignment on InteractionDetectorComponent_SetDetectionPrimitive");
static_assert(sizeof(InteractionDetectorComponent_SetDetectionPrimitive) == 0x000008, "Wrong size on InteractionDetectorComponent_SetDetectionPrimitive");
static_assert(offsetof(InteractionDetectorComponent_SetDetectionPrimitive, detectionPrimitive) == 0x000000, "Member 'InteractionDetectorComponent_SetDetectionPrimitive::detectionPrimitive' has a wrong offset!");

// Function DeadByDaylight.InteractionDetectorComponent.GetDetectionPrimitive
// 0x0008 (0x0008 - 0x0000)
struct InteractionDetectorComponent_GetDetectionPrimitive final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDetectorComponent_GetDetectionPrimitive) == 0x000008, "Wrong alignment on InteractionDetectorComponent_GetDetectionPrimitive");
static_assert(sizeof(InteractionDetectorComponent_GetDetectionPrimitive) == 0x000008, "Wrong size on InteractionDetectorComponent_GetDetectionPrimitive");
static_assert(offsetof(InteractionDetectorComponent_GetDetectionPrimitive, ReturnValue) == 0x000000, "Member 'InteractionDetectorComponent_GetDetectionPrimitive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.OnInterruptionEnterStart
// 0x0010 (0x0010 - 0x0000)
struct InterruptionDefinition_OnInterruptionEnterStart final
{
public:
	class ADBDPlayer*                             interruptor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             interruptee;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_OnInterruptionEnterStart) == 0x000008, "Wrong alignment on InterruptionDefinition_OnInterruptionEnterStart");
static_assert(sizeof(InterruptionDefinition_OnInterruptionEnterStart) == 0x000010, "Wrong size on InterruptionDefinition_OnInterruptionEnterStart");
static_assert(offsetof(InterruptionDefinition_OnInterruptionEnterStart, interruptor) == 0x000000, "Member 'InterruptionDefinition_OnInterruptionEnterStart::interruptor' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_OnInterruptionEnterStart, interruptee) == 0x000008, "Member 'InterruptionDefinition_OnInterruptionEnterStart::interruptee' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.OnInterruptionExitEnd
// 0x0010 (0x0010 - 0x0000)
struct InterruptionDefinition_OnInterruptionExitEnd final
{
public:
	class ADBDPlayer*                             interruptor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             interruptee;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_OnInterruptionExitEnd) == 0x000008, "Wrong alignment on InterruptionDefinition_OnInterruptionExitEnd");
static_assert(sizeof(InterruptionDefinition_OnInterruptionExitEnd) == 0x000010, "Wrong size on InterruptionDefinition_OnInterruptionExitEnd");
static_assert(offsetof(InterruptionDefinition_OnInterruptionExitEnd, interruptor) == 0x000000, "Member 'InterruptionDefinition_OnInterruptionExitEnd::interruptor' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_OnInterruptionExitEnd, interruptee) == 0x000008, "Member 'InterruptionDefinition_OnInterruptionExitEnd::interruptee' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.OnInterruptionUpdateStart
// 0x0010 (0x0010 - 0x0000)
struct InterruptionDefinition_OnInterruptionUpdateStart final
{
public:
	class ADBDPlayer*                             interruptor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             interruptee;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_OnInterruptionUpdateStart) == 0x000008, "Wrong alignment on InterruptionDefinition_OnInterruptionUpdateStart");
static_assert(sizeof(InterruptionDefinition_OnInterruptionUpdateStart) == 0x000010, "Wrong size on InterruptionDefinition_OnInterruptionUpdateStart");
static_assert(offsetof(InterruptionDefinition_OnInterruptionUpdateStart, interruptor) == 0x000000, "Member 'InterruptionDefinition_OnInterruptionUpdateStart::interruptor' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_OnInterruptionUpdateStart, interruptee) == 0x000008, "Member 'InterruptionDefinition_OnInterruptionUpdateStart::interruptee' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.SetInterruptorSnapPoint
// 0x0030 (0x0030 - 0x0000)
struct InterruptionDefinition_SetInterruptorSnapPoint final
{
public:
	struct FTransform                             Point;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_SetInterruptorSnapPoint) == 0x000010, "Wrong alignment on InterruptionDefinition_SetInterruptorSnapPoint");
static_assert(sizeof(InterruptionDefinition_SetInterruptorSnapPoint) == 0x000030, "Wrong size on InterruptionDefinition_SetInterruptorSnapPoint");
static_assert(offsetof(InterruptionDefinition_SetInterruptorSnapPoint, Point) == 0x000000, "Member 'InterruptionDefinition_SetInterruptorSnapPoint::Point' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.CanInterruptWhileCarrying
// 0x0001 (0x0001 - 0x0000)
struct InterruptionDefinition_CanInterruptWhileCarrying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_CanInterruptWhileCarrying) == 0x000001, "Wrong alignment on InterruptionDefinition_CanInterruptWhileCarrying");
static_assert(sizeof(InterruptionDefinition_CanInterruptWhileCarrying) == 0x000001, "Wrong size on InterruptionDefinition_CanInterruptWhileCarrying");
static_assert(offsetof(InterruptionDefinition_CanInterruptWhileCarrying, ReturnValue) == 0x000000, "Member 'InterruptionDefinition_CanInterruptWhileCarrying::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.GetInteractable
// 0x0008 (0x0008 - 0x0000)
struct InterruptionDefinition_GetInteractable final
{
public:
	class AInteractable*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_GetInteractable) == 0x000008, "Wrong alignment on InterruptionDefinition_GetInteractable");
static_assert(sizeof(InterruptionDefinition_GetInteractable) == 0x000008, "Wrong size on InterruptionDefinition_GetInteractable");
static_assert(offsetof(InterruptionDefinition_GetInteractable, ReturnValue) == 0x000000, "Member 'InterruptionDefinition_GetInteractable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.GetInteractionDefinition
// 0x0008 (0x0008 - 0x0000)
struct InterruptionDefinition_GetInteractionDefinition final
{
public:
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_GetInteractionDefinition) == 0x000008, "Wrong alignment on InterruptionDefinition_GetInteractionDefinition");
static_assert(sizeof(InterruptionDefinition_GetInteractionDefinition) == 0x000008, "Wrong size on InterruptionDefinition_GetInteractionDefinition");
static_assert(offsetof(InterruptionDefinition_GetInteractionDefinition, ReturnValue) == 0x000000, "Member 'InterruptionDefinition_GetInteractionDefinition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.GetInterruptionSnapPointPositionForInterruptor
// 0x0020 (0x0020 - 0x0000)
struct InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor final
{
public:
	const class ADBDPlayer*                       Interruptor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       Interruptee;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor) == 0x000008, "Wrong alignment on InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor");
static_assert(sizeof(InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor) == 0x000020, "Wrong size on InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor");
static_assert(offsetof(InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor, Interruptor) == 0x000000, "Member 'InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor::Interruptor' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor, Interruptee) == 0x000008, "Member 'InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor::Interruptee' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor, ReturnValue) == 0x000010, "Member 'InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.GetInterruptionSnapPointRotationForInterruptor
// 0x0020 (0x0020 - 0x0000)
struct InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor final
{
public:
	const class ADBDPlayer*                       Interruptor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       Interruptee;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor) == 0x000008, "Wrong alignment on InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor");
static_assert(sizeof(InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor) == 0x000020, "Wrong size on InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor");
static_assert(offsetof(InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor, Interruptor) == 0x000000, "Member 'InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor::Interruptor' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor, Interruptee) == 0x000008, "Member 'InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor::Interruptee' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor, ReturnValue) == 0x000010, "Member 'InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.InteractionCheckHeightDelta
// 0x0018 (0x0018 - 0x0000)
struct InterruptionDefinition_InteractionCheckHeightDelta final
{
public:
	const class ADBDPlayer*                       interruptor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       interruptee;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InterruptionDefinition_InteractionCheckHeightDelta) == 0x000008, "Wrong alignment on InterruptionDefinition_InteractionCheckHeightDelta");
static_assert(sizeof(InterruptionDefinition_InteractionCheckHeightDelta) == 0x000018, "Wrong size on InterruptionDefinition_InteractionCheckHeightDelta");
static_assert(offsetof(InterruptionDefinition_InteractionCheckHeightDelta, interruptor) == 0x000000, "Member 'InterruptionDefinition_InteractionCheckHeightDelta::interruptor' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_InteractionCheckHeightDelta, interruptee) == 0x000008, "Member 'InterruptionDefinition_InteractionCheckHeightDelta::interruptee' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_InteractionCheckHeightDelta, ReturnValue) == 0x000010, "Member 'InterruptionDefinition_InteractionCheckHeightDelta::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.IsInterruptionPossible
// 0x0018 (0x0018 - 0x0000)
struct InterruptionDefinition_IsInterruptionPossible final
{
public:
	const class ADBDPlayer*                       interruptor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       interruptee;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InterruptionDefinition_IsInterruptionPossible) == 0x000008, "Wrong alignment on InterruptionDefinition_IsInterruptionPossible");
static_assert(sizeof(InterruptionDefinition_IsInterruptionPossible) == 0x000018, "Wrong size on InterruptionDefinition_IsInterruptionPossible");
static_assert(offsetof(InterruptionDefinition_IsInterruptionPossible, interruptor) == 0x000000, "Member 'InterruptionDefinition_IsInterruptionPossible::interruptor' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_IsInterruptionPossible, interruptee) == 0x000008, "Member 'InterruptionDefinition_IsInterruptionPossible::interruptee' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_IsInterruptionPossible, ReturnValue) == 0x000010, "Member 'InterruptionDefinition_IsInterruptionPossible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.IsUsingAttack
// 0x0001 (0x0001 - 0x0000)
struct InterruptionDefinition_IsUsingAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_IsUsingAttack) == 0x000001, "Wrong alignment on InterruptionDefinition_IsUsingAttack");
static_assert(sizeof(InterruptionDefinition_IsUsingAttack) == 0x000001, "Wrong size on InterruptionDefinition_IsUsingAttack");
static_assert(offsetof(InterruptionDefinition_IsUsingAttack, ReturnValue) == 0x000000, "Member 'InterruptionDefinition_IsUsingAttack::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.IsUsingMontageFollower
// 0x0001 (0x0001 - 0x0000)
struct InterruptionDefinition_IsUsingMontageFollower final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_IsUsingMontageFollower) == 0x000001, "Wrong alignment on InterruptionDefinition_IsUsingMontageFollower");
static_assert(sizeof(InterruptionDefinition_IsUsingMontageFollower) == 0x000001, "Wrong size on InterruptionDefinition_IsUsingMontageFollower");
static_assert(offsetof(InterruptionDefinition_IsUsingMontageFollower, ReturnValue) == 0x000000, "Member 'InterruptionDefinition_IsUsingMontageFollower::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemPerformedInteraction.IsInteractionPerformedWithItem
// 0x0010 (0x0010 - 0x0000)
struct ItemPerformedInteraction_IsInteractionPerformedWithItem final
{
public:
	class ADBDPlayer*                             instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemPerformedInteraction_IsInteractionPerformedWithItem) == 0x000008, "Wrong alignment on ItemPerformedInteraction_IsInteractionPerformedWithItem");
static_assert(sizeof(ItemPerformedInteraction_IsInteractionPerformedWithItem) == 0x000010, "Wrong size on ItemPerformedInteraction_IsInteractionPerformedWithItem");
static_assert(offsetof(ItemPerformedInteraction_IsInteractionPerformedWithItem, instigator) == 0x000000, "Member 'ItemPerformedInteraction_IsInteractionPerformedWithItem::instigator' has a wrong offset!");
static_assert(offsetof(ItemPerformedInteraction_IsInteractionPerformedWithItem, ReturnValue) == 0x000008, "Member 'ItemPerformedInteraction_IsInteractionPerformedWithItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemVfx.AddNiagaraComponent
// 0x0008 (0x0008 - 0x0000)
struct ItemVfx_AddNiagaraComponent final
{
public:
	class UNiagaraComponent*                      niagaraComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemVfx_AddNiagaraComponent) == 0x000008, "Wrong alignment on ItemVfx_AddNiagaraComponent");
static_assert(sizeof(ItemVfx_AddNiagaraComponent) == 0x000008, "Wrong size on ItemVfx_AddNiagaraComponent");
static_assert(offsetof(ItemVfx_AddNiagaraComponent, niagaraComponent) == 0x000000, "Member 'ItemVfx_AddNiagaraComponent::niagaraComponent' has a wrong offset!");

// Function DeadByDaylight.ItemVfx.AddParticleSystemComponent
// 0x0008 (0x0008 - 0x0000)
struct ItemVfx_AddParticleSystemComponent final
{
public:
	class UParticleSystemComponent*               particleSystemComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemVfx_AddParticleSystemComponent) == 0x000008, "Wrong alignment on ItemVfx_AddParticleSystemComponent");
static_assert(sizeof(ItemVfx_AddParticleSystemComponent) == 0x000008, "Wrong size on ItemVfx_AddParticleSystemComponent");
static_assert(offsetof(ItemVfx_AddParticleSystemComponent, particleSystemComponent) == 0x000000, "Member 'ItemVfx_AddParticleSystemComponent::particleSystemComponent' has a wrong offset!");

// Function DeadByDaylight.ItemVfx.AttachToSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct ItemVfx_AttachToSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletonPart;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemVfx_AttachToSkeletalMesh) == 0x000008, "Wrong alignment on ItemVfx_AttachToSkeletalMesh");
static_assert(sizeof(ItemVfx_AttachToSkeletalMesh) == 0x000008, "Wrong size on ItemVfx_AttachToSkeletalMesh");
static_assert(offsetof(ItemVfx_AttachToSkeletalMesh, SkeletonPart) == 0x000000, "Member 'ItemVfx_AttachToSkeletalMesh::SkeletonPart' has a wrong offset!");

// Function DeadByDaylight.ItemVfx.SpawnNiagaraSystemAttached
// 0x0050 (0x0050 - 0x0000)
struct ItemVfx_SpawnNiagaraSystemAttached final
{
public:
	class UNiagaraSystem*                         systemTemplate;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        attachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   attachPointName;                                   // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               locationType;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          autoDestroy;                                       // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENCPoolMethod                                 poolingMethod;                                     // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                location;                                          // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               rotation;                                          // 0x002C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                scale;                                             // 0x0038(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          autoActivate;                                      // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          preCullCheck;                                      // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          absoluteRotation;                                  // 0x0046(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          hideInFPV;                                         // 0x0047(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0048(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemVfx_SpawnNiagaraSystemAttached) == 0x000008, "Wrong alignment on ItemVfx_SpawnNiagaraSystemAttached");
static_assert(sizeof(ItemVfx_SpawnNiagaraSystemAttached) == 0x000050, "Wrong size on ItemVfx_SpawnNiagaraSystemAttached");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, systemTemplate) == 0x000000, "Member 'ItemVfx_SpawnNiagaraSystemAttached::systemTemplate' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, attachToComponent) == 0x000008, "Member 'ItemVfx_SpawnNiagaraSystemAttached::attachToComponent' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, attachPointName) == 0x000010, "Member 'ItemVfx_SpawnNiagaraSystemAttached::attachPointName' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, locationType) == 0x00001C, "Member 'ItemVfx_SpawnNiagaraSystemAttached::locationType' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, autoDestroy) == 0x00001D, "Member 'ItemVfx_SpawnNiagaraSystemAttached::autoDestroy' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, poolingMethod) == 0x00001E, "Member 'ItemVfx_SpawnNiagaraSystemAttached::poolingMethod' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, location) == 0x000020, "Member 'ItemVfx_SpawnNiagaraSystemAttached::location' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, rotation) == 0x00002C, "Member 'ItemVfx_SpawnNiagaraSystemAttached::rotation' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, scale) == 0x000038, "Member 'ItemVfx_SpawnNiagaraSystemAttached::scale' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, autoActivate) == 0x000044, "Member 'ItemVfx_SpawnNiagaraSystemAttached::autoActivate' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, preCullCheck) == 0x000045, "Member 'ItemVfx_SpawnNiagaraSystemAttached::preCullCheck' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, absoluteRotation) == 0x000046, "Member 'ItemVfx_SpawnNiagaraSystemAttached::absoluteRotation' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, hideInFPV) == 0x000047, "Member 'ItemVfx_SpawnNiagaraSystemAttached::hideInFPV' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, ReturnValue) == 0x000048, "Member 'ItemVfx_SpawnNiagaraSystemAttached::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.KillerAtlantaTutorialLevel.SetBearTrapSurvivor
// 0x0008 (0x0008 - 0x0000)
struct KillerAtlantaTutorialLevel_SetBearTrapSurvivor final
{
public:
	class ACamperPlayer*                          camperPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAtlantaTutorialLevel_SetBearTrapSurvivor) == 0x000008, "Wrong alignment on KillerAtlantaTutorialLevel_SetBearTrapSurvivor");
static_assert(sizeof(KillerAtlantaTutorialLevel_SetBearTrapSurvivor) == 0x000008, "Wrong size on KillerAtlantaTutorialLevel_SetBearTrapSurvivor");
static_assert(offsetof(KillerAtlantaTutorialLevel_SetBearTrapSurvivor, camperPlayer) == 0x000000, "Member 'KillerAtlantaTutorialLevel_SetBearTrapSurvivor::camperPlayer' has a wrong offset!");

// Function DeadByDaylight.KillerAtlantaTutorialLevel.SetChaseSurvivor
// 0x0008 (0x0008 - 0x0000)
struct KillerAtlantaTutorialLevel_SetChaseSurvivor final
{
public:
	class ACamperPlayer*                          camperPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAtlantaTutorialLevel_SetChaseSurvivor) == 0x000008, "Wrong alignment on KillerAtlantaTutorialLevel_SetChaseSurvivor");
static_assert(sizeof(KillerAtlantaTutorialLevel_SetChaseSurvivor) == 0x000008, "Wrong size on KillerAtlantaTutorialLevel_SetChaseSurvivor");
static_assert(offsetof(KillerAtlantaTutorialLevel_SetChaseSurvivor, camperPlayer) == 0x000000, "Member 'KillerAtlantaTutorialLevel_SetChaseSurvivor::camperPlayer' has a wrong offset!");

// Function DeadByDaylight.KillerAtlantaTutorialLevel.SetControlledSlasherPlayer
// 0x0008 (0x0008 - 0x0000)
struct KillerAtlantaTutorialLevel_SetControlledSlasherPlayer final
{
public:
	class ASlasherPlayer*                         slasherPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAtlantaTutorialLevel_SetControlledSlasherPlayer) == 0x000008, "Wrong alignment on KillerAtlantaTutorialLevel_SetControlledSlasherPlayer");
static_assert(sizeof(KillerAtlantaTutorialLevel_SetControlledSlasherPlayer) == 0x000008, "Wrong size on KillerAtlantaTutorialLevel_SetControlledSlasherPlayer");
static_assert(offsetof(KillerAtlantaTutorialLevel_SetControlledSlasherPlayer, slasherPlayer) == 0x000000, "Member 'KillerAtlantaTutorialLevel_SetControlledSlasherPlayer::slasherPlayer' has a wrong offset!");

// Function DeadByDaylight.KillerAtlantaTutorialLevel.SetEscapeDoor
// 0x0008 (0x0008 - 0x0000)
struct KillerAtlantaTutorialLevel_SetEscapeDoor final
{
public:
	class AEscapeDoor*                            targetEscapeDoor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAtlantaTutorialLevel_SetEscapeDoor) == 0x000008, "Wrong alignment on KillerAtlantaTutorialLevel_SetEscapeDoor");
static_assert(sizeof(KillerAtlantaTutorialLevel_SetEscapeDoor) == 0x000008, "Wrong size on KillerAtlantaTutorialLevel_SetEscapeDoor");
static_assert(offsetof(KillerAtlantaTutorialLevel_SetEscapeDoor, targetEscapeDoor) == 0x000000, "Member 'KillerAtlantaTutorialLevel_SetEscapeDoor::targetEscapeDoor' has a wrong offset!");

// Function DeadByDaylight.KillerAtlantaTutorialLevel.SetGenerator
// 0x0008 (0x0008 - 0x0000)
struct KillerAtlantaTutorialLevel_SetGenerator final
{
public:
	class AGenerator*                             generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAtlantaTutorialLevel_SetGenerator) == 0x000008, "Wrong alignment on KillerAtlantaTutorialLevel_SetGenerator");
static_assert(sizeof(KillerAtlantaTutorialLevel_SetGenerator) == 0x000008, "Wrong size on KillerAtlantaTutorialLevel_SetGenerator");
static_assert(offsetof(KillerAtlantaTutorialLevel_SetGenerator, generator) == 0x000000, "Member 'KillerAtlantaTutorialLevel_SetGenerator::generator' has a wrong offset!");

// Function DeadByDaylight.KillerAtlantaTutorialLevel.SetHatch
// 0x0008 (0x0008 - 0x0000)
struct KillerAtlantaTutorialLevel_SetHatch final
{
public:
	class AHatch*                                 targetHatch;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAtlantaTutorialLevel_SetHatch) == 0x000008, "Wrong alignment on KillerAtlantaTutorialLevel_SetHatch");
static_assert(sizeof(KillerAtlantaTutorialLevel_SetHatch) == 0x000008, "Wrong size on KillerAtlantaTutorialLevel_SetHatch");
static_assert(offsetof(KillerAtlantaTutorialLevel_SetHatch, targetHatch) == 0x000000, "Member 'KillerAtlantaTutorialLevel_SetHatch::targetHatch' has a wrong offset!");

// Function DeadByDaylight.KillerAtlantaTutorialLevel.SetVaultWindow
// 0x0008 (0x0008 - 0x0000)
struct KillerAtlantaTutorialLevel_SetVaultWindow final
{
public:
	class AWindow*                                window;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAtlantaTutorialLevel_SetVaultWindow) == 0x000008, "Wrong alignment on KillerAtlantaTutorialLevel_SetVaultWindow");
static_assert(sizeof(KillerAtlantaTutorialLevel_SetVaultWindow) == 0x000008, "Wrong size on KillerAtlantaTutorialLevel_SetVaultWindow");
static_assert(offsetof(KillerAtlantaTutorialLevel_SetVaultWindow, window) == 0x000000, "Member 'KillerAtlantaTutorialLevel_SetVaultWindow::window' has a wrong offset!");

// Function DeadByDaylight.KillerAtlantaTutorialLevel.TriggerEndGameSequenceAnimation
// 0x0001 (0x0001 - 0x0000)
struct KillerAtlantaTutorialLevel_TriggerEndGameSequenceAnimation final
{
public:
	EKillerTutorialEndGameType                    camperDeathType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAtlantaTutorialLevel_TriggerEndGameSequenceAnimation) == 0x000001, "Wrong alignment on KillerAtlantaTutorialLevel_TriggerEndGameSequenceAnimation");
static_assert(sizeof(KillerAtlantaTutorialLevel_TriggerEndGameSequenceAnimation) == 0x000001, "Wrong size on KillerAtlantaTutorialLevel_TriggerEndGameSequenceAnimation");
static_assert(offsetof(KillerAtlantaTutorialLevel_TriggerEndGameSequenceAnimation, camperDeathType) == 0x000000, "Member 'KillerAtlantaTutorialLevel_TriggerEndGameSequenceAnimation::camperDeathType' has a wrong offset!");

// Function DeadByDaylight.KillerAudioHandlerComponent.ChaseTriggerKillerReactionSpecificSurvivorSFX
// 0x0008 (0x0008 - 0x0000)
struct KillerAudioHandlerComponent_ChaseTriggerKillerReactionSpecificSurvivorSFX final
{
public:
	class ADBDPlayer*                             camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAudioHandlerComponent_ChaseTriggerKillerReactionSpecificSurvivorSFX) == 0x000008, "Wrong alignment on KillerAudioHandlerComponent_ChaseTriggerKillerReactionSpecificSurvivorSFX");
static_assert(sizeof(KillerAudioHandlerComponent_ChaseTriggerKillerReactionSpecificSurvivorSFX) == 0x000008, "Wrong size on KillerAudioHandlerComponent_ChaseTriggerKillerReactionSpecificSurvivorSFX");
static_assert(offsetof(KillerAudioHandlerComponent_ChaseTriggerKillerReactionSpecificSurvivorSFX, camper) == 0x000000, "Member 'KillerAudioHandlerComponent_ChaseTriggerKillerReactionSpecificSurvivorSFX::camper' has a wrong offset!");

// Function DeadByDaylight.KillerAudioHandlerComponent.HitImpactOnSurvivorSFX
// 0x0010 (0x0010 - 0x0000)
struct KillerAudioHandlerComponent_HitImpactOnSurvivorSFX final
{
public:
	class ACamperPlayer*                          camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackType                                   attackType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isWeaponHit;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KillerAudioHandlerComponent_HitImpactOnSurvivorSFX) == 0x000008, "Wrong alignment on KillerAudioHandlerComponent_HitImpactOnSurvivorSFX");
static_assert(sizeof(KillerAudioHandlerComponent_HitImpactOnSurvivorSFX) == 0x000010, "Wrong size on KillerAudioHandlerComponent_HitImpactOnSurvivorSFX");
static_assert(offsetof(KillerAudioHandlerComponent_HitImpactOnSurvivorSFX, camper) == 0x000000, "Member 'KillerAudioHandlerComponent_HitImpactOnSurvivorSFX::camper' has a wrong offset!");
static_assert(offsetof(KillerAudioHandlerComponent_HitImpactOnSurvivorSFX, attackType) == 0x000008, "Member 'KillerAudioHandlerComponent_HitImpactOnSurvivorSFX::attackType' has a wrong offset!");
static_assert(offsetof(KillerAudioHandlerComponent_HitImpactOnSurvivorSFX, isWeaponHit) == 0x000009, "Member 'KillerAudioHandlerComponent_HitImpactOnSurvivorSFX::isWeaponHit' has a wrong offset!");

// Function DeadByDaylight.KillerAudioHandlerComponent.OnChaseStart
// 0x0008 (0x0008 - 0x0000)
struct KillerAudioHandlerComponent_OnChaseStart final
{
public:
	class ADBDPlayer*                             chasedSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAudioHandlerComponent_OnChaseStart) == 0x000008, "Wrong alignment on KillerAudioHandlerComponent_OnChaseStart");
static_assert(sizeof(KillerAudioHandlerComponent_OnChaseStart) == 0x000008, "Wrong size on KillerAudioHandlerComponent_OnChaseStart");
static_assert(offsetof(KillerAudioHandlerComponent_OnChaseStart, chasedSurvivor) == 0x000000, "Member 'KillerAudioHandlerComponent_OnChaseStart::chasedSurvivor' has a wrong offset!");

// Function DeadByDaylight.KillerAudioHandlerComponent.TriggerKillerReactionSpecificSurvivorSFX
// 0x0008 (0x0008 - 0x0000)
struct KillerAudioHandlerComponent_TriggerKillerReactionSpecificSurvivorSFX final
{
public:
	class ADBDPlayer*                             camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAudioHandlerComponent_TriggerKillerReactionSpecificSurvivorSFX) == 0x000008, "Wrong alignment on KillerAudioHandlerComponent_TriggerKillerReactionSpecificSurvivorSFX");
static_assert(sizeof(KillerAudioHandlerComponent_TriggerKillerReactionSpecificSurvivorSFX) == 0x000008, "Wrong size on KillerAudioHandlerComponent_TriggerKillerReactionSpecificSurvivorSFX");
static_assert(offsetof(KillerAudioHandlerComponent_TriggerKillerReactionSpecificSurvivorSFX, camper) == 0x000000, "Member 'KillerAudioHandlerComponent_TriggerKillerReactionSpecificSurvivorSFX::camper' has a wrong offset!");

// Function DeadByDaylight.KillerAudioHandlerComponent.TriggerSurvivorDamageHitAudioSFX
// 0x0010 (0x0010 - 0x0000)
struct KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX final
{
public:
	class ACamperPlayer*                          camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackType                                   attackType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          causedKO;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isWeaponHit;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isLightHit;                                        // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX) == 0x000008, "Wrong alignment on KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX");
static_assert(sizeof(KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX) == 0x000010, "Wrong size on KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX");
static_assert(offsetof(KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX, camper) == 0x000000, "Member 'KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX::camper' has a wrong offset!");
static_assert(offsetof(KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX, attackType) == 0x000008, "Member 'KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX::attackType' has a wrong offset!");
static_assert(offsetof(KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX, causedKO) == 0x000009, "Member 'KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX::causedKO' has a wrong offset!");
static_assert(offsetof(KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX, isWeaponHit) == 0x00000A, "Member 'KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX::isWeaponHit' has a wrong offset!");
static_assert(offsetof(KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX, isLightHit) == 0x00000B, "Member 'KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX::isLightHit' has a wrong offset!");

// Function DeadByDaylight.KillerAudioMenuReactionComponent.LobbyKillerReactionSpecificSurvivorSFX
// 0x0010 (0x0010 - 0x0000)
struct KillerAudioMenuReactionComponent_LobbyKillerReactionSpecificSurvivorSFX final
{
public:
	TArray<class ADBDMenuPlayer*>                 menuPlayers;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAudioMenuReactionComponent_LobbyKillerReactionSpecificSurvivorSFX) == 0x000008, "Wrong alignment on KillerAudioMenuReactionComponent_LobbyKillerReactionSpecificSurvivorSFX");
static_assert(sizeof(KillerAudioMenuReactionComponent_LobbyKillerReactionSpecificSurvivorSFX) == 0x000010, "Wrong size on KillerAudioMenuReactionComponent_LobbyKillerReactionSpecificSurvivorSFX");
static_assert(offsetof(KillerAudioMenuReactionComponent_LobbyKillerReactionSpecificSurvivorSFX, menuPlayers) == 0x000000, "Member 'KillerAudioMenuReactionComponent_LobbyKillerReactionSpecificSurvivorSFX::menuPlayers' has a wrong offset!");

// Function DeadByDaylight.KillerBlindingFXComponent.Multicast_OnBlindedByPlayersCosmetic
// 0x0010 (0x0010 - 0x0000)
struct KillerBlindingFXComponent_Multicast_OnBlindedByPlayersCosmetic final
{
public:
	TArray<class ADBDPlayer*>                     players;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerBlindingFXComponent_Multicast_OnBlindedByPlayersCosmetic) == 0x000008, "Wrong alignment on KillerBlindingFXComponent_Multicast_OnBlindedByPlayersCosmetic");
static_assert(sizeof(KillerBlindingFXComponent_Multicast_OnBlindedByPlayersCosmetic) == 0x000010, "Wrong size on KillerBlindingFXComponent_Multicast_OnBlindedByPlayersCosmetic");
static_assert(offsetof(KillerBlindingFXComponent_Multicast_OnBlindedByPlayersCosmetic, players) == 0x000000, "Member 'KillerBlindingFXComponent_Multicast_OnBlindedByPlayersCosmetic::players' has a wrong offset!");

// Function DeadByDaylight.KillerIntroComponent.KillerCameraPanInUpdateNative
// 0x0004 (0x0004 - 0x0000)
struct KillerIntroComponent_KillerCameraPanInUpdateNative final
{
public:
	float                                         killerIntroCompletedPercent;                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerIntroComponent_KillerCameraPanInUpdateNative) == 0x000004, "Wrong alignment on KillerIntroComponent_KillerCameraPanInUpdateNative");
static_assert(sizeof(KillerIntroComponent_KillerCameraPanInUpdateNative) == 0x000004, "Wrong size on KillerIntroComponent_KillerCameraPanInUpdateNative");
static_assert(offsetof(KillerIntroComponent_KillerCameraPanInUpdateNative, killerIntroCompletedPercent) == 0x000000, "Member 'KillerIntroComponent_KillerCameraPanInUpdateNative::killerIntroCompletedPercent' has a wrong offset!");

// Function DeadByDaylight.KillerNoiseIndicatorWidget.SetSoundDistancePercentage
// 0x0004 (0x0004 - 0x0000)
struct KillerNoiseIndicatorWidget_SetSoundDistancePercentage final
{
public:
	float                                         distancePercentage;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerNoiseIndicatorWidget_SetSoundDistancePercentage) == 0x000004, "Wrong alignment on KillerNoiseIndicatorWidget_SetSoundDistancePercentage");
static_assert(sizeof(KillerNoiseIndicatorWidget_SetSoundDistancePercentage) == 0x000004, "Wrong size on KillerNoiseIndicatorWidget_SetSoundDistancePercentage");
static_assert(offsetof(KillerNoiseIndicatorWidget_SetSoundDistancePercentage, distancePercentage) == 0x000000, "Member 'KillerNoiseIndicatorWidget_SetSoundDistancePercentage::distancePercentage' has a wrong offset!");

// Function DeadByDaylight.KillerProjectileDodgeComponent.OnKillerProjectileFinished
// 0x0008 (0x0008 - 0x0000)
struct KillerProjectileDodgeComponent_OnKillerProjectileFinished final
{
public:
	class AActor*                                 survivorHit;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerProjectileDodgeComponent_OnKillerProjectileFinished) == 0x000008, "Wrong alignment on KillerProjectileDodgeComponent_OnKillerProjectileFinished");
static_assert(sizeof(KillerProjectileDodgeComponent_OnKillerProjectileFinished) == 0x000008, "Wrong size on KillerProjectileDodgeComponent_OnKillerProjectileFinished");
static_assert(offsetof(KillerProjectileDodgeComponent_OnKillerProjectileFinished, survivorHit) == 0x000000, "Member 'KillerProjectileDodgeComponent_OnKillerProjectileFinished::survivorHit' has a wrong offset!");

// Function DeadByDaylight.KillerProjectileLauncher.GetOwningKiller
// 0x0008 (0x0008 - 0x0000)
struct KillerProjectileLauncher_GetOwningKiller final
{
public:
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerProjectileLauncher_GetOwningKiller) == 0x000008, "Wrong alignment on KillerProjectileLauncher_GetOwningKiller");
static_assert(sizeof(KillerProjectileLauncher_GetOwningKiller) == 0x000008, "Wrong size on KillerProjectileLauncher_GetOwningKiller");
static_assert(offsetof(KillerProjectileLauncher_GetOwningKiller, ReturnValue) == 0x000000, "Member 'KillerProjectileLauncher_GetOwningKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.KillerRedStainUpdateStrategy.OnHeadHiddenChanged
// 0x0001 (0x0001 - 0x0000)
struct KillerRedStainUpdateStrategy_OnHeadHiddenChanged final
{
public:
	bool                                          isHidden;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerRedStainUpdateStrategy_OnHeadHiddenChanged) == 0x000001, "Wrong alignment on KillerRedStainUpdateStrategy_OnHeadHiddenChanged");
static_assert(sizeof(KillerRedStainUpdateStrategy_OnHeadHiddenChanged) == 0x000001, "Wrong size on KillerRedStainUpdateStrategy_OnHeadHiddenChanged");
static_assert(offsetof(KillerRedStainUpdateStrategy_OnHeadHiddenChanged, isHidden) == 0x000000, "Member 'KillerRedStainUpdateStrategy_OnHeadHiddenChanged::isHidden' has a wrong offset!");

// Function DeadByDaylight.KillerSoundCuesComponent.StartTrackingActor
// 0x0018 (0x0018 - 0x0000)
struct KillerSoundCuesComponent_StartTrackingActor final
{
public:
	class AActor*                                 actorToStartTracking;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   distanceDataID;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KillerSoundCuesComponent_StartTrackingActor) == 0x000008, "Wrong alignment on KillerSoundCuesComponent_StartTrackingActor");
static_assert(sizeof(KillerSoundCuesComponent_StartTrackingActor) == 0x000018, "Wrong size on KillerSoundCuesComponent_StartTrackingActor");
static_assert(offsetof(KillerSoundCuesComponent_StartTrackingActor, actorToStartTracking) == 0x000000, "Member 'KillerSoundCuesComponent_StartTrackingActor::actorToStartTracking' has a wrong offset!");
static_assert(offsetof(KillerSoundCuesComponent_StartTrackingActor, distanceDataID) == 0x000008, "Member 'KillerSoundCuesComponent_StartTrackingActor::distanceDataID' has a wrong offset!");

// Function DeadByDaylight.KillerSoundCuesComponent.StartTrackingActorWithLifetime
// 0x0018 (0x0018 - 0x0000)
struct KillerSoundCuesComponent_StartTrackingActorWithLifetime final
{
public:
	class AActor*                                 actorToStartTracking;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   distanceDataID;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         trackerLifetime;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerSoundCuesComponent_StartTrackingActorWithLifetime) == 0x000008, "Wrong alignment on KillerSoundCuesComponent_StartTrackingActorWithLifetime");
static_assert(sizeof(KillerSoundCuesComponent_StartTrackingActorWithLifetime) == 0x000018, "Wrong size on KillerSoundCuesComponent_StartTrackingActorWithLifetime");
static_assert(offsetof(KillerSoundCuesComponent_StartTrackingActorWithLifetime, actorToStartTracking) == 0x000000, "Member 'KillerSoundCuesComponent_StartTrackingActorWithLifetime::actorToStartTracking' has a wrong offset!");
static_assert(offsetof(KillerSoundCuesComponent_StartTrackingActorWithLifetime, distanceDataID) == 0x000008, "Member 'KillerSoundCuesComponent_StartTrackingActorWithLifetime::distanceDataID' has a wrong offset!");
static_assert(offsetof(KillerSoundCuesComponent_StartTrackingActorWithLifetime, trackerLifetime) == 0x000014, "Member 'KillerSoundCuesComponent_StartTrackingActorWithLifetime::trackerLifetime' has a wrong offset!");

// Function DeadByDaylight.KillerSoundCuesComponent.StopTrackingActor
// 0x0008 (0x0008 - 0x0000)
struct KillerSoundCuesComponent_StopTrackingActor final
{
public:
	class AActor*                                 actorToStopTracking;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerSoundCuesComponent_StopTrackingActor) == 0x000008, "Wrong alignment on KillerSoundCuesComponent_StopTrackingActor");
static_assert(sizeof(KillerSoundCuesComponent_StopTrackingActor) == 0x000008, "Wrong size on KillerSoundCuesComponent_StopTrackingActor");
static_assert(offsetof(KillerSoundCuesComponent_StopTrackingActor, actorToStopTracking) == 0x000000, "Member 'KillerSoundCuesComponent_StopTrackingActor::actorToStopTracking' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.ChangeLanternState
// 0x0001 (0x0001 - 0x0000)
struct LanternInteractable_ChangeLanternState final
{
public:
	ELanternState                                 newLanternState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_ChangeLanternState) == 0x000001, "Wrong alignment on LanternInteractable_ChangeLanternState");
static_assert(sizeof(LanternInteractable_ChangeLanternState) == 0x000001, "Wrong size on LanternInteractable_ChangeLanternState");
static_assert(offsetof(LanternInteractable_ChangeLanternState, newLanternState) == 0x000000, "Member 'LanternInteractable_ChangeLanternState::newLanternState' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.CollectLight
// 0x0008 (0x0008 - 0x0000)
struct LanternInteractable_CollectLight final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_CollectLight) == 0x000008, "Wrong alignment on LanternInteractable_CollectLight");
static_assert(sizeof(LanternInteractable_CollectLight) == 0x000008, "Wrong size on LanternInteractable_CollectLight");
static_assert(offsetof(LanternInteractable_CollectLight, player) == 0x000000, "Member 'LanternInteractable_CollectLight::player' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.OnCamperLeavingHook
// 0x0038 (0x0038 - 0x0000)
struct LanternInteractable_OnCamperLeavingHook final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_OnCamperLeavingHook) == 0x000008, "Wrong alignment on LanternInteractable_OnCamperLeavingHook");
static_assert(sizeof(LanternInteractable_OnCamperLeavingHook) == 0x000038, "Wrong size on LanternInteractable_OnCamperLeavingHook");
static_assert(offsetof(LanternInteractable_OnCamperLeavingHook, gameEventType) == 0x000000, "Member 'LanternInteractable_OnCamperLeavingHook::gameEventType' has a wrong offset!");
static_assert(offsetof(LanternInteractable_OnCamperLeavingHook, gameEventData) == 0x000010, "Member 'LanternInteractable_OnCamperLeavingHook::gameEventData' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.OnCamperWasHooked
// 0x0038 (0x0038 - 0x0000)
struct LanternInteractable_OnCamperWasHooked final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_OnCamperWasHooked) == 0x000008, "Wrong alignment on LanternInteractable_OnCamperWasHooked");
static_assert(sizeof(LanternInteractable_OnCamperWasHooked) == 0x000038, "Wrong size on LanternInteractable_OnCamperWasHooked");
static_assert(offsetof(LanternInteractable_OnCamperWasHooked, gameEventType) == 0x000000, "Member 'LanternInteractable_OnCamperWasHooked::gameEventType' has a wrong offset!");
static_assert(offsetof(LanternInteractable_OnCamperWasHooked, gameEventData) == 0x000010, "Member 'LanternInteractable_OnCamperWasHooked::gameEventData' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.OnSlasherDestroyedLantern
// 0x0038 (0x0038 - 0x0000)
struct LanternInteractable_OnSlasherDestroyedLantern final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_OnSlasherDestroyedLantern) == 0x000008, "Wrong alignment on LanternInteractable_OnSlasherDestroyedLantern");
static_assert(sizeof(LanternInteractable_OnSlasherDestroyedLantern) == 0x000038, "Wrong size on LanternInteractable_OnSlasherDestroyedLantern");
static_assert(offsetof(LanternInteractable_OnSlasherDestroyedLantern, gameEventType) == 0x000000, "Member 'LanternInteractable_OnSlasherDestroyedLantern::gameEventType' has a wrong offset!");
static_assert(offsetof(LanternInteractable_OnSlasherDestroyedLantern, gameEventData) == 0x000010, "Member 'LanternInteractable_OnSlasherDestroyedLantern::gameEventData' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.SlasherDestroyLantern
// 0x0008 (0x0008 - 0x0000)
struct LanternInteractable_SlasherDestroyLantern final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_SlasherDestroyLantern) == 0x000008, "Wrong alignment on LanternInteractable_SlasherDestroyLantern");
static_assert(sizeof(LanternInteractable_SlasherDestroyLantern) == 0x000008, "Wrong size on LanternInteractable_SlasherDestroyLantern");
static_assert(offsetof(LanternInteractable_SlasherDestroyLantern, player) == 0x000000, "Member 'LanternInteractable_SlasherDestroyLantern::player' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.CanBeCollected
// 0x0001 (0x0001 - 0x0000)
struct LanternInteractable_CanBeCollected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_CanBeCollected) == 0x000001, "Wrong alignment on LanternInteractable_CanBeCollected");
static_assert(sizeof(LanternInteractable_CanBeCollected) == 0x000001, "Wrong size on LanternInteractable_CanBeCollected");
static_assert(offsetof(LanternInteractable_CanBeCollected, ReturnValue) == 0x000000, "Member 'LanternInteractable_CanBeCollected::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.CanBeDestroyed
// 0x0001 (0x0001 - 0x0000)
struct LanternInteractable_CanBeDestroyed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_CanBeDestroyed) == 0x000001, "Wrong alignment on LanternInteractable_CanBeDestroyed");
static_assert(sizeof(LanternInteractable_CanBeDestroyed) == 0x000001, "Wrong size on LanternInteractable_CanBeDestroyed");
static_assert(offsetof(LanternInteractable_CanBeDestroyed, ReturnValue) == 0x000000, "Member 'LanternInteractable_CanBeDestroyed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.GetLanternState
// 0x0001 (0x0001 - 0x0000)
struct LanternInteractable_GetLanternState final
{
public:
	ELanternState                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_GetLanternState) == 0x000001, "Wrong alignment on LanternInteractable_GetLanternState");
static_assert(sizeof(LanternInteractable_GetLanternState) == 0x000001, "Wrong size on LanternInteractable_GetLanternState");
static_assert(offsetof(LanternInteractable_GetLanternState, ReturnValue) == 0x000000, "Member 'LanternInteractable_GetLanternState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LevelReadyToPlayPlayerComponent.Server_SetIsReadyToPlay
// 0x0004 (0x0004 - 0x0000)
struct LevelReadyToPlayPlayerComponent_Server_SetIsReadyToPlay final
{
public:
	uint32                                        readyToPlay;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelReadyToPlayPlayerComponent_Server_SetIsReadyToPlay) == 0x000004, "Wrong alignment on LevelReadyToPlayPlayerComponent_Server_SetIsReadyToPlay");
static_assert(sizeof(LevelReadyToPlayPlayerComponent_Server_SetIsReadyToPlay) == 0x000004, "Wrong size on LevelReadyToPlayPlayerComponent_Server_SetIsReadyToPlay");
static_assert(offsetof(LevelReadyToPlayPlayerComponent_Server_SetIsReadyToPlay, readyToPlay) == 0x000000, "Member 'LevelReadyToPlayPlayerComponent_Server_SetIsReadyToPlay::readyToPlay' has a wrong offset!");

// Function DeadByDaylight.LightingInterpolator.LerpHeightFog
// 0x0020 (0x0020 - 0x0000)
struct LightingInterpolator_LerpHeightFog final
{
public:
	class UExponentialHeightFogComponent*         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UExponentialHeightFogComponent*   A;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UExponentialHeightFogComponent*   B;                                                 // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         thresholdBeforeSwitchingtoB;                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingInterpolator_LerpHeightFog) == 0x000008, "Wrong alignment on LightingInterpolator_LerpHeightFog");
static_assert(sizeof(LightingInterpolator_LerpHeightFog) == 0x000020, "Wrong size on LightingInterpolator_LerpHeightFog");
static_assert(offsetof(LightingInterpolator_LerpHeightFog, Target) == 0x000000, "Member 'LightingInterpolator_LerpHeightFog::Target' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpHeightFog, A) == 0x000008, "Member 'LightingInterpolator_LerpHeightFog::A' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpHeightFog, B) == 0x000010, "Member 'LightingInterpolator_LerpHeightFog::B' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpHeightFog, alpha) == 0x000018, "Member 'LightingInterpolator_LerpHeightFog::alpha' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpHeightFog, thresholdBeforeSwitchingtoB) == 0x00001C, "Member 'LightingInterpolator_LerpHeightFog::thresholdBeforeSwitchingtoB' has a wrong offset!");

// Function DeadByDaylight.LightingInterpolator.LerpLight
// 0x0020 (0x0020 - 0x0000)
struct LightingInterpolator_LerpLight final
{
public:
	class ULightComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULightComponent*                        A;                                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULightComponent*                        B;                                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LightingInterpolator_LerpLight) == 0x000008, "Wrong alignment on LightingInterpolator_LerpLight");
static_assert(sizeof(LightingInterpolator_LerpLight) == 0x000020, "Wrong size on LightingInterpolator_LerpLight");
static_assert(offsetof(LightingInterpolator_LerpLight, Target) == 0x000000, "Member 'LightingInterpolator_LerpLight::Target' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpLight, A) == 0x000008, "Member 'LightingInterpolator_LerpLight::A' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpLight, B) == 0x000010, "Member 'LightingInterpolator_LerpLight::B' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpLight, alpha) == 0x000018, "Member 'LightingInterpolator_LerpLight::alpha' has a wrong offset!");

// Function DeadByDaylight.LightingInterpolator.LerpSkylight
// 0x0020 (0x0020 - 0x0000)
struct LightingInterpolator_LerpSkylight final
{
public:
	class USkyLightComponent*                     Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     A;                                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     B;                                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         alpha;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LightingInterpolator_LerpSkylight) == 0x000008, "Wrong alignment on LightingInterpolator_LerpSkylight");
static_assert(sizeof(LightingInterpolator_LerpSkylight) == 0x000020, "Wrong size on LightingInterpolator_LerpSkylight");
static_assert(offsetof(LightingInterpolator_LerpSkylight, Target) == 0x000000, "Member 'LightingInterpolator_LerpSkylight::Target' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpSkylight, A) == 0x000008, "Member 'LightingInterpolator_LerpSkylight::A' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpSkylight, B) == 0x000010, "Member 'LightingInterpolator_LerpSkylight::B' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpSkylight, alpha) == 0x000018, "Member 'LightingInterpolator_LerpSkylight::alpha' has a wrong offset!");

// Function DeadByDaylight.LimitAccumulationSpawnerStrategy.SetMaxOverlapping
// 0x0004 (0x0004 - 0x0000)
struct LimitAccumulationSpawnerStrategy_SetMaxOverlapping final
{
public:
	int32                                         maxOverlapping;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimitAccumulationSpawnerStrategy_SetMaxOverlapping) == 0x000004, "Wrong alignment on LimitAccumulationSpawnerStrategy_SetMaxOverlapping");
static_assert(sizeof(LimitAccumulationSpawnerStrategy_SetMaxOverlapping) == 0x000004, "Wrong size on LimitAccumulationSpawnerStrategy_SetMaxOverlapping");
static_assert(offsetof(LimitAccumulationSpawnerStrategy_SetMaxOverlapping, maxOverlapping) == 0x000000, "Member 'LimitAccumulationSpawnerStrategy_SetMaxOverlapping::maxOverlapping' has a wrong offset!");

// Function DeadByDaylight.LimitAccumulationSpawnerStrategy.SetRecycleDistancePercentage
// 0x0004 (0x0004 - 0x0000)
struct LimitAccumulationSpawnerStrategy_SetRecycleDistancePercentage final
{
public:
	float                                         recycleDistancePercentage;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimitAccumulationSpawnerStrategy_SetRecycleDistancePercentage) == 0x000004, "Wrong alignment on LimitAccumulationSpawnerStrategy_SetRecycleDistancePercentage");
static_assert(sizeof(LimitAccumulationSpawnerStrategy_SetRecycleDistancePercentage) == 0x000004, "Wrong size on LimitAccumulationSpawnerStrategy_SetRecycleDistancePercentage");
static_assert(offsetof(LimitAccumulationSpawnerStrategy_SetRecycleDistancePercentage, recycleDistancePercentage) == 0x000000, "Member 'LimitAccumulationSpawnerStrategy_SetRecycleDistancePercentage::recycleDistancePercentage' has a wrong offset!");

// Function DeadByDaylight.LimitAccumulationSpawnerStrategy.SetRecycleThresholdPercentage
// 0x0004 (0x0004 - 0x0000)
struct LimitAccumulationSpawnerStrategy_SetRecycleThresholdPercentage final
{
public:
	float                                         recycleThresholdPercentage;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimitAccumulationSpawnerStrategy_SetRecycleThresholdPercentage) == 0x000004, "Wrong alignment on LimitAccumulationSpawnerStrategy_SetRecycleThresholdPercentage");
static_assert(sizeof(LimitAccumulationSpawnerStrategy_SetRecycleThresholdPercentage) == 0x000004, "Wrong size on LimitAccumulationSpawnerStrategy_SetRecycleThresholdPercentage");
static_assert(offsetof(LimitAccumulationSpawnerStrategy_SetRecycleThresholdPercentage, recycleThresholdPercentage) == 0x000000, "Member 'LimitAccumulationSpawnerStrategy_SetRecycleThresholdPercentage::recycleThresholdPercentage' has a wrong offset!");

// Function DeadByDaylight.LobbyDialogueSubsystem.CountGuestLobbyMembersWithAudioSwitch
// 0x0020 (0x0020 - 0x0000)
struct LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch final
{
public:
	EAudioCustomizationCategory                   switchCategory;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         audioSwitches;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         numMatching;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         numNotMatching;                                    // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch) == 0x000008, "Wrong alignment on LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch");
static_assert(sizeof(LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch) == 0x000020, "Wrong size on LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch");
static_assert(offsetof(LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch, switchCategory) == 0x000000, "Member 'LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch::switchCategory' has a wrong offset!");
static_assert(offsetof(LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch, audioSwitches) == 0x000008, "Member 'LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch::audioSwitches' has a wrong offset!");
static_assert(offsetof(LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch, numMatching) == 0x000018, "Member 'LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch::numMatching' has a wrong offset!");
static_assert(offsetof(LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch, numNotMatching) == 0x00001C, "Member 'LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch::numNotMatching' has a wrong offset!");

// Function DeadByDaylight.LobbyDialogueSubsystem.GetGuestLobbyMembers
// 0x0010 (0x0010 - 0x0000)
struct LobbyDialogueSubsystem_GetGuestLobbyMembers final
{
public:
	TArray<class ADBDMenuPlayer*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyDialogueSubsystem_GetGuestLobbyMembers) == 0x000008, "Wrong alignment on LobbyDialogueSubsystem_GetGuestLobbyMembers");
static_assert(sizeof(LobbyDialogueSubsystem_GetGuestLobbyMembers) == 0x000010, "Wrong size on LobbyDialogueSubsystem_GetGuestLobbyMembers");
static_assert(offsetof(LobbyDialogueSubsystem_GetGuestLobbyMembers, ReturnValue) == 0x000000, "Member 'LobbyDialogueSubsystem_GetGuestLobbyMembers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LobbyDialogueSubsystem.HasCharacterPlayedDialogueForThisLobby
// 0x0018 (0x0018 - 0x0000)
struct LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby final
{
public:
	class FString                                 characterName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         dialogueId;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby) == 0x000008, "Wrong alignment on LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby");
static_assert(sizeof(LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby) == 0x000018, "Wrong size on LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby");
static_assert(offsetof(LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby, characterName) == 0x000000, "Member 'LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby::characterName' has a wrong offset!");
static_assert(offsetof(LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby, dialogueId) == 0x000010, "Member 'LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby::dialogueId' has a wrong offset!");
static_assert(offsetof(LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby, ReturnValue) == 0x000014, "Member 'LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LobbyDialogueSubsystem.IsLobbyFullForRole
// 0x0002 (0x0002 - 0x0000)
struct LobbyDialogueSubsystem_IsLobbyFullForRole final
{
public:
	EPlayerRole                                   role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyDialogueSubsystem_IsLobbyFullForRole) == 0x000001, "Wrong alignment on LobbyDialogueSubsystem_IsLobbyFullForRole");
static_assert(sizeof(LobbyDialogueSubsystem_IsLobbyFullForRole) == 0x000002, "Wrong size on LobbyDialogueSubsystem_IsLobbyFullForRole");
static_assert(offsetof(LobbyDialogueSubsystem_IsLobbyFullForRole, role) == 0x000000, "Member 'LobbyDialogueSubsystem_IsLobbyFullForRole::role' has a wrong offset!");
static_assert(offsetof(LobbyDialogueSubsystem_IsLobbyFullForRole, ReturnValue) == 0x000001, "Member 'LobbyDialogueSubsystem_IsLobbyFullForRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LobbyDialogueSubsystem.NotifyCharacterPlayedDialogueForThisLobby
// 0x0018 (0x0018 - 0x0000)
struct LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby final
{
public:
	class FString                                 characterName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         dialogueId;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby) == 0x000008, "Wrong alignment on LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby");
static_assert(sizeof(LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby) == 0x000018, "Wrong size on LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby");
static_assert(offsetof(LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby, characterName) == 0x000000, "Member 'LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby::characterName' has a wrong offset!");
static_assert(offsetof(LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby, dialogueId) == 0x000010, "Member 'LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby::dialogueId' has a wrong offset!");

// Function DeadByDaylight.LocalPlayerUtilities.GetLocalHumanPlayerState
// 0x0010 (0x0010 - 0x0000)
struct LocalPlayerUtilities_GetLocalHumanPlayerState final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayerState*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerUtilities_GetLocalHumanPlayerState) == 0x000008, "Wrong alignment on LocalPlayerUtilities_GetLocalHumanPlayerState");
static_assert(sizeof(LocalPlayerUtilities_GetLocalHumanPlayerState) == 0x000010, "Wrong size on LocalPlayerUtilities_GetLocalHumanPlayerState");
static_assert(offsetof(LocalPlayerUtilities_GetLocalHumanPlayerState, worldContextObject) == 0x000000, "Member 'LocalPlayerUtilities_GetLocalHumanPlayerState::worldContextObject' has a wrong offset!");
static_assert(offsetof(LocalPlayerUtilities_GetLocalHumanPlayerState, ReturnValue) == 0x000008, "Member 'LocalPlayerUtilities_GetLocalHumanPlayerState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LockerOutlineUpdateStrategy.GetRedColor
// 0x0010 (0x0010 - 0x0000)
struct LockerOutlineUpdateStrategy_GetRedColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LockerOutlineUpdateStrategy_GetRedColor) == 0x000004, "Wrong alignment on LockerOutlineUpdateStrategy_GetRedColor");
static_assert(sizeof(LockerOutlineUpdateStrategy_GetRedColor) == 0x000010, "Wrong size on LockerOutlineUpdateStrategy_GetRedColor");
static_assert(offsetof(LockerOutlineUpdateStrategy_GetRedColor, ReturnValue) == 0x000000, "Member 'LockerOutlineUpdateStrategy_GetRedColor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LoudNoiseHUDIndicator.AddTrackedNoise
// 0x0010 (0x0010 - 0x0000)
struct LoudNoiseHUDIndicator_AddTrackedNoise final
{
public:
	struct FVector                                location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoudNoiseHUDIndicator_AddTrackedNoise) == 0x000004, "Wrong alignment on LoudNoiseHUDIndicator_AddTrackedNoise");
static_assert(sizeof(LoudNoiseHUDIndicator_AddTrackedNoise) == 0x000010, "Wrong size on LoudNoiseHUDIndicator_AddTrackedNoise");
static_assert(offsetof(LoudNoiseHUDIndicator_AddTrackedNoise, location) == 0x000000, "Member 'LoudNoiseHUDIndicator_AddTrackedNoise::location' has a wrong offset!");
static_assert(offsetof(LoudNoiseHUDIndicator_AddTrackedNoise, duration) == 0x00000C, "Member 'LoudNoiseHUDIndicator_AddTrackedNoise::duration' has a wrong offset!");

// Function DeadByDaylight.LoudNoiseNotifier.Fire
// 0x0038 (0x0038 - 0x0000)
struct LoudNoiseNotifier_Fire final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          shouldTrack;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         audibleRange;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             instigatingPlayer;                                 // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isQuickAction;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isDeceivingNoise;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoudNoiseNotifier_Fire) == 0x000008, "Wrong alignment on LoudNoiseNotifier_Fire");
static_assert(sizeof(LoudNoiseNotifier_Fire) == 0x000038, "Wrong size on LoudNoiseNotifier_Fire");
static_assert(offsetof(LoudNoiseNotifier_Fire, worldContextObject) == 0x000000, "Member 'LoudNoiseNotifier_Fire::worldContextObject' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_Fire, instigator) == 0x000008, "Member 'LoudNoiseNotifier_Fire::instigator' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_Fire, location) == 0x000010, "Member 'LoudNoiseNotifier_Fire::location' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_Fire, shouldTrack) == 0x00001C, "Member 'LoudNoiseNotifier_Fire::shouldTrack' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_Fire, audibleRange) == 0x000020, "Member 'LoudNoiseNotifier_Fire::audibleRange' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_Fire, instigatingPlayer) == 0x000028, "Member 'LoudNoiseNotifier_Fire::instigatingPlayer' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_Fire, isQuickAction) == 0x000030, "Member 'LoudNoiseNotifier_Fire::isQuickAction' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_Fire, isDeceivingNoise) == 0x000031, "Member 'LoudNoiseNotifier_Fire::isDeceivingNoise' has a wrong offset!");

// Function DeadByDaylight.LoudNoiseNotifier.FireWithTimeBudgeter
// 0x0038 (0x0038 - 0x0000)
struct LoudNoiseNotifier_FireWithTimeBudgeter final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          shouldTrack;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         audibleRange;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             instigatingPlayer;                                 // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isQuickAction;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoudNoiseNotifier_FireWithTimeBudgeter) == 0x000008, "Wrong alignment on LoudNoiseNotifier_FireWithTimeBudgeter");
static_assert(sizeof(LoudNoiseNotifier_FireWithTimeBudgeter) == 0x000038, "Wrong size on LoudNoiseNotifier_FireWithTimeBudgeter");
static_assert(offsetof(LoudNoiseNotifier_FireWithTimeBudgeter, worldContextObject) == 0x000000, "Member 'LoudNoiseNotifier_FireWithTimeBudgeter::worldContextObject' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_FireWithTimeBudgeter, instigator) == 0x000008, "Member 'LoudNoiseNotifier_FireWithTimeBudgeter::instigator' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_FireWithTimeBudgeter, location) == 0x000010, "Member 'LoudNoiseNotifier_FireWithTimeBudgeter::location' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_FireWithTimeBudgeter, shouldTrack) == 0x00001C, "Member 'LoudNoiseNotifier_FireWithTimeBudgeter::shouldTrack' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_FireWithTimeBudgeter, audibleRange) == 0x000020, "Member 'LoudNoiseNotifier_FireWithTimeBudgeter::audibleRange' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_FireWithTimeBudgeter, instigatingPlayer) == 0x000028, "Member 'LoudNoiseNotifier_FireWithTimeBudgeter::instigatingPlayer' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_FireWithTimeBudgeter, isQuickAction) == 0x000030, "Member 'LoudNoiseNotifier_FireWithTimeBudgeter::isQuickAction' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Authority_OnCamperEscape
// 0x0038 (0x0038 - 0x0000)
struct LunarEventComponent_Authority_OnCamperEscape final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Authority_OnCamperEscape) == 0x000008, "Wrong alignment on LunarEventComponent_Authority_OnCamperEscape");
static_assert(sizeof(LunarEventComponent_Authority_OnCamperEscape) == 0x000038, "Wrong size on LunarEventComponent_Authority_OnCamperEscape");
static_assert(offsetof(LunarEventComponent_Authority_OnCamperEscape, gameEventType) == 0x000000, "Member 'LunarEventComponent_Authority_OnCamperEscape::gameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Authority_OnCamperEscape, gameEventData) == 0x000010, "Member 'LunarEventComponent_Authority_OnCamperEscape::gameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Authority_OnCamperLostLantern
// 0x0038 (0x0038 - 0x0000)
struct LunarEventComponent_Authority_OnCamperLostLantern final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Authority_OnCamperLostLantern) == 0x000008, "Wrong alignment on LunarEventComponent_Authority_OnCamperLostLantern");
static_assert(sizeof(LunarEventComponent_Authority_OnCamperLostLantern) == 0x000038, "Wrong size on LunarEventComponent_Authority_OnCamperLostLantern");
static_assert(offsetof(LunarEventComponent_Authority_OnCamperLostLantern, gameEventType) == 0x000000, "Member 'LunarEventComponent_Authority_OnCamperLostLantern::gameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Authority_OnCamperLostLantern, gameEventData) == 0x000010, "Member 'LunarEventComponent_Authority_OnCamperLostLantern::gameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Authority_OnDestroyCamperLightGameEvent
// 0x0038 (0x0038 - 0x0000)
struct LunarEventComponent_Authority_OnDestroyCamperLightGameEvent final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Authority_OnDestroyCamperLightGameEvent) == 0x000008, "Wrong alignment on LunarEventComponent_Authority_OnDestroyCamperLightGameEvent");
static_assert(sizeof(LunarEventComponent_Authority_OnDestroyCamperLightGameEvent) == 0x000038, "Wrong size on LunarEventComponent_Authority_OnDestroyCamperLightGameEvent");
static_assert(offsetof(LunarEventComponent_Authority_OnDestroyCamperLightGameEvent, gameEventType) == 0x000000, "Member 'LunarEventComponent_Authority_OnDestroyCamperLightGameEvent::gameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Authority_OnDestroyCamperLightGameEvent, gameEventData) == 0x000010, "Member 'LunarEventComponent_Authority_OnDestroyCamperLightGameEvent::gameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Authority_OnFixGenerator
// 0x0038 (0x0038 - 0x0000)
struct LunarEventComponent_Authority_OnFixGenerator final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Authority_OnFixGenerator) == 0x000008, "Wrong alignment on LunarEventComponent_Authority_OnFixGenerator");
static_assert(sizeof(LunarEventComponent_Authority_OnFixGenerator) == 0x000038, "Wrong size on LunarEventComponent_Authority_OnFixGenerator");
static_assert(offsetof(LunarEventComponent_Authority_OnFixGenerator, gameEventType) == 0x000000, "Member 'LunarEventComponent_Authority_OnFixGenerator::gameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Authority_OnFixGenerator, gameEventData) == 0x000010, "Member 'LunarEventComponent_Authority_OnFixGenerator::gameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Authority_OnPickupLantern
// 0x0038 (0x0038 - 0x0000)
struct LunarEventComponent_Authority_OnPickupLantern final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Authority_OnPickupLantern) == 0x000008, "Wrong alignment on LunarEventComponent_Authority_OnPickupLantern");
static_assert(sizeof(LunarEventComponent_Authority_OnPickupLantern) == 0x000038, "Wrong size on LunarEventComponent_Authority_OnPickupLantern");
static_assert(offsetof(LunarEventComponent_Authority_OnPickupLantern, gameEventType) == 0x000000, "Member 'LunarEventComponent_Authority_OnPickupLantern::gameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Authority_OnPickupLantern, gameEventData) == 0x000010, "Member 'LunarEventComponent_Authority_OnPickupLantern::gameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Authority_OnPlayerLeaveGame
// 0x0038 (0x0038 - 0x0000)
struct LunarEventComponent_Authority_OnPlayerLeaveGame final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Authority_OnPlayerLeaveGame) == 0x000008, "Wrong alignment on LunarEventComponent_Authority_OnPlayerLeaveGame");
static_assert(sizeof(LunarEventComponent_Authority_OnPlayerLeaveGame) == 0x000038, "Wrong size on LunarEventComponent_Authority_OnPlayerLeaveGame");
static_assert(offsetof(LunarEventComponent_Authority_OnPlayerLeaveGame, gameEventType) == 0x000000, "Member 'LunarEventComponent_Authority_OnPlayerLeaveGame::gameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Authority_OnPlayerLeaveGame, gameEventData) == 0x000010, "Member 'LunarEventComponent_Authority_OnPlayerLeaveGame::gameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Authority_OnSlasherDestroysLantern
// 0x0038 (0x0038 - 0x0000)
struct LunarEventComponent_Authority_OnSlasherDestroysLantern final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Authority_OnSlasherDestroysLantern) == 0x000008, "Wrong alignment on LunarEventComponent_Authority_OnSlasherDestroysLantern");
static_assert(sizeof(LunarEventComponent_Authority_OnSlasherDestroysLantern) == 0x000038, "Wrong size on LunarEventComponent_Authority_OnSlasherDestroysLantern");
static_assert(offsetof(LunarEventComponent_Authority_OnSlasherDestroysLantern, gameEventType) == 0x000000, "Member 'LunarEventComponent_Authority_OnSlasherDestroysLantern::gameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Authority_OnSlasherDestroysLantern, gameEventData) == 0x000010, "Member 'LunarEventComponent_Authority_OnSlasherDestroysLantern::gameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Local_OnCamperEscape
// 0x0038 (0x0038 - 0x0000)
struct LunarEventComponent_Local_OnCamperEscape final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Local_OnCamperEscape) == 0x000008, "Wrong alignment on LunarEventComponent_Local_OnCamperEscape");
static_assert(sizeof(LunarEventComponent_Local_OnCamperEscape) == 0x000038, "Wrong size on LunarEventComponent_Local_OnCamperEscape");
static_assert(offsetof(LunarEventComponent_Local_OnCamperEscape, gameEventType) == 0x000000, "Member 'LunarEventComponent_Local_OnCamperEscape::gameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Local_OnCamperEscape, gameEventData) == 0x000010, "Member 'LunarEventComponent_Local_OnCamperEscape::gameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Local_OnCamperLostLantern
// 0x0038 (0x0038 - 0x0000)
struct LunarEventComponent_Local_OnCamperLostLantern final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Local_OnCamperLostLantern) == 0x000008, "Wrong alignment on LunarEventComponent_Local_OnCamperLostLantern");
static_assert(sizeof(LunarEventComponent_Local_OnCamperLostLantern) == 0x000038, "Wrong size on LunarEventComponent_Local_OnCamperLostLantern");
static_assert(offsetof(LunarEventComponent_Local_OnCamperLostLantern, gameEventType) == 0x000000, "Member 'LunarEventComponent_Local_OnCamperLostLantern::gameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Local_OnCamperLostLantern, gameEventData) == 0x000010, "Member 'LunarEventComponent_Local_OnCamperLostLantern::gameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Multicast_ResetLanternLight
// 0x0008 (0x0008 - 0x0000)
struct LunarEventComponent_Multicast_ResetLanternLight final
{
public:
	class ALanternInteractable*                   lanternInteractable;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Multicast_ResetLanternLight) == 0x000008, "Wrong alignment on LunarEventComponent_Multicast_ResetLanternLight");
static_assert(sizeof(LunarEventComponent_Multicast_ResetLanternLight) == 0x000008, "Wrong size on LunarEventComponent_Multicast_ResetLanternLight");
static_assert(offsetof(LunarEventComponent_Multicast_ResetLanternLight, lanternInteractable) == 0x000000, "Member 'LunarEventComponent_Multicast_ResetLanternLight::lanternInteractable' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.OnFinishedPlaying
// 0x0038 (0x0038 - 0x0000)
struct LunarEventComponent_OnFinishedPlaying final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_OnFinishedPlaying) == 0x000008, "Wrong alignment on LunarEventComponent_OnFinishedPlaying");
static_assert(sizeof(LunarEventComponent_OnFinishedPlaying) == 0x000038, "Wrong size on LunarEventComponent_OnFinishedPlaying");
static_assert(offsetof(LunarEventComponent_OnFinishedPlaying, gameEventType) == 0x000000, "Member 'LunarEventComponent_OnFinishedPlaying::gameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_OnFinishedPlaying, gameEventData) == 0x000010, "Member 'LunarEventComponent_OnFinishedPlaying::gameEventData' has a wrong offset!");

// Function DeadByDaylight.MagicFountain.IsCorrupted
// 0x0001 (0x0001 - 0x0000)
struct MagicFountain_IsCorrupted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicFountain_IsCorrupted) == 0x000001, "Wrong alignment on MagicFountain_IsCorrupted");
static_assert(sizeof(MagicFountain_IsCorrupted) == 0x000001, "Wrong size on MagicFountain_IsCorrupted");
static_assert(offsetof(MagicFountain_IsCorrupted, ReturnValue) == 0x000000, "Member 'MagicFountain_IsCorrupted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MagicFountainOutlineUpdateStrategy.SetFountainCorrupted
// 0x0001 (0x0001 - 0x0000)
struct MagicFountainOutlineUpdateStrategy_SetFountainCorrupted final
{
public:
	bool                                          corrupted;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicFountainOutlineUpdateStrategy_SetFountainCorrupted) == 0x000001, "Wrong alignment on MagicFountainOutlineUpdateStrategy_SetFountainCorrupted");
static_assert(sizeof(MagicFountainOutlineUpdateStrategy_SetFountainCorrupted) == 0x000001, "Wrong size on MagicFountainOutlineUpdateStrategy_SetFountainCorrupted");
static_assert(offsetof(MagicFountainOutlineUpdateStrategy_SetFountainCorrupted, corrupted) == 0x000000, "Member 'MagicFountainOutlineUpdateStrategy_SetFountainCorrupted::corrupted' has a wrong offset!");

// Function DeadByDaylight.MapActorDB.CopyListMinusCategories
// 0x0030 (0x0030 - 0x0000)
struct MapActorDB_CopyListMinusCategories final
{
public:
	TArray<EMapActorCategory>                     Categories;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EMapActorCategory>                     categoriesToRemove;                                // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EMapActorCategory>                     ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapActorDB_CopyListMinusCategories) == 0x000008, "Wrong alignment on MapActorDB_CopyListMinusCategories");
static_assert(sizeof(MapActorDB_CopyListMinusCategories) == 0x000030, "Wrong size on MapActorDB_CopyListMinusCategories");
static_assert(offsetof(MapActorDB_CopyListMinusCategories, Categories) == 0x000000, "Member 'MapActorDB_CopyListMinusCategories::Categories' has a wrong offset!");
static_assert(offsetof(MapActorDB_CopyListMinusCategories, categoriesToRemove) == 0x000010, "Member 'MapActorDB_CopyListMinusCategories::categoriesToRemove' has a wrong offset!");
static_assert(offsetof(MapActorDB_CopyListMinusCategories, ReturnValue) == 0x000020, "Member 'MapActorDB_CopyListMinusCategories::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MapActorDB.GetRandom
// 0x0010 (0x0010 - 0x0000)
struct MapActorDB_GetRandom final
{
public:
	EMapActorCategory                             category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapActorDB_GetRandom) == 0x000008, "Wrong alignment on MapActorDB_GetRandom");
static_assert(sizeof(MapActorDB_GetRandom) == 0x000010, "Wrong size on MapActorDB_GetRandom");
static_assert(offsetof(MapActorDB_GetRandom, category) == 0x000000, "Member 'MapActorDB_GetRandom::category' has a wrong offset!");
static_assert(offsetof(MapActorDB_GetRandom, ReturnValue) == 0x000008, "Member 'MapActorDB_GetRandom::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MapActorDB.GetUniqueRandom
// 0x0028 (0x0028 - 0x0000)
struct MapActorDB_GetUniqueRandom final
{
public:
	TArray<EMapActorCategory>                     categories;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapActorDB_GetUniqueRandom) == 0x000008, "Wrong alignment on MapActorDB_GetUniqueRandom");
static_assert(sizeof(MapActorDB_GetUniqueRandom) == 0x000028, "Wrong size on MapActorDB_GetUniqueRandom");
static_assert(offsetof(MapActorDB_GetUniqueRandom, categories) == 0x000000, "Member 'MapActorDB_GetUniqueRandom::categories' has a wrong offset!");
static_assert(offsetof(MapActorDB_GetUniqueRandom, count) == 0x000010, "Member 'MapActorDB_GetUniqueRandom::count' has a wrong offset!");
static_assert(offsetof(MapActorDB_GetUniqueRandom, ReturnValue) == 0x000018, "Member 'MapActorDB_GetUniqueRandom::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MapActorDetectorComponent.OnOverlapEnter
// 0x00B0 (0x00B0 - 0x0000)
struct MapActorDetectorComponent_OnOverlapEnter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapActorDetectorComponent_OnOverlapEnter) == 0x000008, "Wrong alignment on MapActorDetectorComponent_OnOverlapEnter");
static_assert(sizeof(MapActorDetectorComponent_OnOverlapEnter) == 0x0000B0, "Wrong size on MapActorDetectorComponent_OnOverlapEnter");
static_assert(offsetof(MapActorDetectorComponent_OnOverlapEnter, HitComponent) == 0x000000, "Member 'MapActorDetectorComponent_OnOverlapEnter::HitComponent' has a wrong offset!");
static_assert(offsetof(MapActorDetectorComponent_OnOverlapEnter, OtherActor) == 0x000008, "Member 'MapActorDetectorComponent_OnOverlapEnter::OtherActor' has a wrong offset!");
static_assert(offsetof(MapActorDetectorComponent_OnOverlapEnter, OtherComp) == 0x000010, "Member 'MapActorDetectorComponent_OnOverlapEnter::OtherComp' has a wrong offset!");
static_assert(offsetof(MapActorDetectorComponent_OnOverlapEnter, OtherBodyIndex) == 0x000018, "Member 'MapActorDetectorComponent_OnOverlapEnter::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MapActorDetectorComponent_OnOverlapEnter, bFromSweep) == 0x00001C, "Member 'MapActorDetectorComponent_OnOverlapEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(MapActorDetectorComponent_OnOverlapEnter, SweepResult) == 0x000020, "Member 'MapActorDetectorComponent_OnOverlapEnter::SweepResult' has a wrong offset!");

// Function DeadByDaylight.MapActorDetectorComponent.SetDetectionPrimitive
// 0x0008 (0x0008 - 0x0000)
struct MapActorDetectorComponent_SetDetectionPrimitive final
{
public:
	class UPrimitiveComponent*                    primitive;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapActorDetectorComponent_SetDetectionPrimitive) == 0x000008, "Wrong alignment on MapActorDetectorComponent_SetDetectionPrimitive");
static_assert(sizeof(MapActorDetectorComponent_SetDetectionPrimitive) == 0x000008, "Wrong size on MapActorDetectorComponent_SetDetectionPrimitive");
static_assert(offsetof(MapActorDetectorComponent_SetDetectionPrimitive, primitive) == 0x000000, "Member 'MapActorDetectorComponent_SetDetectionPrimitive::primitive' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Authority_SetHookedSurvivor
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_Authority_SetHookedSurvivor final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_Authority_SetHookedSurvivor) == 0x000008, "Wrong alignment on MeatHook_Authority_SetHookedSurvivor");
static_assert(sizeof(MeatHook_Authority_SetHookedSurvivor) == 0x000008, "Wrong size on MeatHook_Authority_SetHookedSurvivor");
static_assert(offsetof(MeatHook_Authority_SetHookedSurvivor, survivor) == 0x000000, "Member 'MeatHook_Authority_SetHookedSurvivor::survivor' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Authority_SetIsBrokenFromUnhook
// 0x0018 (0x0018 - 0x0000)
struct MeatHook_Authority_SetIsBrokenFromUnhook final
{
public:
	bool                                          isBrokenFromUnhook;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             hookBreaker;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         overrideBaseHookRespawnDuration;                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeatHook_Authority_SetIsBrokenFromUnhook) == 0x000008, "Wrong alignment on MeatHook_Authority_SetIsBrokenFromUnhook");
static_assert(sizeof(MeatHook_Authority_SetIsBrokenFromUnhook) == 0x000018, "Wrong size on MeatHook_Authority_SetIsBrokenFromUnhook");
static_assert(offsetof(MeatHook_Authority_SetIsBrokenFromUnhook, isBrokenFromUnhook) == 0x000000, "Member 'MeatHook_Authority_SetIsBrokenFromUnhook::isBrokenFromUnhook' has a wrong offset!");
static_assert(offsetof(MeatHook_Authority_SetIsBrokenFromUnhook, hookBreaker) == 0x000008, "Member 'MeatHook_Authority_SetIsBrokenFromUnhook::hookBreaker' has a wrong offset!");
static_assert(offsetof(MeatHook_Authority_SetIsBrokenFromUnhook, overrideBaseHookRespawnDuration) == 0x000010, "Member 'MeatHook_Authority_SetIsBrokenFromUnhook::overrideBaseHookRespawnDuration' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Authority_SetIsSabotaged
// 0x0018 (0x0018 - 0x0000)
struct MeatHook_Authority_SetIsSabotaged final
{
public:
	bool                                          isSabotaged;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             saboteur;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useCamperHookRespawnDurationModifiers;             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         overrideBaseHookRespawnDuration;                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_Authority_SetIsSabotaged) == 0x000008, "Wrong alignment on MeatHook_Authority_SetIsSabotaged");
static_assert(sizeof(MeatHook_Authority_SetIsSabotaged) == 0x000018, "Wrong size on MeatHook_Authority_SetIsSabotaged");
static_assert(offsetof(MeatHook_Authority_SetIsSabotaged, isSabotaged) == 0x000000, "Member 'MeatHook_Authority_SetIsSabotaged::isSabotaged' has a wrong offset!");
static_assert(offsetof(MeatHook_Authority_SetIsSabotaged, saboteur) == 0x000008, "Member 'MeatHook_Authority_SetIsSabotaged::saboteur' has a wrong offset!");
static_assert(offsetof(MeatHook_Authority_SetIsSabotaged, useCamperHookRespawnDurationModifiers) == 0x000010, "Member 'MeatHook_Authority_SetIsSabotaged::useCamperHookRespawnDurationModifiers' has a wrong offset!");
static_assert(offsetof(MeatHook_Authority_SetIsSabotaged, overrideBaseHookRespawnDuration) == 0x000014, "Member 'MeatHook_Authority_SetIsSabotaged::overrideBaseHookRespawnDuration' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Authority_SetIsSacrificed
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_Authority_SetIsSacrificed final
{
public:
	bool                                          isSacrificed;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_Authority_SetIsSacrificed) == 0x000001, "Wrong alignment on MeatHook_Authority_SetIsSacrificed");
static_assert(sizeof(MeatHook_Authority_SetIsSacrificed) == 0x000001, "Wrong size on MeatHook_Authority_SetIsSacrificed");
static_assert(offsetof(MeatHook_Authority_SetIsSacrificed, isSacrificed) == 0x000000, "Member 'MeatHook_Authority_SetIsSacrificed::isSacrificed' has a wrong offset!");

// Function DeadByDaylight.MeatHook.BroadcastUnhook
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_BroadcastUnhook final
{
public:
	class ADBDPlayer*                             rescuer;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_BroadcastUnhook) == 0x000008, "Wrong alignment on MeatHook_BroadcastUnhook");
static_assert(sizeof(MeatHook_BroadcastUnhook) == 0x000008, "Wrong size on MeatHook_BroadcastUnhook");
static_assert(offsetof(MeatHook_BroadcastUnhook, rescuer) == 0x000000, "Member 'MeatHook_BroadcastUnhook::rescuer' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Local_MoveSurvivorToHook
// 0x0010 (0x0010 - 0x0000)
struct MeatHook_Local_MoveSurvivorToHook final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeatHook_Local_MoveSurvivorToHook) == 0x000008, "Wrong alignment on MeatHook_Local_MoveSurvivorToHook");
static_assert(sizeof(MeatHook_Local_MoveSurvivorToHook) == 0x000010, "Wrong size on MeatHook_Local_MoveSurvivorToHook");
static_assert(offsetof(MeatHook_Local_MoveSurvivorToHook, survivor) == 0x000000, "Member 'MeatHook_Local_MoveSurvivorToHook::survivor' has a wrong offset!");
static_assert(offsetof(MeatHook_Local_MoveSurvivorToHook, duration) == 0x000008, "Member 'MeatHook_Local_MoveSurvivorToHook::duration' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Multicast_EscapeAttemptResult
// 0x0010 (0x0010 - 0x0000)
struct MeatHook_Multicast_EscapeAttemptResult final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          result;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeatHook_Multicast_EscapeAttemptResult) == 0x000008, "Wrong alignment on MeatHook_Multicast_EscapeAttemptResult");
static_assert(sizeof(MeatHook_Multicast_EscapeAttemptResult) == 0x000010, "Wrong size on MeatHook_Multicast_EscapeAttemptResult");
static_assert(offsetof(MeatHook_Multicast_EscapeAttemptResult, player) == 0x000000, "Member 'MeatHook_Multicast_EscapeAttemptResult::player' has a wrong offset!");
static_assert(offsetof(MeatHook_Multicast_EscapeAttemptResult, result) == 0x000008, "Member 'MeatHook_Multicast_EscapeAttemptResult::result' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Multicast_SetHookedSurvivor
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_Multicast_SetHookedSurvivor final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_Multicast_SetHookedSurvivor) == 0x000008, "Wrong alignment on MeatHook_Multicast_SetHookedSurvivor");
static_assert(sizeof(MeatHook_Multicast_SetHookedSurvivor) == 0x000008, "Wrong size on MeatHook_Multicast_SetHookedSurvivor");
static_assert(offsetof(MeatHook_Multicast_SetHookedSurvivor, survivor) == 0x000000, "Member 'MeatHook_Multicast_SetHookedSurvivor::survivor' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Multicast_SetIsBrokenFromUnhook
// 0x0018 (0x0018 - 0x0000)
struct MeatHook_Multicast_SetIsBrokenFromUnhook final
{
public:
	bool                                          setIsBrokendFromUnhook;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             hookBreaker;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         overrideBaseHookRespawnDuration;                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeatHook_Multicast_SetIsBrokenFromUnhook) == 0x000008, "Wrong alignment on MeatHook_Multicast_SetIsBrokenFromUnhook");
static_assert(sizeof(MeatHook_Multicast_SetIsBrokenFromUnhook) == 0x000018, "Wrong size on MeatHook_Multicast_SetIsBrokenFromUnhook");
static_assert(offsetof(MeatHook_Multicast_SetIsBrokenFromUnhook, setIsBrokendFromUnhook) == 0x000000, "Member 'MeatHook_Multicast_SetIsBrokenFromUnhook::setIsBrokendFromUnhook' has a wrong offset!");
static_assert(offsetof(MeatHook_Multicast_SetIsBrokenFromUnhook, hookBreaker) == 0x000008, "Member 'MeatHook_Multicast_SetIsBrokenFromUnhook::hookBreaker' has a wrong offset!");
static_assert(offsetof(MeatHook_Multicast_SetIsBrokenFromUnhook, overrideBaseHookRespawnDuration) == 0x000010, "Member 'MeatHook_Multicast_SetIsBrokenFromUnhook::overrideBaseHookRespawnDuration' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Multicast_SetIsSabotaged
// 0x0018 (0x0018 - 0x0000)
struct MeatHook_Multicast_SetIsSabotaged final
{
public:
	bool                                          setIsSabotaged;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             hookBreaker;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useCamperHookRespawnDurationModifiers;             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         overrideBaseHookRespawnDuration;                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_Multicast_SetIsSabotaged) == 0x000008, "Wrong alignment on MeatHook_Multicast_SetIsSabotaged");
static_assert(sizeof(MeatHook_Multicast_SetIsSabotaged) == 0x000018, "Wrong size on MeatHook_Multicast_SetIsSabotaged");
static_assert(offsetof(MeatHook_Multicast_SetIsSabotaged, setIsSabotaged) == 0x000000, "Member 'MeatHook_Multicast_SetIsSabotaged::setIsSabotaged' has a wrong offset!");
static_assert(offsetof(MeatHook_Multicast_SetIsSabotaged, hookBreaker) == 0x000008, "Member 'MeatHook_Multicast_SetIsSabotaged::hookBreaker' has a wrong offset!");
static_assert(offsetof(MeatHook_Multicast_SetIsSabotaged, useCamperHookRespawnDurationModifiers) == 0x000010, "Member 'MeatHook_Multicast_SetIsSabotaged::useCamperHookRespawnDurationModifiers' has a wrong offset!");
static_assert(offsetof(MeatHook_Multicast_SetIsSabotaged, overrideBaseHookRespawnDuration) == 0x000014, "Member 'MeatHook_Multicast_SetIsSabotaged::overrideBaseHookRespawnDuration' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Multicast_SetIsSacrificed
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_Multicast_SetIsSacrificed final
{
public:
	bool                                          isSacrificed;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_Multicast_SetIsSacrificed) == 0x000001, "Wrong alignment on MeatHook_Multicast_SetIsSacrificed");
static_assert(sizeof(MeatHook_Multicast_SetIsSacrificed) == 0x000001, "Wrong size on MeatHook_Multicast_SetIsSacrificed");
static_assert(offsetof(MeatHook_Multicast_SetIsSacrificed, isSacrificed) == 0x000000, "Member 'MeatHook_Multicast_SetIsSacrificed::isSacrificed' has a wrong offset!");

// Function DeadByDaylight.MeatHook.OnHookedSurvivorChanged
// 0x0010 (0x0010 - 0x0000)
struct MeatHook_OnHookedSurvivorChanged final
{
public:
	class ACamperPlayer*                          before;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          after;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_OnHookedSurvivorChanged) == 0x000008, "Wrong alignment on MeatHook_OnHookedSurvivorChanged");
static_assert(sizeof(MeatHook_OnHookedSurvivorChanged) == 0x000010, "Wrong size on MeatHook_OnHookedSurvivorChanged");
static_assert(offsetof(MeatHook_OnHookedSurvivorChanged, before) == 0x000000, "Member 'MeatHook_OnHookedSurvivorChanged::before' has a wrong offset!");
static_assert(offsetof(MeatHook_OnHookedSurvivorChanged, after) == 0x000008, "Member 'MeatHook_OnHookedSurvivorChanged::after' has a wrong offset!");

// Function DeadByDaylight.MeatHook.OnStartPushingPlayer
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_OnStartPushingPlayer final
{
public:
	class ACharacter*                             character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_OnStartPushingPlayer) == 0x000008, "Wrong alignment on MeatHook_OnStartPushingPlayer");
static_assert(sizeof(MeatHook_OnStartPushingPlayer) == 0x000008, "Wrong size on MeatHook_OnStartPushingPlayer");
static_assert(offsetof(MeatHook_OnStartPushingPlayer, character) == 0x000000, "Member 'MeatHook_OnStartPushingPlayer::character' has a wrong offset!");

// Function DeadByDaylight.MeatHook.OnStopPushingPlayer
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_OnStopPushingPlayer final
{
public:
	class ACharacter*                             character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_OnStopPushingPlayer) == 0x000008, "Wrong alignment on MeatHook_OnStopPushingPlayer");
static_assert(sizeof(MeatHook_OnStopPushingPlayer) == 0x000008, "Wrong size on MeatHook_OnStopPushingPlayer");
static_assert(offsetof(MeatHook_OnStopPushingPlayer, character) == 0x000000, "Member 'MeatHook_OnStopPushingPlayer::character' has a wrong offset!");

// Function DeadByDaylight.MeatHook.OnTickStruggle
// 0x0004 (0x0004 - 0x0000)
struct MeatHook_OnTickStruggle final
{
public:
	float                                         deltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_OnTickStruggle) == 0x000004, "Wrong alignment on MeatHook_OnTickStruggle");
static_assert(sizeof(MeatHook_OnTickStruggle) == 0x000004, "Wrong size on MeatHook_OnTickStruggle");
static_assert(offsetof(MeatHook_OnTickStruggle, deltaTime) == 0x000000, "Member 'MeatHook_OnTickStruggle::deltaTime' has a wrong offset!");

// Function DeadByDaylight.MeatHook.SetEntity
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_SetEntity final
{
public:
	class AEntity*                                entity;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_SetEntity) == 0x000008, "Wrong alignment on MeatHook_SetEntity");
static_assert(sizeof(MeatHook_SetEntity) == 0x000008, "Wrong size on MeatHook_SetEntity");
static_assert(offsetof(MeatHook_SetEntity, entity) == 0x000000, "Member 'MeatHook_SetEntity::entity' has a wrong offset!");

// Function DeadByDaylight.MeatHook.SetInteractingPlayer
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_SetInteractingPlayer final
{
public:
	class ADBDPlayer*                             interactingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_SetInteractingPlayer) == 0x000008, "Wrong alignment on MeatHook_SetInteractingPlayer");
static_assert(sizeof(MeatHook_SetInteractingPlayer) == 0x000008, "Wrong size on MeatHook_SetInteractingPlayer");
static_assert(offsetof(MeatHook_SetInteractingPlayer, interactingPlayer) == 0x000000, "Member 'MeatHook_SetInteractingPlayer::interactingPlayer' has a wrong offset!");

// Function DeadByDaylight.MeatHook.SetIsBeingSabotaged
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_SetIsBeingSabotaged final
{
public:
	bool                                          isBeingSabotaged;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_SetIsBeingSabotaged) == 0x000001, "Wrong alignment on MeatHook_SetIsBeingSabotaged");
static_assert(sizeof(MeatHook_SetIsBeingSabotaged) == 0x000001, "Wrong size on MeatHook_SetIsBeingSabotaged");
static_assert(offsetof(MeatHook_SetIsBeingSabotaged, isBeingSabotaged) == 0x000000, "Member 'MeatHook_SetIsBeingSabotaged::isBeingSabotaged' has a wrong offset!");

// Function DeadByDaylight.MeatHook.SetMapActor
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_SetMapActor final
{
public:
	class UMapActorComponent*                     value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_SetMapActor) == 0x000008, "Wrong alignment on MeatHook_SetMapActor");
static_assert(sizeof(MeatHook_SetMapActor) == 0x000008, "Wrong size on MeatHook_SetMapActor");
static_assert(offsetof(MeatHook_SetMapActor, value) == 0x000000, "Member 'MeatHook_SetMapActor::value' has a wrong offset!");

// Function DeadByDaylight.MeatHook.CanBeSabotaged
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_CanBeSabotaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_CanBeSabotaged) == 0x000001, "Wrong alignment on MeatHook_CanBeSabotaged");
static_assert(sizeof(MeatHook_CanBeSabotaged) == 0x000001, "Wrong size on MeatHook_CanBeSabotaged");
static_assert(offsetof(MeatHook_CanBeSabotaged, ReturnValue) == 0x000000, "Member 'MeatHook_CanBeSabotaged::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.CanHookSurvivor
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_CanHookSurvivor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_CanHookSurvivor) == 0x000001, "Wrong alignment on MeatHook_CanHookSurvivor");
static_assert(sizeof(MeatHook_CanHookSurvivor) == 0x000001, "Wrong size on MeatHook_CanHookSurvivor");
static_assert(offsetof(MeatHook_CanHookSurvivor, ReturnValue) == 0x000000, "Member 'MeatHook_CanHookSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.CanSurvivorAttemptEscape
// 0x0010 (0x0010 - 0x0000)
struct MeatHook_CanSurvivorAttemptEscape final
{
public:
	const class ACamperPlayer*                    survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeatHook_CanSurvivorAttemptEscape) == 0x000008, "Wrong alignment on MeatHook_CanSurvivorAttemptEscape");
static_assert(sizeof(MeatHook_CanSurvivorAttemptEscape) == 0x000010, "Wrong size on MeatHook_CanSurvivorAttemptEscape");
static_assert(offsetof(MeatHook_CanSurvivorAttemptEscape, survivor) == 0x000000, "Member 'MeatHook_CanSurvivorAttemptEscape::survivor' has a wrong offset!");
static_assert(offsetof(MeatHook_CanSurvivorAttemptEscape, ReturnValue) == 0x000008, "Member 'MeatHook_CanSurvivorAttemptEscape::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.CanSurvivorStruggle
// 0x0010 (0x0010 - 0x0000)
struct MeatHook_CanSurvivorStruggle final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeatHook_CanSurvivorStruggle) == 0x000008, "Wrong alignment on MeatHook_CanSurvivorStruggle");
static_assert(sizeof(MeatHook_CanSurvivorStruggle) == 0x000010, "Wrong size on MeatHook_CanSurvivorStruggle");
static_assert(offsetof(MeatHook_CanSurvivorStruggle, survivor) == 0x000000, "Member 'MeatHook_CanSurvivorStruggle::survivor' has a wrong offset!");
static_assert(offsetof(MeatHook_CanSurvivorStruggle, ReturnValue) == 0x000008, "Member 'MeatHook_CanSurvivorStruggle::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.CanUnhookSurvivor
// 0x0010 (0x0010 - 0x0000)
struct MeatHook_CanUnhookSurvivor final
{
public:
	const class ACamperPlayer*                    survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeatHook_CanUnhookSurvivor) == 0x000008, "Wrong alignment on MeatHook_CanUnhookSurvivor");
static_assert(sizeof(MeatHook_CanUnhookSurvivor) == 0x000010, "Wrong size on MeatHook_CanUnhookSurvivor");
static_assert(offsetof(MeatHook_CanUnhookSurvivor, survivor) == 0x000000, "Member 'MeatHook_CanUnhookSurvivor::survivor' has a wrong offset!");
static_assert(offsetof(MeatHook_CanUnhookSurvivor, ReturnValue) == 0x000008, "Member 'MeatHook_CanUnhookSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.DebugHookedSurvivor
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_DebugHookedSurvivor final
{
public:
	class ACamperPlayer*                          expectedSurvivor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_DebugHookedSurvivor) == 0x000008, "Wrong alignment on MeatHook_DebugHookedSurvivor");
static_assert(sizeof(MeatHook_DebugHookedSurvivor) == 0x000008, "Wrong size on MeatHook_DebugHookedSurvivor");
static_assert(offsetof(MeatHook_DebugHookedSurvivor, expectedSurvivor) == 0x000000, "Member 'MeatHook_DebugHookedSurvivor::expectedSurvivor' has a wrong offset!");

// Function DeadByDaylight.MeatHook.FireHookSoundEvent
// 0x0018 (0x0018 - 0x0000)
struct MeatHook_FireHookSoundEvent final
{
public:
	class FName                                   NoiseRangeTunable;                                 // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class ADBDPlayer*                       soundInstigator;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_FireHookSoundEvent) == 0x000008, "Wrong alignment on MeatHook_FireHookSoundEvent");
static_assert(sizeof(MeatHook_FireHookSoundEvent) == 0x000018, "Wrong size on MeatHook_FireHookSoundEvent");
static_assert(offsetof(MeatHook_FireHookSoundEvent, NoiseRangeTunable) == 0x000000, "Member 'MeatHook_FireHookSoundEvent::NoiseRangeTunable' has a wrong offset!");
static_assert(offsetof(MeatHook_FireHookSoundEvent, soundInstigator) == 0x000010, "Member 'MeatHook_FireHookSoundEvent::soundInstigator' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetCamperHookedSnapTransform
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetCamperHookedSnapTransform final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetCamperHookedSnapTransform) == 0x000008, "Wrong alignment on MeatHook_GetCamperHookedSnapTransform");
static_assert(sizeof(MeatHook_GetCamperHookedSnapTransform) == 0x000008, "Wrong size on MeatHook_GetCamperHookedSnapTransform");
static_assert(offsetof(MeatHook_GetCamperHookedSnapTransform, ReturnValue) == 0x000000, "Member 'MeatHook_GetCamperHookedSnapTransform::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetCamperUnkookFocalPointTransform
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetCamperUnkookFocalPointTransform final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetCamperUnkookFocalPointTransform) == 0x000008, "Wrong alignment on MeatHook_GetCamperUnkookFocalPointTransform");
static_assert(sizeof(MeatHook_GetCamperUnkookFocalPointTransform) == 0x000008, "Wrong size on MeatHook_GetCamperUnkookFocalPointTransform");
static_assert(offsetof(MeatHook_GetCamperUnkookFocalPointTransform, ReturnValue) == 0x000000, "Member 'MeatHook_GetCamperUnkookFocalPointTransform::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetCharacterPusher
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetCharacterPusher final
{
public:
	class UCharacterPusherComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetCharacterPusher) == 0x000008, "Wrong alignment on MeatHook_GetCharacterPusher");
static_assert(sizeof(MeatHook_GetCharacterPusher) == 0x000008, "Wrong size on MeatHook_GetCharacterPusher");
static_assert(offsetof(MeatHook_GetCharacterPusher, ReturnValue) == 0x000000, "Member 'MeatHook_GetCharacterPusher::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetEscapeHookCID
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetEscapeHookCID final
{
public:
	class UChargeableInteractionDefinition*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetEscapeHookCID) == 0x000008, "Wrong alignment on MeatHook_GetEscapeHookCID");
static_assert(sizeof(MeatHook_GetEscapeHookCID) == 0x000008, "Wrong size on MeatHook_GetEscapeHookCID");
static_assert(offsetof(MeatHook_GetEscapeHookCID, ReturnValue) == 0x000000, "Member 'MeatHook_GetEscapeHookCID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetHookableComponentOfHookedActor
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetHookableComponentOfHookedActor final
{
public:
	class UHookableComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetHookableComponentOfHookedActor) == 0x000008, "Wrong alignment on MeatHook_GetHookableComponentOfHookedActor");
static_assert(sizeof(MeatHook_GetHookableComponentOfHookedActor) == 0x000008, "Wrong size on MeatHook_GetHookableComponentOfHookedActor");
static_assert(offsetof(MeatHook_GetHookableComponentOfHookedActor, ReturnValue) == 0x000000, "Member 'MeatHook_GetHookableComponentOfHookedActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetHookedSurvivor
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetHookedSurvivor final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetHookedSurvivor) == 0x000008, "Wrong alignment on MeatHook_GetHookedSurvivor");
static_assert(sizeof(MeatHook_GetHookedSurvivor) == 0x000008, "Wrong size on MeatHook_GetHookedSurvivor");
static_assert(offsetof(MeatHook_GetHookedSurvivor, ReturnValue) == 0x000000, "Member 'MeatHook_GetHookedSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetHookPosition
// 0x000C (0x000C - 0x0000)
struct MeatHook_GetHookPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetHookPosition) == 0x000004, "Wrong alignment on MeatHook_GetHookPosition");
static_assert(sizeof(MeatHook_GetHookPosition) == 0x00000C, "Wrong size on MeatHook_GetHookPosition");
static_assert(offsetof(MeatHook_GetHookPosition, ReturnValue) == 0x000000, "Member 'MeatHook_GetHookPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetInteractingPlayer
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetInteractingPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetInteractingPlayer) == 0x000008, "Wrong alignment on MeatHook_GetInteractingPlayer");
static_assert(sizeof(MeatHook_GetInteractingPlayer) == 0x000008, "Wrong size on MeatHook_GetInteractingPlayer");
static_assert(offsetof(MeatHook_GetInteractingPlayer, ReturnValue) == 0x000000, "Member 'MeatHook_GetInteractingPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetInteractorPrimitiveComponent
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetInteractorPrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetInteractorPrimitiveComponent) == 0x000008, "Wrong alignment on MeatHook_GetInteractorPrimitiveComponent");
static_assert(sizeof(MeatHook_GetInteractorPrimitiveComponent) == 0x000008, "Wrong size on MeatHook_GetInteractorPrimitiveComponent");
static_assert(offsetof(MeatHook_GetInteractorPrimitiveComponent, ReturnValue) == 0x000000, "Member 'MeatHook_GetInteractorPrimitiveComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetInteractorZoneComponent
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetInteractorZoneComponent final
{
public:
	class UBoxComponent*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetInteractorZoneComponent) == 0x000008, "Wrong alignment on MeatHook_GetInteractorZoneComponent");
static_assert(sizeof(MeatHook_GetInteractorZoneComponent) == 0x000008, "Wrong size on MeatHook_GetInteractorZoneComponent");
static_assert(offsetof(MeatHook_GetInteractorZoneComponent, ReturnValue) == 0x000000, "Member 'MeatHook_GetInteractorZoneComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetIsBroken
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_GetIsBroken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetIsBroken) == 0x000001, "Wrong alignment on MeatHook_GetIsBroken");
static_assert(sizeof(MeatHook_GetIsBroken) == 0x000001, "Wrong size on MeatHook_GetIsBroken");
static_assert(offsetof(MeatHook_GetIsBroken, ReturnValue) == 0x000000, "Member 'MeatHook_GetIsBroken::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetIsInBasement
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_GetIsInBasement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetIsInBasement) == 0x000001, "Wrong alignment on MeatHook_GetIsInBasement");
static_assert(sizeof(MeatHook_GetIsInBasement) == 0x000001, "Wrong size on MeatHook_GetIsInBasement");
static_assert(offsetof(MeatHook_GetIsInBasement, ReturnValue) == 0x000000, "Member 'MeatHook_GetIsInBasement::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetIsSabotaged
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_GetIsSabotaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetIsSabotaged) == 0x000001, "Wrong alignment on MeatHook_GetIsSabotaged");
static_assert(sizeof(MeatHook_GetIsSabotaged) == 0x000001, "Wrong size on MeatHook_GetIsSabotaged");
static_assert(offsetof(MeatHook_GetIsSabotaged, ReturnValue) == 0x000000, "Member 'MeatHook_GetIsSabotaged::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetIsSacrificed
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_GetIsSacrificed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetIsSacrificed) == 0x000001, "Wrong alignment on MeatHook_GetIsSacrificed");
static_assert(sizeof(MeatHook_GetIsSacrificed) == 0x000001, "Wrong size on MeatHook_GetIsSacrificed");
static_assert(offsetof(MeatHook_GetIsSacrificed, ReturnValue) == 0x000000, "Member 'MeatHook_GetIsSacrificed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetKickSlasherDetectionZone
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetKickSlasherDetectionZone final
{
public:
	class USphereComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetKickSlasherDetectionZone) == 0x000008, "Wrong alignment on MeatHook_GetKickSlasherDetectionZone");
static_assert(sizeof(MeatHook_GetKickSlasherDetectionZone) == 0x000008, "Wrong size on MeatHook_GetKickSlasherDetectionZone");
static_assert(offsetof(MeatHook_GetKickSlasherDetectionZone, ReturnValue) == 0x000000, "Member 'MeatHook_GetKickSlasherDetectionZone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetMainInteractor
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetMainInteractor final
{
public:
	class UInteractor*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetMainInteractor) == 0x000008, "Wrong alignment on MeatHook_GetMainInteractor");
static_assert(sizeof(MeatHook_GetMainInteractor) == 0x000008, "Wrong size on MeatHook_GetMainInteractor");
static_assert(offsetof(MeatHook_GetMainInteractor, ReturnValue) == 0x000000, "Member 'MeatHook_GetMainInteractor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetMeatHookAkAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetMeatHookAkAudioComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetMeatHookAkAudioComponent) == 0x000008, "Wrong alignment on MeatHook_GetMeatHookAkAudioComponent");
static_assert(sizeof(MeatHook_GetMeatHookAkAudioComponent) == 0x000008, "Wrong size on MeatHook_GetMeatHookAkAudioComponent");
static_assert(offsetof(MeatHook_GetMeatHookAkAudioComponent, ReturnValue) == 0x000000, "Member 'MeatHook_GetMeatHookAkAudioComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetMontagePlayer
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetMontagePlayer final
{
public:
	class UMontagePlayer*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetMontagePlayer) == 0x000008, "Wrong alignment on MeatHook_GetMontagePlayer");
static_assert(sizeof(MeatHook_GetMontagePlayer) == 0x000008, "Wrong size on MeatHook_GetMontagePlayer");
static_assert(offsetof(MeatHook_GetMontagePlayer, ReturnValue) == 0x000000, "Member 'MeatHook_GetMontagePlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetSabotageHookRespawnDuration
// 0x0004 (0x0004 - 0x0000)
struct MeatHook_GetSabotageHookRespawnDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetSabotageHookRespawnDuration) == 0x000004, "Wrong alignment on MeatHook_GetSabotageHookRespawnDuration");
static_assert(sizeof(MeatHook_GetSabotageHookRespawnDuration) == 0x000004, "Wrong size on MeatHook_GetSabotageHookRespawnDuration");
static_assert(offsetof(MeatHook_GetSabotageHookRespawnDuration, ReturnValue) == 0x000000, "Member 'MeatHook_GetSabotageHookRespawnDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetSaboteurPlayer
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetSaboteurPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetSaboteurPlayer) == 0x000008, "Wrong alignment on MeatHook_GetSaboteurPlayer");
static_assert(sizeof(MeatHook_GetSaboteurPlayer) == 0x000008, "Wrong size on MeatHook_GetSaboteurPlayer");
static_assert(offsetof(MeatHook_GetSaboteurPlayer, ReturnValue) == 0x000000, "Member 'MeatHook_GetSaboteurPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetStrugglePercent
// 0x0004 (0x0004 - 0x0000)
struct MeatHook_GetStrugglePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetStrugglePercent) == 0x000004, "Wrong alignment on MeatHook_GetStrugglePercent");
static_assert(sizeof(MeatHook_GetStrugglePercent) == 0x000004, "Wrong size on MeatHook_GetStrugglePercent");
static_assert(offsetof(MeatHook_GetStrugglePercent, ReturnValue) == 0x000000, "Member 'MeatHook_GetStrugglePercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetStruggleThreshold
// 0x0004 (0x0004 - 0x0000)
struct MeatHook_GetStruggleThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetStruggleThreshold) == 0x000004, "Wrong alignment on MeatHook_GetStruggleThreshold");
static_assert(sizeof(MeatHook_GetStruggleThreshold) == 0x000004, "Wrong size on MeatHook_GetStruggleThreshold");
static_assert(offsetof(MeatHook_GetStruggleThreshold, ReturnValue) == 0x000000, "Member 'MeatHook_GetStruggleThreshold::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetUnhookCID
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetUnhookCID final
{
public:
	class UChargeableInteractionDefinition*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetUnhookCID) == 0x000008, "Wrong alignment on MeatHook_GetUnhookCID");
static_assert(sizeof(MeatHook_GetUnhookCID) == 0x000008, "Wrong size on MeatHook_GetUnhookCID");
static_assert(offsetof(MeatHook_GetUnhookCID, ReturnValue) == 0x000000, "Member 'MeatHook_GetUnhookCID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetUnhookInMontageDescriptor
// 0x0020 (0x0020 - 0x0000)
struct MeatHook_GetUnhookInMontageDescriptor final
{
public:
	struct FAnimationMontageDescriptor            ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetUnhookInMontageDescriptor) == 0x000008, "Wrong alignment on MeatHook_GetUnhookInMontageDescriptor");
static_assert(sizeof(MeatHook_GetUnhookInMontageDescriptor) == 0x000020, "Wrong size on MeatHook_GetUnhookInMontageDescriptor");
static_assert(offsetof(MeatHook_GetUnhookInMontageDescriptor, ReturnValue) == 0x000000, "Member 'MeatHook_GetUnhookInMontageDescriptor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetUnhookOutMontageDescriptor
// 0x0020 (0x0020 - 0x0000)
struct MeatHook_GetUnhookOutMontageDescriptor final
{
public:
	struct FAnimationMontageDescriptor            ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetUnhookOutMontageDescriptor) == 0x000008, "Wrong alignment on MeatHook_GetUnhookOutMontageDescriptor");
static_assert(sizeof(MeatHook_GetUnhookOutMontageDescriptor) == 0x000020, "Wrong size on MeatHook_GetUnhookOutMontageDescriptor");
static_assert(offsetof(MeatHook_GetUnhookOutMontageDescriptor, ReturnValue) == 0x000000, "Member 'MeatHook_GetUnhookOutMontageDescriptor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuForcedLODHandler.OnCustomizationChanged
// 0x0018 (0x0018 - 0x0000)
struct MenuForcedLODHandler_OnCustomizationChanged final
{
public:
	ECustomizationCategory                        category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   itemId;                                            // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDMenuPlayer*                         menuPlayer;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuForcedLODHandler_OnCustomizationChanged) == 0x000008, "Wrong alignment on MenuForcedLODHandler_OnCustomizationChanged");
static_assert(sizeof(MenuForcedLODHandler_OnCustomizationChanged) == 0x000018, "Wrong size on MenuForcedLODHandler_OnCustomizationChanged");
static_assert(offsetof(MenuForcedLODHandler_OnCustomizationChanged, category) == 0x000000, "Member 'MenuForcedLODHandler_OnCustomizationChanged::category' has a wrong offset!");
static_assert(offsetof(MenuForcedLODHandler_OnCustomizationChanged, itemId) == 0x000004, "Member 'MenuForcedLODHandler_OnCustomizationChanged::itemId' has a wrong offset!");
static_assert(offsetof(MenuForcedLODHandler_OnCustomizationChanged, menuPlayer) == 0x000010, "Member 'MenuForcedLODHandler_OnCustomizationChanged::menuPlayer' has a wrong offset!");

// Function DeadByDaylight.MenuForcedLODHandler.OnMenuPlayerEndPlay
// 0x0010 (0x0010 - 0x0000)
struct MenuForcedLODHandler_OnMenuPlayerEndPlay final
{
public:
	class AActor*                                 menuPlayerActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                endPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuForcedLODHandler_OnMenuPlayerEndPlay) == 0x000008, "Wrong alignment on MenuForcedLODHandler_OnMenuPlayerEndPlay");
static_assert(sizeof(MenuForcedLODHandler_OnMenuPlayerEndPlay) == 0x000010, "Wrong size on MenuForcedLODHandler_OnMenuPlayerEndPlay");
static_assert(offsetof(MenuForcedLODHandler_OnMenuPlayerEndPlay, menuPlayerActor) == 0x000000, "Member 'MenuForcedLODHandler_OnMenuPlayerEndPlay::menuPlayerActor' has a wrong offset!");
static_assert(offsetof(MenuForcedLODHandler_OnMenuPlayerEndPlay, endPlayReason) == 0x000008, "Member 'MenuForcedLODHandler_OnMenuPlayerEndPlay::endPlayReason' has a wrong offset!");

// Function DeadByDaylight.MenuMeatHook.OnCharmsUpdated
// 0x0010 (0x0010 - 0x0000)
struct MenuMeatHook_OnCharmsUpdated final
{
public:
	TArray<struct FCharmIdSlot>                   charmIDs;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuMeatHook_OnCharmsUpdated) == 0x000008, "Wrong alignment on MenuMeatHook_OnCharmsUpdated");
static_assert(sizeof(MenuMeatHook_OnCharmsUpdated) == 0x000010, "Wrong size on MenuMeatHook_OnCharmsUpdated");
static_assert(offsetof(MenuMeatHook_OnCharmsUpdated, charmIDs) == 0x000000, "Member 'MenuMeatHook_OnCharmsUpdated::charmIDs' has a wrong offset!");

// Function DeadByDaylight.MenuUtilities.AreAllGuestCharactersReady
// 0x0001 (0x0001 - 0x0000)
struct MenuUtilities_AreAllGuestCharactersReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuUtilities_AreAllGuestCharactersReady) == 0x000001, "Wrong alignment on MenuUtilities_AreAllGuestCharactersReady");
static_assert(sizeof(MenuUtilities_AreAllGuestCharactersReady) == 0x000001, "Wrong size on MenuUtilities_AreAllGuestCharactersReady");
static_assert(offsetof(MenuUtilities_AreAllGuestCharactersReady, ReturnValue) == 0x000000, "Member 'MenuUtilities_AreAllGuestCharactersReady::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuUtilities.GetAllMenuCharacters
// 0x0010 (0x0010 - 0x0000)
struct MenuUtilities_GetAllMenuCharacters final
{
public:
	TArray<class ADBDMenuPlayer*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuUtilities_GetAllMenuCharacters) == 0x000008, "Wrong alignment on MenuUtilities_GetAllMenuCharacters");
static_assert(sizeof(MenuUtilities_GetAllMenuCharacters) == 0x000010, "Wrong size on MenuUtilities_GetAllMenuCharacters");
static_assert(offsetof(MenuUtilities_GetAllMenuCharacters, ReturnValue) == 0x000000, "Member 'MenuUtilities_GetAllMenuCharacters::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.JumpToSection
// 0x000C (0x000C - 0x0000)
struct MontagePlayer_JumpToSection final
{
public:
	class FName                                   sectionName;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_JumpToSection) == 0x000004, "Wrong alignment on MontagePlayer_JumpToSection");
static_assert(sizeof(MontagePlayer_JumpToSection) == 0x00000C, "Wrong size on MontagePlayer_JumpToSection");
static_assert(offsetof(MontagePlayer_JumpToSection, sectionName) == 0x000000, "Member 'MontagePlayer_JumpToSection::sectionName' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.JumpToSectionEnd
// 0x000C (0x000C - 0x0000)
struct MontagePlayer_JumpToSectionEnd final
{
public:
	class FName                                   sectionName;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_JumpToSectionEnd) == 0x000004, "Wrong alignment on MontagePlayer_JumpToSectionEnd");
static_assert(sizeof(MontagePlayer_JumpToSectionEnd) == 0x00000C, "Wrong size on MontagePlayer_JumpToSectionEnd");
static_assert(offsetof(MontagePlayer_JumpToSectionEnd, sectionName) == 0x000000, "Member 'MontagePlayer_JumpToSectionEnd::sectionName' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.OnMontageBlendingOutInternal
// 0x0020 (0x0020 - 0x0000)
struct MontagePlayer_OnMontageBlendingOutInternal final
{
public:
	struct FGuid                                  guid;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           montage;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          interrupted;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MontagePlayer_OnMontageBlendingOutInternal) == 0x000008, "Wrong alignment on MontagePlayer_OnMontageBlendingOutInternal");
static_assert(sizeof(MontagePlayer_OnMontageBlendingOutInternal) == 0x000020, "Wrong size on MontagePlayer_OnMontageBlendingOutInternal");
static_assert(offsetof(MontagePlayer_OnMontageBlendingOutInternal, guid) == 0x000000, "Member 'MontagePlayer_OnMontageBlendingOutInternal::guid' has a wrong offset!");
static_assert(offsetof(MontagePlayer_OnMontageBlendingOutInternal, montage) == 0x000010, "Member 'MontagePlayer_OnMontageBlendingOutInternal::montage' has a wrong offset!");
static_assert(offsetof(MontagePlayer_OnMontageBlendingOutInternal, interrupted) == 0x000018, "Member 'MontagePlayer_OnMontageBlendingOutInternal::interrupted' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.OnMontageEndedInternal
// 0x0020 (0x0020 - 0x0000)
struct MontagePlayer_OnMontageEndedInternal final
{
public:
	struct FGuid                                  guid;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           montage;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          interrupted;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MontagePlayer_OnMontageEndedInternal) == 0x000008, "Wrong alignment on MontagePlayer_OnMontageEndedInternal");
static_assert(sizeof(MontagePlayer_OnMontageEndedInternal) == 0x000020, "Wrong size on MontagePlayer_OnMontageEndedInternal");
static_assert(offsetof(MontagePlayer_OnMontageEndedInternal, guid) == 0x000000, "Member 'MontagePlayer_OnMontageEndedInternal::guid' has a wrong offset!");
static_assert(offsetof(MontagePlayer_OnMontageEndedInternal, montage) == 0x000010, "Member 'MontagePlayer_OnMontageEndedInternal::montage' has a wrong offset!");
static_assert(offsetof(MontagePlayer_OnMontageEndedInternal, interrupted) == 0x000018, "Member 'MontagePlayer_OnMontageEndedInternal::interrupted' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.Play
// 0x0030 (0x0030 - 0x0000)
struct MontagePlayer_Play final
{
public:
	struct FAnimationMontageDescriptor            animMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         playRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isFollower;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_Play) == 0x000008, "Wrong alignment on MontagePlayer_Play");
static_assert(sizeof(MontagePlayer_Play) == 0x000030, "Wrong size on MontagePlayer_Play");
static_assert(offsetof(MontagePlayer_Play, animMontageID) == 0x000000, "Member 'MontagePlayer_Play::animMontageID' has a wrong offset!");
static_assert(offsetof(MontagePlayer_Play, playRate) == 0x000020, "Member 'MontagePlayer_Play::playRate' has a wrong offset!");
static_assert(offsetof(MontagePlayer_Play, isFollower) == 0x000024, "Member 'MontagePlayer_Play::isFollower' has a wrong offset!");
static_assert(offsetof(MontagePlayer_Play, ReturnValue) == 0x000028, "Member 'MontagePlayer_Play::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.PlayLoopForDuration
// 0x0040 (0x0040 - 0x0000)
struct MontagePlayer_PlayLoopForDuration final
{
public:
	struct FAnimationMontageDescriptor            animMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         playRate;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   out;                                               // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_PlayLoopForDuration) == 0x000008, "Wrong alignment on MontagePlayer_PlayLoopForDuration");
static_assert(sizeof(MontagePlayer_PlayLoopForDuration) == 0x000040, "Wrong size on MontagePlayer_PlayLoopForDuration");
static_assert(offsetof(MontagePlayer_PlayLoopForDuration, animMontageID) == 0x000000, "Member 'MontagePlayer_PlayLoopForDuration::animMontageID' has a wrong offset!");
static_assert(offsetof(MontagePlayer_PlayLoopForDuration, duration) == 0x000020, "Member 'MontagePlayer_PlayLoopForDuration::duration' has a wrong offset!");
static_assert(offsetof(MontagePlayer_PlayLoopForDuration, playRate) == 0x000024, "Member 'MontagePlayer_PlayLoopForDuration::playRate' has a wrong offset!");
static_assert(offsetof(MontagePlayer_PlayLoopForDuration, out) == 0x000028, "Member 'MontagePlayer_PlayLoopForDuration::out' has a wrong offset!");
static_assert(offsetof(MontagePlayer_PlayLoopForDuration, ReturnValue) == 0x000038, "Member 'MontagePlayer_PlayLoopForDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.SetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct MontagePlayer_SetPlayRate final
{
public:
	float                                         playRate;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_SetPlayRate) == 0x000004, "Wrong alignment on MontagePlayer_SetPlayRate");
static_assert(sizeof(MontagePlayer_SetPlayRate) == 0x000004, "Wrong size on MontagePlayer_SetPlayRate");
static_assert(offsetof(MontagePlayer_SetPlayRate, playRate) == 0x000000, "Member 'MontagePlayer_SetPlayRate::playRate' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.SetSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct MontagePlayer_SetSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 skeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_SetSkeletalMesh) == 0x000008, "Wrong alignment on MontagePlayer_SetSkeletalMesh");
static_assert(sizeof(MontagePlayer_SetSkeletalMesh) == 0x000008, "Wrong size on MontagePlayer_SetSkeletalMesh");
static_assert(offsetof(MontagePlayer_SetSkeletalMesh, skeletalMeshComponent) == 0x000000, "Member 'MontagePlayer_SetSkeletalMesh::skeletalMeshComponent' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.Stop
// 0x0004 (0x0004 - 0x0000)
struct MontagePlayer_Stop final
{
public:
	float                                         blendOutTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_Stop) == 0x000004, "Wrong alignment on MontagePlayer_Stop");
static_assert(sizeof(MontagePlayer_Stop) == 0x000004, "Wrong size on MontagePlayer_Stop");
static_assert(offsetof(MontagePlayer_Stop, blendOutTime) == 0x000000, "Member 'MontagePlayer_Stop::blendOutTime' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.GetAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct MontagePlayer_GetAnimInstance final
{
public:
	class UAnimInstance*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_GetAnimInstance) == 0x000008, "Wrong alignment on MontagePlayer_GetAnimInstance");
static_assert(sizeof(MontagePlayer_GetAnimInstance) == 0x000008, "Wrong size on MontagePlayer_GetAnimInstance");
static_assert(offsetof(MontagePlayer_GetAnimInstance, ReturnValue) == 0x000000, "Member 'MontagePlayer_GetAnimInstance::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.IsPlaying
// 0x0028 (0x0028 - 0x0000)
struct MontagePlayer_IsPlaying final
{
public:
	struct FAnimationMontageDescriptor            montageDescriptor;                                 // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MontagePlayer_IsPlaying) == 0x000008, "Wrong alignment on MontagePlayer_IsPlaying");
static_assert(sizeof(MontagePlayer_IsPlaying) == 0x000028, "Wrong size on MontagePlayer_IsPlaying");
static_assert(offsetof(MontagePlayer_IsPlaying, montageDescriptor) == 0x000000, "Member 'MontagePlayer_IsPlaying::montageDescriptor' has a wrong offset!");
static_assert(offsetof(MontagePlayer_IsPlaying, ReturnValue) == 0x000020, "Member 'MontagePlayer_IsPlaying::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.IsPlayingAnyMontage
// 0x0001 (0x0001 - 0x0000)
struct MontagePlayer_IsPlayingAnyMontage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_IsPlayingAnyMontage) == 0x000001, "Wrong alignment on MontagePlayer_IsPlayingAnyMontage");
static_assert(sizeof(MontagePlayer_IsPlayingAnyMontage) == 0x000001, "Wrong size on MontagePlayer_IsPlayingAnyMontage");
static_assert(offsetof(MontagePlayer_IsPlayingAnyMontage, ReturnValue) == 0x000000, "Member 'MontagePlayer_IsPlayingAnyMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MoriableComponent.OnMoriFinished
// 0x0001 (0x0001 - 0x0000)
struct MoriableComponent_OnMoriFinished final
{
public:
	bool                                          hasBeenKilledByMori;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoriableComponent_OnMoriFinished) == 0x000001, "Wrong alignment on MoriableComponent_OnMoriFinished");
static_assert(sizeof(MoriableComponent_OnMoriFinished) == 0x000001, "Wrong size on MoriableComponent_OnMoriFinished");
static_assert(offsetof(MoriableComponent_OnMoriFinished, hasBeenKilledByMori) == 0x000000, "Member 'MoriableComponent_OnMoriFinished::hasBeenKilledByMori' has a wrong offset!");

// Function DeadByDaylight.MultipleLightsFader.SetAffectedLights
// 0x0010 (0x0010 - 0x0000)
struct MultipleLightsFader_SetAffectedLights final
{
public:
	TArray<class ULightComponent*>                affectedLights;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultipleLightsFader_SetAffectedLights) == 0x000008, "Wrong alignment on MultipleLightsFader_SetAffectedLights");
static_assert(sizeof(MultipleLightsFader_SetAffectedLights) == 0x000010, "Wrong size on MultipleLightsFader_SetAffectedLights");
static_assert(offsetof(MultipleLightsFader_SetAffectedLights, affectedLights) == 0x000000, "Member 'MultipleLightsFader_SetAffectedLights::affectedLights' has a wrong offset!");

// Function DeadByDaylight.NatAudioAmbienceBox.OnBeginOverlapAudioAmbience
// 0x00B0 (0x00B0 - 0x0000)
struct NatAudioAmbienceBox_OnBeginOverlapAudioAmbience final
{
public:
	class UPrimitiveComponent*                    overlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience) == 0x000008, "Wrong alignment on NatAudioAmbienceBox_OnBeginOverlapAudioAmbience");
static_assert(sizeof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience) == 0x0000B0, "Wrong size on NatAudioAmbienceBox_OnBeginOverlapAudioAmbience");
static_assert(offsetof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience, overlappedComponent) == 0x000000, "Member 'NatAudioAmbienceBox_OnBeginOverlapAudioAmbience::overlappedComponent' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience, otherActor) == 0x000008, "Member 'NatAudioAmbienceBox_OnBeginOverlapAudioAmbience::otherActor' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience, otherComp) == 0x000010, "Member 'NatAudioAmbienceBox_OnBeginOverlapAudioAmbience::otherComp' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience, otherBodyIndex) == 0x000018, "Member 'NatAudioAmbienceBox_OnBeginOverlapAudioAmbience::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience, bFromSweep) == 0x00001C, "Member 'NatAudioAmbienceBox_OnBeginOverlapAudioAmbience::bFromSweep' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience, sweepResult) == 0x000020, "Member 'NatAudioAmbienceBox_OnBeginOverlapAudioAmbience::sweepResult' has a wrong offset!");

// Function DeadByDaylight.NatAudioAmbienceBox.OnEndOverlapAudioAmbience
// 0x0020 (0x0020 - 0x0000)
struct NatAudioAmbienceBox_OnEndOverlapAudioAmbience final
{
public:
	class UPrimitiveComponent*                    overlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NatAudioAmbienceBox_OnEndOverlapAudioAmbience) == 0x000008, "Wrong alignment on NatAudioAmbienceBox_OnEndOverlapAudioAmbience");
static_assert(sizeof(NatAudioAmbienceBox_OnEndOverlapAudioAmbience) == 0x000020, "Wrong size on NatAudioAmbienceBox_OnEndOverlapAudioAmbience");
static_assert(offsetof(NatAudioAmbienceBox_OnEndOverlapAudioAmbience, overlappedComponent) == 0x000000, "Member 'NatAudioAmbienceBox_OnEndOverlapAudioAmbience::overlappedComponent' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnEndOverlapAudioAmbience, otherActor) == 0x000008, "Member 'NatAudioAmbienceBox_OnEndOverlapAudioAmbience::otherActor' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnEndOverlapAudioAmbience, otherComp) == 0x000010, "Member 'NatAudioAmbienceBox_OnEndOverlapAudioAmbience::otherComp' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnEndOverlapAudioAmbience, otherBodyIndex) == 0x000018, "Member 'NatAudioAmbienceBox_OnEndOverlapAudioAmbience::otherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.NavigationScreen.OnAddPlayerClick
// 0x0004 (0x0004 - 0x0000)
struct NavigationScreen_OnAddPlayerClick final
{
public:
	int32                                         buttonId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationScreen_OnAddPlayerClick) == 0x000004, "Wrong alignment on NavigationScreen_OnAddPlayerClick");
static_assert(sizeof(NavigationScreen_OnAddPlayerClick) == 0x000004, "Wrong size on NavigationScreen_OnAddPlayerClick");
static_assert(offsetof(NavigationScreen_OnAddPlayerClick, buttonId) == 0x000000, "Member 'NavigationScreen_OnAddPlayerClick::buttonId' has a wrong offset!");

// Function DeadByDaylight.NavigationScreen.OnCharacterSwapArrowClick
// 0x0001 (0x0001 - 0x0000)
struct NavigationScreen_OnCharacterSwapArrowClick final
{
public:
	bool                                          isNext;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationScreen_OnCharacterSwapArrowClick) == 0x000001, "Wrong alignment on NavigationScreen_OnCharacterSwapArrowClick");
static_assert(sizeof(NavigationScreen_OnCharacterSwapArrowClick) == 0x000001, "Wrong size on NavigationScreen_OnCharacterSwapArrowClick");
static_assert(offsetof(NavigationScreen_OnCharacterSwapArrowClick, isNext) == 0x000000, "Member 'NavigationScreen_OnCharacterSwapArrowClick::isNext' has a wrong offset!");

// Function DeadByDaylight.NavigationScreen.OnChatInputMouseOver
// 0x0001 (0x0001 - 0x0000)
struct NavigationScreen_OnChatInputMouseOver final
{
public:
	bool                                          isMouseOver;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationScreen_OnChatInputMouseOver) == 0x000001, "Wrong alignment on NavigationScreen_OnChatInputMouseOver");
static_assert(sizeof(NavigationScreen_OnChatInputMouseOver) == 0x000001, "Wrong size on NavigationScreen_OnChatInputMouseOver");
static_assert(offsetof(NavigationScreen_OnChatInputMouseOver, isMouseOver) == 0x000000, "Member 'NavigationScreen_OnChatInputMouseOver::isMouseOver' has a wrong offset!");

// Function DeadByDaylight.NavigationScreen.OnPlayerInfoClick
// 0x0004 (0x0004 - 0x0000)
struct NavigationScreen_OnPlayerInfoClick final
{
public:
	int32                                         playerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationScreen_OnPlayerInfoClick) == 0x000004, "Wrong alignment on NavigationScreen_OnPlayerInfoClick");
static_assert(sizeof(NavigationScreen_OnPlayerInfoClick) == 0x000004, "Wrong size on NavigationScreen_OnPlayerInfoClick");
static_assert(offsetof(NavigationScreen_OnPlayerInfoClick, playerId) == 0x000000, "Member 'NavigationScreen_OnPlayerInfoClick::playerId' has a wrong offset!");

// Function DeadByDaylight.NavigationScreen.OnPlayerOptionSelected
// 0x0028 (0x0028 - 0x0000)
struct NavigationScreen_OnPlayerOptionSelected final
{
public:
	class FString                                 krakenId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 playerId;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         option;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationScreen_OnPlayerOptionSelected) == 0x000008, "Wrong alignment on NavigationScreen_OnPlayerOptionSelected");
static_assert(sizeof(NavigationScreen_OnPlayerOptionSelected) == 0x000028, "Wrong size on NavigationScreen_OnPlayerOptionSelected");
static_assert(offsetof(NavigationScreen_OnPlayerOptionSelected, krakenId) == 0x000000, "Member 'NavigationScreen_OnPlayerOptionSelected::krakenId' has a wrong offset!");
static_assert(offsetof(NavigationScreen_OnPlayerOptionSelected, playerId) == 0x000010, "Member 'NavigationScreen_OnPlayerOptionSelected::playerId' has a wrong offset!");
static_assert(offsetof(NavigationScreen_OnPlayerOptionSelected, option) == 0x000020, "Member 'NavigationScreen_OnPlayerOptionSelected::option' has a wrong offset!");

// Function DeadByDaylight.NavigationScreen.OnSendChatMsgButtonClick
// 0x0010 (0x0010 - 0x0000)
struct NavigationScreen_OnSendChatMsgButtonClick final
{
public:
	class FString                                 message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationScreen_OnSendChatMsgButtonClick) == 0x000008, "Wrong alignment on NavigationScreen_OnSendChatMsgButtonClick");
static_assert(sizeof(NavigationScreen_OnSendChatMsgButtonClick) == 0x000010, "Wrong size on NavigationScreen_OnSendChatMsgButtonClick");
static_assert(offsetof(NavigationScreen_OnSendChatMsgButtonClick, message) == 0x000000, "Member 'NavigationScreen_OnSendChatMsgButtonClick::message' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.ActivateObjectPlacement
// 0x0001 (0x0001 - 0x0000)
struct ObjectPlacerComponent_ActivateObjectPlacement final
{
public:
	bool                                          active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_ActivateObjectPlacement) == 0x000001, "Wrong alignment on ObjectPlacerComponent_ActivateObjectPlacement");
static_assert(sizeof(ObjectPlacerComponent_ActivateObjectPlacement) == 0x000001, "Wrong size on ObjectPlacerComponent_ActivateObjectPlacement");
static_assert(offsetof(ObjectPlacerComponent_ActivateObjectPlacement, active) == 0x000000, "Member 'ObjectPlacerComponent_ActivateObjectPlacement::active' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.SetHideIndicatorDuringAttack
// 0x0001 (0x0001 - 0x0000)
struct ObjectPlacerComponent_SetHideIndicatorDuringAttack final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_SetHideIndicatorDuringAttack) == 0x000001, "Wrong alignment on ObjectPlacerComponent_SetHideIndicatorDuringAttack");
static_assert(sizeof(ObjectPlacerComponent_SetHideIndicatorDuringAttack) == 0x000001, "Wrong size on ObjectPlacerComponent_SetHideIndicatorDuringAttack");
static_assert(offsetof(ObjectPlacerComponent_SetHideIndicatorDuringAttack, enable) == 0x000000, "Member 'ObjectPlacerComponent_SetHideIndicatorDuringAttack::enable' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.SetIndicatorOffsetX
// 0x0004 (0x0004 - 0x0000)
struct ObjectPlacerComponent_SetIndicatorOffsetX final
{
public:
	float                                         x;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_SetIndicatorOffsetX) == 0x000004, "Wrong alignment on ObjectPlacerComponent_SetIndicatorOffsetX");
static_assert(sizeof(ObjectPlacerComponent_SetIndicatorOffsetX) == 0x000004, "Wrong size on ObjectPlacerComponent_SetIndicatorOffsetX");
static_assert(offsetof(ObjectPlacerComponent_SetIndicatorOffsetX, x) == 0x000000, "Member 'ObjectPlacerComponent_SetIndicatorOffsetX::x' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.SetIndicatorOffsetY
// 0x0004 (0x0004 - 0x0000)
struct ObjectPlacerComponent_SetIndicatorOffsetY final
{
public:
	float                                         y;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_SetIndicatorOffsetY) == 0x000004, "Wrong alignment on ObjectPlacerComponent_SetIndicatorOffsetY");
static_assert(sizeof(ObjectPlacerComponent_SetIndicatorOffsetY) == 0x000004, "Wrong size on ObjectPlacerComponent_SetIndicatorOffsetY");
static_assert(offsetof(ObjectPlacerComponent_SetIndicatorOffsetY, y) == 0x000000, "Member 'ObjectPlacerComponent_SetIndicatorOffsetY::y' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.SetMeshOffsetZ
// 0x0004 (0x0004 - 0x0000)
struct ObjectPlacerComponent_SetMeshOffsetZ final
{
public:
	float                                         z;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_SetMeshOffsetZ) == 0x000004, "Wrong alignment on ObjectPlacerComponent_SetMeshOffsetZ");
static_assert(sizeof(ObjectPlacerComponent_SetMeshOffsetZ) == 0x000004, "Wrong size on ObjectPlacerComponent_SetMeshOffsetZ");
static_assert(offsetof(ObjectPlacerComponent_SetMeshOffsetZ, z) == 0x000000, "Member 'ObjectPlacerComponent_SetMeshOffsetZ::z' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.SetObjectMesh
// 0x0008 (0x0008 - 0x0000)
struct ObjectPlacerComponent_SetObjectMesh final
{
public:
	class UStaticMeshComponent*                   objectMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_SetObjectMesh) == 0x000008, "Wrong alignment on ObjectPlacerComponent_SetObjectMesh");
static_assert(sizeof(ObjectPlacerComponent_SetObjectMesh) == 0x000008, "Wrong size on ObjectPlacerComponent_SetObjectMesh");
static_assert(offsetof(ObjectPlacerComponent_SetObjectMesh, objectMesh) == 0x000000, "Member 'ObjectPlacerComponent_SetObjectMesh::objectMesh' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.SetShowIndicator
// 0x0001 (0x0001 - 0x0000)
struct ObjectPlacerComponent_SetShowIndicator final
{
public:
	bool                                          newValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_SetShowIndicator) == 0x000001, "Wrong alignment on ObjectPlacerComponent_SetShowIndicator");
static_assert(sizeof(ObjectPlacerComponent_SetShowIndicator) == 0x000001, "Wrong size on ObjectPlacerComponent_SetShowIndicator");
static_assert(offsetof(ObjectPlacerComponent_SetShowIndicator, newValue) == 0x000000, "Member 'ObjectPlacerComponent_SetShowIndicator::newValue' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.GetObjectPlacementLocation
// 0x000C (0x000C - 0x0000)
struct ObjectPlacerComponent_GetObjectPlacementLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_GetObjectPlacementLocation) == 0x000004, "Wrong alignment on ObjectPlacerComponent_GetObjectPlacementLocation");
static_assert(sizeof(ObjectPlacerComponent_GetObjectPlacementLocation) == 0x00000C, "Wrong size on ObjectPlacerComponent_GetObjectPlacementLocation");
static_assert(offsetof(ObjectPlacerComponent_GetObjectPlacementLocation, ReturnValue) == 0x000000, "Member 'ObjectPlacerComponent_GetObjectPlacementLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.GetObjectPlacementRotation
// 0x000C (0x000C - 0x0000)
struct ObjectPlacerComponent_GetObjectPlacementRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_GetObjectPlacementRotation) == 0x000004, "Wrong alignment on ObjectPlacerComponent_GetObjectPlacementRotation");
static_assert(sizeof(ObjectPlacerComponent_GetObjectPlacementRotation) == 0x00000C, "Wrong size on ObjectPlacerComponent_GetObjectPlacementRotation");
static_assert(offsetof(ObjectPlacerComponent_GetObjectPlacementRotation, ReturnValue) == 0x000000, "Member 'ObjectPlacerComponent_GetObjectPlacementRotation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.IsPlacementValid
// 0x0001 (0x0001 - 0x0000)
struct ObjectPlacerComponent_IsPlacementValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_IsPlacementValid) == 0x000001, "Wrong alignment on ObjectPlacerComponent_IsPlacementValid");
static_assert(sizeof(ObjectPlacerComponent_IsPlacementValid) == 0x000001, "Wrong size on ObjectPlacerComponent_IsPlacementValid");
static_assert(offsetof(ObjectPlacerComponent_IsPlacementValid, ReturnValue) == 0x000000, "Member 'ObjectPlacerComponent_IsPlacementValid::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingCard.ChangeAnimationClass
// 0x0008 (0x0008 - 0x0000)
struct OfferingCard_ChangeAnimationClass final
{
public:
	TSubclassOf<class UOfferingCardAnim>          animationClass;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingCard_ChangeAnimationClass) == 0x000008, "Wrong alignment on OfferingCard_ChangeAnimationClass");
static_assert(sizeof(OfferingCard_ChangeAnimationClass) == 0x000008, "Wrong size on OfferingCard_ChangeAnimationClass");
static_assert(offsetof(OfferingCard_ChangeAnimationClass, animationClass) == 0x000000, "Member 'OfferingCard_ChangeAnimationClass::animationClass' has a wrong offset!");

// Function DeadByDaylight.OfferingCard.ChangeState
// 0x0001 (0x0001 - 0x0000)
struct OfferingCard_ChangeState final
{
public:
	EOfferingAnimState                            state;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingCard_ChangeState) == 0x000001, "Wrong alignment on OfferingCard_ChangeState");
static_assert(sizeof(OfferingCard_ChangeState) == 0x000001, "Wrong size on OfferingCard_ChangeState");
static_assert(offsetof(OfferingCard_ChangeState, state) == 0x000000, "Member 'OfferingCard_ChangeState::state' has a wrong offset!");

// Function DeadByDaylight.OfferingCard.HandleStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OfferingCard_HandleStateChanged final
{
public:
	EOfferingAnimState                            state;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingCard_HandleStateChanged) == 0x000001, "Wrong alignment on OfferingCard_HandleStateChanged");
static_assert(sizeof(OfferingCard_HandleStateChanged) == 0x000001, "Wrong size on OfferingCard_HandleStateChanged");
static_assert(offsetof(OfferingCard_HandleStateChanged, state) == 0x000000, "Member 'OfferingCard_HandleStateChanged::state' has a wrong offset!");

// Function DeadByDaylight.OfferingCard.GetCardAnimation
// 0x0008 (0x0008 - 0x0000)
struct OfferingCard_GetCardAnimation final
{
public:
	class UOfferingCardAnim*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingCard_GetCardAnimation) == 0x000008, "Wrong alignment on OfferingCard_GetCardAnimation");
static_assert(sizeof(OfferingCard_GetCardAnimation) == 0x000008, "Wrong size on OfferingCard_GetCardAnimation");
static_assert(offsetof(OfferingCard_GetCardAnimation, ReturnValue) == 0x000000, "Member 'OfferingCard_GetCardAnimation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingCard.GetState
// 0x0001 (0x0001 - 0x0000)
struct OfferingCard_GetState final
{
public:
	EOfferingAnimState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingCard_GetState) == 0x000001, "Wrong alignment on OfferingCard_GetState");
static_assert(sizeof(OfferingCard_GetState) == 0x000001, "Wrong size on OfferingCard_GetState");
static_assert(offsetof(OfferingCard_GetState, ReturnValue) == 0x000000, "Member 'OfferingCard_GetState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingCard.IsRevealed
// 0x0001 (0x0001 - 0x0000)
struct OfferingCard_IsRevealed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingCard_IsRevealed) == 0x000001, "Wrong alignment on OfferingCard_IsRevealed");
static_assert(sizeof(OfferingCard_IsRevealed) == 0x000001, "Wrong size on OfferingCard_IsRevealed");
static_assert(offsetof(OfferingCard_IsRevealed, ReturnValue) == 0x000000, "Member 'OfferingCard_IsRevealed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingEffectCollection.HasOfferingOfType
// 0x0018 (0x0018 - 0x0000)
struct OfferingEffectCollection_HasOfferingOfType final
{
public:
	EOfferingEffectType                           type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         playerId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   tag;                                               // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OfferingEffectCollection_HasOfferingOfType) == 0x000004, "Wrong alignment on OfferingEffectCollection_HasOfferingOfType");
static_assert(sizeof(OfferingEffectCollection_HasOfferingOfType) == 0x000018, "Wrong size on OfferingEffectCollection_HasOfferingOfType");
static_assert(offsetof(OfferingEffectCollection_HasOfferingOfType, type) == 0x000000, "Member 'OfferingEffectCollection_HasOfferingOfType::type' has a wrong offset!");
static_assert(offsetof(OfferingEffectCollection_HasOfferingOfType, playerId) == 0x000004, "Member 'OfferingEffectCollection_HasOfferingOfType::playerId' has a wrong offset!");
static_assert(offsetof(OfferingEffectCollection_HasOfferingOfType, tag) == 0x000008, "Member 'OfferingEffectCollection_HasOfferingOfType::tag' has a wrong offset!");
static_assert(offsetof(OfferingEffectCollection_HasOfferingOfType, ReturnValue) == 0x000014, "Member 'OfferingEffectCollection_HasOfferingOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingEffectCollection.HasOfferingWithTag
// 0x0014 (0x0014 - 0x0000)
struct OfferingEffectCollection_HasOfferingWithTag final
{
public:
	int32                                         playerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   tag;                                               // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OfferingEffectCollection_HasOfferingWithTag) == 0x000004, "Wrong alignment on OfferingEffectCollection_HasOfferingWithTag");
static_assert(sizeof(OfferingEffectCollection_HasOfferingWithTag) == 0x000014, "Wrong size on OfferingEffectCollection_HasOfferingWithTag");
static_assert(offsetof(OfferingEffectCollection_HasOfferingWithTag, playerId) == 0x000000, "Member 'OfferingEffectCollection_HasOfferingWithTag::playerId' has a wrong offset!");
static_assert(offsetof(OfferingEffectCollection_HasOfferingWithTag, tag) == 0x000004, "Member 'OfferingEffectCollection_HasOfferingWithTag::tag' has a wrong offset!");
static_assert(offsetof(OfferingEffectCollection_HasOfferingWithTag, ReturnValue) == 0x000010, "Member 'OfferingEffectCollection_HasOfferingWithTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfflineLobbyLevel.CheckDestroyingPawns
// 0x0008 (0x0008 - 0x0000)
struct OfflineLobbyLevel_CheckDestroyingPawns final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfflineLobbyLevel_CheckDestroyingPawns) == 0x000008, "Wrong alignment on OfflineLobbyLevel_CheckDestroyingPawns");
static_assert(sizeof(OfflineLobbyLevel_CheckDestroyingPawns) == 0x000008, "Wrong size on OfflineLobbyLevel_CheckDestroyingPawns");
static_assert(offsetof(OfflineLobbyLevel_CheckDestroyingPawns, DestroyedActor) == 0x000000, "Member 'OfflineLobbyLevel_CheckDestroyingPawns::DestroyedActor' has a wrong offset!");

// Function DeadByDaylight.OfflineLobbyLevel.OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OfflineLobbyLevel_OnStateChanged final
{
public:
	EOfflineLobbyState                            lobbyState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfflineLobbyLevel_OnStateChanged) == 0x000001, "Wrong alignment on OfflineLobbyLevel_OnStateChanged");
static_assert(sizeof(OfflineLobbyLevel_OnStateChanged) == 0x000001, "Wrong size on OfflineLobbyLevel_OnStateChanged");
static_assert(offsetof(OfflineLobbyLevel_OnStateChanged, lobbyState) == 0x000000, "Member 'OfflineLobbyLevel_OnStateChanged::lobbyState' has a wrong offset!");

// Function DeadByDaylight.OtherCharactersVerticalCollisionsHandler.OnPawnDetectorOverlapEnter
// 0x00B0 (0x00B0 - 0x0000)
struct OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter final
{
public:
	class UPrimitiveComponent*                    hitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter) == 0x000008, "Wrong alignment on OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter");
static_assert(sizeof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter) == 0x0000B0, "Wrong size on OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter, hitComponent) == 0x000000, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter::hitComponent' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter, otherActor) == 0x000008, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter::otherActor' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter, otherComp) == 0x000010, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter::otherComp' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter, otherBodyIndex) == 0x000018, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter, bFromSweep) == 0x00001C, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter, sweepResult) == 0x000020, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter::sweepResult' has a wrong offset!");

// Function DeadByDaylight.OtherCharactersVerticalCollisionsHandler.OnPawnDetectorOverlapExit
// 0x0020 (0x0020 - 0x0000)
struct OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit final
{
public:
	class UPrimitiveComponent*                    hitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit) == 0x000008, "Wrong alignment on OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit");
static_assert(sizeof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit) == 0x000020, "Wrong size on OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit, hitComponent) == 0x000000, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit::hitComponent' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit, otherActor) == 0x000008, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit::otherActor' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit, otherComp) == 0x000010, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit::otherComp' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit, otherBodyIndex) == 0x000018, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit::otherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.OtherCharactersVerticalCollisionsHandler.SetPawnDetector
// 0x0008 (0x0008 - 0x0000)
struct OtherCharactersVerticalCollisionsHandler_SetPawnDetector final
{
public:
	class UCapsuleComponent*                      pawnDetector;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OtherCharactersVerticalCollisionsHandler_SetPawnDetector) == 0x000008, "Wrong alignment on OtherCharactersVerticalCollisionsHandler_SetPawnDetector");
static_assert(sizeof(OtherCharactersVerticalCollisionsHandler_SetPawnDetector) == 0x000008, "Wrong size on OtherCharactersVerticalCollisionsHandler_SetPawnDetector");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_SetPawnDetector, pawnDetector) == 0x000000, "Member 'OtherCharactersVerticalCollisionsHandler_SetPawnDetector::pawnDetector' has a wrong offset!");

// Function DeadByDaylight.OutOfSightMeshRotator.SetMeshesToRotate
// 0x0010 (0x0010 - 0x0000)
struct OutOfSightMeshRotator_SetMeshesToRotate final
{
public:
	TArray<class UMeshComponent*>                 meshesToRotate;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OutOfSightMeshRotator_SetMeshesToRotate) == 0x000008, "Wrong alignment on OutOfSightMeshRotator_SetMeshesToRotate");
static_assert(sizeof(OutOfSightMeshRotator_SetMeshesToRotate) == 0x000010, "Wrong size on OutOfSightMeshRotator_SetMeshesToRotate");
static_assert(offsetof(OutOfSightMeshRotator_SetMeshesToRotate, meshesToRotate) == 0x000000, "Member 'OutOfSightMeshRotator_SetMeshesToRotate::meshesToRotate' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnAimAssistClick
// 0x0001 (0x0001 - 0x0000)
struct OverlayMenuScreen_OnAimAssistClick final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnAimAssistClick) == 0x000001, "Wrong alignment on OverlayMenuScreen_OnAimAssistClick");
static_assert(sizeof(OverlayMenuScreen_OnAimAssistClick) == 0x000001, "Wrong size on OverlayMenuScreen_OnAimAssistClick");
static_assert(offsetof(OverlayMenuScreen_OnAimAssistClick, value) == 0x000000, "Member 'OverlayMenuScreen_OnAimAssistClick::value' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnAtlantaSettingButtonClick
// 0x0004 (0x0004 - 0x0000)
struct OverlayMenuScreen_OnAtlantaSettingButtonClick final
{
public:
	int32                                         buttonID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnAtlantaSettingButtonClick) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnAtlantaSettingButtonClick");
static_assert(sizeof(OverlayMenuScreen_OnAtlantaSettingButtonClick) == 0x000004, "Wrong size on OverlayMenuScreen_OnAtlantaSettingButtonClick");
static_assert(offsetof(OverlayMenuScreen_OnAtlantaSettingButtonClick, buttonID) == 0x000000, "Member 'OverlayMenuScreen_OnAtlantaSettingButtonClick::buttonID' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnKillerCameraSensitivityChanged
// 0x0004 (0x0004 - 0x0000)
struct OverlayMenuScreen_OnKillerCameraSensitivityChanged final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnKillerCameraSensitivityChanged) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnKillerCameraSensitivityChanged");
static_assert(sizeof(OverlayMenuScreen_OnKillerCameraSensitivityChanged) == 0x000004, "Wrong size on OverlayMenuScreen_OnKillerCameraSensitivityChanged");
static_assert(offsetof(OverlayMenuScreen_OnKillerCameraSensitivityChanged, value) == 0x000000, "Member 'OverlayMenuScreen_OnKillerCameraSensitivityChanged::value' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnLanguageChange
// 0x0004 (0x0004 - 0x0000)
struct OverlayMenuScreen_OnLanguageChange final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnLanguageChange) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnLanguageChange");
static_assert(sizeof(OverlayMenuScreen_OnLanguageChange) == 0x000004, "Wrong size on OverlayMenuScreen_OnLanguageChange");
static_assert(offsetof(OverlayMenuScreen_OnLanguageChange, value) == 0x000000, "Member 'OverlayMenuScreen_OnLanguageChange::value' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnPlayerInfoClick
// 0x0010 (0x0010 - 0x0000)
struct OverlayMenuScreen_OnPlayerInfoClick final
{
public:
	class FString                                 playerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnPlayerInfoClick) == 0x000008, "Wrong alignment on OverlayMenuScreen_OnPlayerInfoClick");
static_assert(sizeof(OverlayMenuScreen_OnPlayerInfoClick) == 0x000010, "Wrong size on OverlayMenuScreen_OnPlayerInfoClick");
static_assert(offsetof(OverlayMenuScreen_OnPlayerInfoClick, playerId) == 0x000000, "Member 'OverlayMenuScreen_OnPlayerInfoClick::playerId' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnRequestKeyBindingInput
// 0x0018 (0x0018 - 0x0000)
struct OverlayMenuScreen_OnRequestKeyBindingInput final
{
public:
	int32                                         id;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnRequestKeyBindingInput) == 0x000008, "Wrong alignment on OverlayMenuScreen_OnRequestKeyBindingInput");
static_assert(sizeof(OverlayMenuScreen_OnRequestKeyBindingInput) == 0x000018, "Wrong size on OverlayMenuScreen_OnRequestKeyBindingInput");
static_assert(offsetof(OverlayMenuScreen_OnRequestKeyBindingInput, id) == 0x000000, "Member 'OverlayMenuScreen_OnRequestKeyBindingInput::id' has a wrong offset!");
static_assert(offsetof(OverlayMenuScreen_OnRequestKeyBindingInput, key) == 0x000008, "Member 'OverlayMenuScreen_OnRequestKeyBindingInput::key' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnSelectTab
// 0x0004 (0x0004 - 0x0000)
struct OverlayMenuScreen_OnSelectTab final
{
public:
	int32                                         tabIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnSelectTab) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnSelectTab");
static_assert(sizeof(OverlayMenuScreen_OnSelectTab) == 0x000004, "Wrong size on OverlayMenuScreen_OnSelectTab");
static_assert(offsetof(OverlayMenuScreen_OnSelectTab, tabIndex) == 0x000000, "Member 'OverlayMenuScreen_OnSelectTab::tabIndex' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnSettingsOptionButtonClicked
// 0x0004 (0x0004 - 0x0000)
struct OverlayMenuScreen_OnSettingsOptionButtonClicked final
{
public:
	int32                                         id;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnSettingsOptionButtonClicked) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnSettingsOptionButtonClicked");
static_assert(sizeof(OverlayMenuScreen_OnSettingsOptionButtonClicked) == 0x000004, "Wrong size on OverlayMenuScreen_OnSettingsOptionButtonClicked");
static_assert(offsetof(OverlayMenuScreen_OnSettingsOptionButtonClicked, id) == 0x000000, "Member 'OverlayMenuScreen_OnSettingsOptionButtonClicked::id' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnSettingsOptionCheckboxSelected
// 0x0008 (0x0008 - 0x0000)
struct OverlayMenuScreen_OnSettingsOptionCheckboxSelected final
{
public:
	int32                                         id;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSelected;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OverlayMenuScreen_OnSettingsOptionCheckboxSelected) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnSettingsOptionCheckboxSelected");
static_assert(sizeof(OverlayMenuScreen_OnSettingsOptionCheckboxSelected) == 0x000008, "Wrong size on OverlayMenuScreen_OnSettingsOptionCheckboxSelected");
static_assert(offsetof(OverlayMenuScreen_OnSettingsOptionCheckboxSelected, id) == 0x000000, "Member 'OverlayMenuScreen_OnSettingsOptionCheckboxSelected::id' has a wrong offset!");
static_assert(offsetof(OverlayMenuScreen_OnSettingsOptionCheckboxSelected, isSelected) == 0x000004, "Member 'OverlayMenuScreen_OnSettingsOptionCheckboxSelected::isSelected' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnSettingsOptionIntValueChanged
// 0x0008 (0x0008 - 0x0000)
struct OverlayMenuScreen_OnSettingsOptionIntValueChanged final
{
public:
	int32                                         id;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnSettingsOptionIntValueChanged) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnSettingsOptionIntValueChanged");
static_assert(sizeof(OverlayMenuScreen_OnSettingsOptionIntValueChanged) == 0x000008, "Wrong size on OverlayMenuScreen_OnSettingsOptionIntValueChanged");
static_assert(offsetof(OverlayMenuScreen_OnSettingsOptionIntValueChanged, id) == 0x000000, "Member 'OverlayMenuScreen_OnSettingsOptionIntValueChanged::id' has a wrong offset!");
static_assert(offsetof(OverlayMenuScreen_OnSettingsOptionIntValueChanged, value) == 0x000004, "Member 'OverlayMenuScreen_OnSettingsOptionIntValueChanged::value' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnSurvivorCameraSensitivityChanged
// 0x0004 (0x0004 - 0x0000)
struct OverlayMenuScreen_OnSurvivorCameraSensitivityChanged final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnSurvivorCameraSensitivityChanged) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnSurvivorCameraSensitivityChanged");
static_assert(sizeof(OverlayMenuScreen_OnSurvivorCameraSensitivityChanged) == 0x000004, "Wrong size on OverlayMenuScreen_OnSurvivorCameraSensitivityChanged");
static_assert(offsetof(OverlayMenuScreen_OnSurvivorCameraSensitivityChanged, value) == 0x000000, "Member 'OverlayMenuScreen_OnSurvivorCameraSensitivityChanged::value' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.SetGameType
// 0x0002 (0x0002 - 0x0000)
struct OverlayMenuScreen_SetGameType final
{
public:
	EGameType                                     gameType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isInCustomMatchManagerMode;                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_SetGameType) == 0x000001, "Wrong alignment on OverlayMenuScreen_SetGameType");
static_assert(sizeof(OverlayMenuScreen_SetGameType) == 0x000002, "Wrong size on OverlayMenuScreen_SetGameType");
static_assert(offsetof(OverlayMenuScreen_SetGameType, gameType) == 0x000000, "Member 'OverlayMenuScreen_SetGameType::gameType' has a wrong offset!");
static_assert(offsetof(OverlayMenuScreen_SetGameType, isInCustomMatchManagerMode) == 0x000001, "Member 'OverlayMenuScreen_SetGameType::isInCustomMatchManagerMode' has a wrong offset!");

// Function DeadByDaylight.Pallet.Authority_OnOverlapPushBox
// 0x00B0 (0x00B0 - 0x0000)
struct Pallet_Authority_OnOverlapPushBox final
{
public:
	class UPrimitiveComponent*                    overlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_Authority_OnOverlapPushBox) == 0x000008, "Wrong alignment on Pallet_Authority_OnOverlapPushBox");
static_assert(sizeof(Pallet_Authority_OnOverlapPushBox) == 0x0000B0, "Wrong size on Pallet_Authority_OnOverlapPushBox");
static_assert(offsetof(Pallet_Authority_OnOverlapPushBox, overlappedComponent) == 0x000000, "Member 'Pallet_Authority_OnOverlapPushBox::overlappedComponent' has a wrong offset!");
static_assert(offsetof(Pallet_Authority_OnOverlapPushBox, otherActor) == 0x000008, "Member 'Pallet_Authority_OnOverlapPushBox::otherActor' has a wrong offset!");
static_assert(offsetof(Pallet_Authority_OnOverlapPushBox, otherComp) == 0x000010, "Member 'Pallet_Authority_OnOverlapPushBox::otherComp' has a wrong offset!");
static_assert(offsetof(Pallet_Authority_OnOverlapPushBox, otherBodyIndex) == 0x000018, "Member 'Pallet_Authority_OnOverlapPushBox::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(Pallet_Authority_OnOverlapPushBox, bFromSweep) == 0x00001C, "Member 'Pallet_Authority_OnOverlapPushBox::bFromSweep' has a wrong offset!");
static_assert(offsetof(Pallet_Authority_OnOverlapPushBox, sweepResult) == 0x000020, "Member 'Pallet_Authority_OnOverlapPushBox::sweepResult' has a wrong offset!");

// Function DeadByDaylight.Pallet.EntityExplodePallet
// 0x0008 (0x0008 - 0x0000)
struct Pallet_EntityExplodePallet final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_EntityExplodePallet) == 0x000008, "Wrong alignment on Pallet_EntityExplodePallet");
static_assert(sizeof(Pallet_EntityExplodePallet) == 0x000008, "Wrong size on Pallet_EntityExplodePallet");
static_assert(offsetof(Pallet_EntityExplodePallet, player) == 0x000000, "Member 'Pallet_EntityExplodePallet::player' has a wrong offset!");

// Function DeadByDaylight.Pallet.ExplodePallet
// 0x0008 (0x0008 - 0x0000)
struct Pallet_ExplodePallet final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_ExplodePallet) == 0x000008, "Wrong alignment on Pallet_ExplodePallet");
static_assert(sizeof(Pallet_ExplodePallet) == 0x000008, "Wrong size on Pallet_ExplodePallet");
static_assert(offsetof(Pallet_ExplodePallet, player) == 0x000000, "Member 'Pallet_ExplodePallet::player' has a wrong offset!");

// Function DeadByDaylight.Pallet.ExplodeStunPallet
// 0x0008 (0x0008 - 0x0000)
struct Pallet_ExplodeStunPallet final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_ExplodeStunPallet) == 0x000008, "Wrong alignment on Pallet_ExplodeStunPallet");
static_assert(sizeof(Pallet_ExplodeStunPallet) == 0x000008, "Wrong size on Pallet_ExplodeStunPallet");
static_assert(offsetof(Pallet_ExplodeStunPallet, player) == 0x000000, "Member 'Pallet_ExplodeStunPallet::player' has a wrong offset!");

// Function DeadByDaylight.Pallet.Multicast_EntityExplodePallet
// 0x0008 (0x0008 - 0x0000)
struct Pallet_Multicast_EntityExplodePallet final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_Multicast_EntityExplodePallet) == 0x000008, "Wrong alignment on Pallet_Multicast_EntityExplodePallet");
static_assert(sizeof(Pallet_Multicast_EntityExplodePallet) == 0x000008, "Wrong size on Pallet_Multicast_EntityExplodePallet");
static_assert(offsetof(Pallet_Multicast_EntityExplodePallet, player) == 0x000000, "Member 'Pallet_Multicast_EntityExplodePallet::player' has a wrong offset!");

// Function DeadByDaylight.Pallet.Multicast_StunActor
// 0x0018 (0x0018 - 0x0000)
struct Pallet_Multicast_StunActor final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          survivor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          stunBreakPallet;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Pallet_Multicast_StunActor) == 0x000008, "Wrong alignment on Pallet_Multicast_StunActor");
static_assert(sizeof(Pallet_Multicast_StunActor) == 0x000018, "Wrong size on Pallet_Multicast_StunActor");
static_assert(offsetof(Pallet_Multicast_StunActor, actor) == 0x000000, "Member 'Pallet_Multicast_StunActor::actor' has a wrong offset!");
static_assert(offsetof(Pallet_Multicast_StunActor, survivor) == 0x000008, "Member 'Pallet_Multicast_StunActor::survivor' has a wrong offset!");
static_assert(offsetof(Pallet_Multicast_StunActor, stunBreakPallet) == 0x000010, "Member 'Pallet_Multicast_StunActor::stunBreakPallet' has a wrong offset!");

// Function DeadByDaylight.Pallet.OnStunOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct Pallet_OnStunOverlap final
{
public:
	class UPrimitiveComponent*                    overlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 otherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    otherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         otherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             sweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_OnStunOverlap) == 0x000008, "Wrong alignment on Pallet_OnStunOverlap");
static_assert(sizeof(Pallet_OnStunOverlap) == 0x0000B0, "Wrong size on Pallet_OnStunOverlap");
static_assert(offsetof(Pallet_OnStunOverlap, overlappedComponent) == 0x000000, "Member 'Pallet_OnStunOverlap::overlappedComponent' has a wrong offset!");
static_assert(offsetof(Pallet_OnStunOverlap, otherActor) == 0x000008, "Member 'Pallet_OnStunOverlap::otherActor' has a wrong offset!");
static_assert(offsetof(Pallet_OnStunOverlap, otherComp) == 0x000010, "Member 'Pallet_OnStunOverlap::otherComp' has a wrong offset!");
static_assert(offsetof(Pallet_OnStunOverlap, otherBodyIndex) == 0x000018, "Member 'Pallet_OnStunOverlap::otherBodyIndex' has a wrong offset!");
static_assert(offsetof(Pallet_OnStunOverlap, bFromSweep) == 0x00001C, "Member 'Pallet_OnStunOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(Pallet_OnStunOverlap, sweepResult) == 0x000020, "Member 'Pallet_OnStunOverlap::sweepResult' has a wrong offset!");

// Function DeadByDaylight.Pallet.PullDown
// 0x0010 (0x0010 - 0x0000)
struct Pallet_PullDown final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalletPushSettings                    pushSettings;                                      // 0x0008(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EPalletStunZoneSideStrategy                   stunZoneSideStrategy;                              // 0x000A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Pallet_PullDown) == 0x000008, "Wrong alignment on Pallet_PullDown");
static_assert(sizeof(Pallet_PullDown) == 0x000010, "Wrong size on Pallet_PullDown");
static_assert(offsetof(Pallet_PullDown, player) == 0x000000, "Member 'Pallet_PullDown::player' has a wrong offset!");
static_assert(offsetof(Pallet_PullDown, pushSettings) == 0x000008, "Member 'Pallet_PullDown::pushSettings' has a wrong offset!");
static_assert(offsetof(Pallet_PullDown, stunZoneSideStrategy) == 0x00000A, "Member 'Pallet_PullDown::stunZoneSideStrategy' has a wrong offset!");

// Function DeadByDaylight.Pallet.SetPalletState
// 0x0001 (0x0001 - 0x0000)
struct Pallet_SetPalletState final
{
public:
	EPalletState                                  state;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_SetPalletState) == 0x000001, "Wrong alignment on Pallet_SetPalletState");
static_assert(sizeof(Pallet_SetPalletState) == 0x000001, "Wrong size on Pallet_SetPalletState");
static_assert(offsetof(Pallet_SetPalletState, state) == 0x000000, "Member 'Pallet_SetPalletState::state' has a wrong offset!");

// Function DeadByDaylight.Pallet.SetPendingDestruction
// 0x0001 (0x0001 - 0x0000)
struct Pallet_SetPendingDestruction final
{
public:
	bool                                          isPendingDestruction;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_SetPendingDestruction) == 0x000001, "Wrong alignment on Pallet_SetPendingDestruction");
static_assert(sizeof(Pallet_SetPendingDestruction) == 0x000001, "Wrong size on Pallet_SetPendingDestruction");
static_assert(offsetof(Pallet_SetPendingDestruction, isPendingDestruction) == 0x000000, "Member 'Pallet_SetPendingDestruction::isPendingDestruction' has a wrong offset!");

// Function DeadByDaylight.Pallet.CanPulldown
// 0x0018 (0x0018 - 0x0000)
struct Pallet_CanPulldown final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                interactionAxis;                                   // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isStationary;                                      // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Pallet_CanPulldown) == 0x000008, "Wrong alignment on Pallet_CanPulldown");
static_assert(sizeof(Pallet_CanPulldown) == 0x000018, "Wrong size on Pallet_CanPulldown");
static_assert(offsetof(Pallet_CanPulldown, player) == 0x000000, "Member 'Pallet_CanPulldown::player' has a wrong offset!");
static_assert(offsetof(Pallet_CanPulldown, interactionAxis) == 0x000008, "Member 'Pallet_CanPulldown::interactionAxis' has a wrong offset!");
static_assert(offsetof(Pallet_CanPulldown, isStationary) == 0x000014, "Member 'Pallet_CanPulldown::isStationary' has a wrong offset!");
static_assert(offsetof(Pallet_CanPulldown, ReturnValue) == 0x000015, "Member 'Pallet_CanPulldown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.GetDestructibleAreaPrimitiveComponents
// 0x0010 (0x0010 - 0x0000)
struct Pallet_GetDestructibleAreaPrimitiveComponents final
{
public:
	TArray<class UPrimitiveComponent*>            prims;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_GetDestructibleAreaPrimitiveComponents) == 0x000008, "Wrong alignment on Pallet_GetDestructibleAreaPrimitiveComponents");
static_assert(sizeof(Pallet_GetDestructibleAreaPrimitiveComponents) == 0x000010, "Wrong size on Pallet_GetDestructibleAreaPrimitiveComponents");
static_assert(offsetof(Pallet_GetDestructibleAreaPrimitiveComponents, prims) == 0x000000, "Member 'Pallet_GetDestructibleAreaPrimitiveComponents::prims' has a wrong offset!");

// Function DeadByDaylight.Pallet.GetFallDuration
// 0x0004 (0x0004 - 0x0000)
struct Pallet_GetFallDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_GetFallDuration) == 0x000004, "Wrong alignment on Pallet_GetFallDuration");
static_assert(sizeof(Pallet_GetFallDuration) == 0x000004, "Wrong size on Pallet_GetFallDuration");
static_assert(offsetof(Pallet_GetFallDuration, ReturnValue) == 0x000000, "Member 'Pallet_GetFallDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.GetIsDreamPallet
// 0x0001 (0x0001 - 0x0000)
struct Pallet_GetIsDreamPallet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_GetIsDreamPallet) == 0x000001, "Wrong alignment on Pallet_GetIsDreamPallet");
static_assert(sizeof(Pallet_GetIsDreamPallet) == 0x000001, "Wrong size on Pallet_GetIsDreamPallet");
static_assert(offsetof(Pallet_GetIsDreamPallet, ReturnValue) == 0x000000, "Member 'Pallet_GetIsDreamPallet::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.GetIsPulledDown
// 0x0001 (0x0001 - 0x0000)
struct Pallet_GetIsPulledDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_GetIsPulledDown) == 0x000001, "Wrong alignment on Pallet_GetIsPulledDown");
static_assert(sizeof(Pallet_GetIsPulledDown) == 0x000001, "Wrong size on Pallet_GetIsPulledDown");
static_assert(offsetof(Pallet_GetIsPulledDown, ReturnValue) == 0x000000, "Member 'Pallet_GetIsPulledDown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.GetPalletSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct Pallet_GetPalletSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_GetPalletSkeletalMeshComponent) == 0x000008, "Wrong alignment on Pallet_GetPalletSkeletalMeshComponent");
static_assert(sizeof(Pallet_GetPalletSkeletalMeshComponent) == 0x000008, "Wrong size on Pallet_GetPalletSkeletalMeshComponent");
static_assert(offsetof(Pallet_GetPalletSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'Pallet_GetPalletSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.GetPlayerDoingPulldown
// 0x0008 (0x0008 - 0x0000)
struct Pallet_GetPlayerDoingPulldown final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_GetPlayerDoingPulldown) == 0x000008, "Wrong alignment on Pallet_GetPlayerDoingPulldown");
static_assert(sizeof(Pallet_GetPlayerDoingPulldown) == 0x000008, "Wrong size on Pallet_GetPlayerDoingPulldown");
static_assert(offsetof(Pallet_GetPlayerDoingPulldown, ReturnValue) == 0x000000, "Member 'Pallet_GetPlayerDoingPulldown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.IsDestroyedByEntity
// 0x0001 (0x0001 - 0x0000)
struct Pallet_IsDestroyedByEntity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_IsDestroyedByEntity) == 0x000001, "Wrong alignment on Pallet_IsDestroyedByEntity");
static_assert(sizeof(Pallet_IsDestroyedByEntity) == 0x000001, "Wrong size on Pallet_IsDestroyedByEntity");
static_assert(offsetof(Pallet_IsDestroyedByEntity, ReturnValue) == 0x000000, "Member 'Pallet_IsDestroyedByEntity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.IsPendingDestruction
// 0x0001 (0x0001 - 0x0000)
struct Pallet_IsPendingDestruction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_IsPendingDestruction) == 0x000001, "Wrong alignment on Pallet_IsPendingDestruction");
static_assert(sizeof(Pallet_IsPendingDestruction) == 0x000001, "Wrong size on Pallet_IsPendingDestruction");
static_assert(offsetof(Pallet_IsPendingDestruction, ReturnValue) == 0x000000, "Member 'Pallet_IsPendingDestruction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.IsPulldownBlockedByEntity
// 0x0001 (0x0001 - 0x0000)
struct Pallet_IsPulldownBlockedByEntity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_IsPulldownBlockedByEntity) == 0x000001, "Wrong alignment on Pallet_IsPulldownBlockedByEntity");
static_assert(sizeof(Pallet_IsPulldownBlockedByEntity) == 0x000001, "Wrong size on Pallet_IsPulldownBlockedByEntity");
static_assert(offsetof(Pallet_IsPulldownBlockedByEntity, ReturnValue) == 0x000000, "Member 'Pallet_IsPulldownBlockedByEntity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PalletPulldownBlockerComponent.Multicast_PalletPulldownBlockedHideCosmetic
// 0x0008 (0x0008 - 0x0000)
struct PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedHideCosmetic final
{
public:
	class UObject*                                palletToUnblock;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedHideCosmetic) == 0x000008, "Wrong alignment on PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedHideCosmetic");
static_assert(sizeof(PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedHideCosmetic) == 0x000008, "Wrong size on PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedHideCosmetic");
static_assert(offsetof(PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedHideCosmetic, palletToUnblock) == 0x000000, "Member 'PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedHideCosmetic::palletToUnblock' has a wrong offset!");

// Function DeadByDaylight.PalletPulldownBlockerComponent.Multicast_PalletPulldownBlockedShowCosmetic
// 0x0008 (0x0008 - 0x0000)
struct PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedShowCosmetic final
{
public:
	class UObject*                                palletToBlock;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedShowCosmetic) == 0x000008, "Wrong alignment on PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedShowCosmetic");
static_assert(sizeof(PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedShowCosmetic) == 0x000008, "Wrong size on PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedShowCosmetic");
static_assert(offsetof(PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedShowCosmetic, palletToBlock) == 0x000000, "Member 'PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedShowCosmetic::palletToBlock' has a wrong offset!");

// Function DeadByDaylight.PalletPulldownBlockerComponent.OnRep_PalletToBlock
// 0x0008 (0x0008 - 0x0000)
struct PalletPulldownBlockerComponent_OnRep_PalletToBlock final
{
public:
	class UObject*                                oldPalletToBlock;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletPulldownBlockerComponent_OnRep_PalletToBlock) == 0x000008, "Wrong alignment on PalletPulldownBlockerComponent_OnRep_PalletToBlock");
static_assert(sizeof(PalletPulldownBlockerComponent_OnRep_PalletToBlock) == 0x000008, "Wrong size on PalletPulldownBlockerComponent_OnRep_PalletToBlock");
static_assert(offsetof(PalletPulldownBlockerComponent_OnRep_PalletToBlock, oldPalletToBlock) == 0x000000, "Member 'PalletPulldownBlockerComponent_OnRep_PalletToBlock::oldPalletToBlock' has a wrong offset!");

// Function DeadByDaylight.PalletTracker.EnableSelectedEffectToLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct PalletTracker_EnableSelectedEffectToLocalPlayer final
{
public:
	bool                                          activated;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletTracker_EnableSelectedEffectToLocalPlayer) == 0x000001, "Wrong alignment on PalletTracker_EnableSelectedEffectToLocalPlayer");
static_assert(sizeof(PalletTracker_EnableSelectedEffectToLocalPlayer) == 0x000001, "Wrong size on PalletTracker_EnableSelectedEffectToLocalPlayer");
static_assert(offsetof(PalletTracker_EnableSelectedEffectToLocalPlayer, activated) == 0x000000, "Member 'PalletTracker_EnableSelectedEffectToLocalPlayer::activated' has a wrong offset!");

// Function DeadByDaylight.PalletTracker.InitializeTunableValues
// 0x0008 (0x0008 - 0x0000)
struct PalletTracker_InitializeTunableValues final
{
public:
	class ASlasherPlayer*                         slasher;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletTracker_InitializeTunableValues) == 0x000008, "Wrong alignment on PalletTracker_InitializeTunableValues");
static_assert(sizeof(PalletTracker_InitializeTunableValues) == 0x000008, "Wrong size on PalletTracker_InitializeTunableValues");
static_assert(offsetof(PalletTracker_InitializeTunableValues, slasher) == 0x000000, "Member 'PalletTracker_InitializeTunableValues::slasher' has a wrong offset!");

// Function DeadByDaylight.PalletTracker.RevealToLocalPlayerBP
// 0x0001 (0x0001 - 0x0000)
struct PalletTracker_RevealToLocalPlayerBP final
{
public:
	bool                                          shown;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletTracker_RevealToLocalPlayerBP) == 0x000001, "Wrong alignment on PalletTracker_RevealToLocalPlayerBP");
static_assert(sizeof(PalletTracker_RevealToLocalPlayerBP) == 0x000001, "Wrong size on PalletTracker_RevealToLocalPlayerBP");
static_assert(offsetof(PalletTracker_RevealToLocalPlayerBP, shown) == 0x000000, "Member 'PalletTracker_RevealToLocalPlayerBP::shown' has a wrong offset!");

// Function DeadByDaylight.PalletTracker.CanSpawnDreamPalletAtLocation
// 0x0001 (0x0001 - 0x0000)
struct PalletTracker_CanSpawnDreamPalletAtLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletTracker_CanSpawnDreamPalletAtLocation) == 0x000001, "Wrong alignment on PalletTracker_CanSpawnDreamPalletAtLocation");
static_assert(sizeof(PalletTracker_CanSpawnDreamPalletAtLocation) == 0x000001, "Wrong size on PalletTracker_CanSpawnDreamPalletAtLocation");
static_assert(offsetof(PalletTracker_CanSpawnDreamPalletAtLocation, ReturnValue) == 0x000000, "Member 'PalletTracker_CanSpawnDreamPalletAtLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PalletUtilities.GetDreamPalletBP
// 0x0038 (0x0038 - 0x0000)
struct PalletUtilities_GetDreamPalletBP final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletUtilities_GetDreamPalletBP) == 0x000008, "Wrong alignment on PalletUtilities_GetDreamPalletBP");
static_assert(sizeof(PalletUtilities_GetDreamPalletBP) == 0x000038, "Wrong size on PalletUtilities_GetDreamPalletBP");
static_assert(offsetof(PalletUtilities_GetDreamPalletBP, worldContextObject) == 0x000000, "Member 'PalletUtilities_GetDreamPalletBP::worldContextObject' has a wrong offset!");
static_assert(offsetof(PalletUtilities_GetDreamPalletBP, ReturnValue) == 0x000008, "Member 'PalletUtilities_GetDreamPalletBP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PalletUtilities.GetIllusionaryPalletStaticMesh
// 0x0038 (0x0038 - 0x0000)
struct PalletUtilities_GetIllusionaryPalletStaticMesh final
{
public:
	const class UObject*                          worldContextObjec;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletUtilities_GetIllusionaryPalletStaticMesh) == 0x000008, "Wrong alignment on PalletUtilities_GetIllusionaryPalletStaticMesh");
static_assert(sizeof(PalletUtilities_GetIllusionaryPalletStaticMesh) == 0x000038, "Wrong size on PalletUtilities_GetIllusionaryPalletStaticMesh");
static_assert(offsetof(PalletUtilities_GetIllusionaryPalletStaticMesh, worldContextObjec) == 0x000000, "Member 'PalletUtilities_GetIllusionaryPalletStaticMesh::worldContextObjec' has a wrong offset!");
static_assert(offsetof(PalletUtilities_GetIllusionaryPalletStaticMesh, ReturnValue) == 0x000008, "Member 'PalletUtilities_GetIllusionaryPalletStaticMesh::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PalletUtilities.GetPalletTrackerBP
// 0x0038 (0x0038 - 0x0000)
struct PalletUtilities_GetPalletTrackerBP final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletUtilities_GetPalletTrackerBP) == 0x000008, "Wrong alignment on PalletUtilities_GetPalletTrackerBP");
static_assert(sizeof(PalletUtilities_GetPalletTrackerBP) == 0x000038, "Wrong size on PalletUtilities_GetPalletTrackerBP");
static_assert(offsetof(PalletUtilities_GetPalletTrackerBP, worldContextObject) == 0x000000, "Member 'PalletUtilities_GetPalletTrackerBP::worldContextObject' has a wrong offset!");
static_assert(offsetof(PalletUtilities_GetPalletTrackerBP, ReturnValue) == 0x000008, "Member 'PalletUtilities_GetPalletTrackerBP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnAvailableItemClicked
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnAvailableItemClicked final
{
public:
	int32                                         clickedItemIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnAvailableItemClicked) == 0x000004, "Wrong alignment on PanelScreen_OnAvailableItemClicked");
static_assert(sizeof(PanelScreen_OnAvailableItemClicked) == 0x000004, "Wrong size on PanelScreen_OnAvailableItemClicked");
static_assert(offsetof(PanelScreen_OnAvailableItemClicked, clickedItemIndex) == 0x000000, "Member 'PanelScreen_OnAvailableItemClicked::clickedItemIndex' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnAvailableItemsSortingChange
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnAvailableItemsSortingChange final
{
public:
	int32                                         newSorting;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnAvailableItemsSortingChange) == 0x000004, "Wrong alignment on PanelScreen_OnAvailableItemsSortingChange");
static_assert(sizeof(PanelScreen_OnAvailableItemsSortingChange) == 0x000004, "Wrong size on PanelScreen_OnAvailableItemsSortingChange");
static_assert(offsetof(PanelScreen_OnAvailableItemsSortingChange, newSorting) == 0x000000, "Member 'PanelScreen_OnAvailableItemsSortingChange::newSorting' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnCharacterSlotButtonClick
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnCharacterSlotButtonClick final
{
public:
	int32                                         characterIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnCharacterSlotButtonClick) == 0x000004, "Wrong alignment on PanelScreen_OnCharacterSlotButtonClick");
static_assert(sizeof(PanelScreen_OnCharacterSlotButtonClick) == 0x000004, "Wrong size on PanelScreen_OnCharacterSlotButtonClick");
static_assert(offsetof(PanelScreen_OnCharacterSlotButtonClick, characterIndex) == 0x000000, "Member 'PanelScreen_OnCharacterSlotButtonClick::characterIndex' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnConfirmCollectSelectedNode
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnConfirmCollectSelectedNode final
{
public:
	int32                                         characterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnConfirmCollectSelectedNode) == 0x000004, "Wrong alignment on PanelScreen_OnConfirmCollectSelectedNode");
static_assert(sizeof(PanelScreen_OnConfirmCollectSelectedNode) == 0x000004, "Wrong size on PanelScreen_OnConfirmCollectSelectedNode");
static_assert(offsetof(PanelScreen_OnConfirmCollectSelectedNode, characterId) == 0x000000, "Member 'PanelScreen_OnConfirmCollectSelectedNode::characterId' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnCustomizationPresetClick
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnCustomizationPresetClick final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnCustomizationPresetClick) == 0x000004, "Wrong alignment on PanelScreen_OnCustomizationPresetClick");
static_assert(sizeof(PanelScreen_OnCustomizationPresetClick) == 0x000004, "Wrong size on PanelScreen_OnCustomizationPresetClick");
static_assert(offsetof(PanelScreen_OnCustomizationPresetClick, index) == 0x000000, "Member 'PanelScreen_OnCustomizationPresetClick::index' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnEquipableSlotClicked
// 0x0008 (0x0008 - 0x0000)
struct PanelScreen_OnEquipableSlotClicked final
{
public:
	int32                                         clickedSlotCategory;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         clickedSlotIndex;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnEquipableSlotClicked) == 0x000004, "Wrong alignment on PanelScreen_OnEquipableSlotClicked");
static_assert(sizeof(PanelScreen_OnEquipableSlotClicked) == 0x000008, "Wrong size on PanelScreen_OnEquipableSlotClicked");
static_assert(offsetof(PanelScreen_OnEquipableSlotClicked, clickedSlotCategory) == 0x000000, "Member 'PanelScreen_OnEquipableSlotClicked::clickedSlotCategory' has a wrong offset!");
static_assert(offsetof(PanelScreen_OnEquipableSlotClicked, clickedSlotIndex) == 0x000004, "Member 'PanelScreen_OnEquipableSlotClicked::clickedSlotIndex' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnItemSelected
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnItemSelected final
{
public:
	int32                                         itemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnItemSelected) == 0x000004, "Wrong alignment on PanelScreen_OnItemSelected");
static_assert(sizeof(PanelScreen_OnItemSelected) == 0x000004, "Wrong size on PanelScreen_OnItemSelected");
static_assert(offsetof(PanelScreen_OnItemSelected, itemIndex) == 0x000000, "Member 'PanelScreen_OnItemSelected::itemIndex' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnItemUnselected
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnItemUnselected final
{
public:
	int32                                         itemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnItemUnselected) == 0x000004, "Wrong alignment on PanelScreen_OnItemUnselected");
static_assert(sizeof(PanelScreen_OnItemUnselected) == 0x000004, "Wrong size on PanelScreen_OnItemUnselected");
static_assert(offsetof(PanelScreen_OnItemUnselected, itemIndex) == 0x000000, "Member 'PanelScreen_OnItemUnselected::itemIndex' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnLoadoutPresetClick
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnLoadoutPresetClick final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnLoadoutPresetClick) == 0x000004, "Wrong alignment on PanelScreen_OnLoadoutPresetClick");
static_assert(sizeof(PanelScreen_OnLoadoutPresetClick) == 0x000004, "Wrong size on PanelScreen_OnLoadoutPresetClick");
static_assert(offsetof(PanelScreen_OnLoadoutPresetClick, index) == 0x000000, "Member 'PanelScreen_OnLoadoutPresetClick::index' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnLoadoutSlotButtonClick
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnLoadoutSlotButtonClick final
{
public:
	int32                                         slotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnLoadoutSlotButtonClick) == 0x000004, "Wrong alignment on PanelScreen_OnLoadoutSlotButtonClick");
static_assert(sizeof(PanelScreen_OnLoadoutSlotButtonClick) == 0x000004, "Wrong size on PanelScreen_OnLoadoutSlotButtonClick");
static_assert(offsetof(PanelScreen_OnLoadoutSlotButtonClick, slotIndex) == 0x000000, "Member 'PanelScreen_OnLoadoutSlotButtonClick::slotIndex' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnPrestigeUp
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnPrestigeUp final
{
public:
	int32                                         characterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnPrestigeUp) == 0x000004, "Wrong alignment on PanelScreen_OnPrestigeUp");
static_assert(sizeof(PanelScreen_OnPrestigeUp) == 0x000004, "Wrong size on PanelScreen_OnPrestigeUp");
static_assert(offsetof(PanelScreen_OnPrestigeUp, characterId) == 0x000000, "Member 'PanelScreen_OnPrestigeUp::characterId' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnRegenerateButtonClick
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnRegenerateButtonClick final
{
public:
	int32                                         characterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnRegenerateButtonClick) == 0x000004, "Wrong alignment on PanelScreen_OnRegenerateButtonClick");
static_assert(sizeof(PanelScreen_OnRegenerateButtonClick) == 0x000004, "Wrong size on PanelScreen_OnRegenerateButtonClick");
static_assert(offsetof(PanelScreen_OnRegenerateButtonClick, characterId) == 0x000000, "Member 'PanelScreen_OnRegenerateButtonClick::characterId' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnReservedBloodPoints
// 0x000C (0x000C - 0x0000)
struct PanelScreen_OnReservedBloodPoints final
{
public:
	int32                                         characterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bloodPoints;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fullCost;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PanelScreen_OnReservedBloodPoints) == 0x000004, "Wrong alignment on PanelScreen_OnReservedBloodPoints");
static_assert(sizeof(PanelScreen_OnReservedBloodPoints) == 0x00000C, "Wrong size on PanelScreen_OnReservedBloodPoints");
static_assert(offsetof(PanelScreen_OnReservedBloodPoints, characterId) == 0x000000, "Member 'PanelScreen_OnReservedBloodPoints::characterId' has a wrong offset!");
static_assert(offsetof(PanelScreen_OnReservedBloodPoints, bloodPoints) == 0x000004, "Member 'PanelScreen_OnReservedBloodPoints::bloodPoints' has a wrong offset!");
static_assert(offsetof(PanelScreen_OnReservedBloodPoints, fullCost) == 0x000008, "Member 'PanelScreen_OnReservedBloodPoints::fullCost' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnRotateCharacter
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnRotateCharacter final
{
public:
	float                                         mouseDistanceChange;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnRotateCharacter) == 0x000004, "Wrong alignment on PanelScreen_OnRotateCharacter");
static_assert(sizeof(PanelScreen_OnRotateCharacter) == 0x000004, "Wrong size on PanelScreen_OnRotateCharacter");
static_assert(offsetof(PanelScreen_OnRotateCharacter, mouseDistanceChange) == 0x000000, "Member 'PanelScreen_OnRotateCharacter::mouseDistanceChange' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnSelectedEquipableSlotZoomChange
// 0x0001 (0x0001 - 0x0000)
struct PanelScreen_OnSelectedEquipableSlotZoomChange final
{
public:
	bool                                          zoomIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnSelectedEquipableSlotZoomChange) == 0x000001, "Wrong alignment on PanelScreen_OnSelectedEquipableSlotZoomChange");
static_assert(sizeof(PanelScreen_OnSelectedEquipableSlotZoomChange) == 0x000001, "Wrong size on PanelScreen_OnSelectedEquipableSlotZoomChange");
static_assert(offsetof(PanelScreen_OnSelectedEquipableSlotZoomChange, zoomIn) == 0x000000, "Member 'PanelScreen_OnSelectedEquipableSlotZoomChange::zoomIn' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnSequenceStepCompleted
// 0x0008 (0x0008 - 0x0000)
struct PanelScreen_OnSequenceStepCompleted final
{
public:
	int32                                         characterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         id;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnSequenceStepCompleted) == 0x000004, "Wrong alignment on PanelScreen_OnSequenceStepCompleted");
static_assert(sizeof(PanelScreen_OnSequenceStepCompleted) == 0x000008, "Wrong size on PanelScreen_OnSequenceStepCompleted");
static_assert(offsetof(PanelScreen_OnSequenceStepCompleted, characterId) == 0x000000, "Member 'PanelScreen_OnSequenceStepCompleted::characterId' has a wrong offset!");
static_assert(offsetof(PanelScreen_OnSequenceStepCompleted, id) == 0x000004, "Member 'PanelScreen_OnSequenceStepCompleted::id' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnSideTabButtonClick
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnSideTabButtonClick final
{
public:
	int32                                         tabIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnSideTabButtonClick) == 0x000004, "Wrong alignment on PanelScreen_OnSideTabButtonClick");
static_assert(sizeof(PanelScreen_OnSideTabButtonClick) == 0x000004, "Wrong size on PanelScreen_OnSideTabButtonClick");
static_assert(offsetof(PanelScreen_OnSideTabButtonClick, tabIndex) == 0x000000, "Member 'PanelScreen_OnSideTabButtonClick::tabIndex' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnWebBuilt
// 0x0008 (0x0008 - 0x0000)
struct PanelScreen_OnWebBuilt final
{
public:
	int32                                         characterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isEmpty;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PanelScreen_OnWebBuilt) == 0x000004, "Wrong alignment on PanelScreen_OnWebBuilt");
static_assert(sizeof(PanelScreen_OnWebBuilt) == 0x000008, "Wrong size on PanelScreen_OnWebBuilt");
static_assert(offsetof(PanelScreen_OnWebBuilt, characterId) == 0x000000, "Member 'PanelScreen_OnWebBuilt::characterId' has a wrong offset!");
static_assert(offsetof(PanelScreen_OnWebBuilt, isEmpty) == 0x000004, "Member 'PanelScreen_OnWebBuilt::isEmpty' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnWebNodeHovered
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnWebNodeHovered final
{
public:
	int32                                         id;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnWebNodeHovered) == 0x000004, "Wrong alignment on PanelScreen_OnWebNodeHovered");
static_assert(sizeof(PanelScreen_OnWebNodeHovered) == 0x000004, "Wrong size on PanelScreen_OnWebNodeHovered");
static_assert(offsetof(PanelScreen_OnWebNodeHovered, id) == 0x000000, "Member 'PanelScreen_OnWebNodeHovered::id' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnWebNodeSelected
// 0x000C (0x000C - 0x0000)
struct PanelScreen_OnWebNodeSelected final
{
public:
	int32                                         characterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         id;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         nodeDepth;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnWebNodeSelected) == 0x000004, "Wrong alignment on PanelScreen_OnWebNodeSelected");
static_assert(sizeof(PanelScreen_OnWebNodeSelected) == 0x00000C, "Wrong size on PanelScreen_OnWebNodeSelected");
static_assert(offsetof(PanelScreen_OnWebNodeSelected, characterId) == 0x000000, "Member 'PanelScreen_OnWebNodeSelected::characterId' has a wrong offset!");
static_assert(offsetof(PanelScreen_OnWebNodeSelected, id) == 0x000004, "Member 'PanelScreen_OnWebNodeSelected::id' has a wrong offset!");
static_assert(offsetof(PanelScreen_OnWebNodeSelected, nodeDepth) == 0x000008, "Member 'PanelScreen_OnWebNodeSelected::nodeDepth' has a wrong offset!");

// Function DeadByDaylight.PerkActionButton.CallSetPerkLevel
// 0x0004 (0x0004 - 0x0000)
struct PerkActionButton_CallSetPerkLevel final
{
public:
	int32                                         level;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkActionButton_CallSetPerkLevel) == 0x000004, "Wrong alignment on PerkActionButton_CallSetPerkLevel");
static_assert(sizeof(PerkActionButton_CallSetPerkLevel) == 0x000004, "Wrong size on PerkActionButton_CallSetPerkLevel");
static_assert(offsetof(PerkActionButton_CallSetPerkLevel, level) == 0x000000, "Member 'PerkActionButton_CallSetPerkLevel::level' has a wrong offset!");

// Function DeadByDaylight.PerkActionButton.SetIsActivatable
// 0x0001 (0x0001 - 0x0000)
struct PerkActionButton_SetIsActivatable final
{
public:
	bool                                          isClickable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkActionButton_SetIsActivatable) == 0x000001, "Wrong alignment on PerkActionButton_SetIsActivatable");
static_assert(sizeof(PerkActionButton_SetIsActivatable) == 0x000001, "Wrong size on PerkActionButton_SetIsActivatable");
static_assert(offsetof(PerkActionButton_SetIsActivatable, isClickable) == 0x000000, "Member 'PerkActionButton_SetIsActivatable::isClickable' has a wrong offset!");

// Function DeadByDaylight.PerkActionButton.UpdateWidgetPercentage
// 0x0004 (0x0004 - 0x0000)
struct PerkActionButton_UpdateWidgetPercentage final
{
public:
	float                                         percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkActionButton_UpdateWidgetPercentage) == 0x000004, "Wrong alignment on PerkActionButton_UpdateWidgetPercentage");
static_assert(sizeof(PerkActionButton_UpdateWidgetPercentage) == 0x000004, "Wrong size on PerkActionButton_UpdateWidgetPercentage");
static_assert(offsetof(PerkActionButton_UpdateWidgetPercentage, percentage) == 0x000000, "Member 'PerkActionButton_UpdateWidgetPercentage::percentage' has a wrong offset!");

// Function DeadByDaylight.PerkHudWidget.OnPerkClickedHandler
// 0x000C (0x000C - 0x0000)
struct PerkHudWidget_OnPerkClickedHandler final
{
public:
	class FName                                   perkID;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkHudWidget_OnPerkClickedHandler) == 0x000004, "Wrong alignment on PerkHudWidget_OnPerkClickedHandler");
static_assert(sizeof(PerkHudWidget_OnPerkClickedHandler) == 0x00000C, "Wrong size on PerkHudWidget_OnPerkClickedHandler");
static_assert(offsetof(PerkHudWidget_OnPerkClickedHandler, perkID) == 0x000000, "Member 'PerkHudWidget_OnPerkClickedHandler::perkID' has a wrong offset!");

// Function DeadByDaylight.PerkHudWidget.RemoveExistingPerk
// 0x0010 (0x0010 - 0x0000)
struct PerkHudWidget_RemoveExistingPerk final
{
public:
	class FName                                   perkID;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isExternal;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkHudWidget_RemoveExistingPerk) == 0x000004, "Wrong alignment on PerkHudWidget_RemoveExistingPerk");
static_assert(sizeof(PerkHudWidget_RemoveExistingPerk) == 0x000010, "Wrong size on PerkHudWidget_RemoveExistingPerk");
static_assert(offsetof(PerkHudWidget_RemoveExistingPerk, perkID) == 0x000000, "Member 'PerkHudWidget_RemoveExistingPerk::perkID' has a wrong offset!");
static_assert(offsetof(PerkHudWidget_RemoveExistingPerk, isExternal) == 0x00000C, "Member 'PerkHudWidget_RemoveExistingPerk::isExternal' has a wrong offset!");

// Function DeadByDaylight.PerkManager.Authority_EndStatusEffectByID
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_Authority_EndStatusEffectByID final
{
public:
	class FName                                   statusEffectId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveAllWithID;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_Authority_EndStatusEffectByID) == 0x000004, "Wrong alignment on PerkManager_Authority_EndStatusEffectByID");
static_assert(sizeof(PerkManager_Authority_EndStatusEffectByID) == 0x000010, "Wrong size on PerkManager_Authority_EndStatusEffectByID");
static_assert(offsetof(PerkManager_Authority_EndStatusEffectByID, statusEffectId) == 0x000000, "Member 'PerkManager_Authority_EndStatusEffectByID::statusEffectId' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_EndStatusEffectByID, bRemoveAllWithID) == 0x00000C, "Member 'PerkManager_Authority_EndStatusEffectByID::bRemoveAllWithID' has a wrong offset!");

// Function DeadByDaylight.PerkManager.Authority_ImposeDynamicStatusEffect_DEPRECATED
// 0x0030 (0x0030 - 0x0000)
struct PerkManager_Authority_ImposeDynamicStatusEffect_DEPRECATED final
{
public:
	class FName                                   statusEffectID;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             originatingPlayer;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         customParam;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayModifierContainer*             originatingEffect;                                 // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_Authority_ImposeDynamicStatusEffect_DEPRECATED) == 0x000008, "Wrong alignment on PerkManager_Authority_ImposeDynamicStatusEffect_DEPRECATED");
static_assert(sizeof(PerkManager_Authority_ImposeDynamicStatusEffect_DEPRECATED) == 0x000030, "Wrong size on PerkManager_Authority_ImposeDynamicStatusEffect_DEPRECATED");
static_assert(offsetof(PerkManager_Authority_ImposeDynamicStatusEffect_DEPRECATED, statusEffectID) == 0x000000, "Member 'PerkManager_Authority_ImposeDynamicStatusEffect_DEPRECATED::statusEffectID' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeDynamicStatusEffect_DEPRECATED, originatingPlayer) == 0x000010, "Member 'PerkManager_Authority_ImposeDynamicStatusEffect_DEPRECATED::originatingPlayer' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeDynamicStatusEffect_DEPRECATED, customParam) == 0x000018, "Member 'PerkManager_Authority_ImposeDynamicStatusEffect_DEPRECATED::customParam' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeDynamicStatusEffect_DEPRECATED, originatingEffect) == 0x000020, "Member 'PerkManager_Authority_ImposeDynamicStatusEffect_DEPRECATED::originatingEffect' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeDynamicStatusEffect_DEPRECATED, ReturnValue) == 0x000028, "Member 'PerkManager_Authority_ImposeDynamicStatusEffect_DEPRECATED::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime
// 0x0030 (0x0030 - 0x0000)
struct PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime final
{
public:
	TSubclassOf<class UStatusEffect>              effectClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             originatingPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         lifeTime;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         customParam;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayModifierContainer*             originatingEffect;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          shouldDisplay;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStatusEffect*                          ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime) == 0x000008, "Wrong alignment on PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime");
static_assert(sizeof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime) == 0x000030, "Wrong size on PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime, effectClass) == 0x000000, "Member 'PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime::effectClass' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime, originatingPlayer) == 0x000008, "Member 'PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime::originatingPlayer' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime, lifeTime) == 0x000010, "Member 'PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime::lifeTime' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime, customParam) == 0x000014, "Member 'PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime::customParam' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime, originatingEffect) == 0x000018, "Member 'PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime::originatingEffect' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime, shouldDisplay) == 0x000020, "Member 'PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime::shouldDisplay' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime, ReturnValue) == 0x000028, "Member 'PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED
// 0x0038 (0x0038 - 0x0000)
struct PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED final
{
public:
	class FName                                   statusEffectID;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             originatingPlayer;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         lifeTime;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         customParam;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayModifierContainer*             originatingEffect;                                 // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          shouldDisplay;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStatusEffect*                          ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED) == 0x000008, "Wrong alignment on PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED");
static_assert(sizeof(PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED) == 0x000038, "Wrong size on PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED, statusEffectID) == 0x000000, "Member 'PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED::statusEffectID' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED, originatingPlayer) == 0x000010, "Member 'PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED::originatingPlayer' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED, lifeTime) == 0x000018, "Member 'PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED::lifeTime' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED, customParam) == 0x00001C, "Member 'PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED::customParam' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED, originatingEffect) == 0x000020, "Member 'PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED::originatingEffect' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED, shouldDisplay) == 0x000028, "Member 'PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED::shouldDisplay' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED, ReturnValue) == 0x000030, "Member 'PerkManager_Authority_ImposeNewStatusEffectOrChangeLifeTime_DEPRECATED::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.Authority_ImposeStatusEffect_DEPRECATED
// 0x0038 (0x0038 - 0x0000)
struct PerkManager_Authority_ImposeStatusEffect_DEPRECATED final
{
public:
	class FName                                   statusEffectID;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             originatingPlayer;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         customParam;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayModifierContainer*             originatingEffect;                                 // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          shouldDisplay;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         lifetime;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_Authority_ImposeStatusEffect_DEPRECATED) == 0x000008, "Wrong alignment on PerkManager_Authority_ImposeStatusEffect_DEPRECATED");
static_assert(sizeof(PerkManager_Authority_ImposeStatusEffect_DEPRECATED) == 0x000038, "Wrong size on PerkManager_Authority_ImposeStatusEffect_DEPRECATED");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffect_DEPRECATED, statusEffectID) == 0x000000, "Member 'PerkManager_Authority_ImposeStatusEffect_DEPRECATED::statusEffectID' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffect_DEPRECATED, originatingPlayer) == 0x000010, "Member 'PerkManager_Authority_ImposeStatusEffect_DEPRECATED::originatingPlayer' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffect_DEPRECATED, customParam) == 0x000018, "Member 'PerkManager_Authority_ImposeStatusEffect_DEPRECATED::customParam' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffect_DEPRECATED, originatingEffect) == 0x000020, "Member 'PerkManager_Authority_ImposeStatusEffect_DEPRECATED::originatingEffect' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffect_DEPRECATED, shouldDisplay) == 0x000028, "Member 'PerkManager_Authority_ImposeStatusEffect_DEPRECATED::shouldDisplay' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffect_DEPRECATED, lifetime) == 0x00002C, "Member 'PerkManager_Authority_ImposeStatusEffect_DEPRECATED::lifetime' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffect_DEPRECATED, ReturnValue) == 0x000030, "Member 'PerkManager_Authority_ImposeStatusEffect_DEPRECATED::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.Authority_ImposeStatusEffectOfClass
// 0x0030 (0x0030 - 0x0000)
struct PerkManager_Authority_ImposeStatusEffectOfClass final
{
public:
	TSubclassOf<class UStatusEffect>              effectClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             originatingPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         customParam;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayModifierContainer*             originatingEffect;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          shouldDisplay;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         lifetime;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_Authority_ImposeStatusEffectOfClass) == 0x000008, "Wrong alignment on PerkManager_Authority_ImposeStatusEffectOfClass");
static_assert(sizeof(PerkManager_Authority_ImposeStatusEffectOfClass) == 0x000030, "Wrong size on PerkManager_Authority_ImposeStatusEffectOfClass");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectOfClass, effectClass) == 0x000000, "Member 'PerkManager_Authority_ImposeStatusEffectOfClass::effectClass' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectOfClass, originatingPlayer) == 0x000008, "Member 'PerkManager_Authority_ImposeStatusEffectOfClass::originatingPlayer' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectOfClass, customParam) == 0x000010, "Member 'PerkManager_Authority_ImposeStatusEffectOfClass::customParam' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectOfClass, originatingEffect) == 0x000018, "Member 'PerkManager_Authority_ImposeStatusEffectOfClass::originatingEffect' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectOfClass, shouldDisplay) == 0x000020, "Member 'PerkManager_Authority_ImposeStatusEffectOfClass::shouldDisplay' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectOfClass, lifetime) == 0x000024, "Member 'PerkManager_Authority_ImposeStatusEffectOfClass::lifetime' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectOfClass, ReturnValue) == 0x000028, "Member 'PerkManager_Authority_ImposeStatusEffectOfClass::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.Authority_RemoveStatusEffect
// 0x0008 (0x0008 - 0x0000)
struct PerkManager_Authority_RemoveStatusEffect final
{
public:
	class UStatusEffect*                          statusEffect;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_Authority_RemoveStatusEffect) == 0x000008, "Wrong alignment on PerkManager_Authority_RemoveStatusEffect");
static_assert(sizeof(PerkManager_Authority_RemoveStatusEffect) == 0x000008, "Wrong size on PerkManager_Authority_RemoveStatusEffect");
static_assert(offsetof(PerkManager_Authority_RemoveStatusEffect, statusEffect) == 0x000000, "Member 'PerkManager_Authority_RemoveStatusEffect::statusEffect' has a wrong offset!");

// Function DeadByDaylight.PerkManager.Authority_RemoveStatusEffectByID
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_Authority_RemoveStatusEffectByID final
{
public:
	class FName                                   statusEffectId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveAllWithID;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_Authority_RemoveStatusEffectByID) == 0x000004, "Wrong alignment on PerkManager_Authority_RemoveStatusEffectByID");
static_assert(sizeof(PerkManager_Authority_RemoveStatusEffectByID) == 0x000010, "Wrong size on PerkManager_Authority_RemoveStatusEffectByID");
static_assert(offsetof(PerkManager_Authority_RemoveStatusEffectByID, statusEffectId) == 0x000000, "Member 'PerkManager_Authority_RemoveStatusEffectByID::statusEffectId' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_RemoveStatusEffectByID, bRemoveAllWithID) == 0x00000C, "Member 'PerkManager_Authority_RemoveStatusEffectByID::bRemoveAllWithID' has a wrong offset!");

// Function DeadByDaylight.PerkManager.Authority_SpawnPerk
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_Authority_SpawnPerk final
{
public:
	class FName                                   perkID;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         perkLevel;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_Authority_SpawnPerk) == 0x000004, "Wrong alignment on PerkManager_Authority_SpawnPerk");
static_assert(sizeof(PerkManager_Authority_SpawnPerk) == 0x000010, "Wrong size on PerkManager_Authority_SpawnPerk");
static_assert(offsetof(PerkManager_Authority_SpawnPerk, perkID) == 0x000000, "Member 'PerkManager_Authority_SpawnPerk::perkID' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_SpawnPerk, perkLevel) == 0x00000C, "Member 'PerkManager_Authority_SpawnPerk::perkLevel' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetAllSourcesWithFlag
// 0x0020 (0x0020 - 0x0000)
struct PerkManager_GetAllSourcesWithFlag final
{
public:
	struct FGameplayTag                           flag;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGameplayModifierContainer*>     ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetAllSourcesWithFlag) == 0x000008, "Wrong alignment on PerkManager_GetAllSourcesWithFlag");
static_assert(sizeof(PerkManager_GetAllSourcesWithFlag) == 0x000020, "Wrong size on PerkManager_GetAllSourcesWithFlag");
static_assert(offsetof(PerkManager_GetAllSourcesWithFlag, flag) == 0x000000, "Member 'PerkManager_GetAllSourcesWithFlag::flag' has a wrong offset!");
static_assert(offsetof(PerkManager_GetAllSourcesWithFlag, ReturnValue) == 0x000010, "Member 'PerkManager_GetAllSourcesWithFlag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetAllSourcesWithModifier
// 0x0020 (0x0020 - 0x0000)
struct PerkManager_GetAllSourcesWithModifier final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGameplayModifierContainer*>     ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetAllSourcesWithModifier) == 0x000008, "Wrong alignment on PerkManager_GetAllSourcesWithModifier");
static_assert(sizeof(PerkManager_GetAllSourcesWithModifier) == 0x000020, "Wrong size on PerkManager_GetAllSourcesWithModifier");
static_assert(offsetof(PerkManager_GetAllSourcesWithModifier, type) == 0x000000, "Member 'PerkManager_GetAllSourcesWithModifier::type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetAllSourcesWithModifier, ReturnValue) == 0x000010, "Member 'PerkManager_GetAllSourcesWithModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetAllStatusEffects
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetAllStatusEffects final
{
public:
	TArray<class UStatusEffect*>                  ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetAllStatusEffects) == 0x000008, "Wrong alignment on PerkManager_GetAllStatusEffects");
static_assert(sizeof(PerkManager_GetAllStatusEffects) == 0x000010, "Wrong size on PerkManager_GetAllStatusEffects");
static_assert(offsetof(PerkManager_GetAllStatusEffects, ReturnValue) == 0x000000, "Member 'PerkManager_GetAllStatusEffects::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetAllStatusEffectsByClass
// 0x0018 (0x0018 - 0x0000)
struct PerkManager_GetAllStatusEffectsByClass final
{
public:
	const class UClass*                           type;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStatusEffect*>                  ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetAllStatusEffectsByClass) == 0x000008, "Wrong alignment on PerkManager_GetAllStatusEffectsByClass");
static_assert(sizeof(PerkManager_GetAllStatusEffectsByClass) == 0x000018, "Wrong size on PerkManager_GetAllStatusEffectsByClass");
static_assert(offsetof(PerkManager_GetAllStatusEffectsByClass, type) == 0x000000, "Member 'PerkManager_GetAllStatusEffectsByClass::type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetAllStatusEffectsByClass, ReturnValue) == 0x000008, "Member 'PerkManager_GetAllStatusEffectsByClass::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetAllStatusEffectsByID
// 0x0020 (0x0020 - 0x0000)
struct PerkManager_GetAllStatusEffectsByID final
{
public:
	class FName                                   id;                                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStatusEffect*>                  ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetAllStatusEffectsByID) == 0x000008, "Wrong alignment on PerkManager_GetAllStatusEffectsByID");
static_assert(sizeof(PerkManager_GetAllStatusEffectsByID) == 0x000020, "Wrong size on PerkManager_GetAllStatusEffectsByID");
static_assert(offsetof(PerkManager_GetAllStatusEffectsByID, id) == 0x000000, "Member 'PerkManager_GetAllStatusEffectsByID::id' has a wrong offset!");
static_assert(offsetof(PerkManager_GetAllStatusEffectsByID, ReturnValue) == 0x000010, "Member 'PerkManager_GetAllStatusEffectsByID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetCompoundedModifierValue
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetCompoundedModifierValue final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetCompoundedModifierValue) == 0x000004, "Wrong alignment on PerkManager_GetCompoundedModifierValue");
static_assert(sizeof(PerkManager_GetCompoundedModifierValue) == 0x000010, "Wrong size on PerkManager_GetCompoundedModifierValue");
static_assert(offsetof(PerkManager_GetCompoundedModifierValue, type) == 0x000000, "Member 'PerkManager_GetCompoundedModifierValue::type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetCompoundedModifierValue, ReturnValue) == 0x00000C, "Member 'PerkManager_GetCompoundedModifierValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetMultiplicativeModifierValue
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetMultiplicativeModifierValue final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetMultiplicativeModifierValue) == 0x000004, "Wrong alignment on PerkManager_GetMultiplicativeModifierValue");
static_assert(sizeof(PerkManager_GetMultiplicativeModifierValue) == 0x000010, "Wrong size on PerkManager_GetMultiplicativeModifierValue");
static_assert(offsetof(PerkManager_GetMultiplicativeModifierValue, type) == 0x000000, "Member 'PerkManager_GetMultiplicativeModifierValue::type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetMultiplicativeModifierValue, ReturnValue) == 0x00000C, "Member 'PerkManager_GetMultiplicativeModifierValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetMultiplicativeModifierValueOfContainerWithCompoundNegative
// 0x0028 (0x0028 - 0x0000)
struct PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative final
{
public:
	struct FGameplayTagContainer                  container;                                         // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative) == 0x000008, "Wrong alignment on PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative");
static_assert(sizeof(PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative) == 0x000028, "Wrong size on PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative");
static_assert(offsetof(PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative, container) == 0x000000, "Member 'PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative::container' has a wrong offset!");
static_assert(offsetof(PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative, ReturnValue) == 0x000020, "Member 'PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetMultiplicativeModifierValueWithCompoundNegative
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetMultiplicativeModifierValueWithCompoundNegative final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetMultiplicativeModifierValueWithCompoundNegative) == 0x000004, "Wrong alignment on PerkManager_GetMultiplicativeModifierValueWithCompoundNegative");
static_assert(sizeof(PerkManager_GetMultiplicativeModifierValueWithCompoundNegative) == 0x000010, "Wrong size on PerkManager_GetMultiplicativeModifierValueWithCompoundNegative");
static_assert(offsetof(PerkManager_GetMultiplicativeModifierValueWithCompoundNegative, type) == 0x000000, "Member 'PerkManager_GetMultiplicativeModifierValueWithCompoundNegative::type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetMultiplicativeModifierValueWithCompoundNegative, ReturnValue) == 0x00000C, "Member 'PerkManager_GetMultiplicativeModifierValueWithCompoundNegative::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerk
// 0x0018 (0x0018 - 0x0000)
struct PerkManager_GetPerk final
{
public:
	class FName                                   id;                                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPerk*                                  ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetPerk) == 0x000008, "Wrong alignment on PerkManager_GetPerk");
static_assert(sizeof(PerkManager_GetPerk) == 0x000018, "Wrong size on PerkManager_GetPerk");
static_assert(offsetof(PerkManager_GetPerk, id) == 0x000000, "Member 'PerkManager_GetPerk::id' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerk, ReturnValue) == 0x000010, "Member 'PerkManager_GetPerk::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerkModifier
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetPerkModifier final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetPerkModifier) == 0x000004, "Wrong alignment on PerkManager_GetPerkModifier");
static_assert(sizeof(PerkManager_GetPerkModifier) == 0x000010, "Wrong size on PerkManager_GetPerkModifier");
static_assert(offsetof(PerkManager_GetPerkModifier, type) == 0x000000, "Member 'PerkManager_GetPerkModifier::type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifier, ReturnValue) == 0x00000C, "Member 'PerkManager_GetPerkModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerkModifierAdditiveValue
// 0x0014 (0x0014 - 0x0000)
struct PerkManager_GetPerkModifierAdditiveValue final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         baseValue;                                         // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetPerkModifierAdditiveValue) == 0x000004, "Wrong alignment on PerkManager_GetPerkModifierAdditiveValue");
static_assert(sizeof(PerkManager_GetPerkModifierAdditiveValue) == 0x000014, "Wrong size on PerkManager_GetPerkModifierAdditiveValue");
static_assert(offsetof(PerkManager_GetPerkModifierAdditiveValue, type) == 0x000000, "Member 'PerkManager_GetPerkModifierAdditiveValue::type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierAdditiveValue, baseValue) == 0x00000C, "Member 'PerkManager_GetPerkModifierAdditiveValue::baseValue' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierAdditiveValue, ReturnValue) == 0x000010, "Member 'PerkManager_GetPerkModifierAdditiveValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerkModifierMaxValue
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetPerkModifierMaxValue final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetPerkModifierMaxValue) == 0x000004, "Wrong alignment on PerkManager_GetPerkModifierMaxValue");
static_assert(sizeof(PerkManager_GetPerkModifierMaxValue) == 0x000010, "Wrong size on PerkManager_GetPerkModifierMaxValue");
static_assert(offsetof(PerkManager_GetPerkModifierMaxValue, type) == 0x000000, "Member 'PerkManager_GetPerkModifierMaxValue::type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMaxValue, ReturnValue) == 0x00000C, "Member 'PerkManager_GetPerkModifierMaxValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerkModifierMaxValueAndSource
// 0x0020 (0x0020 - 0x0000)
struct PerkManager_GetPerkModifierMaxValueAndSource final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayModifierContainer*             outSource;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_GetPerkModifierMaxValueAndSource) == 0x000008, "Wrong alignment on PerkManager_GetPerkModifierMaxValueAndSource");
static_assert(sizeof(PerkManager_GetPerkModifierMaxValueAndSource) == 0x000020, "Wrong size on PerkManager_GetPerkModifierMaxValueAndSource");
static_assert(offsetof(PerkManager_GetPerkModifierMaxValueAndSource, type) == 0x000000, "Member 'PerkManager_GetPerkModifierMaxValueAndSource::type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMaxValueAndSource, outSource) == 0x000010, "Member 'PerkManager_GetPerkModifierMaxValueAndSource::outSource' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMaxValueAndSource, ReturnValue) == 0x000018, "Member 'PerkManager_GetPerkModifierMaxValueAndSource::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerkModifierMinValue
// 0x0014 (0x0014 - 0x0000)
struct PerkManager_GetPerkModifierMinValue final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         startValue;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetPerkModifierMinValue) == 0x000004, "Wrong alignment on PerkManager_GetPerkModifierMinValue");
static_assert(sizeof(PerkManager_GetPerkModifierMinValue) == 0x000014, "Wrong size on PerkManager_GetPerkModifierMinValue");
static_assert(offsetof(PerkManager_GetPerkModifierMinValue, type) == 0x000000, "Member 'PerkManager_GetPerkModifierMinValue::type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMinValue, startValue) == 0x00000C, "Member 'PerkManager_GetPerkModifierMinValue::startValue' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMinValue, ReturnValue) == 0x000010, "Member 'PerkManager_GetPerkModifierMinValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerkModifierMinValueAndSource
// 0x0020 (0x0020 - 0x0000)
struct PerkManager_GetPerkModifierMinValueAndSource final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         startValue;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayModifierContainer*             outSource;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_GetPerkModifierMinValueAndSource) == 0x000008, "Wrong alignment on PerkManager_GetPerkModifierMinValueAndSource");
static_assert(sizeof(PerkManager_GetPerkModifierMinValueAndSource) == 0x000020, "Wrong size on PerkManager_GetPerkModifierMinValueAndSource");
static_assert(offsetof(PerkManager_GetPerkModifierMinValueAndSource, type) == 0x000000, "Member 'PerkManager_GetPerkModifierMinValueAndSource::type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMinValueAndSource, startValue) == 0x00000C, "Member 'PerkManager_GetPerkModifierMinValueAndSource::startValue' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMinValueAndSource, outSource) == 0x000010, "Member 'PerkManager_GetPerkModifierMinValueAndSource::outSource' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMinValueAndSource, ReturnValue) == 0x000018, "Member 'PerkManager_GetPerkModifierMinValueAndSource::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerks
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetPerks final
{
public:
	TArray<class UPerk*>                          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetPerks) == 0x000008, "Wrong alignment on PerkManager_GetPerks");
static_assert(sizeof(PerkManager_GetPerks) == 0x000010, "Wrong size on PerkManager_GetPerks");
static_assert(offsetof(PerkManager_GetPerks, ReturnValue) == 0x000000, "Member 'PerkManager_GetPerks::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetSourceWithFlag
// 0x0018 (0x0018 - 0x0000)
struct PerkManager_GetSourceWithFlag final
{
public:
	struct FGameplayTag                           flag;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayModifierContainer*             ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetSourceWithFlag) == 0x000008, "Wrong alignment on PerkManager_GetSourceWithFlag");
static_assert(sizeof(PerkManager_GetSourceWithFlag) == 0x000018, "Wrong size on PerkManager_GetSourceWithFlag");
static_assert(offsetof(PerkManager_GetSourceWithFlag, flag) == 0x000000, "Member 'PerkManager_GetSourceWithFlag::flag' has a wrong offset!");
static_assert(offsetof(PerkManager_GetSourceWithFlag, ReturnValue) == 0x000010, "Member 'PerkManager_GetSourceWithFlag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetSourceWithModifier
// 0x0018 (0x0018 - 0x0000)
struct PerkManager_GetSourceWithModifier final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayModifierContainer*             ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetSourceWithModifier) == 0x000008, "Wrong alignment on PerkManager_GetSourceWithModifier");
static_assert(sizeof(PerkManager_GetSourceWithModifier) == 0x000018, "Wrong size on PerkManager_GetSourceWithModifier");
static_assert(offsetof(PerkManager_GetSourceWithModifier, type) == 0x000000, "Member 'PerkManager_GetSourceWithModifier::type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetSourceWithModifier, ReturnValue) == 0x000010, "Member 'PerkManager_GetSourceWithModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetStatusEffect
// 0x0018 (0x0018 - 0x0000)
struct PerkManager_GetStatusEffect final
{
public:
	class FName                                   id;                                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStatusEffect*                          ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetStatusEffect) == 0x000008, "Wrong alignment on PerkManager_GetStatusEffect");
static_assert(sizeof(PerkManager_GetStatusEffect) == 0x000018, "Wrong size on PerkManager_GetStatusEffect");
static_assert(offsetof(PerkManager_GetStatusEffect, id) == 0x000000, "Member 'PerkManager_GetStatusEffect::id' has a wrong offset!");
static_assert(offsetof(PerkManager_GetStatusEffect, ReturnValue) == 0x000010, "Member 'PerkManager_GetStatusEffect::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasAllCharacterPerksEquipped
// 0x0001 (0x0001 - 0x0000)
struct PerkManager_HasAllCharacterPerksEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_HasAllCharacterPerksEquipped) == 0x000001, "Wrong alignment on PerkManager_HasAllCharacterPerksEquipped");
static_assert(sizeof(PerkManager_HasAllCharacterPerksEquipped) == 0x000001, "Wrong size on PerkManager_HasAllCharacterPerksEquipped");
static_assert(offsetof(PerkManager_HasAllCharacterPerksEquipped, ReturnValue) == 0x000000, "Member 'PerkManager_HasAllCharacterPerksEquipped::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasAnyAddonWithTag
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_HasAnyAddonWithTag final
{
public:
	class FName                                   tag;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasAnyAddonWithTag) == 0x000004, "Wrong alignment on PerkManager_HasAnyAddonWithTag");
static_assert(sizeof(PerkManager_HasAnyAddonWithTag) == 0x000010, "Wrong size on PerkManager_HasAnyAddonWithTag");
static_assert(offsetof(PerkManager_HasAnyAddonWithTag, tag) == 0x000000, "Member 'PerkManager_HasAnyAddonWithTag::tag' has a wrong offset!");
static_assert(offsetof(PerkManager_HasAnyAddonWithTag, ReturnValue) == 0x00000C, "Member 'PerkManager_HasAnyAddonWithTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasAnyEffectWithID
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_HasAnyEffectWithID final
{
public:
	class FName                                   id;                                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasAnyEffectWithID) == 0x000004, "Wrong alignment on PerkManager_HasAnyEffectWithID");
static_assert(sizeof(PerkManager_HasAnyEffectWithID) == 0x000010, "Wrong size on PerkManager_HasAnyEffectWithID");
static_assert(offsetof(PerkManager_HasAnyEffectWithID, id) == 0x000000, "Member 'PerkManager_HasAnyEffectWithID::id' has a wrong offset!");
static_assert(offsetof(PerkManager_HasAnyEffectWithID, ReturnValue) == 0x00000C, "Member 'PerkManager_HasAnyEffectWithID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasPerkFlag
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_HasPerkFlag final
{
public:
	struct FGameplayTag                           flag;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasPerkFlag) == 0x000004, "Wrong alignment on PerkManager_HasPerkFlag");
static_assert(sizeof(PerkManager_HasPerkFlag) == 0x000010, "Wrong size on PerkManager_HasPerkFlag");
static_assert(offsetof(PerkManager_HasPerkFlag, flag) == 0x000000, "Member 'PerkManager_HasPerkFlag::flag' has a wrong offset!");
static_assert(offsetof(PerkManager_HasPerkFlag, ReturnValue) == 0x00000C, "Member 'PerkManager_HasPerkFlag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasPerkFlagFromSource
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_HasPerkFlagFromSource final
{
public:
	struct FGameplayTag                           flag;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModifierSource                       modifierSource;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasPerkFlagFromSource) == 0x000004, "Wrong alignment on PerkManager_HasPerkFlagFromSource");
static_assert(sizeof(PerkManager_HasPerkFlagFromSource) == 0x000010, "Wrong size on PerkManager_HasPerkFlagFromSource");
static_assert(offsetof(PerkManager_HasPerkFlagFromSource, flag) == 0x000000, "Member 'PerkManager_HasPerkFlagFromSource::flag' has a wrong offset!");
static_assert(offsetof(PerkManager_HasPerkFlagFromSource, modifierSource) == 0x00000C, "Member 'PerkManager_HasPerkFlagFromSource::modifierSource' has a wrong offset!");
static_assert(offsetof(PerkManager_HasPerkFlagFromSource, ReturnValue) == 0x00000D, "Member 'PerkManager_HasPerkFlagFromSource::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasPerkFlags
// 0x0018 (0x0018 - 0x0000)
struct PerkManager_HasPerkFlags final
{
public:
	TArray<struct FGameplayTag>                   flags;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasPerkFlags) == 0x000008, "Wrong alignment on PerkManager_HasPerkFlags");
static_assert(sizeof(PerkManager_HasPerkFlags) == 0x000018, "Wrong size on PerkManager_HasPerkFlags");
static_assert(offsetof(PerkManager_HasPerkFlags, flags) == 0x000000, "Member 'PerkManager_HasPerkFlags::flags' has a wrong offset!");
static_assert(offsetof(PerkManager_HasPerkFlags, ReturnValue) == 0x000010, "Member 'PerkManager_HasPerkFlags::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasPerkModifierOfType
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_HasPerkModifierOfType final
{
public:
	struct FGameplayTag                           type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasPerkModifierOfType) == 0x000004, "Wrong alignment on PerkManager_HasPerkModifierOfType");
static_assert(sizeof(PerkManager_HasPerkModifierOfType) == 0x000010, "Wrong size on PerkManager_HasPerkModifierOfType");
static_assert(offsetof(PerkManager_HasPerkModifierOfType, type) == 0x000000, "Member 'PerkManager_HasPerkModifierOfType::type' has a wrong offset!");
static_assert(offsetof(PerkManager_HasPerkModifierOfType, ReturnValue) == 0x00000C, "Member 'PerkManager_HasPerkModifierOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasPerkSubFlag
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_HasPerkSubFlag final
{
public:
	struct FGameplayTag                           subFlag;                                           // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasPerkSubFlag) == 0x000004, "Wrong alignment on PerkManager_HasPerkSubFlag");
static_assert(sizeof(PerkManager_HasPerkSubFlag) == 0x000010, "Wrong size on PerkManager_HasPerkSubFlag");
static_assert(offsetof(PerkManager_HasPerkSubFlag, subFlag) == 0x000000, "Member 'PerkManager_HasPerkSubFlag::subFlag' has a wrong offset!");
static_assert(offsetof(PerkManager_HasPerkSubFlag, ReturnValue) == 0x00000C, "Member 'PerkManager_HasPerkSubFlag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasStatusEffect
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_HasStatusEffect final
{
public:
	class FName                                   statusEffectID;                                    // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasStatusEffect) == 0x000004, "Wrong alignment on PerkManager_HasStatusEffect");
static_assert(sizeof(PerkManager_HasStatusEffect) == 0x000010, "Wrong size on PerkManager_HasStatusEffect");
static_assert(offsetof(PerkManager_HasStatusEffect, statusEffectID) == 0x000000, "Member 'PerkManager_HasStatusEffect::statusEffectID' has a wrong offset!");
static_assert(offsetof(PerkManager_HasStatusEffect, ReturnValue) == 0x00000C, "Member 'PerkManager_HasStatusEffect::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasStatusEffectOfClass
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_HasStatusEffectOfClass final
{
public:
	const class UClass*                           type;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasStatusEffectOfClass) == 0x000008, "Wrong alignment on PerkManager_HasStatusEffectOfClass");
static_assert(sizeof(PerkManager_HasStatusEffectOfClass) == 0x000010, "Wrong size on PerkManager_HasStatusEffectOfClass");
static_assert(offsetof(PerkManager_HasStatusEffectOfClass, type) == 0x000000, "Member 'PerkManager_HasStatusEffectOfClass::type' has a wrong offset!");
static_assert(offsetof(PerkManager_HasStatusEffectOfClass, ReturnValue) == 0x000008, "Member 'PerkManager_HasStatusEffectOfClass::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerspectiveEffectActivator.IsEffectActive
// 0x0010 (0x0010 - 0x0000)
struct PerspectiveEffectActivator_IsEffectActive final
{
public:
	class FName                                   effectName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerspectiveEffectActivator_IsEffectActive) == 0x000004, "Wrong alignment on PerspectiveEffectActivator_IsEffectActive");
static_assert(sizeof(PerspectiveEffectActivator_IsEffectActive) == 0x000010, "Wrong size on PerspectiveEffectActivator_IsEffectActive");
static_assert(offsetof(PerspectiveEffectActivator_IsEffectActive, effectName) == 0x000000, "Member 'PerspectiveEffectActivator_IsEffectActive::effectName' has a wrong offset!");
static_assert(offsetof(PerspectiveEffectActivator_IsEffectActive, ReturnValue) == 0x00000C, "Member 'PerspectiveEffectActivator_IsEffectActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerspectiveEffectActivator.RegisterEffect
// 0x0028 (0x0028 - 0x0000)
struct PerspectiveEffectActivator_RegisterEffect final
{
public:
	class FName                                   effectName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveEffectData                 effectData;                                        // 0x000C(0x001C)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveEffectActivator_RegisterEffect) == 0x000004, "Wrong alignment on PerspectiveEffectActivator_RegisterEffect");
static_assert(sizeof(PerspectiveEffectActivator_RegisterEffect) == 0x000028, "Wrong size on PerspectiveEffectActivator_RegisterEffect");
static_assert(offsetof(PerspectiveEffectActivator_RegisterEffect, effectName) == 0x000000, "Member 'PerspectiveEffectActivator_RegisterEffect::effectName' has a wrong offset!");
static_assert(offsetof(PerspectiveEffectActivator_RegisterEffect, effectData) == 0x00000C, "Member 'PerspectiveEffectActivator_RegisterEffect::effectData' has a wrong offset!");

// Function DeadByDaylight.PerspectiveEffectActivator.SetWantsActive
// 0x0010 (0x0010 - 0x0000)
struct PerspectiveEffectActivator_SetWantsActive final
{
public:
	class FName                                   effectName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          wantsActive;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerspectiveEffectActivator_SetWantsActive) == 0x000004, "Wrong alignment on PerspectiveEffectActivator_SetWantsActive");
static_assert(sizeof(PerspectiveEffectActivator_SetWantsActive) == 0x000010, "Wrong size on PerspectiveEffectActivator_SetWantsActive");
static_assert(offsetof(PerspectiveEffectActivator_SetWantsActive, effectName) == 0x000000, "Member 'PerspectiveEffectActivator_SetWantsActive::effectName' has a wrong offset!");
static_assert(offsetof(PerspectiveEffectActivator_SetWantsActive, wantsActive) == 0x00000C, "Member 'PerspectiveEffectActivator_SetWantsActive::wantsActive' has a wrong offset!");

// Function DeadByDaylight.PerspectiveEffectActivator.UnregisterEffect
// 0x000C (0x000C - 0x0000)
struct PerspectiveEffectActivator_UnregisterEffect final
{
public:
	class FName                                   effectName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveEffectActivator_UnregisterEffect) == 0x000004, "Wrong alignment on PerspectiveEffectActivator_UnregisterEffect");
static_assert(sizeof(PerspectiveEffectActivator_UnregisterEffect) == 0x00000C, "Wrong size on PerspectiveEffectActivator_UnregisterEffect");
static_assert(offsetof(PerspectiveEffectActivator_UnregisterEffect, effectName) == 0x000000, "Member 'PerspectiveEffectActivator_UnregisterEffect::effectName' has a wrong offset!");

// Function DeadByDaylight.PlagueUtilities.Authority_AddSicknessToPlayer
// 0x0010 (0x0010 - 0x0000)
struct PlagueUtilities_Authority_AddSicknessToPlayer final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         sicknessToAdd;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlagueUtilities_Authority_AddSicknessToPlayer) == 0x000008, "Wrong alignment on PlagueUtilities_Authority_AddSicknessToPlayer");
static_assert(sizeof(PlagueUtilities_Authority_AddSicknessToPlayer) == 0x000010, "Wrong size on PlagueUtilities_Authority_AddSicknessToPlayer");
static_assert(offsetof(PlagueUtilities_Authority_AddSicknessToPlayer, player) == 0x000000, "Member 'PlagueUtilities_Authority_AddSicknessToPlayer::player' has a wrong offset!");
static_assert(offsetof(PlagueUtilities_Authority_AddSicknessToPlayer, sicknessToAdd) == 0x000008, "Member 'PlagueUtilities_Authority_AddSicknessToPlayer::sicknessToAdd' has a wrong offset!");

// Function DeadByDaylight.PlagueUtilities.GetPlagueEffect
// 0x0010 (0x0010 - 0x0000)
struct PlagueUtilities_GetPlagueEffect final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USurvivorPlagueEffect*                  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlagueUtilities_GetPlagueEffect) == 0x000008, "Wrong alignment on PlagueUtilities_GetPlagueEffect");
static_assert(sizeof(PlagueUtilities_GetPlagueEffect) == 0x000010, "Wrong size on PlagueUtilities_GetPlagueEffect");
static_assert(offsetof(PlagueUtilities_GetPlagueEffect, player) == 0x000000, "Member 'PlagueUtilities_GetPlagueEffect::player' has a wrong offset!");
static_assert(offsetof(PlagueUtilities_GetPlagueEffect, ReturnValue) == 0x000008, "Member 'PlagueUtilities_GetPlagueEffect::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlagueUtilities.HasMaxLevelSickness
// 0x0010 (0x0010 - 0x0000)
struct PlagueUtilities_HasMaxLevelSickness final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlagueUtilities_HasMaxLevelSickness) == 0x000008, "Wrong alignment on PlagueUtilities_HasMaxLevelSickness");
static_assert(sizeof(PlagueUtilities_HasMaxLevelSickness) == 0x000010, "Wrong size on PlagueUtilities_HasMaxLevelSickness");
static_assert(offsetof(PlagueUtilities_HasMaxLevelSickness, player) == 0x000000, "Member 'PlagueUtilities_HasMaxLevelSickness::player' has a wrong offset!");
static_assert(offsetof(PlagueUtilities_HasMaxLevelSickness, ReturnValue) == 0x000008, "Member 'PlagueUtilities_HasMaxLevelSickness::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlagueUtilities.IsInfected
// 0x0010 (0x0010 - 0x0000)
struct PlagueUtilities_IsInfected final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlagueUtilities_IsInfected) == 0x000008, "Wrong alignment on PlagueUtilities_IsInfected");
static_assert(sizeof(PlagueUtilities_IsInfected) == 0x000010, "Wrong size on PlagueUtilities_IsInfected");
static_assert(offsetof(PlagueUtilities_IsInfected, player) == 0x000000, "Member 'PlagueUtilities_IsInfected::player' has a wrong offset!");
static_assert(offsetof(PlagueUtilities_IsInfected, ReturnValue) == 0x000008, "Member 'PlagueUtilities_IsInfected::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlagueUtilities.IsPlagueDebugModeActive
// 0x0001 (0x0001 - 0x0000)
struct PlagueUtilities_IsPlagueDebugModeActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlagueUtilities_IsPlagueDebugModeActive) == 0x000001, "Wrong alignment on PlagueUtilities_IsPlagueDebugModeActive");
static_assert(sizeof(PlagueUtilities_IsPlagueDebugModeActive) == 0x000001, "Wrong size on PlagueUtilities_IsPlagueDebugModeActive");
static_assert(offsetof(PlagueUtilities_IsPlagueDebugModeActive, ReturnValue) == 0x000000, "Member 'PlagueUtilities_IsPlagueDebugModeActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Window.Authority_OnVaultInternal
// 0x0010 (0x0010 - 0x0000)
struct Window_Authority_OnVaultInternal final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          canBlockVault;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Window_Authority_OnVaultInternal) == 0x000008, "Wrong alignment on Window_Authority_OnVaultInternal");
static_assert(sizeof(Window_Authority_OnVaultInternal) == 0x000010, "Wrong size on Window_Authority_OnVaultInternal");
static_assert(offsetof(Window_Authority_OnVaultInternal, player) == 0x000000, "Member 'Window_Authority_OnVaultInternal::player' has a wrong offset!");
static_assert(offsetof(Window_Authority_OnVaultInternal, canBlockVault) == 0x000008, "Member 'Window_Authority_OnVaultInternal::canBlockVault' has a wrong offset!");

// Function DeadByDaylight.Window.Authority_SetBlockedByLevel
// 0x0001 (0x0001 - 0x0000)
struct Window_Authority_SetBlockedByLevel final
{
public:
	bool                                          isBlockedByLevel;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Window_Authority_SetBlockedByLevel) == 0x000001, "Wrong alignment on Window_Authority_SetBlockedByLevel");
static_assert(sizeof(Window_Authority_SetBlockedByLevel) == 0x000001, "Wrong size on Window_Authority_SetBlockedByLevel");
static_assert(offsetof(Window_Authority_SetBlockedByLevel, isBlockedByLevel) == 0x000000, "Member 'Window_Authority_SetBlockedByLevel::isBlockedByLevel' has a wrong offset!");

// Function DeadByDaylight.Window.ForceBlockLocalWindowInteraction
// 0x0001 (0x0001 - 0x0000)
struct Window_ForceBlockLocalWindowInteraction final
{
public:
	bool                                          blockInteraction;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Window_ForceBlockLocalWindowInteraction) == 0x000001, "Wrong alignment on Window_ForceBlockLocalWindowInteraction");
static_assert(sizeof(Window_ForceBlockLocalWindowInteraction) == 0x000001, "Wrong size on Window_ForceBlockLocalWindowInteraction");
static_assert(offsetof(Window_ForceBlockLocalWindowInteraction, blockInteraction) == 0x000000, "Member 'Window_ForceBlockLocalWindowInteraction::blockInteraction' has a wrong offset!");

// Function DeadByDaylight.Window.NotifyOnFastVault
// 0x0010 (0x0010 - 0x0000)
struct Window_NotifyOnFastVault final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractionDefinition*                 interaction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Window_NotifyOnFastVault) == 0x000008, "Wrong alignment on Window_NotifyOnFastVault");
static_assert(sizeof(Window_NotifyOnFastVault) == 0x000010, "Wrong size on Window_NotifyOnFastVault");
static_assert(offsetof(Window_NotifyOnFastVault, player) == 0x000000, "Member 'Window_NotifyOnFastVault::player' has a wrong offset!");
static_assert(offsetof(Window_NotifyOnFastVault, interaction) == 0x000008, "Member 'Window_NotifyOnFastVault::interaction' has a wrong offset!");

// Function DeadByDaylight.Window.OnFastVault
// 0x0010 (0x0010 - 0x0000)
struct Window_OnFastVault final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractionDefinition*                 interaction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Window_OnFastVault) == 0x000008, "Wrong alignment on Window_OnFastVault");
static_assert(sizeof(Window_OnFastVault) == 0x000010, "Wrong size on Window_OnFastVault");
static_assert(offsetof(Window_OnFastVault, player) == 0x000000, "Member 'Window_OnFastVault::player' has a wrong offset!");
static_assert(offsetof(Window_OnFastVault, interaction) == 0x000008, "Member 'Window_OnFastVault::interaction' has a wrong offset!");

// Function DeadByDaylight.Window.GetAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct Window_GetAudioComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Window_GetAudioComponent) == 0x000008, "Wrong alignment on Window_GetAudioComponent");
static_assert(sizeof(Window_GetAudioComponent) == 0x000008, "Wrong size on Window_GetAudioComponent");
static_assert(offsetof(Window_GetAudioComponent, ReturnValue) == 0x000000, "Member 'Window_GetAudioComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Window.GetBlockedByLevel
// 0x0001 (0x0001 - 0x0000)
struct Window_GetBlockedByLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Window_GetBlockedByLevel) == 0x000001, "Wrong alignment on Window_GetBlockedByLevel");
static_assert(sizeof(Window_GetBlockedByLevel) == 0x000001, "Wrong size on Window_GetBlockedByLevel");
static_assert(offsetof(Window_GetBlockedByLevel, ReturnValue) == 0x000000, "Member 'Window_GetBlockedByLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Window.GetEntityAssets
// 0x0008 (0x0008 - 0x0000)
struct Window_GetEntityAssets final
{
public:
	class UChildActorComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Window_GetEntityAssets) == 0x000008, "Wrong alignment on Window_GetEntityAssets");
static_assert(sizeof(Window_GetEntityAssets) == 0x000008, "Wrong size on Window_GetEntityAssets");
static_assert(offsetof(Window_GetEntityAssets, ReturnValue) == 0x000000, "Member 'Window_GetEntityAssets::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Window.GetMaterialHelper
// 0x0008 (0x0008 - 0x0000)
struct Window_GetMaterialHelper final
{
public:
	class UMaterialHelper*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Window_GetMaterialHelper) == 0x000008, "Wrong alignment on Window_GetMaterialHelper");
static_assert(sizeof(Window_GetMaterialHelper) == 0x000008, "Wrong size on Window_GetMaterialHelper");
static_assert(offsetof(Window_GetMaterialHelper, ReturnValue) == 0x000000, "Member 'Window_GetMaterialHelper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Window.IsWindowVaultBlockedFor
// 0x0010 (0x0010 - 0x0000)
struct Window_IsWindowVaultBlockedFor final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Window_IsWindowVaultBlockedFor) == 0x000008, "Wrong alignment on Window_IsWindowVaultBlockedFor");
static_assert(sizeof(Window_IsWindowVaultBlockedFor) == 0x000010, "Wrong size on Window_IsWindowVaultBlockedFor");
static_assert(offsetof(Window_IsWindowVaultBlockedFor, player) == 0x000000, "Member 'Window_IsWindowVaultBlockedFor::player' has a wrong offset!");
static_assert(offsetof(Window_IsWindowVaultBlockedFor, ReturnValue) == 0x000008, "Member 'Window_IsWindowVaultBlockedFor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Window.IsWindowVaultBlockedForAnyPlayer
// 0x0001 (0x0001 - 0x0000)
struct Window_IsWindowVaultBlockedForAnyPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Window_IsWindowVaultBlockedForAnyPlayer) == 0x000001, "Wrong alignment on Window_IsWindowVaultBlockedForAnyPlayer");
static_assert(sizeof(Window_IsWindowVaultBlockedForAnyPlayer) == 0x000001, "Wrong size on Window_IsWindowVaultBlockedForAnyPlayer");
static_assert(offsetof(Window_IsWindowVaultBlockedForAnyPlayer, ReturnValue) == 0x000000, "Member 'Window_IsWindowVaultBlockedForAnyPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.AddInteraction
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_AddInteraction final
{
public:
	class UInteractionDefinition*                 interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_AddInteraction) == 0x000008, "Wrong alignment on PlayerInteractionHandler_AddInteraction");
static_assert(sizeof(PlayerInteractionHandler_AddInteraction) == 0x000008, "Wrong size on PlayerInteractionHandler_AddInteraction");
static_assert(offsetof(PlayerInteractionHandler_AddInteraction, interaction) == 0x000000, "Member 'PlayerInteractionHandler_AddInteraction::interaction' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.AddSelfInteractions
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_AddSelfInteractions final
{
public:
	const class AActor*                           interactionRoot;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_AddSelfInteractions) == 0x000008, "Wrong alignment on PlayerInteractionHandler_AddSelfInteractions");
static_assert(sizeof(PlayerInteractionHandler_AddSelfInteractions) == 0x000008, "Wrong size on PlayerInteractionHandler_AddSelfInteractions");
static_assert(offsetof(PlayerInteractionHandler_AddSelfInteractions, interactionRoot) == 0x000000, "Member 'PlayerInteractionHandler_AddSelfInteractions::interactionRoot' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Authority_ClearPlayerDependency
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_Authority_ClearPlayerDependency final
{
public:
	class ADBDPlayer*                             playerDependency;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Authority_ClearPlayerDependency) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Authority_ClearPlayerDependency");
static_assert(sizeof(PlayerInteractionHandler_Authority_ClearPlayerDependency) == 0x000008, "Wrong size on PlayerInteractionHandler_Authority_ClearPlayerDependency");
static_assert(offsetof(PlayerInteractionHandler_Authority_ClearPlayerDependency, playerDependency) == 0x000000, "Member 'PlayerInteractionHandler_Authority_ClearPlayerDependency::playerDependency' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Authority_TriggerCustomSkillCheck
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_Authority_TriggerCustomSkillCheck final
{
public:
	ESkillCheckCustomType                         type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         warningSoundDelay;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Authority_TriggerCustomSkillCheck) == 0x000004, "Wrong alignment on PlayerInteractionHandler_Authority_TriggerCustomSkillCheck");
static_assert(sizeof(PlayerInteractionHandler_Authority_TriggerCustomSkillCheck) == 0x000008, "Wrong size on PlayerInteractionHandler_Authority_TriggerCustomSkillCheck");
static_assert(offsetof(PlayerInteractionHandler_Authority_TriggerCustomSkillCheck, type) == 0x000000, "Member 'PlayerInteractionHandler_Authority_TriggerCustomSkillCheck::type' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_Authority_TriggerCustomSkillCheck, warningSoundDelay) == 0x000004, "Member 'PlayerInteractionHandler_Authority_TriggerCustomSkillCheck::warningSoundDelay' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Broadcast_Multicast_ConfirmChargedCompleted
// 0x0001 (0x0001 - 0x0000)
struct PlayerInteractionHandler_Broadcast_Multicast_ConfirmChargedCompleted final
{
public:
	bool                                          chargeComplete;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Broadcast_Multicast_ConfirmChargedCompleted) == 0x000001, "Wrong alignment on PlayerInteractionHandler_Broadcast_Multicast_ConfirmChargedCompleted");
static_assert(sizeof(PlayerInteractionHandler_Broadcast_Multicast_ConfirmChargedCompleted) == 0x000001, "Wrong size on PlayerInteractionHandler_Broadcast_Multicast_ConfirmChargedCompleted");
static_assert(offsetof(PlayerInteractionHandler_Broadcast_Multicast_ConfirmChargedCompleted, chargeComplete) == 0x000000, "Member 'PlayerInteractionHandler_Broadcast_Multicast_ConfirmChargedCompleted::chargeComplete' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.CleanInteractionArray
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_CleanInteractionArray final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_CleanInteractionArray) == 0x000008, "Wrong alignment on PlayerInteractionHandler_CleanInteractionArray");
static_assert(sizeof(PlayerInteractionHandler_CleanInteractionArray) == 0x000008, "Wrong size on PlayerInteractionHandler_CleanInteractionArray");
static_assert(offsetof(PlayerInteractionHandler_CleanInteractionArray, DestroyedActor) == 0x000000, "Member 'PlayerInteractionHandler_CleanInteractionArray::DestroyedActor' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Client_Cheat_SetInteractionScanInterval
// 0x0004 (0x0004 - 0x0000)
struct PlayerInteractionHandler_Client_Cheat_SetInteractionScanInterval final
{
public:
	float                                         interval;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Client_Cheat_SetInteractionScanInterval) == 0x000004, "Wrong alignment on PlayerInteractionHandler_Client_Cheat_SetInteractionScanInterval");
static_assert(sizeof(PlayerInteractionHandler_Client_Cheat_SetInteractionScanInterval) == 0x000004, "Wrong size on PlayerInteractionHandler_Client_Cheat_SetInteractionScanInterval");
static_assert(offsetof(PlayerInteractionHandler_Client_Cheat_SetInteractionScanInterval, interval) == 0x000000, "Member 'PlayerInteractionHandler_Client_Cheat_SetInteractionScanInterval::interval' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Client_NotifyChargeCompleted
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_Client_NotifyChargeCompleted final
{
public:
	const class UInteractionDefinition*           interaction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Client_NotifyChargeCompleted) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Client_NotifyChargeCompleted");
static_assert(sizeof(PlayerInteractionHandler_Client_NotifyChargeCompleted) == 0x000008, "Wrong size on PlayerInteractionHandler_Client_NotifyChargeCompleted");
static_assert(offsetof(PlayerInteractionHandler_Client_NotifyChargeCompleted, interaction) == 0x000000, "Member 'PlayerInteractionHandler_Client_NotifyChargeCompleted::interaction' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.HasAvailableInteraction
// 0x0002 (0x0002 - 0x0000)
struct PlayerInteractionHandler_HasAvailableInteraction final
{
public:
	EInputInteractionType                         interactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_HasAvailableInteraction) == 0x000001, "Wrong alignment on PlayerInteractionHandler_HasAvailableInteraction");
static_assert(sizeof(PlayerInteractionHandler_HasAvailableInteraction) == 0x000002, "Wrong size on PlayerInteractionHandler_HasAvailableInteraction");
static_assert(offsetof(PlayerInteractionHandler_HasAvailableInteraction, interactionType) == 0x000000, "Member 'PlayerInteractionHandler_HasAvailableInteraction::interactionType' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_HasAvailableInteraction, ReturnValue) == 0x000001, "Member 'PlayerInteractionHandler_HasAvailableInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Multicast_InteractionPredictionValidationResult
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult final
{
public:
	class UInteractionDefinition*                 interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionValidationState                   state;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult");
static_assert(sizeof(PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult) == 0x000010, "Wrong size on PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult");
static_assert(offsetof(PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult, interaction) == 0x000000, "Member 'PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult::interaction' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult, state) == 0x000008, "Member 'PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult::state' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Multicast_InterruptionRequestResult_Interruptor
// 0x0002 (0x0002 - 0x0000)
struct PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor final
{
public:
	ERequestState                                 state;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          grantInterruptScore;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor) == 0x000001, "Wrong alignment on PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor");
static_assert(sizeof(PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor) == 0x000002, "Wrong size on PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor");
static_assert(offsetof(PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor, state) == 0x000000, "Member 'PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor::state' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor, grantInterruptScore) == 0x000001, "Member 'PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor::grantInterruptScore' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Multicast_RequestInterruption_Interruptee
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee final
{
public:
	class ADBDPlayer*                             interruptionOtherParty;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterruptionDefinition*                interruptionDefinition;                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee");
static_assert(sizeof(PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee) == 0x000010, "Wrong size on PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee");
static_assert(offsetof(PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee, interruptionOtherParty) == 0x000000, "Member 'PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee::interruptionOtherParty' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee, interruptionDefinition) == 0x000008, "Member 'PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee::interruptionDefinition' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Multicast_SetInteractionToSwapTo
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_Multicast_SetInteractionToSwapTo final
{
public:
	class UInteractionDefinition*                 interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Multicast_SetInteractionToSwapTo) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Multicast_SetInteractionToSwapTo");
static_assert(sizeof(PlayerInteractionHandler_Multicast_SetInteractionToSwapTo) == 0x000008, "Wrong size on PlayerInteractionHandler_Multicast_SetInteractionToSwapTo");
static_assert(offsetof(PlayerInteractionHandler_Multicast_SetInteractionToSwapTo, interaction) == 0x000000, "Member 'PlayerInteractionHandler_Multicast_SetInteractionToSwapTo::interaction' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Multicast_StoreInteraction
// 0x0060 (0x0060 - 0x0000)
struct PlayerInteractionHandler_Multicast_StoreInteraction final
{
public:
	struct FStoredInteraction                     interactionToStore;                                // 0x0000(0x0060)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Multicast_StoreInteraction) == 0x000004, "Wrong alignment on PlayerInteractionHandler_Multicast_StoreInteraction");
static_assert(sizeof(PlayerInteractionHandler_Multicast_StoreInteraction) == 0x000060, "Wrong size on PlayerInteractionHandler_Multicast_StoreInteraction");
static_assert(offsetof(PlayerInteractionHandler_Multicast_StoreInteraction, interactionToStore) == 0x000000, "Member 'PlayerInteractionHandler_Multicast_StoreInteraction::interactionToStore' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Multicast_StoreInterruption_Interruptor
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor final
{
public:
	class ADBDPlayer*                             interruptionOtherParty;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterruptionDefinition*                interruptionDefinition;                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor");
static_assert(sizeof(PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor) == 0x000010, "Wrong size on PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor");
static_assert(offsetof(PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor, interruptionOtherParty) == 0x000000, "Member 'PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor::interruptionOtherParty' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor, interruptionDefinition) == 0x000008, "Member 'PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor::interruptionDefinition' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.OnAttachedInteractorOwnerEndPlay
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay final
{
public:
	class AActor*                                 actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                endPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay) == 0x000008, "Wrong alignment on PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay");
static_assert(sizeof(PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay) == 0x000010, "Wrong size on PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay");
static_assert(offsetof(PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay, actor) == 0x000000, "Member 'PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay::actor' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay, endPlayReason) == 0x000008, "Member 'PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay::endPlayReason' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.RemoveInteraction
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_RemoveInteraction final
{
public:
	class UInteractionDefinition*                 interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_RemoveInteraction) == 0x000008, "Wrong alignment on PlayerInteractionHandler_RemoveInteraction");
static_assert(sizeof(PlayerInteractionHandler_RemoveInteraction) == 0x000008, "Wrong size on PlayerInteractionHandler_RemoveInteraction");
static_assert(offsetof(PlayerInteractionHandler_RemoveInteraction, interaction) == 0x000000, "Member 'PlayerInteractionHandler_RemoveInteraction::interaction' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Server_AnswerInterruption_Interruptee
// 0x0001 (0x0001 - 0x0000)
struct PlayerInteractionHandler_Server_AnswerInterruption_Interruptee final
{
public:
	ERequestState                                 state;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Server_AnswerInterruption_Interruptee) == 0x000001, "Wrong alignment on PlayerInteractionHandler_Server_AnswerInterruption_Interruptee");
static_assert(sizeof(PlayerInteractionHandler_Server_AnswerInterruption_Interruptee) == 0x000001, "Wrong size on PlayerInteractionHandler_Server_AnswerInterruption_Interruptee");
static_assert(offsetof(PlayerInteractionHandler_Server_AnswerInterruption_Interruptee, state) == 0x000000, "Member 'PlayerInteractionHandler_Server_AnswerInterruption_Interruptee::state' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Server_Broadcast_ConfirmChargedCompleted
// 0x0001 (0x0001 - 0x0000)
struct PlayerInteractionHandler_Server_Broadcast_ConfirmChargedCompleted final
{
public:
	bool                                          chargeComplete;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Server_Broadcast_ConfirmChargedCompleted) == 0x000001, "Wrong alignment on PlayerInteractionHandler_Server_Broadcast_ConfirmChargedCompleted");
static_assert(sizeof(PlayerInteractionHandler_Server_Broadcast_ConfirmChargedCompleted) == 0x000001, "Wrong size on PlayerInteractionHandler_Server_Broadcast_ConfirmChargedCompleted");
static_assert(offsetof(PlayerInteractionHandler_Server_Broadcast_ConfirmChargedCompleted, chargeComplete) == 0x000000, "Member 'PlayerInteractionHandler_Server_Broadcast_ConfirmChargedCompleted::chargeComplete' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Server_Broadcast_StoreInteraction
// 0x0060 (0x0060 - 0x0000)
struct PlayerInteractionHandler_Server_Broadcast_StoreInteraction final
{
public:
	struct FStoredInteraction                     interactionToStore;                                // 0x0000(0x0060)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Server_Broadcast_StoreInteraction) == 0x000004, "Wrong alignment on PlayerInteractionHandler_Server_Broadcast_StoreInteraction");
static_assert(sizeof(PlayerInteractionHandler_Server_Broadcast_StoreInteraction) == 0x000060, "Wrong size on PlayerInteractionHandler_Server_Broadcast_StoreInteraction");
static_assert(offsetof(PlayerInteractionHandler_Server_Broadcast_StoreInteraction, interactionToStore) == 0x000000, "Member 'PlayerInteractionHandler_Server_Broadcast_StoreInteraction::interactionToStore' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Server_Cheat_SetInteractionScanInterval
// 0x0004 (0x0004 - 0x0000)
struct PlayerInteractionHandler_Server_Cheat_SetInteractionScanInterval final
{
public:
	float                                         interval;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Server_Cheat_SetInteractionScanInterval) == 0x000004, "Wrong alignment on PlayerInteractionHandler_Server_Cheat_SetInteractionScanInterval");
static_assert(sizeof(PlayerInteractionHandler_Server_Cheat_SetInteractionScanInterval) == 0x000004, "Wrong size on PlayerInteractionHandler_Server_Cheat_SetInteractionScanInterval");
static_assert(offsetof(PlayerInteractionHandler_Server_Cheat_SetInteractionScanInterval, interval) == 0x000000, "Member 'PlayerInteractionHandler_Server_Cheat_SetInteractionScanInterval::interval' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Server_DebugRequestInteraction
// 0x0030 (0x0030 - 0x0000)
struct PlayerInteractionHandler_Server_DebugRequestInteraction final
{
public:
	class FString                                 interactionName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 interactorName;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 interactableName;                                  // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Server_DebugRequestInteraction) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Server_DebugRequestInteraction");
static_assert(sizeof(PlayerInteractionHandler_Server_DebugRequestInteraction) == 0x000030, "Wrong size on PlayerInteractionHandler_Server_DebugRequestInteraction");
static_assert(offsetof(PlayerInteractionHandler_Server_DebugRequestInteraction, interactionName) == 0x000000, "Member 'PlayerInteractionHandler_Server_DebugRequestInteraction::interactionName' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_Server_DebugRequestInteraction, interactorName) == 0x000010, "Member 'PlayerInteractionHandler_Server_DebugRequestInteraction::interactorName' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_Server_DebugRequestInteraction, interactableName) == 0x000020, "Member 'PlayerInteractionHandler_Server_DebugRequestInteraction::interactableName' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Server_SetInteractionToSwapTo
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_Server_SetInteractionToSwapTo final
{
public:
	class UInteractionDefinition*                 interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Server_SetInteractionToSwapTo) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Server_SetInteractionToSwapTo");
static_assert(sizeof(PlayerInteractionHandler_Server_SetInteractionToSwapTo) == 0x000008, "Wrong size on PlayerInteractionHandler_Server_SetInteractionToSwapTo");
static_assert(offsetof(PlayerInteractionHandler_Server_SetInteractionToSwapTo, interaction) == 0x000000, "Member 'PlayerInteractionHandler_Server_SetInteractionToSwapTo::interaction' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Server_StoreInterruption_Interruptor
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionHandler_Server_StoreInterruption_Interruptor final
{
public:
	class ADBDPlayer*                             interruptionOtherParty;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterruptionDefinition*                interruptionDefinition;                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Server_StoreInterruption_Interruptor) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Server_StoreInterruption_Interruptor");
static_assert(sizeof(PlayerInteractionHandler_Server_StoreInterruption_Interruptor) == 0x000010, "Wrong size on PlayerInteractionHandler_Server_StoreInterruption_Interruptor");
static_assert(offsetof(PlayerInteractionHandler_Server_StoreInterruption_Interruptor, interruptionOtherParty) == 0x000000, "Member 'PlayerInteractionHandler_Server_StoreInterruption_Interruptor::interruptionOtherParty' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_Server_StoreInterruption_Interruptor, interruptionDefinition) == 0x000008, "Member 'PlayerInteractionHandler_Server_StoreInterruption_Interruptor::interruptionDefinition' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.SetScanForInteractionsEnabled
// 0x0001 (0x0001 - 0x0000)
struct PlayerInteractionHandler_SetScanForInteractionsEnabled final
{
public:
	bool                                          enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_SetScanForInteractionsEnabled) == 0x000001, "Wrong alignment on PlayerInteractionHandler_SetScanForInteractionsEnabled");
static_assert(sizeof(PlayerInteractionHandler_SetScanForInteractionsEnabled) == 0x000001, "Wrong size on PlayerInteractionHandler_SetScanForInteractionsEnabled");
static_assert(offsetof(PlayerInteractionHandler_SetScanForInteractionsEnabled, enabled) == 0x000000, "Member 'PlayerInteractionHandler_SetScanForInteractionsEnabled::enabled' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.CanPerformInteraction
// 0x0018 (0x0018 - 0x0000)
struct PlayerInteractionHandler_CanPerformInteraction final
{
public:
	class FString                                 interactionName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInteractionHandler_CanPerformInteraction) == 0x000008, "Wrong alignment on PlayerInteractionHandler_CanPerformInteraction");
static_assert(sizeof(PlayerInteractionHandler_CanPerformInteraction) == 0x000018, "Wrong size on PlayerInteractionHandler_CanPerformInteraction");
static_assert(offsetof(PlayerInteractionHandler_CanPerformInteraction, interactionName) == 0x000000, "Member 'PlayerInteractionHandler_CanPerformInteraction::interactionName' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_CanPerformInteraction, ReturnValue) == 0x000010, "Member 'PlayerInteractionHandler_CanPerformInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.GetAdditiveSkillCheckProbabilityModifier
// 0x0004 (0x0004 - 0x0000)
struct PlayerInteractionHandler_GetAdditiveSkillCheckProbabilityModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_GetAdditiveSkillCheckProbabilityModifier) == 0x000004, "Wrong alignment on PlayerInteractionHandler_GetAdditiveSkillCheckProbabilityModifier");
static_assert(sizeof(PlayerInteractionHandler_GetAdditiveSkillCheckProbabilityModifier) == 0x000004, "Wrong size on PlayerInteractionHandler_GetAdditiveSkillCheckProbabilityModifier");
static_assert(offsetof(PlayerInteractionHandler_GetAdditiveSkillCheckProbabilityModifier, ReturnValue) == 0x000000, "Member 'PlayerInteractionHandler_GetAdditiveSkillCheckProbabilityModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.GetAvailableInteraction
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionHandler_GetAvailableInteraction final
{
public:
	EInputInteractionType                         interactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_GetAvailableInteraction) == 0x000008, "Wrong alignment on PlayerInteractionHandler_GetAvailableInteraction");
static_assert(sizeof(PlayerInteractionHandler_GetAvailableInteraction) == 0x000010, "Wrong size on PlayerInteractionHandler_GetAvailableInteraction");
static_assert(offsetof(PlayerInteractionHandler_GetAvailableInteraction, interactionType) == 0x000000, "Member 'PlayerInteractionHandler_GetAvailableInteraction::interactionType' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_GetAvailableInteraction, ReturnValue) == 0x000008, "Member 'PlayerInteractionHandler_GetAvailableInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.GetAvailableInteractionByID
// 0x0018 (0x0018 - 0x0000)
struct PlayerInteractionHandler_GetAvailableInteractionByID final
{
public:
	class FString                                 interactionID;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_GetAvailableInteractionByID) == 0x000008, "Wrong alignment on PlayerInteractionHandler_GetAvailableInteractionByID");
static_assert(sizeof(PlayerInteractionHandler_GetAvailableInteractionByID) == 0x000018, "Wrong size on PlayerInteractionHandler_GetAvailableInteractionByID");
static_assert(offsetof(PlayerInteractionHandler_GetAvailableInteractionByID, interactionID) == 0x000000, "Member 'PlayerInteractionHandler_GetAvailableInteractionByID::interactionID' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_GetAvailableInteractionByID, ReturnValue) == 0x000010, "Member 'PlayerInteractionHandler_GetAvailableInteractionByID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.GetAvailableInteractions
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionHandler_GetAvailableInteractions final
{
public:
	TArray<class UInteractionDefinition*>         result;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_GetAvailableInteractions) == 0x000008, "Wrong alignment on PlayerInteractionHandler_GetAvailableInteractions");
static_assert(sizeof(PlayerInteractionHandler_GetAvailableInteractions) == 0x000010, "Wrong size on PlayerInteractionHandler_GetAvailableInteractions");
static_assert(offsetof(PlayerInteractionHandler_GetAvailableInteractions, result) == 0x000000, "Member 'PlayerInteractionHandler_GetAvailableInteractions::result' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.GetCurrentInteraction
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_GetCurrentInteraction final
{
public:
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_GetCurrentInteraction) == 0x000008, "Wrong alignment on PlayerInteractionHandler_GetCurrentInteraction");
static_assert(sizeof(PlayerInteractionHandler_GetCurrentInteraction) == 0x000008, "Wrong size on PlayerInteractionHandler_GetCurrentInteraction");
static_assert(offsetof(PlayerInteractionHandler_GetCurrentInteraction, ReturnValue) == 0x000000, "Member 'PlayerInteractionHandler_GetCurrentInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.GetCurrentInteractionOfType
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionHandler_GetCurrentInteractionOfType final
{
public:
	EInputInteractionType                         interactionInputType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_GetCurrentInteractionOfType) == 0x000008, "Wrong alignment on PlayerInteractionHandler_GetCurrentInteractionOfType");
static_assert(sizeof(PlayerInteractionHandler_GetCurrentInteractionOfType) == 0x000010, "Wrong size on PlayerInteractionHandler_GetCurrentInteractionOfType");
static_assert(offsetof(PlayerInteractionHandler_GetCurrentInteractionOfType, interactionInputType) == 0x000000, "Member 'PlayerInteractionHandler_GetCurrentInteractionOfType::interactionInputType' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_GetCurrentInteractionOfType, ReturnValue) == 0x000008, "Member 'PlayerInteractionHandler_GetCurrentInteractionOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.GetMultiplicativeSkillCheckProbabilityModifier
// 0x0004 (0x0004 - 0x0000)
struct PlayerInteractionHandler_GetMultiplicativeSkillCheckProbabilityModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_GetMultiplicativeSkillCheckProbabilityModifier) == 0x000004, "Wrong alignment on PlayerInteractionHandler_GetMultiplicativeSkillCheckProbabilityModifier");
static_assert(sizeof(PlayerInteractionHandler_GetMultiplicativeSkillCheckProbabilityModifier) == 0x000004, "Wrong size on PlayerInteractionHandler_GetMultiplicativeSkillCheckProbabilityModifier");
static_assert(offsetof(PlayerInteractionHandler_GetMultiplicativeSkillCheckProbabilityModifier, ReturnValue) == 0x000000, "Member 'PlayerInteractionHandler_GetMultiplicativeSkillCheckProbabilityModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.GetSkillCheck
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_GetSkillCheck final
{
public:
	class USkillCheck*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_GetSkillCheck) == 0x000008, "Wrong alignment on PlayerInteractionHandler_GetSkillCheck");
static_assert(sizeof(PlayerInteractionHandler_GetSkillCheck) == 0x000008, "Wrong size on PlayerInteractionHandler_GetSkillCheck");
static_assert(offsetof(PlayerInteractionHandler_GetSkillCheck, ReturnValue) == 0x000000, "Member 'PlayerInteractionHandler_GetSkillCheck::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.HasActiveSkillCheck
// 0x0001 (0x0001 - 0x0000)
struct PlayerInteractionHandler_HasActiveSkillCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_HasActiveSkillCheck) == 0x000001, "Wrong alignment on PlayerInteractionHandler_HasActiveSkillCheck");
static_assert(sizeof(PlayerInteractionHandler_HasActiveSkillCheck) == 0x000001, "Wrong size on PlayerInteractionHandler_HasActiveSkillCheck");
static_assert(offsetof(PlayerInteractionHandler_HasActiveSkillCheck, ReturnValue) == 0x000000, "Member 'PlayerInteractionHandler_HasActiveSkillCheck::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.NumInteractionsInZone
// 0x0004 (0x0004 - 0x0000)
struct PlayerInteractionHandler_NumInteractionsInZone final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_NumInteractionsInZone) == 0x000004, "Wrong alignment on PlayerInteractionHandler_NumInteractionsInZone");
static_assert(sizeof(PlayerInteractionHandler_NumInteractionsInZone) == 0x000004, "Wrong size on PlayerInteractionHandler_NumInteractionsInZone");
static_assert(offsetof(PlayerInteractionHandler_NumInteractionsInZone, ReturnValue) == 0x000000, "Member 'PlayerInteractionHandler_NumInteractionsInZone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerPerspectiveComponent.OnPawnControllerChanged
// 0x0018 (0x0018 - 0x0000)
struct PlayerPerspectiveComponent_OnPawnControllerChanged final
{
public:
	class APawn*                                  pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            oldController;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            newController;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerPerspectiveComponent_OnPawnControllerChanged) == 0x000008, "Wrong alignment on PlayerPerspectiveComponent_OnPawnControllerChanged");
static_assert(sizeof(PlayerPerspectiveComponent_OnPawnControllerChanged) == 0x000018, "Wrong size on PlayerPerspectiveComponent_OnPawnControllerChanged");
static_assert(offsetof(PlayerPerspectiveComponent_OnPawnControllerChanged, pawn) == 0x000000, "Member 'PlayerPerspectiveComponent_OnPawnControllerChanged::pawn' has a wrong offset!");
static_assert(offsetof(PlayerPerspectiveComponent_OnPawnControllerChanged, oldController) == 0x000008, "Member 'PlayerPerspectiveComponent_OnPawnControllerChanged::oldController' has a wrong offset!");
static_assert(offsetof(PlayerPerspectiveComponent_OnPawnControllerChanged, newController) == 0x000010, "Member 'PlayerPerspectiveComponent_OnPawnControllerChanged::newController' has a wrong offset!");

// Function DeadByDaylight.PlayerPerspectiveComponent.IsLocallyObserved
// 0x0001 (0x0001 - 0x0000)
struct PlayerPerspectiveComponent_IsLocallyObserved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerPerspectiveComponent_IsLocallyObserved) == 0x000001, "Wrong alignment on PlayerPerspectiveComponent_IsLocallyObserved");
static_assert(sizeof(PlayerPerspectiveComponent_IsLocallyObserved) == 0x000001, "Wrong size on PlayerPerspectiveComponent_IsLocallyObserved");
static_assert(offsetof(PlayerPerspectiveComponent_IsLocallyObserved, ReturnValue) == 0x000000, "Member 'PlayerPerspectiveComponent_IsLocallyObserved::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGStatusEffectsWidget.RemoveExistingStatusEffect
// 0x0010 (0x0010 - 0x0000)
struct UMGStatusEffectsWidget_RemoveExistingStatusEffect final
{
public:
	class FString                                 statusEffectID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGStatusEffectsWidget_RemoveExistingStatusEffect) == 0x000008, "Wrong alignment on UMGStatusEffectsWidget_RemoveExistingStatusEffect");
static_assert(sizeof(UMGStatusEffectsWidget_RemoveExistingStatusEffect) == 0x000010, "Wrong size on UMGStatusEffectsWidget_RemoveExistingStatusEffect");
static_assert(offsetof(UMGStatusEffectsWidget_RemoveExistingStatusEffect, statusEffectID) == 0x000000, "Member 'UMGStatusEffectsWidget_RemoveExistingStatusEffect::statusEffectID' has a wrong offset!");

// Function DeadByDaylight.UMGSwitcherScreen.BroadcastBloodNodePurchase
// 0x0004 (0x0004 - 0x0000)
struct UMGSwitcherScreen_BroadcastBloodNodePurchase final
{
public:
	int32                                         characterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSwitcherScreen_BroadcastBloodNodePurchase) == 0x000004, "Wrong alignment on UMGSwitcherScreen_BroadcastBloodNodePurchase");
static_assert(sizeof(UMGSwitcherScreen_BroadcastBloodNodePurchase) == 0x000004, "Wrong size on UMGSwitcherScreen_BroadcastBloodNodePurchase");
static_assert(offsetof(UMGSwitcherScreen_BroadcastBloodNodePurchase, characterId) == 0x000000, "Member 'UMGSwitcherScreen_BroadcastBloodNodePurchase::characterId' has a wrong offset!");

// Function DeadByDaylight.UMGSwitcherScreen.BroadcastBloodNodeSelected
// 0x000C (0x000C - 0x0000)
struct UMGSwitcherScreen_BroadcastBloodNodeSelected final
{
public:
	int32                                         characterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         nodeId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         nodeDepth;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSwitcherScreen_BroadcastBloodNodeSelected) == 0x000004, "Wrong alignment on UMGSwitcherScreen_BroadcastBloodNodeSelected");
static_assert(sizeof(UMGSwitcherScreen_BroadcastBloodNodeSelected) == 0x00000C, "Wrong size on UMGSwitcherScreen_BroadcastBloodNodeSelected");
static_assert(offsetof(UMGSwitcherScreen_BroadcastBloodNodeSelected, characterId) == 0x000000, "Member 'UMGSwitcherScreen_BroadcastBloodNodeSelected::characterId' has a wrong offset!");
static_assert(offsetof(UMGSwitcherScreen_BroadcastBloodNodeSelected, nodeId) == 0x000004, "Member 'UMGSwitcherScreen_BroadcastBloodNodeSelected::nodeId' has a wrong offset!");
static_assert(offsetof(UMGSwitcherScreen_BroadcastBloodNodeSelected, nodeDepth) == 0x000008, "Member 'UMGSwitcherScreen_BroadcastBloodNodeSelected::nodeDepth' has a wrong offset!");

// Function DeadByDaylight.UMGSwitcherScreen.BroadcastBloodStoreRegenerate
// 0x0004 (0x0004 - 0x0000)
struct UMGSwitcherScreen_BroadcastBloodStoreRegenerate final
{
public:
	int32                                         characterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSwitcherScreen_BroadcastBloodStoreRegenerate) == 0x000004, "Wrong alignment on UMGSwitcherScreen_BroadcastBloodStoreRegenerate");
static_assert(sizeof(UMGSwitcherScreen_BroadcastBloodStoreRegenerate) == 0x000004, "Wrong size on UMGSwitcherScreen_BroadcastBloodStoreRegenerate");
static_assert(offsetof(UMGSwitcherScreen_BroadcastBloodStoreRegenerate, characterId) == 0x000000, "Member 'UMGSwitcherScreen_BroadcastBloodStoreRegenerate::characterId' has a wrong offset!");

// Function DeadByDaylight.UMGSwitcherScreen.BroadcastCharacterSelectedEvent
// 0x0004 (0x0004 - 0x0000)
struct UMGSwitcherScreen_BroadcastCharacterSelectedEvent final
{
public:
	int32                                         characterIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSwitcherScreen_BroadcastCharacterSelectedEvent) == 0x000004, "Wrong alignment on UMGSwitcherScreen_BroadcastCharacterSelectedEvent");
static_assert(sizeof(UMGSwitcherScreen_BroadcastCharacterSelectedEvent) == 0x000004, "Wrong size on UMGSwitcherScreen_BroadcastCharacterSelectedEvent");
static_assert(offsetof(UMGSwitcherScreen_BroadcastCharacterSelectedEvent, characterIndex) == 0x000000, "Member 'UMGSwitcherScreen_BroadcastCharacterSelectedEvent::characterIndex' has a wrong offset!");

// Function DeadByDaylight.UMGSwitcherScreen.BroadcastItemSelectedEvent
// 0x0004 (0x0004 - 0x0000)
struct UMGSwitcherScreen_BroadcastItemSelectedEvent final
{
public:
	int32                                         itemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSwitcherScreen_BroadcastItemSelectedEvent) == 0x000004, "Wrong alignment on UMGSwitcherScreen_BroadcastItemSelectedEvent");
static_assert(sizeof(UMGSwitcherScreen_BroadcastItemSelectedEvent) == 0x000004, "Wrong size on UMGSwitcherScreen_BroadcastItemSelectedEvent");
static_assert(offsetof(UMGSwitcherScreen_BroadcastItemSelectedEvent, itemIndex) == 0x000000, "Member 'UMGSwitcherScreen_BroadcastItemSelectedEvent::itemIndex' has a wrong offset!");

// Function DeadByDaylight.UMGSwitcherScreen.BroadcastItemUnSelectedEvent
// 0x0004 (0x0004 - 0x0000)
struct UMGSwitcherScreen_BroadcastItemUnSelectedEvent final
{
public:
	int32                                         itemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSwitcherScreen_BroadcastItemUnSelectedEvent) == 0x000004, "Wrong alignment on UMGSwitcherScreen_BroadcastItemUnSelectedEvent");
static_assert(sizeof(UMGSwitcherScreen_BroadcastItemUnSelectedEvent) == 0x000004, "Wrong size on UMGSwitcherScreen_BroadcastItemUnSelectedEvent");
static_assert(offsetof(UMGSwitcherScreen_BroadcastItemUnSelectedEvent, itemIndex) == 0x000000, "Member 'UMGSwitcherScreen_BroadcastItemUnSelectedEvent::itemIndex' has a wrong offset!");

// Function DeadByDaylight.UMGSwitcherScreen.BroadcastSlotClickedEvent
// 0x0004 (0x0004 - 0x0000)
struct UMGSwitcherScreen_BroadcastSlotClickedEvent final
{
public:
	int32                                         loadoutSlot;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSwitcherScreen_BroadcastSlotClickedEvent) == 0x000004, "Wrong alignment on UMGSwitcherScreen_BroadcastSlotClickedEvent");
static_assert(sizeof(UMGSwitcherScreen_BroadcastSlotClickedEvent) == 0x000004, "Wrong size on UMGSwitcherScreen_BroadcastSlotClickedEvent");
static_assert(offsetof(UMGSwitcherScreen_BroadcastSlotClickedEvent, loadoutSlot) == 0x000000, "Member 'UMGSwitcherScreen_BroadcastSlotClickedEvent::loadoutSlot' has a wrong offset!");

// Function DeadByDaylight.PostProcessUpdate.PostProcessToggle
// 0x0001 (0x0001 - 0x0000)
struct PostProcessUpdate_PostProcessToggle final
{
public:
	bool                                          toggle;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessUpdate_PostProcessToggle) == 0x000001, "Wrong alignment on PostProcessUpdate_PostProcessToggle");
static_assert(sizeof(PostProcessUpdate_PostProcessToggle) == 0x000001, "Wrong size on PostProcessUpdate_PostProcessToggle");
static_assert(offsetof(PostProcessUpdate_PostProcessToggle, toggle) == 0x000000, "Member 'PostProcessUpdate_PostProcessToggle::toggle' has a wrong offset!");

// Function DeadByDaylight.PowerButton.GetActionButton
// 0x0008 (0x0008 - 0x0000)
struct PowerButton_GetActionButton final
{
public:
	class UActionButton*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PowerButton_GetActionButton) == 0x000008, "Wrong alignment on PowerButton_GetActionButton");
static_assert(sizeof(PowerButton_GetActionButton) == 0x000008, "Wrong size on PowerButton_GetActionButton");
static_assert(offsetof(PowerButton_GetActionButton, ReturnValue) == 0x000000, "Member 'PowerButton_GetActionButton::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PowerButton.IsRadialProgressBarActive
// 0x0001 (0x0001 - 0x0000)
struct PowerButton_IsRadialProgressBarActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PowerButton_IsRadialProgressBarActive) == 0x000001, "Wrong alignment on PowerButton_IsRadialProgressBarActive");
static_assert(sizeof(PowerButton_IsRadialProgressBarActive) == 0x000001, "Wrong size on PowerButton_IsRadialProgressBarActive");
static_assert(offsetof(PowerButton_IsRadialProgressBarActive, ReturnValue) == 0x000000, "Member 'PowerButton_IsRadialProgressBarActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PowerButton.OnTierChanged
// 0x000C (0x000C - 0x0000)
struct PowerButton_OnTierChanged final
{
public:
	int32                                         previousTier;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         currentTier;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isFirstTime;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PowerButton_OnTierChanged) == 0x000004, "Wrong alignment on PowerButton_OnTierChanged");
static_assert(sizeof(PowerButton_OnTierChanged) == 0x00000C, "Wrong size on PowerButton_OnTierChanged");
static_assert(offsetof(PowerButton_OnTierChanged, previousTier) == 0x000000, "Member 'PowerButton_OnTierChanged::previousTier' has a wrong offset!");
static_assert(offsetof(PowerButton_OnTierChanged, currentTier) == 0x000004, "Member 'PowerButton_OnTierChanged::currentTier' has a wrong offset!");
static_assert(offsetof(PowerButton_OnTierChanged, isFirstTime) == 0x000008, "Member 'PowerButton_OnTierChanged::isFirstTime' has a wrong offset!");

// Function DeadByDaylight.PowerButton.SetFillProgressPercentage
// 0x0004 (0x0004 - 0x0000)
struct PowerButton_SetFillProgressPercentage final
{
public:
	float                                         chargeProgressionPercentage;                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PowerButton_SetFillProgressPercentage) == 0x000004, "Wrong alignment on PowerButton_SetFillProgressPercentage");
static_assert(sizeof(PowerButton_SetFillProgressPercentage) == 0x000004, "Wrong size on PowerButton_SetFillProgressPercentage");
static_assert(offsetof(PowerButton_SetFillProgressPercentage, chargeProgressionPercentage) == 0x000000, "Member 'PowerButton_SetFillProgressPercentage::chargeProgressionPercentage' has a wrong offset!");

// Function DeadByDaylight.PowerButton.SetPowerIntensityOpacity
// 0x0004 (0x0004 - 0x0000)
struct PowerButton_SetPowerIntensityOpacity final
{
public:
	float                                         opacity;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PowerButton_SetPowerIntensityOpacity) == 0x000004, "Wrong alignment on PowerButton_SetPowerIntensityOpacity");
static_assert(sizeof(PowerButton_SetPowerIntensityOpacity) == 0x000004, "Wrong size on PowerButton_SetPowerIntensityOpacity");
static_assert(offsetof(PowerButton_SetPowerIntensityOpacity, opacity) == 0x000000, "Member 'PowerButton_SetPowerIntensityOpacity::opacity' has a wrong offset!");

// Function DeadByDaylight.PowerButton.SetRadialProgressBarActice
// 0x0001 (0x0001 - 0x0000)
struct PowerButton_SetRadialProgressBarActice final
{
public:
	bool                                          active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PowerButton_SetRadialProgressBarActice) == 0x000001, "Wrong alignment on PowerButton_SetRadialProgressBarActice");
static_assert(sizeof(PowerButton_SetRadialProgressBarActice) == 0x000001, "Wrong size on PowerButton_SetRadialProgressBarActice");
static_assert(offsetof(PowerButton_SetRadialProgressBarActice, active) == 0x000000, "Member 'PowerButton_SetRadialProgressBarActice::active' has a wrong offset!");

// Function DeadByDaylight.PowerButton.SetRadialProgressPercentage
// 0x0008 (0x0008 - 0x0000)
struct PowerButton_SetRadialProgressPercentage final
{
public:
	float                                         progression;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERadialProgressBarType                        progressBarType;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PowerButton_SetRadialProgressPercentage) == 0x000004, "Wrong alignment on PowerButton_SetRadialProgressPercentage");
static_assert(sizeof(PowerButton_SetRadialProgressPercentage) == 0x000008, "Wrong size on PowerButton_SetRadialProgressPercentage");
static_assert(offsetof(PowerButton_SetRadialProgressPercentage, progression) == 0x000000, "Member 'PowerButton_SetRadialProgressPercentage::progression' has a wrong offset!");
static_assert(offsetof(PowerButton_SetRadialProgressPercentage, progressBarType) == 0x000004, "Member 'PowerButton_SetRadialProgressPercentage::progressBarType' has a wrong offset!");

// Function DeadByDaylight.PowerButton.SetState
// 0x0001 (0x0001 - 0x0000)
struct PowerButton_SetState final
{
public:
	EActionButtonState                            state;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PowerButton_SetState) == 0x000001, "Wrong alignment on PowerButton_SetState");
static_assert(sizeof(PowerButton_SetState) == 0x000001, "Wrong size on PowerButton_SetState");
static_assert(offsetof(PowerButton_SetState, state) == 0x000000, "Member 'PowerButton_SetState::state' has a wrong offset!");

// Function DeadByDaylight.PowerButton.SetSwitchIconActive
// 0x0001 (0x0001 - 0x0000)
struct PowerButton_SetSwitchIconActive final
{
public:
	bool                                          active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PowerButton_SetSwitchIconActive) == 0x000001, "Wrong alignment on PowerButton_SetSwitchIconActive");
static_assert(sizeof(PowerButton_SetSwitchIconActive) == 0x000001, "Wrong size on PowerButton_SetSwitchIconActive");
static_assert(offsetof(PowerButton_SetSwitchIconActive, active) == 0x000000, "Member 'PowerButton_SetSwitchIconActive::active' has a wrong offset!");

// Function DeadByDaylight.ProceduralLevelBuilder.ApplyMist
// 0x0004 (0x0004 - 0x0000)
struct ProceduralLevelBuilder_ApplyMist final
{
public:
	float                                         modifier;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralLevelBuilder_ApplyMist) == 0x000004, "Wrong alignment on ProceduralLevelBuilder_ApplyMist");
static_assert(sizeof(ProceduralLevelBuilder_ApplyMist) == 0x000004, "Wrong size on ProceduralLevelBuilder_ApplyMist");
static_assert(offsetof(ProceduralLevelBuilder_ApplyMist, modifier) == 0x000000, "Member 'ProceduralLevelBuilder_ApplyMist::modifier' has a wrong offset!");

// Function DeadByDaylight.ProceduralLevelBuilder.Multicast_DebugShareGenerationData
// 0x0004 (0x0004 - 0x0000)
struct ProceduralLevelBuilder_Multicast_DebugShareGenerationData final
{
public:
	struct FGenerationParams                      usedParams;                                        // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralLevelBuilder_Multicast_DebugShareGenerationData) == 0x000004, "Wrong alignment on ProceduralLevelBuilder_Multicast_DebugShareGenerationData");
static_assert(sizeof(ProceduralLevelBuilder_Multicast_DebugShareGenerationData) == 0x000004, "Wrong size on ProceduralLevelBuilder_Multicast_DebugShareGenerationData");
static_assert(offsetof(ProceduralLevelBuilder_Multicast_DebugShareGenerationData, usedParams) == 0x000000, "Member 'ProceduralLevelBuilder_Multicast_DebugShareGenerationData::usedParams' has a wrong offset!");

// Function DeadByDaylight.ProceduralLevelBuilder.SpawnActor
// 0x0018 (0x0018 - 0x0000)
struct ProceduralLevelBuilder_SpawnActor final
{
public:
	class UClass*                                 actorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETileSpawnPointType                           spawnPointType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralLevelBuilder_SpawnActor) == 0x000008, "Wrong alignment on ProceduralLevelBuilder_SpawnActor");
static_assert(sizeof(ProceduralLevelBuilder_SpawnActor) == 0x000018, "Wrong size on ProceduralLevelBuilder_SpawnActor");
static_assert(offsetof(ProceduralLevelBuilder_SpawnActor, actorClass) == 0x000000, "Member 'ProceduralLevelBuilder_SpawnActor::actorClass' has a wrong offset!");
static_assert(offsetof(ProceduralLevelBuilder_SpawnActor, spawnPointType) == 0x000008, "Member 'ProceduralLevelBuilder_SpawnActor::spawnPointType' has a wrong offset!");
static_assert(offsetof(ProceduralLevelBuilder_SpawnActor, ReturnValue) == 0x000010, "Member 'ProceduralLevelBuilder_SpawnActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGObjectivesWidget.UpdateGeneratorCount
// 0x0004 (0x0004 - 0x0000)
struct UMGObjectivesWidget_UpdateGeneratorCount final
{
public:
	int32                                         count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGObjectivesWidget_UpdateGeneratorCount) == 0x000004, "Wrong alignment on UMGObjectivesWidget_UpdateGeneratorCount");
static_assert(sizeof(UMGObjectivesWidget_UpdateGeneratorCount) == 0x000004, "Wrong size on UMGObjectivesWidget_UpdateGeneratorCount");
static_assert(offsetof(UMGObjectivesWidget_UpdateGeneratorCount, count) == 0x000000, "Member 'UMGObjectivesWidget_UpdateGeneratorCount::count' has a wrong offset!");

// Function DeadByDaylight.UMGObjectivesWidget.UpdateTextMessage
// 0x0048 (0x0048 - 0x0000)
struct UMGObjectivesWidget_UpdateTextMessage final
{
public:
	class FText                                   textFind;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   textExit;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   textOr;                                            // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGObjectivesWidget_UpdateTextMessage) == 0x000008, "Wrong alignment on UMGObjectivesWidget_UpdateTextMessage");
static_assert(sizeof(UMGObjectivesWidget_UpdateTextMessage) == 0x000048, "Wrong size on UMGObjectivesWidget_UpdateTextMessage");
static_assert(offsetof(UMGObjectivesWidget_UpdateTextMessage, textFind) == 0x000000, "Member 'UMGObjectivesWidget_UpdateTextMessage::textFind' has a wrong offset!");
static_assert(offsetof(UMGObjectivesWidget_UpdateTextMessage, textExit) == 0x000018, "Member 'UMGObjectivesWidget_UpdateTextMessage::textExit' has a wrong offset!");
static_assert(offsetof(UMGObjectivesWidget_UpdateTextMessage, textOr) == 0x000030, "Member 'UMGObjectivesWidget_UpdateTextMessage::textOr' has a wrong offset!");

// Function DeadByDaylight.RBTOutlineUpdateStrategy.IsRevealedToLocalPlayer_BP
// 0x0010 (0x0010 - 0x0000)
struct RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP) == 0x000008, "Wrong alignment on RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP");
static_assert(sizeof(RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP) == 0x000010, "Wrong size on RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP");
static_assert(offsetof(RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP, player) == 0x000000, "Member 'RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP::player' has a wrong offset!");
static_assert(offsetof(RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP, ReturnValue) == 0x000008, "Member 'RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.RedStainComponent.DBD_HideRedStain
// 0x0001 (0x0001 - 0x0000)
struct RedStainComponent_DBD_HideRedStain final
{
public:
	bool                                          hideStain;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RedStainComponent_DBD_HideRedStain) == 0x000001, "Wrong alignment on RedStainComponent_DBD_HideRedStain");
static_assert(sizeof(RedStainComponent_DBD_HideRedStain) == 0x000001, "Wrong size on RedStainComponent_DBD_HideRedStain");
static_assert(offsetof(RedStainComponent_DBD_HideRedStain, hideStain) == 0x000000, "Member 'RedStainComponent_DBD_HideRedStain::hideStain' has a wrong offset!");

// Function DeadByDaylight.RedStainComponent.UpdateRedStain
// 0x0008 (0x0008 - 0x0000)
struct RedStainComponent_UpdateRedStain final
{
public:
	bool                                          shouldBeHidden;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         alpha;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RedStainComponent_UpdateRedStain) == 0x000004, "Wrong alignment on RedStainComponent_UpdateRedStain");
static_assert(sizeof(RedStainComponent_UpdateRedStain) == 0x000008, "Wrong size on RedStainComponent_UpdateRedStain");
static_assert(offsetof(RedStainComponent_UpdateRedStain, shouldBeHidden) == 0x000000, "Member 'RedStainComponent_UpdateRedStain::shouldBeHidden' has a wrong offset!");
static_assert(offsetof(RedStainComponent_UpdateRedStain, alpha) == 0x000004, "Member 'RedStainComponent_UpdateRedStain::alpha' has a wrong offset!");

// Function DeadByDaylight.VomitStateComponent.SetObjectState
// 0x0008 (0x0008 - 0x0000)
struct VomitStateComponent_SetObjectState final
{
public:
	class UGameplayTagContainerComponent*         objectState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VomitStateComponent_SetObjectState) == 0x000008, "Wrong alignment on VomitStateComponent_SetObjectState");
static_assert(sizeof(VomitStateComponent_SetObjectState) == 0x000008, "Wrong size on VomitStateComponent_SetObjectState");
static_assert(offsetof(VomitStateComponent_SetObjectState, objectState) == 0x000000, "Member 'VomitStateComponent_SetObjectState::objectState' has a wrong offset!");

// Function DeadByDaylight.VomitStateComponent.SetVomitState
// 0x0001 (0x0001 - 0x0000)
struct VomitStateComponent_SetVomitState final
{
public:
	ELinkedVomitState                             newVomitState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VomitStateComponent_SetVomitState) == 0x000001, "Wrong alignment on VomitStateComponent_SetVomitState");
static_assert(sizeof(VomitStateComponent_SetVomitState) == 0x000001, "Wrong size on VomitStateComponent_SetVomitState");
static_assert(offsetof(VomitStateComponent_SetVomitState, newVomitState) == 0x000000, "Member 'VomitStateComponent_SetVomitState::newVomitState' has a wrong offset!");

// Function DeadByDaylight.VomitStateComponent.getVomitState
// 0x0001 (0x0001 - 0x0000)
struct VomitStateComponent_getVomitState final
{
public:
	ELinkedVomitState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VomitStateComponent_getVomitState) == 0x000001, "Wrong alignment on VomitStateComponent_getVomitState");
static_assert(sizeof(VomitStateComponent_getVomitState) == 0x000001, "Wrong size on VomitStateComponent_getVomitState");
static_assert(offsetof(VomitStateComponent_getVomitState, ReturnValue) == 0x000000, "Member 'VomitStateComponent_getVomitState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.VomitStateComponent.IsVomiting
// 0x0001 (0x0001 - 0x0000)
struct VomitStateComponent_IsVomiting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VomitStateComponent_IsVomiting) == 0x000001, "Wrong alignment on VomitStateComponent_IsVomiting");
static_assert(sizeof(VomitStateComponent_IsVomiting) == 0x000001, "Wrong size on VomitStateComponent_IsVomiting");
static_assert(offsetof(VomitStateComponent_IsVomiting, ReturnValue) == 0x000000, "Member 'VomitStateComponent_IsVomiting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.RootMovie.AddCursorBlockingWidget
// 0x0020 (0x0020 - 0x0000)
struct RootMovie_AddCursorBlockingWidget final
{
public:
	class FString                                 id;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         x;                                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         y;                                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         width;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         height;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_AddCursorBlockingWidget) == 0x000008, "Wrong alignment on RootMovie_AddCursorBlockingWidget");
static_assert(sizeof(RootMovie_AddCursorBlockingWidget) == 0x000020, "Wrong size on RootMovie_AddCursorBlockingWidget");
static_assert(offsetof(RootMovie_AddCursorBlockingWidget, id) == 0x000000, "Member 'RootMovie_AddCursorBlockingWidget::id' has a wrong offset!");
static_assert(offsetof(RootMovie_AddCursorBlockingWidget, x) == 0x000010, "Member 'RootMovie_AddCursorBlockingWidget::x' has a wrong offset!");
static_assert(offsetof(RootMovie_AddCursorBlockingWidget, y) == 0x000014, "Member 'RootMovie_AddCursorBlockingWidget::y' has a wrong offset!");
static_assert(offsetof(RootMovie_AddCursorBlockingWidget, width) == 0x000018, "Member 'RootMovie_AddCursorBlockingWidget::width' has a wrong offset!");
static_assert(offsetof(RootMovie_AddCursorBlockingWidget, height) == 0x00001C, "Member 'RootMovie_AddCursorBlockingWidget::height' has a wrong offset!");

// Function DeadByDaylight.RootMovie.OnAssert
// 0x0018 (0x0018 - 0x0000)
struct RootMovie_OnAssert final
{
public:
	int32                                         type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_OnAssert) == 0x000008, "Wrong alignment on RootMovie_OnAssert");
static_assert(sizeof(RootMovie_OnAssert) == 0x000018, "Wrong size on RootMovie_OnAssert");
static_assert(offsetof(RootMovie_OnAssert, type) == 0x000000, "Member 'RootMovie_OnAssert::type' has a wrong offset!");
static_assert(offsetof(RootMovie_OnAssert, message) == 0x000008, "Member 'RootMovie_OnAssert::message' has a wrong offset!");

// Function DeadByDaylight.RootMovie.OnScreenEnter
// 0x0010 (0x0010 - 0x0000)
struct RootMovie_OnScreenEnter final
{
public:
	class FString                                 screenId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_OnScreenEnter) == 0x000008, "Wrong alignment on RootMovie_OnScreenEnter");
static_assert(sizeof(RootMovie_OnScreenEnter) == 0x000010, "Wrong size on RootMovie_OnScreenEnter");
static_assert(offsetof(RootMovie_OnScreenEnter, screenId) == 0x000000, "Member 'RootMovie_OnScreenEnter::screenId' has a wrong offset!");

// Function DeadByDaylight.RootMovie.OnScreenLeave
// 0x0010 (0x0010 - 0x0000)
struct RootMovie_OnScreenLeave final
{
public:
	class FString                                 screenId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_OnScreenLeave) == 0x000008, "Wrong alignment on RootMovie_OnScreenLeave");
static_assert(sizeof(RootMovie_OnScreenLeave) == 0x000010, "Wrong size on RootMovie_OnScreenLeave");
static_assert(offsetof(RootMovie_OnScreenLeave, screenId) == 0x000000, "Member 'RootMovie_OnScreenLeave::screenId' has a wrong offset!");

// Function DeadByDaylight.RootMovie.OnScreenReady
// 0x0010 (0x0010 - 0x0000)
struct RootMovie_OnScreenReady final
{
public:
	class FString                                 screenId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_OnScreenReady) == 0x000008, "Wrong alignment on RootMovie_OnScreenReady");
static_assert(sizeof(RootMovie_OnScreenReady) == 0x000010, "Wrong size on RootMovie_OnScreenReady");
static_assert(offsetof(RootMovie_OnScreenReady, screenId) == 0x000000, "Member 'RootMovie_OnScreenReady::screenId' has a wrong offset!");

// Function DeadByDaylight.RootMovie.OpenLinkInBrowser
// 0x0010 (0x0010 - 0x0000)
struct RootMovie_OpenLinkInBrowser final
{
public:
	class FString                                 linkAddress;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_OpenLinkInBrowser) == 0x000008, "Wrong alignment on RootMovie_OpenLinkInBrowser");
static_assert(sizeof(RootMovie_OpenLinkInBrowser) == 0x000010, "Wrong size on RootMovie_OpenLinkInBrowser");
static_assert(offsetof(RootMovie_OpenLinkInBrowser, linkAddress) == 0x000000, "Member 'RootMovie_OpenLinkInBrowser::linkAddress' has a wrong offset!");

// Function DeadByDaylight.RootMovie.PlaySound
// 0x0010 (0x0010 - 0x0000)
struct RootMovie_PlaySound final
{
public:
	class FString                                 soundId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_PlaySound) == 0x000008, "Wrong alignment on RootMovie_PlaySound");
static_assert(sizeof(RootMovie_PlaySound) == 0x000010, "Wrong size on RootMovie_PlaySound");
static_assert(offsetof(RootMovie_PlaySound, soundId) == 0x000000, "Member 'RootMovie_PlaySound::soundId' has a wrong offset!");

// Function DeadByDaylight.RootMovie.RegisterScreenControl
// 0x0008 (0x0008 - 0x0000)
struct RootMovie_RegisterScreenControl final
{
public:
	class UGFxObject*                             flashObj;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_RegisterScreenControl) == 0x000008, "Wrong alignment on RootMovie_RegisterScreenControl");
static_assert(sizeof(RootMovie_RegisterScreenControl) == 0x000008, "Wrong size on RootMovie_RegisterScreenControl");
static_assert(offsetof(RootMovie_RegisterScreenControl, flashObj) == 0x000000, "Member 'RootMovie_RegisterScreenControl::flashObj' has a wrong offset!");

// Function DeadByDaylight.RootMovie.RegisterUIControl
// 0x0008 (0x0008 - 0x0000)
struct RootMovie_RegisterUIControl final
{
public:
	class UGFxObject*                             flashObj;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_RegisterUIControl) == 0x000008, "Wrong alignment on RootMovie_RegisterUIControl");
static_assert(sizeof(RootMovie_RegisterUIControl) == 0x000008, "Wrong size on RootMovie_RegisterUIControl");
static_assert(offsetof(RootMovie_RegisterUIControl, flashObj) == 0x000000, "Member 'RootMovie_RegisterUIControl::flashObj' has a wrong offset!");

// Function DeadByDaylight.RootMovie.RegisterView
// 0x0018 (0x0018 - 0x0000)
struct RootMovie_RegisterView final
{
public:
	class FString                                 screenId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             screenObject;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_RegisterView) == 0x000008, "Wrong alignment on RootMovie_RegisterView");
static_assert(sizeof(RootMovie_RegisterView) == 0x000018, "Wrong size on RootMovie_RegisterView");
static_assert(offsetof(RootMovie_RegisterView, screenId) == 0x000000, "Member 'RootMovie_RegisterView::screenId' has a wrong offset!");
static_assert(offsetof(RootMovie_RegisterView, screenObject) == 0x000010, "Member 'RootMovie_RegisterView::screenObject' has a wrong offset!");

// Function DeadByDaylight.RootMovie.RemoveCursorBlockingWidget
// 0x0010 (0x0010 - 0x0000)
struct RootMovie_RemoveCursorBlockingWidget final
{
public:
	class FString                                 id;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_RemoveCursorBlockingWidget) == 0x000008, "Wrong alignment on RootMovie_RemoveCursorBlockingWidget");
static_assert(sizeof(RootMovie_RemoveCursorBlockingWidget) == 0x000010, "Wrong size on RootMovie_RemoveCursorBlockingWidget");
static_assert(offsetof(RootMovie_RemoveCursorBlockingWidget, id) == 0x000000, "Member 'RootMovie_RemoveCursorBlockingWidget::id' has a wrong offset!");

// Function DeadByDaylight.RootMovie.SetCursorAsSticky
// 0x0008 (0x0008 - 0x0000)
struct RootMovie_SetCursorAsSticky final
{
public:
	bool                                          isSticky;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          lockVertical;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          lockHorizontal;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         stickinessOverride;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_SetCursorAsSticky) == 0x000004, "Wrong alignment on RootMovie_SetCursorAsSticky");
static_assert(sizeof(RootMovie_SetCursorAsSticky) == 0x000008, "Wrong size on RootMovie_SetCursorAsSticky");
static_assert(offsetof(RootMovie_SetCursorAsSticky, isSticky) == 0x000000, "Member 'RootMovie_SetCursorAsSticky::isSticky' has a wrong offset!");
static_assert(offsetof(RootMovie_SetCursorAsSticky, lockVertical) == 0x000001, "Member 'RootMovie_SetCursorAsSticky::lockVertical' has a wrong offset!");
static_assert(offsetof(RootMovie_SetCursorAsSticky, lockHorizontal) == 0x000002, "Member 'RootMovie_SetCursorAsSticky::lockHorizontal' has a wrong offset!");
static_assert(offsetof(RootMovie_SetCursorAsSticky, stickinessOverride) == 0x000004, "Member 'RootMovie_SetCursorAsSticky::stickinessOverride' has a wrong offset!");

// Function DeadByDaylight.ScreamComponent.OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct ScreamComponent_OnDamageStateChanged final
{
public:
	ECamperDamageState                            oldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            newDamageState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreamComponent_OnDamageStateChanged) == 0x000001, "Wrong alignment on ScreamComponent_OnDamageStateChanged");
static_assert(sizeof(ScreamComponent_OnDamageStateChanged) == 0x000002, "Wrong size on ScreamComponent_OnDamageStateChanged");
static_assert(offsetof(ScreamComponent_OnDamageStateChanged, oldDamageState) == 0x000000, "Member 'ScreamComponent_OnDamageStateChanged::oldDamageState' has a wrong offset!");
static_assert(offsetof(ScreamComponent_OnDamageStateChanged, newDamageState) == 0x000001, "Member 'ScreamComponent_OnDamageStateChanged::newDamageState' has a wrong offset!");

// Function DeadByDaylight.ScreamComponent.TriggerScreamEventsAndAndAnimationIfPossible
// 0x0038 (0x0038 - 0x0000)
struct ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible final
{
public:
	bool                                          fireLoudNoiseEvent;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMontagePlaybackDefinition             montageDefinition;                                 // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	float                                         audibleRange;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible) == 0x000008, "Wrong alignment on ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible");
static_assert(sizeof(ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible) == 0x000038, "Wrong size on ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible");
static_assert(offsetof(ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible, fireLoudNoiseEvent) == 0x000000, "Member 'ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible::fireLoudNoiseEvent' has a wrong offset!");
static_assert(offsetof(ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible, montageDefinition) == 0x000008, "Member 'ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible::montageDefinition' has a wrong offset!");
static_assert(offsetof(ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible, audibleRange) == 0x000030, "Member 'ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible::audibleRange' has a wrong offset!");
static_assert(offsetof(ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible, ReturnValue) == 0x000034, "Member 'ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ScreamComponent.TriggerScreamEventsIfPossible
// 0x000C (0x000C - 0x0000)
struct ScreamComponent_TriggerScreamEventsIfPossible final
{
public:
	bool                                          fireLoudNoiseEvent;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         audibleRange;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScreamComponent_TriggerScreamEventsIfPossible) == 0x000004, "Wrong alignment on ScreamComponent_TriggerScreamEventsIfPossible");
static_assert(sizeof(ScreamComponent_TriggerScreamEventsIfPossible) == 0x00000C, "Wrong size on ScreamComponent_TriggerScreamEventsIfPossible");
static_assert(offsetof(ScreamComponent_TriggerScreamEventsIfPossible, fireLoudNoiseEvent) == 0x000000, "Member 'ScreamComponent_TriggerScreamEventsIfPossible::fireLoudNoiseEvent' has a wrong offset!");
static_assert(offsetof(ScreamComponent_TriggerScreamEventsIfPossible, audibleRange) == 0x000004, "Member 'ScreamComponent_TriggerScreamEventsIfPossible::audibleRange' has a wrong offset!");
static_assert(offsetof(ScreamComponent_TriggerScreamEventsIfPossible, ReturnValue) == 0x000008, "Member 'ScreamComponent_TriggerScreamEventsIfPossible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ScreamComponent.CanScream
// 0x0001 (0x0001 - 0x0000)
struct ScreamComponent_CanScream final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreamComponent_CanScream) == 0x000001, "Wrong alignment on ScreamComponent_CanScream");
static_assert(sizeof(ScreamComponent_CanScream) == 0x000001, "Wrong size on ScreamComponent_CanScream");
static_assert(offsetof(ScreamComponent_CanScream, ReturnValue) == 0x000000, "Member 'ScreamComponent_CanScream::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PostBatchItems
// 0x0010 (0x0010 - 0x0000)
struct ScreenshotToolHook_PostBatchItems final
{
public:
	TArray<struct FCharacterToolItemData>         items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PostBatchItems) == 0x000008, "Wrong alignment on ScreenshotToolHook_PostBatchItems");
static_assert(sizeof(ScreenshotToolHook_PostBatchItems) == 0x000010, "Wrong size on ScreenshotToolHook_PostBatchItems");
static_assert(offsetof(ScreenshotToolHook_PostBatchItems, items) == 0x000000, "Member 'ScreenshotToolHook_PostBatchItems::items' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PostSpawnCharacter
// 0x0008 (0x0008 - 0x0000)
struct ScreenshotToolHook_PostSpawnCharacter final
{
public:
	class ADBDMenuPlayer*                         character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PostSpawnCharacter) == 0x000008, "Wrong alignment on ScreenshotToolHook_PostSpawnCharacter");
static_assert(sizeof(ScreenshotToolHook_PostSpawnCharacter) == 0x000008, "Wrong size on ScreenshotToolHook_PostSpawnCharacter");
static_assert(offsetof(ScreenshotToolHook_PostSpawnCharacter, character) == 0x000000, "Member 'ScreenshotToolHook_PostSpawnCharacter::character' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PostSpawnCharm
// 0x0008 (0x0008 - 0x0000)
struct ScreenshotToolHook_PostSpawnCharm final
{
public:
	class ACharm*                                 charm;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PostSpawnCharm) == 0x000008, "Wrong alignment on ScreenshotToolHook_PostSpawnCharm");
static_assert(sizeof(ScreenshotToolHook_PostSpawnCharm) == 0x000008, "Wrong size on ScreenshotToolHook_PostSpawnCharm");
static_assert(offsetof(ScreenshotToolHook_PostSpawnCharm, charm) == 0x000000, "Member 'ScreenshotToolHook_PostSpawnCharm::charm' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PostStateChanged
// 0x0002 (0x0002 - 0x0000)
struct ScreenshotToolHook_PostStateChanged final
{
public:
	EScreenshotToolState                          previousState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScreenshotToolState                          currentState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PostStateChanged) == 0x000001, "Wrong alignment on ScreenshotToolHook_PostStateChanged");
static_assert(sizeof(ScreenshotToolHook_PostStateChanged) == 0x000002, "Wrong size on ScreenshotToolHook_PostStateChanged");
static_assert(offsetof(ScreenshotToolHook_PostStateChanged, previousState) == 0x000000, "Member 'ScreenshotToolHook_PostStateChanged::previousState' has a wrong offset!");
static_assert(offsetof(ScreenshotToolHook_PostStateChanged, currentState) == 0x000001, "Member 'ScreenshotToolHook_PostStateChanged::currentState' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PostTakeItemScreenshot
// 0x0014 (0x0014 - 0x0000)
struct ScreenshotToolHook_PostTakeItemScreenshot final
{
public:
	struct FCharacterToolItemData                 item;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          success;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScreenshotToolHook_PostTakeItemScreenshot) == 0x000004, "Wrong alignment on ScreenshotToolHook_PostTakeItemScreenshot");
static_assert(sizeof(ScreenshotToolHook_PostTakeItemScreenshot) == 0x000014, "Wrong size on ScreenshotToolHook_PostTakeItemScreenshot");
static_assert(offsetof(ScreenshotToolHook_PostTakeItemScreenshot, item) == 0x000000, "Member 'ScreenshotToolHook_PostTakeItemScreenshot::item' has a wrong offset!");
static_assert(offsetof(ScreenshotToolHook_PostTakeItemScreenshot, success) == 0x000010, "Member 'ScreenshotToolHook_PostTakeItemScreenshot::success' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PostUpdateCharacter
// 0x0008 (0x0008 - 0x0000)
struct ScreenshotToolHook_PostUpdateCharacter final
{
public:
	class ADBDMenuPlayer*                         character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PostUpdateCharacter) == 0x000008, "Wrong alignment on ScreenshotToolHook_PostUpdateCharacter");
static_assert(sizeof(ScreenshotToolHook_PostUpdateCharacter) == 0x000008, "Wrong size on ScreenshotToolHook_PostUpdateCharacter");
static_assert(offsetof(ScreenshotToolHook_PostUpdateCharacter, character) == 0x000000, "Member 'ScreenshotToolHook_PostUpdateCharacter::character' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PreDestroyCharacter
// 0x0008 (0x0008 - 0x0000)
struct ScreenshotToolHook_PreDestroyCharacter final
{
public:
	class ADBDMenuPlayer*                         character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PreDestroyCharacter) == 0x000008, "Wrong alignment on ScreenshotToolHook_PreDestroyCharacter");
static_assert(sizeof(ScreenshotToolHook_PreDestroyCharacter) == 0x000008, "Wrong size on ScreenshotToolHook_PreDestroyCharacter");
static_assert(offsetof(ScreenshotToolHook_PreDestroyCharacter, character) == 0x000000, "Member 'ScreenshotToolHook_PreDestroyCharacter::character' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PreDestroyCharm
// 0x0008 (0x0008 - 0x0000)
struct ScreenshotToolHook_PreDestroyCharm final
{
public:
	class ACharm*                                 charm;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PreDestroyCharm) == 0x000008, "Wrong alignment on ScreenshotToolHook_PreDestroyCharm");
static_assert(sizeof(ScreenshotToolHook_PreDestroyCharm) == 0x000008, "Wrong size on ScreenshotToolHook_PreDestroyCharm");
static_assert(offsetof(ScreenshotToolHook_PreDestroyCharm, charm) == 0x000000, "Member 'ScreenshotToolHook_PreDestroyCharm::charm' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PreSpawnCharacter
// 0x0238 (0x0238 - 0x0000)
struct ScreenshotToolHook_PreSpawnCharacter final
{
public:
	struct FCharacterDescription                  description;                                       // 0x0000(0x0230)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCharacterToolSpawnParameters          spawnParams;                                       // 0x0230(0x0003)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_233[0x5];                                      // 0x0233(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScreenshotToolHook_PreSpawnCharacter) == 0x000008, "Wrong alignment on ScreenshotToolHook_PreSpawnCharacter");
static_assert(sizeof(ScreenshotToolHook_PreSpawnCharacter) == 0x000238, "Wrong size on ScreenshotToolHook_PreSpawnCharacter");
static_assert(offsetof(ScreenshotToolHook_PreSpawnCharacter, description) == 0x000000, "Member 'ScreenshotToolHook_PreSpawnCharacter::description' has a wrong offset!");
static_assert(offsetof(ScreenshotToolHook_PreSpawnCharacter, spawnParams) == 0x000230, "Member 'ScreenshotToolHook_PreSpawnCharacter::spawnParams' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PreSpawnCharm
// 0x0368 (0x0368 - 0x0000)
struct ScreenshotToolHook_PreSpawnCharm final
{
public:
	struct FCustomizationItemData                 item;                                              // 0x0000(0x0368)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PreSpawnCharm) == 0x000008, "Wrong alignment on ScreenshotToolHook_PreSpawnCharm");
static_assert(sizeof(ScreenshotToolHook_PreSpawnCharm) == 0x000368, "Wrong size on ScreenshotToolHook_PreSpawnCharm");
static_assert(offsetof(ScreenshotToolHook_PreSpawnCharm, item) == 0x000000, "Member 'ScreenshotToolHook_PreSpawnCharm::item' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PreTakeItemScreenshot
// 0x0010 (0x0010 - 0x0000)
struct ScreenshotToolHook_PreTakeItemScreenshot final
{
public:
	struct FCharacterToolItemData                 item;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PreTakeItemScreenshot) == 0x000004, "Wrong alignment on ScreenshotToolHook_PreTakeItemScreenshot");
static_assert(sizeof(ScreenshotToolHook_PreTakeItemScreenshot) == 0x000010, "Wrong size on ScreenshotToolHook_PreTakeItemScreenshot");
static_assert(offsetof(ScreenshotToolHook_PreTakeItemScreenshot, item) == 0x000000, "Member 'ScreenshotToolHook_PreTakeItemScreenshot::item' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.ScreenshotBeginPlay
// 0x0001 (0x0001 - 0x0000)
struct ScreenshotToolHook_ScreenshotBeginPlay final
{
public:
	bool                                          isPIE;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_ScreenshotBeginPlay) == 0x000001, "Wrong alignment on ScreenshotToolHook_ScreenshotBeginPlay");
static_assert(sizeof(ScreenshotToolHook_ScreenshotBeginPlay) == 0x000001, "Wrong size on ScreenshotToolHook_ScreenshotBeginPlay");
static_assert(offsetof(ScreenshotToolHook_ScreenshotBeginPlay, isPIE) == 0x000000, "Member 'ScreenshotToolHook_ScreenshotBeginPlay::isPIE' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.IsPIEOnly
// 0x0001 (0x0001 - 0x0000)
struct ScreenshotToolHook_IsPIEOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_IsPIEOnly) == 0x000001, "Wrong alignment on ScreenshotToolHook_IsPIEOnly");
static_assert(sizeof(ScreenshotToolHook_IsPIEOnly) == 0x000001, "Wrong size on ScreenshotToolHook_IsPIEOnly");
static_assert(offsetof(ScreenshotToolHook_IsPIEOnly, ReturnValue) == 0x000000, "Member 'ScreenshotToolHook_IsPIEOnly::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Searchable.Authority_SpawnObject
// 0x0010 (0x0010 - 0x0000)
struct Searchable_Authority_SpawnObject final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACollectable*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Searchable_Authority_SpawnObject) == 0x000008, "Wrong alignment on Searchable_Authority_SpawnObject");
static_assert(sizeof(Searchable_Authority_SpawnObject) == 0x000010, "Wrong size on Searchable_Authority_SpawnObject");
static_assert(offsetof(Searchable_Authority_SpawnObject, player) == 0x000000, "Member 'Searchable_Authority_SpawnObject::player' has a wrong offset!");
static_assert(offsetof(Searchable_Authority_SpawnObject, ReturnValue) == 0x000008, "Member 'Searchable_Authority_SpawnObject::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Searchable.SetHasBeenSearched
// 0x0001 (0x0001 - 0x0000)
struct Searchable_SetHasBeenSearched final
{
public:
	bool                                          newHasBeenSearched;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Searchable_SetHasBeenSearched) == 0x000001, "Wrong alignment on Searchable_SetHasBeenSearched");
static_assert(sizeof(Searchable_SetHasBeenSearched) == 0x000001, "Wrong size on Searchable_SetHasBeenSearched");
static_assert(offsetof(Searchable_SetHasBeenSearched, newHasBeenSearched) == 0x000000, "Member 'Searchable_SetHasBeenSearched::newHasBeenSearched' has a wrong offset!");

// Function DeadByDaylight.Searchable.ContainsSpawnedItem
// 0x0001 (0x0001 - 0x0000)
struct Searchable_ContainsSpawnedItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Searchable_ContainsSpawnedItem) == 0x000001, "Wrong alignment on Searchable_ContainsSpawnedItem");
static_assert(sizeof(Searchable_ContainsSpawnedItem) == 0x000001, "Wrong size on Searchable_ContainsSpawnedItem");
static_assert(offsetof(Searchable_ContainsSpawnedItem, ReturnValue) == 0x000000, "Member 'Searchable_ContainsSpawnedItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Searchable.GetInteractorPrimitiveComponent
// 0x0008 (0x0008 - 0x0000)
struct Searchable_GetInteractorPrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Searchable_GetInteractorPrimitiveComponent) == 0x000008, "Wrong alignment on Searchable_GetInteractorPrimitiveComponent");
static_assert(sizeof(Searchable_GetInteractorPrimitiveComponent) == 0x000008, "Wrong size on Searchable_GetInteractorPrimitiveComponent");
static_assert(offsetof(Searchable_GetInteractorPrimitiveComponent, ReturnValue) == 0x000000, "Member 'Searchable_GetInteractorPrimitiveComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Searchable.HasBeenSearched
// 0x0001 (0x0001 - 0x0000)
struct Searchable_HasBeenSearched final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Searchable_HasBeenSearched) == 0x000001, "Wrong alignment on Searchable_HasBeenSearched");
static_assert(sizeof(Searchable_HasBeenSearched) == 0x000001, "Wrong size on Searchable_HasBeenSearched");
static_assert(offsetof(Searchable_HasBeenSearched, ReturnValue) == 0x000000, "Member 'Searchable_HasBeenSearched::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TileSpawnPoint.SetActivated
// 0x0001 (0x0001 - 0x0000)
struct TileSpawnPoint_SetActivated final
{
public:
	bool                                          activated;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TileSpawnPoint_SetActivated) == 0x000001, "Wrong alignment on TileSpawnPoint_SetActivated");
static_assert(sizeof(TileSpawnPoint_SetActivated) == 0x000001, "Wrong size on TileSpawnPoint_SetActivated");
static_assert(offsetof(TileSpawnPoint_SetActivated, activated) == 0x000000, "Member 'TileSpawnPoint_SetActivated::activated' has a wrong offset!");

// Function DeadByDaylight.TileSpawnPoint.GetSpawnedObject
// 0x0008 (0x0008 - 0x0000)
struct TileSpawnPoint_GetSpawnedObject final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TileSpawnPoint_GetSpawnedObject) == 0x000008, "Wrong alignment on TileSpawnPoint_GetSpawnedObject");
static_assert(sizeof(TileSpawnPoint_GetSpawnedObject) == 0x000008, "Wrong size on TileSpawnPoint_GetSpawnedObject");
static_assert(offsetof(TileSpawnPoint_GetSpawnedObject, ReturnValue) == 0x000000, "Member 'TileSpawnPoint_GetSpawnedObject::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TileSpawnPoint.IsActivated
// 0x0001 (0x0001 - 0x0000)
struct TileSpawnPoint_IsActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TileSpawnPoint_IsActivated) == 0x000001, "Wrong alignment on TileSpawnPoint_IsActivated");
static_assert(sizeof(TileSpawnPoint_IsActivated) == 0x000001, "Wrong size on TileSpawnPoint_IsActivated");
static_assert(offsetof(TileSpawnPoint_IsActivated, ReturnValue) == 0x000000, "Member 'TileSpawnPoint_IsActivated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGFogWidget.OnCurrencyTooltipTriggered
// 0x0020 (0x0020 - 0x0000)
struct UMGFogWidget_OnCurrencyTooltipTriggered final
{
public:
	struct FTooltipPressedData                    tooltipPressedData;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ECurrencyType                                 currencyType;                                      // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGFogWidget_OnCurrencyTooltipTriggered) == 0x000008, "Wrong alignment on UMGFogWidget_OnCurrencyTooltipTriggered");
static_assert(sizeof(UMGFogWidget_OnCurrencyTooltipTriggered) == 0x000020, "Wrong size on UMGFogWidget_OnCurrencyTooltipTriggered");
static_assert(offsetof(UMGFogWidget_OnCurrencyTooltipTriggered, tooltipPressedData) == 0x000000, "Member 'UMGFogWidget_OnCurrencyTooltipTriggered::tooltipPressedData' has a wrong offset!");
static_assert(offsetof(UMGFogWidget_OnCurrencyTooltipTriggered, currencyType) == 0x000018, "Member 'UMGFogWidget_OnCurrencyTooltipTriggered::currencyType' has a wrong offset!");

// Function DeadByDaylight.UMGFogWidget.OnLevelTooltipTriggered
// 0x0018 (0x0018 - 0x0000)
struct UMGFogWidget_OnLevelTooltipTriggered final
{
public:
	struct FTooltipPressedData                    tooltipPressedData;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGFogWidget_OnLevelTooltipTriggered) == 0x000008, "Wrong alignment on UMGFogWidget_OnLevelTooltipTriggered");
static_assert(sizeof(UMGFogWidget_OnLevelTooltipTriggered) == 0x000018, "Wrong size on UMGFogWidget_OnLevelTooltipTriggered");
static_assert(offsetof(UMGFogWidget_OnLevelTooltipTriggered, tooltipPressedData) == 0x000000, "Member 'UMGFogWidget_OnLevelTooltipTriggered::tooltipPressedData' has a wrong offset!");

// Function DeadByDaylight.UMGFogWidget.OnRankTooltipTriggered
// 0x0018 (0x0018 - 0x0000)
struct UMGFogWidget_OnRankTooltipTriggered final
{
public:
	struct FTooltipPressedData                    tooltipPressedData;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGFogWidget_OnRankTooltipTriggered) == 0x000008, "Wrong alignment on UMGFogWidget_OnRankTooltipTriggered");
static_assert(sizeof(UMGFogWidget_OnRankTooltipTriggered) == 0x000018, "Wrong size on UMGFogWidget_OnRankTooltipTriggered");
static_assert(offsetof(UMGFogWidget_OnRankTooltipTriggered, tooltipPressedData) == 0x000000, "Member 'UMGFogWidget_OnRankTooltipTriggered::tooltipPressedData' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.CanSkillCheckTypeGrantScore
// 0x0002 (0x0002 - 0x0000)
struct SkillCheck_CanSkillCheckTypeGrantScore final
{
public:
	ESkillCheckCustomType                         type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheck_CanSkillCheckTypeGrantScore) == 0x000001, "Wrong alignment on SkillCheck_CanSkillCheckTypeGrantScore");
static_assert(sizeof(SkillCheck_CanSkillCheckTypeGrantScore) == 0x000002, "Wrong size on SkillCheck_CanSkillCheckTypeGrantScore");
static_assert(offsetof(SkillCheck_CanSkillCheckTypeGrantScore, type) == 0x000000, "Member 'SkillCheck_CanSkillCheckTypeGrantScore::type' has a wrong offset!");
static_assert(offsetof(SkillCheck_CanSkillCheckTypeGrantScore, ReturnValue) == 0x000001, "Member 'SkillCheck_CanSkillCheckTypeGrantScore::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.Multicast_ActivateSkillCheck
// 0x0038 (0x0038 - 0x0000)
struct SkillCheck_Multicast_ActivateSkillCheck final
{
public:
	class UChargeableInteractionDefinition*       interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         skillCheckCustomType;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillCheckDefinition                  definition;                                        // 0x000C(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          executeOnlyOnNotControlled;                        // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkillCheck_Multicast_ActivateSkillCheck) == 0x000008, "Wrong alignment on SkillCheck_Multicast_ActivateSkillCheck");
static_assert(sizeof(SkillCheck_Multicast_ActivateSkillCheck) == 0x000038, "Wrong size on SkillCheck_Multicast_ActivateSkillCheck");
static_assert(offsetof(SkillCheck_Multicast_ActivateSkillCheck, interaction) == 0x000000, "Member 'SkillCheck_Multicast_ActivateSkillCheck::interaction' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_ActivateSkillCheck, skillCheckCustomType) == 0x000008, "Member 'SkillCheck_Multicast_ActivateSkillCheck::skillCheckCustomType' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_ActivateSkillCheck, definition) == 0x00000C, "Member 'SkillCheck_Multicast_ActivateSkillCheck::definition' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_ActivateSkillCheck, executeOnlyOnNotControlled) == 0x000034, "Member 'SkillCheck_Multicast_ActivateSkillCheck::executeOnlyOnNotControlled' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.Multicast_OnTriggerContinuousCustomSkillCheck
// 0x0038 (0x0038 - 0x0000)
struct SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck final
{
public:
	class UChargeableInteractionDefinition*       currentInteraction;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         skillCheckCustomType;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillCheckDefinition                  definition;                                        // 0x000C(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck) == 0x000008, "Wrong alignment on SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck");
static_assert(sizeof(SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck) == 0x000038, "Wrong size on SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck, currentInteraction) == 0x000000, "Member 'SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck::currentInteraction' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck, skillCheckCustomType) == 0x000008, "Member 'SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck::skillCheckCustomType' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck, definition) == 0x00000C, "Member 'SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck::definition' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.Multicast_OnTriggerCustomSkillCheck
// 0x0058 (0x0058 - 0x0000)
struct SkillCheck_Multicast_OnTriggerCustomSkillCheck final
{
public:
	class UChargeableInteractionDefinition*       currentInteraction;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         skillCheckCustomType;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 id;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 salt;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillCheckDefinition                  definition;                                        // 0x0030(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheck_Multicast_OnTriggerCustomSkillCheck) == 0x000008, "Wrong alignment on SkillCheck_Multicast_OnTriggerCustomSkillCheck");
static_assert(sizeof(SkillCheck_Multicast_OnTriggerCustomSkillCheck) == 0x000058, "Wrong size on SkillCheck_Multicast_OnTriggerCustomSkillCheck");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerCustomSkillCheck, currentInteraction) == 0x000000, "Member 'SkillCheck_Multicast_OnTriggerCustomSkillCheck::currentInteraction' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerCustomSkillCheck, skillCheckCustomType) == 0x000008, "Member 'SkillCheck_Multicast_OnTriggerCustomSkillCheck::skillCheckCustomType' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerCustomSkillCheck, id) == 0x000010, "Member 'SkillCheck_Multicast_OnTriggerCustomSkillCheck::id' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerCustomSkillCheck, salt) == 0x000020, "Member 'SkillCheck_Multicast_OnTriggerCustomSkillCheck::salt' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerCustomSkillCheck, definition) == 0x000030, "Member 'SkillCheck_Multicast_OnTriggerCustomSkillCheck::definition' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.Multicast_SkillCheckResponse
// 0x0028 (0x0028 - 0x0000)
struct SkillCheck_Multicast_SkillCheckResponse final
{
public:
	struct FSkillCheckResponse                    skillCheckResponse;                                // 0x0000(0x0020)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          executeOnlyOnNotControlled;                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkillCheck_Multicast_SkillCheckResponse) == 0x000008, "Wrong alignment on SkillCheck_Multicast_SkillCheckResponse");
static_assert(sizeof(SkillCheck_Multicast_SkillCheckResponse) == 0x000028, "Wrong size on SkillCheck_Multicast_SkillCheckResponse");
static_assert(offsetof(SkillCheck_Multicast_SkillCheckResponse, skillCheckResponse) == 0x000000, "Member 'SkillCheck_Multicast_SkillCheckResponse::skillCheckResponse' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_SkillCheckResponse, executeOnlyOnNotControlled) == 0x000020, "Member 'SkillCheck_Multicast_SkillCheckResponse::executeOnlyOnNotControlled' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.OnSkillCheckFailureTrigger
// 0x0003 (0x0003 - 0x0000)
struct SkillCheck_OnSkillCheckFailureTrigger final
{
public:
	bool                                          hadInput;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          insane;                                            // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         skillCheckCustomType;                              // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheck_OnSkillCheckFailureTrigger) == 0x000001, "Wrong alignment on SkillCheck_OnSkillCheckFailureTrigger");
static_assert(sizeof(SkillCheck_OnSkillCheckFailureTrigger) == 0x000003, "Wrong size on SkillCheck_OnSkillCheckFailureTrigger");
static_assert(offsetof(SkillCheck_OnSkillCheckFailureTrigger, hadInput) == 0x000000, "Member 'SkillCheck_OnSkillCheckFailureTrigger::hadInput' has a wrong offset!");
static_assert(offsetof(SkillCheck_OnSkillCheckFailureTrigger, insane) == 0x000001, "Member 'SkillCheck_OnSkillCheckFailureTrigger::insane' has a wrong offset!");
static_assert(offsetof(SkillCheck_OnSkillCheckFailureTrigger, skillCheckCustomType) == 0x000002, "Member 'SkillCheck_OnSkillCheckFailureTrigger::skillCheckCustomType' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.OnSkillCheckSuccessTrigger
// 0x0004 (0x0004 - 0x0000)
struct SkillCheck_OnSkillCheckSuccessTrigger final
{
public:
	bool                                          bonus;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          insane;                                            // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         skillCheckCustomType;                              // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          failedCountedAsGood;                               // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheck_OnSkillCheckSuccessTrigger) == 0x000001, "Wrong alignment on SkillCheck_OnSkillCheckSuccessTrigger");
static_assert(sizeof(SkillCheck_OnSkillCheckSuccessTrigger) == 0x000004, "Wrong size on SkillCheck_OnSkillCheckSuccessTrigger");
static_assert(offsetof(SkillCheck_OnSkillCheckSuccessTrigger, bonus) == 0x000000, "Member 'SkillCheck_OnSkillCheckSuccessTrigger::bonus' has a wrong offset!");
static_assert(offsetof(SkillCheck_OnSkillCheckSuccessTrigger, insane) == 0x000001, "Member 'SkillCheck_OnSkillCheckSuccessTrigger::insane' has a wrong offset!");
static_assert(offsetof(SkillCheck_OnSkillCheckSuccessTrigger, skillCheckCustomType) == 0x000002, "Member 'SkillCheck_OnSkillCheckSuccessTrigger::skillCheckCustomType' has a wrong offset!");
static_assert(offsetof(SkillCheck_OnSkillCheckSuccessTrigger, failedCountedAsGood) == 0x000003, "Member 'SkillCheck_OnSkillCheckSuccessTrigger::failedCountedAsGood' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.Server_ActivateSkillCheck
// 0x0038 (0x0038 - 0x0000)
struct SkillCheck_Server_ActivateSkillCheck final
{
public:
	class UChargeableInteractionDefinition*       interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         skillCheckCustomType;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillCheckDefinition                  definition;                                        // 0x000C(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkillCheck_Server_ActivateSkillCheck) == 0x000008, "Wrong alignment on SkillCheck_Server_ActivateSkillCheck");
static_assert(sizeof(SkillCheck_Server_ActivateSkillCheck) == 0x000038, "Wrong size on SkillCheck_Server_ActivateSkillCheck");
static_assert(offsetof(SkillCheck_Server_ActivateSkillCheck, interaction) == 0x000000, "Member 'SkillCheck_Server_ActivateSkillCheck::interaction' has a wrong offset!");
static_assert(offsetof(SkillCheck_Server_ActivateSkillCheck, skillCheckCustomType) == 0x000008, "Member 'SkillCheck_Server_ActivateSkillCheck::skillCheckCustomType' has a wrong offset!");
static_assert(offsetof(SkillCheck_Server_ActivateSkillCheck, definition) == 0x00000C, "Member 'SkillCheck_Server_ActivateSkillCheck::definition' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.Server_OnSkillCheckFailure
// 0x0020 (0x0020 - 0x0000)
struct SkillCheck_Server_OnSkillCheckFailure final
{
public:
	struct FSkillCheckResponse                    skillCheckResponse;                                // 0x0000(0x0020)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheck_Server_OnSkillCheckFailure) == 0x000008, "Wrong alignment on SkillCheck_Server_OnSkillCheckFailure");
static_assert(sizeof(SkillCheck_Server_OnSkillCheckFailure) == 0x000020, "Wrong size on SkillCheck_Server_OnSkillCheckFailure");
static_assert(offsetof(SkillCheck_Server_OnSkillCheckFailure, skillCheckResponse) == 0x000000, "Member 'SkillCheck_Server_OnSkillCheckFailure::skillCheckResponse' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.Server_OnSkillCheckSuccess
// 0x0020 (0x0020 - 0x0000)
struct SkillCheck_Server_OnSkillCheckSuccess final
{
public:
	struct FSkillCheckResponse                    skillCheckResponse;                                // 0x0000(0x0020)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheck_Server_OnSkillCheckSuccess) == 0x000008, "Wrong alignment on SkillCheck_Server_OnSkillCheckSuccess");
static_assert(sizeof(SkillCheck_Server_OnSkillCheckSuccess) == 0x000020, "Wrong size on SkillCheck_Server_OnSkillCheckSuccess");
static_assert(offsetof(SkillCheck_Server_OnSkillCheckSuccess, skillCheckResponse) == 0x000000, "Member 'SkillCheck_Server_OnSkillCheckSuccess::skillCheckResponse' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.ShouldShowWarning
// 0x0001 (0x0001 - 0x0000)
struct SkillCheck_ShouldShowWarning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheck_ShouldShowWarning) == 0x000001, "Wrong alignment on SkillCheck_ShouldShowWarning");
static_assert(sizeof(SkillCheck_ShouldShowWarning) == 0x000001, "Wrong size on SkillCheck_ShouldShowWarning");
static_assert(offsetof(SkillCheck_ShouldShowWarning, ReturnValue) == 0x000000, "Member 'SkillCheck_ShouldShowWarning::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.IsDisplayed
// 0x0001 (0x0001 - 0x0000)
struct SkillCheck_IsDisplayed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheck_IsDisplayed) == 0x000001, "Wrong alignment on SkillCheck_IsDisplayed");
static_assert(sizeof(SkillCheck_IsDisplayed) == 0x000001, "Wrong size on SkillCheck_IsDisplayed");
static_assert(offsetof(SkillCheck_IsDisplayed, ReturnValue) == 0x000000, "Member 'SkillCheck_IsDisplayed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.IsHexSkillCheck
// 0x0010 (0x0010 - 0x0000)
struct SkillCheck_IsHexSkillCheck final
{
public:
	class ADBDPlayer*                             dbdPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkillCheck_IsHexSkillCheck) == 0x000008, "Wrong alignment on SkillCheck_IsHexSkillCheck");
static_assert(sizeof(SkillCheck_IsHexSkillCheck) == 0x000010, "Wrong size on SkillCheck_IsHexSkillCheck");
static_assert(offsetof(SkillCheck_IsHexSkillCheck, dbdPlayer) == 0x000000, "Member 'SkillCheck_IsHexSkillCheck::dbdPlayer' has a wrong offset!");
static_assert(offsetof(SkillCheck_IsHexSkillCheck, ReturnValue) == 0x000008, "Member 'SkillCheck_IsHexSkillCheck::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.IsOffCenterSkillCheck
// 0x0001 (0x0001 - 0x0000)
struct SkillCheck_IsOffCenterSkillCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheck_IsOffCenterSkillCheck) == 0x000001, "Wrong alignment on SkillCheck_IsOffCenterSkillCheck");
static_assert(sizeof(SkillCheck_IsOffCenterSkillCheck) == 0x000001, "Wrong size on SkillCheck_IsOffCenterSkillCheck");
static_assert(offsetof(SkillCheck_IsOffCenterSkillCheck, ReturnValue) == 0x000000, "Member 'SkillCheck_IsOffCenterSkillCheck::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlashableActivationSourceCollection.AddSource
// 0x0008 (0x0008 - 0x0000)
struct SlashableActivationSourceCollection_AddSource final
{
public:
	class UObject*                                source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlashableActivationSourceCollection_AddSource) == 0x000008, "Wrong alignment on SlashableActivationSourceCollection_AddSource");
static_assert(sizeof(SlashableActivationSourceCollection_AddSource) == 0x000008, "Wrong size on SlashableActivationSourceCollection_AddSource");
static_assert(offsetof(SlashableActivationSourceCollection_AddSource, source) == 0x000000, "Member 'SlashableActivationSourceCollection_AddSource::source' has a wrong offset!");

// Function DeadByDaylight.SlashableActivationSourceCollection.ForceActivate
// 0x0008 (0x0008 - 0x0000)
struct SlashableActivationSourceCollection_ForceActivate final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlashableActivationSourceCollection_ForceActivate) == 0x000008, "Wrong alignment on SlashableActivationSourceCollection_ForceActivate");
static_assert(sizeof(SlashableActivationSourceCollection_ForceActivate) == 0x000008, "Wrong size on SlashableActivationSourceCollection_ForceActivate");
static_assert(offsetof(SlashableActivationSourceCollection_ForceActivate, worldContextObject) == 0x000000, "Member 'SlashableActivationSourceCollection_ForceActivate::worldContextObject' has a wrong offset!");

// Function DeadByDaylight.SlashableActivationSourceCollection.RemoveSource
// 0x0008 (0x0008 - 0x0000)
struct SlashableActivationSourceCollection_RemoveSource final
{
public:
	class UObject*                                source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlashableActivationSourceCollection_RemoveSource) == 0x000008, "Wrong alignment on SlashableActivationSourceCollection_RemoveSource");
static_assert(sizeof(SlashableActivationSourceCollection_RemoveSource) == 0x000008, "Wrong size on SlashableActivationSourceCollection_RemoveSource");
static_assert(offsetof(SlashableActivationSourceCollection_RemoveSource, source) == 0x000000, "Member 'SlashableActivationSourceCollection_RemoveSource::source' has a wrong offset!");

// Function DeadByDaylight.SlasherAnimInstance.SetIsCrouched
// 0x0001 (0x0001 - 0x0000)
struct SlasherAnimInstance_SetIsCrouched final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherAnimInstance_SetIsCrouched) == 0x000001, "Wrong alignment on SlasherAnimInstance_SetIsCrouched");
static_assert(sizeof(SlasherAnimInstance_SetIsCrouched) == 0x000001, "Wrong size on SlasherAnimInstance_SetIsCrouched");
static_assert(offsetof(SlasherAnimInstance_SetIsCrouched, value) == 0x000000, "Member 'SlasherAnimInstance_SetIsCrouched::value' has a wrong offset!");

// Function DeadByDaylight.SlasherMovementComponent.Client_Debug_SetKillerMaxSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct SlasherMovementComponent_Client_Debug_SetKillerMaxSpeedMultiplier final
{
public:
	float                                         maxSpeedMultiplier;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherMovementComponent_Client_Debug_SetKillerMaxSpeedMultiplier) == 0x000004, "Wrong alignment on SlasherMovementComponent_Client_Debug_SetKillerMaxSpeedMultiplier");
static_assert(sizeof(SlasherMovementComponent_Client_Debug_SetKillerMaxSpeedMultiplier) == 0x000004, "Wrong size on SlasherMovementComponent_Client_Debug_SetKillerMaxSpeedMultiplier");
static_assert(offsetof(SlasherMovementComponent_Client_Debug_SetKillerMaxSpeedMultiplier, maxSpeedMultiplier) == 0x000000, "Member 'SlasherMovementComponent_Client_Debug_SetKillerMaxSpeedMultiplier::maxSpeedMultiplier' has a wrong offset!");

// Function DeadByDaylight.SlasherMovementComponent.DBD_KillerMaxSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct SlasherMovementComponent_DBD_KillerMaxSpeedMultiplier final
{
public:
	float                                         maxSpeedMultiplier;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherMovementComponent_DBD_KillerMaxSpeedMultiplier) == 0x000004, "Wrong alignment on SlasherMovementComponent_DBD_KillerMaxSpeedMultiplier");
static_assert(sizeof(SlasherMovementComponent_DBD_KillerMaxSpeedMultiplier) == 0x000004, "Wrong size on SlasherMovementComponent_DBD_KillerMaxSpeedMultiplier");
static_assert(offsetof(SlasherMovementComponent_DBD_KillerMaxSpeedMultiplier, maxSpeedMultiplier) == 0x000000, "Member 'SlasherMovementComponent_DBD_KillerMaxSpeedMultiplier::maxSpeedMultiplier' has a wrong offset!");

// Function DeadByDaylight.SlasherMovementComponent.DBD_SimulateHack_LocalKillerMaxSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct SlasherMovementComponent_DBD_SimulateHack_LocalKillerMaxSpeedMultiplier final
{
public:
	float                                         maxSpeedMultiplier;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherMovementComponent_DBD_SimulateHack_LocalKillerMaxSpeedMultiplier) == 0x000004, "Wrong alignment on SlasherMovementComponent_DBD_SimulateHack_LocalKillerMaxSpeedMultiplier");
static_assert(sizeof(SlasherMovementComponent_DBD_SimulateHack_LocalKillerMaxSpeedMultiplier) == 0x000004, "Wrong size on SlasherMovementComponent_DBD_SimulateHack_LocalKillerMaxSpeedMultiplier");
static_assert(offsetof(SlasherMovementComponent_DBD_SimulateHack_LocalKillerMaxSpeedMultiplier, maxSpeedMultiplier) == 0x000000, "Member 'SlasherMovementComponent_DBD_SimulateHack_LocalKillerMaxSpeedMultiplier::maxSpeedMultiplier' has a wrong offset!");

// Function DeadByDaylight.SlasherMovementComponent.GetBaseMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct SlasherMovementComponent_GetBaseMaxSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherMovementComponent_GetBaseMaxSpeed) == 0x000004, "Wrong alignment on SlasherMovementComponent_GetBaseMaxSpeed");
static_assert(sizeof(SlasherMovementComponent_GetBaseMaxSpeed) == 0x000004, "Wrong size on SlasherMovementComponent_GetBaseMaxSpeed");
static_assert(offsetof(SlasherMovementComponent_GetBaseMaxSpeed, ReturnValue) == 0x000000, "Member 'SlasherMovementComponent_GetBaseMaxSpeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Authority_AllowKilling
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_Authority_AllowKilling final
{
public:
	int32                                         numKills;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Authority_AllowKilling) == 0x000004, "Wrong alignment on SlasherPlayer_Authority_AllowKilling");
static_assert(sizeof(SlasherPlayer_Authority_AllowKilling) == 0x000004, "Wrong size on SlasherPlayer_Authority_AllowKilling");
static_assert(offsetof(SlasherPlayer_Authority_AllowKilling, numKills) == 0x000000, "Member 'SlasherPlayer_Authority_AllowKilling::numKills' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Authority_AttemptEscapeCarry
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_Authority_AttemptEscapeCarry final
{
public:
	class ACamperPlayer*                          player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Authority_AttemptEscapeCarry) == 0x000008, "Wrong alignment on SlasherPlayer_Authority_AttemptEscapeCarry");
static_assert(sizeof(SlasherPlayer_Authority_AttemptEscapeCarry) == 0x000008, "Wrong size on SlasherPlayer_Authority_AttemptEscapeCarry");
static_assert(offsetof(SlasherPlayer_Authority_AttemptEscapeCarry, player) == 0x000000, "Member 'SlasherPlayer_Authority_AttemptEscapeCarry::player' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Authority_HandleKillerInterruptingSurvivor
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_Authority_HandleKillerInterruptingSurvivor final
{
public:
	class ADBDPlayer*                             target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Authority_HandleKillerInterruptingSurvivor) == 0x000008, "Wrong alignment on SlasherPlayer_Authority_HandleKillerInterruptingSurvivor");
static_assert(sizeof(SlasherPlayer_Authority_HandleKillerInterruptingSurvivor) == 0x000008, "Wrong size on SlasherPlayer_Authority_HandleKillerInterruptingSurvivor");
static_assert(offsetof(SlasherPlayer_Authority_HandleKillerInterruptingSurvivor, target) == 0x000000, "Member 'SlasherPlayer_Authority_HandleKillerInterruptingSurvivor::target' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Authority_SetInStalkMode
// 0x0002 (0x0002 - 0x0000)
struct SlasherPlayer_Authority_SetInStalkMode final
{
public:
	bool                                          stalkMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          forced;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Authority_SetInStalkMode) == 0x000001, "Wrong alignment on SlasherPlayer_Authority_SetInStalkMode");
static_assert(sizeof(SlasherPlayer_Authority_SetInStalkMode) == 0x000002, "Wrong size on SlasherPlayer_Authority_SetInStalkMode");
static_assert(offsetof(SlasherPlayer_Authority_SetInStalkMode, stalkMode) == 0x000000, "Member 'SlasherPlayer_Authority_SetInStalkMode::stalkMode' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_Authority_SetInStalkMode, forced) == 0x000001, "Member 'SlasherPlayer_Authority_SetInStalkMode::forced' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CancelAttackByInput
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_CancelAttackByInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_CancelAttackByInput) == 0x000001, "Wrong alignment on SlasherPlayer_CancelAttackByInput");
static_assert(sizeof(SlasherPlayer_CancelAttackByInput) == 0x000001, "Wrong size on SlasherPlayer_CancelAttackByInput");
static_assert(offsetof(SlasherPlayer_CancelAttackByInput, ReturnValue) == 0x000000, "Member 'SlasherPlayer_CancelAttackByInput::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Client_RequestStun
// 0x0010 (0x0010 - 0x0000)
struct SlasherPlayer_Client_RequestStun final
{
public:
	EStunType                                     stunType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             stunner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Client_RequestStun) == 0x000008, "Wrong alignment on SlasherPlayer_Client_RequestStun");
static_assert(sizeof(SlasherPlayer_Client_RequestStun) == 0x000010, "Wrong size on SlasherPlayer_Client_RequestStun");
static_assert(offsetof(SlasherPlayer_Client_RequestStun, stunType) == 0x000000, "Member 'SlasherPlayer_Client_RequestStun::stunType' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_Client_RequestStun, stunner) == 0x000008, "Member 'SlasherPlayer_Client_RequestStun::stunner' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.DBD_DisplayAttackZones
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_DBD_DisplayAttackZones final
{
public:
	bool                                          display;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_DBD_DisplayAttackZones) == 0x000001, "Wrong alignment on SlasherPlayer_DBD_DisplayAttackZones");
static_assert(sizeof(SlasherPlayer_DBD_DisplayAttackZones) == 0x000001, "Wrong size on SlasherPlayer_DBD_DisplayAttackZones");
static_assert(offsetof(SlasherPlayer_DBD_DisplayAttackZones, display) == 0x000000, "Member 'SlasherPlayer_DBD_DisplayAttackZones::display' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.DBD_MergeLockOnDamageZones
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_DBD_MergeLockOnDamageZones final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_DBD_MergeLockOnDamageZones) == 0x000001, "Wrong alignment on SlasherPlayer_DBD_MergeLockOnDamageZones");
static_assert(sizeof(SlasherPlayer_DBD_MergeLockOnDamageZones) == 0x000001, "Wrong size on SlasherPlayer_DBD_MergeLockOnDamageZones");
static_assert(offsetof(SlasherPlayer_DBD_MergeLockOnDamageZones, enable) == 0x000000, "Member 'SlasherPlayer_DBD_MergeLockOnDamageZones::enable' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.DBD_SetAttackZones
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_DBD_SetAttackZones final
{
public:
	EAttackZoneSet                                attackZoneSet;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_DBD_SetAttackZones) == 0x000001, "Wrong alignment on SlasherPlayer_DBD_SetAttackZones");
static_assert(sizeof(SlasherPlayer_DBD_SetAttackZones) == 0x000001, "Wrong size on SlasherPlayer_DBD_SetAttackZones");
static_assert(offsetof(SlasherPlayer_DBD_SetAttackZones, attackZoneSet) == 0x000000, "Member 'SlasherPlayer_DBD_SetAttackZones::attackZoneSet' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.DisplayAttackZones
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_DisplayAttackZones final
{
public:
	bool                                          display;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_DisplayAttackZones) == 0x000001, "Wrong alignment on SlasherPlayer_DisplayAttackZones");
static_assert(sizeof(SlasherPlayer_DisplayAttackZones) == 0x000001, "Wrong size on SlasherPlayer_DisplayAttackZones");
static_assert(offsetof(SlasherPlayer_DisplayAttackZones, display) == 0x000000, "Member 'SlasherPlayer_DisplayAttackZones::display' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetCurrentRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_GetCurrentRotationYaw final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetCurrentRotationYaw) == 0x000004, "Wrong alignment on SlasherPlayer_GetCurrentRotationYaw");
static_assert(sizeof(SlasherPlayer_GetCurrentRotationYaw) == 0x000004, "Wrong size on SlasherPlayer_GetCurrentRotationYaw");
static_assert(offsetof(SlasherPlayer_GetCurrentRotationYaw, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetCurrentRotationYaw::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsCrouchAvailable_BP
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsCrouchAvailable_BP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsCrouchAvailable_BP) == 0x000001, "Wrong alignment on SlasherPlayer_IsCrouchAvailable_BP");
static_assert(sizeof(SlasherPlayer_IsCrouchAvailable_BP) == 0x000001, "Wrong size on SlasherPlayer_IsCrouchAvailable_BP");
static_assert(offsetof(SlasherPlayer_IsCrouchAvailable_BP, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsCrouchAvailable_BP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsIdling
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsIdling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsIdling) == 0x000001, "Wrong alignment on SlasherPlayer_IsIdling");
static_assert(sizeof(SlasherPlayer_IsIdling) == 0x000001, "Wrong size on SlasherPlayer_IsIdling");
static_assert(offsetof(SlasherPlayer_IsIdling, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsIdling::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsWalkLocked
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsWalkLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsWalkLocked) == 0x000001, "Wrong alignment on SlasherPlayer_IsWalkLocked");
static_assert(sizeof(SlasherPlayer_IsWalkLocked) == 0x000001, "Wrong size on SlasherPlayer_IsWalkLocked");
static_assert(offsetof(SlasherPlayer_IsWalkLocked, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsWalkLocked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Local_CancelAttack
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_Local_CancelAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Local_CancelAttack) == 0x000001, "Wrong alignment on SlasherPlayer_Local_CancelAttack");
static_assert(sizeof(SlasherPlayer_Local_CancelAttack) == 0x000001, "Wrong size on SlasherPlayer_Local_CancelAttack");
static_assert(offsetof(SlasherPlayer_Local_CancelAttack, ReturnValue) == 0x000000, "Member 'SlasherPlayer_Local_CancelAttack::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.MergeLockOnDamageZones
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_MergeLockOnDamageZones final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_MergeLockOnDamageZones) == 0x000001, "Wrong alignment on SlasherPlayer_MergeLockOnDamageZones");
static_assert(sizeof(SlasherPlayer_MergeLockOnDamageZones) == 0x000001, "Wrong size on SlasherPlayer_MergeLockOnDamageZones");
static_assert(offsetof(SlasherPlayer_MergeLockOnDamageZones, enable) == 0x000000, "Member 'SlasherPlayer_MergeLockOnDamageZones::enable' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Multicast_Cheat_SetAttackDetectionZoneSet
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_Multicast_Cheat_SetAttackDetectionZoneSet final
{
public:
	EAttackZoneSet                                attackZoneSet;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Multicast_Cheat_SetAttackDetectionZoneSet) == 0x000001, "Wrong alignment on SlasherPlayer_Multicast_Cheat_SetAttackDetectionZoneSet");
static_assert(sizeof(SlasherPlayer_Multicast_Cheat_SetAttackDetectionZoneSet) == 0x000001, "Wrong size on SlasherPlayer_Multicast_Cheat_SetAttackDetectionZoneSet");
static_assert(offsetof(SlasherPlayer_Multicast_Cheat_SetAttackDetectionZoneSet, attackZoneSet) == 0x000000, "Member 'SlasherPlayer_Multicast_Cheat_SetAttackDetectionZoneSet::attackZoneSet' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Multicast_DisplayAttackZones
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_Multicast_DisplayAttackZones final
{
public:
	bool                                          display;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Multicast_DisplayAttackZones) == 0x000001, "Wrong alignment on SlasherPlayer_Multicast_DisplayAttackZones");
static_assert(sizeof(SlasherPlayer_Multicast_DisplayAttackZones) == 0x000001, "Wrong size on SlasherPlayer_Multicast_DisplayAttackZones");
static_assert(offsetof(SlasherPlayer_Multicast_DisplayAttackZones, display) == 0x000000, "Member 'SlasherPlayer_Multicast_DisplayAttackZones::display' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Multicast_MergeLockOnDamageZones
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_Multicast_MergeLockOnDamageZones final
{
public:
	bool                                          enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Multicast_MergeLockOnDamageZones) == 0x000001, "Wrong alignment on SlasherPlayer_Multicast_MergeLockOnDamageZones");
static_assert(sizeof(SlasherPlayer_Multicast_MergeLockOnDamageZones) == 0x000001, "Wrong size on SlasherPlayer_Multicast_MergeLockOnDamageZones");
static_assert(offsetof(SlasherPlayer_Multicast_MergeLockOnDamageZones, enable) == 0x000000, "Member 'SlasherPlayer_Multicast_MergeLockOnDamageZones::enable' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Multicast_SetGuidedAction
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_Multicast_SetGuidedAction final
{
public:
	ESlasherGuidedAction                          action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Multicast_SetGuidedAction) == 0x000001, "Wrong alignment on SlasherPlayer_Multicast_SetGuidedAction");
static_assert(sizeof(SlasherPlayer_Multicast_SetGuidedAction) == 0x000001, "Wrong size on SlasherPlayer_Multicast_SetGuidedAction");
static_assert(offsetof(SlasherPlayer_Multicast_SetGuidedAction, action) == 0x000000, "Member 'SlasherPlayer_Multicast_SetGuidedAction::action' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnAttackFinish
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnAttackFinish final
{
public:
	EAttackType                                   attackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnAttackFinish) == 0x000001, "Wrong alignment on SlasherPlayer_OnAttackFinish");
static_assert(sizeof(SlasherPlayer_OnAttackFinish) == 0x000001, "Wrong size on SlasherPlayer_OnAttackFinish");
static_assert(offsetof(SlasherPlayer_OnAttackFinish, attackType) == 0x000000, "Member 'SlasherPlayer_OnAttackFinish::attackType' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnAttackStart
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnAttackStart final
{
public:
	EAttackType                                   attackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnAttackStart) == 0x000001, "Wrong alignment on SlasherPlayer_OnAttackStart");
static_assert(sizeof(SlasherPlayer_OnAttackStart) == 0x000001, "Wrong size on SlasherPlayer_OnAttackStart");
static_assert(offsetof(SlasherPlayer_OnAttackStart, attackType) == 0x000000, "Member 'SlasherPlayer_OnAttackStart::attackType' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnCamperHit
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_OnCamperHit final
{
public:
	class ACamperPlayer*                          camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnCamperHit) == 0x000008, "Wrong alignment on SlasherPlayer_OnCamperHit");
static_assert(sizeof(SlasherPlayer_OnCamperHit) == 0x000008, "Wrong size on SlasherPlayer_OnCamperHit");
static_assert(offsetof(SlasherPlayer_OnCamperHit, camper) == 0x000000, "Member 'SlasherPlayer_OnCamperHit::camper' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnDropCamperEnd
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_OnDropCamperEnd final
{
public:
	class ADBDPlayer*                             camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnDropCamperEnd) == 0x000008, "Wrong alignment on SlasherPlayer_OnDropCamperEnd");
static_assert(sizeof(SlasherPlayer_OnDropCamperEnd) == 0x000008, "Wrong size on SlasherPlayer_OnDropCamperEnd");
static_assert(offsetof(SlasherPlayer_OnDropCamperEnd, camper) == 0x000000, "Member 'SlasherPlayer_OnDropCamperEnd::camper' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnIsKillingSurvivorWithMoriUpdated
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnIsKillingSurvivorWithMoriUpdated final
{
public:
	bool                                          isKillingSurvivorWithMori;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnIsKillingSurvivorWithMoriUpdated) == 0x000001, "Wrong alignment on SlasherPlayer_OnIsKillingSurvivorWithMoriUpdated");
static_assert(sizeof(SlasherPlayer_OnIsKillingSurvivorWithMoriUpdated) == 0x000001, "Wrong size on SlasherPlayer_OnIsKillingSurvivorWithMoriUpdated");
static_assert(offsetof(SlasherPlayer_OnIsKillingSurvivorWithMoriUpdated, isKillingSurvivorWithMori) == 0x000000, "Member 'SlasherPlayer_OnIsKillingSurvivorWithMoriUpdated::isKillingSurvivorWithMori' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnKillerAbilityBeginActivate
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnKillerAbilityBeginActivate final
{
public:
	EKillerAbilities                              killerAbility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnKillerAbilityBeginActivate) == 0x000001, "Wrong alignment on SlasherPlayer_OnKillerAbilityBeginActivate");
static_assert(sizeof(SlasherPlayer_OnKillerAbilityBeginActivate) == 0x000001, "Wrong size on SlasherPlayer_OnKillerAbilityBeginActivate");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityBeginActivate, killerAbility) == 0x000000, "Member 'SlasherPlayer_OnKillerAbilityBeginActivate::killerAbility' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnKillerAbilityBeginDeactivate
// 0x0002 (0x0002 - 0x0000)
struct SlasherPlayer_OnKillerAbilityBeginDeactivate final
{
public:
	EKillerAbilities                              killerAbility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          forced;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnKillerAbilityBeginDeactivate) == 0x000001, "Wrong alignment on SlasherPlayer_OnKillerAbilityBeginDeactivate");
static_assert(sizeof(SlasherPlayer_OnKillerAbilityBeginDeactivate) == 0x000002, "Wrong size on SlasherPlayer_OnKillerAbilityBeginDeactivate");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityBeginDeactivate, killerAbility) == 0x000000, "Member 'SlasherPlayer_OnKillerAbilityBeginDeactivate::killerAbility' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityBeginDeactivate, forced) == 0x000001, "Member 'SlasherPlayer_OnKillerAbilityBeginDeactivate::forced' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnKillerAbilityEndActivate
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnKillerAbilityEndActivate final
{
public:
	EKillerAbilities                              killerAbility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnKillerAbilityEndActivate) == 0x000001, "Wrong alignment on SlasherPlayer_OnKillerAbilityEndActivate");
static_assert(sizeof(SlasherPlayer_OnKillerAbilityEndActivate) == 0x000001, "Wrong size on SlasherPlayer_OnKillerAbilityEndActivate");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityEndActivate, killerAbility) == 0x000000, "Member 'SlasherPlayer_OnKillerAbilityEndActivate::killerAbility' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnKillerAbilityEndDeactivate
// 0x0002 (0x0002 - 0x0000)
struct SlasherPlayer_OnKillerAbilityEndDeactivate final
{
public:
	EKillerAbilities                              killerAbility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          forced;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnKillerAbilityEndDeactivate) == 0x000001, "Wrong alignment on SlasherPlayer_OnKillerAbilityEndDeactivate");
static_assert(sizeof(SlasherPlayer_OnKillerAbilityEndDeactivate) == 0x000002, "Wrong size on SlasherPlayer_OnKillerAbilityEndDeactivate");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityEndDeactivate, killerAbility) == 0x000000, "Member 'SlasherPlayer_OnKillerAbilityEndDeactivate::killerAbility' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityEndDeactivate, forced) == 0x000001, "Member 'SlasherPlayer_OnKillerAbilityEndDeactivate::forced' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnKillerAbilityUpdateActivate
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_OnKillerAbilityUpdateActivate final
{
public:
	EKillerAbilities                              killerAbility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         percent;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnKillerAbilityUpdateActivate) == 0x000004, "Wrong alignment on SlasherPlayer_OnKillerAbilityUpdateActivate");
static_assert(sizeof(SlasherPlayer_OnKillerAbilityUpdateActivate) == 0x000008, "Wrong size on SlasherPlayer_OnKillerAbilityUpdateActivate");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityUpdateActivate, killerAbility) == 0x000000, "Member 'SlasherPlayer_OnKillerAbilityUpdateActivate::killerAbility' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityUpdateActivate, percent) == 0x000004, "Member 'SlasherPlayer_OnKillerAbilityUpdateActivate::percent' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnLoudNoiseTriggered
// 0x0028 (0x0028 - 0x0000)
struct SlasherPlayer_OnLoudNoiseTriggered final
{
public:
	class AActor*                                 originator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 instigatingActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          shouldTrack;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         audibleRange;                                      // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isQuickAction;                                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isDeceivingNoise;                                  // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SlasherPlayer_OnLoudNoiseTriggered) == 0x000008, "Wrong alignment on SlasherPlayer_OnLoudNoiseTriggered");
static_assert(sizeof(SlasherPlayer_OnLoudNoiseTriggered) == 0x000028, "Wrong size on SlasherPlayer_OnLoudNoiseTriggered");
static_assert(offsetof(SlasherPlayer_OnLoudNoiseTriggered, originator) == 0x000000, "Member 'SlasherPlayer_OnLoudNoiseTriggered::originator' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnLoudNoiseTriggered, instigatingActor) == 0x000008, "Member 'SlasherPlayer_OnLoudNoiseTriggered::instigatingActor' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnLoudNoiseTriggered, location) == 0x000010, "Member 'SlasherPlayer_OnLoudNoiseTriggered::location' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnLoudNoiseTriggered, shouldTrack) == 0x00001C, "Member 'SlasherPlayer_OnLoudNoiseTriggered::shouldTrack' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnLoudNoiseTriggered, audibleRange) == 0x000020, "Member 'SlasherPlayer_OnLoudNoiseTriggered::audibleRange' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnLoudNoiseTriggered, isQuickAction) == 0x000024, "Member 'SlasherPlayer_OnLoudNoiseTriggered::isQuickAction' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnLoudNoiseTriggered, isDeceivingNoise) == 0x000025, "Member 'SlasherPlayer_OnLoudNoiseTriggered::isDeceivingNoise' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnPerformingChargableInteraction
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_OnPerformingChargableInteraction final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnPerformingChargableInteraction) == 0x000004, "Wrong alignment on SlasherPlayer_OnPerformingChargableInteraction");
static_assert(sizeof(SlasherPlayer_OnPerformingChargableInteraction) == 0x000004, "Wrong size on SlasherPlayer_OnPerformingChargableInteraction");
static_assert(offsetof(SlasherPlayer_OnPerformingChargableInteraction, Progress) == 0x000000, "Member 'SlasherPlayer_OnPerformingChargableInteraction::Progress' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnStalkModeChanged
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnStalkModeChanged final
{
public:
	bool                                          stalkMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnStalkModeChanged) == 0x000001, "Wrong alignment on SlasherPlayer_OnStalkModeChanged");
static_assert(sizeof(SlasherPlayer_OnStalkModeChanged) == 0x000001, "Wrong size on SlasherPlayer_OnStalkModeChanged");
static_assert(offsetof(SlasherPlayer_OnStalkModeChanged, stalkMode) == 0x000000, "Member 'SlasherPlayer_OnStalkModeChanged::stalkMode' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnStalkModeChangedCosmetic
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnStalkModeChangedCosmetic final
{
public:
	bool                                          stalkMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnStalkModeChangedCosmetic) == 0x000001, "Wrong alignment on SlasherPlayer_OnStalkModeChangedCosmetic");
static_assert(sizeof(SlasherPlayer_OnStalkModeChangedCosmetic) == 0x000001, "Wrong size on SlasherPlayer_OnStalkModeChangedCosmetic");
static_assert(offsetof(SlasherPlayer_OnStalkModeChangedCosmetic, stalkMode) == 0x000000, "Member 'SlasherPlayer_OnStalkModeChangedCosmetic::stalkMode' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnStealthChanged
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnStealthChanged final
{
public:
	bool                                          stealth;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnStealthChanged) == 0x000001, "Wrong alignment on SlasherPlayer_OnStealthChanged");
static_assert(sizeof(SlasherPlayer_OnStealthChanged) == 0x000001, "Wrong size on SlasherPlayer_OnStealthChanged");
static_assert(offsetof(SlasherPlayer_OnStealthChanged, stealth) == 0x000000, "Member 'SlasherPlayer_OnStealthChanged::stealth' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnSuccessfulInterruption
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_OnSuccessfulInterruption final
{
public:
	class ACamperPlayer*                          interruptedSurvivor;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnSuccessfulInterruption) == 0x000008, "Wrong alignment on SlasherPlayer_OnSuccessfulInterruption");
static_assert(sizeof(SlasherPlayer_OnSuccessfulInterruption) == 0x000008, "Wrong size on SlasherPlayer_OnSuccessfulInterruption");
static_assert(offsetof(SlasherPlayer_OnSuccessfulInterruption, interruptedSurvivor) == 0x000000, "Member 'SlasherPlayer_OnSuccessfulInterruption::interruptedSurvivor' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnSurvivorKilled
// 0x0010 (0x0010 - 0x0000)
struct SlasherPlayer_OnSurvivorKilled final
{
public:
	class ACamperPlayer*                          playerToKill;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          consumeKill;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          delayedSurvivorDeath;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SlasherPlayer_OnSurvivorKilled) == 0x000008, "Wrong alignment on SlasherPlayer_OnSurvivorKilled");
static_assert(sizeof(SlasherPlayer_OnSurvivorKilled) == 0x000010, "Wrong size on SlasherPlayer_OnSurvivorKilled");
static_assert(offsetof(SlasherPlayer_OnSurvivorKilled, playerToKill) == 0x000000, "Member 'SlasherPlayer_OnSurvivorKilled::playerToKill' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnSurvivorKilled, consumeKill) == 0x000008, "Member 'SlasherPlayer_OnSurvivorKilled::consumeKill' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnSurvivorKilled, delayedSurvivorDeath) == 0x000009, "Member 'SlasherPlayer_OnSurvivorKilled::delayedSurvivorDeath' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnSurvivorsLeftChanged
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_OnSurvivorsLeftChanged final
{
public:
	int32                                         survivorRemaining;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnSurvivorsLeftChanged) == 0x000004, "Wrong alignment on SlasherPlayer_OnSurvivorsLeftChanged");
static_assert(sizeof(SlasherPlayer_OnSurvivorsLeftChanged) == 0x000004, "Wrong size on SlasherPlayer_OnSurvivorsLeftChanged");
static_assert(offsetof(SlasherPlayer_OnSurvivorsLeftChanged, survivorRemaining) == 0x000000, "Member 'SlasherPlayer_OnSurvivorsLeftChanged::survivorRemaining' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Server_SendAttackInput
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_Server_SendAttackInput final
{
public:
	bool                                          pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Server_SendAttackInput) == 0x000001, "Wrong alignment on SlasherPlayer_Server_SendAttackInput");
static_assert(sizeof(SlasherPlayer_Server_SendAttackInput) == 0x000001, "Wrong size on SlasherPlayer_Server_SendAttackInput");
static_assert(offsetof(SlasherPlayer_Server_SendAttackInput, pressed) == 0x000000, "Member 'SlasherPlayer_Server_SendAttackInput::pressed' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetAttackDetectionZoneSet
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_SetAttackDetectionZoneSet final
{
public:
	EAttackZoneSet                                attackZoneSet;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetAttackDetectionZoneSet) == 0x000001, "Wrong alignment on SlasherPlayer_SetAttackDetectionZoneSet");
static_assert(sizeof(SlasherPlayer_SetAttackDetectionZoneSet) == 0x000001, "Wrong size on SlasherPlayer_SetAttackDetectionZoneSet");
static_assert(offsetof(SlasherPlayer_SetAttackDetectionZoneSet, attackZoneSet) == 0x000000, "Member 'SlasherPlayer_SetAttackDetectionZoneSet::attackZoneSet' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetAttackZonePivot
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_SetAttackZonePivot final
{
public:
	class USceneComponent*                        attackZonePivot;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetAttackZonePivot) == 0x000008, "Wrong alignment on SlasherPlayer_SetAttackZonePivot");
static_assert(sizeof(SlasherPlayer_SetAttackZonePivot) == 0x000008, "Wrong size on SlasherPlayer_SetAttackZonePivot");
static_assert(offsetof(SlasherPlayer_SetAttackZonePivot, attackZonePivot) == 0x000000, "Member 'SlasherPlayer_SetAttackZonePivot::attackZonePivot' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetCarriedCamper
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_SetCarriedCamper final
{
public:
	class ACamperPlayer*                          camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetCarriedCamper) == 0x000008, "Wrong alignment on SlasherPlayer_SetCarriedCamper");
static_assert(sizeof(SlasherPlayer_SetCarriedCamper) == 0x000008, "Wrong size on SlasherPlayer_SetCarriedCamper");
static_assert(offsetof(SlasherPlayer_SetCarriedCamper, camper) == 0x000000, "Member 'SlasherPlayer_SetCarriedCamper::camper' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetChainsawSprinting
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_SetChainsawSprinting final
{
public:
	bool                                          chainsawSprinting;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetChainsawSprinting) == 0x000001, "Wrong alignment on SlasherPlayer_SetChainsawSprinting");
static_assert(sizeof(SlasherPlayer_SetChainsawSprinting) == 0x000001, "Wrong size on SlasherPlayer_SetChainsawSprinting");
static_assert(offsetof(SlasherPlayer_SetChainsawSprinting, chainsawSprinting) == 0x000000, "Member 'SlasherPlayer_SetChainsawSprinting::chainsawSprinting' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetGuidedAction
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_SetGuidedAction final
{
public:
	ESlasherGuidedAction                          action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetGuidedAction) == 0x000001, "Wrong alignment on SlasherPlayer_SetGuidedAction");
static_assert(sizeof(SlasherPlayer_SetGuidedAction) == 0x000001, "Wrong size on SlasherPlayer_SetGuidedAction");
static_assert(offsetof(SlasherPlayer_SetGuidedAction, action) == 0x000000, "Member 'SlasherPlayer_SetGuidedAction::action' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetIsHookingSurvivor
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_SetIsHookingSurvivor final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetIsHookingSurvivor) == 0x000001, "Wrong alignment on SlasherPlayer_SetIsHookingSurvivor");
static_assert(sizeof(SlasherPlayer_SetIsHookingSurvivor) == 0x000001, "Wrong size on SlasherPlayer_SetIsHookingSurvivor");
static_assert(offsetof(SlasherPlayer_SetIsHookingSurvivor, value) == 0x000000, "Member 'SlasherPlayer_SetIsHookingSurvivor::value' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetIsKilling
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_SetIsKilling final
{
public:
	bool                                          isKilling;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetIsKilling) == 0x000001, "Wrong alignment on SlasherPlayer_SetIsKilling");
static_assert(sizeof(SlasherPlayer_SetIsKilling) == 0x000001, "Wrong size on SlasherPlayer_SetIsKilling");
static_assert(offsetof(SlasherPlayer_SetIsKilling, isKilling) == 0x000000, "Member 'SlasherPlayer_SetIsKilling::isKilling' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetLightIntensity
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_SetLightIntensity final
{
public:
	float                                         intensity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetLightIntensity) == 0x000004, "Wrong alignment on SlasherPlayer_SetLightIntensity");
static_assert(sizeof(SlasherPlayer_SetLightIntensity) == 0x000004, "Wrong size on SlasherPlayer_SetLightIntensity");
static_assert(offsetof(SlasherPlayer_SetLightIntensity, intensity) == 0x000000, "Member 'SlasherPlayer_SetLightIntensity::intensity' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetStalkTierWalkSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_SetStalkTierWalkSpeedMultiplier final
{
public:
	float                                         stalkTierWalkSpeedMultiplier;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetStalkTierWalkSpeedMultiplier) == 0x000004, "Wrong alignment on SlasherPlayer_SetStalkTierWalkSpeedMultiplier");
static_assert(sizeof(SlasherPlayer_SetStalkTierWalkSpeedMultiplier) == 0x000004, "Wrong size on SlasherPlayer_SetStalkTierWalkSpeedMultiplier");
static_assert(offsetof(SlasherPlayer_SetStalkTierWalkSpeedMultiplier, stalkTierWalkSpeedMultiplier) == 0x000000, "Member 'SlasherPlayer_SetStalkTierWalkSpeedMultiplier::stalkTierWalkSpeedMultiplier' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetSurvivorBeingKilled
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_SetSurvivorBeingKilled final
{
public:
	class ACamperPlayer*                          survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetSurvivorBeingKilled) == 0x000008, "Wrong alignment on SlasherPlayer_SetSurvivorBeingKilled");
static_assert(sizeof(SlasherPlayer_SetSurvivorBeingKilled) == 0x000008, "Wrong size on SlasherPlayer_SetSurvivorBeingKilled");
static_assert(offsetof(SlasherPlayer_SetSurvivorBeingKilled, survivor) == 0x000000, "Member 'SlasherPlayer_SetSurvivorBeingKilled::survivor' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.UpdateRageTierEffect
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_UpdateRageTierEffect final
{
public:
	int32                                         previousTier;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         currentTier;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_UpdateRageTierEffect) == 0x000004, "Wrong alignment on SlasherPlayer_UpdateRageTierEffect");
static_assert(sizeof(SlasherPlayer_UpdateRageTierEffect) == 0x000008, "Wrong size on SlasherPlayer_UpdateRageTierEffect");
static_assert(offsetof(SlasherPlayer_UpdateRageTierEffect, previousTier) == 0x000000, "Member 'SlasherPlayer_UpdateRageTierEffect::previousTier' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_UpdateRageTierEffect, currentTier) == 0x000004, "Member 'SlasherPlayer_UpdateRageTierEffect::currentTier' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CanAffectLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_CanAffectLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_CanAffectLocalPlayer) == 0x000001, "Wrong alignment on SlasherPlayer_CanAffectLocalPlayer");
static_assert(sizeof(SlasherPlayer_CanAffectLocalPlayer) == 0x000001, "Wrong size on SlasherPlayer_CanAffectLocalPlayer");
static_assert(offsetof(SlasherPlayer_CanAffectLocalPlayer, ReturnValue) == 0x000000, "Member 'SlasherPlayer_CanAffectLocalPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CanAttack
// 0x0002 (0x0002 - 0x0000)
struct SlasherPlayer_CanAttack final
{
public:
	EAttackType                                   attackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_CanAttack) == 0x000001, "Wrong alignment on SlasherPlayer_CanAttack");
static_assert(sizeof(SlasherPlayer_CanAttack) == 0x000002, "Wrong size on SlasherPlayer_CanAttack");
static_assert(offsetof(SlasherPlayer_CanAttack, attackType) == 0x000000, "Member 'SlasherPlayer_CanAttack::attackType' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_CanAttack, ReturnValue) == 0x000001, "Member 'SlasherPlayer_CanAttack::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CanAttack_BP
// 0x0002 (0x0002 - 0x0000)
struct SlasherPlayer_CanAttack_BP final
{
public:
	EAttackType                                   attackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_CanAttack_BP) == 0x000001, "Wrong alignment on SlasherPlayer_CanAttack_BP");
static_assert(sizeof(SlasherPlayer_CanAttack_BP) == 0x000002, "Wrong size on SlasherPlayer_CanAttack_BP");
static_assert(offsetof(SlasherPlayer_CanAttack_BP, attackType) == 0x000000, "Member 'SlasherPlayer_CanAttack_BP::attackType' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_CanAttack_BP, ReturnValue) == 0x000001, "Member 'SlasherPlayer_CanAttack_BP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CanEscapeCarry
// 0x0010 (0x0010 - 0x0000)
struct SlasherPlayer_CanEscapeCarry final
{
public:
	class ACamperPlayer*                          player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SlasherPlayer_CanEscapeCarry) == 0x000008, "Wrong alignment on SlasherPlayer_CanEscapeCarry");
static_assert(sizeof(SlasherPlayer_CanEscapeCarry) == 0x000010, "Wrong size on SlasherPlayer_CanEscapeCarry");
static_assert(offsetof(SlasherPlayer_CanEscapeCarry, player) == 0x000000, "Member 'SlasherPlayer_CanEscapeCarry::player' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_CanEscapeCarry, ReturnValue) == 0x000008, "Member 'SlasherPlayer_CanEscapeCarry::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CanGainRage
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_CanGainRage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_CanGainRage) == 0x000001, "Wrong alignment on SlasherPlayer_CanGainRage");
static_assert(sizeof(SlasherPlayer_CanGainRage) == 0x000001, "Wrong size on SlasherPlayer_CanGainRage");
static_assert(offsetof(SlasherPlayer_CanGainRage, ReturnValue) == 0x000000, "Member 'SlasherPlayer_CanGainRage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CanPerformKillerAbility
// 0x0002 (0x0002 - 0x0000)
struct SlasherPlayer_CanPerformKillerAbility final
{
public:
	EKillerAbilities                              killerAbility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_CanPerformKillerAbility) == 0x000001, "Wrong alignment on SlasherPlayer_CanPerformKillerAbility");
static_assert(sizeof(SlasherPlayer_CanPerformKillerAbility) == 0x000002, "Wrong size on SlasherPlayer_CanPerformKillerAbility");
static_assert(offsetof(SlasherPlayer_CanPerformKillerAbility, killerAbility) == 0x000000, "Member 'SlasherPlayer_CanPerformKillerAbility::killerAbility' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_CanPerformKillerAbility, ReturnValue) == 0x000001, "Member 'SlasherPlayer_CanPerformKillerAbility::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CanPickupSurvivor
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_CanPickupSurvivor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_CanPickupSurvivor) == 0x000001, "Wrong alignment on SlasherPlayer_CanPickupSurvivor");
static_assert(sizeof(SlasherPlayer_CanPickupSurvivor) == 0x000001, "Wrong size on SlasherPlayer_CanPickupSurvivor");
static_assert(offsetof(SlasherPlayer_CanPickupSurvivor, ReturnValue) == 0x000000, "Member 'SlasherPlayer_CanPickupSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CanSlashAttack_BP
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_CanSlashAttack_BP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_CanSlashAttack_BP) == 0x000001, "Wrong alignment on SlasherPlayer_CanSlashAttack_BP");
static_assert(sizeof(SlasherPlayer_CanSlashAttack_BP) == 0x000001, "Wrong size on SlasherPlayer_CanSlashAttack_BP");
static_assert(offsetof(SlasherPlayer_CanSlashAttack_BP, ReturnValue) == 0x000000, "Member 'SlasherPlayer_CanSlashAttack_BP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetAnimDirection
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_GetAnimDirection final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetAnimDirection) == 0x000004, "Wrong alignment on SlasherPlayer_GetAnimDirection");
static_assert(sizeof(SlasherPlayer_GetAnimDirection) == 0x000004, "Wrong size on SlasherPlayer_GetAnimDirection");
static_assert(offsetof(SlasherPlayer_GetAnimDirection, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetAnimDirection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetBlindedPercent
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_GetBlindedPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetBlindedPercent) == 0x000004, "Wrong alignment on SlasherPlayer_GetBlindedPercent");
static_assert(sizeof(SlasherPlayer_GetBlindedPercent) == 0x000004, "Wrong size on SlasherPlayer_GetBlindedPercent");
static_assert(offsetof(SlasherPlayer_GetBlindedPercent, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetBlindedPercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetCarriedCamper
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_GetCarriedCamper final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetCarriedCamper) == 0x000008, "Wrong alignment on SlasherPlayer_GetCarriedCamper");
static_assert(sizeof(SlasherPlayer_GetCarriedCamper) == 0x000008, "Wrong size on SlasherPlayer_GetCarriedCamper");
static_assert(offsetof(SlasherPlayer_GetCarriedCamper, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetCarriedCamper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetCharacterCustomAnimTags
// 0x0010 (0x0010 - 0x0000)
struct SlasherPlayer_GetCharacterCustomAnimTags final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetCharacterCustomAnimTags) == 0x000008, "Wrong alignment on SlasherPlayer_GetCharacterCustomAnimTags");
static_assert(sizeof(SlasherPlayer_GetCharacterCustomAnimTags) == 0x000010, "Wrong size on SlasherPlayer_GetCharacterCustomAnimTags");
static_assert(offsetof(SlasherPlayer_GetCharacterCustomAnimTags, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetCharacterCustomAnimTags::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetChaserCharacterComponent
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_GetChaserCharacterComponent final
{
public:
	class UChaserCharacterComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetChaserCharacterComponent) == 0x000008, "Wrong alignment on SlasherPlayer_GetChaserCharacterComponent");
static_assert(sizeof(SlasherPlayer_GetChaserCharacterComponent) == 0x000008, "Wrong size on SlasherPlayer_GetChaserCharacterComponent");
static_assert(offsetof(SlasherPlayer_GetChaserCharacterComponent, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetChaserCharacterComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetGuidedAction
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_GetGuidedAction final
{
public:
	ESlasherGuidedAction                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetGuidedAction) == 0x000001, "Wrong alignment on SlasherPlayer_GetGuidedAction");
static_assert(sizeof(SlasherPlayer_GetGuidedAction) == 0x000001, "Wrong size on SlasherPlayer_GetGuidedAction");
static_assert(offsetof(SlasherPlayer_GetGuidedAction, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetGuidedAction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetIsAttacking
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_GetIsAttacking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetIsAttacking) == 0x000001, "Wrong alignment on SlasherPlayer_GetIsAttacking");
static_assert(sizeof(SlasherPlayer_GetIsAttacking) == 0x000001, "Wrong size on SlasherPlayer_GetIsAttacking");
static_assert(offsetof(SlasherPlayer_GetIsAttacking, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetIsAttacking::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetLightIntensity
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_GetLightIntensity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetLightIntensity) == 0x000004, "Wrong alignment on SlasherPlayer_GetLightIntensity");
static_assert(sizeof(SlasherPlayer_GetLightIntensity) == 0x000004, "Wrong size on SlasherPlayer_GetLightIntensity");
static_assert(offsetof(SlasherPlayer_GetLightIntensity, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetLightIntensity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetLookRotation
// 0x000C (0x000C - 0x0000)
struct SlasherPlayer_GetLookRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetLookRotation) == 0x000004, "Wrong alignment on SlasherPlayer_GetLookRotation");
static_assert(sizeof(SlasherPlayer_GetLookRotation) == 0x00000C, "Wrong size on SlasherPlayer_GetLookRotation");
static_assert(offsetof(SlasherPlayer_GetLookRotation, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetLookRotation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetObsessionTarget
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_GetObsessionTarget final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetObsessionTarget) == 0x000008, "Wrong alignment on SlasherPlayer_GetObsessionTarget");
static_assert(sizeof(SlasherPlayer_GetObsessionTarget) == 0x000008, "Wrong size on SlasherPlayer_GetObsessionTarget");
static_assert(offsetof(SlasherPlayer_GetObsessionTarget, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetObsessionTarget::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetPlayerDropOffPoint
// 0x000C (0x000C - 0x0000)
struct SlasherPlayer_GetPlayerDropOffPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetPlayerDropOffPoint) == 0x000004, "Wrong alignment on SlasherPlayer_GetPlayerDropOffPoint");
static_assert(sizeof(SlasherPlayer_GetPlayerDropOffPoint) == 0x00000C, "Wrong size on SlasherPlayer_GetPlayerDropOffPoint");
static_assert(offsetof(SlasherPlayer_GetPlayerDropOffPoint, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetPlayerDropOffPoint::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetPresenceTag
// 0x000C (0x000C - 0x0000)
struct SlasherPlayer_GetPresenceTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetPresenceTag) == 0x000004, "Wrong alignment on SlasherPlayer_GetPresenceTag");
static_assert(sizeof(SlasherPlayer_GetPresenceTag) == 0x00000C, "Wrong size on SlasherPlayer_GetPresenceTag");
static_assert(offsetof(SlasherPlayer_GetPresenceTag, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetPresenceTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetRageTier
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_GetRageTier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetRageTier) == 0x000004, "Wrong alignment on SlasherPlayer_GetRageTier");
static_assert(sizeof(SlasherPlayer_GetRageTier) == 0x000004, "Wrong size on SlasherPlayer_GetRageTier");
static_assert(offsetof(SlasherPlayer_GetRageTier, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetRageTier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetSlasherMovement
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_GetSlasherMovement final
{
public:
	class USlasherMovementComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetSlasherMovement) == 0x000008, "Wrong alignment on SlasherPlayer_GetSlasherMovement");
static_assert(sizeof(SlasherPlayer_GetSlasherMovement) == 0x000008, "Wrong size on SlasherPlayer_GetSlasherMovement");
static_assert(offsetof(SlasherPlayer_GetSlasherMovement, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetSlasherMovement::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetStalkTierWalkSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_GetStalkTierWalkSpeedMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetStalkTierWalkSpeedMultiplier) == 0x000004, "Wrong alignment on SlasherPlayer_GetStalkTierWalkSpeedMultiplier");
static_assert(sizeof(SlasherPlayer_GetStalkTierWalkSpeedMultiplier) == 0x000004, "Wrong size on SlasherPlayer_GetStalkTierWalkSpeedMultiplier");
static_assert(offsetof(SlasherPlayer_GetStalkTierWalkSpeedMultiplier, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetStalkTierWalkSpeedMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetStealthRatio
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_GetStealthRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetStealthRatio) == 0x000004, "Wrong alignment on SlasherPlayer_GetStealthRatio");
static_assert(sizeof(SlasherPlayer_GetStealthRatio) == 0x000004, "Wrong size on SlasherPlayer_GetStealthRatio");
static_assert(offsetof(SlasherPlayer_GetStealthRatio, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetStealthRatio::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetStillnessStartTime
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_GetStillnessStartTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetStillnessStartTime) == 0x000008, "Wrong alignment on SlasherPlayer_GetStillnessStartTime");
static_assert(sizeof(SlasherPlayer_GetStillnessStartTime) == 0x000008, "Wrong size on SlasherPlayer_GetStillnessStartTime");
static_assert(offsetof(SlasherPlayer_GetStillnessStartTime, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetStillnessStartTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetSurvivorBeingKilled
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_GetSurvivorBeingKilled final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetSurvivorBeingKilled) == 0x000008, "Wrong alignment on SlasherPlayer_GetSurvivorBeingKilled");
static_assert(sizeof(SlasherPlayer_GetSurvivorBeingKilled) == 0x000008, "Wrong size on SlasherPlayer_GetSurvivorBeingKilled");
static_assert(offsetof(SlasherPlayer_GetSurvivorBeingKilled, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetSurvivorBeingKilled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.HasKillerAbility
// 0x0002 (0x0002 - 0x0000)
struct SlasherPlayer_HasKillerAbility final
{
public:
	EKillerAbilities                              killerAbility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_HasKillerAbility) == 0x000001, "Wrong alignment on SlasherPlayer_HasKillerAbility");
static_assert(sizeof(SlasherPlayer_HasKillerAbility) == 0x000002, "Wrong size on SlasherPlayer_HasKillerAbility");
static_assert(offsetof(SlasherPlayer_HasKillerAbility, killerAbility) == 0x000000, "Member 'SlasherPlayer_HasKillerAbility::killerAbility' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_HasKillerAbility, ReturnValue) == 0x000001, "Member 'SlasherPlayer_HasKillerAbility::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.HasPreLevelGenerationModifier
// 0x0010 (0x0010 - 0x0000)
struct SlasherPlayer_HasPreLevelGenerationModifier final
{
public:
	class FName                                   modifierID;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SlasherPlayer_HasPreLevelGenerationModifier) == 0x000004, "Wrong alignment on SlasherPlayer_HasPreLevelGenerationModifier");
static_assert(sizeof(SlasherPlayer_HasPreLevelGenerationModifier) == 0x000010, "Wrong size on SlasherPlayer_HasPreLevelGenerationModifier");
static_assert(offsetof(SlasherPlayer_HasPreLevelGenerationModifier, modifierID) == 0x000000, "Member 'SlasherPlayer_HasPreLevelGenerationModifier::modifierID' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_HasPreLevelGenerationModifier, ReturnValue) == 0x00000C, "Member 'SlasherPlayer_HasPreLevelGenerationModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsAllowedToKill
// 0x0010 (0x0010 - 0x0000)
struct SlasherPlayer_IsAllowedToKill final
{
public:
	const class ACamperPlayer*                    camper;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SlasherPlayer_IsAllowedToKill) == 0x000008, "Wrong alignment on SlasherPlayer_IsAllowedToKill");
static_assert(sizeof(SlasherPlayer_IsAllowedToKill) == 0x000010, "Wrong size on SlasherPlayer_IsAllowedToKill");
static_assert(offsetof(SlasherPlayer_IsAllowedToKill, camper) == 0x000000, "Member 'SlasherPlayer_IsAllowedToKill::camper' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_IsAllowedToKill, ReturnValue) == 0x000008, "Member 'SlasherPlayer_IsAllowedToKill::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsCarrying
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsCarrying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsCarrying) == 0x000001, "Wrong alignment on SlasherPlayer_IsCarrying");
static_assert(sizeof(SlasherPlayer_IsCarrying) == 0x000001, "Wrong size on SlasherPlayer_IsCarrying");
static_assert(offsetof(SlasherPlayer_IsCarrying, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsCarrying::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsChainsawSprinting
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsChainsawSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsChainsawSprinting) == 0x000001, "Wrong alignment on SlasherPlayer_IsChainsawSprinting");
static_assert(sizeof(SlasherPlayer_IsChainsawSprinting) == 0x000001, "Wrong size on SlasherPlayer_IsChainsawSprinting");
static_assert(offsetof(SlasherPlayer_IsChainsawSprinting, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsChainsawSprinting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsCloaking
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsCloaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsCloaking) == 0x000001, "Wrong alignment on SlasherPlayer_IsCloaking");
static_assert(sizeof(SlasherPlayer_IsCloaking) == 0x000001, "Wrong size on SlasherPlayer_IsCloaking");
static_assert(offsetof(SlasherPlayer_IsCloaking, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsCloaking::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsHooking
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsHooking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsHooking) == 0x000001, "Wrong alignment on SlasherPlayer_IsHooking");
static_assert(sizeof(SlasherPlayer_IsHooking) == 0x000001, "Wrong size on SlasherPlayer_IsHooking");
static_assert(offsetof(SlasherPlayer_IsHooking, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsHooking::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsImmuneToObservingPlayerDetection
// 0x0010 (0x0010 - 0x0000)
struct SlasherPlayer_IsImmuneToObservingPlayerDetection final
{
public:
	const class ADBDPlayer*                       observingPlayer;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SlasherPlayer_IsImmuneToObservingPlayerDetection) == 0x000008, "Wrong alignment on SlasherPlayer_IsImmuneToObservingPlayerDetection");
static_assert(sizeof(SlasherPlayer_IsImmuneToObservingPlayerDetection) == 0x000010, "Wrong size on SlasherPlayer_IsImmuneToObservingPlayerDetection");
static_assert(offsetof(SlasherPlayer_IsImmuneToObservingPlayerDetection, observingPlayer) == 0x000000, "Member 'SlasherPlayer_IsImmuneToObservingPlayerDetection::observingPlayer' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_IsImmuneToObservingPlayerDetection, ReturnValue) == 0x000008, "Member 'SlasherPlayer_IsImmuneToObservingPlayerDetection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsInterruptBlocked
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsInterruptBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsInterruptBlocked) == 0x000001, "Wrong alignment on SlasherPlayer_IsInterruptBlocked");
static_assert(sizeof(SlasherPlayer_IsInterruptBlocked) == 0x000001, "Wrong size on SlasherPlayer_IsInterruptBlocked");
static_assert(offsetof(SlasherPlayer_IsInterruptBlocked, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsInterruptBlocked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsKilling
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsKilling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsKilling) == 0x000001, "Wrong alignment on SlasherPlayer_IsKilling");
static_assert(sizeof(SlasherPlayer_IsKilling) == 0x000001, "Wrong size on SlasherPlayer_IsKilling");
static_assert(offsetof(SlasherPlayer_IsKilling, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsKilling::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsOfferingAllowingKill
// 0x0010 (0x0010 - 0x0000)
struct SlasherPlayer_IsOfferingAllowingKill final
{
public:
	const class ACamperPlayer*                    camper;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SlasherPlayer_IsOfferingAllowingKill) == 0x000008, "Wrong alignment on SlasherPlayer_IsOfferingAllowingKill");
static_assert(sizeof(SlasherPlayer_IsOfferingAllowingKill) == 0x000010, "Wrong size on SlasherPlayer_IsOfferingAllowingKill");
static_assert(offsetof(SlasherPlayer_IsOfferingAllowingKill, camper) == 0x000000, "Member 'SlasherPlayer_IsOfferingAllowingKill::camper' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_IsOfferingAllowingKill, ReturnValue) == 0x000008, "Member 'SlasherPlayer_IsOfferingAllowingKill::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsStunned
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsStunned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsStunned) == 0x000001, "Wrong alignment on SlasherPlayer_IsStunned");
static_assert(sizeof(SlasherPlayer_IsStunned) == 0x000001, "Wrong size on SlasherPlayer_IsStunned");
static_assert(offsetof(SlasherPlayer_IsStunned, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsStunned::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsUncloaking
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsUncloaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsUncloaking) == 0x000001, "Wrong alignment on SlasherPlayer_IsUncloaking");
static_assert(sizeof(SlasherPlayer_IsUncloaking) == 0x000001, "Wrong size on SlasherPlayer_IsUncloaking");
static_assert(offsetof(SlasherPlayer_IsUncloaking, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsUncloaking::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.ShouldApplyBloodlustSpeedModifier
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_ShouldApplyBloodlustSpeedModifier final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_ShouldApplyBloodlustSpeedModifier) == 0x000001, "Wrong alignment on SlasherPlayer_ShouldApplyBloodlustSpeedModifier");
static_assert(sizeof(SlasherPlayer_ShouldApplyBloodlustSpeedModifier) == 0x000001, "Wrong size on SlasherPlayer_ShouldApplyBloodlustSpeedModifier");
static_assert(offsetof(SlasherPlayer_ShouldApplyBloodlustSpeedModifier, ReturnValue) == 0x000000, "Member 'SlasherPlayer_ShouldApplyBloodlustSpeedModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.WasRecentlyCloaked
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_WasRecentlyCloaked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_WasRecentlyCloaked) == 0x000001, "Wrong alignment on SlasherPlayer_WasRecentlyCloaked");
static_assert(sizeof(SlasherPlayer_WasRecentlyCloaked) == 0x000001, "Wrong size on SlasherPlayer_WasRecentlyCloaked");
static_assert(offsetof(SlasherPlayer_WasRecentlyCloaked, ReturnValue) == 0x000000, "Member 'SlasherPlayer_WasRecentlyCloaked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGTallyProgressBar.SetPercent
// 0x0004 (0x0004 - 0x0000)
struct UMGTallyProgressBar_SetPercent final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyProgressBar_SetPercent) == 0x000004, "Wrong alignment on UMGTallyProgressBar_SetPercent");
static_assert(sizeof(UMGTallyProgressBar_SetPercent) == 0x000004, "Wrong size on UMGTallyProgressBar_SetPercent");
static_assert(offsetof(UMGTallyProgressBar_SetPercent, value) == 0x000000, "Member 'UMGTallyProgressBar_SetPercent::value' has a wrong offset!");

// Function DeadByDaylight.UMGTallyProgressBar.GetPipsCount
// 0x0004 (0x0004 - 0x0000)
struct UMGTallyProgressBar_GetPipsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyProgressBar_GetPipsCount) == 0x000004, "Wrong alignment on UMGTallyProgressBar_GetPipsCount");
static_assert(sizeof(UMGTallyProgressBar_GetPipsCount) == 0x000004, "Wrong size on UMGTallyProgressBar_GetPipsCount");
static_assert(offsetof(UMGTallyProgressBar_GetPipsCount, ReturnValue) == 0x000000, "Member 'UMGTallyProgressBar_GetPipsCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.VaultDefinition.GetSpeedCurveToUse
// 0x0008 (0x0008 - 0x0000)
struct VaultDefinition_GetSpeedCurveToUse final
{
public:
	class UCurveFloat*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VaultDefinition_GetSpeedCurveToUse) == 0x000008, "Wrong alignment on VaultDefinition_GetSpeedCurveToUse");
static_assert(sizeof(VaultDefinition_GetSpeedCurveToUse) == 0x000008, "Wrong size on VaultDefinition_GetSpeedCurveToUse");
static_assert(offsetof(VaultDefinition_GetSpeedCurveToUse, ReturnValue) == 0x000000, "Member 'VaultDefinition_GetSpeedCurveToUse::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.VaultDefinition.IsWindowVaultable
// 0x0001 (0x0001 - 0x0000)
struct VaultDefinition_IsWindowVaultable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VaultDefinition_IsWindowVaultable) == 0x000001, "Wrong alignment on VaultDefinition_IsWindowVaultable");
static_assert(sizeof(VaultDefinition_IsWindowVaultable) == 0x000001, "Wrong size on VaultDefinition_IsWindowVaultable");
static_assert(offsetof(VaultDefinition_IsWindowVaultable, ReturnValue) == 0x000000, "Member 'VaultDefinition_IsWindowVaultable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.VaultDefinition.IsWithinHeightDelta
// 0x0010 (0x0010 - 0x0000)
struct VaultDefinition_IsWithinHeightDelta final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VaultDefinition_IsWithinHeightDelta) == 0x000008, "Wrong alignment on VaultDefinition_IsWithinHeightDelta");
static_assert(sizeof(VaultDefinition_IsWithinHeightDelta) == 0x000010, "Wrong size on VaultDefinition_IsWithinHeightDelta");
static_assert(offsetof(VaultDefinition_IsWithinHeightDelta, player) == 0x000000, "Member 'VaultDefinition_IsWithinHeightDelta::player' has a wrong offset!");
static_assert(offsetof(VaultDefinition_IsWithinHeightDelta, ReturnValue) == 0x000008, "Member 'VaultDefinition_IsWithinHeightDelta::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.VaultDefinition.ShouldLaunchCharacter
// 0x0010 (0x0010 - 0x0000)
struct VaultDefinition_ShouldLaunchCharacter final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VaultDefinition_ShouldLaunchCharacter) == 0x000008, "Wrong alignment on VaultDefinition_ShouldLaunchCharacter");
static_assert(sizeof(VaultDefinition_ShouldLaunchCharacter) == 0x000010, "Wrong size on VaultDefinition_ShouldLaunchCharacter");
static_assert(offsetof(VaultDefinition_ShouldLaunchCharacter, player) == 0x000000, "Member 'VaultDefinition_ShouldLaunchCharacter::player' has a wrong offset!");
static_assert(offsetof(VaultDefinition_ShouldLaunchCharacter, ReturnValue) == 0x000008, "Member 'VaultDefinition_ShouldLaunchCharacter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherVaultDefinition.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct SlasherVaultDefinition_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          interrupted;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SlasherVaultDefinition_OnMontageBlendingOut) == 0x000008, "Wrong alignment on SlasherVaultDefinition_OnMontageBlendingOut");
static_assert(sizeof(SlasherVaultDefinition_OnMontageBlendingOut) == 0x000010, "Wrong size on SlasherVaultDefinition_OnMontageBlendingOut");
static_assert(offsetof(SlasherVaultDefinition_OnMontageBlendingOut, montage) == 0x000000, "Member 'SlasherVaultDefinition_OnMontageBlendingOut::montage' has a wrong offset!");
static_assert(offsetof(SlasherVaultDefinition_OnMontageBlendingOut, interrupted) == 0x000008, "Member 'SlasherVaultDefinition_OnMontageBlendingOut::interrupted' has a wrong offset!");

// Function DeadByDaylight.SlasherVaultDefinition.OnMovementModeChanged
// 0x0010 (0x0010 - 0x0000)
struct SlasherVaultDefinition_OnMovementModeChanged final
{
public:
	class ACharacter*                             character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 prevMovementMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         previousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SlasherVaultDefinition_OnMovementModeChanged) == 0x000008, "Wrong alignment on SlasherVaultDefinition_OnMovementModeChanged");
static_assert(sizeof(SlasherVaultDefinition_OnMovementModeChanged) == 0x000010, "Wrong size on SlasherVaultDefinition_OnMovementModeChanged");
static_assert(offsetof(SlasherVaultDefinition_OnMovementModeChanged, character) == 0x000000, "Member 'SlasherVaultDefinition_OnMovementModeChanged::character' has a wrong offset!");
static_assert(offsetof(SlasherVaultDefinition_OnMovementModeChanged, prevMovementMode) == 0x000008, "Member 'SlasherVaultDefinition_OnMovementModeChanged::prevMovementMode' has a wrong offset!");
static_assert(offsetof(SlasherVaultDefinition_OnMovementModeChanged, previousCustomMode) == 0x000009, "Member 'SlasherVaultDefinition_OnMovementModeChanged::previousCustomMode' has a wrong offset!");

// Function DeadByDaylight.UMGTallyScoreboardPlayerInfoWidget.HandleAddFriendEvent
// 0x000C (0x000C - 0x0000)
struct UMGTallyScoreboardPlayerInfoWidget_HandleAddFriendEvent final
{
public:
	class FName                                   buttonID;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyScoreboardPlayerInfoWidget_HandleAddFriendEvent) == 0x000004, "Wrong alignment on UMGTallyScoreboardPlayerInfoWidget_HandleAddFriendEvent");
static_assert(sizeof(UMGTallyScoreboardPlayerInfoWidget_HandleAddFriendEvent) == 0x00000C, "Wrong size on UMGTallyScoreboardPlayerInfoWidget_HandleAddFriendEvent");
static_assert(offsetof(UMGTallyScoreboardPlayerInfoWidget_HandleAddFriendEvent, buttonID) == 0x000000, "Member 'UMGTallyScoreboardPlayerInfoWidget_HandleAddFriendEvent::buttonID' has a wrong offset!");

// Function DeadByDaylight.UMGTallyScoreboardPlayerInfoWidget.HandleReportEvent
// 0x000C (0x000C - 0x0000)
struct UMGTallyScoreboardPlayerInfoWidget_HandleReportEvent final
{
public:
	class FName                                   buttonID;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyScoreboardPlayerInfoWidget_HandleReportEvent) == 0x000004, "Wrong alignment on UMGTallyScoreboardPlayerInfoWidget_HandleReportEvent");
static_assert(sizeof(UMGTallyScoreboardPlayerInfoWidget_HandleReportEvent) == 0x00000C, "Wrong size on UMGTallyScoreboardPlayerInfoWidget_HandleReportEvent");
static_assert(offsetof(UMGTallyScoreboardPlayerInfoWidget_HandleReportEvent, buttonID) == 0x000000, "Member 'UMGTallyScoreboardPlayerInfoWidget_HandleReportEvent::buttonID' has a wrong offset!");

// Function DeadByDaylight.UMGTallyScoreboardPlayerInfoWidget.SetPlayerLoadoutBlocked
// 0x0001 (0x0001 - 0x0000)
struct UMGTallyScoreboardPlayerInfoWidget_SetPlayerLoadoutBlocked final
{
public:
	bool                                          isBlock;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyScoreboardPlayerInfoWidget_SetPlayerLoadoutBlocked) == 0x000001, "Wrong alignment on UMGTallyScoreboardPlayerInfoWidget_SetPlayerLoadoutBlocked");
static_assert(sizeof(UMGTallyScoreboardPlayerInfoWidget_SetPlayerLoadoutBlocked) == 0x000001, "Wrong size on UMGTallyScoreboardPlayerInfoWidget_SetPlayerLoadoutBlocked");
static_assert(offsetof(UMGTallyScoreboardPlayerInfoWidget_SetPlayerLoadoutBlocked, isBlock) == 0x000000, "Member 'UMGTallyScoreboardPlayerInfoWidget_SetPlayerLoadoutBlocked::isBlock' has a wrong offset!");

// Function DeadByDaylight.UMGTallyScoreboardPlayerInfoWidget.SetPlayerReported
// 0x0001 (0x0001 - 0x0000)
struct UMGTallyScoreboardPlayerInfoWidget_SetPlayerReported final
{
public:
	bool                                          isReport;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyScoreboardPlayerInfoWidget_SetPlayerReported) == 0x000001, "Wrong alignment on UMGTallyScoreboardPlayerInfoWidget_SetPlayerReported");
static_assert(sizeof(UMGTallyScoreboardPlayerInfoWidget_SetPlayerReported) == 0x000001, "Wrong size on UMGTallyScoreboardPlayerInfoWidget_SetPlayerReported");
static_assert(offsetof(UMGTallyScoreboardPlayerInfoWidget_SetPlayerReported, isReport) == 0x000000, "Member 'UMGTallyScoreboardPlayerInfoWidget_SetPlayerReported::isReport' has a wrong offset!");

// Function DeadByDaylight.UMGTallyScoreboardPlayerInfoWidget.SetPlayerScoreData
// 0x02F0 (0x02F0 - 0x0000)
struct UMGTallyScoreboardPlayerInfoWidget_SetPlayerScoreData final
{
public:
	struct FTallyPlayerResultData                 resultData;                                        // 0x0000(0x02F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyScoreboardPlayerInfoWidget_SetPlayerScoreData) == 0x000008, "Wrong alignment on UMGTallyScoreboardPlayerInfoWidget_SetPlayerScoreData");
static_assert(sizeof(UMGTallyScoreboardPlayerInfoWidget_SetPlayerScoreData) == 0x0002F0, "Wrong size on UMGTallyScoreboardPlayerInfoWidget_SetPlayerScoreData");
static_assert(offsetof(UMGTallyScoreboardPlayerInfoWidget_SetPlayerScoreData, resultData) == 0x000000, "Member 'UMGTallyScoreboardPlayerInfoWidget_SetPlayerScoreData::resultData' has a wrong offset!");

// Function DeadByDaylight.SplashScreen.SetVersionText
// 0x0010 (0x0010 - 0x0000)
struct SplashScreen_SetVersionText final
{
public:
	class FString                                 versionText;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplashScreen_SetVersionText) == 0x000008, "Wrong alignment on SplashScreen_SetVersionText");
static_assert(sizeof(SplashScreen_SetVersionText) == 0x000010, "Wrong size on SplashScreen_SetVersionText");
static_assert(offsetof(SplashScreen_SetVersionText, versionText) == 0x000000, "Member 'SplashScreen_SetVersionText::versionText' has a wrong offset!");

// Function DeadByDaylight.SplashScreen.ShowSpecialEventVisual
// 0x0060 (0x0060 - 0x0000)
struct SplashScreen_ShowSpecialEventVisual final
{
public:
	struct FSpecialEventUIInfo                    eventInfo;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplashScreen_ShowSpecialEventVisual) == 0x000008, "Wrong alignment on SplashScreen_ShowSpecialEventVisual");
static_assert(sizeof(SplashScreen_ShowSpecialEventVisual) == 0x000060, "Wrong size on SplashScreen_ShowSpecialEventVisual");
static_assert(offsetof(SplashScreen_ShowSpecialEventVisual, eventInfo) == 0x000000, "Member 'SplashScreen_ShowSpecialEventVisual::eventInfo' has a wrong offset!");

// Function DeadByDaylight.SplashScreen.UpdateLoadingProgression
// 0x0010 (0x0010 - 0x0000)
struct SplashScreen_UpdateLoadingProgression final
{
public:
	class FString                                 loadingProgression;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplashScreen_UpdateLoadingProgression) == 0x000008, "Wrong alignment on SplashScreen_UpdateLoadingProgression");
static_assert(sizeof(SplashScreen_UpdateLoadingProgression) == 0x000010, "Wrong size on SplashScreen_UpdateLoadingProgression");
static_assert(offsetof(SplashScreen_UpdateLoadingProgression, loadingProgression) == 0x000000, "Member 'SplashScreen_UpdateLoadingProgression::loadingProgression' has a wrong offset!");

// Function DeadByDaylight.StalkedComponent.HasStalkPoints
// 0x0001 (0x0001 - 0x0000)
struct StalkedComponent_HasStalkPoints final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkedComponent_HasStalkPoints) == 0x000001, "Wrong alignment on StalkedComponent_HasStalkPoints");
static_assert(sizeof(StalkedComponent_HasStalkPoints) == 0x000001, "Wrong size on StalkedComponent_HasStalkPoints");
static_assert(offsetof(StalkedComponent_HasStalkPoints, ReturnValue) == 0x000000, "Member 'StalkedComponent_HasStalkPoints::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.OnPlayerBeingStalkedChanged
// 0x0001 (0x0001 - 0x0000)
struct StalkerComponent_OnPlayerBeingStalkedChanged final
{
public:
	bool                                          isBeingStalked;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_OnPlayerBeingStalkedChanged) == 0x000001, "Wrong alignment on StalkerComponent_OnPlayerBeingStalkedChanged");
static_assert(sizeof(StalkerComponent_OnPlayerBeingStalkedChanged) == 0x000001, "Wrong size on StalkerComponent_OnPlayerBeingStalkedChanged");
static_assert(offsetof(StalkerComponent_OnPlayerBeingStalkedChanged, isBeingStalked) == 0x000000, "Member 'StalkerComponent_OnPlayerBeingStalkedChanged::isBeingStalked' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.CanStalk
// 0x0001 (0x0001 - 0x0000)
struct StalkerComponent_CanStalk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_CanStalk) == 0x000001, "Wrong alignment on StalkerComponent_CanStalk");
static_assert(sizeof(StalkerComponent_CanStalk) == 0x000001, "Wrong size on StalkerComponent_CanStalk");
static_assert(offsetof(StalkerComponent_CanStalk, ReturnValue) == 0x000000, "Member 'StalkerComponent_CanStalk::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.GetMaxStalkingPoints
// 0x0004 (0x0004 - 0x0000)
struct StalkerComponent_GetMaxStalkingPoints final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_GetMaxStalkingPoints) == 0x000004, "Wrong alignment on StalkerComponent_GetMaxStalkingPoints");
static_assert(sizeof(StalkerComponent_GetMaxStalkingPoints) == 0x000004, "Wrong size on StalkerComponent_GetMaxStalkingPoints");
static_assert(offsetof(StalkerComponent_GetMaxStalkingPoints, ReturnValue) == 0x000000, "Member 'StalkerComponent_GetMaxStalkingPoints::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.GetPercentStalkingPoints
// 0x0004 (0x0004 - 0x0000)
struct StalkerComponent_GetPercentStalkingPoints final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_GetPercentStalkingPoints) == 0x000004, "Wrong alignment on StalkerComponent_GetPercentStalkingPoints");
static_assert(sizeof(StalkerComponent_GetPercentStalkingPoints) == 0x000004, "Wrong size on StalkerComponent_GetPercentStalkingPoints");
static_assert(offsetof(StalkerComponent_GetPercentStalkingPoints, ReturnValue) == 0x000000, "Member 'StalkerComponent_GetPercentStalkingPoints::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.GetScoreMultiplier
// 0x0004 (0x0004 - 0x0000)
struct StalkerComponent_GetScoreMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_GetScoreMultiplier) == 0x000004, "Wrong alignment on StalkerComponent_GetScoreMultiplier");
static_assert(sizeof(StalkerComponent_GetScoreMultiplier) == 0x000004, "Wrong size on StalkerComponent_GetScoreMultiplier");
static_assert(offsetof(StalkerComponent_GetScoreMultiplier, ReturnValue) == 0x000000, "Member 'StalkerComponent_GetScoreMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.GetTotalStalkingPoints
// 0x0004 (0x0004 - 0x0000)
struct StalkerComponent_GetTotalStalkingPoints final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_GetTotalStalkingPoints) == 0x000004, "Wrong alignment on StalkerComponent_GetTotalStalkingPoints");
static_assert(sizeof(StalkerComponent_GetTotalStalkingPoints) == 0x000004, "Wrong size on StalkerComponent_GetTotalStalkingPoints");
static_assert(offsetof(StalkerComponent_GetTotalStalkingPoints, ReturnValue) == 0x000000, "Member 'StalkerComponent_GetTotalStalkingPoints::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.HasMaxStalkPoints
// 0x0001 (0x0001 - 0x0000)
struct StalkerComponent_HasMaxStalkPoints final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_HasMaxStalkPoints) == 0x000001, "Wrong alignment on StalkerComponent_HasMaxStalkPoints");
static_assert(sizeof(StalkerComponent_HasMaxStalkPoints) == 0x000001, "Wrong size on StalkerComponent_HasMaxStalkPoints");
static_assert(offsetof(StalkerComponent_HasMaxStalkPoints, ReturnValue) == 0x000000, "Member 'StalkerComponent_HasMaxStalkPoints::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.IsStalkingSomeone
// 0x0001 (0x0001 - 0x0000)
struct StalkerComponent_IsStalkingSomeone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_IsStalkingSomeone) == 0x000001, "Wrong alignment on StalkerComponent_IsStalkingSomeone");
static_assert(sizeof(StalkerComponent_IsStalkingSomeone) == 0x000001, "Wrong size on StalkerComponent_IsStalkingSomeone");
static_assert(offsetof(StalkerComponent_IsStalkingSomeone, ReturnValue) == 0x000000, "Member 'StalkerComponent_IsStalkingSomeone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.AddStateTag
// 0x0020 (0x0020 - 0x0000)
struct StateTagUtilities_AddStateTag final
{
public:
	TScriptInterface<class IObjectStateProvider>  objectStateProvider;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTag                           tag;                                               // 0x0010(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_AddStateTag) == 0x000008, "Wrong alignment on StateTagUtilities_AddStateTag");
static_assert(sizeof(StateTagUtilities_AddStateTag) == 0x000020, "Wrong size on StateTagUtilities_AddStateTag");
static_assert(offsetof(StateTagUtilities_AddStateTag, objectStateProvider) == 0x000000, "Member 'StateTagUtilities_AddStateTag::objectStateProvider' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_AddStateTag, tag) == 0x000010, "Member 'StateTagUtilities_AddStateTag::tag' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.AddStateTagToPlayer
// 0x0018 (0x0018 - 0x0000)
struct StateTagUtilities_AddStateTagToPlayer final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           tag;                                               // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_AddStateTagToPlayer) == 0x000008, "Wrong alignment on StateTagUtilities_AddStateTagToPlayer");
static_assert(sizeof(StateTagUtilities_AddStateTagToPlayer) == 0x000018, "Wrong size on StateTagUtilities_AddStateTagToPlayer");
static_assert(offsetof(StateTagUtilities_AddStateTagToPlayer, player) == 0x000000, "Member 'StateTagUtilities_AddStateTagToPlayer::player' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_AddStateTagToPlayer, tag) == 0x000008, "Member 'StateTagUtilities_AddStateTagToPlayer::tag' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.CurrentInteractionHasAnyStateTag
// 0x0030 (0x0030 - 0x0000)
struct StateTagUtilities_CurrentInteractionHasAnyStateTag final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  tags;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_CurrentInteractionHasAnyStateTag) == 0x000008, "Wrong alignment on StateTagUtilities_CurrentInteractionHasAnyStateTag");
static_assert(sizeof(StateTagUtilities_CurrentInteractionHasAnyStateTag) == 0x000030, "Wrong size on StateTagUtilities_CurrentInteractionHasAnyStateTag");
static_assert(offsetof(StateTagUtilities_CurrentInteractionHasAnyStateTag, player) == 0x000000, "Member 'StateTagUtilities_CurrentInteractionHasAnyStateTag::player' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_CurrentInteractionHasAnyStateTag, tags) == 0x000008, "Member 'StateTagUtilities_CurrentInteractionHasAnyStateTag::tags' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_CurrentInteractionHasAnyStateTag, ReturnValue) == 0x000028, "Member 'StateTagUtilities_CurrentInteractionHasAnyStateTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.CurrentInteractionHasStateTag
// 0x0018 (0x0018 - 0x0000)
struct StateTagUtilities_CurrentInteractionHasStateTag final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           tag;                                               // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_CurrentInteractionHasStateTag) == 0x000008, "Wrong alignment on StateTagUtilities_CurrentInteractionHasStateTag");
static_assert(sizeof(StateTagUtilities_CurrentInteractionHasStateTag) == 0x000018, "Wrong size on StateTagUtilities_CurrentInteractionHasStateTag");
static_assert(offsetof(StateTagUtilities_CurrentInteractionHasStateTag, player) == 0x000000, "Member 'StateTagUtilities_CurrentInteractionHasStateTag::player' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_CurrentInteractionHasStateTag, tag) == 0x000008, "Member 'StateTagUtilities_CurrentInteractionHasStateTag::tag' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_CurrentInteractionHasStateTag, ReturnValue) == 0x000014, "Member 'StateTagUtilities_CurrentInteractionHasStateTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.HasAnyStateTags
// 0x0038 (0x0038 - 0x0000)
struct StateTagUtilities_HasAnyStateTags final
{
public:
	TScriptInterface<class IObjectStateProvider>  objectStateProvider;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  tags;                                              // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_HasAnyStateTags) == 0x000008, "Wrong alignment on StateTagUtilities_HasAnyStateTags");
static_assert(sizeof(StateTagUtilities_HasAnyStateTags) == 0x000038, "Wrong size on StateTagUtilities_HasAnyStateTags");
static_assert(offsetof(StateTagUtilities_HasAnyStateTags, objectStateProvider) == 0x000000, "Member 'StateTagUtilities_HasAnyStateTags::objectStateProvider' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_HasAnyStateTags, tags) == 0x000010, "Member 'StateTagUtilities_HasAnyStateTags::tags' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_HasAnyStateTags, ReturnValue) == 0x000030, "Member 'StateTagUtilities_HasAnyStateTags::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.HasStateTag
// 0x0020 (0x0020 - 0x0000)
struct StateTagUtilities_HasStateTag final
{
public:
	TScriptInterface<class IObjectStateProvider>  objectStateProvider;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTag                           tag;                                               // 0x0010(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_HasStateTag) == 0x000008, "Wrong alignment on StateTagUtilities_HasStateTag");
static_assert(sizeof(StateTagUtilities_HasStateTag) == 0x000020, "Wrong size on StateTagUtilities_HasStateTag");
static_assert(offsetof(StateTagUtilities_HasStateTag, objectStateProvider) == 0x000000, "Member 'StateTagUtilities_HasStateTag::objectStateProvider' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_HasStateTag, tag) == 0x000010, "Member 'StateTagUtilities_HasStateTag::tag' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_HasStateTag, ReturnValue) == 0x00001C, "Member 'StateTagUtilities_HasStateTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.RemoveStateTag
// 0x0020 (0x0020 - 0x0000)
struct StateTagUtilities_RemoveStateTag final
{
public:
	TScriptInterface<class IObjectStateProvider>  objectStateProvider;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTag                           tag;                                               // 0x0010(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_RemoveStateTag) == 0x000008, "Wrong alignment on StateTagUtilities_RemoveStateTag");
static_assert(sizeof(StateTagUtilities_RemoveStateTag) == 0x000020, "Wrong size on StateTagUtilities_RemoveStateTag");
static_assert(offsetof(StateTagUtilities_RemoveStateTag, objectStateProvider) == 0x000000, "Member 'StateTagUtilities_RemoveStateTag::objectStateProvider' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_RemoveStateTag, tag) == 0x000010, "Member 'StateTagUtilities_RemoveStateTag::tag' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.RemoveStateTagToPlayer
// 0x0018 (0x0018 - 0x0000)
struct StateTagUtilities_RemoveStateTagToPlayer final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           tag;                                               // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_RemoveStateTagToPlayer) == 0x000008, "Wrong alignment on StateTagUtilities_RemoveStateTagToPlayer");
static_assert(sizeof(StateTagUtilities_RemoveStateTagToPlayer) == 0x000018, "Wrong size on StateTagUtilities_RemoveStateTagToPlayer");
static_assert(offsetof(StateTagUtilities_RemoveStateTagToPlayer, player) == 0x000000, "Member 'StateTagUtilities_RemoveStateTagToPlayer::player' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_RemoveStateTagToPlayer, tag) == 0x000008, "Member 'StateTagUtilities_RemoveStateTagToPlayer::tag' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterSelectionWidget.BroadcastSelectedCharacter
// 0x0004 (0x0004 - 0x0000)
struct UMGCharacterSelectionWidget_BroadcastSelectedCharacter final
{
public:
	int32                                         characterIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterSelectionWidget_BroadcastSelectedCharacter) == 0x000004, "Wrong alignment on UMGCharacterSelectionWidget_BroadcastSelectedCharacter");
static_assert(sizeof(UMGCharacterSelectionWidget_BroadcastSelectedCharacter) == 0x000004, "Wrong size on UMGCharacterSelectionWidget_BroadcastSelectedCharacter");
static_assert(offsetof(UMGCharacterSelectionWidget_BroadcastSelectedCharacter, characterIndex) == 0x000000, "Member 'UMGCharacterSelectionWidget_BroadcastSelectedCharacter::characterIndex' has a wrong offset!");

// Function DeadByDaylight.UMGChargeableInteractionWidget.SetItemChargeColor
// 0x0001 (0x0001 - 0x0000)
struct UMGChargeableInteractionWidget_SetItemChargeColor final
{
public:
	EBarColor                                     barColor;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGChargeableInteractionWidget_SetItemChargeColor) == 0x000001, "Wrong alignment on UMGChargeableInteractionWidget_SetItemChargeColor");
static_assert(sizeof(UMGChargeableInteractionWidget_SetItemChargeColor) == 0x000001, "Wrong size on UMGChargeableInteractionWidget_SetItemChargeColor");
static_assert(offsetof(UMGChargeableInteractionWidget_SetItemChargeColor, barColor) == 0x000000, "Member 'UMGChargeableInteractionWidget_SetItemChargeColor::barColor' has a wrong offset!");

// Function DeadByDaylight.UMGChargeableInteractionWidget.SetItemChargeValue
// 0x0004 (0x0004 - 0x0000)
struct UMGChargeableInteractionWidget_SetItemChargeValue final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGChargeableInteractionWidget_SetItemChargeValue) == 0x000004, "Wrong alignment on UMGChargeableInteractionWidget_SetItemChargeValue");
static_assert(sizeof(UMGChargeableInteractionWidget_SetItemChargeValue) == 0x000004, "Wrong size on UMGChargeableInteractionWidget_SetItemChargeValue");
static_assert(offsetof(UMGChargeableInteractionWidget_SetItemChargeValue, value) == 0x000000, "Member 'UMGChargeableInteractionWidget_SetItemChargeValue::value' has a wrong offset!");

// Function DeadByDaylight.UMGChargeableInteractionWidget.SetMessage
// 0x0010 (0x0010 - 0x0000)
struct UMGChargeableInteractionWidget_SetMessage final
{
public:
	class FString                                 message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGChargeableInteractionWidget_SetMessage) == 0x000008, "Wrong alignment on UMGChargeableInteractionWidget_SetMessage");
static_assert(sizeof(UMGChargeableInteractionWidget_SetMessage) == 0x000010, "Wrong size on UMGChargeableInteractionWidget_SetMessage");
static_assert(offsetof(UMGChargeableInteractionWidget_SetMessage, message) == 0x000000, "Member 'UMGChargeableInteractionWidget_SetMessage::message' has a wrong offset!");

// Function DeadByDaylight.UMGChargeableInteractionWidget.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct UMGChargeableInteractionWidget_SetOpacity final
{
public:
	float                                         opacity;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGChargeableInteractionWidget_SetOpacity) == 0x000004, "Wrong alignment on UMGChargeableInteractionWidget_SetOpacity");
static_assert(sizeof(UMGChargeableInteractionWidget_SetOpacity) == 0x000004, "Wrong size on UMGChargeableInteractionWidget_SetOpacity");
static_assert(offsetof(UMGChargeableInteractionWidget_SetOpacity, opacity) == 0x000000, "Member 'UMGChargeableInteractionWidget_SetOpacity::opacity' has a wrong offset!");

// Function DeadByDaylight.UMGChargeableInteractionWidget.SetProficiencyData
// 0x0050 (0x0050 - 0x0000)
struct UMGChargeableInteractionWidget_SetProficiencyData final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStatusEffectSlotData                  proficiencyData;                                   // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGChargeableInteractionWidget_SetProficiencyData) == 0x000008, "Wrong alignment on UMGChargeableInteractionWidget_SetProficiencyData");
static_assert(sizeof(UMGChargeableInteractionWidget_SetProficiencyData) == 0x000050, "Wrong size on UMGChargeableInteractionWidget_SetProficiencyData");
static_assert(offsetof(UMGChargeableInteractionWidget_SetProficiencyData, index) == 0x000000, "Member 'UMGChargeableInteractionWidget_SetProficiencyData::index' has a wrong offset!");
static_assert(offsetof(UMGChargeableInteractionWidget_SetProficiencyData, proficiencyData) == 0x000008, "Member 'UMGChargeableInteractionWidget_SetProficiencyData::proficiencyData' has a wrong offset!");

// Function DeadByDaylight.UMGChargeableInteractionWidget.SetProgressBarColor
// 0x0001 (0x0001 - 0x0000)
struct UMGChargeableInteractionWidget_SetProgressBarColor final
{
public:
	EBarColor                                     barColor;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGChargeableInteractionWidget_SetProgressBarColor) == 0x000001, "Wrong alignment on UMGChargeableInteractionWidget_SetProgressBarColor");
static_assert(sizeof(UMGChargeableInteractionWidget_SetProgressBarColor) == 0x000001, "Wrong size on UMGChargeableInteractionWidget_SetProgressBarColor");
static_assert(offsetof(UMGChargeableInteractionWidget_SetProgressBarColor, barColor) == 0x000000, "Member 'UMGChargeableInteractionWidget_SetProgressBarColor::barColor' has a wrong offset!");

// Function DeadByDaylight.UMGChargeableInteractionWidget.SetProgressbarValue
// 0x0004 (0x0004 - 0x0000)
struct UMGChargeableInteractionWidget_SetProgressbarValue final
{
public:
	float                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGChargeableInteractionWidget_SetProgressbarValue) == 0x000004, "Wrong alignment on UMGChargeableInteractionWidget_SetProgressbarValue");
static_assert(sizeof(UMGChargeableInteractionWidget_SetProgressbarValue) == 0x000004, "Wrong size on UMGChargeableInteractionWidget_SetProgressbarValue");
static_assert(offsetof(UMGChargeableInteractionWidget_SetProgressbarValue, value) == 0x000000, "Member 'UMGChargeableInteractionWidget_SetProgressbarValue::value' has a wrong offset!");

// Function DeadByDaylight.UMGChargeableInteractionWidget.SetSecondaryMessage
// 0x0010 (0x0010 - 0x0000)
struct UMGChargeableInteractionWidget_SetSecondaryMessage final
{
public:
	class FString                                 secondMessage;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGChargeableInteractionWidget_SetSecondaryMessage) == 0x000008, "Wrong alignment on UMGChargeableInteractionWidget_SetSecondaryMessage");
static_assert(sizeof(UMGChargeableInteractionWidget_SetSecondaryMessage) == 0x000010, "Wrong size on UMGChargeableInteractionWidget_SetSecondaryMessage");
static_assert(offsetof(UMGChargeableInteractionWidget_SetSecondaryMessage, secondMessage) == 0x000000, "Member 'UMGChargeableInteractionWidget_SetSecondaryMessage::secondMessage' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnBuyCurrencyBundle
// 0x0004 (0x0004 - 0x0000)
struct StoreScreen_OnBuyCurrencyBundle final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnBuyCurrencyBundle) == 0x000004, "Wrong alignment on StoreScreen_OnBuyCurrencyBundle");
static_assert(sizeof(StoreScreen_OnBuyCurrencyBundle) == 0x000004, "Wrong size on StoreScreen_OnBuyCurrencyBundle");
static_assert(offsetof(StoreScreen_OnBuyCurrencyBundle, index) == 0x000000, "Member 'StoreScreen_OnBuyCurrencyBundle::index' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnEquipItem
// 0x0010 (0x0010 - 0x0000)
struct StoreScreen_OnEquipItem final
{
public:
	class FString                                 itemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnEquipItem) == 0x000008, "Wrong alignment on StoreScreen_OnEquipItem");
static_assert(sizeof(StoreScreen_OnEquipItem) == 0x000010, "Wrong size on StoreScreen_OnEquipItem");
static_assert(offsetof(StoreScreen_OnEquipItem, itemId) == 0x000000, "Member 'StoreScreen_OnEquipItem::itemId' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnFeaturedBannerDlcSelected
// 0x0010 (0x0010 - 0x0000)
struct StoreScreen_OnFeaturedBannerDlcSelected final
{
public:
	class FString                                 dlcId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnFeaturedBannerDlcSelected) == 0x000008, "Wrong alignment on StoreScreen_OnFeaturedBannerDlcSelected");
static_assert(sizeof(StoreScreen_OnFeaturedBannerDlcSelected) == 0x000010, "Wrong size on StoreScreen_OnFeaturedBannerDlcSelected");
static_assert(offsetof(StoreScreen_OnFeaturedBannerDlcSelected, dlcId) == 0x000000, "Member 'StoreScreen_OnFeaturedBannerDlcSelected::dlcId' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnFeaturedBannerItemSelected
// 0x0018 (0x0018 - 0x0000)
struct StoreScreen_OnFeaturedBannerItemSelected final
{
public:
	class FString                                 itemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isOutfit;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreScreen_OnFeaturedBannerItemSelected) == 0x000008, "Wrong alignment on StoreScreen_OnFeaturedBannerItemSelected");
static_assert(sizeof(StoreScreen_OnFeaturedBannerItemSelected) == 0x000018, "Wrong size on StoreScreen_OnFeaturedBannerItemSelected");
static_assert(offsetof(StoreScreen_OnFeaturedBannerItemSelected, itemId) == 0x000000, "Member 'StoreScreen_OnFeaturedBannerItemSelected::itemId' has a wrong offset!");
static_assert(offsetof(StoreScreen_OnFeaturedBannerItemSelected, isOutfit) == 0x000010, "Member 'StoreScreen_OnFeaturedBannerItemSelected::isOutfit' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnFeaturedButtonSelected
// 0x0004 (0x0004 - 0x0000)
struct StoreScreen_OnFeaturedButtonSelected final
{
public:
	int32                                         linkIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnFeaturedButtonSelected) == 0x000004, "Wrong alignment on StoreScreen_OnFeaturedButtonSelected");
static_assert(sizeof(StoreScreen_OnFeaturedButtonSelected) == 0x000004, "Wrong size on StoreScreen_OnFeaturedButtonSelected");
static_assert(offsetof(StoreScreen_OnFeaturedButtonSelected, linkIndex) == 0x000000, "Member 'StoreScreen_OnFeaturedButtonSelected::linkIndex' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnFeaturedCharacterSelected
// 0x0004 (0x0004 - 0x0000)
struct StoreScreen_OnFeaturedCharacterSelected final
{
public:
	int32                                         characterIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnFeaturedCharacterSelected) == 0x000004, "Wrong alignment on StoreScreen_OnFeaturedCharacterSelected");
static_assert(sizeof(StoreScreen_OnFeaturedCharacterSelected) == 0x000004, "Wrong size on StoreScreen_OnFeaturedCharacterSelected");
static_assert(offsetof(StoreScreen_OnFeaturedCharacterSelected, characterIndex) == 0x000000, "Member 'StoreScreen_OnFeaturedCharacterSelected::characterIndex' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnFeaturedStoreItemSelected
// 0x0018 (0x0018 - 0x0000)
struct StoreScreen_OnFeaturedStoreItemSelected final
{
public:
	class FString                                 itemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isOutfit;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreScreen_OnFeaturedStoreItemSelected) == 0x000008, "Wrong alignment on StoreScreen_OnFeaturedStoreItemSelected");
static_assert(sizeof(StoreScreen_OnFeaturedStoreItemSelected) == 0x000018, "Wrong size on StoreScreen_OnFeaturedStoreItemSelected");
static_assert(offsetof(StoreScreen_OnFeaturedStoreItemSelected, itemId) == 0x000000, "Member 'StoreScreen_OnFeaturedStoreItemSelected::itemId' has a wrong offset!");
static_assert(offsetof(StoreScreen_OnFeaturedStoreItemSelected, isOutfit) == 0x000010, "Member 'StoreScreen_OnFeaturedStoreItemSelected::isOutfit' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnFiltersUpdated
// 0x000A (0x000A - 0x0000)
struct StoreScreen_OnFiltersUpdated final
{
public:
	bool                                          all;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          rarityCommon;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          rarityUncommon;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          rarityRare;                                        // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          rarityVeryRare;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          rarityUltraRare;                                   // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          rarityArtifact;                                    // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          rarityLegendary;                                   // 0x0007(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          raritySpecialEvent;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          includeAllOwnedItems;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnFiltersUpdated) == 0x000001, "Wrong alignment on StoreScreen_OnFiltersUpdated");
static_assert(sizeof(StoreScreen_OnFiltersUpdated) == 0x00000A, "Wrong size on StoreScreen_OnFiltersUpdated");
static_assert(offsetof(StoreScreen_OnFiltersUpdated, all) == 0x000000, "Member 'StoreScreen_OnFiltersUpdated::all' has a wrong offset!");
static_assert(offsetof(StoreScreen_OnFiltersUpdated, rarityCommon) == 0x000001, "Member 'StoreScreen_OnFiltersUpdated::rarityCommon' has a wrong offset!");
static_assert(offsetof(StoreScreen_OnFiltersUpdated, rarityUncommon) == 0x000002, "Member 'StoreScreen_OnFiltersUpdated::rarityUncommon' has a wrong offset!");
static_assert(offsetof(StoreScreen_OnFiltersUpdated, rarityRare) == 0x000003, "Member 'StoreScreen_OnFiltersUpdated::rarityRare' has a wrong offset!");
static_assert(offsetof(StoreScreen_OnFiltersUpdated, rarityVeryRare) == 0x000004, "Member 'StoreScreen_OnFiltersUpdated::rarityVeryRare' has a wrong offset!");
static_assert(offsetof(StoreScreen_OnFiltersUpdated, rarityUltraRare) == 0x000005, "Member 'StoreScreen_OnFiltersUpdated::rarityUltraRare' has a wrong offset!");
static_assert(offsetof(StoreScreen_OnFiltersUpdated, rarityArtifact) == 0x000006, "Member 'StoreScreen_OnFiltersUpdated::rarityArtifact' has a wrong offset!");
static_assert(offsetof(StoreScreen_OnFiltersUpdated, rarityLegendary) == 0x000007, "Member 'StoreScreen_OnFiltersUpdated::rarityLegendary' has a wrong offset!");
static_assert(offsetof(StoreScreen_OnFiltersUpdated, raritySpecialEvent) == 0x000008, "Member 'StoreScreen_OnFiltersUpdated::raritySpecialEvent' has a wrong offset!");
static_assert(offsetof(StoreScreen_OnFiltersUpdated, includeAllOwnedItems) == 0x000009, "Member 'StoreScreen_OnFiltersUpdated::includeAllOwnedItems' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnMarketSlotButtonClick
// 0x0004 (0x0004 - 0x0000)
struct StoreScreen_OnMarketSlotButtonClick final
{
public:
	int32                                         slotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnMarketSlotButtonClick) == 0x000004, "Wrong alignment on StoreScreen_OnMarketSlotButtonClick");
static_assert(sizeof(StoreScreen_OnMarketSlotButtonClick) == 0x000004, "Wrong size on StoreScreen_OnMarketSlotButtonClick");
static_assert(offsetof(StoreScreen_OnMarketSlotButtonClick, slotIndex) == 0x000000, "Member 'StoreScreen_OnMarketSlotButtonClick::slotIndex' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnRotateCharacter
// 0x0004 (0x0004 - 0x0000)
struct StoreScreen_OnRotateCharacter final
{
public:
	float                                         mouseDistanceChange;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnRotateCharacter) == 0x000004, "Wrong alignment on StoreScreen_OnRotateCharacter");
static_assert(sizeof(StoreScreen_OnRotateCharacter) == 0x000004, "Wrong size on StoreScreen_OnRotateCharacter");
static_assert(offsetof(StoreScreen_OnRotateCharacter, mouseDistanceChange) == 0x000000, "Member 'StoreScreen_OnRotateCharacter::mouseDistanceChange' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnSearchInputChanged
// 0x0010 (0x0010 - 0x0000)
struct StoreScreen_OnSearchInputChanged final
{
public:
	class FString                                 searchInput;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnSearchInputChanged) == 0x000008, "Wrong alignment on StoreScreen_OnSearchInputChanged");
static_assert(sizeof(StoreScreen_OnSearchInputChanged) == 0x000010, "Wrong size on StoreScreen_OnSearchInputChanged");
static_assert(offsetof(StoreScreen_OnSearchInputChanged, searchInput) == 0x000000, "Member 'StoreScreen_OnSearchInputChanged::searchInput' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnStoreCatalogCategorySelected
// 0x0004 (0x0004 - 0x0000)
struct StoreScreen_OnStoreCatalogCategorySelected final
{
public:
	int32                                         categoryIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnStoreCatalogCategorySelected) == 0x000004, "Wrong alignment on StoreScreen_OnStoreCatalogCategorySelected");
static_assert(sizeof(StoreScreen_OnStoreCatalogCategorySelected) == 0x000004, "Wrong size on StoreScreen_OnStoreCatalogCategorySelected");
static_assert(offsetof(StoreScreen_OnStoreCatalogCategorySelected, categoryIndex) == 0x000000, "Member 'StoreScreen_OnStoreCatalogCategorySelected::categoryIndex' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnStoreCharacterSelected
// 0x0004 (0x0004 - 0x0000)
struct StoreScreen_OnStoreCharacterSelected final
{
public:
	int32                                         characterIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnStoreCharacterSelected) == 0x000004, "Wrong alignment on StoreScreen_OnStoreCharacterSelected");
static_assert(sizeof(StoreScreen_OnStoreCharacterSelected) == 0x000004, "Wrong size on StoreScreen_OnStoreCharacterSelected");
static_assert(offsetof(StoreScreen_OnStoreCharacterSelected, characterIndex) == 0x000000, "Member 'StoreScreen_OnStoreCharacterSelected::characterIndex' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnStoreItemLinkSelected
// 0x0010 (0x0010 - 0x0000)
struct StoreScreen_OnStoreItemLinkSelected final
{
public:
	class FString                                 itemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnStoreItemLinkSelected) == 0x000008, "Wrong alignment on StoreScreen_OnStoreItemLinkSelected");
static_assert(sizeof(StoreScreen_OnStoreItemLinkSelected) == 0x000010, "Wrong size on StoreScreen_OnStoreItemLinkSelected");
static_assert(offsetof(StoreScreen_OnStoreItemLinkSelected, itemId) == 0x000000, "Member 'StoreScreen_OnStoreItemLinkSelected::itemId' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnStoreItemSelected
// 0x0010 (0x0010 - 0x0000)
struct StoreScreen_OnStoreItemSelected final
{
public:
	class FString                                 itemId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnStoreItemSelected) == 0x000008, "Wrong alignment on StoreScreen_OnStoreItemSelected");
static_assert(sizeof(StoreScreen_OnStoreItemSelected) == 0x000010, "Wrong size on StoreScreen_OnStoreItemSelected");
static_assert(offsetof(StoreScreen_OnStoreItemSelected, itemId) == 0x000000, "Member 'StoreScreen_OnStoreItemSelected::itemId' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnTabSelected
// 0x0004 (0x0004 - 0x0000)
struct StoreScreen_OnTabSelected final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnTabSelected) == 0x000004, "Wrong alignment on StoreScreen_OnTabSelected");
static_assert(sizeof(StoreScreen_OnTabSelected) == 0x000004, "Wrong size on StoreScreen_OnTabSelected");
static_assert(offsetof(StoreScreen_OnTabSelected, index) == 0x000000, "Member 'StoreScreen_OnTabSelected::index' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnUnlockWithCurrency
// 0x0018 (0x0018 - 0x0000)
struct StoreScreen_OnUnlockWithCurrency final
{
public:
	int32                                         currencyId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 combinedItem;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnUnlockWithCurrency) == 0x000008, "Wrong alignment on StoreScreen_OnUnlockWithCurrency");
static_assert(sizeof(StoreScreen_OnUnlockWithCurrency) == 0x000018, "Wrong size on StoreScreen_OnUnlockWithCurrency");
static_assert(offsetof(StoreScreen_OnUnlockWithCurrency, currencyId) == 0x000000, "Member 'StoreScreen_OnUnlockWithCurrency::currencyId' has a wrong offset!");
static_assert(offsetof(StoreScreen_OnUnlockWithCurrency, combinedItem) == 0x000008, "Member 'StoreScreen_OnUnlockWithCurrency::combinedItem' has a wrong offset!");

// Function DeadByDaylight.StoreScreen.OnUnlockDlc
// 0x0010 (0x0010 - 0x0000)
struct StoreScreen_OnUnlockDlc final
{
public:
	class FString                                 dlcId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreScreen_OnUnlockDlc) == 0x000008, "Wrong alignment on StoreScreen_OnUnlockDlc");
static_assert(sizeof(StoreScreen_OnUnlockDlc) == 0x000010, "Wrong size on StoreScreen_OnUnlockDlc");
static_assert(offsetof(StoreScreen_OnUnlockDlc, dlcId) == 0x000000, "Member 'StoreScreen_OnUnlockDlc::dlcId' has a wrong offset!");

// Function DeadByDaylight.UMGControlTypeWidget.InitializeDefaultLayout
// 0x0001 (0x0001 - 0x0000)
struct UMGControlTypeWidget_InitializeDefaultLayout final
{
public:
	EAtlantaControlTypeSetting                    controlType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGControlTypeWidget_InitializeDefaultLayout) == 0x000001, "Wrong alignment on UMGControlTypeWidget_InitializeDefaultLayout");
static_assert(sizeof(UMGControlTypeWidget_InitializeDefaultLayout) == 0x000001, "Wrong size on UMGControlTypeWidget_InitializeDefaultLayout");
static_assert(offsetof(UMGControlTypeWidget_InitializeDefaultLayout, controlType) == 0x000000, "Member 'UMGControlTypeWidget_InitializeDefaultLayout::controlType' has a wrong offset!");

// Function DeadByDaylight.UMGControlTypeWidget.IsChecked
// 0x0001 (0x0001 - 0x0000)
struct UMGControlTypeWidget_IsChecked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGControlTypeWidget_IsChecked) == 0x000001, "Wrong alignment on UMGControlTypeWidget_IsChecked");
static_assert(sizeof(UMGControlTypeWidget_IsChecked) == 0x000001, "Wrong size on UMGControlTypeWidget_IsChecked");
static_assert(offsetof(UMGControlTypeWidget_IsChecked, ReturnValue) == 0x000000, "Member 'UMGControlTypeWidget_IsChecked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGControlTypeWidget.SetOptionChecked
// 0x0001 (0x0001 - 0x0000)
struct UMGControlTypeWidget_SetOptionChecked final
{
public:
	bool                                          isChecked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGControlTypeWidget_SetOptionChecked) == 0x000001, "Wrong alignment on UMGControlTypeWidget_SetOptionChecked");
static_assert(sizeof(UMGControlTypeWidget_SetOptionChecked) == 0x000001, "Wrong size on UMGControlTypeWidget_SetOptionChecked");
static_assert(offsetof(UMGControlTypeWidget_SetOptionChecked, isChecked) == 0x000000, "Member 'UMGControlTypeWidget_SetOptionChecked::isChecked' has a wrong offset!");

// Function DeadByDaylight.SubtitlesManager.IsDebuggingSubtitles
// 0x0001 (0x0001 - 0x0000)
struct SubtitlesManager_IsDebuggingSubtitles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesManager_IsDebuggingSubtitles) == 0x000001, "Wrong alignment on SubtitlesManager_IsDebuggingSubtitles");
static_assert(sizeof(SubtitlesManager_IsDebuggingSubtitles) == 0x000001, "Wrong size on SubtitlesManager_IsDebuggingSubtitles");
static_assert(offsetof(SubtitlesManager_IsDebuggingSubtitles, ReturnValue) == 0x000000, "Member 'SubtitlesManager_IsDebuggingSubtitles::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SubtitlesManager.PostAkEventWithSubtitles
// 0x0058 (0x0058 - 0x0000)
struct SubtitlesManager_PostAkEventWithSubtitles final
{
public:
	class UAkGameObject*                          target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkEventWithSubtitle>           akEventRandomizer;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         maxSubtitleDistance;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         callbackMask;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> postEventCallback; // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          externalSources;                                   // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          akEventPlayed;                                     // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SubtitlesManager_PostAkEventWithSubtitles) == 0x000008, "Wrong alignment on SubtitlesManager_PostAkEventWithSubtitles");
static_assert(sizeof(SubtitlesManager_PostAkEventWithSubtitles) == 0x000058, "Wrong size on SubtitlesManager_PostAkEventWithSubtitles");
static_assert(offsetof(SubtitlesManager_PostAkEventWithSubtitles, target) == 0x000000, "Member 'SubtitlesManager_PostAkEventWithSubtitles::target' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_PostAkEventWithSubtitles, akEventRandomizer) == 0x000008, "Member 'SubtitlesManager_PostAkEventWithSubtitles::akEventRandomizer' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_PostAkEventWithSubtitles, maxSubtitleDistance) == 0x000018, "Member 'SubtitlesManager_PostAkEventWithSubtitles::maxSubtitleDistance' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_PostAkEventWithSubtitles, callbackMask) == 0x00001C, "Member 'SubtitlesManager_PostAkEventWithSubtitles::callbackMask' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_PostAkEventWithSubtitles, postEventCallback) == 0x000020, "Member 'SubtitlesManager_PostAkEventWithSubtitles::postEventCallback' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_PostAkEventWithSubtitles, externalSources) == 0x000038, "Member 'SubtitlesManager_PostAkEventWithSubtitles::externalSources' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_PostAkEventWithSubtitles, akEventPlayed) == 0x000048, "Member 'SubtitlesManager_PostAkEventWithSubtitles::akEventPlayed' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_PostAkEventWithSubtitles, ReturnValue) == 0x000050, "Member 'SubtitlesManager_PostAkEventWithSubtitles::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SupplyCrateAnimInstance.OnBeingPriedOpenStarted
// 0x0008 (0x0008 - 0x0000)
struct SupplyCrateAnimInstance_OnBeingPriedOpenStarted final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyCrateAnimInstance_OnBeingPriedOpenStarted) == 0x000008, "Wrong alignment on SupplyCrateAnimInstance_OnBeingPriedOpenStarted");
static_assert(sizeof(SupplyCrateAnimInstance_OnBeingPriedOpenStarted) == 0x000008, "Wrong size on SupplyCrateAnimInstance_OnBeingPriedOpenStarted");
static_assert(offsetof(SupplyCrateAnimInstance_OnBeingPriedOpenStarted, player) == 0x000000, "Member 'SupplyCrateAnimInstance_OnBeingPriedOpenStarted::player' has a wrong offset!");

// Function DeadByDaylight.UMGRankBanner.SetData
// 0x0008 (0x0008 - 0x0000)
struct UMGRankBanner_SetData final
{
public:
	int32                                         rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   playerRole;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGRankBanner_SetData) == 0x000004, "Wrong alignment on UMGRankBanner_SetData");
static_assert(sizeof(UMGRankBanner_SetData) == 0x000008, "Wrong size on UMGRankBanner_SetData");
static_assert(offsetof(UMGRankBanner_SetData, rank) == 0x000000, "Member 'UMGRankBanner_SetData::rank' has a wrong offset!");
static_assert(offsetof(UMGRankBanner_SetData, playerRole) == 0x000004, "Member 'UMGRankBanner_SetData::playerRole' has a wrong offset!");

// Function DeadByDaylight.SurvivorActivityIndicatorComponent.Authority_OnCamperEscape
// 0x0038 (0x0038 - 0x0000)
struct SurvivorActivityIndicatorComponent_Authority_OnCamperEscape final
{
public:
	struct FGameplayTag                           gameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorActivityIndicatorComponent_Authority_OnCamperEscape) == 0x000008, "Wrong alignment on SurvivorActivityIndicatorComponent_Authority_OnCamperEscape");
static_assert(sizeof(SurvivorActivityIndicatorComponent_Authority_OnCamperEscape) == 0x000038, "Wrong size on SurvivorActivityIndicatorComponent_Authority_OnCamperEscape");
static_assert(offsetof(SurvivorActivityIndicatorComponent_Authority_OnCamperEscape, gameplayTag) == 0x000000, "Member 'SurvivorActivityIndicatorComponent_Authority_OnCamperEscape::gameplayTag' has a wrong offset!");
static_assert(offsetof(SurvivorActivityIndicatorComponent_Authority_OnCamperEscape, gameEventData) == 0x000010, "Member 'SurvivorActivityIndicatorComponent_Authority_OnCamperEscape::gameEventData' has a wrong offset!");

// Function DeadByDaylight.SurvivorActivityIndicatorComponent.HandleStartActivityIfStillInEffect
// 0x0038 (0x0038 - 0x0000)
struct SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect final
{
public:
	struct FSurvivorActivity                      activityViewInfo;                                  // 0x0000(0x0028)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           tag;                                               // 0x0028(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect) == 0x000008, "Wrong alignment on SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect");
static_assert(sizeof(SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect) == 0x000038, "Wrong size on SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect");
static_assert(offsetof(SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect, activityViewInfo) == 0x000000, "Member 'SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect::activityViewInfo' has a wrong offset!");
static_assert(offsetof(SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect, tag) == 0x000028, "Member 'SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect::tag' has a wrong offset!");

// Function DeadByDaylight.SurvivorActivityIndicatorComponent.OnChargeableProgressChanged
// 0x0010 (0x0010 - 0x0000)
struct SurvivorActivityIndicatorComponent_OnChargeableProgressChanged final
{
public:
	class UChargeableComponent*                   chargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         totalPercentComplete;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvivorActivityIndicatorComponent_OnChargeableProgressChanged) == 0x000008, "Wrong alignment on SurvivorActivityIndicatorComponent_OnChargeableProgressChanged");
static_assert(sizeof(SurvivorActivityIndicatorComponent_OnChargeableProgressChanged) == 0x000010, "Wrong size on SurvivorActivityIndicatorComponent_OnChargeableProgressChanged");
static_assert(offsetof(SurvivorActivityIndicatorComponent_OnChargeableProgressChanged, chargeableComponent) == 0x000000, "Member 'SurvivorActivityIndicatorComponent_OnChargeableProgressChanged::chargeableComponent' has a wrong offset!");
static_assert(offsetof(SurvivorActivityIndicatorComponent_OnChargeableProgressChanged, totalPercentComplete) == 0x000008, "Member 'SurvivorActivityIndicatorComponent_OnChargeableProgressChanged::totalPercentComplete' has a wrong offset!");

// Function DeadByDaylight.SurvivorActivityIndicatorComponent.OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct SurvivorActivityIndicatorComponent_OnDamageStateChanged final
{
public:
	ECamperDamageState                            oldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            currentDamageState;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorActivityIndicatorComponent_OnDamageStateChanged) == 0x000001, "Wrong alignment on SurvivorActivityIndicatorComponent_OnDamageStateChanged");
static_assert(sizeof(SurvivorActivityIndicatorComponent_OnDamageStateChanged) == 0x000002, "Wrong size on SurvivorActivityIndicatorComponent_OnDamageStateChanged");
static_assert(offsetof(SurvivorActivityIndicatorComponent_OnDamageStateChanged, oldDamageState) == 0x000000, "Member 'SurvivorActivityIndicatorComponent_OnDamageStateChanged::oldDamageState' has a wrong offset!");
static_assert(offsetof(SurvivorActivityIndicatorComponent_OnDamageStateChanged, currentDamageState) == 0x000001, "Member 'SurvivorActivityIndicatorComponent_OnDamageStateChanged::currentDamageState' has a wrong offset!");

// Function DeadByDaylight.SurvivorActivityIndicatorComponent.OnPlayerImmobilizeStateChanged
// 0x0002 (0x0002 - 0x0000)
struct SurvivorActivityIndicatorComponent_OnPlayerImmobilizeStateChanged final
{
public:
	ECamperImmobilizeState                        oldImmobilizeState;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperImmobilizeState                        newImmobilizeState;                                // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorActivityIndicatorComponent_OnPlayerImmobilizeStateChanged) == 0x000001, "Wrong alignment on SurvivorActivityIndicatorComponent_OnPlayerImmobilizeStateChanged");
static_assert(sizeof(SurvivorActivityIndicatorComponent_OnPlayerImmobilizeStateChanged) == 0x000002, "Wrong size on SurvivorActivityIndicatorComponent_OnPlayerImmobilizeStateChanged");
static_assert(offsetof(SurvivorActivityIndicatorComponent_OnPlayerImmobilizeStateChanged, oldImmobilizeState) == 0x000000, "Member 'SurvivorActivityIndicatorComponent_OnPlayerImmobilizeStateChanged::oldImmobilizeState' has a wrong offset!");
static_assert(offsetof(SurvivorActivityIndicatorComponent_OnPlayerImmobilizeStateChanged, newImmobilizeState) == 0x000001, "Member 'SurvivorActivityIndicatorComponent_OnPlayerImmobilizeStateChanged::newImmobilizeState' has a wrong offset!");

// Function DeadByDaylight.SurvivorActivityIndicatorComponent.OnPlayerPickedUp
// 0x0008 (0x0008 - 0x0000)
struct SurvivorActivityIndicatorComponent_OnPlayerPickedUp final
{
public:
	class ADBDPlayer*                             picker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorActivityIndicatorComponent_OnPlayerPickedUp) == 0x000008, "Wrong alignment on SurvivorActivityIndicatorComponent_OnPlayerPickedUp");
static_assert(sizeof(SurvivorActivityIndicatorComponent_OnPlayerPickedUp) == 0x000008, "Wrong size on SurvivorActivityIndicatorComponent_OnPlayerPickedUp");
static_assert(offsetof(SurvivorActivityIndicatorComponent_OnPlayerPickedUp, picker) == 0x000000, "Member 'SurvivorActivityIndicatorComponent_OnPlayerPickedUp::picker' has a wrong offset!");

// Function DeadByDaylight.SurvivorAttackableComponent.Authority_HitCosmetic
// 0x0010 (0x0010 - 0x0000)
struct SurvivorAttackableComponent_Authority_HitCosmetic final
{
public:
	const class AActor*                           attacker;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackType                                   attackType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          causeKO;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isWeaponHit;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvivorAttackableComponent_Authority_HitCosmetic) == 0x000008, "Wrong alignment on SurvivorAttackableComponent_Authority_HitCosmetic");
static_assert(sizeof(SurvivorAttackableComponent_Authority_HitCosmetic) == 0x000010, "Wrong size on SurvivorAttackableComponent_Authority_HitCosmetic");
static_assert(offsetof(SurvivorAttackableComponent_Authority_HitCosmetic, attacker) == 0x000000, "Member 'SurvivorAttackableComponent_Authority_HitCosmetic::attacker' has a wrong offset!");
static_assert(offsetof(SurvivorAttackableComponent_Authority_HitCosmetic, attackType) == 0x000008, "Member 'SurvivorAttackableComponent_Authority_HitCosmetic::attackType' has a wrong offset!");
static_assert(offsetof(SurvivorAttackableComponent_Authority_HitCosmetic, causeKO) == 0x000009, "Member 'SurvivorAttackableComponent_Authority_HitCosmetic::causeKO' has a wrong offset!");
static_assert(offsetof(SurvivorAttackableComponent_Authority_HitCosmetic, isWeaponHit) == 0x00000A, "Member 'SurvivorAttackableComponent_Authority_HitCosmetic::isWeaponHit' has a wrong offset!");

// Function DeadByDaylight.SurvivorAttackableComponent.Multicast_HitCosmetic
// 0x0014 (0x0014 - 0x0000)
struct SurvivorAttackableComponent_Multicast_HitCosmetic final
{
public:
	struct FPlayerHitCosmeticParams               params;                                            // 0x0000(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorAttackableComponent_Multicast_HitCosmetic) == 0x000004, "Wrong alignment on SurvivorAttackableComponent_Multicast_HitCosmetic");
static_assert(sizeof(SurvivorAttackableComponent_Multicast_HitCosmetic) == 0x000014, "Wrong size on SurvivorAttackableComponent_Multicast_HitCosmetic");
static_assert(offsetof(SurvivorAttackableComponent_Multicast_HitCosmetic, params) == 0x000000, "Member 'SurvivorAttackableComponent_Multicast_HitCosmetic::params' has a wrong offset!");

// Function DeadByDaylight.SurvivorAttackableComponent.Multicast_HitCosmetic_NonLocal
// 0x0014 (0x0014 - 0x0000)
struct SurvivorAttackableComponent_Multicast_HitCosmetic_NonLocal final
{
public:
	struct FPlayerHitCosmeticParams               params;                                            // 0x0000(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorAttackableComponent_Multicast_HitCosmetic_NonLocal) == 0x000004, "Wrong alignment on SurvivorAttackableComponent_Multicast_HitCosmetic_NonLocal");
static_assert(sizeof(SurvivorAttackableComponent_Multicast_HitCosmetic_NonLocal) == 0x000014, "Wrong size on SurvivorAttackableComponent_Multicast_HitCosmetic_NonLocal");
static_assert(offsetof(SurvivorAttackableComponent_Multicast_HitCosmetic_NonLocal, params) == 0x000000, "Member 'SurvivorAttackableComponent_Multicast_HitCosmetic_NonLocal::params' has a wrong offset!");

// Function DeadByDaylight.SurvivorBloodFXComponent.SpawnBloodSpurts
// 0x0008 (0x0008 - 0x0000)
struct SurvivorBloodFXComponent_SpawnBloodSpurts final
{
public:
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorBloodFXComponent_SpawnBloodSpurts) == 0x000008, "Wrong alignment on SurvivorBloodFXComponent_SpawnBloodSpurts");
static_assert(sizeof(SurvivorBloodFXComponent_SpawnBloodSpurts) == 0x000008, "Wrong size on SurvivorBloodFXComponent_SpawnBloodSpurts");
static_assert(offsetof(SurvivorBloodFXComponent_SpawnBloodSpurts, ReturnValue) == 0x000000, "Member 'SurvivorBloodFXComponent_SpawnBloodSpurts::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGRitualRefreshButton.SetRefreshButton
// 0x0008 (0x0008 - 0x0000)
struct UMGRitualRefreshButton_SetRefreshButton final
{
public:
	int32                                         currency;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECurrencyType                                 currentyType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isAdsRefresh;                                      // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGRitualRefreshButton_SetRefreshButton) == 0x000004, "Wrong alignment on UMGRitualRefreshButton_SetRefreshButton");
static_assert(sizeof(UMGRitualRefreshButton_SetRefreshButton) == 0x000008, "Wrong size on UMGRitualRefreshButton_SetRefreshButton");
static_assert(offsetof(UMGRitualRefreshButton_SetRefreshButton, currency) == 0x000000, "Member 'UMGRitualRefreshButton_SetRefreshButton::currency' has a wrong offset!");
static_assert(offsetof(UMGRitualRefreshButton_SetRefreshButton, currentyType) == 0x000004, "Member 'UMGRitualRefreshButton_SetRefreshButton::currentyType' has a wrong offset!");
static_assert(offsetof(UMGRitualRefreshButton_SetRefreshButton, isAdsRefresh) == 0x000005, "Member 'UMGRitualRefreshButton_SetRefreshButton::isAdsRefresh' has a wrong offset!");

// Function DeadByDaylight.SurvivorDisconnectionComponent.Authority_OnPlayerDisconnected
// 0x0008 (0x0008 - 0x0000)
struct SurvivorDisconnectionComponent_Authority_OnPlayerDisconnected final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorDisconnectionComponent_Authority_OnPlayerDisconnected) == 0x000008, "Wrong alignment on SurvivorDisconnectionComponent_Authority_OnPlayerDisconnected");
static_assert(sizeof(SurvivorDisconnectionComponent_Authority_OnPlayerDisconnected) == 0x000008, "Wrong size on SurvivorDisconnectionComponent_Authority_OnPlayerDisconnected");
static_assert(offsetof(SurvivorDisconnectionComponent_Authority_OnPlayerDisconnected, player) == 0x000000, "Member 'SurvivorDisconnectionComponent_Authority_OnPlayerDisconnected::player' has a wrong offset!");

// Function DeadByDaylight.SurvivorHitCosmeticHandler.OnMontageStarted
// 0x0028 (0x0028 - 0x0000)
struct SurvivorHitCosmeticHandler_OnMontageStarted final
{
public:
	struct FAnimationMontageDescriptor            animMontageID;                                     // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         playRate;                                          // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvivorHitCosmeticHandler_OnMontageStarted) == 0x000008, "Wrong alignment on SurvivorHitCosmeticHandler_OnMontageStarted");
static_assert(sizeof(SurvivorHitCosmeticHandler_OnMontageStarted) == 0x000028, "Wrong size on SurvivorHitCosmeticHandler_OnMontageStarted");
static_assert(offsetof(SurvivorHitCosmeticHandler_OnMontageStarted, animMontageID) == 0x000000, "Member 'SurvivorHitCosmeticHandler_OnMontageStarted::animMontageID' has a wrong offset!");
static_assert(offsetof(SurvivorHitCosmeticHandler_OnMontageStarted, playRate) == 0x000020, "Member 'SurvivorHitCosmeticHandler_OnMontageStarted::playRate' has a wrong offset!");

// Function DeadByDaylight.SurvivorOutlineUpdateStrategy.GetEffectsProtectingFromKillerAuraReading
// 0x0020 (0x0020 - 0x0000)
struct SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading final
{
public:
	const class ACamperPlayer*                    subject;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASlasherPlayer*                   killer;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGameplayModifierContainer*>     ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading) == 0x000008, "Wrong alignment on SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading");
static_assert(sizeof(SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading) == 0x000020, "Wrong size on SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading, subject) == 0x000000, "Member 'SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading::subject' has a wrong offset!");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading, killer) == 0x000008, "Member 'SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading::killer' has a wrong offset!");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading, ReturnValue) == 0x000010, "Member 'SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorOutlineUpdateStrategy.IsActivelyHidingAuraFromKiller
// 0x0018 (0x0018 - 0x0000)
struct SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller final
{
public:
	const class ACamperPlayer*                    subject;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASlasherPlayer*                   witness;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller) == 0x000008, "Wrong alignment on SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller");
static_assert(sizeof(SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller) == 0x000018, "Wrong size on SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller, subject) == 0x000000, "Member 'SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller::subject' has a wrong offset!");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller, witness) == 0x000008, "Member 'SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller::witness' has a wrong offset!");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller, ReturnValue) == 0x000010, "Member 'SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorOutlineUpdateStrategy.SetTrappedIconActive
// 0x0001 (0x0001 - 0x0000)
struct SurvivorOutlineUpdateStrategy_SetTrappedIconActive final
{
public:
	bool                                          value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorOutlineUpdateStrategy_SetTrappedIconActive) == 0x000001, "Wrong alignment on SurvivorOutlineUpdateStrategy_SetTrappedIconActive");
static_assert(sizeof(SurvivorOutlineUpdateStrategy_SetTrappedIconActive) == 0x000001, "Wrong size on SurvivorOutlineUpdateStrategy_SetTrappedIconActive");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_SetTrappedIconActive, value) == 0x000000, "Member 'SurvivorOutlineUpdateStrategy_SetTrappedIconActive::value' has a wrong offset!");

// Function DeadByDaylight.SurvivorOutlineUpdateStrategy.IsBlockingAuraReadingFromKiller
// 0x0010 (0x0010 - 0x0000)
struct SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller final
{
public:
	const class ASlasherPlayer*                   killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller) == 0x000008, "Wrong alignment on SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller");
static_assert(sizeof(SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller) == 0x000010, "Wrong size on SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller, killer) == 0x000000, "Member 'SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller::killer' has a wrong offset!");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller, ReturnValue) == 0x000008, "Member 'SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorScreen.RegisterEditorLayoutScreen
// 0x0010 (0x0010 - 0x0000)
struct UMGHudEditorScreen_RegisterEditorLayoutScreen final
{
public:
	EPlayerRole                                   role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGHudEditorLayoutScreen*              screen;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorScreen_RegisterEditorLayoutScreen) == 0x000008, "Wrong alignment on UMGHudEditorScreen_RegisterEditorLayoutScreen");
static_assert(sizeof(UMGHudEditorScreen_RegisterEditorLayoutScreen) == 0x000010, "Wrong size on UMGHudEditorScreen_RegisterEditorLayoutScreen");
static_assert(offsetof(UMGHudEditorScreen_RegisterEditorLayoutScreen, role) == 0x000000, "Member 'UMGHudEditorScreen_RegisterEditorLayoutScreen::role' has a wrong offset!");
static_assert(offsetof(UMGHudEditorScreen_RegisterEditorLayoutScreen, screen) == 0x000008, "Member 'UMGHudEditorScreen_RegisterEditorLayoutScreen::screen' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorScreen.SetEditorDropErrorOverlapSound
// 0x0008 (0x0008 - 0x0000)
struct UMGHudEditorScreen_SetEditorDropErrorOverlapSound final
{
public:
	class UAkAudioEvent*                          onDropOverlapSound;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorScreen_SetEditorDropErrorOverlapSound) == 0x000008, "Wrong alignment on UMGHudEditorScreen_SetEditorDropErrorOverlapSound");
static_assert(sizeof(UMGHudEditorScreen_SetEditorDropErrorOverlapSound) == 0x000008, "Wrong size on UMGHudEditorScreen_SetEditorDropErrorOverlapSound");
static_assert(offsetof(UMGHudEditorScreen_SetEditorDropErrorOverlapSound, onDropOverlapSound) == 0x000000, "Member 'UMGHudEditorScreen_SetEditorDropErrorOverlapSound::onDropOverlapSound' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorScreen.SetWidgets
// 0x0010 (0x0010 - 0x0000)
struct UMGHudEditorScreen_SetWidgets final
{
public:
	class UUMGHudEditorLayoutWidget*              hudEditorLayoutWidget;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUMGHudEditorVersionWidget*             versionSwapWidget;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorScreen_SetWidgets) == 0x000008, "Wrong alignment on UMGHudEditorScreen_SetWidgets");
static_assert(sizeof(UMGHudEditorScreen_SetWidgets) == 0x000010, "Wrong size on UMGHudEditorScreen_SetWidgets");
static_assert(offsetof(UMGHudEditorScreen_SetWidgets, hudEditorLayoutWidget) == 0x000000, "Member 'UMGHudEditorScreen_SetWidgets::hudEditorLayoutWidget' has a wrong offset!");
static_assert(offsetof(UMGHudEditorScreen_SetWidgets, versionSwapWidget) == 0x000008, "Member 'UMGHudEditorScreen_SetWidgets::versionSwapWidget' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorScreen.ShowHudLayout
// 0x0001 (0x0001 - 0x0000)
struct UMGHudEditorScreen_ShowHudLayout final
{
public:
	EPlayerRole                                   role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorScreen_ShowHudLayout) == 0x000001, "Wrong alignment on UMGHudEditorScreen_ShowHudLayout");
static_assert(sizeof(UMGHudEditorScreen_ShowHudLayout) == 0x000001, "Wrong size on UMGHudEditorScreen_ShowHudLayout");
static_assert(offsetof(UMGHudEditorScreen_ShowHudLayout, role) == 0x000000, "Member 'UMGHudEditorScreen_ShowHudLayout::role' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorScreen.GetVersionSwapWidget
// 0x0008 (0x0008 - 0x0000)
struct UMGHudEditorScreen_GetVersionSwapWidget final
{
public:
	class UUMGHudEditorVersionWidget*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorScreen_GetVersionSwapWidget) == 0x000008, "Wrong alignment on UMGHudEditorScreen_GetVersionSwapWidget");
static_assert(sizeof(UMGHudEditorScreen_GetVersionSwapWidget) == 0x000008, "Wrong size on UMGHudEditorScreen_GetVersionSwapWidget");
static_assert(offsetof(UMGHudEditorScreen_GetVersionSwapWidget, ReturnValue) == 0x000000, "Member 'UMGHudEditorScreen_GetVersionSwapWidget::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.Authority_AddSickness
// 0x0004 (0x0004 - 0x0000)
struct SurvivorPlagueEffect_Authority_AddSickness final
{
public:
	float                                         sicknessToAdd;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_Authority_AddSickness) == 0x000004, "Wrong alignment on SurvivorPlagueEffect_Authority_AddSickness");
static_assert(sizeof(SurvivorPlagueEffect_Authority_AddSickness) == 0x000004, "Wrong size on SurvivorPlagueEffect_Authority_AddSickness");
static_assert(offsetof(SurvivorPlagueEffect_Authority_AddSickness, sicknessToAdd) == 0x000000, "Member 'SurvivorPlagueEffect_Authority_AddSickness::sicknessToAdd' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.Authority_InfectInteractable
// 0x0008 (0x0008 - 0x0000)
struct SurvivorPlagueEffect_Authority_InfectInteractable final
{
public:
	class AInteractable*                          interactable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_Authority_InfectInteractable) == 0x000008, "Wrong alignment on SurvivorPlagueEffect_Authority_InfectInteractable");
static_assert(sizeof(SurvivorPlagueEffect_Authority_InfectInteractable) == 0x000008, "Wrong size on SurvivorPlagueEffect_Authority_InfectInteractable");
static_assert(offsetof(SurvivorPlagueEffect_Authority_InfectInteractable, interactable) == 0x000000, "Member 'SurvivorPlagueEffect_Authority_InfectInteractable::interactable' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.Authority_OnHitByVomitProjectile
// 0x0004 (0x0004 - 0x0000)
struct SurvivorPlagueEffect_Authority_OnHitByVomitProjectile final
{
public:
	float                                         sicknessToAdd;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_Authority_OnHitByVomitProjectile) == 0x000004, "Wrong alignment on SurvivorPlagueEffect_Authority_OnHitByVomitProjectile");
static_assert(sizeof(SurvivorPlagueEffect_Authority_OnHitByVomitProjectile) == 0x000004, "Wrong size on SurvivorPlagueEffect_Authority_OnHitByVomitProjectile");
static_assert(offsetof(SurvivorPlagueEffect_Authority_OnHitByVomitProjectile, sicknessToAdd) == 0x000000, "Member 'SurvivorPlagueEffect_Authority_OnHitByVomitProjectile::sicknessToAdd' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.Authority_ResetSickness
// 0x0004 (0x0004 - 0x0000)
struct SurvivorPlagueEffect_Authority_ResetSickness final
{
public:
	float                                         newSickness;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_Authority_ResetSickness) == 0x000004, "Wrong alignment on SurvivorPlagueEffect_Authority_ResetSickness");
static_assert(sizeof(SurvivorPlagueEffect_Authority_ResetSickness) == 0x000004, "Wrong size on SurvivorPlagueEffect_Authority_ResetSickness");
static_assert(offsetof(SurvivorPlagueEffect_Authority_ResetSickness, newSickness) == 0x000000, "Member 'SurvivorPlagueEffect_Authority_ResetSickness::newSickness' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.Multicast_AddOnScreenDebugMessage
// 0x0020 (0x0020 - 0x0000)
struct SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage final
{
public:
	uint64                                        key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 displayColor;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 debugMessage;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage) == 0x000008, "Wrong alignment on SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage");
static_assert(sizeof(SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage) == 0x000020, "Wrong size on SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage");
static_assert(offsetof(SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage, key) == 0x000000, "Member 'SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage::key' has a wrong offset!");
static_assert(offsetof(SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage, duration) == 0x000008, "Member 'SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage::duration' has a wrong offset!");
static_assert(offsetof(SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage, displayColor) == 0x00000C, "Member 'SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage::displayColor' has a wrong offset!");
static_assert(offsetof(SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage, debugMessage) == 0x000010, "Member 'SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage::debugMessage' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.Multicast_OnSicknessChanged
// 0x0004 (0x0004 - 0x0000)
struct SurvivorPlagueEffect_Multicast_OnSicknessChanged final
{
public:
	float                                         newSickness;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_Multicast_OnSicknessChanged) == 0x000004, "Wrong alignment on SurvivorPlagueEffect_Multicast_OnSicknessChanged");
static_assert(sizeof(SurvivorPlagueEffect_Multicast_OnSicknessChanged) == 0x000004, "Wrong size on SurvivorPlagueEffect_Multicast_OnSicknessChanged");
static_assert(offsetof(SurvivorPlagueEffect_Multicast_OnSicknessChanged, newSickness) == 0x000000, "Member 'SurvivorPlagueEffect_Multicast_OnSicknessChanged::newSickness' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.OnHitByVomit
// 0x0001 (0x0001 - 0x0000)
struct SurvivorPlagueEffect_OnHitByVomit final
{
public:
	bool                                          isSuperVomit;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_OnHitByVomit) == 0x000001, "Wrong alignment on SurvivorPlagueEffect_OnHitByVomit");
static_assert(sizeof(SurvivorPlagueEffect_OnHitByVomit) == 0x000001, "Wrong size on SurvivorPlagueEffect_OnHitByVomit");
static_assert(offsetof(SurvivorPlagueEffect_OnHitByVomit, isSuperVomit) == 0x000000, "Member 'SurvivorPlagueEffect_OnHitByVomit::isSuperVomit' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.OnSicknessChanged_Aesthetic
// 0x0004 (0x0004 - 0x0000)
struct SurvivorPlagueEffect_OnSicknessChanged_Aesthetic final
{
public:
	float                                         newSickness;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_OnSicknessChanged_Aesthetic) == 0x000004, "Wrong alignment on SurvivorPlagueEffect_OnSicknessChanged_Aesthetic");
static_assert(sizeof(SurvivorPlagueEffect_OnSicknessChanged_Aesthetic) == 0x000004, "Wrong size on SurvivorPlagueEffect_OnSicknessChanged_Aesthetic");
static_assert(offsetof(SurvivorPlagueEffect_OnSicknessChanged_Aesthetic, newSickness) == 0x000000, "Member 'SurvivorPlagueEffect_OnSicknessChanged_Aesthetic::newSickness' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.GetMaxSicknessLevel
// 0x0001 (0x0001 - 0x0000)
struct SurvivorPlagueEffect_GetMaxSicknessLevel final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_GetMaxSicknessLevel) == 0x000001, "Wrong alignment on SurvivorPlagueEffect_GetMaxSicknessLevel");
static_assert(sizeof(SurvivorPlagueEffect_GetMaxSicknessLevel) == 0x000001, "Wrong size on SurvivorPlagueEffect_GetMaxSicknessLevel");
static_assert(offsetof(SurvivorPlagueEffect_GetMaxSicknessLevel, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_GetMaxSicknessLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.GetSicknessAmount
// 0x0004 (0x0004 - 0x0000)
struct SurvivorPlagueEffect_GetSicknessAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_GetSicknessAmount) == 0x000004, "Wrong alignment on SurvivorPlagueEffect_GetSicknessAmount");
static_assert(sizeof(SurvivorPlagueEffect_GetSicknessAmount) == 0x000004, "Wrong size on SurvivorPlagueEffect_GetSicknessAmount");
static_assert(offsetof(SurvivorPlagueEffect_GetSicknessAmount, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_GetSicknessAmount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.GetSicknessLevel
// 0x0001 (0x0001 - 0x0000)
struct SurvivorPlagueEffect_GetSicknessLevel final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_GetSicknessLevel) == 0x000001, "Wrong alignment on SurvivorPlagueEffect_GetSicknessLevel");
static_assert(sizeof(SurvivorPlagueEffect_GetSicknessLevel) == 0x000001, "Wrong size on SurvivorPlagueEffect_GetSicknessLevel");
static_assert(offsetof(SurvivorPlagueEffect_GetSicknessLevel, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_GetSicknessLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.GetSicknessPercentage
// 0x0004 (0x0004 - 0x0000)
struct SurvivorPlagueEffect_GetSicknessPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_GetSicknessPercentage) == 0x000004, "Wrong alignment on SurvivorPlagueEffect_GetSicknessPercentage");
static_assert(sizeof(SurvivorPlagueEffect_GetSicknessPercentage) == 0x000004, "Wrong size on SurvivorPlagueEffect_GetSicknessPercentage");
static_assert(offsetof(SurvivorPlagueEffect_GetSicknessPercentage, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_GetSicknessPercentage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.GetSicknessThresholds
// 0x0010 (0x0010 - 0x0000)
struct SurvivorPlagueEffect_GetSicknessThresholds final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_GetSicknessThresholds) == 0x000008, "Wrong alignment on SurvivorPlagueEffect_GetSicknessThresholds");
static_assert(sizeof(SurvivorPlagueEffect_GetSicknessThresholds) == 0x000010, "Wrong size on SurvivorPlagueEffect_GetSicknessThresholds");
static_assert(offsetof(SurvivorPlagueEffect_GetSicknessThresholds, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_GetSicknessThresholds::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.HasMaxLevelSickness
// 0x0001 (0x0001 - 0x0000)
struct SurvivorPlagueEffect_HasMaxLevelSickness final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_HasMaxLevelSickness) == 0x000001, "Wrong alignment on SurvivorPlagueEffect_HasMaxLevelSickness");
static_assert(sizeof(SurvivorPlagueEffect_HasMaxLevelSickness) == 0x000001, "Wrong size on SurvivorPlagueEffect_HasMaxLevelSickness");
static_assert(offsetof(SurvivorPlagueEffect_HasMaxLevelSickness, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_HasMaxLevelSickness::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.IsDebugModeActive
// 0x0001 (0x0001 - 0x0000)
struct SurvivorPlagueEffect_IsDebugModeActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_IsDebugModeActive) == 0x000001, "Wrong alignment on SurvivorPlagueEffect_IsDebugModeActive");
static_assert(sizeof(SurvivorPlagueEffect_IsDebugModeActive) == 0x000001, "Wrong size on SurvivorPlagueEffect_IsDebugModeActive");
static_assert(offsetof(SurvivorPlagueEffect_IsDebugModeActive, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_IsDebugModeActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.IsInfected
// 0x0001 (0x0001 - 0x0000)
struct SurvivorPlagueEffect_IsInfected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_IsInfected) == 0x000001, "Wrong alignment on SurvivorPlagueEffect_IsInfected");
static_assert(sizeof(SurvivorPlagueEffect_IsInfected) == 0x000001, "Wrong size on SurvivorPlagueEffect_IsInfected");
static_assert(offsetof(SurvivorPlagueEffect_IsInfected, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_IsInfected::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TerrorRadiusIndicatorWidget.SetSoundDistancePercentage
// 0x0004 (0x0004 - 0x0000)
struct TerrorRadiusIndicatorWidget_SetSoundDistancePercentage final
{
public:
	float                                         distancePercentage;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TerrorRadiusIndicatorWidget_SetSoundDistancePercentage) == 0x000004, "Wrong alignment on TerrorRadiusIndicatorWidget_SetSoundDistancePercentage");
static_assert(sizeof(TerrorRadiusIndicatorWidget_SetSoundDistancePercentage) == 0x000004, "Wrong size on TerrorRadiusIndicatorWidget_SetSoundDistancePercentage");
static_assert(offsetof(TerrorRadiusIndicatorWidget_SetSoundDistancePercentage, distancePercentage) == 0x000000, "Member 'TerrorRadiusIndicatorWidget_SetSoundDistancePercentage::distancePercentage' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutFilterButton.InitFilterButton
// 0x0040 (0x0040 - 0x0000)
struct UMGLoadoutFilterButton_InitFilterButton final
{
public:
	class FName                                   filterName;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              filterTexture;                                     // 0x0010(0x0030)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutFilterButton_InitFilterButton) == 0x000008, "Wrong alignment on UMGLoadoutFilterButton_InitFilterButton");
static_assert(sizeof(UMGLoadoutFilterButton_InitFilterButton) == 0x000040, "Wrong size on UMGLoadoutFilterButton_InitFilterButton");
static_assert(offsetof(UMGLoadoutFilterButton_InitFilterButton, filterName) == 0x000000, "Member 'UMGLoadoutFilterButton_InitFilterButton::filterName' has a wrong offset!");
static_assert(offsetof(UMGLoadoutFilterButton_InitFilterButton, filterTexture) == 0x000010, "Member 'UMGLoadoutFilterButton_InitFilterButton::filterTexture' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutFilterButton.SetIcon
// 0x0030 (0x0030 - 0x0000)
struct UMGLoadoutFilterButton_SetIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              icon;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutFilterButton_SetIcon) == 0x000008, "Wrong alignment on UMGLoadoutFilterButton_SetIcon");
static_assert(sizeof(UMGLoadoutFilterButton_SetIcon) == 0x000030, "Wrong size on UMGLoadoutFilterButton_SetIcon");
static_assert(offsetof(UMGLoadoutFilterButton_SetIcon, icon) == 0x000000, "Member 'UMGLoadoutFilterButton_SetIcon::icon' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutFilterButton.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct UMGLoadoutFilterButton_SetIsSelected final
{
public:
	bool                                          isSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutFilterButton_SetIsSelected) == 0x000001, "Wrong alignment on UMGLoadoutFilterButton_SetIsSelected");
static_assert(sizeof(UMGLoadoutFilterButton_SetIsSelected) == 0x000001, "Wrong size on UMGLoadoutFilterButton_SetIsSelected");
static_assert(offsetof(UMGLoadoutFilterButton_SetIsSelected, isSelected) == 0x000000, "Member 'UMGLoadoutFilterButton_SetIsSelected::isSelected' has a wrong offset!");

// Function DeadByDaylight.TimerGate.AddTime
// 0x0004 (0x0004 - 0x0000)
struct TimerGate_AddTime final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerGate_AddTime) == 0x000004, "Wrong alignment on TimerGate_AddTime");
static_assert(sizeof(TimerGate_AddTime) == 0x000004, "Wrong size on TimerGate_AddTime");
static_assert(offsetof(TimerGate_AddTime, time) == 0x000000, "Member 'TimerGate_AddTime::time' has a wrong offset!");

// Function DeadByDaylight.TimerGate.RemoveTime
// 0x0004 (0x0004 - 0x0000)
struct TimerGate_RemoveTime final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerGate_RemoveTime) == 0x000004, "Wrong alignment on TimerGate_RemoveTime");
static_assert(sizeof(TimerGate_RemoveTime) == 0x000004, "Wrong size on TimerGate_RemoveTime");
static_assert(offsetof(TimerGate_RemoveTime, time) == 0x000000, "Member 'TimerGate_RemoveTime::time' has a wrong offset!");

// Function DeadByDaylight.TimerGate.Rushed
// 0x0001 (0x0001 - 0x0000)
struct TimerGate_Rushed final
{
public:
	bool                                          success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerGate_Rushed) == 0x000001, "Wrong alignment on TimerGate_Rushed");
static_assert(sizeof(TimerGate_Rushed) == 0x000001, "Wrong size on TimerGate_Rushed");
static_assert(offsetof(TimerGate_Rushed, success) == 0x000000, "Member 'TimerGate_Rushed::success' has a wrong offset!");

// Function DeadByDaylight.TimerGate.SetValues
// 0x000C (0x000C - 0x0000)
struct TimerGate_SetValues final
{
public:
	float                                         TimerDuration;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RushGain;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RushBlockDuration;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerGate_SetValues) == 0x000004, "Wrong alignment on TimerGate_SetValues");
static_assert(sizeof(TimerGate_SetValues) == 0x00000C, "Wrong size on TimerGate_SetValues");
static_assert(offsetof(TimerGate_SetValues, TimerDuration) == 0x000000, "Member 'TimerGate_SetValues::TimerDuration' has a wrong offset!");
static_assert(offsetof(TimerGate_SetValues, RushGain) == 0x000004, "Member 'TimerGate_SetValues::RushGain' has a wrong offset!");
static_assert(offsetof(TimerGate_SetValues, RushBlockDuration) == 0x000008, "Member 'TimerGate_SetValues::RushBlockDuration' has a wrong offset!");

// Function DeadByDaylight.TimerGate.Update
// 0x0004 (0x0004 - 0x0000)
struct TimerGate_Update final
{
public:
	float                                         deltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerGate_Update) == 0x000004, "Wrong alignment on TimerGate_Update");
static_assert(sizeof(TimerGate_Update) == 0x000004, "Wrong size on TimerGate_Update");
static_assert(offsetof(TimerGate_Update, deltaTime) == 0x000000, "Member 'TimerGate_Update::deltaTime' has a wrong offset!");

// Function DeadByDaylight.TimerGateDecrease.Update
// 0x0004 (0x0004 - 0x0000)
struct TimerGateDecrease_Update final
{
public:
	float                                         deltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerGateDecrease_Update) == 0x000004, "Wrong alignment on TimerGateDecrease_Update");
static_assert(sizeof(TimerGateDecrease_Update) == 0x000004, "Wrong size on TimerGateDecrease_Update");
static_assert(offsetof(TimerGateDecrease_Update, deltaTime) == 0x000000, "Member 'TimerGateDecrease_Update::deltaTime' has a wrong offset!");

// Function DeadByDaylight.UMGBloodStoreRowWidget.BroadcastBloodNodeSelected
// 0x0010 (0x0010 - 0x0000)
struct UMGBloodStoreRowWidget_BroadcastBloodNodeSelected final
{
public:
	class FString                                 id;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBloodStoreRowWidget_BroadcastBloodNodeSelected) == 0x000008, "Wrong alignment on UMGBloodStoreRowWidget_BroadcastBloodNodeSelected");
static_assert(sizeof(UMGBloodStoreRowWidget_BroadcastBloodNodeSelected) == 0x000010, "Wrong size on UMGBloodStoreRowWidget_BroadcastBloodNodeSelected");
static_assert(offsetof(UMGBloodStoreRowWidget_BroadcastBloodNodeSelected, id) == 0x000000, "Member 'UMGBloodStoreRowWidget_BroadcastBloodNodeSelected::id' has a wrong offset!");

// Function DeadByDaylight.UMGBloodStoreRowWidget.LockRow
// 0x0001 (0x0001 - 0x0000)
struct UMGBloodStoreRowWidget_LockRow final
{
public:
	bool                                          playAnim;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBloodStoreRowWidget_LockRow) == 0x000001, "Wrong alignment on UMGBloodStoreRowWidget_LockRow");
static_assert(sizeof(UMGBloodStoreRowWidget_LockRow) == 0x000001, "Wrong size on UMGBloodStoreRowWidget_LockRow");
static_assert(offsetof(UMGBloodStoreRowWidget_LockRow, playAnim) == 0x000000, "Member 'UMGBloodStoreRowWidget_LockRow::playAnim' has a wrong offset!");

// Function DeadByDaylight.UMGBloodStoreRowWidget.UnlockRow
// 0x0001 (0x0001 - 0x0000)
struct UMGBloodStoreRowWidget_UnlockRow final
{
public:
	bool                                          playAnim;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBloodStoreRowWidget_UnlockRow) == 0x000001, "Wrong alignment on UMGBloodStoreRowWidget_UnlockRow");
static_assert(sizeof(UMGBloodStoreRowWidget_UnlockRow) == 0x000001, "Wrong size on UMGBloodStoreRowWidget_UnlockRow");
static_assert(offsetof(UMGBloodStoreRowWidget_UnlockRow, playAnim) == 0x000000, "Member 'UMGBloodStoreRowWidget_UnlockRow::playAnim' has a wrong offset!");

// Function DeadByDaylight.ToastNotificationScreen.OnButtonSelected
// 0x0008 (0x0008 - 0x0000)
struct ToastNotificationScreen_OnButtonSelected final
{
public:
	int32                                         buttonId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         notificationId;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToastNotificationScreen_OnButtonSelected) == 0x000004, "Wrong alignment on ToastNotificationScreen_OnButtonSelected");
static_assert(sizeof(ToastNotificationScreen_OnButtonSelected) == 0x000008, "Wrong size on ToastNotificationScreen_OnButtonSelected");
static_assert(offsetof(ToastNotificationScreen_OnButtonSelected, buttonId) == 0x000000, "Member 'ToastNotificationScreen_OnButtonSelected::buttonId' has a wrong offset!");
static_assert(offsetof(ToastNotificationScreen_OnButtonSelected, notificationId) == 0x000004, "Member 'ToastNotificationScreen_OnButtonSelected::notificationId' has a wrong offset!");

// Function DeadByDaylight.ToastNotificationScreen.OnNotificationDisplayEnd
// 0x0004 (0x0004 - 0x0000)
struct ToastNotificationScreen_OnNotificationDisplayEnd final
{
public:
	int32                                         notificationId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToastNotificationScreen_OnNotificationDisplayEnd) == 0x000004, "Wrong alignment on ToastNotificationScreen_OnNotificationDisplayEnd");
static_assert(sizeof(ToastNotificationScreen_OnNotificationDisplayEnd) == 0x000004, "Wrong size on ToastNotificationScreen_OnNotificationDisplayEnd");
static_assert(offsetof(ToastNotificationScreen_OnNotificationDisplayEnd, notificationId) == 0x000000, "Member 'ToastNotificationScreen_OnNotificationDisplayEnd::notificationId' has a wrong offset!");

// Function DeadByDaylight.ToastNotificationScreen.OnPromptSelected
// 0x0004 (0x0004 - 0x0000)
struct ToastNotificationScreen_OnPromptSelected final
{
public:
	int32                                         notificationId;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToastNotificationScreen_OnPromptSelected) == 0x000004, "Wrong alignment on ToastNotificationScreen_OnPromptSelected");
static_assert(sizeof(ToastNotificationScreen_OnPromptSelected) == 0x000004, "Wrong size on ToastNotificationScreen_OnPromptSelected");
static_assert(offsetof(ToastNotificationScreen_OnPromptSelected, notificationId) == 0x000000, "Member 'ToastNotificationScreen_OnPromptSelected::notificationId' has a wrong offset!");

// Function DeadByDaylight.TokenProvider.GetTokenProvider
// 0x0008 (0x0008 - 0x0000)
struct TokenProvider_GetTokenProvider final
{
public:
	class UTokenCounter*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TokenProvider_GetTokenProvider) == 0x000008, "Wrong alignment on TokenProvider_GetTokenProvider");
static_assert(sizeof(TokenProvider_GetTokenProvider) == 0x000008, "Wrong size on TokenProvider_GetTokenProvider");
static_assert(offsetof(TokenProvider_GetTokenProvider, ReturnValue) == 0x000000, "Member 'TokenProvider_GetTokenProvider::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterButton.BroadcastClickedEvent
// 0x0004 (0x0004 - 0x0000)
struct UMGCharacterButton_BroadcastClickedEvent final
{
public:
	int32                                         characterIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterButton_BroadcastClickedEvent) == 0x000004, "Wrong alignment on UMGCharacterButton_BroadcastClickedEvent");
static_assert(sizeof(UMGCharacterButton_BroadcastClickedEvent) == 0x000004, "Wrong size on UMGCharacterButton_BroadcastClickedEvent");
static_assert(offsetof(UMGCharacterButton_BroadcastClickedEvent, characterIndex) == 0x000000, "Member 'UMGCharacterButton_BroadcastClickedEvent::characterIndex' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterButton.SetCharacterData
// 0x0180 (0x0180 - 0x0000)
struct UMGCharacterButton_SetCharacterData final
{
public:
	struct FCharacterSlotData                     characterData;                                     // 0x0000(0x0180)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterButton_SetCharacterData) == 0x000008, "Wrong alignment on UMGCharacterButton_SetCharacterData");
static_assert(sizeof(UMGCharacterButton_SetCharacterData) == 0x000180, "Wrong size on UMGCharacterButton_SetCharacterData");
static_assert(offsetof(UMGCharacterButton_SetCharacterData, characterData) == 0x000000, "Member 'UMGCharacterButton_SetCharacterData::characterData' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterButton.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct UMGCharacterButton_SetIsSelected final
{
public:
	bool                                          isSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterButton_SetIsSelected) == 0x000001, "Wrong alignment on UMGCharacterButton_SetIsSelected");
static_assert(sizeof(UMGCharacterButton_SetIsSelected) == 0x000001, "Wrong size on UMGCharacterButton_SetIsSelected");
static_assert(offsetof(UMGCharacterButton_SetIsSelected, isSelected) == 0x000000, "Member 'UMGCharacterButton_SetIsSelected::isSelected' has a wrong offset!");

// Function DeadByDaylight.ToolBoxInterface.GetChargerComponent
// 0x0008 (0x0008 - 0x0000)
struct ToolBoxInterface_GetChargerComponent final
{
public:
	class UChargerComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToolBoxInterface_GetChargerComponent) == 0x000008, "Wrong alignment on ToolBoxInterface_GetChargerComponent");
static_assert(sizeof(ToolBoxInterface_GetChargerComponent) == 0x000008, "Wrong size on ToolBoxInterface_GetChargerComponent");
static_assert(offsetof(ToolBoxInterface_GetChargerComponent, ReturnValue) == 0x000000, "Member 'ToolBoxInterface_GetChargerComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.Authority_BindToPerk
// 0x0008 (0x0008 - 0x0000)
struct Totem_Authority_BindToPerk final
{
public:
	class UTotemBoundPerk*                        perk;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_Authority_BindToPerk) == 0x000008, "Wrong alignment on Totem_Authority_BindToPerk");
static_assert(sizeof(Totem_Authority_BindToPerk) == 0x000008, "Wrong size on Totem_Authority_BindToPerk");
static_assert(offsetof(Totem_Authority_BindToPerk, perk) == 0x000000, "Member 'Totem_Authority_BindToPerk::perk' has a wrong offset!");

// Function DeadByDaylight.Totem.Authority_UnbindFromPerk
// 0x0008 (0x0008 - 0x0000)
struct Totem_Authority_UnbindFromPerk final
{
public:
	class UTotemBoundPerk*                        perk;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_Authority_UnbindFromPerk) == 0x000008, "Wrong alignment on Totem_Authority_UnbindFromPerk");
static_assert(sizeof(Totem_Authority_UnbindFromPerk) == 0x000008, "Wrong size on Totem_Authority_UnbindFromPerk");
static_assert(offsetof(Totem_Authority_UnbindFromPerk, perk) == 0x000000, "Member 'Totem_Authority_UnbindFromPerk::perk' has a wrong offset!");

// Function DeadByDaylight.Totem.OnBlockTotemCosmetic
// 0x0008 (0x0008 - 0x0000)
struct Totem_OnBlockTotemCosmetic final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_OnBlockTotemCosmetic) == 0x000008, "Wrong alignment on Totem_OnBlockTotemCosmetic");
static_assert(sizeof(Totem_OnBlockTotemCosmetic) == 0x000008, "Wrong size on Totem_OnBlockTotemCosmetic");
static_assert(offsetof(Totem_OnBlockTotemCosmetic, player) == 0x000000, "Member 'Totem_OnBlockTotemCosmetic::player' has a wrong offset!");

// Function DeadByDaylight.Totem.OnCleanseTotem
// 0x0010 (0x0010 - 0x0000)
struct Totem_OnCleanseTotem final
{
public:
	class ATotem*                                 totem;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETotemState                                   oldTotemState;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Totem_OnCleanseTotem) == 0x000008, "Wrong alignment on Totem_OnCleanseTotem");
static_assert(sizeof(Totem_OnCleanseTotem) == 0x000010, "Wrong size on Totem_OnCleanseTotem");
static_assert(offsetof(Totem_OnCleanseTotem, totem) == 0x000000, "Member 'Totem_OnCleanseTotem::totem' has a wrong offset!");
static_assert(offsetof(Totem_OnCleanseTotem, oldTotemState) == 0x000008, "Member 'Totem_OnCleanseTotem::oldTotemState' has a wrong offset!");

// Function DeadByDaylight.Totem.OnRep_TotemState
// 0x0001 (0x0001 - 0x0000)
struct Totem_OnRep_TotemState final
{
public:
	ETotemState                                   oldTotemState;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_OnRep_TotemState) == 0x000001, "Wrong alignment on Totem_OnRep_TotemState");
static_assert(sizeof(Totem_OnRep_TotemState) == 0x000001, "Wrong size on Totem_OnRep_TotemState");
static_assert(offsetof(Totem_OnRep_TotemState, oldTotemState) == 0x000000, "Member 'Totem_OnRep_TotemState::oldTotemState' has a wrong offset!");

// Function DeadByDaylight.Totem.OnTotemStateChanged
// 0x0002 (0x0002 - 0x0000)
struct Totem_OnTotemStateChanged final
{
public:
	ETotemState                                   oldTotemState;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETotemState                                   newTotemState;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_OnTotemStateChanged) == 0x000001, "Wrong alignment on Totem_OnTotemStateChanged");
static_assert(sizeof(Totem_OnTotemStateChanged) == 0x000002, "Wrong size on Totem_OnTotemStateChanged");
static_assert(offsetof(Totem_OnTotemStateChanged, oldTotemState) == 0x000000, "Member 'Totem_OnTotemStateChanged::oldTotemState' has a wrong offset!");
static_assert(offsetof(Totem_OnTotemStateChanged, newTotemState) == 0x000001, "Member 'Totem_OnTotemStateChanged::newTotemState' has a wrong offset!");

// Function DeadByDaylight.Totem.OnUnblockTotemCosmetic
// 0x0008 (0x0008 - 0x0000)
struct Totem_OnUnblockTotemCosmetic final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_OnUnblockTotemCosmetic) == 0x000008, "Wrong alignment on Totem_OnUnblockTotemCosmetic");
static_assert(sizeof(Totem_OnUnblockTotemCosmetic) == 0x000008, "Wrong size on Totem_OnUnblockTotemCosmetic");
static_assert(offsetof(Totem_OnUnblockTotemCosmetic, player) == 0x000000, "Member 'Totem_OnUnblockTotemCosmetic::player' has a wrong offset!");

// Function DeadByDaylight.Totem.GetAkAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct Totem_GetAkAudioComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetAkAudioComponent) == 0x000008, "Wrong alignment on Totem_GetAkAudioComponent");
static_assert(sizeof(Totem_GetAkAudioComponent) == 0x000008, "Wrong size on Totem_GetAkAudioComponent");
static_assert(offsetof(Totem_GetAkAudioComponent, ReturnValue) == 0x000000, "Member 'Totem_GetAkAudioComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.GetBlessTotemInteraction
// 0x0008 (0x0008 - 0x0000)
struct Totem_GetBlessTotemInteraction final
{
public:
	class UChargeableInteractionDefinition*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetBlessTotemInteraction) == 0x000008, "Wrong alignment on Totem_GetBlessTotemInteraction");
static_assert(sizeof(Totem_GetBlessTotemInteraction) == 0x000008, "Wrong size on Totem_GetBlessTotemInteraction");
static_assert(offsetof(Totem_GetBlessTotemInteraction, ReturnValue) == 0x000000, "Member 'Totem_GetBlessTotemInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.GetBoonAuraRevealColor
// 0x0010 (0x0010 - 0x0000)
struct Totem_GetBoonAuraRevealColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetBoonAuraRevealColor) == 0x000004, "Wrong alignment on Totem_GetBoonAuraRevealColor");
static_assert(sizeof(Totem_GetBoonAuraRevealColor) == 0x000010, "Wrong size on Totem_GetBoonAuraRevealColor");
static_assert(offsetof(Totem_GetBoonAuraRevealColor, ReturnValue) == 0x000000, "Member 'Totem_GetBoonAuraRevealColor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.GetBoonTotemAuraRevealRange
// 0x0004 (0x0004 - 0x0000)
struct Totem_GetBoonTotemAuraRevealRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetBoonTotemAuraRevealRange) == 0x000004, "Wrong alignment on Totem_GetBoonTotemAuraRevealRange");
static_assert(sizeof(Totem_GetBoonTotemAuraRevealRange) == 0x000004, "Wrong size on Totem_GetBoonTotemAuraRevealRange");
static_assert(offsetof(Totem_GetBoonTotemAuraRevealRange, ReturnValue) == 0x000000, "Member 'Totem_GetBoonTotemAuraRevealRange::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.GetBoonTotemBlessingRange
// 0x0004 (0x0004 - 0x0000)
struct Totem_GetBoonTotemBlessingRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetBoonTotemBlessingRange) == 0x000004, "Wrong alignment on Totem_GetBoonTotemBlessingRange");
static_assert(sizeof(Totem_GetBoonTotemBlessingRange) == 0x000004, "Wrong size on Totem_GetBoonTotemBlessingRange");
static_assert(offsetof(Totem_GetBoonTotemBlessingRange, ReturnValue) == 0x000000, "Member 'Totem_GetBoonTotemBlessingRange::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.GetCleanseTotemInteraction
// 0x0008 (0x0008 - 0x0000)
struct Totem_GetCleanseTotemInteraction final
{
public:
	class UChargeableInteractionDefinition*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetCleanseTotemInteraction) == 0x000008, "Wrong alignment on Totem_GetCleanseTotemInteraction");
static_assert(sizeof(Totem_GetCleanseTotemInteraction) == 0x000008, "Wrong size on Totem_GetCleanseTotemInteraction");
static_assert(offsetof(Totem_GetCleanseTotemInteraction, ReturnValue) == 0x000000, "Member 'Totem_GetCleanseTotemInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.GetMainInteractor
// 0x0008 (0x0008 - 0x0000)
struct Totem_GetMainInteractor final
{
public:
	class UInteractor*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetMainInteractor) == 0x000008, "Wrong alignment on Totem_GetMainInteractor");
static_assert(sizeof(Totem_GetMainInteractor) == 0x000008, "Wrong size on Totem_GetMainInteractor");
static_assert(offsetof(Totem_GetMainInteractor, ReturnValue) == 0x000000, "Member 'Totem_GetMainInteractor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.GetTotemState
// 0x0001 (0x0001 - 0x0000)
struct Totem_GetTotemState final
{
public:
	ETotemState                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetTotemState) == 0x000001, "Wrong alignment on Totem_GetTotemState");
static_assert(sizeof(Totem_GetTotemState) == 0x000001, "Wrong size on Totem_GetTotemState");
static_assert(offsetof(Totem_GetTotemState, ReturnValue) == 0x000000, "Member 'Totem_GetTotemState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.IsBoundToPerk
// 0x0001 (0x0001 - 0x0000)
struct Totem_IsBoundToPerk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_IsBoundToPerk) == 0x000001, "Wrong alignment on Totem_IsBoundToPerk");
static_assert(sizeof(Totem_IsBoundToPerk) == 0x000001, "Wrong size on Totem_IsBoundToPerk");
static_assert(offsetof(Totem_IsBoundToPerk, ReturnValue) == 0x000000, "Member 'Totem_IsBoundToPerk::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.IsTotemBlockedForPlayer
// 0x0010 (0x0010 - 0x0000)
struct Totem_IsTotemBlockedForPlayer final
{
public:
	const class ADBDPlayer*                       player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Totem_IsTotemBlockedForPlayer) == 0x000008, "Wrong alignment on Totem_IsTotemBlockedForPlayer");
static_assert(sizeof(Totem_IsTotemBlockedForPlayer) == 0x000010, "Wrong size on Totem_IsTotemBlockedForPlayer");
static_assert(offsetof(Totem_IsTotemBlockedForPlayer, player) == 0x000000, "Member 'Totem_IsTotemBlockedForPlayer::player' has a wrong offset!");
static_assert(offsetof(Totem_IsTotemBlockedForPlayer, ReturnValue) == 0x000008, "Member 'Totem_IsTotemBlockedForPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterInfoScreen.HandlePowerItemTooltipLongPressedEvent
// 0x0130 (0x0130 - 0x0000)
struct UMGCharacterInfoScreen_HandlePowerItemTooltipLongPressedEvent final
{
public:
	struct FInventorySlotData                     slotData;                                          // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              position;                                          // 0x0128(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterInfoScreen_HandlePowerItemTooltipLongPressedEvent) == 0x000008, "Wrong alignment on UMGCharacterInfoScreen_HandlePowerItemTooltipLongPressedEvent");
static_assert(sizeof(UMGCharacterInfoScreen_HandlePowerItemTooltipLongPressedEvent) == 0x000130, "Wrong size on UMGCharacterInfoScreen_HandlePowerItemTooltipLongPressedEvent");
static_assert(offsetof(UMGCharacterInfoScreen_HandlePowerItemTooltipLongPressedEvent, slotData) == 0x000000, "Member 'UMGCharacterInfoScreen_HandlePowerItemTooltipLongPressedEvent::slotData' has a wrong offset!");
static_assert(offsetof(UMGCharacterInfoScreen_HandlePowerItemTooltipLongPressedEvent, position) == 0x000128, "Member 'UMGCharacterInfoScreen_HandlePowerItemTooltipLongPressedEvent::position' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterInfoScreen.HandleTeachablePerkTooltipLongPressedEvent
// 0x0148 (0x0148 - 0x0000)
struct UMGCharacterInfoScreen_HandleTeachablePerkTooltipLongPressedEvent final
{
public:
	struct FTeachableData                         teachableData;                                     // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              position;                                          // 0x0140(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterInfoScreen_HandleTeachablePerkTooltipLongPressedEvent) == 0x000008, "Wrong alignment on UMGCharacterInfoScreen_HandleTeachablePerkTooltipLongPressedEvent");
static_assert(sizeof(UMGCharacterInfoScreen_HandleTeachablePerkTooltipLongPressedEvent) == 0x000148, "Wrong size on UMGCharacterInfoScreen_HandleTeachablePerkTooltipLongPressedEvent");
static_assert(offsetof(UMGCharacterInfoScreen_HandleTeachablePerkTooltipLongPressedEvent, teachableData) == 0x000000, "Member 'UMGCharacterInfoScreen_HandleTeachablePerkTooltipLongPressedEvent::teachableData' has a wrong offset!");
static_assert(offsetof(UMGCharacterInfoScreen_HandleTeachablePerkTooltipLongPressedEvent, position) == 0x000140, "Member 'UMGCharacterInfoScreen_HandleTeachablePerkTooltipLongPressedEvent::position' has a wrong offset!");

// Function DeadByDaylight.TotemOutlineUpdateStrategy.GetRevealColorToSurvivor
// 0x0010 (0x0010 - 0x0000)
struct TotemOutlineUpdateStrategy_GetRevealColorToSurvivor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TotemOutlineUpdateStrategy_GetRevealColorToSurvivor) == 0x000004, "Wrong alignment on TotemOutlineUpdateStrategy_GetRevealColorToSurvivor");
static_assert(sizeof(TotemOutlineUpdateStrategy_GetRevealColorToSurvivor) == 0x000010, "Wrong size on TotemOutlineUpdateStrategy_GetRevealColorToSurvivor");
static_assert(offsetof(TotemOutlineUpdateStrategy_GetRevealColorToSurvivor, ReturnValue) == 0x000000, "Member 'TotemOutlineUpdateStrategy_GetRevealColorToSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterPrestigeButton.SetCharacterPrestigeData
// 0x000C (0x000C - 0x0000)
struct UMGCharacterPrestigeButton_SetCharacterPrestigeData final
{
public:
	bool                                          canPrestige;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         prestigeLevel;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   role;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGCharacterPrestigeButton_SetCharacterPrestigeData) == 0x000004, "Wrong alignment on UMGCharacterPrestigeButton_SetCharacterPrestigeData");
static_assert(sizeof(UMGCharacterPrestigeButton_SetCharacterPrestigeData) == 0x00000C, "Wrong size on UMGCharacterPrestigeButton_SetCharacterPrestigeData");
static_assert(offsetof(UMGCharacterPrestigeButton_SetCharacterPrestigeData, canPrestige) == 0x000000, "Member 'UMGCharacterPrestigeButton_SetCharacterPrestigeData::canPrestige' has a wrong offset!");
static_assert(offsetof(UMGCharacterPrestigeButton_SetCharacterPrestigeData, prestigeLevel) == 0x000004, "Member 'UMGCharacterPrestigeButton_SetCharacterPrestigeData::prestigeLevel' has a wrong offset!");
static_assert(offsetof(UMGCharacterPrestigeButton_SetCharacterPrestigeData, role) == 0x000008, "Member 'UMGCharacterPrestigeButton_SetCharacterPrestigeData::role' has a wrong offset!");

// Function DeadByDaylight.TutorialEndGameComponent.SetTimerMaxCompletionPercentage
// 0x0004 (0x0004 - 0x0000)
struct TutorialEndGameComponent_SetTimerMaxCompletionPercentage final
{
public:
	float                                         percentage;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialEndGameComponent_SetTimerMaxCompletionPercentage) == 0x000004, "Wrong alignment on TutorialEndGameComponent_SetTimerMaxCompletionPercentage");
static_assert(sizeof(TutorialEndGameComponent_SetTimerMaxCompletionPercentage) == 0x000004, "Wrong size on TutorialEndGameComponent_SetTimerMaxCompletionPercentage");
static_assert(offsetof(TutorialEndGameComponent_SetTimerMaxCompletionPercentage, percentage) == 0x000000, "Member 'TutorialEndGameComponent_SetTimerMaxCompletionPercentage::percentage' has a wrong offset!");

// Function DeadByDaylight.TutorialGameMode.SetEscapeGenerators
// 0x0018 (0x0018 - 0x0000)
struct TutorialGameMode_SetEscapeGenerators final
{
public:
	TArray<class AGenerator*>                     escapeGenerators;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         requiredActivationCount;                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialGameMode_SetEscapeGenerators) == 0x000008, "Wrong alignment on TutorialGameMode_SetEscapeGenerators");
static_assert(sizeof(TutorialGameMode_SetEscapeGenerators) == 0x000018, "Wrong size on TutorialGameMode_SetEscapeGenerators");
static_assert(offsetof(TutorialGameMode_SetEscapeGenerators, escapeGenerators) == 0x000000, "Member 'TutorialGameMode_SetEscapeGenerators::escapeGenerators' has a wrong offset!");
static_assert(offsetof(TutorialGameMode_SetEscapeGenerators, requiredActivationCount) == 0x000010, "Member 'TutorialGameMode_SetEscapeGenerators::requiredActivationCount' has a wrong offset!");

// Function DeadByDaylight.TutorialGameMode.GetAtlantaTutorialPlayerHudController
// 0x0008 (0x0008 - 0x0000)
struct TutorialGameMode_GetAtlantaTutorialPlayerHudController final
{
public:
	class UAtlantaTutorialPlayerHudController*    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameMode_GetAtlantaTutorialPlayerHudController) == 0x000008, "Wrong alignment on TutorialGameMode_GetAtlantaTutorialPlayerHudController");
static_assert(sizeof(TutorialGameMode_GetAtlantaTutorialPlayerHudController) == 0x000008, "Wrong size on TutorialGameMode_GetAtlantaTutorialPlayerHudController");
static_assert(offsetof(TutorialGameMode_GetAtlantaTutorialPlayerHudController, ReturnValue) == 0x000000, "Member 'TutorialGameMode_GetAtlantaTutorialPlayerHudController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialGameMode.GetTutorialHighlightController
// 0x0008 (0x0008 - 0x0000)
struct TutorialGameMode_GetTutorialHighlightController final
{
public:
	class UTutorialHighlightController*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameMode_GetTutorialHighlightController) == 0x000008, "Wrong alignment on TutorialGameMode_GetTutorialHighlightController");
static_assert(sizeof(TutorialGameMode_GetTutorialHighlightController) == 0x000008, "Wrong size on TutorialGameMode_GetTutorialHighlightController");
static_assert(offsetof(TutorialGameMode_GetTutorialHighlightController, ReturnValue) == 0x000000, "Member 'TutorialGameMode_GetTutorialHighlightController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialGameMode.GetTutorialNotificationController
// 0x0008 (0x0008 - 0x0000)
struct TutorialGameMode_GetTutorialNotificationController final
{
public:
	class UTutorialNotificationController*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameMode_GetTutorialNotificationController) == 0x000008, "Wrong alignment on TutorialGameMode_GetTutorialNotificationController");
static_assert(sizeof(TutorialGameMode_GetTutorialNotificationController) == 0x000008, "Wrong size on TutorialGameMode_GetTutorialNotificationController");
static_assert(offsetof(TutorialGameMode_GetTutorialNotificationController, ReturnValue) == 0x000000, "Member 'TutorialGameMode_GetTutorialNotificationController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialGameMode.GetTutorialObjectiveController
// 0x0008 (0x0008 - 0x0000)
struct TutorialGameMode_GetTutorialObjectiveController final
{
public:
	class UTutorialObjectiveController*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameMode_GetTutorialObjectiveController) == 0x000008, "Wrong alignment on TutorialGameMode_GetTutorialObjectiveController");
static_assert(sizeof(TutorialGameMode_GetTutorialObjectiveController) == 0x000008, "Wrong size on TutorialGameMode_GetTutorialObjectiveController");
static_assert(offsetof(TutorialGameMode_GetTutorialObjectiveController, ReturnValue) == 0x000000, "Member 'TutorialGameMode_GetTutorialObjectiveController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialHighlightController.SetHudComponentHighlight
// 0x0002 (0x0002 - 0x0000)
struct TutorialHighlightController_SetHudComponentHighlight final
{
public:
	EHudComponent                                 hudComponent;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          show;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialHighlightController_SetHudComponentHighlight) == 0x000001, "Wrong alignment on TutorialHighlightController_SetHudComponentHighlight");
static_assert(sizeof(TutorialHighlightController_SetHudComponentHighlight) == 0x000002, "Wrong size on TutorialHighlightController_SetHudComponentHighlight");
static_assert(offsetof(TutorialHighlightController_SetHudComponentHighlight, hudComponent) == 0x000000, "Member 'TutorialHighlightController_SetHudComponentHighlight::hudComponent' has a wrong offset!");
static_assert(offsetof(TutorialHighlightController_SetHudComponentHighlight, show) == 0x000001, "Member 'TutorialHighlightController_SetHudComponentHighlight::show' has a wrong offset!");

// Function DeadByDaylight.TutorialObjectiveController.AddObjective
// 0x000C (0x000C - 0x0000)
struct TutorialObjectiveController_AddObjective final
{
public:
	class FName                                   tutorialObjectiveId;                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialObjectiveController_AddObjective) == 0x000004, "Wrong alignment on TutorialObjectiveController_AddObjective");
static_assert(sizeof(TutorialObjectiveController_AddObjective) == 0x00000C, "Wrong size on TutorialObjectiveController_AddObjective");
static_assert(offsetof(TutorialObjectiveController_AddObjective, tutorialObjectiveId) == 0x000000, "Member 'TutorialObjectiveController_AddObjective::tutorialObjectiveId' has a wrong offset!");

// Function DeadByDaylight.TutorialObjectiveController.CompleteObjective
// 0x0010 (0x0010 - 0x0000)
struct TutorialObjectiveController_CompleteObjective final
{
public:
	class FName                                   tutorialObjectiveId;                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          removeAfterCompletion;                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialObjectiveController_CompleteObjective) == 0x000004, "Wrong alignment on TutorialObjectiveController_CompleteObjective");
static_assert(sizeof(TutorialObjectiveController_CompleteObjective) == 0x000010, "Wrong size on TutorialObjectiveController_CompleteObjective");
static_assert(offsetof(TutorialObjectiveController_CompleteObjective, tutorialObjectiveId) == 0x000000, "Member 'TutorialObjectiveController_CompleteObjective::tutorialObjectiveId' has a wrong offset!");
static_assert(offsetof(TutorialObjectiveController_CompleteObjective, removeAfterCompletion) == 0x00000C, "Member 'TutorialObjectiveController_CompleteObjective::removeAfterCompletion' has a wrong offset!");

// Function DeadByDaylight.TutorialObjectiveController.RemoveObjective
// 0x000C (0x000C - 0x0000)
struct TutorialObjectiveController_RemoveObjective final
{
public:
	class FName                                   tutorialObjectiveId;                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialObjectiveController_RemoveObjective) == 0x000004, "Wrong alignment on TutorialObjectiveController_RemoveObjective");
static_assert(sizeof(TutorialObjectiveController_RemoveObjective) == 0x00000C, "Wrong size on TutorialObjectiveController_RemoveObjective");
static_assert(offsetof(TutorialObjectiveController_RemoveObjective, tutorialObjectiveId) == 0x000000, "Member 'TutorialObjectiveController_RemoveObjective::tutorialObjectiveId' has a wrong offset!");

// Function DeadByDaylight.UMGPlayerRankInfo.SetData
// 0x0048 (0x0048 - 0x0000)
struct UMGPlayerRankInfo_SetData final
{
public:
	int32                                         rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pipsRequiredForNextRank;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         filledPips;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   titleLabel;                                        // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   pipLabel;                                          // 0x0028(0x0018)(Parm, NativeAccessSpecifierPublic)
	EPlayerRole                                   playerRole;                                        // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHighlight;                                       // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGPlayerRankInfo_SetData) == 0x000008, "Wrong alignment on UMGPlayerRankInfo_SetData");
static_assert(sizeof(UMGPlayerRankInfo_SetData) == 0x000048, "Wrong size on UMGPlayerRankInfo_SetData");
static_assert(offsetof(UMGPlayerRankInfo_SetData, rank) == 0x000000, "Member 'UMGPlayerRankInfo_SetData::rank' has a wrong offset!");
static_assert(offsetof(UMGPlayerRankInfo_SetData, pipsRequiredForNextRank) == 0x000004, "Member 'UMGPlayerRankInfo_SetData::pipsRequiredForNextRank' has a wrong offset!");
static_assert(offsetof(UMGPlayerRankInfo_SetData, filledPips) == 0x000008, "Member 'UMGPlayerRankInfo_SetData::filledPips' has a wrong offset!");
static_assert(offsetof(UMGPlayerRankInfo_SetData, titleLabel) == 0x000010, "Member 'UMGPlayerRankInfo_SetData::titleLabel' has a wrong offset!");
static_assert(offsetof(UMGPlayerRankInfo_SetData, pipLabel) == 0x000028, "Member 'UMGPlayerRankInfo_SetData::pipLabel' has a wrong offset!");
static_assert(offsetof(UMGPlayerRankInfo_SetData, playerRole) == 0x000040, "Member 'UMGPlayerRankInfo_SetData::playerRole' has a wrong offset!");
static_assert(offsetof(UMGPlayerRankInfo_SetData, IsHighlight) == 0x000041, "Member 'UMGPlayerRankInfo_SetData::IsHighlight' has a wrong offset!");

// Function DeadByDaylight.TutorialsUtilities.DestroyAI
// 0x0008 (0x0008 - 0x0000)
struct TutorialsUtilities_DestroyAI final
{
public:
	class AAIController*                          aiController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialsUtilities_DestroyAI) == 0x000008, "Wrong alignment on TutorialsUtilities_DestroyAI");
static_assert(sizeof(TutorialsUtilities_DestroyAI) == 0x000008, "Wrong size on TutorialsUtilities_DestroyAI");
static_assert(offsetof(TutorialsUtilities_DestroyAI, aiController) == 0x000000, "Member 'TutorialsUtilities_DestroyAI::aiController' has a wrong offset!");

// Function DeadByDaylight.TutorialsUtilities.GetTutorialsUtilities
// 0x0010 (0x0010 - 0x0000)
struct TutorialsUtilities_GetTutorialsUtilities final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATutorialsUtilities*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialsUtilities_GetTutorialsUtilities) == 0x000008, "Wrong alignment on TutorialsUtilities_GetTutorialsUtilities");
static_assert(sizeof(TutorialsUtilities_GetTutorialsUtilities) == 0x000010, "Wrong size on TutorialsUtilities_GetTutorialsUtilities");
static_assert(offsetof(TutorialsUtilities_GetTutorialsUtilities, WorldContextObject) == 0x000000, "Member 'TutorialsUtilities_GetTutorialsUtilities::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TutorialsUtilities_GetTutorialsUtilities, ReturnValue) == 0x000008, "Member 'TutorialsUtilities_GetTutorialsUtilities::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AnimationWidget.SetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct AnimationWidget_SetPlayRate final
{
public:
	float                                         rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationWidget_SetPlayRate) == 0x000004, "Wrong alignment on AnimationWidget_SetPlayRate");
static_assert(sizeof(AnimationWidget_SetPlayRate) == 0x000004, "Wrong size on AnimationWidget_SetPlayRate");
static_assert(offsetof(AnimationWidget_SetPlayRate, rate) == 0x000000, "Member 'AnimationWidget_SetPlayRate::rate' has a wrong offset!");

// Function DeadByDaylight.AnimationWidget.GetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct AnimationWidget_GetPlayRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationWidget_GetPlayRate) == 0x000004, "Wrong alignment on AnimationWidget_GetPlayRate");
static_assert(sizeof(AnimationWidget_GetPlayRate) == 0x000004, "Wrong size on AnimationWidget_GetPlayRate");
static_assert(offsetof(AnimationWidget_GetPlayRate, ReturnValue) == 0x000000, "Member 'AnimationWidget_GetPlayRate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGAddonButton.UpdateAddonButton
// 0x0008 (0x0008 - 0x0000)
struct UMGAddonButton_UpdateAddonButton final
{
public:
	class UItemAddon*                             addon;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAddonButton_UpdateAddonButton) == 0x000008, "Wrong alignment on UMGAddonButton_UpdateAddonButton");
static_assert(sizeof(UMGAddonButton_UpdateAddonButton) == 0x000008, "Wrong size on UMGAddonButton_UpdateAddonButton");
static_assert(offsetof(UMGAddonButton_UpdateAddonButton, addon) == 0x000000, "Member 'UMGAddonButton_UpdateAddonButton::addon' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaEventsScreen.BroadcastDeepLinkRequest
// 0x0010 (0x0010 - 0x0000)
struct UMGAtlantaEventsScreen_BroadcastDeepLinkRequest final
{
public:
	class FString                                 id;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaEventsScreen_BroadcastDeepLinkRequest) == 0x000008, "Wrong alignment on UMGAtlantaEventsScreen_BroadcastDeepLinkRequest");
static_assert(sizeof(UMGAtlantaEventsScreen_BroadcastDeepLinkRequest) == 0x000010, "Wrong size on UMGAtlantaEventsScreen_BroadcastDeepLinkRequest");
static_assert(offsetof(UMGAtlantaEventsScreen_BroadcastDeepLinkRequest, id) == 0x000000, "Member 'UMGAtlantaEventsScreen_BroadcastDeepLinkRequest::id' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaEventsScreen.HandleEventTabClicked
// 0x0010 (0x0010 - 0x0000)
struct UMGAtlantaEventsScreen_HandleEventTabClicked final
{
public:
	class FString                                 id;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaEventsScreen_HandleEventTabClicked) == 0x000008, "Wrong alignment on UMGAtlantaEventsScreen_HandleEventTabClicked");
static_assert(sizeof(UMGAtlantaEventsScreen_HandleEventTabClicked) == 0x000010, "Wrong size on UMGAtlantaEventsScreen_HandleEventTabClicked");
static_assert(offsetof(UMGAtlantaEventsScreen_HandleEventTabClicked, id) == 0x000000, "Member 'UMGAtlantaEventsScreen_HandleEventTabClicked::id' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaEventsTab.SetSelectionVisuals
// 0x0001 (0x0001 - 0x0000)
struct UMGAtlantaEventsTab_SetSelectionVisuals final
{
public:
	bool                                          isSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaEventsTab_SetSelectionVisuals) == 0x000001, "Wrong alignment on UMGAtlantaEventsTab_SetSelectionVisuals");
static_assert(sizeof(UMGAtlantaEventsTab_SetSelectionVisuals) == 0x000001, "Wrong size on UMGAtlantaEventsTab_SetSelectionVisuals");
static_assert(offsetof(UMGAtlantaEventsTab_SetSelectionVisuals, isSelected) == 0x000000, "Member 'UMGAtlantaEventsTab_SetSelectionVisuals::isSelected' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaFreeTicketConfirmToUsePopup.GetDecorator
// 0x0008 (0x0008 - 0x0000)
struct UMGAtlantaFreeTicketConfirmToUsePopup_GetDecorator final
{
public:
	class UUMGRichTextFreeTicketDecorator*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaFreeTicketConfirmToUsePopup_GetDecorator) == 0x000008, "Wrong alignment on UMGAtlantaFreeTicketConfirmToUsePopup_GetDecorator");
static_assert(sizeof(UMGAtlantaFreeTicketConfirmToUsePopup_GetDecorator) == 0x000008, "Wrong size on UMGAtlantaFreeTicketConfirmToUsePopup_GetDecorator");
static_assert(offsetof(UMGAtlantaFreeTicketConfirmToUsePopup_GetDecorator, ReturnValue) == 0x000000, "Member 'UMGAtlantaFreeTicketConfirmToUsePopup_GetDecorator::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaFreeTicketConfirmToUsePopup.SetFreeTicketIconTexture
// 0x0001 (0x0001 - 0x0000)
struct UMGAtlantaFreeTicketConfirmToUsePopup_SetFreeTicketIconTexture final
{
public:
	bool                                          isSlasher;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaFreeTicketConfirmToUsePopup_SetFreeTicketIconTexture) == 0x000001, "Wrong alignment on UMGAtlantaFreeTicketConfirmToUsePopup_SetFreeTicketIconTexture");
static_assert(sizeof(UMGAtlantaFreeTicketConfirmToUsePopup_SetFreeTicketIconTexture) == 0x000001, "Wrong size on UMGAtlantaFreeTicketConfirmToUsePopup_SetFreeTicketIconTexture");
static_assert(offsetof(UMGAtlantaFreeTicketConfirmToUsePopup_SetFreeTicketIconTexture, isSlasher) == 0x000000, "Member 'UMGAtlantaFreeTicketConfirmToUsePopup_SetFreeTicketIconTexture::isSlasher' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaFreeTicketConfirmToUsePopup.SetPopupTitle
// 0x0018 (0x0018 - 0x0000)
struct UMGAtlantaFreeTicketConfirmToUsePopup_SetPopupTitle final
{
public:
	class FText                                   characterName;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaFreeTicketConfirmToUsePopup_SetPopupTitle) == 0x000008, "Wrong alignment on UMGAtlantaFreeTicketConfirmToUsePopup_SetPopupTitle");
static_assert(sizeof(UMGAtlantaFreeTicketConfirmToUsePopup_SetPopupTitle) == 0x000018, "Wrong size on UMGAtlantaFreeTicketConfirmToUsePopup_SetPopupTitle");
static_assert(offsetof(UMGAtlantaFreeTicketConfirmToUsePopup_SetPopupTitle, characterName) == 0x000000, "Member 'UMGAtlantaFreeTicketConfirmToUsePopup_SetPopupTitle::characterName' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaLevelUpPopup.OnSetData
// 0x0020 (0x0020 - 0x0000)
struct UMGAtlantaLevelUpPopup_OnSetData final
{
public:
	int32                                         level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         prestige;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          prestigeIncreased;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRewardItemData>                rewards;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaLevelUpPopup_OnSetData) == 0x000008, "Wrong alignment on UMGAtlantaLevelUpPopup_OnSetData");
static_assert(sizeof(UMGAtlantaLevelUpPopup_OnSetData) == 0x000020, "Wrong size on UMGAtlantaLevelUpPopup_OnSetData");
static_assert(offsetof(UMGAtlantaLevelUpPopup_OnSetData, level) == 0x000000, "Member 'UMGAtlantaLevelUpPopup_OnSetData::level' has a wrong offset!");
static_assert(offsetof(UMGAtlantaLevelUpPopup_OnSetData, prestige) == 0x000004, "Member 'UMGAtlantaLevelUpPopup_OnSetData::prestige' has a wrong offset!");
static_assert(offsetof(UMGAtlantaLevelUpPopup_OnSetData, prestigeIncreased) == 0x000008, "Member 'UMGAtlantaLevelUpPopup_OnSetData::prestigeIncreased' has a wrong offset!");
static_assert(offsetof(UMGAtlantaLevelUpPopup_OnSetData, rewards) == 0x000010, "Member 'UMGAtlantaLevelUpPopup_OnSetData::rewards' has a wrong offset!");

// Function DeadByDaylight.UMGSelectedCharacterWidget.SetVisualsForPartyState
// 0x0001 (0x0001 - 0x0000)
struct UMGSelectedCharacterWidget_SetVisualsForPartyState final
{
public:
	bool                                          triggerPartyVisuals;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSelectedCharacterWidget_SetVisualsForPartyState) == 0x000001, "Wrong alignment on UMGSelectedCharacterWidget_SetVisualsForPartyState");
static_assert(sizeof(UMGSelectedCharacterWidget_SetVisualsForPartyState) == 0x000001, "Wrong size on UMGSelectedCharacterWidget_SetVisualsForPartyState");
static_assert(offsetof(UMGSelectedCharacterWidget_SetVisualsForPartyState, triggerPartyVisuals) == 0x000000, "Member 'UMGSelectedCharacterWidget_SetVisualsForPartyState::triggerPartyVisuals' has a wrong offset!");

// Function DeadByDaylight.UMGSelectedCharacterWidget.SetVisualsForReadyState
// 0x0001 (0x0001 - 0x0000)
struct UMGSelectedCharacterWidget_SetVisualsForReadyState final
{
public:
	bool                                          isPlayerReady;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSelectedCharacterWidget_SetVisualsForReadyState) == 0x000001, "Wrong alignment on UMGSelectedCharacterWidget_SetVisualsForReadyState");
static_assert(sizeof(UMGSelectedCharacterWidget_SetVisualsForReadyState) == 0x000001, "Wrong size on UMGSelectedCharacterWidget_SetVisualsForReadyState");
static_assert(offsetof(UMGSelectedCharacterWidget_SetVisualsForReadyState, isPlayerReady) == 0x000000, "Member 'UMGSelectedCharacterWidget_SetVisualsForReadyState::isPlayerReady' has a wrong offset!");

// Function DeadByDaylight.UMGAltantaRitual.BroadcastOnClaimRewardsButtonPressed
// 0x0004 (0x0004 - 0x0000)
struct UMGAltantaRitual_BroadcastOnClaimRewardsButtonPressed final
{
public:
	int32                                         ritualId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAltantaRitual_BroadcastOnClaimRewardsButtonPressed) == 0x000004, "Wrong alignment on UMGAltantaRitual_BroadcastOnClaimRewardsButtonPressed");
static_assert(sizeof(UMGAltantaRitual_BroadcastOnClaimRewardsButtonPressed) == 0x000004, "Wrong size on UMGAltantaRitual_BroadcastOnClaimRewardsButtonPressed");
static_assert(offsetof(UMGAltantaRitual_BroadcastOnClaimRewardsButtonPressed, ritualId) == 0x000000, "Member 'UMGAltantaRitual_BroadcastOnClaimRewardsButtonPressed::ritualId' has a wrong offset!");

// Function DeadByDaylight.UMGAltantaRitual.SetData
// 0x0068 (0x0068 - 0x0000)
struct UMGAltantaRitual_SetData final
{
public:
	struct FAtlantaRitualUIData                   ritual;                                            // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAltantaRitual_SetData) == 0x000008, "Wrong alignment on UMGAltantaRitual_SetData");
static_assert(sizeof(UMGAltantaRitual_SetData) == 0x000068, "Wrong size on UMGAltantaRitual_SetData");
static_assert(offsetof(UMGAltantaRitual_SetData, ritual) == 0x000000, "Member 'UMGAltantaRitual_SetData::ritual' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaRitualsScreen.BroadcastOnClaimRewardButtonPressed
// 0x0004 (0x0004 - 0x0000)
struct UMGAtlantaRitualsScreen_BroadcastOnClaimRewardButtonPressed final
{
public:
	int32                                         ritualId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaRitualsScreen_BroadcastOnClaimRewardButtonPressed) == 0x000004, "Wrong alignment on UMGAtlantaRitualsScreen_BroadcastOnClaimRewardButtonPressed");
static_assert(sizeof(UMGAtlantaRitualsScreen_BroadcastOnClaimRewardButtonPressed) == 0x000004, "Wrong size on UMGAtlantaRitualsScreen_BroadcastOnClaimRewardButtonPressed");
static_assert(offsetof(UMGAtlantaRitualsScreen_BroadcastOnClaimRewardButtonPressed, ritualId) == 0x000000, "Member 'UMGAtlantaRitualsScreen_BroadcastOnClaimRewardButtonPressed::ritualId' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaRitualsScreen.SetNewRitualNumbers
// 0x0008 (0x0008 - 0x0000)
struct UMGAtlantaRitualsScreen_SetNewRitualNumbers final
{
public:
	int32                                         newDailyRitualNumber;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         newWeeklyRitualNumber;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaRitualsScreen_SetNewRitualNumbers) == 0x000004, "Wrong alignment on UMGAtlantaRitualsScreen_SetNewRitualNumbers");
static_assert(sizeof(UMGAtlantaRitualsScreen_SetNewRitualNumbers) == 0x000008, "Wrong size on UMGAtlantaRitualsScreen_SetNewRitualNumbers");
static_assert(offsetof(UMGAtlantaRitualsScreen_SetNewRitualNumbers, newDailyRitualNumber) == 0x000000, "Member 'UMGAtlantaRitualsScreen_SetNewRitualNumbers::newDailyRitualNumber' has a wrong offset!");
static_assert(offsetof(UMGAtlantaRitualsScreen_SetNewRitualNumbers, newWeeklyRitualNumber) == 0x000004, "Member 'UMGAtlantaRitualsScreen_SetNewRitualNumbers::newWeeklyRitualNumber' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaRitualTab.BroadcastOnClaimRewardsButtonPressed
// 0x0004 (0x0004 - 0x0000)
struct UMGAtlantaRitualTab_BroadcastOnClaimRewardsButtonPressed final
{
public:
	int32                                         ritualId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaRitualTab_BroadcastOnClaimRewardsButtonPressed) == 0x000004, "Wrong alignment on UMGAtlantaRitualTab_BroadcastOnClaimRewardsButtonPressed");
static_assert(sizeof(UMGAtlantaRitualTab_BroadcastOnClaimRewardsButtonPressed) == 0x000004, "Wrong size on UMGAtlantaRitualTab_BroadcastOnClaimRewardsButtonPressed");
static_assert(offsetof(UMGAtlantaRitualTab_BroadcastOnClaimRewardsButtonPressed, ritualId) == 0x000000, "Member 'UMGAtlantaRitualTab_BroadcastOnClaimRewardsButtonPressed::ritualId' has a wrong offset!");

// Function DeadByDaylight.UMGSettingControlsContextWidget.HandleAimAssistToggleClick
// 0x0001 (0x0001 - 0x0000)
struct UMGSettingControlsContextWidget_HandleAimAssistToggleClick final
{
public:
	bool                                          toggleValue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingControlsContextWidget_HandleAimAssistToggleClick) == 0x000001, "Wrong alignment on UMGSettingControlsContextWidget_HandleAimAssistToggleClick");
static_assert(sizeof(UMGSettingControlsContextWidget_HandleAimAssistToggleClick) == 0x000001, "Wrong size on UMGSettingControlsContextWidget_HandleAimAssistToggleClick");
static_assert(offsetof(UMGSettingControlsContextWidget_HandleAimAssistToggleClick, toggleValue) == 0x000000, "Member 'UMGSettingControlsContextWidget_HandleAimAssistToggleClick::toggleValue' has a wrong offset!");

// Function DeadByDaylight.UMGSettingControlsContextWidget.HandleHandSideToggleClick
// 0x0004 (0x0004 - 0x0000)
struct UMGSettingControlsContextWidget_HandleHandSideToggleClick final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingControlsContextWidget_HandleHandSideToggleClick) == 0x000004, "Wrong alignment on UMGSettingControlsContextWidget_HandleHandSideToggleClick");
static_assert(sizeof(UMGSettingControlsContextWidget_HandleHandSideToggleClick) == 0x000004, "Wrong size on UMGSettingControlsContextWidget_HandleHandSideToggleClick");
static_assert(offsetof(UMGSettingControlsContextWidget_HandleHandSideToggleClick, index) == 0x000000, "Member 'UMGSettingControlsContextWidget_HandleHandSideToggleClick::index' has a wrong offset!");

// Function DeadByDaylight.UMGSettingControlsContextWidget.HandleInteractionButtonToggleClick
// 0x0004 (0x0004 - 0x0000)
struct UMGSettingControlsContextWidget_HandleInteractionButtonToggleClick final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingControlsContextWidget_HandleInteractionButtonToggleClick) == 0x000004, "Wrong alignment on UMGSettingControlsContextWidget_HandleInteractionButtonToggleClick");
static_assert(sizeof(UMGSettingControlsContextWidget_HandleInteractionButtonToggleClick) == 0x000004, "Wrong size on UMGSettingControlsContextWidget_HandleInteractionButtonToggleClick");
static_assert(offsetof(UMGSettingControlsContextWidget_HandleInteractionButtonToggleClick, index) == 0x000000, "Member 'UMGSettingControlsContextWidget_HandleInteractionButtonToggleClick::index' has a wrong offset!");

// Function DeadByDaylight.UMGSettingControlsContextWidget.HandleInvertYToggleClick
// 0x0001 (0x0001 - 0x0000)
struct UMGSettingControlsContextWidget_HandleInvertYToggleClick final
{
public:
	bool                                          toggleValue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingControlsContextWidget_HandleInvertYToggleClick) == 0x000001, "Wrong alignment on UMGSettingControlsContextWidget_HandleInvertYToggleClick");
static_assert(sizeof(UMGSettingControlsContextWidget_HandleInvertYToggleClick) == 0x000001, "Wrong size on UMGSettingControlsContextWidget_HandleInvertYToggleClick");
static_assert(offsetof(UMGSettingControlsContextWidget_HandleInvertYToggleClick, toggleValue) == 0x000000, "Member 'UMGSettingControlsContextWidget_HandleInvertYToggleClick::toggleValue' has a wrong offset!");

// Function DeadByDaylight.UMGSettingControlsContextWidget.HandleKillerCameraSensitivityChanged
// 0x0004 (0x0004 - 0x0000)
struct UMGSettingControlsContextWidget_HandleKillerCameraSensitivityChanged final
{
public:
	float                                         sliderValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingControlsContextWidget_HandleKillerCameraSensitivityChanged) == 0x000004, "Wrong alignment on UMGSettingControlsContextWidget_HandleKillerCameraSensitivityChanged");
static_assert(sizeof(UMGSettingControlsContextWidget_HandleKillerCameraSensitivityChanged) == 0x000004, "Wrong size on UMGSettingControlsContextWidget_HandleKillerCameraSensitivityChanged");
static_assert(offsetof(UMGSettingControlsContextWidget_HandleKillerCameraSensitivityChanged, sliderValue) == 0x000000, "Member 'UMGSettingControlsContextWidget_HandleKillerCameraSensitivityChanged::sliderValue' has a wrong offset!");

// Function DeadByDaylight.UMGSettingControlsContextWidget.HandleSurvivorCameraSensitivityChanged
// 0x0004 (0x0004 - 0x0000)
struct UMGSettingControlsContextWidget_HandleSurvivorCameraSensitivityChanged final
{
public:
	float                                         sliderValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingControlsContextWidget_HandleSurvivorCameraSensitivityChanged) == 0x000004, "Wrong alignment on UMGSettingControlsContextWidget_HandleSurvivorCameraSensitivityChanged");
static_assert(sizeof(UMGSettingControlsContextWidget_HandleSurvivorCameraSensitivityChanged) == 0x000004, "Wrong size on UMGSettingControlsContextWidget_HandleSurvivorCameraSensitivityChanged");
static_assert(offsetof(UMGSettingControlsContextWidget_HandleSurvivorCameraSensitivityChanged, sliderValue) == 0x000000, "Member 'UMGSettingControlsContextWidget_HandleSurvivorCameraSensitivityChanged::sliderValue' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaSettingScreen.HandleAimAssistToggleClick
// 0x0001 (0x0001 - 0x0000)
struct UMGAtlantaSettingScreen_HandleAimAssistToggleClick final
{
public:
	bool                                          toggleValue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaSettingScreen_HandleAimAssistToggleClick) == 0x000001, "Wrong alignment on UMGAtlantaSettingScreen_HandleAimAssistToggleClick");
static_assert(sizeof(UMGAtlantaSettingScreen_HandleAimAssistToggleClick) == 0x000001, "Wrong size on UMGAtlantaSettingScreen_HandleAimAssistToggleClick");
static_assert(offsetof(UMGAtlantaSettingScreen_HandleAimAssistToggleClick, toggleValue) == 0x000000, "Member 'UMGAtlantaSettingScreen_HandleAimAssistToggleClick::toggleValue' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaSettingScreen.HandleAlwaysDisplayButtonClick
// 0x0004 (0x0004 - 0x0000)
struct UMGAtlantaSettingScreen_HandleAlwaysDisplayButtonClick final
{
public:
	int32                                         tabIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaSettingScreen_HandleAlwaysDisplayButtonClick) == 0x000004, "Wrong alignment on UMGAtlantaSettingScreen_HandleAlwaysDisplayButtonClick");
static_assert(sizeof(UMGAtlantaSettingScreen_HandleAlwaysDisplayButtonClick) == 0x000004, "Wrong size on UMGAtlantaSettingScreen_HandleAlwaysDisplayButtonClick");
static_assert(offsetof(UMGAtlantaSettingScreen_HandleAlwaysDisplayButtonClick, tabIndex) == 0x000000, "Member 'UMGAtlantaSettingScreen_HandleAlwaysDisplayButtonClick::tabIndex' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaSettingScreen.HandleContextButtonClickEvent
// 0x0004 (0x0004 - 0x0000)
struct UMGAtlantaSettingScreen_HandleContextButtonClickEvent final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaSettingScreen_HandleContextButtonClickEvent) == 0x000004, "Wrong alignment on UMGAtlantaSettingScreen_HandleContextButtonClickEvent");
static_assert(sizeof(UMGAtlantaSettingScreen_HandleContextButtonClickEvent) == 0x000004, "Wrong size on UMGAtlantaSettingScreen_HandleContextButtonClickEvent");
static_assert(offsetof(UMGAtlantaSettingScreen_HandleContextButtonClickEvent, index) == 0x000000, "Member 'UMGAtlantaSettingScreen_HandleContextButtonClickEvent::index' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaSettingScreen.HandleHandSideToggleClick
// 0x0004 (0x0004 - 0x0000)
struct UMGAtlantaSettingScreen_HandleHandSideToggleClick final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaSettingScreen_HandleHandSideToggleClick) == 0x000004, "Wrong alignment on UMGAtlantaSettingScreen_HandleHandSideToggleClick");
static_assert(sizeof(UMGAtlantaSettingScreen_HandleHandSideToggleClick) == 0x000004, "Wrong size on UMGAtlantaSettingScreen_HandleHandSideToggleClick");
static_assert(offsetof(UMGAtlantaSettingScreen_HandleHandSideToggleClick, index) == 0x000000, "Member 'UMGAtlantaSettingScreen_HandleHandSideToggleClick::index' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaSettingScreen.HandleInteractionButtonToggleClick
// 0x0004 (0x0004 - 0x0000)
struct UMGAtlantaSettingScreen_HandleInteractionButtonToggleClick final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaSettingScreen_HandleInteractionButtonToggleClick) == 0x000004, "Wrong alignment on UMGAtlantaSettingScreen_HandleInteractionButtonToggleClick");
static_assert(sizeof(UMGAtlantaSettingScreen_HandleInteractionButtonToggleClick) == 0x000004, "Wrong size on UMGAtlantaSettingScreen_HandleInteractionButtonToggleClick");
static_assert(offsetof(UMGAtlantaSettingScreen_HandleInteractionButtonToggleClick, index) == 0x000000, "Member 'UMGAtlantaSettingScreen_HandleInteractionButtonToggleClick::index' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaSettingScreen.HandleInvertYToggleClick
// 0x0001 (0x0001 - 0x0000)
struct UMGAtlantaSettingScreen_HandleInvertYToggleClick final
{
public:
	bool                                          toggleValue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaSettingScreen_HandleInvertYToggleClick) == 0x000001, "Wrong alignment on UMGAtlantaSettingScreen_HandleInvertYToggleClick");
static_assert(sizeof(UMGAtlantaSettingScreen_HandleInvertYToggleClick) == 0x000001, "Wrong size on UMGAtlantaSettingScreen_HandleInvertYToggleClick");
static_assert(offsetof(UMGAtlantaSettingScreen_HandleInvertYToggleClick, toggleValue) == 0x000000, "Member 'UMGAtlantaSettingScreen_HandleInvertYToggleClick::toggleValue' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaSettingScreen.HandleKillerCameraSensitivityChanged
// 0x0004 (0x0004 - 0x0000)
struct UMGAtlantaSettingScreen_HandleKillerCameraSensitivityChanged final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaSettingScreen_HandleKillerCameraSensitivityChanged) == 0x000004, "Wrong alignment on UMGAtlantaSettingScreen_HandleKillerCameraSensitivityChanged");
static_assert(sizeof(UMGAtlantaSettingScreen_HandleKillerCameraSensitivityChanged) == 0x000004, "Wrong size on UMGAtlantaSettingScreen_HandleKillerCameraSensitivityChanged");
static_assert(offsetof(UMGAtlantaSettingScreen_HandleKillerCameraSensitivityChanged, value) == 0x000000, "Member 'UMGAtlantaSettingScreen_HandleKillerCameraSensitivityChanged::value' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaSettingScreen.HandleLanguageButtonClick
// 0x0004 (0x0004 - 0x0000)
struct UMGAtlantaSettingScreen_HandleLanguageButtonClick final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaSettingScreen_HandleLanguageButtonClick) == 0x000004, "Wrong alignment on UMGAtlantaSettingScreen_HandleLanguageButtonClick");
static_assert(sizeof(UMGAtlantaSettingScreen_HandleLanguageButtonClick) == 0x000004, "Wrong size on UMGAtlantaSettingScreen_HandleLanguageButtonClick");
static_assert(offsetof(UMGAtlantaSettingScreen_HandleLanguageButtonClick, index) == 0x000000, "Member 'UMGAtlantaSettingScreen_HandleLanguageButtonClick::index' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaSettingScreen.HandleSettingTabClick
// 0x0004 (0x0004 - 0x0000)
struct UMGAtlantaSettingScreen_HandleSettingTabClick final
{
public:
	int32                                         tabIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaSettingScreen_HandleSettingTabClick) == 0x000004, "Wrong alignment on UMGAtlantaSettingScreen_HandleSettingTabClick");
static_assert(sizeof(UMGAtlantaSettingScreen_HandleSettingTabClick) == 0x000004, "Wrong size on UMGAtlantaSettingScreen_HandleSettingTabClick");
static_assert(offsetof(UMGAtlantaSettingScreen_HandleSettingTabClick, tabIndex) == 0x000000, "Member 'UMGAtlantaSettingScreen_HandleSettingTabClick::tabIndex' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaSettingScreen.HandleSurvivorCameraSensitivityChanged
// 0x0004 (0x0004 - 0x0000)
struct UMGAtlantaSettingScreen_HandleSurvivorCameraSensitivityChanged final
{
public:
	int32                                         value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaSettingScreen_HandleSurvivorCameraSensitivityChanged) == 0x000004, "Wrong alignment on UMGAtlantaSettingScreen_HandleSurvivorCameraSensitivityChanged");
static_assert(sizeof(UMGAtlantaSettingScreen_HandleSurvivorCameraSensitivityChanged) == 0x000004, "Wrong size on UMGAtlantaSettingScreen_HandleSurvivorCameraSensitivityChanged");
static_assert(offsetof(UMGAtlantaSettingScreen_HandleSurvivorCameraSensitivityChanged, value) == 0x000000, "Member 'UMGAtlantaSettingScreen_HandleSurvivorCameraSensitivityChanged::value' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaSettingScreen.SetRightTopTextInfo
// 0x0030 (0x0030 - 0x0000)
struct UMGAtlantaSettingScreen_SetRightTopTextInfo final
{
public:
	class FText                                   title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 content;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              textVisibility;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGAtlantaSettingScreen_SetRightTopTextInfo) == 0x000008, "Wrong alignment on UMGAtlantaSettingScreen_SetRightTopTextInfo");
static_assert(sizeof(UMGAtlantaSettingScreen_SetRightTopTextInfo) == 0x000030, "Wrong size on UMGAtlantaSettingScreen_SetRightTopTextInfo");
static_assert(offsetof(UMGAtlantaSettingScreen_SetRightTopTextInfo, title) == 0x000000, "Member 'UMGAtlantaSettingScreen_SetRightTopTextInfo::title' has a wrong offset!");
static_assert(offsetof(UMGAtlantaSettingScreen_SetRightTopTextInfo, content) == 0x000018, "Member 'UMGAtlantaSettingScreen_SetRightTopTextInfo::content' has a wrong offset!");
static_assert(offsetof(UMGAtlantaSettingScreen_SetRightTopTextInfo, textVisibility) == 0x000028, "Member 'UMGAtlantaSettingScreen_SetRightTopTextInfo::textVisibility' has a wrong offset!");

// Function DeadByDaylight.UMGAtlantaSettingScreen.ShowCreditsOrConsentsPopup
// 0x0020 (0x0020 - 0x0000)
struct UMGAtlantaSettingScreen_ShowCreditsOrConsentsPopup final
{
public:
	class FString                                 title;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 content;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGAtlantaSettingScreen_ShowCreditsOrConsentsPopup) == 0x000008, "Wrong alignment on UMGAtlantaSettingScreen_ShowCreditsOrConsentsPopup");
static_assert(sizeof(UMGAtlantaSettingScreen_ShowCreditsOrConsentsPopup) == 0x000020, "Wrong size on UMGAtlantaSettingScreen_ShowCreditsOrConsentsPopup");
static_assert(offsetof(UMGAtlantaSettingScreen_ShowCreditsOrConsentsPopup, title) == 0x000000, "Member 'UMGAtlantaSettingScreen_ShowCreditsOrConsentsPopup::title' has a wrong offset!");
static_assert(offsetof(UMGAtlantaSettingScreen_ShowCreditsOrConsentsPopup, content) == 0x000010, "Member 'UMGAtlantaSettingScreen_ShowCreditsOrConsentsPopup::content' has a wrong offset!");

// Function DeadByDaylight.UMGBasePassStorefrontWidget.HandleBuySubscriptionPackButtonClickedEvent
// 0x000C (0x000C - 0x0000)
struct UMGBasePassStorefrontWidget_HandleBuySubscriptionPackButtonClickedEvent final
{
public:
	class FName                                   subscriptionPackID;                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBasePassStorefrontWidget_HandleBuySubscriptionPackButtonClickedEvent) == 0x000004, "Wrong alignment on UMGBasePassStorefrontWidget_HandleBuySubscriptionPackButtonClickedEvent");
static_assert(sizeof(UMGBasePassStorefrontWidget_HandleBuySubscriptionPackButtonClickedEvent) == 0x00000C, "Wrong size on UMGBasePassStorefrontWidget_HandleBuySubscriptionPackButtonClickedEvent");
static_assert(offsetof(UMGBasePassStorefrontWidget_HandleBuySubscriptionPackButtonClickedEvent, subscriptionPackID) == 0x000000, "Member 'UMGBasePassStorefrontWidget_HandleBuySubscriptionPackButtonClickedEvent::subscriptionPackID' has a wrong offset!");

// Function DeadByDaylight.UMGBasePassStorefrontWidget.HandleSubscriptionInfoButtonClickedEvent
// 0x0010 (0x0010 - 0x0000)
struct UMGBasePassStorefrontWidget_HandleSubscriptionInfoButtonClickedEvent final
{
public:
	class FString                                 subscriptionDetails;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBasePassStorefrontWidget_HandleSubscriptionInfoButtonClickedEvent) == 0x000008, "Wrong alignment on UMGBasePassStorefrontWidget_HandleSubscriptionInfoButtonClickedEvent");
static_assert(sizeof(UMGBasePassStorefrontWidget_HandleSubscriptionInfoButtonClickedEvent) == 0x000010, "Wrong size on UMGBasePassStorefrontWidget_HandleSubscriptionInfoButtonClickedEvent");
static_assert(offsetof(UMGBasePassStorefrontWidget_HandleSubscriptionInfoButtonClickedEvent, subscriptionDetails) == 0x000000, "Member 'UMGBasePassStorefrontWidget_HandleSubscriptionInfoButtonClickedEvent::subscriptionDetails' has a wrong offset!");

// Function DeadByDaylight.UMGLobbyJoinedWidget.AddPlayerInfo
// 0x0078 (0x0078 - 0x0000)
struct UMGLobbyJoinedWidget_AddPlayerInfo final
{
public:
	int32                                         playerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerInfoData                        playerInfoData;                                    // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          isPlayerReady;                                     // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInventorySlotData>             loadoutData;                                       // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLobbyJoinedWidget_AddPlayerInfo) == 0x000008, "Wrong alignment on UMGLobbyJoinedWidget_AddPlayerInfo");
static_assert(sizeof(UMGLobbyJoinedWidget_AddPlayerInfo) == 0x000078, "Wrong size on UMGLobbyJoinedWidget_AddPlayerInfo");
static_assert(offsetof(UMGLobbyJoinedWidget_AddPlayerInfo, playerId) == 0x000000, "Member 'UMGLobbyJoinedWidget_AddPlayerInfo::playerId' has a wrong offset!");
static_assert(offsetof(UMGLobbyJoinedWidget_AddPlayerInfo, playerInfoData) == 0x000008, "Member 'UMGLobbyJoinedWidget_AddPlayerInfo::playerInfoData' has a wrong offset!");
static_assert(offsetof(UMGLobbyJoinedWidget_AddPlayerInfo, isPlayerReady) == 0x000060, "Member 'UMGLobbyJoinedWidget_AddPlayerInfo::isPlayerReady' has a wrong offset!");
static_assert(offsetof(UMGLobbyJoinedWidget_AddPlayerInfo, loadoutData) == 0x000068, "Member 'UMGLobbyJoinedWidget_AddPlayerInfo::loadoutData' has a wrong offset!");

// Function DeadByDaylight.UMGLobbyJoinedWidget.RemovePlayersInfo
// 0x0004 (0x0004 - 0x0000)
struct UMGLobbyJoinedWidget_RemovePlayersInfo final
{
public:
	int32                                         playerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLobbyJoinedWidget_RemovePlayersInfo) == 0x000004, "Wrong alignment on UMGLobbyJoinedWidget_RemovePlayersInfo");
static_assert(sizeof(UMGLobbyJoinedWidget_RemovePlayersInfo) == 0x000004, "Wrong size on UMGLobbyJoinedWidget_RemovePlayersInfo");
static_assert(offsetof(UMGLobbyJoinedWidget_RemovePlayersInfo, playerId) == 0x000000, "Member 'UMGLobbyJoinedWidget_RemovePlayersInfo::playerId' has a wrong offset!");

// Function DeadByDaylight.UMGLobbyJoinedWidget.SetLoadoutDataForLocalPlayer
// 0x0018 (0x0018 - 0x0000)
struct UMGLobbyJoinedWidget_SetLoadoutDataForLocalPlayer final
{
public:
	TArray<struct FInventorySlotData>             loadoutData;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          usingMatchRules;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          perkSlotsLockedByAdmin;                            // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSlasher;                                         // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGLobbyJoinedWidget_SetLoadoutDataForLocalPlayer) == 0x000008, "Wrong alignment on UMGLobbyJoinedWidget_SetLoadoutDataForLocalPlayer");
static_assert(sizeof(UMGLobbyJoinedWidget_SetLoadoutDataForLocalPlayer) == 0x000018, "Wrong size on UMGLobbyJoinedWidget_SetLoadoutDataForLocalPlayer");
static_assert(offsetof(UMGLobbyJoinedWidget_SetLoadoutDataForLocalPlayer, loadoutData) == 0x000000, "Member 'UMGLobbyJoinedWidget_SetLoadoutDataForLocalPlayer::loadoutData' has a wrong offset!");
static_assert(offsetof(UMGLobbyJoinedWidget_SetLoadoutDataForLocalPlayer, usingMatchRules) == 0x000010, "Member 'UMGLobbyJoinedWidget_SetLoadoutDataForLocalPlayer::usingMatchRules' has a wrong offset!");
static_assert(offsetof(UMGLobbyJoinedWidget_SetLoadoutDataForLocalPlayer, perkSlotsLockedByAdmin) == 0x000011, "Member 'UMGLobbyJoinedWidget_SetLoadoutDataForLocalPlayer::perkSlotsLockedByAdmin' has a wrong offset!");
static_assert(offsetof(UMGLobbyJoinedWidget_SetLoadoutDataForLocalPlayer, isSlasher) == 0x000012, "Member 'UMGLobbyJoinedWidget_SetLoadoutDataForLocalPlayer::isSlasher' has a wrong offset!");

// Function DeadByDaylight.UMGLobbyJoinedWidget.SetLobbyTimer
// 0x0004 (0x0004 - 0x0000)
struct UMGLobbyJoinedWidget_SetLobbyTimer final
{
public:
	int32                                         seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLobbyJoinedWidget_SetLobbyTimer) == 0x000004, "Wrong alignment on UMGLobbyJoinedWidget_SetLobbyTimer");
static_assert(sizeof(UMGLobbyJoinedWidget_SetLobbyTimer) == 0x000004, "Wrong size on UMGLobbyJoinedWidget_SetLobbyTimer");
static_assert(offsetof(UMGLobbyJoinedWidget_SetLobbyTimer, seconds) == 0x000000, "Member 'UMGLobbyJoinedWidget_SetLobbyTimer::seconds' has a wrong offset!");

// Function DeadByDaylight.UMGLobbyJoinedWidget.SetLocalPlayerInfo
// 0x0058 (0x0058 - 0x0000)
struct UMGLobbyJoinedWidget_SetLocalPlayerInfo final
{
public:
	struct FPlayerInfoData                        playerInfoData;                                    // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLobbyJoinedWidget_SetLocalPlayerInfo) == 0x000008, "Wrong alignment on UMGLobbyJoinedWidget_SetLocalPlayerInfo");
static_assert(sizeof(UMGLobbyJoinedWidget_SetLocalPlayerInfo) == 0x000058, "Wrong size on UMGLobbyJoinedWidget_SetLocalPlayerInfo");
static_assert(offsetof(UMGLobbyJoinedWidget_SetLocalPlayerInfo, playerInfoData) == 0x000000, "Member 'UMGLobbyJoinedWidget_SetLocalPlayerInfo::playerInfoData' has a wrong offset!");

// Function DeadByDaylight.UMGLobbyJoinedWidget.SetReadyStatus
// 0x0010 (0x0010 - 0x0000)
struct UMGLobbyJoinedWidget_SetReadyStatus final
{
public:
	TArray<struct FPlayerReadyStatusData>         playersReadyStatusData;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLobbyJoinedWidget_SetReadyStatus) == 0x000008, "Wrong alignment on UMGLobbyJoinedWidget_SetReadyStatus");
static_assert(sizeof(UMGLobbyJoinedWidget_SetReadyStatus) == 0x000010, "Wrong size on UMGLobbyJoinedWidget_SetReadyStatus");
static_assert(offsetof(UMGLobbyJoinedWidget_SetReadyStatus, playersReadyStatusData) == 0x000000, "Member 'UMGLobbyJoinedWidget_SetReadyStatus::playersReadyStatusData' has a wrong offset!");

// Function DeadByDaylight.UMGLobbyJoinedWidget.SetWidgetsVisibility
// 0x0001 (0x0001 - 0x0000)
struct UMGLobbyJoinedWidget_SetWidgetsVisibility final
{
public:
	bool                                          widgetsVisibilty;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLobbyJoinedWidget_SetWidgetsVisibility) == 0x000001, "Wrong alignment on UMGLobbyJoinedWidget_SetWidgetsVisibility");
static_assert(sizeof(UMGLobbyJoinedWidget_SetWidgetsVisibility) == 0x000001, "Wrong size on UMGLobbyJoinedWidget_SetWidgetsVisibility");
static_assert(offsetof(UMGLobbyJoinedWidget_SetWidgetsVisibility, widgetsVisibilty) == 0x000000, "Member 'UMGLobbyJoinedWidget_SetWidgetsVisibility::widgetsVisibilty' has a wrong offset!");

// Function DeadByDaylight.UMGLobbyJoinedWidget.UpdatePlayersLatency
// 0x0058 (0x0058 - 0x0000)
struct UMGLobbyJoinedWidget_UpdatePlayersLatency final
{
public:
	TMap<int32, float>                            playersLatency;                                    // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          isHost;                                            // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGLobbyJoinedWidget_UpdatePlayersLatency) == 0x000008, "Wrong alignment on UMGLobbyJoinedWidget_UpdatePlayersLatency");
static_assert(sizeof(UMGLobbyJoinedWidget_UpdatePlayersLatency) == 0x000058, "Wrong size on UMGLobbyJoinedWidget_UpdatePlayersLatency");
static_assert(offsetof(UMGLobbyJoinedWidget_UpdatePlayersLatency, playersLatency) == 0x000000, "Member 'UMGLobbyJoinedWidget_UpdatePlayersLatency::playersLatency' has a wrong offset!");
static_assert(offsetof(UMGLobbyJoinedWidget_UpdatePlayersLatency, isHost) == 0x000050, "Member 'UMGLobbyJoinedWidget_UpdatePlayersLatency::isHost' has a wrong offset!");

// Function DeadByDaylight.UMGLobbySearchingWidget.OnCurrencyTooltipTriggered
// 0x0020 (0x0020 - 0x0000)
struct UMGLobbySearchingWidget_OnCurrencyTooltipTriggered final
{
public:
	struct FTooltipPressedData                    tooltipPressedData;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ECurrencyType                                 currencyType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGLobbySearchingWidget_OnCurrencyTooltipTriggered) == 0x000008, "Wrong alignment on UMGLobbySearchingWidget_OnCurrencyTooltipTriggered");
static_assert(sizeof(UMGLobbySearchingWidget_OnCurrencyTooltipTriggered) == 0x000020, "Wrong size on UMGLobbySearchingWidget_OnCurrencyTooltipTriggered");
static_assert(offsetof(UMGLobbySearchingWidget_OnCurrencyTooltipTriggered, tooltipPressedData) == 0x000000, "Member 'UMGLobbySearchingWidget_OnCurrencyTooltipTriggered::tooltipPressedData' has a wrong offset!");
static_assert(offsetof(UMGLobbySearchingWidget_OnCurrencyTooltipTriggered, currencyType) == 0x000018, "Member 'UMGLobbySearchingWidget_OnCurrencyTooltipTriggered::currencyType' has a wrong offset!");

// Function DeadByDaylight.UMGLobbySearchingWidget.OnLevelTooltipTriggered
// 0x0018 (0x0018 - 0x0000)
struct UMGLobbySearchingWidget_OnLevelTooltipTriggered final
{
public:
	struct FTooltipPressedData                    tooltipPressedData;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLobbySearchingWidget_OnLevelTooltipTriggered) == 0x000008, "Wrong alignment on UMGLobbySearchingWidget_OnLevelTooltipTriggered");
static_assert(sizeof(UMGLobbySearchingWidget_OnLevelTooltipTriggered) == 0x000018, "Wrong size on UMGLobbySearchingWidget_OnLevelTooltipTriggered");
static_assert(offsetof(UMGLobbySearchingWidget_OnLevelTooltipTriggered, tooltipPressedData) == 0x000000, "Member 'UMGLobbySearchingWidget_OnLevelTooltipTriggered::tooltipPressedData' has a wrong offset!");

// Function DeadByDaylight.UMGLobbySearchingWidget.OnRankTooltipTriggered
// 0x0018 (0x0018 - 0x0000)
struct UMGLobbySearchingWidget_OnRankTooltipTriggered final
{
public:
	struct FTooltipPressedData                    tooltipPressedData;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLobbySearchingWidget_OnRankTooltipTriggered) == 0x000008, "Wrong alignment on UMGLobbySearchingWidget_OnRankTooltipTriggered");
static_assert(sizeof(UMGLobbySearchingWidget_OnRankTooltipTriggered) == 0x000018, "Wrong size on UMGLobbySearchingWidget_OnRankTooltipTriggered");
static_assert(offsetof(UMGLobbySearchingWidget_OnRankTooltipTriggered, tooltipPressedData) == 0x000000, "Member 'UMGLobbySearchingWidget_OnRankTooltipTriggered::tooltipPressedData' has a wrong offset!");

// Function DeadByDaylight.UMGLobbySearchingWidget.SetEstimatedWaitingTimer
// 0x0004 (0x0004 - 0x0000)
struct UMGLobbySearchingWidget_SetEstimatedWaitingTimer final
{
public:
	int32                                         seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLobbySearchingWidget_SetEstimatedWaitingTimer) == 0x000004, "Wrong alignment on UMGLobbySearchingWidget_SetEstimatedWaitingTimer");
static_assert(sizeof(UMGLobbySearchingWidget_SetEstimatedWaitingTimer) == 0x000004, "Wrong size on UMGLobbySearchingWidget_SetEstimatedWaitingTimer");
static_assert(offsetof(UMGLobbySearchingWidget_SetEstimatedWaitingTimer, seconds) == 0x000000, "Member 'UMGLobbySearchingWidget_SetEstimatedWaitingTimer::seconds' has a wrong offset!");

// Function DeadByDaylight.UMGLobbySearchingWidget.SetWaitingTimer
// 0x0004 (0x0004 - 0x0000)
struct UMGLobbySearchingWidget_SetWaitingTimer final
{
public:
	int32                                         seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLobbySearchingWidget_SetWaitingTimer) == 0x000004, "Wrong alignment on UMGLobbySearchingWidget_SetWaitingTimer");
static_assert(sizeof(UMGLobbySearchingWidget_SetWaitingTimer) == 0x000004, "Wrong size on UMGLobbySearchingWidget_SetWaitingTimer");
static_assert(offsetof(UMGLobbySearchingWidget_SetWaitingTimer, seconds) == 0x000000, "Member 'UMGLobbySearchingWidget_SetWaitingTimer::seconds' has a wrong offset!");

// Function DeadByDaylight.UMGBankAndPlayerInfoWidget.OnTooltipTriggeredByCurrency
// 0x0020 (0x0020 - 0x0000)
struct UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByCurrency final
{
public:
	struct FTooltipPressedData                    tooltipPressedData;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ECurrencyType                                 currencyType;                                      // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByCurrency) == 0x000008, "Wrong alignment on UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByCurrency");
static_assert(sizeof(UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByCurrency) == 0x000020, "Wrong size on UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByCurrency");
static_assert(offsetof(UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByCurrency, tooltipPressedData) == 0x000000, "Member 'UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByCurrency::tooltipPressedData' has a wrong offset!");
static_assert(offsetof(UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByCurrency, currencyType) == 0x000018, "Member 'UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByCurrency::currencyType' has a wrong offset!");

// Function DeadByDaylight.UMGBankAndPlayerInfoWidget.OnTooltipTriggeredByLevelBannerWidget
// 0x0018 (0x0018 - 0x0000)
struct UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByLevelBannerWidget final
{
public:
	struct FTooltipPressedData                    tooltipPressedData;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByLevelBannerWidget) == 0x000008, "Wrong alignment on UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByLevelBannerWidget");
static_assert(sizeof(UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByLevelBannerWidget) == 0x000018, "Wrong size on UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByLevelBannerWidget");
static_assert(offsetof(UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByLevelBannerWidget, tooltipPressedData) == 0x000000, "Member 'UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByLevelBannerWidget::tooltipPressedData' has a wrong offset!");

// Function DeadByDaylight.UMGBankAndPlayerInfoWidget.OnTooltipTriggeredByRankBanner
// 0x0018 (0x0018 - 0x0000)
struct UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByRankBanner final
{
public:
	struct FTooltipPressedData                    tooltipPressedData;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByRankBanner) == 0x000008, "Wrong alignment on UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByRankBanner");
static_assert(sizeof(UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByRankBanner) == 0x000018, "Wrong size on UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByRankBanner");
static_assert(offsetof(UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByRankBanner, tooltipPressedData) == 0x000000, "Member 'UMGBankAndPlayerInfoWidget_OnTooltipTriggeredByRankBanner::tooltipPressedData' has a wrong offset!");

// Function DeadByDaylight.UMGBankAndPlayerInfoWidget.SetPlayerLevelBP
// 0x0014 (0x0014 - 0x0000)
struct UMGBankAndPlayerInfoWidget_SetPlayerLevelBP final
{
public:
	int32                                         level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         devotion;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         currentLevelXp;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         totalLevelXp;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSlasher;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          playUpdateAnim;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGBankAndPlayerInfoWidget_SetPlayerLevelBP) == 0x000004, "Wrong alignment on UMGBankAndPlayerInfoWidget_SetPlayerLevelBP");
static_assert(sizeof(UMGBankAndPlayerInfoWidget_SetPlayerLevelBP) == 0x000014, "Wrong size on UMGBankAndPlayerInfoWidget_SetPlayerLevelBP");
static_assert(offsetof(UMGBankAndPlayerInfoWidget_SetPlayerLevelBP, level) == 0x000000, "Member 'UMGBankAndPlayerInfoWidget_SetPlayerLevelBP::level' has a wrong offset!");
static_assert(offsetof(UMGBankAndPlayerInfoWidget_SetPlayerLevelBP, devotion) == 0x000004, "Member 'UMGBankAndPlayerInfoWidget_SetPlayerLevelBP::devotion' has a wrong offset!");
static_assert(offsetof(UMGBankAndPlayerInfoWidget_SetPlayerLevelBP, currentLevelXp) == 0x000008, "Member 'UMGBankAndPlayerInfoWidget_SetPlayerLevelBP::currentLevelXp' has a wrong offset!");
static_assert(offsetof(UMGBankAndPlayerInfoWidget_SetPlayerLevelBP, totalLevelXp) == 0x00000C, "Member 'UMGBankAndPlayerInfoWidget_SetPlayerLevelBP::totalLevelXp' has a wrong offset!");
static_assert(offsetof(UMGBankAndPlayerInfoWidget_SetPlayerLevelBP, isSlasher) == 0x000010, "Member 'UMGBankAndPlayerInfoWidget_SetPlayerLevelBP::isSlasher' has a wrong offset!");
static_assert(offsetof(UMGBankAndPlayerInfoWidget_SetPlayerLevelBP, playUpdateAnim) == 0x000011, "Member 'UMGBankAndPlayerInfoWidget_SetPlayerLevelBP::playUpdateAnim' has a wrong offset!");

// Function DeadByDaylight.UMGBankWidget.OnCurrencyTooltipRequested
// 0x0020 (0x0020 - 0x0000)
struct UMGBankWidget_OnCurrencyTooltipRequested final
{
public:
	struct FTooltipPressedData                    tooltipPressedData;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ECurrencyType                                 currencyType;                                      // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGBankWidget_OnCurrencyTooltipRequested) == 0x000008, "Wrong alignment on UMGBankWidget_OnCurrencyTooltipRequested");
static_assert(sizeof(UMGBankWidget_OnCurrencyTooltipRequested) == 0x000020, "Wrong size on UMGBankWidget_OnCurrencyTooltipRequested");
static_assert(offsetof(UMGBankWidget_OnCurrencyTooltipRequested, tooltipPressedData) == 0x000000, "Member 'UMGBankWidget_OnCurrencyTooltipRequested::tooltipPressedData' has a wrong offset!");
static_assert(offsetof(UMGBankWidget_OnCurrencyTooltipRequested, currencyType) == 0x000018, "Member 'UMGBankWidget_OnCurrencyTooltipRequested::currencyType' has a wrong offset!");

// Function DeadByDaylight.UMGBaseToastWidget.TriggerToastInput
// 0x0004 (0x0004 - 0x0000)
struct UMGBaseToastWidget_TriggerToastInput final
{
public:
	int32                                         inputCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBaseToastWidget_TriggerToastInput) == 0x000004, "Wrong alignment on UMGBaseToastWidget_TriggerToastInput");
static_assert(sizeof(UMGBaseToastWidget_TriggerToastInput) == 0x000004, "Wrong size on UMGBaseToastWidget_TriggerToastInput");
static_assert(offsetof(UMGBaseToastWidget_TriggerToastInput, inputCode) == 0x000000, "Member 'UMGBaseToastWidget_TriggerToastInput::inputCode' has a wrong offset!");

// Function DeadByDaylight.UMGBloodStoreArrayWidget.BroadcastBloodNodeSelected
// 0x0010 (0x0010 - 0x0000)
struct UMGBloodStoreArrayWidget_BroadcastBloodNodeSelected final
{
public:
	class FString                                 id;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBloodStoreArrayWidget_BroadcastBloodNodeSelected) == 0x000008, "Wrong alignment on UMGBloodStoreArrayWidget_BroadcastBloodNodeSelected");
static_assert(sizeof(UMGBloodStoreArrayWidget_BroadcastBloodNodeSelected) == 0x000010, "Wrong size on UMGBloodStoreArrayWidget_BroadcastBloodNodeSelected");
static_assert(offsetof(UMGBloodStoreArrayWidget_BroadcastBloodNodeSelected, id) == 0x000000, "Member 'UMGBloodStoreArrayWidget_BroadcastBloodNodeSelected::id' has a wrong offset!");

// Function DeadByDaylight.UMGBloodStoreItemPreviewWidget.DisplayItem
// 0x0002 (0x0002 - 0x0000)
struct UMGBloodStoreItemPreviewWidget_DisplayItem final
{
public:
	bool                                          isItemPurchaseable;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isItemAffordable;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBloodStoreItemPreviewWidget_DisplayItem) == 0x000001, "Wrong alignment on UMGBloodStoreItemPreviewWidget_DisplayItem");
static_assert(sizeof(UMGBloodStoreItemPreviewWidget_DisplayItem) == 0x000002, "Wrong size on UMGBloodStoreItemPreviewWidget_DisplayItem");
static_assert(offsetof(UMGBloodStoreItemPreviewWidget_DisplayItem, isItemPurchaseable) == 0x000000, "Member 'UMGBloodStoreItemPreviewWidget_DisplayItem::isItemPurchaseable' has a wrong offset!");
static_assert(offsetof(UMGBloodStoreItemPreviewWidget_DisplayItem, isItemAffordable) == 0x000001, "Member 'UMGBloodStoreItemPreviewWidget_DisplayItem::isItemAffordable' has a wrong offset!");

// Function DeadByDaylight.UMGBloodStoreItemPreviewWidget.ShowPurchaseButton
// 0x0001 (0x0001 - 0x0000)
struct UMGBloodStoreItemPreviewWidget_ShowPurchaseButton final
{
public:
	bool                                          showPurchaseButton;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBloodStoreItemPreviewWidget_ShowPurchaseButton) == 0x000001, "Wrong alignment on UMGBloodStoreItemPreviewWidget_ShowPurchaseButton");
static_assert(sizeof(UMGBloodStoreItemPreviewWidget_ShowPurchaseButton) == 0x000001, "Wrong size on UMGBloodStoreItemPreviewWidget_ShowPurchaseButton");
static_assert(offsetof(UMGBloodStoreItemPreviewWidget_ShowPurchaseButton, showPurchaseButton) == 0x000000, "Member 'UMGBloodStoreItemPreviewWidget_ShowPurchaseButton::showPurchaseButton' has a wrong offset!");

// Function DeadByDaylight.UMGBloodStoreItemPreviewWidget.ShowRefreshButton
// 0x0002 (0x0002 - 0x0000)
struct UMGBloodStoreItemPreviewWidget_ShowRefreshButton final
{
public:
	bool                                          showRefreshButton;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isRefreshFree;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBloodStoreItemPreviewWidget_ShowRefreshButton) == 0x000001, "Wrong alignment on UMGBloodStoreItemPreviewWidget_ShowRefreshButton");
static_assert(sizeof(UMGBloodStoreItemPreviewWidget_ShowRefreshButton) == 0x000002, "Wrong size on UMGBloodStoreItemPreviewWidget_ShowRefreshButton");
static_assert(offsetof(UMGBloodStoreItemPreviewWidget_ShowRefreshButton, showRefreshButton) == 0x000000, "Member 'UMGBloodStoreItemPreviewWidget_ShowRefreshButton::showRefreshButton' has a wrong offset!");
static_assert(offsetof(UMGBloodStoreItemPreviewWidget_ShowRefreshButton, isRefreshFree) == 0x000001, "Member 'UMGBloodStoreItemPreviewWidget_ShowRefreshButton::isRefreshFree' has a wrong offset!");

// Function DeadByDaylight.UMGBloodStoreItemWidget.PlayConsumedAnimation
// 0x0001 (0x0001 - 0x0000)
struct UMGBloodStoreItemWidget_PlayConsumedAnimation final
{
public:
	bool                                          skipIntro;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBloodStoreItemWidget_PlayConsumedAnimation) == 0x000001, "Wrong alignment on UMGBloodStoreItemWidget_PlayConsumedAnimation");
static_assert(sizeof(UMGBloodStoreItemWidget_PlayConsumedAnimation) == 0x000001, "Wrong size on UMGBloodStoreItemWidget_PlayConsumedAnimation");
static_assert(offsetof(UMGBloodStoreItemWidget_PlayConsumedAnimation, skipIntro) == 0x000000, "Member 'UMGBloodStoreItemWidget_PlayConsumedAnimation::skipIntro' has a wrong offset!");

// Function DeadByDaylight.UMGBloodStoreItemWidget.SetSelectedVisibilities
// 0x0001 (0x0001 - 0x0000)
struct UMGBloodStoreItemWidget_SetSelectedVisibilities final
{
public:
	bool                                          isSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBloodStoreItemWidget_SetSelectedVisibilities) == 0x000001, "Wrong alignment on UMGBloodStoreItemWidget_SetSelectedVisibilities");
static_assert(sizeof(UMGBloodStoreItemWidget_SetSelectedVisibilities) == 0x000001, "Wrong size on UMGBloodStoreItemWidget_SetSelectedVisibilities");
static_assert(offsetof(UMGBloodStoreItemWidget_SetSelectedVisibilities, isSelected) == 0x000000, "Member 'UMGBloodStoreItemWidget_SetSelectedVisibilities::isSelected' has a wrong offset!");

// Function DeadByDaylight.UMGBloodStoreSubMenu.SetFaction
// 0x0001 (0x0001 - 0x0000)
struct UMGBloodStoreSubMenu_SetFaction final
{
public:
	bool                                          isKiller;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGBloodStoreSubMenu_SetFaction) == 0x000001, "Wrong alignment on UMGBloodStoreSubMenu_SetFaction");
static_assert(sizeof(UMGBloodStoreSubMenu_SetFaction) == 0x000001, "Wrong size on UMGBloodStoreSubMenu_SetFaction");
static_assert(offsetof(UMGBloodStoreSubMenu_SetFaction, isKiller) == 0x000000, "Member 'UMGBloodStoreSubMenu_SetFaction::isKiller' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterFreeTicketItemButton.UpdateWidget
// 0x0048 (0x0048 - 0x0000)
struct UMGCharacterFreeTicketItemButton_UpdateWidget final
{
public:
	class FString                                 bgPath;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSlasher;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         durationInHours;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         itemCount;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            iconColor;                                         // 0x0020(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterFreeTicketItemButton_UpdateWidget) == 0x000008, "Wrong alignment on UMGCharacterFreeTicketItemButton_UpdateWidget");
static_assert(sizeof(UMGCharacterFreeTicketItemButton_UpdateWidget) == 0x000048, "Wrong size on UMGCharacterFreeTicketItemButton_UpdateWidget");
static_assert(offsetof(UMGCharacterFreeTicketItemButton_UpdateWidget, bgPath) == 0x000000, "Member 'UMGCharacterFreeTicketItemButton_UpdateWidget::bgPath' has a wrong offset!");
static_assert(offsetof(UMGCharacterFreeTicketItemButton_UpdateWidget, isSlasher) == 0x000010, "Member 'UMGCharacterFreeTicketItemButton_UpdateWidget::isSlasher' has a wrong offset!");
static_assert(offsetof(UMGCharacterFreeTicketItemButton_UpdateWidget, durationInHours) == 0x000014, "Member 'UMGCharacterFreeTicketItemButton_UpdateWidget::durationInHours' has a wrong offset!");
static_assert(offsetof(UMGCharacterFreeTicketItemButton_UpdateWidget, itemCount) == 0x000018, "Member 'UMGCharacterFreeTicketItemButton_UpdateWidget::itemCount' has a wrong offset!");
static_assert(offsetof(UMGCharacterFreeTicketItemButton_UpdateWidget, iconColor) == 0x000020, "Member 'UMGCharacterFreeTicketItemButton_UpdateWidget::iconColor' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterFreeTicketWidget.HandleButtonClickEvent
// 0x0020 (0x0020 - 0x0000)
struct UMGCharacterFreeTicketWidget_HandleButtonClickEvent final
{
public:
	class FString                                 ticketID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 characterName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterFreeTicketWidget_HandleButtonClickEvent) == 0x000008, "Wrong alignment on UMGCharacterFreeTicketWidget_HandleButtonClickEvent");
static_assert(sizeof(UMGCharacterFreeTicketWidget_HandleButtonClickEvent) == 0x000020, "Wrong size on UMGCharacterFreeTicketWidget_HandleButtonClickEvent");
static_assert(offsetof(UMGCharacterFreeTicketWidget_HandleButtonClickEvent, ticketID) == 0x000000, "Member 'UMGCharacterFreeTicketWidget_HandleButtonClickEvent::ticketID' has a wrong offset!");
static_assert(offsetof(UMGCharacterFreeTicketWidget_HandleButtonClickEvent, characterName) == 0x000010, "Member 'UMGCharacterFreeTicketWidget_HandleButtonClickEvent::characterName' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterFreeTicketWidget.UpdateBGColor
// 0x0001 (0x0001 - 0x0000)
struct UMGCharacterFreeTicketWidget_UpdateBGColor final
{
public:
	bool                                          isSlasher;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterFreeTicketWidget_UpdateBGColor) == 0x000001, "Wrong alignment on UMGCharacterFreeTicketWidget_UpdateBGColor");
static_assert(sizeof(UMGCharacterFreeTicketWidget_UpdateBGColor) == 0x000001, "Wrong size on UMGCharacterFreeTicketWidget_UpdateBGColor");
static_assert(offsetof(UMGCharacterFreeTicketWidget_UpdateBGColor, isSlasher) == 0x000000, "Member 'UMGCharacterFreeTicketWidget_UpdateBGColor::isSlasher' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterInfoWidget.HandlePowerItemTooltipLongPressedEvent
// 0x0130 (0x0130 - 0x0000)
struct UMGCharacterInfoWidget_HandlePowerItemTooltipLongPressedEvent final
{
public:
	struct FInventorySlotData                     slotData;                                          // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              position;                                          // 0x0128(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterInfoWidget_HandlePowerItemTooltipLongPressedEvent) == 0x000008, "Wrong alignment on UMGCharacterInfoWidget_HandlePowerItemTooltipLongPressedEvent");
static_assert(sizeof(UMGCharacterInfoWidget_HandlePowerItemTooltipLongPressedEvent) == 0x000130, "Wrong size on UMGCharacterInfoWidget_HandlePowerItemTooltipLongPressedEvent");
static_assert(offsetof(UMGCharacterInfoWidget_HandlePowerItemTooltipLongPressedEvent, slotData) == 0x000000, "Member 'UMGCharacterInfoWidget_HandlePowerItemTooltipLongPressedEvent::slotData' has a wrong offset!");
static_assert(offsetof(UMGCharacterInfoWidget_HandlePowerItemTooltipLongPressedEvent, position) == 0x000128, "Member 'UMGCharacterInfoWidget_HandlePowerItemTooltipLongPressedEvent::position' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterInfoWidget.HandleTooltipLongPressedEvent
// 0x0148 (0x0148 - 0x0000)
struct UMGCharacterInfoWidget_HandleTooltipLongPressedEvent final
{
public:
	struct FTeachableData                         teachableData;                                     // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              position;                                          // 0x0140(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterInfoWidget_HandleTooltipLongPressedEvent) == 0x000008, "Wrong alignment on UMGCharacterInfoWidget_HandleTooltipLongPressedEvent");
static_assert(sizeof(UMGCharacterInfoWidget_HandleTooltipLongPressedEvent) == 0x000148, "Wrong size on UMGCharacterInfoWidget_HandleTooltipLongPressedEvent");
static_assert(offsetof(UMGCharacterInfoWidget_HandleTooltipLongPressedEvent, teachableData) == 0x000000, "Member 'UMGCharacterInfoWidget_HandleTooltipLongPressedEvent::teachableData' has a wrong offset!");
static_assert(offsetof(UMGCharacterInfoWidget_HandleTooltipLongPressedEvent, position) == 0x000140, "Member 'UMGCharacterInfoWidget_HandleTooltipLongPressedEvent::position' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterPageScrollWidget.HandleCharacterClicked
// 0x0004 (0x0004 - 0x0000)
struct UMGCharacterPageScrollWidget_HandleCharacterClicked final
{
public:
	int32                                         characterIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterPageScrollWidget_HandleCharacterClicked) == 0x000004, "Wrong alignment on UMGCharacterPageScrollWidget_HandleCharacterClicked");
static_assert(sizeof(UMGCharacterPageScrollWidget_HandleCharacterClicked) == 0x000004, "Wrong size on UMGCharacterPageScrollWidget_HandleCharacterClicked");
static_assert(offsetof(UMGCharacterPageScrollWidget_HandleCharacterClicked, characterIndex) == 0x000000, "Member 'UMGCharacterPageScrollWidget_HandleCharacterClicked::characterIndex' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterScrollingInfoWidget.HandleTooltipLongPressedEvent
// 0x0148 (0x0148 - 0x0000)
struct UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedEvent final
{
public:
	struct FTeachableData                         teachableData;                                     // 0x0000(0x0140)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              position;                                          // 0x0140(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedEvent) == 0x000008, "Wrong alignment on UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedEvent");
static_assert(sizeof(UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedEvent) == 0x000148, "Wrong size on UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedEvent");
static_assert(offsetof(UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedEvent, teachableData) == 0x000000, "Member 'UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedEvent::teachableData' has a wrong offset!");
static_assert(offsetof(UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedEvent, position) == 0x000140, "Member 'UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedEvent::position' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterScrollingInfoWidget.HandleTooltipLongPressedKillerPowerEvent
// 0x0130 (0x0130 - 0x0000)
struct UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedKillerPowerEvent final
{
public:
	struct FInventorySlotData                     itemData;                                          // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              position;                                          // 0x0128(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedKillerPowerEvent) == 0x000008, "Wrong alignment on UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedKillerPowerEvent");
static_assert(sizeof(UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedKillerPowerEvent) == 0x000130, "Wrong size on UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedKillerPowerEvent");
static_assert(offsetof(UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedKillerPowerEvent, itemData) == 0x000000, "Member 'UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedKillerPowerEvent::itemData' has a wrong offset!");
static_assert(offsetof(UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedKillerPowerEvent, position) == 0x000128, "Member 'UMGCharacterScrollingInfoWidget_HandleTooltipLongPressedKillerPowerEvent::position' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterSelectSubmenu.SetCurrentRole
// 0x0001 (0x0001 - 0x0000)
struct UMGCharacterSelectSubmenu_SetCurrentRole final
{
public:
	bool                                          isKiller;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterSelectSubmenu_SetCurrentRole) == 0x000001, "Wrong alignment on UMGCharacterSelectSubmenu_SetCurrentRole");
static_assert(sizeof(UMGCharacterSelectSubmenu_SetCurrentRole) == 0x000001, "Wrong size on UMGCharacterSelectSubmenu_SetCurrentRole");
static_assert(offsetof(UMGCharacterSelectSubmenu_SetCurrentRole, isKiller) == 0x000000, "Member 'UMGCharacterSelectSubmenu_SetCurrentRole::isKiller' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterSelectSubmenu.SetInInfoPanelMode
// 0x0001 (0x0001 - 0x0000)
struct UMGCharacterSelectSubmenu_SetInInfoPanelMode final
{
public:
	bool                                          isInInfoPanel;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterSelectSubmenu_SetInInfoPanelMode) == 0x000001, "Wrong alignment on UMGCharacterSelectSubmenu_SetInInfoPanelMode");
static_assert(sizeof(UMGCharacterSelectSubmenu_SetInInfoPanelMode) == 0x000001, "Wrong size on UMGCharacterSelectSubmenu_SetInInfoPanelMode");
static_assert(offsetof(UMGCharacterSelectSubmenu_SetInInfoPanelMode, isInInfoPanel) == 0x000000, "Member 'UMGCharacterSelectSubmenu_SetInInfoPanelMode::isInInfoPanel' has a wrong offset!");

// Function DeadByDaylight.UMGCharacterSlideShowWidget.DisplayCharacterSlide
// 0x0068 (0x0068 - 0x0000)
struct UMGCharacterSlideShowWidget_DisplayCharacterSlide final
{
public:
	struct FCharacterSlideData                    characterSlide;                                    // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCharacterSlideShowWidget_DisplayCharacterSlide) == 0x000008, "Wrong alignment on UMGCharacterSlideShowWidget_DisplayCharacterSlide");
static_assert(sizeof(UMGCharacterSlideShowWidget_DisplayCharacterSlide) == 0x000068, "Wrong size on UMGCharacterSlideShowWidget_DisplayCharacterSlide");
static_assert(offsetof(UMGCharacterSlideShowWidget_DisplayCharacterSlide, characterSlide) == 0x000000, "Member 'UMGCharacterSlideShowWidget_DisplayCharacterSlide::characterSlide' has a wrong offset!");

// Function DeadByDaylight.UMGControlTypeSelectionWidget.UpdateControlType
// 0x0001 (0x0001 - 0x0000)
struct UMGControlTypeSelectionWidget_UpdateControlType final
{
public:
	EAtlantaControlTypeSetting                    controlType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGControlTypeSelectionWidget_UpdateControlType) == 0x000001, "Wrong alignment on UMGControlTypeSelectionWidget_UpdateControlType");
static_assert(sizeof(UMGControlTypeSelectionWidget_UpdateControlType) == 0x000001, "Wrong size on UMGControlTypeSelectionWidget_UpdateControlType");
static_assert(offsetof(UMGControlTypeSelectionWidget_UpdateControlType, controlType) == 0x000000, "Member 'UMGControlTypeSelectionWidget_UpdateControlType::controlType' has a wrong offset!");

// Function DeadByDaylight.UMGCustomizationCategoriesBar.BroadcastCustomizationCategoryButtonPressed
// 0x0001 (0x0001 - 0x0000)
struct UMGCustomizationCategoriesBar_BroadcastCustomizationCategoryButtonPressed final
{
public:
	ECustomizationCategory                        categoryIndex;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCustomizationCategoriesBar_BroadcastCustomizationCategoryButtonPressed) == 0x000001, "Wrong alignment on UMGCustomizationCategoriesBar_BroadcastCustomizationCategoryButtonPressed");
static_assert(sizeof(UMGCustomizationCategoriesBar_BroadcastCustomizationCategoryButtonPressed) == 0x000001, "Wrong size on UMGCustomizationCategoriesBar_BroadcastCustomizationCategoryButtonPressed");
static_assert(offsetof(UMGCustomizationCategoriesBar_BroadcastCustomizationCategoryButtonPressed, categoryIndex) == 0x000000, "Member 'UMGCustomizationCategoriesBar_BroadcastCustomizationCategoryButtonPressed::categoryIndex' has a wrong offset!");

// Function DeadByDaylight.UMGCustomizationCategoriesBar.SetRole
// 0x0001 (0x0001 - 0x0000)
struct UMGCustomizationCategoriesBar_SetRole final
{
public:
	bool                                          isKiller;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCustomizationCategoriesBar_SetRole) == 0x000001, "Wrong alignment on UMGCustomizationCategoriesBar_SetRole");
static_assert(sizeof(UMGCustomizationCategoriesBar_SetRole) == 0x000001, "Wrong size on UMGCustomizationCategoriesBar_SetRole");
static_assert(offsetof(UMGCustomizationCategoriesBar_SetRole, isKiller) == 0x000000, "Member 'UMGCustomizationCategoriesBar_SetRole::isKiller' has a wrong offset!");

// Function DeadByDaylight.UMGCustomizationCategoriesBar.SetSelectedCategory
// 0x0001 (0x0001 - 0x0000)
struct UMGCustomizationCategoriesBar_SetSelectedCategory final
{
public:
	ECustomizationCategory                        category;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCustomizationCategoriesBar_SetSelectedCategory) == 0x000001, "Wrong alignment on UMGCustomizationCategoriesBar_SetSelectedCategory");
static_assert(sizeof(UMGCustomizationCategoriesBar_SetSelectedCategory) == 0x000001, "Wrong size on UMGCustomizationCategoriesBar_SetSelectedCategory");
static_assert(offsetof(UMGCustomizationCategoriesBar_SetSelectedCategory, category) == 0x000000, "Member 'UMGCustomizationCategoriesBar_SetSelectedCategory::category' has a wrong offset!");

// Function DeadByDaylight.UMGCustomizationPageScrollWidget.OnAvailableItemSelectedCallback
// 0x0004 (0x0004 - 0x0000)
struct UMGCustomizationPageScrollWidget_OnAvailableItemSelectedCallback final
{
public:
	int32                                         itemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCustomizationPageScrollWidget_OnAvailableItemSelectedCallback) == 0x000004, "Wrong alignment on UMGCustomizationPageScrollWidget_OnAvailableItemSelectedCallback");
static_assert(sizeof(UMGCustomizationPageScrollWidget_OnAvailableItemSelectedCallback) == 0x000004, "Wrong size on UMGCustomizationPageScrollWidget_OnAvailableItemSelectedCallback");
static_assert(offsetof(UMGCustomizationPageScrollWidget_OnAvailableItemSelectedCallback, itemIndex) == 0x000000, "Member 'UMGCustomizationPageScrollWidget_OnAvailableItemSelectedCallback::itemIndex' has a wrong offset!");

// Function DeadByDaylight.UMGCustomizationScreenWidget.BroadcastAvailableItemSelectedEvent
// 0x0388 (0x0388 - 0x0000)
struct UMGCustomizationScreenWidget_BroadcastAvailableItemSelectedEvent final
{
public:
	int32                                         itemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStoreItemSlotData                     selectedItem;                                      // 0x0008(0x01C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FStoreItemSlotData                     parentItem;                                        // 0x01C8(0x01C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCustomizationScreenWidget_BroadcastAvailableItemSelectedEvent) == 0x000008, "Wrong alignment on UMGCustomizationScreenWidget_BroadcastAvailableItemSelectedEvent");
static_assert(sizeof(UMGCustomizationScreenWidget_BroadcastAvailableItemSelectedEvent) == 0x000388, "Wrong size on UMGCustomizationScreenWidget_BroadcastAvailableItemSelectedEvent");
static_assert(offsetof(UMGCustomizationScreenWidget_BroadcastAvailableItemSelectedEvent, itemIndex) == 0x000000, "Member 'UMGCustomizationScreenWidget_BroadcastAvailableItemSelectedEvent::itemIndex' has a wrong offset!");
static_assert(offsetof(UMGCustomizationScreenWidget_BroadcastAvailableItemSelectedEvent, selectedItem) == 0x000008, "Member 'UMGCustomizationScreenWidget_BroadcastAvailableItemSelectedEvent::selectedItem' has a wrong offset!");
static_assert(offsetof(UMGCustomizationScreenWidget_BroadcastAvailableItemSelectedEvent, parentItem) == 0x0001C8, "Member 'UMGCustomizationScreenWidget_BroadcastAvailableItemSelectedEvent::parentItem' has a wrong offset!");

// Function DeadByDaylight.UMGCustomizationScreenWidget.BroadcastCustomizationCategoryButtonPressed
// 0x0004 (0x0004 - 0x0000)
struct UMGCustomizationScreenWidget_BroadcastCustomizationCategoryButtonPressed final
{
public:
	int32                                         categoryIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCustomizationScreenWidget_BroadcastCustomizationCategoryButtonPressed) == 0x000004, "Wrong alignment on UMGCustomizationScreenWidget_BroadcastCustomizationCategoryButtonPressed");
static_assert(sizeof(UMGCustomizationScreenWidget_BroadcastCustomizationCategoryButtonPressed) == 0x000004, "Wrong size on UMGCustomizationScreenWidget_BroadcastCustomizationCategoryButtonPressed");
static_assert(offsetof(UMGCustomizationScreenWidget_BroadcastCustomizationCategoryButtonPressed, categoryIndex) == 0x000000, "Member 'UMGCustomizationScreenWidget_BroadcastCustomizationCategoryButtonPressed::categoryIndex' has a wrong offset!");

// Function DeadByDaylight.UMGCustomizationScreenWidget.BroadcastUnlockWithCurrencyEvent
// 0x0018 (0x0018 - 0x0000)
struct UMGCustomizationScreenWidget_BroadcastUnlockWithCurrencyEvent final
{
public:
	int32                                         currencyId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 combinedItem;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCustomizationScreenWidget_BroadcastUnlockWithCurrencyEvent) == 0x000008, "Wrong alignment on UMGCustomizationScreenWidget_BroadcastUnlockWithCurrencyEvent");
static_assert(sizeof(UMGCustomizationScreenWidget_BroadcastUnlockWithCurrencyEvent) == 0x000018, "Wrong size on UMGCustomizationScreenWidget_BroadcastUnlockWithCurrencyEvent");
static_assert(offsetof(UMGCustomizationScreenWidget_BroadcastUnlockWithCurrencyEvent, currencyId) == 0x000000, "Member 'UMGCustomizationScreenWidget_BroadcastUnlockWithCurrencyEvent::currencyId' has a wrong offset!");
static_assert(offsetof(UMGCustomizationScreenWidget_BroadcastUnlockWithCurrencyEvent, combinedItem) == 0x000008, "Member 'UMGCustomizationScreenWidget_BroadcastUnlockWithCurrencyEvent::combinedItem' has a wrong offset!");

// Function DeadByDaylight.UMGCustomizationScreenWidget.SetCategoryLabel
// 0x0001 (0x0001 - 0x0000)
struct UMGCustomizationScreenWidget_SetCategoryLabel final
{
public:
	ECustomizationCategory                        category;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCustomizationScreenWidget_SetCategoryLabel) == 0x000001, "Wrong alignment on UMGCustomizationScreenWidget_SetCategoryLabel");
static_assert(sizeof(UMGCustomizationScreenWidget_SetCategoryLabel) == 0x000001, "Wrong size on UMGCustomizationScreenWidget_SetCategoryLabel");
static_assert(offsetof(UMGCustomizationScreenWidget_SetCategoryLabel, category) == 0x000000, "Member 'UMGCustomizationScreenWidget_SetCategoryLabel::category' has a wrong offset!");

// Function DeadByDaylight.UMGCustomizationTooltipHeaderWidget.SetOutfitComposition
// 0x0018 (0x0018 - 0x0000)
struct UMGCustomizationTooltipHeaderWidget_SetOutfitComposition final
{
public:
	bool                                          isUnbreakable;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECustomizationCategory>                composition;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGCustomizationTooltipHeaderWidget_SetOutfitComposition) == 0x000008, "Wrong alignment on UMGCustomizationTooltipHeaderWidget_SetOutfitComposition");
static_assert(sizeof(UMGCustomizationTooltipHeaderWidget_SetOutfitComposition) == 0x000018, "Wrong size on UMGCustomizationTooltipHeaderWidget_SetOutfitComposition");
static_assert(offsetof(UMGCustomizationTooltipHeaderWidget_SetOutfitComposition, isUnbreakable) == 0x000000, "Member 'UMGCustomizationTooltipHeaderWidget_SetOutfitComposition::isUnbreakable' has a wrong offset!");
static_assert(offsetof(UMGCustomizationTooltipHeaderWidget_SetOutfitComposition, composition) == 0x000008, "Member 'UMGCustomizationTooltipHeaderWidget_SetOutfitComposition::composition' has a wrong offset!");

// Function DeadByDaylight.UMGDailyRewardWidget.PlayIdleAnimationForState
// 0x0001 (0x0001 - 0x0000)
struct UMGDailyRewardWidget_PlayIdleAnimationForState final
{
public:
	EUMGDailyRewardWidgetState                    inState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGDailyRewardWidget_PlayIdleAnimationForState) == 0x000001, "Wrong alignment on UMGDailyRewardWidget_PlayIdleAnimationForState");
static_assert(sizeof(UMGDailyRewardWidget_PlayIdleAnimationForState) == 0x000001, "Wrong size on UMGDailyRewardWidget_PlayIdleAnimationForState");
static_assert(offsetof(UMGDailyRewardWidget_PlayIdleAnimationForState, inState) == 0x000000, "Member 'UMGDailyRewardWidget_PlayIdleAnimationForState::inState' has a wrong offset!");

// Function DeadByDaylight.UMGDailyRewardWidget.SetRarityColors
// 0x0008 (0x0008 - 0x0000)
struct UMGDailyRewardWidget_SetRarityColors final
{
public:
	struct FColor                                 backgroundColor;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 tintColor;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGDailyRewardWidget_SetRarityColors) == 0x000004, "Wrong alignment on UMGDailyRewardWidget_SetRarityColors");
static_assert(sizeof(UMGDailyRewardWidget_SetRarityColors) == 0x000008, "Wrong size on UMGDailyRewardWidget_SetRarityColors");
static_assert(offsetof(UMGDailyRewardWidget_SetRarityColors, backgroundColor) == 0x000000, "Member 'UMGDailyRewardWidget_SetRarityColors::backgroundColor' has a wrong offset!");
static_assert(offsetof(UMGDailyRewardWidget_SetRarityColors, tintColor) == 0x000004, "Member 'UMGDailyRewardWidget_SetRarityColors::tintColor' has a wrong offset!");

// Function DeadByDaylight.UMGDailyRewardWidget.SetStateVisuals
// 0x0001 (0x0001 - 0x0000)
struct UMGDailyRewardWidget_SetStateVisuals final
{
public:
	EUMGDailyRewardWidgetState                    inState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGDailyRewardWidget_SetStateVisuals) == 0x000001, "Wrong alignment on UMGDailyRewardWidget_SetStateVisuals");
static_assert(sizeof(UMGDailyRewardWidget_SetStateVisuals) == 0x000001, "Wrong size on UMGDailyRewardWidget_SetStateVisuals");
static_assert(offsetof(UMGDailyRewardWidget_SetStateVisuals, inState) == 0x000000, "Member 'UMGDailyRewardWidget_SetStateVisuals::inState' has a wrong offset!");

// Function DeadByDaylight.UMGDailyRewardWidget.StopIdleAnimationForState
// 0x0001 (0x0001 - 0x0000)
struct UMGDailyRewardWidget_StopIdleAnimationForState final
{
public:
	EUMGDailyRewardWidgetState                    inState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGDailyRewardWidget_StopIdleAnimationForState) == 0x000001, "Wrong alignment on UMGDailyRewardWidget_StopIdleAnimationForState");
static_assert(sizeof(UMGDailyRewardWidget_StopIdleAnimationForState) == 0x000001, "Wrong size on UMGDailyRewardWidget_StopIdleAnimationForState");
static_assert(offsetof(UMGDailyRewardWidget_StopIdleAnimationForState, inState) == 0x000000, "Member 'UMGDailyRewardWidget_StopIdleAnimationForState::inState' has a wrong offset!");

// Function DeadByDaylight.UMGGameplayAlertWidget.UpdateWidget
// 0x0170 (0x0170 - 0x0000)
struct UMGGameplayAlertWidget_UpdateWidget final
{
public:
	struct FStatusEffectSlotData                  statusEffectData;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInventorySlotData                     originatorData;                                    // 0x0048(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGGameplayAlertWidget_UpdateWidget) == 0x000008, "Wrong alignment on UMGGameplayAlertWidget_UpdateWidget");
static_assert(sizeof(UMGGameplayAlertWidget_UpdateWidget) == 0x000170, "Wrong size on UMGGameplayAlertWidget_UpdateWidget");
static_assert(offsetof(UMGGameplayAlertWidget_UpdateWidget, statusEffectData) == 0x000000, "Member 'UMGGameplayAlertWidget_UpdateWidget::statusEffectData' has a wrong offset!");
static_assert(offsetof(UMGGameplayAlertWidget_UpdateWidget, originatorData) == 0x000048, "Member 'UMGGameplayAlertWidget_UpdateWidget::originatorData' has a wrong offset!");

// Function DeadByDaylight.UMGHtmlRichText.SetHtmlText
// 0x0010 (0x0010 - 0x0000)
struct UMGHtmlRichText_SetHtmlText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHtmlRichText_SetHtmlText) == 0x000008, "Wrong alignment on UMGHtmlRichText_SetHtmlText");
static_assert(sizeof(UMGHtmlRichText_SetHtmlText) == 0x000010, "Wrong size on UMGHtmlRichText_SetHtmlText");
static_assert(offsetof(UMGHtmlRichText_SetHtmlText, InText) == 0x000000, "Member 'UMGHtmlRichText_SetHtmlText::InText' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorLayoutWidget.OnSaveDirty
// 0x0001 (0x0001 - 0x0000)
struct UMGHudEditorLayoutWidget_OnSaveDirty final
{
public:
	bool                                          isDirty;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorLayoutWidget_OnSaveDirty) == 0x000001, "Wrong alignment on UMGHudEditorLayoutWidget_OnSaveDirty");
static_assert(sizeof(UMGHudEditorLayoutWidget_OnSaveDirty) == 0x000001, "Wrong size on UMGHudEditorLayoutWidget_OnSaveDirty");
static_assert(offsetof(UMGHudEditorLayoutWidget_OnSaveDirty, isDirty) == 0x000000, "Member 'UMGHudEditorLayoutWidget_OnSaveDirty::isDirty' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorLayoutWidget.SetHudEditorScreen
// 0x0008 (0x0008 - 0x0000)
struct UMGHudEditorLayoutWidget_SetHudEditorScreen final
{
public:
	class UUMGHudEditorScreen*                    hudEditorScreen;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorLayoutWidget_SetHudEditorScreen) == 0x000008, "Wrong alignment on UMGHudEditorLayoutWidget_SetHudEditorScreen");
static_assert(sizeof(UMGHudEditorLayoutWidget_SetHudEditorScreen) == 0x000008, "Wrong size on UMGHudEditorLayoutWidget_SetHudEditorScreen");
static_assert(offsetof(UMGHudEditorLayoutWidget_SetHudEditorScreen, hudEditorScreen) == 0x000000, "Member 'UMGHudEditorLayoutWidget_SetHudEditorScreen::hudEditorScreen' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorLayoutWidget.SetSaveOverlapSound
// 0x0008 (0x0008 - 0x0000)
struct UMGHudEditorLayoutWidget_SetSaveOverlapSound final
{
public:
	class UAkAudioEvent*                          onSaveOverlapSound;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorLayoutWidget_SetSaveOverlapSound) == 0x000008, "Wrong alignment on UMGHudEditorLayoutWidget_SetSaveOverlapSound");
static_assert(sizeof(UMGHudEditorLayoutWidget_SetSaveOverlapSound) == 0x000008, "Wrong size on UMGHudEditorLayoutWidget_SetSaveOverlapSound");
static_assert(offsetof(UMGHudEditorLayoutWidget_SetSaveOverlapSound, onSaveOverlapSound) == 0x000000, "Member 'UMGHudEditorLayoutWidget_SetSaveOverlapSound::onSaveOverlapSound' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorLayoutWidget.SetWidgetToEdit
// 0x0008 (0x0008 - 0x0000)
struct UMGHudEditorLayoutWidget_SetWidgetToEdit final
{
public:
	class UUMGDragWidget_HudEditor*               widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorLayoutWidget_SetWidgetToEdit) == 0x000008, "Wrong alignment on UMGHudEditorLayoutWidget_SetWidgetToEdit");
static_assert(sizeof(UMGHudEditorLayoutWidget_SetWidgetToEdit) == 0x000008, "Wrong size on UMGHudEditorLayoutWidget_SetWidgetToEdit");
static_assert(offsetof(UMGHudEditorLayoutWidget_SetWidgetToEdit, widget) == 0x000000, "Member 'UMGHudEditorLayoutWidget_SetWidgetToEdit::widget' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorLayoutWidget.GetCurrentDragWidget
// 0x0008 (0x0008 - 0x0000)
struct UMGHudEditorLayoutWidget_GetCurrentDragWidget final
{
public:
	class UUMGDragWidget_HudEditor*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorLayoutWidget_GetCurrentDragWidget) == 0x000008, "Wrong alignment on UMGHudEditorLayoutWidget_GetCurrentDragWidget");
static_assert(sizeof(UMGHudEditorLayoutWidget_GetCurrentDragWidget) == 0x000008, "Wrong size on UMGHudEditorLayoutWidget_GetCurrentDragWidget");
static_assert(offsetof(UMGHudEditorLayoutWidget_GetCurrentDragWidget, ReturnValue) == 0x000000, "Member 'UMGHudEditorLayoutWidget_GetCurrentDragWidget::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorLayoutWidget.GetHudEditorWrapperToEdit
// 0x0008 (0x0008 - 0x0000)
struct UMGHudEditorLayoutWidget_GetHudEditorWrapperToEdit final
{
public:
	class UCustomWidgetWrapper_HudEditor*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorLayoutWidget_GetHudEditorWrapperToEdit) == 0x000008, "Wrong alignment on UMGHudEditorLayoutWidget_GetHudEditorWrapperToEdit");
static_assert(sizeof(UMGHudEditorLayoutWidget_GetHudEditorWrapperToEdit) == 0x000008, "Wrong size on UMGHudEditorLayoutWidget_GetHudEditorWrapperToEdit");
static_assert(offsetof(UMGHudEditorLayoutWidget_GetHudEditorWrapperToEdit, ReturnValue) == 0x000000, "Member 'UMGHudEditorLayoutWidget_GetHudEditorWrapperToEdit::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGInboxMessageEntryWidget.GetElapsedTime
// 0x0008 (0x0008 - 0x0000)
struct UMGInboxMessageEntryWidget_GetElapsedTime final
{
public:
	struct FInboxMessageElapsedTime               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxMessageEntryWidget_GetElapsedTime) == 0x000004, "Wrong alignment on UMGInboxMessageEntryWidget_GetElapsedTime");
static_assert(sizeof(UMGInboxMessageEntryWidget_GetElapsedTime) == 0x000008, "Wrong size on UMGInboxMessageEntryWidget_GetElapsedTime");
static_assert(offsetof(UMGInboxMessageEntryWidget_GetElapsedTime, ReturnValue) == 0x000000, "Member 'UMGInboxMessageEntryWidget_GetElapsedTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGInboxMessageEntryWidget.SetMessageData
// 0x0060 (0x0060 - 0x0000)
struct UMGInboxMessageEntryWidget_SetMessageData final
{
public:
	struct FInboxMessageUIData                    messageData;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxMessageEntryWidget_SetMessageData) == 0x000008, "Wrong alignment on UMGInboxMessageEntryWidget_SetMessageData");
static_assert(sizeof(UMGInboxMessageEntryWidget_SetMessageData) == 0x000060, "Wrong size on UMGInboxMessageEntryWidget_SetMessageData");
static_assert(offsetof(UMGInboxMessageEntryWidget_SetMessageData, messageData) == 0x000000, "Member 'UMGInboxMessageEntryWidget_SetMessageData::messageData' has a wrong offset!");

// Function DeadByDaylight.UMGInboxMessageEntryWidget.UpdateMessageData
// 0x0060 (0x0060 - 0x0000)
struct UMGInboxMessageEntryWidget_UpdateMessageData final
{
public:
	struct FInboxMessageUIData                    messageData;                                       // 0x0000(0x0060)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGInboxMessageEntryWidget_UpdateMessageData) == 0x000008, "Wrong alignment on UMGInboxMessageEntryWidget_UpdateMessageData");
static_assert(sizeof(UMGInboxMessageEntryWidget_UpdateMessageData) == 0x000060, "Wrong size on UMGInboxMessageEntryWidget_UpdateMessageData");
static_assert(offsetof(UMGInboxMessageEntryWidget_UpdateMessageData, messageData) == 0x000000, "Member 'UMGInboxMessageEntryWidget_UpdateMessageData::messageData' has a wrong offset!");

// Function DeadByDaylight.UmgKillerHud.RespondToVirtualJoystickPressChanged
// 0x0008 (0x0008 - 0x0000)
struct UmgKillerHud_RespondToVirtualJoystickPressChanged final
{
public:
	int32                                         controlIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          pressed;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UmgKillerHud_RespondToVirtualJoystickPressChanged) == 0x000004, "Wrong alignment on UmgKillerHud_RespondToVirtualJoystickPressChanged");
static_assert(sizeof(UmgKillerHud_RespondToVirtualJoystickPressChanged) == 0x000008, "Wrong size on UmgKillerHud_RespondToVirtualJoystickPressChanged");
static_assert(offsetof(UmgKillerHud_RespondToVirtualJoystickPressChanged, controlIndex) == 0x000000, "Member 'UmgKillerHud_RespondToVirtualJoystickPressChanged::controlIndex' has a wrong offset!");
static_assert(offsetof(UmgKillerHud_RespondToVirtualJoystickPressChanged, pressed) == 0x000004, "Member 'UmgKillerHud_RespondToVirtualJoystickPressChanged::pressed' has a wrong offset!");

// Function DeadByDaylight.UmgKillerHud.SetPowerAttackJoystickPosition
// 0x0008 (0x0008 - 0x0000)
struct UmgKillerHud_SetPowerAttackJoystickPosition final
{
public:
	struct FVector2D                              position;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgKillerHud_SetPowerAttackJoystickPosition) == 0x000004, "Wrong alignment on UmgKillerHud_SetPowerAttackJoystickPosition");
static_assert(sizeof(UmgKillerHud_SetPowerAttackJoystickPosition) == 0x000008, "Wrong size on UmgKillerHud_SetPowerAttackJoystickPosition");
static_assert(offsetof(UmgKillerHud_SetPowerAttackJoystickPosition, position) == 0x000000, "Member 'UmgKillerHud_SetPowerAttackJoystickPosition::position' has a wrong offset!");

// Function DeadByDaylight.UmgKillerHud.SetPowerAttackJoystickThumbImage
// 0x0001 (0x0001 - 0x0000)
struct UmgKillerHud_SetPowerAttackJoystickThumbImage final
{
public:
	bool                                          pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgKillerHud_SetPowerAttackJoystickThumbImage) == 0x000001, "Wrong alignment on UmgKillerHud_SetPowerAttackJoystickThumbImage");
static_assert(sizeof(UmgKillerHud_SetPowerAttackJoystickThumbImage) == 0x000001, "Wrong size on UmgKillerHud_SetPowerAttackJoystickThumbImage");
static_assert(offsetof(UmgKillerHud_SetPowerAttackJoystickThumbImage, pressed) == 0x000000, "Member 'UmgKillerHud_SetPowerAttackJoystickThumbImage::pressed' has a wrong offset!");

// Function DeadByDaylight.UmgKillerHud.SetPowerIconFromItem
// 0x0010 (0x0010 - 0x0000)
struct UmgKillerHud_SetPowerIconFromItem final
{
public:
	class ACollectable*                           item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                inventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UmgKillerHud_SetPowerIconFromItem) == 0x000008, "Wrong alignment on UmgKillerHud_SetPowerIconFromItem");
static_assert(sizeof(UmgKillerHud_SetPowerIconFromItem) == 0x000010, "Wrong size on UmgKillerHud_SetPowerIconFromItem");
static_assert(offsetof(UmgKillerHud_SetPowerIconFromItem, item) == 0x000000, "Member 'UmgKillerHud_SetPowerIconFromItem::item' has a wrong offset!");
static_assert(offsetof(UmgKillerHud_SetPowerIconFromItem, inventoryType) == 0x000008, "Member 'UmgKillerHud_SetPowerIconFromItem::inventoryType' has a wrong offset!");

// Function DeadByDaylight.UmgKillerHud.UpdatePowerButtonTier
// 0x000C (0x000C - 0x0000)
struct UmgKillerHud_UpdatePowerButtonTier final
{
public:
	int32                                         previousTier;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         currentTier;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isFirstTime;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UmgKillerHud_UpdatePowerButtonTier) == 0x000004, "Wrong alignment on UmgKillerHud_UpdatePowerButtonTier");
static_assert(sizeof(UmgKillerHud_UpdatePowerButtonTier) == 0x00000C, "Wrong size on UmgKillerHud_UpdatePowerButtonTier");
static_assert(offsetof(UmgKillerHud_UpdatePowerButtonTier, previousTier) == 0x000000, "Member 'UmgKillerHud_UpdatePowerButtonTier::previousTier' has a wrong offset!");
static_assert(offsetof(UmgKillerHud_UpdatePowerButtonTier, currentTier) == 0x000004, "Member 'UmgKillerHud_UpdatePowerButtonTier::currentTier' has a wrong offset!");
static_assert(offsetof(UmgKillerHud_UpdatePowerButtonTier, isFirstTime) == 0x000008, "Member 'UmgKillerHud_UpdatePowerButtonTier::isFirstTime' has a wrong offset!");

// Function DeadByDaylight.UmgKillerHud.GetCurrentPowerUseInteraction
// 0x0008 (0x0008 - 0x0000)
struct UmgKillerHud_GetCurrentPowerUseInteraction final
{
public:
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgKillerHud_GetCurrentPowerUseInteraction) == 0x000008, "Wrong alignment on UmgKillerHud_GetCurrentPowerUseInteraction");
static_assert(sizeof(UmgKillerHud_GetCurrentPowerUseInteraction) == 0x000008, "Wrong size on UmgKillerHud_GetCurrentPowerUseInteraction");
static_assert(offsetof(UmgKillerHud_GetCurrentPowerUseInteraction, ReturnValue) == 0x000000, "Member 'UmgKillerHud_GetCurrentPowerUseInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UmgKillerHud.IsAttackButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct UmgKillerHud_IsAttackButtonVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgKillerHud_IsAttackButtonVisible) == 0x000001, "Wrong alignment on UmgKillerHud_IsAttackButtonVisible");
static_assert(sizeof(UmgKillerHud_IsAttackButtonVisible) == 0x000001, "Wrong size on UmgKillerHud_IsAttackButtonVisible");
static_assert(offsetof(UmgKillerHud_IsAttackButtonVisible, ReturnValue) == 0x000000, "Member 'UmgKillerHud_IsAttackButtonVisible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UmgKillerHud.IsCancelPowerButtonAvailable
// 0x0001 (0x0001 - 0x0000)
struct UmgKillerHud_IsCancelPowerButtonAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgKillerHud_IsCancelPowerButtonAvailable) == 0x000001, "Wrong alignment on UmgKillerHud_IsCancelPowerButtonAvailable");
static_assert(sizeof(UmgKillerHud_IsCancelPowerButtonAvailable) == 0x000001, "Wrong size on UmgKillerHud_IsCancelPowerButtonAvailable");
static_assert(offsetof(UmgKillerHud_IsCancelPowerButtonAvailable, ReturnValue) == 0x000000, "Member 'UmgKillerHud_IsCancelPowerButtonAvailable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UmgKillerHud.IsPowerButtonAvailable
// 0x0001 (0x0001 - 0x0000)
struct UmgKillerHud_IsPowerButtonAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgKillerHud_IsPowerButtonAvailable) == 0x000001, "Wrong alignment on UmgKillerHud_IsPowerButtonAvailable");
static_assert(sizeof(UmgKillerHud_IsPowerButtonAvailable) == 0x000001, "Wrong size on UmgKillerHud_IsPowerButtonAvailable");
static_assert(offsetof(UmgKillerHud_IsPowerButtonAvailable, ReturnValue) == 0x000000, "Member 'UmgKillerHud_IsPowerButtonAvailable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UmgKillerHud.ShouldShowInteractionHighlight
// 0x0002 (0x0002 - 0x0000)
struct UmgKillerHud_ShouldShowInteractionHighlight final
{
public:
	EInputInteractionType                         interactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgKillerHud_ShouldShowInteractionHighlight) == 0x000001, "Wrong alignment on UmgKillerHud_ShouldShowInteractionHighlight");
static_assert(sizeof(UmgKillerHud_ShouldShowInteractionHighlight) == 0x000002, "Wrong size on UmgKillerHud_ShouldShowInteractionHighlight");
static_assert(offsetof(UmgKillerHud_ShouldShowInteractionHighlight, interactionType) == 0x000000, "Member 'UmgKillerHud_ShouldShowInteractionHighlight::interactionType' has a wrong offset!");
static_assert(offsetof(UmgKillerHud_ShouldShowInteractionHighlight, ReturnValue) == 0x000001, "Member 'UmgKillerHud_ShouldShowInteractionHighlight::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGLevelBannerWidget.SetExperienceVisibilityBP
// 0x0002 (0x0002 - 0x0000)
struct UMGLevelBannerWidget_SetExperienceVisibilityBP final
{
public:
	bool                                          isExperienceVisible;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isBig;                                             // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLevelBannerWidget_SetExperienceVisibilityBP) == 0x000001, "Wrong alignment on UMGLevelBannerWidget_SetExperienceVisibilityBP");
static_assert(sizeof(UMGLevelBannerWidget_SetExperienceVisibilityBP) == 0x000002, "Wrong size on UMGLevelBannerWidget_SetExperienceVisibilityBP");
static_assert(offsetof(UMGLevelBannerWidget_SetExperienceVisibilityBP, isExperienceVisible) == 0x000000, "Member 'UMGLevelBannerWidget_SetExperienceVisibilityBP::isExperienceVisible' has a wrong offset!");
static_assert(offsetof(UMGLevelBannerWidget_SetExperienceVisibilityBP, isBig) == 0x000001, "Member 'UMGLevelBannerWidget_SetExperienceVisibilityBP::isBig' has a wrong offset!");

// Function DeadByDaylight.UMGLevelBannerWidget.SetInfo
// 0x0010 (0x0010 - 0x0000)
struct UMGLevelBannerWidget_SetInfo final
{
public:
	int32                                         playerLevel;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         playerPrestige;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         currentExperience;                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         nextLevelExperience;                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLevelBannerWidget_SetInfo) == 0x000004, "Wrong alignment on UMGLevelBannerWidget_SetInfo");
static_assert(sizeof(UMGLevelBannerWidget_SetInfo) == 0x000010, "Wrong size on UMGLevelBannerWidget_SetInfo");
static_assert(offsetof(UMGLevelBannerWidget_SetInfo, playerLevel) == 0x000000, "Member 'UMGLevelBannerWidget_SetInfo::playerLevel' has a wrong offset!");
static_assert(offsetof(UMGLevelBannerWidget_SetInfo, playerPrestige) == 0x000004, "Member 'UMGLevelBannerWidget_SetInfo::playerPrestige' has a wrong offset!");
static_assert(offsetof(UMGLevelBannerWidget_SetInfo, currentExperience) == 0x000008, "Member 'UMGLevelBannerWidget_SetInfo::currentExperience' has a wrong offset!");
static_assert(offsetof(UMGLevelBannerWidget_SetInfo, nextLevelExperience) == 0x00000C, "Member 'UMGLevelBannerWidget_SetInfo::nextLevelExperience' has a wrong offset!");

// Function DeadByDaylight.UMGLevelBannerWidget.SetInfoBP
// 0x0010 (0x0010 - 0x0000)
struct UMGLevelBannerWidget_SetInfoBP final
{
public:
	int32                                         playerLevel;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         playerPrestige;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         currentExperience;                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         nextLevelExperience;                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLevelBannerWidget_SetInfoBP) == 0x000004, "Wrong alignment on UMGLevelBannerWidget_SetInfoBP");
static_assert(sizeof(UMGLevelBannerWidget_SetInfoBP) == 0x000010, "Wrong size on UMGLevelBannerWidget_SetInfoBP");
static_assert(offsetof(UMGLevelBannerWidget_SetInfoBP, playerLevel) == 0x000000, "Member 'UMGLevelBannerWidget_SetInfoBP::playerLevel' has a wrong offset!");
static_assert(offsetof(UMGLevelBannerWidget_SetInfoBP, playerPrestige) == 0x000004, "Member 'UMGLevelBannerWidget_SetInfoBP::playerPrestige' has a wrong offset!");
static_assert(offsetof(UMGLevelBannerWidget_SetInfoBP, currentExperience) == 0x000008, "Member 'UMGLevelBannerWidget_SetInfoBP::currentExperience' has a wrong offset!");
static_assert(offsetof(UMGLevelBannerWidget_SetInfoBP, nextLevelExperience) == 0x00000C, "Member 'UMGLevelBannerWidget_SetInfoBP::nextLevelExperience' has a wrong offset!");

// Function DeadByDaylight.UMGLevelBannerWidget.SetProgressBarValue
// 0x0004 (0x0004 - 0x0000)
struct UMGLevelBannerWidget_SetProgressBarValue final
{
public:
	float                                         progress;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLevelBannerWidget_SetProgressBarValue) == 0x000004, "Wrong alignment on UMGLevelBannerWidget_SetProgressBarValue");
static_assert(sizeof(UMGLevelBannerWidget_SetProgressBarValue) == 0x000004, "Wrong size on UMGLevelBannerWidget_SetProgressBarValue");
static_assert(offsetof(UMGLevelBannerWidget_SetProgressBarValue, progress) == 0x000000, "Member 'UMGLevelBannerWidget_SetProgressBarValue::progress' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutPageScrollWidget.HandleItemClicked
// 0x000C (0x000C - 0x0000)
struct UMGLoadoutPageScrollWidget_HandleItemClicked final
{
public:
	class FName                                   itemID;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutPageScrollWidget_HandleItemClicked) == 0x000004, "Wrong alignment on UMGLoadoutPageScrollWidget_HandleItemClicked");
static_assert(sizeof(UMGLoadoutPageScrollWidget_HandleItemClicked) == 0x00000C, "Wrong size on UMGLoadoutPageScrollWidget_HandleItemClicked");
static_assert(offsetof(UMGLoadoutPageScrollWidget_HandleItemClicked, itemID) == 0x000000, "Member 'UMGLoadoutPageScrollWidget_HandleItemClicked::itemID' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutPageScrollWidget.SetInventoryData
// 0x0048 (0x0048 - 0x0000)
struct UMGLoadoutPageScrollWidget_SetInventoryData final
{
public:
	EInventoryGridFormat                          gridFormat;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInventorySlotData>             inventoryData;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 selectedItemsIndexes;                              // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 trackingItemName;                                  // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 subtitle;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutPageScrollWidget_SetInventoryData) == 0x000008, "Wrong alignment on UMGLoadoutPageScrollWidget_SetInventoryData");
static_assert(sizeof(UMGLoadoutPageScrollWidget_SetInventoryData) == 0x000048, "Wrong size on UMGLoadoutPageScrollWidget_SetInventoryData");
static_assert(offsetof(UMGLoadoutPageScrollWidget_SetInventoryData, gridFormat) == 0x000000, "Member 'UMGLoadoutPageScrollWidget_SetInventoryData::gridFormat' has a wrong offset!");
static_assert(offsetof(UMGLoadoutPageScrollWidget_SetInventoryData, inventoryData) == 0x000008, "Member 'UMGLoadoutPageScrollWidget_SetInventoryData::inventoryData' has a wrong offset!");
static_assert(offsetof(UMGLoadoutPageScrollWidget_SetInventoryData, selectedItemsIndexes) == 0x000018, "Member 'UMGLoadoutPageScrollWidget_SetInventoryData::selectedItemsIndexes' has a wrong offset!");
static_assert(offsetof(UMGLoadoutPageScrollWidget_SetInventoryData, trackingItemName) == 0x000028, "Member 'UMGLoadoutPageScrollWidget_SetInventoryData::trackingItemName' has a wrong offset!");
static_assert(offsetof(UMGLoadoutPageScrollWidget_SetInventoryData, subtitle) == 0x000038, "Member 'UMGLoadoutPageScrollWidget_SetInventoryData::subtitle' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutPageScrollWidget.SetItemIsSelected
// 0x0008 (0x0008 - 0x0000)
struct UMGLoadoutPageScrollWidget_SetItemIsSelected final
{
public:
	int32                                         index;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSelected;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGLoadoutPageScrollWidget_SetItemIsSelected) == 0x000004, "Wrong alignment on UMGLoadoutPageScrollWidget_SetItemIsSelected");
static_assert(sizeof(UMGLoadoutPageScrollWidget_SetItemIsSelected) == 0x000008, "Wrong size on UMGLoadoutPageScrollWidget_SetItemIsSelected");
static_assert(offsetof(UMGLoadoutPageScrollWidget_SetItemIsSelected, index) == 0x000000, "Member 'UMGLoadoutPageScrollWidget_SetItemIsSelected::index' has a wrong offset!");
static_assert(offsetof(UMGLoadoutPageScrollWidget_SetItemIsSelected, isSelected) == 0x000004, "Member 'UMGLoadoutPageScrollWidget_SetItemIsSelected::isSelected' has a wrong offset!");

// Function DeadByDaylight.UMGLoadoutWidget.SetInventoryData
// 0x0048 (0x0048 - 0x0000)
struct UMGLoadoutWidget_SetInventoryData final
{
public:
	EInventoryGridFormat                          gridFormat;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInventorySlotData>             inventoryData;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 selectedItemsIndexes;                              // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 trackingItemName;                                  // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 subtitle;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLoadoutWidget_SetInventoryData) == 0x000008, "Wrong alignment on UMGLoadoutWidget_SetInventoryData");
static_assert(sizeof(UMGLoadoutWidget_SetInventoryData) == 0x000048, "Wrong size on UMGLoadoutWidget_SetInventoryData");
static_assert(offsetof(UMGLoadoutWidget_SetInventoryData, gridFormat) == 0x000000, "Member 'UMGLoadoutWidget_SetInventoryData::gridFormat' has a wrong offset!");
static_assert(offsetof(UMGLoadoutWidget_SetInventoryData, inventoryData) == 0x000008, "Member 'UMGLoadoutWidget_SetInventoryData::inventoryData' has a wrong offset!");
static_assert(offsetof(UMGLoadoutWidget_SetInventoryData, selectedItemsIndexes) == 0x000018, "Member 'UMGLoadoutWidget_SetInventoryData::selectedItemsIndexes' has a wrong offset!");
static_assert(offsetof(UMGLoadoutWidget_SetInventoryData, trackingItemName) == 0x000028, "Member 'UMGLoadoutWidget_SetInventoryData::trackingItemName' has a wrong offset!");
static_assert(offsetof(UMGLoadoutWidget_SetInventoryData, subtitle) == 0x000038, "Member 'UMGLoadoutWidget_SetInventoryData::subtitle' has a wrong offset!");

// Function DeadByDaylight.UMGLobbyOfferingItemWidget.GetOfferingIcons
// 0x0050 (0x0050 - 0x0000)
struct UMGLobbyOfferingItemWidget_GetOfferingIcons final
{
public:
	TMap<class FName, TSoftObjectPtr<class UTexture2D>> ReturnValue;                                 // 0x0000(0x0050)(Parm, OutParm, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLobbyOfferingItemWidget_GetOfferingIcons) == 0x000008, "Wrong alignment on UMGLobbyOfferingItemWidget_GetOfferingIcons");
static_assert(sizeof(UMGLobbyOfferingItemWidget_GetOfferingIcons) == 0x000050, "Wrong size on UMGLobbyOfferingItemWidget_GetOfferingIcons");
static_assert(offsetof(UMGLobbyOfferingItemWidget_GetOfferingIcons, ReturnValue) == 0x000000, "Member 'UMGLobbyOfferingItemWidget_GetOfferingIcons::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGLobbyOfferingItemWidget.SetOfferingData
// 0x0128 (0x0128 - 0x0000)
struct UMGLobbyOfferingItemWidget_SetOfferingData final
{
public:
	struct FInventorySlotData                     data;                                              // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGLobbyOfferingItemWidget_SetOfferingData) == 0x000008, "Wrong alignment on UMGLobbyOfferingItemWidget_SetOfferingData");
static_assert(sizeof(UMGLobbyOfferingItemWidget_SetOfferingData) == 0x000128, "Wrong size on UMGLobbyOfferingItemWidget_SetOfferingData");
static_assert(offsetof(UMGLobbyOfferingItemWidget_SetOfferingData, data) == 0x000000, "Member 'UMGLobbyOfferingItemWidget_SetOfferingData::data' has a wrong offset!");

// Function DeadByDaylight.UMGMapThemeWidget.SetMapName
// 0x0010 (0x0010 - 0x0000)
struct UMGMapThemeWidget_SetMapName final
{
public:
	class FString                                 mapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGMapThemeWidget_SetMapName) == 0x000008, "Wrong alignment on UMGMapThemeWidget_SetMapName");
static_assert(sizeof(UMGMapThemeWidget_SetMapName) == 0x000010, "Wrong size on UMGMapThemeWidget_SetMapName");
static_assert(offsetof(UMGMapThemeWidget_SetMapName, mapName) == 0x000000, "Member 'UMGMapThemeWidget_SetMapName::mapName' has a wrong offset!");

// Function DeadByDaylight.UMGMapThemeWidget.SetThemeName
// 0x0010 (0x0010 - 0x0000)
struct UMGMapThemeWidget_SetThemeName final
{
public:
	class FString                                 themeName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGMapThemeWidget_SetThemeName) == 0x000008, "Wrong alignment on UMGMapThemeWidget_SetThemeName");
static_assert(sizeof(UMGMapThemeWidget_SetThemeName) == 0x000010, "Wrong size on UMGMapThemeWidget_SetThemeName");
static_assert(offsetof(UMGMapThemeWidget_SetThemeName, themeName) == 0x000000, "Member 'UMGMapThemeWidget_SetThemeName::themeName' has a wrong offset!");

// Function DeadByDaylight.UMGNavigationButtonWidget.SetIcon
// 0x0008 (0x0008 - 0x0000)
struct UMGNavigationButtonWidget_SetIcon final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGNavigationButtonWidget_SetIcon) == 0x000008, "Wrong alignment on UMGNavigationButtonWidget_SetIcon");
static_assert(sizeof(UMGNavigationButtonWidget_SetIcon) == 0x000008, "Wrong size on UMGNavigationButtonWidget_SetIcon");
static_assert(offsetof(UMGNavigationButtonWidget_SetIcon, Icon) == 0x000000, "Member 'UMGNavigationButtonWidget_SetIcon::Icon' has a wrong offset!");

// Function DeadByDaylight.UMGNavigationButtonWidget.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct UMGNavigationButtonWidget_SetIsSelected final
{
public:
	bool                                          isSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGNavigationButtonWidget_SetIsSelected) == 0x000001, "Wrong alignment on UMGNavigationButtonWidget_SetIsSelected");
static_assert(sizeof(UMGNavigationButtonWidget_SetIsSelected) == 0x000001, "Wrong size on UMGNavigationButtonWidget_SetIsSelected");
static_assert(offsetof(UMGNavigationButtonWidget_SetIsSelected, isSelected) == 0x000000, "Member 'UMGNavigationButtonWidget_SetIsSelected::isSelected' has a wrong offset!");

// Function DeadByDaylight.UMGPartyPlayerSlotWidget.SetVisualsFromState
// 0x0001 (0x0001 - 0x0000)
struct UMGPartyPlayerSlotWidget_SetVisualsFromState final
{
public:
	EPartyPlayerSlotWidgetState                   widgetState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGPartyPlayerSlotWidget_SetVisualsFromState) == 0x000001, "Wrong alignment on UMGPartyPlayerSlotWidget_SetVisualsFromState");
static_assert(sizeof(UMGPartyPlayerSlotWidget_SetVisualsFromState) == 0x000001, "Wrong size on UMGPartyPlayerSlotWidget_SetVisualsFromState");
static_assert(offsetof(UMGPartyPlayerSlotWidget_SetVisualsFromState, widgetState) == 0x000000, "Member 'UMGPartyPlayerSlotWidget_SetVisualsFromState::widgetState' has a wrong offset!");

// Function DeadByDaylight.UMGRefundDataWidget.SetDataAndUpdateWidget
// 0x0078 (0x0078 - 0x0000)
struct UMGRefundDataWidget_SetDataAndUpdateWidget final
{
public:
	struct FRefundUIData                          RefundUIData;                                      // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGRefundDataWidget_SetDataAndUpdateWidget) == 0x000008, "Wrong alignment on UMGRefundDataWidget_SetDataAndUpdateWidget");
static_assert(sizeof(UMGRefundDataWidget_SetDataAndUpdateWidget) == 0x000078, "Wrong size on UMGRefundDataWidget_SetDataAndUpdateWidget");
static_assert(offsetof(UMGRefundDataWidget_SetDataAndUpdateWidget, RefundUIData) == 0x000000, "Member 'UMGRefundDataWidget_SetDataAndUpdateWidget::RefundUIData' has a wrong offset!");

// Function DeadByDaylight.UMGRewardWidget.SetData
// 0x0038 (0x0038 - 0x0000)
struct UMGRewardWidget_SetData final
{
public:
	struct FRewardItemData                        RewardData;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGRewardWidget_SetData) == 0x000008, "Wrong alignment on UMGRewardWidget_SetData");
static_assert(sizeof(UMGRewardWidget_SetData) == 0x000038, "Wrong size on UMGRewardWidget_SetData");
static_assert(offsetof(UMGRewardWidget_SetData, RewardData) == 0x000000, "Member 'UMGRewardWidget_SetData::RewardData' has a wrong offset!");

// Function DeadByDaylight.UMGScoreAlertWidget.UpdateWidget
// 0x0038 (0x0038 - 0x0000)
struct UMGScoreAlertWidget_UpdateWidget final
{
public:
	EDBDScoreCategory                             scoreType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 title;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         scoreValue;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         progress;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   defaultScoreText;                                  // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGScoreAlertWidget_UpdateWidget) == 0x000008, "Wrong alignment on UMGScoreAlertWidget_UpdateWidget");
static_assert(sizeof(UMGScoreAlertWidget_UpdateWidget) == 0x000038, "Wrong size on UMGScoreAlertWidget_UpdateWidget");
static_assert(offsetof(UMGScoreAlertWidget_UpdateWidget, scoreType) == 0x000000, "Member 'UMGScoreAlertWidget_UpdateWidget::scoreType' has a wrong offset!");
static_assert(offsetof(UMGScoreAlertWidget_UpdateWidget, title) == 0x000008, "Member 'UMGScoreAlertWidget_UpdateWidget::title' has a wrong offset!");
static_assert(offsetof(UMGScoreAlertWidget_UpdateWidget, scoreValue) == 0x000018, "Member 'UMGScoreAlertWidget_UpdateWidget::scoreValue' has a wrong offset!");
static_assert(offsetof(UMGScoreAlertWidget_UpdateWidget, progress) == 0x00001C, "Member 'UMGScoreAlertWidget_UpdateWidget::progress' has a wrong offset!");
static_assert(offsetof(UMGScoreAlertWidget_UpdateWidget, defaultScoreText) == 0x000020, "Member 'UMGScoreAlertWidget_UpdateWidget::defaultScoreText' has a wrong offset!");

// Function DeadByDaylight.UMGSettingAboutContextWidget.SetVersionNumber
// 0x0010 (0x0010 - 0x0000)
struct UMGSettingAboutContextWidget_SetVersionNumber final
{
public:
	class FString                                 versionNumber;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingAboutContextWidget_SetVersionNumber) == 0x000008, "Wrong alignment on UMGSettingAboutContextWidget_SetVersionNumber");
static_assert(sizeof(UMGSettingAboutContextWidget_SetVersionNumber) == 0x000010, "Wrong size on UMGSettingAboutContextWidget_SetVersionNumber");
static_assert(offsetof(UMGSettingAboutContextWidget_SetVersionNumber, versionNumber) == 0x000000, "Member 'UMGSettingAboutContextWidget_SetVersionNumber::versionNumber' has a wrong offset!");

// Function DeadByDaylight.UMGSettingMenuButton.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct UMGSettingMenuButton_SetIsSelected final
{
public:
	bool                                          isSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingMenuButton_SetIsSelected) == 0x000001, "Wrong alignment on UMGSettingMenuButton_SetIsSelected");
static_assert(sizeof(UMGSettingMenuButton_SetIsSelected) == 0x000001, "Wrong size on UMGSettingMenuButton_SetIsSelected");
static_assert(offsetof(UMGSettingMenuButton_SetIsSelected, isSelected) == 0x000000, "Member 'UMGSettingMenuButton_SetIsSelected::isSelected' has a wrong offset!");

// Function DeadByDaylight.UMGSettingMenuButton.SetTabButtonText
// 0x0018 (0x0018 - 0x0000)
struct UMGSettingMenuButton_SetTabButtonText final
{
public:
	class FText                                   buttonText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingMenuButton_SetTabButtonText) == 0x000008, "Wrong alignment on UMGSettingMenuButton_SetTabButtonText");
static_assert(sizeof(UMGSettingMenuButton_SetTabButtonText) == 0x000018, "Wrong size on UMGSettingMenuButton_SetTabButtonText");
static_assert(offsetof(UMGSettingMenuButton_SetTabButtonText, buttonText) == 0x000000, "Member 'UMGSettingMenuButton_SetTabButtonText::buttonText' has a wrong offset!");

// Function DeadByDaylight.UMGSettingSettingsContextWidget.HandleAutoDeclineFriendRequestToggleClick
// 0x0001 (0x0001 - 0x0000)
struct UMGSettingSettingsContextWidget_HandleAutoDeclineFriendRequestToggleClick final
{
public:
	bool                                          toggleValue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingSettingsContextWidget_HandleAutoDeclineFriendRequestToggleClick) == 0x000001, "Wrong alignment on UMGSettingSettingsContextWidget_HandleAutoDeclineFriendRequestToggleClick");
static_assert(sizeof(UMGSettingSettingsContextWidget_HandleAutoDeclineFriendRequestToggleClick) == 0x000001, "Wrong size on UMGSettingSettingsContextWidget_HandleAutoDeclineFriendRequestToggleClick");
static_assert(offsetof(UMGSettingSettingsContextWidget_HandleAutoDeclineFriendRequestToggleClick, toggleValue) == 0x000000, "Member 'UMGSettingSettingsContextWidget_HandleAutoDeclineFriendRequestToggleClick::toggleValue' has a wrong offset!");

// Function DeadByDaylight.UMGSettingSettingsContextWidget.HandleMainVolumeChanged
// 0x0004 (0x0004 - 0x0000)
struct UMGSettingSettingsContextWidget_HandleMainVolumeChanged final
{
public:
	float                                         sliderValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingSettingsContextWidget_HandleMainVolumeChanged) == 0x000004, "Wrong alignment on UMGSettingSettingsContextWidget_HandleMainVolumeChanged");
static_assert(sizeof(UMGSettingSettingsContextWidget_HandleMainVolumeChanged) == 0x000004, "Wrong size on UMGSettingSettingsContextWidget_HandleMainVolumeChanged");
static_assert(offsetof(UMGSettingSettingsContextWidget_HandleMainVolumeChanged, sliderValue) == 0x000000, "Member 'UMGSettingSettingsContextWidget_HandleMainVolumeChanged::sliderValue' has a wrong offset!");

// Function DeadByDaylight.UMGSettingSettingsContextWidget.HandleMainVolumeToggleClick
// 0x0001 (0x0001 - 0x0000)
struct UMGSettingSettingsContextWidget_HandleMainVolumeToggleClick final
{
public:
	bool                                          toggleValue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingSettingsContextWidget_HandleMainVolumeToggleClick) == 0x000001, "Wrong alignment on UMGSettingSettingsContextWidget_HandleMainVolumeToggleClick");
static_assert(sizeof(UMGSettingSettingsContextWidget_HandleMainVolumeToggleClick) == 0x000001, "Wrong size on UMGSettingSettingsContextWidget_HandleMainVolumeToggleClick");
static_assert(offsetof(UMGSettingSettingsContextWidget_HandleMainVolumeToggleClick, toggleValue) == 0x000000, "Member 'UMGSettingSettingsContextWidget_HandleMainVolumeToggleClick::toggleValue' has a wrong offset!");

// Function DeadByDaylight.UMGSettingSettingsContextWidget.HandleMenuVolumeChanged
// 0x0004 (0x0004 - 0x0000)
struct UMGSettingSettingsContextWidget_HandleMenuVolumeChanged final
{
public:
	float                                         sliderValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingSettingsContextWidget_HandleMenuVolumeChanged) == 0x000004, "Wrong alignment on UMGSettingSettingsContextWidget_HandleMenuVolumeChanged");
static_assert(sizeof(UMGSettingSettingsContextWidget_HandleMenuVolumeChanged) == 0x000004, "Wrong size on UMGSettingSettingsContextWidget_HandleMenuVolumeChanged");
static_assert(offsetof(UMGSettingSettingsContextWidget_HandleMenuVolumeChanged, sliderValue) == 0x000000, "Member 'UMGSettingSettingsContextWidget_HandleMenuVolumeChanged::sliderValue' has a wrong offset!");

// Function DeadByDaylight.UMGSettingSettingsContextWidget.HandleMenuVolumeToggleClick
// 0x0001 (0x0001 - 0x0000)
struct UMGSettingSettingsContextWidget_HandleMenuVolumeToggleClick final
{
public:
	bool                                          toggleValue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingSettingsContextWidget_HandleMenuVolumeToggleClick) == 0x000001, "Wrong alignment on UMGSettingSettingsContextWidget_HandleMenuVolumeToggleClick");
static_assert(sizeof(UMGSettingSettingsContextWidget_HandleMenuVolumeToggleClick) == 0x000001, "Wrong size on UMGSettingSettingsContextWidget_HandleMenuVolumeToggleClick");
static_assert(offsetof(UMGSettingSettingsContextWidget_HandleMenuVolumeToggleClick, toggleValue) == 0x000000, "Member 'UMGSettingSettingsContextWidget_HandleMenuVolumeToggleClick::toggleValue' has a wrong offset!");

// Function DeadByDaylight.UMGSettingSettingsContextWidget.ShowLinkAccountRow
// 0x0001 (0x0001 - 0x0000)
struct UMGSettingSettingsContextWidget_ShowLinkAccountRow final
{
public:
	bool                                          isShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSettingSettingsContextWidget_ShowLinkAccountRow) == 0x000001, "Wrong alignment on UMGSettingSettingsContextWidget_ShowLinkAccountRow");
static_assert(sizeof(UMGSettingSettingsContextWidget_ShowLinkAccountRow) == 0x000001, "Wrong size on UMGSettingSettingsContextWidget_ShowLinkAccountRow");
static_assert(offsetof(UMGSettingSettingsContextWidget_ShowLinkAccountRow, isShow) == 0x000000, "Member 'UMGSettingSettingsContextWidget_ShowLinkAccountRow::isShow' has a wrong offset!");

// Function DeadByDaylight.UMGStatusEffectIcon.UpdatePercentageFill
// 0x0004 (0x0004 - 0x0000)
struct UMGStatusEffectIcon_UpdatePercentageFill final
{
public:
	float                                         percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGStatusEffectIcon_UpdatePercentageFill) == 0x000004, "Wrong alignment on UMGStatusEffectIcon_UpdatePercentageFill");
static_assert(sizeof(UMGStatusEffectIcon_UpdatePercentageFill) == 0x000004, "Wrong size on UMGStatusEffectIcon_UpdatePercentageFill");
static_assert(offsetof(UMGStatusEffectIcon_UpdatePercentageFill, percentage) == 0x000000, "Member 'UMGStatusEffectIcon_UpdatePercentageFill::percentage' has a wrong offset!");

// Function DeadByDaylight.UMGSubscriptionsPageScrollWidget.HandleBuySubscriptionPackButtonClickedEvent
// 0x000C (0x000C - 0x0000)
struct UMGSubscriptionsPageScrollWidget_HandleBuySubscriptionPackButtonClickedEvent final
{
public:
	class FName                                   subscriptionPackID;                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSubscriptionsPageScrollWidget_HandleBuySubscriptionPackButtonClickedEvent) == 0x000004, "Wrong alignment on UMGSubscriptionsPageScrollWidget_HandleBuySubscriptionPackButtonClickedEvent");
static_assert(sizeof(UMGSubscriptionsPageScrollWidget_HandleBuySubscriptionPackButtonClickedEvent) == 0x00000C, "Wrong size on UMGSubscriptionsPageScrollWidget_HandleBuySubscriptionPackButtonClickedEvent");
static_assert(offsetof(UMGSubscriptionsPageScrollWidget_HandleBuySubscriptionPackButtonClickedEvent, subscriptionPackID) == 0x000000, "Member 'UMGSubscriptionsPageScrollWidget_HandleBuySubscriptionPackButtonClickedEvent::subscriptionPackID' has a wrong offset!");

// Function DeadByDaylight.UMGSubscriptionsPageScrollWidget.HandleSubscriptionInfoButtonClickedEvent
// 0x0010 (0x0010 - 0x0000)
struct UMGSubscriptionsPageScrollWidget_HandleSubscriptionInfoButtonClickedEvent final
{
public:
	class FString                                 subscriptionDetails;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGSubscriptionsPageScrollWidget_HandleSubscriptionInfoButtonClickedEvent) == 0x000008, "Wrong alignment on UMGSubscriptionsPageScrollWidget_HandleSubscriptionInfoButtonClickedEvent");
static_assert(sizeof(UMGSubscriptionsPageScrollWidget_HandleSubscriptionInfoButtonClickedEvent) == 0x000010, "Wrong size on UMGSubscriptionsPageScrollWidget_HandleSubscriptionInfoButtonClickedEvent");
static_assert(offsetof(UMGSubscriptionsPageScrollWidget_HandleSubscriptionInfoButtonClickedEvent, subscriptionDetails) == 0x000000, "Member 'UMGSubscriptionsPageScrollWidget_HandleSubscriptionInfoButtonClickedEvent::subscriptionDetails' has a wrong offset!");

// Function DeadByDaylight.UMGTallyBloodpointsWidget.ShowTallyItemWidget
// 0x0001 (0x0001 - 0x0000)
struct UMGTallyBloodpointsWidget_ShowTallyItemWidget final
{
public:
	bool                                          isShow;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyBloodpointsWidget_ShowTallyItemWidget) == 0x000001, "Wrong alignment on UMGTallyBloodpointsWidget_ShowTallyItemWidget");
static_assert(sizeof(UMGTallyBloodpointsWidget_ShowTallyItemWidget) == 0x000001, "Wrong size on UMGTallyBloodpointsWidget_ShowTallyItemWidget");
static_assert(offsetof(UMGTallyBloodpointsWidget_ShowTallyItemWidget, isShow) == 0x000000, "Member 'UMGTallyBloodpointsWidget_ShowTallyItemWidget::isShow' has a wrong offset!");

// Function DeadByDaylight.UMGTallyBloodpointsWidget.UpdateTallyItemWidget
// 0x0380 (0x0380 - 0x0000)
struct UMGTallyBloodpointsWidget_UpdateTallyItemWidget final
{
public:
	struct FTallyItemChangedData                  data;                                              // 0x0000(0x0380)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyBloodpointsWidget_UpdateTallyItemWidget) == 0x000008, "Wrong alignment on UMGTallyBloodpointsWidget_UpdateTallyItemWidget");
static_assert(sizeof(UMGTallyBloodpointsWidget_UpdateTallyItemWidget) == 0x000380, "Wrong size on UMGTallyBloodpointsWidget_UpdateTallyItemWidget");
static_assert(offsetof(UMGTallyBloodpointsWidget_UpdateTallyItemWidget, data) == 0x000000, "Member 'UMGTallyBloodpointsWidget_UpdateTallyItemWidget::data' has a wrong offset!");

// Function DeadByDaylight.UMGTallyBloodpointsWidget.UpdateTallyRewardWidget
// 0x0018 (0x0018 - 0x0000)
struct UMGTallyBloodpointsWidget_UpdateTallyRewardWidget final
{
public:
	class FString                                 rewardName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         existReward;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         addReward;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyBloodpointsWidget_UpdateTallyRewardWidget) == 0x000008, "Wrong alignment on UMGTallyBloodpointsWidget_UpdateTallyRewardWidget");
static_assert(sizeof(UMGTallyBloodpointsWidget_UpdateTallyRewardWidget) == 0x000018, "Wrong size on UMGTallyBloodpointsWidget_UpdateTallyRewardWidget");
static_assert(offsetof(UMGTallyBloodpointsWidget_UpdateTallyRewardWidget, rewardName) == 0x000000, "Member 'UMGTallyBloodpointsWidget_UpdateTallyRewardWidget::rewardName' has a wrong offset!");
static_assert(offsetof(UMGTallyBloodpointsWidget_UpdateTallyRewardWidget, existReward) == 0x000010, "Member 'UMGTallyBloodpointsWidget_UpdateTallyRewardWidget::existReward' has a wrong offset!");
static_assert(offsetof(UMGTallyBloodpointsWidget_UpdateTallyRewardWidget, addReward) == 0x000014, "Member 'UMGTallyBloodpointsWidget_UpdateTallyRewardWidget::addReward' has a wrong offset!");

// Function DeadByDaylight.UMGTallyBloodpointsWidget.UpdateTallyTotalBloodpoints
// 0x0004 (0x0004 - 0x0000)
struct UMGTallyBloodpointsWidget_UpdateTallyTotalBloodpoints final
{
public:
	int32                                         totalValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyBloodpointsWidget_UpdateTallyTotalBloodpoints) == 0x000004, "Wrong alignment on UMGTallyBloodpointsWidget_UpdateTallyTotalBloodpoints");
static_assert(sizeof(UMGTallyBloodpointsWidget_UpdateTallyTotalBloodpoints) == 0x000004, "Wrong size on UMGTallyBloodpointsWidget_UpdateTallyTotalBloodpoints");
static_assert(offsetof(UMGTallyBloodpointsWidget_UpdateTallyTotalBloodpoints, totalValue) == 0x000000, "Member 'UMGTallyBloodpointsWidget_UpdateTallyTotalBloodpoints::totalValue' has a wrong offset!");

// Function DeadByDaylight.UMGTallyEmblemsWidget.GetEmblems
// 0x0010 (0x0010 - 0x0000)
struct UMGTallyEmblemsWidget_GetEmblems final
{
public:
	TArray<class UUMGTallyEmblemWidget*>          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyEmblemsWidget_GetEmblems) == 0x000008, "Wrong alignment on UMGTallyEmblemsWidget_GetEmblems");
static_assert(sizeof(UMGTallyEmblemsWidget_GetEmblems) == 0x000010, "Wrong size on UMGTallyEmblemsWidget_GetEmblems");
static_assert(offsetof(UMGTallyEmblemsWidget_GetEmblems, ReturnValue) == 0x000000, "Member 'UMGTallyEmblemsWidget_GetEmblems::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGTallyPipsContainer.SetData
// 0x000C (0x000C - 0x0000)
struct UMGTallyPipsContainer_SetData final
{
public:
	int32                                         rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pipsRequiredForNextRank;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         filledPips;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyPipsContainer_SetData) == 0x000004, "Wrong alignment on UMGTallyPipsContainer_SetData");
static_assert(sizeof(UMGTallyPipsContainer_SetData) == 0x00000C, "Wrong size on UMGTallyPipsContainer_SetData");
static_assert(offsetof(UMGTallyPipsContainer_SetData, rank) == 0x000000, "Member 'UMGTallyPipsContainer_SetData::rank' has a wrong offset!");
static_assert(offsetof(UMGTallyPipsContainer_SetData, pipsRequiredForNextRank) == 0x000004, "Member 'UMGTallyPipsContainer_SetData::pipsRequiredForNextRank' has a wrong offset!");
static_assert(offsetof(UMGTallyPipsContainer_SetData, filledPips) == 0x000008, "Member 'UMGTallyPipsContainer_SetData::filledPips' has a wrong offset!");

// Function DeadByDaylight.UMGTallyRankFrame.SetData
// 0x0008 (0x0008 - 0x0000)
struct UMGTallyRankFrame_SetData final
{
public:
	int32                                         rank;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   playerRole;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGTallyRankFrame_SetData) == 0x000004, "Wrong alignment on UMGTallyRankFrame_SetData");
static_assert(sizeof(UMGTallyRankFrame_SetData) == 0x000008, "Wrong size on UMGTallyRankFrame_SetData");
static_assert(offsetof(UMGTallyRankFrame_SetData, rank) == 0x000000, "Member 'UMGTallyRankFrame_SetData::rank' has a wrong offset!");
static_assert(offsetof(UMGTallyRankFrame_SetData, playerRole) == 0x000004, "Member 'UMGTallyRankFrame_SetData::playerRole' has a wrong offset!");

// Function DeadByDaylight.UMGTallyRankWidget.GetEmblems
// 0x0010 (0x0010 - 0x0000)
struct UMGTallyRankWidget_GetEmblems final
{
public:
	TArray<class UUMGTallyEmblemWidget*>          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyRankWidget_GetEmblems) == 0x000008, "Wrong alignment on UMGTallyRankWidget_GetEmblems");
static_assert(sizeof(UMGTallyRankWidget_GetEmblems) == 0x000010, "Wrong size on UMGTallyRankWidget_GetEmblems");
static_assert(offsetof(UMGTallyRankWidget_GetEmblems, ReturnValue) == 0x000000, "Member 'UMGTallyRankWidget_GetEmblems::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGTallyRankWidget.GetScoreData
// 0x0030 (0x0030 - 0x0000)
struct UMGTallyRankWidget_GetScoreData final
{
public:
	struct FTallyScorePipsData                    ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyRankWidget_GetScoreData) == 0x000008, "Wrong alignment on UMGTallyRankWidget_GetScoreData");
static_assert(sizeof(UMGTallyRankWidget_GetScoreData) == 0x000030, "Wrong size on UMGTallyRankWidget_GetScoreData");
static_assert(offsetof(UMGTallyRankWidget_GetScoreData, ReturnValue) == 0x000000, "Member 'UMGTallyRankWidget_GetScoreData::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGTallyScoreboardWidget.HandleAddFriendEvent
// 0x0010 (0x0010 - 0x0000)
struct UMGTallyScoreboardWidget_HandleAddFriendEvent final
{
public:
	class FString                                 playerID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyScoreboardWidget_HandleAddFriendEvent) == 0x000008, "Wrong alignment on UMGTallyScoreboardWidget_HandleAddFriendEvent");
static_assert(sizeof(UMGTallyScoreboardWidget_HandleAddFriendEvent) == 0x000010, "Wrong size on UMGTallyScoreboardWidget_HandleAddFriendEvent");
static_assert(offsetof(UMGTallyScoreboardWidget_HandleAddFriendEvent, playerID) == 0x000000, "Member 'UMGTallyScoreboardWidget_HandleAddFriendEvent::playerID' has a wrong offset!");

// Function DeadByDaylight.UMGTallyScoreboardWidget.HandleReportEvent
// 0x0010 (0x0010 - 0x0000)
struct UMGTallyScoreboardWidget_HandleReportEvent final
{
public:
	class FString                                 playerID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTallyScoreboardWidget_HandleReportEvent) == 0x000008, "Wrong alignment on UMGTallyScoreboardWidget_HandleReportEvent");
static_assert(sizeof(UMGTallyScoreboardWidget_HandleReportEvent) == 0x000010, "Wrong size on UMGTallyScoreboardWidget_HandleReportEvent");
static_assert(offsetof(UMGTallyScoreboardWidget_HandleReportEvent, playerID) == 0x000000, "Member 'UMGTallyScoreboardWidget_HandleReportEvent::playerID' has a wrong offset!");

// Function DeadByDaylight.UMGTeachablePerkButton.HandleTooltipLongPressedEvent
// 0x0130 (0x0130 - 0x0000)
struct UMGTeachablePerkButton_HandleTooltipLongPressedEvent final
{
public:
	struct FInventorySlotData                     itemData;                                          // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              position;                                          // 0x0128(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGTeachablePerkButton_HandleTooltipLongPressedEvent) == 0x000008, "Wrong alignment on UMGTeachablePerkButton_HandleTooltipLongPressedEvent");
static_assert(sizeof(UMGTeachablePerkButton_HandleTooltipLongPressedEvent) == 0x000130, "Wrong size on UMGTeachablePerkButton_HandleTooltipLongPressedEvent");
static_assert(offsetof(UMGTeachablePerkButton_HandleTooltipLongPressedEvent, itemData) == 0x000000, "Member 'UMGTeachablePerkButton_HandleTooltipLongPressedEvent::itemData' has a wrong offset!");
static_assert(offsetof(UMGTeachablePerkButton_HandleTooltipLongPressedEvent, position) == 0x000128, "Member 'UMGTeachablePerkButton_HandleTooltipLongPressedEvent::position' has a wrong offset!");

// Function DeadByDaylight.ZoneDetectorComponent.OnOverlapEnter
// 0x00B0 (0x00B0 - 0x0000)
struct ZoneDetectorComponent_OnOverlapEnter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZoneDetectorComponent_OnOverlapEnter) == 0x000008, "Wrong alignment on ZoneDetectorComponent_OnOverlapEnter");
static_assert(sizeof(ZoneDetectorComponent_OnOverlapEnter) == 0x0000B0, "Wrong size on ZoneDetectorComponent_OnOverlapEnter");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapEnter, HitComponent) == 0x000000, "Member 'ZoneDetectorComponent_OnOverlapEnter::HitComponent' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapEnter, OtherActor) == 0x000008, "Member 'ZoneDetectorComponent_OnOverlapEnter::OtherActor' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapEnter, OtherComp) == 0x000010, "Member 'ZoneDetectorComponent_OnOverlapEnter::OtherComp' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapEnter, OtherBodyIndex) == 0x000018, "Member 'ZoneDetectorComponent_OnOverlapEnter::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapEnter, bFromSweep) == 0x00001C, "Member 'ZoneDetectorComponent_OnOverlapEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapEnter, SweepResult) == 0x000020, "Member 'ZoneDetectorComponent_OnOverlapEnter::SweepResult' has a wrong offset!");

// Function DeadByDaylight.ZoneDetectorComponent.OnOverlapExit
// 0x0020 (0x0020 - 0x0000)
struct ZoneDetectorComponent_OnOverlapExit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ZoneDetectorComponent_OnOverlapExit) == 0x000008, "Wrong alignment on ZoneDetectorComponent_OnOverlapExit");
static_assert(sizeof(ZoneDetectorComponent_OnOverlapExit) == 0x000020, "Wrong size on ZoneDetectorComponent_OnOverlapExit");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapExit, HitComponent) == 0x000000, "Member 'ZoneDetectorComponent_OnOverlapExit::HitComponent' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapExit, OtherActor) == 0x000008, "Member 'ZoneDetectorComponent_OnOverlapExit::OtherActor' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapExit, OtherComp) == 0x000010, "Member 'ZoneDetectorComponent_OnOverlapExit::OtherComp' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapExit, OtherBodyIndex) == 0x000018, "Member 'ZoneDetectorComponent_OnOverlapExit::OtherBodyIndex' has a wrong offset!");

}

