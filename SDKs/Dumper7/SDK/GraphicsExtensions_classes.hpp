#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GraphicsExtensions

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "GraphicsExtensions_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class GraphicsExtensions.GMAdaptiveShadowMapAtlas
// 0x00B8 (0x00E8 - 0x0030)
class UGMAdaptiveShadowMapAtlas final : public UObject
{
public:
	uint8                                         Pad_30[0xB8];                                      // 0x0030(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapAtlas">();
	}
	static class UGMAdaptiveShadowMapAtlas* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMAdaptiveShadowMapAtlas>();
	}
};
static_assert(alignof(UGMAdaptiveShadowMapAtlas) == 0x000008, "Wrong alignment on UGMAdaptiveShadowMapAtlas");
static_assert(sizeof(UGMAdaptiveShadowMapAtlas) == 0x0000E8, "Wrong size on UGMAdaptiveShadowMapAtlas");

// Class GraphicsExtensions.GMAdaptiveShadowMapController
// 0x0098 (0x00C8 - 0x0030)
class UGMAdaptiveShadowMapController final : public UObject
{
public:
	class UGMAdaptiveShadowMapAtlas*              _atlas;                                            // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     _lightFunctionMaterial;                            // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UGMAdaptiveShadowMapSource*>     _shadowMapSourceList;                              // 0x0040(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UGMAdaptiveShadowMapSource*>     _shadowMapSourceActivatedList;                     // 0x0050(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60[0x68];                                      // 0x0060(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapController">();
	}
	static class UGMAdaptiveShadowMapController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMAdaptiveShadowMapController>();
	}
};
static_assert(alignof(UGMAdaptiveShadowMapController) == 0x000008, "Wrong alignment on UGMAdaptiveShadowMapController");
static_assert(sizeof(UGMAdaptiveShadowMapController) == 0x0000C8, "Wrong size on UGMAdaptiveShadowMapController");
static_assert(offsetof(UGMAdaptiveShadowMapController, _atlas) == 0x000030, "Member 'UGMAdaptiveShadowMapController::_atlas' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapController, _lightFunctionMaterial) == 0x000038, "Member 'UGMAdaptiveShadowMapController::_lightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapController, _shadowMapSourceList) == 0x000040, "Member 'UGMAdaptiveShadowMapController::_shadowMapSourceList' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapController, _shadowMapSourceActivatedList) == 0x000050, "Member 'UGMAdaptiveShadowMapController::_shadowMapSourceActivatedList' has a wrong offset!");

// Class GraphicsExtensions.GMAdaptiveShadowMapControllerComponent
// 0x01E0 (0x0400 - 0x0220)
class UGMAdaptiveShadowMapControllerComponent final : public USceneComponent
{
public:
	struct FBHVRPerDetailModeInt                  TileSize;                                          // 0x0218(0x00A0)(Edit, NativeAccessSpecifierPublic)
	int32                                         TileCountX;                                        // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileCountY;                                        // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              GridSize;                                          // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneratedTilesPerFrame;                            // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBHVRPerDetailModeInt                  MaxPreallocatedTilesPerFrame;                      // 0x02D0(0x00A0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bSupportsDirectionalLights;                        // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsSpotLights;                               // 0x0371(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_372[0x6];                                      // 0x0372(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LightFunctionMaterial;                             // 0x0378(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CullShadowIfPixelSizeLessThan;                     // 0x0380(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreviewOnly;                                      // 0x0384(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_385[0x13];                                     // 0x0385(0x0013)(Fixing Size After Last Property [ Dumper-7 ])
	class UGMAdaptiveShadowMapAtlas*              _atlas;                                            // 0x0398(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGMAdaptiveShadowMapController*         _controller;                                       // 0x03A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UGMAdaptiveShadowMapSourceComponent*, class UGMAdaptiveShadowMapSource*> _shadowMapSources; // 0x03A8(0x0050)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               _lightFunctionMaterialInstance;                    // 0x03F8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void DumpDebugInfo();
	int32 GetTileCountX();
	int32 GetTileCountY();
	int32 GetTileSize();
	bool IsControllerDonePreallocatingTiles();
	void RebuildAtlas();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapControllerComponent">();
	}
	static class UGMAdaptiveShadowMapControllerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMAdaptiveShadowMapControllerComponent>();
	}
};
static_assert(alignof(UGMAdaptiveShadowMapControllerComponent) == 0x000010, "Wrong alignment on UGMAdaptiveShadowMapControllerComponent");
static_assert(sizeof(UGMAdaptiveShadowMapControllerComponent) == 0x000400, "Wrong size on UGMAdaptiveShadowMapControllerComponent");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, TileSize) == 0x000218, "Member 'UGMAdaptiveShadowMapControllerComponent::TileSize' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, TileCountX) == 0x0002B8, "Member 'UGMAdaptiveShadowMapControllerComponent::TileCountX' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, TileCountY) == 0x0002BC, "Member 'UGMAdaptiveShadowMapControllerComponent::TileCountY' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, GridSize) == 0x0002C0, "Member 'UGMAdaptiveShadowMapControllerComponent::GridSize' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, GeneratedTilesPerFrame) == 0x0002C8, "Member 'UGMAdaptiveShadowMapControllerComponent::GeneratedTilesPerFrame' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, MaxPreallocatedTilesPerFrame) == 0x0002D0, "Member 'UGMAdaptiveShadowMapControllerComponent::MaxPreallocatedTilesPerFrame' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, bSupportsDirectionalLights) == 0x000370, "Member 'UGMAdaptiveShadowMapControllerComponent::bSupportsDirectionalLights' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, bSupportsSpotLights) == 0x000371, "Member 'UGMAdaptiveShadowMapControllerComponent::bSupportsSpotLights' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, LightFunctionMaterial) == 0x000378, "Member 'UGMAdaptiveShadowMapControllerComponent::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, CullShadowIfPixelSizeLessThan) == 0x000380, "Member 'UGMAdaptiveShadowMapControllerComponent::CullShadowIfPixelSizeLessThan' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, bPreviewOnly) == 0x000384, "Member 'UGMAdaptiveShadowMapControllerComponent::bPreviewOnly' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, _atlas) == 0x000398, "Member 'UGMAdaptiveShadowMapControllerComponent::_atlas' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, _controller) == 0x0003A0, "Member 'UGMAdaptiveShadowMapControllerComponent::_controller' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, _shadowMapSources) == 0x0003A8, "Member 'UGMAdaptiveShadowMapControllerComponent::_shadowMapSources' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, _lightFunctionMaterialInstance) == 0x0003F8, "Member 'UGMAdaptiveShadowMapControllerComponent::_lightFunctionMaterialInstance' has a wrong offset!");

// Class GraphicsExtensions.GMAdaptiveShadowMapSource
// 0x02D0 (0x0300 - 0x0030)
#pragma pack(push, 0x1)
class alignas(0x10) UGMAdaptiveShadowMapSource : public UObject
{
public:
	class UGMAdaptiveShadowMapAtlas*              _atlas;                                            // 0x0030(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULightComponent*                        _lightComponent;                                   // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x2B8];                                     // 0x0040(0x02B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapSource">();
	}
	static class UGMAdaptiveShadowMapSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMAdaptiveShadowMapSource>();
	}
};
#pragma pack(pop)
static_assert(alignof(UGMAdaptiveShadowMapSource) == 0x000010, "Wrong alignment on UGMAdaptiveShadowMapSource");
static_assert(sizeof(UGMAdaptiveShadowMapSource) == 0x000300, "Wrong size on UGMAdaptiveShadowMapSource");
static_assert(offsetof(UGMAdaptiveShadowMapSource, _atlas) == 0x000030, "Member 'UGMAdaptiveShadowMapSource::_atlas' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapSource, _lightComponent) == 0x000038, "Member 'UGMAdaptiveShadowMapSource::_lightComponent' has a wrong offset!");

// Class GraphicsExtensions.GMAdaptiveShadowMapSourceComponent
// 0x0020 (0x0240 - 0x0220)
class UGMAdaptiveShadowMapSourceComponent final : public USceneComponent
{
public:
	bool                                          bUseAutoRadius;                                    // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthMin;                                          // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthMax;                                          // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Levels;                                            // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreGeneratedLevels;                                // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230[0x10];                                     // 0x0230(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLightRadiusWithBounds(const struct FVector& BoundingSphereCenter, float BoundingSphereRadius);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapSourceComponent">();
	}
	static class UGMAdaptiveShadowMapSourceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMAdaptiveShadowMapSourceComponent>();
	}
};
static_assert(alignof(UGMAdaptiveShadowMapSourceComponent) == 0x000010, "Wrong alignment on UGMAdaptiveShadowMapSourceComponent");
static_assert(sizeof(UGMAdaptiveShadowMapSourceComponent) == 0x000240, "Wrong size on UGMAdaptiveShadowMapSourceComponent");
static_assert(offsetof(UGMAdaptiveShadowMapSourceComponent, bUseAutoRadius) == 0x000218, "Member 'UGMAdaptiveShadowMapSourceComponent::bUseAutoRadius' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapSourceComponent, Radius) == 0x00021C, "Member 'UGMAdaptiveShadowMapSourceComponent::Radius' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapSourceComponent, DepthMin) == 0x000220, "Member 'UGMAdaptiveShadowMapSourceComponent::DepthMin' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapSourceComponent, DepthMax) == 0x000224, "Member 'UGMAdaptiveShadowMapSourceComponent::DepthMax' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapSourceComponent, Levels) == 0x000228, "Member 'UGMAdaptiveShadowMapSourceComponent::Levels' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapSourceComponent, PreGeneratedLevels) == 0x00022C, "Member 'UGMAdaptiveShadowMapSourceComponent::PreGeneratedLevels' has a wrong offset!");

// Class GraphicsExtensions.GMAdaptiveShadowMapSourceComponentSpawner
// 0x0010 (0x0240 - 0x0230)
class AGMAdaptiveShadowMapSourceComponentSpawner final : public AActor
{
public:
	bool                                          bCreateASMSourceComponentOnBeginPlay;              // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveCastForCinematicOnlyFlagOnLights;           // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveLightFunctionMaterialOnLights;              // 0x0232(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233[0x1];                                      // 0x0233(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLevelPerSource;                                 // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPreGeneratedLevelPerSource;                     // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreviewOnly;                                      // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapSourceComponentSpawner">();
	}
	static class AGMAdaptiveShadowMapSourceComponentSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGMAdaptiveShadowMapSourceComponentSpawner>();
	}
};
static_assert(alignof(AGMAdaptiveShadowMapSourceComponentSpawner) == 0x000008, "Wrong alignment on AGMAdaptiveShadowMapSourceComponentSpawner");
static_assert(sizeof(AGMAdaptiveShadowMapSourceComponentSpawner) == 0x000240, "Wrong size on AGMAdaptiveShadowMapSourceComponentSpawner");
static_assert(offsetof(AGMAdaptiveShadowMapSourceComponentSpawner, bCreateASMSourceComponentOnBeginPlay) == 0x000230, "Member 'AGMAdaptiveShadowMapSourceComponentSpawner::bCreateASMSourceComponentOnBeginPlay' has a wrong offset!");
static_assert(offsetof(AGMAdaptiveShadowMapSourceComponentSpawner, bRemoveCastForCinematicOnlyFlagOnLights) == 0x000231, "Member 'AGMAdaptiveShadowMapSourceComponentSpawner::bRemoveCastForCinematicOnlyFlagOnLights' has a wrong offset!");
static_assert(offsetof(AGMAdaptiveShadowMapSourceComponentSpawner, bRemoveLightFunctionMaterialOnLights) == 0x000232, "Member 'AGMAdaptiveShadowMapSourceComponentSpawner::bRemoveLightFunctionMaterialOnLights' has a wrong offset!");
static_assert(offsetof(AGMAdaptiveShadowMapSourceComponentSpawner, NumLevelPerSource) == 0x000234, "Member 'AGMAdaptiveShadowMapSourceComponentSpawner::NumLevelPerSource' has a wrong offset!");
static_assert(offsetof(AGMAdaptiveShadowMapSourceComponentSpawner, NumPreGeneratedLevelPerSource) == 0x000238, "Member 'AGMAdaptiveShadowMapSourceComponentSpawner::NumPreGeneratedLevelPerSource' has a wrong offset!");
static_assert(offsetof(AGMAdaptiveShadowMapSourceComponentSpawner, bPreviewOnly) == 0x00023C, "Member 'AGMAdaptiveShadowMapSourceComponentSpawner::bPreviewOnly' has a wrong offset!");

// Class GraphicsExtensions.GMAdaptiveShadowMapSourceDirectional
// 0x0050 (0x0350 - 0x0300)
class UGMAdaptiveShadowMapSourceDirectional final : public UGMAdaptiveShadowMapSource
{
public:
	class UDirectionalLightComponent*             _directionalLightComponent;                        // 0x02F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_300[0x50];                                     // 0x0300(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapSourceDirectional">();
	}
	static class UGMAdaptiveShadowMapSourceDirectional* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMAdaptiveShadowMapSourceDirectional>();
	}
};
static_assert(alignof(UGMAdaptiveShadowMapSourceDirectional) == 0x000010, "Wrong alignment on UGMAdaptiveShadowMapSourceDirectional");
static_assert(sizeof(UGMAdaptiveShadowMapSourceDirectional) == 0x000350, "Wrong size on UGMAdaptiveShadowMapSourceDirectional");
static_assert(offsetof(UGMAdaptiveShadowMapSourceDirectional, _directionalLightComponent) == 0x0002F8, "Member 'UGMAdaptiveShadowMapSourceDirectional::_directionalLightComponent' has a wrong offset!");

// Class GraphicsExtensions.GMAdaptiveShadowMapSourceSpot
// 0x0060 (0x0360 - 0x0300)
class UGMAdaptiveShadowMapSourceSpot final : public UGMAdaptiveShadowMapSource
{
public:
	class USpotLightComponent*                    _spotLightComponent;                               // 0x02F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_300[0x60];                                     // 0x0300(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapSourceSpot">();
	}
	static class UGMAdaptiveShadowMapSourceSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMAdaptiveShadowMapSourceSpot>();
	}
};
static_assert(alignof(UGMAdaptiveShadowMapSourceSpot) == 0x000010, "Wrong alignment on UGMAdaptiveShadowMapSourceSpot");
static_assert(sizeof(UGMAdaptiveShadowMapSourceSpot) == 0x000360, "Wrong size on UGMAdaptiveShadowMapSourceSpot");
static_assert(offsetof(UGMAdaptiveShadowMapSourceSpot, _spotLightComponent) == 0x0002F8, "Member 'UGMAdaptiveShadowMapSourceSpot::_spotLightComponent' has a wrong offset!");

// Class GraphicsExtensions.GMShadowDepthCapture
// 0x0160 (0x0190 - 0x0030)
class alignas(0x10) UGMShadowDepthCapture final : public UObject
{
public:
	class ULightComponent*                        _lightComponent;                                   // 0x0030(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextureRenderTarget2D*                 _depthTarget;                                      // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x150];                                     // 0x0040(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMShadowDepthCapture">();
	}
	static class UGMShadowDepthCapture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMShadowDepthCapture>();
	}
};
static_assert(alignof(UGMShadowDepthCapture) == 0x000010, "Wrong alignment on UGMShadowDepthCapture");
static_assert(sizeof(UGMShadowDepthCapture) == 0x000190, "Wrong size on UGMShadowDepthCapture");
static_assert(offsetof(UGMShadowDepthCapture, _lightComponent) == 0x000030, "Member 'UGMShadowDepthCapture::_lightComponent' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCapture, _depthTarget) == 0x000038, "Member 'UGMShadowDepthCapture::_depthTarget' has a wrong offset!");

// Class GraphicsExtensions.GMShadowDepthCaptureComponent
// 0x0060 (0x0280 - 0x0220)
class UGMShadowDepthCaptureComponent final : public USceneComponent
{
public:
	int32                                         DepthTargetWidth;                                  // 0x0218(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DepthTargetHeight;                                 // 0x021C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 DepthTarget;                                       // 0x0220(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureDynamicPrimitives;                         // 0x0228(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureStaticPrimitives;                          // 0x0229(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureEveryFrame;                                // 0x022A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureOnlyIfVisibleFromCamera;                   // 0x022B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureObjectsWithBlockingCollisionVisibility;    // 0x022C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShadowDepthLODSelection                      LODSelection;                                      // 0x022D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E[0x2];                                      // 0x022E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinPrimitivePixelDiameterBeforeCulling;            // 0x0230(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234[0xC];                                      // 0x0234(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ShadowClipRegion;                                  // 0x0240(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterConeAngle;                                    // 0x0250(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowNearPlaneOffset;                             // 0x0254(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationRadius;                                 // 0x0258(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastTranslucentShadowsAsOpaque;                   // 0x025C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDrawDistance;                                   // 0x0260(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGMShadowDepthCapture*                  _shadowDepthCapture;                               // 0x0268(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USpotLightComponent*                    _spotLightComponent;                               // 0x0270(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_278[0x8];                                      // 0x0278(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RequestCaptureUpdate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMShadowDepthCaptureComponent">();
	}
	static class UGMShadowDepthCaptureComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMShadowDepthCaptureComponent>();
	}
};
static_assert(alignof(UGMShadowDepthCaptureComponent) == 0x000010, "Wrong alignment on UGMShadowDepthCaptureComponent");
static_assert(sizeof(UGMShadowDepthCaptureComponent) == 0x000280, "Wrong size on UGMShadowDepthCaptureComponent");
static_assert(offsetof(UGMShadowDepthCaptureComponent, DepthTargetWidth) == 0x000218, "Member 'UGMShadowDepthCaptureComponent::DepthTargetWidth' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, DepthTargetHeight) == 0x00021C, "Member 'UGMShadowDepthCaptureComponent::DepthTargetHeight' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, DepthTarget) == 0x000220, "Member 'UGMShadowDepthCaptureComponent::DepthTarget' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, bCaptureDynamicPrimitives) == 0x000228, "Member 'UGMShadowDepthCaptureComponent::bCaptureDynamicPrimitives' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, bCaptureStaticPrimitives) == 0x000229, "Member 'UGMShadowDepthCaptureComponent::bCaptureStaticPrimitives' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, bCaptureEveryFrame) == 0x00022A, "Member 'UGMShadowDepthCaptureComponent::bCaptureEveryFrame' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, bCaptureOnlyIfVisibleFromCamera) == 0x00022B, "Member 'UGMShadowDepthCaptureComponent::bCaptureOnlyIfVisibleFromCamera' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, bCaptureObjectsWithBlockingCollisionVisibility) == 0x00022C, "Member 'UGMShadowDepthCaptureComponent::bCaptureObjectsWithBlockingCollisionVisibility' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, LODSelection) == 0x00022D, "Member 'UGMShadowDepthCaptureComponent::LODSelection' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, MinPrimitivePixelDiameterBeforeCulling) == 0x000230, "Member 'UGMShadowDepthCaptureComponent::MinPrimitivePixelDiameterBeforeCulling' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, ShadowClipRegion) == 0x000240, "Member 'UGMShadowDepthCaptureComponent::ShadowClipRegion' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, OuterConeAngle) == 0x000250, "Member 'UGMShadowDepthCaptureComponent::OuterConeAngle' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, ShadowNearPlaneOffset) == 0x000254, "Member 'UGMShadowDepthCaptureComponent::ShadowNearPlaneOffset' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, AttenuationRadius) == 0x000258, "Member 'UGMShadowDepthCaptureComponent::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, bCastTranslucentShadowsAsOpaque) == 0x00025C, "Member 'UGMShadowDepthCaptureComponent::bCastTranslucentShadowsAsOpaque' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, MaxDrawDistance) == 0x000260, "Member 'UGMShadowDepthCaptureComponent::MaxDrawDistance' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, _shadowDepthCapture) == 0x000268, "Member 'UGMShadowDepthCaptureComponent::_shadowDepthCapture' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, _spotLightComponent) == 0x000270, "Member 'UGMShadowDepthCaptureComponent::_spotLightComponent' has a wrong offset!");

}

