#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GFXUtilities

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct GFXUtilities.MaterialHelperOriginalMeshState
// 0x0048 (0x0048 - 0x0000)
struct FMaterialHelperOriginalMeshState final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             _originalMaterials;                                // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             _originalDynamicMaterials;                         // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaterialHelperOriginalMeshState) == 0x000008, "Wrong alignment on FMaterialHelperOriginalMeshState");
static_assert(sizeof(FMaterialHelperOriginalMeshState) == 0x000048, "Wrong size on FMaterialHelperOriginalMeshState");
static_assert(offsetof(FMaterialHelperOriginalMeshState, _originalMaterials) == 0x000008, "Member 'FMaterialHelperOriginalMeshState::_originalMaterials' has a wrong offset!");
static_assert(offsetof(FMaterialHelperOriginalMeshState, _originalDynamicMaterials) == 0x000018, "Member 'FMaterialHelperOriginalMeshState::_originalDynamicMaterials' has a wrong offset!");

// ScriptStruct GFXUtilities.MaterialMap
// 0x0010 (0x0010 - 0x0000)
struct FMaterialMap final
{
public:
	class UMaterialInterface*                     SrcMaterial;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DstMaterial;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialMap) == 0x000008, "Wrong alignment on FMaterialMap");
static_assert(sizeof(FMaterialMap) == 0x000010, "Wrong size on FMaterialMap");
static_assert(offsetof(FMaterialMap, SrcMaterial) == 0x000000, "Member 'FMaterialMap::SrcMaterial' has a wrong offset!");
static_assert(offsetof(FMaterialMap, DstMaterial) == 0x000008, "Member 'FMaterialMap::DstMaterial' has a wrong offset!");

// ScriptStruct GFXUtilities.MaterialNamedGroup
// 0x0020 (0x0020 - 0x0000)
struct FMaterialNamedGroup final
{
public:
	class FString                                 GroupName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMaterialMap>                   Maps;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialNamedGroup) == 0x000008, "Wrong alignment on FMaterialNamedGroup");
static_assert(sizeof(FMaterialNamedGroup) == 0x000020, "Wrong size on FMaterialNamedGroup");
static_assert(offsetof(FMaterialNamedGroup, GroupName) == 0x000000, "Member 'FMaterialNamedGroup::GroupName' has a wrong offset!");
static_assert(offsetof(FMaterialNamedGroup, Maps) == 0x000010, "Member 'FMaterialNamedGroup::Maps' has a wrong offset!");

// ScriptStruct GFXUtilities.DBDCullDistanceSizePair
// 0x0008 (0x0008 - 0x0000)
struct FDBDCullDistanceSizePair final
{
public:
	struct FPerPlatformFloat                      Size;                                              // 0x0000(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformFloat                      CullDistance;                                      // 0x0004(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDBDCullDistanceSizePair) == 0x000004, "Wrong alignment on FDBDCullDistanceSizePair");
static_assert(sizeof(FDBDCullDistanceSizePair) == 0x000008, "Wrong size on FDBDCullDistanceSizePair");
static_assert(offsetof(FDBDCullDistanceSizePair, Size) == 0x000000, "Member 'FDBDCullDistanceSizePair::Size' has a wrong offset!");
static_assert(offsetof(FDBDCullDistanceSizePair, CullDistance) == 0x000004, "Member 'FDBDCullDistanceSizePair::CullDistance' has a wrong offset!");

// ScriptStruct GFXUtilities.LightUpdate
// 0x0010 (0x0010 - 0x0000)
struct FLightUpdate final
{
public:
	class ULightComponent*                        light;                                             // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         multiplier;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLightUpdate) == 0x000008, "Wrong alignment on FLightUpdate");
static_assert(sizeof(FLightUpdate) == 0x000010, "Wrong size on FLightUpdate");
static_assert(offsetof(FLightUpdate, light) == 0x000000, "Member 'FLightUpdate::light' has a wrong offset!");
static_assert(offsetof(FLightUpdate, multiplier) == 0x000008, "Member 'FLightUpdate::multiplier' has a wrong offset!");

// ScriptStruct GFXUtilities.LightMaterialUpdate
// 0x0018 (0x0018 - 0x0000)
struct FLightMaterialUpdate final
{
public:
	class UMaterialHelper*                        material;                                          // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   propertyName;                                      // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         multiplier;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLightMaterialUpdate) == 0x000008, "Wrong alignment on FLightMaterialUpdate");
static_assert(sizeof(FLightMaterialUpdate) == 0x000018, "Wrong size on FLightMaterialUpdate");
static_assert(offsetof(FLightMaterialUpdate, material) == 0x000000, "Member 'FLightMaterialUpdate::material' has a wrong offset!");
static_assert(offsetof(FLightMaterialUpdate, propertyName) == 0x000008, "Member 'FLightMaterialUpdate::propertyName' has a wrong offset!");
static_assert(offsetof(FLightMaterialUpdate, multiplier) == 0x000014, "Member 'FLightMaterialUpdate::multiplier' has a wrong offset!");

}

