#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProjectPContentInfo

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "ProjectPContentInfo_structs.hpp"


namespace SDK
{

// Class ProjectPContentInfo.AbnormalStateCommonInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAbnormalStateCommonInfoFuncLibrary final : public UObject
{
public:
	static ELAbnormalBuffDebuffType GetAbstateBuffdebuffType(const struct FAbnormalStateCommonInfo& Info);
	static ELAbnormalAbstateClass GetAbstateClass(const struct FAbnormalStateCommonInfo& Info);
	static const TArray<struct FActionStateType> GetActionStateArray(const struct FAbnormalStateCommonInfo& Info);
	static ELAbnormalActivation GetActivationType(const struct FAbnormalStateCommonInfo& Info);
	static bool GetApplyBuildUpRecoverIncrease(const struct FAbnormalStateCommonInfo& Info);
	static bool GetApplyDurationPenalty(const struct FAbnormalStateCommonInfo& Info);
	static bool GetApplyTickPenalty(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetAttachActionCommand(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetAttachFxCodeName(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetAttachFxSocket(const struct FAbnormalStateCommonInfo& Info);
	static const TSoftObjectPtr<class UObject> GetAttachMotion(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetAuraAbnormalCodeName(const struct FAbnormalStateCommonInfo& Info);
	static ELNPCType GetAuraNpcKind(const struct FAbnormalStateCommonInfo& Info);
	static int32 GetAuraRadius(const struct FAbnormalStateCommonInfo& Info);
	static int32 GetBuildUpAttack(const struct FAbnormalStateCommonInfo& Info);
	static ELBuildupGuardType GetBuildUpAttackGuardType(const struct FAbnormalStateCommonInfo& Info);
	static float GetBuildUpRecoverDelayOverride(const struct FAbnormalStateCommonInfo& Info);
	static float GetBuildUpRecoverOverride(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetCodeName(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetContentconditionCodeName(const struct FAbnormalStateCommonInfo& Info);
	static int32 GetDecreaseFrenzyPointPerSecond(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetDetachFxCodeName(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetDetachFxSocket(const struct FAbnormalStateCommonInfo& Info);
	static const TSoftObjectPtr<class UObject> GetDetachMotion(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetDisableContentconditionCodeName(const struct FAbnormalStateCommonInfo& Info);
	static int32 GetDuration(const struct FAbnormalStateCommonInfo& Info);
	static ELAbnormalCSCalcType GetDurationModifyCalType(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetDurationModifyMoment(const struct FAbnormalStateCommonInfo& Info);
	static ELStateEffectTargetType GetDurationModifyMomentTarget(const struct FAbnormalStateCommonInfo& Info);
	static int32 GetDurationModifyValue(const struct FAbnormalStateCommonInfo& Info);
	static ELAbnormalEnchantType GetEnchantSdType(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetGroupCodeName(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetHumanizationBuffAlterCodeName(const struct FAbnormalStateCommonInfo& Info);
	static const TSoftObjectPtr<class UObject> GetIconResource(const struct FAbnormalStateCommonInfo& Info);
	static bool GetIgnoreSensitiveRange(const struct FAbnormalStateCommonInfo& Info);
	static bool GetIsFableBuff(const struct FAbnormalStateCommonInfo& Info);
	static bool GetIsWeaponEnchant(const struct FAbnormalStateCommonInfo& Info);
	static bool GetKeepDead(const struct FAbnormalStateCommonInfo& Info);
	static bool GetKeepLogout(const struct FAbnormalStateCommonInfo& Info);
	static bool GetKeepRespawn(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetLoopFxCodeName(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetLoopFxSocket(const struct FAbnormalStateCommonInfo& Info);
	static const TSoftObjectPtr<class UObject> GetLoopMotion(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetMaterialFxCodeName(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetMomentconditionCodeName(const struct FAbnormalStateCommonInfo& Info);
	static int32 GetMomentconditionCount(const struct FAbnormalStateCommonInfo& Info);
	static int32 GetMomentconditionProbability(const struct FAbnormalStateCommonInfo& Info);
	static ELStateEffectTargetType GetMomentconditionTarget(const struct FAbnormalStateCommonInfo& Info);
	static class FString GetName(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetNameCn(const struct FAbnormalStateCommonInfo& Info);
	static class FText GetNameLocalize(const struct FAbnormalStateCommonInfo& Info);
	static int32 GetPriority(const struct FAbnormalStateCommonInfo& Info);
	static int32 GetPriorityGroupId(const struct FAbnormalStateCommonInfo& Info);
	static bool GetShowUi(const struct FAbnormalStateCommonInfo& Info);
	static ELAbnormalStackType GetStackType(const struct FAbnormalStateCommonInfo& Info);
	static int32 GetTick(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetTimeoutBuffCodeName(const struct FAbnormalStateCommonInfo& Info);
	static class FString GetTooltip(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetTooltipCn(const struct FAbnormalStateCommonInfo& Info);
	static class FText GetTooltipLocalize(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetVaryingFxCodeName(const struct FAbnormalStateCommonInfo& Info);
	static ELWeaponPartType GetWeaponAnimPartsType(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetWeaponAnimState(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetWeaponAnimStateExit(const struct FAbnormalStateCommonInfo& Info);
	static ELWeaponAttachPointType GetWeaponAttachPointType(const struct FAbnormalStateCommonInfo& Info);
	static ELElementDamageType GetWeaponElementOverride(const struct FAbnormalStateCommonInfo& Info);
	static const class FName GetWeaponMaterialFxCodeName(const struct FAbnormalStateCommonInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AbnormalStateCommonInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AbnormalStateCommonInfoFuncLibrary")
	}
	static class UAbnormalStateCommonInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbnormalStateCommonInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAbnormalStateCommonInfoFuncLibrary;

// Class ProjectPContentInfo.AbnormalStateCommonInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAbnormalStateCommonInfoPtrFuncLibrary final : public UObject
{
public:
	static ELAbnormalBuffDebuffType GetAbstateBuffdebuffType(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static ELAbnormalAbstateClass GetAbstateClass(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const TArray<struct FActionStateType> GetActionStateArray(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static ELAbnormalActivation GetActivationType(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static bool GetApplyBuildUpRecoverIncrease(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static bool GetApplyDurationPenalty(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static bool GetApplyTickPenalty(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetAttachActionCommand(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetAttachFxCodeName(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetAttachFxSocket(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetAttachMotion(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetAuraAbnormalCodeName(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static ELNPCType GetAuraNpcKind(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static int32 GetAuraRadius(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static int32 GetBuildUpAttack(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static ELBuildupGuardType GetBuildUpAttackGuardType(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static float GetBuildUpRecoverDelayOverride(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static float GetBuildUpRecoverOverride(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetContentconditionCodeName(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static int32 GetDecreaseFrenzyPointPerSecond(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetDetachFxCodeName(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetDetachFxSocket(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetDetachMotion(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetDisableContentconditionCodeName(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static int32 GetDuration(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static ELAbnormalCSCalcType GetDurationModifyCalType(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetDurationModifyMoment(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static ELStateEffectTargetType GetDurationModifyMomentTarget(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static int32 GetDurationModifyValue(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static ELAbnormalEnchantType GetEnchantSdType(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetGroupCodeName(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetHumanizationBuffAlterCodeName(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetIconResource(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static bool GetIgnoreSensitiveRange(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static bool GetIsFableBuff(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static bool GetIsWeaponEnchant(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static bool GetKeepDead(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static bool GetKeepLogout(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static bool GetKeepRespawn(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetLoopFxCodeName(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetLoopFxSocket(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetLoopMotion(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetMaterialFxCodeName(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetMomentconditionCodeName(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static int32 GetMomentconditionCount(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static int32 GetMomentconditionProbability(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static ELStateEffectTargetType GetMomentconditionTarget(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static class FString GetName(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetNameCn(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static class FText GetNameLocalize(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static int32 GetPriority(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static int32 GetPriorityGroupId(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static bool GetShowUi(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static ELAbnormalStackType GetStackType(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static int32 GetTick(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetTimeoutBuffCodeName(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static class FString GetTooltip(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetTooltipCn(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static class FText GetTooltipLocalize(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetVaryingFxCodeName(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static ELWeaponPartType GetWeaponAnimPartsType(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetWeaponAnimState(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetWeaponAnimStateExit(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static ELWeaponAttachPointType GetWeaponAttachPointType(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static ELElementDamageType GetWeaponElementOverride(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static const class FName GetWeaponMaterialFxCodeName(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static bool IsValid(const struct FAbnormalStateCommonInfoPtr& Ptr);
	static void IsValidBranch(const struct FAbnormalStateCommonInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AbnormalStateCommonInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AbnormalStateCommonInfoPtrFuncLibrary")
	}
	static class UAbnormalStateCommonInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbnormalStateCommonInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAbnormalStateCommonInfoPtrFuncLibrary;

// Class ProjectPContentInfo.AbnormalStateChangeStatusInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAbnormalStateChangeStatusInfoFuncLibrary final : public UObject
{
public:
	static ELAbnormalCSCalcType GetCalculateType(const struct FAbnormalStateChangeStatusInfo& Info);
	static const class FName GetCodeName(const struct FAbnormalStateChangeStatusInfo& Info);
	static ELSecondStat GetMulAddBaseStatCodeName(const struct FAbnormalStateChangeStatusInfo& Info);
	static ELFirstStat GetTargetFirstStatCodeName(const struct FAbnormalStateChangeStatusInfo& Info);
	static ELSecondStat GetTargetStatCodeName(const struct FAbnormalStateChangeStatusInfo& Info);
	static int32 GetValue(const struct FAbnormalStateChangeStatusInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AbnormalStateChangeStatusInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AbnormalStateChangeStatusInfoFuncLibrary")
	}
	static class UAbnormalStateChangeStatusInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbnormalStateChangeStatusInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAbnormalStateChangeStatusInfoFuncLibrary;

// Class ProjectPContentInfo.AbnormalStateChangeStatusInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAbnormalStateChangeStatusInfoPtrFuncLibrary final : public UObject
{
public:
	static ELAbnormalCSCalcType GetCalculateType(const struct FAbnormalStateChangeStatusInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FAbnormalStateChangeStatusInfoPtr& Ptr);
	static ELSecondStat GetMulAddBaseStatCodeName(const struct FAbnormalStateChangeStatusInfoPtr& Ptr);
	static ELFirstStat GetTargetFirstStatCodeName(const struct FAbnormalStateChangeStatusInfoPtr& Ptr);
	static ELSecondStat GetTargetStatCodeName(const struct FAbnormalStateChangeStatusInfoPtr& Ptr);
	static int32 GetValue(const struct FAbnormalStateChangeStatusInfoPtr& Ptr);
	static bool IsValid(const struct FAbnormalStateChangeStatusInfoPtr& Ptr);
	static void IsValidBranch(const struct FAbnormalStateChangeStatusInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AbnormalStateChangeStatusInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AbnormalStateChangeStatusInfoPtrFuncLibrary")
	}
	static class UAbnormalStateChangeStatusInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbnormalStateChangeStatusInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAbnormalStateChangeStatusInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SubtitleInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USubtitleInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FSubtitleInfo& Info);
	static int32 GetDuration(const struct FSubtitleInfo& Info);
	static int32 GetStartTime(const struct FSubtitleInfo& Info);
	static const class FName GetTextCodeName(const struct FSubtitleInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SubtitleInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SubtitleInfoFuncLibrary")
	}
	static class USubtitleInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubtitleInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USubtitleInfoFuncLibrary;

// Class ProjectPContentInfo.AbnormalStateDamageHealInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAbnormalStateDamageHealInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetAbnormalStateCodeName(const struct FAbnormalStateDamageHealInfo& Info);
	static ELAbnormalDHCalcType GetCalculateType(const struct FAbnormalStateDamageHealInfo& Info);
	static const class FName GetCodeName(const struct FAbnormalStateDamageHealInfo& Info);
	static ELSecondStat GetRateBaseStatCodeName(const struct FAbnormalStateDamageHealInfo& Info);
	static ELAbnormalDamageHealTargetType GetTargetType(const struct FAbnormalStateDamageHealInfo& Info);
	static int32 GetValue(const struct FAbnormalStateDamageHealInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AbnormalStateDamageHealInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AbnormalStateDamageHealInfoFuncLibrary")
	}
	static class UAbnormalStateDamageHealInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbnormalStateDamageHealInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAbnormalStateDamageHealInfoFuncLibrary;

// Class ProjectPContentInfo.AbnormalStateDamageHealInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAbnormalStateDamageHealInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetAbnormalStateCodeName(const struct FAbnormalStateDamageHealInfoPtr& Ptr);
	static ELAbnormalDHCalcType GetCalculateType(const struct FAbnormalStateDamageHealInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FAbnormalStateDamageHealInfoPtr& Ptr);
	static ELSecondStat GetRateBaseStatCodeName(const struct FAbnormalStateDamageHealInfoPtr& Ptr);
	static ELAbnormalDamageHealTargetType GetTargetType(const struct FAbnormalStateDamageHealInfoPtr& Ptr);
	static int32 GetValue(const struct FAbnormalStateDamageHealInfoPtr& Ptr);
	static bool IsValid(const struct FAbnormalStateDamageHealInfoPtr& Ptr);
	static void IsValidBranch(const struct FAbnormalStateDamageHealInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AbnormalStateDamageHealInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AbnormalStateDamageHealInfoPtrFuncLibrary")
	}
	static class UAbnormalStateDamageHealInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbnormalStateDamageHealInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAbnormalStateDamageHealInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SpecialBuffInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USpecialBuffInfoFuncLibrary final : public UObject
{
public:
	static int32 GetBase(const struct FSpecialBuffInfo& Info);
	static float GetBottom(const struct FSpecialBuffInfo& Info);
	static const class FName GetCodeName(const struct FSpecialBuffInfo& Info);
	static float GetExponent(const struct FSpecialBuffInfo& Info);
	static int32 GetFactor(const struct FSpecialBuffInfo& Info);
	static const class FName GetHumanizationBuffAlterCodeName(const struct FSpecialBuffInfo& Info);
	static const TSoftObjectPtr<class UObject> GetIconResource(const struct FSpecialBuffInfo& Info);
	static class FString GetLocalTextName(const struct FSpecialBuffInfo& Info);
	static const class FName GetLocalTextNameCn(const struct FSpecialBuffInfo& Info);
	static class FText GetLocalTextNameLocalize(const struct FSpecialBuffInfo& Info);
	static class FString GetLocalTextTooltip(const struct FSpecialBuffInfo& Info);
	static const class FName GetLocalTextTooltipCn(const struct FSpecialBuffInfo& Info);
	static class FText GetLocalTextTooltipLocalize(const struct FSpecialBuffInfo& Info);
	static int32 GetParamInt1(const struct FSpecialBuffInfo& Info);
	static int32 GetParamInt2(const struct FSpecialBuffInfo& Info);
	static int32 GetParamNum(const struct FSpecialBuffInfo& Info);
	static const class FName GetParamString1(const struct FSpecialBuffInfo& Info);
	static const class FName GetParamString2(const struct FSpecialBuffInfo& Info);
	static bool GetShowUi(const struct FSpecialBuffInfo& Info);
	static ELSpecialBuffType GetType(const struct FSpecialBuffInfo& Info);
	static bool GetUseHumanityAsMultiplier(const struct FSpecialBuffInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpecialBuffInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpecialBuffInfoFuncLibrary")
	}
	static class USpecialBuffInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialBuffInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USpecialBuffInfoFuncLibrary;

// Class ProjectPContentInfo.AbnormalStateAttackInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAbnormalStateAttackInfoFuncLibrary final : public UObject
{
public:
	static ELAbnormalAttackType GetAttackType(const struct FAbnormalStateAttackInfo& Info);
	static ELAbnormalACalcType GetCalculateType(const struct FAbnormalStateAttackInfo& Info);
	static const class FName GetCodeName(const struct FAbnormalStateAttackInfo& Info);
	static ELSecondStat GetMulBaseStatCodeName(const struct FAbnormalStateAttackInfo& Info);
	static int32 GetValue(const struct FAbnormalStateAttackInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AbnormalStateAttackInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AbnormalStateAttackInfoFuncLibrary")
	}
	static class UAbnormalStateAttackInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbnormalStateAttackInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAbnormalStateAttackInfoFuncLibrary;

// Class ProjectPContentInfo.AbnormalStateAttackInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAbnormalStateAttackInfoPtrFuncLibrary final : public UObject
{
public:
	static ELAbnormalAttackType GetAttackType(const struct FAbnormalStateAttackInfoPtr& Ptr);
	static ELAbnormalACalcType GetCalculateType(const struct FAbnormalStateAttackInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FAbnormalStateAttackInfoPtr& Ptr);
	static ELSecondStat GetMulBaseStatCodeName(const struct FAbnormalStateAttackInfoPtr& Ptr);
	static int32 GetValue(const struct FAbnormalStateAttackInfoPtr& Ptr);
	static bool IsValid(const struct FAbnormalStateAttackInfoPtr& Ptr);
	static void IsValidBranch(const struct FAbnormalStateAttackInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AbnormalStateAttackInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AbnormalStateAttackInfoPtrFuncLibrary")
	}
	static class UAbnormalStateAttackInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbnormalStateAttackInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAbnormalStateAttackInfoPtrFuncLibrary;

// Class ProjectPContentInfo.AbnormalStateChainInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAbnormalStateChainInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetAbnormalStateCodeName1(const struct FAbnormalStateChainInfo& Info);
	static const class FName GetAbnormalStateCodeName2(const struct FAbnormalStateChainInfo& Info);
	static const class FName GetAbnormalStateCodeNameResult(const struct FAbnormalStateChainInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AbnormalStateChainInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AbnormalStateChainInfoFuncLibrary")
	}
	static class UAbnormalStateChainInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbnormalStateChainInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAbnormalStateChainInfoFuncLibrary;

// Class ProjectPContentInfo.AbnormalStateChainInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAbnormalStateChainInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetAbnormalStateCodeName1(const struct FAbnormalStateChainInfoPtr& Ptr);
	static const class FName GetAbnormalStateCodeName2(const struct FAbnormalStateChainInfoPtr& Ptr);
	static const class FName GetAbnormalStateCodeNameResult(const struct FAbnormalStateChainInfoPtr& Ptr);
	static bool IsValid(const struct FAbnormalStateChainInfoPtr& Ptr);
	static void IsValidBranch(const struct FAbnormalStateChainInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AbnormalStateChainInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AbnormalStateChainInfoPtrFuncLibrary")
	}
	static class UAbnormalStateChainInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbnormalStateChainInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAbnormalStateChainInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SubLevelOnOffInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USubLevelOnOffInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FSubLevelOnOffInfoPtr& Ptr);
	static const class FName GetCondition(const struct FSubLevelOnOffInfoPtr& Ptr);
	static class FString GetMapResource(const struct FSubLevelOnOffInfoPtr& Ptr);
	static bool IsValid(const struct FSubLevelOnOffInfoPtr& Ptr);
	static void IsValidBranch(const struct FSubLevelOnOffInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SubLevelOnOffInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SubLevelOnOffInfoPtrFuncLibrary")
	}
	static class USubLevelOnOffInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubLevelOnOffInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USubLevelOnOffInfoPtrFuncLibrary;

// Class ProjectPContentInfo.AbnormalStateExecInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAbnormalStateExecInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FAbnormalStateExecInfo& Info);
	static ELAbnormalExecType GetExecType(const struct FAbnormalStateExecInfo& Info);
	static class FString GetParam1(const struct FAbnormalStateExecInfo& Info);
	static class FString GetParam2(const struct FAbnormalStateExecInfo& Info);
	static class FString GetParam3(const struct FAbnormalStateExecInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AbnormalStateExecInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AbnormalStateExecInfoFuncLibrary")
	}
	static class UAbnormalStateExecInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbnormalStateExecInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAbnormalStateExecInfoFuncLibrary;

// Class ProjectPContentInfo.AbnormalStateExecInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAbnormalStateExecInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FAbnormalStateExecInfoPtr& Ptr);
	static ELAbnormalExecType GetExecType(const struct FAbnormalStateExecInfoPtr& Ptr);
	static class FString GetParam1(const struct FAbnormalStateExecInfoPtr& Ptr);
	static class FString GetParam2(const struct FAbnormalStateExecInfoPtr& Ptr);
	static class FString GetParam3(const struct FAbnormalStateExecInfoPtr& Ptr);
	static bool IsValid(const struct FAbnormalStateExecInfoPtr& Ptr);
	static void IsValidBranch(const struct FAbnormalStateExecInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AbnormalStateExecInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AbnormalStateExecInfoPtrFuncLibrary")
	}
	static class UAbnormalStateExecInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbnormalStateExecInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAbnormalStateExecInfoPtrFuncLibrary;

// Class ProjectPContentInfo.AbnormalStateReplaceEffectInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAbnormalStateReplaceEffectInfoFuncLibrary final : public UObject
{
public:
	static int32 GetChkStackNum(const struct FAbnormalStateReplaceEffectInfo& Info);
	static const class FName GetCodeName(const struct FAbnormalStateReplaceEffectInfo& Info);
	static const class FName GetLoopFxCodeName(const struct FAbnormalStateReplaceEffectInfo& Info);
	static const TSoftObjectPtr<class UObject> GetLoopMotion(const struct FAbnormalStateReplaceEffectInfo& Info);
	static class FString GetMaterialFxCodeName(const struct FAbnormalStateReplaceEffectInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AbnormalStateReplaceEffectInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AbnormalStateReplaceEffectInfoFuncLibrary")
	}
	static class UAbnormalStateReplaceEffectInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbnormalStateReplaceEffectInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAbnormalStateReplaceEffectInfoFuncLibrary;

// Class ProjectPContentInfo.AbnormalStateReplaceEffectInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAbnormalStateReplaceEffectInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetChkStackNum(const struct FAbnormalStateReplaceEffectInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FAbnormalStateReplaceEffectInfoPtr& Ptr);
	static const class FName GetLoopFxCodeName(const struct FAbnormalStateReplaceEffectInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetLoopMotion(const struct FAbnormalStateReplaceEffectInfoPtr& Ptr);
	static class FString GetMaterialFxCodeName(const struct FAbnormalStateReplaceEffectInfoPtr& Ptr);
	static bool IsValid(const struct FAbnormalStateReplaceEffectInfoPtr& Ptr);
	static void IsValidBranch(const struct FAbnormalStateReplaceEffectInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AbnormalStateReplaceEffectInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AbnormalStateReplaceEffectInfoPtrFuncLibrary")
	}
	static class UAbnormalStateReplaceEffectInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbnormalStateReplaceEffectInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAbnormalStateReplaceEffectInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ContentInfoAsset
// 0x0050 (0x0078 - 0x0028)
#pragma pack(push, 0x1)
class alignas(0x08) UContentInfoAsset : public UObject
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentInfoAsset")
	}
	static class UContentInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentInfoAsset>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UContentInfoAsset;

// Class ProjectPContentInfo.AbnormalStateInfoAsset
// 0x0108 (0x0180 - 0x0078)
class alignas(0x10) UAbnormalStateInfoAsset final : public UContentInfoAsset
{
public:
	struct FAbnormalStateInfoDB                   ContentInfoDB;                                     // 0x0078(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FAbnormalStateCommonInfoPtr FindAbnormalStateCommonInfoByNameBP(class FName CodeName);
	static const TArray<struct FAbnormalStateAttackInfo> GetAbnormalStateAttackInfoArrayBP();
	static const TArray<struct FAbnormalStateChainInfo> GetAbnormalStateChainInfoArrayBP();
	static const TArray<struct FAbnormalStateChangeStatusInfo> GetAbnormalStateChangeStatusInfoArrayBP();
	static const TArray<struct FAbnormalStateCommonInfo> GetAbnormalStateCommonInfoArrayBP();
	static const TArray<struct FAbnormalStateDamageHealInfo> GetAbnormalStateDamageHealInfoArrayBP();
	static const TArray<struct FAbnormalStateExecInfo> GetAbnormalStateExecInfoArrayBP();
	static const TArray<struct FAbnormalStateReplaceEffectInfo> GetAbnormalStateReplaceEffectInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AbnormalStateInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AbnormalStateInfoAsset")
	}
	static class UAbnormalStateInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbnormalStateInfoAsset>();
	}
};
DUMPER7_ASSERTS_UAbnormalStateInfoAsset;

// Class ProjectPContentInfo.AchievementListInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAchievementListInfoFuncLibrary final : public UObject
{
public:
	static ELAchieveGradeType GetAchieveGrade(const struct FAchievementListInfo& Info);
	static const class FName GetCodeName(const struct FAchievementListInfo& Info);
	static int32 GetDelayTime(const struct FAchievementListInfo& Info);
	static int32 GetGamerScore(const struct FAchievementListInfo& Info);
	static const TSoftObjectPtr<class UObject> GetImageResource(const struct FAchievementListInfo& Info);
	static class FString GetLocalTextAchieveDetails(const struct FAchievementListInfo& Info);
	static const class FName GetLocalTextAchieveDetailsCn(const struct FAchievementListInfo& Info);
	static class FText GetLocalTextAchieveDetailsLocalize(const struct FAchievementListInfo& Info);
	static class FString GetLocalTextAchieveName(const struct FAchievementListInfo& Info);
	static const class FName GetLocalTextAchieveNameCn(const struct FAchievementListInfo& Info);
	static class FText GetLocalTextAchieveNameLocalize(const struct FAchievementListInfo& Info);
	static class FString GetPlatformKey(const struct FAchievementListInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AchievementListInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AchievementListInfoFuncLibrary")
	}
	static class UAchievementListInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementListInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAchievementListInfoFuncLibrary;

// Class ProjectPContentInfo.AchievementListInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAchievementListInfoPtrFuncLibrary final : public UObject
{
public:
	static ELAchieveGradeType GetAchieveGrade(const struct FAchievementListInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FAchievementListInfoPtr& Ptr);
	static int32 GetDelayTime(const struct FAchievementListInfoPtr& Ptr);
	static int32 GetGamerScore(const struct FAchievementListInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetImageResource(const struct FAchievementListInfoPtr& Ptr);
	static class FString GetLocalTextAchieveDetails(const struct FAchievementListInfoPtr& Ptr);
	static const class FName GetLocalTextAchieveDetailsCn(const struct FAchievementListInfoPtr& Ptr);
	static class FText GetLocalTextAchieveDetailsLocalize(const struct FAchievementListInfoPtr& Ptr);
	static class FString GetLocalTextAchieveName(const struct FAchievementListInfoPtr& Ptr);
	static const class FName GetLocalTextAchieveNameCn(const struct FAchievementListInfoPtr& Ptr);
	static class FText GetLocalTextAchieveNameLocalize(const struct FAchievementListInfoPtr& Ptr);
	static class FString GetPlatformKey(const struct FAchievementListInfoPtr& Ptr);
	static bool IsValid(const struct FAchievementListInfoPtr& Ptr);
	static void IsValidBranch(const struct FAchievementListInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AchievementListInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AchievementListInfoPtrFuncLibrary")
	}
	static class UAchievementListInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementListInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAchievementListInfoPtrFuncLibrary;

// Class ProjectPContentInfo.AchievementDetailInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAchievementDetailInfoFuncLibrary final : public UObject
{
public:
	static class FString GetCallbackEventParam(const struct FAchievementDetailInfo& Info);
	static class FString GetCallbackEventParam2(const struct FAchievementDetailInfo& Info);
	static ELCallBackEventType GetCallbackEventType(const struct FAchievementDetailInfo& Info);
	static const class FName GetCodeName(const struct FAchievementDetailInfo& Info);
	static int32 GetDetailIndex(const struct FAchievementDetailInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AchievementDetailInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AchievementDetailInfoFuncLibrary")
	}
	static class UAchievementDetailInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementDetailInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAchievementDetailInfoFuncLibrary;

// Class ProjectPContentInfo.AchievementDetailInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAchievementDetailInfoPtrFuncLibrary final : public UObject
{
public:
	static class FString GetCallbackEventParam(const struct FAchievementDetailInfoPtr& Ptr);
	static class FString GetCallbackEventParam2(const struct FAchievementDetailInfoPtr& Ptr);
	static ELCallBackEventType GetCallbackEventType(const struct FAchievementDetailInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FAchievementDetailInfoPtr& Ptr);
	static int32 GetDetailIndex(const struct FAchievementDetailInfoPtr& Ptr);
	static bool IsValid(const struct FAchievementDetailInfoPtr& Ptr);
	static void IsValidBranch(const struct FAchievementDetailInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AchievementDetailInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AchievementDetailInfoPtrFuncLibrary")
	}
	static class UAchievementDetailInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementDetailInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAchievementDetailInfoPtrFuncLibrary;

// Class ProjectPContentInfo.AchievementInfoAsset
// 0x00B8 (0x0130 - 0x0078)
class alignas(0x10) UAchievementInfoAsset final : public UContentInfoAsset
{
public:
	struct FAchievementInfoDB                     ContentInfoDB;                                     // 0x0078(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FAchievementListInfoPtr FindAchievementListInfoByNameBP(class FName CodeName);
	static const TArray<struct FAchievementDetailInfo> GetAchievementDetailInfoArrayBP();
	static const TArray<struct FAchievementListInfo> GetAchievementListInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AchievementInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AchievementInfoAsset")
	}
	static class UAchievementInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementInfoAsset>();
	}
};
DUMPER7_ASSERTS_UAchievementInfoAsset;

// Class ProjectPContentInfo.ActionClassInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UActionClassInfoFuncLibrary final : public UObject
{
public:
	static const TSoftClassPtr<class UClass> GetActionClass(const struct FActionClassInfo& Info);
	static const class FName GetCodeName(const struct FActionClassInfo& Info);
	static bool GetDisableFatalAttack(const struct FActionClassInfo& Info);
	static bool GetImmediatelyCancelByDie(const struct FActionClassInfo& Info);
	static const class FName GetImmuneCodeName(const struct FActionClassInfo& Info);
	static bool GetPreload(const struct FActionClassInfo& Info);
	static ELActionCategory GetSystemCategory(const struct FActionClassInfo& Info);
	static bool GetUseHeadLookAt(const struct FActionClassInfo& Info);
	static bool GetUseUpperbodyLookAt(const struct FActionClassInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActionClassInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActionClassInfoFuncLibrary")
	}
	static class UActionClassInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionClassInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UActionClassInfoFuncLibrary;

// Class ProjectPContentInfo.ActionClassInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UActionClassInfoPtrFuncLibrary final : public UObject
{
public:
	static const TSoftClassPtr<class UClass> GetActionClass(const struct FActionClassInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FActionClassInfoPtr& Ptr);
	static bool GetDisableFatalAttack(const struct FActionClassInfoPtr& Ptr);
	static bool GetImmediatelyCancelByDie(const struct FActionClassInfoPtr& Ptr);
	static const class FName GetImmuneCodeName(const struct FActionClassInfoPtr& Ptr);
	static bool GetPreload(const struct FActionClassInfoPtr& Ptr);
	static ELActionCategory GetSystemCategory(const struct FActionClassInfoPtr& Ptr);
	static bool GetUseHeadLookAt(const struct FActionClassInfoPtr& Ptr);
	static bool GetUseUpperbodyLookAt(const struct FActionClassInfoPtr& Ptr);
	static bool IsValid(const struct FActionClassInfoPtr& Ptr);
	static void IsValidBranch(const struct FActionClassInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActionClassInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActionClassInfoPtrFuncLibrary")
	}
	static class UActionClassInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionClassInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UActionClassInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ActionClassInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UActionClassInfoAsset final : public UContentInfoAsset
{
public:
	struct FActionClassInfoDB                     ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FActionClassInfoPtr FindActionClassInfoByNameBP(class FName CodeName);
	static const TArray<struct FActionClassInfo> GetActionClassInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActionClassInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActionClassInfoAsset")
	}
	static class UActionClassInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionClassInfoAsset>();
	}
};
DUMPER7_ASSERTS_UActionClassInfoAsset;

// Class ProjectPContentInfo.ActionPathInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UActionPathInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FActionPathInfo& Info);
	static class FString GetPath(const struct FActionPathInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActionPathInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActionPathInfoFuncLibrary")
	}
	static class UActionPathInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionPathInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UActionPathInfoFuncLibrary;

// Class ProjectPContentInfo.ActionPathInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UActionPathInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FActionPathInfoPtr& Ptr);
	static class FString GetPath(const struct FActionPathInfoPtr& Ptr);
	static bool IsValid(const struct FActionPathInfoPtr& Ptr);
	static void IsValidBranch(const struct FActionPathInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActionPathInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActionPathInfoPtrFuncLibrary")
	}
	static class UActionPathInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionPathInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UActionPathInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ActionPathInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UActionPathInfoAsset final : public UContentInfoAsset
{
public:
	struct FActionPathInfoDB                      ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FActionPathInfoPtr FindActionPathInfoByNameBP(class FName CodeName);
	static const TArray<struct FActionPathInfo> GetActionPathInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActionPathInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActionPathInfoAsset")
	}
	static class UActionPathInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionPathInfoAsset>();
	}
};
DUMPER7_ASSERTS_UActionPathInfoAsset;

// Class ProjectPContentInfo.ActionStateInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UActionStateInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FActionStateInfo& Info);
	static int32 GetDummy(const struct FActionStateInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActionStateInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActionStateInfoFuncLibrary")
	}
	static class UActionStateInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionStateInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UActionStateInfoFuncLibrary;

// Class ProjectPContentInfo.ActionStateInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UActionStateInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FActionStateInfoPtr& Ptr);
	static int32 GetDummy(const struct FActionStateInfoPtr& Ptr);
	static bool IsValid(const struct FActionStateInfoPtr& Ptr);
	static void IsValidBranch(const struct FActionStateInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActionStateInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActionStateInfoPtrFuncLibrary")
	}
	static class UActionStateInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionStateInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UActionStateInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ActionStateInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UActionStateInfoAsset final : public UContentInfoAsset
{
public:
	struct FActionStateInfoDB                     ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FActionStateInfoPtr FindActionStateInfoByNameBP(class FName CodeName);
	static const TArray<struct FActionStateInfo> GetActionStateInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActionStateInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActionStateInfoAsset")
	}
	static class UActionStateInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionStateInfoAsset>();
	}
};
DUMPER7_ASSERTS_UActionStateInfoAsset;

// Class ProjectPContentInfo.Action_PathInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAction_PathInfoFuncLibrary final : public UObject
{
public:
	static const TSoftClassPtr<class UClass> GetActionClass(const struct FAction_PathInfo& Info);
	static const class FName GetCodeName(const struct FAction_PathInfo& Info);
	static ELActionCategory GetSystemCategory(const struct FAction_PathInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Action_PathInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Action_PathInfoFuncLibrary")
	}
	static class UAction_PathInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAction_PathInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAction_PathInfoFuncLibrary;

// Class ProjectPContentInfo.Action_PathInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UAction_PathInfoPtrFuncLibrary final : public UObject
{
public:
	static const TSoftClassPtr<class UClass> GetActionClass(const struct FAction_PathInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FAction_PathInfoPtr& Ptr);
	static ELActionCategory GetSystemCategory(const struct FAction_PathInfoPtr& Ptr);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Action_PathInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Action_PathInfoPtrFuncLibrary")
	}
	static class UAction_PathInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAction_PathInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UAction_PathInfoPtrFuncLibrary;

// Class ProjectPContentInfo.Action_PathInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UAction_PathInfoAsset final : public UContentInfoAsset
{
public:
	struct FAction_PathInfoDB                     ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FAction_PathInfoPtr FindAction_PathInfoByNameBP(class FName CodeName);
	static const TArray<struct FAction_PathInfo> GetAction_PathInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Action_PathInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Action_PathInfoAsset")
	}
	static class UAction_PathInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAction_PathInfoAsset>();
	}
};
DUMPER7_ASSERTS_UAction_PathInfoAsset;

// Class ProjectPContentInfo.ComboInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UComboInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetActionGroup(const struct FComboInfo& Info);
	static const class FName GetCmdChargeCancel(const struct FComboInfo& Info);
	static const class FName GetCmdDash(const struct FComboInfo& Info);
	static const class FName GetCmdGuard(const struct FComboInfo& Info);
	static const class FName GetCmdGuardEnd(const struct FComboInfo& Info);
	static const class FName GetCmdLightAttack(const struct FComboInfo& Info);
	static const class FName GetCmdOrbLevel1(const struct FComboInfo& Info);
	static const class FName GetCmdOrbLevel2(const struct FComboInfo& Info);
	static const class FName GetCmdOrbSkillCharging(const struct FComboInfo& Info);
	static const class FName GetCmdStrongAttack(const struct FComboInfo& Info);
	static const class FName GetCmdWeaponChange(const struct FComboInfo& Info);
	static const class FName GetCodeName(const struct FComboInfo& Info);
	static const class FName GetComboType(const struct FComboInfo& Info);
	static ELActionCategory GetCurrActionCategory(const struct FComboInfo& Info);
	static const class FName GetCurrSkill(const struct FComboInfo& Info);
	static const class FName GetFilter(const struct FComboInfo& Info);
	static ELWeaponPostureType GetPostureType(const struct FComboInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComboInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComboInfoFuncLibrary")
	}
	static class UComboInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComboInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UComboInfoFuncLibrary;

// Class ProjectPContentInfo.ComboInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UComboInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetActionGroup(const struct FComboInfoPtr& Ptr);
	static const class FName GetCmdChargeCancel(const struct FComboInfoPtr& Ptr);
	static const class FName GetCmdDash(const struct FComboInfoPtr& Ptr);
	static const class FName GetCmdGuard(const struct FComboInfoPtr& Ptr);
	static const class FName GetCmdGuardEnd(const struct FComboInfoPtr& Ptr);
	static const class FName GetCmdLightAttack(const struct FComboInfoPtr& Ptr);
	static const class FName GetCmdOrbLevel1(const struct FComboInfoPtr& Ptr);
	static const class FName GetCmdOrbLevel2(const struct FComboInfoPtr& Ptr);
	static const class FName GetCmdOrbSkillCharging(const struct FComboInfoPtr& Ptr);
	static const class FName GetCmdStrongAttack(const struct FComboInfoPtr& Ptr);
	static const class FName GetCmdWeaponChange(const struct FComboInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FComboInfoPtr& Ptr);
	static const class FName GetComboType(const struct FComboInfoPtr& Ptr);
	static ELActionCategory GetCurrActionCategory(const struct FComboInfoPtr& Ptr);
	static const class FName GetCurrSkill(const struct FComboInfoPtr& Ptr);
	static const class FName GetFilter(const struct FComboInfoPtr& Ptr);
	static ELWeaponPostureType GetPostureType(const struct FComboInfoPtr& Ptr);
	static bool IsValid(const struct FComboInfoPtr& Ptr);
	static void IsValidBranch(const struct FComboInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComboInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComboInfoPtrFuncLibrary")
	}
	static class UComboInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComboInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UComboInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ComboInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UComboInfoAsset final : public UContentInfoAsset
{
public:
	struct FComboInfoDB                           ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FComboInfoPtr FindComboInfoByNameBP(class FName CodeName);
	static const TArray<struct FComboInfo> GetComboInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComboInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComboInfoAsset")
	}
	static class UComboInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComboInfoAsset>();
	}
};
DUMPER7_ASSERTS_UComboInfoAsset;

// Class ProjectPContentInfo.ComboTypeInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UComboTypeInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FComboTypeInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComboTypeInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComboTypeInfoFuncLibrary")
	}
	static class UComboTypeInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComboTypeInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UComboTypeInfoFuncLibrary;

// Class ProjectPContentInfo.ComboTypeInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UComboTypeInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FComboTypeInfoPtr& Ptr);
	static bool IsValid(const struct FComboTypeInfoPtr& Ptr);
	static void IsValidBranch(const struct FComboTypeInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComboTypeInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComboTypeInfoPtrFuncLibrary")
	}
	static class UComboTypeInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComboTypeInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UComboTypeInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ComboTypeInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UComboTypeInfoAsset final : public UContentInfoAsset
{
public:
	struct FComboTypeInfoDB                       ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FComboTypeInfoPtr FindComboTypeInfoByNameBP(class FName CodeName);
	static const TArray<struct FComboTypeInfo> GetComboTypeInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ComboTypeInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ComboTypeInfoAsset")
	}
	static class UComboTypeInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComboTypeInfoAsset>();
	}
};
DUMPER7_ASSERTS_UComboTypeInfoAsset;

// Class ProjectPContentInfo.CustomInputInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UCustomInputInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetInputCmd(const struct FCustomInputInfo& Info);
	static int32 GetInputCmdTime(const struct FCustomInputInfo& Info);
	static ELInputType GetInputType(const struct FCustomInputInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CustomInputInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CustomInputInfoFuncLibrary")
	}
	static class UCustomInputInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomInputInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UCustomInputInfoFuncLibrary;

// Class ProjectPContentInfo.CustomInputInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UCustomInputInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetInputCmd(const struct FCustomInputInfoPtr& Ptr);
	static int32 GetInputCmdTime(const struct FCustomInputInfoPtr& Ptr);
	static ELInputType GetInputType(const struct FCustomInputInfoPtr& Ptr);
	static bool IsValid(const struct FCustomInputInfoPtr& Ptr);
	static void IsValidBranch(const struct FCustomInputInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CustomInputInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CustomInputInfoPtrFuncLibrary")
	}
	static class UCustomInputInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomInputInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UCustomInputInfoPtrFuncLibrary;

// Class ProjectPContentInfo.CommandInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UCommandInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FCommandInfo& Info);
	static const struct FCustomInputInfo GetCustomInputInfo(const struct FCommandInfo& Info);
	static const class FName GetPress(const struct FCommandInfo& Info);
	static const class FName GetPrimaryInput(const struct FCommandInfo& Info);
	static const class FName GetRelease(const struct FCommandInfo& Info);
	static const class FName GetSecondaryInput(const struct FCommandInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CommandInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CommandInfoFuncLibrary")
	}
	static class UCommandInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommandInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UCommandInfoFuncLibrary;

// Class ProjectPContentInfo.CommandInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UCommandInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FCommandInfoPtr& Ptr);
	static const struct FCustomInputInfo GetCustomInputInfo(const struct FCommandInfoPtr& Ptr);
	static const class FName GetPress(const struct FCommandInfoPtr& Ptr);
	static const class FName GetPrimaryInput(const struct FCommandInfoPtr& Ptr);
	static const class FName GetRelease(const struct FCommandInfoPtr& Ptr);
	static const class FName GetSecondaryInput(const struct FCommandInfoPtr& Ptr);
	static bool IsValid(const struct FCommandInfoPtr& Ptr);
	static void IsValidBranch(const struct FCommandInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CommandInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CommandInfoPtrFuncLibrary")
	}
	static class UCommandInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommandInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UCommandInfoPtrFuncLibrary;

// Class ProjectPContentInfo.CommandInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UCommandInfoAsset final : public UContentInfoAsset
{
public:
	struct FCommandInfoDB                         ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FCommandInfoPtr FindCommandInfoByNameBP(class FName CodeName);
	static const TArray<struct FCommandInfo> GetCommandInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CommandInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CommandInfoAsset")
	}
	static class UCommandInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommandInfoAsset>();
	}
};
DUMPER7_ASSERTS_UCommandInfoAsset;

// Class ProjectPContentInfo.CommonActionMontageInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UCommonActionMontageInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FCommonActionMontageInfo& Info);
	static ELCommonActionType GetCommonActionType(const struct FCommonActionMontageInfo& Info);
	static const class FName GetEndCommonAction(const struct FCommonActionMontageInfo& Info);
	static const class FName GetMontage(const struct FCommonActionMontageInfo& Info);
	static const class FName GetPhysicalTargetBone(const struct FCommonActionMontageInfo& Info);
	static const class FName GetReplaceMontage(const struct FCommonActionMontageInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CommonActionMontageInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CommonActionMontageInfoFuncLibrary")
	}
	static class UCommonActionMontageInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonActionMontageInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UCommonActionMontageInfoFuncLibrary;

// Class ProjectPContentInfo.CommonActionMontageInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UCommonActionMontageInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FCommonActionMontageInfoPtr& Ptr);
	static ELCommonActionType GetCommonActionType(const struct FCommonActionMontageInfoPtr& Ptr);
	static const class FName GetEndCommonAction(const struct FCommonActionMontageInfoPtr& Ptr);
	static const class FName GetMontage(const struct FCommonActionMontageInfoPtr& Ptr);
	static const class FName GetPhysicalTargetBone(const struct FCommonActionMontageInfoPtr& Ptr);
	static const class FName GetReplaceMontage(const struct FCommonActionMontageInfoPtr& Ptr);
	static bool IsValid(const struct FCommonActionMontageInfoPtr& Ptr);
	static void IsValidBranch(const struct FCommonActionMontageInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CommonActionMontageInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CommonActionMontageInfoPtrFuncLibrary")
	}
	static class UCommonActionMontageInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonActionMontageInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UCommonActionMontageInfoPtrFuncLibrary;

// Class ProjectPContentInfo.CommonActionMontageInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UCommonActionMontageInfoAsset final : public UContentInfoAsset
{
public:
	struct FCommonActionMontageInfoDB             ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FCommonActionMontageInfoPtr FindCommonActionMontageInfoByNameBP(class FName CodeName);
	static const TArray<struct FCommonActionMontageInfo> GetCommonActionMontageInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CommonActionMontageInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CommonActionMontageInfoAsset")
	}
	static class UCommonActionMontageInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonActionMontageInfoAsset>();
	}
};
DUMPER7_ASSERTS_UCommonActionMontageInfoAsset;

// Class ProjectPContentInfo.CommonConstantInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UCommonConstantInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FCommonConstantInfo& Info);
	static class FString GetValue(const struct FCommonConstantInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CommonConstantInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CommonConstantInfoFuncLibrary")
	}
	static class UCommonConstantInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonConstantInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UCommonConstantInfoFuncLibrary;

// Class ProjectPContentInfo.CommonConstantInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UCommonConstantInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FCommonConstantInfoPtr& Ptr);
	static class FString GetValue(const struct FCommonConstantInfoPtr& Ptr);
	static bool IsValid(const struct FCommonConstantInfoPtr& Ptr);
	static void IsValidBranch(const struct FCommonConstantInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CommonConstantInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CommonConstantInfoPtrFuncLibrary")
	}
	static class UCommonConstantInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonConstantInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UCommonConstantInfoPtrFuncLibrary;

// Class ProjectPContentInfo.CommonConstantInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UCommonConstantInfoAsset final : public UContentInfoAsset
{
public:
	struct FCommonConstantInfoDB                  ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FCommonConstantInfoPtr FindCommonConstantInfoByNameBP(class FName CodeName);
	static const TArray<struct FCommonConstantInfo> GetCommonConstantInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CommonConstantInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CommonConstantInfoAsset")
	}
	static class UCommonConstantInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonConstantInfoAsset>();
	}
};
DUMPER7_ASSERTS_UCommonConstantInfoAsset;

// Class ProjectPContentInfo.ContentCommandInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UContentCommandInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FContentCommandInfo& Info);
	static ELContentCommandType GetCommandEnum(const struct FContentCommandInfo& Info);
	static class FString GetParam1(const struct FContentCommandInfo& Info);
	static class FString GetParam10(const struct FContentCommandInfo& Info);
	static class FString GetParam2(const struct FContentCommandInfo& Info);
	static class FString GetParam3(const struct FContentCommandInfo& Info);
	static class FString GetParam4(const struct FContentCommandInfo& Info);
	static class FString GetParam5(const struct FContentCommandInfo& Info);
	static class FString GetParam6(const struct FContentCommandInfo& Info);
	static class FString GetParam7(const struct FContentCommandInfo& Info);
	static class FString GetParam8(const struct FContentCommandInfo& Info);
	static class FString GetParam9(const struct FContentCommandInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentCommandInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentCommandInfoFuncLibrary")
	}
	static class UContentCommandInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentCommandInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UContentCommandInfoFuncLibrary;

// Class ProjectPContentInfo.ContentCommandInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UContentCommandInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FContentCommandInfoPtr& Ptr);
	static ELContentCommandType GetCommandEnum(const struct FContentCommandInfoPtr& Ptr);
	static class FString GetParam1(const struct FContentCommandInfoPtr& Ptr);
	static class FString GetParam10(const struct FContentCommandInfoPtr& Ptr);
	static class FString GetParam2(const struct FContentCommandInfoPtr& Ptr);
	static class FString GetParam3(const struct FContentCommandInfoPtr& Ptr);
	static class FString GetParam4(const struct FContentCommandInfoPtr& Ptr);
	static class FString GetParam5(const struct FContentCommandInfoPtr& Ptr);
	static class FString GetParam6(const struct FContentCommandInfoPtr& Ptr);
	static class FString GetParam7(const struct FContentCommandInfoPtr& Ptr);
	static class FString GetParam8(const struct FContentCommandInfoPtr& Ptr);
	static class FString GetParam9(const struct FContentCommandInfoPtr& Ptr);
	static bool IsValid(const struct FContentCommandInfoPtr& Ptr);
	static void IsValidBranch(const struct FContentCommandInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentCommandInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentCommandInfoPtrFuncLibrary")
	}
	static class UContentCommandInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentCommandInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UContentCommandInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ContentCommandInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UContentCommandInfoAsset final : public UContentInfoAsset
{
public:
	struct FContentCommandInfoDB                  ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FContentCommandInfo> GetContentCommandInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentCommandInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentCommandInfoAsset")
	}
	static class UContentCommandInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentCommandInfoAsset>();
	}
};
DUMPER7_ASSERTS_UContentCommandInfoAsset;

// Class ProjectPContentInfo.ContentConditionInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UContentConditionInfoFuncLibrary final : public UObject
{
public:
	static ELConditionCheckType GetCheckType(const struct FContentConditionInfo& Info);
	static const class FName GetCodeName(const struct FContentConditionInfo& Info);
	static ELConditionCompareType GetConditionType(const struct FContentConditionInfo& Info);
	static class FString GetParam1(const struct FContentConditionInfo& Info);
	static class FString GetParam2(const struct FContentConditionInfo& Info);
	static class FString GetParam3(const struct FContentConditionInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentConditionInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentConditionInfoFuncLibrary")
	}
	static class UContentConditionInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentConditionInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UContentConditionInfoFuncLibrary;

// Class ProjectPContentInfo.ContentConditionInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UContentConditionInfoPtrFuncLibrary final : public UObject
{
public:
	static ELConditionCheckType GetCheckType(const struct FContentConditionInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FContentConditionInfoPtr& Ptr);
	static ELConditionCompareType GetConditionType(const struct FContentConditionInfoPtr& Ptr);
	static class FString GetParam1(const struct FContentConditionInfoPtr& Ptr);
	static class FString GetParam2(const struct FContentConditionInfoPtr& Ptr);
	static class FString GetParam3(const struct FContentConditionInfoPtr& Ptr);
	static bool IsValid(const struct FContentConditionInfoPtr& Ptr);
	static void IsValidBranch(const struct FContentConditionInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentConditionInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentConditionInfoPtrFuncLibrary")
	}
	static class UContentConditionInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentConditionInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UContentConditionInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ContentConditionInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UContentConditionInfoAsset final : public UContentInfoAsset
{
public:
	struct FContentConditionInfoDB                ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FContentConditionInfo> GetContentConditionInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentConditionInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentConditionInfoAsset")
	}
	static class UContentConditionInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentConditionInfoAsset>();
	}
};
DUMPER7_ASSERTS_UContentConditionInfoAsset;

// Class ProjectPContentInfo.ContentInfoSettings
// 0x0010 (0x0038 - 0x0028)
class UContentInfoSettings final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentInfoSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentInfoSettings")
	}
	static class UContentInfoSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentInfoSettings>();
	}
};
DUMPER7_ASSERTS_UContentInfoSettings;

// Class ProjectPContentInfo.ContentInfoLocalize
// 0x0000 (0x0028 - 0x0028)
class UContentInfoLocalize final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ContentInfoLocalize")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ContentInfoLocalize")
	}
	static class UContentInfoLocalize* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentInfoLocalize>();
	}
};
DUMPER7_ASSERTS_UContentInfoLocalize;

// Class ProjectPContentInfo.DialogMonsterMonologueInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDialogMonsterMonologueInfoFuncLibrary final : public UObject
{
public:
	static int32 GetCheckPercentage(const struct FDialogMonsterMonologueInfo& Info);
	static const class FName GetCodeName(const struct FDialogMonsterMonologueInfo& Info);
	static const class FName GetConditionCodename(const struct FDialogMonsterMonologueInfo& Info);
	static const TArray<struct FGeneralConditionInfo> GetConditionIndependentArray(const struct FDialogMonsterMonologueInfo& Info);
	static int32 GetCount(const struct FDialogMonsterMonologueInfo& Info);
	static int32 GetDelayTime(const struct FDialogMonsterMonologueInfo& Info);
	static const class FName GetDialogCodeName(const struct FDialogMonsterMonologueInfo& Info);
	static ELCallBackEventType GetEventType(const struct FDialogMonsterMonologueInfo& Info);
	static const class FName GetMonologueTargetSpot(const struct FDialogMonsterMonologueInfo& Info);
	static class FString GetParam1(const struct FDialogMonsterMonologueInfo& Info);
	static class FString GetParam2(const struct FDialogMonsterMonologueInfo& Info);
	static const class FName GetSpotUniqueId(const struct FDialogMonsterMonologueInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DialogMonsterMonologueInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DialogMonsterMonologueInfoFuncLibrary")
	}
	static class UDialogMonsterMonologueInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogMonsterMonologueInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDialogMonsterMonologueInfoFuncLibrary;

// Class ProjectPContentInfo.DialogMonsterMonologueInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDialogMonsterMonologueInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetCheckPercentage(const struct FDialogMonsterMonologueInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FDialogMonsterMonologueInfoPtr& Ptr);
	static const class FName GetConditionCodename(const struct FDialogMonsterMonologueInfoPtr& Ptr);
	static const TArray<struct FGeneralConditionInfo> GetConditionIndependentArray(const struct FDialogMonsterMonologueInfoPtr& Ptr);
	static int32 GetCount(const struct FDialogMonsterMonologueInfoPtr& Ptr);
	static int32 GetDelayTime(const struct FDialogMonsterMonologueInfoPtr& Ptr);
	static const class FName GetDialogCodeName(const struct FDialogMonsterMonologueInfoPtr& Ptr);
	static ELCallBackEventType GetEventType(const struct FDialogMonsterMonologueInfoPtr& Ptr);
	static const class FName GetMonologueTargetSpot(const struct FDialogMonsterMonologueInfoPtr& Ptr);
	static class FString GetParam1(const struct FDialogMonsterMonologueInfoPtr& Ptr);
	static class FString GetParam2(const struct FDialogMonsterMonologueInfoPtr& Ptr);
	static const class FName GetSpotUniqueId(const struct FDialogMonsterMonologueInfoPtr& Ptr);
	static bool IsValid(const struct FDialogMonsterMonologueInfoPtr& Ptr);
	static void IsValidBranch(const struct FDialogMonsterMonologueInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DialogMonsterMonologueInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DialogMonsterMonologueInfoPtrFuncLibrary")
	}
	static class UDialogMonsterMonologueInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogMonsterMonologueInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDialogMonsterMonologueInfoPtrFuncLibrary;

// Class ProjectPContentInfo.DialogMonsterMonologueInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UDialogMonsterMonologueInfoAsset final : public UContentInfoAsset
{
public:
	struct FDialogMonsterMonologueInfoDB          ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FDialogMonsterMonologueInfoPtr FindDialogMonsterMonologueInfoByNameBP(class FName CodeName);
	static const TArray<struct FDialogMonsterMonologueInfo> GetDialogMonsterMonologueInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DialogMonsterMonologueInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DialogMonsterMonologueInfoAsset")
	}
	static class UDialogMonsterMonologueInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogMonsterMonologueInfoAsset>();
	}
};
DUMPER7_ASSERTS_UDialogMonsterMonologueInfoAsset;

// Class ProjectPContentInfo.TalkerQuestInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UTalkerQuestInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FTalkerQuestInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TalkerQuestInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TalkerQuestInfoFuncLibrary")
	}
	static class UTalkerQuestInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTalkerQuestInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UTalkerQuestInfoFuncLibrary;

// Class ProjectPContentInfo.TalkerQuestInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UTalkerQuestInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FTalkerQuestInfoPtr& Ptr);
	static bool IsValid(const struct FTalkerQuestInfoPtr& Ptr);
	static void IsValidBranch(const struct FTalkerQuestInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TalkerQuestInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TalkerQuestInfoPtrFuncLibrary")
	}
	static class UTalkerQuestInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTalkerQuestInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UTalkerQuestInfoPtrFuncLibrary;

// Class ProjectPContentInfo.DialogInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDialogInfoFuncLibrary final : public UObject
{
public:
	static bool GetCamZoom(const struct FDialogInfo& Info);
	static const class FName GetCodeName(const struct FDialogInfo& Info);
	static const class FName GetConditionCodename(const struct FDialogInfo& Info);
	static const TArray<struct FGeneralConditionInfo> GetConditionIndependentArray(const struct FDialogInfo& Info);
	static const class FName GetContentCommandCodename(const struct FDialogInfo& Info);
	static const TArray<struct FGeneralCommandInfo> GetContentCommandIndependentArray(const struct FDialogInfo& Info);
	static ELDialogDialogType GetDialogType(const struct FDialogInfo& Info);
	static ELDialogExecutionType GetExecutionType(const struct FDialogInfo& Info);
	static bool GetHoldSelect(const struct FDialogInfo& Info);
	static ELLieType GetLieType(const struct FDialogInfo& Info);
	static int32 GetListPriority(const struct FDialogInfo& Info);
	static int32 GetListRepeatCount(const struct FDialogInfo& Info);
	static int32 GetListRepeatTerm(const struct FDialogInfo& Info);
	static ELDialogLookatBone GetLookatBone(const struct FDialogInfo& Info);
	static const class FName GetLootatTarget(const struct FDialogInfo& Info);
	static int32 GetMenuItemVariable(const struct FDialogInfo& Info);
	static bool GetNewNotify(const struct FDialogInfo& Info);
	static const class FName GetNpcCodename(const struct FDialogInfo& Info);
	static const class FName GetNpcMotion(const struct FDialogInfo& Info);
	static const class FName GetPcMotion(const struct FDialogInfo& Info);
	static int32 GetPriority(const struct FDialogInfo& Info);
	static int32 GetRandomDefaultIndex(const struct FDialogInfo& Info);
	static bool GetRandomDefaultSelect(const struct FDialogInfo& Info);
	static int32 GetRandomSelect(const struct FDialogInfo& Info);
	static int32 GetSelectTimer(const struct FDialogInfo& Info);
	static const class FName GetSoundResource(const struct FDialogInfo& Info);
	static ELDialogStepType GetStepType(const struct FDialogInfo& Info);
	static const class FName GetTalkCodename(const struct FDialogInfo& Info);
	static bool GetTalkerRadiusIn(const struct FDialogInfo& Info);
	static const TArray<class FName> GetTargetCodename(const struct FDialogInfo& Info);
	static class FString GetText(const struct FDialogInfo& Info);
	static const class FName GetTextCn(const struct FDialogInfo& Info);
	static class FText GetTextLocalize(const struct FDialogInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DialogInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DialogInfoFuncLibrary")
	}
	static class UDialogInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDialogInfoFuncLibrary;

// Class ProjectPContentInfo.DialogInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDialogInfoPtrFuncLibrary final : public UObject
{
public:
	static bool GetCamZoom(const struct FDialogInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FDialogInfoPtr& Ptr);
	static const class FName GetConditionCodename(const struct FDialogInfoPtr& Ptr);
	static const TArray<struct FGeneralConditionInfo> GetConditionIndependentArray(const struct FDialogInfoPtr& Ptr);
	static const class FName GetContentCommandCodename(const struct FDialogInfoPtr& Ptr);
	static const TArray<struct FGeneralCommandInfo> GetContentCommandIndependentArray(const struct FDialogInfoPtr& Ptr);
	static ELDialogDialogType GetDialogType(const struct FDialogInfoPtr& Ptr);
	static ELDialogExecutionType GetExecutionType(const struct FDialogInfoPtr& Ptr);
	static bool GetHoldSelect(const struct FDialogInfoPtr& Ptr);
	static ELLieType GetLieType(const struct FDialogInfoPtr& Ptr);
	static int32 GetListPriority(const struct FDialogInfoPtr& Ptr);
	static int32 GetListRepeatCount(const struct FDialogInfoPtr& Ptr);
	static int32 GetListRepeatTerm(const struct FDialogInfoPtr& Ptr);
	static ELDialogLookatBone GetLookatBone(const struct FDialogInfoPtr& Ptr);
	static const class FName GetLootatTarget(const struct FDialogInfoPtr& Ptr);
	static int32 GetMenuItemVariable(const struct FDialogInfoPtr& Ptr);
	static bool GetNewNotify(const struct FDialogInfoPtr& Ptr);
	static const class FName GetNpcCodename(const struct FDialogInfoPtr& Ptr);
	static const class FName GetNpcMotion(const struct FDialogInfoPtr& Ptr);
	static const class FName GetPcMotion(const struct FDialogInfoPtr& Ptr);
	static int32 GetPriority(const struct FDialogInfoPtr& Ptr);
	static int32 GetRandomDefaultIndex(const struct FDialogInfoPtr& Ptr);
	static bool GetRandomDefaultSelect(const struct FDialogInfoPtr& Ptr);
	static int32 GetRandomSelect(const struct FDialogInfoPtr& Ptr);
	static int32 GetSelectTimer(const struct FDialogInfoPtr& Ptr);
	static const class FName GetSoundResource(const struct FDialogInfoPtr& Ptr);
	static ELDialogStepType GetStepType(const struct FDialogInfoPtr& Ptr);
	static const class FName GetTalkCodename(const struct FDialogInfoPtr& Ptr);
	static bool GetTalkerRadiusIn(const struct FDialogInfoPtr& Ptr);
	static const TArray<class FName> GetTargetCodename(const struct FDialogInfoPtr& Ptr);
	static class FString GetText(const struct FDialogInfoPtr& Ptr);
	static const class FName GetTextCn(const struct FDialogInfoPtr& Ptr);
	static class FText GetTextLocalize(const struct FDialogInfoPtr& Ptr);
	static bool IsValid(const struct FDialogInfoPtr& Ptr);
	static void IsValidBranch(const struct FDialogInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DialogInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DialogInfoPtrFuncLibrary")
	}
	static class UDialogInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDialogInfoPtrFuncLibrary;

// Class ProjectPContentInfo.TalkerInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UTalkerInfoFuncLibrary final : public UObject
{
public:
	static bool GetAggressive(const struct FTalkerInfo& Info);
	static ELAgressiveRecoverType GetAggressiveRecoverType(const struct FTalkerInfo& Info);
	static bool GetAttackable(const struct FTalkerInfo& Info);
	static const class FName GetAttackedExec(const struct FTalkerInfo& Info);
	static const class FName GetAttackedExecCondition(const struct FTalkerInfo& Info);
	static const class FName GetCodeName(const struct FTalkerInfo& Info);
	static const class FName GetDialogIdle(const struct FTalkerInfo& Info);
	static int32 GetDialogRadius(const struct FTalkerInfo& Info);
	static bool GetEnableDialogRotate(const struct FTalkerInfo& Info);
	static const class FName GetInteractionApproachMessageCodeName(const struct FTalkerInfo& Info);
	static int32 GetInteractionConfrontAngle(const struct FTalkerInfo& Info);
	static int32 GetInteractionConfrontAngleProp(const struct FTalkerInfo& Info);
	static int32 GetInteractionOffsetX(const struct FTalkerInfo& Info);
	static int32 GetInteractionOffsetY(const struct FTalkerInfo& Info);
	static int32 GetInteractionOffsetZ(const struct FTalkerInfo& Info);
	static int32 GetInteractionRadius(const struct FTalkerInfo& Info);
	static class FString GetLocalName(const struct FTalkerInfo& Info);
	static const class FName GetLocalNameCn(const struct FTalkerInfo& Info);
	static class FText GetLocalNameLocalize(const struct FTalkerInfo& Info);
	static ELDialogLookatBone GetLookatBone(const struct FTalkerInfo& Info);
	static int32 GetLookatRadius(const struct FTalkerInfo& Info);
	static const class FName GetLootatTarget(const struct FTalkerInfo& Info);
	static int32 GetMinTurnAngle(const struct FTalkerInfo& Info);
	static int32 GetMonologueRadius(const struct FTalkerInfo& Info);
	static const TArray<class FName> GetQuest(const struct FTalkerInfo& Info);
	static bool GetShowGoldentreeStatus(const struct FTalkerInfo& Info);
	static const class FName GetTalkerIdle(const struct FTalkerInfo& Info);
	static ELTalkStarterType GetTalkStarterType(const struct FTalkerInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TalkerInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TalkerInfoFuncLibrary")
	}
	static class UTalkerInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTalkerInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UTalkerInfoFuncLibrary;

// Class ProjectPContentInfo.TalkerInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UTalkerInfoPtrFuncLibrary final : public UObject
{
public:
	static bool GetAggressive(const struct FTalkerInfoPtr& Ptr);
	static ELAgressiveRecoverType GetAggressiveRecoverType(const struct FTalkerInfoPtr& Ptr);
	static bool GetAttackable(const struct FTalkerInfoPtr& Ptr);
	static const class FName GetAttackedExec(const struct FTalkerInfoPtr& Ptr);
	static const class FName GetAttackedExecCondition(const struct FTalkerInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FTalkerInfoPtr& Ptr);
	static const class FName GetDialogIdle(const struct FTalkerInfoPtr& Ptr);
	static int32 GetDialogRadius(const struct FTalkerInfoPtr& Ptr);
	static bool GetEnableDialogRotate(const struct FTalkerInfoPtr& Ptr);
	static const class FName GetInteractionApproachMessageCodeName(const struct FTalkerInfoPtr& Ptr);
	static int32 GetInteractionConfrontAngle(const struct FTalkerInfoPtr& Ptr);
	static int32 GetInteractionConfrontAngleProp(const struct FTalkerInfoPtr& Ptr);
	static int32 GetInteractionOffsetX(const struct FTalkerInfoPtr& Ptr);
	static int32 GetInteractionOffsetY(const struct FTalkerInfoPtr& Ptr);
	static int32 GetInteractionOffsetZ(const struct FTalkerInfoPtr& Ptr);
	static int32 GetInteractionRadius(const struct FTalkerInfoPtr& Ptr);
	static class FString GetLocalName(const struct FTalkerInfoPtr& Ptr);
	static const class FName GetLocalNameCn(const struct FTalkerInfoPtr& Ptr);
	static class FText GetLocalNameLocalize(const struct FTalkerInfoPtr& Ptr);
	static ELDialogLookatBone GetLookatBone(const struct FTalkerInfoPtr& Ptr);
	static int32 GetLookatRadius(const struct FTalkerInfoPtr& Ptr);
	static const class FName GetLootatTarget(const struct FTalkerInfoPtr& Ptr);
	static int32 GetMinTurnAngle(const struct FTalkerInfoPtr& Ptr);
	static int32 GetMonologueRadius(const struct FTalkerInfoPtr& Ptr);
	static const TArray<class FName> GetQuest(const struct FTalkerInfoPtr& Ptr);
	static bool GetShowGoldentreeStatus(const struct FTalkerInfoPtr& Ptr);
	static const class FName GetTalkerIdle(const struct FTalkerInfoPtr& Ptr);
	static ELTalkStarterType GetTalkStarterType(const struct FTalkerInfoPtr& Ptr);
	static bool IsValid(const struct FTalkerInfoPtr& Ptr);
	static void IsValidBranch(const struct FTalkerInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TalkerInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TalkerInfoPtrFuncLibrary")
	}
	static class UTalkerInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTalkerInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UTalkerInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SpotTalkerMatchingInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USpotTalkerMatchingInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetSpotId(const struct FSpotTalkerMatchingInfo& Info);
	static const class FName GetTalkerCodeName(const struct FSpotTalkerMatchingInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpotTalkerMatchingInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpotTalkerMatchingInfoFuncLibrary")
	}
	static class USpotTalkerMatchingInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpotTalkerMatchingInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USpotTalkerMatchingInfoFuncLibrary;

// Class ProjectPContentInfo.SpotTalkerMatchingInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USpotTalkerMatchingInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetSpotId(const struct FSpotTalkerMatchingInfoPtr& Ptr);
	static const class FName GetTalkerCodeName(const struct FSpotTalkerMatchingInfoPtr& Ptr);
	static bool IsValid(const struct FSpotTalkerMatchingInfoPtr& Ptr);
	static void IsValidBranch(const struct FSpotTalkerMatchingInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpotTalkerMatchingInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpotTalkerMatchingInfoPtrFuncLibrary")
	}
	static class USpotTalkerMatchingInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpotTalkerMatchingInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USpotTalkerMatchingInfoPtrFuncLibrary;

// Class ProjectPContentInfo.DialogQuestInfoAsset
// 0x0118 (0x0190 - 0x0078)
class alignas(0x10) UDialogQuestInfoAsset final : public UContentInfoAsset
{
public:
	struct FDialogQuestInfoDB                     ContentInfoDB;                                     // 0x0078(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FSpotTalkerMatchingInfoPtr FindSpotTalkerMatchingInfoByNameBP(class FName CodeName);
	static struct FTalkerInfoPtr FindTalkerInfoByNameBP(class FName CodeName);
	static const TArray<struct FDialogInfo> GetDialogInfoArrayBP();
	static const TArray<struct FSpotTalkerMatchingInfo> GetSpotTalkerMatchingInfoArrayBP();
	static const TArray<struct FTalkerInfo> GetTalkerInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DialogQuestInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DialogQuestInfoAsset")
	}
	static class UDialogQuestInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDialogQuestInfoAsset>();
	}
};
DUMPER7_ASSERTS_UDialogQuestInfoAsset;

// Class ProjectPContentInfo.DieMotionGroupInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDieMotionGroupInfoFuncLibrary final : public UObject
{
public:
	static int32 GetChosenProbability(const struct FDieMotionGroupInfo& Info);
	static const class FName GetDieMotionGroup(const struct FDieMotionGroupInfo& Info);
	static const class FName GetPlayCommonActionMontageCodeName(const struct FDieMotionGroupInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DieMotionGroupInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DieMotionGroupInfoFuncLibrary")
	}
	static class UDieMotionGroupInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDieMotionGroupInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDieMotionGroupInfoFuncLibrary;

// Class ProjectPContentInfo.DieMotionGroupInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDieMotionGroupInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetChosenProbability(const struct FDieMotionGroupInfoPtr& Ptr);
	static const class FName GetDieMotionGroup(const struct FDieMotionGroupInfoPtr& Ptr);
	static const class FName GetPlayCommonActionMontageCodeName(const struct FDieMotionGroupInfoPtr& Ptr);
	static bool IsValid(const struct FDieMotionGroupInfoPtr& Ptr);
	static void IsValidBranch(const struct FDieMotionGroupInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DieMotionGroupInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DieMotionGroupInfoPtrFuncLibrary")
	}
	static class UDieMotionGroupInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDieMotionGroupInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDieMotionGroupInfoPtrFuncLibrary;

// Class ProjectPContentInfo.DieMotionGroupInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UDieMotionGroupInfoAsset final : public UContentInfoAsset
{
public:
	struct FDieMotionGroupInfoDB                  ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FDieMotionGroupInfo> GetDieMotionGroupInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DieMotionGroupInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DieMotionGroupInfoAsset")
	}
	static class UDieMotionGroupInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDieMotionGroupInfoAsset>();
	}
};
DUMPER7_ASSERTS_UDieMotionGroupInfoAsset;

// Class ProjectPContentInfo.DieMotionTransitionInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDieMotionTransitionInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetActionGroupTableCodeName(const struct FDieMotionTransitionInfo& Info);
	static const class FName GetCurrentActionClassCodeName(const struct FDieMotionTransitionInfo& Info);
	static const class FName GetCurrentCommonActionMontage(const struct FDieMotionTransitionInfo& Info);
	static ELActionCategory GetDieCauseActionCategory(const struct FDieMotionTransitionInfo& Info);
	static ELDieCauseElement GetDieCauseElement(const struct FDieMotionTransitionInfo& Info);
	static ELDieCauseFall GetDieCauseFall(const struct FDieMotionTransitionInfo& Info);
	static ELHitMotionType GetDieCauseHitAction(const struct FDieMotionTransitionInfo& Info);
	static ELDieCauseHitDirection GetDieCauseHitDirection(const struct FDieMotionTransitionInfo& Info);
	static ELPhysicalDamageType GetDieCausePhysicalDamageType(const struct FDieMotionTransitionInfo& Info);
	static ELDieCauseType GetDieCauseType(const struct FDieMotionTransitionInfo& Info);
	static const class FName GetDieMotionGroupCodeName(const struct FDieMotionTransitionInfo& Info);
	static bool GetIsAllowLieDying(const struct FDieMotionTransitionInfo& Info);
	static const class FName GetNpcAssetTableCodeName(const struct FDieMotionTransitionInfo& Info);
	static const class FName GetNpcCodename(const struct FDieMotionTransitionInfo& Info);
	static int32 GetPriority(const struct FDieMotionTransitionInfo& Info);
	static ELSkillHitType GetSkillHitType(const struct FDieMotionTransitionInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DieMotionTransitionInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DieMotionTransitionInfoFuncLibrary")
	}
	static class UDieMotionTransitionInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDieMotionTransitionInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDieMotionTransitionInfoFuncLibrary;

// Class ProjectPContentInfo.DieMotionTransitionInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDieMotionTransitionInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetActionGroupTableCodeName(const struct FDieMotionTransitionInfoPtr& Ptr);
	static const class FName GetCurrentActionClassCodeName(const struct FDieMotionTransitionInfoPtr& Ptr);
	static const class FName GetCurrentCommonActionMontage(const struct FDieMotionTransitionInfoPtr& Ptr);
	static ELActionCategory GetDieCauseActionCategory(const struct FDieMotionTransitionInfoPtr& Ptr);
	static ELDieCauseElement GetDieCauseElement(const struct FDieMotionTransitionInfoPtr& Ptr);
	static ELDieCauseFall GetDieCauseFall(const struct FDieMotionTransitionInfoPtr& Ptr);
	static ELHitMotionType GetDieCauseHitAction(const struct FDieMotionTransitionInfoPtr& Ptr);
	static ELDieCauseHitDirection GetDieCauseHitDirection(const struct FDieMotionTransitionInfoPtr& Ptr);
	static ELPhysicalDamageType GetDieCausePhysicalDamageType(const struct FDieMotionTransitionInfoPtr& Ptr);
	static ELDieCauseType GetDieCauseType(const struct FDieMotionTransitionInfoPtr& Ptr);
	static const class FName GetDieMotionGroupCodeName(const struct FDieMotionTransitionInfoPtr& Ptr);
	static bool GetIsAllowLieDying(const struct FDieMotionTransitionInfoPtr& Ptr);
	static const class FName GetNpcAssetTableCodeName(const struct FDieMotionTransitionInfoPtr& Ptr);
	static const class FName GetNpcCodename(const struct FDieMotionTransitionInfoPtr& Ptr);
	static int32 GetPriority(const struct FDieMotionTransitionInfoPtr& Ptr);
	static ELSkillHitType GetSkillHitType(const struct FDieMotionTransitionInfoPtr& Ptr);
	static bool IsValid(const struct FDieMotionTransitionInfoPtr& Ptr);
	static void IsValidBranch(const struct FDieMotionTransitionInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DieMotionTransitionInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DieMotionTransitionInfoPtrFuncLibrary")
	}
	static class UDieMotionTransitionInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDieMotionTransitionInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDieMotionTransitionInfoPtrFuncLibrary;

// Class ProjectPContentInfo.DieMotionTransitionInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UDieMotionTransitionInfoAsset final : public UContentInfoAsset
{
public:
	struct FDieMotionTransitionInfoDB             ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FDieMotionTransitionInfo> GetDieMotionTransitionInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DieMotionTransitionInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DieMotionTransitionInfoAsset")
	}
	static class UDieMotionTransitionInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDieMotionTransitionInfoAsset>();
	}
};
DUMPER7_ASSERTS_UDieMotionTransitionInfoAsset;

// Class ProjectPContentInfo.DLCItemPackageFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDLCItemPackageFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FDLCItemPackage& Info);
	static int32 GetCount(const struct FDLCItemPackage& Info);
	static int32 GetPrintOrder(const struct FDLCItemPackage& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DLCItemPackageFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DLCItemPackageFuncLibrary")
	}
	static class UDLCItemPackageFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDLCItemPackageFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDLCItemPackageFuncLibrary;

// Class ProjectPContentInfo.PropInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropInfoPtrFuncLibrary final : public UObject
{
public:
	static bool GetCanChangeDestructionMode(const struct FPropInfoPtr& Ptr);
	static int32 GetCanPlayDeathMotion(const struct FPropInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FPropInfoPtr& Ptr);
	static ELDeathByOwnerFaction GetDeathByOwnerFaction(const struct FPropInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetDestructionSound(const struct FPropInfoPtr& Ptr);
	static class FString GetDetailOfDeathByOwnerFaction(const struct FPropInfoPtr& Ptr);
	static bool GetFixCameraOnInterAction(const struct FPropInfoPtr& Ptr);
	static int32 GetHp(const struct FPropInfoPtr& Ptr);
	static int32 GetHpDiscountMethod(const struct FPropInfoPtr& Ptr);
	static const class FName GetInteractionApproachMessageCodeName(const struct FPropInfoPtr& Ptr);
	static int32 GetInteractionConfrontAngle(const struct FPropInfoPtr& Ptr);
	static int32 GetInteractionConfrontAngleProp(const struct FPropInfoPtr& Ptr);
	static int32 GetInteractionOffsetX(const struct FPropInfoPtr& Ptr);
	static int32 GetInteractionOffsetY(const struct FPropInfoPtr& Ptr);
	static int32 GetInteractionOffsetZ(const struct FPropInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetInteractionPropMotionResource(const struct FPropInfoPtr& Ptr);
	static int32 GetInteractionRadius(const struct FPropInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetInteractionUserMotionResource(const struct FPropInfoPtr& Ptr);
	static bool GetIsPossibleAttackReaction(const struct FPropInfoPtr& Ptr);
	static bool GetIsPossibleAttackResistance(const struct FPropInfoPtr& Ptr);
	static bool GetIsPossibleBlocking(const struct FPropInfoPtr& Ptr);
	static bool GetIsPossibleBlockingRemains(const struct FPropInfoPtr& Ptr);
	static bool GetIsPossibleDeath(const struct FPropInfoPtr& Ptr);
	static bool GetIsPossiblePhysicalReaction(const struct FPropInfoPtr& Ptr);
	static bool GetIsPossiblePhysicalReactionRemains(const struct FPropInfoPtr& Ptr);
	static int32 GetMaintainTimeAfterDeath(const struct FPropInfoPtr& Ptr);
	static int32 GetMass(const struct FPropInfoPtr& Ptr);
	static EFxBranchType GetMaterial(const struct FPropInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetModelResource(const struct FPropInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetMotionResource(const struct FPropInfoPtr& Ptr);
	static const TSoftClassPtr<class UClass> GetPropClass(const struct FPropInfoPtr& Ptr);
	static bool GetRespawnEnable(const struct FPropInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetSoundResource(const struct FPropInfoPtr& Ptr);
	static int32 GetState(const struct FPropInfoPtr& Ptr);
	static bool GetStateFreezing(const struct FPropInfoPtr& Ptr);
	static bool IsValid(const struct FPropInfoPtr& Ptr);
	static void IsValidBranch(const struct FPropInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropInfoPtrFuncLibrary")
	}
	static class UPropInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropInfoPtrFuncLibrary;

// Class ProjectPContentInfo.DLCItemPackagePtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDLCItemPackagePtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FDLCItemPackagePtr& Ptr);
	static int32 GetCount(const struct FDLCItemPackagePtr& Ptr);
	static int32 GetPrintOrder(const struct FDLCItemPackagePtr& Ptr);
	static bool IsValid(const struct FDLCItemPackagePtr& Ptr);
	static void IsValidBranch(const struct FDLCItemPackagePtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DLCItemPackagePtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DLCItemPackagePtrFuncLibrary")
	}
	static class UDLCItemPackagePtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDLCItemPackagePtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDLCItemPackagePtrFuncLibrary;

// Class ProjectPContentInfo.DLCWeaponPackageFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDLCWeaponPackageFuncLibrary final : public UObject
{
public:
	static const class FName GetBladeCodeName(const struct FDLCWeaponPackage& Info);
	static const class FName GetHandleCodeName(const struct FDLCWeaponPackage& Info);
	static int32 GetPrintOrder(const struct FDLCWeaponPackage& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DLCWeaponPackageFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DLCWeaponPackageFuncLibrary")
	}
	static class UDLCWeaponPackageFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDLCWeaponPackageFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDLCWeaponPackageFuncLibrary;

// Class ProjectPContentInfo.LocomotionListInfoAsset
// 0x0068 (0x00E0 - 0x0078)
class alignas(0x10) ULocomotionListInfoAsset final : public UContentInfoAsset
{
public:
	struct FLocomotionListInfoDB                  ContentInfoDB;                                     // 0x0078(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FNPCLocomotionListInfo> GetNPCLocomotionListInfoArrayBP();
	static const TArray<struct FPCLocomotionListInfo> GetPCLocomotionListInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LocomotionListInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LocomotionListInfoAsset")
	}
	static class ULocomotionListInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocomotionListInfoAsset>();
	}
};
DUMPER7_ASSERTS_ULocomotionListInfoAsset;

// Class ProjectPContentInfo.DLCWeaponPackagePtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDLCWeaponPackagePtrFuncLibrary final : public UObject
{
public:
	static const class FName GetBladeCodeName(const struct FDLCWeaponPackagePtr& Ptr);
	static const class FName GetHandleCodeName(const struct FDLCWeaponPackagePtr& Ptr);
	static int32 GetPrintOrder(const struct FDLCWeaponPackagePtr& Ptr);
	static bool IsValid(const struct FDLCWeaponPackagePtr& Ptr);
	static void IsValidBranch(const struct FDLCWeaponPackagePtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DLCWeaponPackagePtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DLCWeaponPackagePtrFuncLibrary")
	}
	static class UDLCWeaponPackagePtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDLCWeaponPackagePtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDLCWeaponPackagePtrFuncLibrary;

// Class ProjectPContentInfo.DLCInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDLCInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FDLCInfo& Info);
	static const TArray<struct FDLCItemPackage> GetItemListArray(const struct FDLCInfo& Info);
	static class FString GetLocalTextName(const struct FDLCInfo& Info);
	static const class FName GetLocalTextNameCn(const struct FDLCInfo& Info);
	static class FText GetLocalTextNameLocalize(const struct FDLCInfo& Info);
	static class FString GetPlaystationKey(const struct FDLCInfo& Info);
	static class FString GetSteamKey(const struct FDLCInfo& Info);
	static const TArray<struct FDLCWeaponPackage> GetWeaponListArray(const struct FDLCInfo& Info);
	static class FString GetXboxKey(const struct FDLCInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DLCInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DLCInfoFuncLibrary")
	}
	static class UDLCInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDLCInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDLCInfoFuncLibrary;

// Class ProjectPContentInfo.PropLadderInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UPropLadderInfoAsset final : public UContentInfoAsset
{
public:
	struct FPropLadderInfoDB                      ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FPropLadderInfo> GetPropLadderInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropLadderInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropLadderInfoAsset")
	}
	static class UPropLadderInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropLadderInfoAsset>();
	}
};
DUMPER7_ASSERTS_UPropLadderInfoAsset;

// Class ProjectPContentInfo.DLCInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDLCInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FDLCInfoPtr& Ptr);
	static const TArray<struct FDLCItemPackage> GetItemListArray(const struct FDLCInfoPtr& Ptr);
	static class FString GetLocalTextName(const struct FDLCInfoPtr& Ptr);
	static const class FName GetLocalTextNameCn(const struct FDLCInfoPtr& Ptr);
	static class FText GetLocalTextNameLocalize(const struct FDLCInfoPtr& Ptr);
	static class FString GetPlaystationKey(const struct FDLCInfoPtr& Ptr);
	static class FString GetSteamKey(const struct FDLCInfoPtr& Ptr);
	static const TArray<struct FDLCWeaponPackage> GetWeaponListArray(const struct FDLCInfoPtr& Ptr);
	static class FString GetXboxKey(const struct FDLCInfoPtr& Ptr);
	static bool IsValid(const struct FDLCInfoPtr& Ptr);
	static void IsValidBranch(const struct FDLCInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DLCInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DLCInfoPtrFuncLibrary")
	}
	static class UDLCInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDLCInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDLCInfoPtrFuncLibrary;

// Class ProjectPContentInfo.DLCInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UDLCInfoAsset final : public UContentInfoAsset
{
public:
	struct FDLCInfoDB                             ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FDLCInfoPtr FindDLCInfoByNameBP(class FName CodeName);
	static const TArray<struct FDLCInfo> GetDLCInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DLCInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DLCInfoAsset")
	}
	static class UDLCInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDLCInfoAsset>();
	}
};
DUMPER7_ASSERTS_UDLCInfoAsset;

// Class ProjectPContentInfo.PropDoorInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UPropDoorInfoAsset final : public UContentInfoAsset
{
public:
	struct FPropDoorInfoDB                        ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FPropDoorInfo> GetPropDoorInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropDoorInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropDoorInfoAsset")
	}
	static class UPropDoorInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropDoorInfoAsset>();
	}
};
DUMPER7_ASSERTS_UPropDoorInfoAsset;

// Class ProjectPContentInfo.DynamicDamageVolumeInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDynamicDamageVolumeInfoFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalStateBuildUpAttack(const struct FDynamicDamageVolumeInfo& Info);
	static const class FName GetAbnormalStateCodeName(const struct FDynamicDamageVolumeInfo& Info);
	static int32 GetAbnormalStatePenaltyBase(const struct FDynamicDamageVolumeInfo& Info);
	static int32 GetAcidAttack(const struct FDynamicDamageVolumeInfo& Info);
	static const TSoftClassPtr<class UClass> GetBlueprintClass(const struct FDynamicDamageVolumeInfo& Info);
	static int32 GetBuildUpRecoverIncBase(const struct FDynamicDamageVolumeInfo& Info);
	static const class FName GetCodeName(const struct FDynamicDamageVolumeInfo& Info);
	static int32 GetDestructionPower(const struct FDynamicDamageVolumeInfo& Info);
	static int32 GetDuration(const struct FDynamicDamageVolumeInfo& Info);
	static int32 GetElectricAttack(const struct FDynamicDamageVolumeInfo& Info);
	static int32 GetFireAttack(const struct FDynamicDamageVolumeInfo& Info);
	static int32 GetPhysicalAttack(const struct FDynamicDamageVolumeInfo& Info);
	static ELPhysicalDamageType GetPhysicalAttackSubtype(const struct FDynamicDamageVolumeInfo& Info);
	static int32 GetSkillHitApplyTickTime(const struct FDynamicDamageVolumeInfo& Info);
	static const class FName GetSkillHitCodeName(const struct FDynamicDamageVolumeInfo& Info);
	static int32 GetToughRecoveryDelayTime(const struct FDynamicDamageVolumeInfo& Info);
	static float GetVolumeRadius(const struct FDynamicDamageVolumeInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DynamicDamageVolumeInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DynamicDamageVolumeInfoFuncLibrary")
	}
	static class UDynamicDamageVolumeInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicDamageVolumeInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDynamicDamageVolumeInfoFuncLibrary;

// Class ProjectPContentInfo.DynamicDamageVolumeInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDynamicDamageVolumeInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalStateBuildUpAttack(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static const class FName GetAbnormalStateCodeName(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static int32 GetAbnormalStatePenaltyBase(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static int32 GetAcidAttack(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static const TSoftClassPtr<class UClass> GetBlueprintClass(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static int32 GetBuildUpRecoverIncBase(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static int32 GetDestructionPower(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static int32 GetDuration(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static int32 GetElectricAttack(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static int32 GetFireAttack(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static int32 GetPhysicalAttack(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static ELPhysicalDamageType GetPhysicalAttackSubtype(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static int32 GetSkillHitApplyTickTime(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static const class FName GetSkillHitCodeName(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static int32 GetToughRecoveryDelayTime(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static float GetVolumeRadius(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static bool IsValid(const struct FDynamicDamageVolumeInfoPtr& Ptr);
	static void IsValidBranch(const struct FDynamicDamageVolumeInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DynamicDamageVolumeInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DynamicDamageVolumeInfoPtrFuncLibrary")
	}
	static class UDynamicDamageVolumeInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicDamageVolumeInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDynamicDamageVolumeInfoPtrFuncLibrary;

// Class ProjectPContentInfo.NPCLocomotionListInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNPCLocomotionListInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetAnimState(const struct FNPCLocomotionListInfo& Info);
	static const class FName GetMachine(const struct FNPCLocomotionListInfo& Info);
	static const class FName GetOverrideAnimName(const struct FNPCLocomotionListInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCLocomotionListInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCLocomotionListInfoFuncLibrary")
	}
	static class UNPCLocomotionListInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCLocomotionListInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNPCLocomotionListInfoFuncLibrary;

// Class ProjectPContentInfo.DynamicDamageVolumeInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UDynamicDamageVolumeInfoAsset final : public UContentInfoAsset
{
public:
	struct FDynamicDamageVolumeInfoDB             ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FDynamicDamageVolumeInfoPtr FindDynamicDamageVolumeInfoByNameBP(class FName CodeName);
	static const TArray<struct FDynamicDamageVolumeInfo> GetDynamicDamageVolumeInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DynamicDamageVolumeInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DynamicDamageVolumeInfoAsset")
	}
	static class UDynamicDamageVolumeInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicDamageVolumeInfoAsset>();
	}
};
DUMPER7_ASSERTS_UDynamicDamageVolumeInfoAsset;

// Class ProjectPContentInfo.ElementalAttackSettingInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UElementalAttackSettingInfoFuncLibrary final : public UObject
{
public:
	static int32 GetDmgNormalizeBase(const struct FElementalAttackSettingInfo& Info);
	static float GetDmgNormalizeExponent(const struct FElementalAttackSettingInfo& Info);
	static int32 GetDmgToBuildupRatio(const struct FElementalAttackSettingInfo& Info);
	static const class FName GetElementType(const struct FElementalAttackSettingInfo& Info);
	static int32 GetMinRatioToBuildup(const struct FElementalAttackSettingInfo& Info);
	static const class FName GetNpcAddAbnormalState(const struct FElementalAttackSettingInfo& Info);
	static const class FName GetPcAddAbnormalState(const struct FElementalAttackSettingInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ElementalAttackSettingInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ElementalAttackSettingInfoFuncLibrary")
	}
	static class UElementalAttackSettingInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UElementalAttackSettingInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UElementalAttackSettingInfoFuncLibrary;

// Class ProjectPContentInfo.NGPKeepConfigInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNGPKeepConfigInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FNGPKeepConfigInfoPtr& Ptr);
	static bool GetKeepAppearance(const struct FNGPKeepConfigInfoPtr& Ptr);
	static bool GetKeepErgo(const struct FNGPKeepConfigInfoPtr& Ptr);
	static const TArray<ELItemFirstCategory> GetKeepItemByItemFirstCategory(const struct FNGPKeepConfigInfoPtr& Ptr);
	static const TArray<class FString> GetKeepItemSpotList(const struct FNGPKeepConfigInfoPtr& Ptr);
	static bool GetKeepLevelAndStat(const struct FNGPKeepConfigInfoPtr& Ptr);
	static const TArray<class FString> GetKeepNPCSpotList(const struct FNGPKeepConfigInfoPtr& Ptr);
	static bool GetKeepPOganOpenLevel(const struct FNGPKeepConfigInfoPtr& Ptr);
	static bool GetKeepPOganQuartz(const struct FNGPKeepConfigInfoPtr& Ptr);
	static const TArray<class FString> GetKeepPropSpotList(const struct FNGPKeepConfigInfoPtr& Ptr);
	static const TArray<class FName> GetKeepQuest(const struct FNGPKeepConfigInfoPtr& Ptr);
	static const TArray<class FName> GetKeepSpecialBuffList(const struct FNGPKeepConfigInfoPtr& Ptr);
	static bool GetKeepTutorialRecord(const struct FNGPKeepConfigInfoPtr& Ptr);
	static const class FName GetNewGameExecCommonCodeName(const struct FNGPKeepConfigInfoPtr& Ptr);
	static bool IsValid(const struct FNGPKeepConfigInfoPtr& Ptr);
	static void IsValidBranch(const struct FNGPKeepConfigInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NGPKeepConfigInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NGPKeepConfigInfoPtrFuncLibrary")
	}
	static class UNGPKeepConfigInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGPKeepConfigInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNGPKeepConfigInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ElementalAttackSettingInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UElementalAttackSettingInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetDmgNormalizeBase(const struct FElementalAttackSettingInfoPtr& Ptr);
	static float GetDmgNormalizeExponent(const struct FElementalAttackSettingInfoPtr& Ptr);
	static int32 GetDmgToBuildupRatio(const struct FElementalAttackSettingInfoPtr& Ptr);
	static const class FName GetElementType(const struct FElementalAttackSettingInfoPtr& Ptr);
	static int32 GetMinRatioToBuildup(const struct FElementalAttackSettingInfoPtr& Ptr);
	static const class FName GetNpcAddAbnormalState(const struct FElementalAttackSettingInfoPtr& Ptr);
	static const class FName GetPcAddAbnormalState(const struct FElementalAttackSettingInfoPtr& Ptr);
	static bool IsValid(const struct FElementalAttackSettingInfoPtr& Ptr);
	static void IsValidBranch(const struct FElementalAttackSettingInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ElementalAttackSettingInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ElementalAttackSettingInfoPtrFuncLibrary")
	}
	static class UElementalAttackSettingInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UElementalAttackSettingInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UElementalAttackSettingInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ElementalAttackSettingInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UElementalAttackSettingInfoAsset final : public UContentInfoAsset
{
public:
	struct FElementalAttackSettingInfoDB          ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FElementalAttackSettingInfoPtr FindElementalAttackSettingInfoByNameBP(class FName CodeName);
	static const TArray<struct FElementalAttackSettingInfo> GetElementalAttackSettingInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ElementalAttackSettingInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ElementalAttackSettingInfoAsset")
	}
	static class UElementalAttackSettingInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UElementalAttackSettingInfoAsset>();
	}
};
DUMPER7_ASSERTS_UElementalAttackSettingInfoAsset;

// Class ProjectPContentInfo.MomentConditionInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UMomentConditionInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FMomentConditionInfoPtr& Ptr);
	static EFactionType GetFaction(const struct FMomentConditionInfoPtr& Ptr);
	static ENPCGradeType GetGrade(const struct FMomentConditionInfoPtr& Ptr);
	static bool GetHitGroggy(const struct FMomentConditionInfoPtr& Ptr);
	static bool GetIsBack(const struct FMomentConditionInfoPtr& Ptr);
	static bool GetIsGroggy(const struct FMomentConditionInfoPtr& Ptr);
	static bool GetIsGroggyEnable(const struct FMomentConditionInfoPtr& Ptr);
	static bool GetIsSubSwing(const struct FMomentConditionInfoPtr& Ptr);
	static bool GetIsSubThrust(const struct FMomentConditionInfoPtr& Ptr);
	static ELMomentType GetMomentType(const struct FMomentConditionInfoPtr& Ptr);
	static const class FName GetNpcCodename(const struct FMomentConditionInfoPtr& Ptr);
	static int32 GetSkillHitConditionGroup1(const struct FMomentConditionInfoPtr& Ptr);
	static int32 GetSkillHitConditionGroup2(const struct FMomentConditionInfoPtr& Ptr);
	static int32 GetSkillHitConditionGroup3(const struct FMomentConditionInfoPtr& Ptr);
	static int32 GetSkillHitConditionGroup4(const struct FMomentConditionInfoPtr& Ptr);
	static ELActionCategory GetUseSkillActionCategory(const struct FMomentConditionInfoPtr& Ptr);
	static const class FName GetUseSkillCodeName(const struct FMomentConditionInfoPtr& Ptr);
	static bool IsValid(const struct FMomentConditionInfoPtr& Ptr);
	static void IsValidBranch(const struct FMomentConditionInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MomentConditionInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MomentConditionInfoPtrFuncLibrary")
	}
	static class UMomentConditionInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMomentConditionInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UMomentConditionInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ExiledNpcInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UExiledNpcInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetExiledNpcCodeName(const struct FExiledNpcInfo& Info);
	static int32 GetIndex(const struct FExiledNpcInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ExiledNpcInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ExiledNpcInfoFuncLibrary")
	}
	static class UExiledNpcInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExiledNpcInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UExiledNpcInfoFuncLibrary;

// Class ProjectPContentInfo.ExiledNpcInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UExiledNpcInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetExiledNpcCodeName(const struct FExiledNpcInfoPtr& Ptr);
	static int32 GetIndex(const struct FExiledNpcInfoPtr& Ptr);
	static bool IsValid(const struct FExiledNpcInfoPtr& Ptr);
	static void IsValidBranch(const struct FExiledNpcInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ExiledNpcInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ExiledNpcInfoPtrFuncLibrary")
	}
	static class UExiledNpcInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExiledNpcInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UExiledNpcInfoPtrFuncLibrary;

// Class ProjectPContentInfo.PCLocomotionListInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPCLocomotionListInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetAnimState(const struct FPCLocomotionListInfo& Info);
	static const class FName GetMachine(const struct FPCLocomotionListInfo& Info);
	static const class FName GetOverrideAnimName(const struct FPCLocomotionListInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PCLocomotionListInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PCLocomotionListInfoFuncLibrary")
	}
	static class UPCLocomotionListInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCLocomotionListInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPCLocomotionListInfoFuncLibrary;

// Class ProjectPContentInfo.ExiledNpcSpotInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UExiledNpcSpotInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetExiledNpcSpotCodeName(const struct FExiledNpcSpotInfo& Info);
	static int32 GetIndex(const struct FExiledNpcSpotInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ExiledNpcSpotInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ExiledNpcSpotInfoFuncLibrary")
	}
	static class UExiledNpcSpotInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExiledNpcSpotInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UExiledNpcSpotInfoFuncLibrary;

// Class ProjectPContentInfo.ExiledNpcSpotInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UExiledNpcSpotInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetExiledNpcSpotCodeName(const struct FExiledNpcSpotInfoPtr& Ptr);
	static int32 GetIndex(const struct FExiledNpcSpotInfoPtr& Ptr);
	static bool IsValid(const struct FExiledNpcSpotInfoPtr& Ptr);
	static void IsValidBranch(const struct FExiledNpcSpotInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ExiledNpcSpotInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ExiledNpcSpotInfoPtrFuncLibrary")
	}
	static class UExiledNpcSpotInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExiledNpcSpotInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UExiledNpcSpotInfoPtrFuncLibrary;

// Class ProjectPContentInfo.MovieResourceInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UMovieResourceInfoAsset final : public UContentInfoAsset
{
public:
	struct FMovieResourceInfoDB                   ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FMovieResourceInfoPtr FindMovieResourceInfoByNameBP(class FName CodeName);
	static const TArray<struct FMovieResourceInfo> GetMovieResourceInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MovieResourceInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MovieResourceInfoAsset")
	}
	static class UMovieResourceInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieResourceInfoAsset>();
	}
};
DUMPER7_ASSERTS_UMovieResourceInfoAsset;

// Class ProjectPContentInfo.ExiledNpcInfoAsset
// 0x0068 (0x00E0 - 0x0078)
class alignas(0x10) UExiledNpcInfoAsset final : public UContentInfoAsset
{
public:
	struct FExiledNpcInfoDB                       ContentInfoDB;                                     // 0x0078(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FExiledNpcInfo> GetExiledNpcInfoArrayBP();
	static const TArray<struct FExiledNpcSpotInfo> GetExiledNpcSpotInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ExiledNpcInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ExiledNpcInfoAsset")
	}
	static class UExiledNpcInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExiledNpcInfoAsset>();
	}
};
DUMPER7_ASSERTS_UExiledNpcInfoAsset;

// Class ProjectPContentInfo.FallingHeightDamageInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFallingHeightDamageInfoFuncLibrary final : public UObject
{
public:
	static int32 GetFallHeightDmgRatio(const struct FFallingHeightDamageInfo& Info);
	static int32 GetFallingHeight(const struct FFallingHeightDamageInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FallingHeightDamageInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FallingHeightDamageInfoFuncLibrary")
	}
	static class UFallingHeightDamageInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFallingHeightDamageInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFallingHeightDamageInfoFuncLibrary;

// Class ProjectPContentInfo.NPCInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNPCInfoFuncLibrary final : public UObject
{
public:
	static const TSoftClassPtr<class UClass> GetAiStatemachine(const struct FNPCInfo& Info);
	static float GetAlwaysGuardAngle(const struct FNPCInfo& Info);
	static const class FName GetAlwaysGuardAttachSlot(const struct FNPCInfo& Info);
	static float GetAlwaysGuardBoxX(const struct FNPCInfo& Info);
	static float GetAlwaysGuardBoxY(const struct FNPCInfo& Info);
	static float GetAlwaysGuardBoxZ(const struct FNPCInfo& Info);
	static ELAlwaysGuardDirection GetAlwaysGuardDirection(const struct FNPCInfo& Info);
	static float GetArriveCheckRange(const struct FNPCInfo& Info);
	static int32 GetCheckSkillUseCount(const struct FNPCInfo& Info);
	static int32 GetCheckTargetNearAllyNum(const struct FNPCInfo& Info);
	static const class FName GetCodeName(const struct FNPCInfo& Info);
	static const class FName GetCommonActionPathCodeName(const struct FNPCInfo& Info);
	static bool GetDeadHelpsignal(const struct FNPCInfo& Info);
	static bool GetDieImmediatelyHide(const struct FNPCInfo& Info);
	static bool GetDontUseCheckAllyNum(const struct FNPCInfo& Info);
	static bool GetExceptCheckAllyNum(const struct FNPCInfo& Info);
	static bool GetExplosiveKillPossible(const struct FNPCInfo& Info);
	static EFactionType GetFaction(const struct FNPCInfo& Info);
	static int32 GetFatalBehitEnableCooltime(const struct FNPCInfo& Info);
	static ELFatalEnableCondType GetFatalEnableCondType(const struct FNPCInfo& Info);
	static ELFatalHitType GetFatalHitType(const struct FNPCInfo& Info);
	static ELNpcFXSizeType GetFxSize(const struct FNPCInfo& Info);
	static const struct FFloatRangeValue GetGlobalCooltime(const struct FNPCInfo& Info);
	static ENPCGradeType GetGrade(const struct FNPCInfo& Info);
	static ELGrapplegunHitType GetGrapplegunHitType(const struct FNPCInfo& Info);
	static int32 GetGroggyEnableResetRestore(const struct FNPCInfo& Info);
	static int32 GetGroggyEnableTime(const struct FNPCInfo& Info);
	static int32 GetGroggyFxScale(const struct FNPCInfo& Info);
	static const struct FFloatRangeValue GetGroggyMaintainTime(const struct FNPCInfo& Info);
	static int32 GetGroggySndScale(const struct FNPCInfo& Info);
	static ELGroggyType GetGroggyTypeBack(const struct FNPCInfo& Info);
	static ELGroggyType GetGroggyTypeFront(const struct FNPCInfo& Info);
	static ELGroggyType GetGroggyTypeSide(const struct FNPCInfo& Info);
	static int32 GetGuardDurationRatio(const struct FNPCInfo& Info);
	static ELHeadTagVisibleType GetHeadtagVisibleType(const struct FNPCInfo& Info);
	static bool GetHelpsignalEnable(const struct FNPCInfo& Info);
	static float GetHelpsignalRange(const struct FNPCInfo& Info);
	static ELSwingPowerType GetHitFxLevel(const struct FNPCInfo& Info);
	static int32 GetHitRepulseLevelPierce(const struct FNPCInfo& Info);
	static int32 GetHitRepulseLevelSlash(const struct FNPCInfo& Info);
	static int32 GetHitRepulseLevelStrike(const struct FNPCInfo& Info);
	static ELHPUIType GetHpUiType(const struct FNPCInfo& Info);
	static const class FName GetImmuneCodeName(const struct FNPCInfo& Info);
	static const TArray<class FName> GetInitAbnormalCodeName(const struct FNPCInfo& Info);
	static class FString GetLocalTextName(const struct FNPCInfo& Info);
	static const class FName GetLocalTextNameCn(const struct FNPCInfo& Info);
	static class FText GetLocalTextNameLocalize(const struct FNPCInfo& Info);
	static const class FName GetLocomotionActionPathCodeName(const struct FNPCInfo& Info);
	static bool GetMoveHeightCheck(const struct FNPCInfo& Info);
	static const class FName GetNpcAssetTableCodeName(const struct FNPCInfo& Info);
	static int32 GetNpcBackGroggyPointRatio(const struct FNPCInfo& Info);
	static const TSoftClassPtr<class UClass> GetNpcBp(const struct FNPCInfo& Info);
	static ELNpcDisappearType GetNpcDisappearType(const struct FNPCInfo& Info);
	static int32 GetNpcFrontGroggyPointRatio(const struct FNPCInfo& Info);
	static ELNPCType GetNpcKind(const struct FNPCInfo& Info);
	static int32 GetNpcScale(const struct FNPCInfo& Info);
	static int32 GetNpcSideGroggyPointRatio(const struct FNPCInfo& Info);
	static int32 GetPerfectGuardGroggyDamage(const struct FNPCInfo& Info);
	static bool GetPlayBgm(const struct FNPCInfo& Info);
	static float GetPursuitDistance(const struct FNPCInfo& Info);
	static bool GetRespawnEnable(const struct FNPCInfo& Info);
	static float GetReturnDistance(const struct FNPCInfo& Info);
	static int32 GetRoamRange(const struct FNPCInfo& Info);
	static int32 GetRotateAngle(const struct FNPCInfo& Info);
	static int32 GetRotateCooltime(const struct FNPCInfo& Info);
	static float GetRunSpeedCombat(const struct FNPCInfo& Info);
	static float GetRunSpeedPeace(const struct FNPCInfo& Info);
	static float GetRunSpeedWarning(const struct FNPCInfo& Info);
	static float GetSensitiveRange(const struct FNPCInfo& Info);
	static float GetSensitiveSpeed(const struct FNPCInfo& Info);
	static float GetSensitiveTime(const struct FNPCInfo& Info);
	static int32 GetSharpnessMonsterDamageRatioPierce(const struct FNPCInfo& Info);
	static int32 GetSharpnessMonsterDamageRatioSlash(const struct FNPCInfo& Info);
	static int32 GetSharpnessMonsterDamageRatioStrike(const struct FNPCInfo& Info);
	static float GetSightAngle(const struct FNPCInfo& Info);
	static float GetSightDistanceCombat(const struct FNPCInfo& Info);
	static float GetSightDistancePeace(const struct FNPCInfo& Info);
	static float GetSightDistanceWarning(const struct FNPCInfo& Info);
	static float GetSightHeight(const struct FNPCInfo& Info);
	static const class FName GetSkillActionPathCodeName(const struct FNPCInfo& Info);
	static const class FName GetSkillHitCodeNameDestroyed(const struct FNPCInfo& Info);
	static const TArray<struct FNPCSkillStandbyInfo> GetSkillListArray(const struct FNPCInfo& Info);
	static const class FName GetSpawnIdleCodeName(const struct FNPCInfo& Info);
	static const TArray<class FName> GetSpawnNpcCodeName(const struct FNPCInfo& Info);
	static float GetStrafeMoveDist(const struct FNPCInfo& Info);
	static const class FName GetSwapNpcCodeName(const struct FNPCInfo& Info);
	static float GetTargetdecisionRange(const struct FNPCInfo& Info);
	static int32 GetTargetdecisionTimeMax(const struct FNPCInfo& Info);
	static int32 GetTargetdecisionTimeMin(const struct FNPCInfo& Info);
	static ELNpcTargetDecisionType GetTargetDecisionType(const struct FNPCInfo& Info);
	static float GetTargetDetectRangeCombat(const struct FNPCInfo& Info);
	static float GetTargetDetectRangePeace(const struct FNPCInfo& Info);
	static float GetTargetDetectRangeWarning(const struct FNPCInfo& Info);
	static int32 GetTicketMoveDist(const struct FNPCInfo& Info);
	static ELToughMotionType GetToughMotionType(const struct FNPCInfo& Info);
	static bool GetUsePhysicsHit(const struct FNPCInfo& Info);
	static float GetWalkSpeedCombat(const struct FNPCInfo& Info);
	static float GetWalkSpeedPeace(const struct FNPCInfo& Info);
	static float GetWalkSpeedWarning(const struct FNPCInfo& Info);
	static ELWeaponBreakMotionType GetWeaponBreakMotionType(const struct FNPCInfo& Info);
	static const class FName GetWeaponCodeNameEx1(const struct FNPCInfo& Info);
	static const class FName GetWeaponCodeNameEx2(const struct FNPCInfo& Info);
	static const class FName GetWeaponCodeNameEx3(const struct FNPCInfo& Info);
	static const class FName GetWeaponCodeNameL(const struct FNPCInfo& Info);
	static const class FName GetWeaponCodeNameR(const struct FNPCInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCInfoFuncLibrary")
	}
	static class UNPCInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNPCInfoFuncLibrary;

// Class ProjectPContentInfo.FallingHeightDamageInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFallingHeightDamageInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetFallHeightDmgRatio(const struct FFallingHeightDamageInfoPtr& Ptr);
	static int32 GetFallingHeight(const struct FFallingHeightDamageInfoPtr& Ptr);
	static bool IsValid(const struct FFallingHeightDamageInfoPtr& Ptr);
	static void IsValidBranch(const struct FFallingHeightDamageInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FallingHeightDamageInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FallingHeightDamageInfoPtrFuncLibrary")
	}
	static class UFallingHeightDamageInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFallingHeightDamageInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFallingHeightDamageInfoPtrFuncLibrary;

// Class ProjectPContentInfo.FallingHeightDamageInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UFallingHeightDamageInfoAsset final : public UContentInfoAsset
{
public:
	struct FFallingHeightDamageInfoDB             ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FFallingHeightDamageInfo> GetFallingHeightDamageInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FallingHeightDamageInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FallingHeightDamageInfoAsset")
	}
	static class UFallingHeightDamageInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFallingHeightDamageInfoAsset>();
	}
};
DUMPER7_ASSERTS_UFallingHeightDamageInfoAsset;

// Class ProjectPContentInfo.NGPContentChangeInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNGPContentChangeInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalStateBuildUpAttackMul(const struct FNGPContentChangeInfoPtr& Ptr);
	static int32 GetAcidAttackMul(const struct FNGPContentChangeInfoPtr& Ptr);
	static int32 GetAcidDebuffResistMul(const struct FNGPContentChangeInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FNGPContentChangeInfoPtr& Ptr);
	static int32 GetContaminationDebuffResistMul(const struct FNGPContentChangeInfoPtr& Ptr);
	static int32 GetCurseDebuffResistMul(const struct FNGPContentChangeInfoPtr& Ptr);
	static int32 GetElectricAttackMul(const struct FNGPContentChangeInfoPtr& Ptr);
	static int32 GetElectricDebuffResistMul(const struct FNGPContentChangeInfoPtr& Ptr);
	static int32 GetExpMul(const struct FNGPContentChangeInfoPtr& Ptr);
	static int32 GetFireAttackMul(const struct FNGPContentChangeInfoPtr& Ptr);
	static int32 GetFireDebuffResistMul(const struct FNGPContentChangeInfoPtr& Ptr);
	static int32 GetHealthPowerMul(const struct FNGPContentChangeInfoPtr& Ptr);
	static int32 GetNGPDetailIndex(const struct FNGPContentChangeInfoPtr& Ptr);
	static int32 GetNGPRound(const struct FNGPContentChangeInfoPtr& Ptr);
	static int32 GetPhysicalPowerMul(const struct FNGPContentChangeInfoPtr& Ptr);
	static bool IsValid(const struct FNGPContentChangeInfoPtr& Ptr);
	static void IsValidBranch(const struct FNGPContentChangeInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NGPContentChangeInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NGPContentChangeInfoPtrFuncLibrary")
	}
	static class UNGPContentChangeInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGPContentChangeInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNGPContentChangeInfoPtrFuncLibrary;

// Class ProjectPContentInfo.FallingMotionTransitionInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFallingMotionTransitionInfoFuncLibrary final : public UObject
{
public:
	static ELActionCategory GetConditionActionCategory(const struct FFallingMotionTransitionInfo& Info);
	static const class FName GetConditionActionState(const struct FFallingMotionTransitionInfo& Info);
	static bool GetConditionBackHit(const struct FFallingMotionTransitionInfo& Info);
	static const class FName GetConditionCommonActionMontage(const struct FFallingMotionTransitionInfo& Info);
	static const class FName GetFallingAction(const struct FFallingMotionTransitionInfo& Info);
	static const class FName GetLandDieHeavy(const struct FFallingMotionTransitionInfo& Info);
	static const class FName GetLandDieLight(const struct FFallingMotionTransitionInfo& Info);
	static const class FName GetLandHeavy(const struct FFallingMotionTransitionInfo& Info);
	static const class FName GetLandLight(const struct FFallingMotionTransitionInfo& Info);
	static float GetLeastLandingHeight(const struct FFallingMotionTransitionInfo& Info);
	static int32 GetPriority(const struct FFallingMotionTransitionInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FallingMotionTransitionInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FallingMotionTransitionInfoFuncLibrary")
	}
	static class UFallingMotionTransitionInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFallingMotionTransitionInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFallingMotionTransitionInfoFuncLibrary;

// Class ProjectPContentInfo.FallingMotionTransitionInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFallingMotionTransitionInfoPtrFuncLibrary final : public UObject
{
public:
	static ELActionCategory GetConditionActionCategory(const struct FFallingMotionTransitionInfoPtr& Ptr);
	static const class FName GetConditionActionState(const struct FFallingMotionTransitionInfoPtr& Ptr);
	static bool GetConditionBackHit(const struct FFallingMotionTransitionInfoPtr& Ptr);
	static const class FName GetConditionCommonActionMontage(const struct FFallingMotionTransitionInfoPtr& Ptr);
	static const class FName GetFallingAction(const struct FFallingMotionTransitionInfoPtr& Ptr);
	static const class FName GetLandDieHeavy(const struct FFallingMotionTransitionInfoPtr& Ptr);
	static const class FName GetLandDieLight(const struct FFallingMotionTransitionInfoPtr& Ptr);
	static const class FName GetLandHeavy(const struct FFallingMotionTransitionInfoPtr& Ptr);
	static const class FName GetLandLight(const struct FFallingMotionTransitionInfoPtr& Ptr);
	static float GetLeastLandingHeight(const struct FFallingMotionTransitionInfoPtr& Ptr);
	static int32 GetPriority(const struct FFallingMotionTransitionInfoPtr& Ptr);
	static bool IsValid(const struct FFallingMotionTransitionInfoPtr& Ptr);
	static void IsValidBranch(const struct FFallingMotionTransitionInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FallingMotionTransitionInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FallingMotionTransitionInfoPtrFuncLibrary")
	}
	static class UFallingMotionTransitionInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFallingMotionTransitionInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFallingMotionTransitionInfoPtrFuncLibrary;

// Class ProjectPContentInfo.MovieResourceInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UMovieResourceInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetAfterCommandExec(const struct FMovieResourceInfo& Info);
	static bool GetCanSkip(const struct FMovieResourceInfo& Info);
	static const class FName GetCodeName(const struct FMovieResourceInfo& Info);
	static const class FName GetDisableSkipCondition(const struct FMovieResourceInfo& Info);
	static bool GetGameProcessPause(const struct FMovieResourceInfo& Info);
	static bool GetHideHud(const struct FMovieResourceInfo& Info);
	static bool GetLockPlayerAction(const struct FMovieResourceInfo& Info);
	static class FString GetMovieResource(const struct FMovieResourceInfo& Info);
	static bool GetShowHud(const struct FMovieResourceInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MovieResourceInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MovieResourceInfoFuncLibrary")
	}
	static class UMovieResourceInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieResourceInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UMovieResourceInfoFuncLibrary;

// Class ProjectPContentInfo.FallingMotionTransitionInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UFallingMotionTransitionInfoAsset final : public UContentInfoAsset
{
public:
	struct FFallingMotionTransitionInfoDB         ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FFallingMotionTransitionInfo> GetFallingMotionTransitionInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FallingMotionTransitionInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FallingMotionTransitionInfoAsset")
	}
	static class UFallingMotionTransitionInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFallingMotionTransitionInfoAsset>();
	}
};
DUMPER7_ASSERTS_UFallingMotionTransitionInfoAsset;

// Class ProjectPContentInfo.FallingSurfaceDamageInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFallingSurfaceDamageInfoFuncLibrary final : public UObject
{
public:
	static int32 GetFallSurfaceDmgRatio(const struct FFallingSurfaceDamageInfo& Info);
	static ELPhysicalSurfaceType GetSurfaceType(const struct FFallingSurfaceDamageInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FallingSurfaceDamageInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FallingSurfaceDamageInfoFuncLibrary")
	}
	static class UFallingSurfaceDamageInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFallingSurfaceDamageInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFallingSurfaceDamageInfoFuncLibrary;

// Class ProjectPContentInfo.NPCSkillStandbyInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNPCSkillStandbyInfoFuncLibrary final : public UObject
{
public:
	static class FString GetSkillId(const struct FNPCSkillStandbyInfo& Info);
	static int32 GetSkillRate(const struct FNPCSkillStandbyInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCSkillStandbyInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCSkillStandbyInfoFuncLibrary")
	}
	static class UNPCSkillStandbyInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCSkillStandbyInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNPCSkillStandbyInfoFuncLibrary;

// Class ProjectPContentInfo.FallingSurfaceDamageInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFallingSurfaceDamageInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetFallSurfaceDmgRatio(const struct FFallingSurfaceDamageInfoPtr& Ptr);
	static ELPhysicalSurfaceType GetSurfaceType(const struct FFallingSurfaceDamageInfoPtr& Ptr);
	static bool IsValid(const struct FFallingSurfaceDamageInfoPtr& Ptr);
	static void IsValidBranch(const struct FFallingSurfaceDamageInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FallingSurfaceDamageInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FallingSurfaceDamageInfoPtrFuncLibrary")
	}
	static class UFallingSurfaceDamageInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFallingSurfaceDamageInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFallingSurfaceDamageInfoPtrFuncLibrary;

// Class ProjectPContentInfo.FallingSurfaceDamageInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UFallingSurfaceDamageInfoAsset final : public UContentInfoAsset
{
public:
	struct FFallingSurfaceDamageInfoDB            ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FFallingSurfaceDamageInfo> GetFallingSurfaceDamageInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FallingSurfaceDamageInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FallingSurfaceDamageInfoAsset")
	}
	static class UFallingSurfaceDamageInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFallingSurfaceDamageInfoAsset>();
	}
};
DUMPER7_ASSERTS_UFallingSurfaceDamageInfoAsset;

// Class ProjectPContentInfo.NPCPartsInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNPCPartsInfoFuncLibrary final : public UObject
{
public:
	static bool GetAttackerRepulseEnable(const struct FNPCPartsInfo& Info);
	static const class FName GetCodeName(const struct FNPCPartsInfo& Info);
	static bool GetDestroyedOnSpawn(const struct FNPCPartsInfo& Info);
	static bool GetEnableOnSpawn(const struct FNPCPartsInfo& Info);
	static int32 GetGroggyReduce(const struct FNPCPartsInfo& Info);
	static ELNpcPartsHitDirectionType GetHitDirectionType(const struct FNPCPartsInfo& Info);
	static int32 GetHitRangeAngleEnd(const struct FNPCPartsInfo& Info);
	static int32 GetHitRangeAngleStart(const struct FNPCPartsInfo& Info);
	static int32 GetHitRepulseLevelPierce(const struct FNPCPartsInfo& Info);
	static int32 GetHitRepulseLevelSlash(const struct FNPCPartsInfo& Info);
	static int32 GetHitRepulseLevelStrike(const struct FNPCPartsInfo& Info);
	static int32 GetPartsAcidReduce(const struct FNPCPartsInfo& Info);
	static const class FName GetPartsBpCodeName(const struct FNPCPartsInfo& Info);
	static int32 GetPartsBreakActionParalyze(const struct FNPCPartsInfo& Info);
	static bool GetPartsDamageToMonsterUse(const struct FNPCPartsInfo& Info);
	static int32 GetPartsDestructionIndex(const struct FNPCPartsInfo& Info);
	static int32 GetPartsDropItemLimit(const struct FNPCPartsInfo& Info);
	static const class FName GetPartsDropItemOnDestroy(const struct FNPCPartsInfo& Info);
	static int32 GetPartsDropItemProbility(const struct FNPCPartsInfo& Info);
	static bool GetPartsDropItemRedropUse(const struct FNPCPartsInfo& Info);
	static int32 GetPartsElectricReduce(const struct FNPCPartsInfo& Info);
	static int32 GetPartsFireReduce(const struct FNPCPartsInfo& Info);
	static int32 GetPartsHpRatio(const struct FNPCPartsInfo& Info);
	static int32 GetPartsPhysicalPierceReduce(const struct FNPCPartsInfo& Info);
	static int32 GetPartsPhysicalSlashReduce(const struct FNPCPartsInfo& Info);
	static int32 GetPartsPhysicalStrikeReduce(const struct FNPCPartsInfo& Info);
	static int32 GetPartsRigidity(const struct FNPCPartsInfo& Info);
	static const class FName GetPartsSkillCodeNameOnDestroy(const struct FNPCPartsInfo& Info);
	static int32 GetRegainReduce(const struct FNPCPartsInfo& Info);
	static int32 GetSharpnessMonsterDamageRatioPierce(const struct FNPCPartsInfo& Info);
	static int32 GetSharpnessMonsterDamageRatioSlash(const struct FNPCPartsInfo& Info);
	static int32 GetSharpnessMonsterDamageRatioStrike(const struct FNPCPartsInfo& Info);
	static int32 GetToughReduce(const struct FNPCPartsInfo& Info);
	static ELElementDamageType GetWeakElement(const struct FNPCPartsInfo& Info);
	static const class FName GetWeakElementSkillCodeName(const struct FNPCPartsInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCPartsInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCPartsInfoFuncLibrary")
	}
	static class UNPCPartsInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCPartsInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNPCPartsInfoFuncLibrary;

// Class ProjectPContentInfo.FallingWeightDamageInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFallingWeightDamageInfoFuncLibrary final : public UObject
{
public:
	static int32 GetFallWeightDmgRatio(const struct FFallingWeightDamageInfo& Info);
	static int32 GetWeightRate(const struct FFallingWeightDamageInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FallingWeightDamageInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FallingWeightDamageInfoFuncLibrary")
	}
	static class UFallingWeightDamageInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFallingWeightDamageInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFallingWeightDamageInfoFuncLibrary;

// Class ProjectPContentInfo.FallingWeightDamageInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFallingWeightDamageInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetFallWeightDmgRatio(const struct FFallingWeightDamageInfoPtr& Ptr);
	static int32 GetWeightRate(const struct FFallingWeightDamageInfoPtr& Ptr);
	static bool IsValid(const struct FFallingWeightDamageInfoPtr& Ptr);
	static void IsValidBranch(const struct FFallingWeightDamageInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FallingWeightDamageInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FallingWeightDamageInfoPtrFuncLibrary")
	}
	static class UFallingWeightDamageInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFallingWeightDamageInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFallingWeightDamageInfoPtrFuncLibrary;

// Class ProjectPContentInfo.NPCSkillLinkInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNPCSkillLinkInfoFuncLibrary final : public UObject
{
public:
	static ELElementDamageType GetBeHitByElementDamageType(const struct FNPCSkillLinkInfo& Info);
	static ELPhysicalDamageType GetBeHitByPhysicalDamageType(const struct FNPCSkillLinkInfo& Info);
	static const class FName GetCodeName(const struct FNPCSkillLinkInfo& Info);
	static bool GetConditionBeHit(const struct FNPCSkillLinkInfo& Info);
	static bool GetConditionCooltime(const struct FNPCSkillLinkInfo& Info);
	static bool GetConditionDefenceSkill(const struct FNPCSkillLinkInfo& Info);
	static bool GetConditionHitTarget(const struct FNPCSkillLinkInfo& Info);
	static const class FName GetConditionPartNeeded(const struct FNPCSkillLinkInfo& Info);
	static bool GetConditionPercent(const struct FNPCSkillLinkInfo& Info);
	static bool GetConditionRange(const struct FNPCSkillLinkInfo& Info);
	static bool GetFormerSkillUseCooltime(const struct FNPCSkillLinkInfo& Info);
	static ELAIDamageType GetHitDamageType(const struct FNPCSkillLinkInfo& Info);
	static class FString GetHitTargetActionEventAlias(const struct FNPCSkillLinkInfo& Info);
	static float GetPercentValue(const struct FNPCSkillLinkInfo& Info);
	static int32 GetPriority(const struct FNPCSkillLinkInfo& Info);
	static float GetSkillDistHeight(const struct FNPCSkillLinkInfo& Info);
	static float GetSkillDistMax(const struct FNPCSkillLinkInfo& Info);
	static float GetSkillDistMin(const struct FNPCSkillLinkInfo& Info);
	static float GetSkillRangeAngleEnd(const struct FNPCSkillLinkInfo& Info);
	static float GetSkillRangeAngleStart(const struct FNPCSkillLinkInfo& Info);
	static ELAIRangeCheckType GetSkillrangeChecktype(const struct FNPCSkillLinkInfo& Info);
	static const class FName GetUseSkillId(const struct FNPCSkillLinkInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCSkillLinkInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCSkillLinkInfoFuncLibrary")
	}
	static class UNPCSkillLinkInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCSkillLinkInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNPCSkillLinkInfoFuncLibrary;

// Class ProjectPContentInfo.FallingWeightDamageInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UFallingWeightDamageInfoAsset final : public UContentInfoAsset
{
public:
	struct FFallingWeightDamageInfoDB             ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FFallingWeightDamageInfo> GetFallingWeightDamageInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FallingWeightDamageInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FallingWeightDamageInfoAsset")
	}
	static class UFallingWeightDamageInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFallingWeightDamageInfoAsset>();
	}
};
DUMPER7_ASSERTS_UFallingWeightDamageInfoAsset;

// Class ProjectPContentInfo.FlagFilterInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFlagFilterInfoFuncLibrary final : public UObject
{
public:
	static ELBooleanOrIgnore GetActing(const struct FFlagFilterInfo& Info);
	static ELBooleanOrIgnore GetAllowDashHeavy(const struct FFlagFilterInfo& Info);
	static ELBooleanOrIgnore GetAllowDashLight(const struct FFlagFilterInfo& Info);
	static ELBooleanOrIgnore GetAllowinputDoubledash(const struct FFlagFilterInfo& Info);
	static ELBooleanOrIgnore GetAllowinputGetupdashB(const struct FFlagFilterInfo& Info);
	static ELBooleanOrIgnore GetAllowinputGetupdashF(const struct FFlagFilterInfo& Info);
	static const class FName GetCodeName(const struct FFlagFilterInfo& Info);
	static ELBooleanOrIgnore GetDashDisable(const struct FFlagFilterInfo& Info);
	static ELBooleanOrIgnore GetDashSuperheavy(const struct FFlagFilterInfo& Info);
	static ELBooleanOrIgnore GetFalling(const struct FFlagFilterInfo& Info);
	static ELBooleanOrIgnore GetFrenzy(const struct FFlagFilterInfo& Info);
	static ELBooleanOrIgnore GetJumping(const struct FFlagFilterInfo& Info);
	static ELBooleanOrIgnore GetLeverNeutral(const struct FFlagFilterInfo& Info);
	static ELBooleanOrIgnore GetLockOn(const struct FFlagFilterInfo& Info);
	static int32 GetPriority(const struct FFlagFilterInfo& Info);
	static ELBooleanOrIgnore GetSprinting(const struct FFlagFilterInfo& Info);
	static ELBooleanOrIgnore GetWeaponTransform(const struct FFlagFilterInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FlagFilterInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FlagFilterInfoFuncLibrary")
	}
	static class UFlagFilterInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFlagFilterInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFlagFilterInfoFuncLibrary;

// Class ProjectPContentInfo.NPCDieInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNPCDieInfoFuncLibrary final : public UObject
{
public:
	static int32 GetDieAniDuration(const struct FNPCDieInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCDieInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCDieInfoFuncLibrary")
	}
	static class UNPCDieInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCDieInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNPCDieInfoFuncLibrary;

// Class ProjectPContentInfo.FlagFilterInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFlagFilterInfoPtrFuncLibrary final : public UObject
{
public:
	static ELBooleanOrIgnore GetActing(const struct FFlagFilterInfoPtr& Ptr);
	static ELBooleanOrIgnore GetAllowDashHeavy(const struct FFlagFilterInfoPtr& Ptr);
	static ELBooleanOrIgnore GetAllowDashLight(const struct FFlagFilterInfoPtr& Ptr);
	static ELBooleanOrIgnore GetAllowinputDoubledash(const struct FFlagFilterInfoPtr& Ptr);
	static ELBooleanOrIgnore GetAllowinputGetupdashB(const struct FFlagFilterInfoPtr& Ptr);
	static ELBooleanOrIgnore GetAllowinputGetupdashF(const struct FFlagFilterInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FFlagFilterInfoPtr& Ptr);
	static ELBooleanOrIgnore GetDashDisable(const struct FFlagFilterInfoPtr& Ptr);
	static ELBooleanOrIgnore GetDashSuperheavy(const struct FFlagFilterInfoPtr& Ptr);
	static ELBooleanOrIgnore GetFalling(const struct FFlagFilterInfoPtr& Ptr);
	static ELBooleanOrIgnore GetFrenzy(const struct FFlagFilterInfoPtr& Ptr);
	static ELBooleanOrIgnore GetJumping(const struct FFlagFilterInfoPtr& Ptr);
	static ELBooleanOrIgnore GetLeverNeutral(const struct FFlagFilterInfoPtr& Ptr);
	static ELBooleanOrIgnore GetLockOn(const struct FFlagFilterInfoPtr& Ptr);
	static int32 GetPriority(const struct FFlagFilterInfoPtr& Ptr);
	static ELBooleanOrIgnore GetSprinting(const struct FFlagFilterInfoPtr& Ptr);
	static ELBooleanOrIgnore GetWeaponTransform(const struct FFlagFilterInfoPtr& Ptr);
	static bool IsValid(const struct FFlagFilterInfoPtr& Ptr);
	static void IsValidBranch(const struct FFlagFilterInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FlagFilterInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FlagFilterInfoPtrFuncLibrary")
	}
	static class UFlagFilterInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFlagFilterInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFlagFilterInfoPtrFuncLibrary;

// Class ProjectPContentInfo.FlagFilterInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UFlagFilterInfoAsset final : public UContentInfoAsset
{
public:
	struct FFlagFilterInfoDB                      ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FFlagFilterInfoPtr FindFlagFilterInfoByNameBP(class FName CodeName);
	static const TArray<struct FFlagFilterInfo> GetFlagFilterInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FlagFilterInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FlagFilterInfoAsset")
	}
	static class UFlagFilterInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFlagFilterInfoAsset>();
	}
};
DUMPER7_ASSERTS_UFlagFilterInfoAsset;

// Class ProjectPContentInfo.FootstepInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFootstepInfoFuncLibrary final : public UObject
{
public:
	static const TSoftObjectPtr<class UObject> GetEffect(const struct FFootstepInfo& Info);
	static const class FName GetEventName(const struct FFootstepInfo& Info);
	static ELPhysicalSurfaceType GetMaterialType(const struct FFootstepInfo& Info);
	static const TSoftObjectPtr<class UObject> GetSound1(const struct FFootstepInfo& Info);
	static const TSoftObjectPtr<class UObject> GetSound2(const struct FFootstepInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FootstepInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FootstepInfoFuncLibrary")
	}
	static class UFootstepInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFootstepInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFootstepInfoFuncLibrary;

// Class ProjectPContentInfo.FootstepInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFootstepInfoPtrFuncLibrary final : public UObject
{
public:
	static const TSoftObjectPtr<class UObject> GetEffect(const struct FFootstepInfoPtr& Ptr);
	static const class FName GetEventName(const struct FFootstepInfoPtr& Ptr);
	static ELPhysicalSurfaceType GetMaterialType(const struct FFootstepInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetSound1(const struct FFootstepInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetSound2(const struct FFootstepInfoPtr& Ptr);
	static bool IsValid(const struct FFootstepInfoPtr& Ptr);
	static void IsValidBranch(const struct FFootstepInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FootstepInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FootstepInfoPtrFuncLibrary")
	}
	static class UFootstepInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFootstepInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFootstepInfoPtrFuncLibrary;

// Class ProjectPContentInfo.PathWayInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPathWayInfoFuncLibrary final : public UObject
{
public:
	static float GetArrivalRadius(const struct FPathWayInfo& Info);
	static const class FName GetCodeName(const struct FPathWayInfo& Info);
	static int32 GetIndex(const struct FPathWayInfo& Info);
	static ELPathWayType GetType(const struct FPathWayInfo& Info);
	static float GetWaitTime(const struct FPathWayInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PathWayInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PathWayInfoFuncLibrary")
	}
	static class UPathWayInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPathWayInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPathWayInfoFuncLibrary;

// Class ProjectPContentInfo.FootstepInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UFootstepInfoAsset final : public UContentInfoAsset
{
public:
	struct FFootstepInfoDB                        ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FFootstepInfo> GetFootstepInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FootstepInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FootstepInfoAsset")
	}
	static class UFootstepInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFootstepInfoAsset>();
	}
};
DUMPER7_ASSERTS_UFootstepInfoAsset;

// Class ProjectPContentInfo.FxInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFxInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetAttribute(const struct FFxInfo& Info);
	static const TSoftObjectPtr<class UObject> GetEffect(const struct FFxInfo& Info);
	static const class FName GetEventName(const struct FFxInfo& Info);
	static const TSoftObjectPtr<class UObject> GetSound(const struct FFxInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FxInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FxInfoFuncLibrary")
	}
	static class UFxInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFxInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFxInfoFuncLibrary;

// Class ProjectPContentInfo.FxInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFxInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetAttribute(const struct FFxInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetEffect(const struct FFxInfoPtr& Ptr);
	static const class FName GetEventName(const struct FFxInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetSound(const struct FFxInfoPtr& Ptr);
	static bool IsValid(const struct FFxInfoPtr& Ptr);
	static void IsValidBranch(const struct FFxInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FxInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FxInfoPtrFuncLibrary")
	}
	static class UFxInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFxInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFxInfoPtrFuncLibrary;

// Class ProjectPContentInfo.FxInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UFxInfoAsset final : public UContentInfoAsset
{
public:
	struct FFxInfoDB                              ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FFxInfo> GetFxInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FxInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FxInfoAsset")
	}
	static class UFxInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFxInfoAsset>();
	}
};
DUMPER7_ASSERTS_UFxInfoAsset;

// Class ProjectPContentInfo.GameStringInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UGameStringInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FGameStringInfo& Info);
	static class FString GetGameString(const struct FGameStringInfo& Info);
	static const class FName GetGameStringCn(const struct FGameStringInfo& Info);
	static class FText GetGameStringLocalize(const struct FGameStringInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameStringInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameStringInfoFuncLibrary")
	}
	static class UGameStringInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameStringInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UGameStringInfoFuncLibrary;

// Class ProjectPContentInfo.GameStringInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UGameStringInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FGameStringInfoPtr& Ptr);
	static class FString GetGameString(const struct FGameStringInfoPtr& Ptr);
	static const class FName GetGameStringCn(const struct FGameStringInfoPtr& Ptr);
	static class FText GetGameStringLocalize(const struct FGameStringInfoPtr& Ptr);
	static bool IsValid(const struct FGameStringInfoPtr& Ptr);
	static void IsValidBranch(const struct FGameStringInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameStringInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameStringInfoPtrFuncLibrary")
	}
	static class UGameStringInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameStringInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UGameStringInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SpotMatchInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USpotMatchInfoPtrFuncLibrary final : public UObject
{
public:
	static ELConditionCheckType GetNPCSpawnControllerCheckType(const struct FSpotMatchInfoPtr& Ptr);
	static const class FName GetNPCSpawnControllerCodeName(const struct FSpotMatchInfoPtr& Ptr);
	static class FString GetNpcSpotId(const struct FSpotMatchInfoPtr& Ptr);
	static bool IsValid(const struct FSpotMatchInfoPtr& Ptr);
	static void IsValidBranch(const struct FSpotMatchInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpotMatchInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpotMatchInfoPtrFuncLibrary")
	}
	static class USpotMatchInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpotMatchInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USpotMatchInfoPtrFuncLibrary;

// Class ProjectPContentInfo.GameStringInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UGameStringInfoAsset final : public UContentInfoAsset
{
public:
	struct FGameStringInfoDB                      ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FGameStringInfoPtr FindGameStringInfoByNameBP(class FName CodeName);
	static const TArray<struct FGameStringInfo> GetGameStringInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GameStringInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GameStringInfoAsset")
	}
	static class UGameStringInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameStringInfoAsset>();
	}
};
DUMPER7_ASSERTS_UGameStringInfoAsset;

// Class ProjectPContentInfo.GlobalVariableInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UGlobalVariableInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FGlobalVariableInfo& Info);
	static int32 GetInitValue(const struct FGlobalVariableInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GlobalVariableInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GlobalVariableInfoFuncLibrary")
	}
	static class UGlobalVariableInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalVariableInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UGlobalVariableInfoFuncLibrary;

// Class ProjectPContentInfo.LevelExpInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULevelExpInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetCharacterLevel(const struct FLevelExpInfoPtr& Ptr);
	static int32 GetCharacterLevelExpAmount(const struct FLevelExpInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FLevelExpInfoPtr& Ptr);
	static int32 GetDropsoulNaturalConsumeAmount(const struct FLevelExpInfoPtr& Ptr);
	static bool IsValid(const struct FLevelExpInfoPtr& Ptr);
	static void IsValidBranch(const struct FLevelExpInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelExpInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelExpInfoPtrFuncLibrary")
	}
	static class ULevelExpInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelExpInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULevelExpInfoPtrFuncLibrary;

// Class ProjectPContentInfo.GlobalVariableInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UGlobalVariableInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FGlobalVariableInfoPtr& Ptr);
	static int32 GetInitValue(const struct FGlobalVariableInfoPtr& Ptr);
	static bool IsValid(const struct FGlobalVariableInfoPtr& Ptr);
	static void IsValidBranch(const struct FGlobalVariableInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GlobalVariableInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GlobalVariableInfoPtrFuncLibrary")
	}
	static class UGlobalVariableInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalVariableInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UGlobalVariableInfoPtrFuncLibrary;

// Class ProjectPContentInfo.GlobalVariableInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UGlobalVariableInfoAsset final : public UContentInfoAsset
{
public:
	struct FGlobalVariableInfoDB                  ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FGlobalVariableInfoPtr FindGlobalVariableInfoByNameBP(class FName CodeName);
	static const TArray<struct FGlobalVariableInfo> GetGlobalVariableInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GlobalVariableInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GlobalVariableInfoAsset")
	}
	static class UGlobalVariableInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalVariableInfoAsset>();
	}
};
DUMPER7_ASSERTS_UGlobalVariableInfoAsset;

// Class ProjectPContentInfo.PathWayInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UPathWayInfoAsset final : public UContentInfoAsset
{
public:
	struct FPathWayInfoDB                         ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FPathWayInfo> GetPathWayInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PathWayInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PathWayInfoAsset")
	}
	static class UPathWayInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPathWayInfoAsset>();
	}
};
DUMPER7_ASSERTS_UPathWayInfoAsset;

// Class ProjectPContentInfo.HitIndexInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UHitIndexInfoFuncLibrary final : public UObject
{
public:
	static int32 GetHitGroup(const struct FHitIndexInfo& Info);
	static int32 GetHitIndex(const struct FHitIndexInfo& Info);
	static int32 GetHitPrioty(const struct FHitIndexInfo& Info);
	static const class FName GetSkillCodeName(const struct FHitIndexInfo& Info);
	static const class FName GetSkillHitCodeName(const struct FHitIndexInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HitIndexInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HitIndexInfoFuncLibrary")
	}
	static class UHitIndexInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitIndexInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UHitIndexInfoFuncLibrary;

// Class ProjectPContentInfo.HitIndexInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UHitIndexInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetHitGroup(const struct FHitIndexInfoPtr& Ptr);
	static int32 GetHitIndex(const struct FHitIndexInfoPtr& Ptr);
	static int32 GetHitPrioty(const struct FHitIndexInfoPtr& Ptr);
	static const class FName GetSkillCodeName(const struct FHitIndexInfoPtr& Ptr);
	static const class FName GetSkillHitCodeName(const struct FHitIndexInfoPtr& Ptr);
	static bool IsValid(const struct FHitIndexInfoPtr& Ptr);
	static void IsValidBranch(const struct FHitIndexInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HitIndexInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HitIndexInfoPtrFuncLibrary")
	}
	static class UHitIndexInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitIndexInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UHitIndexInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SpawnControllerInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USpawnControllerInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FSpawnControllerInfoPtr& Ptr);
	static ELLightScenarioType GetSpawnCondAMPM(const struct FSpawnControllerInfoPtr& Ptr);
	static const class FName GetSpawnCondCompleteQuest(const struct FSpawnControllerInfoPtr& Ptr);
	static ELQuestState GetSpawnCondCompleteQuestResult(const struct FSpawnControllerInfoPtr& Ptr);
	static const class FName GetSpawnCondCustom(const struct FSpawnControllerInfoPtr& Ptr);
	static ELWeatherType GetSpawnCondDryWet(const struct FSpawnControllerInfoPtr& Ptr);
	static const class FName GetSpawnCondHaveitem(const struct FSpawnControllerInfoPtr& Ptr);
	static const class FName GetSpawnCondHaveQuest(const struct FSpawnControllerInfoPtr& Ptr);
	static int32 GetSpawnCondHaveQuestStep(const struct FSpawnControllerInfoPtr& Ptr);
	static int32 GetSpawnCondHumanPoint(const struct FSpawnControllerInfoPtr& Ptr);
	static ELTimeZoneType GetSpawnCondTimezone(const struct FSpawnControllerInfoPtr& Ptr);
	static const class FName GetSpawnCondWeather(const struct FSpawnControllerInfoPtr& Ptr);
	static bool IsValid(const struct FSpawnControllerInfoPtr& Ptr);
	static void IsValidBranch(const struct FSpawnControllerInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpawnControllerInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpawnControllerInfoPtrFuncLibrary")
	}
	static class USpawnControllerInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpawnControllerInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USpawnControllerInfoPtrFuncLibrary;

// Class ProjectPContentInfo.HitIndexInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UHitIndexInfoAsset final : public UContentInfoAsset
{
public:
	struct FHitIndexInfoDB                        ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FHitIndexInfo> GetHitIndexInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HitIndexInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HitIndexInfoAsset")
	}
	static class UHitIndexInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitIndexInfoAsset>();
	}
};
DUMPER7_ASSERTS_UHitIndexInfoAsset;

// Class ProjectPContentInfo.HitMotionGroupInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UHitMotionGroupInfoFuncLibrary final : public UObject
{
public:
	static int32 GetChosenProbability(const struct FHitMotionGroupInfo& Info);
	static ELHitMotionDirectionType GetHitMotionDirectionType(const struct FHitMotionGroupInfo& Info);
	static ELHitMotionType GetHitMotionType(const struct FHitMotionGroupInfo& Info);
	static const class FName GetPlayCommonActionMontageCodeName(const struct FHitMotionGroupInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HitMotionGroupInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HitMotionGroupInfoFuncLibrary")
	}
	static class UHitMotionGroupInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitMotionGroupInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UHitMotionGroupInfoFuncLibrary;

// Class ProjectPContentInfo.FirstStatToSecondStatInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFirstStatToSecondStatInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetConversionValueA(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static int32 GetConversionValueB(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static int32 GetConversionValueC(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static int32 GetConversionValueD(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static int32 GetConversionValueE(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static int32 GetConversionValueF(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static int32 GetConversionValueG(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static int32 GetConversionValueH(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static int32 GetConversionValueI(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static int32 GetConversionValueJ(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static int32 GetConversionValueK(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static ELFirstStat GetFirstStatA(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static ELSecondStat GetSecondStatA(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static ELSecondStat GetSecondStatB(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static ELSecondStat GetSecondStatC(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static ELSecondStat GetSecondStatD(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static ELSecondStat GetSecondStatE(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static ELSecondStat GetSecondStatF(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static ELSecondStat GetSecondStatG(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static ELSecondStat GetSecondStatH(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static ELSecondStat GetSecondStatI(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static ELSecondStat GetSecondStatJ(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static ELSecondStat GetSecondStatK(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static int32 GetStatLevel(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static bool IsValid(const struct FFirstStatToSecondStatInfoPtr& Ptr);
	static void IsValidBranch(const struct FFirstStatToSecondStatInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FirstStatToSecondStatInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FirstStatToSecondStatInfoPtrFuncLibrary")
	}
	static class UFirstStatToSecondStatInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFirstStatToSecondStatInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFirstStatToSecondStatInfoPtrFuncLibrary;

// Class ProjectPContentInfo.HitMotionGroupInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UHitMotionGroupInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetChosenProbability(const struct FHitMotionGroupInfoPtr& Ptr);
	static ELHitMotionDirectionType GetHitMotionDirectionType(const struct FHitMotionGroupInfoPtr& Ptr);
	static ELHitMotionType GetHitMotionType(const struct FHitMotionGroupInfoPtr& Ptr);
	static const class FName GetPlayCommonActionMontageCodeName(const struct FHitMotionGroupInfoPtr& Ptr);
	static bool IsValid(const struct FHitMotionGroupInfoPtr& Ptr);
	static void IsValidBranch(const struct FHitMotionGroupInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HitMotionGroupInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HitMotionGroupInfoPtrFuncLibrary")
	}
	static class UHitMotionGroupInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitMotionGroupInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UHitMotionGroupInfoPtrFuncLibrary;

// Class ProjectPContentInfo.HitMotionGroupInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UHitMotionGroupInfoAsset final : public UContentInfoAsset
{
public:
	struct FHitMotionGroupInfoDB                  ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FHitMotionGroupInfo> GetHitMotionGroupInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HitMotionGroupInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HitMotionGroupInfoAsset")
	}
	static class UHitMotionGroupInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitMotionGroupInfoAsset>();
	}
};
DUMPER7_ASSERTS_UHitMotionGroupInfoAsset;

// Class ProjectPContentInfo.PropDestructionInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropDestructionInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FPropDestructionInfoPtr& Ptr);
	static bool GetDestroyOnlyOnce(const struct FPropDestructionInfoPtr& Ptr);
	static ELDestructionConditionActionType GetDestructionConditionActionType(const struct FPropDestructionInfoPtr& Ptr);
	static class FString GetDestructionConditionActorCodename(const struct FPropDestructionInfoPtr& Ptr);
	static ELDeathByOwnerFaction GetDestructionConditionActorType(const struct FPropDestructionInfoPtr& Ptr);
	static const TArray<class FName> GetDestructionConditionSkillCodename(const struct FPropDestructionInfoPtr& Ptr);
	static const TArray<class FName> GetDestructionConditionSkillhitCodename(const struct FPropDestructionInfoPtr& Ptr);
	static const class FName GetDrop(const struct FPropDestructionInfoPtr& Ptr);
	static const class FName GetDropProp(const struct FPropDestructionInfoPtr& Ptr);
	static int32 GetHp(const struct FPropDestructionInfoPtr& Ptr);
	static ELHpDiscountMethod GetHpDiscountMethod(const struct FPropDestructionInfoPtr& Ptr);
	static const TSoftClassPtr<class UClass> GetModelBP(const struct FPropDestructionInfoPtr& Ptr);
	static bool IsValid(const struct FPropDestructionInfoPtr& Ptr);
	static void IsValidBranch(const struct FPropDestructionInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropDestructionInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropDestructionInfoPtrFuncLibrary")
	}
	static class UPropDestructionInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropDestructionInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropDestructionInfoPtrFuncLibrary;

// Class ProjectPContentInfo.HitMotionReplaceInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UHitMotionReplaceInfoFuncLibrary final : public UObject
{
public:
	static int32 GetBoundDuration(const struct FHitMotionReplaceInfo& Info);
	static int32 GetBoundHeight(const struct FHitMotionReplaceInfo& Info);
	static int32 GetHitAnimDuration(const struct FHitMotionReplaceInfo& Info);
	static const class FName GetHitCameraShakeCodeName(const struct FHitMotionReplaceInfo& Info);
	static const class FName GetHitMotionReplaceGroupCodeName(const struct FHitMotionReplaceInfo& Info);
	static ELKnockBackDirectionType GetKnockbackDirection(const struct FHitMotionReplaceInfo& Info);
	static int32 GetKnockbackDistance(const struct FHitMotionReplaceInfo& Info);
	static int32 GetKnockbackDuration(const struct FHitMotionReplaceInfo& Info);
	static float GetKnockbackScale(const struct FHitMotionReplaceInfo& Info);
	static ELHitMotionType GetOriginHitMotionType(const struct FHitMotionReplaceInfo& Info);
	static ELHitMotionType GetReplaceHitMotionType(const struct FHitMotionReplaceInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HitMotionReplaceInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HitMotionReplaceInfoFuncLibrary")
	}
	static class UHitMotionReplaceInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitMotionReplaceInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UHitMotionReplaceInfoFuncLibrary;

// Class ProjectPContentInfo.HitMotionReplaceInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UHitMotionReplaceInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetBoundDuration(const struct FHitMotionReplaceInfoPtr& Ptr);
	static int32 GetBoundHeight(const struct FHitMotionReplaceInfoPtr& Ptr);
	static int32 GetHitAnimDuration(const struct FHitMotionReplaceInfoPtr& Ptr);
	static const class FName GetHitCameraShakeCodeName(const struct FHitMotionReplaceInfoPtr& Ptr);
	static const class FName GetHitMotionReplaceGroupCodeName(const struct FHitMotionReplaceInfoPtr& Ptr);
	static ELKnockBackDirectionType GetKnockbackDirection(const struct FHitMotionReplaceInfoPtr& Ptr);
	static int32 GetKnockbackDistance(const struct FHitMotionReplaceInfoPtr& Ptr);
	static int32 GetKnockbackDuration(const struct FHitMotionReplaceInfoPtr& Ptr);
	static float GetKnockbackScale(const struct FHitMotionReplaceInfoPtr& Ptr);
	static ELHitMotionType GetOriginHitMotionType(const struct FHitMotionReplaceInfoPtr& Ptr);
	static ELHitMotionType GetReplaceHitMotionType(const struct FHitMotionReplaceInfoPtr& Ptr);
	static bool IsValid(const struct FHitMotionReplaceInfoPtr& Ptr);
	static void IsValidBranch(const struct FHitMotionReplaceInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HitMotionReplaceInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HitMotionReplaceInfoPtrFuncLibrary")
	}
	static class UHitMotionReplaceInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitMotionReplaceInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UHitMotionReplaceInfoPtrFuncLibrary;

// Class ProjectPContentInfo.LevelHumanityInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULevelHumanityInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetAcquisitionTextCodeName(const struct FLevelHumanityInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FLevelHumanityInfoPtr& Ptr);
	static int32 GetHumanityLevel(const struct FLevelHumanityInfoPtr& Ptr);
	static int32 GetNextLevelHumanity(const struct FLevelHumanityInfoPtr& Ptr);
	static bool GetShowText(const struct FLevelHumanityInfoPtr& Ptr);
	static const class FName GetSoundNotifyTrack(const struct FLevelHumanityInfoPtr& Ptr);
	static bool IsValid(const struct FLevelHumanityInfoPtr& Ptr);
	static void IsValidBranch(const struct FLevelHumanityInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelHumanityInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelHumanityInfoPtrFuncLibrary")
	}
	static class ULevelHumanityInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelHumanityInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULevelHumanityInfoPtrFuncLibrary;

// Class ProjectPContentInfo.HitMotionReplaceInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UHitMotionReplaceInfoAsset final : public UContentInfoAsset
{
public:
	struct FHitMotionReplaceInfoDB                ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FHitMotionReplaceInfo> GetHitMotionReplaceInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HitMotionReplaceInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HitMotionReplaceInfoAsset")
	}
	static class UHitMotionReplaceInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitMotionReplaceInfoAsset>();
	}
};
DUMPER7_ASSERTS_UHitMotionReplaceInfoAsset;

// Class ProjectPContentInfo.HumanizationBuffAddInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UHumanizationBuffAddInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetAddAbnormalstate(const struct FHumanizationBuffAddInfo& Info);
	static const class FName GetAddSpecialbuff(const struct FHumanizationBuffAddInfo& Info);
	static const class FName GetCodeName(const struct FHumanizationBuffAddInfo& Info);
	static int32 GetHumanpointUnder(const struct FHumanizationBuffAddInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HumanizationBuffAddInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HumanizationBuffAddInfoFuncLibrary")
	}
	static class UHumanizationBuffAddInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHumanizationBuffAddInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UHumanizationBuffAddInfoFuncLibrary;

// Class ProjectPContentInfo.DefaultStatInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDefaultStatInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalStatePenaltyBase(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetAcidAttack(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetAcidDebuffResist(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetAcidDefence(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetAcidReduce(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetAdvance(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetAttackGainFrenzyPointIncreaseRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetAttackratioSlavearm(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetAttackSpeedRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetAttackStaminaReductionRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetBreakDebuffResist(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetBuildupAcidReduction(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetBuildupBreakReduction(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetBuildupContaminationReduction(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetBuildupCurseReduction(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetBuildupElectricReduction(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetBuildupFireReduction(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetBuildupImpactReduction(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetBuildUpRecoverIncBase(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetCapacity(const struct FDefaultStatInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetContaminationDebuffResist(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetCriticalDamageRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetCurseDebuffResist(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetDashParryCooltime(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetDashStaminaReductionRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetDestructionPower(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetDownGetupSpeedRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetDropErgoRegainMonkillRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetElectricAttack(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetElectricDebuffResist(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetElectricDefence(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetElectricReduce(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetFatalDamageRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetFatalPhysicalAttackpower(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetFireAttack(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetFireDebuffResist(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetFireDefence(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetFireReduce(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetFrenzyUnitCount(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetGuardAciddamageReductionRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetGuardElectricdamageReductionRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetGuardFiredamageReductionRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetGuardParryCooltime(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetGuardPhysicaldamageReductionRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetGuardRegainAttackHealIncreaseRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetGuardRegainPerfectGuardHealRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetGuardRegainPointMax(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetGuardRegainRecoveryRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetGuardRegainRecoveryReduceRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetGuardStaminaReductionRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetHealthPoint(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetImpactDebuffResist(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetLevel(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetMaxFrenzyGaugePerUnit(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetModificationDropErgoRemainDecrease(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetMotionSpeedRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetMotivity(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetParalyzationAddDamageRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetPerfectguardGroggyenableAddtimeRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetPhysicalAttack(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetPhysicalDefence(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetPhysicalPierceDefence(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetPhysicalPierceReduce(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetPhysicalReduce(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetPhysicalSlashDefence(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetPhysicalSlashReduce(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetPhysicalStrikeDefence(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetPhysicalStrikeReduce(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetPierceAttackRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetRigidity(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetSharpnessBonus(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetSlashAttackRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetSlaveMagazinePoint(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetSprintConsumeStaminaPerSecond(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetSprintSpeedRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetStaminaExhaustTime(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetStaminaPoint(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetStaminaRestorePerSecond(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetStrikeAttackRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetTechnique(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetTenacity(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetToughPoint(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetToughRecoveryDelayReduction(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetToughRecoveryDelayTime(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetToughRestorePerSecond(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetVigor(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetVitality(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetWalkRunSpeedRatio(const struct FDefaultStatInfoPtr& Ptr);
	static int32 GetWeightLimit(const struct FDefaultStatInfoPtr& Ptr);
	static bool IsValid(const struct FDefaultStatInfoPtr& Ptr);
	static void IsValidBranch(const struct FDefaultStatInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DefaultStatInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DefaultStatInfoPtrFuncLibrary")
	}
	static class UDefaultStatInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDefaultStatInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDefaultStatInfoPtrFuncLibrary;

// Class ProjectPContentInfo.HumanizationBuffAddInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UHumanizationBuffAddInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetAddAbnormalstate(const struct FHumanizationBuffAddInfoPtr& Ptr);
	static const class FName GetAddSpecialbuff(const struct FHumanizationBuffAddInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FHumanizationBuffAddInfoPtr& Ptr);
	static int32 GetHumanpointUnder(const struct FHumanizationBuffAddInfoPtr& Ptr);
	static bool IsValid(const struct FHumanizationBuffAddInfoPtr& Ptr);
	static void IsValidBranch(const struct FHumanizationBuffAddInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HumanizationBuffAddInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HumanizationBuffAddInfoPtrFuncLibrary")
	}
	static class UHumanizationBuffAddInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHumanizationBuffAddInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UHumanizationBuffAddInfoPtrFuncLibrary;

// Class ProjectPContentInfo.HumanizationBuffAlterInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UHumanizationBuffAlterInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetAlterAbnormalCodeName(const struct FHumanizationBuffAlterInfo& Info);
	static const class FName GetAlterSpecialbuffCodeName(const struct FHumanizationBuffAlterInfo& Info);
	static const class FName GetCodeName(const struct FHumanizationBuffAlterInfo& Info);
	static int32 GetHumanpointUnder(const struct FHumanizationBuffAlterInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HumanizationBuffAlterInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HumanizationBuffAlterInfoFuncLibrary")
	}
	static class UHumanizationBuffAlterInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHumanizationBuffAlterInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UHumanizationBuffAlterInfoFuncLibrary;

// Class ProjectPContentInfo.ProjectileInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UProjectileInfoAsset final : public UContentInfoAsset
{
public:
	struct FProjectileInfoDB                      ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FProjectileInfoPtr FindProjectileInfoByNameBP(class FName CodeName);
	static const TArray<struct FProjectileInfo> GetProjectileInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ProjectileInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ProjectileInfoAsset")
	}
	static class UProjectileInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProjectileInfoAsset>();
	}
};
DUMPER7_ASSERTS_UProjectileInfoAsset;

// Class ProjectPContentInfo.HumanizationBuffAlterInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UHumanizationBuffAlterInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetAlterAbnormalCodeName(const struct FHumanizationBuffAlterInfoPtr& Ptr);
	static const class FName GetAlterSpecialbuffCodeName(const struct FHumanizationBuffAlterInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FHumanizationBuffAlterInfoPtr& Ptr);
	static int32 GetHumanpointUnder(const struct FHumanizationBuffAlterInfoPtr& Ptr);
	static bool IsValid(const struct FHumanizationBuffAlterInfoPtr& Ptr);
	static void IsValidBranch(const struct FHumanizationBuffAlterInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HumanizationBuffAlterInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HumanizationBuffAlterInfoPtrFuncLibrary")
	}
	static class UHumanizationBuffAlterInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHumanizationBuffAlterInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UHumanizationBuffAlterInfoPtrFuncLibrary;

// Class ProjectPContentInfo.HumanizationInfoAsset
// 0x0068 (0x00E0 - 0x0078)
class alignas(0x10) UHumanizationInfoAsset final : public UContentInfoAsset
{
public:
	struct FHumanizationInfoDB                    ContentInfoDB;                                     // 0x0078(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FHumanizationBuffAddInfo> GetHumanizationBuffAddInfoArrayBP();
	static const TArray<struct FHumanizationBuffAlterInfo> GetHumanizationBuffAlterInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HumanizationInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HumanizationInfoAsset")
	}
	static class UHumanizationInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHumanizationInfoAsset>();
	}
};
DUMPER7_ASSERTS_UHumanizationInfoAsset;

// Class ProjectPContentInfo.PropLadderInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropLadderInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FPropLadderInfo& Info);
	static const class FName GetContentCommandCodename(const struct FPropLadderInfo& Info);
	static const class FName GetDownstairInteractionApproachMessageCodeName(const struct FPropLadderInfo& Info);
	static int32 GetDownstairInteractionConfrontAngle(const struct FPropLadderInfo& Info);
	static int32 GetDownstairInteractionConfrontAngleProp(const struct FPropLadderInfo& Info);
	static int32 GetDownstairInteractionRadius(const struct FPropLadderInfo& Info);
	static const TSoftObjectPtr<class UObject> GetInteractionUserMotionResource(const struct FPropLadderInfo& Info);
	static ELPhysicalSurfaceType GetLadderMaterial(const struct FPropLadderInfo& Info);
	static ELPropLadderStateType GetLadderState(const struct FPropLadderInfo& Info);
	static const TSoftObjectPtr<class UObject> GetLoopMotionResource(const struct FPropLadderInfo& Info);
	static const TSoftClassPtr<class UClass> GetModelBP(const struct FPropLadderInfo& Info);
	static const TSoftObjectPtr<class UObject> GetModelResource(const struct FPropLadderInfo& Info);
	static const class FName GetUpstairInteractionApproachMessageCodeName(const struct FPropLadderInfo& Info);
	static const class FName GetUpstairInteractionCondition(const struct FPropLadderInfo& Info);
	static const class FName GetUpstairInteractionConditionFailMessage(const struct FPropLadderInfo& Info);
	static int32 GetUpstairInteractionConfrontAngle(const struct FPropLadderInfo& Info);
	static int32 GetUpstairInteractionConfrontAngleProp(const struct FPropLadderInfo& Info);
	static const TSoftObjectPtr<class UObject> GetUpstairInteractionPropMotionResource(const struct FPropLadderInfo& Info);
	static int32 GetUpstairInteractionRadius(const struct FPropLadderInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropLadderInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropLadderInfoFuncLibrary")
	}
	static class UPropLadderInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropLadderInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropLadderInfoFuncLibrary;

// Class ProjectPContentInfo.ImageResourceInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UImageResourceInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FImageResourceInfo& Info);
	static const TSoftObjectPtr<class UObject> GetImageResource(const struct FImageResourceInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ImageResourceInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ImageResourceInfoFuncLibrary")
	}
	static class UImageResourceInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UImageResourceInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UImageResourceInfoFuncLibrary;

// Class ProjectPContentInfo.ImageResourceInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UImageResourceInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FImageResourceInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetImageResource(const struct FImageResourceInfoPtr& Ptr);
	static bool IsValid(const struct FImageResourceInfoPtr& Ptr);
	static void IsValidBranch(const struct FImageResourceInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ImageResourceInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ImageResourceInfoPtrFuncLibrary")
	}
	static class UImageResourceInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UImageResourceInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UImageResourceInfoPtrFuncLibrary;

// Class ProjectPContentInfo.PropDoorInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropDoorInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FPropDoorInfo& Info);
	static const class FName GetContentCommandCodename(const struct FPropDoorInfo& Info);
	static bool GetDelConditionItem(const struct FPropDoorInfo& Info);
	static ELMessageAlertType GetFailMessageType(const struct FPropDoorInfo& Info);
	static bool GetFixCameraOnInterAction(const struct FPropDoorInfo& Info);
	static const class FName GetInteractionApproachMessageCodeName(const struct FPropDoorInfo& Info);
	static const class FName GetInteractionCondition(const struct FPropDoorInfo& Info);
	static const class FName GetInteractionConditionFailApproachMessage(const struct FPropDoorInfo& Info);
	static const class FName GetInteractionConditionFailMessage(const struct FPropDoorInfo& Info);
	static const TSoftObjectPtr<class UObject> GetInteractionConditionFailPropMotionResource(const struct FPropDoorInfo& Info);
	static const TSoftObjectPtr<class UObject> GetInteractionConditionFailUserMotionResource(const struct FPropDoorInfo& Info);
	static int32 GetInteractionConditionHumanPoint(const struct FPropDoorInfo& Info);
	static const class FName GetInteractionConditionItem(const struct FPropDoorInfo& Info);
	static int32 GetInteractionConfrontAngle(const struct FPropDoorInfo& Info);
	static int32 GetInteractionConfrontAngleProp(const struct FPropDoorInfo& Info);
	static float GetInteractionMessageTime(const struct FPropDoorInfo& Info);
	static const TSoftObjectPtr<class UObject> GetInteractionPropMotionResource(const struct FPropDoorInfo& Info);
	static int32 GetInteractionRadius(const struct FPropDoorInfo& Info);
	static const class FName GetInteractionSuccessMassage(const struct FPropDoorInfo& Info);
	static const TSoftObjectPtr<class UObject> GetInteractionUserMotionResource(const struct FPropDoorInfo& Info);
	static ELPropInteractType GetInteractType(const struct FPropDoorInfo& Info);
	static ELLinkedPropExecute GetLinkedPropExecute(const struct FPropDoorInfo& Info);
	static bool GetLinkedPropStateChange(const struct FPropDoorInfo& Info);
	static const TSoftObjectPtr<class UObject> GetLoopMotionResource(const struct FPropDoorInfo& Info);
	static const TSoftObjectPtr<class UObject> GetModelResource(const struct FPropDoorInfo& Info);
	static int32 GetState(const struct FPropDoorInfo& Info);
	static ELMessageAlertType GetSuccesMessageType(const struct FPropDoorInfo& Info);
	static const class FName GetUseLevelSequence(const struct FPropDoorInfo& Info);
	static const class FName GetWrongApproachMessageCodeName(const struct FPropDoorInfo& Info);
	static const class FName GetWrongApproachNextMessageCodeName(const struct FPropDoorInfo& Info);
	static const TSoftObjectPtr<class UObject> GetWrongApproachPropMotionResource(const struct FPropDoorInfo& Info);
	static const TSoftObjectPtr<class UObject> GetWrongApproachUserMotionResource(const struct FPropDoorInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropDoorInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropDoorInfoFuncLibrary")
	}
	static class UPropDoorInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropDoorInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropDoorInfoFuncLibrary;

// Class ProjectPContentInfo.ImageResourceInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UImageResourceInfoAsset final : public UContentInfoAsset
{
public:
	struct FImageResourceInfoDB                   ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FImageResourceInfoPtr FindImageResourceInfoByNameBP(class FName CodeName);
	static const TArray<struct FImageResourceInfo> GetImageResourceInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ImageResourceInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ImageResourceInfoAsset")
	}
	static class UImageResourceInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UImageResourceInfoAsset>();
	}
};
DUMPER7_ASSERTS_UImageResourceInfoAsset;

// Class ProjectPContentInfo.ImmuneInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UImmuneInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FImmuneInfo& Info);
	static float GetCriticalChance(const struct FImmuneInfo& Info);
	static int32 GetDamage(const struct FImmuneInfo& Info);
	static int32 GetElementalDamage(const struct FImmuneInfo& Info);
	static int32 GetGroggyAttack(const struct FImmuneInfo& Info);
	static int32 GetHitActionDmgStand(const struct FImmuneInfo& Info);
	static int32 GetHitActionDownAwayUp(const struct FImmuneInfo& Info);
	static int32 GetHitActionDownDragStamp(const struct FImmuneInfo& Info);
	static int32 GetHitActionGrab(const struct FImmuneInfo& Info);
	static int32 GetHitActionKnockBack(const struct FImmuneInfo& Info);
	static int32 GetIgnoreHit(const struct FImmuneInfo& Info);
	static int32 GetSpecialElementalDamage(const struct FImmuneInfo& Info);
	static int32 GetToughAttack(const struct FImmuneInfo& Info);
	static int32 GetWeaponAttackPeriod(const struct FImmuneInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ImmuneInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ImmuneInfoFuncLibrary")
	}
	static class UImmuneInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UImmuneInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UImmuneInfoFuncLibrary;

// Class ProjectPContentInfo.ProjectileInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UProjectileInfoFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalStateBuildUpAttack(const struct FProjectileInfo& Info);
	static const class FName GetAbnormalStateCodeName(const struct FProjectileInfo& Info);
	static int32 GetAbnormalStatePenaltyBase(const struct FProjectileInfo& Info);
	static int32 GetAcidAttack(const struct FProjectileInfo& Info);
	static int32 GetAdditionalGroggyTime(const struct FProjectileInfo& Info);
	static int32 GetBuildUpRecoverIncBase(const struct FProjectileInfo& Info);
	static const class FName GetCodeName(const struct FProjectileInfo& Info);
	static int32 GetCollisionStartDelay(const struct FProjectileInfo& Info);
	static int32 GetConsumeSlaveMagazinePoint(const struct FProjectileInfo& Info);
	static int32 GetConsumeStaminaPoint(const struct FProjectileInfo& Info);
	static const class FName GetCorrectionCodeNameForAdvance(const struct FProjectileInfo& Info);
	static const class FName GetCorrectionCodeNameForMotivity(const struct FProjectileInfo& Info);
	static const class FName GetCorrectionCodeNameForTechnique(const struct FProjectileInfo& Info);
	static int32 GetDestructionPower(const struct FProjectileInfo& Info);
	static int32 GetElectricAttack(const struct FProjectileInfo& Info);
	static float GetFinSpeed(const struct FProjectileInfo& Info);
	static float GetFinSpeedTime(const struct FProjectileInfo& Info);
	static int32 GetFireAttack(const struct FProjectileInfo& Info);
	static float GetForceFireForwardDistance(const struct FProjectileInfo& Info);
	static ELProjectileGenerateType GetGenerateLocType(const struct FProjectileInfo& Info);
	static ELProjectileHitFactionType GetHitFaction(const struct FProjectileInfo& Info);
	static float GetHomingAccelerationMagnitude(const struct FProjectileInfo& Info);
	static bool GetIgnoreCameraPitchWhenMovingForward(const struct FProjectileInfo& Info);
	static float GetInitSpeed(const struct FProjectileInfo& Info);
	static float GetMidSpeed(const struct FProjectileInfo& Info);
	static float GetMidSpeedTime(const struct FProjectileInfo& Info);
	static int32 GetMoveStartTime(const struct FProjectileInfo& Info);
	static ELProjectileMoveTargetType GetMoveType(const struct FProjectileInfo& Info);
	static float GetMoveXyDegree(const struct FProjectileInfo& Info);
	static float GetMoveZDegree(const struct FProjectileInfo& Info);
	static int32 GetPhysicalAttack(const struct FProjectileInfo& Info);
	static ELPhysicalDamageType GetPhysicalAttackSubtype(const struct FProjectileInfo& Info);
	static float GetPitchLimit(const struct FProjectileInfo& Info);
	static const TSoftClassPtr<class UClass> GetProjectileClass(const struct FProjectileInfo& Info);
	static const TSoftClassPtr<class UClass> GetProjectileDesignClass(const struct FProjectileInfo& Info);
	static ELProjectileType GetProjectileType(const struct FProjectileInfo& Info);
	static int32 GetPulseRechargeAttack(const struct FProjectileInfo& Info);
	static float GetSpawnOffsetX(const struct FProjectileInfo& Info);
	static float GetSpawnOffsetY(const struct FProjectileInfo& Info);
	static float GetSpawnOffsetZ(const struct FProjectileInfo& Info);
	static bool GetSpawnOnGround(const struct FProjectileInfo& Info);
	static const class FName GetSpawnSocketName(const struct FProjectileInfo& Info);
	static float GetSpeed(const struct FProjectileInfo& Info);
	static float GetTargetOffsetX(const struct FProjectileInfo& Info);
	static float GetTargetOffsetY(const struct FProjectileInfo& Info);
	static float GetTargetOffsetZ(const struct FProjectileInfo& Info);
	static const class FName GetTargetSocketName(const struct FProjectileInfo& Info);
	static int32 GetToughRecoveryDelayTime(const struct FProjectileInfo& Info);
	static float GetTraceEndAngle(const struct FProjectileInfo& Info);
	static float GetTraceEndDistance(const struct FProjectileInfo& Info);
	static float GetTraceEndFinSpeed(const struct FProjectileInfo& Info);
	static float GetTraceEndFinSpeedTime(const struct FProjectileInfo& Info);
	static float GetTraceEndHalfheight(const struct FProjectileInfo& Info);
	static float GetTraceEndInitSpeed(const struct FProjectileInfo& Info);
	static float GetTraceEndInitSpeedTime(const struct FProjectileInfo& Info);
	static float GetTraceEndMidSpeed(const struct FProjectileInfo& Info);
	static float GetTraceEndMidSpeedTime(const struct FProjectileInfo& Info);
	static float GetTraceIngFinSpeed(const struct FProjectileInfo& Info);
	static float GetTraceIngFinSpeedTime(const struct FProjectileInfo& Info);
	static float GetTraceIngInitSpeed(const struct FProjectileInfo& Info);
	static float GetTraceIngInitSpeedTime(const struct FProjectileInfo& Info);
	static float GetTraceIngMidSpeed(const struct FProjectileInfo& Info);
	static float GetTraceIngMidSpeedTime(const struct FProjectileInfo& Info);
	static float GetTraceStartAngle(const struct FProjectileInfo& Info);
	static float GetTraceStartDistance(const struct FProjectileInfo& Info);
	static float GetTraceStartHalfheight(const struct FProjectileInfo& Info);
	static float GetTraceStartTime(const struct FProjectileInfo& Info);
	static const class FName GetTraceTargetSocket(const struct FProjectileInfo& Info);
	static bool GetUseSocketDirection(const struct FProjectileInfo& Info);
	static float GetYawLimit(const struct FProjectileInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ProjectileInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ProjectileInfoFuncLibrary")
	}
	static class UProjectileInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProjectileInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UProjectileInfoFuncLibrary;

// Class ProjectPContentInfo.ImmuneInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UImmuneInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FImmuneInfoPtr& Ptr);
	static float GetCriticalChance(const struct FImmuneInfoPtr& Ptr);
	static int32 GetDamage(const struct FImmuneInfoPtr& Ptr);
	static int32 GetElementalDamage(const struct FImmuneInfoPtr& Ptr);
	static int32 GetGroggyAttack(const struct FImmuneInfoPtr& Ptr);
	static int32 GetHitActionDmgStand(const struct FImmuneInfoPtr& Ptr);
	static int32 GetHitActionDownAwayUp(const struct FImmuneInfoPtr& Ptr);
	static int32 GetHitActionDownDragStamp(const struct FImmuneInfoPtr& Ptr);
	static int32 GetHitActionGrab(const struct FImmuneInfoPtr& Ptr);
	static int32 GetHitActionKnockBack(const struct FImmuneInfoPtr& Ptr);
	static int32 GetIgnoreHit(const struct FImmuneInfoPtr& Ptr);
	static int32 GetSpecialElementalDamage(const struct FImmuneInfoPtr& Ptr);
	static int32 GetToughAttack(const struct FImmuneInfoPtr& Ptr);
	static int32 GetWeaponAttackPeriod(const struct FImmuneInfoPtr& Ptr);
	static bool IsValid(const struct FImmuneInfoPtr& Ptr);
	static void IsValidBranch(const struct FImmuneInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ImmuneInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ImmuneInfoPtrFuncLibrary")
	}
	static class UImmuneInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UImmuneInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UImmuneInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ImmuneInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UImmuneInfoAsset final : public UContentInfoAsset
{
public:
	struct FImmuneInfoDB                          ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FImmuneInfoPtr FindImmuneInfoByNameBP(class FName CodeName);
	static const TArray<struct FImmuneInfo> GetImmuneInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ImmuneInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ImmuneInfoAsset")
	}
	static class UImmuneInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UImmuneInfoAsset>();
	}
};
DUMPER7_ASSERTS_UImmuneInfoAsset;

// Class ProjectPContentInfo.SlaveArmPageInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) USlaveArmPageInfoAsset final : public UContentInfoAsset
{
public:
	struct FSlaveArmPageInfoDB                    ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FSlaveArmPageInfoPtr FindSlaveArmPageInfoByNameBP(class FName CodeName);
	static const TArray<struct FSlaveArmPageInfo> GetSlaveArmPageInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlaveArmPageInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlaveArmPageInfoAsset")
	}
	static class USlaveArmPageInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlaveArmPageInfoAsset>();
	}
};
DUMPER7_ASSERTS_USlaveArmPageInfoAsset;

// Class ProjectPContentInfo.ActorParamInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UActorParamInfoFuncLibrary final : public UObject
{
public:
	static int32 GetArmor(const struct FActorParamInfo& Info);
	static float GetAttackPower(const struct FActorParamInfo& Info);
	static float GetCriticalChance(const struct FActorParamInfo& Info);
	static float GetCriticalRating(const struct FActorParamInfo& Info);
	static int32 GetMaxHp(const struct FActorParamInfo& Info);
	static int32 GetMaxMp(const struct FActorParamInfo& Info);
	static float GetWeaponAttackPeriod(const struct FActorParamInfo& Info);
	static float GetWeaponDamage(const struct FActorParamInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorParamInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorParamInfoFuncLibrary")
	}
	static class UActorParamInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorParamInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UActorParamInfoFuncLibrary;

// Class ProjectPContentInfo.ActorParamInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UActorParamInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetArmor(const struct FActorParamInfoPtr& Ptr);
	static float GetAttackPower(const struct FActorParamInfoPtr& Ptr);
	static float GetCriticalChance(const struct FActorParamInfoPtr& Ptr);
	static float GetCriticalRating(const struct FActorParamInfoPtr& Ptr);
	static int32 GetMaxHp(const struct FActorParamInfoPtr& Ptr);
	static int32 GetMaxMp(const struct FActorParamInfoPtr& Ptr);
	static float GetWeaponAttackPeriod(const struct FActorParamInfoPtr& Ptr);
	static float GetWeaponDamage(const struct FActorParamInfoPtr& Ptr);
	static bool IsValid(const struct FActorParamInfoPtr& Ptr);
	static void IsValidBranch(const struct FActorParamInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActorParamInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActorParamInfoPtrFuncLibrary")
	}
	static class UActorParamInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorParamInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UActorParamInfoPtrFuncLibrary;

// Class ProjectPContentInfo.PropSetProjectileInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UPropSetProjectileInfoAsset final : public UContentInfoAsset
{
public:
	struct FPropSetProjectileInfoDB               ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FPropSetProjectileInfo> GetPropSetProjectileInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropSetProjectileInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropSetProjectileInfoAsset")
	}
	static class UPropSetProjectileInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropSetProjectileInfoAsset>();
	}
};
DUMPER7_ASSERTS_UPropSetProjectileInfoAsset;

// Class ProjectPContentInfo.FloatRangeValueFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFloatRangeValueFuncLibrary final : public UObject
{
public:
	static float GetMax(const struct FFloatRangeValue& Info);
	static float GetMin(const struct FFloatRangeValue& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FloatRangeValueFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FloatRangeValueFuncLibrary")
	}
	static class UFloatRangeValueFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFloatRangeValueFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFloatRangeValueFuncLibrary;

// Class ProjectPContentInfo.FloatRangeValuePtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFloatRangeValuePtrFuncLibrary final : public UObject
{
public:
	static float GetMax(const struct FFloatRangeValuePtr& Ptr);
	static float GetMin(const struct FFloatRangeValuePtr& Ptr);
	static bool IsValid(const struct FFloatRangeValuePtr& Ptr);
	static void IsValidBranch(const struct FFloatRangeValuePtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FloatRangeValuePtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FloatRangeValuePtrFuncLibrary")
	}
	static class UFloatRangeValuePtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFloatRangeValuePtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFloatRangeValuePtrFuncLibrary;

// Class ProjectPContentInfo.SlaveArmTreeInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USlaveArmTreeInfoFuncLibrary final : public UObject
{
public:
	static const TSoftObjectPtr<class UObject> GetAttachMesh(const struct FSlaveArmTreeInfo& Info);
	static const class FName GetCodeName(const struct FSlaveArmTreeInfo& Info);
	static int32 GetDepth(const struct FSlaveArmTreeInfo& Info);
	static const TSoftObjectPtr<class UObject> GetIcon(const struct FSlaveArmTreeInfo& Info);
	static class FString GetLocalTextName(const struct FSlaveArmTreeInfo& Info);
	static const class FName GetLocalTextNameCn(const struct FSlaveArmTreeInfo& Info);
	static class FText GetLocalTextNameLocalize(const struct FSlaveArmTreeInfo& Info);
	static class FString GetLocalTextTooltip(const struct FSlaveArmTreeInfo& Info);
	static const class FName GetLocalTextTooltipCn(const struct FSlaveArmTreeInfo& Info);
	static class FText GetLocalTextTooltipLocalize(const struct FSlaveArmTreeInfo& Info);
	static const class FName GetPrerequisiteTreeCodeName(const struct FSlaveArmTreeInfo& Info);
	static const class FName GetReinforcementCodeName(const struct FSlaveArmTreeInfo& Info);
	static const class FName GetRequireItemCodeName(const struct FSlaveArmTreeInfo& Info);
	static int32 GetRequireItemCount(const struct FSlaveArmTreeInfo& Info);
	static const class FName GetSlavearmPageCodeName(const struct FSlaveArmTreeInfo& Info);
	static class FString GetVideo(const struct FSlaveArmTreeInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlaveArmTreeInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlaveArmTreeInfoFuncLibrary")
	}
	static class USlaveArmTreeInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlaveArmTreeInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USlaveArmTreeInfoFuncLibrary;

// Class ProjectPContentInfo.GeneralConditionInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UGeneralConditionInfoFuncLibrary final : public UObject
{
public:
	static ELConditionCompareType GetConditionType(const struct FGeneralConditionInfo& Info);
	static class FString GetParam1(const struct FGeneralConditionInfo& Info);
	static class FString GetParam2(const struct FGeneralConditionInfo& Info);
	static class FString GetParam3(const struct FGeneralConditionInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GeneralConditionInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GeneralConditionInfoFuncLibrary")
	}
	static class UGeneralConditionInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeneralConditionInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UGeneralConditionInfoFuncLibrary;

// Class ProjectPContentInfo.GeneralConditionInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UGeneralConditionInfoPtrFuncLibrary final : public UObject
{
public:
	static ELConditionCompareType GetConditionType(const struct FGeneralConditionInfoPtr& Ptr);
	static class FString GetParam1(const struct FGeneralConditionInfoPtr& Ptr);
	static class FString GetParam2(const struct FGeneralConditionInfoPtr& Ptr);
	static class FString GetParam3(const struct FGeneralConditionInfoPtr& Ptr);
	static bool IsValid(const struct FGeneralConditionInfoPtr& Ptr);
	static void IsValidBranch(const struct FGeneralConditionInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GeneralConditionInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GeneralConditionInfoPtrFuncLibrary")
	}
	static class UGeneralConditionInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeneralConditionInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UGeneralConditionInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SlaveArmPageInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USlaveArmPageInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetActivateRequireItemCodeName(const struct FSlaveArmPageInfo& Info);
	static const class FName GetCodeName(const struct FSlaveArmPageInfo& Info);
	static const class FName GetIcon(const struct FSlaveArmPageInfo& Info);
	static class FString GetLocalTextTooltip(const struct FSlaveArmPageInfo& Info);
	static const class FName GetLocalTextTooltipCn(const struct FSlaveArmPageInfo& Info);
	static class FText GetLocalTextTooltipLocalize(const struct FSlaveArmPageInfo& Info);
	static int32 GetPageIndex(const struct FSlaveArmPageInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlaveArmPageInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlaveArmPageInfoFuncLibrary")
	}
	static class USlaveArmPageInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlaveArmPageInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USlaveArmPageInfoFuncLibrary;

// Class ProjectPContentInfo.GeneralCommandInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UGeneralCommandInfoFuncLibrary final : public UObject
{
public:
	static ELContentCommandType GetCommandEnum(const struct FGeneralCommandInfo& Info);
	static class FString GetParam1(const struct FGeneralCommandInfo& Info);
	static class FString GetParam10(const struct FGeneralCommandInfo& Info);
	static class FString GetParam2(const struct FGeneralCommandInfo& Info);
	static class FString GetParam3(const struct FGeneralCommandInfo& Info);
	static class FString GetParam4(const struct FGeneralCommandInfo& Info);
	static class FString GetParam5(const struct FGeneralCommandInfo& Info);
	static class FString GetParam6(const struct FGeneralCommandInfo& Info);
	static class FString GetParam7(const struct FGeneralCommandInfo& Info);
	static class FString GetParam8(const struct FGeneralCommandInfo& Info);
	static class FString GetParam9(const struct FGeneralCommandInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GeneralCommandInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GeneralCommandInfoFuncLibrary")
	}
	static class UGeneralCommandInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeneralCommandInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UGeneralCommandInfoFuncLibrary;

// Class ProjectPContentInfo.GeneralCommandInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UGeneralCommandInfoPtrFuncLibrary final : public UObject
{
public:
	static ELContentCommandType GetCommandEnum(const struct FGeneralCommandInfoPtr& Ptr);
	static class FString GetParam1(const struct FGeneralCommandInfoPtr& Ptr);
	static class FString GetParam10(const struct FGeneralCommandInfoPtr& Ptr);
	static class FString GetParam2(const struct FGeneralCommandInfoPtr& Ptr);
	static class FString GetParam3(const struct FGeneralCommandInfoPtr& Ptr);
	static class FString GetParam4(const struct FGeneralCommandInfoPtr& Ptr);
	static class FString GetParam5(const struct FGeneralCommandInfoPtr& Ptr);
	static class FString GetParam6(const struct FGeneralCommandInfoPtr& Ptr);
	static class FString GetParam7(const struct FGeneralCommandInfoPtr& Ptr);
	static class FString GetParam8(const struct FGeneralCommandInfoPtr& Ptr);
	static class FString GetParam9(const struct FGeneralCommandInfoPtr& Ptr);
	static bool IsValid(const struct FGeneralCommandInfoPtr& Ptr);
	static void IsValidBranch(const struct FGeneralCommandInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GeneralCommandInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GeneralCommandInfoPtrFuncLibrary")
	}
	static class UGeneralCommandInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeneralCommandInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UGeneralCommandInfoPtrFuncLibrary;

// Class ProjectPContentInfo.PropSetProjectileInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropSetProjectileInfoFuncLibrary final : public UObject
{
public:
	static bool GetActiveFire(const struct FPropSetProjectileInfo& Info);
	static const class FName GetCodeName(const struct FPropSetProjectileInfo& Info);
	static const class FName GetDefaultMontageSection(const struct FPropSetProjectileInfo& Info);
	static const class FName GetFireMontageSection(const struct FPropSetProjectileInfo& Info);
	static int32 GetInitState(const struct FPropSetProjectileInfo& Info);
	static const TSoftClassPtr<class UClass> GetModelBP(const struct FPropSetProjectileInfo& Info);
	static const TSoftObjectPtr<class UObject> GetModelResource(const struct FPropSetProjectileInfo& Info);
	static const TSoftObjectPtr<class UObject> GetMontageResource(const struct FPropSetProjectileInfo& Info);
	static int32 GetSetStateNum(const struct FPropSetProjectileInfo& Info);
	static int32 GetState(const struct FPropSetProjectileInfo& Info);
	static ELPropVolumeStateCheckType GetVolumeCheckChangeState(const struct FPropSetProjectileInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropSetProjectileInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropSetProjectileInfoFuncLibrary")
	}
	static class UPropSetProjectileInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropSetProjectileInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropSetProjectileInfoFuncLibrary;

// Class ProjectPContentInfo.GeneralCallBackEventInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UGeneralCallBackEventInfoFuncLibrary final : public UObject
{
public:
	static class FString GetCallbackEventParam1(const struct FGeneralCallBackEventInfo& Info);
	static class FString GetCallbackEventParam2(const struct FGeneralCallBackEventInfo& Info);
	static ELCallBackEventType GetCallbackEventType(const struct FGeneralCallBackEventInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GeneralCallBackEventInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GeneralCallBackEventInfoFuncLibrary")
	}
	static class UGeneralCallBackEventInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeneralCallBackEventInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UGeneralCallBackEventInfoFuncLibrary;

// Class ProjectPContentInfo.GeneralCallBackEventInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UGeneralCallBackEventInfoPtrFuncLibrary final : public UObject
{
public:
	static class FString GetCallbackEventParam1(const struct FGeneralCallBackEventInfoPtr& Ptr);
	static class FString GetCallbackEventParam2(const struct FGeneralCallBackEventInfoPtr& Ptr);
	static ELCallBackEventType GetCallbackEventType(const struct FGeneralCallBackEventInfoPtr& Ptr);
	static bool IsValid(const struct FGeneralCallBackEventInfoPtr& Ptr);
	static void IsValidBranch(const struct FGeneralCallBackEventInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GeneralCallBackEventInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GeneralCallBackEventInfoPtrFuncLibrary")
	}
	static class UGeneralCallBackEventInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeneralCallBackEventInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UGeneralCallBackEventInfoPtrFuncLibrary;

// Class ProjectPContentInfo.PulsePointMaxInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPulsePointMaxInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetPulseRechargePointMax(const struct FPulsePointMaxInfoPtr& Ptr);
	static int32 GetRechargeCount(const struct FPulsePointMaxInfoPtr& Ptr);
	static bool IsValid(const struct FPulsePointMaxInfoPtr& Ptr);
	static void IsValidBranch(const struct FPulsePointMaxInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PulsePointMaxInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PulsePointMaxInfoPtrFuncLibrary")
	}
	static class UPulsePointMaxInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPulsePointMaxInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPulsePointMaxInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ActionStateTypeFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UActionStateTypeFuncLibrary final : public UObject
{
public:
	static const class FName GetValue(const struct FActionStateType& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActionStateTypeFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActionStateTypeFuncLibrary")
	}
	static class UActionStateTypeFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionStateTypeFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UActionStateTypeFuncLibrary;

// Class ProjectPContentInfo.ActionStateTypePtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UActionStateTypePtrFuncLibrary final : public UObject
{
public:
	static const class FName GetValue(const struct FActionStateTypePtr& Ptr);
	static bool IsValid(const struct FActionStateTypePtr& Ptr);
	static void IsValidBranch(const struct FActionStateTypePtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ActionStateTypePtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ActionStateTypePtrFuncLibrary")
	}
	static class UActionStateTypePtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionStateTypePtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UActionStateTypePtrFuncLibrary;

// Class ProjectPContentInfo.PropShapeObjectInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropShapeObjectInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FPropShapeObjectInfoPtr& Ptr);
	static const class FName GetContentCommandCodename(const struct FPropShapeObjectInfoPtr& Ptr);
	static bool GetDelConditionItem(const struct FPropShapeObjectInfoPtr& Ptr);
	static const class FName GetDrop(const struct FPropShapeObjectInfoPtr& Ptr);
	static bool GetDropItemspot(const struct FPropShapeObjectInfoPtr& Ptr);
	static const class FName GetDropProp(const struct FPropShapeObjectInfoPtr& Ptr);
	static ELMessageAlertType GetFailMessageType(const struct FPropShapeObjectInfoPtr& Ptr);
	static bool GetFixCameraOnInterAction(const struct FPropShapeObjectInfoPtr& Ptr);
	static int32 GetInitState(const struct FPropShapeObjectInfoPtr& Ptr);
	static const class FName GetInteractionApproachMessageCodeName(const struct FPropShapeObjectInfoPtr& Ptr);
	static const class FName GetInteractionCondition(const struct FPropShapeObjectInfoPtr& Ptr);
	static const class FName GetInteractionConditionFailApproachMessage(const struct FPropShapeObjectInfoPtr& Ptr);
	static const class FName GetInteractionConditionFailMessage(const struct FPropShapeObjectInfoPtr& Ptr);
	static int32 GetInteractionConditionHumanPoint(const struct FPropShapeObjectInfoPtr& Ptr);
	static const class FName GetInteractionConditionItem(const struct FPropShapeObjectInfoPtr& Ptr);
	static int32 GetInteractionConfrontAngle(const struct FPropShapeObjectInfoPtr& Ptr);
	static int32 GetInteractionConfrontAngleProp(const struct FPropShapeObjectInfoPtr& Ptr);
	static float GetInteractionMessageTime(const struct FPropShapeObjectInfoPtr& Ptr);
	static int32 GetInteractionOffsetX(const struct FPropShapeObjectInfoPtr& Ptr);
	static int32 GetInteractionOffsetY(const struct FPropShapeObjectInfoPtr& Ptr);
	static int32 GetInteractionOffsetZ(const struct FPropShapeObjectInfoPtr& Ptr);
	static float GetInteractionPropMotionDelayTime(const struct FPropShapeObjectInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetInteractionPropMotionResource(const struct FPropShapeObjectInfoPtr& Ptr);
	static int32 GetInteractionRadius(const struct FPropShapeObjectInfoPtr& Ptr);
	static const class FName GetInteractionSuccessMassage(const struct FPropShapeObjectInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetInteractionUserMotionResource(const struct FPropShapeObjectInfoPtr& Ptr);
	static ELPropInteractType GetInteractType(const struct FPropShapeObjectInfoPtr& Ptr);
	static bool GetIsPossibleBlocking(const struct FPropShapeObjectInfoPtr& Ptr);
	static ELLinkedPropExecute GetLinkedPropExecute(const struct FPropShapeObjectInfoPtr& Ptr);
	static bool GetLinkedPropStateChange(const struct FPropShapeObjectInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetLoopMotionResource(const struct FPropShapeObjectInfoPtr& Ptr);
	static const TSoftClassPtr<class UClass> GetModelBP(const struct FPropShapeObjectInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetModelResource(const struct FPropShapeObjectInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetReversePropMotionResource(const struct FPropShapeObjectInfoPtr& Ptr);
	static bool GetReverseReact(const struct FPropShapeObjectInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetReverseUserMotionResource(const struct FPropShapeObjectInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetSoundResource(const struct FPropShapeObjectInfoPtr& Ptr);
	static int32 GetState(const struct FPropShapeObjectInfoPtr& Ptr);
	static ELMessageAlertType GetSuccesMessageType(const struct FPropShapeObjectInfoPtr& Ptr);
	static bool IsValid(const struct FPropShapeObjectInfoPtr& Ptr);
	static void IsValidBranch(const struct FPropShapeObjectInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropShapeObjectInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropShapeObjectInfoPtrFuncLibrary")
	}
	static class UPropShapeObjectInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropShapeObjectInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropShapeObjectInfoPtrFuncLibrary;

// Class ProjectPContentInfo.PackageSettingInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPackageSettingInfoFuncLibrary final : public UObject
{
public:
	static int32 GetAcquisitionDelayMs(const struct FPackageSettingInfo& Info);
	static int32 GetAcquisitionPercentage(const struct FPackageSettingInfo& Info);
	static TArray<int32> GetDropOffset(const struct FPackageSettingInfo& Info);
	static class FString GetFirstKillPackageConfigureCodename(const struct FPackageSettingInfo& Info);
	static ELFirstKillRewardType GetFirstKillRewardType(const struct FPackageSettingInfo& Info);
	static bool GetForceAcquisition(const struct FPackageSettingInfo& Info);
	static EPackageOfferMethodType GetOfferMethod(const struct FPackageSettingInfo& Info);
	static EPackageOfferReasonType GetOfferReason(const struct FPackageSettingInfo& Info);
	static const class FName GetOwnerId(const struct FPackageSettingInfo& Info);
	static EPackageOwnerType GetOwnerType(const struct FPackageSettingInfo& Info);
	static const class FName GetPackageConfigureId(const struct FPackageSettingInfo& Info);
	static const class FName GetPropCodeName(const struct FPackageSettingInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PackageSettingInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PackageSettingInfoFuncLibrary")
	}
	static class UPackageSettingInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPackageSettingInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPackageSettingInfoFuncLibrary;

// Class ProjectPContentInfo.PackageSettingInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPackageSettingInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetAcquisitionDelayMs(const struct FPackageSettingInfoPtr& Ptr);
	static int32 GetAcquisitionPercentage(const struct FPackageSettingInfoPtr& Ptr);
	static TArray<int32> GetDropOffset(const struct FPackageSettingInfoPtr& Ptr);
	static class FString GetFirstKillPackageConfigureCodename(const struct FPackageSettingInfoPtr& Ptr);
	static ELFirstKillRewardType GetFirstKillRewardType(const struct FPackageSettingInfoPtr& Ptr);
	static bool GetForceAcquisition(const struct FPackageSettingInfoPtr& Ptr);
	static EPackageOfferMethodType GetOfferMethod(const struct FPackageSettingInfoPtr& Ptr);
	static EPackageOfferReasonType GetOfferReason(const struct FPackageSettingInfoPtr& Ptr);
	static const class FName GetOwnerId(const struct FPackageSettingInfoPtr& Ptr);
	static EPackageOwnerType GetOwnerType(const struct FPackageSettingInfoPtr& Ptr);
	static const class FName GetPackageConfigureId(const struct FPackageSettingInfoPtr& Ptr);
	static const class FName GetPropCodeName(const struct FPackageSettingInfoPtr& Ptr);
	static bool IsValid(const struct FPackageSettingInfoPtr& Ptr);
	static void IsValidBranch(const struct FPackageSettingInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PackageSettingInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PackageSettingInfoPtrFuncLibrary")
	}
	static class UPackageSettingInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPackageSettingInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPackageSettingInfoPtrFuncLibrary;

// Class ProjectPContentInfo.PropLiftInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropLiftInfoPtrFuncLibrary final : public UObject
{
public:
	static const TSoftObjectPtr<class UObject> GetActivateInteractionUserMotionResource(const struct FPropLiftInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetCallFailInteractionUserMotionResource(const struct FPropLiftInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FPropLiftInfoPtr& Ptr);
	static const class FName GetConditionCheckFailMessage(const struct FPropLiftInfoPtr& Ptr);
	static const class FName GetContentCondition(const struct FPropLiftInfoPtr& Ptr);
	static const class FName GetElevatorInteractionMessageCodeName(const struct FPropLiftInfoPtr& Ptr);
	static int32 GetInitState(const struct FPropLiftInfoPtr& Ptr);
	static ELPropLiftStateType GetLiftState(const struct FPropLiftInfoPtr& Ptr);
	static const TSoftClassPtr<class UClass> GetModelBP(const struct FPropLiftInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetMoveInteractionUserMotionResource(const struct FPropLiftInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetMovingCurve(const struct FPropLiftInfoPtr& Ptr);
	static int32 GetMovingTime(const struct FPropLiftInfoPtr& Ptr);
	static const TSoftClassPtr<class UClass> GetPointADoorBP(const struct FPropLiftInfoPtr& Ptr);
	static const TSoftClassPtr<class UClass> GetPointATriggerBP(const struct FPropLiftInfoPtr& Ptr);
	static const class FName GetPointATriggerConditionCheckFailMessage(const struct FPropLiftInfoPtr& Ptr);
	static const class FName GetPointATriggerContentCondition(const struct FPropLiftInfoPtr& Ptr);
	static const TSoftClassPtr<class UClass> GetPointBDoorBP(const struct FPropLiftInfoPtr& Ptr);
	static const TSoftClassPtr<class UClass> GetPointBTriggerBP(const struct FPropLiftInfoPtr& Ptr);
	static const class FName GetPointBTriggerConditionCheckFailMessage(const struct FPropLiftInfoPtr& Ptr);
	static const class FName GetPointBTriggerContentCondition(const struct FPropLiftInfoPtr& Ptr);
	static const class FName GetTriggerInteractionMessageCodeName(const struct FPropLiftInfoPtr& Ptr);
	static bool IsValid(const struct FPropLiftInfoPtr& Ptr);
	static void IsValidBranch(const struct FPropLiftInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropLiftInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropLiftInfoPtrFuncLibrary")
	}
	static class UPropLiftInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropLiftInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropLiftInfoPtrFuncLibrary;

// Class ProjectPContentInfo.PackageConfigureInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPackageConfigureInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetConditionCodename(const struct FPackageConfigureInfo& Info);
	static const class FName GetDropSetCodeName(const struct FPackageConfigureInfo& Info);
	static ELDropType GetDropType(const struct FPackageConfigureInfo& Info);
	static const class FName GetIndex(const struct FPackageConfigureInfo& Info);
	static int32 GetIndexDetail(const struct FPackageConfigureInfo& Info);
	static int32 GetItemAcquisitionPercentage(const struct FPackageConfigureInfo& Info);
	static const class FName GetItemCodeName(const struct FPackageConfigureInfo& Info);
	static int32 GetItemCount(const struct FPackageConfigureInfo& Info);
	static int32 GetNGPRound(const struct FPackageConfigureInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PackageConfigureInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PackageConfigureInfoFuncLibrary")
	}
	static class UPackageConfigureInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPackageConfigureInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPackageConfigureInfoFuncLibrary;

// Class ProjectPContentInfo.PackageConfigureInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPackageConfigureInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetConditionCodename(const struct FPackageConfigureInfoPtr& Ptr);
	static const class FName GetDropSetCodeName(const struct FPackageConfigureInfoPtr& Ptr);
	static ELDropType GetDropType(const struct FPackageConfigureInfoPtr& Ptr);
	static const class FName GetIndex(const struct FPackageConfigureInfoPtr& Ptr);
	static int32 GetIndexDetail(const struct FPackageConfigureInfoPtr& Ptr);
	static int32 GetItemAcquisitionPercentage(const struct FPackageConfigureInfoPtr& Ptr);
	static const class FName GetItemCodeName(const struct FPackageConfigureInfoPtr& Ptr);
	static int32 GetItemCount(const struct FPackageConfigureInfoPtr& Ptr);
	static int32 GetNGPRound(const struct FPackageConfigureInfoPtr& Ptr);
	static bool IsValid(const struct FPackageConfigureInfoPtr& Ptr);
	static void IsValidBranch(const struct FPackageConfigureInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PackageConfigureInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PackageConfigureInfoPtrFuncLibrary")
	}
	static class UPackageConfigureInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPackageConfigureInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPackageConfigureInfoPtrFuncLibrary;

// Class ProjectPContentInfo.PropVolumeInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UPropVolumeInfoAsset final : public UContentInfoAsset
{
public:
	struct FPropVolumeInfoDB                      ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FPropVolumeInfo> GetPropVolumeInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropVolumeInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropVolumeInfoAsset")
	}
	static class UPropVolumeInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropVolumeInfoAsset>();
	}
};
DUMPER7_ASSERTS_UPropVolumeInfoAsset;

// Class ProjectPContentInfo.ItemDropInfoAsset
// 0x0068 (0x00E0 - 0x0078)
class alignas(0x10) UItemDropInfoAsset final : public UContentInfoAsset
{
public:
	struct FItemDropInfoDB                        ContentInfoDB;                                     // 0x0078(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FPackageConfigureInfo> GetPackageConfigureInfoArrayBP();
	static const TArray<struct FPackageSettingInfo> GetPackageSettingInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemDropInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemDropInfoAsset")
	}
	static class UItemDropInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemDropInfoAsset>();
	}
};
DUMPER7_ASSERTS_UItemDropInfoAsset;

// Class ProjectPContentInfo.ItemCommonInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemCommonInfoFuncLibrary final : public UObject
{
public:
	static bool GetBattleItem(const struct FItemCommonInfo& Info);
	static bool GetCanAbandonment(const struct FItemCommonInfo& Info);
	static bool GetCanKeep(const struct FItemCommonInfo& Info);
	static bool GetCanSelling(const struct FItemCommonInfo& Info);
	static bool GetCanStackInventory(const struct FItemCommonInfo& Info);
	static const class FName GetCodeName(const struct FItemCommonInfo& Info);
	static int32 GetEquipGroupId(const struct FItemCommonInfo& Info);
	static const class FName GetEquipSpecialbuffCodeName(const struct FItemCommonInfo& Info);
	static ELItemFirstCategory GetFirstCategory(const struct FItemCommonInfo& Info);
	static const TSoftObjectPtr<class UObject> GetHeroicWeaponImageResource(const struct FItemCommonInfo& Info);
	static const TSoftObjectPtr<class UObject> GetImage2Resource(const struct FItemCommonInfo& Info);
	static const TSoftObjectPtr<class UObject> GetImage3Resource(const struct FItemCommonInfo& Info);
	static const TSoftObjectPtr<class UObject> GetImage4Resource(const struct FItemCommonInfo& Info);
	static const TSoftObjectPtr<class UObject> GetImageResource(const struct FItemCommonInfo& Info);
	static int32 GetInfoNoticeCount(const struct FItemCommonInfo& Info);
	static const class FName GetItemCostumeCodename(const struct FItemCommonInfo& Info);
	static class FString GetLocalTextItemName(const struct FItemCommonInfo& Info);
	static const class FName GetLocalTextItemNameCn(const struct FItemCommonInfo& Info);
	static class FText GetLocalTextItemNameLocalize(const struct FItemCommonInfo& Info);
	static class FString GetLocalTextTooltip1(const struct FItemCommonInfo& Info);
	static const class FName GetLocalTextTooltip1Cn(const struct FItemCommonInfo& Info);
	static class FText GetLocalTextTooltip1Localize(const struct FItemCommonInfo& Info);
	static class FString GetLocalTextTooltip2(const struct FItemCommonInfo& Info);
	static const class FName GetLocalTextTooltip2Cn(const struct FItemCommonInfo& Info);
	static class FText GetLocalTextTooltip2Localize(const struct FItemCommonInfo& Info);
	static int32 GetMaxStackCount(const struct FItemCommonInfo& Info);
	static bool GetNGPDelete(const struct FItemCommonInfo& Info);
	static bool GetNGPKeep(const struct FItemCommonInfo& Info);
	static bool GetNGPOnlyOne(const struct FItemCommonInfo& Info);
	static bool GetQuickslotEquipment(const struct FItemCommonInfo& Info);
	static ELItemSecondCategory GetSecondCategory(const struct FItemCommonInfo& Info);
	static int32 GetSellingPrice(const struct FItemCommonInfo& Info);
	static const class FName GetShowTooltipUnusableNow(const struct FItemCommonInfo& Info);
	static class FString GetSimpleTooltip(const struct FItemCommonInfo& Info);
	static const class FName GetSimpleTooltipCn(const struct FItemCommonInfo& Info);
	static class FText GetSimpleTooltipLocalize(const struct FItemCommonInfo& Info);
	static ELTooltipIconType GetSimpleTooltipType(const struct FItemCommonInfo& Info);
	static int32 GetSortPriority(const struct FItemCommonInfo& Info);
	static int32 GetValueGrade(const struct FItemCommonInfo& Info);
	static int32 GetWeight(const struct FItemCommonInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemCommonInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemCommonInfoFuncLibrary")
	}
	static class UItemCommonInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemCommonInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemCommonInfoFuncLibrary;

// Class ProjectPContentInfo.QuestRewardItemInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UQuestRewardItemInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetItemCodeName(const struct FQuestRewardItemInfo& Info);
	static int32 GetItemCount(const struct FQuestRewardItemInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("QuestRewardItemInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"QuestRewardItemInfoFuncLibrary")
	}
	static class UQuestRewardItemInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestRewardItemInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UQuestRewardItemInfoFuncLibrary;

// Class ProjectPContentInfo.ItemCommonInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemCommonInfoPtrFuncLibrary final : public UObject
{
public:
	static bool GetBattleItem(const struct FItemCommonInfoPtr& Ptr);
	static bool GetCanAbandonment(const struct FItemCommonInfoPtr& Ptr);
	static bool GetCanKeep(const struct FItemCommonInfoPtr& Ptr);
	static bool GetCanSelling(const struct FItemCommonInfoPtr& Ptr);
	static bool GetCanStackInventory(const struct FItemCommonInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FItemCommonInfoPtr& Ptr);
	static int32 GetEquipGroupId(const struct FItemCommonInfoPtr& Ptr);
	static const class FName GetEquipSpecialbuffCodeName(const struct FItemCommonInfoPtr& Ptr);
	static ELItemFirstCategory GetFirstCategory(const struct FItemCommonInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetHeroicWeaponImageResource(const struct FItemCommonInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetImage2Resource(const struct FItemCommonInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetImage3Resource(const struct FItemCommonInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetImage4Resource(const struct FItemCommonInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetImageResource(const struct FItemCommonInfoPtr& Ptr);
	static int32 GetInfoNoticeCount(const struct FItemCommonInfoPtr& Ptr);
	static const class FName GetItemCostumeCodename(const struct FItemCommonInfoPtr& Ptr);
	static class FString GetLocalTextItemName(const struct FItemCommonInfoPtr& Ptr);
	static const class FName GetLocalTextItemNameCn(const struct FItemCommonInfoPtr& Ptr);
	static class FText GetLocalTextItemNameLocalize(const struct FItemCommonInfoPtr& Ptr);
	static class FString GetLocalTextTooltip1(const struct FItemCommonInfoPtr& Ptr);
	static const class FName GetLocalTextTooltip1Cn(const struct FItemCommonInfoPtr& Ptr);
	static class FText GetLocalTextTooltip1Localize(const struct FItemCommonInfoPtr& Ptr);
	static class FString GetLocalTextTooltip2(const struct FItemCommonInfoPtr& Ptr);
	static const class FName GetLocalTextTooltip2Cn(const struct FItemCommonInfoPtr& Ptr);
	static class FText GetLocalTextTooltip2Localize(const struct FItemCommonInfoPtr& Ptr);
	static int32 GetMaxStackCount(const struct FItemCommonInfoPtr& Ptr);
	static bool GetNGPDelete(const struct FItemCommonInfoPtr& Ptr);
	static bool GetNGPKeep(const struct FItemCommonInfoPtr& Ptr);
	static bool GetNGPOnlyOne(const struct FItemCommonInfoPtr& Ptr);
	static bool GetQuickslotEquipment(const struct FItemCommonInfoPtr& Ptr);
	static ELItemSecondCategory GetSecondCategory(const struct FItemCommonInfoPtr& Ptr);
	static int32 GetSellingPrice(const struct FItemCommonInfoPtr& Ptr);
	static const class FName GetShowTooltipUnusableNow(const struct FItemCommonInfoPtr& Ptr);
	static class FString GetSimpleTooltip(const struct FItemCommonInfoPtr& Ptr);
	static const class FName GetSimpleTooltipCn(const struct FItemCommonInfoPtr& Ptr);
	static class FText GetSimpleTooltipLocalize(const struct FItemCommonInfoPtr& Ptr);
	static ELTooltipIconType GetSimpleTooltipType(const struct FItemCommonInfoPtr& Ptr);
	static int32 GetSortPriority(const struct FItemCommonInfoPtr& Ptr);
	static int32 GetValueGrade(const struct FItemCommonInfoPtr& Ptr);
	static int32 GetWeight(const struct FItemCommonInfoPtr& Ptr);
	static bool IsValid(const struct FItemCommonInfoPtr& Ptr);
	static void IsValidBranch(const struct FItemCommonInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemCommonInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemCommonInfoPtrFuncLibrary")
	}
	static class UItemCommonInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemCommonInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemCommonInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ItemCostumeInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemCostumeInfoFuncLibrary final : public UObject
{
public:
	static bool GetAccessory(const struct FItemCostumeInfo& Info);
	static const TSoftObjectPtr<class UObject> GetBasic(const struct FItemCostumeInfo& Info);
	static const class FName GetCodeName(const struct FItemCostumeInfo& Info);
	static const TSoftObjectPtr<class UObject> GetLong(const struct FItemCostumeInfo& Info);
	static bool GetNeedShrink(const struct FItemCostumeInfo& Info);
	static const TSoftObjectPtr<class UObject> GetWlong(const struct FItemCostumeInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemCostumeInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemCostumeInfoFuncLibrary")
	}
	static class UItemCostumeInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemCostumeInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemCostumeInfoFuncLibrary;

// Class ProjectPContentInfo.QuartzEffectInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UQuartzEffectInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FQuartzEffectInfo& Info);
	static int32 GetCoreLevel(const struct FQuartzEffectInfo& Info);
	static int32 GetEffectIndex(const struct FQuartzEffectInfo& Info);
	static ELQuartzEffectType GetEffectType(const struct FQuartzEffectInfo& Info);
	static int32 GetNumberOverlappingEffect(const struct FQuartzEffectInfo& Info);
	static const class FName GetSpecialBuffCodeName(const struct FQuartzEffectInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("QuartzEffectInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"QuartzEffectInfoFuncLibrary")
	}
	static class UQuartzEffectInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuartzEffectInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UQuartzEffectInfoFuncLibrary;

// Class ProjectPContentInfo.ItemCostumeInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemCostumeInfoPtrFuncLibrary final : public UObject
{
public:
	static bool GetAccessory(const struct FItemCostumeInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetBasic(const struct FItemCostumeInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FItemCostumeInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetLong(const struct FItemCostumeInfoPtr& Ptr);
	static bool GetNeedShrink(const struct FItemCostumeInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetWlong(const struct FItemCostumeInfoPtr& Ptr);
	static bool IsValid(const struct FItemCostumeInfoPtr& Ptr);
	static void IsValidBranch(const struct FItemCostumeInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemCostumeInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemCostumeInfoPtrFuncLibrary")
	}
	static class UItemCostumeInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemCostumeInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemCostumeInfoPtrFuncLibrary;

// Class ProjectPContentInfo.CorrectionWeaponFirstStatInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UCorrectionWeaponFirstStatInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FCorrectionWeaponFirstStatInfo& Info);
	static const class FName GetDowngradeCodename(const struct FCorrectionWeaponFirstStatInfo& Info);
	static ELWeaponCorrectionPhysicalGrade GetGrade(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel1(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel10(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel100(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel11(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel12(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel13(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel14(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel15(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel16(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel17(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel18(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel19(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel2(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel20(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel21(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel22(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel23(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel24(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel25(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel26(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel27(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel28(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel29(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel3(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel30(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel31(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel32(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel33(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel34(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel35(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel36(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel37(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel38(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel39(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel4(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel40(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel41(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel42(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel43(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel44(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel45(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel46(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel47(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel48(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel49(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel5(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel50(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel51(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel52(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel53(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel54(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel55(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel56(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel57(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel58(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel59(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel6(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel60(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel61(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel62(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel63(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel64(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel65(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel66(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel67(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel68(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel69(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel7(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel70(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel71(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel72(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel73(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel74(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel75(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel76(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel77(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel78(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel79(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel8(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel80(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel81(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel82(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel83(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel84(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel85(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel86(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel87(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel88(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel89(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel9(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel90(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel91(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel92(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel93(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel94(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel95(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel96(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel97(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel98(const struct FCorrectionWeaponFirstStatInfo& Info);
	static int32 GetStatLevel99(const struct FCorrectionWeaponFirstStatInfo& Info);
	static const class FName GetUpgradeCodename(const struct FCorrectionWeaponFirstStatInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CorrectionWeaponFirstStatInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CorrectionWeaponFirstStatInfoFuncLibrary")
	}
	static class UCorrectionWeaponFirstStatInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorrectionWeaponFirstStatInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UCorrectionWeaponFirstStatInfoFuncLibrary;

// Class ProjectPContentInfo.PropVolumeInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropVolumeInfoFuncLibrary final : public UObject
{
public:
	static ELAbnomalStateApplyType GetAbnomalStateApplyType(const struct FPropVolumeInfo& Info);
	static int32 GetAbnomalStateBuildupDamage(const struct FPropVolumeInfo& Info);
	static int32 GetAbnomalStateBuildupDamageTickTime(const struct FPropVolumeInfo& Info);
	static const class FName GetAbnomalStateCodename(const struct FPropVolumeInfo& Info);
	static const TArray<EFactionType> GetAbnomalStateTargetFilter(const struct FPropVolumeInfo& Info);
	static int32 GetAbnormalStatePenaltyBase(const struct FPropVolumeInfo& Info);
	static int32 GetBuildUpRecoverIncBase(const struct FPropVolumeInfo& Info);
	static const class FName GetCodeName(const struct FPropVolumeInfo& Info);
	static ELInteractionEvokeType GetInteractionEvokeType(const struct FPropVolumeInfo& Info);
	static const class FName GetLocationNameDisplay(const struct FPropVolumeInfo& Info);
	static const TSoftObjectPtr<class UObject> GetLoopVisualAssetResource(const struct FPropVolumeInfo& Info);
	static int32 GetState(const struct FPropVolumeInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropVolumeInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropVolumeInfoFuncLibrary")
	}
	static class UPropVolumeInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropVolumeInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropVolumeInfoFuncLibrary;

// Class ProjectPContentInfo.CorrectionWeaponFirstStatInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UCorrectionWeaponFirstStatInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static const class FName GetDowngradeCodename(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static ELWeaponCorrectionPhysicalGrade GetGrade(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel1(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel10(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel100(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel11(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel12(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel13(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel14(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel15(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel16(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel17(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel18(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel19(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel2(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel20(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel21(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel22(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel23(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel24(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel25(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel26(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel27(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel28(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel29(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel3(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel30(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel31(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel32(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel33(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel34(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel35(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel36(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel37(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel38(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel39(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel4(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel40(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel41(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel42(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel43(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel44(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel45(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel46(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel47(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel48(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel49(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel5(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel50(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel51(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel52(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel53(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel54(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel55(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel56(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel57(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel58(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel59(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel6(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel60(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel61(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel62(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel63(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel64(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel65(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel66(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel67(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel68(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel69(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel7(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel70(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel71(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel72(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel73(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel74(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel75(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel76(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel77(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel78(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel79(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel8(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel80(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel81(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel82(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel83(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel84(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel85(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel86(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel87(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel88(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel89(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel9(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel90(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel91(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel92(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel93(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel94(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel95(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel96(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel97(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel98(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static int32 GetStatLevel99(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static const class FName GetUpgradeCodename(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static bool IsValid(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr);
	static void IsValidBranch(const struct FCorrectionWeaponFirstStatInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("CorrectionWeaponFirstStatInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"CorrectionWeaponFirstStatInfoPtrFuncLibrary")
	}
	static class UCorrectionWeaponFirstStatInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCorrectionWeaponFirstStatInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UCorrectionWeaponFirstStatInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ItemPartsInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemPartsInfoFuncLibrary final : public UObject
{
public:
	static int32 GetAcidDebuffResist(const struct FItemPartsInfo& Info);
	static int32 GetAcidReduce(const struct FItemPartsInfo& Info);
	static int32 GetBreakDebuffResist(const struct FItemPartsInfo& Info);
	static int32 GetBuildupAcidReduction(const struct FItemPartsInfo& Info);
	static int32 GetBuildupBreakReduction(const struct FItemPartsInfo& Info);
	static int32 GetBuildupContaminationReduction(const struct FItemPartsInfo& Info);
	static int32 GetBuildupCurseReduction(const struct FItemPartsInfo& Info);
	static int32 GetBuildupElectricReduction(const struct FItemPartsInfo& Info);
	static int32 GetBuildupFireReduction(const struct FItemPartsInfo& Info);
	static int32 GetBuildupImpactReduction(const struct FItemPartsInfo& Info);
	static const class FName GetCodeName(const struct FItemPartsInfo& Info);
	static int32 GetContaminationDebuffResist(const struct FItemPartsInfo& Info);
	static int32 GetCurseDebuffResist(const struct FItemPartsInfo& Info);
	static int32 GetElectricDebuffResist(const struct FItemPartsInfo& Info);
	static int32 GetElectricReduce(const struct FItemPartsInfo& Info);
	static ELItemPartsSlot GetEquipSlot(const struct FItemPartsInfo& Info);
	static int32 GetFireDebuffResist(const struct FItemPartsInfo& Info);
	static int32 GetFireReduce(const struct FItemPartsInfo& Info);
	static int32 GetImpactDebuffResist(const struct FItemPartsInfo& Info);
	static ELItemMaterial GetMaterialType(const struct FItemPartsInfo& Info);
	static int32 GetPhysicalPierceReduce(const struct FItemPartsInfo& Info);
	static int32 GetPhysicalReduce(const struct FItemPartsInfo& Info);
	static int32 GetPhysicalSlashReduce(const struct FItemPartsInfo& Info);
	static int32 GetPhysicalStrikeReduce(const struct FItemPartsInfo& Info);
	static int32 GetTough(const struct FItemPartsInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemPartsInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemPartsInfoFuncLibrary")
	}
	static class UItemPartsInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemPartsInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemPartsInfoFuncLibrary;

// Class ProjectPContentInfo.QuartzPocketInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UQuartzPocketInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FQuartzPocketInfoPtr& Ptr);
	static const class FName GetDescription(const struct FQuartzPocketInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetImage(const struct FQuartzPocketInfoPtr& Ptr);
	static int32 GetLevel(const struct FQuartzPocketInfoPtr& Ptr);
	static int32 GetNumberOverlappingSynergy(const struct FQuartzPocketInfoPtr& Ptr);
	static int32 GetPocketIndex(const struct FQuartzPocketInfoPtr& Ptr);
	static int32 GetSlotCount(const struct FQuartzPocketInfoPtr& Ptr);
	static int32 GetSynergyActivateSlotCount(const struct FQuartzPocketInfoPtr& Ptr);
	static const class FName GetSynergySpecialBuffCodeName(const struct FQuartzPocketInfoPtr& Ptr);
	static bool IsValid(const struct FQuartzPocketInfoPtr& Ptr);
	static void IsValidBranch(const struct FQuartzPocketInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("QuartzPocketInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"QuartzPocketInfoPtrFuncLibrary")
	}
	static class UQuartzPocketInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuartzPocketInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UQuartzPocketInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ItemPartsInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemPartsInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetAcidDebuffResist(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetAcidReduce(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetBreakDebuffResist(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetBuildupAcidReduction(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetBuildupBreakReduction(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetBuildupContaminationReduction(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetBuildupCurseReduction(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetBuildupElectricReduction(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetBuildupFireReduction(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetBuildupImpactReduction(const struct FItemPartsInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetContaminationDebuffResist(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetCurseDebuffResist(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetElectricDebuffResist(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetElectricReduce(const struct FItemPartsInfoPtr& Ptr);
	static ELItemPartsSlot GetEquipSlot(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetFireDebuffResist(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetFireReduce(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetImpactDebuffResist(const struct FItemPartsInfoPtr& Ptr);
	static ELItemMaterial GetMaterialType(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetPhysicalPierceReduce(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetPhysicalReduce(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetPhysicalSlashReduce(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetPhysicalStrikeReduce(const struct FItemPartsInfoPtr& Ptr);
	static int32 GetTough(const struct FItemPartsInfoPtr& Ptr);
	static bool IsValid(const struct FItemPartsInfoPtr& Ptr);
	static void IsValidBranch(const struct FItemPartsInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemPartsInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemPartsInfoPtrFuncLibrary")
	}
	static class UItemPartsInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemPartsInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemPartsInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ItemCollectionInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemCollectionInfoFuncLibrary final : public UObject
{
public:
	static int32 GetAcquisitionHumanityPlayTime(const struct FItemCollectionInfo& Info);
	static int32 GetAcquisitionHumanityPoint(const struct FItemCollectionInfo& Info);
	static float GetBgmDuration(const struct FItemCollectionInfo& Info);
	static const TSoftObjectPtr<class UObject> GetBgmResource(const struct FItemCollectionInfo& Info);
	static const class FName GetCodeName(const struct FItemCollectionInfo& Info);
	static int32 GetCommandExecTime(const struct FItemCollectionInfo& Info);
	static const class FName GetContentCommandCodename(const struct FItemCollectionInfo& Info);
	static const TSoftObjectPtr<class UObject> GetImageResource(const struct FItemCollectionInfo& Info);
	static class FString GetLocalTextContent1(const struct FItemCollectionInfo& Info);
	static class FString GetLocalTextContent10(const struct FItemCollectionInfo& Info);
	static const class FName GetLocalTextContent10Cn(const struct FItemCollectionInfo& Info);
	static class FText GetLocalTextContent10Localize(const struct FItemCollectionInfo& Info);
	static const class FName GetLocalTextContent1Cn(const struct FItemCollectionInfo& Info);
	static class FText GetLocalTextContent1Localize(const struct FItemCollectionInfo& Info);
	static class FString GetLocalTextContent2(const struct FItemCollectionInfo& Info);
	static const class FName GetLocalTextContent2Cn(const struct FItemCollectionInfo& Info);
	static class FText GetLocalTextContent2Localize(const struct FItemCollectionInfo& Info);
	static class FString GetLocalTextContent3(const struct FItemCollectionInfo& Info);
	static const class FName GetLocalTextContent3Cn(const struct FItemCollectionInfo& Info);
	static class FText GetLocalTextContent3Localize(const struct FItemCollectionInfo& Info);
	static class FString GetLocalTextContent4(const struct FItemCollectionInfo& Info);
	static const class FName GetLocalTextContent4Cn(const struct FItemCollectionInfo& Info);
	static class FText GetLocalTextContent4Localize(const struct FItemCollectionInfo& Info);
	static class FString GetLocalTextContent5(const struct FItemCollectionInfo& Info);
	static const class FName GetLocalTextContent5Cn(const struct FItemCollectionInfo& Info);
	static class FText GetLocalTextContent5Localize(const struct FItemCollectionInfo& Info);
	static class FString GetLocalTextContent6(const struct FItemCollectionInfo& Info);
	static const class FName GetLocalTextContent6Cn(const struct FItemCollectionInfo& Info);
	static class FText GetLocalTextContent6Localize(const struct FItemCollectionInfo& Info);
	static class FString GetLocalTextContent7(const struct FItemCollectionInfo& Info);
	static const class FName GetLocalTextContent7Cn(const struct FItemCollectionInfo& Info);
	static class FText GetLocalTextContent7Localize(const struct FItemCollectionInfo& Info);
	static class FString GetLocalTextContent8(const struct FItemCollectionInfo& Info);
	static const class FName GetLocalTextContent8Cn(const struct FItemCollectionInfo& Info);
	static class FText GetLocalTextContent8Localize(const struct FItemCollectionInfo& Info);
	static class FString GetLocalTextContent9(const struct FItemCollectionInfo& Info);
	static const class FName GetLocalTextContent9Cn(const struct FItemCollectionInfo& Info);
	static class FText GetLocalTextContent9Localize(const struct FItemCollectionInfo& Info);
	static int32 GetPageMax(const struct FItemCollectionInfo& Info);
	static int32 GetRecordListOrder(const struct FItemCollectionInfo& Info);
	static ELItemCollectionType GetType(const struct FItemCollectionInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemCollectionInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemCollectionInfoFuncLibrary")
	}
	static class UItemCollectionInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemCollectionInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemCollectionInfoFuncLibrary;

// Class ProjectPContentInfo.RecollectionInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class URecollectionInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetAssetTableCodeName(const struct FRecollectionInfoPtr& Ptr);
	static ELRecollectionCategory GetCategory(const struct FRecollectionInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FRecollectionInfoPtr& Ptr);
	static int32 GetIndex(const struct FRecollectionInfoPtr& Ptr);
	static class FString GetLocalTextName(const struct FRecollectionInfoPtr& Ptr);
	static const class FName GetLocalTextNameCn(const struct FRecollectionInfoPtr& Ptr);
	static class FText GetLocalTextNameLocalize(const struct FRecollectionInfoPtr& Ptr);
	static class FString GetLocalTextTooltip1(const struct FRecollectionInfoPtr& Ptr);
	static const class FName GetLocalTextTooltip1Cn(const struct FRecollectionInfoPtr& Ptr);
	static class FText GetLocalTextTooltip1Localize(const struct FRecollectionInfoPtr& Ptr);
	static class FString GetLocalTextTooltip2(const struct FRecollectionInfoPtr& Ptr);
	static const class FName GetLocalTextTooltip2Cn(const struct FRecollectionInfoPtr& Ptr);
	static class FText GetLocalTextTooltip2Localize(const struct FRecollectionInfoPtr& Ptr);
	static bool IsValid(const struct FRecollectionInfoPtr& Ptr);
	static void IsValidBranch(const struct FRecollectionInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RecollectionInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RecollectionInfoPtrFuncLibrary")
	}
	static class URecollectionInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URecollectionInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_URecollectionInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ItemCollectionInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemCollectionInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetAcquisitionHumanityPlayTime(const struct FItemCollectionInfoPtr& Ptr);
	static int32 GetAcquisitionHumanityPoint(const struct FItemCollectionInfoPtr& Ptr);
	static float GetBgmDuration(const struct FItemCollectionInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetBgmResource(const struct FItemCollectionInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FItemCollectionInfoPtr& Ptr);
	static int32 GetCommandExecTime(const struct FItemCollectionInfoPtr& Ptr);
	static const class FName GetContentCommandCodename(const struct FItemCollectionInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetImageResource(const struct FItemCollectionInfoPtr& Ptr);
	static class FString GetLocalTextContent1(const struct FItemCollectionInfoPtr& Ptr);
	static class FString GetLocalTextContent10(const struct FItemCollectionInfoPtr& Ptr);
	static const class FName GetLocalTextContent10Cn(const struct FItemCollectionInfoPtr& Ptr);
	static class FText GetLocalTextContent10Localize(const struct FItemCollectionInfoPtr& Ptr);
	static const class FName GetLocalTextContent1Cn(const struct FItemCollectionInfoPtr& Ptr);
	static class FText GetLocalTextContent1Localize(const struct FItemCollectionInfoPtr& Ptr);
	static class FString GetLocalTextContent2(const struct FItemCollectionInfoPtr& Ptr);
	static const class FName GetLocalTextContent2Cn(const struct FItemCollectionInfoPtr& Ptr);
	static class FText GetLocalTextContent2Localize(const struct FItemCollectionInfoPtr& Ptr);
	static class FString GetLocalTextContent3(const struct FItemCollectionInfoPtr& Ptr);
	static const class FName GetLocalTextContent3Cn(const struct FItemCollectionInfoPtr& Ptr);
	static class FText GetLocalTextContent3Localize(const struct FItemCollectionInfoPtr& Ptr);
	static class FString GetLocalTextContent4(const struct FItemCollectionInfoPtr& Ptr);
	static const class FName GetLocalTextContent4Cn(const struct FItemCollectionInfoPtr& Ptr);
	static class FText GetLocalTextContent4Localize(const struct FItemCollectionInfoPtr& Ptr);
	static class FString GetLocalTextContent5(const struct FItemCollectionInfoPtr& Ptr);
	static const class FName GetLocalTextContent5Cn(const struct FItemCollectionInfoPtr& Ptr);
	static class FText GetLocalTextContent5Localize(const struct FItemCollectionInfoPtr& Ptr);
	static class FString GetLocalTextContent6(const struct FItemCollectionInfoPtr& Ptr);
	static const class FName GetLocalTextContent6Cn(const struct FItemCollectionInfoPtr& Ptr);
	static class FText GetLocalTextContent6Localize(const struct FItemCollectionInfoPtr& Ptr);
	static class FString GetLocalTextContent7(const struct FItemCollectionInfoPtr& Ptr);
	static const class FName GetLocalTextContent7Cn(const struct FItemCollectionInfoPtr& Ptr);
	static class FText GetLocalTextContent7Localize(const struct FItemCollectionInfoPtr& Ptr);
	static class FString GetLocalTextContent8(const struct FItemCollectionInfoPtr& Ptr);
	static const class FName GetLocalTextContent8Cn(const struct FItemCollectionInfoPtr& Ptr);
	static class FText GetLocalTextContent8Localize(const struct FItemCollectionInfoPtr& Ptr);
	static class FString GetLocalTextContent9(const struct FItemCollectionInfoPtr& Ptr);
	static const class FName GetLocalTextContent9Cn(const struct FItemCollectionInfoPtr& Ptr);
	static class FText GetLocalTextContent9Localize(const struct FItemCollectionInfoPtr& Ptr);
	static int32 GetPageMax(const struct FItemCollectionInfoPtr& Ptr);
	static int32 GetRecordListOrder(const struct FItemCollectionInfoPtr& Ptr);
	static ELItemCollectionType GetType(const struct FItemCollectionInfoPtr& Ptr);
	static bool IsValid(const struct FItemCollectionInfoPtr& Ptr);
	static void IsValidBranch(const struct FItemCollectionInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemCollectionInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemCollectionInfoPtrFuncLibrary")
	}
	static class UItemCollectionInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemCollectionInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemCollectionInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ItemConsumeInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemConsumeInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetBuffCodeName(const struct FItemConsumeInfo& Info);
	static const class FName GetCancelAbnormalCodeName(const struct FItemConsumeInfo& Info);
	static int32 GetCancelAbnormalDebuildupValue(const struct FItemConsumeInfo& Info);
	static const class FName GetCancelAbnormalGroupName(const struct FItemConsumeInfo& Info);
	static const class FName GetCodeName(const struct FItemConsumeInfo& Info);
	static ELItemComplexGroup GetComplexGroup(const struct FItemConsumeInfo& Info);
	static ELItemComplexType GetComplexType(const struct FItemConsumeInfo& Info);
	static int32 GetDefaultMaxCharge(const struct FItemConsumeInfo& Info);
	static bool GetForceUse(const struct FItemConsumeInfo& Info);
	static const class FName GetForceUseDesc(const struct FItemConsumeInfo& Info);
	static const class FName GetFxCommonCodeName(const struct FItemConsumeInfo& Info);
	static class FString GetFxSocket(const struct FItemConsumeInfo& Info);
	static int32 GetIncreaseWealthAmount(const struct FItemConsumeInfo& Info);
	static bool GetIsLocationFx(const struct FItemConsumeInfo& Info);
	static bool GetIsToggle(const struct FItemConsumeInfo& Info);
	static const TSoftObjectPtr<class UObject> GetItemMesh(const struct FItemConsumeInfo& Info);
	static const class FName GetItemMeshSocket(const struct FItemConsumeInfo& Info);
	static bool GetKeepToggleDead(const struct FItemConsumeInfo& Info);
	static bool GetKeepToggleRespawn(const struct FItemConsumeInfo& Info);
	static int32 GetMaxChargeLimit(const struct FItemConsumeInfo& Info);
	static const class FName GetProjectileCodeName(const struct FItemConsumeInfo& Info);
	static const class FName GetPulseRechargedAbnormalCodeName(const struct FItemConsumeInfo& Info);
	static bool GetRecallToTorsionCoil(const struct FItemConsumeInfo& Info);
	static bool GetRechargeable(const struct FItemConsumeInfo& Info);
	static bool GetRequireHelpmateCombat(const struct FItemConsumeInfo& Info);
	static bool GetRequireWeapon(const struct FItemConsumeInfo& Info);
	static const TArray<struct FActionStateType> GetRestrictActionStateArray(const struct FItemConsumeInfo& Info);
	static int32 GetSharpnessRecoveryPoint(const struct FItemConsumeInfo& Info);
	static const class FName GetSlavearmAlterItemMatch(const struct FItemConsumeInfo& Info);
	static bool GetStackUse(const struct FItemConsumeInfo& Info);
	static ELItemConsumeTargetType GetTargetType(const struct FItemConsumeInfo& Info);
	static bool GetUnconsumable(const struct FItemConsumeInfo& Info);
	static ELItemUnitUseType GetUnitUseType(const struct FItemConsumeInfo& Info);
	static bool GetUseItemInventoryState(const struct FItemConsumeInfo& Info);
	static const class FName GetUseSkillCodeName(const struct FItemConsumeInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemConsumeInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemConsumeInfoFuncLibrary")
	}
	static class UItemConsumeInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemConsumeInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemConsumeInfoFuncLibrary;

// Class ProjectPContentInfo.QuestDescInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UQuestDescInfoFuncLibrary final : public UObject
{
public:
	static const TArray<struct FGeneralConditionInfo> GetAddQuestConditionArray(const struct FQuestDescInfo& Info);
	static bool GetAddQuestConditionOr(const struct FQuestDescInfo& Info);
	static const TArray<struct FGeneralCallBackEventInfo> GetAddQuestTypeListArray(const struct FQuestDescInfo& Info);
	static const class FName GetCodeName(const struct FQuestDescInfo& Info);
	static int32 GetDialogSelectNum(const struct FQuestDescInfo& Info);
	static int32 GetQuestVariable(const struct FQuestDescInfo& Info);
	static const TArray<class FName> GetTalker(const struct FQuestDescInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("QuestDescInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"QuestDescInfoFuncLibrary")
	}
	static class UQuestDescInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestDescInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UQuestDescInfoFuncLibrary;

// Class ProjectPContentInfo.ItemConsumeInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemConsumeInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetBuffCodeName(const struct FItemConsumeInfoPtr& Ptr);
	static const class FName GetCancelAbnormalCodeName(const struct FItemConsumeInfoPtr& Ptr);
	static int32 GetCancelAbnormalDebuildupValue(const struct FItemConsumeInfoPtr& Ptr);
	static const class FName GetCancelAbnormalGroupName(const struct FItemConsumeInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FItemConsumeInfoPtr& Ptr);
	static ELItemComplexGroup GetComplexGroup(const struct FItemConsumeInfoPtr& Ptr);
	static ELItemComplexType GetComplexType(const struct FItemConsumeInfoPtr& Ptr);
	static int32 GetDefaultMaxCharge(const struct FItemConsumeInfoPtr& Ptr);
	static bool GetForceUse(const struct FItemConsumeInfoPtr& Ptr);
	static const class FName GetForceUseDesc(const struct FItemConsumeInfoPtr& Ptr);
	static const class FName GetFxCommonCodeName(const struct FItemConsumeInfoPtr& Ptr);
	static class FString GetFxSocket(const struct FItemConsumeInfoPtr& Ptr);
	static int32 GetIncreaseWealthAmount(const struct FItemConsumeInfoPtr& Ptr);
	static bool GetIsLocationFx(const struct FItemConsumeInfoPtr& Ptr);
	static bool GetIsToggle(const struct FItemConsumeInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetItemMesh(const struct FItemConsumeInfoPtr& Ptr);
	static const class FName GetItemMeshSocket(const struct FItemConsumeInfoPtr& Ptr);
	static bool GetKeepToggleDead(const struct FItemConsumeInfoPtr& Ptr);
	static bool GetKeepToggleRespawn(const struct FItemConsumeInfoPtr& Ptr);
	static int32 GetMaxChargeLimit(const struct FItemConsumeInfoPtr& Ptr);
	static const class FName GetProjectileCodeName(const struct FItemConsumeInfoPtr& Ptr);
	static const class FName GetPulseRechargedAbnormalCodeName(const struct FItemConsumeInfoPtr& Ptr);
	static bool GetRecallToTorsionCoil(const struct FItemConsumeInfoPtr& Ptr);
	static bool GetRechargeable(const struct FItemConsumeInfoPtr& Ptr);
	static bool GetRequireHelpmateCombat(const struct FItemConsumeInfoPtr& Ptr);
	static bool GetRequireWeapon(const struct FItemConsumeInfoPtr& Ptr);
	static const TArray<struct FActionStateType> GetRestrictActionStateArray(const struct FItemConsumeInfoPtr& Ptr);
	static int32 GetSharpnessRecoveryPoint(const struct FItemConsumeInfoPtr& Ptr);
	static const class FName GetSlavearmAlterItemMatch(const struct FItemConsumeInfoPtr& Ptr);
	static bool GetStackUse(const struct FItemConsumeInfoPtr& Ptr);
	static ELItemConsumeTargetType GetTargetType(const struct FItemConsumeInfoPtr& Ptr);
	static bool GetUnconsumable(const struct FItemConsumeInfoPtr& Ptr);
	static ELItemUnitUseType GetUnitUseType(const struct FItemConsumeInfoPtr& Ptr);
	static bool GetUseItemInventoryState(const struct FItemConsumeInfoPtr& Ptr);
	static const class FName GetUseSkillCodeName(const struct FItemConsumeInfoPtr& Ptr);
	static bool IsValid(const struct FItemConsumeInfoPtr& Ptr);
	static void IsValidBranch(const struct FItemConsumeInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemConsumeInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemConsumeInfoPtrFuncLibrary")
	}
	static class UItemConsumeInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemConsumeInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemConsumeInfoPtrFuncLibrary;

// Class ProjectPContentInfo.BladeWeightInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UBladeWeightInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetChargeMontageSlot(const struct FBladeWeightInfo& Info);
	static float GetChargePlayRate(const struct FBladeWeightInfo& Info);
	static const class FName GetCodeName(const struct FBladeWeightInfo& Info);
	static const class FName GetDelayMontageSlot(const struct FBladeWeightInfo& Info);
	static float GetDelayPlayRate(const struct FBladeWeightInfo& Info);
	static const class FName GetEndMontageSlot(const struct FBladeWeightInfo& Info);
	static float GetEndPlayRate(const struct FBladeWeightInfo& Info);
	static int32 GetHitAnimDurationRatio(const struct FBladeWeightInfo& Info);
	static const class FName GetIntroMontageSlot(const struct FBladeWeightInfo& Info);
	static float GetIntroPlayRate(const struct FBladeWeightInfo& Info);
	static int32 GetKnockbackDistanceRatio(const struct FBladeWeightInfo& Info);
	static int32 GetStaminaConsumeRatio(const struct FBladeWeightInfo& Info);
	static const class FName GetSwingMontageSlot(const struct FBladeWeightInfo& Info);
	static float GetSwingPlayRate(const struct FBladeWeightInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BladeWeightInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BladeWeightInfoFuncLibrary")
	}
	static class UBladeWeightInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBladeWeightInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UBladeWeightInfoFuncLibrary;

// Class ProjectPContentInfo.QuartzEffectInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UQuartzEffectInfoAsset final : public UContentInfoAsset
{
public:
	struct FQuartzEffectInfoDB                    ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FQuartzEffectInfoPtr FindQuartzEffectInfoByNameBP(class FName CodeName);
	static const TArray<struct FQuartzEffectInfo> GetQuartzEffectInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("QuartzEffectInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"QuartzEffectInfoAsset")
	}
	static class UQuartzEffectInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuartzEffectInfoAsset>();
	}
};
DUMPER7_ASSERTS_UQuartzEffectInfoAsset;

// Class ProjectPContentInfo.BladeWeightInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UBladeWeightInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetChargeMontageSlot(const struct FBladeWeightInfoPtr& Ptr);
	static float GetChargePlayRate(const struct FBladeWeightInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FBladeWeightInfoPtr& Ptr);
	static const class FName GetDelayMontageSlot(const struct FBladeWeightInfoPtr& Ptr);
	static float GetDelayPlayRate(const struct FBladeWeightInfoPtr& Ptr);
	static const class FName GetEndMontageSlot(const struct FBladeWeightInfoPtr& Ptr);
	static float GetEndPlayRate(const struct FBladeWeightInfoPtr& Ptr);
	static int32 GetHitAnimDurationRatio(const struct FBladeWeightInfoPtr& Ptr);
	static const class FName GetIntroMontageSlot(const struct FBladeWeightInfoPtr& Ptr);
	static float GetIntroPlayRate(const struct FBladeWeightInfoPtr& Ptr);
	static int32 GetKnockbackDistanceRatio(const struct FBladeWeightInfoPtr& Ptr);
	static int32 GetStaminaConsumeRatio(const struct FBladeWeightInfoPtr& Ptr);
	static const class FName GetSwingMontageSlot(const struct FBladeWeightInfoPtr& Ptr);
	static float GetSwingPlayRate(const struct FBladeWeightInfoPtr& Ptr);
	static bool IsValid(const struct FBladeWeightInfoPtr& Ptr);
	static void IsValidBranch(const struct FBladeWeightInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("BladeWeightInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BladeWeightInfoPtrFuncLibrary")
	}
	static class UBladeWeightInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBladeWeightInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UBladeWeightInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ItemWeaponMonsterFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemWeaponMonsterFuncLibrary final : public UObject
{
public:
	static const class FName GetAddSkillHitCodeName(const struct FItemWeaponMonster& Info);
	static int32 GetAddSkillRangeAfterBroken(const struct FItemWeaponMonster& Info);
	static const class FName GetCodeName(const struct FItemWeaponMonster& Info);
	static int32 GetCriticalRate(const struct FItemWeaponMonster& Info);
	static int32 GetDurability(const struct FItemWeaponMonster& Info);
	static ELElementDamageType GetElementDamageType(const struct FItemWeaponMonster& Info);
	static int32 GetGuardAciddamageReductionRatio(const struct FItemWeaponMonster& Info);
	static int32 GetGuardDurabilityDefence(const struct FItemWeaponMonster& Info);
	static int32 GetGuardElectricdamageReductionRatio(const struct FItemWeaponMonster& Info);
	static int32 GetGuardFiredamageReductionRatio(const struct FItemWeaponMonster& Info);
	static int32 GetGuardKnockbackDistanceReductionRatio(const struct FItemWeaponMonster& Info);
	static int32 GetGuardKnockbackDurationReductionRatio(const struct FItemWeaponMonster& Info);
	static int32 GetGuardPhysicaldamageReductionRatio(const struct FItemWeaponMonster& Info);
	static int32 GetGuardPoint(const struct FItemWeaponMonster& Info);
	static int32 GetGuardSuccessDurabilityReductionRatio(const struct FItemWeaponMonster& Info);
	static bool GetHideAtSpawn(const struct FItemWeaponMonster& Info);
	static ELSwingPowerType GetHitFxLevel(const struct FItemWeaponMonster& Info);
	static int32 GetMinimumSkillRangeMaxAfterBroken(const struct FItemWeaponMonster& Info);
	static int32 GetMinimumSkillRangeMinAfterBroken(const struct FItemWeaponMonster& Info);
	static int32 GetMulpleRateAtkPowerAfterBoken(const struct FItemWeaponMonster& Info);
	static int32 GetMulpleRateRigidityAfterBoken(const struct FItemWeaponMonster& Info);
	static ELPhysicalDamageType GetPhysicalSubtypeWithSwing(const struct FItemWeaponMonster& Info);
	static ELPhysicalDamageType GetPhysicalSubtypeWithThrust(const struct FItemWeaponMonster& Info);
	static bool GetRemoveAbnormalStateAfterBroken(const struct FItemWeaponMonster& Info);
	static int32 GetRigidity(const struct FItemWeaponMonster& Info);
	static const class FName GetSkillhitAbnormalStateOverride(const struct FItemWeaponMonster& Info);
	static int32 GetToughRecoveryDelayTime(const struct FItemWeaponMonster& Info);
	static bool GetUseBluntTrail(const struct FItemWeaponMonster& Info);
	static const class FName GetWeaponBpCodeName(const struct FItemWeaponMonster& Info);
	static const class FName GetWeaponEquipAbnormalStateCodeName(const struct FItemWeaponMonster& Info);
	static int32 GetWeaponEquipAtkPowerRate(const struct FItemWeaponMonster& Info);
	static int32 GetWeaponEquipMotionSpeedRate(const struct FItemWeaponMonster& Info);
	static int32 GetWeaponEquipMotionSpeedRateAfterBroken(const struct FItemWeaponMonster& Info);
	static int32 GetWeaponEquipSkillRangeMaxRate(const struct FItemWeaponMonster& Info);
	static int32 GetWeaponEquipSkillRangeMinRate(const struct FItemWeaponMonster& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemWeaponMonsterFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemWeaponMonsterFuncLibrary")
	}
	static class UItemWeaponMonsterFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemWeaponMonsterFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemWeaponMonsterFuncLibrary;

// Class ProjectPContentInfo.NPCStatInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNPCStatInfoFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalFirePoint(const struct FNPCStatInfo& Info);
	static int32 GetAbnormalStateBuildUpAttack(const struct FNPCStatInfo& Info);
	static const class FName GetAbnormalStateCodeName(const struct FNPCStatInfo& Info);
	static int32 GetAbnormalStatePenaltyBase(const struct FNPCStatInfo& Info);
	static int32 GetAcidAttack(const struct FNPCStatInfo& Info);
	static int32 GetAcidDebuffResist(const struct FNPCStatInfo& Info);
	static int32 GetAcidDefence(const struct FNPCStatInfo& Info);
	static int32 GetAcidReduce(const struct FNPCStatInfo& Info);
	static int32 GetAttackSpeedRatio(const struct FNPCStatInfo& Info);
	static int32 GetBreakDebuffResist(const struct FNPCStatInfo& Info);
	static int32 GetBuildUpRecoverIncBase(const struct FNPCStatInfo& Info);
	static const class FName GetCodeName(const struct FNPCStatInfo& Info);
	static int32 GetContaminationDebuffResist(const struct FNPCStatInfo& Info);
	static int32 GetCriticalDamageRatio(const struct FNPCStatInfo& Info);
	static int32 GetCriticalRate(const struct FNPCStatInfo& Info);
	static int32 GetCriticalResistRate(const struct FNPCStatInfo& Info);
	static int32 GetCurseDebuffResist(const struct FNPCStatInfo& Info);
	static int32 GetDestructionAcidReduce(const struct FNPCStatInfo& Info);
	static float GetDestructionDefence(const struct FNPCStatInfo& Info);
	static int32 GetDestructionElectricReduce(const struct FNPCStatInfo& Info);
	static int32 GetDestructionFireReduce(const struct FNPCStatInfo& Info);
	static int32 GetDestructionPhysicalReduce(const struct FNPCStatInfo& Info);
	static int32 GetDestructionPierceReduce(const struct FNPCStatInfo& Info);
	static int32 GetDestructionPower(const struct FNPCStatInfo& Info);
	static float GetDestructionReduce(const struct FNPCStatInfo& Info);
	static int32 GetDestructionSlashReduce(const struct FNPCStatInfo& Info);
	static int32 GetDestructionStrikeReduce(const struct FNPCStatInfo& Info);
	static int32 GetElectricAttack(const struct FNPCStatInfo& Info);
	static int32 GetElectricDebuffResist(const struct FNPCStatInfo& Info);
	static int32 GetElectricDefence(const struct FNPCStatInfo& Info);
	static int32 GetElectricReduce(const struct FNPCStatInfo& Info);
	static int32 GetExp(const struct FNPCStatInfo& Info);
	static int32 GetFireAttack(const struct FNPCStatInfo& Info);
	static int32 GetFireDebuffResist(const struct FNPCStatInfo& Info);
	static int32 GetFireDefence(const struct FNPCStatInfo& Info);
	static int32 GetFireReduce(const struct FNPCStatInfo& Info);
	static int32 GetGroggyAttack(const struct FNPCStatInfo& Info);
	static int32 GetGroggyPoint(const struct FNPCStatInfo& Info);
	static float GetGroggyPointResetDelay(const struct FNPCStatInfo& Info);
	static int32 GetGroggyPointRestoreBase(const struct FNPCStatInfo& Info);
	static int32 GetGroggyPointRestoreStopTime(const struct FNPCStatInfo& Info);
	static int32 GetGuardAciddamageReductionRatio(const struct FNPCStatInfo& Info);
	static int32 GetGuardElectricdamageReductionRatio(const struct FNPCStatInfo& Info);
	static int32 GetGuardFiredamageReductionRatio(const struct FNPCStatInfo& Info);
	static int32 GetGuardKnockbackDistanceReductionRatio(const struct FNPCStatInfo& Info);
	static int32 GetGuardKnockbackDurationReductionRatio(const struct FNPCStatInfo& Info);
	static int32 GetGuardPenetrationPowerBase(const struct FNPCStatInfo& Info);
	static int32 GetGuardPhysicaldamageReductionRatio(const struct FNPCStatInfo& Info);
	static int32 GetGuardPoint(const struct FNPCStatInfo& Info);
	static int32 GetGuardSharpnessAttack(const struct FNPCStatInfo& Info);
	static int32 GetGuardStaminaDamage(const struct FNPCStatInfo& Info);
	static int32 GetHealthPower(const struct FNPCStatInfo& Info);
	static int32 GetImpactDebuffResist(const struct FNPCStatInfo& Info);
	static int32 GetMaxStamina(const struct FNPCStatInfo& Info);
	static int32 GetNGPDetailIndex(const struct FNPCStatInfo& Info);
	static const class FName GetNpcGaugeGrowth(const struct FNPCStatInfo& Info);
	static int32 GetPhysicalDefence(const struct FNPCStatInfo& Info);
	static int32 GetPhysicalPierceDefence(const struct FNPCStatInfo& Info);
	static int32 GetPhysicalPierceReduce(const struct FNPCStatInfo& Info);
	static int32 GetPhysicalPower(const struct FNPCStatInfo& Info);
	static int32 GetPhysicalReduce(const struct FNPCStatInfo& Info);
	static int32 GetPhysicalSlashDefence(const struct FNPCStatInfo& Info);
	static int32 GetPhysicalSlashReduce(const struct FNPCStatInfo& Info);
	static int32 GetPhysicalStrikeDefence(const struct FNPCStatInfo& Info);
	static int32 GetPhysicalStrikeReduce(const struct FNPCStatInfo& Info);
	static int32 GetRegainhpGainRatio(const struct FNPCStatInfo& Info);
	static int32 GetRegainhpHealIncreaseRatio(const struct FNPCStatInfo& Info);
	static int32 GetRegainhpHealRatio(const struct FNPCStatInfo& Info);
	static int32 GetRegainhpHealTime(const struct FNPCStatInfo& Info);
	static int32 GetRegainhpMaxExist(const struct FNPCStatInfo& Info);
	static int32 GetRestoreStaminaPerSec(const struct FNPCStatInfo& Info);
	static int32 GetRigidity(const struct FNPCStatInfo& Info);
	static int32 GetSpecialhitGroggyReduction(const struct FNPCStatInfo& Info);
	static float GetStiffenPlayrateAttacker(const struct FNPCStatInfo& Info);
	static float GetStiffenPlayrateDefender(const struct FNPCStatInfo& Info);
	static int32 GetTough(const struct FNPCStatInfo& Info);
	static int32 GetToughAttackPowerBase(const struct FNPCStatInfo& Info);
	static int32 GetToughDefencePowerBase(const struct FNPCStatInfo& Info);
	static int32 GetToughRecoveryDelayReduction(const struct FNPCStatInfo& Info);
	static int32 GetToughRecoveryDelayTime(const struct FNPCStatInfo& Info);
	static int32 GetToughRestoreBase(const struct FNPCStatInfo& Info);
	static int32 GetWalkRunSpeedRatio(const struct FNPCStatInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCStatInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCStatInfoFuncLibrary")
	}
	static class UNPCStatInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCStatInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNPCStatInfoFuncLibrary;

// Class ProjectPContentInfo.ItemWeaponMonsterPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemWeaponMonsterPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetAddSkillHitCodeName(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetAddSkillRangeAfterBroken(const struct FItemWeaponMonsterPtr& Ptr);
	static const class FName GetCodeName(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetCriticalRate(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetDurability(const struct FItemWeaponMonsterPtr& Ptr);
	static ELElementDamageType GetElementDamageType(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetGuardAciddamageReductionRatio(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetGuardDurabilityDefence(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetGuardElectricdamageReductionRatio(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetGuardFiredamageReductionRatio(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetGuardKnockbackDistanceReductionRatio(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetGuardKnockbackDurationReductionRatio(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetGuardPhysicaldamageReductionRatio(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetGuardPoint(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetGuardSuccessDurabilityReductionRatio(const struct FItemWeaponMonsterPtr& Ptr);
	static bool GetHideAtSpawn(const struct FItemWeaponMonsterPtr& Ptr);
	static ELSwingPowerType GetHitFxLevel(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetMinimumSkillRangeMaxAfterBroken(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetMinimumSkillRangeMinAfterBroken(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetMulpleRateAtkPowerAfterBoken(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetMulpleRateRigidityAfterBoken(const struct FItemWeaponMonsterPtr& Ptr);
	static ELPhysicalDamageType GetPhysicalSubtypeWithSwing(const struct FItemWeaponMonsterPtr& Ptr);
	static ELPhysicalDamageType GetPhysicalSubtypeWithThrust(const struct FItemWeaponMonsterPtr& Ptr);
	static bool GetRemoveAbnormalStateAfterBroken(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetRigidity(const struct FItemWeaponMonsterPtr& Ptr);
	static const class FName GetSkillhitAbnormalStateOverride(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetToughRecoveryDelayTime(const struct FItemWeaponMonsterPtr& Ptr);
	static bool GetUseBluntTrail(const struct FItemWeaponMonsterPtr& Ptr);
	static const class FName GetWeaponBpCodeName(const struct FItemWeaponMonsterPtr& Ptr);
	static const class FName GetWeaponEquipAbnormalStateCodeName(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetWeaponEquipAtkPowerRate(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetWeaponEquipMotionSpeedRate(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetWeaponEquipMotionSpeedRateAfterBroken(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetWeaponEquipSkillRangeMaxRate(const struct FItemWeaponMonsterPtr& Ptr);
	static int32 GetWeaponEquipSkillRangeMinRate(const struct FItemWeaponMonsterPtr& Ptr);
	static bool IsValid(const struct FItemWeaponMonsterPtr& Ptr);
	static void IsValidBranch(const struct FItemWeaponMonsterPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemWeaponMonsterPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemWeaponMonsterPtrFuncLibrary")
	}
	static class UItemWeaponMonsterPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemWeaponMonsterPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemWeaponMonsterPtrFuncLibrary;

// Class ProjectPContentInfo.ItemSlaveArmInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemSlaveArmInfoFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalStateBuildUpAttack(const struct FItemSlaveArmInfo& Info);
	static const class FName GetAbnormalStateCodeName(const struct FItemSlaveArmInfo& Info);
	static const class FName GetActionGroupTableCodeName(const struct FItemSlaveArmInfo& Info);
	static int32 GetAdditionalGroggyTime(const struct FItemSlaveArmInfo& Info);
	static int32 GetAmmoMax(const struct FItemSlaveArmInfo& Info);
	static int32 GetAmmoReloadAmount(const struct FItemSlaveArmInfo& Info);
	static int32 GetAmmoReloadCooltime(const struct FItemSlaveArmInfo& Info);
	static int32 GetAttackGainFrenzyPointActive(const struct FItemSlaveArmInfo& Info);
	static int32 GetAttackGainFrenzyPointPassive(const struct FItemSlaveArmInfo& Info);
	static const class FName GetCodeName(const struct FItemSlaveArmInfo& Info);
	static bool GetConsumeCommand(const struct FItemSlaveArmInfo& Info);
	static int32 GetConsumeStaminaPoint(const struct FItemSlaveArmInfo& Info);
	static const class FName GetCorrectionCodeNameForAdvance(const struct FItemSlaveArmInfo& Info);
	static const class FName GetCorrectionCodeNameForMotivity(const struct FItemSlaveArmInfo& Info);
	static const class FName GetCorrectionCodeNameForTechnique(const struct FItemSlaveArmInfo& Info);
	static int32 GetDestructionDefence(const struct FItemSlaveArmInfo& Info);
	static int32 GetDestructionReduce(const struct FItemSlaveArmInfo& Info);
	static const TSoftObjectPtr<class USkeletalMesh> GetMesh(const struct FItemSlaveArmInfo& Info);
	static int32 GetPulseRechargeAttack(const struct FItemSlaveArmInfo& Info);
	static ELReserveType GetReserveType(const struct FItemSlaveArmInfo& Info);
	static int32 GetRigidity(const struct FItemSlaveArmInfo& Info);
	static const class FName GetSkillActionPathCodeName(const struct FItemSlaveArmInfo& Info);
	static const class FName GetSkillCodeName(const struct FItemSlaveArmInfo& Info);
	static int32 GetSlavearmAcidAttack(const struct FItemSlaveArmInfo& Info);
	static int32 GetSlavearmDestructionPower(const struct FItemSlaveArmInfo& Info);
	static int32 GetSlavearmElectricAttack(const struct FItemSlaveArmInfo& Info);
	static int32 GetSlavearmFireAttack(const struct FItemSlaveArmInfo& Info);
	static int32 GetSlaveArmPhysicalAttack(const struct FItemSlaveArmInfo& Info);
	static int32 GetToughRecoveryDelayTime(const struct FItemSlaveArmInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemSlaveArmInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemSlaveArmInfoFuncLibrary")
	}
	static class UItemSlaveArmInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemSlaveArmInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemSlaveArmInfoFuncLibrary;

// Class ProjectPContentInfo.ShopInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UShopInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetBuyNumMax(const struct FShopInfoPtr& Ptr);
	static const class FName GetCondition(const struct FShopInfoPtr& Ptr);
	static const class FName GetGoodsCodeName(const struct FShopInfoPtr& Ptr);
	static const class FName GetItemCodeName(const struct FShopInfoPtr& Ptr);
	static const class FName GetItemCodeName2(const struct FShopInfoPtr& Ptr);
	static int32 GetSellingPrice(const struct FShopInfoPtr& Ptr);
	static const class FName GetShopCodeName(const struct FShopInfoPtr& Ptr);
	static int32 GetSort(const struct FShopInfoPtr& Ptr);
	static int32 GetStockLimit(const struct FShopInfoPtr& Ptr);
	static bool IsValid(const struct FShopInfoPtr& Ptr);
	static void IsValidBranch(const struct FShopInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ShopInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ShopInfoPtrFuncLibrary")
	}
	static class UShopInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShopInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UShopInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ItemSlaveArmInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemSlaveArmInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalStateBuildUpAttack(const struct FItemSlaveArmInfoPtr& Ptr);
	static const class FName GetAbnormalStateCodeName(const struct FItemSlaveArmInfoPtr& Ptr);
	static const class FName GetActionGroupTableCodeName(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetAdditionalGroggyTime(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetAmmoMax(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetAmmoReloadAmount(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetAmmoReloadCooltime(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetAttackGainFrenzyPointActive(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetAttackGainFrenzyPointPassive(const struct FItemSlaveArmInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FItemSlaveArmInfoPtr& Ptr);
	static bool GetConsumeCommand(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetConsumeStaminaPoint(const struct FItemSlaveArmInfoPtr& Ptr);
	static const class FName GetCorrectionCodeNameForAdvance(const struct FItemSlaveArmInfoPtr& Ptr);
	static const class FName GetCorrectionCodeNameForMotivity(const struct FItemSlaveArmInfoPtr& Ptr);
	static const class FName GetCorrectionCodeNameForTechnique(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetDestructionDefence(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetDestructionReduce(const struct FItemSlaveArmInfoPtr& Ptr);
	static const TSoftObjectPtr<class USkeletalMesh> GetMesh(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetPulseRechargeAttack(const struct FItemSlaveArmInfoPtr& Ptr);
	static ELReserveType GetReserveType(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetRigidity(const struct FItemSlaveArmInfoPtr& Ptr);
	static const class FName GetSkillActionPathCodeName(const struct FItemSlaveArmInfoPtr& Ptr);
	static const class FName GetSkillCodeName(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetSlavearmAcidAttack(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetSlavearmDestructionPower(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetSlavearmElectricAttack(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetSlavearmFireAttack(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetSlaveArmPhysicalAttack(const struct FItemSlaveArmInfoPtr& Ptr);
	static int32 GetToughRecoveryDelayTime(const struct FItemSlaveArmInfoPtr& Ptr);
	static bool IsValid(const struct FItemSlaveArmInfoPtr& Ptr);
	static void IsValidBranch(const struct FItemSlaveArmInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemSlaveArmInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemSlaveArmInfoPtrFuncLibrary")
	}
	static class UItemSlaveArmInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemSlaveArmInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemSlaveArmInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ItemHandleInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemHandleInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetActionGroupTableCodeName(const struct FItemHandleInfo& Info);
	static const TArray<ELBladeShapeType> GetAllowBladeShapeType(const struct FItemHandleInfo& Info);
	static int32 GetAttackSpeed(const struct FItemHandleInfo& Info);
	static const class FName GetBladeWeightCodeName(const struct FItemHandleInfo& Info);
	static float GetChargePlayRateMax(const struct FItemHandleInfo& Info);
	static float GetChargePlayRateMin(const struct FItemHandleInfo& Info);
	static const class FName GetCodeName(const struct FItemHandleInfo& Info);
	static const class FName GetComboType(const struct FItemHandleInfo& Info);
	static const class FName GetCommonActionPathCodeName(const struct FItemHandleInfo& Info);
	static const class FName GetCorrectionCodeNameForAdvance(const struct FItemHandleInfo& Info);
	static const class FName GetCorrectionCodeNameForMotivity(const struct FItemHandleInfo& Info);
	static const class FName GetCorrectionCodeNameForTechnique(const struct FItemHandleInfo& Info);
	static float GetDelayPlayRateMax(const struct FItemHandleInfo& Info);
	static float GetDelayPlayRateMin(const struct FItemHandleInfo& Info);
	static float GetDestructionDefence(const struct FItemHandleInfo& Info);
	static float GetDestructionReduce(const struct FItemHandleInfo& Info);
	static float GetEndPlayRateMax(const struct FItemHandleInfo& Info);
	static float GetEndPlayRateMin(const struct FItemHandleInfo& Info);
	static const class FName GetFrenzySkillCodeName(const struct FItemHandleInfo& Info);
	static int32 GetGuardDurationRatio(const struct FItemHandleInfo& Info);
	static int32 GetGuardGainFrenzyPointActive(const struct FItemHandleInfo& Info);
	static int32 GetGuardGainFrenzyPointPassive(const struct FItemHandleInfo& Info);
	static int32 GetGuardIntensity(const struct FItemHandleInfo& Info);
	static int32 GetGuardKnockbackDistanceReductionRatio(const struct FItemHandleInfo& Info);
	static const class FName GetGuardParryCounterSkillCodeName(const struct FItemHandleInfo& Info);
	static int32 GetGuardPoint(const struct FItemHandleInfo& Info);
	static int32 GetGuardRegainRatio(const struct FItemHandleInfo& Info);
	static int32 GetGuardStaminaReductionRatio(const struct FItemHandleInfo& Info);
	static const class FName GetHandleNeedStatLackAbnormalStateCodeName(const struct FItemHandleInfo& Info);
	static int32 GetHandleNeedStatLackAtkRatio(const struct FItemHandleInfo& Info);
	static int32 GetHandleNeedStatLackGuardSaveStaminaRatio(const struct FItemHandleInfo& Info);
	static bool GetHaveSwingMotion(const struct FItemHandleInfo& Info);
	static bool GetHaveThrustMotion(const struct FItemHandleInfo& Info);
	static bool GetHeroicWeapon(const struct FItemHandleInfo& Info);
	static float GetIntroPlayRateMax(const struct FItemHandleInfo& Info);
	static float GetIntroPlayRateMin(const struct FItemHandleInfo& Info);
	static class FString GetLocalTextByname(const struct FItemHandleInfo& Info);
	static const class FName GetLocalTextBynameCn(const struct FItemHandleInfo& Info);
	static class FText GetLocalTextBynameLocalize(const struct FItemHandleInfo& Info);
	static const class FName GetLocomotionActionPathCodeName(const struct FItemHandleInfo& Info);
	static int32 GetNecessityAdvance(const struct FItemHandleInfo& Info);
	static int32 GetNecessityMotivity(const struct FItemHandleInfo& Info);
	static int32 GetNecessityTechnique(const struct FItemHandleInfo& Info);
	static const class FName GetOriginalBladeCodeName(const struct FItemHandleInfo& Info);
	static int32 GetPerfectGuardDecreaseEnemyWeaponDurability(const struct FItemHandleInfo& Info);
	static int32 GetPerfectGuardGainFrenzyPointActive(const struct FItemHandleInfo& Info);
	static int32 GetPerfectGuardGainFrenzyPointPassive(const struct FItemHandleInfo& Info);
	static int32 GetPerfectGuardGainFrenzyPointRatioFuryattack(const struct FItemHandleInfo& Info);
	static ELWeaponPostureType GetPostureType(const struct FItemHandleInfo& Info);
	static const class FName GetReinforceTableCodeName(const struct FItemHandleInfo& Info);
	static int32 GetRigidity(const struct FItemHandleInfo& Info);
	static ELWeaponShapeType GetShapeType(const struct FItemHandleInfo& Info);
	static int32 GetSharpnessBadPointMod(const struct FItemHandleInfo& Info);
	static int32 GetSharpnessFinePointMod(const struct FItemHandleInfo& Info);
	static int32 GetSharpnessNormalPointMod(const struct FItemHandleInfo& Info);
	static const class FName GetSkillActionPathCodeName(const struct FItemHandleInfo& Info);
	static float GetStaminaConsumeRatioMax(const struct FItemHandleInfo& Info);
	static float GetStaminaConsumeRatioMin(const struct FItemHandleInfo& Info);
	static ELWeaponStyleType GetStyleType(const struct FItemHandleInfo& Info);
	static float GetSwingPlayRateMax(const struct FItemHandleInfo& Info);
	static float GetSwingPlayRateMin(const struct FItemHandleInfo& Info);
	static const class FName GetSwingSoundCodename(const struct FItemHandleInfo& Info);
	static const class FName GetWeaponBpCodeName(const struct FItemHandleInfo& Info);
	static int32 GetWeaponCombineCost(const struct FItemHandleInfo& Info);
	static const class FName GetWeaponCombineItemCodeName(const struct FItemHandleInfo& Info);
	static int32 GetWeaponCombineItemCount(const struct FItemHandleInfo& Info);
	static int32 GetWeaponDivideCost(const struct FItemHandleInfo& Info);
	static const class FName GetWeaponDivideItemCodeName(const struct FItemHandleInfo& Info);
	static int32 GetWeaponDivideItemCount(const struct FItemHandleInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemHandleInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemHandleInfoFuncLibrary")
	}
	static class UItemHandleInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemHandleInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemHandleInfoFuncLibrary;

// Class ProjectPContentInfo.NPCInfoAsset
// 0x0188 (0x0200 - 0x0078)
class alignas(0x10) UNPCInfoAsset final : public UContentInfoAsset
{
public:
	struct FNPCInfoDB                             ContentInfoDB;                                     // 0x0078(0x0180)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FNPCInfoPtr FindNpcInfoByNameBP(class FName CodeName);
	static struct FNPCSkillLinkInfoPtr FindNpcSkillLinkInfoByNameBP(class FName CodeName);
	static struct FNPCStatInfoPtr FindNpcStatInfoByNameBP(class FName CodeName);
	static const TArray<struct FNpcGaugeGrowthInfo> GetNpcGaugeGrowthInfoArrayBP();
	static const TArray<struct FNPCInfo> GetNpcInfoArrayBP();
	static const TArray<struct FNPCPartsInfo> GetNpcPartsInfoArrayBP();
	static const TArray<struct FNPCSkillLinkInfo> GetNpcSkillLinkInfoArrayBP();
	static const TArray<struct FNPCStatInfo> GetNpcStatInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCInfoAsset")
	}
	static class UNPCInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCInfoAsset>();
	}
};
DUMPER7_ASSERTS_UNPCInfoAsset;

// Class ProjectPContentInfo.ItemHandleInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemHandleInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetActionGroupTableCodeName(const struct FItemHandleInfoPtr& Ptr);
	static const TArray<ELBladeShapeType> GetAllowBladeShapeType(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetAttackSpeed(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetBladeWeightCodeName(const struct FItemHandleInfoPtr& Ptr);
	static float GetChargePlayRateMax(const struct FItemHandleInfoPtr& Ptr);
	static float GetChargePlayRateMin(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetComboType(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetCommonActionPathCodeName(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetCorrectionCodeNameForAdvance(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetCorrectionCodeNameForMotivity(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetCorrectionCodeNameForTechnique(const struct FItemHandleInfoPtr& Ptr);
	static float GetDelayPlayRateMax(const struct FItemHandleInfoPtr& Ptr);
	static float GetDelayPlayRateMin(const struct FItemHandleInfoPtr& Ptr);
	static float GetDestructionDefence(const struct FItemHandleInfoPtr& Ptr);
	static float GetDestructionReduce(const struct FItemHandleInfoPtr& Ptr);
	static float GetEndPlayRateMax(const struct FItemHandleInfoPtr& Ptr);
	static float GetEndPlayRateMin(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetFrenzySkillCodeName(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetGuardDurationRatio(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetGuardGainFrenzyPointActive(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetGuardGainFrenzyPointPassive(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetGuardIntensity(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetGuardKnockbackDistanceReductionRatio(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetGuardParryCounterSkillCodeName(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetGuardPoint(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetGuardRegainRatio(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetGuardStaminaReductionRatio(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetHandleNeedStatLackAbnormalStateCodeName(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetHandleNeedStatLackAtkRatio(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetHandleNeedStatLackGuardSaveStaminaRatio(const struct FItemHandleInfoPtr& Ptr);
	static bool GetHaveSwingMotion(const struct FItemHandleInfoPtr& Ptr);
	static bool GetHaveThrustMotion(const struct FItemHandleInfoPtr& Ptr);
	static bool GetHeroicWeapon(const struct FItemHandleInfoPtr& Ptr);
	static float GetIntroPlayRateMax(const struct FItemHandleInfoPtr& Ptr);
	static float GetIntroPlayRateMin(const struct FItemHandleInfoPtr& Ptr);
	static class FString GetLocalTextByname(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetLocalTextBynameCn(const struct FItemHandleInfoPtr& Ptr);
	static class FText GetLocalTextBynameLocalize(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetLocomotionActionPathCodeName(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetNecessityAdvance(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetNecessityMotivity(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetNecessityTechnique(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetOriginalBladeCodeName(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetPerfectGuardDecreaseEnemyWeaponDurability(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetPerfectGuardGainFrenzyPointActive(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetPerfectGuardGainFrenzyPointPassive(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetPerfectGuardGainFrenzyPointRatioFuryattack(const struct FItemHandleInfoPtr& Ptr);
	static ELWeaponPostureType GetPostureType(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetReinforceTableCodeName(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetRigidity(const struct FItemHandleInfoPtr& Ptr);
	static ELWeaponShapeType GetShapeType(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetSharpnessBadPointMod(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetSharpnessFinePointMod(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetSharpnessNormalPointMod(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetSkillActionPathCodeName(const struct FItemHandleInfoPtr& Ptr);
	static float GetStaminaConsumeRatioMax(const struct FItemHandleInfoPtr& Ptr);
	static float GetStaminaConsumeRatioMin(const struct FItemHandleInfoPtr& Ptr);
	static ELWeaponStyleType GetStyleType(const struct FItemHandleInfoPtr& Ptr);
	static float GetSwingPlayRateMax(const struct FItemHandleInfoPtr& Ptr);
	static float GetSwingPlayRateMin(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetSwingSoundCodename(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetWeaponBpCodeName(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetWeaponCombineCost(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetWeaponCombineItemCodeName(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetWeaponCombineItemCount(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetWeaponDivideCost(const struct FItemHandleInfoPtr& Ptr);
	static const class FName GetWeaponDivideItemCodeName(const struct FItemHandleInfoPtr& Ptr);
	static int32 GetWeaponDivideItemCount(const struct FItemHandleInfoPtr& Ptr);
	static bool IsValid(const struct FItemHandleInfoPtr& Ptr);
	static void IsValidBranch(const struct FItemHandleInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemHandleInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemHandleInfoPtrFuncLibrary")
	}
	static class UItemHandleInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemHandleInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemHandleInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ItemBladeInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemBladeInfoFuncLibrary final : public UObject
{
public:
	static bool GetAbnormalElementDisable(const struct FItemBladeInfo& Info);
	static bool GetAbnormalEnchantDisable(const struct FItemBladeInfo& Info);
	static int32 GetAbnormalStateBuildUpAttack(const struct FItemBladeInfo& Info);
	static const class FName GetAbnormalStateCodeName(const struct FItemBladeInfo& Info);
	static ELActionCategory GetActionCategory(const struct FItemBladeInfo& Info);
	static int32 GetAdditionalGroggyTime(const struct FItemBladeInfo& Info);
	static int32 GetAttackGainFrenzyPointActive(const struct FItemBladeInfo& Info);
	static int32 GetAttackGainFrenzyPointPassive(const struct FItemBladeInfo& Info);
	static int32 GetAttackSpeed(const struct FItemBladeInfo& Info);
	static const class FName GetBladeNeedStatLackAbnormalStateCodeName(const struct FItemBladeInfo& Info);
	static int32 GetBladeNeedStatLackAtkRatio(const struct FItemBladeInfo& Info);
	static int32 GetBladeNeedStatLackDestructionRatio(const struct FItemBladeInfo& Info);
	static int32 GetBladeNeedStatLackStaminaRatio(const struct FItemBladeInfo& Info);
	static ELBladeShapeType GetBladeShapeType(const struct FItemBladeInfo& Info);
	static const class FName GetBladeWeightCodeName(const struct FItemBladeInfo& Info);
	static const class FName GetCodeName(const struct FItemBladeInfo& Info);
	static int32 GetConsumeErgoCount(const struct FItemBladeInfo& Info);
	static int32 GetConsumeErgoRate(const struct FItemBladeInfo& Info);
	static int32 GetConsumeStaminaPoint(const struct FItemBladeInfo& Info);
	static ELCrashType GetCrashType(const struct FItemBladeInfo& Info);
	static int32 GetCriticalRate(const struct FItemBladeInfo& Info);
	static const class FName GetDashParryCounterSkillCodeName(const struct FItemBladeInfo& Info);
	static float GetDestructionDefence(const struct FItemBladeInfo& Info);
	static int32 GetDestructionPower(const struct FItemBladeInfo& Info);
	static float GetDestructionReduce(const struct FItemBladeInfo& Info);
	static int32 GetElementalAttack(const struct FItemBladeInfo& Info);
	static ELElementDamageType GetElementAttackType(const struct FItemBladeInfo& Info);
	static const class FName GetErgoFrenzySkillCodeName(const struct FItemBladeInfo& Info);
	static int32 GetFatalDamageRatio(const struct FItemBladeInfo& Info);
	static ELBladeFatalType GetFatalType(const struct FItemBladeInfo& Info);
	static const class FName GetFrenzySkillCodeName(const struct FItemBladeInfo& Info);
	static int32 GetGuardDamageReductionRatio(const struct FItemBladeInfo& Info);
	static int32 GetGuardDurabilityAttack(const struct FItemBladeInfo& Info);
	static int32 GetGuardDurationRatio(const struct FItemBladeInfo& Info);
	static int32 GetGuardKnockbackDistanceReductionRatio(const struct FItemBladeInfo& Info);
	static int32 GetGuardPoint(const struct FItemBladeInfo& Info);
	static int32 GetGuardRegainAttackHeal(const struct FItemBladeInfo& Info);
	static int32 GetGuardRegainPerfectGuardHeal(const struct FItemBladeInfo& Info);
	static int32 GetGuardRegainPointMaxRatio(const struct FItemBladeInfo& Info);
	static int32 GetGuardSharpnessDefence(const struct FItemBladeInfo& Info);
	static ELSwingPowerType GetHitFxLevel(const struct FItemBladeInfo& Info);
	static ELPhysicalSurfaceType GetHitMaterial(const struct FItemBladeInfo& Info);
	static class FString GetLocalTextByname(const struct FItemBladeInfo& Info);
	static const class FName GetLocalTextBynameCn(const struct FItemBladeInfo& Info);
	static class FText GetLocalTextBynameLocalize(const struct FItemBladeInfo& Info);
	static int32 GetNecessityAdvance(const struct FItemBladeInfo& Info);
	static int32 GetNecessityMotivity(const struct FItemBladeInfo& Info);
	static int32 GetNecessityTechnique(const struct FItemBladeInfo& Info);
	static int32 GetPerfectGuardDecreaseEnemyWeaponDurability(const struct FItemBladeInfo& Info);
	static int32 GetPhysicalAttack(const struct FItemBladeInfo& Info);
	static ELPhysicalDamageType GetPhysicalSubtypeWithSwing(const struct FItemBladeInfo& Info);
	static int32 GetPhysicalSubtypeWithSwingMod(const struct FItemBladeInfo& Info);
	static ELPhysicalDamageType GetPhysicalSubtypeWithThrust(const struct FItemBladeInfo& Info);
	static int32 GetPhysicalSubtypeWithThrustMod(const struct FItemBladeInfo& Info);
	static const class FName GetProjectileCodeName(const struct FItemBladeInfo& Info);
	static int32 GetPulseRechargeAttack(const struct FItemBladeInfo& Info);
	static const class FName GetReinforceTableCodeName(const struct FItemBladeInfo& Info);
	static int32 GetRepairRatioPerSecond(const struct FItemBladeInfo& Info);
	static int32 GetRequireErgoCount(const struct FItemBladeInfo& Info);
	static int32 GetRigidity(const struct FItemBladeInfo& Info);
	static ELWeaponShapeType GetShapeType(const struct FItemBladeInfo& Info);
	static const class FName GetSharpnessBadAbnormalstate(const struct FItemBladeInfo& Info);
	static int32 GetSharpnessBadAttackMod(const struct FItemBladeInfo& Info);
	static int32 GetSharpnessBadPoint(const struct FItemBladeInfo& Info);
	static const class FName GetSharpnessBreakAbnormalstate(const struct FItemBladeInfo& Info);
	static int32 GetSharpnessBreakAttackMod(const struct FItemBladeInfo& Info);
	static const class FName GetSharpnessFineAbnormalstate(const struct FItemBladeInfo& Info);
	static int32 GetSharpnessFineAttackMod(const struct FItemBladeInfo& Info);
	static int32 GetSharpnessFinePoint(const struct FItemBladeInfo& Info);
	static const class FName GetSharpnessNormalAbnormalstate(const struct FItemBladeInfo& Info);
	static int32 GetSharpnessNormalAttackMod(const struct FItemBladeInfo& Info);
	static int32 GetSharpnessNormalPoint(const struct FItemBladeInfo& Info);
	static int32 GetSharpnessReduceValueRatio(const struct FItemBladeInfo& Info);
	static int32 GetSharpnessReduceValueRatioOnGuard(const struct FItemBladeInfo& Info);
	static int32 GetSharpnessRepulseLevelBad(const struct FItemBladeInfo& Info);
	static int32 GetSharpnessRepulseLevelBreak(const struct FItemBladeInfo& Info);
	static int32 GetSharpnessRepulseLevelFine(const struct FItemBladeInfo& Info);
	static int32 GetSharpnessRepulseLevelNormal(const struct FItemBladeInfo& Info);
	static float GetStiffenPlayrateAttacker(const struct FItemBladeInfo& Info);
	static float GetStiffenPlayrateDefender(const struct FItemBladeInfo& Info);
	static const class FName GetSwingSoundCodename(const struct FItemBladeInfo& Info);
	static int32 GetToughRecoveryDelayTime(const struct FItemBladeInfo& Info);
	static bool GetUseBluntTrail(const struct FItemBladeInfo& Info);
	static const class FName GetWeaponBpCodeName(const struct FItemBladeInfo& Info);
	static int32 GetWeaponCombineCost(const struct FItemBladeInfo& Info);
	static const class FName GetWeaponCombineItemCodeName(const struct FItemBladeInfo& Info);
	static int32 GetWeaponCombineItemCount(const struct FItemBladeInfo& Info);
	static int32 GetWeaponDivideCost(const struct FItemBladeInfo& Info);
	static const class FName GetWeaponDivideItemCodeName(const struct FItemBladeInfo& Info);
	static int32 GetWeaponDivideItemCount(const struct FItemBladeInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemBladeInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemBladeInfoFuncLibrary")
	}
	static class UItemBladeInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemBladeInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemBladeInfoFuncLibrary;

// Class ProjectPContentInfo.NpcGaugeGrowthInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNpcGaugeGrowthInfoFuncLibrary final : public UObject
{
public:
	static int32 GetAcidDebuffResistMuladd(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetAcidDurationMulsud(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetBreakDebuffResistMuladd(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetBreakDurationMulsud(const struct FNpcGaugeGrowthInfo& Info);
	static const class FName GetCodeName(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetContaminationDebuffResistMuladd(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetContaminationDurationMulsud(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetCurseDebuffResistMuladd(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetCurseDurationMulsud(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetElectricDebuffResistMuladd(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetElectricDurationMulsud(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetFireDebuffResistMuladd(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetFireDurationMulsud(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetFullFillNum(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetGroggyMuladd(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetImpactDebuffResistMuladd(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetImpactDurationMulsud(const struct FNpcGaugeGrowthInfo& Info);
	static int32 GetToughMuladd(const struct FNpcGaugeGrowthInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NpcGaugeGrowthInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NpcGaugeGrowthInfoFuncLibrary")
	}
	static class UNpcGaugeGrowthInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNpcGaugeGrowthInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNpcGaugeGrowthInfoFuncLibrary;

// Class ProjectPContentInfo.ItemBladeInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemBladeInfoPtrFuncLibrary final : public UObject
{
public:
	static bool GetAbnormalElementDisable(const struct FItemBladeInfoPtr& Ptr);
	static bool GetAbnormalEnchantDisable(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetAbnormalStateBuildUpAttack(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetAbnormalStateCodeName(const struct FItemBladeInfoPtr& Ptr);
	static ELActionCategory GetActionCategory(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetAdditionalGroggyTime(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetAttackGainFrenzyPointActive(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetAttackGainFrenzyPointPassive(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetAttackSpeed(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetBladeNeedStatLackAbnormalStateCodeName(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetBladeNeedStatLackAtkRatio(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetBladeNeedStatLackDestructionRatio(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetBladeNeedStatLackStaminaRatio(const struct FItemBladeInfoPtr& Ptr);
	static ELBladeShapeType GetBladeShapeType(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetBladeWeightCodeName(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetConsumeErgoCount(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetConsumeErgoRate(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetConsumeStaminaPoint(const struct FItemBladeInfoPtr& Ptr);
	static ELCrashType GetCrashType(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetCriticalRate(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetDashParryCounterSkillCodeName(const struct FItemBladeInfoPtr& Ptr);
	static float GetDestructionDefence(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetDestructionPower(const struct FItemBladeInfoPtr& Ptr);
	static float GetDestructionReduce(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetElementalAttack(const struct FItemBladeInfoPtr& Ptr);
	static ELElementDamageType GetElementAttackType(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetErgoFrenzySkillCodeName(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetFatalDamageRatio(const struct FItemBladeInfoPtr& Ptr);
	static ELBladeFatalType GetFatalType(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetFrenzySkillCodeName(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetGuardDamageReductionRatio(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetGuardDurabilityAttack(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetGuardDurationRatio(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetGuardKnockbackDistanceReductionRatio(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetGuardPoint(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetGuardRegainAttackHeal(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetGuardRegainPerfectGuardHeal(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetGuardRegainPointMaxRatio(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetGuardSharpnessDefence(const struct FItemBladeInfoPtr& Ptr);
	static ELSwingPowerType GetHitFxLevel(const struct FItemBladeInfoPtr& Ptr);
	static ELPhysicalSurfaceType GetHitMaterial(const struct FItemBladeInfoPtr& Ptr);
	static class FString GetLocalTextByname(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetLocalTextBynameCn(const struct FItemBladeInfoPtr& Ptr);
	static class FText GetLocalTextBynameLocalize(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetNecessityAdvance(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetNecessityMotivity(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetNecessityTechnique(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetPerfectGuardDecreaseEnemyWeaponDurability(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetPhysicalAttack(const struct FItemBladeInfoPtr& Ptr);
	static ELPhysicalDamageType GetPhysicalSubtypeWithSwing(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetPhysicalSubtypeWithSwingMod(const struct FItemBladeInfoPtr& Ptr);
	static ELPhysicalDamageType GetPhysicalSubtypeWithThrust(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetPhysicalSubtypeWithThrustMod(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetProjectileCodeName(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetPulseRechargeAttack(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetReinforceTableCodeName(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetRepairRatioPerSecond(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetRequireErgoCount(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetRigidity(const struct FItemBladeInfoPtr& Ptr);
	static ELWeaponShapeType GetShapeType(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetSharpnessBadAbnormalstate(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetSharpnessBadAttackMod(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetSharpnessBadPoint(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetSharpnessBreakAbnormalstate(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetSharpnessBreakAttackMod(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetSharpnessFineAbnormalstate(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetSharpnessFineAttackMod(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetSharpnessFinePoint(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetSharpnessNormalAbnormalstate(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetSharpnessNormalAttackMod(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetSharpnessNormalPoint(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetSharpnessReduceValueRatio(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetSharpnessReduceValueRatioOnGuard(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetSharpnessRepulseLevelBad(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetSharpnessRepulseLevelBreak(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetSharpnessRepulseLevelFine(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetSharpnessRepulseLevelNormal(const struct FItemBladeInfoPtr& Ptr);
	static float GetStiffenPlayrateAttacker(const struct FItemBladeInfoPtr& Ptr);
	static float GetStiffenPlayrateDefender(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetSwingSoundCodename(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetToughRecoveryDelayTime(const struct FItemBladeInfoPtr& Ptr);
	static bool GetUseBluntTrail(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetWeaponBpCodeName(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetWeaponCombineCost(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetWeaponCombineItemCodeName(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetWeaponCombineItemCount(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetWeaponDivideCost(const struct FItemBladeInfoPtr& Ptr);
	static const class FName GetWeaponDivideItemCodeName(const struct FItemBladeInfoPtr& Ptr);
	static int32 GetWeaponDivideItemCount(const struct FItemBladeInfoPtr& Ptr);
	static bool IsValid(const struct FItemBladeInfoPtr& Ptr);
	static void IsValidBranch(const struct FItemBladeInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemBladeInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemBladeInfoPtrFuncLibrary")
	}
	static class UItemBladeInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemBladeInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemBladeInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ItemWeaponReinforceInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemWeaponReinforceInfoFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalStateBuildUpAttack(const struct FItemWeaponReinforceInfo& Info);
	static const class FName GetAbnormalStateCodeName(const struct FItemWeaponReinforceInfo& Info);
	static int32 GetAcidAttackMod(const struct FItemWeaponReinforceInfo& Info);
	static const class FName GetCodeName(const struct FItemWeaponReinforceInfo& Info);
	static class FString GetCorrectionCodeNameForAdvance(const struct FItemWeaponReinforceInfo& Info);
	static class FString GetCorrectionCodeNameForMotivity(const struct FItemWeaponReinforceInfo& Info);
	static class FString GetCorrectionCodeNameForTechnique(const struct FItemWeaponReinforceInfo& Info);
	static int32 GetElectricAttackMod(const struct FItemWeaponReinforceInfo& Info);
	static int32 GetFireAttackMod(const struct FItemWeaponReinforceInfo& Info);
	static ELWeaponCorrectionPhysicalGrade GetFirstStatCorrectionAdvance(const struct FItemWeaponReinforceInfo& Info);
	static ELWeaponCorrectionPhysicalGrade GetFirstStatCorrectionMotivity(const struct FItemWeaponReinforceInfo& Info);
	static ELWeaponCorrectionPhysicalGrade GetFirstStatCorrectionTechnique(const struct FItemWeaponReinforceInfo& Info);
	static int32 GetGrade(const struct FItemWeaponReinforceInfo& Info);
	static class FString GetLocalTextByname(const struct FItemWeaponReinforceInfo& Info);
	static int32 GetNeedErgo(const struct FItemWeaponReinforceInfo& Info);
	static const class FName GetNeedItemCodeName(const struct FItemWeaponReinforceInfo& Info);
	static int32 GetNeedItemNum(const struct FItemWeaponReinforceInfo& Info);
	static int32 GetPhysicalAttackMod(const struct FItemWeaponReinforceInfo& Info);
	static int32 GetSharpnessBadPoint(const struct FItemWeaponReinforceInfo& Info);
	static int32 GetSharpnessBadPointMod(const struct FItemWeaponReinforceInfo& Info);
	static int32 GetSharpnessFinePoint(const struct FItemWeaponReinforceInfo& Info);
	static int32 GetSharpnessFinePointMod(const struct FItemWeaponReinforceInfo& Info);
	static int32 GetSharpnessNormalPoint(const struct FItemWeaponReinforceInfo& Info);
	static int32 GetSharpnessNormalPointMod(const struct FItemWeaponReinforceInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemWeaponReinforceInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemWeaponReinforceInfoFuncLibrary")
	}
	static class UItemWeaponReinforceInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemWeaponReinforceInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemWeaponReinforceInfoFuncLibrary;

// Class ProjectPContentInfo.ResetSystemSettingInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UResetSystemSettingInfoAsset final : public UContentInfoAsset
{
public:
	struct FResetSystemSettingInfoDB              ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FResetSystemSettingInfoPtr FindResetSystemSettingInfoByNameBP(class FName CodeName);
	static const TArray<struct FResetSystemSettingInfo> GetResetSystemSettingInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ResetSystemSettingInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ResetSystemSettingInfoAsset")
	}
	static class UResetSystemSettingInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResetSystemSettingInfoAsset>();
	}
};
DUMPER7_ASSERTS_UResetSystemSettingInfoAsset;

// Class ProjectPContentInfo.ItemWeaponReinforceInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemWeaponReinforceInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalStateBuildUpAttack(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static const class FName GetAbnormalStateCodeName(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static int32 GetAcidAttackMod(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static class FString GetCorrectionCodeNameForAdvance(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static class FString GetCorrectionCodeNameForMotivity(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static class FString GetCorrectionCodeNameForTechnique(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static int32 GetElectricAttackMod(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static int32 GetFireAttackMod(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static ELWeaponCorrectionPhysicalGrade GetFirstStatCorrectionAdvance(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static ELWeaponCorrectionPhysicalGrade GetFirstStatCorrectionMotivity(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static ELWeaponCorrectionPhysicalGrade GetFirstStatCorrectionTechnique(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static int32 GetGrade(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static class FString GetLocalTextByname(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static int32 GetNeedErgo(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static const class FName GetNeedItemCodeName(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static int32 GetNeedItemNum(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static int32 GetPhysicalAttackMod(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static int32 GetSharpnessBadPoint(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static int32 GetSharpnessBadPointMod(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static int32 GetSharpnessFinePoint(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static int32 GetSharpnessFinePointMod(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static int32 GetSharpnessNormalPoint(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static int32 GetSharpnessNormalPointMod(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static bool IsValid(const struct FItemWeaponReinforceInfoPtr& Ptr);
	static void IsValidBranch(const struct FItemWeaponReinforceInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemWeaponReinforceInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemWeaponReinforceInfoPtrFuncLibrary")
	}
	static class UItemWeaponReinforceInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemWeaponReinforceInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemWeaponReinforceInfoPtrFuncLibrary;

// Class ProjectPContentInfo.HandleStatCorrectionChangeInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UHandleStatCorrectionChangeInfoFuncLibrary final : public UObject
{
public:
	static int32 GetAdvanceGradeChange(const struct FHandleStatCorrectionChangeInfo& Info);
	static const class FName GetCodeName(const struct FHandleStatCorrectionChangeInfo& Info);
	static const class FName GetKeyItemCodename(const struct FHandleStatCorrectionChangeInfo& Info);
	static const class FName GetKeyItemCodenameHero(const struct FHandleStatCorrectionChangeInfo& Info);
	static int32 GetKeyItemNumAToS(const struct FHandleStatCorrectionChangeInfo& Info);
	static int32 GetKeyItemNumBToA(const struct FHandleStatCorrectionChangeInfo& Info);
	static int32 GetKeyItemNumClear(const struct FHandleStatCorrectionChangeInfo& Info);
	static int32 GetKeyItemNumCToB(const struct FHandleStatCorrectionChangeInfo& Info);
	static int32 GetKeyItemNumDToC(const struct FHandleStatCorrectionChangeInfo& Info);
	static int32 GetKeyItemNumNoneToD(const struct FHandleStatCorrectionChangeInfo& Info);
	static int32 GetMotivityGradeChange(const struct FHandleStatCorrectionChangeInfo& Info);
	static int32 GetRequireErgo(const struct FHandleStatCorrectionChangeInfo& Info);
	static int32 GetRequireErgoHero(const struct FHandleStatCorrectionChangeInfo& Info);
	static int32 GetTechniqueGradeChange(const struct FHandleStatCorrectionChangeInfo& Info);
	static ELStatCorrectChangeType GetUpgradeStat(const struct FHandleStatCorrectionChangeInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HandleStatCorrectionChangeInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HandleStatCorrectionChangeInfoFuncLibrary")
	}
	static class UHandleStatCorrectionChangeInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHandleStatCorrectionChangeInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UHandleStatCorrectionChangeInfoFuncLibrary;

// Class ProjectPContentInfo.SkillIndicatorInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USkillIndicatorInfoFuncLibrary final : public UObject
{
public:
	static class FString GetAttachSocket(const struct FSkillIndicatorInfo& Info);
	static const class FName GetCodeName(const struct FSkillIndicatorInfo& Info);
	static const TSoftObjectPtr<class UObject> GetFxPath(const struct FSkillIndicatorInfo& Info);
	static const TSoftObjectPtr<class UObject> GetSoundPath(const struct FSkillIndicatorInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkillIndicatorInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkillIndicatorInfoFuncLibrary")
	}
	static class USkillIndicatorInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillIndicatorInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USkillIndicatorInfoFuncLibrary;

// Class ProjectPContentInfo.HandleStatCorrectionChangeInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UHandleStatCorrectionChangeInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetAdvanceGradeChange(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static const class FName GetKeyItemCodename(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static const class FName GetKeyItemCodenameHero(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static int32 GetKeyItemNumAToS(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static int32 GetKeyItemNumBToA(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static int32 GetKeyItemNumClear(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static int32 GetKeyItemNumCToB(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static int32 GetKeyItemNumDToC(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static int32 GetKeyItemNumNoneToD(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static int32 GetMotivityGradeChange(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static int32 GetRequireErgo(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static int32 GetRequireErgoHero(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static int32 GetTechniqueGradeChange(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static ELStatCorrectChangeType GetUpgradeStat(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static bool IsValid(const struct FHandleStatCorrectionChangeInfoPtr& Ptr);
	static void IsValidBranch(const struct FHandleStatCorrectionChangeInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("HandleStatCorrectionChangeInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"HandleStatCorrectionChangeInfoPtrFuncLibrary")
	}
	static class UHandleStatCorrectionChangeInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHandleStatCorrectionChangeInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UHandleStatCorrectionChangeInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SlavearmAlterItemMatchInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USlavearmAlterItemMatchInfoFuncLibrary final : public UObject
{
public:
	static const TSoftObjectPtr<class UObject> GetAlterAction(const struct FSlavearmAlterItemMatchInfo& Info);
	static const class FName GetAlterConsumeItemCodename(const struct FSlavearmAlterItemMatchInfo& Info);
	static const class FName GetCodeName(const struct FSlavearmAlterItemMatchInfo& Info);
	static int32 GetRequireMagazine(const struct FSlavearmAlterItemMatchInfo& Info);
	static const class FName GetSlavearmCodename(const struct FSlavearmAlterItemMatchInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlavearmAlterItemMatchInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlavearmAlterItemMatchInfoFuncLibrary")
	}
	static class USlavearmAlterItemMatchInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlavearmAlterItemMatchInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USlavearmAlterItemMatchInfoFuncLibrary;

// Class ProjectPContentInfo.ShopSpecialInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UShopSpecialInfoFuncLibrary final : public UObject
{
public:
	static int32 GetBuyNumMax(const struct FShopSpecialInfo& Info);
	static const class FName GetCondition(const struct FShopSpecialInfo& Info);
	static const class FName GetGoodsCodeName(const struct FShopSpecialInfo& Info);
	static const class FName GetItemCodeName(const struct FShopSpecialInfo& Info);
	static const class FName GetItemCodeName2(const struct FShopSpecialInfo& Info);
	static int32 GetNeedErgo(const struct FShopSpecialInfo& Info);
	static const class FName GetNeedItem1(const struct FShopSpecialInfo& Info);
	static const class FName GetNeedItem2(const struct FShopSpecialInfo& Info);
	static const class FName GetNeedItem3(const struct FShopSpecialInfo& Info);
	static const class FName GetNeedItem4(const struct FShopSpecialInfo& Info);
	static int32 GetNeedItemNum1(const struct FShopSpecialInfo& Info);
	static int32 GetNeedItemNum2(const struct FShopSpecialInfo& Info);
	static int32 GetNeedItemNum3(const struct FShopSpecialInfo& Info);
	static int32 GetNeedItemNum4(const struct FShopSpecialInfo& Info);
	static const class FName GetShopCodeName(const struct FShopSpecialInfo& Info);
	static int32 GetSort(const struct FShopSpecialInfo& Info);
	static int32 GetStockLimit(const struct FShopSpecialInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ShopSpecialInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ShopSpecialInfoFuncLibrary")
	}
	static class UShopSpecialInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShopSpecialInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UShopSpecialInfoFuncLibrary;

// Class ProjectPContentInfo.SlavearmAlterItemMatchInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USlavearmAlterItemMatchInfoPtrFuncLibrary final : public UObject
{
public:
	static const TSoftObjectPtr<class UObject> GetAlterAction(const struct FSlavearmAlterItemMatchInfoPtr& Ptr);
	static const class FName GetAlterConsumeItemCodename(const struct FSlavearmAlterItemMatchInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FSlavearmAlterItemMatchInfoPtr& Ptr);
	static int32 GetRequireMagazine(const struct FSlavearmAlterItemMatchInfoPtr& Ptr);
	static const class FName GetSlavearmCodename(const struct FSlavearmAlterItemMatchInfoPtr& Ptr);
	static bool IsValid(const struct FSlavearmAlterItemMatchInfoPtr& Ptr);
	static void IsValidBranch(const struct FSlavearmAlterItemMatchInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlavearmAlterItemMatchInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlavearmAlterItemMatchInfoPtrFuncLibrary")
	}
	static class USlavearmAlterItemMatchInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlavearmAlterItemMatchInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USlavearmAlterItemMatchInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ItemInfoAsset
// 0x04E8 (0x0560 - 0x0078)
class alignas(0x10) UItemInfoAsset final : public UContentInfoAsset
{
public:
	struct FItemInfoDB                            ContentInfoDB;                                     // 0x0078(0x04E0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_558[0x8];                                      // 0x0558(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FBladeWeightInfoPtr FindBladeWeightInfoByNameBP(class FName CodeName);
	static struct FCorrectionWeaponFirstStatInfoPtr FindCorrectionWeaponFirstStatInfoByNameBP(class FName CodeName);
	static struct FHandleStatCorrectionChangeInfoPtr FindHandleStatCorrectionChangeInfoByNameBP(class FName CodeName);
	static struct FItemBladeInfoPtr FindItemBladeInfoByNameBP(class FName CodeName);
	static struct FItemCollectionInfoPtr FindItemCollectionInfoByNameBP(class FName CodeName);
	static struct FItemCommonInfoPtr FindItemCommonInfoByNameBP(class FName CodeName);
	static struct FItemConsumeInfoPtr FindItemConsumeInfoByNameBP(class FName CodeName);
	static struct FItemCostumeInfoPtr FindItemCostumeInfoByNameBP(class FName CodeName);
	static struct FItemHandleInfoPtr FindItemHandleInfoByNameBP(class FName CodeName);
	static struct FItemPartsInfoPtr FindItemPartsInfoByNameBP(class FName CodeName);
	static struct FItemSlaveArmInfoPtr FindItemSlaveArmInfoByNameBP(class FName CodeName);
	static struct FItemWeaponMonsterPtr FindItemWeaponMonsterInfoByNameBP(class FName CodeName);
	static const TArray<struct FBladeWeightInfo> GetBladeWeightInfoArrayBP();
	static const TArray<struct FCorrectionWeaponFirstStatInfo> GetCorrectionWeaponFirstStatInfoArrayBP();
	static const TArray<struct FHandleStatCorrectionChangeInfo> GetHandleStatCorrectionChangeInfoArrayBP();
	static const TArray<struct FItemBladeInfo> GetItemBladeInfoArrayBP();
	static const TArray<struct FItemCollectionInfo> GetItemCollectionInfoArrayBP();
	static const TArray<struct FItemCommonInfo> GetItemCommonInfoArrayBP();
	static const TArray<struct FItemConsumeInfo> GetItemConsumeInfoArrayBP();
	static const TArray<struct FItemCostumeInfo> GetItemCostumeInfoArrayBP();
	static const TArray<struct FItemHandleInfo> GetItemHandleInfoArrayBP();
	static const TArray<struct FItemPartsInfo> GetItemPartsInfoArrayBP();
	static const TArray<struct FItemSlaveArmInfo> GetItemSlaveArmInfoArrayBP();
	static const TArray<struct FItemWeaponMonster> GetItemWeaponMonsterInfoArrayBP();
	static const TArray<struct FItemWeaponReinforceInfo> GetItemWeaponReinforceInfoArrayBP();
	static const TArray<struct FSlavearmAlterItemMatchInfo> GetSlavearmAlterItemMatchInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemInfoAsset")
	}
	static class UItemInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemInfoAsset>();
	}
};
DUMPER7_ASSERTS_UItemInfoAsset;

// Class ProjectPContentInfo.ResetSystemSettingInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UResetSystemSettingInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FResetSystemSettingInfo& Info);
	static const TArray<struct FResetNeedItemInfo> GetNeedItemsArray(const struct FResetSystemSettingInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ResetSystemSettingInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ResetSystemSettingInfoFuncLibrary")
	}
	static class UResetSystemSettingInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResetSystemSettingInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UResetSystemSettingInfoFuncLibrary;

// Class ProjectPContentInfo.ItemPackageInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemPackageInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FItemPackageInfo& Info);
	static const class FName GetItem1CodeName(const struct FItemPackageInfo& Info);
	static int32 GetItem1Count(const struct FItemPackageInfo& Info);
	static const class FName GetItem2CodeName(const struct FItemPackageInfo& Info);
	static int32 GetItem2Count(const struct FItemPackageInfo& Info);
	static const class FName GetItem3CodeName(const struct FItemPackageInfo& Info);
	static int32 GetItem3Count(const struct FItemPackageInfo& Info);
	static const class FName GetItem4CodeName(const struct FItemPackageInfo& Info);
	static int32 GetItem4Count(const struct FItemPackageInfo& Info);
	static const class FName GetItem5CodeName(const struct FItemPackageInfo& Info);
	static int32 GetItem5Count(const struct FItemPackageInfo& Info);
	static const class FName GetItem6CodeName(const struct FItemPackageInfo& Info);
	static int32 GetItem6Count(const struct FItemPackageInfo& Info);
	static const class FName GetNGPLink1(const struct FItemPackageInfo& Info);
	static const class FName GetNGPLink2(const struct FItemPackageInfo& Info);
	static const class FName GetNGPLink3(const struct FItemPackageInfo& Info);
	static const class FName GetNGPLink4(const struct FItemPackageInfo& Info);
	static int32 GetNGPRoundForLink1(const struct FItemPackageInfo& Info);
	static int32 GetNGPRoundForLink2(const struct FItemPackageInfo& Info);
	static int32 GetNGPRoundForLink3(const struct FItemPackageInfo& Info);
	static int32 GetNGPRoundForLink4(const struct FItemPackageInfo& Info);
	static const class FName GetWeaponItem1Blade(const struct FItemPackageInfo& Info);
	static const class FName GetWeaponItem1Handle(const struct FItemPackageInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemPackageInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemPackageInfoFuncLibrary")
	}
	static class UItemPackageInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemPackageInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemPackageInfoFuncLibrary;

// Class ProjectPContentInfo.ItemPackageInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UItemPackageInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FItemPackageInfoPtr& Ptr);
	static const class FName GetItem1CodeName(const struct FItemPackageInfoPtr& Ptr);
	static int32 GetItem1Count(const struct FItemPackageInfoPtr& Ptr);
	static const class FName GetItem2CodeName(const struct FItemPackageInfoPtr& Ptr);
	static int32 GetItem2Count(const struct FItemPackageInfoPtr& Ptr);
	static const class FName GetItem3CodeName(const struct FItemPackageInfoPtr& Ptr);
	static int32 GetItem3Count(const struct FItemPackageInfoPtr& Ptr);
	static const class FName GetItem4CodeName(const struct FItemPackageInfoPtr& Ptr);
	static int32 GetItem4Count(const struct FItemPackageInfoPtr& Ptr);
	static const class FName GetItem5CodeName(const struct FItemPackageInfoPtr& Ptr);
	static int32 GetItem5Count(const struct FItemPackageInfoPtr& Ptr);
	static const class FName GetItem6CodeName(const struct FItemPackageInfoPtr& Ptr);
	static int32 GetItem6Count(const struct FItemPackageInfoPtr& Ptr);
	static const class FName GetNGPLink1(const struct FItemPackageInfoPtr& Ptr);
	static const class FName GetNGPLink2(const struct FItemPackageInfoPtr& Ptr);
	static const class FName GetNGPLink3(const struct FItemPackageInfoPtr& Ptr);
	static const class FName GetNGPLink4(const struct FItemPackageInfoPtr& Ptr);
	static int32 GetNGPRoundForLink1(const struct FItemPackageInfoPtr& Ptr);
	static int32 GetNGPRoundForLink2(const struct FItemPackageInfoPtr& Ptr);
	static int32 GetNGPRoundForLink3(const struct FItemPackageInfoPtr& Ptr);
	static int32 GetNGPRoundForLink4(const struct FItemPackageInfoPtr& Ptr);
	static const class FName GetWeaponItem1Blade(const struct FItemPackageInfoPtr& Ptr);
	static const class FName GetWeaponItem1Handle(const struct FItemPackageInfoPtr& Ptr);
	static bool IsValid(const struct FItemPackageInfoPtr& Ptr);
	static void IsValidBranch(const struct FItemPackageInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemPackageInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemPackageInfoPtrFuncLibrary")
	}
	static class UItemPackageInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemPackageInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UItemPackageInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SkillHitInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USkillHitInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalStateBuildUpAttackRatio(const struct FSkillHitInfoPtr& Ptr);
	static const class FName GetAbnormalStateCodeName(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetAbnormalstateMomentConditionGroup(const struct FSkillHitInfoPtr& Ptr);
	static bool GetAllow360Guard(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetAttackGainFrenzyPointRatio(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetBoundDuration(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetBoundHeight(const struct FSkillHitInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetConsumeSlaveMagazine(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetConsumeStaminaPoint(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetConsumeStaminaRatio(const struct FSkillHitInfoPtr& Ptr);
	static const class FName GetCounterChangeSkillHitCodeName(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetCounterPostHit(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetCounterPreHit(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetDecreaseEnemyWeaponDurability(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetElementDamageRatio(const struct FSkillHitInfoPtr& Ptr);
	static ELElementDamageType GetElementDamageType(const struct FSkillHitInfoPtr& Ptr);
	static bool GetEnable2dSfx(const struct FSkillHitInfoPtr& Ptr);
	static bool GetEnablePerfectGuardGroggyDamage(const struct FSkillHitInfoPtr& Ptr);
	static bool GetEnableWarningevent(const struct FSkillHitInfoPtr& Ptr);
	static ELExplosionPowerType GetExlplosiveKillPower(const struct FSkillHitInfoPtr& Ptr);
	static ELExplosionDirectionType GetExplosiveKillDirection(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetExplosiveKillProb(const struct FSkillHitInfoPtr& Ptr);
	static bool GetFuryAttack(const struct FSkillHitInfoPtr& Ptr);
	static const class FName GetGroggyChangeSkillHitCodeName(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetGroggyDamageRatio(const struct FSkillHitInfoPtr& Ptr);
	static bool GetGroggyEnableHitBack(const struct FSkillHitInfoPtr& Ptr);
	static bool GetGroggyEnableHitFront(const struct FSkillHitInfoPtr& Ptr);
	static bool GetGroggyEnableHitSide(const struct FSkillHitInfoPtr& Ptr);
	static bool GetGroggyImmediatelyHitBack(const struct FSkillHitInfoPtr& Ptr);
	static bool GetGroggyImmediatelyHitFront(const struct FSkillHitInfoPtr& Ptr);
	static bool GetGroggyImmediatelyHitSide(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetGroggyTimeRatio(const struct FSkillHitInfoPtr& Ptr);
	static ELGuardAttackType GetGuardAttackType(const struct FSkillHitInfoPtr& Ptr);
	static bool GetGuardBreakAttack(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetGuardHitDuration(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetGuardKnockbackDistance(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetGuardKnockbackDuration(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetGuardPenetrationRatio(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetGuardRegainAttackHealRatio(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetGuardRegainDamageRatio(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetGuardRegainIncreaseRatio(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetGuardSharpnessDurabilityRatio(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetGuardStaminaDamageRatio(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetHitAnimDuration(const struct FSkillHitInfoPtr& Ptr);
	static const class FName GetHitCameraShakeCodeName(const struct FSkillHitInfoPtr& Ptr);
	static ELHitDirectionType GetHitDirectionType(const struct FSkillHitInfoPtr& Ptr);
	static float GetHitFxAngle(const struct FSkillHitInfoPtr& Ptr);
	static ELSwingPowerType GetHitFxLevel(const struct FSkillHitInfoPtr& Ptr);
	static const class FName GetHitGeneratePrjCodeName(const struct FSkillHitInfoPtr& Ptr);
	static const class FName GetHitIntencityDownSkillHit(const struct FSkillHitInfoPtr& Ptr);
	static ELPhysicalSurfaceType GetHitMaterial(const struct FSkillHitInfoPtr& Ptr);
	static ELHitMotionType GetHitMotionType(const struct FSkillHitInfoPtr& Ptr);
	static bool GetHitRotationReverse(const struct FSkillHitInfoPtr& Ptr);
	static ELHostileType GetHostileType(const struct FSkillHitInfoPtr& Ptr);
	static bool GetIgnoreDead(const struct FSkillHitInfoPtr& Ptr);
	static bool GetIgnoreDodge(const struct FSkillHitInfoPtr& Ptr);
	static bool GetIgnoreGrabbed(const struct FSkillHitInfoPtr& Ptr);
	static bool GetIgnoreGuard(const struct FSkillHitInfoPtr& Ptr);
	static bool GetIgnoreInvincible(const struct FSkillHitInfoPtr& Ptr);
	static bool GetIgnoreNpc(const struct FSkillHitInfoPtr& Ptr);
	static bool GetIgnoreParry(const struct FSkillHitInfoPtr& Ptr);
	static bool GetIgnorePc(const struct FSkillHitInfoPtr& Ptr);
	static bool GetIgnorePerfectGuard(const struct FSkillHitInfoPtr& Ptr);
	static bool GetIgnoreRepulseEnv(const struct FSkillHitInfoPtr& Ptr);
	static bool GetIgnoreRepulseGuard(const struct FSkillHitInfoPtr& Ptr);
	static bool GetIgnoreRepulseHit(const struct FSkillHitInfoPtr& Ptr);
	static bool GetIgnoreSuperArmor(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetImpulseValue(const struct FSkillHitInfoPtr& Ptr);
	static ELKnockBackDirectionType GetKnockbackDirection(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetKnockbackDistance(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetKnockbackDuration(const struct FSkillHitInfoPtr& Ptr);
	static float GetKnockbackScale(const struct FSkillHitInfoPtr& Ptr);
	static ELSkillMotionType GetMotionType(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetPerfectGuardDecreaseWeaponDurabilityRate(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetPhysicalDamageRatio(const struct FSkillHitInfoPtr& Ptr);
	static ELPhysicalDamageType GetPhysicalDamageType(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetPulseRechargeRatio(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetRegainhpDamageRatio(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetRegainhpMakeRatio(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetRepulseColRadius(const struct FSkillHitInfoPtr& Ptr);
	static ELRepulseDirectionType GetRepulseDirection(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetRepulseDuration(const struct FSkillHitInfoPtr& Ptr);
	static const class FName GetRepulseEndSocket(const struct FSkillHitInfoPtr& Ptr);
	static const class FName GetRepulseStartSocket(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetRigidityRatio(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetSharpnessReduceValueRatio(const struct FSkillHitInfoPtr& Ptr);
	static ELSkillHitType GetSkillHitType(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetSparkColRadius(const struct FSkillHitInfoPtr& Ptr);
	static const class FName GetSparkEndSocket(const struct FSkillHitInfoPtr& Ptr);
	static const class FName GetSparkStartSocket(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetStiffenDurationAttacker(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetStiffenDurationDefender(const struct FSkillHitInfoPtr& Ptr);
	static float GetStiffenPlayrateAttacker(const struct FSkillHitInfoPtr& Ptr);
	static float GetStiffenPlayrateDefender(const struct FSkillHitInfoPtr& Ptr);
	static bool GetTakeDamageIgnoreWarning(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetToughDamageRatio(const struct FSkillHitInfoPtr& Ptr);
	static int32 GetToughRecoveryDelayTimeRatio(const struct FSkillHitInfoPtr& Ptr);
	static bool GetTraceAttack(const struct FSkillHitInfoPtr& Ptr);
	static bool GetUseCounter(const struct FSkillHitInfoPtr& Ptr);
	static bool GetUseHitIntencity(const struct FSkillHitInfoPtr& Ptr);
	static bool GetUseSmash(const struct FSkillHitInfoPtr& Ptr);
	static ELWeaponAttachPointType GetWeaponAttachPointType(const struct FSkillHitInfoPtr& Ptr);
	static bool IsValid(const struct FSkillHitInfoPtr& Ptr);
	static void IsValidBranch(const struct FSkillHitInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkillHitInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkillHitInfoPtrFuncLibrary")
	}
	static class USkillHitInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillHitInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USkillHitInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ItemPackageInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UItemPackageInfoAsset final : public UContentInfoAsset
{
public:
	struct FItemPackageInfoDB                     ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FItemPackageInfoPtr FindItemPackageInfoByNameBP(class FName CodeName);
	static const TArray<struct FItemPackageInfo> GetItemPackageInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ItemPackageInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ItemPackageInfoAsset")
	}
	static class UItemPackageInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemPackageInfoAsset>();
	}
};
DUMPER7_ASSERTS_UItemPackageInfoAsset;

// Class ProjectPContentInfo.LevelSequenceInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULevelSequenceInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetAfterCommandExec(const struct FLevelSequenceInfo& Info);
	static const class FName GetAfterPlayedSequencer(const struct FLevelSequenceInfo& Info);
	static bool GetAlignToCineCamera(const struct FLevelSequenceInfo& Info);
	static const class FName GetBeforePlayedSequencer(const struct FLevelSequenceInfo& Info);
	static bool GetBindingPlayer(const struct FLevelSequenceInfo& Info);
	static bool GetCanSkip(const struct FLevelSequenceInfo& Info);
	static const class FName GetCodeName(const struct FLevelSequenceInfo& Info);
	static bool GetDisableCameraCuts(const struct FLevelSequenceInfo& Info);
	static const class FName GetDisableSkipCondition(const struct FLevelSequenceInfo& Info);
	static bool GetGameProcessPause(const struct FLevelSequenceInfo& Info);
	static bool GetHeadCostumeOff(const struct FLevelSequenceInfo& Info);
	static bool GetHideHud(const struct FLevelSequenceInfo& Info);
	static bool GetHidePlayer(const struct FLevelSequenceInfo& Info);
	static bool GetIsGrabSkill(const struct FLevelSequenceInfo& Info);
	static bool GetLockPlayerAction(const struct FLevelSequenceInfo& Info);
	static int32 GetLoopCount(const struct FLevelSequenceInfo& Info);
	static bool GetPauseAtEnd(const struct FLevelSequenceInfo& Info);
	static bool GetRestoreState(const struct FLevelSequenceInfo& Info);
	static const TSoftObjectPtr<class UObject> GetSequenceResource(const struct FLevelSequenceInfo& Info);
	static bool GetSetToBossLocation(const struct FLevelSequenceInfo& Info);
	static bool GetSetToPlayerLocation(const struct FLevelSequenceInfo& Info);
	static bool GetShowHud(const struct FLevelSequenceInfo& Info);
	static const class FName GetSkipSequencer(const struct FLevelSequenceInfo& Info);
	static const class FName GetSubtitleCodeName(const struct FLevelSequenceInfo& Info);
	static const class FName GetTogglePlayerSequencer(const struct FLevelSequenceInfo& Info);
	static bool GetUseCinematicCamera(const struct FLevelSequenceInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelSequenceInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelSequenceInfoFuncLibrary")
	}
	static class ULevelSequenceInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULevelSequenceInfoFuncLibrary;

// Class ProjectPContentInfo.SkillMoveInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) USkillMoveInfoAsset final : public UContentInfoAsset
{
public:
	struct FSkillMoveInfoDB                       ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FSkillMoveInfoPtr FindSkillMoveInfoByNameBP(class FName CodeName);
	static const TArray<struct FSkillMoveInfo> GetSkillMoveInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkillMoveInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkillMoveInfoAsset")
	}
	static class USkillMoveInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillMoveInfoAsset>();
	}
};
DUMPER7_ASSERTS_USkillMoveInfoAsset;

// Class ProjectPContentInfo.LevelSequenceInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULevelSequenceInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetAfterCommandExec(const struct FLevelSequenceInfoPtr& Ptr);
	static const class FName GetAfterPlayedSequencer(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetAlignToCineCamera(const struct FLevelSequenceInfoPtr& Ptr);
	static const class FName GetBeforePlayedSequencer(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetBindingPlayer(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetCanSkip(const struct FLevelSequenceInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetDisableCameraCuts(const struct FLevelSequenceInfoPtr& Ptr);
	static const class FName GetDisableSkipCondition(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetGameProcessPause(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetHeadCostumeOff(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetHideHud(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetHidePlayer(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetIsGrabSkill(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetLockPlayerAction(const struct FLevelSequenceInfoPtr& Ptr);
	static int32 GetLoopCount(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetPauseAtEnd(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetRestoreState(const struct FLevelSequenceInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetSequenceResource(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetSetToBossLocation(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetSetToPlayerLocation(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetShowHud(const struct FLevelSequenceInfoPtr& Ptr);
	static const class FName GetSkipSequencer(const struct FLevelSequenceInfoPtr& Ptr);
	static const class FName GetSubtitleCodeName(const struct FLevelSequenceInfoPtr& Ptr);
	static const class FName GetTogglePlayerSequencer(const struct FLevelSequenceInfoPtr& Ptr);
	static bool GetUseCinematicCamera(const struct FLevelSequenceInfoPtr& Ptr);
	static bool IsValid(const struct FLevelSequenceInfoPtr& Ptr);
	static void IsValidBranch(const struct FLevelSequenceInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelSequenceInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelSequenceInfoPtrFuncLibrary")
	}
	static class ULevelSequenceInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULevelSequenceInfoPtrFuncLibrary;

// Class ProjectPContentInfo.LevelSequenceInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) ULevelSequenceInfoAsset final : public UContentInfoAsset
{
public:
	struct FLevelSequenceInfoDB                   ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FLevelSequenceInfoPtr FindLevelSequenceInfoByNameBP(class FName CodeName);
	static const TArray<struct FLevelSequenceInfo> GetLevelSequenceInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelSequenceInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelSequenceInfoAsset")
	}
	static class ULevelSequenceInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceInfoAsset>();
	}
};
DUMPER7_ASSERTS_ULevelSequenceInfoAsset;

// Class ProjectPContentInfo.SkillIndicatorInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) USkillIndicatorInfoAsset final : public UContentInfoAsset
{
public:
	struct FSkillIndicatorInfoDB                  ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FSkillIndicatorInfoPtr FindSkillIndicatorInfoByNameBP(class FName CodeName);
	static const TArray<struct FSkillIndicatorInfo> GetSkillIndicatorInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkillIndicatorInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkillIndicatorInfoAsset")
	}
	static class USkillIndicatorInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillIndicatorInfoAsset>();
	}
};
DUMPER7_ASSERTS_USkillIndicatorInfoAsset;

// Class ProjectPContentInfo.LoadingScreenInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULoadingScreenInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FLoadingScreenInfo& Info);
	static ELConditionLoadingType GetConditionLoadingType(const struct FLoadingScreenInfo& Info);
	static class FString GetConditionNextChapter(const struct FLoadingScreenInfo& Info);
	static const class FName GetConditionQuest(const struct FLoadingScreenInfo& Info);
	static const TArray<class FName> GetFirstDrawChainTip(const struct FLoadingScreenInfo& Info);
	static bool GetFirstDrawPriority(const struct FLoadingScreenInfo& Info);
	static const class FName GetImageCodeName(const struct FLoadingScreenInfo& Info);
	static bool GetResetConditionNewGamePlus(const struct FLoadingScreenInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LoadingScreenInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LoadingScreenInfoFuncLibrary")
	}
	static class ULoadingScreenInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingScreenInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULoadingScreenInfoFuncLibrary;

// Class ProjectPContentInfo.LoadingScreenInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULoadingScreenInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FLoadingScreenInfoPtr& Ptr);
	static ELConditionLoadingType GetConditionLoadingType(const struct FLoadingScreenInfoPtr& Ptr);
	static class FString GetConditionNextChapter(const struct FLoadingScreenInfoPtr& Ptr);
	static const class FName GetConditionQuest(const struct FLoadingScreenInfoPtr& Ptr);
	static const TArray<class FName> GetFirstDrawChainTip(const struct FLoadingScreenInfoPtr& Ptr);
	static bool GetFirstDrawPriority(const struct FLoadingScreenInfoPtr& Ptr);
	static const class FName GetImageCodeName(const struct FLoadingScreenInfoPtr& Ptr);
	static bool GetResetConditionNewGamePlus(const struct FLoadingScreenInfoPtr& Ptr);
	static bool IsValid(const struct FLoadingScreenInfoPtr& Ptr);
	static void IsValidBranch(const struct FLoadingScreenInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LoadingScreenInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LoadingScreenInfoPtrFuncLibrary")
	}
	static class ULoadingScreenInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingScreenInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULoadingScreenInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ShopSpecialInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UShopSpecialInfoAsset final : public UContentInfoAsset
{
public:
	struct FShopSpecialInfoDB                     ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FShopSpecialInfoPtr FindShopSpecialInfoByNameBP(class FName CodeName);
	static const TArray<struct FShopSpecialInfo> GetShopSpecialInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ShopSpecialInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ShopSpecialInfoAsset")
	}
	static class UShopSpecialInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShopSpecialInfoAsset>();
	}
};
DUMPER7_ASSERTS_UShopSpecialInfoAsset;

// Class ProjectPContentInfo.LoadingTipInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULoadingTipInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FLoadingTipInfo& Info);
	static ELConditionLoadingType GetConditionLoadingType(const struct FLoadingTipInfo& Info);
	static const class FName GetConditionQuest(const struct FLoadingTipInfo& Info);
	static bool GetResetConditionNewGamePlus(const struct FLoadingTipInfo& Info);
	static const class FName GetTextCodeName(const struct FLoadingTipInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LoadingTipInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LoadingTipInfoFuncLibrary")
	}
	static class ULoadingTipInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingTipInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULoadingTipInfoFuncLibrary;

// Class ProjectPContentInfo.LoadingTipInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULoadingTipInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FLoadingTipInfoPtr& Ptr);
	static ELConditionLoadingType GetConditionLoadingType(const struct FLoadingTipInfoPtr& Ptr);
	static const class FName GetConditionQuest(const struct FLoadingTipInfoPtr& Ptr);
	static bool GetResetConditionNewGamePlus(const struct FLoadingTipInfoPtr& Ptr);
	static const class FName GetTextCodeName(const struct FLoadingTipInfoPtr& Ptr);
	static bool IsValid(const struct FLoadingTipInfoPtr& Ptr);
	static void IsValidBranch(const struct FLoadingTipInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LoadingTipInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LoadingTipInfoPtrFuncLibrary")
	}
	static class ULoadingTipInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingTipInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULoadingTipInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SkillMoveInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USkillMoveInfoFuncLibrary final : public UObject
{
public:
	static bool GetApplyAnimScaling(const struct FSkillMoveInfo& Info);
	static const class FName GetCodeName(const struct FSkillMoveInfo& Info);
	static bool GetIgnoreRootmotionMove(const struct FSkillMoveInfo& Info);
	static bool GetIgnoreRootmotionRotation(const struct FSkillMoveInfo& Info);
	static bool GetMoveCheckNavPath(const struct FSkillMoveInfo& Info);
	static const TSoftObjectPtr<class UObject> GetMoveCurve(const struct FSkillMoveInfo& Info);
	static float GetMoveDistance(const struct FSkillMoveInfo& Info);
	static bool GetMoveEnable(const struct FSkillMoveInfo& Info);
	static bool GetMoveFixedDirectionUse(const struct FSkillMoveInfo& Info);
	static bool GetMoveIgnoreRotateUse(const struct FSkillMoveInfo& Info);
	static float GetMoveRotYaw(const struct FSkillMoveInfo& Info);
	static float GetMoveSpeed(const struct FSkillMoveInfo& Info);
	static float GetMoveToTargetOffsetDistance(const struct FSkillMoveInfo& Info);
	static float GetMoveToTargetSpeed(const struct FSkillMoveInfo& Info);
	static bool GetMoveToTargetUse(const struct FSkillMoveInfo& Info);
	static float GetPursuitToTargetScalingOffsetDistance(const struct FSkillMoveInfo& Info);
	static float GetPursuitToTargetScalingSpeedMax(const struct FSkillMoveInfo& Info);
	static bool GetPursuitToTargetScalingSpeedUse(const struct FSkillMoveInfo& Info);
	static float GetRotateAngle(const struct FSkillMoveInfo& Info);
	static bool GetRotateAngleUse(const struct FSkillMoveInfo& Info);
	static bool GetRotateEnable(const struct FSkillMoveInfo& Info);
	static float GetRotateLimit(const struct FSkillMoveInfo& Info);
	static float GetRotateTrackingCompletionDegree(const struct FSkillMoveInfo& Info);
	static float GetRotateTrackingCompletionDegreeLeft(const struct FSkillMoveInfo& Info);
	static float GetRotateTrackingCompletionDegreeRight(const struct FSkillMoveInfo& Info);
	static ELTrackingDirectionType GetRotateTrackingDirection(const struct FSkillMoveInfo& Info);
	static bool GetRotateTrackingFullHomingUse(const struct FSkillMoveInfo& Info);
	static float GetRotateTrackingGiveUpDegree(const struct FSkillMoveInfo& Info);
	static float GetRotateTrackingRotateAngleOffset(const struct FSkillMoveInfo& Info);
	static bool GetRotateTrackingSetDirectionOnStart(const struct FSkillMoveInfo& Info);
	static float GetRotateTrackingSetDirectionOnStartLeft(const struct FSkillMoveInfo& Info);
	static float GetRotateTrackingSetDirectionOnStartRight(const struct FSkillMoveInfo& Info);
	static float GetRotateTrackingSpeed(const struct FSkillMoveInfo& Info);
	static bool GetRotateTrackingUse(const struct FSkillMoveInfo& Info);
	static bool GetRotateUseCaptureLocation(const struct FSkillMoveInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkillMoveInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkillMoveInfoFuncLibrary")
	}
	static class USkillMoveInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillMoveInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USkillMoveInfoFuncLibrary;

// Class ProjectPContentInfo.LoadingScreenInfoAsset
// 0x0108 (0x0180 - 0x0078)
class alignas(0x10) ULoadingScreenInfoAsset final : public UContentInfoAsset
{
public:
	struct FLoadingScreenInfoDB                   ContentInfoDB;                                     // 0x0078(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FLoadingScreenInfoPtr FindLoadingScreenInfoByNameBP(class FName CodeName);
	static struct FLoadingTipInfoPtr FindLoadingTipInfoByNameBP(class FName CodeName);
	static const TArray<struct FLoadingScreenInfo> GetLoadingScreenInfoArrayBP();
	static const TArray<struct FLoadingTipInfo> GetLoadingTipInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LoadingScreenInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LoadingScreenInfoAsset")
	}
	static class ULoadingScreenInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingScreenInfoAsset>();
	}
};
DUMPER7_ASSERTS_ULoadingScreenInfoAsset;

// Class ProjectPContentInfo.LocalDataInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULocalDataInfoFuncLibrary final : public UObject
{
public:
	static class FString GetChineseSimplified(const struct FLocalDataInfo& Info);
	static class FString GetChineseTraditional(const struct FLocalDataInfo& Info);
	static const class FName GetCodeName(const struct FLocalDataInfo& Info);
	static class FString GetEnglish(const struct FLocalDataInfo& Info);
	static class FString GetFrench(const struct FLocalDataInfo& Info);
	static class FString GetGerman(const struct FLocalDataInfo& Info);
	static class FString GetItalian(const struct FLocalDataInfo& Info);
	static class FString GetJapanese(const struct FLocalDataInfo& Info);
	static class FString GetKorean(const struct FLocalDataInfo& Info);
	static class FText GetKoreanLocalize(const struct FLocalDataInfo& Info);
	static class FString GetPolish(const struct FLocalDataInfo& Info);
	static class FString GetPortuguese(const struct FLocalDataInfo& Info);
	static class FString GetRussian(const struct FLocalDataInfo& Info);
	static class FString GetSpanish(const struct FLocalDataInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LocalDataInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LocalDataInfoFuncLibrary")
	}
	static class ULocalDataInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalDataInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULocalDataInfoFuncLibrary;

// Class ProjectPContentInfo.SlaveArmReinforcementInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USlaveArmReinforcementInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetAdditionalAmmoMax(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static int32 GetChangeHitIndex(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static const class FName GetChangePlayRateSection(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static const class FName GetChangeProjectile(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static const class FName GetChangeSection(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static const class FName GetChangeSkillCodeName(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static int32 GetConsumeSlaveMagazineMod(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static int32 GetHitIndexToChange(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static float GetPlayRate(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static const class FName GetProjectileToChange(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static const class FName GetReinforcementName(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static const class FName GetSectionToChange(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static int32 GetSlavearmAcidAttackMod(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static int32 GetSlavearmElectricAttackMod(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static int32 GetSlavearmFireAttackMod(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static int32 GetSlavearmPhysicalAttackMod(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static const class FName GetSpecialBuffCodeName(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static const class FName GetSpecialBuffSection(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static const class FName GetVariableToChange(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static const class FName GetVariableValue(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static bool IsValid(const struct FSlaveArmReinforcementInfoPtr& Ptr);
	static void IsValidBranch(const struct FSlaveArmReinforcementInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlaveArmReinforcementInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlaveArmReinforcementInfoPtrFuncLibrary")
	}
	static class USlaveArmReinforcementInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlaveArmReinforcementInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USlaveArmReinforcementInfoPtrFuncLibrary;

// Class ProjectPContentInfo.LocalDataInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULocalDataInfoPtrFuncLibrary final : public UObject
{
public:
	static class FString GetChineseSimplified(const struct FLocalDataInfoPtr& Ptr);
	static class FString GetChineseTraditional(const struct FLocalDataInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FLocalDataInfoPtr& Ptr);
	static class FString GetEnglish(const struct FLocalDataInfoPtr& Ptr);
	static class FString GetFrench(const struct FLocalDataInfoPtr& Ptr);
	static class FString GetGerman(const struct FLocalDataInfoPtr& Ptr);
	static class FString GetItalian(const struct FLocalDataInfoPtr& Ptr);
	static class FString GetJapanese(const struct FLocalDataInfoPtr& Ptr);
	static class FString GetKorean(const struct FLocalDataInfoPtr& Ptr);
	static class FText GetKoreanLocalize(const struct FLocalDataInfoPtr& Ptr);
	static class FString GetPolish(const struct FLocalDataInfoPtr& Ptr);
	static class FString GetPortuguese(const struct FLocalDataInfoPtr& Ptr);
	static class FString GetRussian(const struct FLocalDataInfoPtr& Ptr);
	static class FString GetSpanish(const struct FLocalDataInfoPtr& Ptr);
	static bool IsValid(const struct FLocalDataInfoPtr& Ptr);
	static void IsValidBranch(const struct FLocalDataInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LocalDataInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LocalDataInfoPtrFuncLibrary")
	}
	static class ULocalDataInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalDataInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULocalDataInfoPtrFuncLibrary;

// Class ProjectPContentInfo.LocalDataInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) ULocalDataInfoAsset final : public UContentInfoAsset
{
public:
	struct FLocalDataInfoDB                       ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FLocalDataInfoPtr FindLocalDataInfoByNameBP(class FName CodeName);
	static const TArray<struct FLocalDataInfo> GetLocalDataInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LocalDataInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LocalDataInfoAsset")
	}
	static class ULocalDataInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalDataInfoAsset>();
	}
};
DUMPER7_ASSERTS_ULocalDataInfoAsset;

// Class ProjectPContentInfo.Skill_IndicatorInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USkill_IndicatorInfoPtrFuncLibrary final : public UObject
{
public:
	static const TSoftClassPtr<class UClass> GetActionClass(const struct FSkill_IndicatorInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FSkill_IndicatorInfoPtr& Ptr);
	static ELActionCategory GetSystemCategory(const struct FSkill_IndicatorInfoPtr& Ptr);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Skill_IndicatorInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Skill_IndicatorInfoPtrFuncLibrary")
	}
	static class USkill_IndicatorInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkill_IndicatorInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USkill_IndicatorInfoPtrFuncLibrary;

// Class ProjectPContentInfo.LocationInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULocationInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FLocationInfo& Info);
	static class FString GetLocalTextName(const struct FLocationInfo& Info);
	static const class FName GetLocalTextNameCn(const struct FLocationInfo& Info);
	static class FText GetLocalTextNameLocalize(const struct FLocationInfo& Info);
	static const TSoftObjectPtr<class UObject> GetLocationListImage(const struct FLocationInfo& Info);
	static const class FName GetPersistentLevel(const struct FLocationInfo& Info);
	static const class FName GetWorldZone(const struct FLocationInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LocationInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LocationInfoFuncLibrary")
	}
	static class ULocationInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocationInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULocationInfoFuncLibrary;

// Class ProjectPContentInfo.LocationInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULocationInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FLocationInfoPtr& Ptr);
	static class FString GetLocalTextName(const struct FLocationInfoPtr& Ptr);
	static const class FName GetLocalTextNameCn(const struct FLocationInfoPtr& Ptr);
	static class FText GetLocalTextNameLocalize(const struct FLocationInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetLocationListImage(const struct FLocationInfoPtr& Ptr);
	static const class FName GetPersistentLevel(const struct FLocationInfoPtr& Ptr);
	static const class FName GetWorldZone(const struct FLocationInfoPtr& Ptr);
	static bool IsValid(const struct FLocationInfoPtr& Ptr);
	static void IsValidBranch(const struct FLocationInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LocationInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LocationInfoPtrFuncLibrary")
	}
	static class ULocationInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocationInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULocationInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SkillInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USkillInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetAbortSkillCooltimeresetPercent(const struct FSkillInfoPtr& Ptr);
	static ELActionCategory GetActionCategory(const struct FSkillInfoPtr& Ptr);
	static const class FName GetActionClassCodeName(const struct FSkillInfoPtr& Ptr);
	static const class FName GetActionGroupTableCodeName(const struct FSkillInfoPtr& Ptr);
	static const class FName GetActionPathCodeName(const struct FSkillInfoPtr& Ptr);
	static ELStartRotationType GetActionRotationType(const struct FSkillInfoPtr& Ptr);
	static ELAdditiveHitType GetAdditiveHitType(const struct FSkillInfoPtr& Ptr);
	static bool GetAllowFalling(const struct FSkillInfoPtr& Ptr);
	static class FString GetAnimName(const struct FSkillInfoPtr& Ptr);
	static bool GetAutoTargeting(const struct FSkillInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FSkillInfoPtr& Ptr);
	static int32 GetConsumeAmmo(const struct FSkillInfoPtr& Ptr);
	static int32 GetConsumeFrenzyUnitCount(const struct FSkillInfoPtr& Ptr);
	static int32 GetConsumeItemCount(const struct FSkillInfoPtr& Ptr);
	static int32 GetConsumeSlaveMagazine(const struct FSkillInfoPtr& Ptr);
	static int32 GetConsumeStaminaPoint(const struct FSkillInfoPtr& Ptr);
	static int32 GetCooltimeMax(const struct FSkillInfoPtr& Ptr);
	static int32 GetCooltimeMin(const struct FSkillInfoPtr& Ptr);
	static bool GetDecreaceUseSkillCountByCancel(const struct FSkillInfoPtr& Ptr);
	static bool GetDefenceSkill(const struct FSkillInfoPtr& Ptr);
	static float GetDestructionDefenceMod(const struct FSkillInfoPtr& Ptr);
	static float GetDestructionReduceMod(const struct FSkillInfoPtr& Ptr);
	static bool GetDontUseSkillCount(const struct FSkillInfoPtr& Ptr);
	static bool GetEnableBladeWeight(const struct FSkillInfoPtr& Ptr);
	static bool GetEndSectionByLanding(const struct FSkillInfoPtr& Ptr);
	static class FString GetEndSectionCallingCommand(const struct FSkillInfoPtr& Ptr);
	static const class FName GetFailSkill(const struct FSkillInfoPtr& Ptr);
	static int32 GetGlobalCooltimeMax(const struct FSkillInfoPtr& Ptr);
	static int32 GetGlobalCooltimeMin(const struct FSkillInfoPtr& Ptr);
	static const class FName GetHandleAnimState(const struct FSkillInfoPtr& Ptr);
	static bool GetIgnoreCheckRootmotion(const struct FSkillInfoPtr& Ptr);
	static const class FName GetImmuneCodeName(const struct FSkillInfoPtr& Ptr);
	static int32 GetInitCooltimeMax(const struct FSkillInfoPtr& Ptr);
	static int32 GetInitCooltimeMin(const struct FSkillInfoPtr& Ptr);
	static class FString GetLocalTextSkillName(const struct FSkillInfoPtr& Ptr);
	static const class FName GetLocalTextSkillNameCn(const struct FSkillInfoPtr& Ptr);
	static class FText GetLocalTextSkillNameLocalize(const struct FSkillInfoPtr& Ptr);
	static class FString GetLocalTextSkillTooltip(const struct FSkillInfoPtr& Ptr);
	static const class FName GetLocalTextSkillTooltipCn(const struct FSkillInfoPtr& Ptr);
	static class FText GetLocalTextSkillTooltipLocalize(const struct FSkillInfoPtr& Ptr);
	static const class FName GetLonghandleActionClassCodeName(const struct FSkillInfoPtr& Ptr);
	static class FString GetLonghandleAnimName(const struct FSkillInfoPtr& Ptr);
	static bool GetNaviJumpEnable(const struct FSkillInfoPtr& Ptr);
	static bool GetNotUseDestroyed(const struct FSkillInfoPtr& Ptr);
	static const class FName GetPartNeeded(const struct FSkillInfoPtr& Ptr);
	static bool GetPreventFallingDamage(const struct FSkillInfoPtr& Ptr);
	static int32 GetRequireAmmo(const struct FSkillInfoPtr& Ptr);
	static int32 GetRequireFrenzyUnitCount(const struct FSkillInfoPtr& Ptr);
	static const class FName GetRequireItemCodeName(const struct FSkillInfoPtr& Ptr);
	static bool GetRequireSlaveMagazine(const struct FSkillInfoPtr& Ptr);
	static int32 GetRequireSlaveMagazinePoint(const struct FSkillInfoPtr& Ptr);
	static bool GetRequireStamina(const struct FSkillInfoPtr& Ptr);
	static int32 GetRequireStaminaPoint(const struct FSkillInfoPtr& Ptr);
	static bool GetResetToughPoint(const struct FSkillInfoPtr& Ptr);
	static const class FName GetShorthandleActionClassCodeName(const struct FSkillInfoPtr& Ptr);
	static class FString GetShorthandleAnimName(const struct FSkillInfoPtr& Ptr);
	static int32 GetSkillApproachDistMax(const struct FSkillInfoPtr& Ptr);
	static int32 GetSkillApproachDistMin(const struct FSkillInfoPtr& Ptr);
	static int32 GetSkillDistHeight(const struct FSkillInfoPtr& Ptr);
	static int32 GetSkillDistMax(const struct FSkillInfoPtr& Ptr);
	static int32 GetSkillDistMin(const struct FSkillInfoPtr& Ptr);
	static const class FName GetSkillGroupCodeName(const struct FSkillInfoPtr& Ptr);
	static int32 GetSkillGroupCooltimeMax(const struct FSkillInfoPtr& Ptr);
	static int32 GetSkillGroupCooltimeMin(const struct FSkillInfoPtr& Ptr);
	static int32 GetSkillmoveCheckAngle(const struct FSkillInfoPtr& Ptr);
	static int32 GetSkillRangeAngleEnd(const struct FSkillInfoPtr& Ptr);
	static int32 GetSkillRangeAngleStart(const struct FSkillInfoPtr& Ptr);
	static ELAIRangeCheckType GetSkillrangeChecktype(const struct FSkillInfoPtr& Ptr);
	static int32 GetSkillRotateAngle(const struct FSkillInfoPtr& Ptr);
	static int32 GetSkilmoveCheckDist(const struct FSkillInfoPtr& Ptr);
	static int32 GetStartRotationBlendTime(const struct FSkillInfoPtr& Ptr);
	static ELStartRotationType GetStartRotationType(const struct FSkillInfoPtr& Ptr);
	static class FString GetStartSection(const struct FSkillInfoPtr& Ptr);
	static bool GetUseGlobalCooltime(const struct FSkillInfoPtr& Ptr);
	static bool GetUseSlopeLookat(const struct FSkillInfoPtr& Ptr);
	static ELWeaponAttachPointType GetWeaponAttachPointType(const struct FSkillInfoPtr& Ptr);
	static const class FName GetWeaponBreakChangeSkill(const struct FSkillInfoPtr& Ptr);
	static bool IsValid(const struct FSkillInfoPtr& Ptr);
	static void IsValidBranch(const struct FSkillInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkillInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkillInfoPtrFuncLibrary")
	}
	static class USkillInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USkillInfoPtrFuncLibrary;

// Class ProjectPContentInfo.LocationInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) ULocationInfoAsset final : public UContentInfoAsset
{
public:
	struct FLocationInfoDB                        ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FLocationInfoPtr FindLocationInfoByNameBP(class FName CodeName);
	static const TArray<struct FLocationInfo> GetLocationInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LocationInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LocationInfoAsset")
	}
	static class ULocationInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocationInfoAsset>();
	}
};
DUMPER7_ASSERTS_ULocationInfoAsset;

// Class ProjectPContentInfo.PCLocomotionListInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPCLocomotionListInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetAnimState(const struct FPCLocomotionListInfoPtr& Ptr);
	static const class FName GetMachine(const struct FPCLocomotionListInfoPtr& Ptr);
	static const class FName GetOverrideAnimName(const struct FPCLocomotionListInfoPtr& Ptr);
	static bool IsValid(const struct FPCLocomotionListInfoPtr& Ptr);
	static void IsValidBranch(const struct FPCLocomotionListInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PCLocomotionListInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PCLocomotionListInfoPtrFuncLibrary")
	}
	static class UPCLocomotionListInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCLocomotionListInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPCLocomotionListInfoPtrFuncLibrary;

// Class ProjectPContentInfo.NPCLocomotionListInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNPCLocomotionListInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetAnimState(const struct FNPCLocomotionListInfoPtr& Ptr);
	static const class FName GetMachine(const struct FNPCLocomotionListInfoPtr& Ptr);
	static const class FName GetOverrideAnimName(const struct FNPCLocomotionListInfoPtr& Ptr);
	static bool IsValid(const struct FNPCLocomotionListInfoPtr& Ptr);
	static void IsValidBranch(const struct FNPCLocomotionListInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCLocomotionListInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCLocomotionListInfoPtrFuncLibrary")
	}
	static class UNPCLocomotionListInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCLocomotionListInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNPCLocomotionListInfoPtrFuncLibrary;

// Class ProjectPContentInfo.MomentConditionInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UMomentConditionInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FMomentConditionInfo& Info);
	static EFactionType GetFaction(const struct FMomentConditionInfo& Info);
	static ENPCGradeType GetGrade(const struct FMomentConditionInfo& Info);
	static bool GetHitGroggy(const struct FMomentConditionInfo& Info);
	static bool GetIsBack(const struct FMomentConditionInfo& Info);
	static bool GetIsGroggy(const struct FMomentConditionInfo& Info);
	static bool GetIsGroggyEnable(const struct FMomentConditionInfo& Info);
	static bool GetIsSubSwing(const struct FMomentConditionInfo& Info);
	static bool GetIsSubThrust(const struct FMomentConditionInfo& Info);
	static ELMomentType GetMomentType(const struct FMomentConditionInfo& Info);
	static const class FName GetNpcCodename(const struct FMomentConditionInfo& Info);
	static int32 GetSkillHitConditionGroup1(const struct FMomentConditionInfo& Info);
	static int32 GetSkillHitConditionGroup2(const struct FMomentConditionInfo& Info);
	static int32 GetSkillHitConditionGroup3(const struct FMomentConditionInfo& Info);
	static int32 GetSkillHitConditionGroup4(const struct FMomentConditionInfo& Info);
	static ELActionCategory GetUseSkillActionCategory(const struct FMomentConditionInfo& Info);
	static const class FName GetUseSkillCodeName(const struct FMomentConditionInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MomentConditionInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MomentConditionInfoFuncLibrary")
	}
	static class UMomentConditionInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMomentConditionInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UMomentConditionInfoFuncLibrary;

// Class ProjectPContentInfo.MomentConditionInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UMomentConditionInfoAsset final : public UContentInfoAsset
{
public:
	struct FMomentConditionInfoDB                 ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FMomentConditionInfo> GetMomentConditionInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MomentConditionInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MomentConditionInfoAsset")
	}
	static class UMomentConditionInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMomentConditionInfoAsset>();
	}
};
DUMPER7_ASSERTS_UMomentConditionInfoAsset;

// Class ProjectPContentInfo.MovieResourceInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UMovieResourceInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetAfterCommandExec(const struct FMovieResourceInfoPtr& Ptr);
	static bool GetCanSkip(const struct FMovieResourceInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FMovieResourceInfoPtr& Ptr);
	static const class FName GetDisableSkipCondition(const struct FMovieResourceInfoPtr& Ptr);
	static bool GetGameProcessPause(const struct FMovieResourceInfoPtr& Ptr);
	static bool GetHideHud(const struct FMovieResourceInfoPtr& Ptr);
	static bool GetLockPlayerAction(const struct FMovieResourceInfoPtr& Ptr);
	static class FString GetMovieResource(const struct FMovieResourceInfoPtr& Ptr);
	static bool GetShowHud(const struct FMovieResourceInfoPtr& Ptr);
	static bool IsValid(const struct FMovieResourceInfoPtr& Ptr);
	static void IsValidBranch(const struct FMovieResourceInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MovieResourceInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MovieResourceInfoPtrFuncLibrary")
	}
	static class UMovieResourceInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieResourceInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UMovieResourceInfoPtrFuncLibrary;

// Class ProjectPContentInfo.NGPKeepConfigInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNGPKeepConfigInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FNGPKeepConfigInfo& Info);
	static bool GetKeepAppearance(const struct FNGPKeepConfigInfo& Info);
	static bool GetKeepErgo(const struct FNGPKeepConfigInfo& Info);
	static const TArray<ELItemFirstCategory> GetKeepItemByItemFirstCategory(const struct FNGPKeepConfigInfo& Info);
	static const TArray<class FString> GetKeepItemSpotList(const struct FNGPKeepConfigInfo& Info);
	static bool GetKeepLevelAndStat(const struct FNGPKeepConfigInfo& Info);
	static const TArray<class FString> GetKeepNPCSpotList(const struct FNGPKeepConfigInfo& Info);
	static bool GetKeepPOganOpenLevel(const struct FNGPKeepConfigInfo& Info);
	static bool GetKeepPOganQuartz(const struct FNGPKeepConfigInfo& Info);
	static const TArray<class FString> GetKeepPropSpotList(const struct FNGPKeepConfigInfo& Info);
	static const TArray<class FName> GetKeepQuest(const struct FNGPKeepConfigInfo& Info);
	static const TArray<class FName> GetKeepSpecialBuffList(const struct FNGPKeepConfigInfo& Info);
	static bool GetKeepTutorialRecord(const struct FNGPKeepConfigInfo& Info);
	static const class FName GetNewGameExecCommonCodeName(const struct FNGPKeepConfigInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NGPKeepConfigInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NGPKeepConfigInfoFuncLibrary")
	}
	static class UNGPKeepConfigInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGPKeepConfigInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNGPKeepConfigInfoFuncLibrary;

// Class ProjectPContentInfo.NGPContentChangeInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNGPContentChangeInfoFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalStateBuildUpAttackMul(const struct FNGPContentChangeInfo& Info);
	static int32 GetAcidAttackMul(const struct FNGPContentChangeInfo& Info);
	static int32 GetAcidDebuffResistMul(const struct FNGPContentChangeInfo& Info);
	static const class FName GetCodeName(const struct FNGPContentChangeInfo& Info);
	static int32 GetContaminationDebuffResistMul(const struct FNGPContentChangeInfo& Info);
	static int32 GetCurseDebuffResistMul(const struct FNGPContentChangeInfo& Info);
	static int32 GetElectricAttackMul(const struct FNGPContentChangeInfo& Info);
	static int32 GetElectricDebuffResistMul(const struct FNGPContentChangeInfo& Info);
	static int32 GetExpMul(const struct FNGPContentChangeInfo& Info);
	static int32 GetFireAttackMul(const struct FNGPContentChangeInfo& Info);
	static int32 GetFireDebuffResistMul(const struct FNGPContentChangeInfo& Info);
	static int32 GetHealthPowerMul(const struct FNGPContentChangeInfo& Info);
	static int32 GetNGPDetailIndex(const struct FNGPContentChangeInfo& Info);
	static int32 GetNGPRound(const struct FNGPContentChangeInfo& Info);
	static int32 GetPhysicalPowerMul(const struct FNGPContentChangeInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NGPContentChangeInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NGPContentChangeInfoFuncLibrary")
	}
	static class UNGPContentChangeInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNGPContentChangeInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNGPContentChangeInfoFuncLibrary;

// Class ProjectPContentInfo.NewGamePlusInfoAsset
// 0x00B8 (0x0130 - 0x0078)
class alignas(0x10) UNewGamePlusInfoAsset final : public UContentInfoAsset
{
public:
	struct FNewGamePlusInfoDB                     ContentInfoDB;                                     // 0x0078(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FNGPKeepConfigInfoPtr FindNGPKeepConfigInfoByNameBP(class FName CodeName);
	static const TArray<struct FNGPContentChangeInfo> GetNGPContentChangeInfoArrayBP();
	static const TArray<struct FNGPKeepConfigInfo> GetNGPKeepConfigInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NewGamePlusInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NewGamePlusInfoAsset")
	}
	static class UNewGamePlusInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNewGamePlusInfoAsset>();
	}
};
DUMPER7_ASSERTS_UNewGamePlusInfoAsset;

// Class ProjectPContentInfo.NPCDieInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNPCDieInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetDieAniDuration(const struct FNPCDieInfoPtr& Ptr);
	static bool IsValid(const struct FNPCDieInfoPtr& Ptr);
	static void IsValidBranch(const struct FNPCDieInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCDieInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCDieInfoPtrFuncLibrary")
	}
	static class UNPCDieInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCDieInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNPCDieInfoPtrFuncLibrary;

// Class ProjectPContentInfo.NPCSkillStandbyInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNPCSkillStandbyInfoPtrFuncLibrary final : public UObject
{
public:
	static class FString GetSkillId(const struct FNPCSkillStandbyInfoPtr& Ptr);
	static int32 GetSkillRate(const struct FNPCSkillStandbyInfoPtr& Ptr);
	static bool IsValid(const struct FNPCSkillStandbyInfoPtr& Ptr);
	static void IsValidBranch(const struct FNPCSkillStandbyInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCSkillStandbyInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCSkillStandbyInfoPtrFuncLibrary")
	}
	static class UNPCSkillStandbyInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCSkillStandbyInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNPCSkillStandbyInfoPtrFuncLibrary;

// Class ProjectPContentInfo.NPCInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNPCInfoPtrFuncLibrary final : public UObject
{
public:
	static const TSoftClassPtr<class UClass> GetAiStatemachine(const struct FNPCInfoPtr& Ptr);
	static float GetAlwaysGuardAngle(const struct FNPCInfoPtr& Ptr);
	static const class FName GetAlwaysGuardAttachSlot(const struct FNPCInfoPtr& Ptr);
	static float GetAlwaysGuardBoxX(const struct FNPCInfoPtr& Ptr);
	static float GetAlwaysGuardBoxY(const struct FNPCInfoPtr& Ptr);
	static float GetAlwaysGuardBoxZ(const struct FNPCInfoPtr& Ptr);
	static ELAlwaysGuardDirection GetAlwaysGuardDirection(const struct FNPCInfoPtr& Ptr);
	static float GetArriveCheckRange(const struct FNPCInfoPtr& Ptr);
	static int32 GetCheckSkillUseCount(const struct FNPCInfoPtr& Ptr);
	static int32 GetCheckTargetNearAllyNum(const struct FNPCInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FNPCInfoPtr& Ptr);
	static const class FName GetCommonActionPathCodeName(const struct FNPCInfoPtr& Ptr);
	static bool GetDeadHelpsignal(const struct FNPCInfoPtr& Ptr);
	static bool GetDieImmediatelyHide(const struct FNPCInfoPtr& Ptr);
	static bool GetDontUseCheckAllyNum(const struct FNPCInfoPtr& Ptr);
	static bool GetExceptCheckAllyNum(const struct FNPCInfoPtr& Ptr);
	static bool GetExplosiveKillPossible(const struct FNPCInfoPtr& Ptr);
	static EFactionType GetFaction(const struct FNPCInfoPtr& Ptr);
	static int32 GetFatalBehitEnableCooltime(const struct FNPCInfoPtr& Ptr);
	static ELFatalEnableCondType GetFatalEnableCondType(const struct FNPCInfoPtr& Ptr);
	static ELFatalHitType GetFatalHitType(const struct FNPCInfoPtr& Ptr);
	static ELNpcFXSizeType GetFxSize(const struct FNPCInfoPtr& Ptr);
	static const struct FFloatRangeValue GetGlobalCooltime(const struct FNPCInfoPtr& Ptr);
	static ENPCGradeType GetGrade(const struct FNPCInfoPtr& Ptr);
	static ELGrapplegunHitType GetGrapplegunHitType(const struct FNPCInfoPtr& Ptr);
	static int32 GetGroggyEnableResetRestore(const struct FNPCInfoPtr& Ptr);
	static int32 GetGroggyEnableTime(const struct FNPCInfoPtr& Ptr);
	static int32 GetGroggyFxScale(const struct FNPCInfoPtr& Ptr);
	static const struct FFloatRangeValue GetGroggyMaintainTime(const struct FNPCInfoPtr& Ptr);
	static int32 GetGroggySndScale(const struct FNPCInfoPtr& Ptr);
	static ELGroggyType GetGroggyTypeBack(const struct FNPCInfoPtr& Ptr);
	static ELGroggyType GetGroggyTypeFront(const struct FNPCInfoPtr& Ptr);
	static ELGroggyType GetGroggyTypeSide(const struct FNPCInfoPtr& Ptr);
	static int32 GetGuardDurationRatio(const struct FNPCInfoPtr& Ptr);
	static ELHeadTagVisibleType GetHeadtagVisibleType(const struct FNPCInfoPtr& Ptr);
	static bool GetHelpsignalEnable(const struct FNPCInfoPtr& Ptr);
	static float GetHelpsignalRange(const struct FNPCInfoPtr& Ptr);
	static ELSwingPowerType GetHitFxLevel(const struct FNPCInfoPtr& Ptr);
	static int32 GetHitRepulseLevelPierce(const struct FNPCInfoPtr& Ptr);
	static int32 GetHitRepulseLevelSlash(const struct FNPCInfoPtr& Ptr);
	static int32 GetHitRepulseLevelStrike(const struct FNPCInfoPtr& Ptr);
	static ELHPUIType GetHpUiType(const struct FNPCInfoPtr& Ptr);
	static const class FName GetImmuneCodeName(const struct FNPCInfoPtr& Ptr);
	static const TArray<class FName> GetInitAbnormalCodeName(const struct FNPCInfoPtr& Ptr);
	static class FString GetLocalTextName(const struct FNPCInfoPtr& Ptr);
	static const class FName GetLocalTextNameCn(const struct FNPCInfoPtr& Ptr);
	static class FText GetLocalTextNameLocalize(const struct FNPCInfoPtr& Ptr);
	static const class FName GetLocomotionActionPathCodeName(const struct FNPCInfoPtr& Ptr);
	static bool GetMoveHeightCheck(const struct FNPCInfoPtr& Ptr);
	static const class FName GetNpcAssetTableCodeName(const struct FNPCInfoPtr& Ptr);
	static int32 GetNpcBackGroggyPointRatio(const struct FNPCInfoPtr& Ptr);
	static const TSoftClassPtr<class UClass> GetNpcBp(const struct FNPCInfoPtr& Ptr);
	static ELNpcDisappearType GetNpcDisappearType(const struct FNPCInfoPtr& Ptr);
	static int32 GetNpcFrontGroggyPointRatio(const struct FNPCInfoPtr& Ptr);
	static ELNPCType GetNpcKind(const struct FNPCInfoPtr& Ptr);
	static int32 GetNpcScale(const struct FNPCInfoPtr& Ptr);
	static int32 GetNpcSideGroggyPointRatio(const struct FNPCInfoPtr& Ptr);
	static int32 GetPerfectGuardGroggyDamage(const struct FNPCInfoPtr& Ptr);
	static bool GetPlayBgm(const struct FNPCInfoPtr& Ptr);
	static float GetPursuitDistance(const struct FNPCInfoPtr& Ptr);
	static bool GetRespawnEnable(const struct FNPCInfoPtr& Ptr);
	static float GetReturnDistance(const struct FNPCInfoPtr& Ptr);
	static int32 GetRoamRange(const struct FNPCInfoPtr& Ptr);
	static int32 GetRotateAngle(const struct FNPCInfoPtr& Ptr);
	static int32 GetRotateCooltime(const struct FNPCInfoPtr& Ptr);
	static float GetRunSpeedCombat(const struct FNPCInfoPtr& Ptr);
	static float GetRunSpeedPeace(const struct FNPCInfoPtr& Ptr);
	static float GetRunSpeedWarning(const struct FNPCInfoPtr& Ptr);
	static float GetSensitiveRange(const struct FNPCInfoPtr& Ptr);
	static float GetSensitiveSpeed(const struct FNPCInfoPtr& Ptr);
	static float GetSensitiveTime(const struct FNPCInfoPtr& Ptr);
	static int32 GetSharpnessMonsterDamageRatioPierce(const struct FNPCInfoPtr& Ptr);
	static int32 GetSharpnessMonsterDamageRatioSlash(const struct FNPCInfoPtr& Ptr);
	static int32 GetSharpnessMonsterDamageRatioStrike(const struct FNPCInfoPtr& Ptr);
	static float GetSightAngle(const struct FNPCInfoPtr& Ptr);
	static float GetSightDistanceCombat(const struct FNPCInfoPtr& Ptr);
	static float GetSightDistancePeace(const struct FNPCInfoPtr& Ptr);
	static float GetSightDistanceWarning(const struct FNPCInfoPtr& Ptr);
	static float GetSightHeight(const struct FNPCInfoPtr& Ptr);
	static const class FName GetSkillActionPathCodeName(const struct FNPCInfoPtr& Ptr);
	static const class FName GetSkillHitCodeNameDestroyed(const struct FNPCInfoPtr& Ptr);
	static const TArray<struct FNPCSkillStandbyInfo> GetSkillListArray(const struct FNPCInfoPtr& Ptr);
	static const class FName GetSpawnIdleCodeName(const struct FNPCInfoPtr& Ptr);
	static const TArray<class FName> GetSpawnNpcCodeName(const struct FNPCInfoPtr& Ptr);
	static float GetStrafeMoveDist(const struct FNPCInfoPtr& Ptr);
	static const class FName GetSwapNpcCodeName(const struct FNPCInfoPtr& Ptr);
	static float GetTargetdecisionRange(const struct FNPCInfoPtr& Ptr);
	static int32 GetTargetdecisionTimeMax(const struct FNPCInfoPtr& Ptr);
	static int32 GetTargetdecisionTimeMin(const struct FNPCInfoPtr& Ptr);
	static ELNpcTargetDecisionType GetTargetDecisionType(const struct FNPCInfoPtr& Ptr);
	static float GetTargetDetectRangeCombat(const struct FNPCInfoPtr& Ptr);
	static float GetTargetDetectRangePeace(const struct FNPCInfoPtr& Ptr);
	static float GetTargetDetectRangeWarning(const struct FNPCInfoPtr& Ptr);
	static int32 GetTicketMoveDist(const struct FNPCInfoPtr& Ptr);
	static ELToughMotionType GetToughMotionType(const struct FNPCInfoPtr& Ptr);
	static bool GetUsePhysicsHit(const struct FNPCInfoPtr& Ptr);
	static float GetWalkSpeedCombat(const struct FNPCInfoPtr& Ptr);
	static float GetWalkSpeedPeace(const struct FNPCInfoPtr& Ptr);
	static float GetWalkSpeedWarning(const struct FNPCInfoPtr& Ptr);
	static ELWeaponBreakMotionType GetWeaponBreakMotionType(const struct FNPCInfoPtr& Ptr);
	static const class FName GetWeaponCodeNameEx1(const struct FNPCInfoPtr& Ptr);
	static const class FName GetWeaponCodeNameEx2(const struct FNPCInfoPtr& Ptr);
	static const class FName GetWeaponCodeNameEx3(const struct FNPCInfoPtr& Ptr);
	static const class FName GetWeaponCodeNameL(const struct FNPCInfoPtr& Ptr);
	static const class FName GetWeaponCodeNameR(const struct FNPCInfoPtr& Ptr);
	static bool IsValid(const struct FNPCInfoPtr& Ptr);
	static void IsValidBranch(const struct FNPCInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCInfoPtrFuncLibrary")
	}
	static class UNPCInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNPCInfoPtrFuncLibrary;

// Class ProjectPContentInfo.NPCSkillLinkInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNPCSkillLinkInfoPtrFuncLibrary final : public UObject
{
public:
	static ELElementDamageType GetBeHitByElementDamageType(const struct FNPCSkillLinkInfoPtr& Ptr);
	static ELPhysicalDamageType GetBeHitByPhysicalDamageType(const struct FNPCSkillLinkInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FNPCSkillLinkInfoPtr& Ptr);
	static bool GetConditionBeHit(const struct FNPCSkillLinkInfoPtr& Ptr);
	static bool GetConditionCooltime(const struct FNPCSkillLinkInfoPtr& Ptr);
	static bool GetConditionDefenceSkill(const struct FNPCSkillLinkInfoPtr& Ptr);
	static bool GetConditionHitTarget(const struct FNPCSkillLinkInfoPtr& Ptr);
	static const class FName GetConditionPartNeeded(const struct FNPCSkillLinkInfoPtr& Ptr);
	static bool GetConditionPercent(const struct FNPCSkillLinkInfoPtr& Ptr);
	static bool GetConditionRange(const struct FNPCSkillLinkInfoPtr& Ptr);
	static bool GetFormerSkillUseCooltime(const struct FNPCSkillLinkInfoPtr& Ptr);
	static ELAIDamageType GetHitDamageType(const struct FNPCSkillLinkInfoPtr& Ptr);
	static class FString GetHitTargetActionEventAlias(const struct FNPCSkillLinkInfoPtr& Ptr);
	static float GetPercentValue(const struct FNPCSkillLinkInfoPtr& Ptr);
	static int32 GetPriority(const struct FNPCSkillLinkInfoPtr& Ptr);
	static float GetSkillDistHeight(const struct FNPCSkillLinkInfoPtr& Ptr);
	static float GetSkillDistMax(const struct FNPCSkillLinkInfoPtr& Ptr);
	static float GetSkillDistMin(const struct FNPCSkillLinkInfoPtr& Ptr);
	static float GetSkillRangeAngleEnd(const struct FNPCSkillLinkInfoPtr& Ptr);
	static float GetSkillRangeAngleStart(const struct FNPCSkillLinkInfoPtr& Ptr);
	static ELAIRangeCheckType GetSkillrangeChecktype(const struct FNPCSkillLinkInfoPtr& Ptr);
	static const class FName GetUseSkillId(const struct FNPCSkillLinkInfoPtr& Ptr);
	static bool IsValid(const struct FNPCSkillLinkInfoPtr& Ptr);
	static void IsValidBranch(const struct FNPCSkillLinkInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCSkillLinkInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCSkillLinkInfoPtrFuncLibrary")
	}
	static class UNPCSkillLinkInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCSkillLinkInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNPCSkillLinkInfoPtrFuncLibrary;

// Class ProjectPContentInfo.NpcGaugeGrowthInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNpcGaugeGrowthInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetAcidDebuffResistMuladd(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetAcidDurationMulsud(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetBreakDebuffResistMuladd(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetBreakDurationMulsud(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetContaminationDebuffResistMuladd(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetContaminationDurationMulsud(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetCurseDebuffResistMuladd(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetCurseDurationMulsud(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetElectricDebuffResistMuladd(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetElectricDurationMulsud(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetFireDebuffResistMuladd(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetFireDurationMulsud(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetFullFillNum(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetGroggyMuladd(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetImpactDebuffResistMuladd(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetImpactDurationMulsud(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static int32 GetToughMuladd(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static bool IsValid(const struct FNpcGaugeGrowthInfoPtr& Ptr);
	static void IsValidBranch(const struct FNpcGaugeGrowthInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NpcGaugeGrowthInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NpcGaugeGrowthInfoPtrFuncLibrary")
	}
	static class UNpcGaugeGrowthInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNpcGaugeGrowthInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNpcGaugeGrowthInfoPtrFuncLibrary;

// Class ProjectPContentInfo.NPCStatInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNPCStatInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalFirePoint(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetAbnormalStateBuildUpAttack(const struct FNPCStatInfoPtr& Ptr);
	static const class FName GetAbnormalStateCodeName(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetAbnormalStatePenaltyBase(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetAcidAttack(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetAcidDebuffResist(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetAcidDefence(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetAcidReduce(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetAttackSpeedRatio(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetBreakDebuffResist(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetBuildUpRecoverIncBase(const struct FNPCStatInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetContaminationDebuffResist(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetCriticalDamageRatio(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetCriticalRate(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetCriticalResistRate(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetCurseDebuffResist(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetDestructionAcidReduce(const struct FNPCStatInfoPtr& Ptr);
	static float GetDestructionDefence(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetDestructionElectricReduce(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetDestructionFireReduce(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetDestructionPhysicalReduce(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetDestructionPierceReduce(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetDestructionPower(const struct FNPCStatInfoPtr& Ptr);
	static float GetDestructionReduce(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetDestructionSlashReduce(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetDestructionStrikeReduce(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetElectricAttack(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetElectricDebuffResist(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetElectricDefence(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetElectricReduce(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetExp(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetFireAttack(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetFireDebuffResist(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetFireDefence(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetFireReduce(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetGroggyAttack(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetGroggyPoint(const struct FNPCStatInfoPtr& Ptr);
	static float GetGroggyPointResetDelay(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetGroggyPointRestoreBase(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetGroggyPointRestoreStopTime(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetGuardAciddamageReductionRatio(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetGuardElectricdamageReductionRatio(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetGuardFiredamageReductionRatio(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetGuardKnockbackDistanceReductionRatio(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetGuardKnockbackDurationReductionRatio(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetGuardPenetrationPowerBase(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetGuardPhysicaldamageReductionRatio(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetGuardPoint(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetGuardSharpnessAttack(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetGuardStaminaDamage(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetHealthPower(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetImpactDebuffResist(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetMaxStamina(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetNGPDetailIndex(const struct FNPCStatInfoPtr& Ptr);
	static const class FName GetNpcGaugeGrowth(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetPhysicalDefence(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetPhysicalPierceDefence(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetPhysicalPierceReduce(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetPhysicalPower(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetPhysicalReduce(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetPhysicalSlashDefence(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetPhysicalSlashReduce(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetPhysicalStrikeDefence(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetPhysicalStrikeReduce(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetRegainhpGainRatio(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetRegainhpHealIncreaseRatio(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetRegainhpHealRatio(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetRegainhpHealTime(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetRegainhpMaxExist(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetRestoreStaminaPerSec(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetRigidity(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetSpecialhitGroggyReduction(const struct FNPCStatInfoPtr& Ptr);
	static float GetStiffenPlayrateAttacker(const struct FNPCStatInfoPtr& Ptr);
	static float GetStiffenPlayrateDefender(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetTough(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetToughAttackPowerBase(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetToughDefencePowerBase(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetToughRecoveryDelayReduction(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetToughRecoveryDelayTime(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetToughRestoreBase(const struct FNPCStatInfoPtr& Ptr);
	static int32 GetWalkRunSpeedRatio(const struct FNPCStatInfoPtr& Ptr);
	static bool IsValid(const struct FNPCStatInfoPtr& Ptr);
	static void IsValidBranch(const struct FNPCStatInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCStatInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCStatInfoPtrFuncLibrary")
	}
	static class UNPCStatInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCStatInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNPCStatInfoPtrFuncLibrary;

// Class ProjectPContentInfo.NPCPartsInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UNPCPartsInfoPtrFuncLibrary final : public UObject
{
public:
	static bool GetAttackerRepulseEnable(const struct FNPCPartsInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FNPCPartsInfoPtr& Ptr);
	static bool GetDestroyedOnSpawn(const struct FNPCPartsInfoPtr& Ptr);
	static bool GetEnableOnSpawn(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetGroggyReduce(const struct FNPCPartsInfoPtr& Ptr);
	static ELNpcPartsHitDirectionType GetHitDirectionType(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetHitRangeAngleEnd(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetHitRangeAngleStart(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetHitRepulseLevelPierce(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetHitRepulseLevelSlash(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetHitRepulseLevelStrike(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetPartsAcidReduce(const struct FNPCPartsInfoPtr& Ptr);
	static const class FName GetPartsBpCodeName(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetPartsBreakActionParalyze(const struct FNPCPartsInfoPtr& Ptr);
	static bool GetPartsDamageToMonsterUse(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetPartsDestructionIndex(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetPartsDropItemLimit(const struct FNPCPartsInfoPtr& Ptr);
	static const class FName GetPartsDropItemOnDestroy(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetPartsDropItemProbility(const struct FNPCPartsInfoPtr& Ptr);
	static bool GetPartsDropItemRedropUse(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetPartsElectricReduce(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetPartsFireReduce(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetPartsHpRatio(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetPartsPhysicalPierceReduce(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetPartsPhysicalSlashReduce(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetPartsPhysicalStrikeReduce(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetPartsRigidity(const struct FNPCPartsInfoPtr& Ptr);
	static const class FName GetPartsSkillCodeNameOnDestroy(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetRegainReduce(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetSharpnessMonsterDamageRatioPierce(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetSharpnessMonsterDamageRatioSlash(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetSharpnessMonsterDamageRatioStrike(const struct FNPCPartsInfoPtr& Ptr);
	static int32 GetToughReduce(const struct FNPCPartsInfoPtr& Ptr);
	static ELElementDamageType GetWeakElement(const struct FNPCPartsInfoPtr& Ptr);
	static const class FName GetWeakElementSkillCodeName(const struct FNPCPartsInfoPtr& Ptr);
	static bool IsValid(const struct FNPCPartsInfoPtr& Ptr);
	static void IsValidBranch(const struct FNPCPartsInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCPartsInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCPartsInfoPtrFuncLibrary")
	}
	static class UNPCPartsInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCPartsInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UNPCPartsInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SpawnControllerInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USpawnControllerInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FSpawnControllerInfo& Info);
	static ELLightScenarioType GetSpawnCondAMPM(const struct FSpawnControllerInfo& Info);
	static const class FName GetSpawnCondCompleteQuest(const struct FSpawnControllerInfo& Info);
	static ELQuestState GetSpawnCondCompleteQuestResult(const struct FSpawnControllerInfo& Info);
	static const class FName GetSpawnCondCustom(const struct FSpawnControllerInfo& Info);
	static ELWeatherType GetSpawnCondDryWet(const struct FSpawnControllerInfo& Info);
	static const class FName GetSpawnCondHaveitem(const struct FSpawnControllerInfo& Info);
	static const class FName GetSpawnCondHaveQuest(const struct FSpawnControllerInfo& Info);
	static int32 GetSpawnCondHaveQuestStep(const struct FSpawnControllerInfo& Info);
	static int32 GetSpawnCondHumanPoint(const struct FSpawnControllerInfo& Info);
	static ELTimeZoneType GetSpawnCondTimezone(const struct FSpawnControllerInfo& Info);
	static const class FName GetSpawnCondWeather(const struct FSpawnControllerInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpawnControllerInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpawnControllerInfoFuncLibrary")
	}
	static class USpawnControllerInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpawnControllerInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USpawnControllerInfoFuncLibrary;

// Class ProjectPContentInfo.SpotMatchInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USpotMatchInfoFuncLibrary final : public UObject
{
public:
	static ELConditionCheckType GetNPCSpawnControllerCheckType(const struct FSpotMatchInfo& Info);
	static const class FName GetNPCSpawnControllerCodeName(const struct FSpotMatchInfo& Info);
	static class FString GetNpcSpotId(const struct FSpotMatchInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpotMatchInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpotMatchInfoFuncLibrary")
	}
	static class USpotMatchInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpotMatchInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USpotMatchInfoFuncLibrary;

// Class ProjectPContentInfo.NPCSpawnControllerInfoAsset
// 0x0108 (0x0180 - 0x0078)
class alignas(0x10) UNPCSpawnControllerInfoAsset final : public UContentInfoAsset
{
public:
	struct FNPCSpawnControllerInfoDB              ContentInfoDB;                                     // 0x0078(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FSpawnControllerInfoPtr FindSpawnControllerInfoByNameBP(class FName CodeName);
	static struct FSpotMatchInfoPtr FindSpotMatchInfoByNameBP(const class FString& CodeName);
	static const TArray<struct FSpawnControllerInfo> GetSpawnControllerInfoArrayBP();
	static const TArray<struct FSpotMatchInfo> GetSpotMatchInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NPCSpawnControllerInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NPCSpawnControllerInfoAsset")
	}
	static class UNPCSpawnControllerInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCSpawnControllerInfoAsset>();
	}
};
DUMPER7_ASSERTS_UNPCSpawnControllerInfoAsset;

// Class ProjectPContentInfo.PathWayInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPathWayInfoPtrFuncLibrary final : public UObject
{
public:
	static float GetArrivalRadius(const struct FPathWayInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FPathWayInfoPtr& Ptr);
	static int32 GetIndex(const struct FPathWayInfoPtr& Ptr);
	static ELPathWayType GetType(const struct FPathWayInfoPtr& Ptr);
	static float GetWaitTime(const struct FPathWayInfoPtr& Ptr);
	static bool IsValid(const struct FPathWayInfoPtr& Ptr);
	static void IsValidBranch(const struct FPathWayInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PathWayInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PathWayInfoPtrFuncLibrary")
	}
	static class UPathWayInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPathWayInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPathWayInfoPtrFuncLibrary;

// Class ProjectPContentInfo.DefaultStatInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDefaultStatInfoFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalStatePenaltyBase(const struct FDefaultStatInfo& Info);
	static int32 GetAcidAttack(const struct FDefaultStatInfo& Info);
	static int32 GetAcidDebuffResist(const struct FDefaultStatInfo& Info);
	static int32 GetAcidDefence(const struct FDefaultStatInfo& Info);
	static int32 GetAcidReduce(const struct FDefaultStatInfo& Info);
	static int32 GetAdvance(const struct FDefaultStatInfo& Info);
	static int32 GetAttackGainFrenzyPointIncreaseRatio(const struct FDefaultStatInfo& Info);
	static int32 GetAttackratioSlavearm(const struct FDefaultStatInfo& Info);
	static int32 GetAttackSpeedRatio(const struct FDefaultStatInfo& Info);
	static int32 GetAttackStaminaReductionRatio(const struct FDefaultStatInfo& Info);
	static int32 GetBreakDebuffResist(const struct FDefaultStatInfo& Info);
	static int32 GetBuildupAcidReduction(const struct FDefaultStatInfo& Info);
	static int32 GetBuildupBreakReduction(const struct FDefaultStatInfo& Info);
	static int32 GetBuildupContaminationReduction(const struct FDefaultStatInfo& Info);
	static int32 GetBuildupCurseReduction(const struct FDefaultStatInfo& Info);
	static int32 GetBuildupElectricReduction(const struct FDefaultStatInfo& Info);
	static int32 GetBuildupFireReduction(const struct FDefaultStatInfo& Info);
	static int32 GetBuildupImpactReduction(const struct FDefaultStatInfo& Info);
	static int32 GetBuildUpRecoverIncBase(const struct FDefaultStatInfo& Info);
	static int32 GetCapacity(const struct FDefaultStatInfo& Info);
	static const class FName GetCodeName(const struct FDefaultStatInfo& Info);
	static int32 GetContaminationDebuffResist(const struct FDefaultStatInfo& Info);
	static int32 GetCriticalDamageRatio(const struct FDefaultStatInfo& Info);
	static int32 GetCurseDebuffResist(const struct FDefaultStatInfo& Info);
	static int32 GetDashParryCooltime(const struct FDefaultStatInfo& Info);
	static int32 GetDashStaminaReductionRatio(const struct FDefaultStatInfo& Info);
	static int32 GetDestructionPower(const struct FDefaultStatInfo& Info);
	static int32 GetDownGetupSpeedRatio(const struct FDefaultStatInfo& Info);
	static int32 GetDropErgoRegainMonkillRatio(const struct FDefaultStatInfo& Info);
	static int32 GetElectricAttack(const struct FDefaultStatInfo& Info);
	static int32 GetElectricDebuffResist(const struct FDefaultStatInfo& Info);
	static int32 GetElectricDefence(const struct FDefaultStatInfo& Info);
	static int32 GetElectricReduce(const struct FDefaultStatInfo& Info);
	static int32 GetFatalDamageRatio(const struct FDefaultStatInfo& Info);
	static int32 GetFatalPhysicalAttackpower(const struct FDefaultStatInfo& Info);
	static int32 GetFireAttack(const struct FDefaultStatInfo& Info);
	static int32 GetFireDebuffResist(const struct FDefaultStatInfo& Info);
	static int32 GetFireDefence(const struct FDefaultStatInfo& Info);
	static int32 GetFireReduce(const struct FDefaultStatInfo& Info);
	static int32 GetFrenzyUnitCount(const struct FDefaultStatInfo& Info);
	static int32 GetGuardAciddamageReductionRatio(const struct FDefaultStatInfo& Info);
	static int32 GetGuardElectricdamageReductionRatio(const struct FDefaultStatInfo& Info);
	static int32 GetGuardFiredamageReductionRatio(const struct FDefaultStatInfo& Info);
	static int32 GetGuardParryCooltime(const struct FDefaultStatInfo& Info);
	static int32 GetGuardPhysicaldamageReductionRatio(const struct FDefaultStatInfo& Info);
	static int32 GetGuardRegainAttackHealIncreaseRatio(const struct FDefaultStatInfo& Info);
	static int32 GetGuardRegainPerfectGuardHealRatio(const struct FDefaultStatInfo& Info);
	static int32 GetGuardRegainPointMax(const struct FDefaultStatInfo& Info);
	static int32 GetGuardRegainRecoveryRatio(const struct FDefaultStatInfo& Info);
	static int32 GetGuardRegainRecoveryReduceRatio(const struct FDefaultStatInfo& Info);
	static int32 GetGuardStaminaReductionRatio(const struct FDefaultStatInfo& Info);
	static int32 GetHealthPoint(const struct FDefaultStatInfo& Info);
	static int32 GetImpactDebuffResist(const struct FDefaultStatInfo& Info);
	static int32 GetLevel(const struct FDefaultStatInfo& Info);
	static int32 GetMaxFrenzyGaugePerUnit(const struct FDefaultStatInfo& Info);
	static int32 GetModificationDropErgoRemainDecrease(const struct FDefaultStatInfo& Info);
	static int32 GetMotionSpeedRatio(const struct FDefaultStatInfo& Info);
	static int32 GetMotivity(const struct FDefaultStatInfo& Info);
	static int32 GetParalyzationAddDamageRatio(const struct FDefaultStatInfo& Info);
	static int32 GetPerfectguardGroggyenableAddtimeRatio(const struct FDefaultStatInfo& Info);
	static int32 GetPhysicalAttack(const struct FDefaultStatInfo& Info);
	static int32 GetPhysicalDefence(const struct FDefaultStatInfo& Info);
	static int32 GetPhysicalPierceDefence(const struct FDefaultStatInfo& Info);
	static int32 GetPhysicalPierceReduce(const struct FDefaultStatInfo& Info);
	static int32 GetPhysicalReduce(const struct FDefaultStatInfo& Info);
	static int32 GetPhysicalSlashDefence(const struct FDefaultStatInfo& Info);
	static int32 GetPhysicalSlashReduce(const struct FDefaultStatInfo& Info);
	static int32 GetPhysicalStrikeDefence(const struct FDefaultStatInfo& Info);
	static int32 GetPhysicalStrikeReduce(const struct FDefaultStatInfo& Info);
	static int32 GetPierceAttackRatio(const struct FDefaultStatInfo& Info);
	static int32 GetRigidity(const struct FDefaultStatInfo& Info);
	static int32 GetSharpnessBonus(const struct FDefaultStatInfo& Info);
	static int32 GetSlashAttackRatio(const struct FDefaultStatInfo& Info);
	static int32 GetSlaveMagazinePoint(const struct FDefaultStatInfo& Info);
	static int32 GetSprintConsumeStaminaPerSecond(const struct FDefaultStatInfo& Info);
	static int32 GetSprintSpeedRatio(const struct FDefaultStatInfo& Info);
	static int32 GetStaminaExhaustTime(const struct FDefaultStatInfo& Info);
	static int32 GetStaminaPoint(const struct FDefaultStatInfo& Info);
	static int32 GetStaminaRestorePerSecond(const struct FDefaultStatInfo& Info);
	static int32 GetStrikeAttackRatio(const struct FDefaultStatInfo& Info);
	static int32 GetTechnique(const struct FDefaultStatInfo& Info);
	static int32 GetTenacity(const struct FDefaultStatInfo& Info);
	static int32 GetToughPoint(const struct FDefaultStatInfo& Info);
	static int32 GetToughRecoveryDelayReduction(const struct FDefaultStatInfo& Info);
	static int32 GetToughRecoveryDelayTime(const struct FDefaultStatInfo& Info);
	static int32 GetToughRestorePerSecond(const struct FDefaultStatInfo& Info);
	static int32 GetVigor(const struct FDefaultStatInfo& Info);
	static int32 GetVitality(const struct FDefaultStatInfo& Info);
	static int32 GetWalkRunSpeedRatio(const struct FDefaultStatInfo& Info);
	static int32 GetWeightLimit(const struct FDefaultStatInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DefaultStatInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DefaultStatInfoFuncLibrary")
	}
	static class UDefaultStatInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDefaultStatInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDefaultStatInfoFuncLibrary;

// Class ProjectPContentInfo.FirstStatToSecondStatInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UFirstStatToSecondStatInfoFuncLibrary final : public UObject
{
public:
	static int32 GetConversionValueA(const struct FFirstStatToSecondStatInfo& Info);
	static int32 GetConversionValueB(const struct FFirstStatToSecondStatInfo& Info);
	static int32 GetConversionValueC(const struct FFirstStatToSecondStatInfo& Info);
	static int32 GetConversionValueD(const struct FFirstStatToSecondStatInfo& Info);
	static int32 GetConversionValueE(const struct FFirstStatToSecondStatInfo& Info);
	static int32 GetConversionValueF(const struct FFirstStatToSecondStatInfo& Info);
	static int32 GetConversionValueG(const struct FFirstStatToSecondStatInfo& Info);
	static int32 GetConversionValueH(const struct FFirstStatToSecondStatInfo& Info);
	static int32 GetConversionValueI(const struct FFirstStatToSecondStatInfo& Info);
	static int32 GetConversionValueJ(const struct FFirstStatToSecondStatInfo& Info);
	static int32 GetConversionValueK(const struct FFirstStatToSecondStatInfo& Info);
	static ELFirstStat GetFirstStatA(const struct FFirstStatToSecondStatInfo& Info);
	static ELSecondStat GetSecondStatA(const struct FFirstStatToSecondStatInfo& Info);
	static ELSecondStat GetSecondStatB(const struct FFirstStatToSecondStatInfo& Info);
	static ELSecondStat GetSecondStatC(const struct FFirstStatToSecondStatInfo& Info);
	static ELSecondStat GetSecondStatD(const struct FFirstStatToSecondStatInfo& Info);
	static ELSecondStat GetSecondStatE(const struct FFirstStatToSecondStatInfo& Info);
	static ELSecondStat GetSecondStatF(const struct FFirstStatToSecondStatInfo& Info);
	static ELSecondStat GetSecondStatG(const struct FFirstStatToSecondStatInfo& Info);
	static ELSecondStat GetSecondStatH(const struct FFirstStatToSecondStatInfo& Info);
	static ELSecondStat GetSecondStatI(const struct FFirstStatToSecondStatInfo& Info);
	static ELSecondStat GetSecondStatJ(const struct FFirstStatToSecondStatInfo& Info);
	static ELSecondStat GetSecondStatK(const struct FFirstStatToSecondStatInfo& Info);
	static int32 GetStatLevel(const struct FFirstStatToSecondStatInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("FirstStatToSecondStatInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"FirstStatToSecondStatInfoFuncLibrary")
	}
	static class UFirstStatToSecondStatInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFirstStatToSecondStatInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UFirstStatToSecondStatInfoFuncLibrary;

// Class ProjectPContentInfo.LevelExpInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULevelExpInfoFuncLibrary final : public UObject
{
public:
	static int32 GetCharacterLevel(const struct FLevelExpInfo& Info);
	static int32 GetCharacterLevelExpAmount(const struct FLevelExpInfo& Info);
	static const class FName GetCodeName(const struct FLevelExpInfo& Info);
	static int32 GetDropsoulNaturalConsumeAmount(const struct FLevelExpInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelExpInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelExpInfoFuncLibrary")
	}
	static class ULevelExpInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelExpInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULevelExpInfoFuncLibrary;

// Class ProjectPContentInfo.LevelHumanityInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class ULevelHumanityInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetAcquisitionTextCodeName(const struct FLevelHumanityInfo& Info);
	static const class FName GetCodeName(const struct FLevelHumanityInfo& Info);
	static int32 GetHumanityLevel(const struct FLevelHumanityInfo& Info);
	static int32 GetNextLevelHumanity(const struct FLevelHumanityInfo& Info);
	static bool GetShowText(const struct FLevelHumanityInfo& Info);
	static const class FName GetSoundNotifyTrack(const struct FLevelHumanityInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("LevelHumanityInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"LevelHumanityInfoFuncLibrary")
	}
	static class ULevelHumanityInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelHumanityInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_ULevelHumanityInfoFuncLibrary;

// Class ProjectPContentInfo.PCInfoAsset
// 0x0178 (0x01F0 - 0x0078)
class alignas(0x10) UPCInfoAsset final : public UContentInfoAsset
{
public:
	struct FPCInfoDB                              ContentInfoDB;                                     // 0x0078(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FDefaultStatInfoPtr FindDefaultStatInfoByNameBP(class FName CodeName);
	static struct FLevelExpInfoPtr FindLevelExpInfoByNameBP(class FName CodeName);
	static struct FLevelHumanityInfoPtr FindLevelHumanityInfoByNameBP(class FName CodeName);
	static const TArray<struct FDefaultStatInfo> GetDefaultStatInfoArrayBP();
	static const TArray<struct FFirstStatToSecondStatInfo> GetFirstStatTOSecondStatInfoArrayBP();
	static const TArray<struct FLevelExpInfo> GetLevelExpInfoArrayBP();
	static const TArray<struct FLevelHumanityInfo> GetLevelHumanityInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PCInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PCInfoAsset")
	}
	static class UPCInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCInfoAsset>();
	}
};
DUMPER7_ASSERTS_UPCInfoAsset;

// Class ProjectPContentInfo.ProjectileInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UProjectileInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalStateBuildUpAttack(const struct FProjectileInfoPtr& Ptr);
	static const class FName GetAbnormalStateCodeName(const struct FProjectileInfoPtr& Ptr);
	static int32 GetAbnormalStatePenaltyBase(const struct FProjectileInfoPtr& Ptr);
	static int32 GetAcidAttack(const struct FProjectileInfoPtr& Ptr);
	static int32 GetAdditionalGroggyTime(const struct FProjectileInfoPtr& Ptr);
	static int32 GetBuildUpRecoverIncBase(const struct FProjectileInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FProjectileInfoPtr& Ptr);
	static int32 GetCollisionStartDelay(const struct FProjectileInfoPtr& Ptr);
	static int32 GetConsumeSlaveMagazinePoint(const struct FProjectileInfoPtr& Ptr);
	static int32 GetConsumeStaminaPoint(const struct FProjectileInfoPtr& Ptr);
	static const class FName GetCorrectionCodeNameForAdvance(const struct FProjectileInfoPtr& Ptr);
	static const class FName GetCorrectionCodeNameForMotivity(const struct FProjectileInfoPtr& Ptr);
	static const class FName GetCorrectionCodeNameForTechnique(const struct FProjectileInfoPtr& Ptr);
	static int32 GetDestructionPower(const struct FProjectileInfoPtr& Ptr);
	static int32 GetElectricAttack(const struct FProjectileInfoPtr& Ptr);
	static float GetFinSpeed(const struct FProjectileInfoPtr& Ptr);
	static float GetFinSpeedTime(const struct FProjectileInfoPtr& Ptr);
	static int32 GetFireAttack(const struct FProjectileInfoPtr& Ptr);
	static float GetForceFireForwardDistance(const struct FProjectileInfoPtr& Ptr);
	static ELProjectileGenerateType GetGenerateLocType(const struct FProjectileInfoPtr& Ptr);
	static ELProjectileHitFactionType GetHitFaction(const struct FProjectileInfoPtr& Ptr);
	static float GetHomingAccelerationMagnitude(const struct FProjectileInfoPtr& Ptr);
	static bool GetIgnoreCameraPitchWhenMovingForward(const struct FProjectileInfoPtr& Ptr);
	static float GetInitSpeed(const struct FProjectileInfoPtr& Ptr);
	static float GetMidSpeed(const struct FProjectileInfoPtr& Ptr);
	static float GetMidSpeedTime(const struct FProjectileInfoPtr& Ptr);
	static int32 GetMoveStartTime(const struct FProjectileInfoPtr& Ptr);
	static ELProjectileMoveTargetType GetMoveType(const struct FProjectileInfoPtr& Ptr);
	static float GetMoveXyDegree(const struct FProjectileInfoPtr& Ptr);
	static float GetMoveZDegree(const struct FProjectileInfoPtr& Ptr);
	static int32 GetPhysicalAttack(const struct FProjectileInfoPtr& Ptr);
	static ELPhysicalDamageType GetPhysicalAttackSubtype(const struct FProjectileInfoPtr& Ptr);
	static float GetPitchLimit(const struct FProjectileInfoPtr& Ptr);
	static const TSoftClassPtr<class UClass> GetProjectileClass(const struct FProjectileInfoPtr& Ptr);
	static const TSoftClassPtr<class UClass> GetProjectileDesignClass(const struct FProjectileInfoPtr& Ptr);
	static ELProjectileType GetProjectileType(const struct FProjectileInfoPtr& Ptr);
	static int32 GetPulseRechargeAttack(const struct FProjectileInfoPtr& Ptr);
	static float GetSpawnOffsetX(const struct FProjectileInfoPtr& Ptr);
	static float GetSpawnOffsetY(const struct FProjectileInfoPtr& Ptr);
	static float GetSpawnOffsetZ(const struct FProjectileInfoPtr& Ptr);
	static bool GetSpawnOnGround(const struct FProjectileInfoPtr& Ptr);
	static const class FName GetSpawnSocketName(const struct FProjectileInfoPtr& Ptr);
	static float GetSpeed(const struct FProjectileInfoPtr& Ptr);
	static float GetTargetOffsetX(const struct FProjectileInfoPtr& Ptr);
	static float GetTargetOffsetY(const struct FProjectileInfoPtr& Ptr);
	static float GetTargetOffsetZ(const struct FProjectileInfoPtr& Ptr);
	static const class FName GetTargetSocketName(const struct FProjectileInfoPtr& Ptr);
	static int32 GetToughRecoveryDelayTime(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceEndAngle(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceEndDistance(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceEndFinSpeed(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceEndFinSpeedTime(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceEndHalfheight(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceEndInitSpeed(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceEndInitSpeedTime(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceEndMidSpeed(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceEndMidSpeedTime(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceIngFinSpeed(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceIngFinSpeedTime(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceIngInitSpeed(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceIngInitSpeedTime(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceIngMidSpeed(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceIngMidSpeedTime(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceStartAngle(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceStartDistance(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceStartHalfheight(const struct FProjectileInfoPtr& Ptr);
	static float GetTraceStartTime(const struct FProjectileInfoPtr& Ptr);
	static const class FName GetTraceTargetSocket(const struct FProjectileInfoPtr& Ptr);
	static bool GetUseSocketDirection(const struct FProjectileInfoPtr& Ptr);
	static float GetYawLimit(const struct FProjectileInfoPtr& Ptr);
	static bool IsValid(const struct FProjectileInfoPtr& Ptr);
	static void IsValidBranch(const struct FProjectileInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ProjectileInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ProjectileInfoPtrFuncLibrary")
	}
	static class UProjectileInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProjectileInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UProjectileInfoPtrFuncLibrary;

// Class ProjectPContentInfo.PropDestructionInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropDestructionInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FPropDestructionInfo& Info);
	static bool GetDestroyOnlyOnce(const struct FPropDestructionInfo& Info);
	static ELDestructionConditionActionType GetDestructionConditionActionType(const struct FPropDestructionInfo& Info);
	static class FString GetDestructionConditionActorCodename(const struct FPropDestructionInfo& Info);
	static ELDeathByOwnerFaction GetDestructionConditionActorType(const struct FPropDestructionInfo& Info);
	static const TArray<class FName> GetDestructionConditionSkillCodename(const struct FPropDestructionInfo& Info);
	static const TArray<class FName> GetDestructionConditionSkillhitCodename(const struct FPropDestructionInfo& Info);
	static const class FName GetDrop(const struct FPropDestructionInfo& Info);
	static const class FName GetDropProp(const struct FPropDestructionInfo& Info);
	static int32 GetHp(const struct FPropDestructionInfo& Info);
	static ELHpDiscountMethod GetHpDiscountMethod(const struct FPropDestructionInfo& Info);
	static const TSoftClassPtr<class UClass> GetModelBP(const struct FPropDestructionInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropDestructionInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropDestructionInfoFuncLibrary")
	}
	static class UPropDestructionInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropDestructionInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropDestructionInfoFuncLibrary;

// Class ProjectPContentInfo.PropDestructionInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UPropDestructionInfoAsset final : public UContentInfoAsset
{
public:
	struct FPropDestructionInfoDB                 ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FPropDestructionInfo> GetPropDestructionInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropDestructionInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropDestructionInfoAsset")
	}
	static class UPropDestructionInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropDestructionInfoAsset>();
	}
};
DUMPER7_ASSERTS_UPropDestructionInfoAsset;

// Class ProjectPContentInfo.PropDoorInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropDoorInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FPropDoorInfoPtr& Ptr);
	static const class FName GetContentCommandCodename(const struct FPropDoorInfoPtr& Ptr);
	static bool GetDelConditionItem(const struct FPropDoorInfoPtr& Ptr);
	static ELMessageAlertType GetFailMessageType(const struct FPropDoorInfoPtr& Ptr);
	static bool GetFixCameraOnInterAction(const struct FPropDoorInfoPtr& Ptr);
	static const class FName GetInteractionApproachMessageCodeName(const struct FPropDoorInfoPtr& Ptr);
	static const class FName GetInteractionCondition(const struct FPropDoorInfoPtr& Ptr);
	static const class FName GetInteractionConditionFailApproachMessage(const struct FPropDoorInfoPtr& Ptr);
	static const class FName GetInteractionConditionFailMessage(const struct FPropDoorInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetInteractionConditionFailPropMotionResource(const struct FPropDoorInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetInteractionConditionFailUserMotionResource(const struct FPropDoorInfoPtr& Ptr);
	static int32 GetInteractionConditionHumanPoint(const struct FPropDoorInfoPtr& Ptr);
	static const class FName GetInteractionConditionItem(const struct FPropDoorInfoPtr& Ptr);
	static int32 GetInteractionConfrontAngle(const struct FPropDoorInfoPtr& Ptr);
	static int32 GetInteractionConfrontAngleProp(const struct FPropDoorInfoPtr& Ptr);
	static float GetInteractionMessageTime(const struct FPropDoorInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetInteractionPropMotionResource(const struct FPropDoorInfoPtr& Ptr);
	static int32 GetInteractionRadius(const struct FPropDoorInfoPtr& Ptr);
	static const class FName GetInteractionSuccessMassage(const struct FPropDoorInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetInteractionUserMotionResource(const struct FPropDoorInfoPtr& Ptr);
	static ELPropInteractType GetInteractType(const struct FPropDoorInfoPtr& Ptr);
	static ELLinkedPropExecute GetLinkedPropExecute(const struct FPropDoorInfoPtr& Ptr);
	static bool GetLinkedPropStateChange(const struct FPropDoorInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetLoopMotionResource(const struct FPropDoorInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetModelResource(const struct FPropDoorInfoPtr& Ptr);
	static int32 GetState(const struct FPropDoorInfoPtr& Ptr);
	static ELMessageAlertType GetSuccesMessageType(const struct FPropDoorInfoPtr& Ptr);
	static const class FName GetUseLevelSequence(const struct FPropDoorInfoPtr& Ptr);
	static const class FName GetWrongApproachMessageCodeName(const struct FPropDoorInfoPtr& Ptr);
	static const class FName GetWrongApproachNextMessageCodeName(const struct FPropDoorInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetWrongApproachPropMotionResource(const struct FPropDoorInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetWrongApproachUserMotionResource(const struct FPropDoorInfoPtr& Ptr);
	static bool IsValid(const struct FPropDoorInfoPtr& Ptr);
	static void IsValidBranch(const struct FPropDoorInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropDoorInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropDoorInfoPtrFuncLibrary")
	}
	static class UPropDoorInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropDoorInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropDoorInfoPtrFuncLibrary;

// Class ProjectPContentInfo.PropInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropInfoFuncLibrary final : public UObject
{
public:
	static bool GetCanChangeDestructionMode(const struct FPropInfo& Info);
	static int32 GetCanPlayDeathMotion(const struct FPropInfo& Info);
	static const class FName GetCodeName(const struct FPropInfo& Info);
	static ELDeathByOwnerFaction GetDeathByOwnerFaction(const struct FPropInfo& Info);
	static const TSoftObjectPtr<class UObject> GetDestructionSound(const struct FPropInfo& Info);
	static class FString GetDetailOfDeathByOwnerFaction(const struct FPropInfo& Info);
	static bool GetFixCameraOnInterAction(const struct FPropInfo& Info);
	static int32 GetHp(const struct FPropInfo& Info);
	static int32 GetHpDiscountMethod(const struct FPropInfo& Info);
	static const class FName GetInteractionApproachMessageCodeName(const struct FPropInfo& Info);
	static int32 GetInteractionConfrontAngle(const struct FPropInfo& Info);
	static int32 GetInteractionConfrontAngleProp(const struct FPropInfo& Info);
	static int32 GetInteractionOffsetX(const struct FPropInfo& Info);
	static int32 GetInteractionOffsetY(const struct FPropInfo& Info);
	static int32 GetInteractionOffsetZ(const struct FPropInfo& Info);
	static const TSoftObjectPtr<class UObject> GetInteractionPropMotionResource(const struct FPropInfo& Info);
	static int32 GetInteractionRadius(const struct FPropInfo& Info);
	static const TSoftObjectPtr<class UObject> GetInteractionUserMotionResource(const struct FPropInfo& Info);
	static bool GetIsPossibleAttackReaction(const struct FPropInfo& Info);
	static bool GetIsPossibleAttackResistance(const struct FPropInfo& Info);
	static bool GetIsPossibleBlocking(const struct FPropInfo& Info);
	static bool GetIsPossibleBlockingRemains(const struct FPropInfo& Info);
	static bool GetIsPossibleDeath(const struct FPropInfo& Info);
	static bool GetIsPossiblePhysicalReaction(const struct FPropInfo& Info);
	static bool GetIsPossiblePhysicalReactionRemains(const struct FPropInfo& Info);
	static int32 GetMaintainTimeAfterDeath(const struct FPropInfo& Info);
	static int32 GetMass(const struct FPropInfo& Info);
	static EFxBranchType GetMaterial(const struct FPropInfo& Info);
	static const TSoftObjectPtr<class UObject> GetModelResource(const struct FPropInfo& Info);
	static const TSoftObjectPtr<class UObject> GetMotionResource(const struct FPropInfo& Info);
	static const TSoftClassPtr<class UClass> GetPropClass(const struct FPropInfo& Info);
	static bool GetRespawnEnable(const struct FPropInfo& Info);
	static const TSoftObjectPtr<class UObject> GetSoundResource(const struct FPropInfo& Info);
	static int32 GetState(const struct FPropInfo& Info);
	static bool GetStateFreezing(const struct FPropInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropInfoFuncLibrary")
	}
	static class UPropInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropInfoFuncLibrary;

// Class ProjectPContentInfo.PropInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UPropInfoAsset final : public UContentInfoAsset
{
public:
	struct FPropInfoDB                            ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FPropInfo> GetPropInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropInfoAsset")
	}
	static class UPropInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropInfoAsset>();
	}
};
DUMPER7_ASSERTS_UPropInfoAsset;

// Class ProjectPContentInfo.PropLadderInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropLadderInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FPropLadderInfoPtr& Ptr);
	static const class FName GetContentCommandCodename(const struct FPropLadderInfoPtr& Ptr);
	static const class FName GetDownstairInteractionApproachMessageCodeName(const struct FPropLadderInfoPtr& Ptr);
	static int32 GetDownstairInteractionConfrontAngle(const struct FPropLadderInfoPtr& Ptr);
	static int32 GetDownstairInteractionConfrontAngleProp(const struct FPropLadderInfoPtr& Ptr);
	static int32 GetDownstairInteractionRadius(const struct FPropLadderInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetInteractionUserMotionResource(const struct FPropLadderInfoPtr& Ptr);
	static ELPhysicalSurfaceType GetLadderMaterial(const struct FPropLadderInfoPtr& Ptr);
	static ELPropLadderStateType GetLadderState(const struct FPropLadderInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetLoopMotionResource(const struct FPropLadderInfoPtr& Ptr);
	static const TSoftClassPtr<class UClass> GetModelBP(const struct FPropLadderInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetModelResource(const struct FPropLadderInfoPtr& Ptr);
	static const class FName GetUpstairInteractionApproachMessageCodeName(const struct FPropLadderInfoPtr& Ptr);
	static const class FName GetUpstairInteractionCondition(const struct FPropLadderInfoPtr& Ptr);
	static const class FName GetUpstairInteractionConditionFailMessage(const struct FPropLadderInfoPtr& Ptr);
	static int32 GetUpstairInteractionConfrontAngle(const struct FPropLadderInfoPtr& Ptr);
	static int32 GetUpstairInteractionConfrontAngleProp(const struct FPropLadderInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetUpstairInteractionPropMotionResource(const struct FPropLadderInfoPtr& Ptr);
	static int32 GetUpstairInteractionRadius(const struct FPropLadderInfoPtr& Ptr);
	static bool IsValid(const struct FPropLadderInfoPtr& Ptr);
	static void IsValidBranch(const struct FPropLadderInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropLadderInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropLadderInfoPtrFuncLibrary")
	}
	static class UPropLadderInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropLadderInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropLadderInfoPtrFuncLibrary;

// Class ProjectPContentInfo.PropLiftInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropLiftInfoFuncLibrary final : public UObject
{
public:
	static const TSoftObjectPtr<class UObject> GetActivateInteractionUserMotionResource(const struct FPropLiftInfo& Info);
	static const TSoftObjectPtr<class UObject> GetCallFailInteractionUserMotionResource(const struct FPropLiftInfo& Info);
	static const class FName GetCodeName(const struct FPropLiftInfo& Info);
	static const class FName GetConditionCheckFailMessage(const struct FPropLiftInfo& Info);
	static const class FName GetContentCondition(const struct FPropLiftInfo& Info);
	static const class FName GetElevatorInteractionMessageCodeName(const struct FPropLiftInfo& Info);
	static int32 GetInitState(const struct FPropLiftInfo& Info);
	static ELPropLiftStateType GetLiftState(const struct FPropLiftInfo& Info);
	static const TSoftClassPtr<class UClass> GetModelBP(const struct FPropLiftInfo& Info);
	static const TSoftObjectPtr<class UObject> GetMoveInteractionUserMotionResource(const struct FPropLiftInfo& Info);
	static const TSoftObjectPtr<class UObject> GetMovingCurve(const struct FPropLiftInfo& Info);
	static int32 GetMovingTime(const struct FPropLiftInfo& Info);
	static const TSoftClassPtr<class UClass> GetPointADoorBP(const struct FPropLiftInfo& Info);
	static const TSoftClassPtr<class UClass> GetPointATriggerBP(const struct FPropLiftInfo& Info);
	static const class FName GetPointATriggerConditionCheckFailMessage(const struct FPropLiftInfo& Info);
	static const class FName GetPointATriggerContentCondition(const struct FPropLiftInfo& Info);
	static const TSoftClassPtr<class UClass> GetPointBDoorBP(const struct FPropLiftInfo& Info);
	static const TSoftClassPtr<class UClass> GetPointBTriggerBP(const struct FPropLiftInfo& Info);
	static const class FName GetPointBTriggerConditionCheckFailMessage(const struct FPropLiftInfo& Info);
	static const class FName GetPointBTriggerContentCondition(const struct FPropLiftInfo& Info);
	static const class FName GetTriggerInteractionMessageCodeName(const struct FPropLiftInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropLiftInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropLiftInfoFuncLibrary")
	}
	static class UPropLiftInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropLiftInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropLiftInfoFuncLibrary;

// Class ProjectPContentInfo.PropLiftInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UPropLiftInfoAsset final : public UContentInfoAsset
{
public:
	struct FPropLiftInfoDB                        ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FPropLiftInfo> GetPropLiftInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropLiftInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropLiftInfoAsset")
	}
	static class UPropLiftInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropLiftInfoAsset>();
	}
};
DUMPER7_ASSERTS_UPropLiftInfoAsset;

// Class ProjectPContentInfo.PropSetProjectileInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropSetProjectileInfoPtrFuncLibrary final : public UObject
{
public:
	static bool GetActiveFire(const struct FPropSetProjectileInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FPropSetProjectileInfoPtr& Ptr);
	static const class FName GetDefaultMontageSection(const struct FPropSetProjectileInfoPtr& Ptr);
	static const class FName GetFireMontageSection(const struct FPropSetProjectileInfoPtr& Ptr);
	static int32 GetInitState(const struct FPropSetProjectileInfoPtr& Ptr);
	static const TSoftClassPtr<class UClass> GetModelBP(const struct FPropSetProjectileInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetModelResource(const struct FPropSetProjectileInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetMontageResource(const struct FPropSetProjectileInfoPtr& Ptr);
	static int32 GetSetStateNum(const struct FPropSetProjectileInfoPtr& Ptr);
	static int32 GetState(const struct FPropSetProjectileInfoPtr& Ptr);
	static ELPropVolumeStateCheckType GetVolumeCheckChangeState(const struct FPropSetProjectileInfoPtr& Ptr);
	static bool IsValid(const struct FPropSetProjectileInfoPtr& Ptr);
	static void IsValidBranch(const struct FPropSetProjectileInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropSetProjectileInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropSetProjectileInfoPtrFuncLibrary")
	}
	static class UPropSetProjectileInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropSetProjectileInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropSetProjectileInfoPtrFuncLibrary;

// Class ProjectPContentInfo.PropShapeObjectInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropShapeObjectInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FPropShapeObjectInfo& Info);
	static const class FName GetContentCommandCodename(const struct FPropShapeObjectInfo& Info);
	static bool GetDelConditionItem(const struct FPropShapeObjectInfo& Info);
	static const class FName GetDrop(const struct FPropShapeObjectInfo& Info);
	static bool GetDropItemspot(const struct FPropShapeObjectInfo& Info);
	static const class FName GetDropProp(const struct FPropShapeObjectInfo& Info);
	static ELMessageAlertType GetFailMessageType(const struct FPropShapeObjectInfo& Info);
	static bool GetFixCameraOnInterAction(const struct FPropShapeObjectInfo& Info);
	static int32 GetInitState(const struct FPropShapeObjectInfo& Info);
	static const class FName GetInteractionApproachMessageCodeName(const struct FPropShapeObjectInfo& Info);
	static const class FName GetInteractionCondition(const struct FPropShapeObjectInfo& Info);
	static const class FName GetInteractionConditionFailApproachMessage(const struct FPropShapeObjectInfo& Info);
	static const class FName GetInteractionConditionFailMessage(const struct FPropShapeObjectInfo& Info);
	static int32 GetInteractionConditionHumanPoint(const struct FPropShapeObjectInfo& Info);
	static const class FName GetInteractionConditionItem(const struct FPropShapeObjectInfo& Info);
	static int32 GetInteractionConfrontAngle(const struct FPropShapeObjectInfo& Info);
	static int32 GetInteractionConfrontAngleProp(const struct FPropShapeObjectInfo& Info);
	static float GetInteractionMessageTime(const struct FPropShapeObjectInfo& Info);
	static int32 GetInteractionOffsetX(const struct FPropShapeObjectInfo& Info);
	static int32 GetInteractionOffsetY(const struct FPropShapeObjectInfo& Info);
	static int32 GetInteractionOffsetZ(const struct FPropShapeObjectInfo& Info);
	static float GetInteractionPropMotionDelayTime(const struct FPropShapeObjectInfo& Info);
	static const TSoftObjectPtr<class UObject> GetInteractionPropMotionResource(const struct FPropShapeObjectInfo& Info);
	static int32 GetInteractionRadius(const struct FPropShapeObjectInfo& Info);
	static const class FName GetInteractionSuccessMassage(const struct FPropShapeObjectInfo& Info);
	static const TSoftObjectPtr<class UObject> GetInteractionUserMotionResource(const struct FPropShapeObjectInfo& Info);
	static ELPropInteractType GetInteractType(const struct FPropShapeObjectInfo& Info);
	static bool GetIsPossibleBlocking(const struct FPropShapeObjectInfo& Info);
	static ELLinkedPropExecute GetLinkedPropExecute(const struct FPropShapeObjectInfo& Info);
	static bool GetLinkedPropStateChange(const struct FPropShapeObjectInfo& Info);
	static const TSoftObjectPtr<class UObject> GetLoopMotionResource(const struct FPropShapeObjectInfo& Info);
	static const TSoftClassPtr<class UClass> GetModelBP(const struct FPropShapeObjectInfo& Info);
	static const TSoftObjectPtr<class UObject> GetModelResource(const struct FPropShapeObjectInfo& Info);
	static const TSoftObjectPtr<class UObject> GetReversePropMotionResource(const struct FPropShapeObjectInfo& Info);
	static bool GetReverseReact(const struct FPropShapeObjectInfo& Info);
	static const TSoftObjectPtr<class UObject> GetReverseUserMotionResource(const struct FPropShapeObjectInfo& Info);
	static const TSoftObjectPtr<class UObject> GetSoundResource(const struct FPropShapeObjectInfo& Info);
	static int32 GetState(const struct FPropShapeObjectInfo& Info);
	static ELMessageAlertType GetSuccesMessageType(const struct FPropShapeObjectInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropShapeObjectInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropShapeObjectInfoFuncLibrary")
	}
	static class UPropShapeObjectInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropShapeObjectInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropShapeObjectInfoFuncLibrary;

// Class ProjectPContentInfo.PropShapeObjectInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UPropShapeObjectInfoAsset final : public UContentInfoAsset
{
public:
	struct FPropShapeObjectInfoDB                 ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FPropShapeObjectInfo> GetPropShapeObjectInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropShapeObjectInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropShapeObjectInfoAsset")
	}
	static class UPropShapeObjectInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropShapeObjectInfoAsset>();
	}
};
DUMPER7_ASSERTS_UPropShapeObjectInfoAsset;

// Class ProjectPContentInfo.PropVolumeInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPropVolumeInfoPtrFuncLibrary final : public UObject
{
public:
	static ELAbnomalStateApplyType GetAbnomalStateApplyType(const struct FPropVolumeInfoPtr& Ptr);
	static int32 GetAbnomalStateBuildupDamage(const struct FPropVolumeInfoPtr& Ptr);
	static int32 GetAbnomalStateBuildupDamageTickTime(const struct FPropVolumeInfoPtr& Ptr);
	static const class FName GetAbnomalStateCodename(const struct FPropVolumeInfoPtr& Ptr);
	static const TArray<EFactionType> GetAbnomalStateTargetFilter(const struct FPropVolumeInfoPtr& Ptr);
	static int32 GetAbnormalStatePenaltyBase(const struct FPropVolumeInfoPtr& Ptr);
	static int32 GetBuildUpRecoverIncBase(const struct FPropVolumeInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FPropVolumeInfoPtr& Ptr);
	static ELInteractionEvokeType GetInteractionEvokeType(const struct FPropVolumeInfoPtr& Ptr);
	static const class FName GetLocationNameDisplay(const struct FPropVolumeInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetLoopVisualAssetResource(const struct FPropVolumeInfoPtr& Ptr);
	static int32 GetState(const struct FPropVolumeInfoPtr& Ptr);
	static bool IsValid(const struct FPropVolumeInfoPtr& Ptr);
	static void IsValidBranch(const struct FPropVolumeInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PropVolumeInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PropVolumeInfoPtrFuncLibrary")
	}
	static class UPropVolumeInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropVolumeInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPropVolumeInfoPtrFuncLibrary;

// Class ProjectPContentInfo.PulsePointMaxInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UPulsePointMaxInfoFuncLibrary final : public UObject
{
public:
	static int32 GetPulseRechargePointMax(const struct FPulsePointMaxInfo& Info);
	static int32 GetRechargeCount(const struct FPulsePointMaxInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PulsePointMaxInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PulsePointMaxInfoFuncLibrary")
	}
	static class UPulsePointMaxInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPulsePointMaxInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UPulsePointMaxInfoFuncLibrary;

// Class ProjectPContentInfo.PulsePointMaxInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UPulsePointMaxInfoAsset final : public UContentInfoAsset
{
public:
	struct FPulsePointMaxInfoDB                   ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FPulsePointMaxInfo> GetPulsePointMaxInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("PulsePointMaxInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"PulsePointMaxInfoAsset")
	}
	static class UPulsePointMaxInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPulsePointMaxInfoAsset>();
	}
};
DUMPER7_ASSERTS_UPulsePointMaxInfoAsset;

// Class ProjectPContentInfo.QuartzEffectInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UQuartzEffectInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FQuartzEffectInfoPtr& Ptr);
	static int32 GetCoreLevel(const struct FQuartzEffectInfoPtr& Ptr);
	static int32 GetEffectIndex(const struct FQuartzEffectInfoPtr& Ptr);
	static ELQuartzEffectType GetEffectType(const struct FQuartzEffectInfoPtr& Ptr);
	static int32 GetNumberOverlappingEffect(const struct FQuartzEffectInfoPtr& Ptr);
	static const class FName GetSpecialBuffCodeName(const struct FQuartzEffectInfoPtr& Ptr);
	static bool IsValid(const struct FQuartzEffectInfoPtr& Ptr);
	static void IsValidBranch(const struct FQuartzEffectInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("QuartzEffectInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"QuartzEffectInfoPtrFuncLibrary")
	}
	static class UQuartzEffectInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuartzEffectInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UQuartzEffectInfoPtrFuncLibrary;

// Class ProjectPContentInfo.QuartzPocketInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UQuartzPocketInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FQuartzPocketInfo& Info);
	static const class FName GetDescription(const struct FQuartzPocketInfo& Info);
	static const TSoftObjectPtr<class UObject> GetImage(const struct FQuartzPocketInfo& Info);
	static int32 GetLevel(const struct FQuartzPocketInfo& Info);
	static int32 GetNumberOverlappingSynergy(const struct FQuartzPocketInfo& Info);
	static int32 GetPocketIndex(const struct FQuartzPocketInfo& Info);
	static int32 GetSlotCount(const struct FQuartzPocketInfo& Info);
	static int32 GetSynergyActivateSlotCount(const struct FQuartzPocketInfo& Info);
	static const class FName GetSynergySpecialBuffCodeName(const struct FQuartzPocketInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("QuartzPocketInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"QuartzPocketInfoFuncLibrary")
	}
	static class UQuartzPocketInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuartzPocketInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UQuartzPocketInfoFuncLibrary;

// Class ProjectPContentInfo.QuartzPocketInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UQuartzPocketInfoAsset final : public UContentInfoAsset
{
public:
	struct FQuartzPocketInfoDB                    ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FQuartzPocketInfoPtr FindQuartzPocketInfoByNameBP(class FName CodeName);
	static const TArray<struct FQuartzPocketInfo> GetQuartzPocketInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("QuartzPocketInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"QuartzPocketInfoAsset")
	}
	static class UQuartzPocketInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuartzPocketInfoAsset>();
	}
};
DUMPER7_ASSERTS_UQuartzPocketInfoAsset;

// Class ProjectPContentInfo.QuestRewardItemInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UQuestRewardItemInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetItemCodeName(const struct FQuestRewardItemInfoPtr& Ptr);
	static int32 GetItemCount(const struct FQuestRewardItemInfoPtr& Ptr);
	static bool IsValid(const struct FQuestRewardItemInfoPtr& Ptr);
	static void IsValidBranch(const struct FQuestRewardItemInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("QuestRewardItemInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"QuestRewardItemInfoPtrFuncLibrary")
	}
	static class UQuestRewardItemInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestRewardItemInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UQuestRewardItemInfoPtrFuncLibrary;

// Class ProjectPContentInfo.QuestDescInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UQuestDescInfoPtrFuncLibrary final : public UObject
{
public:
	static const TArray<struct FGeneralConditionInfo> GetAddQuestConditionArray(const struct FQuestDescInfoPtr& Ptr);
	static bool GetAddQuestConditionOr(const struct FQuestDescInfoPtr& Ptr);
	static const TArray<struct FGeneralCallBackEventInfo> GetAddQuestTypeListArray(const struct FQuestDescInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FQuestDescInfoPtr& Ptr);
	static int32 GetDialogSelectNum(const struct FQuestDescInfoPtr& Ptr);
	static int32 GetQuestVariable(const struct FQuestDescInfoPtr& Ptr);
	static const TArray<class FName> GetTalker(const struct FQuestDescInfoPtr& Ptr);
	static bool IsValid(const struct FQuestDescInfoPtr& Ptr);
	static void IsValidBranch(const struct FQuestDescInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("QuestDescInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"QuestDescInfoPtrFuncLibrary")
	}
	static class UQuestDescInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestDescInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UQuestDescInfoPtrFuncLibrary;

// Class ProjectPContentInfo.QuestStepInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UQuestStepInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FQuestStepInfo& Info);
	static const TArray<struct FGeneralCommandInfo> GetDontcareExecListArray(const struct FQuestStepInfo& Info);
	static class FString GetFalseNextstepData(const struct FQuestStepInfo& Info);
	static ELNextStepType GetFalseNextstepType(const struct FQuestStepInfo& Info);
	static const class FName GetFalseResultGemini(const struct FQuestStepInfo& Info);
	static const TArray<struct FGeneralCommandInfo> GetFalseResultListArray(const struct FQuestStepInfo& Info);
	static int32 GetFalseRewardHumanPoint(const struct FQuestStepInfo& Info);
	static const TArray<struct FQuestRewardItemInfo> GetFalseRewardItemArray(const struct FQuestStepInfo& Info);
	static const TArray<struct FGeneralConditionInfo> GetQuestFailCheckListArray(const struct FQuestStepInfo& Info);
	static const TArray<struct FGeneralCommandInfo> GetQuestFailExecListArray(const struct FQuestStepInfo& Info);
	static bool GetQuestFailOr(const struct FQuestStepInfo& Info);
	static int32 GetStep(const struct FQuestStepInfo& Info);
	static const TArray<class FName> GetTalkerDialog(const struct FQuestStepInfo& Info);
	static const TArray<struct FGeneralCallBackEventInfo> GetTaskListArray(const struct FQuestStepInfo& Info);
	static ELTaskResultCheckType GetTaskResultCheck(const struct FQuestStepInfo& Info);
	static class FString GetTaskResultCheckData(const struct FQuestStepInfo& Info);
	static const class FName GetTeleportlistIcon(const struct FQuestStepInfo& Info);
	static const TArray<class FName> GetTeleportlistOn(const struct FQuestStepInfo& Info);
	static class FString GetTrueNextstepData(const struct FQuestStepInfo& Info);
	static ELNextStepType GetTrueNextstepType(const struct FQuestStepInfo& Info);
	static const class FName GetTrueResultGemini(const struct FQuestStepInfo& Info);
	static const TArray<struct FGeneralCommandInfo> GetTrueResultListArray(const struct FQuestStepInfo& Info);
	static int32 GetTrueRewardHumanPoint(const struct FQuestStepInfo& Info);
	static const TArray<struct FQuestRewardItemInfo> GetTrueRewardItemArray(const struct FQuestStepInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("QuestStepInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"QuestStepInfoFuncLibrary")
	}
	static class UQuestStepInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestStepInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UQuestStepInfoFuncLibrary;

// Class ProjectPContentInfo.QuestStepInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UQuestStepInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FQuestStepInfoPtr& Ptr);
	static const TArray<struct FGeneralCommandInfo> GetDontcareExecListArray(const struct FQuestStepInfoPtr& Ptr);
	static class FString GetFalseNextstepData(const struct FQuestStepInfoPtr& Ptr);
	static ELNextStepType GetFalseNextstepType(const struct FQuestStepInfoPtr& Ptr);
	static const class FName GetFalseResultGemini(const struct FQuestStepInfoPtr& Ptr);
	static const TArray<struct FGeneralCommandInfo> GetFalseResultListArray(const struct FQuestStepInfoPtr& Ptr);
	static int32 GetFalseRewardHumanPoint(const struct FQuestStepInfoPtr& Ptr);
	static const TArray<struct FQuestRewardItemInfo> GetFalseRewardItemArray(const struct FQuestStepInfoPtr& Ptr);
	static const TArray<struct FGeneralConditionInfo> GetQuestFailCheckListArray(const struct FQuestStepInfoPtr& Ptr);
	static const TArray<struct FGeneralCommandInfo> GetQuestFailExecListArray(const struct FQuestStepInfoPtr& Ptr);
	static bool GetQuestFailOr(const struct FQuestStepInfoPtr& Ptr);
	static int32 GetStep(const struct FQuestStepInfoPtr& Ptr);
	static const TArray<class FName> GetTalkerDialog(const struct FQuestStepInfoPtr& Ptr);
	static const TArray<struct FGeneralCallBackEventInfo> GetTaskListArray(const struct FQuestStepInfoPtr& Ptr);
	static ELTaskResultCheckType GetTaskResultCheck(const struct FQuestStepInfoPtr& Ptr);
	static class FString GetTaskResultCheckData(const struct FQuestStepInfoPtr& Ptr);
	static const class FName GetTeleportlistIcon(const struct FQuestStepInfoPtr& Ptr);
	static const TArray<class FName> GetTeleportlistOn(const struct FQuestStepInfoPtr& Ptr);
	static class FString GetTrueNextstepData(const struct FQuestStepInfoPtr& Ptr);
	static ELNextStepType GetTrueNextstepType(const struct FQuestStepInfoPtr& Ptr);
	static const class FName GetTrueResultGemini(const struct FQuestStepInfoPtr& Ptr);
	static const TArray<struct FGeneralCommandInfo> GetTrueResultListArray(const struct FQuestStepInfoPtr& Ptr);
	static int32 GetTrueRewardHumanPoint(const struct FQuestStepInfoPtr& Ptr);
	static const TArray<struct FQuestRewardItemInfo> GetTrueRewardItemArray(const struct FQuestStepInfoPtr& Ptr);
	static bool IsValid(const struct FQuestStepInfoPtr& Ptr);
	static void IsValidBranch(const struct FQuestStepInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("QuestStepInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"QuestStepInfoPtrFuncLibrary")
	}
	static class UQuestStepInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestStepInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UQuestStepInfoPtrFuncLibrary;

// Class ProjectPContentInfo.QuestInfoAsset
// 0x00B8 (0x0130 - 0x0078)
class alignas(0x10) UQuestInfoAsset final : public UContentInfoAsset
{
public:
	struct FQuestInfoDB                           ContentInfoDB;                                     // 0x0078(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FQuestDescInfoPtr FindQuestDescInfoByNameBP(class FName CodeName);
	static const TArray<struct FQuestDescInfo> GetQuestDescInfoArrayBP();
	static const TArray<struct FQuestStepInfo> GetQuestStepInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("QuestInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"QuestInfoAsset")
	}
	static class UQuestInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestInfoAsset>();
	}
};
DUMPER7_ASSERTS_UQuestInfoAsset;

// Class ProjectPContentInfo.RecollectionInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class URecollectionInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetAssetTableCodeName(const struct FRecollectionInfo& Info);
	static ELRecollectionCategory GetCategory(const struct FRecollectionInfo& Info);
	static const class FName GetCodeName(const struct FRecollectionInfo& Info);
	static int32 GetIndex(const struct FRecollectionInfo& Info);
	static class FString GetLocalTextName(const struct FRecollectionInfo& Info);
	static const class FName GetLocalTextNameCn(const struct FRecollectionInfo& Info);
	static class FText GetLocalTextNameLocalize(const struct FRecollectionInfo& Info);
	static class FString GetLocalTextTooltip1(const struct FRecollectionInfo& Info);
	static const class FName GetLocalTextTooltip1Cn(const struct FRecollectionInfo& Info);
	static class FText GetLocalTextTooltip1Localize(const struct FRecollectionInfo& Info);
	static class FString GetLocalTextTooltip2(const struct FRecollectionInfo& Info);
	static const class FName GetLocalTextTooltip2Cn(const struct FRecollectionInfo& Info);
	static class FText GetLocalTextTooltip2Localize(const struct FRecollectionInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RecollectionInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RecollectionInfoFuncLibrary")
	}
	static class URecollectionInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URecollectionInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_URecollectionInfoFuncLibrary;

// Class ProjectPContentInfo.RecollectionInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) URecollectionInfoAsset final : public UContentInfoAsset
{
public:
	struct FRecollectionInfoDB                    ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FRecollectionInfoPtr FindRecollectionInfoByNameBP(class FName CodeName);
	static const TArray<struct FRecollectionInfo> GetRecollectionInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("RecollectionInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"RecollectionInfoAsset")
	}
	static class URecollectionInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<URecollectionInfoAsset>();
	}
};
DUMPER7_ASSERTS_URecollectionInfoAsset;

// Class ProjectPContentInfo.ResetNeedItemInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UResetNeedItemInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetNeedItemCodeName(const struct FResetNeedItemInfo& Info);
	static int32 GetNum(const struct FResetNeedItemInfo& Info);
	static int32 GetResetCount(const struct FResetNeedItemInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ResetNeedItemInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ResetNeedItemInfoFuncLibrary")
	}
	static class UResetNeedItemInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResetNeedItemInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UResetNeedItemInfoFuncLibrary;

// Class ProjectPContentInfo.ResetNeedItemInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UResetNeedItemInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetNeedItemCodeName(const struct FResetNeedItemInfoPtr& Ptr);
	static int32 GetNum(const struct FResetNeedItemInfoPtr& Ptr);
	static int32 GetResetCount(const struct FResetNeedItemInfoPtr& Ptr);
	static bool IsValid(const struct FResetNeedItemInfoPtr& Ptr);
	static void IsValidBranch(const struct FResetNeedItemInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ResetNeedItemInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ResetNeedItemInfoPtrFuncLibrary")
	}
	static class UResetNeedItemInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResetNeedItemInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UResetNeedItemInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ResetSystemSettingInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UResetSystemSettingInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FResetSystemSettingInfoPtr& Ptr);
	static const TArray<struct FResetNeedItemInfo> GetNeedItemsArray(const struct FResetSystemSettingInfoPtr& Ptr);
	static bool IsValid(const struct FResetSystemSettingInfoPtr& Ptr);
	static void IsValidBranch(const struct FResetSystemSettingInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ResetSystemSettingInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ResetSystemSettingInfoPtrFuncLibrary")
	}
	static class UResetSystemSettingInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UResetSystemSettingInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UResetSystemSettingInfoPtrFuncLibrary;

// Class ProjectPContentInfo.ShopInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UShopInfoFuncLibrary final : public UObject
{
public:
	static int32 GetBuyNumMax(const struct FShopInfo& Info);
	static const class FName GetCondition(const struct FShopInfo& Info);
	static const class FName GetGoodsCodeName(const struct FShopInfo& Info);
	static const class FName GetItemCodeName(const struct FShopInfo& Info);
	static const class FName GetItemCodeName2(const struct FShopInfo& Info);
	static int32 GetSellingPrice(const struct FShopInfo& Info);
	static const class FName GetShopCodeName(const struct FShopInfo& Info);
	static int32 GetSort(const struct FShopInfo& Info);
	static int32 GetStockLimit(const struct FShopInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ShopInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ShopInfoFuncLibrary")
	}
	static class UShopInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShopInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UShopInfoFuncLibrary;

// Class ProjectPContentInfo.ShopInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UShopInfoAsset final : public UContentInfoAsset
{
public:
	struct FShopInfoDB                            ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FShopInfoPtr FindShopInfoByNameBP(class FName CodeName);
	static const TArray<struct FShopInfo> GetShopInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ShopInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ShopInfoAsset")
	}
	static class UShopInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShopInfoAsset>();
	}
};
DUMPER7_ASSERTS_UShopInfoAsset;

// Class ProjectPContentInfo.ShopSpecialInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UShopSpecialInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetBuyNumMax(const struct FShopSpecialInfoPtr& Ptr);
	static const class FName GetCondition(const struct FShopSpecialInfoPtr& Ptr);
	static const class FName GetGoodsCodeName(const struct FShopSpecialInfoPtr& Ptr);
	static const class FName GetItemCodeName(const struct FShopSpecialInfoPtr& Ptr);
	static const class FName GetItemCodeName2(const struct FShopSpecialInfoPtr& Ptr);
	static int32 GetNeedErgo(const struct FShopSpecialInfoPtr& Ptr);
	static const class FName GetNeedItem1(const struct FShopSpecialInfoPtr& Ptr);
	static const class FName GetNeedItem2(const struct FShopSpecialInfoPtr& Ptr);
	static const class FName GetNeedItem3(const struct FShopSpecialInfoPtr& Ptr);
	static const class FName GetNeedItem4(const struct FShopSpecialInfoPtr& Ptr);
	static int32 GetNeedItemNum1(const struct FShopSpecialInfoPtr& Ptr);
	static int32 GetNeedItemNum2(const struct FShopSpecialInfoPtr& Ptr);
	static int32 GetNeedItemNum3(const struct FShopSpecialInfoPtr& Ptr);
	static int32 GetNeedItemNum4(const struct FShopSpecialInfoPtr& Ptr);
	static const class FName GetShopCodeName(const struct FShopSpecialInfoPtr& Ptr);
	static int32 GetSort(const struct FShopSpecialInfoPtr& Ptr);
	static int32 GetStockLimit(const struct FShopSpecialInfoPtr& Ptr);
	static bool IsValid(const struct FShopSpecialInfoPtr& Ptr);
	static void IsValidBranch(const struct FShopSpecialInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("ShopSpecialInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ShopSpecialInfoPtrFuncLibrary")
	}
	static class UShopSpecialInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShopSpecialInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UShopSpecialInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SkillHitInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USkillHitInfoFuncLibrary final : public UObject
{
public:
	static int32 GetAbnormalStateBuildUpAttackRatio(const struct FSkillHitInfo& Info);
	static const class FName GetAbnormalStateCodeName(const struct FSkillHitInfo& Info);
	static int32 GetAbnormalstateMomentConditionGroup(const struct FSkillHitInfo& Info);
	static bool GetAllow360Guard(const struct FSkillHitInfo& Info);
	static int32 GetAttackGainFrenzyPointRatio(const struct FSkillHitInfo& Info);
	static int32 GetBoundDuration(const struct FSkillHitInfo& Info);
	static int32 GetBoundHeight(const struct FSkillHitInfo& Info);
	static const class FName GetCodeName(const struct FSkillHitInfo& Info);
	static int32 GetConsumeSlaveMagazine(const struct FSkillHitInfo& Info);
	static int32 GetConsumeStaminaPoint(const struct FSkillHitInfo& Info);
	static int32 GetConsumeStaminaRatio(const struct FSkillHitInfo& Info);
	static const class FName GetCounterChangeSkillHitCodeName(const struct FSkillHitInfo& Info);
	static int32 GetCounterPostHit(const struct FSkillHitInfo& Info);
	static int32 GetCounterPreHit(const struct FSkillHitInfo& Info);
	static int32 GetDecreaseEnemyWeaponDurability(const struct FSkillHitInfo& Info);
	static int32 GetElementDamageRatio(const struct FSkillHitInfo& Info);
	static ELElementDamageType GetElementDamageType(const struct FSkillHitInfo& Info);
	static bool GetEnable2dSfx(const struct FSkillHitInfo& Info);
	static bool GetEnablePerfectGuardGroggyDamage(const struct FSkillHitInfo& Info);
	static bool GetEnableWarningevent(const struct FSkillHitInfo& Info);
	static ELExplosionPowerType GetExlplosiveKillPower(const struct FSkillHitInfo& Info);
	static ELExplosionDirectionType GetExplosiveKillDirection(const struct FSkillHitInfo& Info);
	static int32 GetExplosiveKillProb(const struct FSkillHitInfo& Info);
	static bool GetFuryAttack(const struct FSkillHitInfo& Info);
	static const class FName GetGroggyChangeSkillHitCodeName(const struct FSkillHitInfo& Info);
	static int32 GetGroggyDamageRatio(const struct FSkillHitInfo& Info);
	static bool GetGroggyEnableHitBack(const struct FSkillHitInfo& Info);
	static bool GetGroggyEnableHitFront(const struct FSkillHitInfo& Info);
	static bool GetGroggyEnableHitSide(const struct FSkillHitInfo& Info);
	static bool GetGroggyImmediatelyHitBack(const struct FSkillHitInfo& Info);
	static bool GetGroggyImmediatelyHitFront(const struct FSkillHitInfo& Info);
	static bool GetGroggyImmediatelyHitSide(const struct FSkillHitInfo& Info);
	static int32 GetGroggyTimeRatio(const struct FSkillHitInfo& Info);
	static ELGuardAttackType GetGuardAttackType(const struct FSkillHitInfo& Info);
	static bool GetGuardBreakAttack(const struct FSkillHitInfo& Info);
	static int32 GetGuardHitDuration(const struct FSkillHitInfo& Info);
	static int32 GetGuardKnockbackDistance(const struct FSkillHitInfo& Info);
	static int32 GetGuardKnockbackDuration(const struct FSkillHitInfo& Info);
	static int32 GetGuardPenetrationRatio(const struct FSkillHitInfo& Info);
	static int32 GetGuardRegainAttackHealRatio(const struct FSkillHitInfo& Info);
	static int32 GetGuardRegainDamageRatio(const struct FSkillHitInfo& Info);
	static int32 GetGuardRegainIncreaseRatio(const struct FSkillHitInfo& Info);
	static int32 GetGuardSharpnessDurabilityRatio(const struct FSkillHitInfo& Info);
	static int32 GetGuardStaminaDamageRatio(const struct FSkillHitInfo& Info);
	static int32 GetHitAnimDuration(const struct FSkillHitInfo& Info);
	static const class FName GetHitCameraShakeCodeName(const struct FSkillHitInfo& Info);
	static ELHitDirectionType GetHitDirectionType(const struct FSkillHitInfo& Info);
	static float GetHitFxAngle(const struct FSkillHitInfo& Info);
	static ELSwingPowerType GetHitFxLevel(const struct FSkillHitInfo& Info);
	static const class FName GetHitGeneratePrjCodeName(const struct FSkillHitInfo& Info);
	static const class FName GetHitIntencityDownSkillHit(const struct FSkillHitInfo& Info);
	static ELPhysicalSurfaceType GetHitMaterial(const struct FSkillHitInfo& Info);
	static ELHitMotionType GetHitMotionType(const struct FSkillHitInfo& Info);
	static bool GetHitRotationReverse(const struct FSkillHitInfo& Info);
	static ELHostileType GetHostileType(const struct FSkillHitInfo& Info);
	static bool GetIgnoreDead(const struct FSkillHitInfo& Info);
	static bool GetIgnoreDodge(const struct FSkillHitInfo& Info);
	static bool GetIgnoreGrabbed(const struct FSkillHitInfo& Info);
	static bool GetIgnoreGuard(const struct FSkillHitInfo& Info);
	static bool GetIgnoreInvincible(const struct FSkillHitInfo& Info);
	static bool GetIgnoreNpc(const struct FSkillHitInfo& Info);
	static bool GetIgnoreParry(const struct FSkillHitInfo& Info);
	static bool GetIgnorePc(const struct FSkillHitInfo& Info);
	static bool GetIgnorePerfectGuard(const struct FSkillHitInfo& Info);
	static bool GetIgnoreRepulseEnv(const struct FSkillHitInfo& Info);
	static bool GetIgnoreRepulseGuard(const struct FSkillHitInfo& Info);
	static bool GetIgnoreRepulseHit(const struct FSkillHitInfo& Info);
	static bool GetIgnoreSuperArmor(const struct FSkillHitInfo& Info);
	static int32 GetImpulseValue(const struct FSkillHitInfo& Info);
	static ELKnockBackDirectionType GetKnockbackDirection(const struct FSkillHitInfo& Info);
	static int32 GetKnockbackDistance(const struct FSkillHitInfo& Info);
	static int32 GetKnockbackDuration(const struct FSkillHitInfo& Info);
	static float GetKnockbackScale(const struct FSkillHitInfo& Info);
	static ELSkillMotionType GetMotionType(const struct FSkillHitInfo& Info);
	static int32 GetPerfectGuardDecreaseWeaponDurabilityRate(const struct FSkillHitInfo& Info);
	static int32 GetPhysicalDamageRatio(const struct FSkillHitInfo& Info);
	static ELPhysicalDamageType GetPhysicalDamageType(const struct FSkillHitInfo& Info);
	static int32 GetPulseRechargeRatio(const struct FSkillHitInfo& Info);
	static int32 GetRegainhpDamageRatio(const struct FSkillHitInfo& Info);
	static int32 GetRegainhpMakeRatio(const struct FSkillHitInfo& Info);
	static int32 GetRepulseColRadius(const struct FSkillHitInfo& Info);
	static ELRepulseDirectionType GetRepulseDirection(const struct FSkillHitInfo& Info);
	static int32 GetRepulseDuration(const struct FSkillHitInfo& Info);
	static const class FName GetRepulseEndSocket(const struct FSkillHitInfo& Info);
	static const class FName GetRepulseStartSocket(const struct FSkillHitInfo& Info);
	static int32 GetRigidityRatio(const struct FSkillHitInfo& Info);
	static int32 GetSharpnessReduceValueRatio(const struct FSkillHitInfo& Info);
	static ELSkillHitType GetSkillHitType(const struct FSkillHitInfo& Info);
	static int32 GetSparkColRadius(const struct FSkillHitInfo& Info);
	static const class FName GetSparkEndSocket(const struct FSkillHitInfo& Info);
	static const class FName GetSparkStartSocket(const struct FSkillHitInfo& Info);
	static int32 GetStiffenDurationAttacker(const struct FSkillHitInfo& Info);
	static int32 GetStiffenDurationDefender(const struct FSkillHitInfo& Info);
	static float GetStiffenPlayrateAttacker(const struct FSkillHitInfo& Info);
	static float GetStiffenPlayrateDefender(const struct FSkillHitInfo& Info);
	static bool GetTakeDamageIgnoreWarning(const struct FSkillHitInfo& Info);
	static int32 GetToughDamageRatio(const struct FSkillHitInfo& Info);
	static int32 GetToughRecoveryDelayTimeRatio(const struct FSkillHitInfo& Info);
	static bool GetTraceAttack(const struct FSkillHitInfo& Info);
	static bool GetUseCounter(const struct FSkillHitInfo& Info);
	static bool GetUseHitIntencity(const struct FSkillHitInfo& Info);
	static bool GetUseSmash(const struct FSkillHitInfo& Info);
	static ELWeaponAttachPointType GetWeaponAttachPointType(const struct FSkillHitInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkillHitInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkillHitInfoFuncLibrary")
	}
	static class USkillHitInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillHitInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USkillHitInfoFuncLibrary;

// Class ProjectPContentInfo.SkillHitInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) USkillHitInfoAsset final : public UContentInfoAsset
{
public:
	struct FSkillHitInfoDB                        ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FSkillHitInfoPtr FindSkillHitInfoByNameBP(class FName CodeName);
	static const TArray<struct FSkillHitInfo> GetSkillHitInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkillHitInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkillHitInfoAsset")
	}
	static class USkillHitInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillHitInfoAsset>();
	}
};
DUMPER7_ASSERTS_USkillHitInfoAsset;

// Class ProjectPContentInfo.SkillIndicatorInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USkillIndicatorInfoPtrFuncLibrary final : public UObject
{
public:
	static class FString GetAttachSocket(const struct FSkillIndicatorInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FSkillIndicatorInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetFxPath(const struct FSkillIndicatorInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetSoundPath(const struct FSkillIndicatorInfoPtr& Ptr);
	static bool IsValid(const struct FSkillIndicatorInfoPtr& Ptr);
	static void IsValidBranch(const struct FSkillIndicatorInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkillIndicatorInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkillIndicatorInfoPtrFuncLibrary")
	}
	static class USkillIndicatorInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillIndicatorInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USkillIndicatorInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SkillInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USkillInfoFuncLibrary final : public UObject
{
public:
	static int32 GetAbortSkillCooltimeresetPercent(const struct FSkillInfo& Info);
	static ELActionCategory GetActionCategory(const struct FSkillInfo& Info);
	static const class FName GetActionClassCodeName(const struct FSkillInfo& Info);
	static const class FName GetActionGroupTableCodeName(const struct FSkillInfo& Info);
	static const class FName GetActionPathCodeName(const struct FSkillInfo& Info);
	static ELStartRotationType GetActionRotationType(const struct FSkillInfo& Info);
	static ELAdditiveHitType GetAdditiveHitType(const struct FSkillInfo& Info);
	static bool GetAllowFalling(const struct FSkillInfo& Info);
	static class FString GetAnimName(const struct FSkillInfo& Info);
	static bool GetAutoTargeting(const struct FSkillInfo& Info);
	static const class FName GetCodeName(const struct FSkillInfo& Info);
	static int32 GetConsumeAmmo(const struct FSkillInfo& Info);
	static int32 GetConsumeFrenzyUnitCount(const struct FSkillInfo& Info);
	static int32 GetConsumeItemCount(const struct FSkillInfo& Info);
	static int32 GetConsumeSlaveMagazine(const struct FSkillInfo& Info);
	static int32 GetConsumeStaminaPoint(const struct FSkillInfo& Info);
	static int32 GetCooltimeMax(const struct FSkillInfo& Info);
	static int32 GetCooltimeMin(const struct FSkillInfo& Info);
	static bool GetDecreaceUseSkillCountByCancel(const struct FSkillInfo& Info);
	static bool GetDefenceSkill(const struct FSkillInfo& Info);
	static float GetDestructionDefenceMod(const struct FSkillInfo& Info);
	static float GetDestructionReduceMod(const struct FSkillInfo& Info);
	static bool GetDontUseSkillCount(const struct FSkillInfo& Info);
	static bool GetEnableBladeWeight(const struct FSkillInfo& Info);
	static bool GetEndSectionByLanding(const struct FSkillInfo& Info);
	static class FString GetEndSectionCallingCommand(const struct FSkillInfo& Info);
	static const class FName GetFailSkill(const struct FSkillInfo& Info);
	static int32 GetGlobalCooltimeMax(const struct FSkillInfo& Info);
	static int32 GetGlobalCooltimeMin(const struct FSkillInfo& Info);
	static const class FName GetHandleAnimState(const struct FSkillInfo& Info);
	static bool GetIgnoreCheckRootmotion(const struct FSkillInfo& Info);
	static const class FName GetImmuneCodeName(const struct FSkillInfo& Info);
	static int32 GetInitCooltimeMax(const struct FSkillInfo& Info);
	static int32 GetInitCooltimeMin(const struct FSkillInfo& Info);
	static class FString GetLocalTextSkillName(const struct FSkillInfo& Info);
	static const class FName GetLocalTextSkillNameCn(const struct FSkillInfo& Info);
	static class FText GetLocalTextSkillNameLocalize(const struct FSkillInfo& Info);
	static class FString GetLocalTextSkillTooltip(const struct FSkillInfo& Info);
	static const class FName GetLocalTextSkillTooltipCn(const struct FSkillInfo& Info);
	static class FText GetLocalTextSkillTooltipLocalize(const struct FSkillInfo& Info);
	static const class FName GetLonghandleActionClassCodeName(const struct FSkillInfo& Info);
	static class FString GetLonghandleAnimName(const struct FSkillInfo& Info);
	static bool GetNaviJumpEnable(const struct FSkillInfo& Info);
	static bool GetNotUseDestroyed(const struct FSkillInfo& Info);
	static const class FName GetPartNeeded(const struct FSkillInfo& Info);
	static bool GetPreventFallingDamage(const struct FSkillInfo& Info);
	static int32 GetRequireAmmo(const struct FSkillInfo& Info);
	static int32 GetRequireFrenzyUnitCount(const struct FSkillInfo& Info);
	static const class FName GetRequireItemCodeName(const struct FSkillInfo& Info);
	static bool GetRequireSlaveMagazine(const struct FSkillInfo& Info);
	static int32 GetRequireSlaveMagazinePoint(const struct FSkillInfo& Info);
	static bool GetRequireStamina(const struct FSkillInfo& Info);
	static int32 GetRequireStaminaPoint(const struct FSkillInfo& Info);
	static bool GetResetToughPoint(const struct FSkillInfo& Info);
	static const class FName GetShorthandleActionClassCodeName(const struct FSkillInfo& Info);
	static class FString GetShorthandleAnimName(const struct FSkillInfo& Info);
	static int32 GetSkillApproachDistMax(const struct FSkillInfo& Info);
	static int32 GetSkillApproachDistMin(const struct FSkillInfo& Info);
	static int32 GetSkillDistHeight(const struct FSkillInfo& Info);
	static int32 GetSkillDistMax(const struct FSkillInfo& Info);
	static int32 GetSkillDistMin(const struct FSkillInfo& Info);
	static const class FName GetSkillGroupCodeName(const struct FSkillInfo& Info);
	static int32 GetSkillGroupCooltimeMax(const struct FSkillInfo& Info);
	static int32 GetSkillGroupCooltimeMin(const struct FSkillInfo& Info);
	static int32 GetSkillmoveCheckAngle(const struct FSkillInfo& Info);
	static int32 GetSkillRangeAngleEnd(const struct FSkillInfo& Info);
	static int32 GetSkillRangeAngleStart(const struct FSkillInfo& Info);
	static ELAIRangeCheckType GetSkillrangeChecktype(const struct FSkillInfo& Info);
	static int32 GetSkillRotateAngle(const struct FSkillInfo& Info);
	static int32 GetSkilmoveCheckDist(const struct FSkillInfo& Info);
	static int32 GetStartRotationBlendTime(const struct FSkillInfo& Info);
	static ELStartRotationType GetStartRotationType(const struct FSkillInfo& Info);
	static class FString GetStartSection(const struct FSkillInfo& Info);
	static bool GetUseGlobalCooltime(const struct FSkillInfo& Info);
	static bool GetUseSlopeLookat(const struct FSkillInfo& Info);
	static ELWeaponAttachPointType GetWeaponAttachPointType(const struct FSkillInfo& Info);
	static const class FName GetWeaponBreakChangeSkill(const struct FSkillInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkillInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkillInfoFuncLibrary")
	}
	static class USkillInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USkillInfoFuncLibrary;

// Class ProjectPContentInfo.SkillInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) USkillInfoAsset final : public UContentInfoAsset
{
public:
	struct FSkillInfoDB                           ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FSkillInfoPtr FindSkillInfoByNameBP(class FName CodeName);
	static const TArray<struct FSkillInfo> GetSkillInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkillInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkillInfoAsset")
	}
	static class USkillInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillInfoAsset>();
	}
};
DUMPER7_ASSERTS_USkillInfoAsset;

// Class ProjectPContentInfo.SkillMoveInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USkillMoveInfoPtrFuncLibrary final : public UObject
{
public:
	static bool GetApplyAnimScaling(const struct FSkillMoveInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FSkillMoveInfoPtr& Ptr);
	static bool GetIgnoreRootmotionMove(const struct FSkillMoveInfoPtr& Ptr);
	static bool GetIgnoreRootmotionRotation(const struct FSkillMoveInfoPtr& Ptr);
	static bool GetMoveCheckNavPath(const struct FSkillMoveInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetMoveCurve(const struct FSkillMoveInfoPtr& Ptr);
	static float GetMoveDistance(const struct FSkillMoveInfoPtr& Ptr);
	static bool GetMoveEnable(const struct FSkillMoveInfoPtr& Ptr);
	static bool GetMoveFixedDirectionUse(const struct FSkillMoveInfoPtr& Ptr);
	static bool GetMoveIgnoreRotateUse(const struct FSkillMoveInfoPtr& Ptr);
	static float GetMoveRotYaw(const struct FSkillMoveInfoPtr& Ptr);
	static float GetMoveSpeed(const struct FSkillMoveInfoPtr& Ptr);
	static float GetMoveToTargetOffsetDistance(const struct FSkillMoveInfoPtr& Ptr);
	static float GetMoveToTargetSpeed(const struct FSkillMoveInfoPtr& Ptr);
	static bool GetMoveToTargetUse(const struct FSkillMoveInfoPtr& Ptr);
	static float GetPursuitToTargetScalingOffsetDistance(const struct FSkillMoveInfoPtr& Ptr);
	static float GetPursuitToTargetScalingSpeedMax(const struct FSkillMoveInfoPtr& Ptr);
	static bool GetPursuitToTargetScalingSpeedUse(const struct FSkillMoveInfoPtr& Ptr);
	static float GetRotateAngle(const struct FSkillMoveInfoPtr& Ptr);
	static bool GetRotateAngleUse(const struct FSkillMoveInfoPtr& Ptr);
	static bool GetRotateEnable(const struct FSkillMoveInfoPtr& Ptr);
	static float GetRotateLimit(const struct FSkillMoveInfoPtr& Ptr);
	static float GetRotateTrackingCompletionDegree(const struct FSkillMoveInfoPtr& Ptr);
	static float GetRotateTrackingCompletionDegreeLeft(const struct FSkillMoveInfoPtr& Ptr);
	static float GetRotateTrackingCompletionDegreeRight(const struct FSkillMoveInfoPtr& Ptr);
	static ELTrackingDirectionType GetRotateTrackingDirection(const struct FSkillMoveInfoPtr& Ptr);
	static bool GetRotateTrackingFullHomingUse(const struct FSkillMoveInfoPtr& Ptr);
	static float GetRotateTrackingGiveUpDegree(const struct FSkillMoveInfoPtr& Ptr);
	static float GetRotateTrackingRotateAngleOffset(const struct FSkillMoveInfoPtr& Ptr);
	static bool GetRotateTrackingSetDirectionOnStart(const struct FSkillMoveInfoPtr& Ptr);
	static float GetRotateTrackingSetDirectionOnStartLeft(const struct FSkillMoveInfoPtr& Ptr);
	static float GetRotateTrackingSetDirectionOnStartRight(const struct FSkillMoveInfoPtr& Ptr);
	static float GetRotateTrackingSpeed(const struct FSkillMoveInfoPtr& Ptr);
	static bool GetRotateTrackingUse(const struct FSkillMoveInfoPtr& Ptr);
	static bool GetRotateUseCaptureLocation(const struct FSkillMoveInfoPtr& Ptr);
	static bool IsValid(const struct FSkillMoveInfoPtr& Ptr);
	static void IsValidBranch(const struct FSkillMoveInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SkillMoveInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SkillMoveInfoPtrFuncLibrary")
	}
	static class USkillMoveInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillMoveInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USkillMoveInfoPtrFuncLibrary;

// Class ProjectPContentInfo.Skill_IndicatorInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USkill_IndicatorInfoFuncLibrary final : public UObject
{
public:
	static const TSoftClassPtr<class UClass> GetActionClass(const struct FSkill_IndicatorInfo& Info);
	static const class FName GetCodeName(const struct FSkill_IndicatorInfo& Info);
	static ELActionCategory GetSystemCategory(const struct FSkill_IndicatorInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Skill_IndicatorInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Skill_IndicatorInfoFuncLibrary")
	}
	static class USkill_IndicatorInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkill_IndicatorInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USkill_IndicatorInfoFuncLibrary;

// Class ProjectPContentInfo.Skill_IndicatorInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) USkill_IndicatorInfoAsset final : public UContentInfoAsset
{
public:
	struct FSkill_IndicatorInfoDB                 ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FSkill_IndicatorInfoPtr FindSkill_IndicatorInfoByNameBP(class FName CodeName);
	static const TArray<struct FSkill_IndicatorInfo> GetSkill_IndicatorInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("Skill_IndicatorInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"Skill_IndicatorInfoAsset")
	}
	static class USkill_IndicatorInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkill_IndicatorInfoAsset>();
	}
};
DUMPER7_ASSERTS_USkill_IndicatorInfoAsset;

// Class ProjectPContentInfo.SlaveArmPageInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USlaveArmPageInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetActivateRequireItemCodeName(const struct FSlaveArmPageInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FSlaveArmPageInfoPtr& Ptr);
	static const class FName GetIcon(const struct FSlaveArmPageInfoPtr& Ptr);
	static class FString GetLocalTextTooltip(const struct FSlaveArmPageInfoPtr& Ptr);
	static const class FName GetLocalTextTooltipCn(const struct FSlaveArmPageInfoPtr& Ptr);
	static class FText GetLocalTextTooltipLocalize(const struct FSlaveArmPageInfoPtr& Ptr);
	static int32 GetPageIndex(const struct FSlaveArmPageInfoPtr& Ptr);
	static bool IsValid(const struct FSlaveArmPageInfoPtr& Ptr);
	static void IsValidBranch(const struct FSlaveArmPageInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlaveArmPageInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlaveArmPageInfoPtrFuncLibrary")
	}
	static class USlaveArmPageInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlaveArmPageInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USlaveArmPageInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SlaveArmReinforcementInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USlaveArmReinforcementInfoFuncLibrary final : public UObject
{
public:
	static int32 GetAdditionalAmmoMax(const struct FSlaveArmReinforcementInfo& Info);
	static int32 GetChangeHitIndex(const struct FSlaveArmReinforcementInfo& Info);
	static const class FName GetChangePlayRateSection(const struct FSlaveArmReinforcementInfo& Info);
	static const class FName GetChangeProjectile(const struct FSlaveArmReinforcementInfo& Info);
	static const class FName GetChangeSection(const struct FSlaveArmReinforcementInfo& Info);
	static const class FName GetChangeSkillCodeName(const struct FSlaveArmReinforcementInfo& Info);
	static int32 GetConsumeSlaveMagazineMod(const struct FSlaveArmReinforcementInfo& Info);
	static int32 GetHitIndexToChange(const struct FSlaveArmReinforcementInfo& Info);
	static float GetPlayRate(const struct FSlaveArmReinforcementInfo& Info);
	static const class FName GetProjectileToChange(const struct FSlaveArmReinforcementInfo& Info);
	static const class FName GetReinforcementName(const struct FSlaveArmReinforcementInfo& Info);
	static const class FName GetSectionToChange(const struct FSlaveArmReinforcementInfo& Info);
	static int32 GetSlavearmAcidAttackMod(const struct FSlaveArmReinforcementInfo& Info);
	static int32 GetSlavearmElectricAttackMod(const struct FSlaveArmReinforcementInfo& Info);
	static int32 GetSlavearmFireAttackMod(const struct FSlaveArmReinforcementInfo& Info);
	static int32 GetSlavearmPhysicalAttackMod(const struct FSlaveArmReinforcementInfo& Info);
	static const class FName GetSpecialBuffCodeName(const struct FSlaveArmReinforcementInfo& Info);
	static const class FName GetSpecialBuffSection(const struct FSlaveArmReinforcementInfo& Info);
	static const class FName GetVariableToChange(const struct FSlaveArmReinforcementInfo& Info);
	static const class FName GetVariableValue(const struct FSlaveArmReinforcementInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlaveArmReinforcementInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlaveArmReinforcementInfoFuncLibrary")
	}
	static class USlaveArmReinforcementInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlaveArmReinforcementInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USlaveArmReinforcementInfoFuncLibrary;

// Class ProjectPContentInfo.SlaveArmReinforcementInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) USlaveArmReinforcementInfoAsset final : public UContentInfoAsset
{
public:
	struct FSlaveArmReinforcementInfoDB           ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FSlaveArmReinforcementInfo> GetSlaveArmReinforcementInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlaveArmReinforcementInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlaveArmReinforcementInfoAsset")
	}
	static class USlaveArmReinforcementInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlaveArmReinforcementInfoAsset>();
	}
};
DUMPER7_ASSERTS_USlaveArmReinforcementInfoAsset;

// Class ProjectPContentInfo.SlaveArmTreeInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USlaveArmTreeInfoPtrFuncLibrary final : public UObject
{
public:
	static const TSoftObjectPtr<class UObject> GetAttachMesh(const struct FSlaveArmTreeInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FSlaveArmTreeInfoPtr& Ptr);
	static int32 GetDepth(const struct FSlaveArmTreeInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetIcon(const struct FSlaveArmTreeInfoPtr& Ptr);
	static class FString GetLocalTextName(const struct FSlaveArmTreeInfoPtr& Ptr);
	static const class FName GetLocalTextNameCn(const struct FSlaveArmTreeInfoPtr& Ptr);
	static class FText GetLocalTextNameLocalize(const struct FSlaveArmTreeInfoPtr& Ptr);
	static class FString GetLocalTextTooltip(const struct FSlaveArmTreeInfoPtr& Ptr);
	static const class FName GetLocalTextTooltipCn(const struct FSlaveArmTreeInfoPtr& Ptr);
	static class FText GetLocalTextTooltipLocalize(const struct FSlaveArmTreeInfoPtr& Ptr);
	static const class FName GetPrerequisiteTreeCodeName(const struct FSlaveArmTreeInfoPtr& Ptr);
	static const class FName GetReinforcementCodeName(const struct FSlaveArmTreeInfoPtr& Ptr);
	static const class FName GetRequireItemCodeName(const struct FSlaveArmTreeInfoPtr& Ptr);
	static int32 GetRequireItemCount(const struct FSlaveArmTreeInfoPtr& Ptr);
	static const class FName GetSlavearmPageCodeName(const struct FSlaveArmTreeInfoPtr& Ptr);
	static class FString GetVideo(const struct FSlaveArmTreeInfoPtr& Ptr);
	static bool IsValid(const struct FSlaveArmTreeInfoPtr& Ptr);
	static void IsValidBranch(const struct FSlaveArmTreeInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlaveArmTreeInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlaveArmTreeInfoPtrFuncLibrary")
	}
	static class USlaveArmTreeInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlaveArmTreeInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USlaveArmTreeInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SlaveArmTreeInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) USlaveArmTreeInfoAsset final : public UContentInfoAsset
{
public:
	struct FSlaveArmTreeInfoDB                    ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FSlaveArmTreeInfoPtr FindSlaveArmTreeInfoByNameBP(class FName CodeName);
	static const TArray<struct FSlaveArmTreeInfo> GetSlaveArmTreeInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SlaveArmTreeInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SlaveArmTreeInfoAsset")
	}
	static class USlaveArmTreeInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlaveArmTreeInfoAsset>();
	}
};
DUMPER7_ASSERTS_USlaveArmTreeInfoAsset;

// Class ProjectPContentInfo.SpecialBuffInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USpecialBuffInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetBase(const struct FSpecialBuffInfoPtr& Ptr);
	static float GetBottom(const struct FSpecialBuffInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FSpecialBuffInfoPtr& Ptr);
	static float GetExponent(const struct FSpecialBuffInfoPtr& Ptr);
	static int32 GetFactor(const struct FSpecialBuffInfoPtr& Ptr);
	static const class FName GetHumanizationBuffAlterCodeName(const struct FSpecialBuffInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetIconResource(const struct FSpecialBuffInfoPtr& Ptr);
	static class FString GetLocalTextName(const struct FSpecialBuffInfoPtr& Ptr);
	static const class FName GetLocalTextNameCn(const struct FSpecialBuffInfoPtr& Ptr);
	static class FText GetLocalTextNameLocalize(const struct FSpecialBuffInfoPtr& Ptr);
	static class FString GetLocalTextTooltip(const struct FSpecialBuffInfoPtr& Ptr);
	static const class FName GetLocalTextTooltipCn(const struct FSpecialBuffInfoPtr& Ptr);
	static class FText GetLocalTextTooltipLocalize(const struct FSpecialBuffInfoPtr& Ptr);
	static int32 GetParamInt1(const struct FSpecialBuffInfoPtr& Ptr);
	static int32 GetParamInt2(const struct FSpecialBuffInfoPtr& Ptr);
	static int32 GetParamNum(const struct FSpecialBuffInfoPtr& Ptr);
	static const class FName GetParamString1(const struct FSpecialBuffInfoPtr& Ptr);
	static const class FName GetParamString2(const struct FSpecialBuffInfoPtr& Ptr);
	static bool GetShowUi(const struct FSpecialBuffInfoPtr& Ptr);
	static ELSpecialBuffType GetType(const struct FSpecialBuffInfoPtr& Ptr);
	static bool GetUseHumanityAsMultiplier(const struct FSpecialBuffInfoPtr& Ptr);
	static bool IsValid(const struct FSpecialBuffInfoPtr& Ptr);
	static void IsValidBranch(const struct FSpecialBuffInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpecialBuffInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpecialBuffInfoPtrFuncLibrary")
	}
	static class USpecialBuffInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialBuffInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USpecialBuffInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SpecialBuffInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) USpecialBuffInfoAsset final : public UContentInfoAsset
{
public:
	struct FSpecialBuffInfoDB                     ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FSpecialBuffInfoPtr FindSpecialBuffInfoByNameBP(class FName CodeName);
	static const TArray<struct FSpecialBuffInfo> GetSpecialBuffInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SpecialBuffInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SpecialBuffInfoAsset")
	}
	static class USpecialBuffInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecialBuffInfoAsset>();
	}
};
DUMPER7_ASSERTS_USpecialBuffInfoAsset;

// Class ProjectPContentInfo.SubLevelOnOffInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USubLevelOnOffInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FSubLevelOnOffInfo& Info);
	static const class FName GetCondition(const struct FSubLevelOnOffInfo& Info);
	static class FString GetMapResource(const struct FSubLevelOnOffInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SubLevelOnOffInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SubLevelOnOffInfoFuncLibrary")
	}
	static class USubLevelOnOffInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubLevelOnOffInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USubLevelOnOffInfoFuncLibrary;

// Class ProjectPContentInfo.SubLevelOnOffInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) USubLevelOnOffInfoAsset final : public UContentInfoAsset
{
public:
	struct FSubLevelOnOffInfoDB                   ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FSubLevelOnOffInfo> GetSubLevelOnOffInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SubLevelOnOffInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SubLevelOnOffInfoAsset")
	}
	static class USubLevelOnOffInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubLevelOnOffInfoAsset>();
	}
};
DUMPER7_ASSERTS_USubLevelOnOffInfoAsset;

// Class ProjectPContentInfo.SubtitleInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class USubtitleInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FSubtitleInfoPtr& Ptr);
	static int32 GetDuration(const struct FSubtitleInfoPtr& Ptr);
	static int32 GetStartTime(const struct FSubtitleInfoPtr& Ptr);
	static const class FName GetTextCodeName(const struct FSubtitleInfoPtr& Ptr);
	static bool IsValid(const struct FSubtitleInfoPtr& Ptr);
	static void IsValidBranch(const struct FSubtitleInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SubtitleInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SubtitleInfoPtrFuncLibrary")
	}
	static class USubtitleInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubtitleInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_USubtitleInfoPtrFuncLibrary;

// Class ProjectPContentInfo.SubtitleInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) USubtitleInfoAsset final : public UContentInfoAsset
{
public:
	struct FSubtitleInfoDB                        ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FSubtitleInfo> GetSubtitleInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SubtitleInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SubtitleInfoAsset")
	}
	static class USubtitleInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubtitleInfoAsset>();
	}
};
DUMPER7_ASSERTS_USubtitleInfoAsset;

// Class ProjectPContentInfo.TeleportObjectInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UTeleportObjectInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FTeleportObjectInfo& Info);
	static const class FName GetCommandArrival(const struct FTeleportObjectInfo& Info);
	static const class FName GetCommandDeparture(const struct FTeleportObjectInfo& Info);
	static class FString GetConditionFailMsg(const struct FTeleportObjectInfo& Info);
	static const class FName GetConditionFailMsgCn(const struct FTeleportObjectInfo& Info);
	static class FText GetConditionFailMsgLocalize(const struct FTeleportObjectInfo& Info);
	static const class FName GetExitPortal(const struct FTeleportObjectInfo& Info);
	static class FString GetLoadingCharpter(const struct FTeleportObjectInfo& Info);
	static const TSoftObjectPtr<class UObject> GetLoadingImage(const struct FTeleportObjectInfo& Info);
	static class FString GetLocalTextName(const struct FTeleportObjectInfo& Info);
	static const class FName GetLocalTextNameCn(const struct FTeleportObjectInfo& Info);
	static class FText GetLocalTextNameLocalize(const struct FTeleportObjectInfo& Info);
	static const class FName GetLocationCodeName(const struct FTeleportObjectInfo& Info);
	static const class FName GetLocationHiddenCondition(const struct FTeleportObjectInfo& Info);
	static bool GetPortalLocationVisible(const struct FTeleportObjectInfo& Info);
	static const class FName GetPortalSequenceArrival(const struct FTeleportObjectInfo& Info);
	static const class FName GetPortalSequenceDeparture(const struct FTeleportObjectInfo& Info);
	static const class FName GetPotralCondition(const struct FTeleportObjectInfo& Info);
	static const class FName GetProb(const struct FTeleportObjectInfo& Info);
	static ELStargazerType GetStargazerType(const struct FTeleportObjectInfo& Info);
	static const class FName GetTalkerCodeName(const struct FTeleportObjectInfo& Info);
	static ELTeleportType GetTeleportType(const struct FTeleportObjectInfo& Info);
	static bool GetTorsioncoilActivate(const struct FTeleportObjectInfo& Info);
	static int32 GetTorsioncoilCategory(const struct FTeleportObjectInfo& Info);
	static int32 GetTorsioncoilSet(const struct FTeleportObjectInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TeleportObjectInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TeleportObjectInfoFuncLibrary")
	}
	static class UTeleportObjectInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTeleportObjectInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UTeleportObjectInfoFuncLibrary;

// Class ProjectPContentInfo.TeleportObjectInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UTeleportObjectInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FTeleportObjectInfoPtr& Ptr);
	static const class FName GetCommandArrival(const struct FTeleportObjectInfoPtr& Ptr);
	static const class FName GetCommandDeparture(const struct FTeleportObjectInfoPtr& Ptr);
	static class FString GetConditionFailMsg(const struct FTeleportObjectInfoPtr& Ptr);
	static const class FName GetConditionFailMsgCn(const struct FTeleportObjectInfoPtr& Ptr);
	static class FText GetConditionFailMsgLocalize(const struct FTeleportObjectInfoPtr& Ptr);
	static const class FName GetExitPortal(const struct FTeleportObjectInfoPtr& Ptr);
	static class FString GetLoadingCharpter(const struct FTeleportObjectInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetLoadingImage(const struct FTeleportObjectInfoPtr& Ptr);
	static class FString GetLocalTextName(const struct FTeleportObjectInfoPtr& Ptr);
	static const class FName GetLocalTextNameCn(const struct FTeleportObjectInfoPtr& Ptr);
	static class FText GetLocalTextNameLocalize(const struct FTeleportObjectInfoPtr& Ptr);
	static const class FName GetLocationCodeName(const struct FTeleportObjectInfoPtr& Ptr);
	static const class FName GetLocationHiddenCondition(const struct FTeleportObjectInfoPtr& Ptr);
	static bool GetPortalLocationVisible(const struct FTeleportObjectInfoPtr& Ptr);
	static const class FName GetPortalSequenceArrival(const struct FTeleportObjectInfoPtr& Ptr);
	static const class FName GetPortalSequenceDeparture(const struct FTeleportObjectInfoPtr& Ptr);
	static const class FName GetPotralCondition(const struct FTeleportObjectInfoPtr& Ptr);
	static const class FName GetProb(const struct FTeleportObjectInfoPtr& Ptr);
	static ELStargazerType GetStargazerType(const struct FTeleportObjectInfoPtr& Ptr);
	static const class FName GetTalkerCodeName(const struct FTeleportObjectInfoPtr& Ptr);
	static ELTeleportType GetTeleportType(const struct FTeleportObjectInfoPtr& Ptr);
	static bool GetTorsioncoilActivate(const struct FTeleportObjectInfoPtr& Ptr);
	static int32 GetTorsioncoilCategory(const struct FTeleportObjectInfoPtr& Ptr);
	static int32 GetTorsioncoilSet(const struct FTeleportObjectInfoPtr& Ptr);
	static bool IsValid(const struct FTeleportObjectInfoPtr& Ptr);
	static void IsValidBranch(const struct FTeleportObjectInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TeleportObjectInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TeleportObjectInfoPtrFuncLibrary")
	}
	static class UTeleportObjectInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTeleportObjectInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UTeleportObjectInfoPtrFuncLibrary;

// Class ProjectPContentInfo.TeleportObjectInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UTeleportObjectInfoAsset final : public UContentInfoAsset
{
public:
	struct FTeleportObjectInfoDB                  ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FTeleportObjectInfoPtr FindTeleportObjectInfoByNameBP(class FName CodeName);
	static const TArray<struct FTeleportObjectInfo> GetTeleportObjectInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TeleportObjectInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TeleportObjectInfoAsset")
	}
	static class UTeleportObjectInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTeleportObjectInfoAsset>();
	}
};
DUMPER7_ASSERTS_UTeleportObjectInfoAsset;

// Class ProjectPContentInfo.TitleSetInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UTitleSetInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FTitleSetInfo& Info);
	static const class FName GetOpenLevel(const struct FTitleSetInfo& Info);
	static int32 GetPriority(const struct FTitleSetInfo& Info);
	static const class FName GetSetCondition(const struct FTitleSetInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TitleSetInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TitleSetInfoFuncLibrary")
	}
	static class UTitleSetInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTitleSetInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UTitleSetInfoFuncLibrary;

// Class ProjectPContentInfo.TitleSetInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UTitleSetInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FTitleSetInfoPtr& Ptr);
	static const class FName GetOpenLevel(const struct FTitleSetInfoPtr& Ptr);
	static int32 GetPriority(const struct FTitleSetInfoPtr& Ptr);
	static const class FName GetSetCondition(const struct FTitleSetInfoPtr& Ptr);
	static bool IsValid(const struct FTitleSetInfoPtr& Ptr);
	static void IsValidBranch(const struct FTitleSetInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TitleSetInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TitleSetInfoPtrFuncLibrary")
	}
	static class UTitleSetInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTitleSetInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UTitleSetInfoPtrFuncLibrary;

// Class ProjectPContentInfo.TitleInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UTitleInfoAsset final : public UContentInfoAsset
{
public:
	struct FTitleInfoDB                           ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FTitleSetInfoPtr FindTitleSetInfoByNameBP(class FName CodeName);
	static const TArray<struct FTitleSetInfo> GetTitleSetInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TitleInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TitleInfoAsset")
	}
	static class UTitleInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTitleInfoAsset>();
	}
};
DUMPER7_ASSERTS_UTitleInfoAsset;

// Class ProjectPContentInfo.TutorialInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UTutorialInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetAfterCommandExec(const struct FTutorialInfo& Info);
	static bool GetBattlePending(const struct FTutorialInfo& Info);
	static const class FName GetCodeName(const struct FTutorialInfo& Info);
	static bool GetDefaultCooltimeApplied(const struct FTutorialInfo& Info);
	static const TArray<struct FGeneralCallBackEventInfo> GetEndTriggerArray(const struct FTutorialInfo& Info);
	static bool GetGamePause(const struct FTutorialInfo& Info);
	static const TSoftObjectPtr<class UObject> GetImage(const struct FTutorialInfo& Info);
	static int32 GetListIndex(const struct FTutorialInfo& Info);
	static bool GetListOn(const struct FTutorialInfo& Info);
	static ELTutorialListOnConditionType GetListOnCondition(const struct FTutorialInfo& Info);
	static class FString GetLocalTextDescription(const struct FTutorialInfo& Info);
	static const class FName GetLocalTextDescriptionCn(const struct FTutorialInfo& Info);
	static class FText GetLocalTextDescriptionLocalize(const struct FTutorialInfo& Info);
	static class FString GetLocalTextTitle(const struct FTutorialInfo& Info);
	static const class FName GetLocalTextTitleCn(const struct FTutorialInfo& Info);
	static class FText GetLocalTextTitleLocalize(const struct FTutorialInfo& Info);
	static const class FName GetOpenUi(const struct FTutorialInfo& Info);
	static int32 GetPlayCount(const struct FTutorialInfo& Info);
	static ELTutorialPlayCountAssignType GetPlayCountAssign(const struct FTutorialInfo& Info);
	static const TArray<struct FGeneralCallBackEventInfo> GetPlayCountAssignTriggerArray(const struct FTutorialInfo& Info);
	static float GetPlayCountCooltime(const struct FTutorialInfo& Info);
	static const class FName GetPrecedentTutorial(const struct FTutorialInfo& Info);
	static int32 GetPriority(const struct FTutorialInfo& Info);
	static const TArray<struct FGeneralConditionInfo> GetStartConditionArray(const struct FTutorialInfo& Info);
	static bool GetStartConditionOr(const struct FTutorialInfo& Info);
	static float GetStartDelayTime(const struct FTutorialInfo& Info);
	static const TArray<struct FGeneralCallBackEventInfo> GetStartTriggerArray(const struct FTutorialInfo& Info);
	static int32 GetStep(const struct FTutorialInfo& Info);
	static float GetWidgetTime(const struct FTutorialInfo& Info);
	static ELTutorialWidgetType GetWidgetType(const struct FTutorialInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TutorialInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TutorialInfoFuncLibrary")
	}
	static class UTutorialInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTutorialInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UTutorialInfoFuncLibrary;

// Class ProjectPContentInfo.TutorialInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UTutorialInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetAfterCommandExec(const struct FTutorialInfoPtr& Ptr);
	static bool GetBattlePending(const struct FTutorialInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FTutorialInfoPtr& Ptr);
	static bool GetDefaultCooltimeApplied(const struct FTutorialInfoPtr& Ptr);
	static const TArray<struct FGeneralCallBackEventInfo> GetEndTriggerArray(const struct FTutorialInfoPtr& Ptr);
	static bool GetGamePause(const struct FTutorialInfoPtr& Ptr);
	static const TSoftObjectPtr<class UObject> GetImage(const struct FTutorialInfoPtr& Ptr);
	static int32 GetListIndex(const struct FTutorialInfoPtr& Ptr);
	static bool GetListOn(const struct FTutorialInfoPtr& Ptr);
	static ELTutorialListOnConditionType GetListOnCondition(const struct FTutorialInfoPtr& Ptr);
	static class FString GetLocalTextDescription(const struct FTutorialInfoPtr& Ptr);
	static const class FName GetLocalTextDescriptionCn(const struct FTutorialInfoPtr& Ptr);
	static class FText GetLocalTextDescriptionLocalize(const struct FTutorialInfoPtr& Ptr);
	static class FString GetLocalTextTitle(const struct FTutorialInfoPtr& Ptr);
	static const class FName GetLocalTextTitleCn(const struct FTutorialInfoPtr& Ptr);
	static class FText GetLocalTextTitleLocalize(const struct FTutorialInfoPtr& Ptr);
	static const class FName GetOpenUi(const struct FTutorialInfoPtr& Ptr);
	static int32 GetPlayCount(const struct FTutorialInfoPtr& Ptr);
	static ELTutorialPlayCountAssignType GetPlayCountAssign(const struct FTutorialInfoPtr& Ptr);
	static const TArray<struct FGeneralCallBackEventInfo> GetPlayCountAssignTriggerArray(const struct FTutorialInfoPtr& Ptr);
	static float GetPlayCountCooltime(const struct FTutorialInfoPtr& Ptr);
	static const class FName GetPrecedentTutorial(const struct FTutorialInfoPtr& Ptr);
	static int32 GetPriority(const struct FTutorialInfoPtr& Ptr);
	static const TArray<struct FGeneralConditionInfo> GetStartConditionArray(const struct FTutorialInfoPtr& Ptr);
	static bool GetStartConditionOr(const struct FTutorialInfoPtr& Ptr);
	static float GetStartDelayTime(const struct FTutorialInfoPtr& Ptr);
	static const TArray<struct FGeneralCallBackEventInfo> GetStartTriggerArray(const struct FTutorialInfoPtr& Ptr);
	static int32 GetStep(const struct FTutorialInfoPtr& Ptr);
	static float GetWidgetTime(const struct FTutorialInfoPtr& Ptr);
	static ELTutorialWidgetType GetWidgetType(const struct FTutorialInfoPtr& Ptr);
	static bool IsValid(const struct FTutorialInfoPtr& Ptr);
	static void IsValidBranch(const struct FTutorialInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TutorialInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TutorialInfoPtrFuncLibrary")
	}
	static class UTutorialInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTutorialInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UTutorialInfoPtrFuncLibrary;

// Class ProjectPContentInfo.TutorialInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UTutorialInfoAsset final : public UContentInfoAsset
{
public:
	struct FTutorialInfoDB                        ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FTutorialInfo> GetTutorialInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TutorialInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TutorialInfoAsset")
	}
	static class UTutorialInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTutorialInfoAsset>();
	}
};
DUMPER7_ASSERTS_UTutorialInfoAsset;

// Class ProjectPContentInfo.WeaponAnimStateInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UWeaponAnimStateInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FWeaponAnimStateInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WeaponAnimStateInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WeaponAnimStateInfoFuncLibrary")
	}
	static class UWeaponAnimStateInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponAnimStateInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UWeaponAnimStateInfoFuncLibrary;

// Class ProjectPContentInfo.WeaponAnimStateInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UWeaponAnimStateInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FWeaponAnimStateInfoPtr& Ptr);
	static bool IsValid(const struct FWeaponAnimStateInfoPtr& Ptr);
	static void IsValidBranch(const struct FWeaponAnimStateInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WeaponAnimStateInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WeaponAnimStateInfoPtrFuncLibrary")
	}
	static class UWeaponAnimStateInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponAnimStateInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UWeaponAnimStateInfoPtrFuncLibrary;

// Class ProjectPContentInfo.WeaponInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UWeaponInfoAsset final : public UContentInfoAsset
{
public:
	struct FWeaponInfoDB                          ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FWeaponAnimStateInfoPtr FindWeaponAnimStateInfoByNameBP(class FName CodeName);
	static const TArray<struct FWeaponAnimStateInfo> GetWeaponAnimStateInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WeaponInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WeaponInfoAsset")
	}
	static class UWeaponInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponInfoAsset>();
	}
};
DUMPER7_ASSERTS_UWeaponInfoAsset;

// Class ProjectPContentInfo.WeatherInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UWeatherInfoFuncLibrary final : public UObject
{
public:
	static int32 GetChangeTime(const struct FWeatherInfo& Info);
	static const class FName GetCodeName(const struct FWeatherInfo& Info);
	static ELLightScenarioType GetLightScenarioType(const struct FWeatherInfo& Info);
	static class FString GetLocalTextName(const struct FWeatherInfo& Info);
	static const class FName GetLocalTextNameCn(const struct FWeatherInfo& Info);
	static class FText GetLocalTextNameLocalize(const struct FWeatherInfo& Info);
	static ELTimeZoneType GetTimeZoneType(const struct FWeatherInfo& Info);
	static ELWeatherType GetWeatherType(const struct FWeatherInfo& Info);
	static ELWorldZoneType GetWorldZoneType(const struct FWeatherInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WeatherInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WeatherInfoFuncLibrary")
	}
	static class UWeatherInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeatherInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UWeatherInfoFuncLibrary;

// Class ProjectPContentInfo.WeatherInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UWeatherInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetChangeTime(const struct FWeatherInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FWeatherInfoPtr& Ptr);
	static ELLightScenarioType GetLightScenarioType(const struct FWeatherInfoPtr& Ptr);
	static class FString GetLocalTextName(const struct FWeatherInfoPtr& Ptr);
	static const class FName GetLocalTextNameCn(const struct FWeatherInfoPtr& Ptr);
	static class FText GetLocalTextNameLocalize(const struct FWeatherInfoPtr& Ptr);
	static ELTimeZoneType GetTimeZoneType(const struct FWeatherInfoPtr& Ptr);
	static ELWeatherType GetWeatherType(const struct FWeatherInfoPtr& Ptr);
	static ELWorldZoneType GetWorldZoneType(const struct FWeatherInfoPtr& Ptr);
	static bool IsValid(const struct FWeatherInfoPtr& Ptr);
	static void IsValidBranch(const struct FWeatherInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WeatherInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WeatherInfoPtrFuncLibrary")
	}
	static class UWeatherInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeatherInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UWeatherInfoPtrFuncLibrary;

// Class ProjectPContentInfo.WeatherChangeEventInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UWeatherChangeEventInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetChangeCondition(const struct FWeatherChangeEventInfo& Info);
	static const class FName GetCodeName(const struct FWeatherChangeEventInfo& Info);
	static const class FName GetMovePersistentLevel(const struct FWeatherChangeEventInfo& Info);
	static const class FName GetNextWeather(const struct FWeatherChangeEventInfo& Info);
	static const class FName GetPrevWeather(const struct FWeatherChangeEventInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WeatherChangeEventInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WeatherChangeEventInfoFuncLibrary")
	}
	static class UWeatherChangeEventInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeatherChangeEventInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UWeatherChangeEventInfoFuncLibrary;

// Class ProjectPContentInfo.WeatherChangeEventInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UWeatherChangeEventInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetChangeCondition(const struct FWeatherChangeEventInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FWeatherChangeEventInfoPtr& Ptr);
	static const class FName GetMovePersistentLevel(const struct FWeatherChangeEventInfoPtr& Ptr);
	static const class FName GetNextWeather(const struct FWeatherChangeEventInfoPtr& Ptr);
	static const class FName GetPrevWeather(const struct FWeatherChangeEventInfoPtr& Ptr);
	static bool IsValid(const struct FWeatherChangeEventInfoPtr& Ptr);
	static void IsValidBranch(const struct FWeatherChangeEventInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WeatherChangeEventInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WeatherChangeEventInfoPtrFuncLibrary")
	}
	static class UWeatherChangeEventInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeatherChangeEventInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UWeatherChangeEventInfoPtrFuncLibrary;

// Class ProjectPContentInfo.WeatherInfoAsset
// 0x0108 (0x0180 - 0x0078)
class alignas(0x10) UWeatherInfoAsset final : public UContentInfoAsset
{
public:
	struct FWeatherInfoDB                         ContentInfoDB;                                     // 0x0078(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FWeatherChangeEventInfoPtr FindWeatherChangeEventInfoByNameBP(class FName CodeName);
	static struct FWeatherInfoPtr FindWeatherInfoByNameBP(class FName CodeName);
	static const TArray<struct FWeatherChangeEventInfo> GetWeatherChangeEventInfoArrayBP();
	static const TArray<struct FWeatherInfo> GetWeatherInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WeatherInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WeatherInfoAsset")
	}
	static class UWeatherInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeatherInfoAsset>();
	}
};
DUMPER7_ASSERTS_UWeatherInfoAsset;

// Class ProjectPContentInfo.WeightPenaltyInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UWeightPenaltyInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetAdvantageAbnormalstate(const struct FWeightPenaltyInfo& Info);
	static const class FName GetGroupCodeName(const struct FWeightPenaltyInfo& Info);
	static const class FName GetIndex(const struct FWeightPenaltyInfo& Info);
	static const class FName GetPanaltyAbnormalstate(const struct FWeightPenaltyInfo& Info);
	static int32 GetRunSpeedBack(const struct FWeightPenaltyInfo& Info);
	static int32 GetRunSpeedFront(const struct FWeightPenaltyInfo& Info);
	static int32 GetRunSpeedSide(const struct FWeightPenaltyInfo& Info);
	static int32 GetSprintSpeed(const struct FWeightPenaltyInfo& Info);
	static int32 GetWalkSpeedBack(const struct FWeightPenaltyInfo& Info);
	static int32 GetWalkSpeedFront(const struct FWeightPenaltyInfo& Info);
	static int32 GetWalkSpeedSide(const struct FWeightPenaltyInfo& Info);
	static const class FName GetWaringMsg(const struct FWeightPenaltyInfo& Info);
	static float GetWeightRateUpper(const struct FWeightPenaltyInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WeightPenaltyInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WeightPenaltyInfoFuncLibrary")
	}
	static class UWeightPenaltyInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeightPenaltyInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UWeightPenaltyInfoFuncLibrary;

// Class ProjectPContentInfo.WeightPenaltyInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UWeightPenaltyInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetAdvantageAbnormalstate(const struct FWeightPenaltyInfoPtr& Ptr);
	static const class FName GetGroupCodeName(const struct FWeightPenaltyInfoPtr& Ptr);
	static const class FName GetIndex(const struct FWeightPenaltyInfoPtr& Ptr);
	static const class FName GetPanaltyAbnormalstate(const struct FWeightPenaltyInfoPtr& Ptr);
	static int32 GetRunSpeedBack(const struct FWeightPenaltyInfoPtr& Ptr);
	static int32 GetRunSpeedFront(const struct FWeightPenaltyInfoPtr& Ptr);
	static int32 GetRunSpeedSide(const struct FWeightPenaltyInfoPtr& Ptr);
	static int32 GetSprintSpeed(const struct FWeightPenaltyInfoPtr& Ptr);
	static int32 GetWalkSpeedBack(const struct FWeightPenaltyInfoPtr& Ptr);
	static int32 GetWalkSpeedFront(const struct FWeightPenaltyInfoPtr& Ptr);
	static int32 GetWalkSpeedSide(const struct FWeightPenaltyInfoPtr& Ptr);
	static const class FName GetWaringMsg(const struct FWeightPenaltyInfoPtr& Ptr);
	static float GetWeightRateUpper(const struct FWeightPenaltyInfoPtr& Ptr);
	static bool IsValid(const struct FWeightPenaltyInfoPtr& Ptr);
	static void IsValidBranch(const struct FWeightPenaltyInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WeightPenaltyInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WeightPenaltyInfoPtrFuncLibrary")
	}
	static class UWeightPenaltyInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeightPenaltyInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UWeightPenaltyInfoPtrFuncLibrary;

// Class ProjectPContentInfo.WeightPenaltyInfoAsset
// 0x0058 (0x00D0 - 0x0078)
class alignas(0x10) UWeightPenaltyInfoAsset final : public UContentInfoAsset
{
public:
	struct FWeightPenaltyInfoDB                   ContentInfoDB;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FWeightPenaltyInfo> GetWeightPenaltyInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WeightPenaltyInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WeightPenaltyInfoAsset")
	}
	static class UWeightPenaltyInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeightPenaltyInfoAsset>();
	}
};
DUMPER7_ASSERTS_UWeightPenaltyInfoAsset;

// Class ProjectPContentInfo.WorldEventInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UWorldEventInfoFuncLibrary final : public UObject
{
public:
	static int32 GetCallbackCount(const struct FWorldEventInfo& Info);
	static class FString GetCallbackEventParam(const struct FWorldEventInfo& Info);
	static class FString GetCallbackEventParam2(const struct FWorldEventInfo& Info);
	static ELCallBackEventType GetCallbackEventType(const struct FWorldEventInfo& Info);
	static const class FName GetCodeName(const struct FWorldEventInfo& Info);
	static const class FName GetCommandsetCodeName(const struct FWorldEventInfo& Info);
	static const class FName GetConditionCodename(const struct FWorldEventInfo& Info);
	static int32 GetDetailIndex(const struct FWorldEventInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldEventInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldEventInfoFuncLibrary")
	}
	static class UWorldEventInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldEventInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UWorldEventInfoFuncLibrary;

// Class ProjectPContentInfo.WorldEventInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UWorldEventInfoPtrFuncLibrary final : public UObject
{
public:
	static int32 GetCallbackCount(const struct FWorldEventInfoPtr& Ptr);
	static class FString GetCallbackEventParam(const struct FWorldEventInfoPtr& Ptr);
	static class FString GetCallbackEventParam2(const struct FWorldEventInfoPtr& Ptr);
	static ELCallBackEventType GetCallbackEventType(const struct FWorldEventInfoPtr& Ptr);
	static const class FName GetCodeName(const struct FWorldEventInfoPtr& Ptr);
	static const class FName GetCommandsetCodeName(const struct FWorldEventInfoPtr& Ptr);
	static const class FName GetConditionCodename(const struct FWorldEventInfoPtr& Ptr);
	static int32 GetDetailIndex(const struct FWorldEventInfoPtr& Ptr);
	static bool IsValid(const struct FWorldEventInfoPtr& Ptr);
	static void IsValidBranch(const struct FWorldEventInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldEventInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldEventInfoPtrFuncLibrary")
	}
	static class UWorldEventInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldEventInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UWorldEventInfoPtrFuncLibrary;

// Class ProjectPContentInfo.DefaultPCWorldEventListInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDefaultPCWorldEventListInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetWorldEventCodeName(const struct FDefaultPCWorldEventListInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DefaultPCWorldEventListInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DefaultPCWorldEventListInfoFuncLibrary")
	}
	static class UDefaultPCWorldEventListInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDefaultPCWorldEventListInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDefaultPCWorldEventListInfoFuncLibrary;

// Class ProjectPContentInfo.DefaultPCWorldEventListInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UDefaultPCWorldEventListInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetWorldEventCodeName(const struct FDefaultPCWorldEventListInfoPtr& Ptr);
	static bool IsValid(const struct FDefaultPCWorldEventListInfoPtr& Ptr);
	static void IsValidBranch(const struct FDefaultPCWorldEventListInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("DefaultPCWorldEventListInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"DefaultPCWorldEventListInfoPtrFuncLibrary")
	}
	static class UDefaultPCWorldEventListInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDefaultPCWorldEventListInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UDefaultPCWorldEventListInfoPtrFuncLibrary;

// Class ProjectPContentInfo.WorldEventInfoAsset
// 0x0068 (0x00E0 - 0x0078)
class alignas(0x10) UWorldEventInfoAsset final : public UContentInfoAsset
{
public:
	struct FWorldEventInfoDB                      ContentInfoDB;                                     // 0x0078(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static const TArray<struct FDefaultPCWorldEventListInfo> GetDefault_PC_WorldEventListInfoArrayBP();
	static const TArray<struct FWorldEventInfo> GetWorldEventInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldEventInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldEventInfoAsset")
	}
	static class UWorldEventInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldEventInfoAsset>();
	}
};
DUMPER7_ASSERTS_UWorldEventInfoAsset;

// Class ProjectPContentInfo.WorldRuleInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UWorldRuleInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FWorldRuleInfo& Info);
	static float GetToughConstant(const struct FWorldRuleInfo& Info);
	static float GetToughRestoreStopTime(const struct FWorldRuleInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldRuleInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldRuleInfoFuncLibrary")
	}
	static class UWorldRuleInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldRuleInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UWorldRuleInfoFuncLibrary;

// Class ProjectPContentInfo.WorldRuleInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UWorldRuleInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FWorldRuleInfoPtr& Ptr);
	static float GetToughConstant(const struct FWorldRuleInfoPtr& Ptr);
	static float GetToughRestoreStopTime(const struct FWorldRuleInfoPtr& Ptr);
	static bool IsValid(const struct FWorldRuleInfoPtr& Ptr);
	static void IsValidBranch(const struct FWorldRuleInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldRuleInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldRuleInfoPtrFuncLibrary")
	}
	static class UWorldRuleInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldRuleInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UWorldRuleInfoPtrFuncLibrary;

// Class ProjectPContentInfo.WorldRuleInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UWorldRuleInfoAsset final : public UContentInfoAsset
{
public:
	struct FWorldRuleInfoDB                       ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FWorldRuleInfoPtr FindWorldRuleInfoByNameBP(class FName CodeName);
	static const TArray<struct FWorldRuleInfo> GetWorldRuleInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldRuleInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldRuleInfoAsset")
	}
	static class UWorldRuleInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldRuleInfoAsset>();
	}
};
DUMPER7_ASSERTS_UWorldRuleInfoAsset;

// Class ProjectPContentInfo.WorldZoneInfoFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UWorldZoneInfoFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FWorldZoneInfo& Info);
	static const class FName GetLightScenarioAm(const struct FWorldZoneInfo& Info);
	static const class FName GetLightScenarioPm(const struct FWorldZoneInfo& Info);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldZoneInfoFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldZoneInfoFuncLibrary")
	}
	static class UWorldZoneInfoFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldZoneInfoFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UWorldZoneInfoFuncLibrary;

// Class ProjectPContentInfo.WorldZoneInfoPtrFuncLibrary
// 0x0000 (0x0028 - 0x0028)
class UWorldZoneInfoPtrFuncLibrary final : public UObject
{
public:
	static const class FName GetCodeName(const struct FWorldZoneInfoPtr& Ptr);
	static const class FName GetLightScenarioAm(const struct FWorldZoneInfoPtr& Ptr);
	static const class FName GetLightScenarioPm(const struct FWorldZoneInfoPtr& Ptr);
	static bool IsValid(const struct FWorldZoneInfoPtr& Ptr);
	static void IsValidBranch(const struct FWorldZoneInfoPtr& Ptr, EContentInfoExecutePin* Branches);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldZoneInfoPtrFuncLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldZoneInfoPtrFuncLibrary")
	}
	static class UWorldZoneInfoPtrFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldZoneInfoPtrFuncLibrary>();
	}
};
DUMPER7_ASSERTS_UWorldZoneInfoPtrFuncLibrary;

// Class ProjectPContentInfo.WorldZoneInfoAsset
// 0x00A8 (0x0120 - 0x0078)
class alignas(0x10) UWorldZoneInfoAsset final : public UContentInfoAsset
{
public:
	struct FWorldZoneInfoDB                       ContentInfoDB;                                     // 0x0078(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FWorldZoneInfoPtr FindWorldZoneInfoByNameBP(class FName CodeName);
	static const TArray<struct FWorldZoneInfo> GetWorldZoneInfoArrayBP();
	static void StaticParseInfo();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldZoneInfoAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldZoneInfoAsset")
	}
	static class UWorldZoneInfoAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldZoneInfoAsset>();
	}
};
DUMPER7_ASSERTS_UWorldZoneInfoAsset;

}

