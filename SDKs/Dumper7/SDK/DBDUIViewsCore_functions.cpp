#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIViewsCore

#include "Basic.hpp"

#include "DBDUIViewsCore_classes.hpp"
#include "DBDUIViewsCore_parameters.hpp"


namespace SDK
{

// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetLoadoutPartIcon
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        icon                                                   (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutPartWidget::SetLoadoutPartIcon(TSoftObjectPtr<class UTexture2D> icon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutPartWidget", "SetLoadoutPartIcon");

	Params::CoreBaseLoadoutPartWidget_SetLoadoutPartIcon Parms{};

	Parms.icon = icon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetLoadoutPartRarity
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EItemRarity                             rarity                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutPartWidget::SetLoadoutPartRarity(EItemRarity rarity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutPartWidget", "SetLoadoutPartRarity");

	Params::CoreBaseLoadoutPartWidget_SetLoadoutPartRarity Parms{};

	Parms.rarity = rarity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseLoadoutPartWidget.SetLoadoutStackCount
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   stackCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseLoadoutPartWidget::SetLoadoutStackCount(int32 stackCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseLoadoutPartWidget", "SetLoadoutStackCount");

	Params::CoreBaseLoadoutPartWidget_SetLoadoutStackCount Parms{};

	Parms.stackCount = stackCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.DeregisterFromInput
// (Native, Public, BlueprintCallable)

void UCoreBaseUserWidget::DeregisterFromInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "DeregisterFromInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.OnControlModeChangedBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// EControlMode                            controlMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseUserWidget::OnControlModeChangedBP(EControlMode controlMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "OnControlModeChangedBP");

	Params::CoreBaseUserWidget_OnControlModeChangedBP Parms{};

	Parms.controlMode = controlMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreBaseUserWidget.PlayAnimationByName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             animName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   starttime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   loopcount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUMGSequencePlayMode                    playMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   playbackspeed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreBaseUserWidget::PlayAnimationByName(class FName animName, float starttime, int32 loopcount, EUMGSequencePlayMode playMode, float playbackspeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "PlayAnimationByName");

	Params::CoreBaseUserWidget_PlayAnimationByName Parms{};

	Parms.animName = animName;
	Parms.starttime = starttime;
	Parms.loopcount = loopcount;
	Parms.playMode = playMode;
	Parms.playbackspeed = playbackspeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.RegisterForInput
// (Native, Public, BlueprintCallable)

void UCoreBaseUserWidget::RegisterForInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "RegisterForInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.StopAnimationByName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             animName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreBaseUserWidget::StopAnimationByName(class FName animName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "StopAnimationByName");

	Params::CoreBaseUserWidget_StopAnimationByName Parms{};

	Parms.animName = animName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.UpdateScale
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBaseUserWidget::UpdateScale(float scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "UpdateScale");

	Params::CoreBaseUserWidget_UpdateScale Parms{};

	Parms.scale = scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseUserWidget.GetAnimationByName
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             animName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidgetAnimation*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidgetAnimation* UCoreBaseUserWidget::GetAnimationByName(class FName animName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseUserWidget", "GetAnimationByName");

	Params::CoreBaseUserWidget_GetAnimationByName Parms{};

	Parms.animName = animName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnAlignmentChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// ETextJustify                            newAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnAlignmentChanged(ETextJustify newAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnAlignmentChanged");

	Params::CoreButtonWidget_OnAlignmentChanged Parms{};

	Parms.newAlignment = newAlignment;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnClicked
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnEnabledChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    isEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::OnEnabledChanged(bool isEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnEnabledChanged");

	Params::CoreButtonWidget_OnEnabledChanged Parms{};

	Parms.isEnabled = isEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnHovered
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnHovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalClicked
// (Native, Protected)

void UCoreButtonWidget::OnInternalClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalHovered
// (Native, Protected)

void UCoreButtonWidget::OnInternalHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalPressed
// (Native, Protected)

void UCoreButtonWidget::OnInternalPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalReleased
// (Native, Protected)

void UCoreButtonWidget::OnInternalReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnInternalUnhovered
// (Native, Protected)

void UCoreButtonWidget::OnInternalUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnInternalUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.OnPressed
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnReleased
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreButtonWidget.OnUnhovered
// (Event, Protected, BlueprintEvent)

void UCoreButtonWidget::OnUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "OnUnhovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreButtonWidget.SetAdditionalIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        iconTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetAdditionalIcon(TSoftObjectPtr<class UTexture2D> iconTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetAdditionalIcon");

	Params::CoreButtonWidget_SetAdditionalIcon Parms{};

	Parms.iconTexture = iconTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETextJustify                            newAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetAlignment(ETextJustify newAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetAlignment");

	Params::CoreButtonWidget_SetAlignment Parms{};

	Parms.newAlignment = newAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetBackground
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UMaterialInstance> backgroundMaterial                                     (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetBackground(TSoftObjectPtr<class UMaterialInstance> backgroundMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetBackground");

	Params::CoreButtonWidget_SetBackground Parms{};

	Parms.backgroundMaterial = backgroundMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetChargeable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isChargeable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetChargeable(bool isChargeable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetChargeable");

	Params::CoreButtonWidget_SetChargeable Parms{};

	Parms.isChargeable = isChargeable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetClickable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isClickable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetClickable(bool isClickable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetClickable");

	Params::CoreButtonWidget_SetClickable Parms{};

	Parms.isClickable = isClickable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetEnabled(bool isEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetEnabled");

	Params::CoreButtonWidget_SetEnabled Parms{};

	Parms.isEnabled = isEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetHoldable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isHoldable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetHoldable(bool isHoldable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetHoldable");

	Params::CoreButtonWidget_SetHoldable Parms{};

	Parms.isHoldable = isHoldable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetHoverable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isHoverable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetHoverable(bool isHoverable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetHoverable");

	Params::CoreButtonWidget_SetHoverable Parms{};

	Parms.isHoverable = isHoverable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetLabel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      label                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetLabel(const class FText& label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetLabel");

	Params::CoreButtonWidget_SetLabel Parms{};

	Parms.label = std::move(label);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetPressable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isPressable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetPressable(bool isPressable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetPressable");

	Params::CoreButtonWidget_SetPressable Parms{};

	Parms.isPressable = isPressable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetRepeatable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isRepeatable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      repetitionDelayCurve                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetRepeatable(bool isRepeatable, class UCurveFloat* repetitionDelayCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetRepeatable");

	Params::CoreButtonWidget_SetRepeatable Parms{};

	Parms.isRepeatable = isRepeatable;
	Parms.repetitionDelayCurve = repetitionDelayCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.SetVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EButtonWidgetVisibility                 visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonWidget::SetVisible(EButtonWidgetVisibility visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "SetVisible");

	Params::CoreButtonWidget_SetVisible Parms{};

	Parms.visible = visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonWidget.GetHitzonePaintSpaceGeometry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGeometry                  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FGeometry UCoreButtonWidget::GetHitzonePaintSpaceGeometry() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "GetHitzonePaintSpaceGeometry");

	Params::CoreButtonWidget_GetHitzonePaintSpaceGeometry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonWidget.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonWidget::IsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonWidget", "IsEnabled");

	Params::CoreButtonWidget_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreGameManualCategoryButton.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FText&                      title                                                  (ConstParm, Parm, NativeAccessSpecifierPublic)
// const class FText&                      description                                            (ConstParm, Parm, NativeAccessSpecifierPublic)

void UCoreGameManualCategoryButton::SetText(const class FText& title, const class FText& description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualCategoryButton", "SetText");

	Params::CoreGameManualCategoryButton_SetText Parms{};

	Parms.title = std::move(title);
	Parms.description = std::move(description);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ArchiveCompendiumTooltipWidget.Reset
// (Final, Native, Public)

void UArchiveCompendiumTooltipWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveCompendiumTooltipWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ArchiveCompendiumTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FCompendiumButtonData&     tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UArchiveCompendiumTooltipWidget::SetTooltipData(const struct FCompendiumButtonData& tooltipViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveCompendiumTooltipWidget", "SetTooltipData");

	Params::ArchiveCompendiumTooltipWidget_SetTooltipData Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ArchiveNodeTooltipWidget.Reset
// (Final, Native, Public)

void UArchiveNodeTooltipWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveNodeTooltipWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.ArchiveNodeTooltipWidget.SetNodeType
// (Event, Public, BlueprintEvent)
// Parameters:
// EArchiveNodeType                        type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UArchiveNodeTooltipWidget::SetNodeType(EArchiveNodeType type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveNodeTooltipWidget", "SetNodeType");

	Params::ArchiveNodeTooltipWidget_SetNodeType Parms{};

	Parms.type = type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.ArchiveNodeTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FArchiveNodeViewData&      nodeViewData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UArchiveNodeTooltipWidget::SetTooltipData(const struct FArchiveNodeViewData& nodeViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveNodeTooltipWidget", "SetTooltipData");

	Params::ArchiveNodeTooltipWidget_SetTooltipData Parms{};

	Parms.nodeViewData = std::move(nodeViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AspectRatioBox.ClearAspectRatio
// (Final, Native, Public, BlueprintCallable)

void UAspectRatioBox::ClearAspectRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AspectRatioBox", "ClearAspectRatio");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AspectRatioBox.SetAspectRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   inAspectRatio                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAspectRatioBox::SetAspectRatio(float inAspectRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AspectRatioBox", "SetAspectRatio");

	Params::AspectRatioBox_SetAspectRatio Parms{};

	Parms.inAspectRatio = inAspectRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AspectRatioBoxSlot.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    inHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAspectRatioBoxSlot::SetHorizontalAlignment(EHorizontalAlignment inHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AspectRatioBoxSlot", "SetHorizontalAlignment");

	Params::AspectRatioBoxSlot_SetHorizontalAlignment Parms{};

	Parms.inHorizontalAlignment = inHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AspectRatioBoxSlot.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   inPadding                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UAspectRatioBoxSlot::SetPadding(const struct FMargin& inPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AspectRatioBoxSlot", "SetPadding");

	Params::AspectRatioBoxSlot_SetPadding Parms{};

	Parms.inPadding = std::move(inPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.AspectRatioBoxSlot.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      inVerticalAlignment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAspectRatioBoxSlot::SetVerticalAlignment(EVerticalAlignment inVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AspectRatioBoxSlot", "SetVerticalAlignment");

	Params::AspectRatioBoxSlot_SetVerticalAlignment Parms{};

	Parms.inVerticalAlignment = inVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CharacterTooltipWidget.SetDifficulty
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ECharacterDifficulty                    difficulty                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterTooltipWidget::SetDifficulty(ECharacterDifficulty difficulty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterTooltipWidget", "SetDifficulty");

	Params::CharacterTooltipWidget_SetDifficulty Parms{};

	Parms.difficulty = difficulty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CharacterTooltipWidget.SetLevel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterTooltipWidget::SetLevel(int32 level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterTooltipWidget", "SetLevel");

	Params::CharacterTooltipWidget_SetLevel Parms{};

	Parms.level = level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CharacterTooltipWidget.SetTooltipData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FCharacterTooltipViewData& characterViewData                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCharacterTooltipWidget::SetTooltipData(const struct FCharacterTooltipViewData& characterViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterTooltipWidget", "SetTooltipData");

	Params::CharacterTooltipWidget_SetTooltipData Parms{};

	Parms.characterViewData = std::move(characterViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.OnSelectedChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    isSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSelectableButtonWidget::OnSelectedChanged(bool isSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "OnSelectedChanged");

	Params::CoreSelectableButtonWidget_OnSelectedChanged Parms{};

	Parms.isSelected = isSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.SetSelectable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isSelectable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSelectableButtonWidget::SetSelectable(bool isSelectable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "SetSelectable");

	Params::CoreSelectableButtonWidget_SetSelectable Parms{};

	Parms.isSelectable = isSelectable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.SetSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSelectableButtonWidget::SetSelected(bool isSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "SetSelected");

	Params::CoreSelectableButtonWidget_SetSelected Parms{};

	Parms.isSelected = isSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.UpdateBackgroundSkin
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInterface*               skinMaterial                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreSelectableButtonWidget::UpdateBackgroundSkin(class UMaterialInterface* skinMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "UpdateBackgroundSkin");

	Params::CoreSelectableButtonWidget_UpdateBackgroundSkin Parms{};

	Parms.skinMaterial = skinMaterial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.IsSelectable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreSelectableButtonWidget::IsSelectable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "IsSelectable");

	Params::CoreSelectableButtonWidget_IsSelectable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreSelectableButtonWidget.IsSelected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreSelectableButtonWidget::IsSelected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSelectableButtonWidget", "IsSelected");

	Params::CoreSelectableButtonWidget_IsSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.ClearData
// (Final, Native, Public)

void UCoreArchiveChallengeReminderSlotWidget::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.Init
// (Final, Native, Public)
// Parameters:
// EPlayerRole                             role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::Init(EPlayerRole role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "Init");

	Params::CoreArchiveChallengeReminderSlotWidget_Init Parms{};

	Parms.role = role;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.InitVisualState
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreArchiveChallengeReminderSlotWidget::InitVisualState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "InitVisualState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchiveChallengeReminderViewData&data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::SetData(const struct FArchiveChallengeReminderViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "SetData");

	Params::CoreArchiveChallengeReminderSlotWidget_SetData Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SetQuestNodeHoverEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isHovered                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::SetQuestNodeHoverEffect(bool isHovered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "SetQuestNodeHoverEffect");

	Params::CoreArchiveChallengeReminderSlotWidget_SetQuestNodeHoverEffect Parms{};

	Parms.isHovered = isHovered;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SetSlotSelectorState
// (Final, Native, Public)
// Parameters:
// bool                                    isSelectorOpen                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::SetSlotSelectorState(bool isSelectorOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "SetSlotSelectorState");

	Params::CoreArchiveChallengeReminderSlotWidget_SetSlotSelectorState Parms{};

	Parms.isSelectorOpen = isSelectorOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.SwapChallenge
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FArchiveChallengeReminderViewData&data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::SwapChallenge(const struct FArchiveChallengeReminderViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "SwapChallenge");

	Params::CoreArchiveChallengeReminderSlotWidget_SwapChallenge Parms{};

	Parms.data = std::move(data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.UpdateActiveState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    playAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::UpdateActiveState(bool isActive, bool playAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "UpdateActiveState");

	Params::CoreArchiveChallengeReminderSlotWidget_UpdateActiveState Parms{};

	Parms.isActive = isActive;
	Parms.playAnimation = playAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.UpdateProgressBar
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::UpdateProgressBar(float progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "UpdateProgressBar");

	Params::CoreArchiveChallengeReminderSlotWidget_UpdateProgressBar Parms{};

	Parms.progress = progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveChallengeReminderSlotWidget.UpdateVisualState
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FArchiveChallengeReminderViewData&data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveChallengeReminderSlotWidget::UpdateVisualState(const struct FArchiveChallengeReminderViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveChallengeReminderSlotWidget", "UpdateVisualState");

	Params::CoreArchiveChallengeReminderSlotWidget_UpdateVisualState Parms{};

	Parms.data = std::move(data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.GetTomeId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCoreArchiveCompendiumButtonWidget::GetTomeId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "GetTomeId");

	Params::CoreArchiveCompendiumButtonWidget_GetTomeId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.OnButtonHovered
// (Final, Native, Protected, BlueprintCallable)

void UCoreArchiveCompendiumButtonWidget::OnButtonHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "OnButtonHovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.OnButtonUnhovered
// (Final, Native, Protected, BlueprintCallable)

void UCoreArchiveCompendiumButtonWidget::OnButtonUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "OnButtonUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.ResetVisuals
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreArchiveCompendiumButtonWidget::ResetVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "ResetVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetButtonData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCompendiumButtonData&     buttonData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumButtonWidget::SetButtonData(const struct FCompendiumButtonData& buttonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "SetButtonData");

	Params::CoreArchiveCompendiumButtonWidget_SetButtonData Parms{};

	Parms.buttonData = std::move(buttonData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetButtonVisual
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FCompendiumButtonData&     buttonData                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumButtonWidget::SetButtonVisual(const struct FCompendiumButtonData& buttonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "SetButtonVisual");

	Params::CoreArchiveCompendiumButtonWidget_SetButtonVisual Parms{};

	Parms.buttonData = std::move(buttonData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetGhostStory
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isGhostStory                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumButtonWidget::SetGhostStory(bool isGhostStory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "SetGhostStory");

	Params::CoreArchiveCompendiumButtonWidget_SetGhostStory Parms{};

	Parms.isGhostStory = isGhostStory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveCompendiumButtonWidget.SetLevelProgressionVisual
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   buttonLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EArchivesStoryLevelStatus               levelStatus                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumButtonWidget::SetLevelProgressionVisual(int32 buttonLevel, EArchivesStoryLevelStatus levelStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumButtonWidget", "SetLevelProgressionVisual");

	Params::CoreArchiveCompendiumButtonWidget_SetLevelProgressionVisual Parms{};

	Parms.buttonLevel = buttonLevel;
	Parms.levelStatus = levelStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreTabContentWidget.FadeInContent
// (Final, Native, Public, BlueprintCallable)

void UCoreTabContentWidget::FadeInContent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContentWidget", "FadeInContent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContentWidget.FadeOutContent
// (Final, Native, Public, BlueprintCallable)

void UCoreTabContentWidget::FadeOutContent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContentWidget", "FadeOutContent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContentWidget.ResetFade
// (Final, Native, Public, BlueprintCallable)

void UCoreTabContentWidget::ResetFade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContentWidget", "ResetFade");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContentWidget.StopFadeInTweening
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   opacityValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContentWidget::StopFadeInTweening(float opacityValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContentWidget", "StopFadeInTweening");

	Params::CoreTabContentWidget_StopFadeInTweening Parms{};

	Parms.opacityValue = opacityValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.CreateAndAddButtonToGrid
// (Final, Native, Private)
// Parameters:
// int32                                   index                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreArchiveCompendiumButtonWidget*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreArchiveCompendiumButtonWidget* UCoreArchiveCompendiumWidget::CreateAndAddButtonToGrid(int32 index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "CreateAndAddButtonToGrid");

	Params::CoreArchiveCompendiumWidget_CreateAndAddButtonToGrid Parms{};

	Parms.index = index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.CreateGhostStories
// (Final, Native, Private)
// Parameters:
// const int32                             currentStoryNum                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumWidget::CreateGhostStories(const int32 currentStoryNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "CreateGhostStories");

	Params::CoreArchiveCompendiumWidget_CreateGhostStories Parms{};

	Parms.currentStoryNum = currentStoryNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.OnPastStoryClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumWidget::OnPastStoryClicked(class UCoreButtonWidget* button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "OnPastStoryClicked");

	Params::CoreArchiveCompendiumWidget_OnPastStoryClicked Parms{};

	Parms.button = button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.Reset
// (Final, Native, Private)

void UCoreArchiveCompendiumWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.ResetScroll
// (Final, Native, Public, BlueprintCallable)

void UCoreArchiveCompendiumWidget::ResetScroll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "ResetScroll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveCompendiumWidget.SetGridSlot
// (Final, Native, Private)
// Parameters:
// class UGridSlot*                        gridSlot                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   index                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveCompendiumWidget::SetGridSlot(class UGridSlot* gridSlot, int32 index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveCompendiumWidget", "SetGridSlot");

	Params::CoreArchiveCompendiumWidget_SetGridSlot Parms{};

	Parms.gridSlot = gridSlot;
	Parms.index = index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.OnTextVisibilityChanged
// (Final, Native, Public, BlueprintCallable)

void UCoreArchiveJournalImageViewerWidget::OnTextVisibilityChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "OnTextVisibilityChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.OnVoiceOverAutoPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    autoplay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalImageViewerWidget::OnVoiceOverAutoPlay(bool autoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "OnVoiceOverAutoPlay");

	Params::CoreArchiveJournalImageViewerWidget_OnVoiceOverAutoPlay Parms{};

	Parms.autoplay = autoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.OnVoiceOverPlay
// (Final, Native, Public, BlueprintCallable)

void UCoreArchiveJournalImageViewerWidget::OnVoiceOverPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "OnVoiceOverPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FArchivesVignetteEntryViewData&data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              hasTitle                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              hasDescription                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalImageViewerWidget::SetData(const struct FArchivesVignetteEntryViewData& data, const bool hasTitle, const bool hasDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "SetData");

	Params::CoreArchiveJournalImageViewerWidget_SetData Parms{};

	Parms.data = std::move(data);
	Parms.hasTitle = hasTitle;
	Parms.hasDescription = hasDescription;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetScrollData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      journalEntryScrollPromptText                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalImageViewerWidget::SetScrollData(const class FText& journalEntryScrollPromptText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "SetScrollData");

	Params::CoreArchiveJournalImageViewerWidget_SetScrollData Parms{};

	Parms.journalEntryScrollPromptText = std::move(journalEntryScrollPromptText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetTextVisibilityInputText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      displayText                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      hideText                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalImageViewerWidget::SetTextVisibilityInputText(const class FText& displayText, const class FText& hideText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "SetTextVisibilityInputText");

	Params::CoreArchiveJournalImageViewerWidget_SetTextVisibilityInputText Parms{};

	Parms.displayText = std::move(displayText);
	Parms.hideText = std::move(hideText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalImageViewerWidget.SetVoiceOverText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      playVoiceOverText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      stopVoiceOverText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      autoplayVoiceOverText                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalImageViewerWidget::SetVoiceOverText(const class FText& playVoiceOverText, const class FText& stopVoiceOverText, const class FText& autoplayVoiceOverText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalImageViewerWidget", "SetVoiceOverText");

	Params::CoreArchiveJournalImageViewerWidget_SetVoiceOverText Parms{};

	Parms.playVoiceOverText = std::move(playVoiceOverText);
	Parms.stopVoiceOverText = std::move(stopVoiceOverText);
	Parms.autoplayVoiceOverText = std::move(autoplayVoiceOverText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.InitializeArrow
// (Final, Native, Private)
// Parameters:
// class UCoreInputSwitcherWidget*         arrowWidget                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    active                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::InitializeArrow(class UCoreInputSwitcherWidget* arrowWidget, bool active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "InitializeArrow");

	Params::CoreArchiveJournalWidget_InitializeArrow Parms{};

	Parms.arrowWidget = arrowWidget;
	Parms.active = active;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnFirstJournalEntryUnlocked
// (Final, Native, Private)

void UCoreArchiveJournalWidget::OnFirstJournalEntryUnlocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnFirstJournalEntryUnlocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnJournalEntriesUnlocked
// (Final, Native, Private)

void UCoreArchiveJournalWidget::OnJournalEntriesUnlocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnJournalEntriesUnlocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnLeftArrowTriggered
// (Final, Native, Private)

void UCoreArchiveJournalWidget::OnLeftArrowTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnLeftArrowTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnRewardImageLoaded
// (Final, Native, Private)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        loadedTexture                                          (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      titleText                                              (Parm, NativeAccessSpecifierPublic)
// const class FText&                      descriptionText                                        (Parm, NativeAccessSpecifierPublic)
// float                                   textureOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::OnRewardImageLoaded(TSoftObjectPtr<class UTexture2D> loadedTexture, bool success, const class FText& titleText, const class FText& descriptionText, float textureOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnRewardImageLoaded");

	Params::CoreArchiveJournalWidget_OnRewardImageLoaded Parms{};

	Parms.loadedTexture = loadedTexture;
	Parms.success = success;
	Parms.titleText = std::move(titleText);
	Parms.descriptionText = std::move(descriptionText);
	Parms.textureOffset = textureOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnRightArrowTriggered
// (Final, Native, Private)

void UCoreArchiveJournalWidget::OnRightArrowTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnRightArrowTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVignetteButtonSelected
// (Final, Native, Public)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::OnVignetteButtonSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnVignetteButtonSelected");

	Params::CoreArchiveJournalWidget_OnVignetteButtonSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVignetteCinematicSelected
// (Final, Native, Public)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::OnVignetteCinematicSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnVignetteCinematicSelected");

	Params::CoreArchiveJournalWidget_OnVignetteCinematicSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVignetteEntrySelected
// (Final, Native, Public)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::OnVignetteEntrySelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnVignetteEntrySelected");

	Params::CoreArchiveJournalWidget_OnVignetteEntrySelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVoiceOverAutoPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    autoplay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::OnVoiceOverAutoPlay(bool autoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnVoiceOverAutoPlay");

	Params::CoreArchiveJournalWidget_OnVoiceOverAutoPlay Parms{};

	Parms.autoplay = autoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.OnVoiceOverPlay
// (Final, Native, Public, BlueprintCallable)

void UCoreArchiveJournalWidget::OnVoiceOverPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "OnVoiceOverPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetBottomFogOffset
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    hasAudio                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetBottomFogOffset(bool hasAudio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetBottomFogOffset");

	Params::CoreArchiveJournalWidget_SetBottomFogOffset Parms{};

	Parms.hasAudio = hasAudio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetEntryImage
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      titleText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      descriptionText                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TSoftObjectPtr<class UTexture2D>& rewardImage                                            (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   textureOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetEntryImage(const class FText& titleText, const class FText& descriptionText, const TSoftObjectPtr<class UTexture2D>& rewardImage, float textureOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetEntryImage");

	Params::CoreArchiveJournalWidget_SetEntryImage Parms{};

	Parms.titleText = std::move(titleText);
	Parms.descriptionText = std::move(descriptionText);
	Parms.rewardImage = rewardImage;
	Parms.textureOffset = textureOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetEntryText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      titleText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      descriptionText                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetEntryText(const class FText& titleText, const class FText& descriptionText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetEntryText");

	Params::CoreArchiveJournalWidget_SetEntryText Parms{};

	Parms.titleText = std::move(titleText);
	Parms.descriptionText = std::move(descriptionText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetTopFogOffset
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    hasTitle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    hasDescription                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetTopFogOffset(bool hasTitle, bool hasDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetTopFogOffset");

	Params::CoreArchiveJournalWidget_SetTopFogOffset Parms{};

	Parms.hasTitle = hasTitle;
	Parms.hasDescription = hasDescription;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetVignetteText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      titleText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      subtitleText                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetVignetteText(const class FText& titleText, const class FText& subtitleText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetVignetteText");

	Params::CoreArchiveJournalWidget_SetVignetteText Parms{};

	Parms.titleText = std::move(titleText);
	Parms.subtitleText = std::move(subtitleText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetVoiceOverButtonsVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              isVisible                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetVoiceOverButtonsVisibility(const bool isVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetVoiceOverButtonsVisibility");

	Params::CoreArchiveJournalWidget_SetVoiceOverButtonsVisibility Parms{};

	Parms.isVisible = isVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.SetVoiceOverText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      playVoiceOverText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      stopVoiceOverText                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      autoplayVoiceOverText                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveJournalWidget::SetVoiceOverText(const class FText& playVoiceOverText, const class FText& stopVoiceOverText, const class FText& autoplayVoiceOverText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "SetVoiceOverText");

	Params::CoreArchiveJournalWidget_SetVoiceOverText Parms{};

	Parms.playVoiceOverText = std::move(playVoiceOverText);
	Parms.stopVoiceOverText = std::move(stopVoiceOverText);
	Parms.autoplayVoiceOverText = std::move(autoplayVoiceOverText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveJournalWidget.ShowImageViewer
// (Final, Native, Public, BlueprintCallable)

void UCoreArchiveJournalWidget::ShowImageViewer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveJournalWidget", "ShowImageViewer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveLevelProgressionWidget.OnStoryLevelSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveLevelProgressionWidget::OnStoryLevelSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveLevelProgressionWidget", "OnStoryLevelSelected");

	Params::CoreArchiveLevelProgressionWidget_OnStoryLevelSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveLevelProgressionWidget.OnTomeLevelUnlockedAnimation
// (Final, Native, Private)

void UCoreArchiveLevelProgressionWidget::OnTomeLevelUnlockedAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveLevelProgressionWidget", "OnTomeLevelUnlockedAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.GetTimeRemainingLabelFromMenuState
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EArchiveMenuState                       menuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreArchiveMenuWidget::GetTimeRemainingLabelFromMenuState(EArchiveMenuState menuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "GetTimeRemainingLabelFromMenuState");

	Params::CoreArchiveMenuWidget_GetTimeRemainingLabelFromMenuState Parms{};

	Parms.menuState = menuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnChallengeReminderClick
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveMenuWidget::OnChallengeReminderClick(class UCoreButtonWidget* button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "OnChallengeReminderClick");

	Params::CoreArchiveMenuWidget_OnChallengeReminderClick Parms{};

	Parms.button = button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnInfoButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveMenuWidget::OnInfoButtonClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "OnInfoButtonClicked");

	Params::CoreArchiveMenuWidget_OnInfoButtonClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnMenuTabSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveMenuWidget::OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "OnMenuTabSelected");

	Params::CoreArchiveMenuWidget_OnMenuTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnMenuTabSelectedAgain
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveMenuWidget::OnMenuTabSelectedAgain(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "OnMenuTabSelectedAgain");

	Params::CoreArchiveMenuWidget_OnMenuTabSelectedAgain Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnSlotSelected
// (Final, Native, Protected)
// Parameters:
// EPlayerRole                             role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveMenuWidget::OnSlotSelected(EPlayerRole role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "OnSlotSelected");

	Params::CoreArchiveMenuWidget_OnSlotSelected Parms{};

	Parms.role = role;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.OnSlotSelectionCancelled
// (Final, Native, Protected)

void UCoreArchiveMenuWidget::OnSlotSelectionCancelled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "OnSlotSelectionCancelled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveMenuWidget.SetScrollData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      vignetteListScrollPromptText                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      journalEntryScrollPromptText                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveMenuWidget::SetScrollData(const class FText& vignetteListScrollPromptText, const class FText& journalEntryScrollPromptText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveMenuWidget", "SetScrollData");

	Params::CoreArchiveMenuWidget_SetScrollData Parms{};

	Parms.vignetteListScrollPromptText = std::move(vignetteListScrollPromptText);
	Parms.journalEntryScrollPromptText = std::move(journalEntryScrollPromptText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveObjectiveWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchiveNodeObjectiveViewData&objectiveData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveObjectiveWidget::SetData(const struct FArchiveNodeObjectiveViewData& objectiveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveObjectiveWidget", "SetData");

	Params::CoreArchiveObjectiveWidget_SetData Parms{};

	Parms.objectiveData = std::move(objectiveData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBasePopupWidget.Hide
// (Event, Public, BlueprintEvent)

void UCoreBasePopupWidget::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBasePopupWidget", "Hide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreBasePopupWidget.Show
// (Event, Public, BlueprintEvent)
// Parameters:
// class UBasePopupViewData*               data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBasePopupWidget::Show(class UBasePopupViewData* data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBasePopupWidget", "Show");

	Params::CoreBasePopupWidget_Show Parms{};

	Parms.data = data;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreGenericPopupWidget.OnAlternativeAction
// (Native, Protected)

void UCoreGenericPopupWidget::OnAlternativeAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericPopupWidget", "OnAlternativeAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericPopupWidget.OnProgressionAction
// (Native, Protected)

void UCoreGenericPopupWidget::OnProgressionAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericPopupWidget", "OnProgressionAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGenericPopupWidget.OnRegressionAction
// (Native, Protected)

void UCoreGenericPopupWidget::OnRegressionAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGenericPopupWidget", "OnRegressionAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchivePassPurchasePopupWidget.GetTranslatedAvailabilityTitleText
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreArchivePassPurchasePopupWidget::GetTranslatedAvailabilityTitleText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchivePassPurchasePopupWidget", "GetTranslatedAvailabilityTitleText");

	Params::CoreArchivePassPurchasePopupWidget_GetTranslatedAvailabilityTitleText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.BindToNode
// (Native, Protected)
// Parameters:
// class UCoreArchiveQuestNodeWidget*      node                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::BindToNode(class UCoreArchiveQuestNodeWidget* node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "BindToNode");

	Params::CoreArchiveQuestMapWidget_BindToNode Parms{};

	Parms.node = node;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.BindToPath
// (Native, Protected)
// Parameters:
// class UCoreArchiveQuestPathWidget*      path                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::BindToPath(class UCoreArchiveQuestPathWidget* path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "BindToPath");

	Params::CoreArchiveQuestMapWidget_BindToPath Parms{};

	Parms.path = path;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodeClicked
// (Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::OnNodeClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "OnNodeClicked");

	Params::CoreArchiveQuestMapWidget_OnNodeClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodeHovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::OnNodeHovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "OnNodeHovered");

	Params::CoreArchiveQuestMapWidget_OnNodeHovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodesRevealCompleted
// (Final, Native, Private)

void UCoreArchiveQuestMapWidget::OnNodesRevealCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "OnNodesRevealCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.OnNodeUnhovered
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::OnNodeUnhovered(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "OnNodeUnhovered");

	Params::CoreArchiveQuestMapWidget_OnNodeUnhovered Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.SetupNode
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FArchiveNodeGraphViewData& nodeData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::SetupNode(const struct FArchiveNodeGraphViewData& nodeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "SetupNode");

	Params::CoreArchiveQuestMapWidget_SetupNode Parms{};

	Parms.nodeData = std::move(nodeData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.SetupPath
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FArchiveMapPathViewData&   pathData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::SetupPath(const struct FArchiveMapPathViewData& pathData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "SetupPath");

	Params::CoreArchiveQuestMapWidget_SetupPath Parms{};

	Parms.pathData = std::move(pathData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.UnbindFromNode
// (Native, Protected)
// Parameters:
// class UCoreArchiveQuestNodeWidget*      node                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::UnbindFromNode(class UCoreArchiveQuestNodeWidget* node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "UnbindFromNode");

	Params::CoreArchiveQuestMapWidget_UnbindFromNode Parms{};

	Parms.node = node;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestMapWidget.UnbindFromPath
// (Native, Protected)
// Parameters:
// class UCoreArchiveQuestPathWidget*      path                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestMapWidget::UnbindFromPath(class UCoreArchiveQuestPathWidget* path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestMapWidget", "UnbindFromPath");

	Params::CoreArchiveQuestMapWidget_UnbindFromPath Parms{};

	Parms.path = path;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.IntermediatePathMove
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::IntermediatePathMove(const struct FVector2D& position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "IntermediatePathMove");

	Params::CoreArchiveQuestEditorWidget_IntermediatePathMove Parms{};

	Parms.position = std::move(position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.NodeDragged
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::NodeDragged(const struct FVector2D& position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "NodeDragged");

	Params::CoreArchiveQuestEditorWidget_NodeDragged Parms{};

	Parms.position = std::move(position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnGridTileHeightPercentChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnGridTileHeightPercentChanged(const class FText& text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnGridTileHeightPercentChanged");

	Params::CoreArchiveQuestEditorWidget_OnGridTileHeightPercentChanged Parms{};

	Parms.text = std::move(text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnGridTileHeightPixelChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnGridTileHeightPixelChanged(const class FText& text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnGridTileHeightPixelChanged");

	Params::CoreArchiveQuestEditorWidget_OnGridTileHeightPixelChanged Parms{};

	Parms.text = std::move(text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnGridTileWidthPercentChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnGridTileWidthPercentChanged(const class FText& text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnGridTileWidthPercentChanged");

	Params::CoreArchiveQuestEditorWidget_OnGridTileWidthPercentChanged Parms{};

	Parms.text = std::move(text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnGridTileWidthPixelChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnGridTileWidthPixelChanged(const class FText& text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnGridTileWidthPixelChanged");

	Params::CoreArchiveQuestEditorWidget_OnGridTileWidthPixelChanged Parms{};

	Parms.text = std::move(text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnGridVisbilityChecked
// (Final, Native, Private)
// Parameters:
// bool                                    checked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnGridVisbilityChecked(bool checked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnGridVisbilityChecked");

	Params::CoreArchiveQuestEditorWidget_OnGridVisbilityChecked Parms{};

	Parms.checked = checked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnLinkNodesModeChecked
// (Final, Native, Private)
// Parameters:
// bool                                    checked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnLinkNodesModeChecked(bool checked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnLinkNodesModeChecked");

	Params::CoreArchiveQuestEditorWidget_OnLinkNodesModeChecked Parms{};

	Parms.checked = checked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnMoveNodesModeChecked
// (Final, Native, Private)
// Parameters:
// bool                                    checked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnMoveNodesModeChecked(bool checked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnMoveNodesModeChecked");

	Params::CoreArchiveQuestEditorWidget_OnMoveNodesModeChecked Parms{};

	Parms.checked = checked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeBeginDrag
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FName&                      id                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnNodeBeginDrag(const class FName& id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnNodeBeginDrag");

	Params::CoreArchiveQuestEditorWidget_OnNodeBeginDrag Parms{};

	Parms.id = id;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeSubmitClick
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnNodeSubmitClick(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnNodeSubmitClick");

	Params::CoreArchiveQuestEditorWidget_OnNodeSubmitClick Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeXPercentChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnNodeXPercentChanged(const class FText& text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnNodeXPercentChanged");

	Params::CoreArchiveQuestEditorWidget_OnNodeXPercentChanged Parms{};

	Parms.text = std::move(text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeXPixelChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnNodeXPixelChanged(const class FText& text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnNodeXPixelChanged");

	Params::CoreArchiveQuestEditorWidget_OnNodeXPixelChanged Parms{};

	Parms.text = std::move(text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeYPercentChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnNodeYPercentChanged(const class FText& text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnNodeYPercentChanged");

	Params::CoreArchiveQuestEditorWidget_OnNodeYPercentChanged Parms{};

	Parms.text = std::move(text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnNodeYPixelChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const class FText&                      text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnNodeYPixelChanged(const class FText& text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnNodeYPixelChanged");

	Params::CoreArchiveQuestEditorWidget_OnNodeYPixelChanged Parms{};

	Parms.text = std::move(text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnPathClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnPathClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnPathClicked");

	Params::CoreArchiveQuestEditorWidget_OnPathClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnRefreshGridClick
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnRefreshGridClick(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnRefreshGridClick");

	Params::CoreArchiveQuestEditorWidget_OnRefreshGridClick Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnSaveGraphClick
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnSaveGraphClick(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnSaveGraphClick");

	Params::CoreArchiveQuestEditorWidget_OnSaveGraphClick Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.OnSnapGridChecked
// (Final, Native, Private)
// Parameters:
// bool                                    checked                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::OnSnapGridChecked(bool checked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "OnSnapGridChecked");

	Params::CoreArchiveQuestEditorWidget_OnSnapGridChecked Parms{};

	Parms.checked = checked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.SetGridLinesArray
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<struct FLinePair>&         gridArrayVertical                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FLinePair>&         gridArrayHorizontal                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::SetGridLinesArray(const TArray<struct FLinePair>& gridArrayVertical, const TArray<struct FLinePair>& gridArrayHorizontal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "SetGridLinesArray");

	Params::CoreArchiveQuestEditorWidget_SetGridLinesArray Parms{};

	Parms.gridArrayVertical = std::move(gridArrayVertical);
	Parms.gridArrayHorizontal = std::move(gridArrayHorizontal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestEditorWidget.SetHighlightedGridLines
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   verticalIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   horizontalIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestEditorWidget::SetHighlightedGridLines(int32 verticalIndex, int32 horizontalIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestEditorWidget", "SetHighlightedGridLines");

	Params::CoreArchiveQuestEditorWidget_SetHighlightedGridLines Parms{};

	Parms.verticalIndex = verticalIndex;
	Parms.horizontalIndex = horizontalIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.BroadcastDragBegin
// (Final, Native, Protected, BlueprintCallable)

void UCoreArchiveQuestNodeWidget::BroadcastDragBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "BroadcastDragBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.HandleStatusChange
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const EStoryNodeState                   prevStatus                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EStoryNodeState                   currentStatus                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::HandleStatusChange(const EStoryNodeState prevStatus, const EStoryNodeState currentStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "HandleStatusChange");

	Params::CoreArchiveQuestNodeWidget_HandleStatusChange Parms{};

	Parms.prevStatus = prevStatus;
	Parms.currentStatus = currentStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.InitNode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      nodeId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FArchiveNodeViewData&      data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    isChallengeReminderNode                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::InitNode(const class FName& nodeId, const struct FArchiveNodeViewData& data, bool isChallengeReminderNode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "InitNode");

	Params::CoreArchiveQuestNodeWidget_InitNode Parms{};

	Parms.nodeId = nodeId;
	Parms.data = std::move(data);
	Parms.isChallengeReminderNode = isChallengeReminderNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.OnInit
// (Event, Protected, BlueprintEvent)

void UCoreArchiveQuestNodeWidget::OnInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "OnInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.OnReset
// (Event, Protected, BlueprintEvent)

void UCoreArchiveQuestNodeWidget::OnReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "OnReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.OnStatusChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// ENodeStatusChange                       nodeStatusChange                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::OnStatusChanged(ENodeStatusChange nodeStatusChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "OnStatusChanged");

	Params::CoreArchiveQuestNodeWidget_OnStatusChanged Parms{};

	Parms.nodeStatusChange = nodeStatusChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.Reset
// (Final, Native, Public)

void UCoreArchiveQuestNodeWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.SetRewardRarity
// (Event, Protected, BlueprintEvent)
// Parameters:
// EItemRarity                             rarity                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::SetRewardRarity(EItemRarity rarity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "SetRewardRarity");

	Params::CoreArchiveQuestNodeWidget_SetRewardRarity Parms{};

	Parms.rarity = rarity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.ShowRewardNodeTooltip
// (Final, Native, Protected, BlueprintCallable)

void UCoreArchiveQuestNodeWidget::ShowRewardNodeTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "ShowRewardNodeTooltip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.UpdateAllStoryIndicators
// (Final, Native, Protected, BlueprintCallable)

void UCoreArchiveQuestNodeWidget::UpdateAllStoryIndicators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "UpdateAllStoryIndicators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.UpdateNode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchiveNodeViewData&      data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::UpdateNode(const struct FArchiveNodeViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "UpdateNode");

	Params::CoreArchiveQuestNodeWidget_UpdateNode Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.UpdateStoryIndicatorOpacity
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    isImageReward                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isCompleted                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestNodeWidget::UpdateStoryIndicatorOpacity(bool isImageReward, bool isCompleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "UpdateStoryIndicatorOpacity");

	Params::CoreArchiveQuestNodeWidget_UpdateStoryIndicatorOpacity Parms{};

	Parms.isImageReward = isImageReward;
	Parms.isCompleted = isCompleted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.IsSelectableNode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreArchiveQuestNodeWidget::IsSelectableNode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "IsSelectableNode");

	Params::CoreArchiveQuestNodeWidget_IsSelectableNode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.IsValidNode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreArchiveQuestNodeWidget::IsValidNode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "IsValidNode");

	Params::CoreArchiveQuestNodeWidget_IsValidNode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveQuestNodeWidget.NeedsChallengeReminderHoverAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreArchiveQuestNodeWidget::NeedsChallengeReminderHoverAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestNodeWidget", "NeedsChallengeReminderHoverAnimation");

	Params::CoreArchiveQuestNodeWidget_NeedsChallengeReminderHoverAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.InitPath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchiveMapPathViewData&   data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCoreArchiveQuestPathWidget::InitPath(const struct FArchiveMapPathViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestPathWidget", "InitPath");

	Params::CoreArchiveQuestPathWidget_InitPath Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.Reset
// (Final, Native, Public)

void UCoreArchiveQuestPathWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestPathWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.SetVisualState
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const EArchivePathStatus&               pathStatus                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveQuestPathWidget::SetVisualState(const EArchivePathStatus& pathStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestPathWidget", "SetVisualState");

	Params::CoreArchiveQuestPathWidget_SetVisualState Parms{};

	Parms.pathStatus = pathStatus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveQuestPathWidget.UpdatePath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchiveMapPathViewData&   data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCoreArchiveQuestPathWidget::UpdatePath(const struct FArchiveMapPathViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveQuestPathWidget", "UpdatePath");

	Params::CoreArchiveQuestPathWidget_UpdatePath Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftTierItem.Clear
// (Event, Public, BlueprintEvent)

void UCoreArchiveRiftTierItem::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftTierItem", "Clear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveRiftTierItem.OnRewardClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftTierItem::OnRewardClicked(class UCoreButtonWidget* button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftTierItem", "OnRewardClicked");

	Params::CoreArchiveRiftTierItem_OnRewardClicked Parms{};

	Parms.button = button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftTierItem.PlayUnlockanimation
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    isPremiumUnlocked                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftTierItem::PlayUnlockanimation(bool isPremiumUnlocked, float delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftTierItem", "PlayUnlockanimation");

	Params::CoreArchiveRiftTierItem_PlayUnlockanimation Parms{};

	Parms.isPremiumUnlocked = isPremiumUnlocked;
	Parms.delay = delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveRiftTierItem.SetGenericData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FArchiveRiftTierRewardsViewData&data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveRiftTierItem::SetGenericData(const struct FArchiveRiftTierRewardsViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftTierItem", "SetGenericData");

	Params::CoreArchiveRiftTierItem_SetGenericData Parms{};

	Parms.data = std::move(data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveRiftTierItem.SetLockedState
// (Event, Public, BlueprintEvent)
// Parameters:
// const bool                              isLocked                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              hasPremium                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftTierItem::SetLockedState(const bool isLocked, const bool hasPremium)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftTierItem", "SetLockedState");

	Params::CoreArchiveRiftTierItem_SetLockedState Parms{};

	Parms.isLocked = isLocked;
	Parms.hasPremium = hasPremium;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.DisplayPage
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::DisplayPage(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "DisplayPage");

	Params::CoreArchiveRiftWidget_DisplayPage Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnCurrentPageAnimationCompleted
// (Final, Native, Private)

void UCoreArchiveRiftWidget::OnCurrentPageAnimationCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnCurrentPageAnimationCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnNextButtonClicked
// (Final, Native, Private)

void UCoreArchiveRiftWidget::OnNextButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnNextButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnOutfitButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::OnOutfitButtonClicked(class UCoreButtonWidget* button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnOutfitButtonClicked");

	Params::CoreArchiveRiftWidget_OnOutfitButtonClicked Parms{};

	Parms.button = button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnOutfitButtonHovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::OnOutfitButtonHovered(class UCoreButtonWidget* button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnOutfitButtonHovered");

	Params::CoreArchiveRiftWidget_OnOutfitButtonHovered Parms{};

	Parms.button = button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnOutfitButtonUnhovered
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::OnOutfitButtonUnhovered(class UCoreButtonWidget* button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnOutfitButtonUnhovered");

	Params::CoreArchiveRiftWidget_OnOutfitButtonUnhovered Parms{};

	Parms.button = button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnPreviousButtonClicked
// (Final, Native, Private)

void UCoreArchiveRiftWidget::OnPreviousButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnPreviousButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnRewardAnimationCompleted
// (Final, Native, Private)

void UCoreArchiveRiftWidget::OnRewardAnimationCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnRewardAnimationCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.OnRewardItemClicked
// (Final, Native, Private)
// Parameters:
// int32                                   tier                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreButtonWidget*                button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isPremium                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   index                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::OnRewardItemClicked(int32 tier, class UCoreButtonWidget* button, bool isPremium, int32 index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "OnRewardItemClicked");

	Params::CoreArchiveRiftWidget_OnRewardItemClicked Parms{};

	Parms.tier = tier;
	Parms.button = button;
	Parms.isPremium = isPremium;
	Parms.index = index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.PlayPremiumTrackUnlockAnimation
// (Event, Protected, BlueprintEvent)

void UCoreArchiveRiftWidget::PlayPremiumTrackUnlockAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "PlayPremiumTrackUnlockAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.SetPaginationVisuals
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const bool                              showBonusTierHighlight                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      bonusTierTooltipText                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::SetPaginationVisuals(const bool showBonusTierHighlight, const class FText& bonusTierTooltipText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "SetPaginationVisuals");

	Params::CoreArchiveRiftWidget_SetPaginationVisuals Parms{};

	Parms.showBonusTierHighlight = showBonusTierHighlight;
	Parms.bonusTierTooltipText = std::move(bonusTierTooltipText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.SetTierVisuals
// (Event, Protected, BlueprintEvent)
// Parameters:
// ETierType                               tierType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::SetTierVisuals(ETierType tierType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "SetTierVisuals");

	Params::CoreArchiveRiftWidget_SetTierVisuals Parms{};

	Parms.tierType = tierType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveRiftWidget.SetVisualData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FArchivesRiftGenericViewData&data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCoreArchiveRiftWidget::SetVisualData(const struct FArchivesRiftGenericViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveRiftWidget", "SetVisualData");

	Params::CoreArchiveRiftWidget_SetVisualData Parms{};

	Parms.data = std::move(data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveSlotSelectorWidget.OnBothSelection
// (Final, Native, Private)

void UCoreArchiveSlotSelectorWidget::OnBothSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveSlotSelectorWidget", "OnBothSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveSlotSelectorWidget.OnCancelSelection
// (Final, Native, Private)

void UCoreArchiveSlotSelectorWidget::OnCancelSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveSlotSelectorWidget", "OnCancelSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveSlotSelectorWidget.OnKillerSelection
// (Final, Native, Private)

void UCoreArchiveSlotSelectorWidget::OnKillerSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveSlotSelectorWidget", "OnKillerSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveSlotSelectorWidget.OnSurvivorSelection
// (Final, Native, Private)

void UCoreArchiveSlotSelectorWidget::OnSurvivorSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveSlotSelectorWidget", "OnSurvivorSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget.OnConfirmPurchase
// (Final, Native, Private)

void UCoreArchiveTierPurchasePopupWidget::OnConfirmPurchase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveTierPurchasePopupWidget", "OnConfirmPurchase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget.OnLessInputTriggered
// (Final, Native, Private)

void UCoreArchiveTierPurchasePopupWidget::OnLessInputTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveTierPurchasePopupWidget", "OnLessInputTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget.OnMoreInputTriggered
// (Final, Native, Private)

void UCoreArchiveTierPurchasePopupWidget::OnMoreInputTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveTierPurchasePopupWidget", "OnMoreInputTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveTierPurchasePopupWidget.SetVisualData
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UArchiveTierPurchasePopupViewData*viewData                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveTierPurchasePopupWidget::SetVisualData(const class UArchiveTierPurchasePopupViewData* viewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveTierPurchasePopupWidget", "SetVisualData");

	Params::CoreArchiveTierPurchasePopupWidget_SetVisualData Parms{};

	Parms.viewData = viewData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveTomeWidget.OnMenuTabSelected
// (Final, Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveTomeWidget::OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveTomeWidget", "OnMenuTabSelected");

	Params::CoreArchiveTomeWidget_OnMenuTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.OnButtonSelectedAgain
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::OnButtonSelectedAgain(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "OnButtonSelectedAgain");

	Params::CoreButtonSelector_OnButtonSelectedAgain Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.OnButtonSelectedChanged
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::OnButtonSelectedChanged(class UCoreSelectableButtonWidget* selectedButton, bool isSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "OnButtonSelectedChanged");

	Params::CoreButtonSelector_OnButtonSelectedChanged Parms{};

	Parms.selectedButton = selectedButton;
	Parms.isSelected = isSelected;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.Select
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreSelectableButtonWidget*      buttonToSelect                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    performAction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonSelector::Select(class UCoreSelectableButtonWidget* buttonToSelect, bool performAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "Select");

	Params::CoreButtonSelector_Select Parms{};

	Parms.buttonToSelect = buttonToSelect;
	Parms.performAction = performAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonSelector.SelectNext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonSelector::SelectNext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "SelectNext");

	Params::CoreButtonSelector_SelectNext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonSelector.SelectPrevious
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonSelector::SelectPrevious()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "SelectPrevious");

	Params::CoreButtonSelector_SelectPrevious Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreButtonSelector.SetAllEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::SetAllEnabled(bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "SetAllEnabled");

	Params::CoreButtonSelector_SetAllEnabled Parms{};

	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.SetInputsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreButtonSelector::SetInputsEnabled(bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "SetInputsEnabled");

	Params::CoreButtonSelector_SetInputsEnabled Parms{};

	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.UnselectCurrent
// (Final, Native, Public, BlueprintCallable)

void UCoreButtonSelector::UnselectCurrent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "UnselectCurrent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreButtonSelector.HasSelection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreButtonSelector::HasSelection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreButtonSelector", "HasSelection");

	Params::CoreButtonSelector_HasSelection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.Init
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FTabWidgetData>&    tabsData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::Init(const TArray<struct FTabWidgetData>& tabsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "Init");

	Params::CoreTabContainerWidget_Init Parms{};

	Parms.tabsData = std::move(tabsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.LayOutTabs
// (Final, Native, Public, BlueprintCallable)

void UCoreTabContainerWidget::LayOutTabs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "LayOutTabs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.OnTabSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::OnTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "OnTabSelected");

	Params::CoreTabContainerWidget_OnTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.RemoveTabs
// (Final, Native, Public, BlueprintCallable)

void UCoreTabContainerWidget::RemoveTabs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "RemoveTabs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.SetNotificationVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    hasNotification                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::SetNotificationVisibility(int32 key, bool hasNotification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "SetNotificationVisibility");

	Params::CoreTabContainerWidget_SetNotificationVisibility Parms{};

	Parms.key = key;
	Parms.hasNotification = hasNotification;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.SetTabEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::SetTabEnabled(int32 key, bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "SetTabEnabled");

	Params::CoreTabContainerWidget_SetTabEnabled Parms{};

	Parms.key = key;
	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.SetTabVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::SetTabVisible(int32 key, bool visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "SetTabVisible");

	Params::CoreTabContainerWidget_SetTabVisible Parms{};

	Parms.key = key;
	Parms.visible = visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.SetUseControllerTabSwitching
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::SetUseControllerTabSwitching(bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "SetUseControllerTabSwitching");

	Params::CoreTabContainerWidget_SetUseControllerTabSwitching Parms{};

	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.UpdateBackgroundSkin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               skinMaterial                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabContainerWidget::UpdateBackgroundSkin(int32 key, class UMaterialInterface* skinMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "UpdateBackgroundSkin");

	Params::CoreTabContainerWidget_UpdateBackgroundSkin Parms{};

	Parms.key = key;
	Parms.skinMaterial = skinMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabContainerWidget.GetTab
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreTabWidget*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreTabWidget* UCoreTabContainerWidget::GetTab(int32 key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabContainerWidget", "GetTab");

	Params::CoreTabContainerWidget_GetTab Parms{};

	Parms.key = key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTabWidget.HasLabelTooltip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreTabWidget::HasLabelTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "HasLabelTooltip");

	Params::CoreTabWidget_HasLabelTooltip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTabWidget.PostInit
// (Event, Public, BlueprintEvent)

void UCoreTabWidget::PostInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "PostInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreTabWidget.SetIconSoftTexture
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        iconTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 forcedIconSize                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabWidget::SetIconSoftTexture(TSoftObjectPtr<class UTexture2D> iconTexture, const struct FVector2D& forcedIconSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "SetIconSoftTexture");

	Params::CoreTabWidget_SetIconSoftTexture Parms{};

	Parms.iconTexture = iconTexture;
	Parms.forcedIconSize = std::move(forcedIconSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabWidget.SetIconTexture
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UTexture2D*                       iconTexture                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 forcedIconSize                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabWidget::SetIconTexture(class UTexture2D* iconTexture, const struct FVector2D& forcedIconSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "SetIconTexture");

	Params::CoreTabWidget_SetIconTexture Parms{};

	Parms.iconTexture = iconTexture;
	Parms.forcedIconSize = std::move(forcedIconSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabWidget.SetNotificationVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    hasNotification                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTabWidget::SetNotificationVisibility(bool hasNotification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "SetNotificationVisibility");

	Params::CoreTabWidget_SetNotificationVisibility Parms{};

	Parms.hasNotification = hasNotification;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreTabWidget.GetKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCoreTabWidget::GetKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "GetKey");

	Params::CoreTabWidget_GetKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTabWidget.GetTabText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreTabWidget::GetTabText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTabWidget", "GetTabText");

	Params::CoreTabWidget_GetTabText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveVignetteButtonWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchivesVignetteViewData& vignetteDataList                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteButtonWidget::SetData(const struct FArchivesVignetteViewData& vignetteDataList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteButtonWidget", "SetData");

	Params::CoreArchiveVignetteButtonWidget_SetData Parms{};

	Parms.vignetteDataList = std::move(vignetteDataList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveVignetteButtonWidget.SetVignetteRead
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              isRead                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteButtonWidget::SetVignetteRead(const bool isRead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteButtonWidget", "SetVignetteRead");

	Params::CoreArchiveVignetteButtonWidget_SetVignetteRead Parms{};

	Parms.isRead = isRead;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveVignetteButtonWidget.SetVisualData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      vignetteTitle                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      vignetteSubtitle                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      vignetteProgressText                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              displayProgress                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             vignetteProgress                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              isUnread                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      unreadIndicatorText                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              showCinematics                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              lockCinematics                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteButtonWidget::SetVisualData(const class FText& vignetteTitle, const class FText& vignetteSubtitle, const class FText& vignetteProgressText, const bool displayProgress, const float vignetteProgress, const bool isUnread, const class FText& unreadIndicatorText, const bool showCinematics, const bool lockCinematics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteButtonWidget", "SetVisualData");

	Params::CoreArchiveVignetteButtonWidget_SetVisualData Parms{};

	Parms.vignetteTitle = std::move(vignetteTitle);
	Parms.vignetteSubtitle = std::move(vignetteSubtitle);
	Parms.vignetteProgressText = std::move(vignetteProgressText);
	Parms.displayProgress = displayProgress;
	Parms.vignetteProgress = vignetteProgress;
	Parms.isUnread = isUnread;
	Parms.unreadIndicatorText = std::move(unreadIndicatorText);
	Parms.showCinematics = showCinematics;
	Parms.lockCinematics = lockCinematics;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveVignetteCinematicButton.SetIsForceDisabled
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isForceDisabled                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteCinematicButton::SetIsForceDisabled(bool isForceDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteCinematicButton", "SetIsForceDisabled");

	Params::CoreArchiveVignetteCinematicButton_SetIsForceDisabled Parms{};

	Parms.isForceDisabled = isForceDisabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveVignetteCinematicButton.UnlockCinematic
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreArchiveVignetteCinematicButton::UnlockCinematic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteCinematicButton", "UnlockCinematic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveVignetteCinematicContainerWidget.UnlockCinematics
// (Final, Native, Public)

void UCoreArchiveVignetteCinematicContainerWidget::UnlockCinematics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteCinematicContainerWidget", "UnlockCinematics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             entryNumber                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              isRead                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              isImage                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteEntryButtonWidget::SetData(const int32 entryNumber, const bool isRead, const bool isImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryButtonWidget", "SetData");

	Params::CoreArchiveVignetteEntryButtonWidget_SetData Parms{};

	Parms.entryNumber = entryNumber;
	Parms.isRead = isRead;
	Parms.isImage = isImage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.SetVisualData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             entryNumber                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              isRead                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      unreadIndicatorText                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              isImage                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteEntryButtonWidget::SetVisualData(const int32 entryNumber, const bool isRead, const class FText& unreadIndicatorText, const bool isImage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryButtonWidget", "SetVisualData");

	Params::CoreArchiveVignetteEntryButtonWidget_SetVisualData Parms{};

	Parms.entryNumber = entryNumber;
	Parms.isRead = isRead;
	Parms.unreadIndicatorText = std::move(unreadIndicatorText);
	Parms.isImage = isImage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.UnlockEntry
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreArchiveVignetteEntryButtonWidget::UnlockEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryButtonWidget", "UnlockEntry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryButtonWidget.GetEntryNumber
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 UCoreArchiveVignetteEntryButtonWidget::GetEntryNumber() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryButtonWidget", "GetEntryNumber");

	Params::CoreArchiveVignetteEntryButtonWidget_GetEntryNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryContainerWidget.OnUnlockComplete
// (Final, Native, Public)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteEntryContainerWidget::OnUnlockComplete(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryContainerWidget", "OnUnlockComplete");

	Params::CoreArchiveVignetteEntryContainerWidget_OnUnlockComplete Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreArchiveVignetteEntryContainerWidget.OnUnlockProgress
// (Final, Native, Public)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreArchiveVignetteEntryContainerWidget::OnUnlockProgress(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreArchiveVignetteEntryContainerWidget", "OnUnlockProgress");

	Params::CoreArchiveVignetteEntryContainerWidget_OnUnlockProgress Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseHudWidget.PlayFocusAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreBaseHudWidget::PlayFocusAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseHudWidget", "PlayFocusAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreBaseHudWidget.ShouldPlayFocusAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreBaseHudWidget::ShouldPlayFocusAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseHudWidget", "ShouldPlayFocusAnimation");

	Params::CoreBaseHudWidget_ShouldPlayFocusAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreBinkVideoPlayerWidget.SetSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreBinkVideoPlayerWidget::SetSize(const struct FVector2D& size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBinkVideoPlayerWidget", "SetSize");

	Params::CoreBinkVideoPlayerWidget_SetSize Parms{};

	Parms.size = std::move(size);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWidget.ClearData
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreRewardWidget::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "ClearData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreRewardWidget.GetLockedOverlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreLockedOverlayWidget*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreLockedOverlayWidget* UCoreRewardWidget::GetLockedOverlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "GetLockedOverlay");

	Params::CoreRewardWidget_GetLockedOverlay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreRewardWidget.SetIsLocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isLocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    useAnimation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWidget::SetIsLocked(bool isLocked, bool useAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWidget", "SetIsLocked");

	Params::CoreRewardWidget_SetIsLocked Parms{};

	Parms.isLocked = isLocked;
	Parms.useAnimation = useAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCharacterRewardWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FCharacterRewardViewData&  characterRewardViewData                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCharacterRewardWidget::SetData(const struct FCharacterRewardViewData& characterRewardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCharacterRewardWidget", "SetData");

	Params::CoreCharacterRewardWidget_SetData Parms{};

	Parms.characterRewardViewData = std::move(characterRewardViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCreditsWidget.OnScrollEnd
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCreditsWidget::OnScrollEnd(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCreditsWidget", "OnScrollEnd");

	Params::CoreCreditsWidget_OnScrollEnd Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCreditsWidget.ScrollText
// (Final, Native, Private)

void UCoreCreditsWidget::ScrollText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCreditsWidget", "ScrollText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreCurrencyExpirationLabelWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FCurrencyExpirationLabelViewData&viewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyExpirationLabelWidget::SetData(const struct FCurrencyExpirationLabelViewData& viewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyExpirationLabelWidget", "SetData");

	Params::CoreCurrencyExpirationLabelWidget_SetData Parms{};

	Parms.viewData = std::move(viewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCurrencyForTooltipsWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FCurrencyProgressionRewardViewData&currencyRewardViewData                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyForTooltipsWidget::SetData(const struct FCurrencyProgressionRewardViewData& currencyRewardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyForTooltipsWidget", "SetData");

	Params::CoreCurrencyForTooltipsWidget_SetData Parms{};

	Parms.currencyRewardViewData = std::move(currencyRewardViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCurrencyLabelWidget.PlayNotEnoughCurrency
// (Event, Public, BlueprintEvent)

void UCoreCurrencyLabelWidget::PlayNotEnoughCurrency()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyLabelWidget", "PlayNotEnoughCurrency");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreCurrencyLabelWidget.SetData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FCurrencyLabelViewData&    viewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyLabelWidget::SetData(const struct FCurrencyLabelViewData& viewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyLabelWidget", "SetData");

	Params::CoreCurrencyLabelWidget_SetData Parms{};

	Parms.viewData = std::move(viewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCurrencyLabelWidget.UpdateCurrency
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   newBalance                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   previousBalance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCurrencyLabelWidget::UpdateCurrency(int32 newBalance, int32 previousBalance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyLabelWidget", "UpdateCurrency");

	Params::CoreCurrencyLabelWidget_UpdateCurrency Parms{};

	Parms.newBalance = newBalance;
	Parms.previousBalance = previousBalance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCurrencyProgressionRewardWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FCurrencyProgressionRewardViewData&currencyProgressionRewardViewData                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCurrencyProgressionRewardWidget::SetData(const struct FCurrencyProgressionRewardViewData& currencyProgressionRewardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCurrencyProgressionRewardWidget", "SetData");

	Params::CoreCurrencyProgressionRewardWidget_SetData Parms{};

	Parms.currencyProgressionRewardViewData = std::move(currencyProgressionRewardViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCustomizationRewardWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FCustomizationRewardViewData&customizationRewardViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCustomizationRewardWidget::SetData(const struct FCustomizationRewardViewData& customizationRewardViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCustomizationRewardWidget", "SetData");

	Params::CoreCustomizationRewardWidget_SetData Parms{};

	Parms.customizationRewardViewData = std::move(customizationRewardViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCustomizationRewardWidget.SetOwnedText
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      ownedText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreCustomizationRewardWidget::SetOwnedText(const class FText& ownedText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCustomizationRewardWidget", "SetOwnedText");

	Params::CoreCustomizationRewardWidget_SetOwnedText Parms{};

	Parms.ownedText = std::move(ownedText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreCustomizationRewardWidget.SetRarity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EItemRarity                             rarity                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreCustomizationRewardWidget::SetRarity(EItemRarity rarity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreCustomizationRewardWidget", "SetRarity");

	Params::CoreCustomizationRewardWidget_SetRarity Parms{};

	Parms.rarity = rarity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreDisplayStandWidget.OnDrag
// (Final, Native, Protected, HasDefaults)
// Parameters:
// const struct FVector2D&                 cursorDelta                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreDisplayStandWidget::OnDrag(const struct FVector2D& cursorDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreDisplayStandWidget", "OnDrag");

	Params::CoreDisplayStandWidget_OnDrag Parms{};

	Parms.cursorDelta = std::move(cursorDelta);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreEndGameCollapseBarWidget.PlayToZeroAnimation
// (Event, Protected, BlueprintEvent)

void UCoreEndGameCollapseBarWidget::PlayToZeroAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEndGameCollapseBarWidget", "PlayToZeroAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreEndGameCollapseBarWidget.UpdateBarProgression
// (Event, Protected, BlueprintEvent)
// Parameters:
// const float                             progress                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreEndGameCollapseBarWidget::UpdateBarProgression(const float progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreEndGameCollapseBarWidget", "UpdateBarProgression");

	Params::CoreEndGameCollapseBarWidget_UpdateBarProgression Parms{};

	Parms.progress = progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreExternalEffectsWidget.HideExternalAddon_Implementation
// (Native, Public, HasOutParams)
// Parameters:
// const class FName&                      itemId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreExternalEffectsWidget::HideExternalAddon_Implementation(const class FName& itemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreExternalEffectsWidget", "HideExternalAddon_Implementation");

	Params::CoreExternalEffectsWidget_HideExternalAddon_Implementation Parms{};

	Parms.itemId = itemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreExternalEffectsWidget.HideExternalPerk_Implementation
// (Native, Public, HasOutParams)
// Parameters:
// const class FName&                      itemId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreExternalEffectsWidget::HideExternalPerk_Implementation(const class FName& itemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreExternalEffectsWidget", "HideExternalPerk_Implementation");

	Params::CoreExternalEffectsWidget_HideExternalPerk_Implementation Parms{};

	Parms.itemId = itemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.SetHoveredColor
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreFooterButtonWidget::SetHoveredColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "SetHoveredColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreFooterButtonWidget.SetUnhoveredColor
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreFooterButtonWidget::SetUnhoveredColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreFooterButtonWidget", "SetUnhoveredColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.OnAlignmentChanged
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// ETextJustify                            newAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::OnAlignmentChanged(ETextJustify newAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "OnAlignmentChanged");

	Params::CoreInputSwitcherWidget_OnAlignmentChanged Parms{};

	Parms.newAlignment = newAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.OnButtonClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::OnButtonClicked(class UCoreButtonWidget* target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "OnButtonClicked");

	Params::CoreInputSwitcherWidget_OnButtonClicked Parms{};

	Parms.target = target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.OnInputPromptTriggered
// (Final, Native, Private)

void UCoreInputSwitcherWidget::OnInputPromptTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "OnInputPromptTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetAdditionalIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        iconTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetAdditionalIcon(TSoftObjectPtr<class UTexture2D> iconTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetAdditionalIcon");

	Params::CoreInputSwitcherWidget_SetAdditionalIcon Parms{};

	Parms.iconTexture = iconTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETextJustify                            newAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetAlignment(ETextJustify newAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetAlignment");

	Params::CoreInputSwitcherWidget_SetAlignment Parms{};

	Parms.newAlignment = newAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetBackground
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UMaterialInstance> backgroundMaterial                                     (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetBackground(TSoftObjectPtr<class UMaterialInstance> backgroundMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetBackground");

	Params::CoreInputSwitcherWidget_SetBackground Parms{};

	Parms.backgroundMaterial = backgroundMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetEnabled(bool isEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetEnabled");

	Params::CoreInputSwitcherWidget_SetEnabled Parms{};

	Parms.isEnabled = isEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetKeyOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      keyOverride                                            (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetKeyOverride(const struct FKey& keyOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetKeyOverride");

	Params::CoreInputSwitcherWidget_SetKeyOverride Parms{};

	Parms.keyOverride = std::move(keyOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetLabel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      label                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetLabel(const class FText& label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetLabel");

	Params::CoreInputSwitcherWidget_SetLabel Parms{};

	Parms.label = std::move(label);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetRepeatable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isRepeatable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      repetitionDelayCurve                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetRepeatable(bool isRepeatable, class UCurveFloat* repetitionDelayCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetRepeatable");

	Params::CoreInputSwitcherWidget_SetRepeatable Parms{};

	Parms.isRepeatable = isRepeatable;
	Parms.repetitionDelayCurve = repetitionDelayCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.SetUIAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EUIActionType                     actionType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputSwitcherWidget::SetUIAction(const EUIActionType actionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "SetUIAction");

	Params::CoreInputSwitcherWidget_SetUIAction Parms{};

	Parms.actionType = actionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.GetButton
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreButtonWidget*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreButtonWidget* UCoreInputSwitcherWidget::GetButton() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "GetButton");

	Params::CoreInputSwitcherWidget_GetButton Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInputSwitcherWidget.GetInputPrompt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreKeyListenerInputPromptWidget* UCoreInputSwitcherWidget::GetInputPrompt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputSwitcherWidget", "GetInputPrompt");

	Params::CoreInputSwitcherWidget_GetInputPrompt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.OnTopicsTabSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGameManualPanelWidget::OnTopicsTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "OnTopicsTabSelected");

	Params::CoreGameManualPanelWidget_OnTopicsTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.ResetScrolls
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    resetTopicsScroll                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGameManualPanelWidget::ResetScrolls(bool resetTopicsScroll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "ResetScrolls");

	Params::CoreGameManualPanelWidget_ResetScrolls Parms{};

	Parms.resetTopicsScroll = resetTopicsScroll;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.SetCurrentOnbardingMenuSubtitle
// (Final, Native, Private, BlueprintCallable)

void UCoreGameManualPanelWidget::SetCurrentOnbardingMenuSubtitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "SetCurrentOnbardingMenuSubtitle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.SetGameManualMenuState
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// EGameManualMenuState                    menuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGameManualPanelWidget::SetGameManualMenuState(EGameManualMenuState menuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "SetGameManualMenuState");

	Params::CoreGameManualPanelWidget_SetGameManualMenuState Parms{};

	Parms.menuState = menuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.ShowHelpTopics
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// EHelpType                               categoryType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreGameManualPanelWidget::ShowHelpTopics(EHelpType categoryType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "ShowHelpTopics");

	Params::CoreGameManualPanelWidget_ShowHelpTopics Parms{};

	Parms.categoryType = categoryType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreGameManualPanelWidget.ToggleGameManualMenuState
// (Final, Native, Private, BlueprintCallable)

void UCoreGameManualPanelWidget::ToggleGameManualMenuState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreGameManualPanelWidget", "ToggleGameManualMenuState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.ClearAlerts
// (Final, Native, Private)

void UCoreHudAlertWidget::ClearAlerts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "ClearAlerts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.OnClearAlertsComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudAlertWidget::OnClearAlertsComplete(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "OnClearAlertsComplete");

	Params::CoreHudAlertWidget_OnClearAlertsComplete Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.OnPopAlertComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudAlertWidget::OnPopAlertComplete(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "OnPopAlertComplete");

	Params::CoreHudAlertWidget_OnPopAlertComplete Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.PopAlert
// (Final, Native, Private)

void UCoreHudAlertWidget::PopAlert()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "PopAlert");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.GetAlerts
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UCoreBaseUserWidget*>      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UCoreBaseUserWidget*> UCoreHudAlertWidget::GetAlerts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "GetAlerts");

	Params::CoreHudAlertWidget_GetAlerts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.GetPendingAlerts
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UCoreBaseUserWidget*>      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UCoreBaseUserWidget*> UCoreHudAlertWidget::GetPendingAlerts() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "GetPendingAlerts");

	Params::CoreHudAlertWidget_GetPendingAlerts Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudAlertWidget.GetRemainingTime
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoreHudAlertWidget::GetRemainingTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudAlertWidget", "GetRemainingTime");

	Params::CoreHudAlertWidget_GetRemainingTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.Init
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDirectionalInputKey                    direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudDirectionalMiniGameItemWidget::Init(EDirectionalInputKey direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameItemWidget", "Init");

	Params::CoreHudDirectionalMiniGameItemWidget_Init Parms{};

	Parms.direction = direction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.RevealDirection
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    withAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudDirectionalMiniGameItemWidget::RevealDirection(bool withAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameItemWidget", "RevealDirection");

	Params::CoreHudDirectionalMiniGameItemWidget_RevealDirection Parms{};

	Parms.withAnimation = withAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameItemWidget.UpdateResult
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isSuccessful                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreHudDirectionalMiniGameItemWidget::UpdateResult(bool isSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameItemWidget", "UpdateResult");

	Params::CoreHudDirectionalMiniGameItemWidget_UpdateResult Parms{};

	Parms.isSuccessful = isSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameWidget.GetWidgets
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TArray<class UCoreHudDirectionalMiniGameItemWidget*>ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UCoreHudDirectionalMiniGameItemWidget*> UCoreHudDirectionalMiniGameWidget::GetWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameWidget", "GetWidgets");

	Params::CoreHudDirectionalMiniGameWidget_GetWidgets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreHudDirectionalMiniGameWidget.ShowVisual
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCoreHudDirectionalMiniGameWidget::ShowVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudDirectionalMiniGameWidget", "ShowVisual");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreHudScoreAlertItem.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FScoreAlertViewData&       data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreHudScoreAlertItem::SetData(const struct FScoreAlertViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudScoreAlertItem", "SetData");

	Params::CoreHudScoreAlertItem_SetData Parms{};

	Parms.data = std::move(data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreHudStatusEffectAlertItem.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStatusEffectAlertViewData&data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreHudStatusEffectAlertItem::SetData(const struct FStatusEffectAlertViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreHudStatusEffectAlertItem", "SetData");

	Params::CoreHudStatusEffectAlertItem_SetData Parms{};

	Parms.data = std::move(data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreInputPromptWidget.DisplayPrompt
// (Event, Protected, BlueprintEvent)

void UCoreInputPromptWidget::DisplayPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "DisplayPrompt");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreInputPromptWidget.GetInputKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UCoreInputPromptWidget::GetInputKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "GetInputKey");

	Params::CoreInputPromptWidget_GetInputKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInputPromptWidget::IsEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "IsEnabled");

	Params::CoreInputPromptWidget_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.OnEnabledChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    isEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputPromptWidget::OnEnabledChanged(bool isEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "OnEnabledChanged");

	Params::CoreInputPromptWidget_OnEnabledChanged Parms{};

	Parms.isEnabled = isEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreInputPromptWidget.PromptNotFound
// (Final, Native, Protected, BlueprintCallable)

void UCoreInputPromptWidget::PromptNotFound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "PromptNotFound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputPromptWidget::SetEnabled(bool isEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "SetEnabled");

	Params::CoreInputPromptWidget_SetEnabled Parms{};

	Parms.isEnabled = isEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.SetInputKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      inputKey                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInputPromptWidget::SetInputKey(const struct FKey& inputKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "SetInputKey");

	Params::CoreInputPromptWidget_SetInputKey Parms{};

	Parms.inputKey = std::move(inputKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInputPromptWidget.GetInputShortDisplayName
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreInputPromptWidget::GetInputShortDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInputPromptWidget", "GetInputShortDisplayName");

	Params::CoreInputPromptWidget_GetInputShortDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInteractionProgressWidget.SetProficiencies
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FStatusEffectViewData>&proficiencyDatas                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInteractionProgressWidget::SetProficiencies(const TArray<struct FStatusEffectViewData>& proficiencyDatas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionProgressWidget", "SetProficiencies");

	Params::CoreInteractionProgressWidget_SetProficiencies Parms{};

	Parms.proficiencyDatas = std::move(proficiencyDatas);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.PlayIdleAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreInteractionPromptActionWidget::PlayIdleAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "PlayIdleAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      inputKey                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInteractionPromptActionWidget::SetInputKey(const struct FKey& inputKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "SetInputKey");

	Params::CoreInteractionPromptActionWidget_SetInputKey Parms{};

	Parms.inputKey = std::move(inputKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey2
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      inputKey2                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInteractionPromptActionWidget::SetInputKey2(const struct FKey& inputKey2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "SetInputKey2");

	Params::CoreInteractionPromptActionWidget_SetInputKey2 Parms{};

	Parms.inputKey2 = std::move(inputKey2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey3
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      inputKey3                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInteractionPromptActionWidget::SetInputKey3(const struct FKey& inputKey3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "SetInputKey3");

	Params::CoreInteractionPromptActionWidget_SetInputKey3 Parms{};

	Parms.inputKey3 = std::move(inputKey3);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.SetInputKey4
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      inputKey4                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInteractionPromptActionWidget::SetInputKey4(const struct FKey& inputKey4)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "SetInputKey4");

	Params::CoreInteractionPromptActionWidget_SetInputKey4 Parms{};

	Parms.inputKey4 = std::move(inputKey4);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.StopIdleAnimation
// (Final, Native, Public, BlueprintCallable)

void UCoreInteractionPromptActionWidget::StopIdleAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "StopIdleAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.HasFourthPrompt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInteractionPromptActionWidget::HasFourthPrompt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "HasFourthPrompt");

	Params::CoreInteractionPromptActionWidget_HasFourthPrompt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.HasSecondPrompt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInteractionPromptActionWidget::HasSecondPrompt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "HasSecondPrompt");

	Params::CoreInteractionPromptActionWidget_HasSecondPrompt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInteractionPromptActionWidget.HasThirdPrompt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreInteractionPromptActionWidget::HasThirdPrompt() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptActionWidget", "HasThirdPrompt");

	Params::CoreInteractionPromptActionWidget_HasThirdPrompt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreInteractionPromptWidget.ClearData
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreInteractionPromptWidget::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptWidget", "ClearData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreInteractionPromptWidget.OnLargeTextSettingsChanged
// (Final, Native, Private)
// Parameters:
// bool                                    isLargeTextEnabled                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreInteractionPromptWidget::OnLargeTextSettingsChanged(bool isLargeTextEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptWidget", "OnLargeTextSettingsChanged");

	Params::CoreInteractionPromptWidget_OnLargeTextSettingsChanged Parms{};

	Parms.isLargeTextEnabled = isLargeTextEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreInteractionPromptWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FInteractionPromptViewData&data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreInteractionPromptWidget::SetData(const struct FInteractionPromptViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreInteractionPromptWidget", "SetData");

	Params::CoreInteractionPromptWidget_SetData Parms{};

	Parms.data = std::move(data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreKeyListenerButtonWidget.SetKeyOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      keyOverride                                            (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerButtonWidget::SetKeyOverride(const struct FKey& keyOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerButtonWidget", "SetKeyOverride");

	Params::CoreKeyListenerButtonWidget_SetKeyOverride Parms{};

	Parms.keyOverride = std::move(keyOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerButtonWidget.SetUIAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EUIActionType                     actionType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerButtonWidget::SetUIAction(const EUIActionType actionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerButtonWidget", "SetUIAction");

	Params::CoreKeyListenerButtonWidget_SetUIAction Parms{};

	Parms.actionType = actionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.OnEnabledChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    isEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::OnEnabledChanged(bool isEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "OnEnabledChanged");

	Params::CoreKeyListenerInputPromptWidget_OnEnabledChanged Parms{};

	Parms.isEnabled = isEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetAdditionalIcon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        iconTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetAdditionalIcon(TSoftObjectPtr<class UTexture2D> iconTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetAdditionalIcon");

	Params::CoreKeyListenerInputPromptWidget_SetAdditionalIcon Parms{};

	Parms.iconTexture = iconTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetEnabled(bool isEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetEnabled");

	Params::CoreKeyListenerInputPromptWidget_SetEnabled Parms{};

	Parms.isEnabled = isEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetKeyOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      keyOverride                                            (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetKeyOverride(const struct FKey& keyOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetKeyOverride");

	Params::CoreKeyListenerInputPromptWidget_SetKeyOverride Parms{};

	Parms.keyOverride = std::move(keyOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetLabel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      label                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetLabel(const class FText& label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetLabel");

	Params::CoreKeyListenerInputPromptWidget_SetLabel Parms{};

	Parms.label = std::move(label);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetRepeatable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isRepeatable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      repetitionDelayCurve                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetRepeatable(bool isRepeatable, class UCurveFloat* repetitionDelayCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetRepeatable");

	Params::CoreKeyListenerInputPromptWidget_SetRepeatable Parms{};

	Parms.isRepeatable = isRepeatable;
	Parms.repetitionDelayCurve = repetitionDelayCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.SetUIAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EUIActionType                     actionType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreKeyListenerInputPromptWidget::SetUIAction(const EUIActionType actionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "SetUIAction");

	Params::CoreKeyListenerInputPromptWidget_SetUIAction Parms{};

	Parms.actionType = actionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreKeyListenerInputPromptWidget.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreKeyListenerInputPromptWidget::IsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreKeyListenerInputPromptWidget", "IsEnabled");

	Params::CoreKeyListenerInputPromptWidget_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreLockedOverlayWidget.SetIsLocked
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isLocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    useAnimation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreLockedOverlayWidget::SetIsLocked(bool isLocked, bool useAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreLockedOverlayWidget", "SetIsLocked");

	Params::CoreLockedOverlayWidget_SetIsLocked Parms{};

	Parms.isLocked = isLocked;
	Parms.useAnimation = useAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetTooltipData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FLoadoutTooltipData              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FLoadoutTooltipData UCoreMenuLoadoutPartWidget::GetTooltipData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "GetTooltipData");

	Params::CoreMenuLoadoutPartWidget_GetTooltipData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetWidgetItemId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UCoreMenuLoadoutPartWidget::GetWidgetItemId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "GetWidgetItemId");

	Params::CoreMenuLoadoutPartWidget_GetWidgetItemId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.GetWidgetLockedState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreMenuLoadoutPartWidget::GetWidgetLockedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "GetWidgetLockedState");

	Params::CoreMenuLoadoutPartWidget_GetWidgetLockedState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetBackgroundLayers
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreMenuLoadoutPartWidget::SetBackgroundLayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetBackgroundLayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetBackgroundShadowLayers
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreMenuLoadoutPartWidget::SetBackgroundShadowLayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetBackgroundShadowLayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetDisabledWidget
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreMenuLoadoutPartWidget::SetDisabledWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetDisabledWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetEmptyWidget
// (Final, Native, Public)

void UCoreMenuLoadoutPartWidget::SetEmptyWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetEmptyWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetLoadoutPartData
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const class UMenuLoadoutPartViewData*   data                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuLoadoutPartWidget::SetLoadoutPartData(const class UMenuLoadoutPartViewData* data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetLoadoutPartData");

	Params::CoreMenuLoadoutPartWidget_SetLoadoutPartData Parms{};

	Parms.data = data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetLoadoutPartScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuLoadoutPartWidget::SetLoadoutPartScale(float scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetLoadoutPartScale");

	Params::CoreMenuLoadoutPartWidget_SetLoadoutPartScale Parms{};

	Parms.scale = scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetLoadoutPartTooltipData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLoadoutTooltipData&       tooltipData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreMenuLoadoutPartWidget::SetLoadoutPartTooltipData(const struct FLoadoutTooltipData& tooltipData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetLoadoutPartTooltipData");

	Params::CoreMenuLoadoutPartWidget_SetLoadoutPartTooltipData Parms{};

	Parms.tooltipData = std::move(tooltipData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuLoadoutPartWidget.SetSelectedState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    selectedState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuLoadoutPartWidget::SetSelectedState(bool selectedState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuLoadoutPartWidget", "SetSelectedState");

	Params::CoreMenuLoadoutPartWidget_SetSelectedState Parms{};

	Parms.selectedState = selectedState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuAddonWidget.GetWidgetParentDisplayName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UCoreMenuAddonWidget::GetWidgetParentDisplayName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuAddonWidget", "GetWidgetParentDisplayName");

	Params::CoreMenuAddonWidget_GetWidgetParentDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreMenuAddonWidget.HidePlusIcon
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreMenuAddonWidget::HidePlusIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuAddonWidget", "HidePlusIcon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreMenuAddonWidget.SetAddonDisabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isParentAvailable                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuAddonWidget::SetAddonDisabled(bool isParentAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuAddonWidget", "SetAddonDisabled");

	Params::CoreMenuAddonWidget_SetAddonDisabled Parms{};

	Parms.isParentAvailable = isParentAvailable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuAddonWidget.SetMenuAddonData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UMenuAddonViewData*         data                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuAddonWidget::SetMenuAddonData(const class UMenuAddonViewData* data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuAddonWidget", "SetMenuAddonData");

	Params::CoreMenuAddonWidget_SetMenuAddonData Parms{};

	Parms.data = data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuAddonWidget.SetMenuAddonTooltipData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLoadoutTooltipData&       tooltipData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreMenuAddonWidget::SetMenuAddonTooltipData(const struct FLoadoutTooltipData& tooltipData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuAddonWidget", "SetMenuAddonTooltipData");

	Params::CoreMenuAddonWidget_SetMenuAddonTooltipData Parms{};

	Parms.tooltipData = std::move(tooltipData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuAddonWidget.UpdateWidgetScale
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreMenuAddonWidget::UpdateWidgetScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuAddonWidget", "UpdateWidgetScale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreMenuItemWidget.SetMenuItemData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UMenuItemViewData*          data                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuItemWidget::SetMenuItemData(const class UMenuItemViewData* data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuItemWidget", "SetMenuItemData");

	Params::CoreMenuItemWidget_SetMenuItemData Parms{};

	Parms.data = data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuItemWidget.SetMenuItemTooltipData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLoadoutTooltipData&       tooltipData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreMenuItemWidget::SetMenuItemTooltipData(const struct FLoadoutTooltipData& tooltipData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuItemWidget", "SetMenuItemTooltipData");

	Params::CoreMenuItemWidget_SetMenuItemTooltipData Parms{};

	Parms.tooltipData = std::move(tooltipData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuOfferingWidget.SetMenuOfferingData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UMenuOfferingViewData*      data                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuOfferingWidget::SetMenuOfferingData(const class UMenuOfferingViewData* data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuOfferingWidget", "SetMenuOfferingData");

	Params::CoreMenuOfferingWidget_SetMenuOfferingData Parms{};

	Parms.data = data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuOfferingWidget.SetMenuOfferingTooltipData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLoadoutTooltipData&       tooltipData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreMenuOfferingWidget::SetMenuOfferingTooltipData(const struct FLoadoutTooltipData& tooltipData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuOfferingWidget", "SetMenuOfferingTooltipData");

	Params::CoreMenuOfferingWidget_SetMenuOfferingTooltipData Parms{};

	Parms.tooltipData = std::move(tooltipData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuPerkWidget.SetEmptyPerk
// (Event, Public, BlueprintEvent)

void UCoreMenuPerkWidget::SetEmptyPerk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuPerkWidget", "SetEmptyPerk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreMenuPerkWidget.SetMenuPerkData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UMenuPerkViewData*          data                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuPerkWidget::SetMenuPerkData(const class UMenuPerkViewData* data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuPerkWidget", "SetMenuPerkData");

	Params::CoreMenuPerkWidget_SetMenuPerkData Parms{};

	Parms.data = data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuPerkWidget.SetMenuPerkLevel
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuPerkWidget::SetMenuPerkLevel(int32 level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuPerkWidget", "SetMenuPerkLevel");

	Params::CoreMenuPerkWidget_SetMenuPerkLevel Parms{};

	Parms.level = level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreMenuPerkWidget.SetMenuPerkTooltipData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLoadoutTooltipData&       tooltipData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreMenuPerkWidget::SetMenuPerkTooltipData(const struct FLoadoutTooltipData& tooltipData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuPerkWidget", "SetMenuPerkTooltipData");

	Params::CoreMenuPerkWidget_SetMenuPerkTooltipData Parms{};

	Parms.tooltipData = std::move(tooltipData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuPowerWidget.SetMenuPowerData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UMenuPowerViewData*         data                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreMenuPowerWidget::SetMenuPowerData(const class UMenuPowerViewData* data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuPowerWidget", "SetMenuPowerData");

	Params::CoreMenuPowerWidget_SetMenuPowerData Parms{};

	Parms.data = data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreMenuPowerWidget.SetMenuPowerTooltipData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLoadoutTooltipData&       tooltipData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreMenuPowerWidget::SetMenuPowerTooltipData(const struct FLoadoutTooltipData& tooltipData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreMenuPowerWidget", "SetMenuPowerTooltipData");

	Params::CoreMenuPowerWidget_SetMenuPowerTooltipData Parms{};

	Parms.tooltipData = std::move(tooltipData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingButtonHolderWidget.GetStepId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCoreOnboardingButtonHolderWidget::GetStepId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingButtonHolderWidget", "GetStepId");

	Params::CoreOnboardingButtonHolderWidget_GetStepId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreOnboardingButtonHolderWidget.OnButtonSetDataAnimationCompleteDelegate
// (Final, Native, Protected)

void UCoreOnboardingButtonHolderWidget::OnButtonSetDataAnimationCompleteDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingButtonHolderWidget", "OnButtonSetDataAnimationCompleteDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingButtonHolderWidget.OnClickedTutorialButton
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                ClickedTutorialButton                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingButtonHolderWidget::OnClickedTutorialButton(class UCoreButtonWidget* ClickedTutorialButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingButtonHolderWidget", "OnClickedTutorialButton");

	Params::CoreOnboardingButtonHolderWidget_OnClickedTutorialButton Parms{};

	Parms.ClickedTutorialButton = ClickedTutorialButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.ResetOnboardingMenuSubtitle
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreOnboardingMenuTitleWidget::ResetOnboardingMenuSubtitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuTitleWidget", "ResetOnboardingMenuSubtitle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.SetOnboardingMenuDoubleTitle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      menuTitle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      menuSubTitle                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuTitleWidget::SetOnboardingMenuDoubleTitle(const class FText& menuTitle, const class FText& menuSubTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuTitleWidget", "SetOnboardingMenuDoubleTitle");

	Params::CoreOnboardingMenuTitleWidget_SetOnboardingMenuDoubleTitle Parms{};

	Parms.menuTitle = std::move(menuTitle);
	Parms.menuSubTitle = std::move(menuSubTitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.SetOnboardingMenuSubtitle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      menuTitle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuTitleWidget::SetOnboardingMenuSubtitle(const class FText& menuTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuTitleWidget", "SetOnboardingMenuSubtitle");

	Params::CoreOnboardingMenuTitleWidget_SetOnboardingMenuSubtitle Parms{};

	Parms.menuTitle = std::move(menuTitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingMenuTitleWidget.SetOnboardingMenuTitle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      menuTitle                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuTitleWidget::SetOnboardingMenuTitle(const class FText& menuTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuTitleWidget", "SetOnboardingMenuTitle");

	Params::CoreOnboardingMenuTitleWidget_SetOnboardingMenuTitle Parms{};

	Parms.menuTitle = std::move(menuTitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingMenuWidget.OnMenuTabSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuWidget::OnMenuTabSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuWidget", "OnMenuTabSelected");

	Params::CoreOnboardingMenuWidget_OnMenuTabSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingMenuWidget.OnMenuTabSelectedAgain
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuWidget::OnMenuTabSelectedAgain(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuWidget", "OnMenuTabSelectedAgain");

	Params::CoreOnboardingMenuWidget_OnMenuTabSelectedAgain Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingMenuWidget.SetBackButton
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// const bool                              isFTUE                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuWidget::SetBackButton(const bool isFTUE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuWidget", "SetBackButton");

	Params::CoreOnboardingMenuWidget_SetBackButton Parms{};

	Parms.isFTUE = isFTUE;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingMenuWidget.SetTitleText
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// const bool                              isInTutorial                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingMenuWidget::SetTitleText(const bool isInTutorial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingMenuWidget", "SetTitleText");

	Params::CoreOnboardingMenuWidget_SetTitleText Parms{};

	Parms.isInTutorial = isInTutorial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.OnRewardClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::OnRewardClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "OnRewardClicked");

	Params::CoreOnboardingTutorialButtonWidget_OnRewardClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.OnRewardPressed
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::OnRewardPressed(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "OnRewardPressed");

	Params::CoreOnboardingTutorialButtonWidget_OnRewardPressed Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.OnRewardReleased
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::OnRewardReleased(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "OnRewardReleased");

	Params::CoreOnboardingTutorialButtonWidget_OnRewardReleased Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FOnboardingTutorialButtonViewData&viewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    isRefreshingWithAnimation                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::SetData(const struct FOnboardingTutorialButtonViewData& viewData, bool isRefreshingWithAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "SetData");

	Params::CoreOnboardingTutorialButtonWidget_SetData Parms{};

	Parms.viewData = std::move(viewData);
	Parms.isRefreshingWithAnimation = isRefreshingWithAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetIsKillSwitch
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    isKillSwitch                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::SetIsKillSwitch(bool isKillSwitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "SetIsKillSwitch");

	Params::CoreOnboardingTutorialButtonWidget_SetIsKillSwitch Parms{};

	Parms.isKillSwitch = isKillSwitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetUIEnabled
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialButtonWidget::SetUIEnabled(bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "SetUIEnabled");

	Params::CoreOnboardingTutorialButtonWidget_SetUIEnabled Parms{};

	Parms.enabled = enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.SetVisual
// (Final, Native, Protected, BlueprintCallable)

void UCoreOnboardingTutorialButtonWidget::SetVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "SetVisual");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialButtonWidget.IsInUnavailableStep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreOnboardingTutorialButtonWidget::IsInUnavailableStep() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialButtonWidget", "IsInUnavailableStep");

	Params::CoreOnboardingTutorialButtonWidget_IsInUnavailableStep Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.CheckNextPendingButtonUpdate
// (Final, Native, Private)

void UCoreOnboardingTutorialPanelWidget::CheckNextPendingButtonUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialPanelWidget", "CheckNextPendingButtonUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.NextPendingButtonUpdated
// (Final, Native, Private)

void UCoreOnboardingTutorialPanelWidget::NextPendingButtonUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialPanelWidget", "NextPendingButtonUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.SetTutorialDescription
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      description                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    isWarning                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialPanelWidget::SetTutorialDescription(const class FText& description, bool isWarning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialPanelWidget", "SetTutorialDescription");

	Params::CoreOnboardingTutorialPanelWidget_SetTutorialDescription Parms{};

	Parms.description = std::move(description);
	Parms.isWarning = isWarning;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.SetTutorialSeparators
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class FString&                    completedStepId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialPanelWidget::SetTutorialSeparators(const class FString& completedStepId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialPanelWidget", "SetTutorialSeparators");

	Params::CoreOnboardingTutorialPanelWidget_SetTutorialSeparators Parms{};

	Parms.completedStepId = std::move(completedStepId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnboardingTutorialPanelWidget.TryBroadcastSelectedTutorial
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnboardingTutorialPanelWidget::TryBroadcastSelectedTutorial(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnboardingTutorialPanelWidget", "TryBroadcastSelectedTutorial");

	Params::CoreOnboardingTutorialPanelWidget_TryBroadcastSelectedTutorial Parms{};

	Parms.buttonTarget = buttonTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.BindToButton
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCoreButtonWidget*                buttonToBindOn                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnHoverBorderWidget::BindToButton(class UCoreButtonWidget* buttonToBindOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "BindToButton");

	Params::CoreOnHoverBorderWidget_BindToButton Parms{};

	Parms.buttonToBindOn = buttonToBindOn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.PlayHoveredAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    playForward                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnHoverBorderWidget::PlayHoveredAnimation(bool playForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "PlayHoveredAnimation");

	Params::CoreOnHoverBorderWidget_PlayHoveredAnimation Parms{};

	Parms.playForward = playForward;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.PlayPressedAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    playForward                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnHoverBorderWidget::PlayPressedAnimation(bool playForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "PlayPressedAnimation");

	Params::CoreOnHoverBorderWidget_PlayPressedAnimation Parms{};

	Parms.playForward = playForward;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.UnbindFromButton
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreOnHoverBorderWidget::UnbindFromButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "UnbindFromButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreOnHoverBorderWidget.UpdateColors
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              progressBarColor                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              backgroundColor                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreOnHoverBorderWidget::UpdateColors(const struct FLinearColor& progressBarColor, const struct FLinearColor& backgroundColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreOnHoverBorderWidget", "UpdateColors");

	Params::CoreOnHoverBorderWidget_UpdateColors Parms{};

	Parms.progressBarColor = std::move(progressBarColor);
	Parms.backgroundColor = std::move(backgroundColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePaginationContainerWidget.GetCurrentPage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCorePaginationContainerWidget::GetCurrentPage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePaginationContainerWidget", "GetCurrentPage");

	Params::CorePaginationContainerWidget_GetCurrentPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePaginationContainerWidget.OnPaginationSelected
// (Final, Native, Private)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePaginationContainerWidget::OnPaginationSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePaginationContainerWidget", "OnPaginationSelected");

	Params::CorePaginationContainerWidget_OnPaginationSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePaginationContainerWidget.UpdateSelectedWidget
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   currentIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   numberOfPages                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePaginationContainerWidget::UpdateSelectedWidget(int32 currentIndex, int32 numberOfPages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePaginationContainerWidget", "UpdateSelectedWidget");

	Params::CorePaginationContainerWidget_UpdateSelectedWidget Parms{};

	Parms.currentIndex = currentIndex;
	Parms.numberOfPages = numberOfPages;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerNameWidget.SetPlayerName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      playerName                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePlayerNameWidget::SetPlayerName(const class FText& playerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerNameWidget", "SetPlayerName");

	Params::CorePlayerNameWidget_SetPlayerName Parms{};

	Parms.playerName = std::move(playerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerStatusKillerEffectWidget.ClearVisual
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UCorePlayerStatusKillerEffectWidget::ClearVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusKillerEffectWidget", "ClearVisual");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePlayerStatusKillerEffectWidget.SetKillerData
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPlayerStatusViewData&     data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCorePlayerStatusKillerEffectWidget::SetKillerData(const struct FPlayerStatusViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusKillerEffectWidget", "SetKillerData");

	Params::CorePlayerStatusKillerEffectWidget_SetKillerData Parms{};

	Parms.data = std::move(data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CorePlayerStatusKillerEffectK07Widget.AfflictionHit
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UCorePlayerStatusKillerEffectK07Widget::AfflictionHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusKillerEffectK07Widget", "AfflictionHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.CacheViewData
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const struct FPlayerStatusViewData&     data                                                   (Parm, NativeAccessSpecifierPublic)
// struct FPlayerStatusViewData            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FPlayerStatusViewData UCorePlayerStatusWidget::CacheViewData(const struct FPlayerStatusViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "CacheViewData");

	Params::CorePlayerStatusWidget_CacheViewData Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.GetKillerStatusDataMappingDB
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* UCorePlayerStatusWidget::GetKillerStatusDataMappingDB() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "GetKillerStatusDataMappingDB");

	Params::CorePlayerStatusWidget_GetKillerStatusDataMappingDB Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.GetKillerStatusEffectWidget
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCorePlayerStatusKillerEffectWidget*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCorePlayerStatusKillerEffectWidget* UCorePlayerStatusWidget::GetKillerStatusEffectWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "GetKillerStatusEffectWidget");

	Params::CorePlayerStatusWidget_GetKillerStatusEffectWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.GetPlayerStateChangeType
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FPlayerStatusViewData&     newViewData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EPlayerStateChangeType                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlayerStateChangeType UCorePlayerStatusWidget::GetPlayerStateChangeType(const struct FPlayerStatusViewData& newViewData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "GetPlayerStateChangeType");

	Params::CorePlayerStatusWidget_GetPlayerStateChangeType Parms{};

	Parms.newViewData = std::move(newViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.HasKillerStatusDataChanged
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FPlayerStatusViewData&     newViewData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::HasKillerStatusDataChanged(const struct FPlayerStatusViewData& newViewData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "HasKillerStatusDataChanged");

	Params::CorePlayerStatusWidget_HasKillerStatusDataChanged Parms{};

	Parms.newViewData = std::move(newViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.HasObsessionStateChanged
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EObsessionUIState                       newObsessionState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::HasObsessionStateChanged(EObsessionUIState newObsessionState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "HasObsessionStateChanged");

	Params::CorePlayerStatusWidget_HasObsessionStateChanged Parms{};

	Parms.newObsessionState = newObsessionState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.HasPlayerStateChanged
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPlayerStatus                           newPlayerState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::HasPlayerStateChanged(EPlayerStatus newPlayerState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "HasPlayerStateChanged");

	Params::CorePlayerStatusWidget_HasPlayerStateChanged Parms{};

	Parms.newPlayerState = newPlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.HasPlayerStatusDataChanged
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FPlayerStatusViewData&     newViewData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::HasPlayerStatusDataChanged(const struct FPlayerStatusViewData& newViewData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "HasPlayerStatusDataChanged");

	Params::CorePlayerStatusWidget_HasPlayerStatusDataChanged Parms{};

	Parms.newViewData = std::move(newViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.HasTimerProgressChanged
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   newTimerProgress                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::HasTimerProgressChanged(float newTimerProgress) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "HasTimerProgressChanged");

	Params::CorePlayerStatusWidget_HasTimerProgressChanged Parms{};

	Parms.newTimerProgress = newTimerProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePlayerStatusWidget.ShouldPlaySleepAnimation
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESleepingUIState                        newSleepState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCorePlayerStatusWidget::ShouldPlaySleepAnimation(ESleepingUIState newSleepState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePlayerStatusWidget", "ShouldPlaySleepAnimation");

	Params::CorePlayerStatusWidget_ShouldPlaySleepAnimation Parms{};

	Parms.newSleepState = newSleepState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CorePresetWidgetContainer.SetPreset
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    presetData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             selectedPreset                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetWidgetContainer::SetPreset(const TArray<int32>& presetData, const int32 selectedPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetWidgetContainer", "SetPreset");

	Params::CorePresetWidgetContainer_SetPreset Parms{};

	Parms.presetData = std::move(presetData);
	Parms.selectedPreset = selectedPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CorePresetWidgetContainer.SetSelectedPreset
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCorePresetWidgetContainer::SetSelectedPreset(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorePresetWidgetContainer", "SetSelectedPreset");

	Params::CorePresetWidgetContainer_SetSelectedPreset Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.ClearData
// (Final, Native, Public, BlueprintCallable)

void UCoreRewardWrapperWidget::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.GetRewardWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreRewardWidget*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreRewardWidget* UCoreRewardWrapperWidget::GetRewardWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "GetRewardWidget");

	Params::CoreRewardWrapperWidget_GetRewardWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FRewardWrapperViewData&    viewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::SetData(const struct FRewardWrapperViewData& viewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "SetData");

	Params::CoreRewardWrapperWidget_SetData Parms{};

	Parms.viewData = std::move(viewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetIsClickable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isClickable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::SetIsClickable(bool isClickable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "SetIsClickable");

	Params::CoreRewardWrapperWidget_SetIsClickable Parms{};

	Parms.isClickable = isClickable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreRewardWrapperWidget.SetIsLocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isLocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    playAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreRewardWrapperWidget::SetIsLocked(bool isLocked, bool playAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreRewardWrapperWidget", "SetIsLocked");

	Params::CoreRewardWrapperWidget_SetIsLocked Parms{};

	Parms.isLocked = isLocked;
	Parms.playAnimation = playAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreScreenIndicatorsContainerWidget.GetScreenIndicatorsMap
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TMap<class FString, class UCoreScreenIndicatorWidget*>ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class FString, class UCoreScreenIndicatorWidget*> UCoreScreenIndicatorsContainerWidget::GetScreenIndicatorsMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreScreenIndicatorsContainerWidget", "GetScreenIndicatorsMap");

	Params::CoreScreenIndicatorsContainerWidget_GetScreenIndicatorsMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreScreenIndicatorsContainerWidget.FindScreenIndicatorKey
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCoreScreenIndicatorWidget*       value                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCoreScreenIndicatorsContainerWidget::FindScreenIndicatorKey(class UCoreScreenIndicatorWidget* value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreScreenIndicatorsContainerWidget", "FindScreenIndicatorKey");

	Params::CoreScreenIndicatorsContainerWidget_FindScreenIndicatorKey Parms{};

	Parms.value = value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreScreenIndicatorWidget.ClearData
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreScreenIndicatorWidget::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreScreenIndicatorWidget", "ClearData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreScreenIndicatorWidget.SetData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FScreenIndicatorViewData&  data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreScreenIndicatorWidget::SetData(const struct FScreenIndicatorViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreScreenIndicatorWidget", "SetData");

	Params::CoreScreenIndicatorWidget_SetData Parms{};

	Parms.data = std::move(data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreSpectateBarWidget.OnLeaveTriggered
// (Final, Native, Private)

void UCoreSpectateBarWidget::OnLeaveTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpectateBarWidget", "OnLeaveTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpectateBarWidget.OnLeftArrowTriggered
// (Final, Native, Private)

void UCoreSpectateBarWidget::OnLeftArrowTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpectateBarWidget", "OnLeftArrowTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreSpectateBarWidget.OnRightArrowTriggered
// (Final, Native, Private)

void UCoreSpectateBarWidget::OnRightArrowTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreSpectateBarWidget", "OnRightArrowTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStartSequenceWidget.OnHideStartSequenceComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 tween                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStartSequenceWidget::OnHideStartSequenceComplete(class UUITweenInstance* tween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStartSequenceWidget", "OnHideStartSequenceComplete");

	Params::CoreStartSequenceWidget_OnHideStartSequenceComplete Parms{};

	Parms.tween = tween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.GetStatusEffectData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FStatusEffectViewData            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FStatusEffectViewData UCoreStatusEffectIcon::GetStatusEffectData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "GetStatusEffectData");

	Params::CoreStatusEffectIcon_GetStatusEffectData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.ResetWidget
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStatusEffectIcon::ResetWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "ResetWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.SetInactiveTicks
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             inactiveTicks                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStatusEffectIcon::SetInactiveTicks(const int32 inactiveTicks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "SetInactiveTicks");

	Params::CoreStatusEffectIcon_SetInactiveTicks Parms{};

	Parms.inactiveTicks = inactiveTicks;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.SetStatusEffectData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FStatusEffectViewData&     data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStatusEffectIcon::SetStatusEffectData(const struct FStatusEffectViewData& data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "SetStatusEffectData");

	Params::CoreStatusEffectIcon_SetStatusEffectData Parms{};

	Parms.data = std::move(data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.UpdatePercentageFill
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   percentage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStatusEffectIcon::UpdatePercentageFill(float percentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "UpdatePercentageFill");

	Params::CoreStatusEffectIcon_UpdatePercentageFill Parms{};

	Parms.percentage = percentage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.UpdateWidget
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UCoreStatusEffectIcon::UpdateWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "UpdateWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.CoreStatusEffectIcon.GetInactiveTicks
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCoreStatusEffectIcon::GetInactiveTicks() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectIcon", "GetInactiveTicks");

	Params::CoreStatusEffectIcon_GetInactiveTicks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStatusEffectWidget.GetStatusEffectMap
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TMap<class FName, class UCoreStatusEffectIcon*>ReturnValue                                            (ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class FName, class UCoreStatusEffectIcon*> UCoreStatusEffectWidget::GetStatusEffectMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStatusEffectWidget", "GetStatusEffectMap");

	Params::CoreStatusEffectWidget_GetStatusEffectMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UArchiveStoryLevelViewData* viewData                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isSelectorReadOnly                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelButtonWidget::SetData(const class UArchiveStoryLevelViewData* viewData, bool isSelectorReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelButtonWidget", "SetData");

	Params::CoreStoryLevelButtonWidget_SetData Parms{};

	Parms.viewData = viewData;
	Parms.isSelectorReadOnly = isSelectorReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.UpdateStatusData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EArchivesStoryLevelStatus               newStatus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isSelectorReadOnly                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelButtonWidget::UpdateStatusData(EArchivesStoryLevelStatus newStatus, bool isSelectorReadOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelButtonWidget", "UpdateStatusData");

	Params::CoreStoryLevelButtonWidget_UpdateStatusData Parms{};

	Parms.newStatus = newStatus;
	Parms.isSelectorReadOnly = isSelectorReadOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.UpdateVisual
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UArchiveStoryLevelViewData* viewData                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    newlyUnlocked                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelButtonWidget::UpdateVisual(const class UArchiveStoryLevelViewData* viewData, bool newlyUnlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelButtonWidget", "UpdateVisual");

	Params::CoreStoryLevelButtonWidget_UpdateVisual Parms{};

	Parms.viewData = viewData;
	Parms.newlyUnlocked = newlyUnlocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.UpdateVisualStatus
// (Event, Protected, BlueprintEvent)
// Parameters:
// EArchivesStoryLevelStatus               newStatus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    newlyUnlocked                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelButtonWidget::UpdateVisualStatus(EArchivesStoryLevelStatus newStatus, bool newlyUnlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelButtonWidget", "UpdateVisualStatus");

	Params::CoreStoryLevelButtonWidget_UpdateVisualStatus Parms{};

	Parms.newStatus = newStatus;
	Parms.newlyUnlocked = newlyUnlocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoryLevelButtonWidget.GetLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCoreStoryLevelButtonWidget::GetLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelButtonWidget", "GetLevel");

	Params::CoreStoryLevelButtonWidget_GetLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.AdaptButtonsPoolToData
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   dataNumber                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelsSelectorWidget::AdaptButtonsPoolToData(int32 dataNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "AdaptButtonsPoolToData");

	Params::CoreStoryLevelsSelectorWidget_AdaptButtonsPoolToData Parms{};

	Parms.dataNumber = dataNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.OnStoryLevelUnlockedAnimation
// (Final, Native, Private)

void UCoreStoryLevelsSelectorWidget::OnStoryLevelUnlockedAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "OnStoryLevelUnlockedAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UArchiveStoryLevelViewData*>&levelbuttonsData                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreStoryLevelsSelectorWidget::SetData(const TArray<class UArchiveStoryLevelViewData*>& levelbuttonsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "SetData");

	Params::CoreStoryLevelsSelectorWidget_SetData Parms{};

	Parms.levelbuttonsData = std::move(levelbuttonsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelsSelectorWidget::SetEnabled(bool enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "SetEnabled");

	Params::CoreStoryLevelsSelectorWidget_SetEnabled Parms{};

	Parms.enabled = enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.SetUpInteractionMode
// (Final, Native, Protected, BlueprintCallable)

void UCoreStoryLevelsSelectorWidget::SetUpInteractionMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "SetUpInteractionMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.UpdateLevelStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             level                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EArchivesStoryLevelStatus         status                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelsSelectorWidget::UpdateLevelStatus(const int32 level, const EArchivesStoryLevelStatus status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "UpdateLevelStatus");

	Params::CoreStoryLevelsSelectorWidget_UpdateLevelStatus Parms{};

	Parms.level = level;
	Parms.status = status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.UpdateVisual
// (Event, Protected, BlueprintEvent)
// Parameters:
// EArchivesStoryLevelStatus               globalStatus                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    playAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreStoryLevelsSelectorWidget::UpdateVisual(EArchivesStoryLevelStatus globalStatus, bool playAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "UpdateVisual");

	Params::CoreStoryLevelsSelectorWidget_UpdateVisual Parms{};

	Parms.globalStatus = globalStatus;
	Parms.playAnimation = playAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreStoryLevelsSelectorWidget.GetStoryLevelButton
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreStoryLevelButtonWidget*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreStoryLevelButtonWidget* UCoreStoryLevelsSelectorWidget::GetStoryLevelButton(int32 level) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreStoryLevelsSelectorWidget", "GetStoryLevelButton");

	Params::CoreStoryLevelsSelectorWidget_GetStoryLevelButton Parms{};

	Parms.level = level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreToggleButtonWidget.SetActiveVisualState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreToggleButtonWidget::SetActiveVisualState(bool isActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToggleButtonWidget", "SetActiveVisualState");

	Params::CoreToggleButtonWidget_SetActiveVisualState Parms{};

	Parms.isActive = isActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreToggleButtonWidget.SetToDefaultState
// (Final, Native, Public, BlueprintCallable)

void UCoreToggleButtonWidget::SetToDefaultState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToggleButtonWidget", "SetToDefaultState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreToggleButtonWidget.IsToggled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCoreToggleButtonWidget::IsToggled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreToggleButtonWidget", "IsToggled");

	Params::CoreToggleButtonWidget_IsToggled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.CoreTutorialObjectiveItem.InitObjective
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTutorialObjectivesViewData&interactionsViewData                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreTutorialObjectiveItem::InitObjective(const struct FTutorialObjectivesViewData& interactionsViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTutorialObjectiveItem", "InitObjective");

	Params::CoreTutorialObjectiveItem_InitObjective Parms{};

	Parms.interactionsViewData = std::move(interactionsViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreTutorialObjectiveItem.SetObjectiveCompleted
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    removeAfterCompletion                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTutorialObjectiveItem::SetObjectiveCompleted(bool removeAfterCompletion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTutorialObjectiveItem", "SetObjectiveCompleted");

	Params::CoreTutorialObjectiveItem_SetObjectiveCompleted Parms{};

	Parms.removeAfterCompletion = removeAfterCompletion;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.CoreTutorialObjectivesContainer.OnTutorialObjectiveCompleted
// (Final, Native, Private)
// Parameters:
// class UCoreTutorialObjectiveItem*       item                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreTutorialObjectivesContainer::OnTutorialObjectiveCompleted(class UCoreTutorialObjectiveItem* item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreTutorialObjectivesContainer", "OnTutorialObjectiveCompleted");

	Params::CoreTutorialObjectivesContainer_OnTutorialObjectiveCompleted Parms{};

	Parms.item = item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreUnlockPersonalPerksPopupWidget.HideMenuPerkTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                unhoveredSlotWidget                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreUnlockPersonalPerksPopupWidget::HideMenuPerkTooltip(class UCoreButtonWidget* unhoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreUnlockPersonalPerksPopupWidget", "HideMenuPerkTooltip");

	Params::CoreUnlockPersonalPerksPopupWidget_HideMenuPerkTooltip Parms{};

	Parms.unhoveredSlotWidget = unhoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreUnlockPersonalPerksPopupWidget.ShowMenuPerkTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                hoveredSlotWidget                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreUnlockPersonalPerksPopupWidget::ShowMenuPerkTooltip(class UCoreButtonWidget* hoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreUnlockPersonalPerksPopupWidget", "ShowMenuPerkTooltip");

	Params::CoreUnlockPersonalPerksPopupWidget_ShowMenuPerkTooltip Parms{};

	Parms.hoveredSlotWidget = hoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.FullUpdateCurrency
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCurrencyLabelViewData&    viewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreWalletWidget::FullUpdateCurrency(const struct FCurrencyLabelViewData& viewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "FullUpdateCurrency");

	Params::CoreWalletWidget_FullUpdateCurrency Parms{};

	Parms.viewData = std::move(viewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.InitWallet
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FCurrencyLabelViewData>&walletData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UCoreWalletWidget::InitWallet(const TArray<struct FCurrencyLabelViewData>& walletData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "InitWallet");

	Params::CoreWalletWidget_InitWallet Parms{};

	Parms.walletData = std::move(walletData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.PlayNotEnoughCurrency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ECurrencyType                     type                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWalletWidget::PlayNotEnoughCurrency(const ECurrencyType type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "PlayNotEnoughCurrency");

	Params::CoreWalletWidget_PlayNotEnoughCurrency Parms{};

	Parms.type = type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWalletWidget.UpdateCurrency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const ECurrencyType                     type                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   newBalance                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   previousBalance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCoreWalletWidget::UpdateCurrency(const ECurrencyType type, int32 newBalance, int32 previousBalance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWalletWidget", "UpdateCurrency");

	Params::CoreWalletWidget_UpdateCurrency Parms{};

	Parms.type = type;
	Parms.newBalance = newBalance;
	Parms.previousBalance = previousBalance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CoreWatermarkWidget.UpdateWatermarkText
// (Final, Native, Protected)

void UCoreWatermarkWidget::UpdateWatermarkText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreWatermarkWidget", "UpdateWatermarkText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CurrencyProgressionTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCurrencyProgressionTooltipViewData&currencyViewData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCurrencyProgressionTooltipWidget::SetTooltipData(const struct FCurrencyProgressionTooltipViewData& currencyViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CurrencyProgressionTooltipWidget", "SetTooltipData");

	Params::CurrencyProgressionTooltipWidget_SetTooltipData Parms{};

	Parms.currencyViewData = std::move(currencyViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.AppendToDescriptionText
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      appendedText                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationTooltipWidget::AppendToDescriptionText(const class FText& appendedText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "AppendToDescriptionText");

	Params::CustomizationTooltipWidget_AppendToDescriptionText Parms{};

	Parms.appendedText = std::move(appendedText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.SetStatusText
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const bool                              isEquipped                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              isOwned                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              isLocked                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomizationTooltipWidget::SetStatusText(const bool isEquipped, const bool isOwned, const bool isLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "SetStatusText");

	Params::CustomizationTooltipWidget_SetStatusText Parms{};

	Parms.isEquipped = isEquipped;
	Parms.isOwned = isOwned;
	Parms.isLocked = isLocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.CustomizationTooltipWidget.SetTooltipData
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FCustomizationTooltipViewData&customizationViewData                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UCustomizationTooltipWidget::SetTooltipData(const struct FCustomizationTooltipViewData& customizationViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationTooltipWidget", "SetTooltipData");

	Params::CustomizationTooltipWidget_SetTooltipData Parms{};

	Parms.customizationViewData = std::move(customizationViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.DailyRitualsContainerWidget.OnDailyRitualClaimButtonClicked
// (Final, Native, Protected)
// Parameters:
// const class FString&                    dailyRitualKey                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsContainerWidget::OnDailyRitualClaimButtonClicked(const class FString& dailyRitualKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsContainerWidget", "OnDailyRitualClaimButtonClicked");

	Params::DailyRitualsContainerWidget_OnDailyRitualClaimButtonClicked Parms{};

	Parms.dailyRitualKey = std::move(dailyRitualKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsContainerWidget.OnDailyRitualRemoveButtonClicked
// (Final, Native, Protected)
// Parameters:
// const class FString&                    dailyRitualKey                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsContainerWidget::OnDailyRitualRemoveButtonClicked(const class FString& dailyRitualKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsContainerWidget", "OnDailyRitualRemoveButtonClicked");

	Params::DailyRitualsContainerWidget_OnDailyRitualRemoveButtonClicked Parms{};

	Parms.dailyRitualKey = std::move(dailyRitualKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsContainerWidget.OnDailyRitualTileFadeOutComplete
// (Final, Native, Private)
// Parameters:
// class UDailyRitualTileWidget*           dailyRitualTile                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsContainerWidget::OnDailyRitualTileFadeOutComplete(class UDailyRitualTileWidget* dailyRitualTile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsContainerWidget", "OnDailyRitualTileFadeOutComplete");

	Params::DailyRitualsContainerWidget_OnDailyRitualTileFadeOutComplete Parms{};

	Parms.dailyRitualTile = dailyRitualTile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsContainerWidget.OnDelayUntilFadeInSequenceComplete
// (Final, Native, Private)
// Parameters:
// class UUITweenInstance*                 delayUntilFadeInSequenceTween                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsContainerWidget::OnDelayUntilFadeInSequenceComplete(class UUITweenInstance* delayUntilFadeInSequenceTween)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsContainerWidget", "OnDelayUntilFadeInSequenceComplete");

	Params::DailyRitualsContainerWidget_OnDelayUntilFadeInSequenceComplete Parms{};

	Parms.delayUntilFadeInSequenceTween = delayUntilFadeInSequenceTween;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsContainerWidget.OnRecentlyAssignedDailyRitualFadeInComplete
// (Final, Native, Private)
// Parameters:
// class UDailyRitualTileWidget*           dailyRitualTile                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsContainerWidget::OnRecentlyAssignedDailyRitualFadeInComplete(class UDailyRitualTileWidget* dailyRitualTile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsContainerWidget", "OnRecentlyAssignedDailyRitualFadeInComplete");

	Params::DailyRitualsContainerWidget_OnRecentlyAssignedDailyRitualFadeInComplete Parms{};

	Parms.dailyRitualTile = dailyRitualTile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsContainerWidget.SetData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FDailyRitualViewData>&dailyRitualsData                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const bool                              isAfterTrial                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsContainerWidget::SetData(const TArray<struct FDailyRitualViewData>& dailyRitualsData, const bool isAfterTrial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsContainerWidget", "SetData");

	Params::DailyRitualsContainerWidget_SetData Parms{};

	Parms.dailyRitualsData = std::move(dailyRitualsData);
	Parms.isAfterTrial = isAfterTrial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsContainerWidget.StartAnim
// (Final, Native, Public, BlueprintCallable)

void UDailyRitualsContainerWidget::StartAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsContainerWidget", "StartAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsPopupWidget.OnDailyRitualClaimAllButtonClicked
// (Final, Native, Protected)

void UDailyRitualsPopupWidget::OnDailyRitualClaimAllButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupWidget", "OnDailyRitualClaimAllButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsPopupWidget.OnDailyRitualClaimButtonClicked
// (Final, Native, Protected)
// Parameters:
// const class FString&                    dailyRitualKey                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsPopupWidget::OnDailyRitualClaimButtonClicked(const class FString& dailyRitualKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupWidget", "OnDailyRitualClaimButtonClicked");

	Params::DailyRitualsPopupWidget_OnDailyRitualClaimButtonClicked Parms{};

	Parms.dailyRitualKey = std::move(dailyRitualKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsPopupWidget.OnDailyRitualRemoveButtonClicked
// (Final, Native, Protected)
// Parameters:
// const class FString&                    dailyRitualKey                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsPopupWidget::OnDailyRitualRemoveButtonClicked(const class FString& dailyRitualKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupWidget", "OnDailyRitualRemoveButtonClicked");

	Params::DailyRitualsPopupWidget_OnDailyRitualRemoveButtonClicked Parms{};

	Parms.dailyRitualKey = std::move(dailyRitualKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualsPopupWidget.SetVisuals
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    isAfterTrial                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualsPopupWidget::SetVisuals(bool isAfterTrial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupWidget", "SetVisuals");

	Params::DailyRitualsPopupWidget_SetVisuals Parms{};

	Parms.isAfterTrial = isAfterTrial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.DailyRitualTileWidget.OnClaimButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualTileWidget::OnClaimButtonClicked(class UCoreButtonWidget* button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualTileWidget", "OnClaimButtonClicked");

	Params::DailyRitualTileWidget_OnClaimButtonClicked Parms{};

	Parms.button = button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualTileWidget.OnRemoveButtonClicked
// (Final, Native, Protected)
// Parameters:
// class UCoreButtonWidget*                button                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDailyRitualTileWidget::OnRemoveButtonClicked(class UCoreButtonWidget* button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualTileWidget", "OnRemoveButtonClicked");

	Params::DailyRitualTileWidget_OnRemoveButtonClicked Parms{};

	Parms.button = button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DailyRitualTileWidget.PlayFadeInAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UDailyRitualTileWidget::PlayFadeInAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualTileWidget", "PlayFadeInAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.DailyRitualTileWidget.PlayFadeOutAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UDailyRitualTileWidget::PlayFadeOutAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualTileWidget", "PlayFadeOutAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.DBDComboBoxString.SetData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FString>&            OptionsList                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    DefaultOption                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDComboBoxString::SetData(const TArray<class FString>& OptionsList, const class FString& DefaultOption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDComboBoxString", "SetData");

	Params::DBDComboBoxString_SetData Parms{};

	Parms.OptionsList = std::move(OptionsList);
	Parms.DefaultOption = std::move(DefaultOption);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListButton.ToggleDropDownArrow
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    showArrow                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDDropDownListButton::ToggleDropDownArrow(bool showArrow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListButton", "ToggleDropDownArrow");

	Params::DBDDropDownListButton_ToggleDropDownArrow Parms{};

	Parms.showArrow = showArrow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.DBDDropDownListWidget.BindToTrigger
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                triggerButton                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDDropDownListWidget::BindToTrigger(class UCoreButtonWidget* triggerButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "BindToTrigger");

	Params::DBDDropDownListWidget_BindToTrigger Parms{};

	Parms.triggerButton = triggerButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.HideDropDownList
// (Final, Native, Private, BlueprintCallable)

void UDBDDropDownListWidget::HideDropDownList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "HideDropDownList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.OnOptionSelected
// (Native, Protected)
// Parameters:
// class UCoreSelectableButtonWidget*      selectedButton                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDDropDownListWidget::OnOptionSelected(class UCoreSelectableButtonWidget* selectedButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "OnOptionSelected");

	Params::DBDDropDownListWidget_OnOptionSelected Parms{};

	Parms.selectedButton = selectedButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.OnTriggerClicked
// (Final, Native, Private)
// Parameters:
// class UCoreButtonWidget*                buttonTarget                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDDropDownListWidget::OnTriggerClicked(class UCoreButtonWidget* buttonTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "OnTriggerClicked");

	Params::DBDDropDownListWidget_OnTriggerClicked Parms{};

	Parms.buttonTarget = buttonTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.OnUserClicked
// (Native, Protected, HasOutParams)
// Parameters:
// const struct FPointerEvent&             mouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDBDDropDownListWidget::OnUserClicked(const struct FPointerEvent& mouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "OnUserClicked");

	Params::DBDDropDownListWidget_OnUserClicked Parms{};

	Parms.mouseEvent = std::move(mouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.UnbindFromTrigger
// (Final, Native, Public, BlueprintCallable)

void UDBDDropDownListWidget::UnbindFromTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "UnbindFromTrigger");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDDropDownListWidget.UpdateDropDown
// (Native, Public)

void UDBDDropDownListWidget::UpdateDropDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDDropDownListWidget", "UpdateDropDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDImage.SetBrushFromSoftTextureWithDefault
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        softTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    matchSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDImage::SetBrushFromSoftTextureWithDefault(TSoftObjectPtr<class UTexture2D> softTexture, bool matchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDImage", "SetBrushFromSoftTextureWithDefault");

	Params::DBDImage_SetBrushFromSoftTextureWithDefault Parms{};

	Parms.softTexture = softTexture;
	Parms.matchSize = matchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDImage.SetBrushFromTextureWithDefault
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    matchSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDImage::SetBrushFromTextureWithDefault(class UTexture2D* texture, bool matchSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDImage", "SetBrushFromTextureWithDefault");

	Params::DBDImage_SetBrushFromTextureWithDefault Parms{};

	Parms.texture = texture;
	Parms.matchSize = matchSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.OnLargeTextSettingsChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    isLargeText                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDRichTextBlock::OnLargeTextSettingsChanged(bool isLargeText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "OnLargeTextSettingsChanged");

	Params::DBDRichTextBlock_OnLargeTextSettingsChanged Parms{};

	Parms.isLargeText = isLargeText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.OnSwitchDockStateChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    isDocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDRichTextBlock::OnSwitchDockStateChanged(bool isDocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "OnSwitchDockStateChanged");

	Params::DBDRichTextBlock_OnSwitchDockStateChanged Parms{};

	Parms.isDocked = isDocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.PreviewLargeText
// (Final, Native, Protected)

void UDBDRichTextBlock::PreviewLargeText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "PreviewLargeText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.PreviewUndocked
// (Final, Native, Protected)

void UDBDRichTextBlock::PreviewUndocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "PreviewUndocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.SetHTMLText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDBDRichTextBlock::SetHTMLText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "SetHTMLText");

	Params::DBDRichTextBlock_SetHTMLText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.SetIsUpperCase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isUpperCase                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDRichTextBlock::SetIsUpperCase(bool isUpperCase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "SetIsUpperCase");

	Params::DBDRichTextBlock_SetIsUpperCase Parms{};

	Parms.isUpperCase = isUpperCase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDRichTextBlock.GetIsUpperCase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDBDRichTextBlock::GetIsUpperCase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDRichTextBlock", "GetIsUpperCase");

	Params::DBDRichTextBlock_GetIsUpperCase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDScrollBox.HandleControllerInput
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   analogValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDScrollBox::HandleControllerInput(float analogValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "HandleControllerInput");

	Params::DBDScrollBox_HandleControllerInput Parms{};

	Parms.analogValue = analogValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.IsMouseOver
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDBDScrollBox::IsMouseOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "IsMouseOver");

	Params::DBDScrollBox_IsMouseOver Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDScrollBox.OnControlModeChanged
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EControlMode                            controlMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDScrollBox::OnControlModeChanged(EControlMode controlMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "OnControlModeChanged");

	Params::DBDScrollBox_OnControlModeChanged Parms{};

	Parms.controlMode = controlMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.SetDisplayPrompt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCoreKeyListenerInputPromptWidget*displayPrompt                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDScrollBox::SetDisplayPrompt(class UCoreKeyListenerInputPromptWidget* displayPrompt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "SetDisplayPrompt");

	Params::DBDScrollBox_SetDisplayPrompt Parms{};

	Parms.displayPrompt = displayPrompt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.UpdateDisplayPrompt
// (Final, Native, Protected, BlueprintCallable)

void UDBDScrollBox::UpdateDisplayPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "UpdateDisplayPrompt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDScrollBox.UpdateSmoothMask
// (Final, Native, Private)
// Parameters:
// float                                   currentOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDScrollBox::UpdateSmoothMask(float currentOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDScrollBox", "UpdateSmoothMask");

	Params::DBDScrollBox_UpdateSmoothMask Parms{};

	Parms.currentOffset = currentOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.OnLargeTextSettingsChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    isLargeText                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTextBlock::OnLargeTextSettingsChanged(bool isLargeText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "OnLargeTextSettingsChanged");

	Params::DBDTextBlock_OnLargeTextSettingsChanged Parms{};

	Parms.isLargeText = isLargeText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.OnSwitchDockStateChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    isDocked                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTextBlock::OnSwitchDockStateChanged(bool isDocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "OnSwitchDockStateChanged");

	Params::DBDTextBlock_OnSwitchDockStateChanged Parms{};

	Parms.isDocked = isDocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.PreviewLargeText
// (Final, Native, Protected)

void UDBDTextBlock::PreviewLargeText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "PreviewLargeText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.PreviewUndocked
// (Final, Native, Protected)

void UDBDTextBlock::PreviewUndocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "PreviewUndocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.SetIsUpperCase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    isUpperCase                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTextBlock::SetIsUpperCase(bool isUpperCase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "SetIsUpperCase");

	Params::DBDTextBlock_SetIsUpperCase Parms{};

	Parms.isUpperCase = isUpperCase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTextBlock.GetIsUpperCase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDBDTextBlock::GetIsUpperCase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTextBlock", "GetIsUpperCase");

	Params::DBDTextBlock_GetIsUpperCase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDTooltipManager.HideTooltip
// (Final, Native, Public, BlueprintCallable)

void UDBDTooltipManager::HideTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "HideTooltip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.OnViewportCreated
// (Final, Native, Private)

void UDBDTooltipManager::OnViewportCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "OnViewportCreated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowArchiveCompendiumTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCompendiumButtonData&     tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowArchiveCompendiumTooltip(const struct FCompendiumButtonData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowArchiveCompendiumTooltip");

	Params::DBDTooltipManager_ShowArchiveCompendiumTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowArchiveNodeTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchiveNodeViewData&      tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowArchiveNodeTooltip(const struct FArchiveNodeViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowArchiveNodeTooltip");

	Params::DBDTooltipManager_ShowArchiveNodeTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowArchiveRewardNodeTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FArchiveRewardNodeTooltipViewData&tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowArchiveRewardNodeTooltip(const struct FArchiveRewardNodeTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowArchiveRewardNodeTooltip");

	Params::DBDTooltipManager_ShowArchiveRewardNodeTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowCharacterTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCharacterTooltipViewData& tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowCharacterTooltip(const struct FCharacterTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowCharacterTooltip");

	Params::DBDTooltipManager_ShowCharacterTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowCurrencyTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCurrencyProgressionTooltipViewData&tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowCurrencyTooltip(const struct FCurrencyProgressionTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowCurrencyTooltip");

	Params::DBDTooltipManager_ShowCurrencyTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowCustomizationTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FCustomizationTooltipViewData&tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowCustomizationTooltip(const struct FCustomizationTooltipViewData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowCustomizationTooltip");

	Params::DBDTooltipManager_ShowCustomizationTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowLabelTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowLabelTooltip(const class FText& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowLabelTooltip");

	Params::DBDTooltipManager_ShowLabelTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDTooltipManager.ShowLoadoutTooltip
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLoadoutTooltipData&       tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGeometry&                 triggerGeometry                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const ETooltipHorizontalAlignment       tooltipHorizontalAlignment                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETooltipVerticalAlignment               tooltipVerticalAlignment                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDTooltipManager::ShowLoadoutTooltip(const struct FLoadoutTooltipData& tooltipViewData, const struct FGeometry& triggerGeometry, const ETooltipHorizontalAlignment tooltipHorizontalAlignment, ETooltipVerticalAlignment tooltipVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDTooltipManager", "ShowLoadoutTooltip");

	Params::DBDTooltipManager_ShowLoadoutTooltip Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);
	Parms.triggerGeometry = std::move(triggerGeometry);
	Parms.tooltipHorizontalAlignment = tooltipHorizontalAlignment;
	Parms.tooltipVerticalAlignment = tooltipVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBox.AddChildToWrapBox
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Content                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDBDWrapBoxSlot*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDBDWrapBoxSlot* UDBDWrapBox::AddChildToWrapBox(class UWidget* Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBox", "AddChildToWrapBox");

	Params::DBDWrapBox_AddChildToWrapBox Parms{};

	Parms.Content = Content;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewsCore.DBDWrapBox.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    InHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBox::SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBox", "SetHorizontalAlignment");

	Params::DBDWrapBox_SetHorizontalAlignment Parms{};

	Parms.InHorizontalAlignment = InHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBox.SetInnerSlotPadding
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 InPadding                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBox::SetInnerSlotPadding(const struct FVector2D& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBox", "SetInnerSlotPadding");

	Params::DBDWrapBox_SetInnerSlotPadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBoxSlot.SetFillEmptySpace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InbFillEmptySpace                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBoxSlot::SetFillEmptySpace(bool InbFillEmptySpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBoxSlot", "SetFillEmptySpace");

	Params::DBDWrapBoxSlot_SetFillEmptySpace Parms{};

	Parms.InbFillEmptySpace = InbFillEmptySpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBoxSlot.SetFillSpanWhenLessThan
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InFillSpanWhenLessThan                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBoxSlot::SetFillSpanWhenLessThan(float InFillSpanWhenLessThan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBoxSlot", "SetFillSpanWhenLessThan");

	Params::DBDWrapBoxSlot_SetFillSpanWhenLessThan Parms{};

	Parms.InFillSpanWhenLessThan = InFillSpanWhenLessThan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBoxSlot.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    InHorizontalAlignment                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBoxSlot::SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBoxSlot", "SetHorizontalAlignment");

	Params::DBDWrapBoxSlot_SetHorizontalAlignment Parms{};

	Parms.InHorizontalAlignment = InHorizontalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBoxSlot.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   InPadding                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UDBDWrapBoxSlot::SetPadding(const struct FMargin& InPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBoxSlot", "SetPadding");

	Params::DBDWrapBoxSlot_SetPadding Parms{};

	Parms.InPadding = std::move(InPadding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DBDWrapBoxSlot.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      InVerticalAlignment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDWrapBoxSlot::SetVerticalAlignment(EVerticalAlignment InVerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDWrapBoxSlot", "SetVerticalAlignment");

	Params::DBDWrapBoxSlot_SetVerticalAlignment Parms{};

	Parms.InVerticalAlignment = InVerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnAnalogInput
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FAnalogInputEvent&         analogEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDragZone::OnAnalogInput(const struct FAnalogInputEvent& analogEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnAnalogInput");

	Params::DragZone_OnAnalogInput Parms{};

	Parms.analogEvent = std::move(analogEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnMouseHoverHitzone
// (Final, Native, Private)

void UDragZone::OnMouseHoverHitzone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnMouseHoverHitzone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnMouseMoveGlobal
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FPointerEvent&             mouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDragZone::OnMouseMoveGlobal(const struct FPointerEvent& mouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnMouseMoveGlobal");

	Params::DragZone_OnMouseMoveGlobal Parms{};

	Parms.mouseEvent = std::move(mouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnMousePressGlobal
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FPointerEvent&             mouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDragZone::OnMousePressGlobal(const struct FPointerEvent& mouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnMousePressGlobal");

	Params::DragZone_OnMousePressGlobal Parms{};

	Parms.mouseEvent = std::move(mouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnMousePressHitzone
// (Final, Native, Private)

void UDragZone::OnMousePressHitzone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnMousePressHitzone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.DragZone.OnMouseReleaseGlobal
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FPointerEvent&             mouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDragZone::OnMouseReleaseGlobal(const struct FPointerEvent& mouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DragZone", "OnMouseReleaseGlobal");

	Params::DragZone_OnMouseReleaseGlobal Parms{};

	Parms.mouseEvent = std::move(mouseEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.EventEntryPopupWidget.setWidgetSkinFromEventLabel
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const class FText&                      eventLabel                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UEventEntryPopupWidget::setWidgetSkinFromEventLabel(const class FText& eventLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryPopupWidget", "setWidgetSkinFromEventLabel");

	Params::EventEntryPopupWidget_setWidgetSkinFromEventLabel Parms{};

	Parms.eventLabel = std::move(eventLabel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LabelTooltipWidget.Reset
// (Final, Native, Public)

void ULabelTooltipWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LabelTooltipWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LabelTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const class FText&                      labelText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULabelTooltipWidget::SetTooltipData(const class FText& labelText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LabelTooltipWidget", "SetTooltipData");

	Params::LabelTooltipWidget_SetTooltipData Parms{};

	Parms.labelText = std::move(labelText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.HideMenuLoadoutPartsTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                unhoveredSlotWidget                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupWidget::HideMenuLoadoutPartsTooltip(class UCoreButtonWidget* unhoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "HideMenuLoadoutPartsTooltip");

	Params::LoadoutMenuPopupWidget_HideMenuLoadoutPartsTooltip Parms{};

	Parms.unhoveredSlotWidget = unhoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnDropDownListSelectedOptionChanged
// (Final, Native, Private)
// Parameters:
// const struct FTabWidgetData&            buttonData                                             (Parm, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupWidget::OnDropDownListSelectedOptionChanged(const struct FTabWidgetData& buttonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "OnDropDownListSelectedOptionChanged");

	Params::LoadoutMenuPopupWidget_OnDropDownListSelectedOptionChanged Parms{};

	Parms.buttonData = std::move(buttonData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnDropdownSelected
// (Final, Native, Private)
// Parameters:
// ESlateVisibility                        InVisibility                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupWidget::OnDropdownSelected(ESlateVisibility InVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "OnDropdownSelected");

	Params::LoadoutMenuPopupWidget_OnDropdownSelected Parms{};

	Parms.InVisibility = InVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuAddonSlotClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                menuAddonWidget                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupWidget::OnLoadoutMenuAddonSlotClicked(class UCoreButtonWidget* menuAddonWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "OnLoadoutMenuAddonSlotClicked");

	Params::LoadoutMenuPopupWidget_OnLoadoutMenuAddonSlotClicked Parms{};

	Parms.menuAddonWidget = menuAddonWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuInventorySlotClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                menuPerkWidget                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupWidget::OnLoadoutMenuInventorySlotClicked(class UCoreButtonWidget* menuPerkWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "OnLoadoutMenuInventorySlotClicked");

	Params::LoadoutMenuPopupWidget_OnLoadoutMenuInventorySlotClicked Parms{};

	Parms.menuPerkWidget = menuPerkWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuItemSlotClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                menuItemWidget                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupWidget::OnLoadoutMenuItemSlotClicked(class UCoreButtonWidget* menuItemWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "OnLoadoutMenuItemSlotClicked");

	Params::LoadoutMenuPopupWidget_OnLoadoutMenuItemSlotClicked Parms{};

	Parms.menuItemWidget = menuItemWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuLeftArrowClicked
// (Final, Native, Private, BlueprintCallable)

void ULoadoutMenuPopupWidget::OnLoadoutMenuLeftArrowClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "OnLoadoutMenuLeftArrowClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuOfferingSlotClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                menuOfferingWidget                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupWidget::OnLoadoutMenuOfferingSlotClicked(class UCoreButtonWidget* menuOfferingWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "OnLoadoutMenuOfferingSlotClicked");

	Params::LoadoutMenuPopupWidget_OnLoadoutMenuOfferingSlotClicked Parms{};

	Parms.menuOfferingWidget = menuOfferingWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuPerkSlotClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                menuPerkWidget                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupWidget::OnLoadoutMenuPerkSlotClicked(class UCoreButtonWidget* menuPerkWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "OnLoadoutMenuPerkSlotClicked");

	Params::LoadoutMenuPopupWidget_OnLoadoutMenuPerkSlotClicked Parms{};

	Parms.menuPerkWidget = menuPerkWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuPowerSlotClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                menuPowerWidget                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupWidget::OnLoadoutMenuPowerSlotClicked(class UCoreButtonWidget* menuPowerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "OnLoadoutMenuPowerSlotClicked");

	Params::LoadoutMenuPopupWidget_OnLoadoutMenuPowerSlotClicked Parms{};

	Parms.menuPowerWidget = menuPowerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuPresetClicked
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// const int32                             selectedPresetId                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupWidget::OnLoadoutMenuPresetClicked(const int32 selectedPresetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "OnLoadoutMenuPresetClicked");

	Params::LoadoutMenuPopupWidget_OnLoadoutMenuPresetClicked Parms{};

	Parms.selectedPresetId = selectedPresetId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnLoadoutMenuRightArrowClicked
// (Final, Native, Private, BlueprintCallable)

void ULoadoutMenuPopupWidget::OnLoadoutMenuRightArrowClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "OnLoadoutMenuRightArrowClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.OnPaginationSelected
// (Final, Native, Private)
// Parameters:
// const int32                             currentPage                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    isUpdate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupWidget::OnPaginationSelected(const int32 currentPage, bool isUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "OnPaginationSelected");

	Params::LoadoutMenuPopupWidget_OnPaginationSelected Parms{};

	Parms.currentPage = currentPage;
	Parms.isUpdate = isUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.PlayPaginationInAnimation
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void ULoadoutMenuPopupWidget::PlayPaginationInAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "PlayPaginationInAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.PlayPaginationOutAnimation
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isNextPage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupWidget::PlayPaginationOutAnimation(bool isNextPage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "PlayPaginationOutAnimation");

	Params::LoadoutMenuPopupWidget_PlayPaginationOutAnimation Parms{};

	Parms.isNextPage = isNextPage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.SetInventoryItemEnabled
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCoreMenuLoadoutPartWidget*       widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EItemAvailability                 availability                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupWidget::SetInventoryItemEnabled(class UCoreMenuLoadoutPartWidget* widget, const EItemAvailability availability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "SetInventoryItemEnabled");

	Params::LoadoutMenuPopupWidget_SetInventoryItemEnabled Parms{};

	Parms.widget = widget;
	Parms.availability = availability;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.ShowMenuLoadoutPartsTooltip
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class UCoreButtonWidget*                hoveredSlotWidget                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutMenuPopupWidget::ShowMenuLoadoutPartsTooltip(class UCoreButtonWidget* hoveredSlotWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "ShowMenuLoadoutPartsTooltip");

	Params::LoadoutMenuPopupWidget_ShowMenuLoadoutPartsTooltip Parms{};

	Parms.hoveredSlotWidget = hoveredSlotWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutMenuPopupWidget.UpdateInventoryItemData
// (Final, Native, Private, BlueprintCallable)

void ULoadoutMenuPopupWidget::UpdateInventoryItemData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuPopupWidget", "UpdateInventoryItemData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutTooltipWidget.Reset
// (Final, Native, Public)

void ULoadoutTooltipWidget::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutTooltipWidget", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.LoadoutTooltipWidget.SetLoadoutTooltipLockedState
// (Event, Protected, BlueprintEvent)

void ULoadoutTooltipWidget::SetLoadoutTooltipLockedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutTooltipWidget", "SetLoadoutTooltipLockedState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewsCore.LoadoutTooltipWidget.SetLoadoutTooltipPerkLevel
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoadoutTooltipWidget::SetLoadoutTooltipPerkLevel(int32 level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutTooltipWidget", "SetLoadoutTooltipPerkLevel");

	Params::LoadoutTooltipWidget_SetLoadoutTooltipPerkLevel Parms{};

	Parms.level = level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewsCore.LoadoutTooltipWidget.SetTooltipData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FLoadoutTooltipData&       tooltipViewData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULoadoutTooltipWidget::SetTooltipData(const struct FLoadoutTooltipData& tooltipViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutTooltipWidget", "SetTooltipData");

	Params::LoadoutTooltipWidget_SetTooltipData Parms{};

	Parms.tooltipViewData = std::move(tooltipViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewsCore.TestWidget.SetShowWorkbench
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    showWorkbench                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTestWidget::SetShowWorkbench(bool showWorkbench)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestWidget", "SetShowWorkbench");

	Params::TestWidget_SetShowWorkbench Parms{};

	Parms.showWorkbench = showWorkbench;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

