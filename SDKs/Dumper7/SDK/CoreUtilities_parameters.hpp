#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CoreUtilities

#include "Basic.hpp"


namespace SDK::Params
{

// Function CoreUtilities.CoreUtilities.GetGameInstance
// 0x0010 (0x0010 - 0x0000)
struct CoreUtilities_GetGameInstance final
{
public:
	const class UObject*                          worldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameInstance*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreUtilities_GetGameInstance) == 0x000008, "Wrong alignment on CoreUtilities_GetGameInstance");
static_assert(sizeof(CoreUtilities_GetGameInstance) == 0x000010, "Wrong size on CoreUtilities_GetGameInstance");
static_assert(offsetof(CoreUtilities_GetGameInstance, worldContextObject) == 0x000000, "Member 'CoreUtilities_GetGameInstance::worldContextObject' has a wrong offset!");
static_assert(offsetof(CoreUtilities_GetGameInstance, ReturnValue) == 0x000008, "Member 'CoreUtilities_GetGameInstance::ReturnValue' has a wrong offset!");

// Function CoreUtilities.CoreUtilities.GetRandomValuesFromArray
// 0x0028 (0x0028 - 0x0000)
struct CoreUtilities_GetRandomValuesFromArray final
{
public:
	TArray<int32>                                 values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         numberOfDesiredValues;                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreUtilities_GetRandomValuesFromArray) == 0x000008, "Wrong alignment on CoreUtilities_GetRandomValuesFromArray");
static_assert(sizeof(CoreUtilities_GetRandomValuesFromArray) == 0x000028, "Wrong size on CoreUtilities_GetRandomValuesFromArray");
static_assert(offsetof(CoreUtilities_GetRandomValuesFromArray, values) == 0x000000, "Member 'CoreUtilities_GetRandomValuesFromArray::values' has a wrong offset!");
static_assert(offsetof(CoreUtilities_GetRandomValuesFromArray, numberOfDesiredValues) == 0x000010, "Member 'CoreUtilities_GetRandomValuesFromArray::numberOfDesiredValues' has a wrong offset!");
static_assert(offsetof(CoreUtilities_GetRandomValuesFromArray, ReturnValue) == 0x000018, "Member 'CoreUtilities_GetRandomValuesFromArray::ReturnValue' has a wrong offset!");

// Function CoreUtilities.PropertyParser.CopyProperties
// 0x0028 (0x0028 - 0x0000)
struct PropertyParser_CopyProperties final
{
public:
	class UActorComponent*                        dest;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UActorComponent*                  origin;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          copyTransform;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           propertiesToExclude;                               // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PropertyParser_CopyProperties) == 0x000008, "Wrong alignment on PropertyParser_CopyProperties");
static_assert(sizeof(PropertyParser_CopyProperties) == 0x000028, "Wrong size on PropertyParser_CopyProperties");
static_assert(offsetof(PropertyParser_CopyProperties, dest) == 0x000000, "Member 'PropertyParser_CopyProperties::dest' has a wrong offset!");
static_assert(offsetof(PropertyParser_CopyProperties, origin) == 0x000008, "Member 'PropertyParser_CopyProperties::origin' has a wrong offset!");
static_assert(offsetof(PropertyParser_CopyProperties, copyTransform) == 0x000010, "Member 'PropertyParser_CopyProperties::copyTransform' has a wrong offset!");
static_assert(offsetof(PropertyParser_CopyProperties, propertiesToExclude) == 0x000018, "Member 'PropertyParser_CopyProperties::propertiesToExclude' has a wrong offset!");

}

