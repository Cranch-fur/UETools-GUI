#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LevelStreamingManager

#include "Basic.hpp"

#include "BP_LevelStreamingManager_classes.hpp"
#include "BP_LevelStreamingManager_parameters.hpp"


namespace SDK
{

// Function BP_LevelStreamingManager.BP_LevelStreamingManager_C.ExecuteUbergraph_BP_LevelStreamingManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LevelStreamingManager_C::ExecuteUbergraph_BP_LevelStreamingManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelStreamingManager_C", "ExecuteUbergraph_BP_LevelStreamingManager");

	Params::BP_LevelStreamingManager_C_ExecuteUbergraph_BP_LevelStreamingManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelStreamingManager.BP_LevelStreamingManager_C.Open Level
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Level_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Absolute                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FString&                    Options                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_LevelStreamingManager_C::Open_Level(class FName Level_Name, bool Absolute, const class FString& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelStreamingManager_C", "Open Level");

	Params::BP_LevelStreamingManager_C_Open_Level Parms{};

	Parms.Level_Name = Level_Name;
	Parms.Absolute = Absolute;
	Parms.Options = std::move(Options);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelStreamingManager.BP_LevelStreamingManager_C.Flush Level Streaming
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LevelStreamingManager_C::Flush_Level_Streaming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelStreamingManager_C", "Flush Level Streaming");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LevelStreamingManager.BP_LevelStreamingManager_C.Load Level Instance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Level_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FString&                    Optional_Level_Name_Override                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_LevelStreamingManager_C::Load_Level_Instance(const class FString& Level_Name, const struct FVector& Location, const struct FRotator& Rotation, const class FString& Optional_Level_Name_Override)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelStreamingManager_C", "Load Level Instance");

	Params::BP_LevelStreamingManager_C_Load_Level_Instance Parms{};

	Parms.Level_Name = std::move(Level_Name);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Optional_Level_Name_Override = std::move(Optional_Level_Name_Override);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelStreamingManager.BP_LevelStreamingManager_C.Stream Level Out
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Level_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Should_Block_on_Unload                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelStreamingManager_C::Stream_Level_Out(class FName Level_Name, bool Should_Block_on_Unload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelStreamingManager_C", "Stream Level Out");

	Params::BP_LevelStreamingManager_C_Stream_Level_Out Parms{};

	Parms.Level_Name = Level_Name;
	Parms.Should_Block_on_Unload = Should_Block_on_Unload;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelStreamingManager.BP_LevelStreamingManager_C.Stream Level In
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Level_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Make_Visible_After_Load                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Should_Block_on_Load                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_LevelStreamingManager_C::Stream_Level_In(class FName Level_Name, bool Make_Visible_After_Load, bool Should_Block_on_Load)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelStreamingManager_C", "Stream Level In");

	Params::BP_LevelStreamingManager_C_Stream_Level_In Parms{};

	Parms.Level_Name = Level_Name;
	Parms.Make_Visible_After_Load = Make_Visible_After_Load;
	Parms.Should_Block_on_Load = Should_Block_on_Load;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LevelStreamingManager.BP_LevelStreamingManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_LevelStreamingManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LevelStreamingManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}

}

