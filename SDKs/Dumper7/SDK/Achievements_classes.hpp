#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Achievements

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Achievements_structs.hpp"
#include "DeadByDaylight_structs.hpp"


namespace SDK
{

// Class Achievements.AchievementBase
// 0x0010 (0x0040 - 0x0030)
class UAchievementBase : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementBase">();
	}
	static class UAchievementBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementBase>();
	}
};
static_assert(alignof(UAchievementBase) == 0x000008, "Wrong alignment on UAchievementBase");
static_assert(sizeof(UAchievementBase) == 0x000040, "Wrong size on UAchievementBase");

// Class Achievements.AchievementHandler
// 0x0020 (0x0058 - 0x0038)
class UAchievementHandler final : public UGameInstanceSubsystem
{
public:
	TArray<class UAchievementBase*>               _achievements;                                     // 0x0038(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementHandler">();
	}
	static class UAchievementHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementHandler>();
	}
};
static_assert(alignof(UAchievementHandler) == 0x000008, "Wrong alignment on UAchievementHandler");
static_assert(sizeof(UAchievementHandler) == 0x000058, "Wrong size on UAchievementHandler");
static_assert(offsetof(UAchievementHandler, _achievements) == 0x000038, "Member 'UAchievementHandler::_achievements' has a wrong offset!");

// Class Achievements.AchievementsData
// 0x0040 (0x0078 - 0x0038)
class UAchievementsData final : public UDataAsset
{
public:
	TArray<struct FGameEventSimpleAchievementInfo> gameEventSimpleAchievements;                      // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FScoreEventSimpleAchievementInfo> scoreEventSimpleAchievements;                    // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameEventClassAchievementInfo> gameEventClassAchievements;                        // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomAchievementInfo>         customEventClassAchievements;                      // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementsData">();
	}
	static class UAchievementsData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementsData>();
	}
};
static_assert(alignof(UAchievementsData) == 0x000008, "Wrong alignment on UAchievementsData");
static_assert(sizeof(UAchievementsData) == 0x000078, "Wrong size on UAchievementsData");
static_assert(offsetof(UAchievementsData, gameEventSimpleAchievements) == 0x000038, "Member 'UAchievementsData::gameEventSimpleAchievements' has a wrong offset!");
static_assert(offsetof(UAchievementsData, scoreEventSimpleAchievements) == 0x000048, "Member 'UAchievementsData::scoreEventSimpleAchievements' has a wrong offset!");
static_assert(offsetof(UAchievementsData, gameEventClassAchievements) == 0x000058, "Member 'UAchievementsData::gameEventClassAchievements' has a wrong offset!");
static_assert(offsetof(UAchievementsData, customEventClassAchievements) == 0x000068, "Member 'UAchievementsData::customEventClassAchievements' has a wrong offset!");

// Class Achievements.AchievementUtilities
// 0x0000 (0x0030 - 0x0030)
class UAchievementUtilities final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementUtilities">();
	}
	static class UAchievementUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementUtilities>();
	}
};
static_assert(alignof(UAchievementUtilities) == 0x000008, "Wrong alignment on UAchievementUtilities");
static_assert(sizeof(UAchievementUtilities) == 0x000030, "Wrong size on UAchievementUtilities");

// Class Achievements.OnGameEventAchievement
// 0x0040 (0x0080 - 0x0040)
class UOnGameEventAchievement : public UAchievementBase
{
public:
	uint8                                         Pad_40[0x20];                                      // 0x0040(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   _gameEvents;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<EDBDScoreTypes>                        _scoreTypes;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnScoreTypeEvent(EDBDScoreTypes scoreType, float amount, class AActor* instigator, class AActor* target);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnGameEventAchievement">();
	}
	static class UOnGameEventAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnGameEventAchievement>();
	}
};
static_assert(alignof(UOnGameEventAchievement) == 0x000008, "Wrong alignment on UOnGameEventAchievement");
static_assert(sizeof(UOnGameEventAchievement) == 0x000080, "Wrong size on UOnGameEventAchievement");
static_assert(offsetof(UOnGameEventAchievement, _gameEvents) == 0x000060, "Member 'UOnGameEventAchievement::_gameEvents' has a wrong offset!");
static_assert(offsetof(UOnGameEventAchievement, _scoreTypes) == 0x000070, "Member 'UOnGameEventAchievement::_scoreTypes' has a wrong offset!");

// Class Achievements.AddNewPerkAchievement
// 0x0000 (0x0080 - 0x0080)
class UAddNewPerkAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AddNewPerkAchievement">();
	}
	static class UAddNewPerkAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddNewPerkAchievement>();
	}
};
static_assert(alignof(UAddNewPerkAchievement) == 0x000008, "Wrong alignment on UAddNewPerkAchievement");
static_assert(sizeof(UAddNewPerkAchievement) == 0x000080, "Wrong size on UAddNewPerkAchievement");

// Class Achievements.AwardPipsAchievement
// 0x0000 (0x0080 - 0x0080)
class UAwardPipsAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AwardPipsAchievement">();
	}
	static class UAwardPipsAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAwardPipsAchievement>();
	}
};
static_assert(alignof(UAwardPipsAchievement) == 0x000008, "Wrong alignment on UAwardPipsAchievement");
static_assert(sizeof(UAwardPipsAchievement) == 0x000080, "Wrong size on UAwardPipsAchievement");

// Class Achievements.CollectItemFromBasementChestAchievement
// 0x0000 (0x0080 - 0x0080)
class UCollectItemFromBasementChestAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CollectItemFromBasementChestAchievement">();
	}
	static class UCollectItemFromBasementChestAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCollectItemFromBasementChestAchievement>();
	}
};
static_assert(alignof(UCollectItemFromBasementChestAchievement) == 0x000008, "Wrong alignment on UCollectItemFromBasementChestAchievement");
static_assert(sizeof(UCollectItemFromBasementChestAchievement) == 0x000080, "Wrong size on UCollectItemFromBasementChestAchievement");

// Class Achievements.CooldownReactivationTypeAchievement
// 0x0010 (0x0090 - 0x0080)
class UCooldownReactivationTypeAchievement : public UOnGameEventAchievement
{
public:
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CooldownReactivationTypeAchievement">();
	}
	static class UCooldownReactivationTypeAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCooldownReactivationTypeAchievement>();
	}
};
static_assert(alignof(UCooldownReactivationTypeAchievement) == 0x000008, "Wrong alignment on UCooldownReactivationTypeAchievement");
static_assert(sizeof(UCooldownReactivationTypeAchievement) == 0x000090, "Wrong size on UCooldownReactivationTypeAchievement");

// Class Achievements.EscapeTypeAchievement
// 0x0010 (0x0090 - 0x0080)
class UEscapeTypeAchievement : public UOnGameEventAchievement
{
public:
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EscapeTypeAchievement">();
	}
	static class UEscapeTypeAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEscapeTypeAchievement>();
	}
};
static_assert(alignof(UEscapeTypeAchievement) == 0x000008, "Wrong alignment on UEscapeTypeAchievement");
static_assert(sizeof(UEscapeTypeAchievement) == 0x000090, "Wrong size on UEscapeTypeAchievement");

// Class Achievements.EscapeAsObsessionWithoutInjuryAchievement
// 0x0000 (0x0090 - 0x0090)
class UEscapeAsObsessionWithoutInjuryAchievement : public UEscapeTypeAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EscapeAsObsessionWithoutInjuryAchievement">();
	}
	static class UEscapeAsObsessionWithoutInjuryAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEscapeAsObsessionWithoutInjuryAchievement>();
	}
};
static_assert(alignof(UEscapeAsObsessionWithoutInjuryAchievement) == 0x000008, "Wrong alignment on UEscapeAsObsessionWithoutInjuryAchievement");
static_assert(sizeof(UEscapeAsObsessionWithoutInjuryAchievement) == 0x000090, "Wrong size on UEscapeAsObsessionWithoutInjuryAchievement");

// Class Achievements.ExitGateOpenedAchievement
// 0x0000 (0x0080 - 0x0080)
class UExitGateOpenedAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExitGateOpenedAchievement">();
	}
	static class UExitGateOpenedAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExitGateOpenedAchievement>();
	}
};
static_assert(alignof(UExitGateOpenedAchievement) == 0x000008, "Wrong alignment on UExitGateOpenedAchievement");
static_assert(sizeof(UExitGateOpenedAchievement) == 0x000080, "Wrong size on UExitGateOpenedAchievement");

// Class Achievements.FinishGameWithCharacterPerksAchievement
// 0x0000 (0x0080 - 0x0080)
class UFinishGameWithCharacterPerksAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FinishGameWithCharacterPerksAchievement">();
	}
	static class UFinishGameWithCharacterPerksAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFinishGameWithCharacterPerksAchievement>();
	}
};
static_assert(alignof(UFinishGameWithCharacterPerksAchievement) == 0x000008, "Wrong alignment on UFinishGameWithCharacterPerksAchievement");
static_assert(sizeof(UFinishGameWithCharacterPerksAchievement) == 0x000080, "Wrong size on UFinishGameWithCharacterPerksAchievement");

// Class Achievements.FinishGameWithMercilessVictoryAchievement
// 0x0000 (0x0080 - 0x0080)
class UFinishGameWithMercilessVictoryAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FinishGameWithMercilessVictoryAchievement">();
	}
	static class UFinishGameWithMercilessVictoryAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFinishGameWithMercilessVictoryAchievement>();
	}
};
static_assert(alignof(UFinishGameWithMercilessVictoryAchievement) == 0x000008, "Wrong alignment on UFinishGameWithMercilessVictoryAchievement");
static_assert(sizeof(UFinishGameWithMercilessVictoryAchievement) == 0x000080, "Wrong size on UFinishGameWithMercilessVictoryAchievement");

// Class Achievements.HealFromDyingAchievement
// 0x0000 (0x0080 - 0x0080)
class UHealFromDyingAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HealFromDyingAchievement">();
	}
	static class UHealFromDyingAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHealFromDyingAchievement>();
	}
};
static_assert(alignof(UHealFromDyingAchievement) == 0x000008, "Wrong alignment on UHealFromDyingAchievement");
static_assert(sizeof(UHealFromDyingAchievement) == 0x000080, "Wrong size on UHealFromDyingAchievement");

// Class Achievements.K26CrowDamagedSurvivorAchievement
// 0x0000 (0x0080 - 0x0080)
class UK26CrowDamagedSurvivorAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K26CrowDamagedSurvivorAchievement">();
	}
	static class UK26CrowDamagedSurvivorAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK26CrowDamagedSurvivorAchievement>();
	}
};
static_assert(alignof(UK26CrowDamagedSurvivorAchievement) == 0x000008, "Wrong alignment on UK26CrowDamagedSurvivorAchievement");
static_assert(sizeof(UK26CrowDamagedSurvivorAchievement) == 0x000080, "Wrong size on UK26CrowDamagedSurvivorAchievement");

// Class Achievements.KillerDamagedSurvivorWithHasteAchievement
// 0x0000 (0x0080 - 0x0080)
class UKillerDamagedSurvivorWithHasteAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerDamagedSurvivorWithHasteAchievement">();
	}
	static class UKillerDamagedSurvivorWithHasteAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerDamagedSurvivorWithHasteAchievement>();
	}
};
static_assert(alignof(UKillerDamagedSurvivorWithHasteAchievement) == 0x000008, "Wrong alignment on UKillerDamagedSurvivorWithHasteAchievement");
static_assert(sizeof(UKillerDamagedSurvivorWithHasteAchievement) == 0x000080, "Wrong size on UKillerDamagedSurvivorWithHasteAchievement");

// Class Achievements.KillerHitSurvivorDuringGuardHuntAchievement
// 0x0000 (0x0080 - 0x0080)
class UKillerHitSurvivorDuringGuardHuntAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerHitSurvivorDuringGuardHuntAchievement">();
	}
	static class UKillerHitSurvivorDuringGuardHuntAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerHitSurvivorDuringGuardHuntAchievement>();
	}
};
static_assert(alignof(UKillerHitSurvivorDuringGuardHuntAchievement) == 0x000008, "Wrong alignment on UKillerHitSurvivorDuringGuardHuntAchievement");
static_assert(sizeof(UKillerHitSurvivorDuringGuardHuntAchievement) == 0x000080, "Wrong size on UKillerHitSurvivorDuringGuardHuntAchievement");

// Class Achievements.KillerVaultDuringChaseAchievement
// 0x0000 (0x0080 - 0x0080)
class UKillerVaultDuringChaseAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerVaultDuringChaseAchievement">();
	}
	static class UKillerVaultDuringChaseAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerVaultDuringChaseAchievement>();
	}
};
static_assert(alignof(UKillerVaultDuringChaseAchievement) == 0x000008, "Wrong alignment on UKillerVaultDuringChaseAchievement");
static_assert(sizeof(UKillerVaultDuringChaseAchievement) == 0x000080, "Wrong size on UKillerVaultDuringChaseAchievement");

// Class Achievements.KONextToRaisedPalletAchievement
// 0x0008 (0x0088 - 0x0080)
class UKONextToRaisedPalletAchievement : public UOnGameEventAchievement
{
public:
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KONextToRaisedPalletAchievement">();
	}
	static class UKONextToRaisedPalletAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKONextToRaisedPalletAchievement>();
	}
};
static_assert(alignof(UKONextToRaisedPalletAchievement) == 0x000008, "Wrong alignment on UKONextToRaisedPalletAchievement");
static_assert(sizeof(UKONextToRaisedPalletAchievement) == 0x000088, "Wrong size on UKONextToRaisedPalletAchievement");

// Class Achievements.MaxBloodpointsAllCategoriesAchievement
// 0x0000 (0x0080 - 0x0080)
class UMaxBloodpointsAllCategoriesAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaxBloodpointsAllCategoriesAchievement">();
	}
	static class UMaxBloodpointsAllCategoriesAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaxBloodpointsAllCategoriesAchievement>();
	}
};
static_assert(alignof(UMaxBloodpointsAllCategoriesAchievement) == 0x000008, "Wrong alignment on UMaxBloodpointsAllCategoriesAchievement");
static_assert(sizeof(UMaxBloodpointsAllCategoriesAchievement) == 0x000080, "Wrong size on UMaxBloodpointsAllCategoriesAchievement");

// Class Achievements.ScoreCamperHealOtherAchievement
// 0x0000 (0x0080 - 0x0080)
class UScoreCamperHealOtherAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreCamperHealOtherAchievement">();
	}
	static class UScoreCamperHealOtherAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreCamperHealOtherAchievement>();
	}
};
static_assert(alignof(UScoreCamperHealOtherAchievement) == 0x000008, "Wrong alignment on UScoreCamperHealOtherAchievement");
static_assert(sizeof(UScoreCamperHealOtherAchievement) == 0x000080, "Wrong size on UScoreCamperHealOtherAchievement");

// Class Achievements.ScoreCamperSurviveAchievement
// 0x0000 (0x0090 - 0x0090)
class UScoreCamperSurviveAchievement : public UEscapeTypeAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreCamperSurviveAchievement">();
	}
	static class UScoreCamperSurviveAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreCamperSurviveAchievement>();
	}
};
static_assert(alignof(UScoreCamperSurviveAchievement) == 0x000008, "Wrong alignment on UScoreCamperSurviveAchievement");
static_assert(sizeof(UScoreCamperSurviveAchievement) == 0x000090, "Wrong size on UScoreCamperSurviveAchievement");

// Class Achievements.ScoreLevelUpAchievement
// 0x0000 (0x0080 - 0x0080)
class UScoreLevelUpAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreLevelUpAchievement">();
	}
	static class UScoreLevelUpAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreLevelUpAchievement>();
	}
};
static_assert(alignof(UScoreLevelUpAchievement) == 0x000008, "Wrong alignment on UScoreLevelUpAchievement");
static_assert(sizeof(UScoreLevelUpAchievement) == 0x000080, "Wrong size on UScoreLevelUpAchievement");

// Class Achievements.ScoreSlasherDamageGeneratorKickAchievement
// 0x0000 (0x0080 - 0x0080)
class UScoreSlasherDamageGeneratorKickAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreSlasherDamageGeneratorKickAchievement">();
	}
	static class UScoreSlasherDamageGeneratorKickAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreSlasherDamageGeneratorKickAchievement>();
	}
};
static_assert(alignof(UScoreSlasherDamageGeneratorKickAchievement) == 0x000008, "Wrong alignment on UScoreSlasherDamageGeneratorKickAchievement");
static_assert(sizeof(UScoreSlasherDamageGeneratorKickAchievement) == 0x000080, "Wrong size on UScoreSlasherDamageGeneratorKickAchievement");

// Class Achievements.ScoreSlasherGunslingerSlashHarpoonedSurvivorAchievement
// 0x0000 (0x0080 - 0x0080)
class UScoreSlasherGunslingerSlashHarpoonedSurvivorAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreSlasherGunslingerSlashHarpoonedSurvivorAchievement">();
	}
	static class UScoreSlasherGunslingerSlashHarpoonedSurvivorAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreSlasherGunslingerSlashHarpoonedSurvivorAchievement>();
	}
};
static_assert(alignof(UScoreSlasherGunslingerSlashHarpoonedSurvivorAchievement) == 0x000008, "Wrong alignment on UScoreSlasherGunslingerSlashHarpoonedSurvivorAchievement");
static_assert(sizeof(UScoreSlasherGunslingerSlashHarpoonedSurvivorAchievement) == 0x000080, "Wrong size on UScoreSlasherGunslingerSlashHarpoonedSurvivorAchievement");

// Class Achievements.ScoreSlasherHookCamper
// 0x0000 (0x0080 - 0x0080)
class UScoreSlasherHookCamper : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreSlasherHookCamper">();
	}
	static class UScoreSlasherHookCamper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreSlasherHookCamper>();
	}
};
static_assert(alignof(UScoreSlasherHookCamper) == 0x000008, "Wrong alignment on UScoreSlasherHookCamper");
static_assert(sizeof(UScoreSlasherHookCamper) == 0x000080, "Wrong size on UScoreSlasherHookCamper");

// Class Achievements.ScoreSlasherKillAchievement
// 0x0000 (0x0080 - 0x0080)
class UScoreSlasherKillAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreSlasherKillAchievement">();
	}
	static class UScoreSlasherKillAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreSlasherKillAchievement>();
	}
};
static_assert(alignof(UScoreSlasherKillAchievement) == 0x000008, "Wrong alignment on UScoreSlasherKillAchievement");
static_assert(sizeof(UScoreSlasherKillAchievement) == 0x000080, "Wrong size on UScoreSlasherKillAchievement");

// Class Achievements.ScoreSlasherPowerK24HitSurvivor
// 0x0000 (0x0080 - 0x0080)
class UScoreSlasherPowerK24HitSurvivor : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreSlasherPowerK24HitSurvivor">();
	}
	static class UScoreSlasherPowerK24HitSurvivor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreSlasherPowerK24HitSurvivor>();
	}
};
static_assert(alignof(UScoreSlasherPowerK24HitSurvivor) == 0x000008, "Wrong alignment on UScoreSlasherPowerK24HitSurvivor");
static_assert(sizeof(UScoreSlasherPowerK24HitSurvivor) == 0x000080, "Wrong size on UScoreSlasherPowerK24HitSurvivor");

// Class Achievements.ScoreSlasherSacrificeSuccess
// 0x0000 (0x0080 - 0x0080)
class UScoreSlasherSacrificeSuccess : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScoreSlasherSacrificeSuccess">();
	}
	static class UScoreSlasherSacrificeSuccess* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScoreSlasherSacrificeSuccess>();
	}
};
static_assert(alignof(UScoreSlasherSacrificeSuccess) == 0x000008, "Wrong alignment on UScoreSlasherSacrificeSuccess");
static_assert(sizeof(UScoreSlasherSacrificeSuccess) == 0x000080, "Wrong size on UScoreSlasherSacrificeSuccess");

// Class Achievements.SlasherHookCamperInBasement
// 0x0000 (0x0080 - 0x0080)
class USlasherHookCamperInBasement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SlasherHookCamperInBasement">();
	}
	static class USlasherHookCamperInBasement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlasherHookCamperInBasement>();
	}
};
static_assert(alignof(USlasherHookCamperInBasement) == 0x000008, "Wrong alignment on USlasherHookCamperInBasement");
static_assert(sizeof(USlasherHookCamperInBasement) == 0x000080, "Wrong size on USlasherHookCamperInBasement");

// Class Achievements.StartGameAchievement
// 0x0000 (0x0080 - 0x0080)
class UStartGameAchievement : public UOnGameEventAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StartGameAchievement">();
	}
	static class UStartGameAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStartGameAchievement>();
	}
};
static_assert(alignof(UStartGameAchievement) == 0x000008, "Wrong alignment on UStartGameAchievement");
static_assert(sizeof(UStartGameAchievement) == 0x000080, "Wrong size on UStartGameAchievement");

// Class Achievements.SurvivorIncreaseOthersMovementSpeedWithCooldown
// 0x0000 (0x0090 - 0x0090)
class USurvivorIncreaseOthersMovementSpeedWithCooldown : public UCooldownReactivationTypeAchievement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorIncreaseOthersMovementSpeedWithCooldown">();
	}
	static class USurvivorIncreaseOthersMovementSpeedWithCooldown* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorIncreaseOthersMovementSpeedWithCooldown>();
	}
};
static_assert(alignof(USurvivorIncreaseOthersMovementSpeedWithCooldown) == 0x000008, "Wrong alignment on USurvivorIncreaseOthersMovementSpeedWithCooldown");
static_assert(sizeof(USurvivorIncreaseOthersMovementSpeedWithCooldown) == 0x000090, "Wrong size on USurvivorIncreaseOthersMovementSpeedWithCooldown");

// Class Achievements.SurvivorRevealedKillerAuraAchievement
// 0x0048 (0x0088 - 0x0040)
class USurvivorRevealedKillerAuraAchievement : public UAchievementBase
{
public:
	uint8                                         Pad_40[0x4];                                       // 0x0040(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           _survivorFlagTag;                                  // 0x0044(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           _killerFlagTag;                                    // 0x0050(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           _modifierTag;                                      // 0x005C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _dontAwardIfKillerHasTags;                         // 0x0068(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	void Local_OnRevealKillerAura();
	void OnLevelReadyToPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorRevealedKillerAuraAchievement">();
	}
	static class USurvivorRevealedKillerAuraAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorRevealedKillerAuraAchievement>();
	}
};
static_assert(alignof(USurvivorRevealedKillerAuraAchievement) == 0x000008, "Wrong alignment on USurvivorRevealedKillerAuraAchievement");
static_assert(sizeof(USurvivorRevealedKillerAuraAchievement) == 0x000088, "Wrong size on USurvivorRevealedKillerAuraAchievement");
static_assert(offsetof(USurvivorRevealedKillerAuraAchievement, _survivorFlagTag) == 0x000044, "Member 'USurvivorRevealedKillerAuraAchievement::_survivorFlagTag' has a wrong offset!");
static_assert(offsetof(USurvivorRevealedKillerAuraAchievement, _killerFlagTag) == 0x000050, "Member 'USurvivorRevealedKillerAuraAchievement::_killerFlagTag' has a wrong offset!");
static_assert(offsetof(USurvivorRevealedKillerAuraAchievement, _modifierTag) == 0x00005C, "Member 'USurvivorRevealedKillerAuraAchievement::_modifierTag' has a wrong offset!");
static_assert(offsetof(USurvivorRevealedKillerAuraAchievement, _dontAwardIfKillerHasTags) == 0x000068, "Member 'USurvivorRevealedKillerAuraAchievement::_dontAwardIfKillerHasTags' has a wrong offset!");

// Class Achievements.TotalPlaytimeAchievement
// 0x0000 (0x0040 - 0x0040)
class UTotalPlaytimeAchievement : public UAchievementBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TotalPlaytimeAchievement">();
	}
	static class UTotalPlaytimeAchievement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTotalPlaytimeAchievement>();
	}
};
static_assert(alignof(UTotalPlaytimeAchievement) == 0x000008, "Wrong alignment on UTotalPlaytimeAchievement");
static_assert(sizeof(UTotalPlaytimeAchievement) == 0x000040, "Wrong size on UTotalPlaytimeAchievement");

}

