#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SnowmanWinterEvent

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "SnowmanWinterEvent_structs.hpp"
#include "SpecialEventUtilities_classes.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class SnowmanWinterEvent.HideInSnowmanInteraction
// 0x00D0 (0x06F0 - 0x0620)
class UHideInSnowmanInteraction : public UInteractionDefinition
{
public:
	struct FDBDTunableRowHandle                   _timeToEnterSnowman;                               // 0x0618(0x0028)(Edit, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _attachToPlayerDelay;                              // 0x0640(0x0028)(Edit, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_668[0x88];                                     // 0x0668(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multicast_StartControllingSnowman(class ADBDPlayer* player);
	void Multicast_StopControllingSnowman(class ADBDPlayer* player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HideInSnowmanInteraction">();
	}
	static class UHideInSnowmanInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHideInSnowmanInteraction>();
	}
};
static_assert(alignof(UHideInSnowmanInteraction) == 0x000010, "Wrong alignment on UHideInSnowmanInteraction");
static_assert(sizeof(UHideInSnowmanInteraction) == 0x0006F0, "Wrong size on UHideInSnowmanInteraction");
static_assert(offsetof(UHideInSnowmanInteraction, _timeToEnterSnowman) == 0x000618, "Member 'UHideInSnowmanInteraction::_timeToEnterSnowman' has a wrong offset!");
static_assert(offsetof(UHideInSnowmanInteraction, _attachToPlayerDelay) == 0x000640, "Member 'UHideInSnowmanInteraction::_attachToPlayerDelay' has a wrong offset!");

// Class SnowmanWinterEvent.KillerHideInSnowmanInteraction
// 0x0140 (0x0830 - 0x06F0)
class UKillerHideInSnowmanInteraction final : public UHideInSnowmanInteraction
{
public:
	bool                                          _shouldAttackOutOfSnowman;                         // 0x06F0(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6F1[0x7];                                      // 0x06F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _minimumTimeToAttackAndExit;                       // 0x06F8(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _mousePitchScaleMultiplier;                        // 0x0720(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _mouseYawScaleMultiplier;                          // 0x0748(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _gamepadPitchScaleMultiplier;                      // 0x0770(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _gamepadYawScaleMultiplier;                        // 0x0798(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _gamepadPitchCurve;                                // 0x07C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _gamepadYawCurve;                                  // 0x07C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _rotationScaleAdjustmentTime;                      // 0x07D0(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7F8[0x38];                                     // 0x07F8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerHideInSnowmanInteraction">();
	}
	static class UKillerHideInSnowmanInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerHideInSnowmanInteraction>();
	}
};
static_assert(alignof(UKillerHideInSnowmanInteraction) == 0x000010, "Wrong alignment on UKillerHideInSnowmanInteraction");
static_assert(sizeof(UKillerHideInSnowmanInteraction) == 0x000830, "Wrong size on UKillerHideInSnowmanInteraction");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _shouldAttackOutOfSnowman) == 0x0006F0, "Member 'UKillerHideInSnowmanInteraction::_shouldAttackOutOfSnowman' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _minimumTimeToAttackAndExit) == 0x0006F8, "Member 'UKillerHideInSnowmanInteraction::_minimumTimeToAttackAndExit' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _mousePitchScaleMultiplier) == 0x000720, "Member 'UKillerHideInSnowmanInteraction::_mousePitchScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _mouseYawScaleMultiplier) == 0x000748, "Member 'UKillerHideInSnowmanInteraction::_mouseYawScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _gamepadPitchScaleMultiplier) == 0x000770, "Member 'UKillerHideInSnowmanInteraction::_gamepadPitchScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _gamepadYawScaleMultiplier) == 0x000798, "Member 'UKillerHideInSnowmanInteraction::_gamepadYawScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _gamepadPitchCurve) == 0x0007C0, "Member 'UKillerHideInSnowmanInteraction::_gamepadPitchCurve' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _gamepadYawCurve) == 0x0007C8, "Member 'UKillerHideInSnowmanInteraction::_gamepadYawCurve' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _rotationScaleAdjustmentTime) == 0x0007D0, "Member 'UKillerHideInSnowmanInteraction::_rotationScaleAdjustmentTime' has a wrong offset!");

// Class SnowmanWinterEvent.Snowman
// 0x02E8 (0x0638 - 0x0350)
class ASnowman final : public ARespawnableInteractable
{
public:
	uint8                                         Pad_350[0x90];                                     // 0x0350(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _timeToRespawn;                                    // 0x03E0(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _maxRespawnsAfterKillerAttackWhileOccupied;        // 0x0408(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeToBeDestroyed;                                // 0x0430(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _highFiveCooldown;                                 // 0x0458(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _attachToPlayerDelay;                              // 0x0480(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESnowmanState                                 _snowmanState;                                     // 0x04A8(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESnowmanDestructionType                       _snowmanDestructionType;                           // 0x04A9(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4AA[0x6];                                      // 0x04AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             _playerUsingThisSnowman;                           // 0x04B0(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B8[0xE0];                                     // 0x04B8(0x00E0)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 _snowmanSkeletalMesh;                              // 0x0598(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDBDOutlineComponent*                   _snowmanOutlineComponent;                          // 0x05A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCapsuleComponent*                      _snowmanCapsule;                                   // 0x05A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCapsuleComponent*                      _snowmanHandCapsule;                               // 0x05B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChargeableComponent*                   _hideInSnowmanInteractionChargeable;               // 0x05B8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInteractor*                            _snowmanInteractor;                                // 0x05C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    _snowmanInteractionZone;                           // 0x05C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBaseActorAttackableComponent*          _attackableComponent;                              // 0x05D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isAcquiredFromPool;                               // 0x05D8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5D9[0x1F];                                     // 0x05D9(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _isMoving;                                         // 0x05F8(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASnowman*                               _highFiveFollower;                                 // 0x0600(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_608[0x30];                                     // 0x0608(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnSnowmanHandOverlapBegin(class UPrimitiveComponent* hitComponent, class AActor* otherActor, class UPrimitiveComponent* otherComp, int32 otherBodyIndex, bool bFromSweep, const struct FHitResult& sweepResult);
	void Authority_OnSnowmanHandOverlapEnd(class UPrimitiveComponent* hitComponent, class AActor* otherActor, class UPrimitiveComponent* otherComp, int32 otherBodyIndex);
	void Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForKiller(class ASlasherPlayer* killerAttackingSnowman);
	void Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForSurvivor(class ACamperPlayer* survivorUsingSnowman);
	void Cosmetic_OnSnowmanDestroyedByAttackWhileControlled(class ACamperPlayer* survivorUsingSnowman, class ASlasherPlayer* killerAttackingSnowman);
	void Cosmetic_OnSnowmanDestroyedByAttackWhileEmpty(class ASlasherPlayer* killerAttackingSnowman);
	void Cosmetic_OnSnowmanDestroyedByKillerAttackExit(class ASlasherPlayer* killerUsingSnowman);
	void Cosmetic_OnSnowmanDestroyedByKillerCancelExit();
	void Cosmetic_OnSnowmanDestroyedBySurvivorRunExit(class ACamperPlayer* survivorUsingSnowman);
	void Cosmetic_OnSnowmanHighFive(class ASnowman* otherSnowman);
	void Cosmetic_OnSnowmanSpawned();
	void Cosmetic_OnSnowmanStartBeingControlledByKiller(class ASlasherPlayer* killerUsingSnowman);
	void Cosmetic_OnSnowmanStartBeingControlledBySurvivor(class ACamperPlayer* survivorUsingSnowman);
	void Cosmetic_OnSnowmanStartBeingUsedByKiller(class ASlasherPlayer* killerUsingSnowman);
	void Cosmetic_OnSnowmanStartBeingUsedBySurvivor(class ACamperPlayer* survivorUsingSnowman);
	void Cosmetic_SetSnowmanMaterialVariant(const int32 materialVariantIndex);
	void Multicast_OnSnowmanStartBeingControlledByKiller(class ASlasherPlayer* killerUsingSnowman);
	void Multicast_OnSnowmanStartBeingControlledBySurvivor(class ACamperPlayer* survivorUsingSnowman);
	void Multicast_OnSnowmanStartBeingUsedByKiller(class ASlasherPlayer* killerUsingSnowman);
	void Multicast_OnSnowmanStartBeingUsedBySurvivor(class ACamperPlayer* survivorUsingSnowman);
	void Multicast_SetSnowmanHiddenInGame(bool isHidden);
	void Multicast_SetSnowmanMaterialVariant(const int32 materialVariantIndex);
	void Multicast_SpawnSnowman(const struct FSnowmanSpawnData& spawnData);
	void Multicast_StartSnowmanDestruction(ESnowmanDestructionType snowmanDestructionType, bool unlockRequirementsSatisfiedForSurvivor, bool unlockRequirementsSatisfiedForKiller, class ADBDPlayer* playerInSnowman);
	void OnFinishedPlaying(const struct FGameplayTag& gameEventType, const struct FGameEventData& gameEventData);
	void OnRep_HighFiveFollower();
	void OnRep_IsMoving();
	void OnRep_PlayerUsingSnowman();
	void OnRep_SnowmanDestructionType();
	void OnRep_SnowmanState();

	void Multicast_DrawDebugCollisionCheck(const struct FVector& boxExtent, float debugLifetime) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Snowman">();
	}
	static class ASnowman* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASnowman>();
	}
};
static_assert(alignof(ASnowman) == 0x000008, "Wrong alignment on ASnowman");
static_assert(sizeof(ASnowman) == 0x000638, "Wrong size on ASnowman");
static_assert(offsetof(ASnowman, _timeToRespawn) == 0x0003E0, "Member 'ASnowman::_timeToRespawn' has a wrong offset!");
static_assert(offsetof(ASnowman, _maxRespawnsAfterKillerAttackWhileOccupied) == 0x000408, "Member 'ASnowman::_maxRespawnsAfterKillerAttackWhileOccupied' has a wrong offset!");
static_assert(offsetof(ASnowman, _timeToBeDestroyed) == 0x000430, "Member 'ASnowman::_timeToBeDestroyed' has a wrong offset!");
static_assert(offsetof(ASnowman, _highFiveCooldown) == 0x000458, "Member 'ASnowman::_highFiveCooldown' has a wrong offset!");
static_assert(offsetof(ASnowman, _attachToPlayerDelay) == 0x000480, "Member 'ASnowman::_attachToPlayerDelay' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanState) == 0x0004A8, "Member 'ASnowman::_snowmanState' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanDestructionType) == 0x0004A9, "Member 'ASnowman::_snowmanDestructionType' has a wrong offset!");
static_assert(offsetof(ASnowman, _playerUsingThisSnowman) == 0x0004B0, "Member 'ASnowman::_playerUsingThisSnowman' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanSkeletalMesh) == 0x000598, "Member 'ASnowman::_snowmanSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanOutlineComponent) == 0x0005A0, "Member 'ASnowman::_snowmanOutlineComponent' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanCapsule) == 0x0005A8, "Member 'ASnowman::_snowmanCapsule' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanHandCapsule) == 0x0005B0, "Member 'ASnowman::_snowmanHandCapsule' has a wrong offset!");
static_assert(offsetof(ASnowman, _hideInSnowmanInteractionChargeable) == 0x0005B8, "Member 'ASnowman::_hideInSnowmanInteractionChargeable' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanInteractor) == 0x0005C0, "Member 'ASnowman::_snowmanInteractor' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanInteractionZone) == 0x0005C8, "Member 'ASnowman::_snowmanInteractionZone' has a wrong offset!");
static_assert(offsetof(ASnowman, _attackableComponent) == 0x0005D0, "Member 'ASnowman::_attackableComponent' has a wrong offset!");
static_assert(offsetof(ASnowman, _isAcquiredFromPool) == 0x0005D8, "Member 'ASnowman::_isAcquiredFromPool' has a wrong offset!");
static_assert(offsetof(ASnowman, _isMoving) == 0x0005F8, "Member 'ASnowman::_isMoving' has a wrong offset!");
static_assert(offsetof(ASnowman, _highFiveFollower) == 0x000600, "Member 'ASnowman::_highFiveFollower' has a wrong offset!");

// Class SnowmanWinterEvent.SnowmanAnimInstance
// 0x0020 (0x02E0 - 0x02C0)
class USnowmanAnimInstance final : public UAnimInstance
{
public:
	bool                                          _isIdle;                                           // 0x02C0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBeingEntered;                                   // 0x02C1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isControlled;                                     // 0x02C2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isDestroyed;                                      // 0x02C3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBeingDestroyedDueToSurvivorRunExit;             // 0x02C4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBeingDestroyedDueToKillerAttackExit;            // 0x02C5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBeingDestroyedDueToKillerAttackWhileControlled; // 0x02C6(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBeingDestroyedDueToKillerAttackWhileEmpty;      // 0x02C7(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isSurvivorUsingSnowmanMoving;                     // 0x02C8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ASnowman>                _snowman;                                          // 0x02CC(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ADBDPlayer>              _playerUsingSnowman;                               // 0x02D4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnSnowmanDestroyedEvent(ESnowmanDestructionType snowmanDestructionType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnowmanAnimInstance">();
	}
	static class USnowmanAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnowmanAnimInstance>();
	}
};
static_assert(alignof(USnowmanAnimInstance) == 0x000010, "Wrong alignment on USnowmanAnimInstance");
static_assert(sizeof(USnowmanAnimInstance) == 0x0002E0, "Wrong size on USnowmanAnimInstance");
static_assert(offsetof(USnowmanAnimInstance, _isIdle) == 0x0002C0, "Member 'USnowmanAnimInstance::_isIdle' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isBeingEntered) == 0x0002C1, "Member 'USnowmanAnimInstance::_isBeingEntered' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isControlled) == 0x0002C2, "Member 'USnowmanAnimInstance::_isControlled' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isDestroyed) == 0x0002C3, "Member 'USnowmanAnimInstance::_isDestroyed' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isBeingDestroyedDueToSurvivorRunExit) == 0x0002C4, "Member 'USnowmanAnimInstance::_isBeingDestroyedDueToSurvivorRunExit' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isBeingDestroyedDueToKillerAttackExit) == 0x0002C5, "Member 'USnowmanAnimInstance::_isBeingDestroyedDueToKillerAttackExit' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isBeingDestroyedDueToKillerAttackWhileControlled) == 0x0002C6, "Member 'USnowmanAnimInstance::_isBeingDestroyedDueToKillerAttackWhileControlled' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isBeingDestroyedDueToKillerAttackWhileEmpty) == 0x0002C7, "Member 'USnowmanAnimInstance::_isBeingDestroyedDueToKillerAttackWhileEmpty' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isSurvivorUsingSnowmanMoving) == 0x0002C8, "Member 'USnowmanAnimInstance::_isSurvivorUsingSnowmanMoving' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _snowman) == 0x0002CC, "Member 'USnowmanAnimInstance::_snowman' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _playerUsingSnowman) == 0x0002D4, "Member 'USnowmanAnimInstance::_playerUsingSnowman' has a wrong offset!");

// Class SnowmanWinterEvent.SnowmanWinterEventComponent
// 0x00B0 (0x0168 - 0x00B8)
class USnowmanWinterEventComponent final : public UActorComponent
{
public:
	struct FDBDTunableRowHandle                   _numbSnowmenToSpawnAtStart;                        // 0x00B8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x38];                                      // 0x00E0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USnowmanSpawnPlacementStrategy> _snowmanSpawnPlacementStrategyClass;           // 0x0118(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class ASnowman>                   _snowmanClass;                                     // 0x0120(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _survivorInSnowmanEffect;                          // 0x0128(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _killerInSnowmanEffect;                            // 0x0130(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USnowmanSpawnPlacementStrategy*         _snowmanSpawnPlacementStrategy;                    // 0x0138(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_140[0x18];                                     // 0x0140(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASnowman*>                       _snowmen;                                          // 0x0158(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void DBD_Winter2021ForceRespawnAllSnowmen();
	void DBD_Winter2021RecalculateSpawnPoints();
	void DBD_Winter2021ShowSnowmenSpawnCollisionChecks(float numberOfSeconds);
	void DBD_Winter2021VisualizeCalculatedSpawnData(float numberOfSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnowmanWinterEventComponent">();
	}
	static class USnowmanWinterEventComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnowmanWinterEventComponent>();
	}
};
static_assert(alignof(USnowmanWinterEventComponent) == 0x000008, "Wrong alignment on USnowmanWinterEventComponent");
static_assert(sizeof(USnowmanWinterEventComponent) == 0x000168, "Wrong size on USnowmanWinterEventComponent");
static_assert(offsetof(USnowmanWinterEventComponent, _numbSnowmenToSpawnAtStart) == 0x0000B8, "Member 'USnowmanWinterEventComponent::_numbSnowmenToSpawnAtStart' has a wrong offset!");
static_assert(offsetof(USnowmanWinterEventComponent, _snowmanSpawnPlacementStrategyClass) == 0x000118, "Member 'USnowmanWinterEventComponent::_snowmanSpawnPlacementStrategyClass' has a wrong offset!");
static_assert(offsetof(USnowmanWinterEventComponent, _snowmanClass) == 0x000120, "Member 'USnowmanWinterEventComponent::_snowmanClass' has a wrong offset!");
static_assert(offsetof(USnowmanWinterEventComponent, _survivorInSnowmanEffect) == 0x000128, "Member 'USnowmanWinterEventComponent::_survivorInSnowmanEffect' has a wrong offset!");
static_assert(offsetof(USnowmanWinterEventComponent, _killerInSnowmanEffect) == 0x000130, "Member 'USnowmanWinterEventComponent::_killerInSnowmanEffect' has a wrong offset!");
static_assert(offsetof(USnowmanWinterEventComponent, _snowmanSpawnPlacementStrategy) == 0x000138, "Member 'USnowmanWinterEventComponent::_snowmanSpawnPlacementStrategy' has a wrong offset!");
static_assert(offsetof(USnowmanWinterEventComponent, _snowmen) == 0x000158, "Member 'USnowmanWinterEventComponent::_snowmen' has a wrong offset!");

// Class SnowmanWinterEvent.SnowmanSpawnPlacementStrategy
// 0x0240 (0x02F8 - 0x00B8)
class USnowmanSpawnPlacementStrategy final : public UActorComponent
{
public:
	struct FDBDTunableRowHandle                   _minDistanceFromOtherActiveSnowmen;                // 0x00B8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _minDistanceFromOtherPlayers;                      // 0x00E0(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _minHatchDistance;                                 // 0x0108(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _minPalletDistance;                                // 0x0130(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _navmesh_radiusArea;                               // 0x0158(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _navmesh_minimumDistanceFromOriginSpawnPoint;      // 0x0180(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _navmesh_minimumNumberOfNavmeshPointsToBeReady;    // 0x01A8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _boxExtentXSize;                                   // 0x01D0(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _boxExtentYSize;                                   // 0x01F8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _boxExtentZSize;                                   // 0x0220(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                _collisionBoxHalfExtent;                           // 0x0248(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _collisionCapsuleHalfHeight;                       // 0x0254(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _collisionCapsuleRadius;                           // 0x0258(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _minDistanceFromOtherActiveSnowmenSquared;         // 0x025C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _minDistanceFromOtherPlayersSquared;               // 0x0260(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _minPalletDistanceSquared;                         // 0x0264(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _minHatchSquaredDistance;                          // 0x0268(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETileSpawnPointType>                   _spawnPointsTileTypes;                             // 0x0270(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<EGameplayElementType>                  _spawnPointsGameplayElementTypes;                  // 0x0280(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSnowmanSpawnLocationData>      _spawnLocationData;                                // 0x0290(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class AHatch*>                         _hatches;                                          // 0x02A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class APallet*>                        _pallets;                                          // 0x02B0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C0[0x20];                                     // 0x02C0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _collisionCheckBoxExtents;                         // 0x02E0(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _downRaycastLength;                                // 0x02EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _rayCastZOffet;                                    // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _distanceToGroundToleranceSquared;                 // 0x02F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Authority_OnIntroCompletedOrLevelReadyToPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnowmanSpawnPlacementStrategy">();
	}
	static class USnowmanSpawnPlacementStrategy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnowmanSpawnPlacementStrategy>();
	}
};
static_assert(alignof(USnowmanSpawnPlacementStrategy) == 0x000008, "Wrong alignment on USnowmanSpawnPlacementStrategy");
static_assert(sizeof(USnowmanSpawnPlacementStrategy) == 0x0002F8, "Wrong size on USnowmanSpawnPlacementStrategy");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minDistanceFromOtherActiveSnowmen) == 0x0000B8, "Member 'USnowmanSpawnPlacementStrategy::_minDistanceFromOtherActiveSnowmen' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minDistanceFromOtherPlayers) == 0x0000E0, "Member 'USnowmanSpawnPlacementStrategy::_minDistanceFromOtherPlayers' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minHatchDistance) == 0x000108, "Member 'USnowmanSpawnPlacementStrategy::_minHatchDistance' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minPalletDistance) == 0x000130, "Member 'USnowmanSpawnPlacementStrategy::_minPalletDistance' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _navmesh_radiusArea) == 0x000158, "Member 'USnowmanSpawnPlacementStrategy::_navmesh_radiusArea' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _navmesh_minimumDistanceFromOriginSpawnPoint) == 0x000180, "Member 'USnowmanSpawnPlacementStrategy::_navmesh_minimumDistanceFromOriginSpawnPoint' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _navmesh_minimumNumberOfNavmeshPointsToBeReady) == 0x0001A8, "Member 'USnowmanSpawnPlacementStrategy::_navmesh_minimumNumberOfNavmeshPointsToBeReady' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _boxExtentXSize) == 0x0001D0, "Member 'USnowmanSpawnPlacementStrategy::_boxExtentXSize' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _boxExtentYSize) == 0x0001F8, "Member 'USnowmanSpawnPlacementStrategy::_boxExtentYSize' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _boxExtentZSize) == 0x000220, "Member 'USnowmanSpawnPlacementStrategy::_boxExtentZSize' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _collisionBoxHalfExtent) == 0x000248, "Member 'USnowmanSpawnPlacementStrategy::_collisionBoxHalfExtent' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _collisionCapsuleHalfHeight) == 0x000254, "Member 'USnowmanSpawnPlacementStrategy::_collisionCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _collisionCapsuleRadius) == 0x000258, "Member 'USnowmanSpawnPlacementStrategy::_collisionCapsuleRadius' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minDistanceFromOtherActiveSnowmenSquared) == 0x00025C, "Member 'USnowmanSpawnPlacementStrategy::_minDistanceFromOtherActiveSnowmenSquared' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minDistanceFromOtherPlayersSquared) == 0x000260, "Member 'USnowmanSpawnPlacementStrategy::_minDistanceFromOtherPlayersSquared' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minPalletDistanceSquared) == 0x000264, "Member 'USnowmanSpawnPlacementStrategy::_minPalletDistanceSquared' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minHatchSquaredDistance) == 0x000268, "Member 'USnowmanSpawnPlacementStrategy::_minHatchSquaredDistance' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _spawnPointsTileTypes) == 0x000270, "Member 'USnowmanSpawnPlacementStrategy::_spawnPointsTileTypes' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _spawnPointsGameplayElementTypes) == 0x000280, "Member 'USnowmanSpawnPlacementStrategy::_spawnPointsGameplayElementTypes' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _spawnLocationData) == 0x000290, "Member 'USnowmanSpawnPlacementStrategy::_spawnLocationData' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _hatches) == 0x0002A0, "Member 'USnowmanSpawnPlacementStrategy::_hatches' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _pallets) == 0x0002B0, "Member 'USnowmanSpawnPlacementStrategy::_pallets' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _collisionCheckBoxExtents) == 0x0002E0, "Member 'USnowmanSpawnPlacementStrategy::_collisionCheckBoxExtents' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _downRaycastLength) == 0x0002EC, "Member 'USnowmanSpawnPlacementStrategy::_downRaycastLength' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _rayCastZOffet) == 0x0002F0, "Member 'USnowmanSpawnPlacementStrategy::_rayCastZOffet' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _distanceToGroundToleranceSquared) == 0x0002F4, "Member 'USnowmanSpawnPlacementStrategy::_distanceToGroundToleranceSquared' has a wrong offset!");

// Class SnowmanWinterEvent.SnowmanWinterEventPlayerComponent
// 0x00C8 (0x0180 - 0x00B8)
class USnowmanWinterEventPlayerComponent final : public UActorComponent
{
public:
	struct FDBDTunableRowHandle                   _maxTrackedTimeSinceSnowmanExit;                   // 0x00B8(0x0028)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<TWeakObjectPtr<class ADBDPlayer>>        _previouslyHighFivedPlayers;                       // 0x00E0(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_130[0x50];                                     // 0x0130(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnowmanWinterEventPlayerComponent">();
	}
	static class USnowmanWinterEventPlayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnowmanWinterEventPlayerComponent>();
	}
};
static_assert(alignof(USnowmanWinterEventPlayerComponent) == 0x000008, "Wrong alignment on USnowmanWinterEventPlayerComponent");
static_assert(sizeof(USnowmanWinterEventPlayerComponent) == 0x000180, "Wrong size on USnowmanWinterEventPlayerComponent");
static_assert(offsetof(USnowmanWinterEventPlayerComponent, _maxTrackedTimeSinceSnowmanExit) == 0x0000B8, "Member 'USnowmanWinterEventPlayerComponent::_maxTrackedTimeSinceSnowmanExit' has a wrong offset!");
static_assert(offsetof(USnowmanWinterEventPlayerComponent, _previouslyHighFivedPlayers) == 0x0000E0, "Member 'USnowmanWinterEventPlayerComponent::_previouslyHighFivedPlayers' has a wrong offset!");

// Class SnowmanWinterEvent.SurvivorHideInSnowmanInteraction
// 0x0100 (0x07F0 - 0x06F0)
class USurvivorHideInSnowmanInteraction final : public UHideInSnowmanInteraction
{
public:
	bool                                          _shouldRunOutOfSnowman;                            // 0x06F0(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isSnowmanShieldDamaged;                           // 0x06F1(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6F2[0x6];                                      // 0x06F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   _nonDamagingSnowmanDestroyingEvents;               // 0x06F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _minimumTimeToRunAndExit;                          // 0x0708(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _cameraZoomBack;                                   // 0x0730(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeToZoomEnter;                                  // 0x0758(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeToZoomExit;                                   // 0x0780(0x0028)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7A8[0x48];                                     // 0x07A8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnDamageStateChanged(ECamperDamageState oldDamageState, ECamperDamageState currentDamageState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorHideInSnowmanInteraction">();
	}
	static class USurvivorHideInSnowmanInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorHideInSnowmanInteraction>();
	}
};
static_assert(alignof(USurvivorHideInSnowmanInteraction) == 0x000010, "Wrong alignment on USurvivorHideInSnowmanInteraction");
static_assert(sizeof(USurvivorHideInSnowmanInteraction) == 0x0007F0, "Wrong size on USurvivorHideInSnowmanInteraction");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _shouldRunOutOfSnowman) == 0x0006F0, "Member 'USurvivorHideInSnowmanInteraction::_shouldRunOutOfSnowman' has a wrong offset!");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _isSnowmanShieldDamaged) == 0x0006F1, "Member 'USurvivorHideInSnowmanInteraction::_isSnowmanShieldDamaged' has a wrong offset!");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _nonDamagingSnowmanDestroyingEvents) == 0x0006F8, "Member 'USurvivorHideInSnowmanInteraction::_nonDamagingSnowmanDestroyingEvents' has a wrong offset!");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _minimumTimeToRunAndExit) == 0x000708, "Member 'USurvivorHideInSnowmanInteraction::_minimumTimeToRunAndExit' has a wrong offset!");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _cameraZoomBack) == 0x000730, "Member 'USurvivorHideInSnowmanInteraction::_cameraZoomBack' has a wrong offset!");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _timeToZoomEnter) == 0x000758, "Member 'USurvivorHideInSnowmanInteraction::_timeToZoomEnter' has a wrong offset!");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _timeToZoomExit) == 0x000780, "Member 'USurvivorHideInSnowmanInteraction::_timeToZoomExit' has a wrong offset!");

}

