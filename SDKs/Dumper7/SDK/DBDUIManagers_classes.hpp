#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIManagers

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "DBDUIManagers_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Class DBDUIManagers.DBDTextManager
// 0x0020 (0x0058 - 0x0038)
class UDBDTextManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x20];                                      // 0x0038(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetLargeTextEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDTextManager">();
	}
	static class UDBDTextManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDTextManager>();
	}
};
static_assert(alignof(UDBDTextManager) == 0x000008, "Wrong alignment on UDBDTextManager");
static_assert(sizeof(UDBDTextManager) == 0x000058, "Wrong size on UDBDTextManager");

// Class DBDUIManagers.UIAnalyticsManager
// 0x0030 (0x0068 - 0x0038)
class UUIAnalyticsManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x30];                                      // 0x0038(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIAnalyticsManager">();
	}
	static class UUIAnalyticsManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIAnalyticsManager>();
	}
};
static_assert(alignof(UUIAnalyticsManager) == 0x000008, "Wrong alignment on UUIAnalyticsManager");
static_assert(sizeof(UUIAnalyticsManager) == 0x000068, "Wrong size on UUIAnalyticsManager");

// Class DBDUIManagers.UIEventDispatcher
// 0x0090 (0x00C8 - 0x0038)
class UUIEventDispatcher final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x90];                                      // 0x0038(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIEventDispatcher">();
	}
	static class UUIEventDispatcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIEventDispatcher>();
	}
};
static_assert(alignof(UUIEventDispatcher) == 0x000008, "Wrong alignment on UUIEventDispatcher");
static_assert(sizeof(UUIEventDispatcher) == 0x0000C8, "Wrong size on UUIEventDispatcher");

// Class DBDUIManagers.UIDataManager
// 0x0190 (0x01C8 - 0x0038)
class UUIDataManager final : public UGameInstanceSubsystem
{
public:
	TMap<EItemRarity, struct FRarityMaterialData> RarityMaterialMap;                                 // 0x0038(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMap<class FString, struct FTextBlockStyle>   RichTextStyleMap;                                  // 0x0088(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMap<ECurrencyType, struct FCurrencyProgressionUIData> CurrencyUIDataMap;                        // 0x00D8(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMap<EProgressionType, struct FCurrencyProgressionUIData> ProgressionUIDataMap;                  // 0x0128(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMap<EArchiveMenuState, struct FArchiveTomeSkinData> ArchiveTomeSkinDataMap;                     // 0x0178(0x0050)(Transient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIDataManager">();
	}
	static class UUIDataManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIDataManager>();
	}
};
static_assert(alignof(UUIDataManager) == 0x000008, "Wrong alignment on UUIDataManager");
static_assert(sizeof(UUIDataManager) == 0x0001C8, "Wrong size on UUIDataManager");
static_assert(offsetof(UUIDataManager, RarityMaterialMap) == 0x000038, "Member 'UUIDataManager::RarityMaterialMap' has a wrong offset!");
static_assert(offsetof(UUIDataManager, RichTextStyleMap) == 0x000088, "Member 'UUIDataManager::RichTextStyleMap' has a wrong offset!");
static_assert(offsetof(UUIDataManager, CurrencyUIDataMap) == 0x0000D8, "Member 'UUIDataManager::CurrencyUIDataMap' has a wrong offset!");
static_assert(offsetof(UUIDataManager, ProgressionUIDataMap) == 0x000128, "Member 'UUIDataManager::ProgressionUIDataMap' has a wrong offset!");
static_assert(offsetof(UUIDataManager, ArchiveTomeSkinDataMap) == 0x000178, "Member 'UUIDataManager::ArchiveTomeSkinDataMap' has a wrong offset!");

// Class DBDUIManagers.UIScaleManager
// 0x00A8 (0x00E0 - 0x0038)
class UUIScaleManager final : public UGameInstanceSubsystem
{
public:
	class UDataTable*                             _dpiScaleCurveDB;                                  // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _dpiScaleCurve;                                    // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x98];                                      // 0x0048(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EDPIScaleCurveRatio GetDPIScaleCurveRatio();

	float GetHudScaleFactor() const;
	float GetMenuScaleFactor() const;
	float GetScaleFactor(EScaleType type) const;
	float GetSkillCheckScaleFactor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIScaleManager">();
	}
	static class UUIScaleManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIScaleManager>();
	}
};
static_assert(alignof(UUIScaleManager) == 0x000008, "Wrong alignment on UUIScaleManager");
static_assert(sizeof(UUIScaleManager) == 0x0000E0, "Wrong size on UUIScaleManager");
static_assert(offsetof(UUIScaleManager, _dpiScaleCurveDB) == 0x000038, "Member 'UUIScaleManager::_dpiScaleCurveDB' has a wrong offset!");
static_assert(offsetof(UUIScaleManager, _dpiScaleCurve) == 0x000040, "Member 'UUIScaleManager::_dpiScaleCurve' has a wrong offset!");

}

