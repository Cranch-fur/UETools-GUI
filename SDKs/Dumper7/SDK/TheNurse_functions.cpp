#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheNurse

#include "Basic.hpp"

#include "TheNurse_classes.hpp"
#include "TheNurse_parameters.hpp"


namespace SDK
{

// Function TheNurse.AnxiousGaspAddon.OnDetectorOverlapBegin
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              overlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           otherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              otherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   otherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                sweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UAnxiousGaspAddon::OnDetectorOverlapBegin(class UPrimitiveComponent* overlappedComponent, class AActor* otherActor, class UPrimitiveComponent* otherComp, int32 otherBodyIndex, bool bFromSweep, const struct FHitResult& sweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnxiousGaspAddon", "OnDetectorOverlapBegin");

	Params::AnxiousGaspAddon_OnDetectorOverlapBegin Parms{};

	Parms.overlappedComponent = overlappedComponent;
	Parms.otherActor = otherActor;
	Parms.otherComp = otherComp;
	Parms.otherBodyIndex = otherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.sweepResult = std::move(sweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.AnxiousGaspAddon.PlayScream
// (BlueprintCosmetic, Event, Protected, BlueprintEvent, Const)
// Parameters:
// const class ACamperPlayer*              survivor                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnxiousGaspAddon::PlayScream(const class ACamperPlayer* survivor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnxiousGaspAddon", "PlayScream");

	Params::AnxiousGaspAddon_PlayScream Parms{};

	Parms.survivor = survivor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheNurse.BalancedLanding.Client_UnvalidateBalanceLanding
// (Final, Net, NetReliable, Native, Event, Private, NetClient)

void UBalancedLanding::Client_UnvalidateBalanceLanding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BalancedLanding", "Client_UnvalidateBalanceLanding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BalancedLanding.Server_WarnBalancedLandingPredicted
// (Final, Net, NetReliable, Native, Event, Private, NetServer, BlueprintCallable)

void UBalancedLanding::Server_WarnBalancedLandingPredicted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BalancedLanding", "Server_WarnBalancedLandingPredicted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BalancedLanding.GetExhaustionDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBalancedLanding::GetExhaustionDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BalancedLanding", "GetExhaustionDurationAtLevel");

	Params::BalancedLanding_GetExhaustionDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheNurse.BalancedLanding.GetSprintDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBalancedLanding::GetSprintDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BalancedLanding", "GetSprintDuration");

	Params::BalancedLanding_GetSprintDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheNurse.BlinkPlayerComponent.Local_OnMovementModeChanged
// (Final, Native, Private)
// Parameters:
// class ACharacter*                       character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           prevMovementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   previousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlinkPlayerComponent::Local_OnMovementModeChanged(class ACharacter* character, EMovementMode prevMovementMode, uint8 previousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPlayerComponent", "Local_OnMovementModeChanged");

	Params::BlinkPlayerComponent_Local_OnMovementModeChanged Parms{};

	Parms.character = character;
	Parms.prevMovementMode = prevMovementMode;
	Parms.previousCustomMode = previousCustomMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BlinkPlayerComponent.Multicast_EndBlink
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void UBlinkPlayerComponent::Multicast_EndBlink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPlayerComponent", "Multicast_EndBlink");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BlinkPlayerComponent.Multicast_StartBlink
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// const struct FBlinkParams&              params                                                 (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBlinkPlayerComponent::Multicast_StartBlink(const struct FBlinkParams& params)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPlayerComponent", "Multicast_StartBlink");

	Params::BlinkPlayerComponent_Multicast_StartBlink Parms{};

	Parms.params = std::move(params);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BlinkPlayerComponent.Server_EndBlink
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UBlinkPlayerComponent::Server_EndBlink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPlayerComponent", "Server_EndBlink");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BlinkPlayerComponent.Server_StartBlink
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// const struct FBlinkParams&              params                                                 (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBlinkPlayerComponent::Server_StartBlink(const struct FBlinkParams& params)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPlayerComponent", "Server_StartBlink");

	Params::BlinkPlayerComponent_Server_StartBlink Parms{};

	Parms.params = std::move(params);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BlinkPowerPlayerComponent.OnAttackFinished
// (Final, Native, Private)
// Parameters:
// const EAttackType                       attackType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlinkPowerPlayerComponent::OnAttackFinished(const EAttackType attackType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "OnAttackFinished");

	Params::BlinkPowerPlayerComponent_OnAttackFinished Parms{};

	Parms.attackType = attackType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BlinkPowerPlayerComponent.OnAttackStarted
// (Final, Native, Private)
// Parameters:
// const EAttackType                       attackType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlinkPowerPlayerComponent::OnAttackStarted(const EAttackType attackType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "OnAttackStarted");

	Params::BlinkPowerPlayerComponent_OnAttackStarted Parms{};

	Parms.attackType = attackType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BlinkPowerPlayerComponent.OnLevelReadyToPlay
// (Final, Native, Private)

void UBlinkPowerPlayerComponent::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BlinkPowerPlayerComponent.OnRep_BlinkCharges
// (Final, Native, Private)

void UBlinkPowerPlayerComponent::OnRep_BlinkCharges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "OnRep_BlinkCharges");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BlinkPowerPlayerComponent.OnRep_BlinkState
// (Final, Native, Private)
// Parameters:
// EBlinkPowerState                        oldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlinkPowerPlayerComponent::OnRep_BlinkState(EBlinkPowerState oldState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "OnRep_BlinkState");

	Params::BlinkPowerPlayerComponent_OnRep_BlinkState Parms{};

	Parms.oldState = oldState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BlinkPowerPlayerComponent.Server_InterruptDuringChainBlink
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class AActor*                           interruptedPlayer                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlinkPowerPlayerComponent::Server_InterruptDuringChainBlink(class AActor* interruptedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "Server_InterruptDuringChainBlink");

	Params::BlinkPowerPlayerComponent_Server_InterruptDuringChainBlink Parms{};

	Parms.interruptedPlayer = interruptedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BlinkPowerPlayerComponent.Server_SetState
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// EBlinkPowerState                        state                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlinkPowerPlayerComponent::Server_SetState(EBlinkPowerState state)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "Server_SetState");

	Params::BlinkPowerPlayerComponent_Server_SetState Parms{};

	Parms.state = state;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BlinkPowerPlayerComponent.Server_TriggerChainBlink
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// int32                                   remainingBlinkCharges                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlinkPowerPlayerComponent::Server_TriggerChainBlink(int32 remainingBlinkCharges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "Server_TriggerChainBlink");

	Params::BlinkPowerPlayerComponent_Server_TriggerChainBlink Parms{};

	Parms.remainingBlinkCharges = remainingBlinkCharges;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BlinkPowerPlayerComponent.Server_TriggerCooldown
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// float                                   duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlinkPowerPlayerComponent::Server_TriggerCooldown(float duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "Server_TriggerCooldown");

	Params::BlinkPowerPlayerComponent_Server_TriggerCooldown Parms{};

	Parms.duration = duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BlinkPowerPlayerComponent.Setup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlinkPowerSetupParams&    params                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UBlinkPowerPlayerComponent::Setup(const struct FBlinkPowerSetupParams& params)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "Setup");

	Params::BlinkPowerPlayerComponent_Setup Parms{};

	Parms.params = std::move(params);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheNurse.BlinkPowerPlayerComponent.GetBlinkCharges
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBlinkPowerPlayerComponent::GetBlinkCharges() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "GetBlinkCharges");

	Params::BlinkPowerPlayerComponent_GetBlinkCharges Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheNurse.BlinkPowerPlayerComponent.GetChainBlinkProgressPercent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBlinkPowerPlayerComponent::GetChainBlinkProgressPercent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "GetChainBlinkProgressPercent");

	Params::BlinkPowerPlayerComponent_GetChainBlinkProgressPercent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheNurse.BlinkPowerPlayerComponent.GetChainBlinkRemainingTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBlinkPowerPlayerComponent::GetChainBlinkRemainingTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "GetChainBlinkRemainingTime");

	Params::BlinkPowerPlayerComponent_GetChainBlinkRemainingTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheNurse.BlinkPowerPlayerComponent.GetChainBlinkTimerDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBlinkPowerPlayerComponent::GetChainBlinkTimerDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "GetChainBlinkTimerDuration");

	Params::BlinkPowerPlayerComponent_GetChainBlinkTimerDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheNurse.BlinkPowerPlayerComponent.GetCooldownProgressPercent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBlinkPowerPlayerComponent::GetCooldownProgressPercent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "GetCooldownProgressPercent");

	Params::BlinkPowerPlayerComponent_GetCooldownProgressPercent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheNurse.BlinkPowerPlayerComponent.GetCooldownRemainingTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBlinkPowerPlayerComponent::GetCooldownRemainingTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "GetCooldownRemainingTime");

	Params::BlinkPowerPlayerComponent_GetCooldownRemainingTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheNurse.BlinkPowerPlayerComponent.GetCooldownTimerDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBlinkPowerPlayerComponent::GetCooldownTimerDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "GetCooldownTimerDuration");

	Params::BlinkPowerPlayerComponent_GetCooldownTimerDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheNurse.BlinkPowerPlayerComponent.GetPowerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBlinkPowerState                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBlinkPowerState UBlinkPowerPlayerComponent::GetPowerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "GetPowerState");

	Params::BlinkPowerPlayerComponent_GetPowerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheNurse.BlinkPowerPlayerComponent.GetRechargeProgressPercent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBlinkPowerPlayerComponent::GetRechargeProgressPercent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "GetRechargeProgressPercent");

	Params::BlinkPowerPlayerComponent_GetRechargeProgressPercent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheNurse.BlinkPowerPlayerComponent.IsBlinking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlinkPowerPlayerComponent::IsBlinking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "IsBlinking");

	Params::BlinkPowerPlayerComponent_IsBlinking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheNurse.BlinkPowerPlayerComponent.IsChargeFull
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlinkPowerPlayerComponent::IsChargeFull() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "IsChargeFull");

	Params::BlinkPowerPlayerComponent_IsChargeFull Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheNurse.BlinkPowerPlayerComponent.IsChargingBlink
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlinkPowerPlayerComponent::IsChargingBlink() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlinkPowerPlayerComponent", "IsChargingBlink");

	Params::BlinkPowerPlayerComponent_IsChargingBlink Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheNurse.NurseAnimInstance.OnBlinkTriggered
// (Event, Protected, BlueprintEvent)

void UNurseAnimInstance::OnBlinkTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NurseAnimInstance", "OnBlinkTriggered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheNurse.NurseFXInterface.Cosmetic_OnSpasmodicBreathAddonEffectActive
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    activeValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void INurseFXInterface::Cosmetic_OnSpasmodicBreathAddonEffectActive(bool activeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("NurseFXInterface", "Cosmetic_OnSpasmodicBreathAddonEffectActive");

	Params::NurseFXInterface_Cosmetic_OnSpasmodicBreathAddonEffectActive Parms{};

	Parms.activeValue = activeValue;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function TheNurse.NurseFXInterface.Cosmetic_SpawnSpasmodicBreathVignette
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void INurseFXInterface::Cosmetic_SpawnSpasmodicBreathVignette()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("NurseFXInterface", "Cosmetic_SpawnSpasmodicBreathVignette");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function TheNurse.NurseHelper.GetBlinkPowerItem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ADBDPlayer*                       player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABlinkPowerItem*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABlinkPowerItem* UNurseHelper::GetBlinkPowerItem(class ADBDPlayer* player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NurseHelper", "GetBlinkPowerItem");

	Params::NurseHelper_GetBlinkPowerItem Parms{};

	Parms.player = player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheNurse.StreetwiseEffect.Authority_OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// const bool                              inRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStreetwiseEffect::Authority_OnInRangeChanged(const bool inRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StreetwiseEffect", "Authority_OnInRangeChanged");

	Params::StreetwiseEffect_Authority_OnInRangeChanged Parms{};

	Parms.inRange = inRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

