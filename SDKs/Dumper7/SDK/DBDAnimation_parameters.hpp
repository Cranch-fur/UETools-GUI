#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDAnimation

#include "Basic.hpp"

#include "DBDAnimation_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function DBDAnimation.DBDBaseAnimInstance.HasBeenNotified
// 0x0010 (0x0010 - 0x0000)
struct DBDBaseAnimInstance_HasBeenNotified final
{
public:
	class FName                                   animNotify;                                        // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDBaseAnimInstance_HasBeenNotified) == 0x000004, "Wrong alignment on DBDBaseAnimInstance_HasBeenNotified");
static_assert(sizeof(DBDBaseAnimInstance_HasBeenNotified) == 0x000010, "Wrong size on DBDBaseAnimInstance_HasBeenNotified");
static_assert(offsetof(DBDBaseAnimInstance_HasBeenNotified, animNotify) == 0x000000, "Member 'DBDBaseAnimInstance_HasBeenNotified::animNotify' has a wrong offset!");
static_assert(offsetof(DBDBaseAnimInstance_HasBeenNotified, ReturnValue) == 0x00000C, "Member 'DBDBaseAnimInstance_HasBeenNotified::ReturnValue' has a wrong offset!");

// Function DBDAnimation.PlayerAnimInstance.GetOwningPlayer
// 0x0008 (0x0008 - 0x0000)
struct PlayerAnimInstance_GetOwningPlayer final
{
public:
	const class ADBDPlayer*                       ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerAnimInstance_GetOwningPlayer) == 0x000008, "Wrong alignment on PlayerAnimInstance_GetOwningPlayer");
static_assert(sizeof(PlayerAnimInstance_GetOwningPlayer) == 0x000008, "Wrong size on PlayerAnimInstance_GetOwningPlayer");
static_assert(offsetof(PlayerAnimInstance_GetOwningPlayer, ReturnValue) == 0x000000, "Member 'PlayerAnimInstance_GetOwningPlayer::ReturnValue' has a wrong offset!");

// Function DBDAnimation.BaseSurvivorAnimInstance.GetOwningSurvivor
// 0x0008 (0x0008 - 0x0000)
struct BaseSurvivorAnimInstance_GetOwningSurvivor final
{
public:
	const class ACamperPlayer*                    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSurvivorAnimInstance_GetOwningSurvivor) == 0x000008, "Wrong alignment on BaseSurvivorAnimInstance_GetOwningSurvivor");
static_assert(sizeof(BaseSurvivorAnimInstance_GetOwningSurvivor) == 0x000008, "Wrong size on BaseSurvivorAnimInstance_GetOwningSurvivor");
static_assert(offsetof(BaseSurvivorAnimInstance_GetOwningSurvivor, ReturnValue) == 0x000000, "Member 'BaseSurvivorAnimInstance_GetOwningSurvivor::ReturnValue' has a wrong offset!");

// Function DBDAnimation.BaseSurvivorAnimInstance.IsPlayingMontageByName
// 0x0010 (0x0010 - 0x0000)
struct BaseSurvivorAnimInstance_IsPlayingMontageByName final
{
public:
	class FName                                   montageId;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseSurvivorAnimInstance_IsPlayingMontageByName) == 0x000004, "Wrong alignment on BaseSurvivorAnimInstance_IsPlayingMontageByName");
static_assert(sizeof(BaseSurvivorAnimInstance_IsPlayingMontageByName) == 0x000010, "Wrong size on BaseSurvivorAnimInstance_IsPlayingMontageByName");
static_assert(offsetof(BaseSurvivorAnimInstance_IsPlayingMontageByName, montageId) == 0x000000, "Member 'BaseSurvivorAnimInstance_IsPlayingMontageByName::montageId' has a wrong offset!");
static_assert(offsetof(BaseSurvivorAnimInstance_IsPlayingMontageByName, ReturnValue) == 0x00000C, "Member 'BaseSurvivorAnimInstance_IsPlayingMontageByName::ReturnValue' has a wrong offset!");

// Function DBDAnimation.ArmIKSurvivorSubAnimInstance.ChangeMode
// 0x0001 (0x0001 - 0x0000)
struct ArmIKSurvivorSubAnimInstance_ChangeMode final
{
public:
	EArmIkMode                                    newMode;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArmIKSurvivorSubAnimInstance_ChangeMode) == 0x000001, "Wrong alignment on ArmIKSurvivorSubAnimInstance_ChangeMode");
static_assert(sizeof(ArmIKSurvivorSubAnimInstance_ChangeMode) == 0x000001, "Wrong size on ArmIKSurvivorSubAnimInstance_ChangeMode");
static_assert(offsetof(ArmIKSurvivorSubAnimInstance_ChangeMode, newMode) == 0x000000, "Member 'ArmIKSurvivorSubAnimInstance_ChangeMode::newMode' has a wrong offset!");

// Function DBDAnimation.BaseKillerAnimInstance.DBD_ForceAnimPOV
// 0x0004 (0x0004 - 0x0000)
struct BaseKillerAnimInstance_DBD_ForceAnimPOV final
{
public:
	int32                                         animPOV;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseKillerAnimInstance_DBD_ForceAnimPOV) == 0x000004, "Wrong alignment on BaseKillerAnimInstance_DBD_ForceAnimPOV");
static_assert(sizeof(BaseKillerAnimInstance_DBD_ForceAnimPOV) == 0x000004, "Wrong size on BaseKillerAnimInstance_DBD_ForceAnimPOV");
static_assert(offsetof(BaseKillerAnimInstance_DBD_ForceAnimPOV, animPOV) == 0x000000, "Member 'BaseKillerAnimInstance_DBD_ForceAnimPOV::animPOV' has a wrong offset!");

// Function DBDAnimation.BaseKillerAnimInstance.GetOwningKiller
// 0x0008 (0x0008 - 0x0000)
struct BaseKillerAnimInstance_GetOwningKiller final
{
public:
	const class ASlasherPlayer*                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseKillerAnimInstance_GetOwningKiller) == 0x000008, "Wrong alignment on BaseKillerAnimInstance_GetOwningKiller");
static_assert(sizeof(BaseKillerAnimInstance_GetOwningKiller) == 0x000008, "Wrong size on BaseKillerAnimInstance_GetOwningKiller");
static_assert(offsetof(BaseKillerAnimInstance_GetOwningKiller, ReturnValue) == 0x000000, "Member 'BaseKillerAnimInstance_GetOwningKiller::ReturnValue' has a wrong offset!");

// Function DBDAnimation.BaseKillerAttackSubAnimInstance.GetOwningKiller
// 0x0008 (0x0008 - 0x0000)
struct BaseKillerAttackSubAnimInstance_GetOwningKiller final
{
public:
	const class ASlasherPlayer*                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseKillerAttackSubAnimInstance_GetOwningKiller) == 0x000008, "Wrong alignment on BaseKillerAttackSubAnimInstance_GetOwningKiller");
static_assert(sizeof(BaseKillerAttackSubAnimInstance_GetOwningKiller) == 0x000008, "Wrong size on BaseKillerAttackSubAnimInstance_GetOwningKiller");
static_assert(offsetof(BaseKillerAttackSubAnimInstance_GetOwningKiller, ReturnValue) == 0x000000, "Member 'BaseKillerAttackSubAnimInstance_GetOwningKiller::ReturnValue' has a wrong offset!");

// Function DBDAnimation.BaseMenuAnimInstance.OnCustomizationChanged
// 0x0010 (0x0010 - 0x0000)
struct BaseMenuAnimInstance_OnCustomizationChanged final
{
public:
	TArray<class FName>                           customizationArray;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseMenuAnimInstance_OnCustomizationChanged) == 0x000008, "Wrong alignment on BaseMenuAnimInstance_OnCustomizationChanged");
static_assert(sizeof(BaseMenuAnimInstance_OnCustomizationChanged) == 0x000010, "Wrong size on BaseMenuAnimInstance_OnCustomizationChanged");
static_assert(offsetof(BaseMenuAnimInstance_OnCustomizationChanged, customizationArray) == 0x000000, "Member 'BaseMenuAnimInstance_OnCustomizationChanged::customizationArray' has a wrong offset!");

// Function DBDAnimation.BaseMenuAnimInstance.GetCurrentMenu
// 0x0001 (0x0001 - 0x0000)
struct BaseMenuAnimInstance_GetCurrentMenu final
{
public:
	EGameFlowStep                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseMenuAnimInstance_GetCurrentMenu) == 0x000001, "Wrong alignment on BaseMenuAnimInstance_GetCurrentMenu");
static_assert(sizeof(BaseMenuAnimInstance_GetCurrentMenu) == 0x000001, "Wrong size on BaseMenuAnimInstance_GetCurrentMenu");
static_assert(offsetof(BaseMenuAnimInstance_GetCurrentMenu, ReturnValue) == 0x000000, "Member 'BaseMenuAnimInstance_GetCurrentMenu::ReturnValue' has a wrong offset!");

// Function DBDAnimation.BaseMenuAnimInstance.GetOwningMenuPlayer
// 0x0008 (0x0008 - 0x0000)
struct BaseMenuAnimInstance_GetOwningMenuPlayer final
{
public:
	class ADBDMenuPlayer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseMenuAnimInstance_GetOwningMenuPlayer) == 0x000008, "Wrong alignment on BaseMenuAnimInstance_GetOwningMenuPlayer");
static_assert(sizeof(BaseMenuAnimInstance_GetOwningMenuPlayer) == 0x000008, "Wrong size on BaseMenuAnimInstance_GetOwningMenuPlayer");
static_assert(offsetof(BaseMenuAnimInstance_GetOwningMenuPlayer, ReturnValue) == 0x000000, "Member 'BaseMenuAnimInstance_GetOwningMenuPlayer::ReturnValue' has a wrong offset!");

// Function DBDAnimation.ChestAnimInstance.OnBeingPriedOpenStarted
// 0x0008 (0x0008 - 0x0000)
struct ChestAnimInstance_OnBeingPriedOpenStarted final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChestAnimInstance_OnBeingPriedOpenStarted) == 0x000008, "Wrong alignment on ChestAnimInstance_OnBeingPriedOpenStarted");
static_assert(sizeof(ChestAnimInstance_OnBeingPriedOpenStarted) == 0x000008, "Wrong size on ChestAnimInstance_OnBeingPriedOpenStarted");
static_assert(offsetof(ChestAnimInstance_OnBeingPriedOpenStarted, player) == 0x000000, "Member 'ChestAnimInstance_OnBeingPriedOpenStarted::player' has a wrong offset!");

// Function DBDAnimation.ChestAnimInstance.OnSearchedChanged
// 0x0001 (0x0001 - 0x0000)
struct ChestAnimInstance_OnSearchedChanged final
{
public:
	bool                                          searched;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChestAnimInstance_OnSearchedChanged) == 0x000001, "Wrong alignment on ChestAnimInstance_OnSearchedChanged");
static_assert(sizeof(ChestAnimInstance_OnSearchedChanged) == 0x000001, "Wrong size on ChestAnimInstance_OnSearchedChanged");
static_assert(offsetof(ChestAnimInstance_OnSearchedChanged, searched) == 0x000000, "Member 'ChestAnimInstance_OnSearchedChanged::searched' has a wrong offset!");

// Function DBDAnimation.GeneratorAnimInstance.SetSkillCheckSuccess
// 0x0001 (0x0001 - 0x0000)
struct GeneratorAnimInstance_SetSkillCheckSuccess final
{
public:
	bool                                          success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorAnimInstance_SetSkillCheckSuccess) == 0x000001, "Wrong alignment on GeneratorAnimInstance_SetSkillCheckSuccess");
static_assert(sizeof(GeneratorAnimInstance_SetSkillCheckSuccess) == 0x000001, "Wrong size on GeneratorAnimInstance_SetSkillCheckSuccess");
static_assert(offsetof(GeneratorAnimInstance_SetSkillCheckSuccess, success) == 0x000000, "Member 'GeneratorAnimInstance_SetSkillCheckSuccess::success' has a wrong offset!");

// Function DBDAnimation.HealSurvivorSubAnimInstance.OnHealerSkillCheckResponseAesthetic
// 0x0010 (0x0010 - 0x0000)
struct HealSurvivorSubAnimInstance_OnHealerSkillCheckResponseAesthetic final
{
public:
	bool                                          success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             healer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealSurvivorSubAnimInstance_OnHealerSkillCheckResponseAesthetic) == 0x000008, "Wrong alignment on HealSurvivorSubAnimInstance_OnHealerSkillCheckResponseAesthetic");
static_assert(sizeof(HealSurvivorSubAnimInstance_OnHealerSkillCheckResponseAesthetic) == 0x000010, "Wrong size on HealSurvivorSubAnimInstance_OnHealerSkillCheckResponseAesthetic");
static_assert(offsetof(HealSurvivorSubAnimInstance_OnHealerSkillCheckResponseAesthetic, success) == 0x000000, "Member 'HealSurvivorSubAnimInstance_OnHealerSkillCheckResponseAesthetic::success' has a wrong offset!");
static_assert(offsetof(HealSurvivorSubAnimInstance_OnHealerSkillCheckResponseAesthetic, healer) == 0x000008, "Member 'HealSurvivorSubAnimInstance_OnHealerSkillCheckResponseAesthetic::healer' has a wrong offset!");

// Function DBDAnimation.KillerAnimInstance.GetWeaponCustomizationId
// 0x000C (0x000C - 0x0000)
struct KillerAnimInstance_GetWeaponCustomizationId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAnimInstance_GetWeaponCustomizationId) == 0x000004, "Wrong alignment on KillerAnimInstance_GetWeaponCustomizationId");
static_assert(sizeof(KillerAnimInstance_GetWeaponCustomizationId) == 0x00000C, "Wrong size on KillerAnimInstance_GetWeaponCustomizationId");
static_assert(offsetof(KillerAnimInstance_GetWeaponCustomizationId, ReturnValue) == 0x000000, "Member 'KillerAnimInstance_GetWeaponCustomizationId::ReturnValue' has a wrong offset!");

// Function DBDAnimation.LookAtTargetKillerSubAnimInstance.OnChaseEnded
// 0x0010 (0x0010 - 0x0000)
struct LookAtTargetKillerSubAnimInstance_OnChaseEnded final
{
public:
	class ADBDPlayer*                             target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         chaseTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LookAtTargetKillerSubAnimInstance_OnChaseEnded) == 0x000008, "Wrong alignment on LookAtTargetKillerSubAnimInstance_OnChaseEnded");
static_assert(sizeof(LookAtTargetKillerSubAnimInstance_OnChaseEnded) == 0x000010, "Wrong size on LookAtTargetKillerSubAnimInstance_OnChaseEnded");
static_assert(offsetof(LookAtTargetKillerSubAnimInstance_OnChaseEnded, target) == 0x000000, "Member 'LookAtTargetKillerSubAnimInstance_OnChaseEnded::target' has a wrong offset!");
static_assert(offsetof(LookAtTargetKillerSubAnimInstance_OnChaseEnded, chaseTime) == 0x000008, "Member 'LookAtTargetKillerSubAnimInstance_OnChaseEnded::chaseTime' has a wrong offset!");

// Function DBDAnimation.LookAtTargetKillerSubAnimInstance.OnChaseStarted
// 0x0008 (0x0008 - 0x0000)
struct LookAtTargetKillerSubAnimInstance_OnChaseStarted final
{
public:
	class ADBDPlayer*                             target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LookAtTargetKillerSubAnimInstance_OnChaseStarted) == 0x000008, "Wrong alignment on LookAtTargetKillerSubAnimInstance_OnChaseStarted");
static_assert(sizeof(LookAtTargetKillerSubAnimInstance_OnChaseStarted) == 0x000008, "Wrong size on LookAtTargetKillerSubAnimInstance_OnChaseStarted");
static_assert(offsetof(LookAtTargetKillerSubAnimInstance_OnChaseStarted, target) == 0x000000, "Member 'LookAtTargetKillerSubAnimInstance_OnChaseStarted::target' has a wrong offset!");

// Function DBDAnimation.PalletAnimInstance.OnBeingDestroyedStarted
// 0x0008 (0x0008 - 0x0000)
struct PalletAnimInstance_OnBeingDestroyedStarted final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletAnimInstance_OnBeingDestroyedStarted) == 0x000008, "Wrong alignment on PalletAnimInstance_OnBeingDestroyedStarted");
static_assert(sizeof(PalletAnimInstance_OnBeingDestroyedStarted) == 0x000008, "Wrong size on PalletAnimInstance_OnBeingDestroyedStarted");
static_assert(offsetof(PalletAnimInstance_OnBeingDestroyedStarted, player) == 0x000000, "Member 'PalletAnimInstance_OnBeingDestroyedStarted::player' has a wrong offset!");

// Function DBDAnimation.PalletAnimInstance.OnBeingPulledUpStarted
// 0x0008 (0x0008 - 0x0000)
struct PalletAnimInstance_OnBeingPulledUpStarted final
{
public:
	class ADBDPlayer*                             player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletAnimInstance_OnBeingPulledUpStarted) == 0x000008, "Wrong alignment on PalletAnimInstance_OnBeingPulledUpStarted");
static_assert(sizeof(PalletAnimInstance_OnBeingPulledUpStarted) == 0x000008, "Wrong size on PalletAnimInstance_OnBeingPulledUpStarted");
static_assert(offsetof(PalletAnimInstance_OnBeingPulledUpStarted, player) == 0x000000, "Member 'PalletAnimInstance_OnBeingPulledUpStarted::player' has a wrong offset!");

// Function DBDAnimation.SkillCheckFailureTracker.OnSkillCheckFailed
// 0x0038 (0x0038 - 0x0000)
struct SkillCheckFailureTracker_OnSkillCheckFailed final
{
public:
	struct FGameplayTag                           gameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         gameEventData;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheckFailureTracker_OnSkillCheckFailed) == 0x000008, "Wrong alignment on SkillCheckFailureTracker_OnSkillCheckFailed");
static_assert(sizeof(SkillCheckFailureTracker_OnSkillCheckFailed) == 0x000038, "Wrong size on SkillCheckFailureTracker_OnSkillCheckFailed");
static_assert(offsetof(SkillCheckFailureTracker_OnSkillCheckFailed, gameEventType) == 0x000000, "Member 'SkillCheckFailureTracker_OnSkillCheckFailed::gameEventType' has a wrong offset!");
static_assert(offsetof(SkillCheckFailureTracker_OnSkillCheckFailed, gameEventData) == 0x000010, "Member 'SkillCheckFailureTracker_OnSkillCheckFailed::gameEventData' has a wrong offset!");

// Function DBDAnimation.SurvivorAnimInstance.AddAudioRepairRateRadius
// 0x0004 (0x0004 - 0x0000)
struct SurvivorAnimInstance_AddAudioRepairRateRadius final
{
public:
	int32                                         distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorAnimInstance_AddAudioRepairRateRadius) == 0x000004, "Wrong alignment on SurvivorAnimInstance_AddAudioRepairRateRadius");
static_assert(sizeof(SurvivorAnimInstance_AddAudioRepairRateRadius) == 0x000004, "Wrong size on SurvivorAnimInstance_AddAudioRepairRateRadius");
static_assert(offsetof(SurvivorAnimInstance_AddAudioRepairRateRadius, distance) == 0x000000, "Member 'SurvivorAnimInstance_AddAudioRepairRateRadius::distance' has a wrong offset!");

// Function DBDAnimation.SurvivorAnimInstance.SetAudioRummageAkEvent
// 0x000C (0x000C - 0x0000)
struct SurvivorAnimInstance_SetAudioRummageAkEvent final
{
public:
	class FName                                   distance;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorAnimInstance_SetAudioRummageAkEvent) == 0x000004, "Wrong alignment on SurvivorAnimInstance_SetAudioRummageAkEvent");
static_assert(sizeof(SurvivorAnimInstance_SetAudioRummageAkEvent) == 0x00000C, "Wrong size on SurvivorAnimInstance_SetAudioRummageAkEvent");
static_assert(offsetof(SurvivorAnimInstance_SetAudioRummageAkEvent, distance) == 0x000000, "Member 'SurvivorAnimInstance_SetAudioRummageAkEvent::distance' has a wrong offset!");

// Function DBDAnimation.WakerObjectAnimInstance.GetWakerObject
// 0x0008 (0x0008 - 0x0000)
struct WakerObjectAnimInstance_GetWakerObject final
{
public:
	class AWakerObject*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObjectAnimInstance_GetWakerObject) == 0x000008, "Wrong alignment on WakerObjectAnimInstance_GetWakerObject");
static_assert(sizeof(WakerObjectAnimInstance_GetWakerObject) == 0x000008, "Wrong size on WakerObjectAnimInstance_GetWakerObject");
static_assert(offsetof(WakerObjectAnimInstance_GetWakerObject, ReturnValue) == 0x000000, "Member 'WakerObjectAnimInstance_GetWakerObject::ReturnValue' has a wrong offset!");

// Function DBDAnimation.WakerObjectAnimInstance.GetWakerObjectCharge
// 0x0004 (0x0004 - 0x0000)
struct WakerObjectAnimInstance_GetWakerObjectCharge final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObjectAnimInstance_GetWakerObjectCharge) == 0x000004, "Wrong alignment on WakerObjectAnimInstance_GetWakerObjectCharge");
static_assert(sizeof(WakerObjectAnimInstance_GetWakerObjectCharge) == 0x000004, "Wrong size on WakerObjectAnimInstance_GetWakerObjectCharge");
static_assert(offsetof(WakerObjectAnimInstance_GetWakerObjectCharge, ReturnValue) == 0x000000, "Member 'WakerObjectAnimInstance_GetWakerObjectCharge::ReturnValue' has a wrong offset!");

// Function DBDAnimation.WakerObjectAnimInstance.GetWakerObjectChargeComplete
// 0x0001 (0x0001 - 0x0000)
struct WakerObjectAnimInstance_GetWakerObjectChargeComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObjectAnimInstance_GetWakerObjectChargeComplete) == 0x000001, "Wrong alignment on WakerObjectAnimInstance_GetWakerObjectChargeComplete");
static_assert(sizeof(WakerObjectAnimInstance_GetWakerObjectChargeComplete) == 0x000001, "Wrong size on WakerObjectAnimInstance_GetWakerObjectChargeComplete");
static_assert(offsetof(WakerObjectAnimInstance_GetWakerObjectChargeComplete, ReturnValue) == 0x000000, "Member 'WakerObjectAnimInstance_GetWakerObjectChargeComplete::ReturnValue' has a wrong offset!");

// Function DBDAnimation.WakerObjectAnimInstance.GetWakerObjectStarted
// 0x0001 (0x0001 - 0x0000)
struct WakerObjectAnimInstance_GetWakerObjectStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObjectAnimInstance_GetWakerObjectStarted) == 0x000001, "Wrong alignment on WakerObjectAnimInstance_GetWakerObjectStarted");
static_assert(sizeof(WakerObjectAnimInstance_GetWakerObjectStarted) == 0x000001, "Wrong size on WakerObjectAnimInstance_GetWakerObjectStarted");
static_assert(offsetof(WakerObjectAnimInstance_GetWakerObjectStarted, ReturnValue) == 0x000000, "Member 'WakerObjectAnimInstance_GetWakerObjectStarted::ReturnValue' has a wrong offset!");

}

